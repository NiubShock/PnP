

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Tue Apr 27 16:13:31 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    72                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    73                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    74                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    75  0000                     
    76                           ; Version 2.20
    77                           ; Generated 12/02/2020 GMT
    78                           ; 
    79                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    80                           ; All rights reserved.
    81                           ; 
    82                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    83                           ; 
    84                           ; Redistribution and use in source and binary forms, with or without modification, are
    85                           ; permitted provided that the following conditions are met:
    86                           ; 
    87                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    88                           ;        conditions and the following disclaimer.
    89                           ; 
    90                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    91                           ;        of conditions and the following disclaimer in the documentation and/or other
    92                           ;        materials provided with the distribution.
    93                           ; 
    94                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    95                           ;        software without specific prior written permission.
    96                           ; 
    97                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    98                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    99                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   100                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   101                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   102                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   103                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   104                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   105                           ; 
   106                           ; 
   107                           ; Code-generator required, PIC18F452 Definitions
   108                           ; 
   109                           ; SFR Addresses
   110  0000                     
   111                           	psect	idataCOMRAM
   112  00254E                     __pidataCOMRAM:
   113                           	callstack 0
   114                           
   115                           ;initializer for _motCounter
   116  00254E  00                 	db	0
   117  00254F  01                 	db	1
   118  002550  00                 	db	0
   119  002551  01                 	db	1
   120  002552  00                 	db	0
   121  002553  01                 	db	1
   122                           
   123                           ;initializer for storeData@mexLength
   124  002554  05                 	db	5
   125                           
   126                           	psect	idataBANK0
   127  0022BC                     __pidataBANK0:
   128                           	callstack 0
   129                           
   130                           ;initializer for rotateObj@rotSequence
   131  0022BC  24                 	db	36
   132  0022BD  0C                 	db	12
   133  0022BE  18                 	db	24
   134  0022BF  30                 	db	48
   135                           
   136                           ;initializer for _stepMot3
   137  0022C0  09                 	db	9
   138  0022C1  03                 	db	3
   139  0022C2  06                 	db	6
   140  0022C3  0C                 	db	12
   141                           
   142                           ;initializer for _stepMot2
   143  0022C4  11                 	db	17
   144  0022C5  05                 	db	5
   145  0022C6  0C                 	db	12
   146  0022C7  18                 	db	24
   147                           
   148                           ;initializer for _stepMot1
   149  0022C8  22                 	db	34
   150  0022C9  06                 	db	6
   151  0022CA  0C                 	db	12
   152  0022CB  28                 	db	40
   153                           
   154                           ;initializer for _maxY
   155  0022CC  00C9               	dw	201
   156                           
   157                           ;initializer for _maxX
   158  0022CE  00C9               	dw	201
   159                           
   160                           ;initializer for _errString_Feed
   161  0022D0  45                 	db	69
   162  0022D1  72                 	db	114
   163  0022D2  72                 	db	114
   164  0022D3  6F                 	db	111
   165  0022D4  72                 	db	114
   166  0022D5  2C                 	db	44
   167  0022D6  20                 	db	32
   168  0022D7  66                 	db	102
   169  0022D8  65                 	db	101
   170  0022D9  65                 	db	101
   171  0022DA  64                 	db	100
   172  0022DB  20                 	db	32
   173  0022DC  6C                 	db	108
   174  0022DD  69                 	db	105
   175  0022DE  6E                 	db	110
   176  0022DF  65                 	db	101
   177  0022E0  20                 	db	32
   178  0022E1  6E                 	db	110
   179  0022E2  6F                 	db	111
   180  0022E3  74                 	db	116
   181  0022E4  20                 	db	32
   182  0022E5  64                 	db	100
   183  0022E6  65                 	db	101
   184  0022E7  66                 	db	102
   185  0022E8  69                 	db	105
   186  0022E9  6E                 	db	110
   187  0022EA  65                 	db	101
   188  0022EB  64                 	db	100
   189  0022EC  0A                 	db	10
   190  0022ED  00                 	db	0
   191                           
   192                           ;initializer for _errString_Command
   193  0022EE  43                 	db	67
   194  0022EF  6F                 	db	111
   195  0022F0  6D                 	db	109
   196  0022F1  6D                 	db	109
   197  0022F2  61                 	db	97
   198  0022F3  6E                 	db	110
   199  0022F4  64                 	db	100
   200  0022F5  20                 	db	32
   201  0022F6  6E                 	db	110
   202  0022F7  6F                 	db	111
   203  0022F8  74                 	db	116
   204  0022F9  20                 	db	32
   205  0022FA  72                 	db	114
   206  0022FB  65                 	db	101
   207  0022FC  63                 	db	99
   208  0022FD  6F                 	db	111
   209  0022FE  67                 	db	103
   210  0022FF  6E                 	db	110
   211  002300  69                 	db	105
   212  002301  7A                 	db	122
   213  002302  65                 	db	101
   214  002303  64                 	db	100
   215  002304  0A                 	db	10
   216  002305  00                 	db	0
   217                           
   218                           	psect	idataBANK1
   219  001EB2                     __pidataBANK1:
   220                           	callstack 0
   221                           
   222                           ;initializer for _errString_PointZ
   223  001EB2  45                 	db	69
   224  001EB3  72                 	db	114
   225  001EB4  72                 	db	114
   226  001EB5  6F                 	db	111
   227  001EB6  72                 	db	114
   228  001EB7  2C                 	db	44
   229  001EB8  20                 	db	32
   230  001EB9  74                 	db	116
   231  001EBA  69                 	db	105
   232  001EBB  6D                 	db	109
   233  001EBC  65                 	db	101
   234  001EBD  20                 	db	32
   235  001EBE  65                 	db	101
   236  001EBF  78                 	db	120
   237  001EC0  63                 	db	99
   238  001EC1  65                 	db	101
   239  001EC2  65                 	db	101
   240  001EC3  64                 	db	100
   241  001EC4  65                 	db	101
   242  001EC5  64                 	db	100
   243  001EC6  20                 	db	32
   244  001EC7  74                 	db	116
   245  001EC8  6F                 	db	111
   246  001EC9  20                 	db	32
   247  001ECA  72                 	db	114
   248  001ECB  65                 	db	101
   249  001ECC  61                 	db	97
   250  001ECD  63                 	db	99
   251  001ECE  68                 	db	104
   252  001ECF  20                 	db	32
   253  001ED0  74                 	db	116
   254  001ED1  68                 	db	104
   255  001ED2  65                 	db	101
   256  001ED3  20                 	db	32
   257  001ED4  65                 	db	101
   258  001ED5  6E                 	db	110
   259  001ED6  64                 	db	100
   260  001ED7  20                 	db	32
   261  001ED8  6F                 	db	111
   262  001ED9  66                 	db	102
   263  001EDA  20                 	db	32
   264  001EDB  74                 	db	116
   265  001EDC  68                 	db	104
   266  001EDD  65                 	db	101
   267  001EDE  20                 	db	32
   268  001EDF  5A                 	db	90
   269  001EE0  20                 	db	32
   270  001EE1  41                 	db	65
   271  001EE2  78                 	db	120
   272  001EE3  69                 	db	105
   273  001EE4  73                 	db	115
   274  001EE5  0A                 	db	10
   275  001EE6  00                 	db	0
   276                           
   277                           ;initializer for _errString_Point
   278  001EE7  45                 	db	69
   279  001EE8  72                 	db	114
   280  001EE9  72                 	db	114
   281  001EEA  6F                 	db	111
   282  001EEB  72                 	db	114
   283  001EEC  2C                 	db	44
   284  001EED  20                 	db	32
   285  001EEE  74                 	db	116
   286  001EEF  69                 	db	105
   287  001EF0  6D                 	db	109
   288  001EF1  65                 	db	101
   289  001EF2  20                 	db	32
   290  001EF3  65                 	db	101
   291  001EF4  78                 	db	120
   292  001EF5  63                 	db	99
   293  001EF6  65                 	db	101
   294  001EF7  65                 	db	101
   295  001EF8  64                 	db	100
   296  001EF9  65                 	db	101
   297  001EFA  64                 	db	100
   298  001EFB  20                 	db	32
   299  001EFC  74                 	db	116
   300  001EFD  6F                 	db	111
   301  001EFE  20                 	db	32
   302  001EFF  72                 	db	114
   303  001F00  65                 	db	101
   304  001F01  61                 	db	97
   305  001F02  63                 	db	99
   306  001F03  68                 	db	104
   307  001F04  20                 	db	32
   308  001F05  74                 	db	116
   309  001F06  68                 	db	104
   310  001F07  65                 	db	101
   311  001F08  20                 	db	32
   312  001F09  70                 	db	112
   313  001F0A  6F                 	db	111
   314  001F0B  69                 	db	105
   315  001F0C  6E                 	db	110
   316  001F0D  74                 	db	116
   317  001F0E  0A                 	db	10
   318  001F0F  00                 	db	0
   319                           
   320                           ;initializer for _errString_ZEND
   321  001F10  45                 	db	69
   322  001F11  72                 	db	114
   323  001F12  72                 	db	114
   324  001F13  6F                 	db	111
   325  001F14  72                 	db	114
   326  001F15  2C                 	db	44
   327  001F16  20                 	db	32
   328  001F17  6E                 	db	110
   329  001F18  6F                 	db	111
   330  001F19  20                 	db	32
   331  001F1A  6F                 	db	111
   332  001F1B  62                 	db	98
   333  001F1C  6A                 	db	106
   334  001F1D  65                 	db	101
   335  001F1E  63                 	db	99
   336  001F1F  74                 	db	116
   337  001F20  20                 	db	32
   338  001F21  72                 	db	114
   339  001F22  65                 	db	101
   340  001F23  6C                 	db	108
   341  001F24  65                 	db	101
   342  001F25  76                 	db	118
   343  001F26  61                 	db	97
   344  001F27  74                 	db	116
   345  001F28  65                 	db	101
   346  001F29  64                 	db	100
   347  001F2A  20                 	db	32
   348  001F2B  61                 	db	97
   349  001F2C  6C                 	db	108
   350  001F2D  6F                 	db	111
   351  001F2E  6E                 	db	110
   352  001F2F  67                 	db	103
   353  001F30  20                 	db	32
   354  001F31  5A                 	db	90
   355  001F32  20                 	db	32
   356  001F33  41                 	db	65
   357  001F34  78                 	db	120
   358  001F35  69                 	db	105
   359  001F36  73                 	db	115
   360  001F37  0A                 	db	10
   361  001F38  00                 	db	0
   362                           
   363                           ;initializer for _errString_Reset
   364  001F39  45                 	db	69
   365  001F3A  72                 	db	114
   366  001F3B  72                 	db	114
   367  001F3C  6F                 	db	111
   368  001F3D  72                 	db	114
   369  001F3E  2C                 	db	44
   370  001F3F  20                 	db	32
   371  001F40  74                 	db	116
   372  001F41  69                 	db	105
   373  001F42  6D                 	db	109
   374  001F43  65                 	db	101
   375  001F44  20                 	db	32
   376  001F45  65                 	db	101
   377  001F46  78                 	db	120
   378  001F47  63                 	db	99
   379  001F48  65                 	db	101
   380  001F49  65                 	db	101
   381  001F4A  64                 	db	100
   382  001F4B  65                 	db	101
   383  001F4C  64                 	db	100
   384  001F4D  20                 	db	32
   385  001F4E  74                 	db	116
   386  001F4F  6F                 	db	111
   387  001F50  20                 	db	32
   388  001F51  72                 	db	114
   389  001F52  65                 	db	101
   390  001F53  73                 	db	115
   391  001F54  65                 	db	101
   392  001F55  74                 	db	116
   393  001F56  20                 	db	32
   394  001F57  70                 	db	112
   395  001F58  6F                 	db	111
   396  001F59  73                 	db	115
   397  001F5A  69                 	db	105
   398  001F5B  74                 	db	116
   399  001F5C  69                 	db	105
   400  001F5D  6F                 	db	111
   401  001F5E  6E                 	db	110
   402  001F5F  0A                 	db	10
   403  001F60  00                 	db	0
   404                           
   405                           ;initializer for _errString_Fatal
   406  001F61  46                 	db	70
   407  001F62  61                 	db	97
   408  001F63  74                 	db	116
   409  001F64  61                 	db	97
   410  001F65  6C                 	db	108
   411  001F66  20                 	db	32
   412  001F67  45                 	db	69
   413  001F68  72                 	db	114
   414  001F69  72                 	db	114
   415  001F6A  6F                 	db	111
   416  001F6B  72                 	db	114
   417  001F6C  2C                 	db	44
   418  001F6D  20                 	db	32
   419  001F6E  70                 	db	112
   420  001F6F  6C                 	db	108
   421  001F70  65                 	db	101
   422  001F71  61                 	db	97
   423  001F72  73                 	db	115
   424  001F73  65                 	db	101
   425  001F74  20                 	db	32
   426  001F75  72                 	db	114
   427  001F76  65                 	db	101
   428  001F77  73                 	db	115
   429  001F78  65                 	db	101
   430  001F79  74                 	db	116
   431  001F7A  20                 	db	32
   432  001F7B  74                 	db	116
   433  001F7C  68                 	db	104
   434  001F7D  65                 	db	101
   435  001F7E  20                 	db	32
   436  001F7F  64                 	db	100
   437  001F80  65                 	db	101
   438  001F81  76                 	db	118
   439  001F82  69                 	db	105
   440  001F83  63                 	db	99
   441  001F84  65                 	db	101
   442  001F85  21                 	db	33
   443  001F86  0A                 	db	10
   444  001F87  00                 	db	0
   445                           
   446                           ;initializer for _errString_Bound
   447  001F88  45                 	db	69
   448  001F89  72                 	db	114
   449  001F8A  72                 	db	114
   450  001F8B  6F                 	db	111
   451  001F8C  72                 	db	114
   452  001F8D  2C                 	db	44
   453  001F8E  20                 	db	32
   454  001F8F  70                 	db	112
   455  001F90  6F                 	db	111
   456  001F91  69                 	db	105
   457  001F92  6E                 	db	110
   458  001F93  74                 	db	116
   459  001F94  20                 	db	32
   460  001F95  6F                 	db	111
   461  001F96  75                 	db	117
   462  001F97  74                 	db	116
   463  001F98  73                 	db	115
   464  001F99  69                 	db	105
   465  001F9A  64                 	db	100
   466  001F9B  65                 	db	101
   467  001F9C  20                 	db	32
   468  001F9D  62                 	db	98
   469  001F9E  6F                 	db	111
   470  001F9F  75                 	db	117
   471  001FA0  6E                 	db	110
   472  001FA1  64                 	db	100
   473  001FA2  61                 	db	97
   474  001FA3  72                 	db	114
   475  001FA4  69                 	db	105
   476  001FA5  65                 	db	101
   477  001FA6  73                 	db	115
   478  001FA7  0A                 	db	10
   479  001FA8  00                 	db	0
   480                           
   481                           	psect	smallconst
   482  000600                     __psmallconst:
   483                           	callstack 0
   484  000600  00                 	db	0
   485  000601  FFAC               	dw	65452
   486  000603  3DB3               	dw	15795
   487  000605                     __end_ofrotateObj@stepAngle:
   488                           	callstack 0
   489  000605  0400               	dw	1024
   490  000607                     __end_of_therm_pressure:
   491                           	callstack 0
   492  000607  0200               	dw	512
   493  000609                     __end_of_touch_pressure:
   494                           	callstack 0
   495  000609                     _feeder3Pos:
   496                           	callstack 0
   497  000609  1E                 	db	30
   498  00060A  96                 	db	150
   499  00060B                     __end_of_feeder3Pos:
   500                           	callstack 0
   501  00060B                     _feeder2Pos:
   502                           	callstack 0
   503  00060B  1E                 	db	30
   504  00060C  64                 	db	100
   505  00060D                     __end_of_feeder2Pos:
   506                           	callstack 0
   507  00060D                     _feeder1Pos:
   508                           	callstack 0
   509  00060D  1E                 	db	30
   510  00060E  32                 	db	50
   511  00060F                     __end_of_feeder1Pos:
   512                           	callstack 0
   513  00060F  C8                 	db	200
   514  000610                     __end_of_maxFeedY:
   515                           	callstack 0
   516  000610  3C                 	db	60
   517  000611                     __end_of_maxFeedX:
   518                           	callstack 0
   519  0000                     _TMR0	set	4054
   520  0000                     _T1CONbits	set	4045
   521  0000                     _TXREG	set	4013
   522  0000                     _SPBRG	set	4015
   523  0000                     _TXSTAbits	set	4012
   524  0000                     _TRISCbits	set	3988
   525  0000                     _RCREG1	set	4014
   526  0000                     _ADRESH	set	4036
   527  0000                     _ADRESL	set	4035
   528  0000                     _PIR1bits	set	3998
   529  0000                     _RCONbits	set	4048
   530  0000                     _INTCONbits	set	4082
   531  0000                     _IPR1bits	set	3999
   532  0000                     _PIE1bits	set	3997
   533  0000                     _ADCON0bits	set	4034
   534  0000                     _RCSTAbits	set	4011
   535  0000                     _RCSTA1bits	set	4011
   536  0000                     _LATD	set	3980
   537  0000                     _PORTDbits	set	3971
   538  0000                     _TMR2	set	4044
   539  0000                     _LATC	set	3979
   540  0000                     _LATB	set	3978
   541  0000                     _LATA	set	3977
   542  0000                     _PORTEbits	set	3972
   543  0000                     _T0CONbits	set	4053
   544  0000                     _T2CONbits	set	4042
   545  0000                     _LATDbits	set	3980
   546  0000                     _LATCbits	set	3979
   547  0000                     _LATBbits	set	3978
   548  0000                     _LATAbits	set	3977
   549  0000                     _TRISDbits	set	3989
   550  0000                     _TRISEbits	set	3990
   551  0000                     _TRISD	set	3989
   552  0000                     _TRISC	set	3988
   553  0000                     _TRISB	set	3987
   554  0000                     _TRISA	set	3986
   555  0000                     _ADCON1bits	set	4033
   556  000611  00                 	db	0	; dummy byte at the end
   557  0000                     
   558                           ; #config settings
   559                           
   560                           	psect	cinit
   561  00213A                     __pcinit:
   562                           	callstack 0
   563  00213A                     start_initialization:
   564                           	callstack 0
   565  00213A                     __initialization:
   566                           	callstack 0
   567                           
   568                           ; Initialize objects allocated to BANK1 (247 bytes)
   569                           ; load TBLPTR registers with __pidataBANK1
   570  00213A  0EB2               	movlw	low __pidataBANK1
   571  00213C  6EF6               	movwf	tblptrl,c
   572  00213E  0E1E               	movlw	high __pidataBANK1
   573  002140  6EF7               	movwf	tblptrh,c
   574  002142  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   575  002144  6EF8               	movwf	tblptru,c
   576  002146  EE01  F000         	lfsr	0,__pdataBANK1
   577  00214A  EE10 F0F7          	lfsr	1,247
   578  00214E                     copy_data0:
   579  00214E  0009               	tblrd		*+
   580  002150  CFF5 FFEE          	movff	tablat,postinc0
   581  002154  50E5               	movf	postdec1,w,c
   582  002156  50E1               	movf	fsr1l,w,c
   583  002158  E1FA               	bnz	copy_data0
   584                           
   585                           ; Initialize objects allocated to BANK0 (74 bytes)
   586                           ; load TBLPTR registers with __pidataBANK0
   587  00215A  0EBC               	movlw	low __pidataBANK0
   588  00215C  6EF6               	movwf	tblptrl,c
   589  00215E  0E22               	movlw	high __pidataBANK0
   590  002160  6EF7               	movwf	tblptrh,c
   591  002162  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   592  002164  6EF8               	movwf	tblptru,c
   593  002166  EE00  F080         	lfsr	0,__pdataBANK0
   594  00216A  EE10 F04A          	lfsr	1,74
   595  00216E                     copy_data1:
   596  00216E  0009               	tblrd		*+
   597  002170  CFF5 FFEE          	movff	tablat,postinc0
   598  002174  50E5               	movf	postdec1,w,c
   599  002176  50E1               	movf	fsr1l,w,c
   600  002178  E1FA               	bnz	copy_data1
   601                           
   602                           ; Initialize objects allocated to COMRAM (7 bytes)
   603                           ; load TBLPTR registers with __pidataCOMRAM
   604  00217A  0E4E               	movlw	low __pidataCOMRAM
   605  00217C  6EF6               	movwf	tblptrl,c
   606  00217E  0E25               	movlw	high __pidataCOMRAM
   607  002180  6EF7               	movwf	tblptrh,c
   608  002182  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   609  002184  6EF8               	movwf	tblptru,c
   610  002186  EE00  F067         	lfsr	0,__pdataCOMRAM
   611  00218A  EE10 F007          	lfsr	1,7
   612  00218E                     copy_data2:
   613  00218E  0009               	tblrd		*+
   614  002190  CFF5 FFEE          	movff	tablat,postinc0
   615  002194  50E5               	movf	postdec1,w,c
   616  002196  50E1               	movf	fsr1l,w,c
   617  002198  E1FA               	bnz	copy_data2
   618                           
   619                           ; Clear objects allocated to BANK0 (28 bytes)
   620  00219A  EE00  F0CA         	lfsr	0,__pbssBANK0
   621  00219E  0E1C               	movlw	28
   622  0021A0                     clear_0:
   623  0021A0  6AEE               	clrf	postinc0,c
   624  0021A2  06E8               	decf	wreg,f,c
   625  0021A4  E1FD               	bnz	clear_0
   626                           
   627                           ; Clear objects allocated to COMRAM (36 bytes)
   628  0021A6  EE00  F043         	lfsr	0,__pbssCOMRAM
   629  0021AA  0E24               	movlw	36
   630  0021AC                     clear_1:
   631  0021AC  6AEE               	clrf	postinc0,c
   632  0021AE  06E8               	decf	wreg,f,c
   633  0021B0  E1FD               	bnz	clear_1
   634  0021B2                     end_of_initialization:
   635                           	callstack 0
   636  0021B2                     __end_of__initialization:
   637                           	callstack 0
   638  0021B2  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   639  0021B4  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   640  0021B6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   641  0021B8  6EF8               	movwf	tblptru,c
   642  0021BA  0100               	movlb	0
   643  0021BC  EF49  F00A         	goto	_main	;jump to C main() function
   644                           
   645                           	psect	bssCOMRAM
   646  000043                     __pbssCOMRAM:
   647                           	callstack 0
   648  000043                     storeData@receivedMex:
   649                           	callstack 0
   650  000043                     	ds	9
   651  00004C                     _posVector:
   652                           	callstack 0
   653  00004C                     	ds	3
   654  00004F                     _pwmPeriod:
   655                           	callstack 0
   656  00004F                     	ds	2
   657  000051                     isr@single_cycle:
   658                           	callstack 0
   659  000051                     	ds	2
   660  000053                     _ADC_res:
   661                           	callstack 0
   662  000053                     	ds	2
   663  000055                     _newFeeder:
   664                           	callstack 0
   665  000055                     	ds	2
   666  000057                     _rotAngle:
   667                           	callstack 0
   668  000057                     	ds	2
   669  000059                     _tm0Error:
   670                           	callstack 0
   671  000059                     	ds	2
   672  00005B                     _stepToggle:
   673                           	callstack 0
   674  00005B                     	ds	1
   675  00005C                     _pwmStep:
   676                           	callstack 0
   677  00005C                     	ds	1
   678  00005D                     	ds	1
   679  00005E                     storeData@counter:
   680                           	callstack 0
   681  00005E                     	ds	1
   682  00005F                     __newSequence:
   683                           	callstack 0
   684  00005F                     	ds	1
   685  000060                     __fatalError:
   686                           	callstack 0
   687  000060                     	ds	1
   688  000061                     _dataCounter:
   689                           	callstack 0
   690  000061                     	ds	1
   691  000062                     isr@completeStep:
   692                           	callstack 0
   693  000062                     	ds	1
   694  000063                     isr@tm0Count:
   695                           	callstack 0
   696  000063                     	ds	1
   697  000064                     _therm_rel:
   698                           	callstack 0
   699  000064                     	ds	1
   700  000065                     _touch_rel:
   701                           	callstack 0
   702  000065                     	ds	1
   703  000066                     _tm0Limit:
   704                           	callstack 0
   705  000066                     	ds	1
   706                           
   707                           	psect	dataCOMRAM
   708  000067                     __pdataCOMRAM:
   709                           	callstack 0
   710  000067                     _motCounter:
   711                           	callstack 0
   712  000067                     	ds	6
   713  00006D                     storeData@mexLength:
   714                           	callstack 0
   715  00006D                     	ds	1
   716                           
   717                           	psect	bssBANK0
   718  0000CA                     __pbssBANK0:
   719                           	callstack 0
   720  0000CA                     _dataSequence:
   721                           	callstack 0
   722  0000CA                     	ds	20
   723  0000DE                     _newSequenceData:
   724                           	callstack 0
   725  0000DE                     	ds	8
   726                           
   727                           	psect	dataBANK0
   728  000080                     __pdataBANK0:
   729                           	callstack 0
   730  000080                     rotateObj@rotSequence:
   731                           	callstack 0
   732  000080                     	ds	4
   733  000084                     _stepMot3:
   734                           	callstack 0
   735  000084                     	ds	4
   736  000088                     _stepMot2:
   737                           	callstack 0
   738  000088                     	ds	4
   739  00008C                     _stepMot1:
   740                           	callstack 0
   741  00008C                     	ds	4
   742  000090                     	ds	2
   743  000092                     	ds	2
   744  000094                     _errString_Feed:
   745                           	callstack 0
   746  000094                     	ds	30
   747  0000B2                     _errString_Command:
   748                           	callstack 0
   749  0000B2                     	ds	24
   750                           
   751                           	psect	dataBANK1
   752  000100                     __pdataBANK1:
   753                           	callstack 0
   754  000100                     _errString_PointZ:
   755                           	callstack 0
   756  000100                     	ds	53
   757  000135                     _errString_Point:
   758                           	callstack 0
   759  000135                     	ds	41
   760  00015E                     _errString_ZEND:
   761                           	callstack 0
   762  00015E                     	ds	41
   763  000187                     _errString_Reset:
   764                           	callstack 0
   765  000187                     	ds	40
   766  0001AF                     _errString_Fatal:
   767                           	callstack 0
   768  0001AF                     	ds	39
   769  0001D6                     _errString_Bound:
   770                           	callstack 0
   771  0001D6                     	ds	33
   772                           
   773                           	psect	cstackBANK0
   774  0000E6                     __pcstackBANK0:
   775                           	callstack 0
   776  0000E6                     ??_rotateObj:
   777                           
   778                           ; 1 bytes @ 0x0
   779  0000E6                     	ds	2
   780  0000E8                     rotateObj@rotAngle:
   781                           	callstack 0
   782                           
   783                           ; 1 bytes @ 0x2
   784  0000E8                     	ds	1
   785  0000E9                     rotateObj@totStep:
   786                           	callstack 0
   787                           
   788                           ; 2 bytes @ 0x3
   789  0000E9                     	ds	2
   790  0000EB                     rotateObj@i:
   791                           	callstack 0
   792                           
   793                           ; 2 bytes @ 0x5
   794  0000EB                     	ds	2
   795  0000ED                     ??_executeData:
   796                           
   797                           ; 1 bytes @ 0x7
   798  0000ED                     	ds	2
   799  0000EF                     executeData@data:
   800                           	callstack 0
   801                           
   802                           ; 2 bytes @ 0x9
   803  0000EF                     	ds	2
   804  0000F1                     executeData@errCode:
   805                           	callstack 0
   806                           
   807                           ; 1 bytes @ 0xB
   808  0000F1                     	ds	1
   809  0000F2                     ??_main:
   810                           
   811                           ; 1 bytes @ 0xC
   812  0000F2                     	ds	2
   813  0000F4                     main@errCode:
   814                           	callstack 0
   815                           
   816                           ; 1 bytes @ 0xE
   817  0000F4                     	ds	1
   818  0000F5                     main@newData:
   819                           	callstack 0
   820                           
   821                           ; 2 bytes @ 0xF
   822  0000F5                     	ds	2
   823                           
   824                           	psect	cstackCOMRAM
   825  000001                     __pcstackCOMRAM:
   826                           	callstack 0
   827  000001                     ?_retPeriod:
   828                           	callstack 0
   829  000001                     i2uartTx@ptr:
   830                           	callstack 0
   831                           
   832                           ; 2 bytes @ 0x0
   833  000001                     	ds	2
   834  000003                     i2uartTx@length:
   835                           	callstack 0
   836                           
   837                           ; 1 bytes @ 0x2
   838  000003                     	ds	1
   839  000004                     i2uartTx@i:
   840                           	callstack 0
   841                           
   842                           ; 1 bytes @ 0x3
   843  000004                     	ds	1
   844  000005                     ??i2_printError:
   845                           
   846                           ; 1 bytes @ 0x4
   847  000005                     	ds	2
   848  000007                     i2printError@errCode:
   849                           	callstack 0
   850                           
   851                           ; 1 bytes @ 0x6
   852  000007                     	ds	1
   853  000008                     ??i2_storeData:
   854                           
   855                           ; 1 bytes @ 0x7
   856  000008                     	ds	2
   857  00000A                     i2storeData@data:
   858                           	callstack 0
   859                           
   860                           ; 1 bytes @ 0x9
   861  00000A                     	ds	1
   862  00000B                     ??_isr:
   863                           
   864                           ; 1 bytes @ 0xA
   865  00000B                     	ds	6
   866  000011                     isr@temp:
   867                           	callstack 0
   868                           
   869                           ; 1 bytes @ 0x10
   870  000011                     	ds	1
   871  000012                     ??_shiftData:
   872  000012                     ?_stepMade:
   873                           	callstack 0
   874  000012                     ?_stepCounter:
   875                           	callstack 0
   876  000012                     ?_returnTouch:
   877                           	callstack 0
   878  000012                     ?_returnTherm:
   879                           	callstack 0
   880  000012                     ?_getNewSequence:
   881                           	callstack 0
   882  000012                     ?_getData:
   883                           	callstack 0
   884  000012                     ?___xxtofl:
   885                           	callstack 0
   886  000012                     uartTx@ptr:
   887                           	callstack 0
   888  000012                     tim2Init@_pwmPeriod:
   889                           	callstack 0
   890  000012                     ___xxtofl@val:
   891                           	callstack 0
   892                           
   893                           ; 4 bytes @ 0x11
   894  000012                     	ds	2
   895  000014                     shiftData@i:
   896                           	callstack 0
   897  000014                     uartTx@length:
   898                           	callstack 0
   899  000014                     stepMade@temp:
   900                           	callstack 0
   901                           
   902                           ; 1 bytes @ 0x13
   903  000014                     	ds	1
   904  000015                     resetPosition@keepMovingX:
   905                           	callstack 0
   906  000015                     uartTx@i:
   907                           	callstack 0
   908  000015                     moveToPoint@x1:
   909                           	callstack 0
   910                           
   911                           ; 2 bytes @ 0x14
   912  000015                     	ds	1
   913  000016                     ??_printError:
   914  000016                     ??___xxtofl:
   915  000016                     resetPosition@keepMovingY:
   916                           	callstack 0
   917                           
   918                           ; 1 bytes @ 0x15
   919  000016                     	ds	1
   920  000017                     resetPosition@keepMovingZ:
   921                           	callstack 0
   922  000017                     moveToPoint@y1:
   923                           	callstack 0
   924                           
   925                           ; 2 bytes @ 0x16
   926  000017                     	ds	1
   927  000018                     printError@errCode:
   928                           	callstack 0
   929                           
   930                           ; 1 bytes @ 0x17
   931  000018                     	ds	1
   932  000019                     ??_storeData:
   933  000019                     moveToPoint@x2:
   934                           	callstack 0
   935                           
   936                           ; 2 bytes @ 0x18
   937  000019                     	ds	1
   938  00001A                     ___xxtofl@sign:
   939                           	callstack 0
   940                           
   941                           ; 1 bytes @ 0x19
   942  00001A                     	ds	1
   943  00001B                     storeData@data:
   944                           	callstack 0
   945  00001B                     ___xxtofl@exp:
   946                           	callstack 0
   947  00001B                     moveToPoint@y2:
   948                           	callstack 0
   949                           
   950                           ; 2 bytes @ 0x1A
   951  00001B                     	ds	1
   952  00001C                     ___xxtofl@arg:
   953                           	callstack 0
   954                           
   955                           ; 4 bytes @ 0x1B
   956  00001C                     	ds	1
   957  00001D                     ??_moveToPoint:
   958                           
   959                           ; 1 bytes @ 0x1C
   960  00001D                     	ds	2
   961  00001F                     moveToPoint@MOT1Direction:
   962                           	callstack 0
   963                           
   964                           ; 1 bytes @ 0x1E
   965  00001F                     	ds	1
   966  000020                     ?___fldiv:
   967                           	callstack 0
   968  000020                     moveToPoint@MOT2Direction:
   969                           	callstack 0
   970  000020                     ___fldiv@b:
   971                           	callstack 0
   972                           
   973                           ; 4 bytes @ 0x1F
   974  000020                     	ds	1
   975  000021                     moveToPoint@keepMovingX:
   976                           	callstack 0
   977                           
   978                           ; 1 bytes @ 0x20
   979  000021                     	ds	1
   980  000022                     moveToPoint@keepMovingY:
   981                           	callstack 0
   982                           
   983                           ; 1 bytes @ 0x21
   984  000022                     	ds	2
   985  000024                     ___fldiv@a:
   986                           	callstack 0
   987                           
   988                           ; 4 bytes @ 0x23
   989  000024                     	ds	4
   990  000028                     ??___fldiv:
   991                           
   992                           ; 1 bytes @ 0x27
   993  000028                     	ds	4
   994  00002C                     ___fldiv@rem:
   995                           	callstack 0
   996                           
   997                           ; 4 bytes @ 0x2B
   998  00002C                     	ds	4
   999  000030                     ___fldiv@sign:
  1000                           	callstack 0
  1001                           
  1002                           ; 1 bytes @ 0x2F
  1003  000030                     	ds	1
  1004  000031                     ___fldiv@new_exp:
  1005                           	callstack 0
  1006                           
  1007                           ; 2 bytes @ 0x30
  1008  000031                     	ds	2
  1009  000033                     ___fldiv@grs:
  1010                           	callstack 0
  1011                           
  1012                           ; 4 bytes @ 0x32
  1013  000033                     	ds	4
  1014  000037                     ___fldiv@bexp:
  1015                           	callstack 0
  1016                           
  1017                           ; 1 bytes @ 0x36
  1018  000037                     	ds	1
  1019  000038                     ___fldiv@aexp:
  1020                           	callstack 0
  1021                           
  1022                           ; 1 bytes @ 0x37
  1023  000038                     	ds	1
  1024  000039                     ?___fltol:
  1025                           	callstack 0
  1026  000039                     ___fltol@f1:
  1027                           	callstack 0
  1028                           
  1029                           ; 4 bytes @ 0x38
  1030  000039                     	ds	4
  1031  00003D                     ??___fltol:
  1032                           
  1033                           ; 1 bytes @ 0x3C
  1034  00003D                     	ds	4
  1035  000041                     ___fltol@sign1:
  1036                           	callstack 0
  1037                           
  1038                           ; 1 bytes @ 0x40
  1039  000041                     	ds	1
  1040  000042                     ___fltol@exp1:
  1041                           	callstack 0
  1042                           
  1043                           ; 1 bytes @ 0x41
  1044  000042                     	ds	1
  1045                           
  1046 ;;
  1047 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1048 ;;
  1049 ;; *************** function _main *****************
  1050 ;; Defined at:
  1051 ;;		line 19 in file "main.c"
  1052 ;; Parameters:    Size  Location     Type
  1053 ;;		None
  1054 ;; Auto vars:     Size  Location     Type
  1055 ;;  newData         2   15[BANK0 ] PTR struct .
  1056 ;;		 -> newSequenceData(8), 
  1057 ;;  errCode         1   14[BANK0 ] unsigned char 
  1058 ;; Return value:  Size  Location     Type
  1059 ;;                  1    wreg      void 
  1060 ;; Registers used:
  1061 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1062 ;; Tracked objects:
  1063 ;;		On entry : 0/0
  1064 ;;		On exit  : 0/0
  1065 ;;		Unchanged: 0/0
  1066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1067 ;;      Params:         0       0       0       0       0       0       0
  1068 ;;      Locals:         0       3       0       0       0       0       0
  1069 ;;      Temps:          0       2       0       0       0       0       0
  1070 ;;      Totals:         0       5       0       0       0       0       0
  1071 ;;Total ram usage:        5 bytes
  1072 ;; Hardware stack levels required when called:    7
  1073 ;; This function calls:
  1074 ;;		_clearTM0
  1075 ;;		_executeData
  1076 ;;		_getNewSequence
  1077 ;;		_initADC
  1078 ;;		_initPinMotors
  1079 ;;		_interruptInit
  1080 ;;		_newSequence
  1081 ;;		_printError
  1082 ;;		_readSeq
  1083 ;;		_reduceSeq
  1084 ;;		_resetNewSequence
  1085 ;;		_resetPosition
  1086 ;;		_shiftData
  1087 ;;		_storeData
  1088 ;;		_tim0Init
  1089 ;;		_tim1Init
  1090 ;;		_tim2Init
  1091 ;;		_usartInit
  1092 ;; This function is called by:
  1093 ;;		Startup code after reset
  1094 ;; This function uses a non-reentrant model
  1095 ;;
  1096                           
  1097                           	psect	text0
  1098  001492                     __ptext0:
  1099                           	callstack 0
  1100  001492                     _main:
  1101                           	callstack 24
  1102  001492  FFFF               	dw	65535	; assembler added errata NOP
  1103                           
  1104                           ;main.c: 23:     interruptInit();
  1105  001494  EC83  F011         	call	_interruptInit	;wreg free
  1106  001498                     
  1107                           ;main.c: 24:     initPinMotors();
  1108  001498  ECCD  F011         	call	_initPinMotors	;wreg free
  1109  00149C                     
  1110                           ;main.c: 25:     initADC();
  1111  00149C  ECE0  F011         	call	_initADC	;wreg free
  1112  0014A0                     
  1113                           ;main.c: 26:     usartInit();
  1114  0014A0  ECF3  F011         	call	_usartInit	;wreg free
  1115  0014A4                     
  1116                           ;main.c: 27:     tim0Init();
  1117  0014A4  EC15  F012         	call	_tim0Init	;wreg free
  1118  0014A8                     
  1119                           ;main.c: 28:     tim1Init();
  1120  0014A8  EC27  F012         	call	_tim1Init	;wreg free
  1121  0014AC                     
  1122                           ;main.c: 29:     tim2Init(10);
  1123  0014AC  0E00               	movlw	0
  1124  0014AE  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1125  0014B0  0E0A               	movlw	10
  1126  0014B2  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1127  0014B4  EC0C  F012         	call	_tim2Init	;wreg free
  1128  0014B8                     
  1129                           ;main.c: 32:     errCode = resetPosition();
  1130  0014B8  EC5B  F009         	call	_resetPosition	;wreg free
  1131  0014BC  0100               	movlb	0	; () banked
  1132  0014BE  6FF4               	movwf	main@errCode& (0+255),b
  1133  0014C0                     
  1134                           ; BSR set to: 0
  1135                           ;main.c: 33:     if(errCode != 0){
  1136  0014C0  51F4               	movf	main@errCode& (0+255),w,b
  1137  0014C2  B4D8               	btfsc	status,2,c
  1138  0014C4  EF66  F00A         	goto	u3821
  1139  0014C8  EF69  F00A         	goto	u3820
  1140  0014CC                     u3821:
  1141  0014CC  FFFF               	dw	65535	; assembler added errata NOP
  1142  0014CE  EF70  F00A         	goto	l333
  1143  0014D2                     u3820:
  1144  0014D2  FFFF               	dw	65535	; assembler added errata NOP
  1145  0014D4                     
  1146                           ; BSR set to: 0
  1147                           ;main.c: 34:         printError(errCode);
  1148  0014D4  51F4               	movf	main@errCode& (0+255),w,b
  1149  0014D6  EC33  F00D         	call	_printError
  1150  0014DA                     l334:
  1151  0014DA  FFFF               	dw	65535	; assembler added errata NOP
  1152  0014DC  EF6D  F00A         	goto	l334
  1153  0014E0                     l333:
  1154  0014E0  FFFF               	dw	65535	; assembler added errata NOP
  1155                           
  1156                           ; BSR set to: 0
  1157                           ;main.c: 39:     RCSTA1bits.CREN = 1;
  1158  0014E2  88AB               	bsf	171,4,c	;volatile
  1159  0014E4                     l4369:
  1160  0014E4  FFFF               	dw	65535	; assembler added errata NOP
  1161                           
  1162                           ;main.c: 42:         if(newSequence()){
  1163  0014E6  EC93  F012         	call	_newSequence	;wreg free
  1164  0014EA  0900               	iorlw	0
  1165  0014EC  B4D8               	btfsc	status,2,c
  1166  0014EE  EF7B  F00A         	goto	u3831
  1167  0014F2  EF7E  F00A         	goto	u3830
  1168  0014F6                     u3831:
  1169  0014F6  FFFF               	dw	65535	; assembler added errata NOP
  1170  0014F8  EF00  F00B         	goto	l4397
  1171  0014FC                     u3830:
  1172  0014FC  FFFF               	dw	65535	; assembler added errata NOP
  1173  0014FE                     
  1174                           ;main.c: 43:             t_newSequence* newData = getNewSequence();
  1175  0014FE  EC2E  F012         	call	_getNewSequence	;wreg free
  1176  001502  C012  F0F5         	movff	?_getNewSequence,main@newData
  1177  001506  C013  F0F6         	movff	?_getNewSequence+1,main@newData+1
  1178  00150A                     
  1179                           ;main.c: 45:             newFeeder[0] = newData ->init_posX;
  1180  00150A  0100               	movlb	0	; () banked
  1181  00150C  EE20 F002          	lfsr	2,2
  1182  001510  51F5               	movf	main@newData& (0+255),w,b
  1183  001512  26D9               	addwf	fsr2l,f,c
  1184  001514  51F6               	movf	(main@newData+1)& (0+255),w,b
  1185  001516  22DA               	addwfc	fsr2h,f,c
  1186  001518  50DF               	movf	indf2,w,c
  1187  00151A  6E55               	movwf	_newFeeder^0,c
  1188  00151C                     
  1189                           ; BSR set to: 0
  1190                           ;main.c: 46:             newFeeder[1] = newData ->init_posY;
  1191  00151C  EE20 F003          	lfsr	2,3
  1192  001520  51F5               	movf	main@newData& (0+255),w,b
  1193  001522  26D9               	addwf	fsr2l,f,c
  1194  001524  51F6               	movf	(main@newData+1)& (0+255),w,b
  1195  001526  22DA               	addwfc	fsr2h,f,c
  1196  001528  50DF               	movf	indf2,w,c
  1197  00152A  6E56               	movwf	(_newFeeder+1)^0,c
  1198  00152C                     
  1199                           ; BSR set to: 0
  1200                           ;main.c: 50:             RCSTAbits.CREN = 0;
  1201  00152C  98AB               	bcf	171,4,c	;volatile
  1202  00152E                     
  1203                           ; BSR set to: 0
  1204                           ;main.c: 55:             if(newData ->end_posX > maxFeedX || newData ->end_posY > maxFee
      +                          dY){
  1205  00152E  EE20 F005          	lfsr	2,5
  1206  001532  51F5               	movf	main@newData& (0+255),w,b
  1207  001534  26D9               	addwf	fsr2l,f,c
  1208  001536  51F6               	movf	(main@newData+1)& (0+255),w,b
  1209  001538  22DA               	addwfc	fsr2h,f,c
  1210  00153A  0E3D               	movlw	61
  1211  00153C  60DF               	cpfslt	indf2,c
  1212  00153E  EFA3  F00A         	goto	u3841
  1213  001542  EFA6  F00A         	goto	u3840
  1214  001546                     u3841:
  1215  001546  FFFF               	dw	65535	; assembler added errata NOP
  1216  001548  EFB6  F00A         	goto	l4383
  1217  00154C                     u3840:
  1218  00154C  FFFF               	dw	65535	; assembler added errata NOP
  1219  00154E                     
  1220                           ; BSR set to: 0
  1221  00154E  EE20 F006          	lfsr	2,6
  1222  001552  51F5               	movf	main@newData& (0+255),w,b
  1223  001554  26D9               	addwf	fsr2l,f,c
  1224  001556  51F6               	movf	(main@newData+1)& (0+255),w,b
  1225  001558  22DA               	addwfc	fsr2h,f,c
  1226  00155A  0EC8               	movlw	200
  1227  00155C  64DF               	cpfsgt	indf2,c
  1228  00155E  EFB3  F00A         	goto	u3851
  1229  001562  EFB6  F00A         	goto	u3850
  1230  001566                     u3851:
  1231  001566  FFFF               	dw	65535	; assembler added errata NOP
  1232  001568  EFBB  F00A         	goto	l4385
  1233  00156C                     u3850:
  1234  00156C                     l4383:
  1235  00156C  FFFF               	dw	65535	; assembler added errata NOP
  1236                           
  1237                           ; BSR set to: 0
  1238                           ;main.c: 56:                 errCode = 5;
  1239  00156E  0E05               	movlw	5
  1240  001570  6FF4               	movwf	main@errCode& (0+255),b
  1241                           
  1242                           ;main.c: 57:             }else{
  1243  001572  EFCF  F00A         	goto	l4387
  1244  001576                     l4385:
  1245  001576  FFFF               	dw	65535	; assembler added errata NOP
  1246                           
  1247                           ; BSR set to: 0
  1248                           ;main.c: 58:                 storeData(newData ->end_posX);
  1249  001578  EE20 F005          	lfsr	2,5
  1250  00157C  51F5               	movf	main@newData& (0+255),w,b
  1251  00157E  26D9               	addwf	fsr2l,f,c
  1252  001580  51F6               	movf	(main@newData+1)& (0+255),w,b
  1253  001582  22DA               	addwfc	fsr2h,f,c
  1254  001584  50DF               	movf	indf2,w,c
  1255  001586  EC1E  F00B         	call	_storeData
  1256                           
  1257                           ;main.c: 59:                 storeData(newData ->end_posY);
  1258  00158A  0100               	movlb	0	; () banked
  1259  00158C  EE20 F006          	lfsr	2,6
  1260  001590  51F5               	movf	main@newData& (0+255),w,b
  1261  001592  26D9               	addwf	fsr2l,f,c
  1262  001594  51F6               	movf	(main@newData+1)& (0+255),w,b
  1263  001596  22DA               	addwfc	fsr2h,f,c
  1264  001598  50DF               	movf	indf2,w,c
  1265  00159A  EC1E  F00B         	call	_storeData
  1266  00159E                     l4387:
  1267  00159E  FFFF               	dw	65535	; assembler added errata NOP
  1268                           
  1269                           ;main.c: 63:             if(errCode == 0){
  1270  0015A0  0100               	movlb	0	; () banked
  1271  0015A2  51F4               	movf	main@errCode& (0+255),w,b
  1272  0015A4  A4D8               	btfss	status,2,c
  1273  0015A6  EFD7  F00A         	goto	u3861
  1274  0015AA  EFDA  F00A         	goto	u3860
  1275  0015AE                     u3861:
  1276  0015AE  FFFF               	dw	65535	; assembler added errata NOP
  1277  0015B0  EFF8  F00A         	goto	l4391
  1278  0015B4                     u3860:
  1279  0015B4  FFFF               	dw	65535	; assembler added errata NOP
  1280  0015B6                     
  1281                           ; BSR set to: 0
  1282                           ;main.c: 65:                 storeData(0);
  1283  0015B6  0E00               	movlw	0
  1284  0015B8  EC1E  F00B         	call	_storeData
  1285                           
  1286                           ;main.c: 66:                 storeData(0xFF);
  1287  0015BC  0EFF               	movlw	255
  1288  0015BE  EC1E  F00B         	call	_storeData
  1289                           
  1290                           ;main.c: 67:                 storeData(newData ->end_rot - newData ->init_rot);
  1291  0015C2  0100               	movlb	0	; () banked
  1292  0015C4  EE20 F004          	lfsr	2,4
  1293  0015C8  51F5               	movf	main@newData& (0+255),w,b
  1294  0015CA  26D9               	addwf	fsr2l,f,c
  1295  0015CC  51F6               	movf	(main@newData+1)& (0+255),w,b
  1296  0015CE  22DA               	addwfc	fsr2h,f,c
  1297  0015D0  50DF               	movf	indf2,w,c
  1298  0015D2  6FF2               	movwf	??_main& (0+255),b
  1299  0015D4  EE20 F007          	lfsr	2,7
  1300  0015D8  51F5               	movf	main@newData& (0+255),w,b
  1301  0015DA  26D9               	addwf	fsr2l,f,c
  1302  0015DC  51F6               	movf	(main@newData+1)& (0+255),w,b
  1303  0015DE  22DA               	addwfc	fsr2h,f,c
  1304  0015E0  50DF               	movf	indf2,w,c
  1305  0015E2  6FF3               	movwf	(??_main+1)& (0+255),b
  1306  0015E4  51F2               	movf	??_main& (0+255),w,b
  1307  0015E6  5DF3               	subwf	(??_main+1)& (0+255),w,b
  1308  0015E8  EC1E  F00B         	call	_storeData
  1309                           
  1310                           ;main.c: 68:             }else{
  1311  0015EC  EFFC  F00A         	goto	l4393
  1312  0015F0                     l4391:
  1313  0015F0  FFFF               	dw	65535	; assembler added errata NOP
  1314                           
  1315                           ; BSR set to: 0
  1316                           ;main.c: 69:                 printError(errCode);
  1317  0015F2  51F4               	movf	main@errCode& (0+255),w,b
  1318  0015F4  EC33  F00D         	call	_printError
  1319  0015F8                     l4393:
  1320  0015F8  FFFF               	dw	65535	; assembler added errata NOP
  1321                           
  1322                           ;main.c: 73:             RCSTAbits.CREN = 1;
  1323  0015FA  88AB               	bsf	171,4,c	;volatile
  1324  0015FC                     
  1325                           ;main.c: 76:             resetNewSequence();
  1326  0015FC  EC63  F012         	call	_resetNewSequence	;wreg free
  1327  001600                     l4397:
  1328  001600  FFFF               	dw	65535	; assembler added errata NOP
  1329                           
  1330                           ;main.c: 78:         if(readSeq()){
  1331  001602  EC8F  F012         	call	_readSeq	;wreg free
  1332  001606  0900               	iorlw	0
  1333  001608  B4D8               	btfsc	status,2,c
  1334  00160A  EF09  F00B         	goto	u3871
  1335  00160E  EF0C  F00B         	goto	u3870
  1336  001612                     u3871:
  1337  001612  FFFF               	dw	65535	; assembler added errata NOP
  1338  001614  EF72  F00A         	goto	l4369
  1339  001618                     u3870:
  1340  001618  FFFF               	dw	65535	; assembler added errata NOP
  1341  00161A                     
  1342                           ;main.c: 82:             errCode = executeData();
  1343  00161A  ECDF  F006         	call	_executeData	;wreg free
  1344  00161E  0100               	movlb	0	; () banked
  1345  001620  6FF4               	movwf	main@errCode& (0+255),b
  1346  001622                     
  1347                           ; BSR set to: 0
  1348                           ;main.c: 84:             printError(errCode);
  1349  001622  51F4               	movf	main@errCode& (0+255),w,b
  1350  001624  EC33  F00D         	call	_printError
  1351  001628                     
  1352                           ;main.c: 87:             clearTM0();
  1353  001628  EC3C  F012         	call	_clearTM0	;wreg free
  1354  00162C                     
  1355                           ;main.c: 91:             reduceSeq();
  1356  00162C  EC8B  F012         	call	_reduceSeq	;wreg free
  1357  001630                     
  1358                           ;main.c: 92:             shiftData();
  1359  001630  ECE0  F010         	call	_shiftData	;wreg free
  1360  001634  EF72  F00A         	goto	l4369
  1361  001638  EFD2  F000         	goto	start
  1362  00163C                     __end_of_main:
  1363                           	callstack 0
  1364                           
  1365 ;; *************** function _usartInit *****************
  1366 ;; Defined at:
  1367 ;;		line 92 in file "usart.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;		None
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;		None
  1372 ;; Return value:  Size  Location     Type
  1373 ;;                  1    wreg      void 
  1374 ;; Registers used:
  1375 ;;		wreg, status,2
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1381 ;;      Params:         0       0       0       0       0       0       0
  1382 ;;      Locals:         0       0       0       0       0       0       0
  1383 ;;      Temps:          0       0       0       0       0       0       0
  1384 ;;      Totals:         0       0       0       0       0       0       0
  1385 ;;Total ram usage:        0 bytes
  1386 ;; Hardware stack levels used:    1
  1387 ;; Hardware stack levels required when called:    4
  1388 ;; This function calls:
  1389 ;;		Nothing
  1390 ;; This function is called by:
  1391 ;;		_main
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           	psect	text1
  1396  0023E6                     __ptext1:
  1397                           	callstack 0
  1398  0023E6                     _usartInit:
  1399                           	callstack 0
  1400  0023E6  FFFF               	dw	65535	; assembler added errata NOP
  1401  0023E8                     
  1402                           ;usart.c: 94:     TRISCbits.TRISC6 = 0;
  1403  0023E8  9C94               	bcf	148,6,c	;volatile
  1404                           
  1405                           ;usart.c: 95:     TRISCbits.TRISC7 = 1;
  1406  0023EA  8E94               	bsf	148,7,c	;volatile
  1407                           
  1408                           ;usart.c: 97:     TXSTAbits.TX9 = 0;
  1409  0023EC  9CAC               	bcf	172,6,c	;volatile
  1410                           
  1411                           ;usart.c: 98:     TXSTAbits.TXEN = 1;
  1412  0023EE  8AAC               	bsf	172,5,c	;volatile
  1413                           
  1414                           ;usart.c: 99:     TXSTAbits.SYNC = 0;
  1415  0023F0  98AC               	bcf	172,4,c	;volatile
  1416                           
  1417                           ;usart.c: 100:     TXSTAbits.BRGH = 0;
  1418  0023F2  94AC               	bcf	172,2,c	;volatile
  1419                           
  1420                           ;usart.c: 102:     RCSTAbits.SPEN = 1;
  1421  0023F4  8EAB               	bsf	171,7,c	;volatile
  1422                           
  1423                           ;usart.c: 103:     RCSTAbits.RX9 = 0;
  1424  0023F6  9CAB               	bcf	171,6,c	;volatile
  1425                           
  1426                           ;usart.c: 104:     RCSTAbits.CREN = 0;
  1427  0023F8  98AB               	bcf	171,4,c	;volatile
  1428                           
  1429                           ;usart.c: 105:     RCSTAbits.ADDEN = 0;
  1430  0023FA  96AB               	bcf	171,3,c	;volatile
  1431  0023FC                     
  1432                           ;usart.c: 108:     SPBRG = 25;
  1433  0023FC  0E19               	movlw	25
  1434  0023FE  6EAF               	movwf	175,c	;volatile
  1435  002400  0012               	return		;funcret
  1436  002402  FFFF               	dw	65535	; errata NOP
  1437  002404                     __end_of_usartInit:
  1438                           	callstack 0
  1439                           
  1440 ;; *************** function _tim2Init *****************
  1441 ;; Defined at:
  1442 ;;		line 46 in file "timer.c"
  1443 ;; Parameters:    Size  Location     Type
  1444 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1445 ;; Auto vars:     Size  Location     Type
  1446 ;;		None
  1447 ;; Return value:  Size  Location     Type
  1448 ;;                  1    wreg      void 
  1449 ;; Registers used:
  1450 ;;		None
  1451 ;; Tracked objects:
  1452 ;;		On entry : 0/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1456 ;;      Params:         2       0       0       0       0       0       0
  1457 ;;      Locals:         0       0       0       0       0       0       0
  1458 ;;      Temps:          0       0       0       0       0       0       0
  1459 ;;      Totals:         2       0       0       0       0       0       0
  1460 ;;Total ram usage:        2 bytes
  1461 ;; Hardware stack levels used:    1
  1462 ;; Hardware stack levels required when called:    4
  1463 ;; This function calls:
  1464 ;;		Nothing
  1465 ;; This function is called by:
  1466 ;;		_main
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           	psect	text2
  1471  002418                     __ptext2:
  1472                           	callstack 0
  1473  002418                     _tim2Init:
  1474                           	callstack 0
  1475  002418  FFFF               	dw	65535	; assembler added errata NOP
  1476  00241A                     
  1477                           ;timer.c: 47:     T2CONbits.TMR2ON = 0;
  1478  00241A  94CA               	bcf	202,2,c	;volatile
  1479                           
  1480                           ;timer.c: 48:     T2CONbits.T2CKPS1 = 1;
  1481  00241C  82CA               	bsf	202,1,c	;volatile
  1482                           
  1483                           ;timer.c: 52:     pwmPeriod = _pwmPeriod;
  1484  00241E  C012  F04F         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1485  002422  C013  F050         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1486  002426  0012               	return		;funcret
  1487  002428  FFFF               	dw	65535	; errata NOP
  1488  00242A                     __end_of_tim2Init:
  1489                           	callstack 0
  1490                           
  1491 ;; *************** function _tim1Init *****************
  1492 ;; Defined at:
  1493 ;;		line 33 in file "timer.c"
  1494 ;; Parameters:    Size  Location     Type
  1495 ;;		None
  1496 ;; Auto vars:     Size  Location     Type
  1497 ;;		None
  1498 ;; Return value:  Size  Location     Type
  1499 ;;                  1    wreg      void 
  1500 ;; Registers used:
  1501 ;;		wreg, status,2
  1502 ;; Tracked objects:
  1503 ;;		On entry : 0/0
  1504 ;;		On exit  : 0/0
  1505 ;;		Unchanged: 0/0
  1506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1507 ;;      Params:         0       0       0       0       0       0       0
  1508 ;;      Locals:         0       0       0       0       0       0       0
  1509 ;;      Temps:          0       0       0       0       0       0       0
  1510 ;;      Totals:         0       0       0       0       0       0       0
  1511 ;;Total ram usage:        0 bytes
  1512 ;; Hardware stack levels used:    1
  1513 ;; Hardware stack levels required when called:    4
  1514 ;; This function calls:
  1515 ;;		Nothing
  1516 ;; This function is called by:
  1517 ;;		_main
  1518 ;; This function uses a non-reentrant model
  1519 ;;
  1520                           
  1521                           	psect	text3
  1522  00244E                     __ptext3:
  1523                           	callstack 0
  1524  00244E                     _tim1Init:
  1525                           	callstack 0
  1526  00244E  FFFF               	dw	65535	; assembler added errata NOP
  1527  002450                     
  1528                           ;timer.c: 34:     T1CONbits.T1CKPS = 0x03;
  1529  002450  0E30               	movlw	48
  1530  002452  12CD               	iorwf	205,f,c	;volatile
  1531  002454                     
  1532                           ;timer.c: 35:     T1CONbits.TMR1CS = 0;
  1533  002454  92CD               	bcf	205,1,c	;volatile
  1534  002456                     
  1535                           ;timer.c: 37:     T1CONbits.TMR1ON = 1;
  1536  002456  80CD               	bsf	205,0,c	;volatile
  1537  002458  0012               	return		;funcret
  1538  00245A  FFFF               	dw	65535	; errata NOP
  1539  00245C                     __end_of_tim1Init:
  1540                           	callstack 0
  1541                           
  1542 ;; *************** function _tim0Init *****************
  1543 ;; Defined at:
  1544 ;;		line 21 in file "timer.c"
  1545 ;; Parameters:    Size  Location     Type
  1546 ;;		None
  1547 ;; Auto vars:     Size  Location     Type
  1548 ;;		None
  1549 ;; Return value:  Size  Location     Type
  1550 ;;                  1    wreg      void 
  1551 ;; Registers used:
  1552 ;;		wreg, status,2
  1553 ;; Tracked objects:
  1554 ;;		On entry : 0/0
  1555 ;;		On exit  : 0/0
  1556 ;;		Unchanged: 0/0
  1557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1558 ;;      Params:         0       0       0       0       0       0       0
  1559 ;;      Locals:         0       0       0       0       0       0       0
  1560 ;;      Temps:          0       0       0       0       0       0       0
  1561 ;;      Totals:         0       0       0       0       0       0       0
  1562 ;;Total ram usage:        0 bytes
  1563 ;; Hardware stack levels used:    1
  1564 ;; Hardware stack levels required when called:    4
  1565 ;; This function calls:
  1566 ;;		Nothing
  1567 ;; This function is called by:
  1568 ;;		_main
  1569 ;; This function uses a non-reentrant model
  1570 ;;
  1571                           
  1572                           	psect	text4
  1573  00242A                     __ptext4:
  1574                           	callstack 0
  1575  00242A                     _tim0Init:
  1576                           	callstack 0
  1577  00242A  FFFF               	dw	65535	; assembler added errata NOP
  1578  00242C                     
  1579                           ;timer.c: 22:     T0CONbits.TMR0ON = 0;
  1580  00242C  9ED5               	bcf	213,7,c	;volatile
  1581                           
  1582                           ;timer.c: 23:     T0CONbits.T08BIT = 0;
  1583  00242E  9CD5               	bcf	213,6,c	;volatile
  1584                           
  1585                           ;timer.c: 24:     T0CONbits.T0CS = 0;
  1586  002430  9AD5               	bcf	213,5,c	;volatile
  1587                           
  1588                           ;timer.c: 25:     T0CONbits.PSA = 1;
  1589  002432  86D5               	bsf	213,3,c	;volatile
  1590  002434                     
  1591                           ;timer.c: 26:     T0CONbits.T0PS = 0x07;
  1592  002434  0E07               	movlw	7
  1593  002436  12D5               	iorwf	213,f,c	;volatile
  1594  002438  0012               	return		;funcret
  1595  00243A  FFFF               	dw	65535	; errata NOP
  1596  00243C                     __end_of_tim0Init:
  1597                           	callstack 0
  1598                           
  1599 ;; *************** function _storeData *****************
  1600 ;; Defined at:
  1601 ;;		line 164 in file "usart.c"
  1602 ;; Parameters:    Size  Location     Type
  1603 ;;  data            1    wreg     unsigned char 
  1604 ;; Auto vars:     Size  Location     Type
  1605 ;;  data            1   26[COMRAM] unsigned char 
  1606 ;; Return value:  Size  Location     Type
  1607 ;;                  1    wreg      void 
  1608 ;; Registers used:
  1609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1610 ;; Tracked objects:
  1611 ;;		On entry : 0/0
  1612 ;;		On exit  : 0/0
  1613 ;;		Unchanged: 0/0
  1614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1615 ;;      Params:         0       0       0       0       0       0       0
  1616 ;;      Locals:         1       0       0       0       0       0       0
  1617 ;;      Temps:          2       0       0       0       0       0       0
  1618 ;;      Totals:         3       0       0       0       0       0       0
  1619 ;;Total ram usage:        3 bytes
  1620 ;; Hardware stack levels used:    1
  1621 ;; Hardware stack levels required when called:    6
  1622 ;; This function calls:
  1623 ;;		_printError
  1624 ;; This function is called by:
  1625 ;;		_main
  1626 ;; This function uses a non-reentrant model
  1627 ;;
  1628                           
  1629                           	psect	text5
  1630  00163C                     __ptext5:
  1631                           	callstack 0
  1632  00163C                     _storeData:
  1633                           	callstack 0
  1634  00163C  FFFF               	dw	65535	; assembler added errata NOP
  1635                           
  1636                           ;incstack = 0
  1637                           ;storeData@data stored from wreg
  1638  00163E  6E1B               	movwf	storeData@data^0,c
  1639  001640                     
  1640                           ;usart.c: 166:     static unsigned char counter = 0;;usart.c: 167:     static unsigned c
      +                          har mexLength = 5;;usart.c: 168:     static unsigned char command;;usart.c: 169:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 173:     receivedMex[counter] = data;
  1641  001640  0E43               	movlw	low storeData@receivedMex
  1642  001642  245E               	addwf	storeData@counter^0,w,c
  1643  001644  6ED9               	movwf	fsr2l,c
  1644  001646  6ADA               	clrf	fsr2h,c
  1645  001648  0E00               	movlw	high storeData@receivedMex
  1646  00164A  22DA               	addwfc	fsr2h,f,c
  1647  00164C  C01B  FFDF         	movff	storeData@data,indf2
  1648  001650                     
  1649                           ;usart.c: 175:     counter++;
  1650  001650  2A5E               	incf	storeData@counter^0,f,c
  1651                           
  1652                           ;usart.c: 178:     switch(receivedMex[0]){
  1653  001652  EF3A  F00B         	goto	l4197
  1654  001656                     l4189:
  1655  001656  FFFF               	dw	65535	; assembler added errata NOP
  1656                           
  1657                           ;usart.c: 180:             mexLength = 5;
  1658  001658  0E05               	movlw	5
  1659  00165A  6E6D               	movwf	storeData@mexLength^0,c
  1660                           
  1661                           ;usart.c: 181:             break;
  1662  00165C  EF55  F00B         	goto	l4199
  1663  001660                     l4191:
  1664  001660  FFFF               	dw	65535	; assembler added errata NOP
  1665                           
  1666                           ;usart.c: 183:             mexLength = 9;
  1667  001662  0E09               	movlw	9
  1668  001664  6E6D               	movwf	storeData@mexLength^0,c
  1669                           
  1670                           ;usart.c: 184:             break;
  1671  001666  EF55  F00B         	goto	l4199
  1672  00166A                     l4193:
  1673  00166A  FFFF               	dw	65535	; assembler added errata NOP
  1674                           
  1675                           ;usart.c: 186:             mexLength = 1;
  1676  00166C  0E01               	movlw	1
  1677  00166E  6E6D               	movwf	storeData@mexLength^0,c
  1678                           
  1679                           ;usart.c: 187:             break;
  1680  001670  EF55  F00B         	goto	l4199
  1681  001674                     l4197:
  1682  001674  FFFF               	dw	65535	; assembler added errata NOP
  1683  001676  5043               	movf	storeData@receivedMex^0,w,c
  1684  001678  6E19               	movwf	??_storeData^0,c
  1685  00167A  6A1A               	clrf	(??_storeData+1)^0,c
  1686                           
  1687                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1688                           ; Switch size 1, requested type "simple"
  1689                           ; Number of cases is 1, Range of values is 0 to 0
  1690                           ; switch strategies available:
  1691                           ; Name         Instructions Cycles
  1692                           ; simple_byte            4     3 (average)
  1693                           ;	Chosen strategy is simple_byte
  1694  00167C  501A               	movf	(??_storeData+1)^0,w,c
  1695  00167E  0A00               	xorlw	0	; case 0
  1696  001680  B4D8               	btfsc	status,2,c
  1697  001682  EF45  F00B         	goto	l4549
  1698  001686  EF55  F00B         	goto	l4199
  1699  00168A                     l4549:
  1700  00168A  FFFF               	dw	65535	; assembler added errata NOP
  1701                           
  1702                           ; Switch size 1, requested type "simple"
  1703                           ; Number of cases is 3, Range of values is 0 to 2
  1704                           ; switch strategies available:
  1705                           ; Name         Instructions Cycles
  1706                           ; simple_byte           10     6 (average)
  1707                           ;	Chosen strategy is simple_byte
  1708  00168C  5019               	movf	??_storeData^0,w,c
  1709  00168E  0A00               	xorlw	0	; case 0
  1710  001690  B4D8               	btfsc	status,2,c
  1711  001692  EF2B  F00B         	goto	l4189
  1712  001696  0A01               	xorlw	1	; case 1
  1713  001698  B4D8               	btfsc	status,2,c
  1714  00169A  EF30  F00B         	goto	l4191
  1715  00169E  0A03               	xorlw	3	; case 2
  1716  0016A0  B4D8               	btfsc	status,2,c
  1717  0016A2  EF35  F00B         	goto	l4193
  1718  0016A6  EF55  F00B         	goto	l4199
  1719  0016AA                     l4199:
  1720  0016AA  FFFF               	dw	65535	; assembler added errata NOP
  1721                           
  1722                           ;usart.c: 194:     if(counter >= mexLength){
  1723  0016AC  506D               	movf	storeData@mexLength^0,w,c
  1724  0016AE  5C5E               	subwf	storeData@counter^0,w,c
  1725  0016B0  A0D8               	btfss	status,0,c
  1726  0016B2  EF5D  F00B         	goto	u3741
  1727  0016B6  EF60  F00B         	goto	u3740
  1728  0016BA                     u3741:
  1729  0016BA  FFFF               	dw	65535	; assembler added errata NOP
  1730  0016BC  EFD8  F00B         	goto	l588
  1731  0016C0                     u3740:
  1732  0016C0  FFFF               	dw	65535	; assembler added errata NOP
  1733  0016C2                     
  1734                           ;usart.c: 195:         counter = 0;
  1735  0016C2  0E00               	movlw	0
  1736  0016C4  6E5E               	movwf	storeData@counter^0,c
  1737                           
  1738                           ;usart.c: 198:         switch(receivedMex[0]){
  1739  0016C6  EFBD  F00B         	goto	l4221
  1740  0016CA                     l4203:
  1741  0016CA  FFFF               	dw	65535	; assembler added errata NOP
  1742                           
  1743                           ;usart.c: 200:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  1744  0016CC  5061               	movf	_dataCounter^0,w,c
  1745  0016CE  0D04               	mullw	4
  1746  0016D0  0ECA               	movlw	low _dataSequence
  1747  0016D2  24F3               	addwf	243,w,c
  1748  0016D4  6ED9               	movwf	fsr2l,c
  1749  0016D6  0E00               	movlw	high _dataSequence
  1750  0016D8  20F4               	addwfc	prodh,w,c
  1751  0016DA  6EDA               	movwf	fsr2h,c
  1752  0016DC  C044  FFDF         	movff	storeData@receivedMex+1,indf2
  1753                           
  1754                           ;usart.c: 201:                 dataSequence[dataCounter].posX = receivedMex[2] * 10;
  1755  0016E0  5061               	movf	_dataCounter^0,w,c
  1756  0016E2  0D04               	mullw	4
  1757  0016E4  0ECB               	movlw	low (_dataSequence+1)
  1758  0016E6  24F3               	addwf	243,w,c
  1759  0016E8  6ED9               	movwf	fsr2l,c
  1760  0016EA  0E00               	movlw	high (_dataSequence+1)
  1761  0016EC  20F4               	addwfc	prodh,w,c
  1762  0016EE  6EDA               	movwf	fsr2h,c
  1763  0016F0  5045               	movf	(storeData@receivedMex+2)^0,w,c
  1764  0016F2  0D0A               	mullw	10
  1765  0016F4  CFF3 FFDF          	movff	prodl,indf2
  1766                           
  1767                           ;usart.c: 202:                 dataSequence[dataCounter].posY = receivedMex[3] * 10;
  1768  0016F8  5061               	movf	_dataCounter^0,w,c
  1769  0016FA  0D04               	mullw	4
  1770  0016FC  0ECC               	movlw	low (_dataSequence+2)
  1771  0016FE  24F3               	addwf	243,w,c
  1772  001700  6ED9               	movwf	fsr2l,c
  1773  001702  0E00               	movlw	high (_dataSequence+2)
  1774  001704  20F4               	addwfc	prodh,w,c
  1775  001706  6EDA               	movwf	fsr2h,c
  1776  001708  5046               	movf	(storeData@receivedMex+3)^0,w,c
  1777  00170A  0D0A               	mullw	10
  1778  00170C  CFF3 FFDF          	movff	prodl,indf2
  1779                           
  1780                           ;usart.c: 203:                 dataSequence[dataCounter].rotation = receivedMex[4];
  1781  001710  5061               	movf	_dataCounter^0,w,c
  1782  001712  0D04               	mullw	4
  1783  001714  0ECD               	movlw	low (_dataSequence+3)
  1784  001716  24F3               	addwf	243,w,c
  1785  001718  6ED9               	movwf	fsr2l,c
  1786  00171A  0E00               	movlw	high (_dataSequence+3)
  1787  00171C  20F4               	addwfc	prodh,w,c
  1788  00171E  6EDA               	movwf	fsr2h,c
  1789  001720  C047  FFDF         	movff	storeData@receivedMex+4,indf2
  1790  001724                     
  1791                           ;usart.c: 205:                 dataCounter++;
  1792  001724  2A61               	incf	_dataCounter^0,f,c
  1793                           
  1794                           ;usart.c: 206:                 break;
  1795  001726  EFD8  F00B         	goto	l588
  1796  00172A                     l585:
  1797  00172A  FFFF               	dw	65535	; assembler added errata NOP
  1798                           
  1799                           ;usart.c: 209:                 newSequenceData.L = receivedMex[1];
  1800  00172C  C044  F0DE         	movff	storeData@receivedMex+1,_newSequenceData
  1801                           
  1802                           ;usart.c: 210:                 newSequenceData.W = receivedMex[2];
  1803  001730  C045  F0DF         	movff	storeData@receivedMex+2,_newSequenceData+1
  1804  001734                     
  1805                           ;usart.c: 211:                 newSequenceData.init_posX = receivedMex[3] * 10;
  1806  001734  5046               	movf	(storeData@receivedMex+3)^0,w,c
  1807  001736  0D0A               	mullw	10
  1808  001738  CFF3 F0E0          	movff	prodl,_newSequenceData+2
  1809                           
  1810                           ;usart.c: 212:                 newSequenceData.init_posY = receivedMex[4] * 10;
  1811  00173C  5047               	movf	(storeData@receivedMex+4)^0,w,c
  1812  00173E  0D0A               	mullw	10
  1813  001740  CFF3 F0E1          	movff	prodl,_newSequenceData+3
  1814  001744                     
  1815                           ;usart.c: 213:                 newSequenceData.init_rot = receivedMex[5];
  1816  001744  C048  F0E2         	movff	storeData@receivedMex+5,_newSequenceData+4
  1817                           
  1818                           ;usart.c: 214:                 newSequenceData.end_posX = receivedMex[6] * 10;
  1819  001748  5049               	movf	(storeData@receivedMex+6)^0,w,c
  1820  00174A  0D0A               	mullw	10
  1821  00174C  CFF3 F0E3          	movff	prodl,_newSequenceData+5
  1822                           
  1823                           ;usart.c: 215:                 newSequenceData.end_posY = receivedMex[7] * 10;
  1824  001750  504A               	movf	(storeData@receivedMex+7)^0,w,c
  1825  001752  0D0A               	mullw	10
  1826  001754  CFF3 F0E4          	movff	prodl,_newSequenceData+6
  1827  001758                     
  1828                           ;usart.c: 216:                 newSequenceData.end_rot = receivedMex[8];
  1829  001758  C04B  F0E5         	movff	storeData@receivedMex+8,_newSequenceData+7
  1830  00175C                     
  1831                           ;usart.c: 218:                 _newSequence = 1;
  1832  00175C  0E01               	movlw	1
  1833  00175E  6E5F               	movwf	__newSequence^0,c
  1834                           
  1835                           ;usart.c: 219:                 break;
  1836  001760  EFD8  F00B         	goto	l588
  1837  001764                     l4215:
  1838  001764  FFFF               	dw	65535	; assembler added errata NOP
  1839                           
  1840                           ;usart.c: 222:                 _fatalError = 1;
  1841  001766  0E01               	movlw	1
  1842  001768  6E60               	movwf	__fatalError^0,c
  1843                           
  1844                           ;usart.c: 223:                 break;
  1845  00176A  EFD8  F00B         	goto	l588
  1846  00176E                     l4217:
  1847  00176E  FFFF               	dw	65535	; assembler added errata NOP
  1848                           
  1849                           ;usart.c: 226:                 printError(8);
  1850  001770  0E08               	movlw	8
  1851  001772  EC33  F00D         	call	_printError
  1852                           
  1853                           ;usart.c: 227:                 break;
  1854  001776  EFD8  F00B         	goto	l588
  1855  00177A                     l4221:
  1856  00177A  FFFF               	dw	65535	; assembler added errata NOP
  1857  00177C  5043               	movf	storeData@receivedMex^0,w,c
  1858  00177E  6E19               	movwf	??_storeData^0,c
  1859  001780  6A1A               	clrf	(??_storeData+1)^0,c
  1860                           
  1861                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1862                           ; Switch size 1, requested type "simple"
  1863                           ; Number of cases is 1, Range of values is 0 to 0
  1864                           ; switch strategies available:
  1865                           ; Name         Instructions Cycles
  1866                           ; simple_byte            4     3 (average)
  1867                           ;	Chosen strategy is simple_byte
  1868  001782  501A               	movf	(??_storeData+1)^0,w,c
  1869  001784  0A00               	xorlw	0	; case 0
  1870  001786  B4D8               	btfsc	status,2,c
  1871  001788  EFC8  F00B         	goto	l4551
  1872  00178C  EFB7  F00B         	goto	l4217
  1873  001790                     l4551:
  1874  001790  FFFF               	dw	65535	; assembler added errata NOP
  1875                           
  1876                           ; Switch size 1, requested type "simple"
  1877                           ; Number of cases is 3, Range of values is 0 to 2
  1878                           ; switch strategies available:
  1879                           ; Name         Instructions Cycles
  1880                           ; simple_byte           10     6 (average)
  1881                           ;	Chosen strategy is simple_byte
  1882  001792  5019               	movf	??_storeData^0,w,c
  1883  001794  0A00               	xorlw	0	; case 0
  1884  001796  B4D8               	btfsc	status,2,c
  1885  001798  EF65  F00B         	goto	l4203
  1886  00179C  0A01               	xorlw	1	; case 1
  1887  00179E  B4D8               	btfsc	status,2,c
  1888  0017A0  EF95  F00B         	goto	l585
  1889  0017A4  0A03               	xorlw	3	; case 2
  1890  0017A6  B4D8               	btfsc	status,2,c
  1891  0017A8  EFB2  F00B         	goto	l4215
  1892  0017AC  EFB7  F00B         	goto	l4217
  1893  0017B0                     l588:
  1894  0017B0  FFFF               	dw	65535	; assembler added errata NOP
  1895  0017B2  0012               	return		;funcret
  1896  0017B4  FFFF               	dw	65535	; errata NOP
  1897  0017B6                     __end_of_storeData:
  1898                           	callstack 0
  1899                           
  1900 ;; *************** function _printError *****************
  1901 ;; Defined at:
  1902 ;;		line 111 in file "usart.c"
  1903 ;; Parameters:    Size  Location     Type
  1904 ;;  errCode         1    wreg     unsigned char 
  1905 ;; Auto vars:     Size  Location     Type
  1906 ;;  errCode         1   23[COMRAM] unsigned char 
  1907 ;; Return value:  Size  Location     Type
  1908 ;;                  1    wreg      void 
  1909 ;; Registers used:
  1910 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1911 ;; Tracked objects:
  1912 ;;		On entry : 0/0
  1913 ;;		On exit  : 0/0
  1914 ;;		Unchanged: 0/0
  1915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1916 ;;      Params:         0       0       0       0       0       0       0
  1917 ;;      Locals:         1       0       0       0       0       0       0
  1918 ;;      Temps:          2       0       0       0       0       0       0
  1919 ;;      Totals:         3       0       0       0       0       0       0
  1920 ;;Total ram usage:        3 bytes
  1921 ;; Hardware stack levels used:    1
  1922 ;; Hardware stack levels required when called:    5
  1923 ;; This function calls:
  1924 ;;		_uartTx
  1925 ;; This function is called by:
  1926 ;;		_main
  1927 ;;		_storeData
  1928 ;; This function uses a non-reentrant model
  1929 ;;
  1930                           
  1931                           	psect	text6
  1932  001A66                     __ptext6:
  1933                           	callstack 0
  1934  001A66                     _printError:
  1935                           	callstack 0
  1936  001A66  FFFF               	dw	65535	; assembler added errata NOP
  1937                           
  1938                           ;incstack = 0
  1939                           ;printError@errCode stored from wreg
  1940  001A68  6E18               	movwf	printError@errCode^0,c
  1941  001A6A                     
  1942                           ;usart.c: 113:     switch(errCode){
  1943  001A6A  EF8F  F00D         	goto	l4047
  1944  001A6E                     l4029:
  1945  001A6E  FFFF               	dw	65535	; assembler added errata NOP
  1946                           
  1947                           ;usart.c: 115:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  1948  001A70  0E94               	movlw	low _errString_Feed
  1949  001A72  6E12               	movwf	uartTx@ptr^0,c
  1950  001A74  0E00               	movlw	high _errString_Feed
  1951  001A76  6E13               	movwf	(uartTx@ptr+1)^0,c
  1952  001A78  0E1E               	movlw	30
  1953  001A7A  6E14               	movwf	uartTx@length^0,c
  1954  001A7C  EC10  F011         	call	_uartTx	;wreg free
  1955                           
  1956                           ;usart.c: 116:             break;
  1957  001A80  EFBE  F00D         	goto	l555
  1958  001A84                     l4031:
  1959  001A84  FFFF               	dw	65535	; assembler added errata NOP
  1960                           
  1961                           ;usart.c: 118:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  1962  001A86  0E5E               	movlw	low _errString_ZEND
  1963  001A88  6E12               	movwf	uartTx@ptr^0,c
  1964  001A8A  0E01               	movlw	high _errString_ZEND
  1965  001A8C  6E13               	movwf	(uartTx@ptr+1)^0,c
  1966  001A8E  0E29               	movlw	41
  1967  001A90  6E14               	movwf	uartTx@length^0,c
  1968  001A92  EC10  F011         	call	_uartTx	;wreg free
  1969                           
  1970                           ;usart.c: 119:             break;
  1971  001A96  EFBE  F00D         	goto	l555
  1972  001A9A                     l4033:
  1973  001A9A  FFFF               	dw	65535	; assembler added errata NOP
  1974                           
  1975                           ;usart.c: 121:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  1976  001A9C  0E87               	movlw	low _errString_Reset
  1977  001A9E  6E12               	movwf	uartTx@ptr^0,c
  1978  001AA0  0E01               	movlw	high _errString_Reset
  1979  001AA2  6E13               	movwf	(uartTx@ptr+1)^0,c
  1980  001AA4  0E28               	movlw	40
  1981  001AA6  6E14               	movwf	uartTx@length^0,c
  1982  001AA8  EC10  F011         	call	_uartTx	;wreg free
  1983                           
  1984                           ;usart.c: 122:             break;
  1985  001AAC  EFBE  F00D         	goto	l555
  1986  001AB0                     l4035:
  1987  001AB0  FFFF               	dw	65535	; assembler added errata NOP
  1988                           
  1989                           ;usart.c: 124:             uartTx(&errString_Point[0], sizeof(errString_Point));
  1990  001AB2  0E35               	movlw	low _errString_Point
  1991  001AB4  6E12               	movwf	uartTx@ptr^0,c
  1992  001AB6  0E01               	movlw	high _errString_Point
  1993  001AB8  6E13               	movwf	(uartTx@ptr+1)^0,c
  1994  001ABA  0E29               	movlw	41
  1995  001ABC  6E14               	movwf	uartTx@length^0,c
  1996  001ABE  EC10  F011         	call	_uartTx	;wreg free
  1997                           
  1998                           ;usart.c: 125:             break;
  1999  001AC2  EFBE  F00D         	goto	l555
  2000  001AC6                     l4037:
  2001  001AC6  FFFF               	dw	65535	; assembler added errata NOP
  2002                           
  2003                           ;usart.c: 127:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  2004  001AC8  0ED6               	movlw	low _errString_Bound
  2005  001ACA  6E12               	movwf	uartTx@ptr^0,c
  2006  001ACC  0E01               	movlw	high _errString_Bound
  2007  001ACE  6E13               	movwf	(uartTx@ptr+1)^0,c
  2008  001AD0  0E21               	movlw	33
  2009  001AD2  6E14               	movwf	uartTx@length^0,c
  2010  001AD4  EC10  F011         	call	_uartTx	;wreg free
  2011                           
  2012                           ;usart.c: 128:             break;
  2013  001AD8  EFBE  F00D         	goto	l555
  2014  001ADC                     l4039:
  2015  001ADC  FFFF               	dw	65535	; assembler added errata NOP
  2016                           
  2017                           ;usart.c: 130:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  2018  001ADE  0E00               	movlw	low _errString_PointZ
  2019  001AE0  6E12               	movwf	uartTx@ptr^0,c
  2020  001AE2  0E01               	movlw	high _errString_PointZ
  2021  001AE4  6E13               	movwf	(uartTx@ptr+1)^0,c
  2022  001AE6  0E35               	movlw	53
  2023  001AE8  6E14               	movwf	uartTx@length^0,c
  2024  001AEA  EC10  F011         	call	_uartTx	;wreg free
  2025                           
  2026                           ;usart.c: 131:             break;
  2027  001AEE  EFBE  F00D         	goto	l555
  2028  001AF2                     l4041:
  2029  001AF2  FFFF               	dw	65535	; assembler added errata NOP
  2030                           
  2031                           ;usart.c: 133:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  2032  001AF4  0EAF               	movlw	low _errString_Fatal
  2033  001AF6  6E12               	movwf	uartTx@ptr^0,c
  2034  001AF8  0E01               	movlw	high _errString_Fatal
  2035  001AFA  6E13               	movwf	(uartTx@ptr+1)^0,c
  2036  001AFC  0E27               	movlw	39
  2037  001AFE  6E14               	movwf	uartTx@length^0,c
  2038  001B00  EC10  F011         	call	_uartTx	;wreg free
  2039                           
  2040                           ;usart.c: 134:             break;
  2041  001B04  EFBE  F00D         	goto	l555
  2042  001B08                     l4043:
  2043  001B08  FFFF               	dw	65535	; assembler added errata NOP
  2044                           
  2045                           ;usart.c: 136:             uartTx(&errString_Command[0], sizeof(errString_Command));
  2046  001B0A  0EB2               	movlw	low _errString_Command
  2047  001B0C  6E12               	movwf	uartTx@ptr^0,c
  2048  001B0E  0E00               	movlw	high _errString_Command
  2049  001B10  6E13               	movwf	(uartTx@ptr+1)^0,c
  2050  001B12  0E18               	movlw	24
  2051  001B14  6E14               	movwf	uartTx@length^0,c
  2052  001B16  EC10  F011         	call	_uartTx	;wreg free
  2053                           
  2054                           ;usart.c: 137:             break;
  2055  001B1A  EFBE  F00D         	goto	l555
  2056  001B1E                     l4047:
  2057  001B1E  FFFF               	dw	65535	; assembler added errata NOP
  2058  001B20  5018               	movf	printError@errCode^0,w,c
  2059  001B22  6E16               	movwf	??_printError^0,c
  2060  001B24  6A17               	clrf	(??_printError+1)^0,c
  2061                           
  2062                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2063                           ; Switch size 1, requested type "simple"
  2064                           ; Number of cases is 1, Range of values is 0 to 0
  2065                           ; switch strategies available:
  2066                           ; Name         Instructions Cycles
  2067                           ; simple_byte            4     3 (average)
  2068                           ;	Chosen strategy is simple_byte
  2069  001B26  5017               	movf	(??_printError+1)^0,w,c
  2070  001B28  0A00               	xorlw	0	; case 0
  2071  001B2A  B4D8               	btfsc	status,2,c
  2072  001B2C  EF9A  F00D         	goto	l4553
  2073  001B30  EFBE  F00D         	goto	l555
  2074  001B34                     l4553:
  2075  001B34  FFFF               	dw	65535	; assembler added errata NOP
  2076                           
  2077                           ; Switch size 1, requested type "simple"
  2078                           ; Number of cases is 8, Range of values is 1 to 8
  2079                           ; switch strategies available:
  2080                           ; Name         Instructions Cycles
  2081                           ; simple_byte           25    13 (average)
  2082                           ;	Chosen strategy is simple_byte
  2083  001B36  5016               	movf	??_printError^0,w,c
  2084  001B38  0A01               	xorlw	1	; case 1
  2085  001B3A  B4D8               	btfsc	status,2,c
  2086  001B3C  EF37  F00D         	goto	l4029
  2087  001B40  0A03               	xorlw	3	; case 2
  2088  001B42  B4D8               	btfsc	status,2,c
  2089  001B44  EF42  F00D         	goto	l4031
  2090  001B48  0A01               	xorlw	1	; case 3
  2091  001B4A  B4D8               	btfsc	status,2,c
  2092  001B4C  EF4D  F00D         	goto	l4033
  2093  001B50  0A07               	xorlw	7	; case 4
  2094  001B52  B4D8               	btfsc	status,2,c
  2095  001B54  EF58  F00D         	goto	l4035
  2096  001B58  0A01               	xorlw	1	; case 5
  2097  001B5A  B4D8               	btfsc	status,2,c
  2098  001B5C  EF63  F00D         	goto	l4037
  2099  001B60  0A03               	xorlw	3	; case 6
  2100  001B62  B4D8               	btfsc	status,2,c
  2101  001B64  EF6E  F00D         	goto	l4039
  2102  001B68  0A01               	xorlw	1	; case 7
  2103  001B6A  B4D8               	btfsc	status,2,c
  2104  001B6C  EF79  F00D         	goto	l4041
  2105  001B70  0A0F               	xorlw	15	; case 8
  2106  001B72  B4D8               	btfsc	status,2,c
  2107  001B74  EF84  F00D         	goto	l4043
  2108  001B78  EFBE  F00D         	goto	l555
  2109  001B7C                     l555:
  2110  001B7C  FFFF               	dw	65535	; assembler added errata NOP
  2111  001B7E  0012               	return		;funcret
  2112  001B80  FFFF               	dw	65535	; errata NOP
  2113  001B82                     __end_of_printError:
  2114                           	callstack 0
  2115                           
  2116 ;; *************** function _uartTx *****************
  2117 ;; Defined at:
  2118 ;;		line 148 in file "usart.c"
  2119 ;; Parameters:    Size  Location     Type
  2120 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  2121 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  2122 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  2123 ;;  length          1   19[COMRAM] unsigned char 
  2124 ;; Auto vars:     Size  Location     Type
  2125 ;;  i               1   20[COMRAM] unsigned char 
  2126 ;; Return value:  Size  Location     Type
  2127 ;;                  1    wreg      void 
  2128 ;; Registers used:
  2129 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2130 ;; Tracked objects:
  2131 ;;		On entry : 0/0
  2132 ;;		On exit  : 0/0
  2133 ;;		Unchanged: 0/0
  2134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2135 ;;      Params:         3       0       0       0       0       0       0
  2136 ;;      Locals:         1       0       0       0       0       0       0
  2137 ;;      Temps:          0       0       0       0       0       0       0
  2138 ;;      Totals:         4       0       0       0       0       0       0
  2139 ;;Total ram usage:        4 bytes
  2140 ;; Hardware stack levels used:    1
  2141 ;; Hardware stack levels required when called:    4
  2142 ;; This function calls:
  2143 ;;		Nothing
  2144 ;; This function is called by:
  2145 ;;		_printError
  2146 ;; This function uses a non-reentrant model
  2147 ;;
  2148                           
  2149                           	psect	text7
  2150  002220                     __ptext7:
  2151                           	callstack 0
  2152  002220                     _uartTx:
  2153                           	callstack 0
  2154  002220  FFFF               	dw	65535	; assembler added errata NOP
  2155  002222                     
  2156                           ;usart.c: 148: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 149: {;usa
      +                          rt.c: 151:     for(char i = 1; i < length; i++){
  2157  002222  0E01               	movlw	1
  2158  002224  6E15               	movwf	uartTx@i^0,c
  2159  002226  EF29  F011         	goto	l3547
  2160  00222A                     l3543:
  2161  00222A  FFFF               	dw	65535	; assembler added errata NOP
  2162                           
  2163                           ;usart.c: 153:         TXREG = *ptr;
  2164  00222C  C012  FFD9         	movff	uartTx@ptr,fsr2l
  2165  002230  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  2166  002234  50DF               	movf	indf2,w,c
  2167  002236  6EAD               	movwf	173,c	;volatile
  2168  002238                     l560:
  2169  002238  FFFF               	dw	65535	; assembler added errata NOP
  2170  00223A  A2AC               	btfss	172,1,c	;volatile
  2171  00223C  EF22  F011         	goto	u2721
  2172  002240  EF25  F011         	goto	u2720
  2173  002244                     u2721:
  2174  002244  FFFF               	dw	65535	; assembler added errata NOP
  2175  002246  EF1C  F011         	goto	l560
  2176  00224A                     u2720:
  2177  00224A  FFFF               	dw	65535	; assembler added errata NOP
  2178  00224C                     
  2179                           ;usart.c: 157:         ptr++;
  2180  00224C  4A12               	infsnz	uartTx@ptr^0,f,c
  2181  00224E  2A13               	incf	(uartTx@ptr+1)^0,f,c
  2182                           
  2183                           ;usart.c: 158:     }
  2184  002250  2A15               	incf	uartTx@i^0,f,c
  2185  002252                     l3547:
  2186  002252  FFFF               	dw	65535	; assembler added errata NOP
  2187  002254  5014               	movf	uartTx@length^0,w,c
  2188  002256  5C15               	subwf	uartTx@i^0,w,c
  2189  002258  A0D8               	btfss	status,0,c
  2190  00225A  EF31  F011         	goto	u2731
  2191  00225E  EF34  F011         	goto	u2730
  2192  002262                     u2731:
  2193  002262  FFFF               	dw	65535	; assembler added errata NOP
  2194  002264  EF15  F011         	goto	l3543
  2195  002268                     u2730:
  2196  002268  FFFF               	dw	65535	; assembler added errata NOP
  2197  00226A  0012               	return		;funcret
  2198  00226C  FFFF               	dw	65535	; errata NOP
  2199  00226E                     __end_of_uartTx:
  2200                           	callstack 0
  2201                           
  2202 ;; *************** function _shiftData *****************
  2203 ;; Defined at:
  2204 ;;		line 81 in file "usart.c"
  2205 ;; Parameters:    Size  Location     Type
  2206 ;;		None
  2207 ;; Auto vars:     Size  Location     Type
  2208 ;;  i               1   19[COMRAM] unsigned char 
  2209 ;; Return value:  Size  Location     Type
  2210 ;;                  1    wreg      void 
  2211 ;; Registers used:
  2212 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2213 ;; Tracked objects:
  2214 ;;		On entry : 0/0
  2215 ;;		On exit  : 0/0
  2216 ;;		Unchanged: 0/0
  2217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2218 ;;      Params:         0       0       0       0       0       0       0
  2219 ;;      Locals:         1       0       0       0       0       0       0
  2220 ;;      Temps:          2       0       0       0       0       0       0
  2221 ;;      Totals:         3       0       0       0       0       0       0
  2222 ;;Total ram usage:        3 bytes
  2223 ;; Hardware stack levels used:    1
  2224 ;; Hardware stack levels required when called:    4
  2225 ;; This function calls:
  2226 ;;		Nothing
  2227 ;; This function is called by:
  2228 ;;		_main
  2229 ;; This function uses a non-reentrant model
  2230 ;;
  2231                           
  2232                           	psect	text8
  2233  0021C0                     __ptext8:
  2234                           	callstack 0
  2235  0021C0                     _shiftData:
  2236                           	callstack 0
  2237  0021C0  FFFF               	dw	65535	; assembler added errata NOP
  2238  0021C2                     
  2239                           ;usart.c: 82:     char i;;usart.c: 84:     for(i = 0; i < 4; i++){
  2240  0021C2  0E00               	movlw	0
  2241  0021C4  6E14               	movwf	shiftData@i^0,c
  2242  0021C6                     l4341:
  2243  0021C6  FFFF               	dw	65535	; assembler added errata NOP
  2244                           
  2245                           ;usart.c: 85:         dataSequence[i] = dataSequence[i+1];
  2246  0021C8  5014               	movf	shiftData@i^0,w,c
  2247  0021CA  6E12               	movwf	??_shiftData^0,c
  2248  0021CC  6A13               	clrf	(??_shiftData+1)^0,c
  2249  0021CE  90D8               	bcf	status,0,c
  2250  0021D0  3612               	rlcf	??_shiftData^0,f,c
  2251  0021D2  3613               	rlcf	(??_shiftData+1)^0,f,c
  2252  0021D4  90D8               	bcf	status,0,c
  2253  0021D6  3612               	rlcf	??_shiftData^0,f,c
  2254  0021D8  3613               	rlcf	(??_shiftData+1)^0,f,c
  2255  0021DA  0ECE               	movlw	low (_dataSequence+4)
  2256  0021DC  2412               	addwf	??_shiftData^0,w,c
  2257  0021DE  6ED9               	movwf	fsr2l,c
  2258  0021E0  0E00               	movlw	high (_dataSequence+4)
  2259  0021E2  2013               	addwfc	(??_shiftData+1)^0,w,c
  2260  0021E4  6EDA               	movwf	fsr2h,c
  2261  0021E6  5014               	movf	shiftData@i^0,w,c
  2262  0021E8  0D04               	mullw	4
  2263  0021EA  0ECA               	movlw	low _dataSequence
  2264  0021EC  24F3               	addwf	243,w,c
  2265  0021EE  6EE1               	movwf	fsr1l,c
  2266  0021F0  0E00               	movlw	high _dataSequence
  2267  0021F2  20F4               	addwfc	prodh,w,c
  2268  0021F4  6EE2               	movwf	fsr1h,c
  2269  0021F6  CFDE FFE6          	movff	postinc2,postinc1
  2270  0021FA  CFDE FFE6          	movff	postinc2,postinc1
  2271  0021FE  CFDE FFE6          	movff	postinc2,postinc1
  2272  002202  CFDE FFE6          	movff	postinc2,postinc1
  2273  002206                     
  2274                           ;usart.c: 86:     }
  2275  002206  2A14               	incf	shiftData@i^0,f,c
  2276  002208  0E03               	movlw	3
  2277  00220A  6414               	cpfsgt	shiftData@i^0,c
  2278  00220C  EF0A  F011         	goto	u3811
  2279  002210  EF0D  F011         	goto	u3810
  2280  002214                     u3811:
  2281  002214  FFFF               	dw	65535	; assembler added errata NOP
  2282  002216  EFE3  F010         	goto	l4341
  2283  00221A                     u3810:
  2284  00221A  FFFF               	dw	65535	; assembler added errata NOP
  2285  00221C  0012               	return		;funcret
  2286  00221E  FFFF               	dw	65535	; errata NOP
  2287  002220                     __end_of_shiftData:
  2288                           	callstack 0
  2289                           
  2290 ;; *************** function _resetPosition *****************
  2291 ;; Defined at:
  2292 ;;		line 165 in file "motors.c"
  2293 ;; Parameters:    Size  Location     Type
  2294 ;;		None
  2295 ;; Auto vars:     Size  Location     Type
  2296 ;;  keepMovingZ     1   22[COMRAM] unsigned char 
  2297 ;;  keepMovingY     1   21[COMRAM] unsigned char 
  2298 ;;  keepMovingX     1   20[COMRAM] unsigned char 
  2299 ;; Return value:  Size  Location     Type
  2300 ;;                  1    wreg      unsigned char 
  2301 ;; Registers used:
  2302 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2303 ;; Tracked objects:
  2304 ;;		On entry : 0/0
  2305 ;;		On exit  : 0/0
  2306 ;;		Unchanged: 0/0
  2307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2308 ;;      Params:         0       0       0       0       0       0       0
  2309 ;;      Locals:         3       0       0       0       0       0       0
  2310 ;;      Temps:          0       0       0       0       0       0       0
  2311 ;;      Totals:         3       0       0       0       0       0       0
  2312 ;;Total ram usage:        3 bytes
  2313 ;; Hardware stack levels used:    1
  2314 ;; Hardware stack levels required when called:    5
  2315 ;; This function calls:
  2316 ;;		_resetStep
  2317 ;;		_stepMade
  2318 ;; This function is called by:
  2319 ;;		_main
  2320 ;; This function uses a non-reentrant model
  2321 ;;
  2322                           
  2323                           	psect	text9
  2324  0012B6                     __ptext9:
  2325                           	callstack 0
  2326  0012B6                     _resetPosition:
  2327                           	callstack 0
  2328  0012B6  FFFF               	dw	65535	; assembler added errata NOP
  2329  0012B8                     
  2330                           ;motors.c: 185:     motCounter[0][1] = -1;
  2331  0012B8  6868               	setf	(_motCounter+1)^0,c
  2332                           
  2333                           ;motors.c: 186:     motCounter[1][1] = -1;
  2334  0012BA  686A               	setf	(_motCounter+3)^0,c
  2335                           
  2336                           ;motors.c: 187:     motCounter[2][1] = -1;
  2337  0012BC  686C               	setf	(_motCounter+5)^0,c
  2338  0012BE                     
  2339                           ;motors.c: 192:     unsigned char keepMovingX = 1;
  2340  0012BE  0E01               	movlw	1
  2341  0012C0  6E15               	movwf	resetPosition@keepMovingX^0,c
  2342                           
  2343                           ;motors.c: 193:     unsigned char keepMovingY = 1;
  2344  0012C2  0E01               	movlw	1
  2345  0012C4  6E16               	movwf	resetPosition@keepMovingY^0,c
  2346                           
  2347                           ;motors.c: 194:     unsigned char keepMovingZ = 1;
  2348  0012C6  0E01               	movlw	1
  2349  0012C8  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2350  0012CA                     
  2351                           ;motors.c: 197:     T2CONbits.TMR2ON = 1;
  2352  0012CA  84CA               	bsf	202,2,c	;volatile
  2353                           
  2354                           ;motors.c: 199:     tm0Error = 0;
  2355  0012CC  0E00               	movlw	0
  2356  0012CE  6E5A               	movwf	(_tm0Error+1)^0,c
  2357  0012D0  0E00               	movlw	0
  2358  0012D2  6E59               	movwf	_tm0Error^0,c
  2359                           
  2360                           ;motors.c: 200:     tm0Limit = 100;
  2361  0012D4  0E64               	movlw	100
  2362  0012D6  6E66               	movwf	_tm0Limit^0,c
  2363  0012D8                     
  2364                           ;motors.c: 201:     T0CONbits.TMR0ON = 1;
  2365  0012D8  8ED5               	bsf	213,7,c	;volatile
  2366                           
  2367                           ;motors.c: 203:     while(keepMovingX || keepMovingY || keepMovingZ){
  2368  0012DA  EF1D  F00A         	goto	l4127
  2369  0012DE                     l4085:
  2370  0012DE  FFFF               	dw	65535	; assembler added errata NOP
  2371                           
  2372                           ;motors.c: 205:         resetStep();
  2373  0012E0  EC77  F012         	call	_resetStep	;wreg free
  2374  0012E4                     
  2375                           ;motors.c: 208:         if(tm0Error){
  2376  0012E4  5059               	movf	_tm0Error^0,w,c
  2377  0012E6  105A               	iorwf	(_tm0Error+1)^0,w,c
  2378  0012E8  B4D8               	btfsc	status,2,c
  2379  0012EA  EF79  F009         	goto	u3581
  2380  0012EE  EF7C  F009         	goto	u3580
  2381  0012F2                     u3581:
  2382  0012F2  FFFF               	dw	65535	; assembler added errata NOP
  2383  0012F4  EF83  F009         	goto	l131
  2384  0012F8                     u3580:
  2385  0012F8  FFFF               	dw	65535	; assembler added errata NOP
  2386  0012FA                     
  2387                           ;motors.c: 216:             tm0Error = 3;
  2388  0012FA  0E00               	movlw	0
  2389  0012FC  6E5A               	movwf	(_tm0Error+1)^0,c
  2390  0012FE  0E03               	movlw	3
  2391  001300  6E59               	movwf	_tm0Error^0,c
  2392                           
  2393                           ;motors.c: 217:             break;
  2394  001302  EF3B  F00A         	goto	l132
  2395  001306                     l131:
  2396  001306  FFFF               	dw	65535	; assembler added errata NOP
  2397                           
  2398                           ;motors.c: 224:         if(PORTEbits.RE0 || !keepMovingX){
  2399  001308  B084               	btfsc	132,0,c	;volatile
  2400  00130A  EF89  F009         	goto	u3591
  2401  00130E  EF8C  F009         	goto	u3590
  2402  001312                     u3591:
  2403  001312  FFFF               	dw	65535	; assembler added errata NOP
  2404  001314  EF96  F009         	goto	l4093
  2405  001318                     u3590:
  2406  001318  FFFF               	dw	65535	; assembler added errata NOP
  2407  00131A  5015               	movf	resetPosition@keepMovingX^0,w,c
  2408  00131C  A4D8               	btfss	status,2,c
  2409  00131E  EF93  F009         	goto	u3601
  2410  001322  EF96  F009         	goto	u3600
  2411  001326                     u3601:
  2412  001326  FFFF               	dw	65535	; assembler added errata NOP
  2413  001328  EF9B  F009         	goto	l4095
  2414  00132C                     u3600:
  2415  00132C                     l4093:
  2416  00132C  FFFF               	dw	65535	; assembler added errata NOP
  2417                           
  2418                           ;motors.c: 226:             keepMovingX = 0;
  2419  00132E  0E00               	movlw	0
  2420  001330  6E15               	movwf	resetPosition@keepMovingX^0,c
  2421                           
  2422                           ;motors.c: 227:         }else{
  2423  001332  EFB2  F009         	goto	l4101
  2424  001336                     l4095:
  2425  001336  FFFF               	dw	65535	; assembler added errata NOP
  2426                           
  2427                           ;motors.c: 233:             motCounter[0][0] += motCounter[0][1];
  2428  001338  5068               	movf	(_motCounter+1)^0,w,c
  2429  00133A  2667               	addwf	_motCounter^0,f,c
  2430                           
  2431                           ;motors.c: 234:             if(motCounter[0][0] < 0){
  2432  00133C  BE67               	btfsc	_motCounter^0,7,c
  2433  00133E  EFA6  F009         	goto	u3610
  2434  001342  EFA3  F009         	goto	u3611
  2435  001346                     u3611:
  2436  001346  FFFF               	dw	65535	; assembler added errata NOP
  2437  001348  EFA9  F009         	goto	l4099
  2438  00134C                     u3610:
  2439  00134C  FFFF               	dw	65535	; assembler added errata NOP
  2440  00134E                     
  2441                           ;motors.c: 235:                 motCounter[0][0] = 3;
  2442  00134E  0E03               	movlw	3
  2443  001350  6E67               	movwf	_motCounter^0,c
  2444  001352                     l4099:
  2445  001352  FFFF               	dw	65535	; assembler added errata NOP
  2446                           
  2447                           ;motors.c: 238:             LATA = stepMot1[motCounter[0][0]];
  2448  001354  0E8C               	movlw	low _stepMot1
  2449  001356  2467               	addwf	_motCounter^0,w,c
  2450  001358  6ED9               	movwf	fsr2l,c
  2451  00135A  6ADA               	clrf	fsr2h,c
  2452  00135C  0E00               	movlw	high _stepMot1
  2453  00135E  22DA               	addwfc	fsr2h,f,c
  2454  001360  50DF               	movf	indf2,w,c
  2455  001362  6E89               	movwf	137,c	;volatile
  2456  001364                     l4101:
  2457  001364  FFFF               	dw	65535	; assembler added errata NOP
  2458                           
  2459                           ;motors.c: 243:         if(PORTEbits.RE1 || !keepMovingY){
  2460  001366  B284               	btfsc	132,1,c	;volatile
  2461  001368  EFB8  F009         	goto	u3621
  2462  00136C  EFBB  F009         	goto	u3620
  2463  001370                     u3621:
  2464  001370  FFFF               	dw	65535	; assembler added errata NOP
  2465  001372  EFC5  F009         	goto	l4105
  2466  001376                     u3620:
  2467  001376  FFFF               	dw	65535	; assembler added errata NOP
  2468  001378  5016               	movf	resetPosition@keepMovingY^0,w,c
  2469  00137A  A4D8               	btfss	status,2,c
  2470  00137C  EFC2  F009         	goto	u3631
  2471  001380  EFC5  F009         	goto	u3630
  2472  001384                     u3631:
  2473  001384  FFFF               	dw	65535	; assembler added errata NOP
  2474  001386  EFCA  F009         	goto	l4107
  2475  00138A                     u3630:
  2476  00138A                     l4105:
  2477  00138A  FFFF               	dw	65535	; assembler added errata NOP
  2478                           
  2479                           ;motors.c: 245:             keepMovingY = 0;
  2480  00138C  0E00               	movlw	0
  2481  00138E  6E16               	movwf	resetPosition@keepMovingY^0,c
  2482                           
  2483                           ;motors.c: 246:         }else{
  2484  001390  EFE1  F009         	goto	l4113
  2485  001394                     l4107:
  2486  001394  FFFF               	dw	65535	; assembler added errata NOP
  2487                           
  2488                           ;motors.c: 252:             motCounter[1][0] += motCounter[1][1];
  2489  001396  506A               	movf	(_motCounter+3)^0,w,c
  2490  001398  2669               	addwf	(_motCounter+2)^0,f,c
  2491                           
  2492                           ;motors.c: 253:             if(motCounter[1][0] < 0){
  2493  00139A  BE69               	btfsc	(_motCounter+2)^0,7,c
  2494  00139C  EFD5  F009         	goto	u3640
  2495  0013A0  EFD2  F009         	goto	u3641
  2496  0013A4                     u3641:
  2497  0013A4  FFFF               	dw	65535	; assembler added errata NOP
  2498  0013A6  EFD8  F009         	goto	l4111
  2499  0013AA                     u3640:
  2500  0013AA  FFFF               	dw	65535	; assembler added errata NOP
  2501  0013AC                     
  2502                           ;motors.c: 254:                 motCounter[1][0] = 3;
  2503  0013AC  0E03               	movlw	3
  2504  0013AE  6E69               	movwf	(_motCounter+2)^0,c
  2505  0013B0                     l4111:
  2506  0013B0  FFFF               	dw	65535	; assembler added errata NOP
  2507                           
  2508                           ;motors.c: 257:             LATB = stepMot2[motCounter[1][0]];
  2509  0013B2  0E88               	movlw	low _stepMot2
  2510  0013B4  2469               	addwf	(_motCounter+2)^0,w,c
  2511  0013B6  6ED9               	movwf	fsr2l,c
  2512  0013B8  6ADA               	clrf	fsr2h,c
  2513  0013BA  0E00               	movlw	high _stepMot2
  2514  0013BC  22DA               	addwfc	fsr2h,f,c
  2515  0013BE  50DF               	movf	indf2,w,c
  2516  0013C0  6E8A               	movwf	138,c	;volatile
  2517  0013C2                     l4113:
  2518  0013C2  FFFF               	dw	65535	; assembler added errata NOP
  2519                           
  2520                           ;motors.c: 262:         if(PORTEbits.RE2 || !keepMovingZ){
  2521  0013C4  B484               	btfsc	132,2,c	;volatile
  2522  0013C6  EFE7  F009         	goto	u3651
  2523  0013CA  EFEA  F009         	goto	u3650
  2524  0013CE                     u3651:
  2525  0013CE  FFFF               	dw	65535	; assembler added errata NOP
  2526  0013D0  EFF4  F009         	goto	l4117
  2527  0013D4                     u3650:
  2528  0013D4  FFFF               	dw	65535	; assembler added errata NOP
  2529  0013D6  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2530  0013D8  A4D8               	btfss	status,2,c
  2531  0013DA  EFF1  F009         	goto	u3661
  2532  0013DE  EFF4  F009         	goto	u3660
  2533  0013E2                     u3661:
  2534  0013E2  FFFF               	dw	65535	; assembler added errata NOP
  2535  0013E4  EFF9  F009         	goto	l4119
  2536  0013E8                     u3660:
  2537  0013E8                     l4117:
  2538  0013E8  FFFF               	dw	65535	; assembler added errata NOP
  2539                           
  2540                           ;motors.c: 264:             keepMovingZ = 0;
  2541  0013EA  0E00               	movlw	0
  2542  0013EC  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2543                           
  2544                           ;motors.c: 265:         }else{
  2545  0013EE  EF10  F00A         	goto	l4125
  2546  0013F2                     l4119:
  2547  0013F2  FFFF               	dw	65535	; assembler added errata NOP
  2548                           
  2549                           ;motors.c: 271:             motCounter[2][0] += motCounter[2][1];
  2550  0013F4  506C               	movf	(_motCounter+5)^0,w,c
  2551  0013F6  266B               	addwf	(_motCounter+4)^0,f,c
  2552                           
  2553                           ;motors.c: 272:             if(motCounter[2][0] < 0){
  2554  0013F8  BE6B               	btfsc	(_motCounter+4)^0,7,c
  2555  0013FA  EF04  F00A         	goto	u3670
  2556  0013FE  EF01  F00A         	goto	u3671
  2557  001402                     u3671:
  2558  001402  FFFF               	dw	65535	; assembler added errata NOP
  2559  001404  EF07  F00A         	goto	l4123
  2560  001408                     u3670:
  2561  001408  FFFF               	dw	65535	; assembler added errata NOP
  2562  00140A                     
  2563                           ;motors.c: 273:                 motCounter[2][0] = 3;
  2564  00140A  0E03               	movlw	3
  2565  00140C  6E6B               	movwf	(_motCounter+4)^0,c
  2566  00140E                     l4123:
  2567  00140E  FFFF               	dw	65535	; assembler added errata NOP
  2568                           
  2569                           ;motors.c: 276:             LATC = stepMot3[motCounter[2][0]];
  2570  001410  0E84               	movlw	low _stepMot3
  2571  001412  246B               	addwf	(_motCounter+4)^0,w,c
  2572  001414  6ED9               	movwf	fsr2l,c
  2573  001416  6ADA               	clrf	fsr2h,c
  2574  001418  0E00               	movlw	high _stepMot3
  2575  00141A  22DA               	addwfc	fsr2h,f,c
  2576  00141C  50DF               	movf	indf2,w,c
  2577  00141E  6E8B               	movwf	139,c	;volatile
  2578  001420                     l4125:
  2579  001420  FFFF               	dw	65535	; assembler added errata NOP
  2580  001422  EC02  F012         	call	_stepMade	;wreg free
  2581  001426  5012               	movf	?_stepMade^0,w,c
  2582  001428  1013               	iorwf	(?_stepMade+1)^0,w,c
  2583  00142A  B4D8               	btfsc	status,2,c
  2584  00142C  EF1A  F00A         	goto	u3681
  2585  001430  EF1D  F00A         	goto	u3680
  2586  001434                     u3681:
  2587  001434  FFFF               	dw	65535	; assembler added errata NOP
  2588  001436  EF10  F00A         	goto	l4125
  2589  00143A                     u3680:
  2590  00143A                     l4127:
  2591  00143A  FFFF               	dw	65535	; assembler added errata NOP
  2592                           
  2593                           ;motors.c: 203:     while(keepMovingX || keepMovingY || keepMovingZ){
  2594  00143C  5015               	movf	resetPosition@keepMovingX^0,w,c
  2595  00143E  A4D8               	btfss	status,2,c
  2596  001440  EF24  F00A         	goto	u3691
  2597  001444  EF27  F00A         	goto	u3690
  2598  001448                     u3691:
  2599  001448  FFFF               	dw	65535	; assembler added errata NOP
  2600  00144A  EF6F  F009         	goto	l4085
  2601  00144E                     u3690:
  2602  00144E  FFFF               	dw	65535	; assembler added errata NOP
  2603  001450  5016               	movf	resetPosition@keepMovingY^0,w,c
  2604  001452  A4D8               	btfss	status,2,c
  2605  001454  EF2E  F00A         	goto	u3701
  2606  001458  EF31  F00A         	goto	u3700
  2607  00145C                     u3701:
  2608  00145C  FFFF               	dw	65535	; assembler added errata NOP
  2609  00145E  EF6F  F009         	goto	l4085
  2610  001462                     u3700:
  2611  001462  FFFF               	dw	65535	; assembler added errata NOP
  2612  001464  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2613  001466  A4D8               	btfss	status,2,c
  2614  001468  EF38  F00A         	goto	u3711
  2615  00146C  EF3B  F00A         	goto	u3710
  2616  001470                     u3711:
  2617  001470  FFFF               	dw	65535	; assembler added errata NOP
  2618  001472  EF6F  F009         	goto	l4085
  2619  001476                     u3710:
  2620  001476                     l132:
  2621  001476  FFFF               	dw	65535	; assembler added errata NOP
  2622                           
  2623                           ;motors.c: 296:     T0CONbits.TMR0ON = 0;
  2624  001478  9ED5               	bcf	213,7,c	;volatile
  2625                           
  2626                           ;motors.c: 297:     T2CONbits.TMR2ON = 0;
  2627  00147A  94CA               	bcf	202,2,c	;volatile
  2628  00147C                     
  2629                           ;motors.c: 299:     TMR0 = 0;
  2630  00147C  0E00               	movlw	0
  2631  00147E  6ED7               	movwf	215,c	;volatile
  2632  001480  0E00               	movlw	0
  2633  001482  6ED6               	movwf	214,c	;volatile
  2634                           
  2635                           ;motors.c: 300:     TMR2 = 0;
  2636  001484  0E00               	movlw	0
  2637  001486  6ECC               	movwf	204,c	;volatile
  2638  001488                     
  2639                           ;motors.c: 303:     resetStep();
  2640  001488  EC77  F012         	call	_resetStep	;wreg free
  2641  00148C                     
  2642                           ;motors.c: 306:     return(tm0Error);
  2643  00148C  5059               	movf	_tm0Error^0,w,c
  2644  00148E  0012               	return		;funcret
  2645  001490  FFFF               	dw	65535	; errata NOP
  2646  001492                     __end_of_resetPosition:
  2647                           	callstack 0
  2648                           
  2649 ;; *************** function _resetNewSequence *****************
  2650 ;; Defined at:
  2651 ;;		line 73 in file "usart.c"
  2652 ;; Parameters:    Size  Location     Type
  2653 ;;		None
  2654 ;; Auto vars:     Size  Location     Type
  2655 ;;		None
  2656 ;; Return value:  Size  Location     Type
  2657 ;;                  1    wreg      void 
  2658 ;; Registers used:
  2659 ;;		wreg, status,2
  2660 ;; Tracked objects:
  2661 ;;		On entry : 0/0
  2662 ;;		On exit  : 0/0
  2663 ;;		Unchanged: 0/0
  2664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2665 ;;      Params:         0       0       0       0       0       0       0
  2666 ;;      Locals:         0       0       0       0       0       0       0
  2667 ;;      Temps:          0       0       0       0       0       0       0
  2668 ;;      Totals:         0       0       0       0       0       0       0
  2669 ;;Total ram usage:        0 bytes
  2670 ;; Hardware stack levels used:    1
  2671 ;; Hardware stack levels required when called:    4
  2672 ;; This function calls:
  2673 ;;		Nothing
  2674 ;; This function is called by:
  2675 ;;		_main
  2676 ;; This function uses a non-reentrant model
  2677 ;;
  2678                           
  2679                           	psect	text10
  2680  0024C6                     __ptext10:
  2681                           	callstack 0
  2682  0024C6                     _resetNewSequence:
  2683                           	callstack 0
  2684  0024C6  FFFF               	dw	65535	; assembler added errata NOP
  2685  0024C8                     
  2686                           ;usart.c: 74:     _newSequence = 0;
  2687  0024C8  0E00               	movlw	0
  2688  0024CA  6E5F               	movwf	__newSequence^0,c
  2689  0024CC  0012               	return		;funcret
  2690  0024CE  FFFF               	dw	65535	; errata NOP
  2691  0024D0                     __end_of_resetNewSequence:
  2692                           	callstack 0
  2693                           
  2694 ;; *************** function _reduceSeq *****************
  2695 ;; Defined at:
  2696 ;;		line 50 in file "usart.c"
  2697 ;; Parameters:    Size  Location     Type
  2698 ;;		None
  2699 ;; Auto vars:     Size  Location     Type
  2700 ;;		None
  2701 ;; Return value:  Size  Location     Type
  2702 ;;                  1    wreg      void 
  2703 ;; Registers used:
  2704 ;;		status,2, status,0
  2705 ;; Tracked objects:
  2706 ;;		On entry : 0/0
  2707 ;;		On exit  : 0/0
  2708 ;;		Unchanged: 0/0
  2709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2710 ;;      Params:         0       0       0       0       0       0       0
  2711 ;;      Locals:         0       0       0       0       0       0       0
  2712 ;;      Temps:          0       0       0       0       0       0       0
  2713 ;;      Totals:         0       0       0       0       0       0       0
  2714 ;;Total ram usage:        0 bytes
  2715 ;; Hardware stack levels used:    1
  2716 ;; Hardware stack levels required when called:    4
  2717 ;; This function calls:
  2718 ;;		Nothing
  2719 ;; This function is called by:
  2720 ;;		_main
  2721 ;; This function uses a non-reentrant model
  2722 ;;
  2723                           
  2724                           	psect	text11
  2725  002516                     __ptext11:
  2726                           	callstack 0
  2727  002516                     _reduceSeq:
  2728                           	callstack 0
  2729  002516  FFFF               	dw	65535	; assembler added errata NOP
  2730  002518                     
  2731                           ;usart.c: 51:     dataCounter--;
  2732  002518  0661               	decf	_dataCounter^0,f,c
  2733  00251A  0012               	return		;funcret
  2734  00251C  FFFF               	dw	65535	; errata NOP
  2735  00251E                     __end_of_reduceSeq:
  2736                           	callstack 0
  2737                           
  2738 ;; *************** function _readSeq *****************
  2739 ;; Defined at:
  2740 ;;		line 57 in file "usart.c"
  2741 ;; Parameters:    Size  Location     Type
  2742 ;;		None
  2743 ;; Auto vars:     Size  Location     Type
  2744 ;;		None
  2745 ;; Return value:  Size  Location     Type
  2746 ;;                  1    wreg      unsigned char 
  2747 ;; Registers used:
  2748 ;;		wreg, status,2
  2749 ;; Tracked objects:
  2750 ;;		On entry : 0/0
  2751 ;;		On exit  : 0/0
  2752 ;;		Unchanged: 0/0
  2753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2754 ;;      Params:         0       0       0       0       0       0       0
  2755 ;;      Locals:         0       0       0       0       0       0       0
  2756 ;;      Temps:          0       0       0       0       0       0       0
  2757 ;;      Totals:         0       0       0       0       0       0       0
  2758 ;;Total ram usage:        0 bytes
  2759 ;; Hardware stack levels used:    1
  2760 ;; Hardware stack levels required when called:    4
  2761 ;; This function calls:
  2762 ;;		Nothing
  2763 ;; This function is called by:
  2764 ;;		_main
  2765 ;; This function uses a non-reentrant model
  2766 ;;
  2767                           
  2768                           	psect	text12
  2769  00251E                     __ptext12:
  2770                           	callstack 0
  2771  00251E                     _readSeq:
  2772                           	callstack 0
  2773  00251E  FFFF               	dw	65535	; assembler added errata NOP
  2774  002520                     
  2775                           ;usart.c: 58:     return dataCounter;
  2776  002520  5061               	movf	_dataCounter^0,w,c
  2777  002522  0012               	return		;funcret
  2778  002524  FFFF               	dw	65535	; errata NOP
  2779  002526                     __end_of_readSeq:
  2780                           	callstack 0
  2781                           
  2782 ;; *************** function _newSequence *****************
  2783 ;; Defined at:
  2784 ;;		line 65 in file "usart.c"
  2785 ;; Parameters:    Size  Location     Type
  2786 ;;		None
  2787 ;; Auto vars:     Size  Location     Type
  2788 ;;		None
  2789 ;; Return value:  Size  Location     Type
  2790 ;;                  1    wreg      unsigned char 
  2791 ;; Registers used:
  2792 ;;		wreg, status,2
  2793 ;; Tracked objects:
  2794 ;;		On entry : 0/0
  2795 ;;		On exit  : 0/0
  2796 ;;		Unchanged: 0/0
  2797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2798 ;;      Params:         0       0       0       0       0       0       0
  2799 ;;      Locals:         0       0       0       0       0       0       0
  2800 ;;      Temps:          0       0       0       0       0       0       0
  2801 ;;      Totals:         0       0       0       0       0       0       0
  2802 ;;Total ram usage:        0 bytes
  2803 ;; Hardware stack levels used:    1
  2804 ;; Hardware stack levels required when called:    4
  2805 ;; This function calls:
  2806 ;;		Nothing
  2807 ;; This function is called by:
  2808 ;;		_main
  2809 ;; This function uses a non-reentrant model
  2810 ;;
  2811                           
  2812                           	psect	text13
  2813  002526                     __ptext13:
  2814                           	callstack 0
  2815  002526                     _newSequence:
  2816                           	callstack 0
  2817  002526  FFFF               	dw	65535	; assembler added errata NOP
  2818  002528                     
  2819                           ;usart.c: 66:     return _newSequence;
  2820  002528  505F               	movf	__newSequence^0,w,c
  2821  00252A  0012               	return		;funcret
  2822  00252C  FFFF               	dw	65535	; errata NOP
  2823  00252E                     __end_of_newSequence:
  2824                           	callstack 0
  2825                           
  2826 ;; *************** function _interruptInit *****************
  2827 ;; Defined at:
  2828 ;;		line 21 in file "interrupt.c"
  2829 ;; Parameters:    Size  Location     Type
  2830 ;;		None
  2831 ;; Auto vars:     Size  Location     Type
  2832 ;;		None
  2833 ;; Return value:  Size  Location     Type
  2834 ;;                  1    wreg      void 
  2835 ;; Registers used:
  2836 ;;		None
  2837 ;; Tracked objects:
  2838 ;;		On entry : 0/0
  2839 ;;		On exit  : 0/0
  2840 ;;		Unchanged: 0/0
  2841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2842 ;;      Params:         0       0       0       0       0       0       0
  2843 ;;      Locals:         0       0       0       0       0       0       0
  2844 ;;      Temps:          0       0       0       0       0       0       0
  2845 ;;      Totals:         0       0       0       0       0       0       0
  2846 ;;Total ram usage:        0 bytes
  2847 ;; Hardware stack levels used:    1
  2848 ;; Hardware stack levels required when called:    4
  2849 ;; This function calls:
  2850 ;;		Nothing
  2851 ;; This function is called by:
  2852 ;;		_main
  2853 ;; This function uses a non-reentrant model
  2854 ;;
  2855                           
  2856                           	psect	text14
  2857  002306                     __ptext14:
  2858                           	callstack 0
  2859  002306                     _interruptInit:
  2860                           	callstack 0
  2861  002306  FFFF               	dw	65535	; assembler added errata NOP
  2862  002308                     
  2863                           ;interrupt.c: 23:     if(!INTCONbits.GIE){
  2864  002308  BEF2               	btfsc	242,7,c	;volatile
  2865  00230A  EF89  F011         	goto	u3721
  2866  00230E  EF8C  F011         	goto	u3720
  2867  002312                     u3721:
  2868  002312  FFFF               	dw	65535	; assembler added errata NOP
  2869  002314  EF8E  F011         	goto	l449
  2870  002318                     u3720:
  2871  002318  FFFF               	dw	65535	; assembler added errata NOP
  2872  00231A                     
  2873                           ;interrupt.c: 24:         INTCONbits.GIE = 1;
  2874  00231A  8EF2               	bsf	242,7,c	;volatile
  2875  00231C                     l449:
  2876  00231C  FFFF               	dw	65535	; assembler added errata NOP
  2877                           
  2878                           ;interrupt.c: 26:     if(!INTCONbits.PEIE){
  2879  00231E  BCF2               	btfsc	242,6,c	;volatile
  2880  002320  EF94  F011         	goto	u3731
  2881  002324  EF97  F011         	goto	u3730
  2882  002328                     u3731:
  2883  002328  FFFF               	dw	65535	; assembler added errata NOP
  2884  00232A  EF99  F011         	goto	l450
  2885  00232E                     u3730:
  2886  00232E  FFFF               	dw	65535	; assembler added errata NOP
  2887  002330                     
  2888                           ;interrupt.c: 27:         INTCONbits.PEIE = 1;
  2889  002330  8CF2               	bsf	242,6,c	;volatile
  2890  002332                     l450:
  2891  002332  FFFF               	dw	65535	; assembler added errata NOP
  2892                           
  2893                           ;interrupt.c: 31:     RCONbits.IPEN = 1;
  2894  002334  8ED0               	bsf	208,7,c	;volatile
  2895                           
  2896                           ;interrupt.c: 32:     INTCONbits.T0IE = 1;
  2897  002336  8AF2               	bsf	242,5,c	;volatile
  2898                           
  2899                           ;interrupt.c: 33:     PIE1bits.TMR1IE = 1;
  2900  002338  809D               	bsf	157,0,c	;volatile
  2901                           
  2902                           ;interrupt.c: 34:     PIE1bits.TMR2IE = 1;
  2903  00233A  829D               	bsf	157,1,c	;volatile
  2904                           
  2905                           ;interrupt.c: 35:     PIE1bits.RC1IE = 1;
  2906  00233C  8A9D               	bsf	157,5,c	;volatile
  2907  00233E  0012               	return		;funcret
  2908  002340  FFFF               	dw	65535	; errata NOP
  2909  002342                     __end_of_interruptInit:
  2910                           	callstack 0
  2911                           
  2912 ;; *************** function _initPinMotors *****************
  2913 ;; Defined at:
  2914 ;;		line 49 in file "motors.c"
  2915 ;; Parameters:    Size  Location     Type
  2916 ;;		None
  2917 ;; Auto vars:     Size  Location     Type
  2918 ;;		None
  2919 ;; Return value:  Size  Location     Type
  2920 ;;                  1    wreg      void 
  2921 ;; Registers used:
  2922 ;;		wreg, status,2, status,0
  2923 ;; Tracked objects:
  2924 ;;		On entry : 0/0
  2925 ;;		On exit  : 0/0
  2926 ;;		Unchanged: 0/0
  2927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2928 ;;      Params:         0       0       0       0       0       0       0
  2929 ;;      Locals:         0       0       0       0       0       0       0
  2930 ;;      Temps:          0       0       0       0       0       0       0
  2931 ;;      Totals:         0       0       0       0       0       0       0
  2932 ;;Total ram usage:        0 bytes
  2933 ;; Hardware stack levels used:    1
  2934 ;; Hardware stack levels required when called:    4
  2935 ;; This function calls:
  2936 ;;		Nothing
  2937 ;; This function is called by:
  2938 ;;		_main
  2939 ;; This function uses a non-reentrant model
  2940 ;;
  2941                           
  2942                           	psect	text15
  2943  00239A                     __ptext15:
  2944                           	callstack 0
  2945  00239A                     _initPinMotors:
  2946                           	callstack 0
  2947  00239A  FFFF               	dw	65535	; assembler added errata NOP
  2948  00239C                     
  2949                           ;motors.c: 51:     ADCON1bits.PCFG = 0x06;
  2950  00239C  50C1               	movf	193,w,c	;volatile
  2951  00239E  0BF0               	andlw	-16
  2952  0023A0  0906               	iorlw	6
  2953  0023A2  6EC1               	movwf	193,c	;volatile
  2954  0023A4                     
  2955                           ;motors.c: 52:     TRISA &= 0b11010001;
  2956  0023A4  0ED1               	movlw	209
  2957  0023A6  1692               	andwf	146,f,c	;volatile
  2958  0023A8                     
  2959                           ;motors.c: 54:     TRISB &= 0b00000010;
  2960  0023A8  0E02               	movlw	2
  2961  0023AA  1693               	andwf	147,f,c	;volatile
  2962  0023AC                     
  2963                           ;motors.c: 55:     TRISC &= 0b11000000;
  2964  0023AC  0EC0               	movlw	192
  2965  0023AE  1694               	andwf	148,f,c	;volatile
  2966  0023B0                     
  2967                           ;motors.c: 56:     TRISD &= 0b11000000;
  2968  0023B0  0EC0               	movlw	192
  2969  0023B2  1695               	andwf	149,f,c	;volatile
  2970  0023B4                     
  2971                           ;motors.c: 59:     TRISEbits.TRISE0 = 1;
  2972  0023B4  8096               	bsf	150,0,c	;volatile
  2973  0023B6                     
  2974                           ;motors.c: 60:     TRISEbits.TRISE1 = 1;
  2975  0023B6  8296               	bsf	150,1,c	;volatile
  2976  0023B8                     
  2977                           ;motors.c: 61:     TRISEbits.TRISE2 = 1;
  2978  0023B8  8496               	bsf	150,2,c	;volatile
  2979  0023BA                     
  2980                           ;motors.c: 64:     TRISDbits.TRISD7 = 1;
  2981  0023BA  8E95               	bsf	149,7,c	;volatile
  2982  0023BC  0012               	return		;funcret
  2983  0023BE  FFFF               	dw	65535	; errata NOP
  2984  0023C0                     __end_of_initPinMotors:
  2985                           	callstack 0
  2986                           
  2987 ;; *************** function _initADC *****************
  2988 ;; Defined at:
  2989 ;;		line 18 in file "adc.c"
  2990 ;; Parameters:    Size  Location     Type
  2991 ;;		None
  2992 ;; Auto vars:     Size  Location     Type
  2993 ;;		None
  2994 ;; Return value:  Size  Location     Type
  2995 ;;                  1    wreg      void 
  2996 ;; Registers used:
  2997 ;;		wreg, status,2
  2998 ;; Tracked objects:
  2999 ;;		On entry : 0/0
  3000 ;;		On exit  : 0/0
  3001 ;;		Unchanged: 0/0
  3002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3003 ;;      Params:         0       0       0       0       0       0       0
  3004 ;;      Locals:         0       0       0       0       0       0       0
  3005 ;;      Temps:          0       0       0       0       0       0       0
  3006 ;;      Totals:         0       0       0       0       0       0       0
  3007 ;;Total ram usage:        0 bytes
  3008 ;; Hardware stack levels used:    1
  3009 ;; Hardware stack levels required when called:    4
  3010 ;; This function calls:
  3011 ;;		Nothing
  3012 ;; This function is called by:
  3013 ;;		_main
  3014 ;; This function uses a non-reentrant model
  3015 ;;
  3016                           
  3017                           	psect	text16
  3018  0023C0                     __ptext16:
  3019                           	callstack 0
  3020  0023C0                     _initADC:
  3021                           	callstack 0
  3022  0023C0  FFFF               	dw	65535	; assembler added errata NOP
  3023  0023C2                     
  3024                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  3025  0023C2  50C2               	movf	194,w,c	;volatile
  3026  0023C4  0B3F               	andlw	-193
  3027  0023C6  0940               	iorlw	64
  3028  0023C8  6EC2               	movwf	194,c	;volatile
  3029  0023CA                     
  3030                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  3031  0023CA  8CC1               	bsf	193,6,c	;volatile
  3032                           
  3033                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  3034  0023CC  0EC7               	movlw	-57
  3035  0023CE  16C2               	andwf	194,f,c	;volatile
  3036  0023D0                     
  3037                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  3038  0023D0  94C2               	bcf	194,2,c	;volatile
  3039  0023D2                     
  3040                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  3041  0023D2  90C2               	bcf	194,0,c	;volatile
  3042  0023D4                     
  3043                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  3044  0023D4  9EC1               	bcf	193,7,c	;volatile
  3045                           
  3046                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  3047  0023D6  50C1               	movf	193,w,c	;volatile
  3048  0023D8  0BF0               	andlw	-16
  3049  0023DA  090E               	iorlw	14
  3050  0023DC  6EC1               	movwf	193,c	;volatile
  3051  0023DE                     
  3052                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  3053  0023DE  8C9D               	bsf	157,6,c	;volatile
  3054  0023E0                     
  3055                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  3056  0023E0  8C9F               	bsf	159,6,c	;volatile
  3057  0023E2  0012               	return		;funcret
  3058  0023E4  FFFF               	dw	65535	; errata NOP
  3059  0023E6                     __end_of_initADC:
  3060                           	callstack 0
  3061                           
  3062 ;; *************** function _getNewSequence *****************
  3063 ;; Defined at:
  3064 ;;		line 43 in file "usart.c"
  3065 ;; Parameters:    Size  Location     Type
  3066 ;;		None
  3067 ;; Auto vars:     Size  Location     Type
  3068 ;;		None
  3069 ;; Return value:  Size  Location     Type
  3070 ;;                  2   17[COMRAM] PTR struct .
  3071 ;; Registers used:
  3072 ;;		wreg, status,2, status,0
  3073 ;; Tracked objects:
  3074 ;;		On entry : 0/0
  3075 ;;		On exit  : 0/0
  3076 ;;		Unchanged: 0/0
  3077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3078 ;;      Params:         2       0       0       0       0       0       0
  3079 ;;      Locals:         0       0       0       0       0       0       0
  3080 ;;      Temps:          0       0       0       0       0       0       0
  3081 ;;      Totals:         2       0       0       0       0       0       0
  3082 ;;Total ram usage:        2 bytes
  3083 ;; Hardware stack levels used:    1
  3084 ;; Hardware stack levels required when called:    4
  3085 ;; This function calls:
  3086 ;;		Nothing
  3087 ;; This function is called by:
  3088 ;;		_main
  3089 ;; This function uses a non-reentrant model
  3090 ;;
  3091                           
  3092                           	psect	text17
  3093  00245C                     __ptext17:
  3094                           	callstack 0
  3095  00245C                     _getNewSequence:
  3096                           	callstack 0
  3097  00245C  FFFF               	dw	65535	; assembler added errata NOP
  3098  00245E                     
  3099                           ;usart.c: 44:     return(&newSequenceData);
  3100  00245E  0EDE               	movlw	low _newSequenceData
  3101  002460  6E12               	movwf	?_getNewSequence^0,c
  3102  002462  0E00               	movlw	high _newSequenceData
  3103  002464  6E13               	movwf	(?_getNewSequence+1)^0,c
  3104  002466  0012               	return		;funcret
  3105  002468  FFFF               	dw	65535	; errata NOP
  3106  00246A                     __end_of_getNewSequence:
  3107                           	callstack 0
  3108                           
  3109 ;; *************** function _executeData *****************
  3110 ;; Defined at:
  3111 ;;		line 105 in file "main.c"
  3112 ;; Parameters:    Size  Location     Type
  3113 ;;		None
  3114 ;; Auto vars:     Size  Location     Type
  3115 ;;  data            2    9[BANK0 ] PTR struct .
  3116 ;;		 -> dataSequence(20), 
  3117 ;;  errCode         1   11[BANK0 ] unsigned char 
  3118 ;; Return value:  Size  Location     Type
  3119 ;;                  1    wreg      unsigned char 
  3120 ;; Registers used:
  3121 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3122 ;; Tracked objects:
  3123 ;;		On entry : 0/0
  3124 ;;		On exit  : 0/0
  3125 ;;		Unchanged: 0/0
  3126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3127 ;;      Params:         0       0       0       0       0       0       0
  3128 ;;      Locals:         0       3       0       0       0       0       0
  3129 ;;      Temps:          0       2       0       0       0       0       0
  3130 ;;      Totals:         0       5       0       0       0       0       0
  3131 ;;Total ram usage:        5 bytes
  3132 ;; Hardware stack levels used:    1
  3133 ;; Hardware stack levels required when called:    6
  3134 ;; This function calls:
  3135 ;;		_getData
  3136 ;;		_liftArm
  3137 ;;		_moveToPoint
  3138 ;;		_pickObject
  3139 ;;		_releaseObj
  3140 ;;		_rotateObj
  3141 ;;		_touchObject
  3142 ;;		_touchTherm
  3143 ;; This function is called by:
  3144 ;;		_main
  3145 ;; This function uses a non-reentrant model
  3146 ;;
  3147                           
  3148                           	psect	text18
  3149  000DBE                     __ptext18:
  3150                           	callstack 0
  3151  000DBE                     _executeData:
  3152                           	callstack 0
  3153  000DBE  FFFF               	dw	65535	; assembler added errata NOP
  3154  000DC0                     
  3155                           ;main.c: 106:     t_sequence *data = getData();
  3156  000DC0  EC35  F012         	call	_getData	;wreg free
  3157  000DC4  C012  F0EF         	movff	?_getData,executeData@data
  3158  000DC8  C013  F0F0         	movff	?_getData+1,executeData@data+1
  3159  000DCC                     
  3160                           ;main.c: 112:     switch(data->feederLine){
  3161  000DCC  EF91  F007         	goto	l4269
  3162  000DD0                     l4241:
  3163  000DD0  FFFF               	dw	65535	; assembler added errata NOP
  3164                           
  3165                           ; BSR set to: 0
  3166                           ;main.c: 115:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0
      +                          ], feeder1Pos[1]);
  3167  000DD2  C04C  F015         	movff	_posVector,moveToPoint@x1
  3168  000DD6  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3169  000DD8  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3170  000DDC  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3171  000DDE  0E0D               	movlw	low _feeder1Pos
  3172  000DE0  6EF6               	movwf	tblptrl,c
  3173  000DE2                     	if	1	;There is more than 1 active tblptr byte
  3174  000DE2  0E06               	movlw	high _feeder1Pos
  3175  000DE4  6EF7               	movwf	tblptrh,c
  3176  000DE6                     	endif
  3177  000DE6                     	if	0	;There are less than 3 active tblptr bytes
  3178  000DE6                     	endif
  3179  000DE6  0008               	tblrd		*
  3180  000DE8  FFFF               	dw	65535	; errata NOP
  3181  000DEA  50F5               	movf	tablat,w,c
  3182  000DEC  6E19               	movwf	moveToPoint@x2^0,c
  3183  000DEE  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3184  000DF0  0E0E               	movlw	low (_feeder1Pos+1)
  3185  000DF2  6EF6               	movwf	tblptrl,c
  3186  000DF4  0E06               	movlw	high (_feeder1Pos+1)
  3187  000DF6  6EF7               	movwf	tblptrh,c
  3188  000DF8                     	if	0	;tblptru may be non-zero
  3189  000DF8                     	endif
  3190  000DF8                     	if	0	;tblptru may be non-zero
  3191  000DF8                     	endif
  3192  000DF8  0008               	tblrd		*
  3193  000DFA  FFFF               	dw	65535	; errata NOP
  3194  000DFC  50F5               	movf	tablat,w,c
  3195  000DFE  6E1B               	movwf	moveToPoint@y2^0,c
  3196  000E00  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3197  000E02  EC22  F005         	call	_moveToPoint	;wreg free
  3198  000E06  0100               	movlb	0	; () banked
  3199  000E08  6FF1               	movwf	executeData@errCode& (0+255),b
  3200  000E0A                     
  3201                           ; BSR set to: 0
  3202                           ;main.c: 117:             posVector[0] = feeder1Pos[0];
  3203  000E0A  0E0D               	movlw	low _feeder1Pos
  3204  000E0C  6EF6               	movwf	tblptrl,c
  3205  000E0E                     	if	1	;There is more than 1 active tblptr byte
  3206  000E0E  0E06               	movlw	high _feeder1Pos
  3207  000E10  6EF7               	movwf	tblptrh,c
  3208  000E12                     	endif
  3209  000E12                     	if	0	;There are less than 3 active tblptr bytes
  3210  000E12                     	endif
  3211  000E12  0008               	tblrd		*
  3212  000E14  FFFF               	dw	65535	; errata NOP
  3213  000E16  CFF5 F04C          	movff	tablat,_posVector
  3214  000E1A                     
  3215                           ; BSR set to: 0
  3216                           ;main.c: 118:             posVector[1] = feeder1Pos[1];
  3217  000E1A  0E0E               	movlw	low (_feeder1Pos+1)
  3218  000E1C  6EF6               	movwf	tblptrl,c
  3219  000E1E  0E06               	movlw	high (_feeder1Pos+1)
  3220  000E20  6EF7               	movwf	tblptrh,c
  3221  000E22                     	if	0	;tblptru may be non-zero
  3222  000E22                     	endif
  3223  000E22                     	if	0	;tblptru may be non-zero
  3224  000E22                     	endif
  3225  000E22  0008               	tblrd		*
  3226  000E24  FFFF               	dw	65535	; errata NOP
  3227  000E26  CFF5 F04D          	movff	tablat,_posVector+1
  3228                           
  3229                           ;main.c: 119:             break;
  3230  000E2A  EFB5  F007         	goto	l4271
  3231  000E2E                     l4247:
  3232  000E2E  FFFF               	dw	65535	; assembler added errata NOP
  3233                           
  3234                           ; BSR set to: 0
  3235                           ;main.c: 121:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3236  000E30  C04C  F015         	movff	_posVector,moveToPoint@x1
  3237  000E34  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3238  000E36  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3239  000E3A  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3240  000E3C  0E0B               	movlw	low _feeder2Pos
  3241  000E3E  6EF6               	movwf	tblptrl,c
  3242  000E40                     	if	1	;There is more than 1 active tblptr byte
  3243  000E40  0E06               	movlw	high _feeder2Pos
  3244  000E42  6EF7               	movwf	tblptrh,c
  3245  000E44                     	endif
  3246  000E44                     	if	0	;There are less than 3 active tblptr bytes
  3247  000E44                     	endif
  3248  000E44  0008               	tblrd		*
  3249  000E46  FFFF               	dw	65535	; errata NOP
  3250  000E48  50F5               	movf	tablat,w,c
  3251  000E4A  6E19               	movwf	moveToPoint@x2^0,c
  3252  000E4C  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3253  000E4E  0E0C               	movlw	low (_feeder2Pos+1)
  3254  000E50  6EF6               	movwf	tblptrl,c
  3255  000E52  0E06               	movlw	high (_feeder2Pos+1)
  3256  000E54  6EF7               	movwf	tblptrh,c
  3257  000E56                     	if	0	;tblptru may be non-zero
  3258  000E56                     	endif
  3259  000E56                     	if	0	;tblptru may be non-zero
  3260  000E56                     	endif
  3261  000E56  0008               	tblrd		*
  3262  000E58  FFFF               	dw	65535	; errata NOP
  3263  000E5A  50F5               	movf	tablat,w,c
  3264  000E5C  6E1B               	movwf	moveToPoint@y2^0,c
  3265  000E5E  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3266  000E60  EC22  F005         	call	_moveToPoint	;wreg free
  3267  000E64  0100               	movlb	0	; () banked
  3268  000E66  6FF1               	movwf	executeData@errCode& (0+255),b
  3269  000E68                     
  3270                           ; BSR set to: 0
  3271                           ;main.c: 122:             posVector[0] = feeder2Pos[0];
  3272  000E68  0E0B               	movlw	low _feeder2Pos
  3273  000E6A  6EF6               	movwf	tblptrl,c
  3274  000E6C                     	if	1	;There is more than 1 active tblptr byte
  3275  000E6C  0E06               	movlw	high _feeder2Pos
  3276  000E6E  6EF7               	movwf	tblptrh,c
  3277  000E70                     	endif
  3278  000E70                     	if	0	;There are less than 3 active tblptr bytes
  3279  000E70                     	endif
  3280  000E70  0008               	tblrd		*
  3281  000E72  FFFF               	dw	65535	; errata NOP
  3282  000E74  CFF5 F04C          	movff	tablat,_posVector
  3283  000E78                     
  3284                           ; BSR set to: 0
  3285                           ;main.c: 123:             posVector[1] = feeder2Pos[1];
  3286  000E78  0E0C               	movlw	low (_feeder2Pos+1)
  3287  000E7A  6EF6               	movwf	tblptrl,c
  3288  000E7C  0E06               	movlw	high (_feeder2Pos+1)
  3289  000E7E  6EF7               	movwf	tblptrh,c
  3290  000E80                     	if	0	;tblptru may be non-zero
  3291  000E80                     	endif
  3292  000E80                     	if	0	;tblptru may be non-zero
  3293  000E80                     	endif
  3294  000E80  0008               	tblrd		*
  3295  000E82  FFFF               	dw	65535	; errata NOP
  3296  000E84  CFF5 F04D          	movff	tablat,_posVector+1
  3297                           
  3298                           ;main.c: 124:             break;
  3299  000E88  EFB5  F007         	goto	l4271
  3300  000E8C                     l4253:
  3301  000E8C  FFFF               	dw	65535	; assembler added errata NOP
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;main.c: 126:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3305  000E8E  C04C  F015         	movff	_posVector,moveToPoint@x1
  3306  000E92  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3307  000E94  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3308  000E98  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3309  000E9A  0E09               	movlw	low _feeder3Pos
  3310  000E9C  6EF6               	movwf	tblptrl,c
  3311  000E9E                     	if	1	;There is more than 1 active tblptr byte
  3312  000E9E  0E06               	movlw	high _feeder3Pos
  3313  000EA0  6EF7               	movwf	tblptrh,c
  3314  000EA2                     	endif
  3315  000EA2                     	if	0	;There are less than 3 active tblptr bytes
  3316  000EA2                     	endif
  3317  000EA2  0008               	tblrd		*
  3318  000EA4  FFFF               	dw	65535	; errata NOP
  3319  000EA6  50F5               	movf	tablat,w,c
  3320  000EA8  6E19               	movwf	moveToPoint@x2^0,c
  3321  000EAA  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3322  000EAC  0E0A               	movlw	low (_feeder3Pos+1)
  3323  000EAE  6EF6               	movwf	tblptrl,c
  3324  000EB0  0E06               	movlw	high (_feeder3Pos+1)
  3325  000EB2  6EF7               	movwf	tblptrh,c
  3326  000EB4                     	if	0	;tblptru may be non-zero
  3327  000EB4                     	endif
  3328  000EB4                     	if	0	;tblptru may be non-zero
  3329  000EB4                     	endif
  3330  000EB4  0008               	tblrd		*
  3331  000EB6  FFFF               	dw	65535	; errata NOP
  3332  000EB8  50F5               	movf	tablat,w,c
  3333  000EBA  6E1B               	movwf	moveToPoint@y2^0,c
  3334  000EBC  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3335  000EBE  EC22  F005         	call	_moveToPoint	;wreg free
  3336  000EC2  0100               	movlb	0	; () banked
  3337  000EC4  6FF1               	movwf	executeData@errCode& (0+255),b
  3338  000EC6                     
  3339                           ; BSR set to: 0
  3340                           ;main.c: 127:             posVector[0] = feeder3Pos[0];
  3341  000EC6  0E09               	movlw	low _feeder3Pos
  3342  000EC8  6EF6               	movwf	tblptrl,c
  3343  000ECA                     	if	1	;There is more than 1 active tblptr byte
  3344  000ECA  0E06               	movlw	high _feeder3Pos
  3345  000ECC  6EF7               	movwf	tblptrh,c
  3346  000ECE                     	endif
  3347  000ECE                     	if	0	;There are less than 3 active tblptr bytes
  3348  000ECE                     	endif
  3349  000ECE  0008               	tblrd		*
  3350  000ED0  FFFF               	dw	65535	; errata NOP
  3351  000ED2  CFF5 F04C          	movff	tablat,_posVector
  3352  000ED6                     
  3353                           ; BSR set to: 0
  3354                           ;main.c: 128:             posVector[1] = feeder3Pos[1];
  3355  000ED6  0E0A               	movlw	low (_feeder3Pos+1)
  3356  000ED8  6EF6               	movwf	tblptrl,c
  3357  000EDA  0E06               	movlw	high (_feeder3Pos+1)
  3358  000EDC  6EF7               	movwf	tblptrh,c
  3359  000EDE                     	if	0	;tblptru may be non-zero
  3360  000EDE                     	endif
  3361  000EDE                     	if	0	;tblptru may be non-zero
  3362  000EDE                     	endif
  3363  000EDE  0008               	tblrd		*
  3364  000EE0  FFFF               	dw	65535	; errata NOP
  3365  000EE2  CFF5 F04D          	movff	tablat,_posVector+1
  3366                           
  3367                           ;main.c: 129:             break;
  3368  000EE6  EFB5  F007         	goto	l4271
  3369  000EEA                     l4259:
  3370  000EEA  FFFF               	dw	65535	; assembler added errata NOP
  3371                           
  3372                           ; BSR set to: 0
  3373                           ;main.c: 133:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3374  000EEC  C04C  F015         	movff	_posVector,moveToPoint@x1
  3375  000EF0  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3376  000EF2  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3377  000EF6  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3378  000EF8  C055  F019         	movff	_newFeeder,moveToPoint@x2
  3379  000EFC  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3380  000EFE  C056  F01B         	movff	_newFeeder+1,moveToPoint@y2
  3381  000F02  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3382  000F04  EC22  F005         	call	_moveToPoint	;wreg free
  3383  000F08  0100               	movlb	0	; () banked
  3384  000F0A  6FF1               	movwf	executeData@errCode& (0+255),b
  3385  000F0C                     
  3386                           ; BSR set to: 0
  3387                           ;main.c: 134:             posVector[0] = newFeeder[0];
  3388  000F0C  C055  F04C         	movff	_newFeeder,_posVector
  3389  000F10                     
  3390                           ; BSR set to: 0
  3391                           ;main.c: 135:             posVector[1] = newFeeder[1];
  3392  000F10  C056  F04D         	movff	_newFeeder+1,_posVector+1
  3393                           
  3394                           ;main.c: 136:             break;
  3395  000F14  EFB5  F007         	goto	l4271
  3396  000F18                     l4265:
  3397  000F18  FFFF               	dw	65535	; assembler added errata NOP
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;main.c: 140:             errCode = 1;
  3401  000F1A  0E01               	movlw	1
  3402  000F1C  6FF1               	movwf	executeData@errCode& (0+255),b
  3403                           
  3404                           ;main.c: 141:             break;
  3405  000F1E  EFB5  F007         	goto	l4271
  3406  000F22                     l4269:
  3407  000F22  FFFF               	dw	65535	; assembler added errata NOP
  3408  000F24  C0EF  FFD9         	movff	executeData@data,fsr2l
  3409  000F28  C0F0  FFDA         	movff	executeData@data+1,fsr2h
  3410  000F2C  50DF               	movf	indf2,w,c
  3411  000F2E  0100               	movlb	0	; () banked
  3412  000F30  6FED               	movwf	??_executeData& (0+255),b
  3413  000F32  6BEE               	clrf	(??_executeData+1)& (0+255),b
  3414                           
  3415                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3416                           ; Switch size 1, requested type "simple"
  3417                           ; Number of cases is 1, Range of values is 0 to 0
  3418                           ; switch strategies available:
  3419                           ; Name         Instructions Cycles
  3420                           ; simple_byte            4     3 (average)
  3421                           ;	Chosen strategy is simple_byte
  3422  000F34  51EE               	movf	(??_executeData+1)& (0+255),w,b
  3423  000F36  0A00               	xorlw	0	; case 0
  3424  000F38  B4D8               	btfsc	status,2,c
  3425  000F3A  EFA1  F007         	goto	l4555
  3426  000F3E  EF8C  F007         	goto	l4265
  3427  000F42                     l4555:
  3428  000F42  FFFF               	dw	65535	; assembler added errata NOP
  3429                           
  3430                           ; BSR set to: 0
  3431                           ; Switch size 1, requested type "simple"
  3432                           ; Number of cases is 4, Range of values is 0 to 255
  3433                           ; switch strategies available:
  3434                           ; Name         Instructions Cycles
  3435                           ; simple_byte           13     7 (average)
  3436                           ;	Chosen strategy is simple_byte
  3437  000F44  51ED               	movf	??_executeData& (0+255),w,b
  3438  000F46  0A00               	xorlw	0	; case 0
  3439  000F48  B4D8               	btfsc	status,2,c
  3440  000F4A  EFE8  F006         	goto	l4241
  3441  000F4E  0A01               	xorlw	1	; case 1
  3442  000F50  B4D8               	btfsc	status,2,c
  3443  000F52  EF17  F007         	goto	l4247
  3444  000F56  0A03               	xorlw	3	; case 2
  3445  000F58  B4D8               	btfsc	status,2,c
  3446  000F5A  EF46  F007         	goto	l4253
  3447  000F5E  0AFD               	xorlw	253	; case 255
  3448  000F60  B4D8               	btfsc	status,2,c
  3449  000F62  EF75  F007         	goto	l4259
  3450  000F66  EF8C  F007         	goto	l4265
  3451  000F6A                     l4271:
  3452  000F6A  FFFF               	dw	65535	; assembler added errata NOP
  3453                           
  3454                           ; BSR set to: 0
  3455                           ;main.c: 145:     if(!errCode){
  3456  000F6C  51F1               	movf	executeData@errCode& (0+255),w,b
  3457  000F6E  A4D8               	btfss	status,2,c
  3458  000F70  EFBC  F007         	goto	u3751
  3459  000F74  EFBF  F007         	goto	u3750
  3460  000F78                     u3751:
  3461  000F78  FFFF               	dw	65535	; assembler added errata NOP
  3462  000F7A  EFCD  F007         	goto	l4277
  3463  000F7E                     u3750:
  3464  000F7E  FFFF               	dw	65535	; assembler added errata NOP
  3465  000F80                     
  3466                           ; BSR set to: 0
  3467                           ;main.c: 148:         errCode = touchObject();
  3468  000F80  EC4F  F00E         	call	_touchObject	;wreg free
  3469  000F84  0100               	movlb	0	; () banked
  3470  000F86  6FF1               	movwf	executeData@errCode& (0+255),b
  3471  000F88                     
  3472                           ; BSR set to: 0
  3473                           ;main.c: 149:         if(errCode != 0){
  3474  000F88  51F1               	movf	executeData@errCode& (0+255),w,b
  3475  000F8A  B4D8               	btfsc	status,2,c
  3476  000F8C  EFCA  F007         	goto	u3761
  3477  000F90  EFCD  F007         	goto	u3760
  3478  000F94                     u3761:
  3479  000F94  FFFF               	dw	65535	; assembler added errata NOP
  3480  000F96  EFD1  F007         	goto	l4281
  3481  000F9A                     u3760:
  3482  000F9A                     l4277:
  3483  000F9A  FFFF               	dw	65535	; assembler added errata NOP
  3484                           
  3485                           ; BSR set to: 0
  3486                           ;main.c: 150:             return(errCode);
  3487  000F9C  51F1               	movf	executeData@errCode& (0+255),w,b
  3488  000F9E  EF5C  F008         	goto	l360
  3489  000FA2                     l4281:
  3490  000FA2  FFFF               	dw	65535	; assembler added errata NOP
  3491                           
  3492                           ; BSR set to: 0
  3493                           ;main.c: 153:         pickObject();
  3494  000FA4  ECB7  F011         	call	_pickObject	;wreg free
  3495  000FA8                     
  3496                           ;main.c: 156:         errCode = liftArm();
  3497  000FA8  EC42  F010         	call	_liftArm	;wreg free
  3498  000FAC  0100               	movlb	0	; () banked
  3499  000FAE  6FF1               	movwf	executeData@errCode& (0+255),b
  3500  000FB0                     
  3501                           ; BSR set to: 0
  3502                           ;main.c: 157:         if(errCode != 0){
  3503  000FB0  51F1               	movf	executeData@errCode& (0+255),w,b
  3504  000FB2  B4D8               	btfsc	status,2,c
  3505  000FB4  EFDE  F007         	goto	u3771
  3506  000FB8  EFE1  F007         	goto	u3770
  3507  000FBC                     u3771:
  3508  000FBC  FFFF               	dw	65535	; assembler added errata NOP
  3509  000FBE  EFE4  F007         	goto	l4291
  3510  000FC2                     u3770:
  3511  000FC2  FFFF               	dw	65535	; assembler added errata NOP
  3512  000FC4  EFCD  F007         	goto	l4277
  3513  000FC8                     l4291:
  3514  000FC8  FFFF               	dw	65535	; assembler added errata NOP
  3515                           
  3516                           ; BSR set to: 0
  3517                           ;main.c: 162:         errCode = moveToPoint(posVector[0], posVector[1], data->posX, data
      +                          ->posY);
  3518  000FCA  C04C  F015         	movff	_posVector,moveToPoint@x1
  3519  000FCE  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3520  000FD0  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3521  000FD4  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3522  000FD6  EE20 F001          	lfsr	2,1
  3523  000FDA  51EF               	movf	executeData@data& (0+255),w,b
  3524  000FDC  26D9               	addwf	fsr2l,f,c
  3525  000FDE  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3526  000FE0  22DA               	addwfc	fsr2h,f,c
  3527  000FE2  50DF               	movf	indf2,w,c
  3528  000FE4  6FED               	movwf	??_executeData& (0+255),b
  3529  000FE6  51ED               	movf	??_executeData& (0+255),w,b
  3530  000FE8  6E19               	movwf	moveToPoint@x2^0,c
  3531  000FEA  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3532  000FEC  EE20 F002          	lfsr	2,2
  3533  000FF0  51EF               	movf	executeData@data& (0+255),w,b
  3534  000FF2  26D9               	addwf	fsr2l,f,c
  3535  000FF4  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3536  000FF6  22DA               	addwfc	fsr2h,f,c
  3537  000FF8  50DF               	movf	indf2,w,c
  3538  000FFA  6FEE               	movwf	(??_executeData+1)& (0+255),b
  3539  000FFC  51EE               	movf	(??_executeData+1)& (0+255),w,b
  3540  000FFE  6E1B               	movwf	moveToPoint@y2^0,c
  3541  001000  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3542  001002  EC22  F005         	call	_moveToPoint	;wreg free
  3543  001006  0100               	movlb	0	; () banked
  3544  001008  6FF1               	movwf	executeData@errCode& (0+255),b
  3545  00100A                     
  3546                           ; BSR set to: 0
  3547                           ;main.c: 163:         if(errCode != 0){
  3548  00100A  51F1               	movf	executeData@errCode& (0+255),w,b
  3549  00100C  B4D8               	btfsc	status,2,c
  3550  00100E  EF0B  F008         	goto	u3781
  3551  001012  EF0E  F008         	goto	u3780
  3552  001016                     u3781:
  3553  001016  FFFF               	dw	65535	; assembler added errata NOP
  3554  001018  EF11  F008         	goto	l4299
  3555  00101C                     u3780:
  3556  00101C  FFFF               	dw	65535	; assembler added errata NOP
  3557  00101E  EFCD  F007         	goto	l4277
  3558  001022                     l4299:
  3559  001022  FFFF               	dw	65535	; assembler added errata NOP
  3560                           
  3561                           ; BSR set to: 0
  3562                           ;main.c: 166:         posVector[0] = data->posX;
  3563  001024  EE20 F001          	lfsr	2,1
  3564  001028  51EF               	movf	executeData@data& (0+255),w,b
  3565  00102A  26D9               	addwf	fsr2l,f,c
  3566  00102C  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3567  00102E  22DA               	addwfc	fsr2h,f,c
  3568  001030  50DF               	movf	indf2,w,c
  3569  001032  6E4C               	movwf	_posVector^0,c
  3570                           
  3571                           ;main.c: 167:         posVector[1] = data->posY;
  3572  001034  EE20 F002          	lfsr	2,2
  3573  001038  51EF               	movf	executeData@data& (0+255),w,b
  3574  00103A  26D9               	addwf	fsr2l,f,c
  3575  00103C  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3576  00103E  22DA               	addwfc	fsr2h,f,c
  3577  001040  50DF               	movf	indf2,w,c
  3578  001042  6E4D               	movwf	(_posVector+1)^0,c
  3579                           
  3580                           ;main.c: 170:         rotAngle = data->rotation - rotAngle;
  3581  001044  EE20 F003          	lfsr	2,3
  3582  001048  51EF               	movf	executeData@data& (0+255),w,b
  3583  00104A  26D9               	addwf	fsr2l,f,c
  3584  00104C  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3585  00104E  22DA               	addwfc	fsr2h,f,c
  3586  001050  50DF               	movf	indf2,w,c
  3587  001052  6FED               	movwf	??_executeData& (0+255),b
  3588  001054  5057               	movf	_rotAngle^0,w,c
  3589  001056  5DED               	subwf	??_executeData& (0+255),w,b
  3590  001058  6E57               	movwf	_rotAngle^0,c
  3591  00105A  5058               	movf	(_rotAngle+1)^0,w,c
  3592  00105C  A0D8               	btfss	status,0,c
  3593  00105E  2858               	incf	(_rotAngle+1)^0,w,c
  3594  001060  6A58               	clrf	(_rotAngle+1)^0,c
  3595  001062  5E58               	subwf	(_rotAngle+1)^0,f,c
  3596  001064                     
  3597                           ; BSR set to: 0
  3598                           ;main.c: 172:         if(rotAngle < 0){
  3599  001064  BE58               	btfsc	(_rotAngle+1)^0,7,c
  3600  001066  EF3A  F008         	goto	u3790
  3601  00106A  EF37  F008         	goto	u3791
  3602  00106E                     u3791:
  3603  00106E  FFFF               	dw	65535	; assembler added errata NOP
  3604  001070  EF3F  F008         	goto	l4305
  3605  001074                     u3790:
  3606  001074  FFFF               	dw	65535	; assembler added errata NOP
  3607  001076                     
  3608                           ; BSR set to: 0
  3609                           ;main.c: 173:             rotAngle += 360;
  3610  001076  0E68               	movlw	104
  3611  001078  2657               	addwf	_rotAngle^0,f,c
  3612  00107A  0E01               	movlw	1
  3613  00107C  2258               	addwfc	(_rotAngle+1)^0,f,c
  3614  00107E                     l4305:
  3615  00107E  FFFF               	dw	65535	; assembler added errata NOP
  3616                           
  3617                           ; BSR set to: 0
  3618                           ;main.c: 175:         rotateObj(rotAngle);
  3619  001080  5057               	movf	_rotAngle^0,w,c
  3620  001082  ECD5  F00F         	call	_rotateObj
  3621  001086                     
  3622                           ;main.c: 178:         errCode = touchTherm();
  3623  001086  ECD5  F00E         	call	_touchTherm	;wreg free
  3624  00108A  0100               	movlb	0	; () banked
  3625  00108C  6FF1               	movwf	executeData@errCode& (0+255),b
  3626  00108E                     
  3627                           ; BSR set to: 0
  3628                           ;main.c: 179:         if(errCode != 0){
  3629  00108E  51F1               	movf	executeData@errCode& (0+255),w,b
  3630  001090  B4D8               	btfsc	status,2,c
  3631  001092  EF4D  F008         	goto	u3801
  3632  001096  EF50  F008         	goto	u3800
  3633  00109A                     u3801:
  3634  00109A  FFFF               	dw	65535	; assembler added errata NOP
  3635  00109C  EF53  F008         	goto	l4315
  3636  0010A0                     u3800:
  3637  0010A0  FFFF               	dw	65535	; assembler added errata NOP
  3638  0010A2  EFCD  F007         	goto	l4277
  3639  0010A6                     l4315:
  3640  0010A6  FFFF               	dw	65535	; assembler added errata NOP
  3641                           
  3642                           ; BSR set to: 0
  3643                           ;main.c: 183:         releaseObj();
  3644  0010A8  ECA1  F011         	call	_releaseObj	;wreg free
  3645  0010AC                     
  3646                           ;main.c: 186:         errCode = liftArm();
  3647  0010AC  EC42  F010         	call	_liftArm	;wreg free
  3648  0010B0  0100               	movlb	0	; () banked
  3649  0010B2  6FF1               	movwf	executeData@errCode& (0+255),b
  3650  0010B4  EFCD  F007         	goto	l4277
  3651  0010B8                     l360:
  3652  0010B8  FFFF               	dw	65535	; assembler added errata NOP
  3653                           
  3654                           ; BSR set to: 0
  3655  0010BA  0012               	return		;funcret
  3656  0010BC  FFFF               	dw	65535	; errata NOP
  3657  0010BE                     __end_of_executeData:
  3658                           	callstack 0
  3659                           
  3660 ;; *************** function _touchTherm *****************
  3661 ;; Defined at:
  3662 ;;		line 594 in file "motors.c"
  3663 ;; Parameters:    Size  Location     Type
  3664 ;;		None
  3665 ;; Auto vars:     Size  Location     Type
  3666 ;;		None
  3667 ;; Return value:  Size  Location     Type
  3668 ;;                  1    wreg      unsigned char 
  3669 ;; Registers used:
  3670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3671 ;; Tracked objects:
  3672 ;;		On entry : 0/0
  3673 ;;		On exit  : 0/0
  3674 ;;		Unchanged: 0/0
  3675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3676 ;;      Params:         0       0       0       0       0       0       0
  3677 ;;      Locals:         0       0       0       0       0       0       0
  3678 ;;      Temps:          0       0       0       0       0       0       0
  3679 ;;      Totals:         0       0       0       0       0       0       0
  3680 ;;Total ram usage:        0 bytes
  3681 ;; Hardware stack levels used:    1
  3682 ;; Hardware stack levels required when called:    5
  3683 ;; This function calls:
  3684 ;;		_resetStep
  3685 ;;		_resetTherm
  3686 ;;		_returnTherm
  3687 ;;		_startADC
  3688 ;;		_stepMade
  3689 ;;		_stopADC
  3690 ;; This function is called by:
  3691 ;;		_executeData
  3692 ;; This function uses a non-reentrant model
  3693 ;;
  3694                           
  3695                           	psect	text19
  3696  001DAA                     __ptext19:
  3697                           	callstack 0
  3698  001DAA                     _touchTherm:
  3699                           	callstack 0
  3700  001DAA  FFFF               	dw	65535	; assembler added errata NOP
  3701  001DAC                     
  3702                           ;motors.c: 600:     motCounter[2][1] = 1;
  3703  001DAC  0E01               	movlw	1
  3704  001DAE  6E6C               	movwf	(_motCounter+5)^0,c
  3705  001DB0                     
  3706                           ;motors.c: 603:     T2CONbits.TMR2ON = 1;
  3707  001DB0  84CA               	bsf	202,2,c	;volatile
  3708                           
  3709                           ;motors.c: 605:     tm0Error = 0;
  3710  001DB2  0E00               	movlw	0
  3711  001DB4  6E5A               	movwf	(_tm0Error+1)^0,c
  3712  001DB6  0E00               	movlw	0
  3713  001DB8  6E59               	movwf	_tm0Error^0,c
  3714                           
  3715                           ;motors.c: 606:     tm0Limit = 50;
  3716  001DBA  0E32               	movlw	50
  3717  001DBC  6E66               	movwf	_tm0Limit^0,c
  3718  001DBE                     
  3719                           ;motors.c: 607:     T0CONbits.TMR0ON = 1;
  3720  001DBE  8ED5               	bsf	213,7,c	;volatile
  3721  001DC0                     l3927:
  3722  001DC0  FFFF               	dw	65535	; assembler added errata NOP
  3723                           
  3724                           ;motors.c: 610:     startADC();
  3725  001DC2  EC68  F012         	call	_startADC	;wreg free
  3726                           
  3727                           ;motors.c: 613:     while(!returnTherm() || PORTDbits.RD7){
  3728  001DC6  EF23  F00F         	goto	l3945
  3729  001DCA                     l3929:
  3730  001DCA  FFFF               	dw	65535	; assembler added errata NOP
  3731                           
  3732                           ;motors.c: 615:         resetStep();
  3733  001DCC  EC77  F012         	call	_resetStep	;wreg free
  3734  001DD0                     
  3735                           ;motors.c: 618:         if(tm0Error){
  3736  001DD0  5059               	movf	_tm0Error^0,w,c
  3737  001DD2  105A               	iorwf	(_tm0Error+1)^0,w,c
  3738  001DD4  B4D8               	btfsc	status,2,c
  3739  001DD6  EFEF  F00E         	goto	u3441
  3740  001DDA  EFF2  F00E         	goto	u3440
  3741  001DDE                     u3441:
  3742  001DDE  FFFF               	dw	65535	; assembler added errata NOP
  3743  001DE0  EFF9  F00E         	goto	l3935
  3744  001DE4                     u3440:
  3745  001DE4  FFFF               	dw	65535	; assembler added errata NOP
  3746  001DE6                     
  3747                           ;motors.c: 623:             tm0Error = 6;
  3748  001DE6  0E00               	movlw	0
  3749  001DE8  6E5A               	movwf	(_tm0Error+1)^0,c
  3750  001DEA  0E06               	movlw	6
  3751  001DEC  6E59               	movwf	_tm0Error^0,c
  3752                           
  3753                           ;motors.c: 624:             break;
  3754  001DEE  EF39  F00F         	goto	l3949
  3755  001DF2                     l3935:
  3756  001DF2  FFFF               	dw	65535	; assembler added errata NOP
  3757                           
  3758                           ;motors.c: 632:             motCounter[2][0] += motCounter[2][1];
  3759  001DF4  506C               	movf	(_motCounter+5)^0,w,c
  3760  001DF6  266B               	addwf	(_motCounter+4)^0,f,c
  3761                           
  3762                           ;motors.c: 633:             if(motCounter[2][0] > 3){
  3763  001DF8  506B               	movf	(_motCounter+4)^0,w,c
  3764  001DFA  0A80               	xorlw	128
  3765  001DFC  0F7C               	addlw	-132
  3766  001DFE  A0D8               	btfss	status,0,c
  3767  001E00  EF04  F00F         	goto	u3451
  3768  001E04  EF07  F00F         	goto	u3450
  3769  001E08                     u3451:
  3770  001E08  FFFF               	dw	65535	; assembler added errata NOP
  3771  001E0A  EF0A  F00F         	goto	l3939
  3772  001E0E                     u3450:
  3773  001E0E  FFFF               	dw	65535	; assembler added errata NOP
  3774  001E10                     
  3775                           ;motors.c: 634:                 motCounter[2][0] = 0;
  3776  001E10  0E00               	movlw	0
  3777  001E12  6E6B               	movwf	(_motCounter+4)^0,c
  3778  001E14                     l3939:
  3779  001E14  FFFF               	dw	65535	; assembler added errata NOP
  3780                           
  3781                           ;motors.c: 637:             LATC = stepMot3[motCounter[2][0]];
  3782  001E16  0E84               	movlw	low _stepMot3
  3783  001E18  246B               	addwf	(_motCounter+4)^0,w,c
  3784  001E1A  6ED9               	movwf	fsr2l,c
  3785  001E1C  6ADA               	clrf	fsr2h,c
  3786  001E1E  0E00               	movlw	high _stepMot3
  3787  001E20  22DA               	addwfc	fsr2h,f,c
  3788  001E22  50DF               	movf	indf2,w,c
  3789  001E24  6E8B               	movwf	139,c	;volatile
  3790  001E26                     l3941:
  3791  001E26  FFFF               	dw	65535	; assembler added errata NOP
  3792  001E28  EC02  F012         	call	_stepMade	;wreg free
  3793  001E2C  5012               	movf	?_stepMade^0,w,c
  3794  001E2E  1013               	iorwf	(?_stepMade+1)^0,w,c
  3795  001E30  B4D8               	btfsc	status,2,c
  3796  001E32  EF1D  F00F         	goto	u3461
  3797  001E36  EF20  F00F         	goto	u3460
  3798  001E3A                     u3461:
  3799  001E3A  FFFF               	dw	65535	; assembler added errata NOP
  3800  001E3C  EF13  F00F         	goto	l3941
  3801  001E40                     u3460:
  3802  001E40  FFFF               	dw	65535	; assembler added errata NOP
  3803  001E42  EFE0  F00E         	goto	l3927
  3804  001E46                     l3945:
  3805  001E46  FFFF               	dw	65535	; assembler added errata NOP
  3806                           
  3807                           ;motors.c: 613:     while(!returnTherm() || PORTDbits.RD7){
  3808  001E48  EC51  F012         	call	_returnTherm	;wreg free
  3809  001E4C  5012               	movf	?_returnTherm^0,w,c
  3810  001E4E  1013               	iorwf	(?_returnTherm+1)^0,w,c
  3811  001E50  B4D8               	btfsc	status,2,c
  3812  001E52  EF2D  F00F         	goto	u3471
  3813  001E56  EF30  F00F         	goto	u3470
  3814  001E5A                     u3471:
  3815  001E5A  FFFF               	dw	65535	; assembler added errata NOP
  3816  001E5C  EFE5  F00E         	goto	l3929
  3817  001E60                     u3470:
  3818  001E60  FFFF               	dw	65535	; assembler added errata NOP
  3819  001E62  BE83               	btfsc	131,7,c	;volatile
  3820  001E64  EF36  F00F         	goto	u3481
  3821  001E68  EF39  F00F         	goto	u3480
  3822  001E6C                     u3481:
  3823  001E6C  FFFF               	dw	65535	; assembler added errata NOP
  3824  001E6E  EFE5  F00E         	goto	l3929
  3825  001E72                     u3480:
  3826  001E72                     l3949:
  3827  001E72  FFFF               	dw	65535	; assembler added errata NOP
  3828                           
  3829                           ;motors.c: 658:     stopADC();
  3830  001E74  EC97  F012         	call	_stopADC	;wreg free
  3831  001E78                     
  3832                           ;motors.c: 661:     resetTherm();
  3833  001E78  EC72  F012         	call	_resetTherm	;wreg free
  3834  001E7C                     
  3835                           ;motors.c: 664:     T0CONbits.TMR0ON = 0;
  3836  001E7C  9ED5               	bcf	213,7,c	;volatile
  3837  001E7E                     
  3838                           ;motors.c: 665:     T2CONbits.TMR2ON = 0;
  3839  001E7E  94CA               	bcf	202,2,c	;volatile
  3840                           
  3841                           ;motors.c: 667:     TMR0 = 0;
  3842  001E80  0E00               	movlw	0
  3843  001E82  6ED7               	movwf	215,c	;volatile
  3844  001E84  0E00               	movlw	0
  3845  001E86  6ED6               	movwf	214,c	;volatile
  3846                           
  3847                           ;motors.c: 668:     TMR2 = 0;
  3848  001E88  0E00               	movlw	0
  3849  001E8A  6ECC               	movwf	204,c	;volatile
  3850  001E8C                     
  3851                           ;motors.c: 671:     resetStep();
  3852  001E8C  EC77  F012         	call	_resetStep	;wreg free
  3853  001E90                     
  3854                           ;motors.c: 674:     if(PORTDbits.RD7){
  3855  001E90  AE83               	btfss	131,7,c	;volatile
  3856  001E92  EF4D  F00F         	goto	u3491
  3857  001E96  EF50  F00F         	goto	u3490
  3858  001E9A                     u3491:
  3859  001E9A  FFFF               	dw	65535	; assembler added errata NOP
  3860  001E9C  EF55  F00F         	goto	l213
  3861  001EA0                     u3490:
  3862  001EA0  FFFF               	dw	65535	; assembler added errata NOP
  3863  001EA2                     
  3864                           ;motors.c: 675:         tm0Error = 2;
  3865  001EA2  0E00               	movlw	0
  3866  001EA4  6E5A               	movwf	(_tm0Error+1)^0,c
  3867  001EA6  0E02               	movlw	2
  3868  001EA8  6E59               	movwf	_tm0Error^0,c
  3869  001EAA                     l213:
  3870  001EAA  FFFF               	dw	65535	; assembler added errata NOP
  3871                           
  3872                           ;motors.c: 678:     return(tm0Error);
  3873  001EAC  5059               	movf	_tm0Error^0,w,c
  3874  001EAE  0012               	return		;funcret
  3875  001EB0  FFFF               	dw	65535	; errata NOP
  3876  001EB2                     __end_of_touchTherm:
  3877                           	callstack 0
  3878                           
  3879 ;; *************** function _returnTherm *****************
  3880 ;; Defined at:
  3881 ;;		line 58 in file "adc.c"
  3882 ;; Parameters:    Size  Location     Type
  3883 ;;		None
  3884 ;; Auto vars:     Size  Location     Type
  3885 ;;		None
  3886 ;; Return value:  Size  Location     Type
  3887 ;;                  2   17[COMRAM] unsigned int 
  3888 ;; Registers used:
  3889 ;;		None
  3890 ;; Tracked objects:
  3891 ;;		On entry : 0/0
  3892 ;;		On exit  : 0/0
  3893 ;;		Unchanged: 0/0
  3894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3895 ;;      Params:         2       0       0       0       0       0       0
  3896 ;;      Locals:         0       0       0       0       0       0       0
  3897 ;;      Temps:          0       0       0       0       0       0       0
  3898 ;;      Totals:         2       0       0       0       0       0       0
  3899 ;;Total ram usage:        2 bytes
  3900 ;; Hardware stack levels used:    1
  3901 ;; Hardware stack levels required when called:    4
  3902 ;; This function calls:
  3903 ;;		Nothing
  3904 ;; This function is called by:
  3905 ;;		_touchTherm
  3906 ;; This function uses a non-reentrant model
  3907 ;;
  3908                           
  3909                           	psect	text20
  3910  0024A2                     __ptext20:
  3911                           	callstack 0
  3912  0024A2                     _returnTherm:
  3913                           	callstack 0
  3914  0024A2  FFFF               	dw	65535	; assembler added errata NOP
  3915  0024A4                     
  3916                           ;adc.c: 59:     return therm_rel;
  3917  0024A4  C064  F012         	movff	_therm_rel,?_returnTherm	;volatile
  3918  0024A8  6A13               	clrf	(?_returnTherm+1)^0,c
  3919  0024AA  0012               	return		;funcret
  3920  0024AC  FFFF               	dw	65535	; errata NOP
  3921  0024AE                     __end_of_returnTherm:
  3922                           	callstack 0
  3923                           
  3924 ;; *************** function _touchObject *****************
  3925 ;; Defined at:
  3926 ;;		line 499 in file "motors.c"
  3927 ;; Parameters:    Size  Location     Type
  3928 ;;		None
  3929 ;; Auto vars:     Size  Location     Type
  3930 ;;		None
  3931 ;; Return value:  Size  Location     Type
  3932 ;;                  1    wreg      unsigned char 
  3933 ;; Registers used:
  3934 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3935 ;; Tracked objects:
  3936 ;;		On entry : 0/0
  3937 ;;		On exit  : 0/0
  3938 ;;		Unchanged: 0/0
  3939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3940 ;;      Params:         0       0       0       0       0       0       0
  3941 ;;      Locals:         0       0       0       0       0       0       0
  3942 ;;      Temps:          0       0       0       0       0       0       0
  3943 ;;      Totals:         0       0       0       0       0       0       0
  3944 ;;Total ram usage:        0 bytes
  3945 ;; Hardware stack levels used:    1
  3946 ;; Hardware stack levels required when called:    5
  3947 ;; This function calls:
  3948 ;;		_resetStep
  3949 ;;		_resetTherm
  3950 ;;		_resetTouch
  3951 ;;		_returnTouch
  3952 ;;		_startADC
  3953 ;;		_stepMade
  3954 ;;		_stopADC
  3955 ;; This function is called by:
  3956 ;;		_executeData
  3957 ;; This function uses a non-reentrant model
  3958 ;;
  3959                           
  3960                           	psect	text21
  3961  001C9E                     __ptext21:
  3962                           	callstack 0
  3963  001C9E                     _touchObject:
  3964                           	callstack 0
  3965  001C9E  FFFF               	dw	65535	; assembler added errata NOP
  3966  001CA0                     
  3967                           ;motors.c: 505:     motCounter[2][1] = 1;
  3968  001CA0  0E01               	movlw	1
  3969  001CA2  6E6C               	movwf	(_motCounter+5)^0,c
  3970  001CA4                     
  3971                           ;motors.c: 508:     T2CONbits.TMR2ON = 1;
  3972  001CA4  84CA               	bsf	202,2,c	;volatile
  3973                           
  3974                           ;motors.c: 510:     tm0Error = 0;
  3975  001CA6  0E00               	movlw	0
  3976  001CA8  6E5A               	movwf	(_tm0Error+1)^0,c
  3977  001CAA  0E00               	movlw	0
  3978  001CAC  6E59               	movwf	_tm0Error^0,c
  3979                           
  3980                           ;motors.c: 511:     tm0Limit = 50;
  3981  001CAE  0E32               	movlw	50
  3982  001CB0  6E66               	movwf	_tm0Limit^0,c
  3983  001CB2                     
  3984                           ;motors.c: 512:     T0CONbits.TMR0ON = 1;
  3985  001CB2  8ED5               	bsf	213,7,c	;volatile
  3986  001CB4                     l3881:
  3987  001CB4  FFFF               	dw	65535	; assembler added errata NOP
  3988                           
  3989                           ;motors.c: 515:     startADC();
  3990  001CB6  EC68  F012         	call	_startADC	;wreg free
  3991                           
  3992                           ;motors.c: 518:     while(!returnTouch() || PORTDbits.RD7){
  3993  001CBA  EF9D  F00E         	goto	l3899
  3994  001CBE                     l3883:
  3995  001CBE  FFFF               	dw	65535	; assembler added errata NOP
  3996                           
  3997                           ;motors.c: 520:         resetStep();
  3998  001CC0  EC77  F012         	call	_resetStep	;wreg free
  3999  001CC4                     
  4000                           ;motors.c: 523:         if(tm0Error){
  4001  001CC4  5059               	movf	_tm0Error^0,w,c
  4002  001CC6  105A               	iorwf	(_tm0Error+1)^0,w,c
  4003  001CC8  B4D8               	btfsc	status,2,c
  4004  001CCA  EF69  F00E         	goto	u3381
  4005  001CCE  EF6C  F00E         	goto	u3380
  4006  001CD2                     u3381:
  4007  001CD2  FFFF               	dw	65535	; assembler added errata NOP
  4008  001CD4  EF73  F00E         	goto	l3889
  4009  001CD8                     u3380:
  4010  001CD8  FFFF               	dw	65535	; assembler added errata NOP
  4011  001CDA                     
  4012                           ;motors.c: 528:             tm0Error = 6;
  4013  001CDA  0E00               	movlw	0
  4014  001CDC  6E5A               	movwf	(_tm0Error+1)^0,c
  4015  001CDE  0E06               	movlw	6
  4016  001CE0  6E59               	movwf	_tm0Error^0,c
  4017                           
  4018                           ;motors.c: 529:             break;
  4019  001CE2  EFB3  F00E         	goto	l3903
  4020  001CE6                     l3889:
  4021  001CE6  FFFF               	dw	65535	; assembler added errata NOP
  4022                           
  4023                           ;motors.c: 537:             motCounter[2][0] += motCounter[2][1];
  4024  001CE8  506C               	movf	(_motCounter+5)^0,w,c
  4025  001CEA  266B               	addwf	(_motCounter+4)^0,f,c
  4026                           
  4027                           ;motors.c: 538:             if(motCounter[2][0] > 3){
  4028  001CEC  506B               	movf	(_motCounter+4)^0,w,c
  4029  001CEE  0A80               	xorlw	128
  4030  001CF0  0F7C               	addlw	-132
  4031  001CF2  A0D8               	btfss	status,0,c
  4032  001CF4  EF7E  F00E         	goto	u3391
  4033  001CF8  EF81  F00E         	goto	u3390
  4034  001CFC                     u3391:
  4035  001CFC  FFFF               	dw	65535	; assembler added errata NOP
  4036  001CFE  EF84  F00E         	goto	l3893
  4037  001D02                     u3390:
  4038  001D02  FFFF               	dw	65535	; assembler added errata NOP
  4039  001D04                     
  4040                           ;motors.c: 539:                 motCounter[2][0] = 0;
  4041  001D04  0E00               	movlw	0
  4042  001D06  6E6B               	movwf	(_motCounter+4)^0,c
  4043  001D08                     l3893:
  4044  001D08  FFFF               	dw	65535	; assembler added errata NOP
  4045                           
  4046                           ;motors.c: 542:             LATC = stepMot3[motCounter[2][0]];
  4047  001D0A  0E84               	movlw	low _stepMot3
  4048  001D0C  246B               	addwf	(_motCounter+4)^0,w,c
  4049  001D0E  6ED9               	movwf	fsr2l,c
  4050  001D10  6ADA               	clrf	fsr2h,c
  4051  001D12  0E00               	movlw	high _stepMot3
  4052  001D14  22DA               	addwfc	fsr2h,f,c
  4053  001D16  50DF               	movf	indf2,w,c
  4054  001D18  6E8B               	movwf	139,c	;volatile
  4055  001D1A                     l3895:
  4056  001D1A  FFFF               	dw	65535	; assembler added errata NOP
  4057  001D1C  EC02  F012         	call	_stepMade	;wreg free
  4058  001D20  5012               	movf	?_stepMade^0,w,c
  4059  001D22  1013               	iorwf	(?_stepMade+1)^0,w,c
  4060  001D24  B4D8               	btfsc	status,2,c
  4061  001D26  EF97  F00E         	goto	u3401
  4062  001D2A  EF9A  F00E         	goto	u3400
  4063  001D2E                     u3401:
  4064  001D2E  FFFF               	dw	65535	; assembler added errata NOP
  4065  001D30  EF8D  F00E         	goto	l3895
  4066  001D34                     u3400:
  4067  001D34  FFFF               	dw	65535	; assembler added errata NOP
  4068  001D36  EF5A  F00E         	goto	l3881
  4069  001D3A                     l3899:
  4070  001D3A  FFFF               	dw	65535	; assembler added errata NOP
  4071                           
  4072                           ;motors.c: 518:     while(!returnTouch() || PORTDbits.RD7){
  4073  001D3C  EC57  F012         	call	_returnTouch	;wreg free
  4074  001D40  5012               	movf	?_returnTouch^0,w,c
  4075  001D42  1013               	iorwf	(?_returnTouch+1)^0,w,c
  4076  001D44  B4D8               	btfsc	status,2,c
  4077  001D46  EFA7  F00E         	goto	u3411
  4078  001D4A  EFAA  F00E         	goto	u3410
  4079  001D4E                     u3411:
  4080  001D4E  FFFF               	dw	65535	; assembler added errata NOP
  4081  001D50  EF5F  F00E         	goto	l3883
  4082  001D54                     u3410:
  4083  001D54  FFFF               	dw	65535	; assembler added errata NOP
  4084  001D56  BE83               	btfsc	131,7,c	;volatile
  4085  001D58  EFB0  F00E         	goto	u3421
  4086  001D5C  EFB3  F00E         	goto	u3420
  4087  001D60                     u3421:
  4088  001D60  FFFF               	dw	65535	; assembler added errata NOP
  4089  001D62  EF5F  F00E         	goto	l3883
  4090  001D66                     u3420:
  4091  001D66                     l3903:
  4092  001D66  FFFF               	dw	65535	; assembler added errata NOP
  4093                           
  4094                           ;motors.c: 561:     stopADC();
  4095  001D68  EC97  F012         	call	_stopADC	;wreg free
  4096  001D6C                     
  4097                           ;motors.c: 564:     resetTouch();
  4098  001D6C  EC6D  F012         	call	_resetTouch	;wreg free
  4099  001D70                     
  4100                           ;motors.c: 567:     T0CONbits.TMR0ON = 0;
  4101  001D70  9ED5               	bcf	213,7,c	;volatile
  4102  001D72                     
  4103                           ;motors.c: 568:     T2CONbits.TMR2ON = 0;
  4104  001D72  94CA               	bcf	202,2,c	;volatile
  4105                           
  4106                           ;motors.c: 570:     TMR0 = 0;
  4107  001D74  0E00               	movlw	0
  4108  001D76  6ED7               	movwf	215,c	;volatile
  4109  001D78  0E00               	movlw	0
  4110  001D7A  6ED6               	movwf	214,c	;volatile
  4111                           
  4112                           ;motors.c: 571:     TMR2 = 0;
  4113  001D7C  0E00               	movlw	0
  4114  001D7E  6ECC               	movwf	204,c	;volatile
  4115  001D80                     
  4116                           ;motors.c: 574:     resetStep();
  4117  001D80  EC77  F012         	call	_resetStep	;wreg free
  4118  001D84                     
  4119                           ;motors.c: 575:     resetTherm();
  4120  001D84  EC72  F012         	call	_resetTherm	;wreg free
  4121  001D88                     
  4122                           ;motors.c: 578:     if(PORTDbits.RD7){
  4123  001D88  AE83               	btfss	131,7,c	;volatile
  4124  001D8A  EFC9  F00E         	goto	u3431
  4125  001D8E  EFCC  F00E         	goto	u3430
  4126  001D92                     u3431:
  4127  001D92  FFFF               	dw	65535	; assembler added errata NOP
  4128  001D94  EFD1  F00E         	goto	l201
  4129  001D98                     u3430:
  4130  001D98  FFFF               	dw	65535	; assembler added errata NOP
  4131  001D9A                     
  4132                           ;motors.c: 579:         tm0Error = 2;
  4133  001D9A  0E00               	movlw	0
  4134  001D9C  6E5A               	movwf	(_tm0Error+1)^0,c
  4135  001D9E  0E02               	movlw	2
  4136  001DA0  6E59               	movwf	_tm0Error^0,c
  4137  001DA2                     l201:
  4138  001DA2  FFFF               	dw	65535	; assembler added errata NOP
  4139                           
  4140                           ;motors.c: 582:     return(tm0Error);
  4141  001DA4  5059               	movf	_tm0Error^0,w,c
  4142  001DA6  0012               	return		;funcret
  4143  001DA8  FFFF               	dw	65535	; errata NOP
  4144  001DAA                     __end_of_touchObject:
  4145                           	callstack 0
  4146                           
  4147 ;; *************** function _stopADC *****************
  4148 ;; Defined at:
  4149 ;;		line 44 in file "adc.c"
  4150 ;; Parameters:    Size  Location     Type
  4151 ;;		None
  4152 ;; Auto vars:     Size  Location     Type
  4153 ;;		None
  4154 ;; Return value:  Size  Location     Type
  4155 ;;                  1    wreg      void 
  4156 ;; Registers used:
  4157 ;;		None
  4158 ;; Tracked objects:
  4159 ;;		On entry : 0/0
  4160 ;;		On exit  : 0/0
  4161 ;;		Unchanged: 0/0
  4162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4163 ;;      Params:         0       0       0       0       0       0       0
  4164 ;;      Locals:         0       0       0       0       0       0       0
  4165 ;;      Temps:          0       0       0       0       0       0       0
  4166 ;;      Totals:         0       0       0       0       0       0       0
  4167 ;;Total ram usage:        0 bytes
  4168 ;; Hardware stack levels used:    1
  4169 ;; Hardware stack levels required when called:    4
  4170 ;; This function calls:
  4171 ;;		Nothing
  4172 ;; This function is called by:
  4173 ;;		_touchObject
  4174 ;;		_touchTherm
  4175 ;; This function uses a non-reentrant model
  4176 ;;
  4177                           
  4178                           	psect	text22
  4179  00252E                     __ptext22:
  4180                           	callstack 0
  4181  00252E                     _stopADC:
  4182                           	callstack 0
  4183  00252E  FFFF               	dw	65535	; assembler added errata NOP
  4184  002530                     
  4185                           ;adc.c: 45:     ADCON0bits.ADON = 0;
  4186  002530  90C2               	bcf	194,0,c	;volatile
  4187  002532  0012               	return		;funcret
  4188  002534  FFFF               	dw	65535	; errata NOP
  4189  002536                     __end_of_stopADC:
  4190                           	callstack 0
  4191                           
  4192 ;; *************** function _startADC *****************
  4193 ;; Defined at:
  4194 ;;		line 36 in file "adc.c"
  4195 ;; Parameters:    Size  Location     Type
  4196 ;;		None
  4197 ;; Auto vars:     Size  Location     Type
  4198 ;;		None
  4199 ;; Return value:  Size  Location     Type
  4200 ;;                  1    wreg      void 
  4201 ;; Registers used:
  4202 ;;		None
  4203 ;; Tracked objects:
  4204 ;;		On entry : 0/0
  4205 ;;		On exit  : 0/0
  4206 ;;		Unchanged: 0/0
  4207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4208 ;;      Params:         0       0       0       0       0       0       0
  4209 ;;      Locals:         0       0       0       0       0       0       0
  4210 ;;      Temps:          0       0       0       0       0       0       0
  4211 ;;      Totals:         0       0       0       0       0       0       0
  4212 ;;Total ram usage:        0 bytes
  4213 ;; Hardware stack levels used:    1
  4214 ;; Hardware stack levels required when called:    4
  4215 ;; This function calls:
  4216 ;;		Nothing
  4217 ;; This function is called by:
  4218 ;;		_touchObject
  4219 ;;		_touchTherm
  4220 ;; This function uses a non-reentrant model
  4221 ;;
  4222                           
  4223                           	psect	text23
  4224  0024D0                     __ptext23:
  4225                           	callstack 0
  4226  0024D0                     _startADC:
  4227                           	callstack 0
  4228  0024D0  FFFF               	dw	65535	; assembler added errata NOP
  4229  0024D2                     
  4230                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  4231  0024D2  80C2               	bsf	194,0,c	;volatile
  4232                           
  4233                           ;adc.c: 38:     ADCON0bits.GODONE = 1;
  4234  0024D4  84C2               	bsf	194,2,c	;volatile
  4235  0024D6  0012               	return		;funcret
  4236  0024D8  FFFF               	dw	65535	; errata NOP
  4237  0024DA                     __end_of_startADC:
  4238                           	callstack 0
  4239                           
  4240 ;; *************** function _returnTouch *****************
  4241 ;; Defined at:
  4242 ;;		line 51 in file "adc.c"
  4243 ;; Parameters:    Size  Location     Type
  4244 ;;		None
  4245 ;; Auto vars:     Size  Location     Type
  4246 ;;		None
  4247 ;; Return value:  Size  Location     Type
  4248 ;;                  2   17[COMRAM] unsigned int 
  4249 ;; Registers used:
  4250 ;;		None
  4251 ;; Tracked objects:
  4252 ;;		On entry : 0/0
  4253 ;;		On exit  : 0/0
  4254 ;;		Unchanged: 0/0
  4255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4256 ;;      Params:         2       0       0       0       0       0       0
  4257 ;;      Locals:         0       0       0       0       0       0       0
  4258 ;;      Temps:          0       0       0       0       0       0       0
  4259 ;;      Totals:         2       0       0       0       0       0       0
  4260 ;;Total ram usage:        2 bytes
  4261 ;; Hardware stack levels used:    1
  4262 ;; Hardware stack levels required when called:    4
  4263 ;; This function calls:
  4264 ;;		Nothing
  4265 ;; This function is called by:
  4266 ;;		_touchObject
  4267 ;; This function uses a non-reentrant model
  4268 ;;
  4269                           
  4270                           	psect	text24
  4271  0024AE                     __ptext24:
  4272                           	callstack 0
  4273  0024AE                     _returnTouch:
  4274                           	callstack 0
  4275  0024AE  FFFF               	dw	65535	; assembler added errata NOP
  4276  0024B0                     
  4277                           ;adc.c: 52:     return touch_rel;
  4278  0024B0  C065  F012         	movff	_touch_rel,?_returnTouch	;volatile
  4279  0024B4  6A13               	clrf	(?_returnTouch+1)^0,c
  4280  0024B6  0012               	return		;funcret
  4281  0024B8  FFFF               	dw	65535	; errata NOP
  4282  0024BA                     __end_of_returnTouch:
  4283                           	callstack 0
  4284                           
  4285 ;; *************** function _resetTouch *****************
  4286 ;; Defined at:
  4287 ;;		line 65 in file "adc.c"
  4288 ;; Parameters:    Size  Location     Type
  4289 ;;		None
  4290 ;; Auto vars:     Size  Location     Type
  4291 ;;		None
  4292 ;; Return value:  Size  Location     Type
  4293 ;;                  1    wreg      void 
  4294 ;; Registers used:
  4295 ;;		wreg, status,2
  4296 ;; Tracked objects:
  4297 ;;		On entry : 0/0
  4298 ;;		On exit  : 0/0
  4299 ;;		Unchanged: 0/0
  4300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4301 ;;      Params:         0       0       0       0       0       0       0
  4302 ;;      Locals:         0       0       0       0       0       0       0
  4303 ;;      Temps:          0       0       0       0       0       0       0
  4304 ;;      Totals:         0       0       0       0       0       0       0
  4305 ;;Total ram usage:        0 bytes
  4306 ;; Hardware stack levels used:    1
  4307 ;; Hardware stack levels required when called:    4
  4308 ;; This function calls:
  4309 ;;		Nothing
  4310 ;; This function is called by:
  4311 ;;		_touchObject
  4312 ;; This function uses a non-reentrant model
  4313 ;;
  4314                           
  4315                           	psect	text25
  4316  0024DA                     __ptext25:
  4317                           	callstack 0
  4318  0024DA                     _resetTouch:
  4319                           	callstack 0
  4320  0024DA  FFFF               	dw	65535	; assembler added errata NOP
  4321  0024DC                     
  4322                           ;adc.c: 66:     touch_rel = 0;
  4323  0024DC  0E00               	movlw	0
  4324  0024DE  6E65               	movwf	_touch_rel^0,c	;volatile
  4325  0024E0  0012               	return		;funcret
  4326  0024E2  FFFF               	dw	65535	; errata NOP
  4327  0024E4                     __end_of_resetTouch:
  4328                           	callstack 0
  4329                           
  4330 ;; *************** function _resetTherm *****************
  4331 ;; Defined at:
  4332 ;;		line 72 in file "adc.c"
  4333 ;; Parameters:    Size  Location     Type
  4334 ;;		None
  4335 ;; Auto vars:     Size  Location     Type
  4336 ;;		None
  4337 ;; Return value:  Size  Location     Type
  4338 ;;                  1    wreg      void 
  4339 ;; Registers used:
  4340 ;;		wreg, status,2
  4341 ;; Tracked objects:
  4342 ;;		On entry : 0/0
  4343 ;;		On exit  : 0/0
  4344 ;;		Unchanged: 0/0
  4345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4346 ;;      Params:         0       0       0       0       0       0       0
  4347 ;;      Locals:         0       0       0       0       0       0       0
  4348 ;;      Temps:          0       0       0       0       0       0       0
  4349 ;;      Totals:         0       0       0       0       0       0       0
  4350 ;;Total ram usage:        0 bytes
  4351 ;; Hardware stack levels used:    1
  4352 ;; Hardware stack levels required when called:    4
  4353 ;; This function calls:
  4354 ;;		Nothing
  4355 ;; This function is called by:
  4356 ;;		_touchObject
  4357 ;;		_touchTherm
  4358 ;; This function uses a non-reentrant model
  4359 ;;
  4360                           
  4361                           	psect	text26
  4362  0024E4                     __ptext26:
  4363                           	callstack 0
  4364  0024E4                     _resetTherm:
  4365                           	callstack 0
  4366  0024E4  FFFF               	dw	65535	; assembler added errata NOP
  4367  0024E6                     
  4368                           ;adc.c: 73:     therm_rel = 0;
  4369  0024E6  0E00               	movlw	0
  4370  0024E8  6E64               	movwf	_therm_rel^0,c	;volatile
  4371  0024EA  0012               	return		;funcret
  4372  0024EC  FFFF               	dw	65535	; errata NOP
  4373  0024EE                     __end_of_resetTherm:
  4374                           	callstack 0
  4375                           
  4376 ;; *************** function _rotateObj *****************
  4377 ;; Defined at:
  4378 ;;		line 760 in file "motors.c"
  4379 ;; Parameters:    Size  Location     Type
  4380 ;;  rotAngle        1    wreg     unsigned char 
  4381 ;; Auto vars:     Size  Location     Type
  4382 ;;  rotAngle        1    2[BANK0 ] unsigned char 
  4383 ;;  i               2    5[BANK0 ] unsigned int 
  4384 ;;  totStep         2    3[BANK0 ] int 
  4385 ;; Return value:  Size  Location     Type
  4386 ;;                  1    wreg      void 
  4387 ;; Registers used:
  4388 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4389 ;; Tracked objects:
  4390 ;;		On entry : 0/0
  4391 ;;		On exit  : 0/0
  4392 ;;		Unchanged: 0/0
  4393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4394 ;;      Params:         0       0       0       0       0       0       0
  4395 ;;      Locals:         0       5       0       0       0       0       0
  4396 ;;      Temps:          0       2       0       0       0       0       0
  4397 ;;      Totals:         0       7       0       0       0       0       0
  4398 ;;Total ram usage:        7 bytes
  4399 ;; Hardware stack levels used:    1
  4400 ;; Hardware stack levels required when called:    5
  4401 ;; This function calls:
  4402 ;;		___fldiv
  4403 ;;		___fltol
  4404 ;;		___xxtofl
  4405 ;;		_resetStep
  4406 ;;		_stepMade
  4407 ;; This function is called by:
  4408 ;;		_executeData
  4409 ;; This function uses a non-reentrant model
  4410 ;;
  4411                           
  4412                           	psect	text27
  4413  001FAA                     __ptext27:
  4414                           	callstack 0
  4415  001FAA                     _rotateObj:
  4416                           	callstack 0
  4417  001FAA  FFFF               	dw	65535	; assembler added errata NOP
  4418                           
  4419                           ;incstack = 0
  4420                           ;rotateObj@rotAngle stored from wreg
  4421  001FAC  0100               	movlb	0	; () banked
  4422  001FAE  6FE8               	movwf	rotateObj@rotAngle& (0+255),b
  4423  001FB0                     
  4424                           ;motors.c: 761:     static const float stepAngle = 0.08789;;motors.c: 762:     static ch
      +                          ar rotSequence[] = {0b100100, 0b001100, 0b011000, 0b110000};;motors.c: 763:     unsigned
      +                           int i;;motors.c: 764:     int totStep = rotAngle/stepAngle;
  4425  001FB0  0EAC               	movlw	172
  4426  001FB2  6E24               	movwf	___fldiv@a^0,c
  4427  001FB4  0EFF               	movlw	255
  4428  001FB6  6E25               	movwf	(___fldiv@a+1)^0,c
  4429  001FB8  0EB3               	movlw	179
  4430  001FBA  6E26               	movwf	(___fldiv@a+2)^0,c
  4431  001FBC  0E3D               	movlw	61
  4432  001FBE  6E27               	movwf	(___fldiv@a+3)^0,c
  4433  001FC0  0100               	movlb	0	; () banked
  4434  001FC2  51E8               	movf	rotateObj@rotAngle& (0+255),w,b
  4435  001FC4  6E12               	movwf	___xxtofl@val^0,c
  4436  001FC6  6A13               	clrf	(___xxtofl@val+1)^0,c
  4437  001FC8  6A14               	clrf	(___xxtofl@val+2)^0,c
  4438  001FCA  6A15               	clrf	(___xxtofl@val+3)^0,c
  4439  001FCC  0E01               	movlw	1
  4440  001FCE  EC5F  F008         	call	___xxtofl
  4441  001FD2  C012  F020         	movff	?___xxtofl,___fldiv@b
  4442  001FD6  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4443  001FDA  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4444  001FDE  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4445  001FE2  EC09  F003         	call	___fldiv	;wreg free
  4446  001FE6  C020  F039         	movff	?___fldiv,___fltol@f1
  4447  001FEA  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4448  001FEE  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4449  001FF2  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4450  001FF6  EC98  F00C         	call	___fltol	;wreg free
  4451  001FFA  C039  F0E9         	movff	?___fltol,rotateObj@totStep
  4452  001FFE  C03A  F0EA         	movff	?___fltol+1,rotateObj@totStep+1
  4453  002002                     
  4454                           ;motors.c: 767:     for(i = 0; i < totStep; i++){
  4455  002002  0E00               	movlw	0
  4456  002004  0100               	movlb	0	; () banked
  4457  002006  6FEC               	movwf	(rotateObj@i+1)& (0+255),b
  4458  002008  0E00               	movlw	0
  4459  00200A  6FEB               	movwf	rotateObj@i& (0+255),b
  4460  00200C  EF2E  F010         	goto	l4009
  4461  002010                     l3997:
  4462  002010  FFFF               	dw	65535	; assembler added errata NOP
  4463                           
  4464                           ; BSR set to: 0
  4465                           ;motors.c: 769:         LATD &= 0xC3;
  4466  002012  0EC3               	movlw	195
  4467  002014  168C               	andwf	140,f,c	;volatile
  4468  002016                     
  4469                           ; BSR set to: 0
  4470                           ;motors.c: 771:         LATD |= rotSequence[i%4];
  4471  002016  0E03               	movlw	3
  4472  002018  15EB               	andwf	rotateObj@i& (0+255),w,b
  4473  00201A  6FE6               	movwf	??_rotateObj& (0+255),b
  4474  00201C  0E00               	movlw	0
  4475  00201E  15EC               	andwf	(rotateObj@i+1)& (0+255),w,b
  4476  002020  6FE7               	movwf	(??_rotateObj+1)& (0+255),b
  4477  002022  0E80               	movlw	low rotateObj@rotSequence
  4478  002024  25E6               	addwf	??_rotateObj& (0+255),w,b
  4479  002026  6ED9               	movwf	fsr2l,c
  4480  002028  0E00               	movlw	high rotateObj@rotSequence
  4481  00202A  21E7               	addwfc	(??_rotateObj+1)& (0+255),w,b
  4482  00202C  6EDA               	movwf	fsr2h,c
  4483  00202E  50DF               	movf	indf2,w,c
  4484  002030  128C               	iorwf	140,f,c	;volatile
  4485  002032                     
  4486                           ; BSR set to: 0
  4487                           ;motors.c: 774:         T2CONbits.TMR2ON = 1;
  4488  002032  84CA               	bsf	202,2,c	;volatile
  4489  002034                     l4003:
  4490  002034  FFFF               	dw	65535	; assembler added errata NOP
  4491  002036  EC02  F012         	call	_stepMade	;wreg free
  4492  00203A  5012               	movf	?_stepMade^0,w,c
  4493  00203C  1013               	iorwf	(?_stepMade+1)^0,w,c
  4494  00203E  B4D8               	btfsc	status,2,c
  4495  002040  EF24  F010         	goto	u3541
  4496  002044  EF27  F010         	goto	u3540
  4497  002048                     u3541:
  4498  002048  FFFF               	dw	65535	; assembler added errata NOP
  4499  00204A  EF1A  F010         	goto	l4003
  4500  00204E                     u3540:
  4501  00204E  FFFF               	dw	65535	; assembler added errata NOP
  4502  002050                     
  4503                           ;motors.c: 776:         T2CONbits.TMR2ON = 0;
  4504  002050  94CA               	bcf	202,2,c	;volatile
  4505  002052                     
  4506                           ;motors.c: 777:         TMR2 = 0;
  4507  002052  0E00               	movlw	0
  4508  002054  6ECC               	movwf	204,c	;volatile
  4509  002056                     
  4510                           ;motors.c: 778:     }
  4511  002056  0100               	movlb	0	; () banked
  4512  002058  4BEB               	infsnz	rotateObj@i& (0+255),f,b
  4513  00205A  2BEC               	incf	(rotateObj@i+1)& (0+255),f,b
  4514  00205C                     l4009:
  4515  00205C  FFFF               	dw	65535	; assembler added errata NOP
  4516                           
  4517                           ; BSR set to: 0
  4518  00205E  51E9               	movf	rotateObj@totStep& (0+255),w,b
  4519  002060  5DEB               	subwf	rotateObj@i& (0+255),w,b
  4520  002062  51EA               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4521  002064  59EC               	subwfb	(rotateObj@i+1)& (0+255),w,b
  4522  002066  A0D8               	btfss	status,0,c
  4523  002068  EF38  F010         	goto	u3551
  4524  00206C  EF3B  F010         	goto	u3550
  4525  002070                     u3551:
  4526  002070  FFFF               	dw	65535	; assembler added errata NOP
  4527  002072  EF08  F010         	goto	l3997
  4528  002076                     u3550:
  4529  002076  FFFF               	dw	65535	; assembler added errata NOP
  4530  002078                     
  4531                           ; BSR set to: 0
  4532                           ;motors.c: 781:     TMR2 = 0;
  4533  002078  0E00               	movlw	0
  4534  00207A  6ECC               	movwf	204,c	;volatile
  4535  00207C                     
  4536                           ; BSR set to: 0
  4537                           ;motors.c: 784:     resetStep();
  4538  00207C  EC77  F012         	call	_resetStep	;wreg free
  4539  002080  0012               	return		;funcret
  4540  002082  FFFF               	dw	65535	; errata NOP
  4541  002084                     __end_of_rotateObj:
  4542                           	callstack 0
  4543                           
  4544 ;; *************** function ___xxtofl *****************
  4545 ;; Defined at:
  4546 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4547 ;; Parameters:    Size  Location     Type
  4548 ;;  sign            1    wreg     unsigned char 
  4549 ;;  val             4   17[COMRAM] long 
  4550 ;; Auto vars:     Size  Location     Type
  4551 ;;  sign            1   25[COMRAM] unsigned char 
  4552 ;;  arg             4   27[COMRAM] unsigned long 
  4553 ;;  exp             1   26[COMRAM] unsigned char 
  4554 ;; Return value:  Size  Location     Type
  4555 ;;                  4   17[COMRAM] unsigned char 
  4556 ;; Registers used:
  4557 ;;		wreg, status,2, status,0
  4558 ;; Tracked objects:
  4559 ;;		On entry : 0/0
  4560 ;;		On exit  : 0/0
  4561 ;;		Unchanged: 0/0
  4562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4563 ;;      Params:         4       0       0       0       0       0       0
  4564 ;;      Locals:         6       0       0       0       0       0       0
  4565 ;;      Temps:          4       0       0       0       0       0       0
  4566 ;;      Totals:        14       0       0       0       0       0       0
  4567 ;;Total ram usage:       14 bytes
  4568 ;; Hardware stack levels used:    1
  4569 ;; Hardware stack levels required when called:    4
  4570 ;; This function calls:
  4571 ;;		Nothing
  4572 ;; This function is called by:
  4573 ;;		_rotateObj
  4574 ;; This function uses a non-reentrant model
  4575 ;;
  4576                           
  4577                           	psect	text28
  4578  0010BE                     __ptext28:
  4579                           	callstack 0
  4580  0010BE                     ___xxtofl:
  4581                           	callstack 0
  4582  0010BE  FFFF               	dw	65535	; assembler added errata NOP
  4583                           
  4584                           ;incstack = 0
  4585                           ;___xxtofl@sign stored from wreg
  4586  0010C0  6E1A               	movwf	___xxtofl@sign^0,c
  4587  0010C2  501A               	movf	___xxtofl@sign^0,w,c
  4588  0010C4  B4D8               	btfsc	status,2,c
  4589  0010C6  EF67  F008         	goto	u3041
  4590  0010CA  EF6A  F008         	goto	u3040
  4591  0010CE                     u3041:
  4592  0010CE  FFFF               	dw	65535	; assembler added errata NOP
  4593  0010D0  EF8F  F008         	goto	l1285
  4594  0010D4                     u3040:
  4595  0010D4  FFFF               	dw	65535	; assembler added errata NOP
  4596  0010D6  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4597  0010D8  EF73  F008         	goto	u3050
  4598  0010DC  EF70  F008         	goto	u3051
  4599  0010E0                     u3051:
  4600  0010E0  FFFF               	dw	65535	; assembler added errata NOP
  4601  0010E2  EF8F  F008         	goto	l1285
  4602  0010E6                     u3050:
  4603  0010E6  FFFF               	dw	65535	; assembler added errata NOP
  4604  0010E8  C012  F016         	movff	___xxtofl@val,??___xxtofl
  4605  0010EC  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  4606  0010F0  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  4607  0010F4  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  4608  0010F8  1E16               	comf	??___xxtofl^0,f,c
  4609  0010FA  1E17               	comf	(??___xxtofl+1)^0,f,c
  4610  0010FC  1E18               	comf	(??___xxtofl+2)^0,f,c
  4611  0010FE  1E19               	comf	(??___xxtofl+3)^0,f,c
  4612  001100  2A16               	incf	??___xxtofl^0,f,c
  4613  001102  0E00               	movlw	0
  4614  001104  2217               	addwfc	(??___xxtofl+1)^0,f,c
  4615  001106  2218               	addwfc	(??___xxtofl+2)^0,f,c
  4616  001108  2219               	addwfc	(??___xxtofl+3)^0,f,c
  4617  00110A  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  4618  00110E  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4619  001112  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4620  001116  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4621  00111A  EF98  F008         	goto	l3737
  4622  00111E                     l1285:
  4623  00111E  FFFF               	dw	65535	; assembler added errata NOP
  4624  001120  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  4625  001124  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4626  001128  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4627  00112C  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4628  001130                     l3737:
  4629  001130  FFFF               	dw	65535	; assembler added errata NOP
  4630  001132  5012               	movf	___xxtofl@val^0,w,c
  4631  001134  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  4632  001136  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  4633  001138  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  4634  00113A  A4D8               	btfss	status,2,c
  4635  00113C  EFA2  F008         	goto	u3061
  4636  001140  EFA5  F008         	goto	u3060
  4637  001144                     u3061:
  4638  001144  FFFF               	dw	65535	; assembler added errata NOP
  4639  001146  EFB0  F008         	goto	l3743
  4640  00114A                     u3060:
  4641  00114A  FFFF               	dw	65535	; assembler added errata NOP
  4642  00114C  0E00               	movlw	0
  4643  00114E  6E12               	movwf	?___xxtofl^0,c
  4644  001150  0E00               	movlw	0
  4645  001152  6E13               	movwf	(?___xxtofl+1)^0,c
  4646  001154  0E00               	movlw	0
  4647  001156  6E14               	movwf	(?___xxtofl+2)^0,c
  4648  001158  0E00               	movlw	0
  4649  00115A  6E15               	movwf	(?___xxtofl+3)^0,c
  4650  00115C  EF58  F009         	goto	l1288
  4651  001160                     l3743:
  4652  001160  FFFF               	dw	65535	; assembler added errata NOP
  4653  001162  0E96               	movlw	150
  4654  001164  6E1B               	movwf	___xxtofl@exp^0,c
  4655  001166  EFBC  F008         	goto	l3747
  4656  00116A                     l3745:
  4657  00116A  FFFF               	dw	65535	; assembler added errata NOP
  4658  00116C  2A1B               	incf	___xxtofl@exp^0,f,c
  4659  00116E  90D8               	bcf	status,0,c
  4660  001170  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4661  001172  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4662  001174  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4663  001176  321C               	rrcf	___xxtofl@arg^0,f,c
  4664  001178                     l3747:
  4665  001178  FFFF               	dw	65535	; assembler added errata NOP
  4666  00117A  0E00               	movlw	0
  4667  00117C  141C               	andwf	___xxtofl@arg^0,w,c
  4668  00117E  6E16               	movwf	??___xxtofl^0,c
  4669  001180  0E00               	movlw	0
  4670  001182  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4671  001184  6E17               	movwf	(??___xxtofl+1)^0,c
  4672  001186  0E00               	movlw	0
  4673  001188  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4674  00118A  6E18               	movwf	(??___xxtofl+2)^0,c
  4675  00118C  0EFE               	movlw	254
  4676  00118E  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4677  001190  6E19               	movwf	(??___xxtofl+3)^0,c
  4678  001192  5016               	movf	??___xxtofl^0,w,c
  4679  001194  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4680  001196  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4681  001198  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4682  00119A  A4D8               	btfss	status,2,c
  4683  00119C  EFD2  F008         	goto	u3071
  4684  0011A0  EFD5  F008         	goto	u3070
  4685  0011A4                     u3071:
  4686  0011A4  FFFF               	dw	65535	; assembler added errata NOP
  4687  0011A6  EFB5  F008         	goto	l3745
  4688  0011AA                     u3070:
  4689  0011AA  FFFF               	dw	65535	; assembler added errata NOP
  4690  0011AC  EFE5  F008         	goto	l1292
  4691  0011B0                     l3749:
  4692  0011B0  FFFF               	dw	65535	; assembler added errata NOP
  4693  0011B2  2A1B               	incf	___xxtofl@exp^0,f,c
  4694  0011B4  0E01               	movlw	1
  4695  0011B6  261C               	addwf	___xxtofl@arg^0,f,c
  4696  0011B8  0E00               	movlw	0
  4697  0011BA  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4698  0011BC  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4699  0011BE  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4700  0011C0  90D8               	bcf	status,0,c
  4701  0011C2  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4702  0011C4  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4703  0011C6  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4704  0011C8  321C               	rrcf	___xxtofl@arg^0,f,c
  4705  0011CA                     l1292:
  4706  0011CA  FFFF               	dw	65535	; assembler added errata NOP
  4707  0011CC  0E00               	movlw	0
  4708  0011CE  141C               	andwf	___xxtofl@arg^0,w,c
  4709  0011D0  6E16               	movwf	??___xxtofl^0,c
  4710  0011D2  0E00               	movlw	0
  4711  0011D4  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4712  0011D6  6E17               	movwf	(??___xxtofl+1)^0,c
  4713  0011D8  0E00               	movlw	0
  4714  0011DA  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4715  0011DC  6E18               	movwf	(??___xxtofl+2)^0,c
  4716  0011DE  0EFF               	movlw	255
  4717  0011E0  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4718  0011E2  6E19               	movwf	(??___xxtofl+3)^0,c
  4719  0011E4  5016               	movf	??___xxtofl^0,w,c
  4720  0011E6  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4721  0011E8  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4722  0011EA  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4723  0011EC  A4D8               	btfss	status,2,c
  4724  0011EE  EFFB  F008         	goto	u3081
  4725  0011F2  EFFE  F008         	goto	u3080
  4726  0011F6                     u3081:
  4727  0011F6  FFFF               	dw	65535	; assembler added errata NOP
  4728  0011F8  EFD8  F008         	goto	l3749
  4729  0011FC                     u3080:
  4730  0011FC  FFFF               	dw	65535	; assembler added errata NOP
  4731  0011FE  EF08  F009         	goto	l3757
  4732  001202                     l3755:
  4733  001202  FFFF               	dw	65535	; assembler added errata NOP
  4734  001204  061B               	decf	___xxtofl@exp^0,f,c
  4735  001206  90D8               	bcf	status,0,c
  4736  001208  361C               	rlcf	___xxtofl@arg^0,f,c
  4737  00120A  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4738  00120C  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4739  00120E  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4740  001210                     l3757:
  4741  001210  FFFF               	dw	65535	; assembler added errata NOP
  4742  001212  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4743  001214  EF0E  F009         	goto	u3091
  4744  001218  EF11  F009         	goto	u3090
  4745  00121C                     u3091:
  4746  00121C  FFFF               	dw	65535	; assembler added errata NOP
  4747  00121E  EF1B  F009         	goto	l1299
  4748  001222                     u3090:
  4749  001222  FFFF               	dw	65535	; assembler added errata NOP
  4750  001224  0E02               	movlw	2
  4751  001226  601B               	cpfslt	___xxtofl@exp^0,c
  4752  001228  EF18  F009         	goto	u3101
  4753  00122C  EF1B  F009         	goto	u3100
  4754  001230                     u3101:
  4755  001230  FFFF               	dw	65535	; assembler added errata NOP
  4756  001232  EF01  F009         	goto	l3755
  4757  001236                     u3100:
  4758  001236                     l1299:
  4759  001236  FFFF               	dw	65535	; assembler added errata NOP
  4760  001238  B01B               	btfsc	___xxtofl@exp^0,0,c
  4761  00123A  EF21  F009         	goto	u3111
  4762  00123E  EF24  F009         	goto	u3110
  4763  001242                     u3111:
  4764  001242  FFFF               	dw	65535	; assembler added errata NOP
  4765  001244  EF26  F009         	goto	l3763
  4766  001248                     u3110:
  4767  001248  FFFF               	dw	65535	; assembler added errata NOP
  4768  00124A  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  4769  00124C                     l3763:
  4770  00124C  FFFF               	dw	65535	; assembler added errata NOP
  4771  00124E  90D8               	bcf	status,0,c
  4772  001250  321B               	rrcf	___xxtofl@exp^0,f,c
  4773  001252  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  4774  001256  6A17               	clrf	(??___xxtofl+1)^0,c
  4775  001258  6A18               	clrf	(??___xxtofl+2)^0,c
  4776  00125A  6A19               	clrf	(??___xxtofl+3)^0,c
  4777  00125C  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  4778  001260  6A18               	clrf	(??___xxtofl+2)^0,c
  4779  001262  6A17               	clrf	(??___xxtofl+1)^0,c
  4780  001264  6A16               	clrf	??___xxtofl^0,c
  4781  001266  5016               	movf	??___xxtofl^0,w,c
  4782  001268  121C               	iorwf	___xxtofl@arg^0,f,c
  4783  00126A  5017               	movf	(??___xxtofl+1)^0,w,c
  4784  00126C  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4785  00126E  5018               	movf	(??___xxtofl+2)^0,w,c
  4786  001270  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4787  001272  5019               	movf	(??___xxtofl+3)^0,w,c
  4788  001274  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4789  001276  501A               	movf	___xxtofl@sign^0,w,c
  4790  001278  B4D8               	btfsc	status,2,c
  4791  00127A  EF41  F009         	goto	u3121
  4792  00127E  EF44  F009         	goto	u3120
  4793  001282                     u3121:
  4794  001282  FFFF               	dw	65535	; assembler added errata NOP
  4795  001284  EF4F  F009         	goto	l3773
  4796  001288                     u3120:
  4797  001288  FFFF               	dw	65535	; assembler added errata NOP
  4798  00128A  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4799  00128C  EF4D  F009         	goto	u3130
  4800  001290  EF4A  F009         	goto	u3131
  4801  001294                     u3131:
  4802  001294  FFFF               	dw	65535	; assembler added errata NOP
  4803  001296  EF4F  F009         	goto	l3773
  4804  00129A                     u3130:
  4805  00129A  FFFF               	dw	65535	; assembler added errata NOP
  4806  00129C  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  4807  00129E                     l3773:
  4808  00129E  FFFF               	dw	65535	; assembler added errata NOP
  4809  0012A0  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  4810  0012A4  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  4811  0012A8  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  4812  0012AC  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  4813  0012B0                     l1288:
  4814  0012B0  FFFF               	dw	65535	; assembler added errata NOP
  4815  0012B2  0012               	return		;funcret
  4816  0012B4  FFFF               	dw	65535	; errata NOP
  4817  0012B6                     __end_of___xxtofl:
  4818                           	callstack 0
  4819                           
  4820 ;; *************** function ___fltol *****************
  4821 ;; Defined at:
  4822 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  4823 ;; Parameters:    Size  Location     Type
  4824 ;;  f1              4   56[COMRAM] unsigned char 
  4825 ;; Auto vars:     Size  Location     Type
  4826 ;;  exp1            1   65[COMRAM] unsigned char 
  4827 ;;  sign1           1   64[COMRAM] unsigned char 
  4828 ;; Return value:  Size  Location     Type
  4829 ;;                  4   56[COMRAM] long 
  4830 ;; Registers used:
  4831 ;;		wreg, status,2, status,0
  4832 ;; Tracked objects:
  4833 ;;		On entry : 0/0
  4834 ;;		On exit  : 0/0
  4835 ;;		Unchanged: 0/0
  4836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4837 ;;      Params:         4       0       0       0       0       0       0
  4838 ;;      Locals:         2       0       0       0       0       0       0
  4839 ;;      Temps:          4       0       0       0       0       0       0
  4840 ;;      Totals:        10       0       0       0       0       0       0
  4841 ;;Total ram usage:       10 bytes
  4842 ;; Hardware stack levels used:    1
  4843 ;; Hardware stack levels required when called:    4
  4844 ;; This function calls:
  4845 ;;		Nothing
  4846 ;; This function is called by:
  4847 ;;		_rotateObj
  4848 ;; This function uses a non-reentrant model
  4849 ;;
  4850                           
  4851                           	psect	text29
  4852  001930                     __ptext29:
  4853                           	callstack 0
  4854  001930                     ___fltol:
  4855                           	callstack 0
  4856  001930  FFFF               	dw	65535	; assembler added errata NOP
  4857  001932  343B               	rlcf	(___fltol@f1+2)^0,w,c
  4858  001934  343C               	rlcf	(___fltol@f1+3)^0,w,c
  4859  001936  6E42               	movwf	___fltol@exp1^0,c
  4860  001938  5042               	movf	___fltol@exp1^0,w,c
  4861  00193A  A4D8               	btfss	status,2,c
  4862  00193C  EFA2  F00C         	goto	u2971
  4863  001940  EFA5  F00C         	goto	u2970
  4864  001944                     u2971:
  4865  001944  FFFF               	dw	65535	; assembler added errata NOP
  4866  001946  EFB1  F00C         	goto	l3693
  4867  00194A                     u2970:
  4868  00194A  FFFF               	dw	65535	; assembler added errata NOP
  4869  00194C                     l3689:
  4870  00194C  FFFF               	dw	65535	; assembler added errata NOP
  4871  00194E  0E00               	movlw	0
  4872  001950  6E39               	movwf	?___fltol^0,c
  4873  001952  0E00               	movlw	0
  4874  001954  6E3A               	movwf	(?___fltol+1)^0,c
  4875  001956  0E00               	movlw	0
  4876  001958  6E3B               	movwf	(?___fltol+2)^0,c
  4877  00195A  0E00               	movlw	0
  4878  00195C  6E3C               	movwf	(?___fltol+3)^0,c
  4879  00195E  EF30  F00D         	goto	l927
  4880  001962                     l3693:
  4881  001962  FFFF               	dw	65535	; assembler added errata NOP
  4882  001964  C039  F03D         	movff	___fltol@f1,??___fltol
  4883  001968  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  4884  00196C  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  4885  001970  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  4886  001974  0E20               	movlw	32
  4887  001976  EFC3  F00C         	goto	u2980
  4888  00197A                     u2985:
  4889  00197A  FFFF               	dw	65535	; assembler added errata NOP
  4890  00197C  90D8               	bcf	status,0,c
  4891  00197E  3240               	rrcf	(??___fltol+3)^0,f,c
  4892  001980  323F               	rrcf	(??___fltol+2)^0,f,c
  4893  001982  323E               	rrcf	(??___fltol+1)^0,f,c
  4894  001984  323D               	rrcf	??___fltol^0,f,c
  4895  001986                     u2980:
  4896  001986  FFFF               	dw	65535	; assembler added errata NOP
  4897  001988  2EE8               	decfsz	wreg,f,c
  4898  00198A  EFBD  F00C         	goto	u2985
  4899  00198E  503D               	movf	??___fltol^0,w,c
  4900  001990  6E41               	movwf	___fltol@sign1^0,c
  4901  001992  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  4902  001994  0EFF               	movlw	255
  4903  001996  1639               	andwf	___fltol@f1^0,f,c
  4904  001998  0EFF               	movlw	255
  4905  00199A  163A               	andwf	(___fltol@f1+1)^0,f,c
  4906  00199C  0EFF               	movlw	255
  4907  00199E  163B               	andwf	(___fltol@f1+2)^0,f,c
  4908  0019A0  0E00               	movlw	0
  4909  0019A2  163C               	andwf	(___fltol@f1+3)^0,f,c
  4910  0019A4  0E96               	movlw	150
  4911  0019A6  5E42               	subwf	___fltol@exp1^0,f,c
  4912  0019A8  BE42               	btfsc	___fltol@exp1^0,7,c
  4913  0019AA  EFDC  F00C         	goto	u2990
  4914  0019AE  EFD9  F00C         	goto	u2991
  4915  0019B2                     u2991:
  4916  0019B2  FFFF               	dw	65535	; assembler added errata NOP
  4917  0019B4  EFF6  F00C         	goto	l3713
  4918  0019B8                     u2990:
  4919  0019B8  FFFF               	dw	65535	; assembler added errata NOP
  4920  0019BA  5042               	movf	___fltol@exp1^0,w,c
  4921  0019BC  0A80               	xorlw	128
  4922  0019BE  0F97               	addlw	151
  4923  0019C0  B0D8               	btfsc	status,0,c
  4924  0019C2  EFE5  F00C         	goto	u3001
  4925  0019C6  EFE8  F00C         	goto	u3000
  4926  0019CA                     u3001:
  4927  0019CA  FFFF               	dw	65535	; assembler added errata NOP
  4928  0019CC  EFEB  F00C         	goto	l3709
  4929  0019D0                     u3000:
  4930  0019D0  FFFF               	dw	65535	; assembler added errata NOP
  4931  0019D2  EFA6  F00C         	goto	l3689
  4932  0019D6                     l3709:
  4933  0019D6  FFFF               	dw	65535	; assembler added errata NOP
  4934  0019D8  90D8               	bcf	status,0,c
  4935  0019DA  323C               	rrcf	(___fltol@f1+3)^0,f,c
  4936  0019DC  323B               	rrcf	(___fltol@f1+2)^0,f,c
  4937  0019DE  323A               	rrcf	(___fltol@f1+1)^0,f,c
  4938  0019E0  3239               	rrcf	___fltol@f1^0,f,c
  4939  0019E2  3E42               	incfsz	___fltol@exp1^0,f,c
  4940  0019E4  EFEB  F00C         	goto	l3709
  4941  0019E8  EF14  F00D         	goto	l3723
  4942  0019EC                     l3713:
  4943  0019EC  FFFF               	dw	65535	; assembler added errata NOP
  4944  0019EE  0E1F               	movlw	31
  4945  0019F0  6442               	cpfsgt	___fltol@exp1^0,c
  4946  0019F2  EFFD  F00C         	goto	u3011
  4947  0019F6  EF00  F00D         	goto	u3010
  4948  0019FA                     u3011:
  4949  0019FA  FFFF               	dw	65535	; assembler added errata NOP
  4950  0019FC  EF0A  F00D         	goto	l3721
  4951  001A00                     u3010:
  4952  001A00  FFFF               	dw	65535	; assembler added errata NOP
  4953  001A02  EFA6  F00C         	goto	l3689
  4954  001A06                     l3719:
  4955  001A06  FFFF               	dw	65535	; assembler added errata NOP
  4956  001A08  90D8               	bcf	status,0,c
  4957  001A0A  3639               	rlcf	___fltol@f1^0,f,c
  4958  001A0C  363A               	rlcf	(___fltol@f1+1)^0,f,c
  4959  001A0E  363B               	rlcf	(___fltol@f1+2)^0,f,c
  4960  001A10  363C               	rlcf	(___fltol@f1+3)^0,f,c
  4961  001A12  0642               	decf	___fltol@exp1^0,f,c
  4962  001A14                     l3721:
  4963  001A14  FFFF               	dw	65535	; assembler added errata NOP
  4964  001A16  5042               	movf	___fltol@exp1^0,w,c
  4965  001A18  A4D8               	btfss	status,2,c
  4966  001A1A  EF11  F00D         	goto	u3021
  4967  001A1E  EF14  F00D         	goto	u3020
  4968  001A22                     u3021:
  4969  001A22  FFFF               	dw	65535	; assembler added errata NOP
  4970  001A24  EF03  F00D         	goto	l3719
  4971  001A28                     u3020:
  4972  001A28                     l3723:
  4973  001A28  FFFF               	dw	65535	; assembler added errata NOP
  4974  001A2A  5041               	movf	___fltol@sign1^0,w,c
  4975  001A2C  B4D8               	btfsc	status,2,c
  4976  001A2E  EF1B  F00D         	goto	u3031
  4977  001A32  EF1E  F00D         	goto	u3030
  4978  001A36                     u3031:
  4979  001A36  FFFF               	dw	65535	; assembler added errata NOP
  4980  001A38  EF27  F00D         	goto	l3727
  4981  001A3C                     u3030:
  4982  001A3C  FFFF               	dw	65535	; assembler added errata NOP
  4983  001A3E  1E3C               	comf	(___fltol@f1+3)^0,f,c
  4984  001A40  1E3B               	comf	(___fltol@f1+2)^0,f,c
  4985  001A42  1E3A               	comf	(___fltol@f1+1)^0,f,c
  4986  001A44  6C39               	negf	___fltol@f1^0,c
  4987  001A46  0E00               	movlw	0
  4988  001A48  223A               	addwfc	(___fltol@f1+1)^0,f,c
  4989  001A4A  223B               	addwfc	(___fltol@f1+2)^0,f,c
  4990  001A4C  223C               	addwfc	(___fltol@f1+3)^0,f,c
  4991  001A4E                     l3727:
  4992  001A4E  FFFF               	dw	65535	; assembler added errata NOP
  4993  001A50  C039  F039         	movff	___fltol@f1,?___fltol
  4994  001A54  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  4995  001A58  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  4996  001A5C  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  4997  001A60                     l927:
  4998  001A60  FFFF               	dw	65535	; assembler added errata NOP
  4999  001A62  0012               	return		;funcret
  5000  001A64  FFFF               	dw	65535	; errata NOP
  5001  001A66                     __end_of___fltol:
  5002                           	callstack 0
  5003                           
  5004 ;; *************** function ___fldiv *****************
  5005 ;; Defined at:
  5006 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  5007 ;; Parameters:    Size  Location     Type
  5008 ;;  b               4   31[COMRAM] long 
  5009 ;;  a               4   35[COMRAM] long 
  5010 ;; Auto vars:     Size  Location     Type
  5011 ;;  grs             4   50[COMRAM] unsigned long 
  5012 ;;  rem             4   43[COMRAM] unsigned long 
  5013 ;;  new_exp         2   48[COMRAM] short 
  5014 ;;  aexp            1   55[COMRAM] unsigned char 
  5015 ;;  bexp            1   54[COMRAM] unsigned char 
  5016 ;;  sign            1   47[COMRAM] unsigned char 
  5017 ;; Return value:  Size  Location     Type
  5018 ;;                  4   31[COMRAM] unsigned char 
  5019 ;; Registers used:
  5020 ;;		wreg, status,2, status,0
  5021 ;; Tracked objects:
  5022 ;;		On entry : 0/0
  5023 ;;		On exit  : 0/0
  5024 ;;		Unchanged: 0/0
  5025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5026 ;;      Params:         8       0       0       0       0       0       0
  5027 ;;      Locals:        13       0       0       0       0       0       0
  5028 ;;      Temps:          4       0       0       0       0       0       0
  5029 ;;      Totals:        25       0       0       0       0       0       0
  5030 ;;Total ram usage:       25 bytes
  5031 ;; Hardware stack levels used:    1
  5032 ;; Hardware stack levels required when called:    4
  5033 ;; This function calls:
  5034 ;;		Nothing
  5035 ;; This function is called by:
  5036 ;;		_rotateObj
  5037 ;; This function uses a non-reentrant model
  5038 ;;
  5039                           
  5040                           	psect	text30
  5041  000612                     __ptext30:
  5042                           	callstack 0
  5043  000612                     ___fldiv:
  5044                           	callstack 0
  5045  000612  FFFF               	dw	65535	; assembler added errata NOP
  5046  000614  5023               	movf	(___fldiv@b+3)^0,w,c
  5047  000616  0B80               	andlw	128
  5048  000618  6E30               	movwf	___fldiv@sign^0,c
  5049  00061A  5023               	movf	(___fldiv@b+3)^0,w,c
  5050  00061C  2423               	addwf	(___fldiv@b+3)^0,w,c
  5051  00061E  6E37               	movwf	___fldiv@bexp^0,c
  5052  000620  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5053  000622  EF15  F003         	goto	u2741
  5054  000626  EF18  F003         	goto	u2740
  5055  00062A                     u2741:
  5056  00062A  FFFF               	dw	65535	; assembler added errata NOP
  5057  00062C  EF1A  F003         	goto	l3555
  5058  000630                     u2740:
  5059  000630  FFFF               	dw	65535	; assembler added errata NOP
  5060  000632  8037               	bsf	___fldiv@bexp^0,0,c
  5061  000634                     l3555:
  5062  000634  FFFF               	dw	65535	; assembler added errata NOP
  5063  000636  5037               	movf	___fldiv@bexp^0,w,c
  5064  000638  B4D8               	btfsc	status,2,c
  5065  00063A  EF21  F003         	goto	u2751
  5066  00063E  EF24  F003         	goto	u2750
  5067  000642                     u2751:
  5068  000642  FFFF               	dw	65535	; assembler added errata NOP
  5069  000644  EF3D  F003         	goto	l3565
  5070  000648                     u2750:
  5071  000648  FFFF               	dw	65535	; assembler added errata NOP
  5072  00064A  2837               	incf	___fldiv@bexp^0,w,c
  5073  00064C  A4D8               	btfss	status,2,c
  5074  00064E  EF2B  F003         	goto	u2761
  5075  000652  EF2E  F003         	goto	u2760
  5076  000656                     u2761:
  5077  000656  FFFF               	dw	65535	; assembler added errata NOP
  5078  000658  EF37  F003         	goto	l3561
  5079  00065C                     u2760:
  5080  00065C  FFFF               	dw	65535	; assembler added errata NOP
  5081  00065E  0E00               	movlw	0
  5082  000660  6E20               	movwf	___fldiv@b^0,c
  5083  000662  0E00               	movlw	0
  5084  000664  6E21               	movwf	(___fldiv@b+1)^0,c
  5085  000666  0E00               	movlw	0
  5086  000668  6E22               	movwf	(___fldiv@b+2)^0,c
  5087  00066A  0E00               	movlw	0
  5088  00066C  6E23               	movwf	(___fldiv@b+3)^0,c
  5089  00066E                     l3561:
  5090  00066E  FFFF               	dw	65535	; assembler added errata NOP
  5091  000670  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5092  000672  0E00               	movlw	0
  5093  000674  6E23               	movwf	(___fldiv@b+3)^0,c
  5094  000676  EF46  F003         	goto	l3567
  5095  00067A                     l3565:
  5096  00067A  FFFF               	dw	65535	; assembler added errata NOP
  5097  00067C  0E00               	movlw	0
  5098  00067E  6E20               	movwf	___fldiv@b^0,c
  5099  000680  0E00               	movlw	0
  5100  000682  6E21               	movwf	(___fldiv@b+1)^0,c
  5101  000684  0E00               	movlw	0
  5102  000686  6E22               	movwf	(___fldiv@b+2)^0,c
  5103  000688  0E00               	movlw	0
  5104  00068A  6E23               	movwf	(___fldiv@b+3)^0,c
  5105  00068C                     l3567:
  5106  00068C  FFFF               	dw	65535	; assembler added errata NOP
  5107  00068E  5027               	movf	(___fldiv@a+3)^0,w,c
  5108  000690  0B80               	andlw	128
  5109  000692  1A30               	xorwf	___fldiv@sign^0,f,c
  5110  000694  5027               	movf	(___fldiv@a+3)^0,w,c
  5111  000696  2427               	addwf	(___fldiv@a+3)^0,w,c
  5112  000698  6E38               	movwf	___fldiv@aexp^0,c
  5113  00069A  AE26               	btfss	(___fldiv@a+2)^0,7,c
  5114  00069C  EF52  F003         	goto	u2771
  5115  0006A0  EF55  F003         	goto	u2770
  5116  0006A4                     u2771:
  5117  0006A4  FFFF               	dw	65535	; assembler added errata NOP
  5118  0006A6  EF57  F003         	goto	l3575
  5119  0006AA                     u2770:
  5120  0006AA  FFFF               	dw	65535	; assembler added errata NOP
  5121  0006AC  8038               	bsf	___fldiv@aexp^0,0,c
  5122  0006AE                     l3575:
  5123  0006AE  FFFF               	dw	65535	; assembler added errata NOP
  5124  0006B0  5038               	movf	___fldiv@aexp^0,w,c
  5125  0006B2  B4D8               	btfsc	status,2,c
  5126  0006B4  EF5E  F003         	goto	u2781
  5127  0006B8  EF61  F003         	goto	u2780
  5128  0006BC                     u2781:
  5129  0006BC  FFFF               	dw	65535	; assembler added errata NOP
  5130  0006BE  EF7A  F003         	goto	l3585
  5131  0006C2                     u2780:
  5132  0006C2  FFFF               	dw	65535	; assembler added errata NOP
  5133  0006C4  2838               	incf	___fldiv@aexp^0,w,c
  5134  0006C6  A4D8               	btfss	status,2,c
  5135  0006C8  EF68  F003         	goto	u2791
  5136  0006CC  EF6B  F003         	goto	u2790
  5137  0006D0                     u2791:
  5138  0006D0  FFFF               	dw	65535	; assembler added errata NOP
  5139  0006D2  EF74  F003         	goto	l3581
  5140  0006D6                     u2790:
  5141  0006D6  FFFF               	dw	65535	; assembler added errata NOP
  5142  0006D8  0E00               	movlw	0
  5143  0006DA  6E24               	movwf	___fldiv@a^0,c
  5144  0006DC  0E00               	movlw	0
  5145  0006DE  6E25               	movwf	(___fldiv@a+1)^0,c
  5146  0006E0  0E00               	movlw	0
  5147  0006E2  6E26               	movwf	(___fldiv@a+2)^0,c
  5148  0006E4  0E00               	movlw	0
  5149  0006E6  6E27               	movwf	(___fldiv@a+3)^0,c
  5150  0006E8                     l3581:
  5151  0006E8  FFFF               	dw	65535	; assembler added errata NOP
  5152  0006EA  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5153  0006EC  0E00               	movlw	0
  5154  0006EE  6E27               	movwf	(___fldiv@a+3)^0,c
  5155  0006F0  EF83  F003         	goto	l3587
  5156  0006F4                     l3585:
  5157  0006F4  FFFF               	dw	65535	; assembler added errata NOP
  5158  0006F6  0E00               	movlw	0
  5159  0006F8  6E24               	movwf	___fldiv@a^0,c
  5160  0006FA  0E00               	movlw	0
  5161  0006FC  6E25               	movwf	(___fldiv@a+1)^0,c
  5162  0006FE  0E00               	movlw	0
  5163  000700  6E26               	movwf	(___fldiv@a+2)^0,c
  5164  000702  0E00               	movlw	0
  5165  000704  6E27               	movwf	(___fldiv@a+3)^0,c
  5166  000706                     l3587:
  5167  000706  FFFF               	dw	65535	; assembler added errata NOP
  5168  000708  5024               	movf	___fldiv@a^0,w,c
  5169  00070A  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5170  00070C  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5171  00070E  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5172  000710  A4D8               	btfss	status,2,c
  5173  000712  EF8D  F003         	goto	u2801
  5174  000716  EF90  F003         	goto	u2800
  5175  00071A                     u2801:
  5176  00071A  FFFF               	dw	65535	; assembler added errata NOP
  5177  00071C  EFAA  F003         	goto	l3599
  5178  000720                     u2800:
  5179  000720  FFFF               	dw	65535	; assembler added errata NOP
  5180  000722  0E00               	movlw	0
  5181  000724  6E20               	movwf	___fldiv@b^0,c
  5182  000726  0E00               	movlw	0
  5183  000728  6E21               	movwf	(___fldiv@b+1)^0,c
  5184  00072A  0E00               	movlw	0
  5185  00072C  6E22               	movwf	(___fldiv@b+2)^0,c
  5186  00072E  0E00               	movlw	0
  5187  000730  6E23               	movwf	(___fldiv@b+3)^0,c
  5188  000732  0E80               	movlw	128
  5189  000734  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5190  000736  0E7F               	movlw	127
  5191  000738  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5192  00073A                     l3593:
  5193  00073A  FFFF               	dw	65535	; assembler added errata NOP
  5194  00073C  5030               	movf	___fldiv@sign^0,w,c
  5195  00073E  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5196  000740  C020  F020         	movff	___fldiv@b,?___fldiv
  5197  000744  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5198  000748  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5199  00074C  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5200  000750  EF1F  F005         	goto	l1212
  5201  000754                     l3599:
  5202  000754  FFFF               	dw	65535	; assembler added errata NOP
  5203  000756  5037               	movf	___fldiv@bexp^0,w,c
  5204  000758  A4D8               	btfss	status,2,c
  5205  00075A  EFB1  F003         	goto	u2811
  5206  00075E  EFB4  F003         	goto	u2810
  5207  000762                     u2811:
  5208  000762  FFFF               	dw	65535	; assembler added errata NOP
  5209  000764  EFBF  F003         	goto	l3607
  5210  000768                     u2810:
  5211  000768  FFFF               	dw	65535	; assembler added errata NOP
  5212  00076A  0E00               	movlw	0
  5213  00076C  6E20               	movwf	?___fldiv^0,c
  5214  00076E  0E00               	movlw	0
  5215  000770  6E21               	movwf	(?___fldiv+1)^0,c
  5216  000772  0E00               	movlw	0
  5217  000774  6E22               	movwf	(?___fldiv+2)^0,c
  5218  000776  0E00               	movlw	0
  5219  000778  6E23               	movwf	(?___fldiv+3)^0,c
  5220  00077A  EF1F  F005         	goto	l1212
  5221  00077E                     l3607:
  5222  00077E  FFFF               	dw	65535	; assembler added errata NOP
  5223  000780  5038               	movf	___fldiv@aexp^0,w,c
  5224  000782  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5225  000786  6A29               	clrf	(??___fldiv+1)^0,c
  5226  000788  5E28               	subwf	??___fldiv^0,f,c
  5227  00078A  0E00               	movlw	0
  5228  00078C  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5229  00078E  0E7F               	movlw	127
  5230  000790  2428               	addwf	??___fldiv^0,w,c
  5231  000792  6E31               	movwf	___fldiv@new_exp^0,c
  5232  000794  0E00               	movlw	0
  5233  000796  2029               	addwfc	(??___fldiv+1)^0,w,c
  5234  000798  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5235  00079A  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5236  00079E  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5237  0007A2  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5238  0007A6  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5239  0007AA  0E00               	movlw	0
  5240  0007AC  6E20               	movwf	___fldiv@b^0,c
  5241  0007AE  0E00               	movlw	0
  5242  0007B0  6E21               	movwf	(___fldiv@b+1)^0,c
  5243  0007B2  0E00               	movlw	0
  5244  0007B4  6E22               	movwf	(___fldiv@b+2)^0,c
  5245  0007B6  0E00               	movlw	0
  5246  0007B8  6E23               	movwf	(___fldiv@b+3)^0,c
  5247  0007BA  0E00               	movlw	0
  5248  0007BC  6E33               	movwf	___fldiv@grs^0,c
  5249  0007BE  0E00               	movlw	0
  5250  0007C0  6E34               	movwf	(___fldiv@grs+1)^0,c
  5251  0007C2  0E00               	movlw	0
  5252  0007C4  6E35               	movwf	(___fldiv@grs+2)^0,c
  5253  0007C6  0E00               	movlw	0
  5254  0007C8  6E36               	movwf	(___fldiv@grs+3)^0,c
  5255  0007CA  0E00               	movlw	0
  5256  0007CC  6E38               	movwf	___fldiv@aexp^0,c
  5257  0007CE  EF2B  F004         	goto	l1214
  5258  0007D2                     l3617:
  5259  0007D2  FFFF               	dw	65535	; assembler added errata NOP
  5260  0007D4  5038               	movf	___fldiv@aexp^0,w,c
  5261  0007D6  B4D8               	btfsc	status,2,c
  5262  0007D8  EFF0  F003         	goto	u2821
  5263  0007DC  EFF3  F003         	goto	u2820
  5264  0007E0                     u2821:
  5265  0007E0  FFFF               	dw	65535	; assembler added errata NOP
  5266  0007E2  EF0E  F004         	goto	l3625
  5267  0007E6                     u2820:
  5268  0007E6  FFFF               	dw	65535	; assembler added errata NOP
  5269  0007E8  90D8               	bcf	status,0,c
  5270  0007EA  362C               	rlcf	___fldiv@rem^0,f,c
  5271  0007EC  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5272  0007EE  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5273  0007F0  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5274  0007F2  90D8               	bcf	status,0,c
  5275  0007F4  3620               	rlcf	___fldiv@b^0,f,c
  5276  0007F6  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5277  0007F8  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5278  0007FA  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5279  0007FC  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5280  0007FE  EF03  F004         	goto	u2831
  5281  000802  EF06  F004         	goto	u2830
  5282  000806                     u2831:
  5283  000806  FFFF               	dw	65535	; assembler added errata NOP
  5284  000808  EF08  F004         	goto	l1217
  5285  00080C                     u2830:
  5286  00080C  FFFF               	dw	65535	; assembler added errata NOP
  5287  00080E  8020               	bsf	___fldiv@b^0,0,c
  5288  000810                     l1217:
  5289  000810  FFFF               	dw	65535	; assembler added errata NOP
  5290  000812  90D8               	bcf	status,0,c
  5291  000814  3633               	rlcf	___fldiv@grs^0,f,c
  5292  000816  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5293  000818  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5294  00081A  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5295  00081C                     l3625:
  5296  00081C  FFFF               	dw	65535	; assembler added errata NOP
  5297  00081E  5024               	movf	___fldiv@a^0,w,c
  5298  000820  5C2C               	subwf	___fldiv@rem^0,w,c
  5299  000822  5025               	movf	(___fldiv@a+1)^0,w,c
  5300  000824  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5301  000826  5026               	movf	(___fldiv@a+2)^0,w,c
  5302  000828  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5303  00082A  5027               	movf	(___fldiv@a+3)^0,w,c
  5304  00082C  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5305  00082E  A0D8               	btfss	status,0,c
  5306  000830  EF1C  F004         	goto	u2841
  5307  000834  EF1F  F004         	goto	u2840
  5308  000838                     u2841:
  5309  000838  FFFF               	dw	65535	; assembler added errata NOP
  5310  00083A  EF29  F004         	goto	l3631
  5311  00083E                     u2840:
  5312  00083E  FFFF               	dw	65535	; assembler added errata NOP
  5313  000840  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5314  000842  5024               	movf	___fldiv@a^0,w,c
  5315  000844  5E2C               	subwf	___fldiv@rem^0,f,c
  5316  000846  5025               	movf	(___fldiv@a+1)^0,w,c
  5317  000848  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5318  00084A  5026               	movf	(___fldiv@a+2)^0,w,c
  5319  00084C  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5320  00084E  5027               	movf	(___fldiv@a+3)^0,w,c
  5321  000850  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5322  000852                     l3631:
  5323  000852  FFFF               	dw	65535	; assembler added errata NOP
  5324  000854  2A38               	incf	___fldiv@aexp^0,f,c
  5325  000856                     l1214:
  5326  000856  FFFF               	dw	65535	; assembler added errata NOP
  5327  000858  0E19               	movlw	25
  5328  00085A  6438               	cpfsgt	___fldiv@aexp^0,c
  5329  00085C  EF32  F004         	goto	u2851
  5330  000860  EF35  F004         	goto	u2850
  5331  000864                     u2851:
  5332  000864  FFFF               	dw	65535	; assembler added errata NOP
  5333  000866  EFE9  F003         	goto	l3617
  5334  00086A                     u2850:
  5335  00086A  FFFF               	dw	65535	; assembler added errata NOP
  5336  00086C  502C               	movf	___fldiv@rem^0,w,c
  5337  00086E  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5338  000870  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5339  000872  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5340  000874  B4D8               	btfsc	status,2,c
  5341  000876  EF3F  F004         	goto	u2861
  5342  00087A  EF42  F004         	goto	u2860
  5343  00087E                     u2861:
  5344  00087E  FFFF               	dw	65535	; assembler added errata NOP
  5345  000880  EF5F  F004         	goto	l3643
  5346  000884                     u2860:
  5347  000884  FFFF               	dw	65535	; assembler added errata NOP
  5348  000886  8033               	bsf	___fldiv@grs^0,0,c
  5349  000888  EF5F  F004         	goto	l3643
  5350  00088C                     l3637:
  5351  00088C  FFFF               	dw	65535	; assembler added errata NOP
  5352  00088E  90D8               	bcf	status,0,c
  5353  000890  3620               	rlcf	___fldiv@b^0,f,c
  5354  000892  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5355  000894  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5356  000896  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5357  000898  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5358  00089A  EF51  F004         	goto	u2871
  5359  00089E  EF54  F004         	goto	u2870
  5360  0008A2                     u2871:
  5361  0008A2  FFFF               	dw	65535	; assembler added errata NOP
  5362  0008A4  EF56  F004         	goto	l1223
  5363  0008A8                     u2870:
  5364  0008A8  FFFF               	dw	65535	; assembler added errata NOP
  5365  0008AA  8020               	bsf	___fldiv@b^0,0,c
  5366  0008AC                     l1223:
  5367  0008AC  FFFF               	dw	65535	; assembler added errata NOP
  5368  0008AE  90D8               	bcf	status,0,c
  5369  0008B0  3633               	rlcf	___fldiv@grs^0,f,c
  5370  0008B2  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5371  0008B4  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5372  0008B6  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5373  0008B8  0631               	decf	___fldiv@new_exp^0,f,c
  5374  0008BA  A0D8               	btfss	status,0,c
  5375  0008BC  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5376  0008BE                     l3643:
  5377  0008BE  FFFF               	dw	65535	; assembler added errata NOP
  5378  0008C0  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5379  0008C2  EF65  F004         	goto	u2881
  5380  0008C6  EF68  F004         	goto	u2880
  5381  0008CA                     u2881:
  5382  0008CA  FFFF               	dw	65535	; assembler added errata NOP
  5383  0008CC  EF46  F004         	goto	l3637
  5384  0008D0                     u2880:
  5385  0008D0  FFFF               	dw	65535	; assembler added errata NOP
  5386  0008D2  0E00               	movlw	0
  5387  0008D4  6E38               	movwf	___fldiv@aexp^0,c
  5388  0008D6  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5389  0008D8  EF70  F004         	goto	u2891
  5390  0008DC  EF73  F004         	goto	u2890
  5391  0008E0                     u2891:
  5392  0008E0  FFFF               	dw	65535	; assembler added errata NOP
  5393  0008E2  EF9E  F004         	goto	l1225
  5394  0008E6                     u2890:
  5395  0008E6  FFFF               	dw	65535	; assembler added errata NOP
  5396  0008E8  0EFF               	movlw	255
  5397  0008EA  1433               	andwf	___fldiv@grs^0,w,c
  5398  0008EC  6E28               	movwf	??___fldiv^0,c
  5399  0008EE  0EFF               	movlw	255
  5400  0008F0  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5401  0008F2  6E29               	movwf	(??___fldiv+1)^0,c
  5402  0008F4  0EFF               	movlw	255
  5403  0008F6  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5404  0008F8  6E2A               	movwf	(??___fldiv+2)^0,c
  5405  0008FA  0E7F               	movlw	127
  5406  0008FC  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5407  0008FE  6E2B               	movwf	(??___fldiv+3)^0,c
  5408  000900  5028               	movf	??___fldiv^0,w,c
  5409  000902  1029               	iorwf	(??___fldiv+1)^0,w,c
  5410  000904  102A               	iorwf	(??___fldiv+2)^0,w,c
  5411  000906  102B               	iorwf	(??___fldiv+3)^0,w,c
  5412  000908  B4D8               	btfsc	status,2,c
  5413  00090A  EF89  F004         	goto	u2901
  5414  00090E  EF8C  F004         	goto	u2900
  5415  000912                     u2901:
  5416  000912  FFFF               	dw	65535	; assembler added errata NOP
  5417  000914  EF92  F004         	goto	l1226
  5418  000918                     u2900:
  5419  000918  FFFF               	dw	65535	; assembler added errata NOP
  5420  00091A                     l3651:
  5421  00091A  FFFF               	dw	65535	; assembler added errata NOP
  5422  00091C  0E01               	movlw	1
  5423  00091E  6E38               	movwf	___fldiv@aexp^0,c
  5424  000920  EF9E  F004         	goto	l1225
  5425  000924                     l1226:
  5426  000924  FFFF               	dw	65535	; assembler added errata NOP
  5427  000926  A020               	btfss	___fldiv@b^0,0,c
  5428  000928  EF98  F004         	goto	u2911
  5429  00092C  EF9B  F004         	goto	u2910
  5430  000930                     u2911:
  5431  000930  FFFF               	dw	65535	; assembler added errata NOP
  5432  000932  EF9E  F004         	goto	l1225
  5433  000936                     u2910:
  5434  000936  FFFF               	dw	65535	; assembler added errata NOP
  5435  000938  EF8D  F004         	goto	l3651
  5436  00093C                     l1225:
  5437  00093C  FFFF               	dw	65535	; assembler added errata NOP
  5438  00093E  5038               	movf	___fldiv@aexp^0,w,c
  5439  000940  B4D8               	btfsc	status,2,c
  5440  000942  EFA5  F004         	goto	u2921
  5441  000946  EFA8  F004         	goto	u2920
  5442  00094A                     u2921:
  5443  00094A  FFFF               	dw	65535	; assembler added errata NOP
  5444  00094C  EFCF  F004         	goto	l3663
  5445  000950                     u2920:
  5446  000950  FFFF               	dw	65535	; assembler added errata NOP
  5447  000952  0E01               	movlw	1
  5448  000954  2620               	addwf	___fldiv@b^0,f,c
  5449  000956  0E00               	movlw	0
  5450  000958  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5451  00095A  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5452  00095C  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5453  00095E  A023               	btfss	(___fldiv@b+3)^0,0,c
  5454  000960  EFB4  F004         	goto	u2931
  5455  000964  EFB7  F004         	goto	u2930
  5456  000968                     u2931:
  5457  000968  FFFF               	dw	65535	; assembler added errata NOP
  5458  00096A  EFCF  F004         	goto	l3663
  5459  00096E                     u2930:
  5460  00096E  FFFF               	dw	65535	; assembler added errata NOP
  5461  000970  C020  F028         	movff	___fldiv@b,??___fldiv
  5462  000974  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5463  000978  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5464  00097C  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5465  000980  342B               	rlcf	(??___fldiv+3)^0,w,c
  5466  000982  322B               	rrcf	(??___fldiv+3)^0,f,c
  5467  000984  322A               	rrcf	(??___fldiv+2)^0,f,c
  5468  000986  3229               	rrcf	(??___fldiv+1)^0,f,c
  5469  000988  3228               	rrcf	??___fldiv^0,f,c
  5470  00098A  C028  F020         	movff	??___fldiv,___fldiv@b
  5471  00098E  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5472  000992  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5473  000996  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5474  00099A  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5475  00099C  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5476  00099E                     l3663:
  5477  00099E  FFFF               	dw	65535	; assembler added errata NOP
  5478  0009A0  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5479  0009A2  EFDB  F004         	goto	u2941
  5480  0009A6  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5481  0009A8  E109               	bnz	u2940
  5482  0009AA  2831               	incf	___fldiv@new_exp^0,w,c
  5483  0009AC  A0D8               	btfss	status,0,c
  5484  0009AE  EFDB  F004         	goto	u2941
  5485  0009B2  EFDE  F004         	goto	u2940
  5486  0009B6                     u2941:
  5487  0009B6  FFFF               	dw	65535	; assembler added errata NOP
  5488  0009B8  EFEA  F004         	goto	l3667
  5489  0009BC                     u2940:
  5490  0009BC  FFFF               	dw	65535	; assembler added errata NOP
  5491  0009BE  0E00               	movlw	0
  5492  0009C0  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5493  0009C2  6831               	setf	___fldiv@new_exp^0,c
  5494  0009C4  0E00               	movlw	0
  5495  0009C6  6E20               	movwf	___fldiv@b^0,c
  5496  0009C8  0E00               	movlw	0
  5497  0009CA  6E21               	movwf	(___fldiv@b+1)^0,c
  5498  0009CC  0E00               	movlw	0
  5499  0009CE  6E22               	movwf	(___fldiv@b+2)^0,c
  5500  0009D0  0E00               	movlw	0
  5501  0009D2  6E23               	movwf	(___fldiv@b+3)^0,c
  5502  0009D4                     l3667:
  5503  0009D4  FFFF               	dw	65535	; assembler added errata NOP
  5504  0009D6  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5505  0009D8  EFF9  F004         	goto	u2950
  5506  0009DC  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5507  0009DE  E106               	bnz	u2951
  5508  0009E0  0431               	decf	___fldiv@new_exp^0,w,c
  5509  0009E2  B0D8               	btfsc	status,0,c
  5510  0009E4  EFF6  F004         	goto	u2951
  5511  0009E8  EFF9  F004         	goto	u2950
  5512  0009EC                     u2951:
  5513  0009EC  FFFF               	dw	65535	; assembler added errata NOP
  5514  0009EE  EF08  F005         	goto	l3671
  5515  0009F2                     u2950:
  5516  0009F2  FFFF               	dw	65535	; assembler added errata NOP
  5517  0009F4  0E00               	movlw	0
  5518  0009F6  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5519  0009F8  0E00               	movlw	0
  5520  0009FA  6E31               	movwf	___fldiv@new_exp^0,c
  5521  0009FC  0E00               	movlw	0
  5522  0009FE  6E20               	movwf	___fldiv@b^0,c
  5523  000A00  0E00               	movlw	0
  5524  000A02  6E21               	movwf	(___fldiv@b+1)^0,c
  5525  000A04  0E00               	movlw	0
  5526  000A06  6E22               	movwf	(___fldiv@b+2)^0,c
  5527  000A08  0E00               	movlw	0
  5528  000A0A  6E23               	movwf	(___fldiv@b+3)^0,c
  5529  000A0C  0E00               	movlw	0
  5530  000A0E  6E30               	movwf	___fldiv@sign^0,c
  5531  000A10                     l3671:
  5532  000A10  FFFF               	dw	65535	; assembler added errata NOP
  5533  000A12  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5534  000A16  A037               	btfss	___fldiv@bexp^0,0,c
  5535  000A18  EF10  F005         	goto	u2961
  5536  000A1C  EF13  F005         	goto	u2960
  5537  000A20                     u2961:
  5538  000A20  FFFF               	dw	65535	; assembler added errata NOP
  5539  000A22  EF17  F005         	goto	l3677
  5540  000A26                     u2960:
  5541  000A26  FFFF               	dw	65535	; assembler added errata NOP
  5542  000A28  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5543  000A2A  EF19  F005         	goto	l3679
  5544  000A2E                     l3677:
  5545  000A2E  FFFF               	dw	65535	; assembler added errata NOP
  5546  000A30  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5547  000A32                     l3679:
  5548  000A32  FFFF               	dw	65535	; assembler added errata NOP
  5549  000A34  90D8               	bcf	status,0,c
  5550  000A36  3037               	rrcf	___fldiv@bexp^0,w,c
  5551  000A38  6E23               	movwf	(___fldiv@b+3)^0,c
  5552  000A3A  EF9D  F003         	goto	l3593
  5553  000A3E                     l1212:
  5554  000A3E  FFFF               	dw	65535	; assembler added errata NOP
  5555  000A40  0012               	return		;funcret
  5556  000A42  FFFF               	dw	65535	; errata NOP
  5557  000A44                     __end_of___fldiv:
  5558                           	callstack 0
  5559                           
  5560 ;; *************** function _releaseObj *****************
  5561 ;; Defined at:
  5562 ;;		line 803 in file "motors.c"
  5563 ;; Parameters:    Size  Location     Type
  5564 ;;		None
  5565 ;; Auto vars:     Size  Location     Type
  5566 ;;		None
  5567 ;; Return value:  Size  Location     Type
  5568 ;;                  1    wreg      void 
  5569 ;; Registers used:
  5570 ;;		wreg, status,2, status,0, cstack
  5571 ;; Tracked objects:
  5572 ;;		On entry : 0/0
  5573 ;;		On exit  : 0/0
  5574 ;;		Unchanged: 0/0
  5575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5576 ;;      Params:         0       0       0       0       0       0       0
  5577 ;;      Locals:         0       0       0       0       0       0       0
  5578 ;;      Temps:          0       0       0       0       0       0       0
  5579 ;;      Totals:         0       0       0       0       0       0       0
  5580 ;;Total ram usage:        0 bytes
  5581 ;; Hardware stack levels used:    1
  5582 ;; Hardware stack levels required when called:    5
  5583 ;; This function calls:
  5584 ;;		_stepMade
  5585 ;; This function is called by:
  5586 ;;		_executeData
  5587 ;; This function uses a non-reentrant model
  5588 ;;
  5589                           
  5590                           	psect	text31
  5591  002342                     __ptext31:
  5592                           	callstack 0
  5593  002342                     _releaseObj:
  5594                           	callstack 0
  5595  002342  FFFF               	dw	65535	; assembler added errata NOP
  5596  002344                     
  5597                           ;motors.c: 804:     LATDbits.LATD1 = 0;
  5598  002344  928C               	bcf	140,1,c	;volatile
  5599                           
  5600                           ;motors.c: 807:     T2CONbits.TMR2ON = 1;
  5601  002346  84CA               	bsf	202,2,c	;volatile
  5602  002348                     l4023:
  5603  002348  FFFF               	dw	65535	; assembler added errata NOP
  5604  00234A  EC02  F012         	call	_stepMade	;wreg free
  5605  00234E  5012               	movf	?_stepMade^0,w,c
  5606  002350  1013               	iorwf	(?_stepMade+1)^0,w,c
  5607  002352  B4D8               	btfsc	status,2,c
  5608  002354  EFAE  F011         	goto	u3571
  5609  002358  EFB1  F011         	goto	u3570
  5610  00235C                     u3571:
  5611  00235C  FFFF               	dw	65535	; assembler added errata NOP
  5612  00235E  EFA4  F011         	goto	l4023
  5613  002362                     u3570:
  5614  002362  FFFF               	dw	65535	; assembler added errata NOP
  5615  002364                     
  5616                           ;motors.c: 809:     T2CONbits.TMR2ON = 0;
  5617  002364  94CA               	bcf	202,2,c	;volatile
  5618  002366                     
  5619                           ;motors.c: 810:     TMR2 = 0;
  5620  002366  0E00               	movlw	0
  5621  002368  6ECC               	movwf	204,c	;volatile
  5622  00236A  0012               	return		;funcret
  5623  00236C  FFFF               	dw	65535	; errata NOP
  5624  00236E                     __end_of_releaseObj:
  5625                           	callstack 0
  5626                           
  5627 ;; *************** function _pickObject *****************
  5628 ;; Defined at:
  5629 ;;		line 790 in file "motors.c"
  5630 ;; Parameters:    Size  Location     Type
  5631 ;;		None
  5632 ;; Auto vars:     Size  Location     Type
  5633 ;;		None
  5634 ;; Return value:  Size  Location     Type
  5635 ;;                  1    wreg      void 
  5636 ;; Registers used:
  5637 ;;		wreg, status,2, status,0, cstack
  5638 ;; Tracked objects:
  5639 ;;		On entry : 0/0
  5640 ;;		On exit  : 0/0
  5641 ;;		Unchanged: 0/0
  5642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5643 ;;      Params:         0       0       0       0       0       0       0
  5644 ;;      Locals:         0       0       0       0       0       0       0
  5645 ;;      Temps:          0       0       0       0       0       0       0
  5646 ;;      Totals:         0       0       0       0       0       0       0
  5647 ;;Total ram usage:        0 bytes
  5648 ;; Hardware stack levels used:    1
  5649 ;; Hardware stack levels required when called:    5
  5650 ;; This function calls:
  5651 ;;		_stepMade
  5652 ;; This function is called by:
  5653 ;;		_executeData
  5654 ;; This function uses a non-reentrant model
  5655 ;;
  5656                           
  5657                           	psect	text32
  5658  00236E                     __ptext32:
  5659                           	callstack 0
  5660  00236E                     _pickObject:
  5661                           	callstack 0
  5662  00236E  FFFF               	dw	65535	; assembler added errata NOP
  5663  002370                     
  5664                           ;motors.c: 791:     LATDbits.LATD1 = 1;
  5665  002370  828C               	bsf	140,1,c	;volatile
  5666                           
  5667                           ;motors.c: 794:     T2CONbits.TMR2ON = 1;
  5668  002372  84CA               	bsf	202,2,c	;volatile
  5669  002374                     l4017:
  5670  002374  FFFF               	dw	65535	; assembler added errata NOP
  5671  002376  EC02  F012         	call	_stepMade	;wreg free
  5672  00237A  5012               	movf	?_stepMade^0,w,c
  5673  00237C  1013               	iorwf	(?_stepMade+1)^0,w,c
  5674  00237E  B4D8               	btfsc	status,2,c
  5675  002380  EFC4  F011         	goto	u3561
  5676  002384  EFC7  F011         	goto	u3560
  5677  002388                     u3561:
  5678  002388  FFFF               	dw	65535	; assembler added errata NOP
  5679  00238A  EFBA  F011         	goto	l4017
  5680  00238E                     u3560:
  5681  00238E  FFFF               	dw	65535	; assembler added errata NOP
  5682  002390                     
  5683                           ;motors.c: 796:     T2CONbits.TMR2ON = 0;
  5684  002390  94CA               	bcf	202,2,c	;volatile
  5685  002392                     
  5686                           ;motors.c: 797:     TMR2 = 0;
  5687  002392  0E00               	movlw	0
  5688  002394  6ECC               	movwf	204,c	;volatile
  5689  002396  0012               	return		;funcret
  5690  002398  FFFF               	dw	65535	; errata NOP
  5691  00239A                     __end_of_pickObject:
  5692                           	callstack 0
  5693                           
  5694 ;; *************** function _moveToPoint *****************
  5695 ;; Defined at:
  5696 ;;		line 315 in file "motors.c"
  5697 ;; Parameters:    Size  Location     Type
  5698 ;;  x1              2   20[COMRAM] int 
  5699 ;;  y1              2   22[COMRAM] int 
  5700 ;;  x2              2   24[COMRAM] int 
  5701 ;;  y2              2   26[COMRAM] int 
  5702 ;; Auto vars:     Size  Location     Type
  5703 ;;  keepMovingY     1   33[COMRAM] unsigned char 
  5704 ;;  keepMovingX     1   32[COMRAM] unsigned char 
  5705 ;;  MOT2Directio    1   31[COMRAM] unsigned char 
  5706 ;;  MOT1Directio    1   30[COMRAM] unsigned char 
  5707 ;; Return value:  Size  Location     Type
  5708 ;;                  1    wreg      unsigned char 
  5709 ;; Registers used:
  5710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5711 ;; Tracked objects:
  5712 ;;		On entry : 0/0
  5713 ;;		On exit  : 0/0
  5714 ;;		Unchanged: 0/0
  5715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5716 ;;      Params:         8       0       0       0       0       0       0
  5717 ;;      Locals:         4       0       0       0       0       0       0
  5718 ;;      Temps:          2       0       0       0       0       0       0
  5719 ;;      Totals:        14       0       0       0       0       0       0
  5720 ;;Total ram usage:       14 bytes
  5721 ;; Hardware stack levels used:    1
  5722 ;; Hardware stack levels required when called:    5
  5723 ;; This function calls:
  5724 ;;		_resetStep
  5725 ;;		_stepCounter
  5726 ;;		_stepMade
  5727 ;; This function is called by:
  5728 ;;		_executeData
  5729 ;; This function uses a non-reentrant model
  5730 ;;
  5731                           
  5732                           	psect	text33
  5733  000A44                     __ptext33:
  5734                           	callstack 0
  5735  000A44                     _moveToPoint:
  5736                           	callstack 0
  5737  000A44  FFFF               	dw	65535	; assembler added errata NOP
  5738  000A46                     
  5739                           ;motors.c: 317:     unsigned char MOT1Direction, MOT2Direction;;motors.c: 320:     if(x2
      +                           > maxX || y2 > maxY){
  5740  000A46  501A               	movf	(moveToPoint@x2+1)^0,w,c
  5741  000A48  E107               	bnz	u3141
  5742  000A4A  0ECA               	movlw	202
  5743  000A4C  5C19               	subwf	moveToPoint@x2^0,w,c
  5744  000A4E  B0D8               	btfsc	status,0,c
  5745  000A50  EF2C  F005         	goto	u3141
  5746  000A54  EF2F  F005         	goto	u3140
  5747  000A58                     u3141:
  5748  000A58  FFFF               	dw	65535	; assembler added errata NOP
  5749  000A5A  EF3C  F005         	goto	l3781
  5750  000A5E                     u3140:
  5751  000A5E  FFFF               	dw	65535	; assembler added errata NOP
  5752  000A60  501C               	movf	(moveToPoint@y2+1)^0,w,c
  5753  000A62  E10A               	bnz	u3150
  5754  000A64  0ECA               	movlw	202
  5755  000A66  5C1B               	subwf	moveToPoint@y2^0,w,c
  5756  000A68  A0D8               	btfss	status,0,c
  5757  000A6A  EF39  F005         	goto	u3151
  5758  000A6E  EF3C  F005         	goto	u3150
  5759  000A72                     u3151:
  5760  000A72  FFFF               	dw	65535	; assembler added errata NOP
  5761  000A74  EF40  F005         	goto	l3785
  5762  000A78                     u3150:
  5763  000A78                     l3781:
  5764  000A78  FFFF               	dw	65535	; assembler added errata NOP
  5765                           
  5766                           ;motors.c: 321:         return(5);
  5767  000A7A  0E05               	movlw	5
  5768  000A7C  EFDC  F006         	goto	l157
  5769  000A80                     l3785:
  5770  000A80  FFFF               	dw	65535	; assembler added errata NOP
  5771                           
  5772                           ;motors.c: 342:     if((x2 - x1) > 0){
  5773  000A82  5015               	movf	moveToPoint@x1^0,w,c
  5774  000A84  5C19               	subwf	moveToPoint@x2^0,w,c
  5775  000A86  6E1D               	movwf	??_moveToPoint^0,c
  5776  000A88  5016               	movf	(moveToPoint@x1+1)^0,w,c
  5777  000A8A  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  5778  000A8C  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5779  000A8E  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5780  000A90  EF52  F005         	goto	u3161
  5781  000A94  501E               	movf	(??_moveToPoint+1)^0,w,c
  5782  000A96  E109               	bnz	u3160
  5783  000A98  041D               	decf	??_moveToPoint^0,w,c
  5784  000A9A  A0D8               	btfss	status,0,c
  5785  000A9C  EF52  F005         	goto	u3161
  5786  000AA0  EF55  F005         	goto	u3160
  5787  000AA4                     u3161:
  5788  000AA4  FFFF               	dw	65535	; assembler added errata NOP
  5789  000AA6  EF5C  F005         	goto	l158
  5790  000AAA                     u3160:
  5791  000AAA  FFFF               	dw	65535	; assembler added errata NOP
  5792  000AAC                     
  5793                           ;motors.c: 343:         motCounter[0][1] = 1;
  5794  000AAC  0E01               	movlw	1
  5795  000AAE  6E68               	movwf	(_motCounter+1)^0,c
  5796                           
  5797                           ;motors.c: 344:         MOT1Direction = 1;
  5798  000AB0  0E01               	movlw	1
  5799  000AB2  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  5800                           
  5801                           ;motors.c: 345:     }else{
  5802  000AB4  EF60  F005         	goto	l3791
  5803  000AB8                     l158:
  5804  000AB8  FFFF               	dw	65535	; assembler added errata NOP
  5805                           
  5806                           ;motors.c: 346:         motCounter[0][1] = -1;
  5807  000ABA  6868               	setf	(_motCounter+1)^0,c
  5808  000ABC                     
  5809                           ;motors.c: 347:         MOT1Direction = 0;
  5810  000ABC  0E00               	movlw	0
  5811  000ABE  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  5812  000AC0                     l3791:
  5813  000AC0  FFFF               	dw	65535	; assembler added errata NOP
  5814                           
  5815                           ;motors.c: 350:     if((y2 - y1) > 0){
  5816  000AC2  5017               	movf	moveToPoint@y1^0,w,c
  5817  000AC4  5C1B               	subwf	moveToPoint@y2^0,w,c
  5818  000AC6  6E1D               	movwf	??_moveToPoint^0,c
  5819  000AC8  5018               	movf	(moveToPoint@y1+1)^0,w,c
  5820  000ACA  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  5821  000ACC  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5822  000ACE  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5823  000AD0  EF72  F005         	goto	u3171
  5824  000AD4  501E               	movf	(??_moveToPoint+1)^0,w,c
  5825  000AD6  E109               	bnz	u3170
  5826  000AD8  041D               	decf	??_moveToPoint^0,w,c
  5827  000ADA  A0D8               	btfss	status,0,c
  5828  000ADC  EF72  F005         	goto	u3171
  5829  000AE0  EF75  F005         	goto	u3170
  5830  000AE4                     u3171:
  5831  000AE4  FFFF               	dw	65535	; assembler added errata NOP
  5832  000AE6  EF7C  F005         	goto	l160
  5833  000AEA                     u3170:
  5834  000AEA  FFFF               	dw	65535	; assembler added errata NOP
  5835  000AEC                     
  5836                           ;motors.c: 351:         motCounter[1][1] = 1;
  5837  000AEC  0E01               	movlw	1
  5838  000AEE  6E6A               	movwf	(_motCounter+3)^0,c
  5839                           
  5840                           ;motors.c: 352:         MOT2Direction = 1;
  5841  000AF0  0E01               	movlw	1
  5842  000AF2  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  5843                           
  5844                           ;motors.c: 353:     }else{
  5845  000AF4  EF80  F005         	goto	l161
  5846  000AF8                     l160:
  5847  000AF8  FFFF               	dw	65535	; assembler added errata NOP
  5848                           
  5849                           ;motors.c: 354:         motCounter[2][1] = -1;
  5850  000AFA  686C               	setf	(_motCounter+5)^0,c
  5851  000AFC                     
  5852                           ;motors.c: 355:         MOT2Direction = 0;
  5853  000AFC  0E00               	movlw	0
  5854  000AFE  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  5855  000B00                     l161:
  5856  000B00  FFFF               	dw	65535	; assembler added errata NOP
  5857                           
  5858                           ;motors.c: 360:     unsigned char keepMovingX = 1;
  5859  000B02  0E01               	movlw	1
  5860  000B04  6E21               	movwf	moveToPoint@keepMovingX^0,c
  5861                           
  5862                           ;motors.c: 361:     unsigned char keepMovingY = 1;
  5863  000B06  0E01               	movlw	1
  5864  000B08  6E22               	movwf	moveToPoint@keepMovingY^0,c
  5865  000B0A                     
  5866                           ;motors.c: 364:     T2CONbits.TMR2ON = 1;
  5867  000B0A  84CA               	bsf	202,2,c	;volatile
  5868                           
  5869                           ;motors.c: 366:     tm0Error = 0;
  5870  000B0C  0E00               	movlw	0
  5871  000B0E  6E5A               	movwf	(_tm0Error+1)^0,c
  5872  000B10  0E00               	movlw	0
  5873  000B12  6E59               	movwf	_tm0Error^0,c
  5874                           
  5875                           ;motors.c: 367:     tm0Limit = 100;
  5876  000B14  0E64               	movlw	100
  5877  000B16  6E66               	movwf	_tm0Limit^0,c
  5878  000B18                     
  5879                           ;motors.c: 368:     T0CONbits.TMR0ON = 1;
  5880  000B18  8ED5               	bsf	213,7,c	;volatile
  5881                           
  5882                           ;motors.c: 370:     while(keepMovingX || keepMovingY){
  5883  000B1A  EFBC  F006         	goto	l3863
  5884  000B1E                     l3801:
  5885  000B1E  FFFF               	dw	65535	; assembler added errata NOP
  5886                           
  5887                           ;motors.c: 373:         if(tm0Error){
  5888  000B20  5059               	movf	_tm0Error^0,w,c
  5889  000B22  105A               	iorwf	(_tm0Error+1)^0,w,c
  5890  000B24  B4D8               	btfsc	status,2,c
  5891  000B26  EF97  F005         	goto	u3181
  5892  000B2A  EF9A  F005         	goto	u3180
  5893  000B2E                     u3181:
  5894  000B2E  FFFF               	dw	65535	; assembler added errata NOP
  5895  000B30  EFA1  F005         	goto	l3805
  5896  000B34                     u3180:
  5897  000B34  FFFF               	dw	65535	; assembler added errata NOP
  5898  000B36                     
  5899                           ;motors.c: 379:             tm0Error = 4;
  5900  000B36  0E00               	movlw	0
  5901  000B38  6E5A               	movwf	(_tm0Error+1)^0,c
  5902  000B3A  0E04               	movlw	4
  5903  000B3C  6E59               	movwf	_tm0Error^0,c
  5904                           
  5905                           ;motors.c: 380:             break;
  5906  000B3E  EFD0  F006         	goto	l165
  5907  000B42                     l3805:
  5908  000B42  FFFF               	dw	65535	; assembler added errata NOP
  5909                           
  5910                           ;motors.c: 388:         if(MOT1Direction == 1){
  5911  000B44  041F               	decf	moveToPoint@MOT1Direction^0,w,c
  5912  000B46  A4D8               	btfss	status,2,c
  5913  000B48  EFA8  F005         	goto	u3191
  5914  000B4C  EFAB  F005         	goto	u3190
  5915  000B50                     u3191:
  5916  000B50  FFFF               	dw	65535	; assembler added errata NOP
  5917  000B52  EFEA  F005         	goto	l3819
  5918  000B56                     u3190:
  5919  000B56  FFFF               	dw	65535	; assembler added errata NOP
  5920  000B58                     
  5921                           ;motors.c: 389:             if(x1 + stepCounter() >= x2){
  5922  000B58  EC5D  F012         	call	_stepCounter	;wreg free
  5923  000B5C  5015               	movf	moveToPoint@x1^0,w,c
  5924  000B5E  2612               	addwf	?_stepCounter^0,f,c
  5925  000B60  5016               	movf	(moveToPoint@x1+1)^0,w,c
  5926  000B62  2213               	addwfc	(?_stepCounter+1)^0,f,c
  5927  000B64  5019               	movf	moveToPoint@x2^0,w,c
  5928  000B66  5C12               	subwf	?_stepCounter^0,w,c
  5929  000B68  501A               	movf	(moveToPoint@x2+1)^0,w,c
  5930  000B6A  5813               	subwfb	(?_stepCounter+1)^0,w,c
  5931  000B6C  A0D8               	btfss	status,0,c
  5932  000B6E  EFBB  F005         	goto	u3201
  5933  000B72  EFBE  F005         	goto	u3200
  5934  000B76                     u3201:
  5935  000B76  FFFF               	dw	65535	; assembler added errata NOP
  5936  000B78  EFC4  F005         	goto	l3811
  5937  000B7C                     u3200:
  5938  000B7C  FFFF               	dw	65535	; assembler added errata NOP
  5939  000B7E                     l3809:
  5940  000B7E  FFFF               	dw	65535	; assembler added errata NOP
  5941                           
  5942                           ;motors.c: 391:                 keepMovingX = 0;
  5943  000B80  0E00               	movlw	0
  5944  000B82  6E21               	movwf	moveToPoint@keepMovingX^0,c
  5945                           
  5946                           ;motors.c: 392:             }else if(keepMovingX){
  5947  000B84  EF28  F006         	goto	l3833
  5948  000B88                     l3811:
  5949  000B88  FFFF               	dw	65535	; assembler added errata NOP
  5950  000B8A  5021               	movf	moveToPoint@keepMovingX^0,w,c
  5951  000B8C  B4D8               	btfsc	status,2,c
  5952  000B8E  EFCB  F005         	goto	u3211
  5953  000B92  EFCE  F005         	goto	u3210
  5954  000B96                     u3211:
  5955  000B96  FFFF               	dw	65535	; assembler added errata NOP
  5956  000B98  EF28  F006         	goto	l3833
  5957  000B9C                     u3210:
  5958  000B9C  FFFF               	dw	65535	; assembler added errata NOP
  5959  000B9E                     
  5960                           ;motors.c: 398:             motCounter[0][0] += motCounter[0][1];
  5961  000B9E  5068               	movf	(_motCounter+1)^0,w,c
  5962  000BA0  2667               	addwf	_motCounter^0,f,c
  5963                           
  5964                           ;motors.c: 399:             if(motCounter[0][0] > 3){
  5965  000BA2  5067               	movf	_motCounter^0,w,c
  5966  000BA4  0A80               	xorlw	128
  5967  000BA6  0F7C               	addlw	-132
  5968  000BA8  A0D8               	btfss	status,0,c
  5969  000BAA  EFD9  F005         	goto	u3221
  5970  000BAE  EFDC  F005         	goto	u3220
  5971  000BB2                     u3221:
  5972  000BB2  FFFF               	dw	65535	; assembler added errata NOP
  5973  000BB4  EFDF  F005         	goto	l3817
  5974  000BB8                     u3220:
  5975  000BB8  FFFF               	dw	65535	; assembler added errata NOP
  5976  000BBA                     
  5977                           ;motors.c: 400:                 motCounter[0][0] = 0;
  5978  000BBA  0E00               	movlw	0
  5979  000BBC  6E67               	movwf	_motCounter^0,c
  5980  000BBE                     l3817:
  5981  000BBE  FFFF               	dw	65535	; assembler added errata NOP
  5982                           
  5983                           ;motors.c: 403:             LATA = stepMot1[motCounter[0][0]];
  5984  000BC0  0E8C               	movlw	low _stepMot1
  5985  000BC2  2467               	addwf	_motCounter^0,w,c
  5986  000BC4  6ED9               	movwf	fsr2l,c
  5987  000BC6  6ADA               	clrf	fsr2h,c
  5988  000BC8  0E00               	movlw	high _stepMot1
  5989  000BCA  22DA               	addwfc	fsr2h,f,c
  5990  000BCC  50DF               	movf	indf2,w,c
  5991  000BCE  6E89               	movwf	137,c	;volatile
  5992  000BD0  EF28  F006         	goto	l3833
  5993  000BD4                     l3819:
  5994  000BD4  FFFF               	dw	65535	; assembler added errata NOP
  5995  000BD6  501F               	movf	moveToPoint@MOT1Direction^0,w,c
  5996  000BD8  A4D8               	btfss	status,2,c
  5997  000BDA  EFF1  F005         	goto	u3231
  5998  000BDE  EFF4  F005         	goto	u3230
  5999  000BE2                     u3231:
  6000  000BE2  FFFF               	dw	65535	; assembler added errata NOP
  6001  000BE4  EF28  F006         	goto	l3833
  6002  000BE8                     u3230:
  6003  000BE8  FFFF               	dw	65535	; assembler added errata NOP
  6004  000BEA                     
  6005                           ;motors.c: 407:             if(x1 - stepCounter() <= x2){
  6006  000BEA  EC5D  F012         	call	_stepCounter	;wreg free
  6007  000BEE  C015  F01D         	movff	moveToPoint@x1,??_moveToPoint
  6008  000BF2  C016  F01E         	movff	moveToPoint@x1+1,??_moveToPoint+1
  6009  000BF6  5012               	movf	?_stepCounter^0,w,c
  6010  000BF8  5E1D               	subwf	??_moveToPoint^0,f,c
  6011  000BFA  5013               	movf	(?_stepCounter+1)^0,w,c
  6012  000BFC  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6013  000BFE  501D               	movf	??_moveToPoint^0,w,c
  6014  000C00  5C19               	subwf	moveToPoint@x2^0,w,c
  6015  000C02  501E               	movf	(??_moveToPoint+1)^0,w,c
  6016  000C04  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  6017  000C06  A0D8               	btfss	status,0,c
  6018  000C08  EF08  F006         	goto	u3241
  6019  000C0C  EF0B  F006         	goto	u3240
  6020  000C10                     u3241:
  6021  000C10  FFFF               	dw	65535	; assembler added errata NOP
  6022  000C12  EF0E  F006         	goto	l3825
  6023  000C16                     u3240:
  6024  000C16  FFFF               	dw	65535	; assembler added errata NOP
  6025  000C18  EFBF  F005         	goto	l3809
  6026  000C1C                     l3825:
  6027  000C1C  FFFF               	dw	65535	; assembler added errata NOP
  6028  000C1E  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6029  000C20  B4D8               	btfsc	status,2,c
  6030  000C22  EF15  F006         	goto	u3251
  6031  000C26  EF18  F006         	goto	u3250
  6032  000C2A                     u3251:
  6033  000C2A  FFFF               	dw	65535	; assembler added errata NOP
  6034  000C2C  EF28  F006         	goto	l3833
  6035  000C30                     u3250:
  6036  000C30  FFFF               	dw	65535	; assembler added errata NOP
  6037  000C32                     
  6038                           ;motors.c: 416:             motCounter[0][0] += motCounter[0][1];
  6039  000C32  5068               	movf	(_motCounter+1)^0,w,c
  6040  000C34  2667               	addwf	_motCounter^0,f,c
  6041                           
  6042                           ;motors.c: 417:             if(motCounter[0][0] < 0){
  6043  000C36  BE67               	btfsc	_motCounter^0,7,c
  6044  000C38  EF23  F006         	goto	u3260
  6045  000C3C  EF20  F006         	goto	u3261
  6046  000C40                     u3261:
  6047  000C40  FFFF               	dw	65535	; assembler added errata NOP
  6048  000C42  EFDF  F005         	goto	l3817
  6049  000C46                     u3260:
  6050  000C46  FFFF               	dw	65535	; assembler added errata NOP
  6051  000C48                     
  6052                           ;motors.c: 418:                 motCounter[0][0] = 3;
  6053  000C48  0E03               	movlw	3
  6054  000C4A  6E67               	movwf	_motCounter^0,c
  6055  000C4C  EFDF  F005         	goto	l3817
  6056  000C50                     l3833:
  6057  000C50  FFFF               	dw	65535	; assembler added errata NOP
  6058                           
  6059                           ;motors.c: 426:         if(MOT2Direction == 1){
  6060  000C52  0420               	decf	moveToPoint@MOT2Direction^0,w,c
  6061  000C54  A4D8               	btfss	status,2,c
  6062  000C56  EF2F  F006         	goto	u3271
  6063  000C5A  EF32  F006         	goto	u3270
  6064  000C5E                     u3271:
  6065  000C5E  FFFF               	dw	65535	; assembler added errata NOP
  6066  000C60  EF71  F006         	goto	l3847
  6067  000C64                     u3270:
  6068  000C64  FFFF               	dw	65535	; assembler added errata NOP
  6069  000C66                     
  6070                           ;motors.c: 428:             if(y1 + stepCounter() >= y2){
  6071  000C66  EC5D  F012         	call	_stepCounter	;wreg free
  6072  000C6A  5017               	movf	moveToPoint@y1^0,w,c
  6073  000C6C  2612               	addwf	?_stepCounter^0,f,c
  6074  000C6E  5018               	movf	(moveToPoint@y1+1)^0,w,c
  6075  000C70  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6076  000C72  501B               	movf	moveToPoint@y2^0,w,c
  6077  000C74  5C12               	subwf	?_stepCounter^0,w,c
  6078  000C76  501C               	movf	(moveToPoint@y2+1)^0,w,c
  6079  000C78  5813               	subwfb	(?_stepCounter+1)^0,w,c
  6080  000C7A  A0D8               	btfss	status,0,c
  6081  000C7C  EF42  F006         	goto	u3281
  6082  000C80  EF45  F006         	goto	u3280
  6083  000C84                     u3281:
  6084  000C84  FFFF               	dw	65535	; assembler added errata NOP
  6085  000C86  EF4B  F006         	goto	l3839
  6086  000C8A                     u3280:
  6087  000C8A  FFFF               	dw	65535	; assembler added errata NOP
  6088  000C8C                     l3837:
  6089  000C8C  FFFF               	dw	65535	; assembler added errata NOP
  6090                           
  6091                           ;motors.c: 430:                 keepMovingY = 0;
  6092  000C8E  0E00               	movlw	0
  6093  000C90  6E22               	movwf	moveToPoint@keepMovingY^0,c
  6094                           
  6095                           ;motors.c: 431:             }else if(keepMovingY){
  6096  000C92  EFAF  F006         	goto	l3861
  6097  000C96                     l3839:
  6098  000C96  FFFF               	dw	65535	; assembler added errata NOP
  6099  000C98  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6100  000C9A  B4D8               	btfsc	status,2,c
  6101  000C9C  EF52  F006         	goto	u3291
  6102  000CA0  EF55  F006         	goto	u3290
  6103  000CA4                     u3291:
  6104  000CA4  FFFF               	dw	65535	; assembler added errata NOP
  6105  000CA6  EFAF  F006         	goto	l182
  6106  000CAA                     u3290:
  6107  000CAA  FFFF               	dw	65535	; assembler added errata NOP
  6108  000CAC                     
  6109                           ;motors.c: 437:             motCounter[1][0] += motCounter[1][1];
  6110  000CAC  506A               	movf	(_motCounter+3)^0,w,c
  6111  000CAE  2669               	addwf	(_motCounter+2)^0,f,c
  6112                           
  6113                           ;motors.c: 438:             if(motCounter[1][0] > 3){
  6114  000CB0  5069               	movf	(_motCounter+2)^0,w,c
  6115  000CB2  0A80               	xorlw	128
  6116  000CB4  0F7C               	addlw	-132
  6117  000CB6  A0D8               	btfss	status,0,c
  6118  000CB8  EF60  F006         	goto	u3301
  6119  000CBC  EF63  F006         	goto	u3300
  6120  000CC0                     u3301:
  6121  000CC0  FFFF               	dw	65535	; assembler added errata NOP
  6122  000CC2  EF66  F006         	goto	l3845
  6123  000CC6                     u3300:
  6124  000CC6  FFFF               	dw	65535	; assembler added errata NOP
  6125  000CC8                     
  6126                           ;motors.c: 439:                 motCounter[1][0] = 0;
  6127  000CC8  0E00               	movlw	0
  6128  000CCA  6E69               	movwf	(_motCounter+2)^0,c
  6129  000CCC                     l3845:
  6130  000CCC  FFFF               	dw	65535	; assembler added errata NOP
  6131                           
  6132                           ;motors.c: 442:             LATB = stepMot2[motCounter[1][0]];
  6133  000CCE  0E88               	movlw	low _stepMot2
  6134  000CD0  2469               	addwf	(_motCounter+2)^0,w,c
  6135  000CD2  6ED9               	movwf	fsr2l,c
  6136  000CD4  6ADA               	clrf	fsr2h,c
  6137  000CD6  0E00               	movlw	high _stepMot2
  6138  000CD8  22DA               	addwfc	fsr2h,f,c
  6139  000CDA  50DF               	movf	indf2,w,c
  6140  000CDC  6E8A               	movwf	138,c	;volatile
  6141  000CDE  EFAF  F006         	goto	l3861
  6142  000CE2                     l3847:
  6143  000CE2  FFFF               	dw	65535	; assembler added errata NOP
  6144  000CE4  5020               	movf	moveToPoint@MOT2Direction^0,w,c
  6145  000CE6  A4D8               	btfss	status,2,c
  6146  000CE8  EF78  F006         	goto	u3311
  6147  000CEC  EF7B  F006         	goto	u3310
  6148  000CF0                     u3311:
  6149  000CF0  FFFF               	dw	65535	; assembler added errata NOP
  6150  000CF2  EFAF  F006         	goto	l3861
  6151  000CF6                     u3310:
  6152  000CF6  FFFF               	dw	65535	; assembler added errata NOP
  6153  000CF8                     
  6154                           ;motors.c: 447:             if(y1 - stepCounter() <= y2){
  6155  000CF8  EC5D  F012         	call	_stepCounter	;wreg free
  6156  000CFC  C017  F01D         	movff	moveToPoint@y1,??_moveToPoint
  6157  000D00  C018  F01E         	movff	moveToPoint@y1+1,??_moveToPoint+1
  6158  000D04  5012               	movf	?_stepCounter^0,w,c
  6159  000D06  5E1D               	subwf	??_moveToPoint^0,f,c
  6160  000D08  5013               	movf	(?_stepCounter+1)^0,w,c
  6161  000D0A  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6162  000D0C  501D               	movf	??_moveToPoint^0,w,c
  6163  000D0E  5C1B               	subwf	moveToPoint@y2^0,w,c
  6164  000D10  501E               	movf	(??_moveToPoint+1)^0,w,c
  6165  000D12  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  6166  000D14  A0D8               	btfss	status,0,c
  6167  000D16  EF8F  F006         	goto	u3321
  6168  000D1A  EF92  F006         	goto	u3320
  6169  000D1E                     u3321:
  6170  000D1E  FFFF               	dw	65535	; assembler added errata NOP
  6171  000D20  EF95  F006         	goto	l3853
  6172  000D24                     u3320:
  6173  000D24  FFFF               	dw	65535	; assembler added errata NOP
  6174  000D26  EF46  F006         	goto	l3837
  6175  000D2A                     l3853:
  6176  000D2A  FFFF               	dw	65535	; assembler added errata NOP
  6177  000D2C  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6178  000D2E  B4D8               	btfsc	status,2,c
  6179  000D30  EF9C  F006         	goto	u3331
  6180  000D34  EF9F  F006         	goto	u3330
  6181  000D38                     u3331:
  6182  000D38  FFFF               	dw	65535	; assembler added errata NOP
  6183  000D3A  EFAF  F006         	goto	l3861
  6184  000D3E                     u3330:
  6185  000D3E  FFFF               	dw	65535	; assembler added errata NOP
  6186  000D40                     
  6187                           ;motors.c: 456:             motCounter[1][0] += motCounter[1][1];
  6188  000D40  506A               	movf	(_motCounter+3)^0,w,c
  6189  000D42  2669               	addwf	(_motCounter+2)^0,f,c
  6190                           
  6191                           ;motors.c: 457:             if(motCounter[1][0] < 0){
  6192  000D44  BE69               	btfsc	(_motCounter+2)^0,7,c
  6193  000D46  EFAA  F006         	goto	u3340
  6194  000D4A  EFA7  F006         	goto	u3341
  6195  000D4E                     u3341:
  6196  000D4E  FFFF               	dw	65535	; assembler added errata NOP
  6197  000D50  EF66  F006         	goto	l3845
  6198  000D54                     u3340:
  6199  000D54  FFFF               	dw	65535	; assembler added errata NOP
  6200  000D56                     
  6201                           ;motors.c: 458:                 motCounter[1][0] = 3;
  6202  000D56  0E03               	movlw	3
  6203  000D58  6E69               	movwf	(_motCounter+2)^0,c
  6204  000D5A  EF66  F006         	goto	l3845
  6205  000D5E                     l182:
  6206  000D5E                     l3861:
  6207  000D5E  FFFF               	dw	65535	; assembler added errata NOP
  6208  000D60  EC02  F012         	call	_stepMade	;wreg free
  6209  000D64  5012               	movf	?_stepMade^0,w,c
  6210  000D66  1013               	iorwf	(?_stepMade+1)^0,w,c
  6211  000D68  B4D8               	btfsc	status,2,c
  6212  000D6A  EFB9  F006         	goto	u3351
  6213  000D6E  EFBC  F006         	goto	u3350
  6214  000D72                     u3351:
  6215  000D72  FFFF               	dw	65535	; assembler added errata NOP
  6216  000D74  EFAF  F006         	goto	l3861
  6217  000D78                     u3350:
  6218  000D78                     l3863:
  6219  000D78  FFFF               	dw	65535	; assembler added errata NOP
  6220                           
  6221                           ;motors.c: 370:     while(keepMovingX || keepMovingY){
  6222  000D7A  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6223  000D7C  A4D8               	btfss	status,2,c
  6224  000D7E  EFC3  F006         	goto	u3361
  6225  000D82  EFC6  F006         	goto	u3360
  6226  000D86                     u3361:
  6227  000D86  FFFF               	dw	65535	; assembler added errata NOP
  6228  000D88  EF8F  F005         	goto	l3801
  6229  000D8C                     u3360:
  6230  000D8C  FFFF               	dw	65535	; assembler added errata NOP
  6231  000D8E  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6232  000D90  A4D8               	btfss	status,2,c
  6233  000D92  EFCD  F006         	goto	u3371
  6234  000D96  EFD0  F006         	goto	u3370
  6235  000D9A                     u3371:
  6236  000D9A  FFFF               	dw	65535	; assembler added errata NOP
  6237  000D9C  EF8F  F005         	goto	l3801
  6238  000DA0                     u3370:
  6239  000DA0                     l165:
  6240  000DA0  FFFF               	dw	65535	; assembler added errata NOP
  6241                           
  6242                           ;motors.c: 481:     T0CONbits.TMR0ON = 0;
  6243  000DA2  9ED5               	bcf	213,7,c	;volatile
  6244                           
  6245                           ;motors.c: 482:     T2CONbits.TMR2ON = 0;
  6246  000DA4  94CA               	bcf	202,2,c	;volatile
  6247  000DA6                     
  6248                           ;motors.c: 484:     TMR0 = 0;
  6249  000DA6  0E00               	movlw	0
  6250  000DA8  6ED7               	movwf	215,c	;volatile
  6251  000DAA  0E00               	movlw	0
  6252  000DAC  6ED6               	movwf	214,c	;volatile
  6253                           
  6254                           ;motors.c: 485:     TMR2 = 0;
  6255  000DAE  0E00               	movlw	0
  6256  000DB0  6ECC               	movwf	204,c	;volatile
  6257  000DB2                     
  6258                           ;motors.c: 488:     resetStep();
  6259  000DB2  EC77  F012         	call	_resetStep	;wreg free
  6260  000DB6                     
  6261                           ;motors.c: 490:     return(tm0Error);
  6262  000DB6  5059               	movf	_tm0Error^0,w,c
  6263  000DB8                     l157:
  6264  000DB8  FFFF               	dw	65535	; assembler added errata NOP
  6265  000DBA  0012               	return		;funcret
  6266  000DBC  FFFF               	dw	65535	; errata NOP
  6267  000DBE                     __end_of_moveToPoint:
  6268                           	callstack 0
  6269                           
  6270 ;; *************** function _stepCounter *****************
  6271 ;; Defined at:
  6272 ;;		line 71 in file "timer.c"
  6273 ;; Parameters:    Size  Location     Type
  6274 ;;		None
  6275 ;; Auto vars:     Size  Location     Type
  6276 ;;		None
  6277 ;; Return value:  Size  Location     Type
  6278 ;;                  2   17[COMRAM] unsigned int 
  6279 ;; Registers used:
  6280 ;;		None
  6281 ;; Tracked objects:
  6282 ;;		On entry : 0/0
  6283 ;;		On exit  : 0/0
  6284 ;;		Unchanged: 0/0
  6285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6286 ;;      Params:         2       0       0       0       0       0       0
  6287 ;;      Locals:         0       0       0       0       0       0       0
  6288 ;;      Temps:          0       0       0       0       0       0       0
  6289 ;;      Totals:         2       0       0       0       0       0       0
  6290 ;;Total ram usage:        2 bytes
  6291 ;; Hardware stack levels used:    1
  6292 ;; Hardware stack levels required when called:    4
  6293 ;; This function calls:
  6294 ;;		Nothing
  6295 ;; This function is called by:
  6296 ;;		_moveToPoint
  6297 ;; This function uses a non-reentrant model
  6298 ;;
  6299                           
  6300                           	psect	text34
  6301  0024BA                     __ptext34:
  6302                           	callstack 0
  6303  0024BA                     _stepCounter:
  6304                           	callstack 0
  6305  0024BA  FFFF               	dw	65535	; assembler added errata NOP
  6306  0024BC                     
  6307                           ;timer.c: 72:     return pwmStep;
  6308  0024BC  C05C  F012         	movff	_pwmStep,?_stepCounter	;volatile
  6309  0024C0  6A13               	clrf	(?_stepCounter+1)^0,c
  6310  0024C2  0012               	return		;funcret
  6311  0024C4  FFFF               	dw	65535	; errata NOP
  6312  0024C6                     __end_of_stepCounter:
  6313                           	callstack 0
  6314                           
  6315 ;; *************** function _liftArm *****************
  6316 ;; Defined at:
  6317 ;;		line 685 in file "motors.c"
  6318 ;; Parameters:    Size  Location     Type
  6319 ;;		None
  6320 ;; Auto vars:     Size  Location     Type
  6321 ;;		None
  6322 ;; Return value:  Size  Location     Type
  6323 ;;                  1    wreg      unsigned char 
  6324 ;; Registers used:
  6325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6326 ;; Tracked objects:
  6327 ;;		On entry : 0/0
  6328 ;;		On exit  : 0/0
  6329 ;;		Unchanged: 0/0
  6330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6331 ;;      Params:         0       0       0       0       0       0       0
  6332 ;;      Locals:         0       0       0       0       0       0       0
  6333 ;;      Temps:          0       0       0       0       0       0       0
  6334 ;;      Totals:         0       0       0       0       0       0       0
  6335 ;;Total ram usage:        0 bytes
  6336 ;; Hardware stack levels used:    1
  6337 ;; Hardware stack levels required when called:    5
  6338 ;; This function calls:
  6339 ;;		_resetStep
  6340 ;;		_stepMade
  6341 ;; This function is called by:
  6342 ;;		_executeData
  6343 ;; This function uses a non-reentrant model
  6344 ;;
  6345                           
  6346                           	psect	text35
  6347  002084                     __ptext35:
  6348                           	callstack 0
  6349  002084                     _liftArm:
  6350                           	callstack 0
  6351  002084  FFFF               	dw	65535	; assembler added errata NOP
  6352  002086                     
  6353                           ;motors.c: 691:     motCounter[2][1] = -1;
  6354  002086  686C               	setf	(_motCounter+5)^0,c
  6355                           
  6356                           ;motors.c: 694:     T2CONbits.TMR2ON = 1;
  6357  002088  84CA               	bsf	202,2,c	;volatile
  6358  00208A                     
  6359                           ;motors.c: 696:     tm0Error = 0;
  6360  00208A  0E00               	movlw	0
  6361  00208C  6E5A               	movwf	(_tm0Error+1)^0,c
  6362  00208E  0E00               	movlw	0
  6363  002090  6E59               	movwf	_tm0Error^0,c
  6364                           
  6365                           ;motors.c: 697:     tm0Limit = 50;
  6366  002092  0E32               	movlw	50
  6367  002094  6E66               	movwf	_tm0Limit^0,c
  6368  002096                     
  6369                           ;motors.c: 698:     T0CONbits.TMR0ON = 1;
  6370  002096  8ED5               	bsf	213,7,c	;volatile
  6371                           
  6372                           ;motors.c: 702:     while(!PORTEbits.RE2){
  6373  002098  EF86  F010         	goto	l217
  6374  00209C                     l3971:
  6375  00209C  FFFF               	dw	65535	; assembler added errata NOP
  6376                           
  6377                           ;motors.c: 704:         resetStep();
  6378  00209E  EC77  F012         	call	_resetStep	;wreg free
  6379  0020A2                     
  6380                           ;motors.c: 707:         if(tm0Error){
  6381  0020A2  5059               	movf	_tm0Error^0,w,c
  6382  0020A4  105A               	iorwf	(_tm0Error+1)^0,w,c
  6383  0020A6  B4D8               	btfsc	status,2,c
  6384  0020A8  EF58  F010         	goto	u3501
  6385  0020AC  EF5B  F010         	goto	u3500
  6386  0020B0                     u3501:
  6387  0020B0  FFFF               	dw	65535	; assembler added errata NOP
  6388  0020B2  EF62  F010         	goto	l3977
  6389  0020B6                     u3500:
  6390  0020B6  FFFF               	dw	65535	; assembler added errata NOP
  6391  0020B8                     
  6392                           ;motors.c: 712:             tm0Error = 6;
  6393  0020B8  0E00               	movlw	0
  6394  0020BA  6E5A               	movwf	(_tm0Error+1)^0,c
  6395  0020BC  0E06               	movlw	6
  6396  0020BE  6E59               	movwf	_tm0Error^0,c
  6397                           
  6398                           ;motors.c: 713:             break;
  6399  0020C0  EF8F  F010         	goto	l220
  6400  0020C4                     l3977:
  6401  0020C4  FFFF               	dw	65535	; assembler added errata NOP
  6402                           
  6403                           ;motors.c: 722:             motCounter[2][0] += motCounter[2][1];
  6404  0020C6  506C               	movf	(_motCounter+5)^0,w,c
  6405  0020C8  266B               	addwf	(_motCounter+4)^0,f,c
  6406                           
  6407                           ;motors.c: 723:             if(motCounter[2][0] < 0){
  6408  0020CA  BE6B               	btfsc	(_motCounter+4)^0,7,c
  6409  0020CC  EF6D  F010         	goto	u3510
  6410  0020D0  EF6A  F010         	goto	u3511
  6411  0020D4                     u3511:
  6412  0020D4  FFFF               	dw	65535	; assembler added errata NOP
  6413  0020D6  EF70  F010         	goto	l3981
  6414  0020DA                     u3510:
  6415  0020DA  FFFF               	dw	65535	; assembler added errata NOP
  6416  0020DC                     
  6417                           ;motors.c: 724:                 motCounter[2][0] = 3;
  6418  0020DC  0E03               	movlw	3
  6419  0020DE  6E6B               	movwf	(_motCounter+4)^0,c
  6420  0020E0                     l3981:
  6421  0020E0  FFFF               	dw	65535	; assembler added errata NOP
  6422                           
  6423                           ;motors.c: 727:             LATC = stepMot3[motCounter[2][0]];
  6424  0020E2  0E84               	movlw	low _stepMot3
  6425  0020E4  246B               	addwf	(_motCounter+4)^0,w,c
  6426  0020E6  6ED9               	movwf	fsr2l,c
  6427  0020E8  6ADA               	clrf	fsr2h,c
  6428  0020EA  0E00               	movlw	high _stepMot3
  6429  0020EC  22DA               	addwfc	fsr2h,f,c
  6430  0020EE  50DF               	movf	indf2,w,c
  6431  0020F0  6E8B               	movwf	139,c	;volatile
  6432  0020F2                     l3983:
  6433  0020F2  FFFF               	dw	65535	; assembler added errata NOP
  6434  0020F4  EC02  F012         	call	_stepMade	;wreg free
  6435  0020F8  5012               	movf	?_stepMade^0,w,c
  6436  0020FA  1013               	iorwf	(?_stepMade+1)^0,w,c
  6437  0020FC  B4D8               	btfsc	status,2,c
  6438  0020FE  EF83  F010         	goto	u3521
  6439  002102  EF86  F010         	goto	u3520
  6440  002106                     u3521:
  6441  002106  FFFF               	dw	65535	; assembler added errata NOP
  6442  002108  EF79  F010         	goto	l3983
  6443  00210C                     u3520:
  6444  00210C                     l217:
  6445  00210C  FFFF               	dw	65535	; assembler added errata NOP
  6446                           
  6447                           ;motors.c: 702:     while(!PORTEbits.RE2){
  6448  00210E  A484               	btfss	132,2,c	;volatile
  6449  002110  EF8C  F010         	goto	u3531
  6450  002114  EF8F  F010         	goto	u3530
  6451  002118                     u3531:
  6452  002118  FFFF               	dw	65535	; assembler added errata NOP
  6453  00211A  EF4E  F010         	goto	l3971
  6454  00211E                     u3530:
  6455  00211E                     l220:
  6456  00211E  FFFF               	dw	65535	; assembler added errata NOP
  6457                           
  6458                           ;motors.c: 744:     T0CONbits.TMR0ON = 0;
  6459  002120  9ED5               	bcf	213,7,c	;volatile
  6460                           
  6461                           ;motors.c: 745:     T2CONbits.TMR2ON = 0;
  6462  002122  94CA               	bcf	202,2,c	;volatile
  6463  002124                     
  6464                           ;motors.c: 747:     TMR0 = 0;
  6465  002124  0E00               	movlw	0
  6466  002126  6ED7               	movwf	215,c	;volatile
  6467  002128  0E00               	movlw	0
  6468  00212A  6ED6               	movwf	214,c	;volatile
  6469                           
  6470                           ;motors.c: 748:     TMR2 = 0;
  6471  00212C  0E00               	movlw	0
  6472  00212E  6ECC               	movwf	204,c	;volatile
  6473  002130                     
  6474                           ;motors.c: 751:     resetStep();
  6475  002130  EC77  F012         	call	_resetStep	;wreg free
  6476  002134                     
  6477                           ;motors.c: 753:     return(tm0Error);
  6478  002134  5059               	movf	_tm0Error^0,w,c
  6479  002136  0012               	return		;funcret
  6480  002138  FFFF               	dw	65535	; errata NOP
  6481  00213A                     __end_of_liftArm:
  6482                           	callstack 0
  6483                           
  6484 ;; *************** function _stepMade *****************
  6485 ;; Defined at:
  6486 ;;		line 60 in file "timer.c"
  6487 ;; Parameters:    Size  Location     Type
  6488 ;;		None
  6489 ;; Auto vars:     Size  Location     Type
  6490 ;;  temp            1   19[COMRAM] unsigned char 
  6491 ;; Return value:  Size  Location     Type
  6492 ;;                  2   17[COMRAM] unsigned int 
  6493 ;; Registers used:
  6494 ;;		wreg, status,2
  6495 ;; Tracked objects:
  6496 ;;		On entry : 0/0
  6497 ;;		On exit  : 0/0
  6498 ;;		Unchanged: 0/0
  6499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6500 ;;      Params:         2       0       0       0       0       0       0
  6501 ;;      Locals:         1       0       0       0       0       0       0
  6502 ;;      Temps:          0       0       0       0       0       0       0
  6503 ;;      Totals:         3       0       0       0       0       0       0
  6504 ;;Total ram usage:        3 bytes
  6505 ;; Hardware stack levels used:    1
  6506 ;; Hardware stack levels required when called:    4
  6507 ;; This function calls:
  6508 ;;		Nothing
  6509 ;; This function is called by:
  6510 ;;		_resetPosition
  6511 ;;		_moveToPoint
  6512 ;;		_touchObject
  6513 ;;		_touchTherm
  6514 ;;		_liftArm
  6515 ;;		_rotateObj
  6516 ;;		_pickObject
  6517 ;;		_releaseObj
  6518 ;; This function uses a non-reentrant model
  6519 ;;
  6520                           
  6521                           	psect	text36
  6522  002404                     __ptext36:
  6523                           	callstack 0
  6524  002404                     _stepMade:
  6525                           	callstack 0
  6526  002404  FFFF               	dw	65535	; assembler added errata NOP
  6527  002406                     
  6528                           ;timer.c: 61:     unsigned char temp = stepToggle;
  6529  002406  C05B  F014         	movff	_stepToggle,stepMade@temp	;volatile
  6530  00240A                     
  6531                           ;timer.c: 63:     stepToggle = 0;
  6532  00240A  0E00               	movlw	0
  6533  00240C  6E5B               	movwf	_stepToggle^0,c	;volatile
  6534  00240E                     
  6535                           ;timer.c: 65:     return temp;
  6536  00240E  C014  F012         	movff	stepMade@temp,?_stepMade
  6537  002412  6A13               	clrf	(?_stepMade+1)^0,c
  6538  002414  0012               	return		;funcret
  6539  002416  FFFF               	dw	65535	; errata NOP
  6540  002418                     __end_of_stepMade:
  6541                           	callstack 0
  6542                           
  6543 ;; *************** function _resetStep *****************
  6544 ;; Defined at:
  6545 ;;		line 78 in file "timer.c"
  6546 ;; Parameters:    Size  Location     Type
  6547 ;;		None
  6548 ;; Auto vars:     Size  Location     Type
  6549 ;;		None
  6550 ;; Return value:  Size  Location     Type
  6551 ;;                  1    wreg      void 
  6552 ;; Registers used:
  6553 ;;		wreg, status,2
  6554 ;; Tracked objects:
  6555 ;;		On entry : 0/0
  6556 ;;		On exit  : 0/0
  6557 ;;		Unchanged: 0/0
  6558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6559 ;;      Params:         0       0       0       0       0       0       0
  6560 ;;      Locals:         0       0       0       0       0       0       0
  6561 ;;      Temps:          0       0       0       0       0       0       0
  6562 ;;      Totals:         0       0       0       0       0       0       0
  6563 ;;Total ram usage:        0 bytes
  6564 ;; Hardware stack levels used:    1
  6565 ;; Hardware stack levels required when called:    4
  6566 ;; This function calls:
  6567 ;;		Nothing
  6568 ;; This function is called by:
  6569 ;;		_resetPosition
  6570 ;;		_moveToPoint
  6571 ;;		_touchObject
  6572 ;;		_touchTherm
  6573 ;;		_liftArm
  6574 ;;		_rotateObj
  6575 ;; This function uses a non-reentrant model
  6576 ;;
  6577                           
  6578                           	psect	text37
  6579  0024EE                     __ptext37:
  6580                           	callstack 0
  6581  0024EE                     _resetStep:
  6582                           	callstack 0
  6583  0024EE  FFFF               	dw	65535	; assembler added errata NOP
  6584  0024F0                     
  6585                           ;timer.c: 79:     pwmStep = 0;
  6586  0024F0  0E00               	movlw	0
  6587  0024F2  6E5C               	movwf	_pwmStep^0,c	;volatile
  6588  0024F4  0012               	return		;funcret
  6589  0024F6  FFFF               	dw	65535	; errata NOP
  6590  0024F8                     __end_of_resetStep:
  6591                           	callstack 0
  6592                           
  6593 ;; *************** function _getData *****************
  6594 ;; Defined at:
  6595 ;;		line 35 in file "usart.c"
  6596 ;; Parameters:    Size  Location     Type
  6597 ;;		None
  6598 ;; Auto vars:     Size  Location     Type
  6599 ;;		None
  6600 ;; Return value:  Size  Location     Type
  6601 ;;                  2   17[COMRAM] PTR struct .
  6602 ;; Registers used:
  6603 ;;		wreg, status,2, status,0
  6604 ;; Tracked objects:
  6605 ;;		On entry : 0/0
  6606 ;;		On exit  : 0/0
  6607 ;;		Unchanged: 0/0
  6608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6609 ;;      Params:         2       0       0       0       0       0       0
  6610 ;;      Locals:         0       0       0       0       0       0       0
  6611 ;;      Temps:          0       0       0       0       0       0       0
  6612 ;;      Totals:         2       0       0       0       0       0       0
  6613 ;;Total ram usage:        2 bytes
  6614 ;; Hardware stack levels used:    1
  6615 ;; Hardware stack levels required when called:    4
  6616 ;; This function calls:
  6617 ;;		Nothing
  6618 ;; This function is called by:
  6619 ;;		_executeData
  6620 ;; This function uses a non-reentrant model
  6621 ;;
  6622                           
  6623                           	psect	text38
  6624  00246A                     __ptext38:
  6625                           	callstack 0
  6626  00246A                     _getData:
  6627                           	callstack 0
  6628  00246A  FFFF               	dw	65535	; assembler added errata NOP
  6629  00246C                     
  6630                           ;usart.c: 36:     return(&dataSequence[0]);
  6631  00246C  0ECA               	movlw	low _dataSequence
  6632  00246E  6E12               	movwf	?_getData^0,c
  6633  002470  0E00               	movlw	high _dataSequence
  6634  002472  6E13               	movwf	(?_getData+1)^0,c
  6635  002474  0012               	return		;funcret
  6636  002476  FFFF               	dw	65535	; errata NOP
  6637  002478                     __end_of_getData:
  6638                           	callstack 0
  6639                           
  6640 ;; *************** function _clearTM0 *****************
  6641 ;; Defined at:
  6642 ;;		line 35 in file "motors.c"
  6643 ;; Parameters:    Size  Location     Type
  6644 ;;		None
  6645 ;; Auto vars:     Size  Location     Type
  6646 ;;		None
  6647 ;; Return value:  Size  Location     Type
  6648 ;;                  1    wreg      void 
  6649 ;; Registers used:
  6650 ;;		wreg, status,2
  6651 ;; Tracked objects:
  6652 ;;		On entry : 0/0
  6653 ;;		On exit  : 0/0
  6654 ;;		Unchanged: 0/0
  6655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6656 ;;      Params:         0       0       0       0       0       0       0
  6657 ;;      Locals:         0       0       0       0       0       0       0
  6658 ;;      Temps:          0       0       0       0       0       0       0
  6659 ;;      Totals:         0       0       0       0       0       0       0
  6660 ;;Total ram usage:        0 bytes
  6661 ;; Hardware stack levels used:    1
  6662 ;; Hardware stack levels required when called:    4
  6663 ;; This function calls:
  6664 ;;		Nothing
  6665 ;; This function is called by:
  6666 ;;		_main
  6667 ;; This function uses a non-reentrant model
  6668 ;;
  6669                           
  6670                           	psect	text39
  6671  002478                     __ptext39:
  6672                           	callstack 0
  6673  002478                     _clearTM0:
  6674                           	callstack 0
  6675  002478  FFFF               	dw	65535	; assembler added errata NOP
  6676  00247A                     
  6677                           ;motors.c: 36:     tm0Error = 0;
  6678  00247A  0E00               	movlw	0
  6679  00247C  6E5A               	movwf	(_tm0Error+1)^0,c
  6680  00247E  0E00               	movlw	0
  6681  002480  6E59               	movwf	_tm0Error^0,c
  6682  002482  0012               	return		;funcret
  6683  002484  FFFF               	dw	65535	; errata NOP
  6684  002486                     __end_of_clearTM0:
  6685                           	callstack 0
  6686                           
  6687 ;; *************** function _isr *****************
  6688 ;; Defined at:
  6689 ;;		line 38 in file "interrupt.c"
  6690 ;; Parameters:    Size  Location     Type
  6691 ;;		None
  6692 ;; Auto vars:     Size  Location     Type
  6693 ;;  temp            1   16[COMRAM] unsigned char 
  6694 ;; Return value:  Size  Location     Type
  6695 ;;                  1    wreg      void 
  6696 ;; Registers used:
  6697 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6698 ;; Tracked objects:
  6699 ;;		On entry : 0/0
  6700 ;;		On exit  : 0/0
  6701 ;;		Unchanged: 0/0
  6702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6703 ;;      Params:         0       0       0       0       0       0       0
  6704 ;;      Locals:         1       0       0       0       0       0       0
  6705 ;;      Temps:          6       0       0       0       0       0       0
  6706 ;;      Totals:         7       0       0       0       0       0       0
  6707 ;;Total ram usage:        7 bytes
  6708 ;; Hardware stack levels used:    1
  6709 ;; Hardware stack levels required when called:    3
  6710 ;; This function calls:
  6711 ;;		_abortAll
  6712 ;;		_fatalError
  6713 ;;		_increaseStep
  6714 ;;		_retPeriod
  6715 ;;		_setThermRel
  6716 ;;		_setTouchRel
  6717 ;;		_toggleStep
  6718 ;;		_whatsTM0Limit
  6719 ;;		_writeTM0
  6720 ;;		i2_storeData
  6721 ;; This function is called by:
  6722 ;;		Interrupt level 2
  6723 ;; This function uses a non-reentrant model
  6724 ;;
  6725                           
  6726                           	psect	intcode
  6727  000008                     __pintcode:
  6728                           	callstack 0
  6729  000008                     _isr:
  6730                           	callstack 0
  6731  000008  FFFF               	dw	65535	; assembler added errata NOP
  6732                           
  6733                           ;incstack = 0
  6734  00000A  826E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6735  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  6736  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  6737  000014  CFF3 F00F          	movff	prodl,??_isr+4
  6738  000018  CFF4 F010          	movff	prodh,??_isr+5
  6739  00001C                     
  6740                           ;interrupt.c: 39:     static unsigned int single_cycle = 0;;interrupt.c: 40:     static 
      +                          unsigned char tm0Count = 0;;interrupt.c: 41:     static unsigned char completeStep = 0;;
      +                          interrupt.c: 44:     if(INTCONbits.T0IF){
  6741  00001C  A4F2               	btfss	242,2,c	;volatile
  6742  00001E  EF13  F000         	goto	i2u260_41
  6743  000022  EF16  F000         	goto	i2u260_40
  6744  000026                     i2u260_41:
  6745  000026  FFFF               	dw	65535	; assembler added errata NOP
  6746  000028  EF2C  F000         	goto	i2l3441
  6747  00002C                     i2u260_40:
  6748  00002C  FFFF               	dw	65535	; assembler added errata NOP
  6749  00002E                     
  6750                           ;interrupt.c: 45:         INTCONbits.T0IF = 0;
  6751  00002E  94F2               	bcf	242,2,c	;volatile
  6752  000030                     
  6753                           ;interrupt.c: 48:         tm0Count++;
  6754  000030  2A63               	incf	isr@tm0Count^0,f,c
  6755  000032                     
  6756                           ;interrupt.c: 50:         if(tm0Count >= whatsTM0Limit()){
  6757  000032  EC9B  F012         	call	_whatsTM0Limit	;wreg free
  6758  000036  6E0B               	movwf	??_isr^0,c
  6759  000038  500B               	movf	??_isr^0,w,c
  6760  00003A  5C63               	subwf	isr@tm0Count^0,w,c
  6761  00003C  A0D8               	btfss	status,0,c
  6762  00003E  EF23  F000         	goto	i2u261_41
  6763  000042  EF26  F000         	goto	i2u261_40
  6764  000046                     i2u261_41:
  6765  000046  FFFF               	dw	65535	; assembler added errata NOP
  6766  000048  EF2C  F000         	goto	i2l3441
  6767  00004C                     i2u261_40:
  6768  00004C  FFFF               	dw	65535	; assembler added errata NOP
  6769  00004E                     
  6770                           ;interrupt.c: 51:             T0CONbits.TMR0ON = 0;
  6771  00004E  9ED5               	bcf	213,7,c	;volatile
  6772  000050                     
  6773                           ;interrupt.c: 52:             tm0Count = 0;
  6774  000050  0E00               	movlw	0
  6775  000052  6E63               	movwf	isr@tm0Count^0,c
  6776  000054                     
  6777                           ;interrupt.c: 53:             writeTM0();
  6778  000054  EC43  F012         	call	_writeTM0	;wreg free
  6779  000058                     i2l3441:
  6780  000058  FFFF               	dw	65535	; assembler added errata NOP
  6781                           
  6782                           ;interrupt.c: 58:     if(PIR1bits.TMR1IF){
  6783  00005A  A09E               	btfss	158,0,c	;volatile
  6784  00005C  EF32  F000         	goto	i2u262_41
  6785  000060  EF35  F000         	goto	i2u262_40
  6786  000064                     i2u262_41:
  6787  000064  FFFF               	dw	65535	; assembler added errata NOP
  6788  000066  EF45  F000         	goto	i2l3449
  6789  00006A                     i2u262_40:
  6790  00006A  FFFF               	dw	65535	; assembler added errata NOP
  6791  00006C                     
  6792                           ;interrupt.c: 59:         PIR1bits.TMR1IF = 0;
  6793  00006C  909E               	bcf	158,0,c	;volatile
  6794  00006E                     
  6795                           ;interrupt.c: 60:         if(fatalError()){
  6796  00006E  ECA3  F012         	call	_fatalError	;wreg free
  6797  000072  0900               	iorlw	0
  6798  000074  B4D8               	btfsc	status,2,c
  6799  000076  EF3F  F000         	goto	i2u263_41
  6800  00007A  EF42  F000         	goto	i2u263_40
  6801  00007E                     i2u263_41:
  6802  00007E  FFFF               	dw	65535	; assembler added errata NOP
  6803  000080  EF45  F000         	goto	i2l3449
  6804  000084                     i2u263_40:
  6805  000084  FFFF               	dw	65535	; assembler added errata NOP
  6806  000086                     
  6807                           ;interrupt.c: 61:             abortAll();
  6808  000086  EC1E  F012         	call	_abortAll	;wreg free
  6809  00008A                     i2l3449:
  6810  00008A  FFFF               	dw	65535	; assembler added errata NOP
  6811                           
  6812                           ;interrupt.c: 66:     if(PIR1bits.TMR2IF){
  6813  00008C  A29E               	btfss	158,1,c	;volatile
  6814  00008E  EF4B  F000         	goto	i2u264_41
  6815  000092  EF4E  F000         	goto	i2u264_40
  6816  000096                     i2u264_41:
  6817  000096  FFFF               	dw	65535	; assembler added errata NOP
  6818  000098  EF80  F000         	goto	i2l3471
  6819  00009C                     i2u264_40:
  6820  00009C  FFFF               	dw	65535	; assembler added errata NOP
  6821  00009E                     
  6822                           ;interrupt.c: 67:         PIR1bits.TMR2IF = 0;
  6823  00009E  929E               	bcf	158,1,c	;volatile
  6824  0000A0                     
  6825                           ;interrupt.c: 68:         single_cycle++;
  6826  0000A0  4A51               	infsnz	isr@single_cycle^0,f,c
  6827  0000A2  2A52               	incf	(isr@single_cycle+1)^0,f,c
  6828  0000A4                     
  6829                           ;interrupt.c: 71:         if(single_cycle > retPeriod()){
  6830  0000A4  EC4A  F012         	call	_retPeriod	;wreg free
  6831  0000A8  5051               	movf	isr@single_cycle^0,w,c
  6832  0000AA  5C01               	subwf	?_retPeriod^0,w,c
  6833  0000AC  5052               	movf	(isr@single_cycle+1)^0,w,c
  6834  0000AE  5802               	subwfb	(?_retPeriod+1)^0,w,c
  6835  0000B0  B0D8               	btfsc	status,0,c
  6836  0000B2  EF5D  F000         	goto	i2u265_41
  6837  0000B6  EF60  F000         	goto	i2u265_40
  6838  0000BA                     i2u265_41:
  6839  0000BA  FFFF               	dw	65535	; assembler added errata NOP
  6840  0000BC  EF80  F000         	goto	i2l3471
  6841  0000C0                     i2u265_40:
  6842  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  6843  0000C2                     
  6844                           ;interrupt.c: 72:             single_cycle = 0;
  6845  0000C2  0E00               	movlw	0
  6846  0000C4  6E52               	movwf	(isr@single_cycle+1)^0,c
  6847  0000C6  0E00               	movlw	0
  6848  0000C8  6E51               	movwf	isr@single_cycle^0,c
  6849  0000CA                     
  6850                           ;interrupt.c: 73:             completeStep++;
  6851  0000CA  2A62               	incf	isr@completeStep^0,f,c
  6852  0000CC                     
  6853                           ;interrupt.c: 76:             if(completeStep != 0 && !(completeStep % 2)){
  6854  0000CC  5062               	movf	isr@completeStep^0,w,c
  6855  0000CE  B4D8               	btfsc	status,2,c
  6856  0000D0  EF6C  F000         	goto	i2u266_41
  6857  0000D4  EF6F  F000         	goto	i2u266_40
  6858  0000D8                     i2u266_41:
  6859  0000D8  FFFF               	dw	65535	; assembler added errata NOP
  6860  0000DA  EF7D  F000         	goto	i2l3469
  6861  0000DE                     i2u266_40:
  6862  0000DE  FFFF               	dw	65535	; assembler added errata NOP
  6863  0000E0  B062               	btfsc	isr@completeStep^0,0,c
  6864  0000E2  EF75  F000         	goto	i2u267_41
  6865  0000E6  EF78  F000         	goto	i2u267_40
  6866  0000EA                     i2u267_41:
  6867  0000EA  FFFF               	dw	65535	; assembler added errata NOP
  6868  0000EC  EF7D  F000         	goto	i2l3469
  6869  0000F0                     i2u267_40:
  6870  0000F0  FFFF               	dw	65535	; assembler added errata NOP
  6871  0000F2                     
  6872                           ;interrupt.c: 78:                 completeStep = 0;
  6873  0000F2  0E00               	movlw	0
  6874  0000F4  6E62               	movwf	isr@completeStep^0,c
  6875  0000F6                     
  6876                           ;interrupt.c: 81:                 increaseStep();
  6877  0000F6  EC9F  F012         	call	_increaseStep	;wreg free
  6878  0000FA                     i2l3469:
  6879  0000FA  FFFF               	dw	65535	; assembler added errata NOP
  6880                           
  6881                           ;interrupt.c: 86:             toggleStep();
  6882  0000FC  EC7C  F012         	call	_toggleStep	;wreg free
  6883  000100                     i2l3471:
  6884  000100  FFFF               	dw	65535	; assembler added errata NOP
  6885                           
  6886                           ;interrupt.c: 91:     if(PIR1bits.ADIF){
  6887  000102  AC9E               	btfss	158,6,c	;volatile
  6888  000104  EF86  F000         	goto	i2u268_41
  6889  000108  EF89  F000         	goto	i2u268_40
  6890  00010C                     i2u268_41:
  6891  00010C  FFFF               	dw	65535	; assembler added errata NOP
  6892  00010E  EFB6  F000         	goto	i2l3483
  6893  000112                     i2u268_40:
  6894  000112  FFFF               	dw	65535	; assembler added errata NOP
  6895  000114                     
  6896                           ;interrupt.c: 92:         PIR1bits.ADIF = 0;
  6897  000114  9C9E               	bcf	158,6,c	;volatile
  6898                           
  6899                           ;interrupt.c: 95:         ADC_res = ADRESL;
  6900  000116  CFC3 F053          	movff	4035,_ADC_res	;volatile
  6901  00011A  6A54               	clrf	(_ADC_res+1)^0,c
  6902  00011C                     
  6903                           ;interrupt.c: 96:         ADC_res |= (ADRESH << 8);
  6904  00011C  50C4               	movf	196,w,c	;volatile
  6905  00011E  6E0C               	movwf	(??_isr+1)^0,c
  6906  000120  6A0B               	clrf	??_isr^0,c
  6907  000122  500B               	movf	??_isr^0,w,c
  6908  000124  1253               	iorwf	_ADC_res^0,f,c
  6909  000126  500C               	movf	(??_isr+1)^0,w,c
  6910  000128  1254               	iorwf	(_ADC_res+1)^0,f,c
  6911                           
  6912                           ;interrupt.c: 99:         if(ADC_res > therm_pressure){
  6913  00012A  0453               	decf	_ADC_res^0,w,c
  6914  00012C  0E04               	movlw	4
  6915  00012E  5854               	subwfb	(_ADC_res+1)^0,w,c
  6916  000130  A0D8               	btfss	status,0,c
  6917  000132  EF9D  F000         	goto	i2u269_41
  6918  000136  EFA0  F000         	goto	i2u269_40
  6919  00013A                     i2u269_41:
  6920  00013A  FFFF               	dw	65535	; assembler added errata NOP
  6921  00013C  EFA7  F000         	goto	i2l3479
  6922  000140                     i2u269_40:
  6923  000140  FFFF               	dw	65535	; assembler added errata NOP
  6924  000142                     
  6925                           ;interrupt.c: 101:             setTouchRel();
  6926  000142  EC81  F012         	call	_setTouchRel	;wreg free
  6927                           
  6928                           ;interrupt.c: 102:             setThermRel();
  6929  000146  EC86  F012         	call	_setThermRel	;wreg free
  6930                           
  6931                           ;interrupt.c: 103:         }else if(ADC_res > touch_pressure){
  6932  00014A  EFB6  F000         	goto	i2l3483
  6933  00014E                     i2l3479:
  6934  00014E  FFFF               	dw	65535	; assembler added errata NOP
  6935  000150  0453               	decf	_ADC_res^0,w,c
  6936  000152  0E02               	movlw	2
  6937  000154  5854               	subwfb	(_ADC_res+1)^0,w,c
  6938  000156  A0D8               	btfss	status,0,c
  6939  000158  EFB0  F000         	goto	i2u270_41
  6940  00015C  EFB3  F000         	goto	i2u270_40
  6941  000160                     i2u270_41:
  6942  000160  FFFF               	dw	65535	; assembler added errata NOP
  6943  000162  EFB6  F000         	goto	i2l3483
  6944  000166                     i2u270_40:
  6945  000166  FFFF               	dw	65535	; assembler added errata NOP
  6946  000168                     
  6947                           ;interrupt.c: 105:             setTouchRel();
  6948  000168  EC81  F012         	call	_setTouchRel	;wreg free
  6949  00016C                     i2l3483:
  6950  00016C  FFFF               	dw	65535	; assembler added errata NOP
  6951                           
  6952                           ;interrupt.c: 110:     if(PIR1bits.RC1IF){
  6953  00016E  AA9E               	btfss	158,5,c	;volatile
  6954  000170  EFBC  F000         	goto	i2u271_41
  6955  000174  EFBF  F000         	goto	i2u271_40
  6956  000178                     i2u271_41:
  6957  000178  FFFF               	dw	65535	; assembler added errata NOP
  6958  00017A  EFC6  F000         	goto	i2l474
  6959  00017E                     i2u271_40:
  6960  00017E  FFFF               	dw	65535	; assembler added errata NOP
  6961  000180                     
  6962                           ;interrupt.c: 111:         PIR1bits.RC1IF = 0;
  6963  000180  9A9E               	bcf	158,5,c	;volatile
  6964                           
  6965                           ;interrupt.c: 114:         unsigned char temp = RCREG1;
  6966  000182  CFAE F011          	movff	4014,isr@temp	;volatile
  6967  000186                     
  6968                           ;interrupt.c: 116:         storeData(temp);
  6969  000186  5011               	movf	isr@temp^0,w,c
  6970  000188  ECDB  F00B         	call	i2_storeData
  6971  00018C                     i2l474:
  6972  00018C  FFFF               	dw	65535	; assembler added errata NOP
  6973  00018E  C010  FFF4         	movff	??_isr+5,prodh
  6974  000192  C00F  FFF3         	movff	??_isr+4,prodl
  6975  000196  C00E  FFDA         	movff	??_isr+3,fsr2h
  6976  00019A  C00D  FFD9         	movff	??_isr+2,fsr2l
  6977  00019E  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6978  0001A0  0011               	retfie		f
  6979  0001A2  FFFF               	dw	65535	; errata NOP
  6980  0001A4                     __end_of_isr:
  6981                           	callstack 0
  6982                           
  6983 ;; *************** function i2_storeData *****************
  6984 ;; Defined at:
  6985 ;;		line 164 in file "usart.c"
  6986 ;; Parameters:    Size  Location     Type
  6987 ;;  data            1    wreg     unsigned char 
  6988 ;; Auto vars:     Size  Location     Type
  6989 ;;  data            1    9[COMRAM] unsigned char 
  6990 ;; Return value:  Size  Location     Type
  6991 ;;                  1    wreg      void 
  6992 ;; Registers used:
  6993 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6994 ;; Tracked objects:
  6995 ;;		On entry : 0/0
  6996 ;;		On exit  : 0/0
  6997 ;;		Unchanged: 0/0
  6998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6999 ;;      Params:         0       0       0       0       0       0       0
  7000 ;;      Locals:         1       0       0       0       0       0       0
  7001 ;;      Temps:          2       0       0       0       0       0       0
  7002 ;;      Totals:         3       0       0       0       0       0       0
  7003 ;;Total ram usage:        3 bytes
  7004 ;; Hardware stack levels used:    1
  7005 ;; Hardware stack levels required when called:    2
  7006 ;; This function calls:
  7007 ;;		i2_printError
  7008 ;; This function is called by:
  7009 ;;		_isr
  7010 ;; This function uses a non-reentrant model
  7011 ;;
  7012                           
  7013                           	psect	text41
  7014  0017B6                     __ptext41:
  7015                           	callstack 0
  7016  0017B6                     i2_storeData:
  7017                           	callstack 0
  7018  0017B6  FFFF               	dw	65535	; assembler added errata NOP
  7019                           
  7020                           ;incstack = 0
  7021                           ;i2storeData@data stored from wreg
  7022  0017B8  6E0A               	movwf	i2storeData@data^0,c
  7023  0017BA                     
  7024                           ;usart.c: 166:     static unsigned char counter = 0;;usart.c: 167:     static unsigned c
      +                          har mexLength = 5;;usart.c: 168:     static unsigned char command;;usart.c: 169:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 173:     receivedMex[counter] = data;
  7025  0017BA  0E43               	movlw	low storeData@receivedMex
  7026  0017BC  245E               	addwf	storeData@counter^0,w,c
  7027  0017BE  6ED9               	movwf	fsr2l,c
  7028  0017C0  6ADA               	clrf	fsr2h,c
  7029  0017C2  0E00               	movlw	high storeData@receivedMex
  7030  0017C4  22DA               	addwfc	fsr2h,f,c
  7031  0017C6  C00A  FFDF         	movff	i2storeData@data,indf2
  7032  0017CA                     
  7033                           ;usart.c: 175:     counter++;
  7034  0017CA  2A5E               	incf	storeData@counter^0,f,c
  7035                           
  7036                           ;usart.c: 178:     switch(receivedMex[0]){
  7037  0017CC  EFF7  F00B         	goto	i2l3331
  7038  0017D0                     i2l3323:
  7039  0017D0  FFFF               	dw	65535	; assembler added errata NOP
  7040                           
  7041                           ;usart.c: 180:             mexLength = 5;
  7042  0017D2  0E05               	movlw	5
  7043  0017D4  6E6D               	movwf	storeData@mexLength^0,c
  7044                           
  7045                           ;usart.c: 181:             break;
  7046  0017D6  EF12  F00C         	goto	i2l3333
  7047  0017DA                     i2l3325:
  7048  0017DA  FFFF               	dw	65535	; assembler added errata NOP
  7049                           
  7050                           ;usart.c: 183:             mexLength = 9;
  7051  0017DC  0E09               	movlw	9
  7052  0017DE  6E6D               	movwf	storeData@mexLength^0,c
  7053                           
  7054                           ;usart.c: 184:             break;
  7055  0017E0  EF12  F00C         	goto	i2l3333
  7056  0017E4                     i2l3327:
  7057  0017E4  FFFF               	dw	65535	; assembler added errata NOP
  7058                           
  7059                           ;usart.c: 186:             mexLength = 1;
  7060  0017E6  0E01               	movlw	1
  7061  0017E8  6E6D               	movwf	storeData@mexLength^0,c
  7062                           
  7063                           ;usart.c: 187:             break;
  7064  0017EA  EF12  F00C         	goto	i2l3333
  7065  0017EE                     i2l3331:
  7066  0017EE  FFFF               	dw	65535	; assembler added errata NOP
  7067  0017F0  5043               	movf	storeData@receivedMex^0,w,c
  7068  0017F2  6E08               	movwf	??i2_storeData^0,c
  7069  0017F4  6A09               	clrf	(??i2_storeData+1)^0,c
  7070                           
  7071                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7072                           ; Switch size 1, requested type "simple"
  7073                           ; Number of cases is 1, Range of values is 0 to 0
  7074                           ; switch strategies available:
  7075                           ; Name         Instructions Cycles
  7076                           ; simple_byte            4     3 (average)
  7077                           ;	Chosen strategy is simple_byte
  7078  0017F6  5009               	movf	(??i2_storeData+1)^0,w,c
  7079  0017F8  0A00               	xorlw	0	; case 0
  7080  0017FA  B4D8               	btfsc	status,2,c
  7081  0017FC  EF02  F00C         	goto	i2l4557
  7082  001800  EF12  F00C         	goto	i2l3333
  7083  001804                     i2l4557:
  7084  001804  FFFF               	dw	65535	; assembler added errata NOP
  7085                           
  7086                           ; Switch size 1, requested type "simple"
  7087                           ; Number of cases is 3, Range of values is 0 to 2
  7088                           ; switch strategies available:
  7089                           ; Name         Instructions Cycles
  7090                           ; simple_byte           10     6 (average)
  7091                           ;	Chosen strategy is simple_byte
  7092  001806  5008               	movf	??i2_storeData^0,w,c
  7093  001808  0A00               	xorlw	0	; case 0
  7094  00180A  B4D8               	btfsc	status,2,c
  7095  00180C  EFE8  F00B         	goto	i2l3323
  7096  001810  0A01               	xorlw	1	; case 1
  7097  001812  B4D8               	btfsc	status,2,c
  7098  001814  EFED  F00B         	goto	i2l3325
  7099  001818  0A03               	xorlw	3	; case 2
  7100  00181A  B4D8               	btfsc	status,2,c
  7101  00181C  EFF2  F00B         	goto	i2l3327
  7102  001820  EF12  F00C         	goto	i2l3333
  7103  001824                     i2l3333:
  7104  001824  FFFF               	dw	65535	; assembler added errata NOP
  7105                           
  7106                           ;usart.c: 194:     if(counter >= mexLength){
  7107  001826  506D               	movf	storeData@mexLength^0,w,c
  7108  001828  5C5E               	subwf	storeData@counter^0,w,c
  7109  00182A  A0D8               	btfss	status,0,c
  7110  00182C  EF1A  F00C         	goto	i2u253_41
  7111  001830  EF1D  F00C         	goto	i2u253_40
  7112  001834                     i2u253_41:
  7113  001834  FFFF               	dw	65535	; assembler added errata NOP
  7114  001836  EF95  F00C         	goto	i2l588
  7115  00183A                     i2u253_40:
  7116  00183A  FFFF               	dw	65535	; assembler added errata NOP
  7117  00183C                     
  7118                           ;usart.c: 195:         counter = 0;
  7119  00183C  0E00               	movlw	0
  7120  00183E  6E5E               	movwf	storeData@counter^0,c
  7121                           
  7122                           ;usart.c: 198:         switch(receivedMex[0]){
  7123  001840  EF7A  F00C         	goto	i2l3355
  7124  001844                     i2l3337:
  7125  001844  FFFF               	dw	65535	; assembler added errata NOP
  7126                           
  7127                           ;usart.c: 200:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  7128  001846  5061               	movf	_dataCounter^0,w,c
  7129  001848  0D04               	mullw	4
  7130  00184A  0ECA               	movlw	low _dataSequence
  7131  00184C  24F3               	addwf	243,w,c
  7132  00184E  6ED9               	movwf	fsr2l,c
  7133  001850  0E00               	movlw	high _dataSequence
  7134  001852  20F4               	addwfc	prodh,w,c
  7135  001854  6EDA               	movwf	fsr2h,c
  7136  001856  C044  FFDF         	movff	storeData@receivedMex+1,indf2
  7137                           
  7138                           ;usart.c: 201:                 dataSequence[dataCounter].posX = receivedMex[2] * 10;
  7139  00185A  5061               	movf	_dataCounter^0,w,c
  7140  00185C  0D04               	mullw	4
  7141  00185E  0ECB               	movlw	low (_dataSequence+1)
  7142  001860  24F3               	addwf	243,w,c
  7143  001862  6ED9               	movwf	fsr2l,c
  7144  001864  0E00               	movlw	high (_dataSequence+1)
  7145  001866  20F4               	addwfc	prodh,w,c
  7146  001868  6EDA               	movwf	fsr2h,c
  7147  00186A  5045               	movf	(storeData@receivedMex+2)^0,w,c
  7148  00186C  0D0A               	mullw	10
  7149  00186E  CFF3 FFDF          	movff	prodl,indf2
  7150                           
  7151                           ;usart.c: 202:                 dataSequence[dataCounter].posY = receivedMex[3] * 10;
  7152  001872  5061               	movf	_dataCounter^0,w,c
  7153  001874  0D04               	mullw	4
  7154  001876  0ECC               	movlw	low (_dataSequence+2)
  7155  001878  24F3               	addwf	243,w,c
  7156  00187A  6ED9               	movwf	fsr2l,c
  7157  00187C  0E00               	movlw	high (_dataSequence+2)
  7158  00187E  20F4               	addwfc	prodh,w,c
  7159  001880  6EDA               	movwf	fsr2h,c
  7160  001882  5046               	movf	(storeData@receivedMex+3)^0,w,c
  7161  001884  0D0A               	mullw	10
  7162  001886  CFF3 FFDF          	movff	prodl,indf2
  7163                           
  7164                           ;usart.c: 203:                 dataSequence[dataCounter].rotation = receivedMex[4];
  7165  00188A  5061               	movf	_dataCounter^0,w,c
  7166  00188C  0D04               	mullw	4
  7167  00188E  0ECD               	movlw	low (_dataSequence+3)
  7168  001890  24F3               	addwf	243,w,c
  7169  001892  6ED9               	movwf	fsr2l,c
  7170  001894  0E00               	movlw	high (_dataSequence+3)
  7171  001896  20F4               	addwfc	prodh,w,c
  7172  001898  6EDA               	movwf	fsr2h,c
  7173  00189A  C047  FFDF         	movff	storeData@receivedMex+4,indf2
  7174  00189E                     
  7175                           ;usart.c: 205:                 dataCounter++;
  7176  00189E  2A61               	incf	_dataCounter^0,f,c
  7177                           
  7178                           ;usart.c: 206:                 break;
  7179  0018A0  EF95  F00C         	goto	i2l588
  7180  0018A4                     i2l585:
  7181  0018A4  FFFF               	dw	65535	; assembler added errata NOP
  7182                           
  7183                           ;usart.c: 209:                 newSequenceData.L = receivedMex[1];
  7184  0018A6  C044  F0DE         	movff	storeData@receivedMex+1,_newSequenceData
  7185                           
  7186                           ;usart.c: 210:                 newSequenceData.W = receivedMex[2];
  7187  0018AA  C045  F0DF         	movff	storeData@receivedMex+2,_newSequenceData+1
  7188  0018AE                     
  7189                           ;usart.c: 211:                 newSequenceData.init_posX = receivedMex[3] * 10;
  7190  0018AE  5046               	movf	(storeData@receivedMex+3)^0,w,c
  7191  0018B0  0D0A               	mullw	10
  7192  0018B2  CFF3 F0E0          	movff	prodl,_newSequenceData+2
  7193                           
  7194                           ;usart.c: 212:                 newSequenceData.init_posY = receivedMex[4] * 10;
  7195  0018B6  5047               	movf	(storeData@receivedMex+4)^0,w,c
  7196  0018B8  0D0A               	mullw	10
  7197  0018BA  CFF3 F0E1          	movff	prodl,_newSequenceData+3
  7198  0018BE                     
  7199                           ;usart.c: 213:                 newSequenceData.init_rot = receivedMex[5];
  7200  0018BE  C048  F0E2         	movff	storeData@receivedMex+5,_newSequenceData+4
  7201                           
  7202                           ;usart.c: 214:                 newSequenceData.end_posX = receivedMex[6] * 10;
  7203  0018C2  5049               	movf	(storeData@receivedMex+6)^0,w,c
  7204  0018C4  0D0A               	mullw	10
  7205  0018C6  CFF3 F0E3          	movff	prodl,_newSequenceData+5
  7206                           
  7207                           ;usart.c: 215:                 newSequenceData.end_posY = receivedMex[7] * 10;
  7208  0018CA  504A               	movf	(storeData@receivedMex+7)^0,w,c
  7209  0018CC  0D0A               	mullw	10
  7210  0018CE  CFF3 F0E4          	movff	prodl,_newSequenceData+6
  7211  0018D2                     
  7212                           ;usart.c: 216:                 newSequenceData.end_rot = receivedMex[8];
  7213  0018D2  C04B  F0E5         	movff	storeData@receivedMex+8,_newSequenceData+7
  7214  0018D6                     
  7215                           ;usart.c: 218:                 _newSequence = 1;
  7216  0018D6  0E01               	movlw	1
  7217  0018D8  6E5F               	movwf	__newSequence^0,c
  7218                           
  7219                           ;usart.c: 219:                 break;
  7220  0018DA  EF95  F00C         	goto	i2l588
  7221  0018DE                     i2l3349:
  7222  0018DE  FFFF               	dw	65535	; assembler added errata NOP
  7223                           
  7224                           ;usart.c: 222:                 _fatalError = 1;
  7225  0018E0  0E01               	movlw	1
  7226  0018E2  6E60               	movwf	__fatalError^0,c
  7227                           
  7228                           ;usart.c: 223:                 break;
  7229  0018E4  EF95  F00C         	goto	i2l588
  7230  0018E8                     i2l3351:
  7231  0018E8  FFFF               	dw	65535	; assembler added errata NOP
  7232                           
  7233                           ;usart.c: 226:                 printError(8);
  7234  0018EA  0E08               	movlw	8
  7235  0018EC  ECC1  F00D         	call	i2_printError
  7236                           
  7237                           ;usart.c: 227:                 break;
  7238  0018F0  EF95  F00C         	goto	i2l588
  7239  0018F4                     i2l3355:
  7240  0018F4  FFFF               	dw	65535	; assembler added errata NOP
  7241  0018F6  5043               	movf	storeData@receivedMex^0,w,c
  7242  0018F8  6E08               	movwf	??i2_storeData^0,c
  7243  0018FA  6A09               	clrf	(??i2_storeData+1)^0,c
  7244                           
  7245                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7246                           ; Switch size 1, requested type "simple"
  7247                           ; Number of cases is 1, Range of values is 0 to 0
  7248                           ; switch strategies available:
  7249                           ; Name         Instructions Cycles
  7250                           ; simple_byte            4     3 (average)
  7251                           ;	Chosen strategy is simple_byte
  7252  0018FC  5009               	movf	(??i2_storeData+1)^0,w,c
  7253  0018FE  0A00               	xorlw	0	; case 0
  7254  001900  B4D8               	btfsc	status,2,c
  7255  001902  EF85  F00C         	goto	i2l4559
  7256  001906  EF74  F00C         	goto	i2l3351
  7257  00190A                     i2l4559:
  7258  00190A  FFFF               	dw	65535	; assembler added errata NOP
  7259                           
  7260                           ; Switch size 1, requested type "simple"
  7261                           ; Number of cases is 3, Range of values is 0 to 2
  7262                           ; switch strategies available:
  7263                           ; Name         Instructions Cycles
  7264                           ; simple_byte           10     6 (average)
  7265                           ;	Chosen strategy is simple_byte
  7266  00190C  5008               	movf	??i2_storeData^0,w,c
  7267  00190E  0A00               	xorlw	0	; case 0
  7268  001910  B4D8               	btfsc	status,2,c
  7269  001912  EF22  F00C         	goto	i2l3337
  7270  001916  0A01               	xorlw	1	; case 1
  7271  001918  B4D8               	btfsc	status,2,c
  7272  00191A  EF52  F00C         	goto	i2l585
  7273  00191E  0A03               	xorlw	3	; case 2
  7274  001920  B4D8               	btfsc	status,2,c
  7275  001922  EF6F  F00C         	goto	i2l3349
  7276  001926  EF74  F00C         	goto	i2l3351
  7277  00192A                     i2l588:
  7278  00192A  FFFF               	dw	65535	; assembler added errata NOP
  7279  00192C  0012               	return		;funcret
  7280  00192E  FFFF               	dw	65535	; errata NOP
  7281  001930                     __end_ofi2_storeData:
  7282                           	callstack 0
  7283                           
  7284 ;; *************** function _writeTM0 *****************
  7285 ;; Defined at:
  7286 ;;		line 28 in file "motors.c"
  7287 ;; Parameters:    Size  Location     Type
  7288 ;;		None
  7289 ;; Auto vars:     Size  Location     Type
  7290 ;;		None
  7291 ;; Return value:  Size  Location     Type
  7292 ;;                  1    wreg      void 
  7293 ;; Registers used:
  7294 ;;		wreg, status,2
  7295 ;; Tracked objects:
  7296 ;;		On entry : 0/0
  7297 ;;		On exit  : 0/0
  7298 ;;		Unchanged: 0/0
  7299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7300 ;;      Params:         0       0       0       0       0       0       0
  7301 ;;      Locals:         0       0       0       0       0       0       0
  7302 ;;      Temps:          0       0       0       0       0       0       0
  7303 ;;      Totals:         0       0       0       0       0       0       0
  7304 ;;Total ram usage:        0 bytes
  7305 ;; Hardware stack levels used:    1
  7306 ;; This function calls:
  7307 ;;		Nothing
  7308 ;; This function is called by:
  7309 ;;		_isr
  7310 ;; This function uses a non-reentrant model
  7311 ;;
  7312                           
  7313                           	psect	text42
  7314  002486                     __ptext42:
  7315                           	callstack 0
  7316  002486                     _writeTM0:
  7317                           	callstack 0
  7318  002486  FFFF               	dw	65535	; assembler added errata NOP
  7319  002488                     
  7320                           ;motors.c: 29:     tm0Error = 1;
  7321  002488  0E00               	movlw	0
  7322  00248A  6E5A               	movwf	(_tm0Error+1)^0,c
  7323  00248C  0E01               	movlw	1
  7324  00248E  6E59               	movwf	_tm0Error^0,c
  7325  002490  0012               	return		;funcret
  7326  002492  FFFF               	dw	65535	; errata NOP
  7327  002494                     __end_of_writeTM0:
  7328                           	callstack 0
  7329                           
  7330 ;; *************** function _whatsTM0Limit *****************
  7331 ;; Defined at:
  7332 ;;		line 42 in file "motors.c"
  7333 ;; Parameters:    Size  Location     Type
  7334 ;;		None
  7335 ;; Auto vars:     Size  Location     Type
  7336 ;;		None
  7337 ;; Return value:  Size  Location     Type
  7338 ;;                  1    wreg      unsigned char 
  7339 ;; Registers used:
  7340 ;;		wreg, status,2
  7341 ;; Tracked objects:
  7342 ;;		On entry : 0/0
  7343 ;;		On exit  : 0/0
  7344 ;;		Unchanged: 0/0
  7345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7346 ;;      Params:         0       0       0       0       0       0       0
  7347 ;;      Locals:         0       0       0       0       0       0       0
  7348 ;;      Temps:          0       0       0       0       0       0       0
  7349 ;;      Totals:         0       0       0       0       0       0       0
  7350 ;;Total ram usage:        0 bytes
  7351 ;; Hardware stack levels used:    1
  7352 ;; This function calls:
  7353 ;;		Nothing
  7354 ;; This function is called by:
  7355 ;;		_isr
  7356 ;; This function uses a non-reentrant model
  7357 ;;
  7358                           
  7359                           	psect	text43
  7360  002536                     __ptext43:
  7361                           	callstack 0
  7362  002536                     _whatsTM0Limit:
  7363                           	callstack 0
  7364  002536  FFFF               	dw	65535	; assembler added errata NOP
  7365  002538                     
  7366                           ;motors.c: 43:     return(tm0Limit);
  7367  002538  5066               	movf	_tm0Limit^0,w,c
  7368  00253A  0012               	return		;funcret
  7369  00253C  FFFF               	dw	65535	; errata NOP
  7370  00253E                     __end_of_whatsTM0Limit:
  7371                           	callstack 0
  7372                           
  7373 ;; *************** function _toggleStep *****************
  7374 ;; Defined at:
  7375 ;;		line 93 in file "timer.c"
  7376 ;; Parameters:    Size  Location     Type
  7377 ;;		None
  7378 ;; Auto vars:     Size  Location     Type
  7379 ;;		None
  7380 ;; Return value:  Size  Location     Type
  7381 ;;                  1    wreg      void 
  7382 ;; Registers used:
  7383 ;;		wreg, status,2
  7384 ;; Tracked objects:
  7385 ;;		On entry : 0/0
  7386 ;;		On exit  : 0/0
  7387 ;;		Unchanged: 0/0
  7388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7389 ;;      Params:         0       0       0       0       0       0       0
  7390 ;;      Locals:         0       0       0       0       0       0       0
  7391 ;;      Temps:          0       0       0       0       0       0       0
  7392 ;;      Totals:         0       0       0       0       0       0       0
  7393 ;;Total ram usage:        0 bytes
  7394 ;; Hardware stack levels used:    1
  7395 ;; This function calls:
  7396 ;;		Nothing
  7397 ;; This function is called by:
  7398 ;;		_isr
  7399 ;; This function uses a non-reentrant model
  7400 ;;
  7401                           
  7402                           	psect	text44
  7403  0024F8                     __ptext44:
  7404                           	callstack 0
  7405  0024F8                     _toggleStep:
  7406                           	callstack 0
  7407  0024F8  FFFF               	dw	65535	; assembler added errata NOP
  7408  0024FA                     
  7409                           ;timer.c: 94:     stepToggle = 1;
  7410  0024FA  0E01               	movlw	1
  7411  0024FC  6E5B               	movwf	_stepToggle^0,c	;volatile
  7412  0024FE  0012               	return		;funcret
  7413  002500  FFFF               	dw	65535	; errata NOP
  7414  002502                     __end_of_toggleStep:
  7415                           	callstack 0
  7416                           
  7417 ;; *************** function _setTouchRel *****************
  7418 ;; Defined at:
  7419 ;;		line 86 in file "adc.c"
  7420 ;; Parameters:    Size  Location     Type
  7421 ;;		None
  7422 ;; Auto vars:     Size  Location     Type
  7423 ;;		None
  7424 ;; Return value:  Size  Location     Type
  7425 ;;                  1    wreg      void 
  7426 ;; Registers used:
  7427 ;;		wreg, status,2
  7428 ;; Tracked objects:
  7429 ;;		On entry : 0/0
  7430 ;;		On exit  : 0/0
  7431 ;;		Unchanged: 0/0
  7432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7433 ;;      Params:         0       0       0       0       0       0       0
  7434 ;;      Locals:         0       0       0       0       0       0       0
  7435 ;;      Temps:          0       0       0       0       0       0       0
  7436 ;;      Totals:         0       0       0       0       0       0       0
  7437 ;;Total ram usage:        0 bytes
  7438 ;; Hardware stack levels used:    1
  7439 ;; This function calls:
  7440 ;;		Nothing
  7441 ;; This function is called by:
  7442 ;;		_isr
  7443 ;; This function uses a non-reentrant model
  7444 ;;
  7445                           
  7446                           	psect	text45
  7447  002502                     __ptext45:
  7448                           	callstack 0
  7449  002502                     _setTouchRel:
  7450                           	callstack 0
  7451  002502  FFFF               	dw	65535	; assembler added errata NOP
  7452  002504                     
  7453                           ;adc.c: 87:     touch_rel = 1;
  7454  002504  0E01               	movlw	1
  7455  002506  6E65               	movwf	_touch_rel^0,c	;volatile
  7456  002508  0012               	return		;funcret
  7457  00250A  FFFF               	dw	65535	; errata NOP
  7458  00250C                     __end_of_setTouchRel:
  7459                           	callstack 0
  7460                           
  7461 ;; *************** function _setThermRel *****************
  7462 ;; Defined at:
  7463 ;;		line 79 in file "adc.c"
  7464 ;; Parameters:    Size  Location     Type
  7465 ;;		None
  7466 ;; Auto vars:     Size  Location     Type
  7467 ;;		None
  7468 ;; Return value:  Size  Location     Type
  7469 ;;                  1    wreg      void 
  7470 ;; Registers used:
  7471 ;;		wreg, status,2
  7472 ;; Tracked objects:
  7473 ;;		On entry : 0/0
  7474 ;;		On exit  : 0/0
  7475 ;;		Unchanged: 0/0
  7476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7477 ;;      Params:         0       0       0       0       0       0       0
  7478 ;;      Locals:         0       0       0       0       0       0       0
  7479 ;;      Temps:          0       0       0       0       0       0       0
  7480 ;;      Totals:         0       0       0       0       0       0       0
  7481 ;;Total ram usage:        0 bytes
  7482 ;; Hardware stack levels used:    1
  7483 ;; This function calls:
  7484 ;;		Nothing
  7485 ;; This function is called by:
  7486 ;;		_isr
  7487 ;; This function uses a non-reentrant model
  7488 ;;
  7489                           
  7490                           	psect	text46
  7491  00250C                     __ptext46:
  7492                           	callstack 0
  7493  00250C                     _setThermRel:
  7494                           	callstack 0
  7495  00250C  FFFF               	dw	65535	; assembler added errata NOP
  7496  00250E                     
  7497                           ;adc.c: 80:     therm_rel = 1;
  7498  00250E  0E01               	movlw	1
  7499  002510  6E64               	movwf	_therm_rel^0,c	;volatile
  7500  002512  0012               	return		;funcret
  7501  002514  FFFF               	dw	65535	; errata NOP
  7502  002516                     __end_of_setThermRel:
  7503                           	callstack 0
  7504                           
  7505 ;; *************** function _retPeriod *****************
  7506 ;; Defined at:
  7507 ;;		line 101 in file "timer.c"
  7508 ;; Parameters:    Size  Location     Type
  7509 ;;		None
  7510 ;; Auto vars:     Size  Location     Type
  7511 ;;		None
  7512 ;; Return value:  Size  Location     Type
  7513 ;;                  2    0[COMRAM] unsigned int 
  7514 ;; Registers used:
  7515 ;;		None
  7516 ;; Tracked objects:
  7517 ;;		On entry : 0/0
  7518 ;;		On exit  : 0/0
  7519 ;;		Unchanged: 0/0
  7520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7521 ;;      Params:         2       0       0       0       0       0       0
  7522 ;;      Locals:         0       0       0       0       0       0       0
  7523 ;;      Temps:          0       0       0       0       0       0       0
  7524 ;;      Totals:         2       0       0       0       0       0       0
  7525 ;;Total ram usage:        2 bytes
  7526 ;; Hardware stack levels used:    1
  7527 ;; This function calls:
  7528 ;;		Nothing
  7529 ;; This function is called by:
  7530 ;;		_isr
  7531 ;; This function uses a non-reentrant model
  7532 ;;
  7533                           
  7534                           	psect	text47
  7535  002494                     __ptext47:
  7536                           	callstack 0
  7537  002494                     _retPeriod:
  7538                           	callstack 0
  7539  002494  FFFF               	dw	65535	; assembler added errata NOP
  7540  002496                     
  7541                           ;timer.c: 102:     return pwmPeriod;
  7542  002496  C04F  F001         	movff	_pwmPeriod,?_retPeriod
  7543  00249A  C050  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  7544  00249E  0012               	return		;funcret
  7545  0024A0  FFFF               	dw	65535	; errata NOP
  7546  0024A2                     __end_of_retPeriod:
  7547                           	callstack 0
  7548                           
  7549 ;; *************** function _increaseStep *****************
  7550 ;; Defined at:
  7551 ;;		line 85 in file "timer.c"
  7552 ;; Parameters:    Size  Location     Type
  7553 ;;		None
  7554 ;; Auto vars:     Size  Location     Type
  7555 ;;		None
  7556 ;; Return value:  Size  Location     Type
  7557 ;;                  1    wreg      void 
  7558 ;; Registers used:
  7559 ;;		status,2, status,0
  7560 ;; Tracked objects:
  7561 ;;		On entry : 0/0
  7562 ;;		On exit  : 0/0
  7563 ;;		Unchanged: 0/0
  7564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7565 ;;      Params:         0       0       0       0       0       0       0
  7566 ;;      Locals:         0       0       0       0       0       0       0
  7567 ;;      Temps:          0       0       0       0       0       0       0
  7568 ;;      Totals:         0       0       0       0       0       0       0
  7569 ;;Total ram usage:        0 bytes
  7570 ;; Hardware stack levels used:    1
  7571 ;; This function calls:
  7572 ;;		Nothing
  7573 ;; This function is called by:
  7574 ;;		_isr
  7575 ;; This function uses a non-reentrant model
  7576 ;;
  7577                           
  7578                           	psect	text48
  7579  00253E                     __ptext48:
  7580                           	callstack 0
  7581  00253E                     _increaseStep:
  7582                           	callstack 0
  7583  00253E  FFFF               	dw	65535	; assembler added errata NOP
  7584  002540                     
  7585                           ;timer.c: 86:     pwmStep++;
  7586  002540  2A5C               	incf	_pwmStep^0,f,c	;volatile
  7587  002542  0012               	return		;funcret
  7588  002544  FFFF               	dw	65535	; errata NOP
  7589  002546                     __end_of_increaseStep:
  7590                           	callstack 0
  7591                           
  7592 ;; *************** function _fatalError *****************
  7593 ;; Defined at:
  7594 ;;		line 61 in file "usart.c"
  7595 ;; Parameters:    Size  Location     Type
  7596 ;;		None
  7597 ;; Auto vars:     Size  Location     Type
  7598 ;;		None
  7599 ;; Return value:  Size  Location     Type
  7600 ;;                  1    wreg      unsigned char 
  7601 ;; Registers used:
  7602 ;;		wreg, status,2
  7603 ;; Tracked objects:
  7604 ;;		On entry : 0/0
  7605 ;;		On exit  : 0/0
  7606 ;;		Unchanged: 0/0
  7607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7608 ;;      Params:         0       0       0       0       0       0       0
  7609 ;;      Locals:         0       0       0       0       0       0       0
  7610 ;;      Temps:          0       0       0       0       0       0       0
  7611 ;;      Totals:         0       0       0       0       0       0       0
  7612 ;;Total ram usage:        0 bytes
  7613 ;; Hardware stack levels used:    1
  7614 ;; This function calls:
  7615 ;;		Nothing
  7616 ;; This function is called by:
  7617 ;;		_isr
  7618 ;; This function uses a non-reentrant model
  7619 ;;
  7620                           
  7621                           	psect	text49
  7622  002546                     __ptext49:
  7623                           	callstack 0
  7624  002546                     _fatalError:
  7625                           	callstack 0
  7626  002546  FFFF               	dw	65535	; assembler added errata NOP
  7627  002548                     
  7628                           ;usart.c: 62:     return _fatalError;
  7629  002548  5060               	movf	__fatalError^0,w,c
  7630  00254A  0012               	return		;funcret
  7631  00254C  FFFF               	dw	65535	; errata NOP
  7632  00254E                     __end_of_fatalError:
  7633                           	callstack 0
  7634                           
  7635 ;; *************** function _abortAll *****************
  7636 ;; Defined at:
  7637 ;;		line 817 in file "motors.c"
  7638 ;; Parameters:    Size  Location     Type
  7639 ;;		None
  7640 ;; Auto vars:     Size  Location     Type
  7641 ;;		None
  7642 ;; Return value:  Size  Location     Type
  7643 ;;                  1    wreg      void 
  7644 ;; Registers used:
  7645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7646 ;; Tracked objects:
  7647 ;;		On entry : 0/0
  7648 ;;		On exit  : 0/0
  7649 ;;		Unchanged: 0/0
  7650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7651 ;;      Params:         0       0       0       0       0       0       0
  7652 ;;      Locals:         0       0       0       0       0       0       0
  7653 ;;      Temps:          0       0       0       0       0       0       0
  7654 ;;      Totals:         0       0       0       0       0       0       0
  7655 ;;Total ram usage:        0 bytes
  7656 ;; Hardware stack levels used:    1
  7657 ;; Hardware stack levels required when called:    2
  7658 ;; This function calls:
  7659 ;;		i2_printError
  7660 ;; This function is called by:
  7661 ;;		_isr
  7662 ;; This function uses a non-reentrant model
  7663 ;;
  7664                           
  7665                           	psect	text50
  7666  00243C                     __ptext50:
  7667                           	callstack 0
  7668  00243C                     _abortAll:
  7669                           	callstack 0
  7670  00243C  FFFF               	dw	65535	; assembler added errata NOP
  7671  00243E                     
  7672                           ;motors.c: 825:     printError(7);
  7673  00243E  0E07               	movlw	7
  7674  002440  ECC1  F00D         	call	i2_printError
  7675  002444                     i2l253:
  7676  002444  FFFF               	dw	65535	; assembler added errata NOP
  7677  002446  EF22  F012         	goto	i2l253
  7678  00244A  0012               	return		;funcret
  7679  00244C  FFFF               	dw	65535	; errata NOP
  7680  00244E                     __end_of_abortAll:
  7681                           	callstack 0
  7682                           
  7683 ;; *************** function i2_printError *****************
  7684 ;; Defined at:
  7685 ;;		line 111 in file "usart.c"
  7686 ;; Parameters:    Size  Location     Type
  7687 ;;  errCode         1    wreg     unsigned char 
  7688 ;; Auto vars:     Size  Location     Type
  7689 ;;  errCode         1    6[COMRAM] unsigned char 
  7690 ;; Return value:  Size  Location     Type
  7691 ;;                  1    wreg      void 
  7692 ;; Registers used:
  7693 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7694 ;; Tracked objects:
  7695 ;;		On entry : 0/0
  7696 ;;		On exit  : 0/0
  7697 ;;		Unchanged: 0/0
  7698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7699 ;;      Params:         0       0       0       0       0       0       0
  7700 ;;      Locals:         1       0       0       0       0       0       0
  7701 ;;      Temps:          2       0       0       0       0       0       0
  7702 ;;      Totals:         3       0       0       0       0       0       0
  7703 ;;Total ram usage:        3 bytes
  7704 ;; Hardware stack levels used:    1
  7705 ;; Hardware stack levels required when called:    1
  7706 ;; This function calls:
  7707 ;;		i2_uartTx
  7708 ;; This function is called by:
  7709 ;;		_abortAll
  7710 ;;		i2_storeData
  7711 ;; This function uses a non-reentrant model
  7712 ;;
  7713                           
  7714                           	psect	text51
  7715  001B82                     __ptext51:
  7716                           	callstack 0
  7717  001B82                     i2_printError:
  7718                           	callstack 0
  7719  001B82  FFFF               	dw	65535	; assembler added errata NOP
  7720                           
  7721                           ;incstack = 0
  7722                           ;i2printError@errCode stored from wreg
  7723  001B84  6E07               	movwf	i2printError@errCode^0,c
  7724  001B86                     
  7725                           ;usart.c: 113:     switch(errCode){
  7726  001B86  EF1D  F00E         	goto	i2l3019
  7727  001B8A                     i2l3001:
  7728  001B8A  FFFF               	dw	65535	; assembler added errata NOP
  7729                           
  7730                           ;usart.c: 115:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  7731  001B8C  0E94               	movlw	low _errString_Feed
  7732  001B8E  6E01               	movwf	i2uartTx@ptr^0,c
  7733  001B90  0E00               	movlw	high _errString_Feed
  7734  001B92  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7735  001B94  0E1E               	movlw	30
  7736  001B96  6E03               	movwf	i2uartTx@length^0,c
  7737  001B98  EC37  F011         	call	i2_uartTx	;wreg free
  7738                           
  7739                           ;usart.c: 116:             break;
  7740  001B9C  EF4C  F00E         	goto	i2l555
  7741  001BA0                     i2l3003:
  7742  001BA0  FFFF               	dw	65535	; assembler added errata NOP
  7743                           
  7744                           ;usart.c: 118:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  7745  001BA2  0E5E               	movlw	low _errString_ZEND
  7746  001BA4  6E01               	movwf	i2uartTx@ptr^0,c
  7747  001BA6  0E01               	movlw	high _errString_ZEND
  7748  001BA8  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7749  001BAA  0E29               	movlw	41
  7750  001BAC  6E03               	movwf	i2uartTx@length^0,c
  7751  001BAE  EC37  F011         	call	i2_uartTx	;wreg free
  7752                           
  7753                           ;usart.c: 119:             break;
  7754  001BB2  EF4C  F00E         	goto	i2l555
  7755  001BB6                     i2l3005:
  7756  001BB6  FFFF               	dw	65535	; assembler added errata NOP
  7757                           
  7758                           ;usart.c: 121:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  7759  001BB8  0E87               	movlw	low _errString_Reset
  7760  001BBA  6E01               	movwf	i2uartTx@ptr^0,c
  7761  001BBC  0E01               	movlw	high _errString_Reset
  7762  001BBE  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7763  001BC0  0E28               	movlw	40
  7764  001BC2  6E03               	movwf	i2uartTx@length^0,c
  7765  001BC4  EC37  F011         	call	i2_uartTx	;wreg free
  7766                           
  7767                           ;usart.c: 122:             break;
  7768  001BC8  EF4C  F00E         	goto	i2l555
  7769  001BCC                     i2l3007:
  7770  001BCC  FFFF               	dw	65535	; assembler added errata NOP
  7771                           
  7772                           ;usart.c: 124:             uartTx(&errString_Point[0], sizeof(errString_Point));
  7773  001BCE  0E35               	movlw	low _errString_Point
  7774  001BD0  6E01               	movwf	i2uartTx@ptr^0,c
  7775  001BD2  0E01               	movlw	high _errString_Point
  7776  001BD4  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7777  001BD6  0E29               	movlw	41
  7778  001BD8  6E03               	movwf	i2uartTx@length^0,c
  7779  001BDA  EC37  F011         	call	i2_uartTx	;wreg free
  7780                           
  7781                           ;usart.c: 125:             break;
  7782  001BDE  EF4C  F00E         	goto	i2l555
  7783  001BE2                     i2l3009:
  7784  001BE2  FFFF               	dw	65535	; assembler added errata NOP
  7785                           
  7786                           ;usart.c: 127:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  7787  001BE4  0ED6               	movlw	low _errString_Bound
  7788  001BE6  6E01               	movwf	i2uartTx@ptr^0,c
  7789  001BE8  0E01               	movlw	high _errString_Bound
  7790  001BEA  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7791  001BEC  0E21               	movlw	33
  7792  001BEE  6E03               	movwf	i2uartTx@length^0,c
  7793  001BF0  EC37  F011         	call	i2_uartTx	;wreg free
  7794                           
  7795                           ;usart.c: 128:             break;
  7796  001BF4  EF4C  F00E         	goto	i2l555
  7797  001BF8                     i2l3011:
  7798  001BF8  FFFF               	dw	65535	; assembler added errata NOP
  7799                           
  7800                           ;usart.c: 130:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  7801  001BFA  0E00               	movlw	low _errString_PointZ
  7802  001BFC  6E01               	movwf	i2uartTx@ptr^0,c
  7803  001BFE  0E01               	movlw	high _errString_PointZ
  7804  001C00  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7805  001C02  0E35               	movlw	53
  7806  001C04  6E03               	movwf	i2uartTx@length^0,c
  7807  001C06  EC37  F011         	call	i2_uartTx	;wreg free
  7808                           
  7809                           ;usart.c: 131:             break;
  7810  001C0A  EF4C  F00E         	goto	i2l555
  7811  001C0E                     i2l3013:
  7812  001C0E  FFFF               	dw	65535	; assembler added errata NOP
  7813                           
  7814                           ;usart.c: 133:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  7815  001C10  0EAF               	movlw	low _errString_Fatal
  7816  001C12  6E01               	movwf	i2uartTx@ptr^0,c
  7817  001C14  0E01               	movlw	high _errString_Fatal
  7818  001C16  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7819  001C18  0E27               	movlw	39
  7820  001C1A  6E03               	movwf	i2uartTx@length^0,c
  7821  001C1C  EC37  F011         	call	i2_uartTx	;wreg free
  7822                           
  7823                           ;usart.c: 134:             break;
  7824  001C20  EF4C  F00E         	goto	i2l555
  7825  001C24                     i2l3015:
  7826  001C24  FFFF               	dw	65535	; assembler added errata NOP
  7827                           
  7828                           ;usart.c: 136:             uartTx(&errString_Command[0], sizeof(errString_Command));
  7829  001C26  0EB2               	movlw	low _errString_Command
  7830  001C28  6E01               	movwf	i2uartTx@ptr^0,c
  7831  001C2A  0E00               	movlw	high _errString_Command
  7832  001C2C  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7833  001C2E  0E18               	movlw	24
  7834  001C30  6E03               	movwf	i2uartTx@length^0,c
  7835  001C32  EC37  F011         	call	i2_uartTx	;wreg free
  7836                           
  7837                           ;usart.c: 137:             break;
  7838  001C36  EF4C  F00E         	goto	i2l555
  7839  001C3A                     i2l3019:
  7840  001C3A  FFFF               	dw	65535	; assembler added errata NOP
  7841  001C3C  5007               	movf	i2printError@errCode^0,w,c
  7842  001C3E  6E05               	movwf	??i2_printError^0,c
  7843  001C40  6A06               	clrf	(??i2_printError+1)^0,c
  7844                           
  7845                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7846                           ; Switch size 1, requested type "simple"
  7847                           ; Number of cases is 1, Range of values is 0 to 0
  7848                           ; switch strategies available:
  7849                           ; Name         Instructions Cycles
  7850                           ; simple_byte            4     3 (average)
  7851                           ;	Chosen strategy is simple_byte
  7852  001C42  5006               	movf	(??i2_printError+1)^0,w,c
  7853  001C44  0A00               	xorlw	0	; case 0
  7854  001C46  B4D8               	btfsc	status,2,c
  7855  001C48  EF28  F00E         	goto	i2l4561
  7856  001C4C  EF4C  F00E         	goto	i2l555
  7857  001C50                     i2l4561:
  7858  001C50  FFFF               	dw	65535	; assembler added errata NOP
  7859                           
  7860                           ; Switch size 1, requested type "simple"
  7861                           ; Number of cases is 8, Range of values is 1 to 8
  7862                           ; switch strategies available:
  7863                           ; Name         Instructions Cycles
  7864                           ; simple_byte           25    13 (average)
  7865                           ;	Chosen strategy is simple_byte
  7866  001C52  5005               	movf	??i2_printError^0,w,c
  7867  001C54  0A01               	xorlw	1	; case 1
  7868  001C56  B4D8               	btfsc	status,2,c
  7869  001C58  EFC5  F00D         	goto	i2l3001
  7870  001C5C  0A03               	xorlw	3	; case 2
  7871  001C5E  B4D8               	btfsc	status,2,c
  7872  001C60  EFD0  F00D         	goto	i2l3003
  7873  001C64  0A01               	xorlw	1	; case 3
  7874  001C66  B4D8               	btfsc	status,2,c
  7875  001C68  EFDB  F00D         	goto	i2l3005
  7876  001C6C  0A07               	xorlw	7	; case 4
  7877  001C6E  B4D8               	btfsc	status,2,c
  7878  001C70  EFE6  F00D         	goto	i2l3007
  7879  001C74  0A01               	xorlw	1	; case 5
  7880  001C76  B4D8               	btfsc	status,2,c
  7881  001C78  EFF1  F00D         	goto	i2l3009
  7882  001C7C  0A03               	xorlw	3	; case 6
  7883  001C7E  B4D8               	btfsc	status,2,c
  7884  001C80  EFFC  F00D         	goto	i2l3011
  7885  001C84  0A01               	xorlw	1	; case 7
  7886  001C86  B4D8               	btfsc	status,2,c
  7887  001C88  EF07  F00E         	goto	i2l3013
  7888  001C8C  0A0F               	xorlw	15	; case 8
  7889  001C8E  B4D8               	btfsc	status,2,c
  7890  001C90  EF12  F00E         	goto	i2l3015
  7891  001C94  EF4C  F00E         	goto	i2l555
  7892  001C98                     i2l555:
  7893  001C98  FFFF               	dw	65535	; assembler added errata NOP
  7894  001C9A  0012               	return		;funcret
  7895  001C9C  FFFF               	dw	65535	; errata NOP
  7896  001C9E                     __end_ofi2_printError:
  7897                           	callstack 0
  7898                           
  7899 ;; *************** function i2_uartTx *****************
  7900 ;; Defined at:
  7901 ;;		line 148 in file "usart.c"
  7902 ;; Parameters:    Size  Location     Type
  7903 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  7904 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  7905 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  7906 ;;  length          1    2[COMRAM] unsigned char 
  7907 ;; Auto vars:     Size  Location     Type
  7908 ;;  i               1    3[COMRAM] unsigned char 
  7909 ;; Return value:  Size  Location     Type
  7910 ;;                  1    wreg      void 
  7911 ;; Registers used:
  7912 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7913 ;; Tracked objects:
  7914 ;;		On entry : 0/0
  7915 ;;		On exit  : 0/0
  7916 ;;		Unchanged: 0/0
  7917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7918 ;;      Params:         3       0       0       0       0       0       0
  7919 ;;      Locals:         1       0       0       0       0       0       0
  7920 ;;      Temps:          0       0       0       0       0       0       0
  7921 ;;      Totals:         4       0       0       0       0       0       0
  7922 ;;Total ram usage:        4 bytes
  7923 ;; Hardware stack levels used:    1
  7924 ;; This function calls:
  7925 ;;		Nothing
  7926 ;; This function is called by:
  7927 ;;		i2_printError
  7928 ;; This function uses a non-reentrant model
  7929 ;;
  7930                           
  7931                           	psect	text52
  7932  00226E                     __ptext52:
  7933                           	callstack 0
  7934  00226E                     i2_uartTx:
  7935                           	callstack 0
  7936  00226E  FFFF               	dw	65535	; assembler added errata NOP
  7937  002270                     
  7938                           ;usart.c: 148: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 149: {;usa
      +                          rt.c: 151:     for(char i = 1; i < length; i++){
  7939  002270  0E01               	movlw	1
  7940  002272  6E04               	movwf	i2uartTx@i^0,c
  7941  002274  EF50  F011         	goto	i2l2717
  7942  002278                     i2l2713:
  7943  002278  FFFF               	dw	65535	; assembler added errata NOP
  7944                           
  7945                           ;usart.c: 153:         TXREG = *ptr;
  7946  00227A  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  7947  00227E  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  7948  002282  50DF               	movf	indf2,w,c
  7949  002284  6EAD               	movwf	173,c	;volatile
  7950  002286                     i2l560:
  7951  002286  FFFF               	dw	65535	; assembler added errata NOP
  7952  002288  A2AC               	btfss	172,1,c	;volatile
  7953  00228A  EF49  F011         	goto	i2u183_41
  7954  00228E  EF4C  F011         	goto	i2u183_40
  7955  002292                     i2u183_41:
  7956  002292  FFFF               	dw	65535	; assembler added errata NOP
  7957  002294  EF43  F011         	goto	i2l560
  7958  002298                     i2u183_40:
  7959  002298  FFFF               	dw	65535	; assembler added errata NOP
  7960  00229A                     
  7961                           ;usart.c: 157:         ptr++;
  7962  00229A  4A01               	infsnz	i2uartTx@ptr^0,f,c
  7963  00229C  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  7964                           
  7965                           ;usart.c: 158:     }
  7966  00229E  2A04               	incf	i2uartTx@i^0,f,c
  7967  0022A0                     i2l2717:
  7968  0022A0  FFFF               	dw	65535	; assembler added errata NOP
  7969  0022A2  5003               	movf	i2uartTx@length^0,w,c
  7970  0022A4  5C04               	subwf	i2uartTx@i^0,w,c
  7971  0022A6  A0D8               	btfss	status,0,c
  7972  0022A8  EF58  F011         	goto	i2u184_41
  7973  0022AC  EF5B  F011         	goto	i2u184_40
  7974  0022B0                     i2u184_41:
  7975  0022B0  FFFF               	dw	65535	; assembler added errata NOP
  7976  0022B2  EF3C  F011         	goto	i2l2713
  7977  0022B6                     i2u184_40:
  7978  0022B6  FFFF               	dw	65535	; assembler added errata NOP
  7979  0022B8  0012               	return		;funcret
  7980  0022BA  FFFF               	dw	65535	; errata NOP
  7981  0022BC                     __end_ofi2_uartTx:
  7982                           	callstack 0
  7983                           
  7984                           	psect	rparam
  7985  0000                     
  7986                           	psect	temp
  7987  00006E                     btemp:
  7988                           	callstack 0
  7989  00006E                     	ds	1
  7990  0000                     int$flags	set	btemp
  7991  0000                     wtemp8	set	btemp+1
  7992  0000                     ttemp5	set	btemp+1
  7993  0000                     ttemp6	set	btemp+4
  7994  0000                     ttemp7	set	btemp+8
  7995                           
  7996                           	psect	idloc
  7997                           
  7998                           ;Config register IDLOC0 @ 0x200000
  7999                           ;	unspecified, using default values
  8000  200000                     	org	2097152
  8001  200000  FF                 	db	255
  8002                           
  8003                           ;Config register IDLOC1 @ 0x200001
  8004                           ;	unspecified, using default values
  8005  200001                     	org	2097153
  8006  200001  FF                 	db	255
  8007                           
  8008                           ;Config register IDLOC2 @ 0x200002
  8009                           ;	unspecified, using default values
  8010  200002                     	org	2097154
  8011  200002  FF                 	db	255
  8012                           
  8013                           ;Config register IDLOC3 @ 0x200003
  8014                           ;	unspecified, using default values
  8015  200003                     	org	2097155
  8016  200003  FF                 	db	255
  8017                           
  8018                           ;Config register IDLOC4 @ 0x200004
  8019                           ;	unspecified, using default values
  8020  200004                     	org	2097156
  8021  200004  FF                 	db	255
  8022                           
  8023                           ;Config register IDLOC5 @ 0x200005
  8024                           ;	unspecified, using default values
  8025  200005                     	org	2097157
  8026  200005  FF                 	db	255
  8027                           
  8028                           ;Config register IDLOC6 @ 0x200006
  8029                           ;	unspecified, using default values
  8030  200006                     	org	2097158
  8031  200006  FF                 	db	255
  8032                           
  8033                           ;Config register IDLOC7 @ 0x200007
  8034                           ;	unspecified, using default values
  8035  200007                     	org	2097159
  8036  200007  FF                 	db	255
  8037                           
  8038                           	psect	config
  8039                           
  8040                           ; Padding undefined space
  8041  300000                     	org	3145728
  8042  300000  FF                 	db	255
  8043                           
  8044                           ;Config register CONFIG1H @ 0x300001
  8045                           ;	Oscillator Selection bits
  8046                           ;	OSC = XT, XT oscillator
  8047                           ;	Oscillator System Clock Switch Enable bit
  8048                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  8049  300001                     	org	3145729
  8050  300001  21                 	db	33
  8051                           
  8052                           ;Config register CONFIG2L @ 0x300002
  8053                           ;	Power-up Timer Enable bit
  8054                           ;	PWRT = OFF, PWRT disabled
  8055                           ;	Brown-out Reset Enable bit
  8056                           ;	BOR = OFF, Brown-out Reset disabled
  8057                           ;	Brown-out Reset Voltage bits
  8058                           ;	BORV = 20, VBOR set to 2.0V
  8059  300002                     	org	3145730
  8060  300002  0D                 	db	13
  8061                           
  8062                           ;Config register CONFIG2H @ 0x300003
  8063                           ;	Watchdog Timer Enable bit
  8064                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8065                           ;	Watchdog Timer Postscale Select bits
  8066                           ;	WDTPS = 128, 1:128
  8067  300003                     	org	3145731
  8068  300003  0E                 	db	14
  8069                           
  8070                           ; Padding undefined space
  8071  300004                     	org	3145732
  8072  300004  FF                 	db	255
  8073                           
  8074                           ;Config register CONFIG3H @ 0x300005
  8075                           ;	CCP2 Mux bit
  8076                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  8077  300005                     	org	3145733
  8078  300005  00                 	db	0
  8079                           
  8080                           ;Config register CONFIG4L @ 0x300006
  8081                           ;	Stack Full/Underflow Reset Enable bit
  8082                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  8083                           ;	Low Voltage ICSP Enable bit
  8084                           ;	LVP = OFF, Low Voltage ICSP disabled
  8085                           ;	Background Debugger Enable bit
  8086                           ;	DEBUG = 0x1, unprogrammed default
  8087  300006                     	org	3145734
  8088  300006  80                 	db	128
  8089                           
  8090                           ; Padding undefined space
  8091  300007                     	org	3145735
  8092  300007  FF                 	db	255
  8093                           
  8094                           ;Config register CONFIG5L @ 0x300008
  8095                           ;	Code Protection bit
  8096                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  8097                           ;	Code Protection bit
  8098                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  8099                           ;	Code Protection bit
  8100                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  8101                           ;	Code Protection bit
  8102                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  8103  300008                     	org	3145736
  8104  300008  0F                 	db	15
  8105                           
  8106                           ;Config register CONFIG5H @ 0x300009
  8107                           ;	Boot Block Code Protection bit
  8108                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  8109                           ;	Data EEPROM Code Protection bit
  8110                           ;	CPD = OFF, Data EEPROM not code protected
  8111  300009                     	org	3145737
  8112  300009  C0                 	db	192
  8113                           
  8114                           ;Config register CONFIG6L @ 0x30000A
  8115                           ;	Write Protection bit
  8116                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  8117                           ;	Write Protection bit
  8118                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  8119                           ;	Write Protection bit
  8120                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  8121                           ;	Write Protection bit
  8122                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  8123  30000A                     	org	3145738
  8124  30000A  0F                 	db	15
  8125                           
  8126                           ;Config register CONFIG6H @ 0x30000B
  8127                           ;	Configuration Register Write Protection bit
  8128                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  8129                           ;	Boot Block Write Protection bit
  8130                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  8131                           ;	Data EEPROM Write Protection bit
  8132                           ;	WRTD = OFF, Data EEPROM not write protected
  8133  30000B                     	org	3145739
  8134  30000B  E0                 	db	224
  8135                           
  8136                           ;Config register CONFIG7L @ 0x30000C
  8137                           ;	Table Read Protection bit
  8138                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  8139                           ;	Table Read Protection bit
  8140                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  8141                           ;	Table Read Protection bit
  8142                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  8143                           ;	Table Read Protection bit
  8144                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  8145  30000C                     	org	3145740
  8146  30000C  0F                 	db	15
  8147                           
  8148                           ;Config register CONFIG7H @ 0x30000D
  8149                           ;	Boot Block Table Read Protection bit
  8150                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  8151  30000D                     	org	3145741
  8152  30000D  40                 	db	64
  8153                           tosu	equ	0xFFF
  8154                           tosh	equ	0xFFE
  8155                           tosl	equ	0xFFD
  8156                           stkptr	equ	0xFFC
  8157                           pclatu	equ	0xFFB
  8158                           pclath	equ	0xFFA
  8159                           pcl	equ	0xFF9
  8160                           tblptru	equ	0xFF8
  8161                           tblptrh	equ	0xFF7
  8162                           tblptrl	equ	0xFF6
  8163                           tablat	equ	0xFF5
  8164                           prodh	equ	0xFF4
  8165                           prodl	equ	0xFF3
  8166                           indf0	equ	0xFEF
  8167                           postinc0	equ	0xFEE
  8168                           postdec0	equ	0xFED
  8169                           preinc0	equ	0xFEC
  8170                           plusw0	equ	0xFEB
  8171                           fsr0h	equ	0xFEA
  8172                           fsr0l	equ	0xFE9
  8173                           wreg	equ	0xFE8
  8174                           indf1	equ	0xFE7
  8175                           postinc1	equ	0xFE6
  8176                           postdec1	equ	0xFE5
  8177                           preinc1	equ	0xFE4
  8178                           plusw1	equ	0xFE3
  8179                           fsr1h	equ	0xFE2
  8180                           fsr1l	equ	0xFE1
  8181                           bsr	equ	0xFE0
  8182                           indf2	equ	0xFDF
  8183                           postinc2	equ	0xFDE
  8184                           postdec2	equ	0xFDD
  8185                           preinc2	equ	0xFDC
  8186                           plusw2	equ	0xFDB
  8187                           fsr2h	equ	0xFDA
  8188                           fsr2l	equ	0xFD9
  8189                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    16
    Data        328
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     66     109
    BANK0           128     17     119
    BANK1           256      0     247
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 53
		 -> errString_Command(BANK0[24]), errString_Fatal(BANK1[39]), errString_PointZ(BANK1[53]), errString_Bound(BANK1[33]), 
		 -> errString_Point(BANK1[41]), errString_Reset(BANK1[40]), errString_ZEND(BANK1[41]), errString_Feed(BANK0[30]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 


Critical Paths under _main in COMRAM

    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_stepMade
    _touchTherm->_stepMade
    _touchObject->_stepMade
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _releaseObj->_stepMade
    _pickObject->_stepMade
    _moveToPoint->_stepMade
    _liftArm->_stepMade

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    _abortAll->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _main->_executeData
    _executeData->_rotateObj

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   10619
                                             12 BANK0      5     5      0
                           _clearTM0
                        _executeData
                     _getNewSequence
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                   _resetNewSequence
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim1Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim1Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    1604
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0     238
                                             20 COMRAM     3     3      0
                          _resetStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (1) _resetNewSequence                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0    6535
                                              7 BANK0      5     5      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0      34
                          _resetStep
                         _resetTherm
                        _returnTherm
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0      34
                          _resetStep
                         _resetTherm
                         _resetTouch
                        _returnTouch
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            7     7      0    3163
                                              0 BANK0      7     7      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
                          _resetStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         14     6      8    2608
                                             20 COMRAM    14     6      8
                          _resetStep
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0      34
                          _resetStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0    1059
                                             10 COMRAM     7     7      0
                           _abortAll
                         _fatalError
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _abortAll                                             0     0      0     507
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _executeData
     _getData
     _liftArm
       _resetStep
       _stepMade
     _moveToPoint
       _resetStep
       _stepCounter
       _stepMade
     _pickObject
       _stepMade
     _releaseObj
       _stepMade
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _resetStep
       _stepMade
     _touchObject
       _resetStep
       _resetTherm
       _resetTouch
       _returnTouch
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTherm
       _returnTherm
       _startADC
       _stepMade
       _stopADC
   _getNewSequence
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetNewSequence
   _resetPosition
     _resetStep
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim1Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _abortAll
     i2_printError
       i2_uartTx
   _fatalError
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F7       7       96.5%
BITBANK0            80      0       0       4        0.0%
BANK0               80     11      77       5       93.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     42      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1DB      15        0.0%
DATA                 0      0     1DB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Tue Apr 27 16:13:31 2021

                                        ___fldiv@aexp 0038  
                                        ___fldiv@bexp 0037  
                               __end_of_interruptInit 2342  
                                        ___fldiv@sign 0030  
                                                  l90 23BC  
                                                  l84 2482  
                                                 l201 1DA2  
                                                 l202 1DA6  
                                                 l131 1306  
                                                 l220 211E  
                                                 l132 1476  
                                                 l213 1EAA  
                                                 l214 1EAE  
                                                 l151 148E  
                                                 l160 0AF8  
                                                 l225 2136  
                                                 l217 210C  
                                                 l161 0B00  
                                                 l250 236A  
                                                 l243 2390  
                                                 l244 2396  
                                                 l236 2050  
                                                 l165 0DA0  
                                                 l157 0DB8  
                                                 l333 14E0  
                                                 l182 0D5E  
                                                 l158 0AB8  
                                                 l238 2080  
                                                 l334 14DA  
                                                 l335 14DC  
                                                 l360 10B8  
                                                 l249 2364  
                                                 l521 251A  
                                                 l450 2332  
                                                 l530 252A  
                                                 l515 2474  
                                                 l451 233E  
                                                 l603 2438  
                                                 l612 2414  
                                                 l380 23E2  
                                                 l524 2522  
                                                 l533 24CC  
                                                 l541 2400  
                                                 l518 2466  
                                                 l606 2458  
                                                 l615 24C2  
                                                 l383 24D6  
                                                 l392 24AA  
                                                 l560 2238  
                                                 l449 231C  
                                                 l609 2426  
                                                 l618 24F4  
                                                 l386 2532  
                                                 l538 221C  
                                                 l395 24E0  
                                                 l555 1B7C  
                                                 l564 226A  
                                                 l389 24B6  
                                                 l398 24EA  
                                                 l585 172A  
                                                 l588 17B0  
                                                 l927 1A60  
                                                 _isr 0008  
                                         _touchObject 1C9E  
                                                 prod 000FF3  
                                                 wreg 000FE8  
                                        ___fltol@exp1 0042  
                                         main@errCode 00F4  
                                                l1212 0A3E  
                                                l1214 0856  
                                                l1223 08AC  
                                                l1225 093C  
                                                l1217 0810  
                                                l1226 0924  
                                                l4001 2032  
                                                l4011 2078  
                                                l4003 2034  
                                                l1292 11CA  
                                                l4021 2344  
                                                l1285 111E  
                                                l4013 207C  
                                                l4005 2052  
                                                l4101 1364  
                                                l4015 2370  
                                                l4023 2348  
                                                l4007 2056  
                                                l4111 13B0  
                                                l4103 1378  
                                                l4031 1A84  
                                                l1288 12B0  
                                                l4017 2374  
                                                l4025 2366  
                                                l4009 205C  
                                                l4121 140A  
                                                l4113 13C2  
                                                l4105 138A  
                                                l4041 1AF2  
                                                l4033 1A9A  
                                                l4201 16C2  
                                                l4019 2392  
                                                l1299 1236  
                                                l4131 1464  
                                                l4123 140E  
                                                l4115 13D6  
                                                l4107 1394  
                                                l4043 1B08  
                                                l4035 1AB0  
                                                l4027 1A6A  
                                                l4211 1758  
                                                l4203 16CA  
                                                l4053 246C  
                                                l4301 1064  
                                                l4061 23A4  
                                                l4141 2308  
                                                l4133 147C  
                                                l4125 1420  
                                                l4117 13E8  
                                                l4109 13AC  
                                                l4037 1AC6  
                                                l4029 1A6E  
                                                l4213 175C  
                                                l4205 1724  
                                                l4221 177A  
                                                l4303 1076  
                                                l4151 23D0  
                                                l4071 23B6  
                                                l4063 23A8  
                                                l4143 231A  
                                                l4231 24C8  
                                                l4135 1488  
                                                l4119 13F2  
                                                l4127 143A  
                                                l4039 1ADC  
                                                l4047 1B1E  
                                                l4215 1764  
                                                l4207 1734  
                                                l4057 247A  
                                                l3521 240A  
                                                l3601 076A  
                                                l4305 107E  
                                                l4241 0DD0  
                                                l4153 23D2  
                                                l4073 23B8  
                                                l4065 23AC  
                                                l4145 2330  
                                                l4233 2520  
                                                l4137 148C  
                                                l4129 1450  
                                                l4081 12CA  
                                                l4217 176E  
                                                l4209 1744  
                                                l4161 23E8  
                                                l4401 1622  
                                                l3523 240E  
                                                l3611 07AA  
                                                l3603 076A  
                                                l3531 24B0  
                                                l4315 10A6  
                                                l4307 1086  
                                                l4251 0E78  
                                                l4243 0E0A  
                                                l4155 23D4  
                                                l4147 23C2  
                                                l4075 23BA  
                                                l4067 23B0  
                                                l4059 239C  
                                                l4091 131A  
                                                l4083 12D8  
                                                l4171 2454  
                                                l4163 23FC  
                                                l4403 1628  
                                                l3517 24F0  
                                                l3621 07FC  
                                                l3613 07BA  
                                                l3701 19A8  
                                                l3533 2530  
                                                l4317 10AC  
                                                l4309 108E  
                                                l4261 0F0C  
                                                l4253 0E8C  
                                                l4245 0E1A  
                                                l4237 0DC0  
                                                l4181 245E  
                                                l4157 23DE  
                                                l4149 23CA  
                                                l4069 23B4  
                                                l4333 2518  
                                                l4093 132C  
                                                l4085 12DE  
                                                l4077 12B8  
                                                l4341 21C6  
                                                l3541 2222  
                                                l4165 242C  
                                                l4173 2456  
                                                l4405 162C  
                                                l3519 2406  
                                                l3527 24BC  
                                                l3631 0852  
                                                l3623 080E  
                                                l3615 07CA  
                                                l3607 077E  
                                                l3551 0620  
                                                l3711 19E2  
                                                l3703 19BA  
                                                l3535 24DC  
                                                l4263 0F10  
                                                l4255 0EC6  
                                                l4247 0E2E  
                                                l4271 0F6A  
                                                l4239 0DCC  
                                                l4159 23E0  
                                                l4095 1336  
                                                l4087 12E4  
                                                l4079 12BE  
                                                l4343 2206  
                                                l4335 21C2  
                                                l3543 222A  
                                                l4191 1660  
                                                l4167 2434  
                                                l4175 241A  
                                                l4407 1630  
                                                l4351 1498  
                                                l3801 0B1E  
                                                l3641 08AA  
                                                l3633 086C  
                                                l3625 081C  
                                                l3617 07D2  
                                                l3609 079A  
                                                l3561 066E  
                                                l3553 0632  
                                                l3721 1A14  
                                                l3713 19EC  
                                                l3537 24E6  
                                                l3529 24D2  
                                                l4281 0FA2  
                                                l4273 0F80  
                                                l4265 0F18  
                                                l4257 0ED6  
                                                l4249 0E68  
                                                l4177 2528  
                                                l4097 134E  
                                                l4089 12FA  
                                                l4345 2208  
                                                l3545 224C  
                                                l4193 166A  
                                                l4185 1640  
                                                l4169 2450  
                                                l4361 14AC  
                                                l4353 149C  
                                                l3811 0B88  
                                                l3803 0B36  
                                                l3651 091A  
                                                l3635 0886  
                                                l3643 08BE  
                                                l3627 0840  
                                                l3619 07E8  
                                                l3571 069A  
                                                l3563 0672  
                                                l3555 0634  
                                                l3723 1A28  
                                                l3731 10C2  
                                                l3539 24A4  
                                                l4291 0FC8  
                                                l4283 0FA8  
                                                l4275 0F88  
                                                l4259 0EEA  
                                                l4099 1352  
                                                l3547 2252  
                                                l4187 1650  
                                                l4371 14FE  
                                                l4363 14B8  
                                                l4355 14A0  
                                                l4347 1492  
                                                l3821 0BEA  
                                                l3813 0B9E  
                                                l3805 0B42  
                                                l3661 099A  
                                                l3645 08D2  
                                                l3637 088C  
                                                l3629 0842  
                                                l3581 06E8  
                                                l3573 06AC  
                                                l3557 064A  
                                                l3565 067A  
                                                l3549 0614  
                                                l3725 1A3E  
                                                l3709 19D6  
                                                l3733 10D6  
                                                l3901 1D56  
                                                l4293 100A  
                                                l4285 0FB0  
                                                l4277 0F9A  
                                                l4269 0F22  
                                                l4189 1656  
                                                l4197 1674  
                                                l4381 154E  
                                                l4373 150A  
                                                l4365 14C0  
                                                l4357 14A4  
                                                l4349 1492  
                                                l3815 0BBA  
                                                l3807 0B58  
                                                l3671 0A10  
                                                l3655 0952  
                                                l3663 099E  
                                                l3647 08D6  
                                                l3639 0898  
                                                l3591 0732  
                                                l3583 06EC  
                                                l3575 06AE  
                                                l3567 068C  
                                                l3559 065E  
                                                l3727 1A4E  
                                                l3719 1A06  
                                                l3751 11B4  
                                                l3743 1160  
                                                l3735 10E8  
                                                l3911 1D80  
                                                l3903 1D66  
                                                l4551 1790  
                                                l4199 16AA  
                                                l4391 15F0  
                                                l4383 156C  
                                                l4375 151C  
                                                l4367 14D4  
                                                l4359 14A8  
                                                l3841 0CAC  
                                                l3825 0C1C  
                                                l3817 0BBE  
                                                l3833 0C50  
                                                l3809 0B7E  
                                                l3673 0A16  
                                                l3665 09BE  
                                                l3657 095E  
                                                l3649 08E8  
                                                l3593 073A  
                                                l3577 06C4  
                                                l3585 06F4  
                                                l3569 0694  
                                                l3761 124A  
                                                l3753 11C0  
                                                l3745 116A  
                                                l3737 1130  
                                                l3913 1D84  
                                                l3905 1D6C  
                                                l3921 1DAC  
                                                l4553 1B34  
                                                l4393 15F8  
                                                l4385 1576  
                                                l4377 152C  
                                                l4369 14E4  
                                                l3843 0CC8  
                                                l3835 0C66  
                                                l3827 0C32  
                                                l3819 0BD4  
                                                l3675 0A28  
                                                l3667 09D4  
                                                l3659 0970  
                                                l3595 0740  
                                                l3587 0706  
                                                l3579 06D8  
                                                l3771 129C  
                                                l3763 124C  
                                                l3755 1202  
                                                l3747 1178  
                                                l3739 114C  
                                                l3915 1D88  
                                                l3907 1D70  
                                                l3931 1DD0  
                                                l3923 1DB0  
                                                l4299 1022  
                                                l4555 0F42  
                                                l4395 15FC  
                                                l4387 159E  
                                                l4379 152E  
                                                l3853 0D2A  
                                                l3845 0CCC  
                                                l3861 0D5E  
                                                l3837 0C8C  
                                                l3829 0C48  
                                                l3781 0A78  
                                                l3677 0A2E  
                                                l3669 09F4  
                                                l3589 0722  
                                                l3693 1962  
                                                l3773 129E  
                                                l3765 1252  
                                                l3757 1210  
                                                l3749 11B0  
                                                l3917 1D9A  
                                                l3909 1D72  
                                                l3941 1E26  
                                                l3933 1DE6  
                                                l3925 1DBE  
                                                l4549 168A  
                                                l4389 15B6  
                                                l4397 1600  
                                                l3871 0DB6  
                                                l3855 0D40  
                                                l3839 0C96  
                                                l3847 0CE2  
                                                l3863 0D78  
                                                l3791 0AC0  
                                                l3679 0A32  
                                                l3599 0754  
                                                l3695 1992  
                                                l3687 1932  
                                                l3767 1276  
                                                l3759 1224  
                                                l3951 1E78  
                                                l3935 1DF2  
                                                l3927 1DC0  
                                                l4399 161A  
                                                l3865 0D8E  
                                                l3857 0D56  
                                                l3849 0CF8  
                                                l3793 0AEC  
                                                l3785 0A80  
                                                l3777 0A46  
                                                l3697 1994  
                                                l3689 194C  
                                                l3769 128A  
                                                l3881 1CB4  
                                                l3961 1EA2  
                                                l3953 1E7C  
                                                l3937 1E10  
                                                l3929 1DCA  
                                                l3945 1E46  
                                                l3971 209C  
                                                l3867 0DA6  
                                                l3795 0AFC  
                                                l3787 0AAC  
                                                l3779 0A60  
                                                l3699 19A4  
                                                l3891 1D04  
                                                l3883 1CBE  
                                                l3875 1CA0  
                                                l3955 1E7E  
                                                l3947 1E62  
                                                l3939 1E14  
                                                l3981 20E0  
                                                l3973 20A2  
                                                l3965 2086  
                                                l3869 0DB2  
                                                l3797 0B0A  
                                                l3789 0ABC  
                                                l3893 1D08  
                                                l3885 1CC4  
                                                l3877 1CA4  
                                                l3957 1E8C  
                                                l3949 1E72  
                                                l3983 20F2  
                                                l3975 20B8  
                                                l3967 208A  
                                                l3799 0B18  
                                                l3895 1D1A  
                                                l3887 1CDA  
                                                l3879 1CB2  
                                                l3959 1E90  
                                                l3985 2124  
                                                l3977 20C4  
                                                l3969 2096  
                                                l3993 1FB0  
                                                l3889 1CE6  
                                                l3987 2130  
                                                l3979 20DC  
                                                l3995 2002  
                                                l3899 1D3A  
                                                ?_isr 0001  
                                                l3989 2134  
                                                l3997 2010  
                                                l3999 2016  
                                                u3000 19D0  
                                                u3001 19CA  
                                                u3010 1A00  
                                                u3011 19FA  
                                                u3020 1A28  
                                                u3100 1236  
                                                u3021 1A22  
                                                u3101 1230  
                                                _LATA 000F89  
                                                u3030 1A3C  
                                                u3110 1248  
                                                _LATB 000F8A  
                                                u3031 1A36  
                                                u3111 1242  
                                                _LATC 000F8B  
                                                u3200 0B7C  
                                                u3120 1288  
                                                u3040 10D4  
                                                _LATD 000F8C  
                                                u3201 0B76  
                                                u3121 1282  
                                                u3041 10CE  
                                                u3210 0B9C  
                                                u3130 129A  
                                                u3050 10E6  
                                                u3211 0B96  
                                                u3131 1294  
                                                u3051 10E0  
                                                u3300 0CC6  
                                                u3220 0BB8  
                                                u3140 0A5E  
                                                u3060 114A  
                                                u3301 0CC0  
                                                u3221 0BB2  
                                                u3141 0A58  
                                                u3061 1144  
                                                u3310 0CF6  
                                                u3230 0BE8  
                                                u3150 0A78  
                                                u3070 11AA  
                                                u3311 0CF0  
                                                u3231 0BE2  
                                                u3151 0A72  
                                                u3071 11A4  
                                                u3320 0D24  
                                                u3240 0C16  
                                                u3160 0AAA  
                                                u3080 11FC  
                                                u3400 1D34  
                                                u3321 0D1E  
                                                u3241 0C10  
                                                u3161 0AA4  
                                                u3081 11F6  
                                                u3401 1D2E  
                                                u3330 0D3E  
                                                u3250 0C30  
                                                u3170 0AEA  
                                                u3090 1222  
                                                u3410 1D54  
                                                u3331 0D38  
                                                u3251 0C2A  
                                                u3171 0AE4  
                                                u3091 121C  
                                                u3411 1D4E  
                                                u3500 20B6  
                                                u3340 0D54  
                                                u3260 0C46  
                                                u3180 0B34  
                                                u3420 1D66  
                                                u3501 20B0  
                                                u3341 0D4E  
                                                u3261 0C40  
                                                u3181 0B2E  
                                                u3421 1D60  
                                                u3510 20DA  
                                                u3350 0D78  
                                                u3270 0C64  
                                                u3190 0B56  
                                                u3430 1D98  
                                                u3511 20D4  
                                                u3351 0D72  
                                                u3271 0C5E  
                                                u3191 0B50  
                                                u3431 1D92  
                                                u3520 210C  
                                                u3360 0D8C  
                                                u3280 0C8A  
                                                u2800 0720  
                                                u3440 1DE4  
                                                u3600 132C  
                                                u2720 224A  
                                                u3521 2106  
                                                u3361 0D86  
                                                u3281 0C84  
                                                u2801 071A  
                                                u3441 1DDE  
                                                u3601 1326  
                                                u2721 2244  
                                                u3530 211E  
                                                u3370 0DA0  
                                                u3290 0CAA  
                                                u2810 0768  
                                                u3450 1E0E  
                                                u3610 134C  
                                                u2730 2268  
                                                u3531 2118  
                                                u3371 0D9A  
                                                u3291 0CA4  
                                                u2811 0762  
                                                u3451 1E08  
                                                u3611 1346  
                                                u2731 2262  
                                                u2900 0918  
                                                u2820 07E6  
                                                u2740 0630  
                                                u3540 204E  
                                                u3380 1CD8  
                                                u3460 1E40  
                                                u3700 1462  
                                                u3620 1376  
                                                u2901 0912  
                                                u2821 07E0  
                                                u2741 062A  
                                                u3541 2048  
                                                u3381 1CD2  
                                                u3461 1E3A  
                                                u3701 145C  
                                                u3621 1370  
                                                u2910 0936  
                                                u2830 080C  
                                                u2750 0648  
                                                u3550 2076  
                                                u3390 1D02  
                                                u3470 1E60  
                                                u3710 1476  
                                                u3630 138A  
                                                u2911 0930  
                                                u2831 0806  
                                                u2751 0642  
                                                u3551 2070  
                                                u3391 1CFC  
                                                u3471 1E5A  
                                                u3711 1470  
                                                u3631 1384  
                                                u3560 238E  
                                                u2920 0950  
                                                u2840 083E  
                                                u2760 065C  
                                                u3480 1E72  
                                                u3800 10A0  
                                                u3720 2318  
                                                u3640 13AA  
                                                u3561 2388  
                                                u2921 094A  
                                                u2841 0838  
                                                u2761 0656  
                                                u3481 1E6C  
                                                u3801 109A  
                                                u3721 2312  
                                                u3641 13A4  
                                                u3570 2362  
                                                u2930 096E  
                                                u2850 086A  
                                                u2770 06AA  
                                                u3490 1EA0  
                                                u3730 232E  
                                                u3650 13D4  
                                                u3810 221A  
                                                u3571 235C  
                                                u2931 0968  
                                                u2851 0864  
                                                u2771 06A4  
                                                u3491 1E9A  
                                                u3731 2328  
                                                u3651 13CE  
                                                u3811 2214  
                                                u2940 09BC  
                                                u2860 0884  
                                                u2780 06C2  
                                                u3660 13E8  
                                                u3580 12F8  
                                                u3740 16C0  
                                                u3820 14D2  
                                                u2941 09B6  
                                                u2861 087E  
                                                u2781 06BC  
                                                u3661 13E2  
                                                u3581 12F2  
                                                u3741 16BA  
                                                u3821 14CC  
                                                u2950 09F2  
                                                u2870 08A8  
                                                u2790 06D6  
                                                u3750 0F7E  
                                                u3670 1408  
                                                u3590 1318  
                                                u3830 14FC  
                                                u2951 09EC  
                                                u2871 08A2  
                                                u2791 06D0  
                                                u3751 0F78  
                                                u3671 1402  
                                                u3591 1312  
                                                u3831 14F6  
                                                u2960 0A26  
                                                u2880 08D0  
                                                u3760 0F9A  
                                                u3680 143A  
                                                u3840 154C  
                                                u2961 0A20  
                                                u2881 08CA  
                                                u3761 0F94  
                                                u3681 1434  
                                                u3841 1546  
                                                u2890 08E6  
                                                u2970 194A  
                                                u3770 0FC2  
                                                u3690 144E  
                                                u3850 156C  
                                         main@newData 00F5  
                                                u2891 08E0  
                                                u2971 1944  
                                                u3771 0FBC  
                                                u3691 1448  
                                                u3851 1566  
                                                u2980 1986  
                                                u3780 101C  
                                                u3860 15B4  
                                                u3781 1016  
                                                u3861 15AE  
                                                u2990 19B8  
                                                u3790 1074  
                                                u3870 1618  
                                                u2991 19B2  
                                                u3791 106E  
                                                u3871 1612  
                                                u2985 197A  
                                                i2l81 2490  
                                                i2l87 253A  
                                                _TMR0 000FD6  
                                                _TMR2 000FCC  
                                 __end_ofi2_storeData 1930  
                                                _main 1492  
                                                _maxX 0092  
                                                _maxY 0090  
                                __end_ofi2_printError 1C9E  
                                                fsr2h 000FDA  
                                                indf2 000FDF  
                                                fsr1l 000FE1  
                                                fsr2l 000FD9  
                                                btemp 006E  
                                                prodh 000FF4  
                                                prodl 000FF3  
                                                start 01A4  
                                     ___fldiv@new_exp 0031  
                                        ___param_bank 000000  
                                     ??_whatsTM0Limit 0001  
                                               ??_isr 000B  
                                        ?_executeData 0001  
                                     executeData@data 00EF  
                                       ___fltol@sign1 0041  
                                               ?_main 0001  
                                     __end_of___fldiv 0A44  
                                     __end_of___fltol 1A66  
                                               i2l401 2512  
                                               i2l404 2508  
                                               i2l253 2444  
                                               i2l254 2446  
                                               i2l621 2542  
                                               i2l527 254A  
                                               i2l560 2286  
                                               i2l624 24FE  
                                               i2l474 018C  
                                               i2l555 1C98  
                                               i2l627 249E  
                                               i2l564 22B8  
                                               i2l585 18A4  
                                               i2l588 192A  
                                rotateObj@rotSequence 0080  
                                               _SPBRG 000FAF  
                                               _TRISA 000F92  
                                               _TRISB 000F93  
                                               _TRISC 000F94  
                                               _TRISD 000F95  
                                               _TXREG 000FAD  
                                     __end_of_getData 2478  
                                     i2storeData@data 000A  
                                     __end_of_initADC 23E6  
                                        ?_newSequence 0001  
                                     __end_of_liftArm 213A  
                                     __end_of_readSeq 2526  
                                        stepMade@temp 0014  
                                               tablat 000FF5  
                                      i2uartTx@length 0003  
                                     __end_of_stopADC 2536  
                                               ttemp5 006F  
                                               ttemp6 0072  
                                               ttemp7 0076  
                                               status 000FD8  
                                               wtemp8 006F  
                                    __end_ofi2_uartTx 22BC  
                                       ?_increaseStep 0001  
                                     __initialization 213A  
                              __size_of_initPinMotors 0026  
                                        __end_of_main 163C  
                            resetPosition@keepMovingX 0015  
                            resetPosition@keepMovingY 0016  
                            resetPosition@keepMovingZ 0017  
                                              ??_main 00F2  
                                       __activetblptr 000002  
                                         i2_storeData 17B6  
                                         isr@tm0Count 0063  
                                        ?_setThermRel 0001  
                                              _ADRESH 000FC4  
                                              _ADRESL 000FC3  
                                        ?_moveToPoint 0015  
                                              i2l3001 1B8A  
                                              i2l3011 1BF8  
                                              i2l3003 1BA0  
                                              i2l3013 1C0E  
                                              i2l3005 1BB6  
                                              i2l3015 1C24  
                                              i2l3007 1BCC  
                                              i2l3009 1BE2  
                                              i2l3019 1C3A  
                                              i2l3109 243E  
                                              i2l2175 250E  
                                              i2l2185 2540  
                                              i2l2177 2504  
                                              i2l3321 17CA  
                                              i2l2179 2548  
                                              i2l2187 24FA  
                                              i2l3323 17D0  
                                              i2l3331 17EE  
                                              i2l3317 2496  
                                              i2l3341 18AE  
                                              i2l3325 17DA  
                                              i2l3333 1824  
                                              i2l2711 2270  
                                              i2l3351 18E8  
                                              i2l3343 18BE  
                                              i2l3335 183C  
                                              i2l3327 17E4  
                                              i2l3319 17BA  
                                              i2l3431 0030  
                                              i2l2713 2278  
                                              i2l3345 18D2  
                                              i2l3337 1844  
                                              i2l3433 0032  
                                              i2l3441 0058  
                                              i2l2715 229A  
                                              i2l3347 18D6  
                                              i2l3339 189E  
                                              i2l3355 18F4  
                                              i2l3451 009E  
                                              i2l3443 006C  
                                              i2l3435 004E  
                                              i2l3427 001C  
                                              i2l2717 22A0  
                                              i2l3349 18DE  
                                              i2l3461 00CC  
                                              i2l3453 00A0  
                                              i2l3445 006E  
                                              i2l3437 0050  
                                              i2l3429 002E  
                                              i2l3463 00E0  
                                              i2l3455 00A4  
                                              i2l3471 0100  
                                              i2l3447 0086  
                                              i2l3439 0054  
                                              i2l1881 2538  
                                              i2l3481 0168  
                                              i2l3473 0114  
                                              i2l3465 00F2  
                                              i2l3457 00C2  
                                              i2l3449 008A  
                                              i2l3475 011C  
                                              i2l3483 016C  
                                              i2l3467 00F6  
                                              i2l3459 00CA  
                                              i2l1877 2488  
                                              i2l3485 0180  
                                              i2l3477 0142  
                                              i2l3469 00FA  
                                              i2l3487 0186  
                                              i2l3479 014E  
                                              i2l4561 1C50  
                                              i2l4557 1804  
                                              i2l4559 190A  
                                              i2l2999 1B86  
                                              _RCREG1 000FAE  
                                        ?_setTouchRel 0001  
                                    __end_of_abortAll 244E  
                                    __end_of___xxtofl 12B6  
                                    __end_of_clearTM0 2486  
                                    _errString_PointZ 0100  
                                      ??_increaseStep 0001  
                                    __end_of_maxFeedX 0611  
                                    __end_of_maxFeedY 0610  
                                           ??___fldiv 0028  
                                           ??___fltol 003D  
                                    __end_of_tim0Init 243C  
                                    __end_of_tim1Init 245C  
                                    __end_of_tim2Init 242A  
                                              clear_0 21A0  
                                              clear_1 21AC  
                                           ??_getData 0014  
                                              _uartTx 2220  
                                           ??_initADC 0012  
                                           ??_liftArm 0015  
                                           ??_readSeq 0012  
                                        __pdataCOMRAM 0067  
                               __end_of_resetPosition 1492  
                                        __mediumconst 0000  
                                              tblptrh 000FF7  
                                              tblptrl 000FF6  
                                              tblptru 000FF8  
                                        ?_returnTherm 0012  
                                    __end_of_startADC 24DA  
                                    __end_of_stepMade 2418  
                                       _initPinMotors 239A  
                                        ?_returnTouch 0012  
                                           ??_stopADC 0012  
                               __size_ofi2_printError 011C  
                                    __end_of_writeTM0 2494  
                           __size_of_resetNewSequence 000A  
                                        ___xxtofl@arg 001C  
                                        ___xxtofl@exp 001B  
                                        ___xxtofl@val 0012  
                                          __accesstop 0080  
                             __end_of__initialization 21B2  
                                        _dataSequence 00CA  
                                       ___rparam_used 000001  
                                          ___fltol@f1 0039  
                                        ?_stepCounter 0012  
                                         i2uartTx@ptr 0001  
                                      __pcstackCOMRAM 0001  
                                        __newSequence 005F  
                                        __pidataBANK0 22BC  
                                        __pidataBANK1 1EB2  
                                     isr@single_cycle 0051  
                                __size_of_executeData 0300  
                                        i2_printError 1B82  
                                        ?_touchObject 0001  
                                      _errString_ZEND 015E  
                                      _errString_Feed 0094  
                                      ?_initPinMotors 0001  
                                           ?i2_uartTx 0001  
                                          __pbssBANK0 00CA  
                                __size_of_newSequence 0008  
                                          _feeder1Pos 060D  
                                          _feeder2Pos 060B  
                                          _feeder3Pos 0609  
                             __size_of_getNewSequence 000E  
                                          _fatalError 2546  
                                  __size_of_reduceSeq 0008  
                                  __size_of_retPeriod 000E  
                                      _touch_pressure 0607  
                                  __size_of_shiftData 0060  
                                  __size_of_resetStep 000A  
                                             _ADC_res 0053  
                                             ?_uartTx 0012  
                                           ?_abortAll 0001  
                                           ?___xxtofl 0012  
                                __end_of_increaseStep 2546  
                                           ?_clearTM0 0001  
                                          ??i2_uartTx 0004  
                                  __size_of_rotateObj 00DA  
                                   _errString_Command 00B2  
                                  __size_of_usartInit 001E  
                              __size_of_interruptInit 003C  
                                __size_of_setThermRel 000A  
                                  __size_of_storeData 017A  
                                           ?_tim0Init 0001  
                                           ?_tim1Init 0001  
                                           ?_tim2Init 0012  
                                __size_of_moveToPoint 037A  
                                storeData@receivedMex 0043  
                                     _newSequenceData 00DE  
                                __size_of_setTouchRel 000A  
                                             __Hparam 0000  
                                             __Lparam 0000  
                              __end_of_touch_pressure 0609  
                                             ___fldiv 0612  
                                           ?_startADC 0001  
                                           ?_stepMade 0012  
                                             ___fltol 1930  
                                        __psmallconst 0600  
                                             __pcinit 213A  
                               __end_of_whatsTM0Limit 253E  
                                             _getData 246A  
                                             __ramtop 0600  
                                           ?_writeTM0 0001  
                                          _pickObject 236E  
                                             __ptext0 1492  
                                             __ptext1 23E6  
                                             __ptext2 2418  
                                             __ptext3 244E  
                                             __ptext4 242A  
                                             __ptext5 163C  
                                             __ptext6 1A66  
                                             __ptext7 2220  
                                             __ptext8 21C0  
                                             __ptext9 12B6  
                                     __size_of_uartTx 004E  
                                           _T0CONbits 000FD5  
                                             _initADC 23C0  
                                           _T1CONbits 000FCD  
                                     ??_initPinMotors 0012  
                                             _liftArm 2084  
                                           _T2CONbits 000FCA  
                                          ??_abortAll 0008  
                                             _readSeq 251E  
                                        __size_of_isr 019C  
                                          ??___xxtofl 0016  
                                        ?i2_storeData 0001  
                                          ??_clearTM0 0012  
                                          _motCounter 0067  
                                             _pwmStep 005C  
                                             _stopADC 252E  
                                   __end_of_reduceSeq 251E  
                                   __end_of_retPeriod 24A2  
                                          _releaseObj 2342  
                                __size_of_returnTherm 000C  
                                end_of_initialization 21B2  
                                __size_of_returnTouch 000C  
                                    _resetNewSequence 24C6  
                                    rotateObj@totStep 00E9  
                                   __end_of_shiftData 2220  
                                             isr@temp 0011  
                                   __end_of_resetStep 24F8  
                                          ??_tim0Init 0012  
                                       __Lmediumconst 0000  
                                          ??_tim1Init 0012  
                                          ??_tim2Init 0014  
                                    storeData@command 005D  
                                    storeData@counter 005E  
                                          _resetTherm 24E4  
                                          _resetTouch 24DA  
                                             uartTx@i 0015  
                                         ?_fatalError 0001  
                                           _RCSTAbits 000FAB  
                                             postdec1 000FE5  
                                   __end_of_rotateObj 2084  
                                             postinc0 000FEE  
                                             postinc1 000FE6  
                                             postinc2 000FDE  
                                          ??_startADC 0012  
                                          ??_stepMade 0014  
                                __size_of_stepCounter 000C  
                                       _interruptInit 2306  
                                   __end_of_usartInit 2404  
                                   __end_of_storeData 17B6  
                          __end_ofrotateObj@stepAngle 0605  
                                          ??_writeTM0 0001  
                                           _PORTDbits 000F83  
                                          _printError 1A66  
                                           _PORTEbits 000F84  
                                 i2printError@errCode 0007  
                                          _toggleStep 24F8  
                                       ___xxtofl@sign 001A  
                                           _TRISCbits 000F94  
                                           _TRISDbits 000F95  
                                           _TRISEbits 000F96  
                                         ___fldiv@grs 0033  
                                         ___fldiv@rem 002C  
                                __size_of_touchObject 010C  
                                          _stepToggle 005B  
                                          _touchTherm 1DAA  
                                           _TXSTAbits 000FAC  
                                      _getNewSequence 245C  
                                      ?_interruptInit 0001  
                                       __pidataCOMRAM 254E  
                               __size_of_increaseStep 0008  
                                         ?_pickObject 0001  
                                         __fatalError 0060  
                                      __end_of_uartTx 226E  
                                       moveToPoint@x1 0015  
                                       moveToPoint@x2 0019  
                                       moveToPoint@y1 0017  
                                       moveToPoint@y2 001B  
                                 start_initialization 213A  
                                           i2uartTx@i 0004  
                                         __end_of_isr 01A4  
                                 __size_of_fatalError 0008  
                                         ?_releaseObj 0001  
                                   __size_ofi2_uartTx 004E  
                              __end_of_getNewSequence 246A  
                                     _errString_Fatal 01AF  
                                     _errString_Bound 01D6  
                                         ?_resetTherm 0001  
                                     _errString_Reset 0187  
                                         ?_resetTouch 0001  
                                     _errString_Point 0135  
                                        _increaseStep 253E  
                              __size_of_resetPosition 01DC  
                                       ??_executeData 00ED  
                                         __pdataBANK0 0080  
                                         __pdataBANK1 0100  
                                         _dataCounter 0061  
                                            ??_uartTx 0015  
                              moveToPoint@keepMovingX 0021  
                              moveToPoint@keepMovingY 0022  
                                         ?_printError 0001  
                                           ___fldiv@a 0024  
                                           ___fldiv@b 0020  
                                      _therm_pressure 0605  
                                         ?_toggleStep 0001  
                                         __pbssCOMRAM 0043  
                                       __pcstackBANK0 00E6  
                                       ??_newSequence 0012  
                                   __size_of_abortAll 0012  
                                   __size_of___xxtofl 01F8  
                                __size_ofi2_storeData 017A  
                                   __size_of_clearTM0 000E  
                                     ?_getNewSequence 0012  
                                         ?_touchTherm 0001  
                                 __size_of_pickObject 002C  
                                  executeData@errCode 00F1  
                                   __size_of_tim0Init 0012  
                                   __size_of_tim1Init 000E  
                                   __size_of_tim2Init 0012  
                                     ??_interruptInit 0012  
                                           __pintcode 0008  
                                            ?___fldiv 0020  
                                            ?___fltol 0039  
                            __end_of_resetNewSequence 24D0  
                                 __size_of_releaseObj 002C  
                                       storeData@data 001B  
                                            ?_getData 0012  
                                   __size_of_startADC 000A  
                                   __size_of_stepMade 0014  
                              __end_of_therm_pressure 0607  
                                            ?_initADC 0001  
                                         __smallconst 0600  
                                            ?_liftArm 0001  
                                            ?_readSeq 0001  
                                   __size_of_writeTM0 000E  
                                 __end_of_executeData 10BE  
                                          shiftData@i 0014  
                                 __size_of_resetTherm 000A  
                                           _newFeeder 0055  
                                       _resetPosition 12B6  
                                 __size_of_resetTouch 000A  
                                       ??_setThermRel 0001  
                                            ?_stopADC 0001  
                                       ??_moveToPoint 001D  
                                       ??_setTouchRel 0001  
                                 __end_of_newSequence 252E  
                                           _reduceSeq 2516  
                                            _LATAbits 000F89  
                                            _LATBbits 000F8A  
                                           _retPeriod 2494  
                                            _LATCbits 000F8B  
                                            _LATDbits 000F8C  
                                 __size_of_printError 011C  
                                            _IPR1bits 000F9F  
                                            _PIE1bits 000F9D  
                                           _shiftData 21C0  
                                            i2u260_40 002C  
                                            i2u260_41 0026  
                                           _resetStep 24EE  
                                            i2u253_40 183A  
                                            i2u261_40 004C  
                                            i2u253_41 1834  
                                            i2u261_41 0046  
                                            i2u270_40 0166  
                                            i2u262_40 006A  
                                            i2u270_41 0160  
                                            i2u262_41 0064  
                                            i2u183_40 2298  
                                            i2u271_40 017E  
                                            i2u263_40 0084  
                                            i2u183_41 2292  
                                            i2u271_41 0178  
                                            i2u263_41 007E  
                                            i2u184_40 22B6  
                                            i2u264_40 009C  
                                            i2u184_41 22B0  
                                            i2u264_41 0096  
                                            i2u265_40 00C0  
                                            i2u265_41 00BA  
                                            _PIR1bits 000F9E  
                                            i2u266_40 00DE  
                                            i2u266_41 00D8  
                                            i2u267_40 00F0  
                                            i2u267_41 00EA  
                                            i2u268_40 0112  
                                            i2u268_41 010C  
                                            i2u269_40 0140  
                                            i2u269_41 013A  
                                 __size_of_toggleStep 000A  
                                        ??_fatalError 0001  
                                           _posVector 004C  
                                            _RCONbits 000FD0  
                                           _therm_rel 0064  
                                           _pwmPeriod 004F  
                                           _rotateObj 1FAA  
                                          _ADCON0bits 000FC2  
                                          _ADCON1bits 000FC1  
                                 __size_of_touchTherm 0108  
                                           _usartInit 23E6  
                                           _touch_rel 0065  
                                  __end_of_feeder1Pos 060F  
                                  __end_of_feeder2Pos 060D  
                                  __end_of_feeder3Pos 060B  
                                           _storeData 163C  
                                      ?_resetPosition 0001  
                               __end_of_initPinMotors 23C0  
                                       ??_returnTherm 0014  
                                       ??_returnTouch 0014  
                                            i2_uartTx 226E  
                                           copy_data0 214E  
                                           copy_data1 216E  
                                           copy_data2 218E  
                                  __end_of_fatalError 254E  
                                  rotateObj@stepAngle 0601  
                                          ?_reduceSeq 0001  
                                          ?_retPeriod 0001  
                                          rotateObj@i 00EB  
                              __size_of_whatsTM0Limit 0008  
                                 __end_of_setThermRel 2516  
                                 __end_of_moveToPoint 0DBE  
                                   printError@errCode 0018  
                                          ?_shiftData 0001  
                                       ??_stepCounter 0014  
                                            __Hrparam 0000  
                                          ?_resetStep 0001  
                                 __end_of_setTouchRel 250C  
                                            __Lrparam 0000  
                                    __size_of___fldiv 0432  
                                    __size_of___fltol 0136  
                                         _executeData 0DBE  
                                        ??_pickObject 0015  
                                          ?_rotateObj 0001  
                            moveToPoint@MOT1Direction 001F  
                                       ?i2_printError 0001  
                                    __size_of_getData 000E  
                            moveToPoint@MOT2Direction 0020  
                                       ??_touchObject 0015  
                                            _abortAll 243C  
                                          ?_usartInit 0001  
                                    __size_of_initADC 0026  
                                            ___xxtofl 10BE  
                                    __size_of_liftArm 00B6  
                                          ?_storeData 0001  
                                            _clearTM0 2478  
                                    __size_of_readSeq 0008  
                                  storeData@mexLength 006D  
                                            _tm0Error 0059  
                                            _tm0Limit 0066  
                                         _newSequence 2526  
                                            __ptext10 24C6  
                                            __ptext11 2516  
                                            __ptext20 24A2  
                                            __ptext12 251E  
                                            __ptext21 1C9E  
                                            __ptext13 2526  
                                            __ptext30 0612  
                                            __ptext22 252E  
                                            __ptext14 2306  
                                            __ptext31 2342  
                                            __ptext23 24D0  
                                            __ptext15 239A  
                                            __ptext32 236E  
                                            __ptext24 24AE  
                                            __ptext16 23C0  
                                            __ptext41 17B6  
                                            __ptext33 0A44  
                                            __ptext25 24DA  
                                            __ptext17 245C  
                                            __ptext50 243C  
                                            __ptext42 2486  
                                            __ptext34 24BA  
                                            __ptext26 24E4  
                                            __ptext18 0DBE  
                                            __ptext51 1B82  
                                            __ptext43 2536  
                                            __ptext35 2084  
                                            __ptext27 1FAA  
                                            __ptext19 1DAA  
                                            __ptext52 226E  
                                            __ptext44 24F8  
                                            __ptext36 2404  
                                            __ptext28 10BE  
                                            __ptext45 2502  
                                            __ptext37 24EE  
                                            __ptext29 1930  
                                            __ptext46 250C  
                                            __ptext38 246A  
                                            __ptext47 2494  
                                            __ptext39 2478  
                                            __ptext48 253E  
                                            __ptext49 2546  
                                        ??_releaseObj 0015  
                                    __size_of_stopADC 0008  
                                            _maxFeedX 0610  
                                            _maxFeedY 060F  
                                 __end_of_returnTherm 24AE  
                                 __end_of_returnTouch 24BA  
                                            _tim0Init 242A  
                                            _tim1Init 244E  
                                            _tim2Init 2418  
                                       __size_of_main 01AA  
                                  __end_of_pickObject 239A  
                                        ??_resetTherm 0012  
                                        ??_resetTouch 0012  
                                           uartTx@ptr 0012  
                                            _rotAngle 0057  
                                     isr@completeStep 0062  
                                            int$flags 006E  
                                            _startADC 24D0  
                                            _stepMade 2404  
                                            _stepMot1 008C  
                                            _stepMot2 0088  
                                            _stepMot3 0084  
                                 __end_of_stepCounter 24C6  
                                   rotateObj@rotAngle 00E8  
                                      ??i2_printError 0005  
                                  __end_of_releaseObj 236E  
                                            _writeTM0 2486  
                                        ??_printError 0016  
                                       _whatsTM0Limit 2536  
                                     ??_resetPosition 0015  
                                  tim2Init@_pwmPeriod 0012  
                                          _INTCONbits 000FF2  
                                        ??_toggleStep 0001  
                                    ??_getNewSequence 0014  
                                  __end_of_resetTherm 24EE  
                                  __end_of_resetTouch 24E4  
                                         _setThermRel 250C  
                                        uartTx@length 0014  
                                         _moveToPoint 0A44  
                                 __end_of_touchObject 1DAA  
                                            intlevel2 2556  
                                        ??_touchTherm 0015  
                                         _setTouchRel 2502  
                                         ??_reduceSeq 0012  
                                         ??_retPeriod 0003  
                                          _RCSTA1bits 000FAB  
                                  __end_of_printError 1B82  
                                         ??_shiftData 0012  
                                         ??_resetStep 0012  
                                  __end_of_toggleStep 2502  
                                   ?_resetNewSequence 0001  
                                      ?_whatsTM0Limit 0001  
                                         ??_rotateObj 00E6  
                                  ??_resetNewSequence 0012  
                                  __end_of_touchTherm 1EB2  
                                         ??_usartInit 0012  
                                       ??i2_storeData 0008  
                                         ??_storeData 0019  
                                         _returnTherm 24A2  
                                         _returnTouch 24AE  
                                         _stepCounter 24BA  
