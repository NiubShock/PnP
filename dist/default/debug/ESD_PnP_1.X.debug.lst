

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Sat Feb 06 12:04:28 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    74                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    75                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    76                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    77                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    78  0000                     
    79                           ; Version 2.20
    80                           ; Generated 12/02/2020 GMT
    81                           ; 
    82                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC18F452 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     
   114                           	psect	idataCOMRAM
   115  0025BC                     __pidataCOMRAM:
   116                           	callstack 0
   117                           
   118                           ;initializer for _maxY
   119  0025BC  03E8               	dw	1000
   120                           
   121                           ;initializer for _maxX
   122  0025BE  03E8               	dw	1000
   123                           
   124                           ;initializer for storeData@mexLength
   125  0025C0  05                 	db	5
   126                           
   127                           	psect	idataBANK0
   128  0022A0                     __pidataBANK0:
   129                           	callstack 0
   130                           
   131                           ;initializer for rotateObj@rotSequence
   132  0022A0  09                 	db	9
   133  0022A1  03                 	db	3
   134  0022A2  06                 	db	6
   135  0022A3  0C                 	db	12
   136                           
   137                           ;initializer for _errString_Bound
   138  0022A4  45                 	db	69
   139  0022A5  72                 	db	114
   140  0022A6  72                 	db	114
   141  0022A7  6F                 	db	111
   142  0022A8  72                 	db	114
   143  0022A9  2C                 	db	44
   144  0022AA  20                 	db	32
   145  0022AB  70                 	db	112
   146  0022AC  6F                 	db	111
   147  0022AD  69                 	db	105
   148  0022AE  6E                 	db	110
   149  0022AF  74                 	db	116
   150  0022B0  20                 	db	32
   151  0022B1  6F                 	db	111
   152  0022B2  75                 	db	117
   153  0022B3  74                 	db	116
   154  0022B4  73                 	db	115
   155  0022B5  69                 	db	105
   156  0022B6  64                 	db	100
   157  0022B7  65                 	db	101
   158  0022B8  20                 	db	32
   159  0022B9  62                 	db	98
   160  0022BA  6F                 	db	111
   161  0022BB  75                 	db	117
   162  0022BC  6E                 	db	110
   163  0022BD  64                 	db	100
   164  0022BE  61                 	db	97
   165  0022BF  72                 	db	114
   166  0022C0  69                 	db	105
   167  0022C1  65                 	db	101
   168  0022C2  73                 	db	115
   169  0022C3  00                 	db	0
   170                           
   171                           ;initializer for _errString_Feed
   172  0022C4  45                 	db	69
   173  0022C5  72                 	db	114
   174  0022C6  72                 	db	114
   175  0022C7  6F                 	db	111
   176  0022C8  72                 	db	114
   177  0022C9  2C                 	db	44
   178  0022CA  20                 	db	32
   179  0022CB  66                 	db	102
   180  0022CC  65                 	db	101
   181  0022CD  65                 	db	101
   182  0022CE  64                 	db	100
   183  0022CF  20                 	db	32
   184  0022D0  6C                 	db	108
   185  0022D1  69                 	db	105
   186  0022D2  6E                 	db	110
   187  0022D3  65                 	db	101
   188  0022D4  20                 	db	32
   189  0022D5  6E                 	db	110
   190  0022D6  6F                 	db	111
   191  0022D7  74                 	db	116
   192  0022D8  20                 	db	32
   193  0022D9  64                 	db	100
   194  0022DA  65                 	db	101
   195  0022DB  66                 	db	102
   196  0022DC  69                 	db	105
   197  0022DD  6E                 	db	110
   198  0022DE  65                 	db	101
   199  0022DF  64                 	db	100
   200  0022E0  00                 	db	0
   201                           
   202                           ;initializer for _errString_Command
   203  0022E1  43                 	db	67
   204  0022E2  6F                 	db	111
   205  0022E3  6D                 	db	109
   206  0022E4  6D                 	db	109
   207  0022E5  61                 	db	97
   208  0022E6  6E                 	db	110
   209  0022E7  64                 	db	100
   210  0022E8  20                 	db	32
   211  0022E9  6E                 	db	110
   212  0022EA  6F                 	db	111
   213  0022EB  74                 	db	116
   214  0022EC  20                 	db	32
   215  0022ED  72                 	db	114
   216  0022EE  65                 	db	101
   217  0022EF  63                 	db	99
   218  0022F0  6F                 	db	111
   219  0022F1  67                 	db	103
   220  0022F2  6E                 	db	110
   221  0022F3  69                 	db	105
   222  0022F4  7A                 	db	122
   223  0022F5  65                 	db	101
   224  0022F6  64                 	db	100
   225  0022F7  00                 	db	0
   226                           
   227                           	psect	idataBANK1
   228  001EDC                     __pidataBANK1:
   229                           	callstack 0
   230                           
   231                           ;initializer for _errString_PointZ
   232  001EDC  45                 	db	69
   233  001EDD  72                 	db	114
   234  001EDE  72                 	db	114
   235  001EDF  6F                 	db	111
   236  001EE0  72                 	db	114
   237  001EE1  2C                 	db	44
   238  001EE2  20                 	db	32
   239  001EE3  74                 	db	116
   240  001EE4  69                 	db	105
   241  001EE5  6D                 	db	109
   242  001EE6  65                 	db	101
   243  001EE7  20                 	db	32
   244  001EE8  65                 	db	101
   245  001EE9  78                 	db	120
   246  001EEA  63                 	db	99
   247  001EEB  65                 	db	101
   248  001EEC  65                 	db	101
   249  001EED  64                 	db	100
   250  001EEE  65                 	db	101
   251  001EEF  64                 	db	100
   252  001EF0  20                 	db	32
   253  001EF1  74                 	db	116
   254  001EF2  6F                 	db	111
   255  001EF3  20                 	db	32
   256  001EF4  72                 	db	114
   257  001EF5  65                 	db	101
   258  001EF6  61                 	db	97
   259  001EF7  63                 	db	99
   260  001EF8  68                 	db	104
   261  001EF9  20                 	db	32
   262  001EFA  74                 	db	116
   263  001EFB  68                 	db	104
   264  001EFC  65                 	db	101
   265  001EFD  20                 	db	32
   266  001EFE  65                 	db	101
   267  001EFF  6E                 	db	110
   268  001F00  64                 	db	100
   269  001F01  20                 	db	32
   270  001F02  6F                 	db	111
   271  001F03  66                 	db	102
   272  001F04  20                 	db	32
   273  001F05  74                 	db	116
   274  001F06  68                 	db	104
   275  001F07  65                 	db	101
   276  001F08  20                 	db	32
   277  001F09  5A                 	db	90
   278  001F0A  20                 	db	32
   279  001F0B  41                 	db	65
   280  001F0C  78                 	db	120
   281  001F0D  69                 	db	105
   282  001F0E  73                 	db	115
   283  001F0F  00                 	db	0
   284                           
   285                           ;initializer for _errString_Point
   286  001F10  45                 	db	69
   287  001F11  72                 	db	114
   288  001F12  72                 	db	114
   289  001F13  6F                 	db	111
   290  001F14  72                 	db	114
   291  001F15  2C                 	db	44
   292  001F16  20                 	db	32
   293  001F17  74                 	db	116
   294  001F18  69                 	db	105
   295  001F19  6D                 	db	109
   296  001F1A  65                 	db	101
   297  001F1B  20                 	db	32
   298  001F1C  65                 	db	101
   299  001F1D  78                 	db	120
   300  001F1E  63                 	db	99
   301  001F1F  65                 	db	101
   302  001F20  65                 	db	101
   303  001F21  64                 	db	100
   304  001F22  65                 	db	101
   305  001F23  64                 	db	100
   306  001F24  20                 	db	32
   307  001F25  74                 	db	116
   308  001F26  6F                 	db	111
   309  001F27  20                 	db	32
   310  001F28  72                 	db	114
   311  001F29  65                 	db	101
   312  001F2A  61                 	db	97
   313  001F2B  63                 	db	99
   314  001F2C  68                 	db	104
   315  001F2D  20                 	db	32
   316  001F2E  74                 	db	116
   317  001F2F  68                 	db	104
   318  001F30  65                 	db	101
   319  001F31  20                 	db	32
   320  001F32  70                 	db	112
   321  001F33  6F                 	db	111
   322  001F34  69                 	db	105
   323  001F35  6E                 	db	110
   324  001F36  74                 	db	116
   325  001F37  00                 	db	0
   326                           
   327                           ;initializer for _errString_ZEND
   328  001F38  45                 	db	69
   329  001F39  72                 	db	114
   330  001F3A  72                 	db	114
   331  001F3B  6F                 	db	111
   332  001F3C  72                 	db	114
   333  001F3D  2C                 	db	44
   334  001F3E  20                 	db	32
   335  001F3F  6E                 	db	110
   336  001F40  6F                 	db	111
   337  001F41  20                 	db	32
   338  001F42  6F                 	db	111
   339  001F43  62                 	db	98
   340  001F44  6A                 	db	106
   341  001F45  65                 	db	101
   342  001F46  63                 	db	99
   343  001F47  74                 	db	116
   344  001F48  20                 	db	32
   345  001F49  72                 	db	114
   346  001F4A  65                 	db	101
   347  001F4B  6C                 	db	108
   348  001F4C  65                 	db	101
   349  001F4D  76                 	db	118
   350  001F4E  61                 	db	97
   351  001F4F  74                 	db	116
   352  001F50  65                 	db	101
   353  001F51  64                 	db	100
   354  001F52  20                 	db	32
   355  001F53  61                 	db	97
   356  001F54  6C                 	db	108
   357  001F55  6F                 	db	111
   358  001F56  6E                 	db	110
   359  001F57  67                 	db	103
   360  001F58  20                 	db	32
   361  001F59  5A                 	db	90
   362  001F5A  20                 	db	32
   363  001F5B  41                 	db	65
   364  001F5C  78                 	db	120
   365  001F5D  69                 	db	105
   366  001F5E  73                 	db	115
   367  001F5F  00                 	db	0
   368                           
   369                           ;initializer for _errString_Reset
   370  001F60  45                 	db	69
   371  001F61  72                 	db	114
   372  001F62  72                 	db	114
   373  001F63  6F                 	db	111
   374  001F64  72                 	db	114
   375  001F65  2C                 	db	44
   376  001F66  20                 	db	32
   377  001F67  74                 	db	116
   378  001F68  69                 	db	105
   379  001F69  6D                 	db	109
   380  001F6A  65                 	db	101
   381  001F6B  20                 	db	32
   382  001F6C  65                 	db	101
   383  001F6D  78                 	db	120
   384  001F6E  63                 	db	99
   385  001F6F  65                 	db	101
   386  001F70  65                 	db	101
   387  001F71  64                 	db	100
   388  001F72  65                 	db	101
   389  001F73  64                 	db	100
   390  001F74  20                 	db	32
   391  001F75  74                 	db	116
   392  001F76  6F                 	db	111
   393  001F77  20                 	db	32
   394  001F78  72                 	db	114
   395  001F79  65                 	db	101
   396  001F7A  73                 	db	115
   397  001F7B  65                 	db	101
   398  001F7C  74                 	db	116
   399  001F7D  20                 	db	32
   400  001F7E  70                 	db	112
   401  001F7F  6F                 	db	111
   402  001F80  73                 	db	115
   403  001F81  69                 	db	105
   404  001F82  74                 	db	116
   405  001F83  69                 	db	105
   406  001F84  6F                 	db	111
   407  001F85  6E                 	db	110
   408  001F86  00                 	db	0
   409                           
   410                           ;initializer for _errString_Fatal
   411  001F87  46                 	db	70
   412  001F88  61                 	db	97
   413  001F89  74                 	db	116
   414  001F8A  61                 	db	97
   415  001F8B  6C                 	db	108
   416  001F8C  20                 	db	32
   417  001F8D  45                 	db	69
   418  001F8E  72                 	db	114
   419  001F8F  72                 	db	114
   420  001F90  6F                 	db	111
   421  001F91  72                 	db	114
   422  001F92  2C                 	db	44
   423  001F93  20                 	db	32
   424  001F94  70                 	db	112
   425  001F95  6C                 	db	108
   426  001F96  65                 	db	101
   427  001F97  61                 	db	97
   428  001F98  73                 	db	115
   429  001F99  65                 	db	101
   430  001F9A  20                 	db	32
   431  001F9B  72                 	db	114
   432  001F9C  65                 	db	101
   433  001F9D  73                 	db	115
   434  001F9E  65                 	db	101
   435  001F9F  74                 	db	116
   436  001FA0  20                 	db	32
   437  001FA1  74                 	db	116
   438  001FA2  68                 	db	104
   439  001FA3  65                 	db	101
   440  001FA4  20                 	db	32
   441  001FA5  64                 	db	100
   442  001FA6  65                 	db	101
   443  001FA7  76                 	db	118
   444  001FA8  69                 	db	105
   445  001FA9  63                 	db	99
   446  001FAA  65                 	db	101
   447  001FAB  21                 	db	33
   448  001FAC  00                 	db	0
   449                           
   450                           	psect	smallconst
   451  000600                     __psmallconst:
   452                           	callstack 0
   453  000600  00                 	db	0
   454  000601  FFAC               	dw	65452
   455  000603  3DB3               	dw	15795
   456  000605                     __end_ofrotateObj@stepAngle:
   457                           	callstack 0
   458  000605  0400               	dw	1024
   459  000607                     __end_of_therm_pressure:
   460                           	callstack 0
   461  000607  0200               	dw	512
   462  000609                     __end_of_touch_pressure:
   463                           	callstack 0
   464  000609                     _feeder3Pos:
   465                           	callstack 0
   466  000609  19                 	db	25
   467  00060A  19                 	db	25
   468  00060B                     __end_of_feeder3Pos:
   469                           	callstack 0
   470  00060B                     _feeder2Pos:
   471                           	callstack 0
   472  00060B  0F                 	db	15
   473  00060C  0F                 	db	15
   474  00060D                     __end_of_feeder2Pos:
   475                           	callstack 0
   476  00060D                     _feeder1Pos:
   477                           	callstack 0
   478  00060D  05                 	db	5
   479  00060E  05                 	db	5
   480  00060F                     __end_of_feeder1Pos:
   481                           	callstack 0
   482  0000                     _TMR0	set	4054
   483  0000                     _TXREG	set	4013
   484  0000                     _SPBRG	set	4015
   485  0000                     _TXSTAbits	set	4012
   486  0000                     _TRISCbits	set	3988
   487  0000                     _RCREG1	set	4014
   488  0000                     _ADRESH	set	4036
   489  0000                     _ADRESL	set	4035
   490  0000                     _PIR1bits	set	3998
   491  0000                     _IPR1bits	set	3999
   492  0000                     _ADCON0bits	set	4034
   493  0000                     _PIE1bits	set	3997
   494  0000                     _RCONbits	set	4048
   495  0000                     _INTCONbits	set	4082
   496  0000                     _RCSTAbits	set	4011
   497  0000                     _RCSTA1bits	set	4011
   498  0000                     _LATD	set	3980
   499  0000                     _PORTDbits	set	3971
   500  0000                     _TMR2	set	4044
   501  0000                     _PORTEbits	set	3972
   502  0000                     _T0CONbits	set	4053
   503  0000                     _T2CONbits	set	4042
   504  0000                     _LATDbits	set	3980
   505  0000                     _LATCbits	set	3979
   506  0000                     _LATBbits	set	3978
   507  0000                     _LATAbits	set	3977
   508  0000                     _TRISDbits	set	3989
   509  0000                     _TRISEbits	set	3990
   510  0000                     _TRISD	set	3989
   511  0000                     _TRISC	set	3988
   512  0000                     _TRISB	set	3987
   513  0000                     _TRISA	set	3986
   514  0000                     _ADCON1bits	set	4033
   515  00060F  00                 	db	0	; dummy byte at the end
   516  0000                     
   517                           ; #config settings
   518                           
   519                           	psect	cinit
   520  00205E                     __pcinit:
   521                           	callstack 0
   522  00205E                     start_initialization:
   523                           	callstack 0
   524  00205E                     __initialization:
   525                           	callstack 0
   526                           
   527                           ; Initialize objects allocated to BANK1 (209 bytes)
   528                           ; load TBLPTR registers with __pidataBANK1
   529  00205E  0EDC               	movlw	low __pidataBANK1
   530  002060  6EF6               	movwf	tblptrl,c
   531  002062  0E1E               	movlw	high __pidataBANK1
   532  002064  6EF7               	movwf	tblptrh,c
   533  002066  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   534  002068  6EF8               	movwf	tblptru,c
   535  00206A  EE01  F000         	lfsr	0,__pdataBANK1
   536  00206E  EE10 F0D1          	lfsr	1,209
   537  002072                     copy_data0:
   538  002072  0009               	tblrd		*+
   539  002074  CFF5 FFEE          	movff	tablat,postinc0
   540  002078  50E5               	movf	postdec1,w,c
   541  00207A  50E1               	movf	fsr1l,w,c
   542  00207C  E1FA               	bnz	copy_data0
   543                           
   544                           ; Initialize objects allocated to BANK0 (88 bytes)
   545                           ; load TBLPTR registers with __pidataBANK0
   546  00207E  0EA0               	movlw	low __pidataBANK0
   547  002080  6EF6               	movwf	tblptrl,c
   548  002082  0E22               	movlw	high __pidataBANK0
   549  002084  6EF7               	movwf	tblptrh,c
   550  002086  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   551  002088  6EF8               	movwf	tblptru,c
   552  00208A  EE00  F080         	lfsr	0,__pdataBANK0
   553  00208E  EE10 F058          	lfsr	1,88
   554  002092                     copy_data1:
   555  002092  0009               	tblrd		*+
   556  002094  CFF5 FFEE          	movff	tablat,postinc0
   557  002098  50E5               	movf	postdec1,w,c
   558  00209A  50E1               	movf	fsr1l,w,c
   559  00209C  E1FA               	bnz	copy_data1
   560                           
   561                           ; Initialize objects allocated to COMRAM (5 bytes)
   562                           ; load TBLPTR registers with __pidataCOMRAM
   563  00209E  0EBC               	movlw	low __pidataCOMRAM
   564  0020A0  6EF6               	movwf	tblptrl,c
   565  0020A2  0E25               	movlw	high __pidataCOMRAM
   566  0020A4  6EF7               	movwf	tblptrh,c
   567  0020A6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   568  0020A8  6EF8               	movwf	tblptru,c
   569  0020AA  EE00  F069         	lfsr	0,__pdataCOMRAM
   570  0020AE  EE10 F005          	lfsr	1,5
   571  0020B2                     copy_data2:
   572  0020B2  0009               	tblrd		*+
   573  0020B4  CFF5 FFEE          	movff	tablat,postinc0
   574  0020B8  50E5               	movf	postdec1,w,c
   575  0020BA  50E1               	movf	fsr1l,w,c
   576  0020BC  E1FA               	bnz	copy_data2
   577                           
   578                           ; Clear objects allocated to BANK0 (28 bytes)
   579  0020BE  EE00  F0D8         	lfsr	0,__pbssBANK0
   580  0020C2  0E1C               	movlw	28
   581  0020C4                     clear_0:
   582  0020C4  6AEE               	clrf	postinc0,c
   583  0020C6  06E8               	decf	wreg,f,c
   584  0020C8  E1FD               	bnz	clear_0
   585                           
   586                           ; Clear objects allocated to COMRAM (36 bytes)
   587  0020CA  EE00  F045         	lfsr	0,__pbssCOMRAM
   588  0020CE  0E24               	movlw	36
   589  0020D0                     clear_1:
   590  0020D0  6AEE               	clrf	postinc0,c
   591  0020D2  06E8               	decf	wreg,f,c
   592  0020D4  E1FD               	bnz	clear_1
   593  0020D6                     end_of_initialization:
   594                           	callstack 0
   595  0020D6                     __end_of__initialization:
   596                           	callstack 0
   597  0020D6  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   598  0020D8  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   599  0020DA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   600  0020DC  6EF8               	movwf	tblptru,c
   601  0020DE  0100               	movlb	0
   602  0020E0  EFBF  F009         	goto	_main	;jump to C main() function
   603                           
   604                           	psect	bssCOMRAM
   605  000045                     __pbssCOMRAM:
   606                           	callstack 0
   607  000045                     storeData@receivedMex:
   608                           	callstack 0
   609  000045                     	ds	9
   610  00004E                     _posVector:
   611                           	callstack 0
   612  00004E                     	ds	3
   613  000051                     isr@single_cycle:
   614                           	callstack 0
   615  000051                     	ds	2
   616  000053                     _ADC_res:
   617                           	callstack 0
   618  000053                     	ds	2
   619  000055                     _pwmPeriod:
   620                           	callstack 0
   621  000055                     	ds	2
   622  000057                     _newFeeder:
   623                           	callstack 0
   624  000057                     	ds	2
   625  000059                     _rotAngle:
   626                           	callstack 0
   627  000059                     	ds	2
   628  00005B                     _tm0Error:
   629                           	callstack 0
   630  00005B                     	ds	2
   631  00005D                     	ds	1
   632  00005E                     storeData@counter:
   633                           	callstack 0
   634  00005E                     	ds	1
   635  00005F                     __newSequence:
   636                           	callstack 0
   637  00005F                     	ds	1
   638  000060                     __fatalError:
   639                           	callstack 0
   640  000060                     	ds	1
   641  000061                     _dataCounter:
   642                           	callstack 0
   643  000061                     	ds	1
   644  000062                     isr@completeStep:
   645                           	callstack 0
   646  000062                     	ds	1
   647  000063                     isr@tm0Count:
   648                           	callstack 0
   649  000063                     	ds	1
   650  000064                     _therm_rel:
   651                           	callstack 0
   652  000064                     	ds	1
   653  000065                     _touch_rel:
   654                           	callstack 0
   655  000065                     	ds	1
   656  000066                     _stepToggle:
   657                           	callstack 0
   658  000066                     	ds	1
   659  000067                     _pwmStep:
   660                           	callstack 0
   661  000067                     	ds	1
   662  000068                     _tm0Limit:
   663                           	callstack 0
   664  000068                     	ds	1
   665                           
   666                           	psect	dataCOMRAM
   667  000069                     __pdataCOMRAM:
   668                           	callstack 0
   669  000069                     	ds	2
   670  00006B                     	ds	2
   671  00006D                     storeData@mexLength:
   672                           	callstack 0
   673  00006D                     	ds	1
   674                           
   675                           	psect	bssBANK0
   676  0000D8                     __pbssBANK0:
   677                           	callstack 0
   678  0000D8                     _dataSequence:
   679                           	callstack 0
   680  0000D8                     	ds	20
   681  0000EC                     _newSequenceData:
   682                           	callstack 0
   683  0000EC                     	ds	8
   684                           
   685                           	psect	dataBANK0
   686  000080                     __pdataBANK0:
   687                           	callstack 0
   688  000080                     rotateObj@rotSequence:
   689                           	callstack 0
   690  000080                     	ds	4
   691  000084                     _errString_Bound:
   692                           	callstack 0
   693  000084                     	ds	32
   694  0000A4                     _errString_Feed:
   695                           	callstack 0
   696  0000A4                     	ds	29
   697  0000C1                     _errString_Command:
   698                           	callstack 0
   699  0000C1                     	ds	23
   700                           
   701                           	psect	dataBANK1
   702  000100                     __pdataBANK1:
   703                           	callstack 0
   704  000100                     _errString_PointZ:
   705                           	callstack 0
   706  000100                     	ds	52
   707  000134                     _errString_Point:
   708                           	callstack 0
   709  000134                     	ds	40
   710  00015C                     _errString_ZEND:
   711                           	callstack 0
   712  00015C                     	ds	40
   713  000184                     _errString_Reset:
   714                           	callstack 0
   715  000184                     	ds	39
   716  0001AB                     _errString_Fatal:
   717                           	callstack 0
   718  0001AB                     	ds	38
   719                           
   720                           	psect	cstackBANK1
   721  0001D1                     __pcstackBANK1:
   722                           	callstack 0
   723  0001D1                     ??_main:
   724                           
   725                           ; 1 bytes @ 0x0
   726  0001D1                     	ds	2
   727  0001D3                     main@errCode:
   728                           	callstack 0
   729                           
   730                           ; 1 bytes @ 0x2
   731  0001D3                     	ds	1
   732  0001D4                     main@newData:
   733                           	callstack 0
   734                           
   735                           ; 2 bytes @ 0x3
   736  0001D4                     	ds	2
   737                           
   738                           	psect	cstackBANK0
   739  0000F4                     __pcstackBANK0:
   740                           	callstack 0
   741  0000F4                     ??_rotateObj:
   742                           
   743                           ; 1 bytes @ 0x0
   744  0000F4                     	ds	3
   745  0000F7                     rotateObj@rotAngle:
   746                           	callstack 0
   747                           
   748                           ; 1 bytes @ 0x3
   749  0000F7                     	ds	1
   750  0000F8                     rotateObj@totStep:
   751                           	callstack 0
   752                           
   753                           ; 2 bytes @ 0x4
   754  0000F8                     	ds	2
   755  0000FA                     rotateObj@i:
   756                           	callstack 0
   757                           
   758                           ; 2 bytes @ 0x6
   759  0000FA                     	ds	2
   760  0000FC                     executeData@errCode:
   761                           	callstack 0
   762                           
   763                           ; 1 bytes @ 0x8
   764  0000FC                     	ds	1
   765  0000FD                     executeData@data:
   766                           	callstack 0
   767                           
   768                           ; 2 bytes @ 0x9
   769  0000FD                     	ds	2
   770                           
   771                           	psect	cstackCOMRAM
   772  000001                     __pcstackCOMRAM:
   773                           	callstack 0
   774  000001                     ?_retPeriod:
   775                           	callstack 0
   776  000001                     i2uartTx@ptr:
   777                           	callstack 0
   778                           
   779                           ; 2 bytes @ 0x0
   780  000001                     	ds	2
   781  000003                     i2uartTx@length:
   782                           	callstack 0
   783                           
   784                           ; 1 bytes @ 0x2
   785  000003                     	ds	1
   786  000004                     i2uartTx@i:
   787                           	callstack 0
   788                           
   789                           ; 1 bytes @ 0x3
   790  000004                     	ds	1
   791  000005                     ??i2_printError:
   792                           
   793                           ; 1 bytes @ 0x4
   794  000005                     	ds	2
   795  000007                     i2printError@errCode:
   796                           	callstack 0
   797                           
   798                           ; 1 bytes @ 0x6
   799  000007                     	ds	1
   800  000008                     ??i2_storeData:
   801                           
   802                           ; 1 bytes @ 0x7
   803  000008                     	ds	2
   804  00000A                     i2storeData@data:
   805                           	callstack 0
   806                           
   807                           ; 1 bytes @ 0x9
   808  00000A                     	ds	1
   809  00000B                     ??_isr:
   810                           
   811                           ; 1 bytes @ 0xA
   812  00000B                     	ds	6
   813  000011                     isr@temp:
   814                           	callstack 0
   815                           
   816                           ; 1 bytes @ 0x10
   817  000011                     	ds	1
   818  000012                     ??_shiftData:
   819  000012                     ?_stepMade:
   820                           	callstack 0
   821  000012                     ?_stepCounter:
   822                           	callstack 0
   823  000012                     ?_returnTouch:
   824                           	callstack 0
   825  000012                     ?_returnTherm:
   826                           	callstack 0
   827  000012                     ?_getNewSequence:
   828                           	callstack 0
   829  000012                     ?_getData:
   830                           	callstack 0
   831  000012                     ?___xxtofl:
   832                           	callstack 0
   833  000012                     setStep@motor:
   834                           	callstack 0
   835  000012                     enableMotor@motor:
   836                           	callstack 0
   837  000012                     setDirection@motor:
   838                           	callstack 0
   839  000012                     setDecay@motor:
   840                           	callstack 0
   841  000012                     tim2Init@_pwmPeriod:
   842                           	callstack 0
   843  000012                     uartTx@ptr:
   844                           	callstack 0
   845  000012                     ___xxtofl@val:
   846                           	callstack 0
   847                           
   848                           ; 4 bytes @ 0x11
   849  000012                     	ds	1
   850  000013                     ??_setStep:
   851  000013                     ??_enableMotor:
   852  000013                     ??_setDirection:
   853  000013                     ??_setDecay:
   854                           
   855                           ; 1 bytes @ 0x12
   856  000013                     	ds	1
   857  000014                     stepMade@temp:
   858                           	callstack 0
   859  000014                     shiftData@i:
   860                           	callstack 0
   861  000014                     uartTx@length:
   862                           	callstack 0
   863                           
   864                           ; 1 bytes @ 0x13
   865  000014                     	ds	1
   866  000015                     setStep@step:
   867                           	callstack 0
   868  000015                     enableMotor@enable:
   869                           	callstack 0
   870  000015                     setDirection@direction:
   871                           	callstack 0
   872  000015                     setDecay@decay:
   873                           	callstack 0
   874  000015                     uartTx@i:
   875                           	callstack 0
   876                           
   877                           ; 1 bytes @ 0x14
   878  000015                     	ds	1
   879  000016                     ??_printError:
   880  000016                     ??___xxtofl:
   881  000016                     resetPosition@keepMovingX:
   882                           	callstack 0
   883  000016                     moveToPoint@x1:
   884                           	callstack 0
   885                           
   886                           ; 2 bytes @ 0x15
   887  000016                     	ds	1
   888  000017                     resetPosition@keepMovingY:
   889                           	callstack 0
   890                           
   891                           ; 1 bytes @ 0x16
   892  000017                     	ds	1
   893  000018                     resetPosition@keepMovingZ:
   894                           	callstack 0
   895  000018                     printError@errCode:
   896                           	callstack 0
   897  000018                     moveToPoint@y1:
   898                           	callstack 0
   899                           
   900                           ; 2 bytes @ 0x17
   901  000018                     	ds	1
   902  000019                     ??_storeData:
   903                           
   904                           ; 1 bytes @ 0x18
   905  000019                     	ds	1
   906  00001A                     ___xxtofl@sign:
   907                           	callstack 0
   908  00001A                     moveToPoint@x2:
   909                           	callstack 0
   910                           
   911                           ; 2 bytes @ 0x19
   912  00001A                     	ds	1
   913  00001B                     storeData@data:
   914                           	callstack 0
   915  00001B                     ___xxtofl@exp:
   916                           	callstack 0
   917                           
   918                           ; 1 bytes @ 0x1A
   919  00001B                     	ds	1
   920  00001C                     moveToPoint@y2:
   921                           	callstack 0
   922  00001C                     ___xxtofl@arg:
   923                           	callstack 0
   924                           
   925                           ; 4 bytes @ 0x1B
   926  00001C                     	ds	2
   927  00001E                     ??_moveToPoint:
   928                           
   929                           ; 1 bytes @ 0x1D
   930  00001E                     	ds	2
   931  000020                     ?___fldiv:
   932                           	callstack 0
   933  000020                     moveToPoint@keepMovingX:
   934                           	callstack 0
   935  000020                     ___fldiv@b:
   936                           	callstack 0
   937                           
   938                           ; 4 bytes @ 0x1F
   939  000020                     	ds	1
   940  000021                     moveToPoint@keepMovingY:
   941                           	callstack 0
   942                           
   943                           ; 1 bytes @ 0x20
   944  000021                     	ds	1
   945  000022                     moveToPoint@MOT1Direction:
   946                           	callstack 0
   947                           
   948                           ; 1 bytes @ 0x21
   949  000022                     	ds	1
   950  000023                     moveToPoint@MOT2Direction:
   951                           	callstack 0
   952                           
   953                           ; 1 bytes @ 0x22
   954  000023                     	ds	1
   955  000024                     ___fldiv@a:
   956                           	callstack 0
   957                           
   958                           ; 4 bytes @ 0x23
   959  000024                     	ds	4
   960  000028                     ??___fldiv:
   961                           
   962                           ; 1 bytes @ 0x27
   963  000028                     	ds	4
   964  00002C                     ___fldiv@rem:
   965                           	callstack 0
   966                           
   967                           ; 4 bytes @ 0x2B
   968  00002C                     	ds	4
   969  000030                     ___fldiv@sign:
   970                           	callstack 0
   971                           
   972                           ; 1 bytes @ 0x2F
   973  000030                     	ds	1
   974  000031                     ___fldiv@new_exp:
   975                           	callstack 0
   976                           
   977                           ; 2 bytes @ 0x30
   978  000031                     	ds	2
   979  000033                     ___fldiv@grs:
   980                           	callstack 0
   981                           
   982                           ; 4 bytes @ 0x32
   983  000033                     	ds	4
   984  000037                     ___fldiv@bexp:
   985                           	callstack 0
   986                           
   987                           ; 1 bytes @ 0x36
   988  000037                     	ds	1
   989  000038                     ___fldiv@aexp:
   990                           	callstack 0
   991                           
   992                           ; 1 bytes @ 0x37
   993  000038                     	ds	1
   994  000039                     ?___fltol:
   995                           	callstack 0
   996  000039                     ___fltol@f1:
   997                           	callstack 0
   998                           
   999                           ; 4 bytes @ 0x38
  1000  000039                     	ds	4
  1001  00003D                     ??___fltol:
  1002                           
  1003                           ; 1 bytes @ 0x3C
  1004  00003D                     	ds	4
  1005  000041                     ___fltol@sign1:
  1006                           	callstack 0
  1007                           
  1008                           ; 1 bytes @ 0x40
  1009  000041                     	ds	1
  1010  000042                     ___fltol@exp1:
  1011                           	callstack 0
  1012                           
  1013                           ; 1 bytes @ 0x41
  1014  000042                     	ds	1
  1015  000043                     ??_executeData:
  1016                           
  1017                           ; 1 bytes @ 0x42
  1018  000043                     	ds	2
  1019                           
  1020 ;;
  1021 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1022 ;;
  1023 ;; *************** function _main *****************
  1024 ;; Defined at:
  1025 ;;		line 17 in file "main.c"
  1026 ;; Parameters:    Size  Location     Type
  1027 ;;		None
  1028 ;; Auto vars:     Size  Location     Type
  1029 ;;  newData         2    3[BANK1 ] PTR struct .
  1030 ;;		 -> newSequenceData(8), 
  1031 ;;  errCode         1    2[BANK1 ] unsigned char 
  1032 ;; Return value:  Size  Location     Type
  1033 ;;                  1    wreg      void 
  1034 ;; Registers used:
  1035 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1036 ;; Tracked objects:
  1037 ;;		On entry : 0/0
  1038 ;;		On exit  : 0/0
  1039 ;;		Unchanged: 0/0
  1040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1041 ;;      Params:         0       0       0       0       0       0       0
  1042 ;;      Locals:         0       0       3       0       0       0       0
  1043 ;;      Temps:          0       0       2       0       0       0       0
  1044 ;;      Totals:         0       0       5       0       0       0       0
  1045 ;;Total ram usage:        5 bytes
  1046 ;; Hardware stack levels required when called:    7
  1047 ;; This function calls:
  1048 ;;		_clearTM0
  1049 ;;		_enableMotor
  1050 ;;		_executeData
  1051 ;;		_fatalError
  1052 ;;		_getNewSequence
  1053 ;;		_initADC
  1054 ;;		_initPinMotors
  1055 ;;		_interruptInit
  1056 ;;		_newSequence
  1057 ;;		_printError
  1058 ;;		_readSeq
  1059 ;;		_reduceSeq
  1060 ;;		_resetNewSequence
  1061 ;;		_resetPosition
  1062 ;;		_shiftData
  1063 ;;		_storeData
  1064 ;;		_tim0Init
  1065 ;;		_tim2Init
  1066 ;;		_usartInit
  1067 ;; This function is called by:
  1068 ;;		Startup code after reset
  1069 ;; This function uses a non-reentrant model
  1070 ;;
  1071                           
  1072                           	psect	text0
  1073  00137E                     __ptext0:
  1074                           	callstack 0
  1075  00137E                     _main:
  1076                           	callstack 24
  1077  00137E  FFFF               	dw	65535	; assembler added errata NOP
  1078                           
  1079                           ;main.c: 21:     interruptInit();
  1080  001380  ECCA  F011         	call	_interruptInit	;wreg free
  1081  001384                     
  1082                           ;main.c: 22:     initPinMotors();
  1083  001384  EC13  F012         	call	_initPinMotors	;wreg free
  1084  001388                     
  1085                           ;main.c: 23:     initADC();
  1086  001388  EC26  F012         	call	_initADC	;wreg free
  1087  00138C                     
  1088                           ;main.c: 24:     usartInit();
  1089  00138C  EC39  F012         	call	_usartInit	;wreg free
  1090  001390                     
  1091                           ;main.c: 25:     tim0Init();
  1092  001390  EC5C  F012         	call	_tim0Init	;wreg free
  1093  001394                     
  1094                           ;main.c: 26:     tim2Init(10);
  1095  001394  0E00               	movlw	0
  1096  001396  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1097  001398  0E0A               	movlw	10
  1098  00139A  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1099  00139C  EC48  F012         	call	_tim2Init	;wreg free
  1100  0013A0                     
  1101                           ;main.c: 29:     errCode = resetPosition();
  1102  0013A0  ECC5  F008         	call	_resetPosition	;wreg free
  1103  0013A4  0101               	movlb	1	; () banked
  1104  0013A6  6FD3               	movwf	main@errCode& (0+255),b
  1105  0013A8                     
  1106                           ; BSR set to: 1
  1107                           ;main.c: 30:     if(errCode != 0){
  1108  0013A8  51D3               	movf	main@errCode& (0+255),w,b
  1109  0013AA  B4D8               	btfsc	status,2,c
  1110  0013AC  EFDA  F009         	goto	u3531
  1111  0013B0  EFDD  F009         	goto	u3530
  1112  0013B4                     u3531:
  1113  0013B4  FFFF               	dw	65535	; assembler added errata NOP
  1114  0013B6  EFE4  F009         	goto	l316
  1115  0013BA                     u3530:
  1116  0013BA  FFFF               	dw	65535	; assembler added errata NOP
  1117  0013BC                     
  1118                           ; BSR set to: 1
  1119                           ;main.c: 31:         printError(errCode);
  1120  0013BC  51D3               	movf	main@errCode& (0+255),w,b
  1121  0013BE  EC87  F00C         	call	_printError
  1122  0013C2                     l317:
  1123  0013C2  FFFF               	dw	65535	; assembler added errata NOP
  1124  0013C4  EFE1  F009         	goto	l317
  1125  0013C8                     l316:
  1126  0013C8  FFFF               	dw	65535	; assembler added errata NOP
  1127                           
  1128                           ; BSR set to: 1
  1129                           ;main.c: 36:     RCSTA1bits.CREN = 1;
  1130  0013CA  88AB               	bsf	171,4,c	;volatile
  1131  0013CC                     l4260:
  1132  0013CC  FFFF               	dw	65535	; assembler added errata NOP
  1133                           
  1134                           ;main.c: 39:         if(fatalError()){
  1135  0013CE  ECCE  F012         	call	_fatalError	;wreg free
  1136  0013D2  0900               	iorlw	0
  1137  0013D4  B4D8               	btfsc	status,2,c
  1138  0013D6  EFEF  F009         	goto	u3541
  1139  0013DA  EFF2  F009         	goto	u3540
  1140  0013DE                     u3541:
  1141  0013DE  FFFF               	dw	65535	; assembler added errata NOP
  1142  0013E0  EF08  F00A         	goto	l4266
  1143  0013E4                     u3540:
  1144  0013E4  FFFF               	dw	65535	; assembler added errata NOP
  1145  0013E6                     
  1146                           ;main.c: 41:             enableMotor(1, 0);
  1147  0013E6  0E00               	movlw	0
  1148  0013E8  6E12               	movwf	enableMotor@motor^0,c
  1149  0013EA  0E01               	movlw	1
  1150  0013EC  ECAC  F010         	call	_enableMotor
  1151                           
  1152                           ;main.c: 42:             enableMotor(1, 1);
  1153  0013F0  0E01               	movlw	1
  1154  0013F2  6E12               	movwf	enableMotor@motor^0,c
  1155  0013F4  0E01               	movlw	1
  1156  0013F6  ECAC  F010         	call	_enableMotor
  1157                           
  1158                           ;main.c: 43:             enableMotor(1, 2);
  1159  0013FA  0E02               	movlw	2
  1160  0013FC  6E12               	movwf	enableMotor@motor^0,c
  1161  0013FE  0E01               	movlw	1
  1162  001400  ECAC  F010         	call	_enableMotor
  1163  001404                     
  1164                           ;main.c: 45:             printError(7);
  1165  001404  0E07               	movlw	7
  1166  001406  EC87  F00C         	call	_printError
  1167  00140A                     l322:
  1168  00140A  FFFF               	dw	65535	; assembler added errata NOP
  1169  00140C  EF05  F00A         	goto	l322
  1170  001410                     l4266:
  1171  001410  FFFF               	dw	65535	; assembler added errata NOP
  1172  001412  ECCA  F012         	call	_newSequence	;wreg free
  1173  001416  0900               	iorlw	0
  1174  001418  B4D8               	btfsc	status,2,c
  1175  00141A  EF11  F00A         	goto	u3551
  1176  00141E  EF14  F00A         	goto	u3550
  1177  001422                     u3551:
  1178  001422  FFFF               	dw	65535	; assembler added errata NOP
  1179  001424  EF6F  F00A         	goto	l4300
  1180  001428                     u3550:
  1181  001428  FFFF               	dw	65535	; assembler added errata NOP
  1182  00142A                     
  1183                           ;main.c: 48:             t_newSequence* newData = getNewSequence();
  1184  00142A  EC65  F012         	call	_getNewSequence	;wreg free
  1185  00142E  C012  F1D4         	movff	?_getNewSequence,main@newData
  1186  001432  C013  F1D5         	movff	?_getNewSequence+1,main@newData+1
  1187  001436                     
  1188                           ;main.c: 50:             newFeeder[0] = newData ->init_posX;
  1189  001436  0101               	movlb	1	; () banked
  1190  001438  EE20 F002          	lfsr	2,2
  1191  00143C  51D4               	movf	main@newData& (0+255),w,b
  1192  00143E  26D9               	addwf	fsr2l,f,c
  1193  001440  51D5               	movf	(main@newData+1)& (0+255),w,b
  1194  001442  22DA               	addwfc	fsr2h,f,c
  1195  001444  50DF               	movf	indf2,w,c
  1196  001446  6E57               	movwf	_newFeeder^0,c
  1197  001448                     
  1198                           ; BSR set to: 1
  1199                           ;main.c: 51:             newFeeder[1] = newData ->init_posY;
  1200  001448  EE20 F003          	lfsr	2,3
  1201  00144C  51D4               	movf	main@newData& (0+255),w,b
  1202  00144E  26D9               	addwf	fsr2l,f,c
  1203  001450  51D5               	movf	(main@newData+1)& (0+255),w,b
  1204  001452  22DA               	addwfc	fsr2h,f,c
  1205  001454  50DF               	movf	indf2,w,c
  1206  001456  6E58               	movwf	(_newFeeder+1)^0,c
  1207  001458                     
  1208                           ; BSR set to: 1
  1209                           ;main.c: 55:             RCSTAbits.CREN = 0;
  1210  001458  98AB               	bcf	171,4,c	;volatile
  1211  00145A                     
  1212                           ; BSR set to: 1
  1213                           ;main.c: 58:             storeData(0);
  1214  00145A  0E00               	movlw	0
  1215  00145C  EC8A  F00A         	call	_storeData
  1216  001460                     
  1217                           ;main.c: 59:             storeData(0xFF);
  1218  001460  0EFF               	movlw	255
  1219  001462  EC8A  F00A         	call	_storeData
  1220  001466                     
  1221                           ;main.c: 60:             storeData(newData ->end_posX);
  1222  001466  0101               	movlb	1	; () banked
  1223  001468  EE20 F005          	lfsr	2,5
  1224  00146C  51D4               	movf	main@newData& (0+255),w,b
  1225  00146E  26D9               	addwf	fsr2l,f,c
  1226  001470  51D5               	movf	(main@newData+1)& (0+255),w,b
  1227  001472  22DA               	addwfc	fsr2h,f,c
  1228  001474  50DF               	movf	indf2,w,c
  1229  001476  EC8A  F00A         	call	_storeData
  1230  00147A                     
  1231                           ;main.c: 61:             storeData(newData ->end_posY);
  1232  00147A  0101               	movlb	1	; () banked
  1233  00147C  EE20 F006          	lfsr	2,6
  1234  001480  51D4               	movf	main@newData& (0+255),w,b
  1235  001482  26D9               	addwf	fsr2l,f,c
  1236  001484  51D5               	movf	(main@newData+1)& (0+255),w,b
  1237  001486  22DA               	addwfc	fsr2h,f,c
  1238  001488  50DF               	movf	indf2,w,c
  1239  00148A  EC8A  F00A         	call	_storeData
  1240  00148E                     
  1241                           ;main.c: 62:             storeData(newData ->end_rot - newData ->init_rot);
  1242  00148E  0101               	movlb	1	; () banked
  1243  001490  EE20 F004          	lfsr	2,4
  1244  001494  51D4               	movf	main@newData& (0+255),w,b
  1245  001496  26D9               	addwf	fsr2l,f,c
  1246  001498  51D5               	movf	(main@newData+1)& (0+255),w,b
  1247  00149A  22DA               	addwfc	fsr2h,f,c
  1248  00149C  50DF               	movf	indf2,w,c
  1249  00149E  6FD1               	movwf	??_main& (0+255),b
  1250  0014A0  EE20 F007          	lfsr	2,7
  1251  0014A4  51D4               	movf	main@newData& (0+255),w,b
  1252  0014A6  26D9               	addwf	fsr2l,f,c
  1253  0014A8  51D5               	movf	(main@newData+1)& (0+255),w,b
  1254  0014AA  22DA               	addwfc	fsr2h,f,c
  1255  0014AC  50DF               	movf	indf2,w,c
  1256  0014AE  6FD2               	movwf	(??_main+1)& (0+255),b
  1257  0014B0  51D1               	movf	??_main& (0+255),w,b
  1258  0014B2  5DD2               	subwf	(??_main+1)& (0+255),w,b
  1259  0014B4  EC8A  F00A         	call	_storeData
  1260  0014B8                     
  1261                           ;main.c: 65:             RCSTAbits.CREN = 1;
  1262  0014B8  88AB               	bsf	171,4,c	;volatile
  1263  0014BA                     
  1264                           ;main.c: 68:             resetNewSequence();
  1265  0014BA  EC9A  F012         	call	_resetNewSequence	;wreg free
  1266  0014BE                     
  1267                           ;main.c: 70:             errCode = executeData();
  1268  0014BE  EC82  F006         	call	_executeData	;wreg free
  1269  0014C2  0101               	movlb	1	; () banked
  1270  0014C4  6FD3               	movwf	main@errCode& (0+255),b
  1271  0014C6                     
  1272                           ; BSR set to: 1
  1273                           ;main.c: 71:             printError(errCode);
  1274  0014C6  51D3               	movf	main@errCode& (0+255),w,b
  1275  0014C8  EC87  F00C         	call	_printError
  1276  0014CC                     l4294:
  1277  0014CC  FFFF               	dw	65535	; assembler added errata NOP
  1278                           
  1279                           ;main.c: 72:             clearTM0();
  1280  0014CE  EC73  F012         	call	_clearTM0	;wreg free
  1281  0014D2                     
  1282                           ;main.c: 76:             reduceSeq();
  1283  0014D2  ECC2  F012         	call	_reduceSeq	;wreg free
  1284  0014D6                     
  1285                           ;main.c: 77:             shiftData();
  1286  0014D6  EC20  F011         	call	_shiftData	;wreg free
  1287                           
  1288                           ;main.c: 79:         }else if(readSeq()){
  1289  0014DA  EFE6  F009         	goto	l4260
  1290  0014DE                     l4300:
  1291  0014DE  FFFF               	dw	65535	; assembler added errata NOP
  1292  0014E0  ECC6  F012         	call	_readSeq	;wreg free
  1293  0014E4  0900               	iorlw	0
  1294  0014E6  B4D8               	btfsc	status,2,c
  1295  0014E8  EF78  F00A         	goto	u3561
  1296  0014EC  EF7B  F00A         	goto	u3560
  1297  0014F0                     u3561:
  1298  0014F0  FFFF               	dw	65535	; assembler added errata NOP
  1299  0014F2  EF85  F00A         	goto	l325
  1300  0014F6                     u3560:
  1301  0014F6  FFFF               	dw	65535	; assembler added errata NOP
  1302  0014F8                     
  1303                           ;main.c: 82:             errCode = executeData();
  1304  0014F8  EC82  F006         	call	_executeData	;wreg free
  1305  0014FC  0101               	movlb	1	; () banked
  1306  0014FE  6FD3               	movwf	main@errCode& (0+255),b
  1307  001500                     
  1308                           ; BSR set to: 1
  1309                           ;main.c: 83:             printError(errCode);
  1310  001500  51D3               	movf	main@errCode& (0+255),w,b
  1311  001502  EC87  F00C         	call	_printError
  1312  001506  EF66  F00A         	goto	l4294
  1313  00150A                     l325:
  1314  00150A  FFFF               	dw	65535	; assembler added errata NOP
  1315  00150C  EFE6  F009         	goto	l4260
  1316  001510  EFB5  F000         	goto	start
  1317  001514                     __end_of_main:
  1318                           	callstack 0
  1319                           
  1320 ;; *************** function _usartInit *****************
  1321 ;; Defined at:
  1322 ;;		line 34 in file "usart.c"
  1323 ;; Parameters:    Size  Location     Type
  1324 ;;		None
  1325 ;; Auto vars:     Size  Location     Type
  1326 ;;		None
  1327 ;; Return value:  Size  Location     Type
  1328 ;;                  1    wreg      void 
  1329 ;; Registers used:
  1330 ;;		wreg, status,2
  1331 ;; Tracked objects:
  1332 ;;		On entry : 0/0
  1333 ;;		On exit  : 0/0
  1334 ;;		Unchanged: 0/0
  1335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1336 ;;      Params:         0       0       0       0       0       0       0
  1337 ;;      Locals:         0       0       0       0       0       0       0
  1338 ;;      Temps:          0       0       0       0       0       0       0
  1339 ;;      Totals:         0       0       0       0       0       0       0
  1340 ;;Total ram usage:        0 bytes
  1341 ;; Hardware stack levels used:    1
  1342 ;; Hardware stack levels required when called:    4
  1343 ;; This function calls:
  1344 ;;		Nothing
  1345 ;; This function is called by:
  1346 ;;		_main
  1347 ;; This function uses a non-reentrant model
  1348 ;;
  1349                           
  1350                           	psect	text1
  1351  002472                     __ptext1:
  1352                           	callstack 0
  1353  002472                     _usartInit:
  1354                           	callstack 0
  1355  002472  FFFF               	dw	65535	; assembler added errata NOP
  1356  002474                     
  1357                           ;usart.c: 36:     TRISCbits.TRISC6 = 0;
  1358  002474  9C94               	bcf	148,6,c	;volatile
  1359                           
  1360                           ;usart.c: 37:     TRISCbits.TRISC7 = 1;
  1361  002476  8E94               	bsf	148,7,c	;volatile
  1362                           
  1363                           ;usart.c: 39:     TXSTAbits.TX9 = 0;
  1364  002478  9CAC               	bcf	172,6,c	;volatile
  1365                           
  1366                           ;usart.c: 40:     TXSTAbits.TXEN = 1;
  1367  00247A  8AAC               	bsf	172,5,c	;volatile
  1368                           
  1369                           ;usart.c: 41:     TXSTAbits.SYNC = 0;
  1370  00247C  98AC               	bcf	172,4,c	;volatile
  1371                           
  1372                           ;usart.c: 42:     TXSTAbits.BRGH = 0;
  1373  00247E  94AC               	bcf	172,2,c	;volatile
  1374                           
  1375                           ;usart.c: 44:     RCSTAbits.SPEN = 1;
  1376  002480  8EAB               	bsf	171,7,c	;volatile
  1377                           
  1378                           ;usart.c: 45:     RCSTAbits.RX9 = 0;
  1379  002482  9CAB               	bcf	171,6,c	;volatile
  1380                           
  1381                           ;usart.c: 46:     RCSTAbits.CREN = 0;
  1382  002484  98AB               	bcf	171,4,c	;volatile
  1383                           
  1384                           ;usart.c: 47:     RCSTAbits.ADDEN = 0;
  1385  002486  96AB               	bcf	171,3,c	;volatile
  1386  002488                     
  1387                           ;usart.c: 50:     SPBRG = 25;
  1388  002488  0E19               	movlw	25
  1389  00248A  6EAF               	movwf	175,c	;volatile
  1390  00248C  0012               	return		;funcret
  1391  00248E  FFFF               	dw	65535	; errata NOP
  1392  002490                     __end_of_usartInit:
  1393                           	callstack 0
  1394                           
  1395 ;; *************** function _tim2Init *****************
  1396 ;; Defined at:
  1397 ;;		line 34 in file "pwm.c"
  1398 ;; Parameters:    Size  Location     Type
  1399 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1400 ;; Auto vars:     Size  Location     Type
  1401 ;;		None
  1402 ;; Return value:  Size  Location     Type
  1403 ;;                  1    wreg      void 
  1404 ;; Registers used:
  1405 ;;		wreg, status,2
  1406 ;; Tracked objects:
  1407 ;;		On entry : 0/0
  1408 ;;		On exit  : 0/0
  1409 ;;		Unchanged: 0/0
  1410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1411 ;;      Params:         2       0       0       0       0       0       0
  1412 ;;      Locals:         0       0       0       0       0       0       0
  1413 ;;      Temps:          0       0       0       0       0       0       0
  1414 ;;      Totals:         2       0       0       0       0       0       0
  1415 ;;Total ram usage:        2 bytes
  1416 ;; Hardware stack levels used:    1
  1417 ;; Hardware stack levels required when called:    4
  1418 ;; This function calls:
  1419 ;;		Nothing
  1420 ;; This function is called by:
  1421 ;;		_main
  1422 ;; This function uses a non-reentrant model
  1423 ;;
  1424                           
  1425                           	psect	text2
  1426  002490                     __ptext2:
  1427                           	callstack 0
  1428  002490                     _tim2Init:
  1429                           	callstack 0
  1430  002490  FFFF               	dw	65535	; assembler added errata NOP
  1431  002492                     
  1432                           ;pwm.c: 35:     T2CONbits.TMR2ON = 0;
  1433  002492  94CA               	bcf	202,2,c	;volatile
  1434  002494                     
  1435                           ;pwm.c: 36:     T2CONbits.T2CKPS = 0x03;
  1436  002494  0E03               	movlw	3
  1437  002496  12CA               	iorwf	202,f,c	;volatile
  1438  002498                     
  1439                           ;pwm.c: 39:     pwmPeriod = _pwmPeriod;
  1440  002498  C012  F055         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1441  00249C  C013  F056         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1442  0024A0  0012               	return		;funcret
  1443  0024A2  FFFF               	dw	65535	; errata NOP
  1444  0024A4                     __end_of_tim2Init:
  1445                           	callstack 0
  1446                           
  1447 ;; *************** function _tim0Init *****************
  1448 ;; Defined at:
  1449 ;;		line 21 in file "pwm.c"
  1450 ;; Parameters:    Size  Location     Type
  1451 ;;		None
  1452 ;; Auto vars:     Size  Location     Type
  1453 ;;		None
  1454 ;; Return value:  Size  Location     Type
  1455 ;;                  1    wreg      void 
  1456 ;; Registers used:
  1457 ;;		wreg, status,2
  1458 ;; Tracked objects:
  1459 ;;		On entry : 0/0
  1460 ;;		On exit  : 0/0
  1461 ;;		Unchanged: 0/0
  1462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1463 ;;      Params:         0       0       0       0       0       0       0
  1464 ;;      Locals:         0       0       0       0       0       0       0
  1465 ;;      Temps:          0       0       0       0       0       0       0
  1466 ;;      Totals:         0       0       0       0       0       0       0
  1467 ;;Total ram usage:        0 bytes
  1468 ;; Hardware stack levels used:    1
  1469 ;; Hardware stack levels required when called:    4
  1470 ;; This function calls:
  1471 ;;		Nothing
  1472 ;; This function is called by:
  1473 ;;		_main
  1474 ;; This function uses a non-reentrant model
  1475 ;;
  1476                           
  1477                           	psect	text3
  1478  0024B8                     __ptext3:
  1479                           	callstack 0
  1480  0024B8                     _tim0Init:
  1481                           	callstack 0
  1482  0024B8  FFFF               	dw	65535	; assembler added errata NOP
  1483  0024BA                     
  1484                           ;pwm.c: 22:     T0CONbits.TMR0ON = 0;
  1485  0024BA  9ED5               	bcf	213,7,c	;volatile
  1486                           
  1487                           ;pwm.c: 23:     T0CONbits.T08BIT = 0;
  1488  0024BC  9CD5               	bcf	213,6,c	;volatile
  1489                           
  1490                           ;pwm.c: 24:     T0CONbits.T0CS = 0;
  1491  0024BE  9AD5               	bcf	213,5,c	;volatile
  1492                           
  1493                           ;pwm.c: 25:     T0CONbits.PSA = 1;
  1494  0024C0  86D5               	bsf	213,3,c	;volatile
  1495  0024C2                     
  1496                           ;pwm.c: 26:     T0CONbits.T0PS = 0x07;
  1497  0024C2  0E07               	movlw	7
  1498  0024C4  12D5               	iorwf	213,f,c	;volatile
  1499  0024C6  0012               	return		;funcret
  1500  0024C8  FFFF               	dw	65535	; errata NOP
  1501  0024CA                     __end_of_tim0Init:
  1502                           	callstack 0
  1503                           
  1504 ;; *************** function _storeData *****************
  1505 ;; Defined at:
  1506 ;;		line 131 in file "usart.c"
  1507 ;; Parameters:    Size  Location     Type
  1508 ;;  data            1    wreg     unsigned char 
  1509 ;; Auto vars:     Size  Location     Type
  1510 ;;  data            1   26[COMRAM] unsigned char 
  1511 ;; Return value:  Size  Location     Type
  1512 ;;                  1    wreg      void 
  1513 ;; Registers used:
  1514 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1515 ;; Tracked objects:
  1516 ;;		On entry : 0/0
  1517 ;;		On exit  : 0/0
  1518 ;;		Unchanged: 0/0
  1519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1520 ;;      Params:         0       0       0       0       0       0       0
  1521 ;;      Locals:         1       0       0       0       0       0       0
  1522 ;;      Temps:          2       0       0       0       0       0       0
  1523 ;;      Totals:         3       0       0       0       0       0       0
  1524 ;;Total ram usage:        3 bytes
  1525 ;; Hardware stack levels used:    1
  1526 ;; Hardware stack levels required when called:    6
  1527 ;; This function calls:
  1528 ;;		_printError
  1529 ;; This function is called by:
  1530 ;;		_main
  1531 ;; This function uses a non-reentrant model
  1532 ;;
  1533                           
  1534                           	psect	text4
  1535  001514                     __ptext4:
  1536                           	callstack 0
  1537  001514                     _storeData:
  1538                           	callstack 0
  1539  001514  FFFF               	dw	65535	; assembler added errata NOP
  1540                           
  1541                           ;incstack = 0
  1542                           ;storeData@data stored from wreg
  1543  001516  6E1B               	movwf	storeData@data^0,c
  1544  001518                     
  1545                           ;usart.c: 133:     static unsigned char counter = 0;;usart.c: 134:     static unsigned c
      +                          har mexLength = 5;;usart.c: 135:     static unsigned char command;;usart.c: 136:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 140:     receivedMex[counter] = data;
  1546  001518  0E45               	movlw	low storeData@receivedMex
  1547  00151A  245E               	addwf	storeData@counter^0,w,c
  1548  00151C  6ED9               	movwf	fsr2l,c
  1549  00151E  6ADA               	clrf	fsr2h,c
  1550  001520  0E00               	movlw	high storeData@receivedMex
  1551  001522  22DA               	addwfc	fsr2h,f,c
  1552  001524  C01B  FFDF         	movff	storeData@data,indf2
  1553  001528                     
  1554                           ;usart.c: 142:     counter++;
  1555  001528  2A5E               	incf	storeData@counter^0,f,c
  1556                           
  1557                           ;usart.c: 145:     switch(receivedMex[0]){
  1558  00152A  EFA6  F00A         	goto	l4128
  1559  00152E                     l4120:
  1560  00152E  FFFF               	dw	65535	; assembler added errata NOP
  1561                           
  1562                           ;usart.c: 147:             mexLength = 5;
  1563  001530  0E05               	movlw	5
  1564  001532  6E6D               	movwf	storeData@mexLength^0,c
  1565                           
  1566                           ;usart.c: 148:             break;
  1567  001534  EFC1  F00A         	goto	l4130
  1568  001538                     l4122:
  1569  001538  FFFF               	dw	65535	; assembler added errata NOP
  1570                           
  1571                           ;usart.c: 150:             mexLength = 9;
  1572  00153A  0E09               	movlw	9
  1573  00153C  6E6D               	movwf	storeData@mexLength^0,c
  1574                           
  1575                           ;usart.c: 151:             break;
  1576  00153E  EFC1  F00A         	goto	l4130
  1577  001542                     l4124:
  1578  001542  FFFF               	dw	65535	; assembler added errata NOP
  1579                           
  1580                           ;usart.c: 153:             mexLength = 1;
  1581  001544  0E01               	movlw	1
  1582  001546  6E6D               	movwf	storeData@mexLength^0,c
  1583                           
  1584                           ;usart.c: 154:             break;
  1585  001548  EFC1  F00A         	goto	l4130
  1586  00154C                     l4128:
  1587  00154C  FFFF               	dw	65535	; assembler added errata NOP
  1588  00154E  5045               	movf	storeData@receivedMex^0,w,c
  1589  001550  6E19               	movwf	??_storeData^0,c
  1590  001552  6A1A               	clrf	(??_storeData+1)^0,c
  1591                           
  1592                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1593                           ; Switch size 1, requested type "simple"
  1594                           ; Number of cases is 1, Range of values is 0 to 0
  1595                           ; switch strategies available:
  1596                           ; Name         Instructions Cycles
  1597                           ; simple_byte            4     3 (average)
  1598                           ;	Chosen strategy is simple_byte
  1599  001554  501A               	movf	(??_storeData+1)^0,w,c
  1600  001556  0A00               	xorlw	0	; case 0
  1601  001558  B4D8               	btfsc	status,2,c
  1602  00155A  EFB1  F00A         	goto	l4532
  1603  00155E  EFC1  F00A         	goto	l4130
  1604  001562                     l4532:
  1605  001562  FFFF               	dw	65535	; assembler added errata NOP
  1606                           
  1607                           ; Switch size 1, requested type "simple"
  1608                           ; Number of cases is 3, Range of values is 0 to 2
  1609                           ; switch strategies available:
  1610                           ; Name         Instructions Cycles
  1611                           ; simple_byte           10     6 (average)
  1612                           ;	Chosen strategy is simple_byte
  1613  001564  5019               	movf	??_storeData^0,w,c
  1614  001566  0A00               	xorlw	0	; case 0
  1615  001568  B4D8               	btfsc	status,2,c
  1616  00156A  EF97  F00A         	goto	l4120
  1617  00156E  0A01               	xorlw	1	; case 1
  1618  001570  B4D8               	btfsc	status,2,c
  1619  001572  EF9C  F00A         	goto	l4122
  1620  001576  0A03               	xorlw	3	; case 2
  1621  001578  B4D8               	btfsc	status,2,c
  1622  00157A  EFA1  F00A         	goto	l4124
  1623  00157E  EFC1  F00A         	goto	l4130
  1624  001582                     l4130:
  1625  001582  FFFF               	dw	65535	; assembler added errata NOP
  1626                           
  1627                           ;usart.c: 161:     if(counter >= mexLength){
  1628  001584  506D               	movf	storeData@mexLength^0,w,c
  1629  001586  5C5E               	subwf	storeData@counter^0,w,c
  1630  001588  A0D8               	btfss	status,0,c
  1631  00158A  EFC9  F00A         	goto	u3491
  1632  00158E  EFCC  F00A         	goto	u3490
  1633  001592                     u3491:
  1634  001592  FFFF               	dw	65535	; assembler added errata NOP
  1635  001594  EF38  F00B         	goto	l575
  1636  001598                     u3490:
  1637  001598  FFFF               	dw	65535	; assembler added errata NOP
  1638  00159A                     
  1639                           ;usart.c: 162:         counter = 0;
  1640  00159A  0E00               	movlw	0
  1641  00159C  6E5E               	movwf	storeData@counter^0,c
  1642                           
  1643                           ;usart.c: 166:         switch(receivedMex[0]){
  1644  00159E  EF1D  F00B         	goto	l4146
  1645  0015A2                     l4134:
  1646  0015A2  FFFF               	dw	65535	; assembler added errata NOP
  1647                           
  1648                           ;usart.c: 168:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  1649  0015A4  5061               	movf	_dataCounter^0,w,c
  1650  0015A6  0D04               	mullw	4
  1651  0015A8  0ED8               	movlw	low _dataSequence
  1652  0015AA  24F3               	addwf	243,w,c
  1653  0015AC  6ED9               	movwf	fsr2l,c
  1654  0015AE  0E00               	movlw	high _dataSequence
  1655  0015B0  20F4               	addwfc	prodh,w,c
  1656  0015B2  6EDA               	movwf	fsr2h,c
  1657  0015B4  C046  FFDF         	movff	storeData@receivedMex+1,indf2
  1658                           
  1659                           ;usart.c: 169:                 dataSequence[dataCounter].posX = receivedMex[2];
  1660  0015B8  5061               	movf	_dataCounter^0,w,c
  1661  0015BA  0D04               	mullw	4
  1662  0015BC  0ED9               	movlw	low (_dataSequence+1)
  1663  0015BE  24F3               	addwf	243,w,c
  1664  0015C0  6ED9               	movwf	fsr2l,c
  1665  0015C2  0E00               	movlw	high (_dataSequence+1)
  1666  0015C4  20F4               	addwfc	prodh,w,c
  1667  0015C6  6EDA               	movwf	fsr2h,c
  1668  0015C8  C047  FFDF         	movff	storeData@receivedMex+2,indf2
  1669                           
  1670                           ;usart.c: 170:                 dataSequence[dataCounter].posY = receivedMex[3];
  1671  0015CC  5061               	movf	_dataCounter^0,w,c
  1672  0015CE  0D04               	mullw	4
  1673  0015D0  0EDA               	movlw	low (_dataSequence+2)
  1674  0015D2  24F3               	addwf	243,w,c
  1675  0015D4  6ED9               	movwf	fsr2l,c
  1676  0015D6  0E00               	movlw	high (_dataSequence+2)
  1677  0015D8  20F4               	addwfc	prodh,w,c
  1678  0015DA  6EDA               	movwf	fsr2h,c
  1679  0015DC  C048  FFDF         	movff	storeData@receivedMex+3,indf2
  1680                           
  1681                           ;usart.c: 171:                 dataSequence[dataCounter].rotation = receivedMex[4];
  1682  0015E0  5061               	movf	_dataCounter^0,w,c
  1683  0015E2  0D04               	mullw	4
  1684  0015E4  0EDB               	movlw	low (_dataSequence+3)
  1685  0015E6  24F3               	addwf	243,w,c
  1686  0015E8  6ED9               	movwf	fsr2l,c
  1687  0015EA  0E00               	movlw	high (_dataSequence+3)
  1688  0015EC  20F4               	addwfc	prodh,w,c
  1689  0015EE  6EDA               	movwf	fsr2h,c
  1690  0015F0  C049  FFDF         	movff	storeData@receivedMex+4,indf2
  1691  0015F4                     
  1692                           ;usart.c: 173:                 dataCounter++;
  1693  0015F4  2A61               	incf	_dataCounter^0,f,c
  1694                           
  1695                           ;usart.c: 174:                 break;
  1696  0015F6  EF38  F00B         	goto	l575
  1697  0015FA                     l572:
  1698  0015FA  FFFF               	dw	65535	; assembler added errata NOP
  1699                           
  1700                           ;usart.c: 177:                 newSequenceData.L = receivedMex[1];
  1701  0015FC  C046  F0EC         	movff	storeData@receivedMex+1,_newSequenceData
  1702                           
  1703                           ;usart.c: 178:                 newSequenceData.W = receivedMex[2];
  1704  001600  C047  F0ED         	movff	storeData@receivedMex+2,_newSequenceData+1
  1705                           
  1706                           ;usart.c: 179:                 newSequenceData.init_posX = receivedMex[3];
  1707  001604  C048  F0EE         	movff	storeData@receivedMex+3,_newSequenceData+2
  1708                           
  1709                           ;usart.c: 180:                 newSequenceData.init_posY = receivedMex[4];
  1710  001608  C049  F0EF         	movff	storeData@receivedMex+4,_newSequenceData+3
  1711                           
  1712                           ;usart.c: 181:                 newSequenceData.init_rot = receivedMex[5];
  1713  00160C  C04A  F0F0         	movff	storeData@receivedMex+5,_newSequenceData+4
  1714                           
  1715                           ;usart.c: 182:                 newSequenceData.end_posX = receivedMex[6];
  1716  001610  C04B  F0F1         	movff	storeData@receivedMex+6,_newSequenceData+5
  1717                           
  1718                           ;usart.c: 183:                 newSequenceData.end_posY = receivedMex[7];
  1719  001614  C04C  F0F2         	movff	storeData@receivedMex+7,_newSequenceData+6
  1720                           
  1721                           ;usart.c: 184:                 newSequenceData.end_rot = receivedMex[8];
  1722  001618  C04D  F0F3         	movff	storeData@receivedMex+8,_newSequenceData+7
  1723  00161C                     
  1724                           ;usart.c: 186:                 _newSequence = 1;
  1725  00161C  0E01               	movlw	1
  1726  00161E  6E5F               	movwf	__newSequence^0,c
  1727                           
  1728                           ;usart.c: 187:                 break;
  1729  001620  EF38  F00B         	goto	l575
  1730  001624                     l4140:
  1731  001624  FFFF               	dw	65535	; assembler added errata NOP
  1732                           
  1733                           ;usart.c: 190:                 _fatalError = 1;
  1734  001626  0E01               	movlw	1
  1735  001628  6E60               	movwf	__fatalError^0,c
  1736                           
  1737                           ;usart.c: 191:                 break;
  1738  00162A  EF38  F00B         	goto	l575
  1739  00162E                     l4142:
  1740  00162E  FFFF               	dw	65535	; assembler added errata NOP
  1741                           
  1742                           ;usart.c: 194:                 printError(8);
  1743  001630  0E08               	movlw	8
  1744  001632  EC87  F00C         	call	_printError
  1745                           
  1746                           ;usart.c: 195:                 break;
  1747  001636  EF38  F00B         	goto	l575
  1748  00163A                     l4146:
  1749  00163A  FFFF               	dw	65535	; assembler added errata NOP
  1750  00163C  5045               	movf	storeData@receivedMex^0,w,c
  1751  00163E  6E19               	movwf	??_storeData^0,c
  1752  001640  6A1A               	clrf	(??_storeData+1)^0,c
  1753                           
  1754                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1755                           ; Switch size 1, requested type "simple"
  1756                           ; Number of cases is 1, Range of values is 0 to 0
  1757                           ; switch strategies available:
  1758                           ; Name         Instructions Cycles
  1759                           ; simple_byte            4     3 (average)
  1760                           ;	Chosen strategy is simple_byte
  1761  001642  501A               	movf	(??_storeData+1)^0,w,c
  1762  001644  0A00               	xorlw	0	; case 0
  1763  001646  B4D8               	btfsc	status,2,c
  1764  001648  EF28  F00B         	goto	l4534
  1765  00164C  EF17  F00B         	goto	l4142
  1766  001650                     l4534:
  1767  001650  FFFF               	dw	65535	; assembler added errata NOP
  1768                           
  1769                           ; Switch size 1, requested type "simple"
  1770                           ; Number of cases is 3, Range of values is 0 to 2
  1771                           ; switch strategies available:
  1772                           ; Name         Instructions Cycles
  1773                           ; simple_byte           10     6 (average)
  1774                           ;	Chosen strategy is simple_byte
  1775  001652  5019               	movf	??_storeData^0,w,c
  1776  001654  0A00               	xorlw	0	; case 0
  1777  001656  B4D8               	btfsc	status,2,c
  1778  001658  EFD1  F00A         	goto	l4134
  1779  00165C  0A01               	xorlw	1	; case 1
  1780  00165E  B4D8               	btfsc	status,2,c
  1781  001660  EFFD  F00A         	goto	l572
  1782  001664  0A03               	xorlw	3	; case 2
  1783  001666  B4D8               	btfsc	status,2,c
  1784  001668  EF12  F00B         	goto	l4140
  1785  00166C  EF17  F00B         	goto	l4142
  1786  001670                     l575:
  1787  001670  FFFF               	dw	65535	; assembler added errata NOP
  1788  001672  0012               	return		;funcret
  1789  001674  FFFF               	dw	65535	; errata NOP
  1790  001676                     __end_of_storeData:
  1791                           	callstack 0
  1792                           
  1793 ;; *************** function _printError *****************
  1794 ;; Defined at:
  1795 ;;		line 53 in file "usart.c"
  1796 ;; Parameters:    Size  Location     Type
  1797 ;;  errCode         1    wreg     unsigned char 
  1798 ;; Auto vars:     Size  Location     Type
  1799 ;;  errCode         1   23[COMRAM] unsigned char 
  1800 ;; Return value:  Size  Location     Type
  1801 ;;                  1    wreg      void 
  1802 ;; Registers used:
  1803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1804 ;; Tracked objects:
  1805 ;;		On entry : 0/0
  1806 ;;		On exit  : 0/0
  1807 ;;		Unchanged: 0/0
  1808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1809 ;;      Params:         0       0       0       0       0       0       0
  1810 ;;      Locals:         1       0       0       0       0       0       0
  1811 ;;      Temps:          2       0       0       0       0       0       0
  1812 ;;      Totals:         3       0       0       0       0       0       0
  1813 ;;Total ram usage:        3 bytes
  1814 ;; Hardware stack levels used:    1
  1815 ;; Hardware stack levels required when called:    5
  1816 ;; This function calls:
  1817 ;;		_uartTx
  1818 ;; This function is called by:
  1819 ;;		_main
  1820 ;;		_storeData
  1821 ;; This function uses a non-reentrant model
  1822 ;;
  1823                           
  1824                           	psect	text5
  1825  00190E                     __ptext5:
  1826                           	callstack 0
  1827  00190E                     _printError:
  1828                           	callstack 0
  1829  00190E  FFFF               	dw	65535	; assembler added errata NOP
  1830                           
  1831                           ;incstack = 0
  1832                           ;printError@errCode stored from wreg
  1833  001910  6E18               	movwf	printError@errCode^0,c
  1834  001912                     
  1835                           ;usart.c: 55:     switch(errCode){
  1836  001912  EFE3  F00C         	goto	l3988
  1837  001916                     l3970:
  1838  001916  FFFF               	dw	65535	; assembler added errata NOP
  1839                           
  1840                           ;usart.c: 57:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  1841  001918  0EA4               	movlw	low _errString_Feed
  1842  00191A  6E12               	movwf	uartTx@ptr^0,c
  1843  00191C  0E00               	movlw	high _errString_Feed
  1844  00191E  6E13               	movwf	(uartTx@ptr+1)^0,c
  1845  001920  0E1D               	movlw	29
  1846  001922  6E14               	movwf	uartTx@length^0,c
  1847  001924  EC7C  F011         	call	_uartTx	;wreg free
  1848                           
  1849                           ;usart.c: 58:             break;
  1850  001928  EF12  F00D         	goto	l531
  1851  00192C                     l3972:
  1852  00192C  FFFF               	dw	65535	; assembler added errata NOP
  1853                           
  1854                           ;usart.c: 60:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  1855  00192E  0E5C               	movlw	low _errString_ZEND
  1856  001930  6E12               	movwf	uartTx@ptr^0,c
  1857  001932  0E01               	movlw	high _errString_ZEND
  1858  001934  6E13               	movwf	(uartTx@ptr+1)^0,c
  1859  001936  0E28               	movlw	40
  1860  001938  6E14               	movwf	uartTx@length^0,c
  1861  00193A  EC7C  F011         	call	_uartTx	;wreg free
  1862                           
  1863                           ;usart.c: 61:             break;
  1864  00193E  EF12  F00D         	goto	l531
  1865  001942                     l3974:
  1866  001942  FFFF               	dw	65535	; assembler added errata NOP
  1867                           
  1868                           ;usart.c: 63:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  1869  001944  0E84               	movlw	low _errString_Reset
  1870  001946  6E12               	movwf	uartTx@ptr^0,c
  1871  001948  0E01               	movlw	high _errString_Reset
  1872  00194A  6E13               	movwf	(uartTx@ptr+1)^0,c
  1873  00194C  0E27               	movlw	39
  1874  00194E  6E14               	movwf	uartTx@length^0,c
  1875  001950  EC7C  F011         	call	_uartTx	;wreg free
  1876                           
  1877                           ;usart.c: 64:             break;
  1878  001954  EF12  F00D         	goto	l531
  1879  001958                     l3976:
  1880  001958  FFFF               	dw	65535	; assembler added errata NOP
  1881                           
  1882                           ;usart.c: 66:             uartTx(&errString_Point[0], sizeof(errString_Point));
  1883  00195A  0E34               	movlw	low _errString_Point
  1884  00195C  6E12               	movwf	uartTx@ptr^0,c
  1885  00195E  0E01               	movlw	high _errString_Point
  1886  001960  6E13               	movwf	(uartTx@ptr+1)^0,c
  1887  001962  0E28               	movlw	40
  1888  001964  6E14               	movwf	uartTx@length^0,c
  1889  001966  EC7C  F011         	call	_uartTx	;wreg free
  1890                           
  1891                           ;usart.c: 67:             break;
  1892  00196A  EF12  F00D         	goto	l531
  1893  00196E                     l3978:
  1894  00196E  FFFF               	dw	65535	; assembler added errata NOP
  1895                           
  1896                           ;usart.c: 69:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  1897  001970  0E84               	movlw	low _errString_Bound
  1898  001972  6E12               	movwf	uartTx@ptr^0,c
  1899  001974  0E00               	movlw	high _errString_Bound
  1900  001976  6E13               	movwf	(uartTx@ptr+1)^0,c
  1901  001978  0E20               	movlw	32
  1902  00197A  6E14               	movwf	uartTx@length^0,c
  1903  00197C  EC7C  F011         	call	_uartTx	;wreg free
  1904                           
  1905                           ;usart.c: 70:             break;
  1906  001980  EF12  F00D         	goto	l531
  1907  001984                     l3980:
  1908  001984  FFFF               	dw	65535	; assembler added errata NOP
  1909                           
  1910                           ;usart.c: 72:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  1911  001986  0E00               	movlw	low _errString_PointZ
  1912  001988  6E12               	movwf	uartTx@ptr^0,c
  1913  00198A  0E01               	movlw	high _errString_PointZ
  1914  00198C  6E13               	movwf	(uartTx@ptr+1)^0,c
  1915  00198E  0E34               	movlw	52
  1916  001990  6E14               	movwf	uartTx@length^0,c
  1917  001992  EC7C  F011         	call	_uartTx	;wreg free
  1918                           
  1919                           ;usart.c: 73:             break;
  1920  001996  EF12  F00D         	goto	l531
  1921  00199A                     l3982:
  1922  00199A  FFFF               	dw	65535	; assembler added errata NOP
  1923                           
  1924                           ;usart.c: 75:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  1925  00199C  0EAB               	movlw	low _errString_Fatal
  1926  00199E  6E12               	movwf	uartTx@ptr^0,c
  1927  0019A0  0E01               	movlw	high _errString_Fatal
  1928  0019A2  6E13               	movwf	(uartTx@ptr+1)^0,c
  1929  0019A4  0E26               	movlw	38
  1930  0019A6  6E14               	movwf	uartTx@length^0,c
  1931  0019A8  EC7C  F011         	call	_uartTx	;wreg free
  1932                           
  1933                           ;usart.c: 76:             break;
  1934  0019AC  EF12  F00D         	goto	l531
  1935  0019B0                     l3984:
  1936  0019B0  FFFF               	dw	65535	; assembler added errata NOP
  1937                           
  1938                           ;usart.c: 78:             uartTx(&errString_Command[0], sizeof(errString_Command));
  1939  0019B2  0EC1               	movlw	low _errString_Command
  1940  0019B4  6E12               	movwf	uartTx@ptr^0,c
  1941  0019B6  0E00               	movlw	high _errString_Command
  1942  0019B8  6E13               	movwf	(uartTx@ptr+1)^0,c
  1943  0019BA  0E17               	movlw	23
  1944  0019BC  6E14               	movwf	uartTx@length^0,c
  1945  0019BE  EC7C  F011         	call	_uartTx	;wreg free
  1946                           
  1947                           ;usart.c: 79:             break;
  1948  0019C2  EF12  F00D         	goto	l531
  1949  0019C6                     l3988:
  1950  0019C6  FFFF               	dw	65535	; assembler added errata NOP
  1951  0019C8  5018               	movf	printError@errCode^0,w,c
  1952  0019CA  6E16               	movwf	??_printError^0,c
  1953  0019CC  6A17               	clrf	(??_printError+1)^0,c
  1954                           
  1955                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1956                           ; Switch size 1, requested type "simple"
  1957                           ; Number of cases is 1, Range of values is 0 to 0
  1958                           ; switch strategies available:
  1959                           ; Name         Instructions Cycles
  1960                           ; simple_byte            4     3 (average)
  1961                           ;	Chosen strategy is simple_byte
  1962  0019CE  5017               	movf	(??_printError+1)^0,w,c
  1963  0019D0  0A00               	xorlw	0	; case 0
  1964  0019D2  B4D8               	btfsc	status,2,c
  1965  0019D4  EFEE  F00C         	goto	l4536
  1966  0019D8  EF12  F00D         	goto	l531
  1967  0019DC                     l4536:
  1968  0019DC  FFFF               	dw	65535	; assembler added errata NOP
  1969                           
  1970                           ; Switch size 1, requested type "simple"
  1971                           ; Number of cases is 8, Range of values is 1 to 8
  1972                           ; switch strategies available:
  1973                           ; Name         Instructions Cycles
  1974                           ; simple_byte           25    13 (average)
  1975                           ;	Chosen strategy is simple_byte
  1976  0019DE  5016               	movf	??_printError^0,w,c
  1977  0019E0  0A01               	xorlw	1	; case 1
  1978  0019E2  B4D8               	btfsc	status,2,c
  1979  0019E4  EF8B  F00C         	goto	l3970
  1980  0019E8  0A03               	xorlw	3	; case 2
  1981  0019EA  B4D8               	btfsc	status,2,c
  1982  0019EC  EF96  F00C         	goto	l3972
  1983  0019F0  0A01               	xorlw	1	; case 3
  1984  0019F2  B4D8               	btfsc	status,2,c
  1985  0019F4  EFA1  F00C         	goto	l3974
  1986  0019F8  0A07               	xorlw	7	; case 4
  1987  0019FA  B4D8               	btfsc	status,2,c
  1988  0019FC  EFAC  F00C         	goto	l3976
  1989  001A00  0A01               	xorlw	1	; case 5
  1990  001A02  B4D8               	btfsc	status,2,c
  1991  001A04  EFB7  F00C         	goto	l3978
  1992  001A08  0A03               	xorlw	3	; case 6
  1993  001A0A  B4D8               	btfsc	status,2,c
  1994  001A0C  EFC2  F00C         	goto	l3980
  1995  001A10  0A01               	xorlw	1	; case 7
  1996  001A12  B4D8               	btfsc	status,2,c
  1997  001A14  EFCD  F00C         	goto	l3982
  1998  001A18  0A0F               	xorlw	15	; case 8
  1999  001A1A  B4D8               	btfsc	status,2,c
  2000  001A1C  EFD8  F00C         	goto	l3984
  2001  001A20  EF12  F00D         	goto	l531
  2002  001A24                     l531:
  2003  001A24  FFFF               	dw	65535	; assembler added errata NOP
  2004  001A26  0012               	return		;funcret
  2005  001A28  FFFF               	dw	65535	; errata NOP
  2006  001A2A                     __end_of_printError:
  2007                           	callstack 0
  2008                           
  2009 ;; *************** function _uartTx *****************
  2010 ;; Defined at:
  2011 ;;		line 221 in file "usart.c"
  2012 ;; Parameters:    Size  Location     Type
  2013 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  2014 ;;		 -> errString_Command(23), errString_Fatal(38), errString_PointZ(52), errString_Bound(32), 
  2015 ;;		 -> errString_Point(40), errString_Reset(39), errString_ZEND(40), errString_Feed(29), 
  2016 ;;  length          1   19[COMRAM] unsigned char 
  2017 ;; Auto vars:     Size  Location     Type
  2018 ;;  i               1   20[COMRAM] unsigned char 
  2019 ;; Return value:  Size  Location     Type
  2020 ;;                  1    wreg      void 
  2021 ;; Registers used:
  2022 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2023 ;; Tracked objects:
  2024 ;;		On entry : 0/0
  2025 ;;		On exit  : 0/0
  2026 ;;		Unchanged: 0/0
  2027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2028 ;;      Params:         3       0       0       0       0       0       0
  2029 ;;      Locals:         1       0       0       0       0       0       0
  2030 ;;      Temps:          0       0       0       0       0       0       0
  2031 ;;      Totals:         4       0       0       0       0       0       0
  2032 ;;Total ram usage:        4 bytes
  2033 ;; Hardware stack levels used:    1
  2034 ;; Hardware stack levels required when called:    4
  2035 ;; This function calls:
  2036 ;;		Nothing
  2037 ;; This function is called by:
  2038 ;;		_printError
  2039 ;; This function uses a non-reentrant model
  2040 ;;
  2041                           
  2042                           	psect	text6
  2043  0022F8                     __ptext6:
  2044                           	callstack 0
  2045  0022F8                     _uartTx:
  2046                           	callstack 0
  2047  0022F8  FFFF               	dw	65535	; assembler added errata NOP
  2048  0022FA                     
  2049                           ;usart.c: 221: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 222: {;usa
      +                          rt.c: 224:     for(char i = 1; i < length; i++){
  2050  0022FA  0E01               	movlw	1
  2051  0022FC  6E15               	movwf	uartTx@i^0,c
  2052  0022FE  EF95  F011         	goto	l3462
  2053  002302                     l3458:
  2054  002302  FFFF               	dw	65535	; assembler added errata NOP
  2055                           
  2056                           ;usart.c: 226:         TXREG = *ptr;
  2057  002304  C012  FFD9         	movff	uartTx@ptr,fsr2l
  2058  002308  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  2059  00230C  50DF               	movf	indf2,w,c
  2060  00230E  6EAD               	movwf	173,c	;volatile
  2061  002310                     l586:
  2062  002310  FFFF               	dw	65535	; assembler added errata NOP
  2063  002312  A2AC               	btfss	172,1,c	;volatile
  2064  002314  EF8E  F011         	goto	u2501
  2065  002318  EF91  F011         	goto	u2500
  2066  00231C                     u2501:
  2067  00231C  FFFF               	dw	65535	; assembler added errata NOP
  2068  00231E  EF88  F011         	goto	l586
  2069  002322                     u2500:
  2070  002322  FFFF               	dw	65535	; assembler added errata NOP
  2071  002324                     
  2072                           ;usart.c: 230:         ptr++;
  2073  002324  4A12               	infsnz	uartTx@ptr^0,f,c
  2074  002326  2A13               	incf	(uartTx@ptr+1)^0,f,c
  2075                           
  2076                           ;usart.c: 231:     }
  2077  002328  2A15               	incf	uartTx@i^0,f,c
  2078  00232A                     l3462:
  2079  00232A  FFFF               	dw	65535	; assembler added errata NOP
  2080  00232C  5014               	movf	uartTx@length^0,w,c
  2081  00232E  5C15               	subwf	uartTx@i^0,w,c
  2082  002330  A0D8               	btfss	status,0,c
  2083  002332  EF9D  F011         	goto	u2511
  2084  002336  EFA0  F011         	goto	u2510
  2085  00233A                     u2511:
  2086  00233A  FFFF               	dw	65535	; assembler added errata NOP
  2087  00233C  EF81  F011         	goto	l3458
  2088  002340                     u2510:
  2089  002340  FFFF               	dw	65535	; assembler added errata NOP
  2090  002342  0012               	return		;funcret
  2091  002344  FFFF               	dw	65535	; errata NOP
  2092  002346                     __end_of_uartTx:
  2093                           	callstack 0
  2094                           
  2095 ;; *************** function _shiftData *****************
  2096 ;; Defined at:
  2097 ;;		line 120 in file "usart.c"
  2098 ;; Parameters:    Size  Location     Type
  2099 ;;		None
  2100 ;; Auto vars:     Size  Location     Type
  2101 ;;  i               1   19[COMRAM] unsigned char 
  2102 ;; Return value:  Size  Location     Type
  2103 ;;                  1    wreg      void 
  2104 ;; Registers used:
  2105 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2106 ;; Tracked objects:
  2107 ;;		On entry : 0/0
  2108 ;;		On exit  : 0/0
  2109 ;;		Unchanged: 0/0
  2110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2111 ;;      Params:         0       0       0       0       0       0       0
  2112 ;;      Locals:         1       0       0       0       0       0       0
  2113 ;;      Temps:          2       0       0       0       0       0       0
  2114 ;;      Totals:         3       0       0       0       0       0       0
  2115 ;;Total ram usage:        3 bytes
  2116 ;; Hardware stack levels used:    1
  2117 ;; Hardware stack levels required when called:    4
  2118 ;; This function calls:
  2119 ;;		Nothing
  2120 ;; This function is called by:
  2121 ;;		_main
  2122 ;; This function uses a non-reentrant model
  2123 ;;
  2124                           
  2125                           	psect	text7
  2126  002240                     __ptext7:
  2127                           	callstack 0
  2128  002240                     _shiftData:
  2129                           	callstack 0
  2130  002240  FFFF               	dw	65535	; assembler added errata NOP
  2131  002242                     
  2132                           ;usart.c: 121:     char i;;usart.c: 123:     for(i = 0; i < 4; i++){
  2133  002242  0E00               	movlw	0
  2134  002244  6E14               	movwf	shiftData@i^0,c
  2135  002246                     l4230:
  2136  002246  FFFF               	dw	65535	; assembler added errata NOP
  2137                           
  2138                           ;usart.c: 124:         dataSequence[i] = dataSequence[i+1];
  2139  002248  5014               	movf	shiftData@i^0,w,c
  2140  00224A  6E12               	movwf	??_shiftData^0,c
  2141  00224C  6A13               	clrf	(??_shiftData+1)^0,c
  2142  00224E  90D8               	bcf	status,0,c
  2143  002250  3612               	rlcf	??_shiftData^0,f,c
  2144  002252  3613               	rlcf	(??_shiftData+1)^0,f,c
  2145  002254  90D8               	bcf	status,0,c
  2146  002256  3612               	rlcf	??_shiftData^0,f,c
  2147  002258  3613               	rlcf	(??_shiftData+1)^0,f,c
  2148  00225A  0EDC               	movlw	low (_dataSequence+4)
  2149  00225C  2412               	addwf	??_shiftData^0,w,c
  2150  00225E  6ED9               	movwf	fsr2l,c
  2151  002260  0E00               	movlw	high (_dataSequence+4)
  2152  002262  2013               	addwfc	(??_shiftData+1)^0,w,c
  2153  002264  6EDA               	movwf	fsr2h,c
  2154  002266  5014               	movf	shiftData@i^0,w,c
  2155  002268  0D04               	mullw	4
  2156  00226A  0ED8               	movlw	low _dataSequence
  2157  00226C  24F3               	addwf	243,w,c
  2158  00226E  6EE1               	movwf	fsr1l,c
  2159  002270  0E00               	movlw	high _dataSequence
  2160  002272  20F4               	addwfc	prodh,w,c
  2161  002274  6EE2               	movwf	fsr1h,c
  2162  002276  CFDE FFE6          	movff	postinc2,postinc1
  2163  00227A  CFDE FFE6          	movff	postinc2,postinc1
  2164  00227E  CFDE FFE6          	movff	postinc2,postinc1
  2165  002282  CFDE FFE6          	movff	postinc2,postinc1
  2166  002286                     
  2167                           ;usart.c: 125:     }
  2168  002286  2A14               	incf	shiftData@i^0,f,c
  2169  002288  0E03               	movlw	3
  2170  00228A  6414               	cpfsgt	shiftData@i^0,c
  2171  00228C  EF4A  F011         	goto	u3521
  2172  002290  EF4D  F011         	goto	u3520
  2173  002294                     u3521:
  2174  002294  FFFF               	dw	65535	; assembler added errata NOP
  2175  002296  EF23  F011         	goto	l4230
  2176  00229A                     u3520:
  2177  00229A  FFFF               	dw	65535	; assembler added errata NOP
  2178  00229C  0012               	return		;funcret
  2179  00229E  FFFF               	dw	65535	; errata NOP
  2180  0022A0                     __end_of_shiftData:
  2181                           	callstack 0
  2182                           
  2183 ;; *************** function _resetPosition *****************
  2184 ;; Defined at:
  2185 ;;		line 158 in file "motors.c"
  2186 ;; Parameters:    Size  Location     Type
  2187 ;;		None
  2188 ;; Auto vars:     Size  Location     Type
  2189 ;;  keepMovingZ     1   23[COMRAM] unsigned char 
  2190 ;;  keepMovingY     1   22[COMRAM] unsigned char 
  2191 ;;  keepMovingX     1   21[COMRAM] unsigned char 
  2192 ;; Return value:  Size  Location     Type
  2193 ;;                  1    wreg      unsigned char 
  2194 ;; Registers used:
  2195 ;;		wreg, status,2, status,0, cstack
  2196 ;; Tracked objects:
  2197 ;;		On entry : 0/0
  2198 ;;		On exit  : 0/0
  2199 ;;		Unchanged: 0/0
  2200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2201 ;;      Params:         0       0       0       0       0       0       0
  2202 ;;      Locals:         3       0       0       0       0       0       0
  2203 ;;      Temps:          0       0       0       0       0       0       0
  2204 ;;      Totals:         3       0       0       0       0       0       0
  2205 ;;Total ram usage:        3 bytes
  2206 ;; Hardware stack levels used:    1
  2207 ;; Hardware stack levels required when called:    5
  2208 ;; This function calls:
  2209 ;;		_enableMotor
  2210 ;;		_resetStep
  2211 ;;		_setDecay
  2212 ;;		_setDirection
  2213 ;;		_setStep
  2214 ;;		_stepMade
  2215 ;; This function is called by:
  2216 ;;		_main
  2217 ;; This function uses a non-reentrant model
  2218 ;;
  2219                           
  2220                           	psect	text8
  2221  00118A                     __ptext8:
  2222                           	callstack 0
  2223  00118A                     _resetPosition:
  2224                           	callstack 0
  2225  00118A  FFFF               	dw	65535	; assembler added errata NOP
  2226  00118C                     
  2227                           ;motors.c: 160:     setStep(0, 0);
  2228  00118C  0E00               	movlw	0
  2229  00118E  6E12               	movwf	setStep@motor^0,c
  2230  001190  0E00               	movlw	0
  2231  001192  EC03  F00F         	call	_setStep
  2232                           
  2233                           ;motors.c: 161:     setStep(1, 0);
  2234  001196  0E00               	movlw	0
  2235  001198  6E12               	movwf	setStep@motor^0,c
  2236  00119A  0E01               	movlw	1
  2237  00119C  EC03  F00F         	call	_setStep
  2238                           
  2239                           ;motors.c: 162:     setStep(2, 0);
  2240  0011A0  0E00               	movlw	0
  2241  0011A2  6E12               	movwf	setStep@motor^0,c
  2242  0011A4  0E02               	movlw	2
  2243  0011A6  EC03  F00F         	call	_setStep
  2244                           
  2245                           ;motors.c: 164:     setDirection(0, 0);
  2246  0011AA  0E00               	movlw	0
  2247  0011AC  6E12               	movwf	setDirection@motor^0,c
  2248  0011AE  0E00               	movlw	0
  2249  0011B0  ECE6  F010         	call	_setDirection
  2250                           
  2251                           ;motors.c: 165:     setDirection(0, 1);
  2252  0011B4  0E01               	movlw	1
  2253  0011B6  6E12               	movwf	setDirection@motor^0,c
  2254  0011B8  0E00               	movlw	0
  2255  0011BA  ECE6  F010         	call	_setDirection
  2256                           
  2257                           ;motors.c: 166:     setDirection(0, 2);
  2258  0011BE  0E02               	movlw	2
  2259  0011C0  6E12               	movwf	setDirection@motor^0,c
  2260  0011C2  0E00               	movlw	0
  2261  0011C4  ECE6  F010         	call	_setDirection
  2262                           
  2263                           ;motors.c: 168:     setDecay(1, 0);
  2264  0011C8  0E00               	movlw	0
  2265  0011CA  6E12               	movwf	setDecay@motor^0,c
  2266  0011CC  0E01               	movlw	1
  2267  0011CE  EC72  F010         	call	_setDecay
  2268                           
  2269                           ;motors.c: 169:     setDecay(1, 1);
  2270  0011D2  0E01               	movlw	1
  2271  0011D4  6E12               	movwf	setDecay@motor^0,c
  2272  0011D6  0E01               	movlw	1
  2273  0011D8  EC72  F010         	call	_setDecay
  2274                           
  2275                           ;motors.c: 170:     setDecay(1, 2);
  2276  0011DC  0E02               	movlw	2
  2277  0011DE  6E12               	movwf	setDecay@motor^0,c
  2278  0011E0  0E01               	movlw	1
  2279  0011E2  EC72  F010         	call	_setDecay
  2280                           
  2281                           ;motors.c: 172:     enableMotor(0, 0);
  2282  0011E6  0E00               	movlw	0
  2283  0011E8  6E12               	movwf	enableMotor@motor^0,c
  2284  0011EA  0E00               	movlw	0
  2285  0011EC  ECAC  F010         	call	_enableMotor
  2286                           
  2287                           ;motors.c: 173:     enableMotor(0, 1);
  2288  0011F0  0E01               	movlw	1
  2289  0011F2  6E12               	movwf	enableMotor@motor^0,c
  2290  0011F4  0E00               	movlw	0
  2291  0011F6  ECAC  F010         	call	_enableMotor
  2292                           
  2293                           ;motors.c: 174:     enableMotor(0, 2);
  2294  0011FA  0E02               	movlw	2
  2295  0011FC  6E12               	movwf	enableMotor@motor^0,c
  2296  0011FE  0E00               	movlw	0
  2297  001200  ECAC  F010         	call	_enableMotor
  2298  001204                     
  2299                           ;motors.c: 178:     unsigned char keepMovingX = 1;
  2300  001204  0E01               	movlw	1
  2301  001206  6E16               	movwf	resetPosition@keepMovingX^0,c
  2302  001208                     
  2303                           ;motors.c: 179:     unsigned char keepMovingY = 1;
  2304  001208  0E01               	movlw	1
  2305  00120A  6E17               	movwf	resetPosition@keepMovingY^0,c
  2306  00120C                     
  2307                           ;motors.c: 180:     unsigned char keepMovingZ = 1;
  2308  00120C  0E01               	movlw	1
  2309  00120E  6E18               	movwf	resetPosition@keepMovingZ^0,c
  2310  001210                     
  2311                           ;motors.c: 183:     T2CONbits.TMR2ON = 1;
  2312  001210  84CA               	bsf	202,2,c	;volatile
  2313  001212                     
  2314                           ;motors.c: 185:     tm0Error = 0;
  2315  001212  0E00               	movlw	0
  2316  001214  6E5C               	movwf	(_tm0Error+1)^0,c
  2317  001216  0E00               	movlw	0
  2318  001218  6E5B               	movwf	_tm0Error^0,c
  2319  00121A                     
  2320                           ;motors.c: 186:     tm0Limit = 100;
  2321  00121A  0E64               	movlw	100
  2322  00121C  6E68               	movwf	_tm0Limit^0,c
  2323  00121E                     
  2324                           ;motors.c: 187:     T0CONbits.TMR0ON = 1;
  2325  00121E  8ED5               	bsf	213,7,c	;volatile
  2326                           
  2327                           ;motors.c: 189:     while(keepMovingX || keepMovingY || keepMovingZ){
  2328  001220  EF93  F009         	goto	l4056
  2329  001224                     l4034:
  2330  001224  FFFF               	dw	65535	; assembler added errata NOP
  2331                           
  2332                           ;motors.c: 192:         if(tm0Error){
  2333  001226  505B               	movf	_tm0Error^0,w,c
  2334  001228  105C               	iorwf	(_tm0Error+1)^0,w,c
  2335  00122A  B4D8               	btfsc	status,2,c
  2336  00122C  EF1A  F009         	goto	u3351
  2337  001230  EF1D  F009         	goto	u3350
  2338  001234                     u3351:
  2339  001234  FFFF               	dw	65535	; assembler added errata NOP
  2340  001236  EF27  F009         	goto	l115
  2341  00123A                     u3350:
  2342  00123A  FFFF               	dw	65535	; assembler added errata NOP
  2343  00123C                     
  2344                           ;motors.c: 194:             LATAbits.LATA2 = 0;
  2345  00123C  9489               	bcf	137,2,c	;volatile
  2346                           
  2347                           ;motors.c: 195:             LATBbits.LATB4 = 0;
  2348  00123E  988A               	bcf	138,4,c	;volatile
  2349                           
  2350                           ;motors.c: 196:             LATCbits.LATC2 = 0;
  2351  001240  948B               	bcf	139,2,c	;volatile
  2352  001242                     
  2353                           ;motors.c: 198:             tm0Error = 3;
  2354  001242  0E00               	movlw	0
  2355  001244  6E5C               	movwf	(_tm0Error+1)^0,c
  2356  001246  0E03               	movlw	3
  2357  001248  6E5B               	movwf	_tm0Error^0,c
  2358                           
  2359                           ;motors.c: 199:             break;
  2360  00124A  EFB1  F009         	goto	l116
  2361  00124E                     l115:
  2362  00124E  FFFF               	dw	65535	; assembler added errata NOP
  2363                           
  2364                           ;motors.c: 206:         if(PORTEbits.RE0 || !keepMovingX){
  2365  001250  B084               	btfsc	132,0,c	;volatile
  2366  001252  EF2D  F009         	goto	u3361
  2367  001256  EF30  F009         	goto	u3360
  2368  00125A                     u3361:
  2369  00125A  FFFF               	dw	65535	; assembler added errata NOP
  2370  00125C  EF3A  F009         	goto	l4042
  2371  001260                     u3360:
  2372  001260  FFFF               	dw	65535	; assembler added errata NOP
  2373  001262  5016               	movf	resetPosition@keepMovingX^0,w,c
  2374  001264  A4D8               	btfss	status,2,c
  2375  001266  EF37  F009         	goto	u3371
  2376  00126A  EF3A  F009         	goto	u3370
  2377  00126E                     u3371:
  2378  00126E  FFFF               	dw	65535	; assembler added errata NOP
  2379  001270  EF3F  F009         	goto	l117
  2380  001274                     u3370:
  2381  001274                     l4042:
  2382  001274  FFFF               	dw	65535	; assembler added errata NOP
  2383                           
  2384                           ;motors.c: 208:             keepMovingX = 0;
  2385  001276  0E00               	movlw	0
  2386  001278  6E16               	movwf	resetPosition@keepMovingX^0,c
  2387                           
  2388                           ;motors.c: 209:         }else{
  2389  00127A  EF41  F009         	goto	l120
  2390  00127E                     l117:
  2391  00127E  FFFF               	dw	65535	; assembler added errata NOP
  2392                           
  2393                           ;motors.c: 211:             LATAbits.LATA2 = 1;
  2394  001280  8489               	bsf	137,2,c	;volatile
  2395  001282                     l120:
  2396  001282  FFFF               	dw	65535	; assembler added errata NOP
  2397                           
  2398                           ;motors.c: 215:         if(PORTEbits.RE1 || !keepMovingY){
  2399  001284  B284               	btfsc	132,1,c	;volatile
  2400  001286  EF47  F009         	goto	u3381
  2401  00128A  EF4A  F009         	goto	u3380
  2402  00128E                     u3381:
  2403  00128E  FFFF               	dw	65535	; assembler added errata NOP
  2404  001290  EF54  F009         	goto	l4046
  2405  001294                     u3380:
  2406  001294  FFFF               	dw	65535	; assembler added errata NOP
  2407  001296  5017               	movf	resetPosition@keepMovingY^0,w,c
  2408  001298  A4D8               	btfss	status,2,c
  2409  00129A  EF51  F009         	goto	u3391
  2410  00129E  EF54  F009         	goto	u3390
  2411  0012A2                     u3391:
  2412  0012A2  FFFF               	dw	65535	; assembler added errata NOP
  2413  0012A4  EF59  F009         	goto	l121
  2414  0012A8                     u3390:
  2415  0012A8                     l4046:
  2416  0012A8  FFFF               	dw	65535	; assembler added errata NOP
  2417                           
  2418                           ;motors.c: 217:             keepMovingY = 0;
  2419  0012AA  0E00               	movlw	0
  2420  0012AC  6E17               	movwf	resetPosition@keepMovingY^0,c
  2421                           
  2422                           ;motors.c: 218:         }else{
  2423  0012AE  EF5B  F009         	goto	l124
  2424  0012B2                     l121:
  2425  0012B2  FFFF               	dw	65535	; assembler added errata NOP
  2426                           
  2427                           ;motors.c: 220:             LATBbits.LATB4 = 1;
  2428  0012B4  888A               	bsf	138,4,c	;volatile
  2429  0012B6                     l124:
  2430  0012B6  FFFF               	dw	65535	; assembler added errata NOP
  2431                           
  2432                           ;motors.c: 224:         if(PORTEbits.RE2 || !keepMovingZ){
  2433  0012B8  B484               	btfsc	132,2,c	;volatile
  2434  0012BA  EF61  F009         	goto	u3401
  2435  0012BE  EF64  F009         	goto	u3400
  2436  0012C2                     u3401:
  2437  0012C2  FFFF               	dw	65535	; assembler added errata NOP
  2438  0012C4  EF6E  F009         	goto	l4050
  2439  0012C8                     u3400:
  2440  0012C8  FFFF               	dw	65535	; assembler added errata NOP
  2441  0012CA  5018               	movf	resetPosition@keepMovingZ^0,w,c
  2442  0012CC  A4D8               	btfss	status,2,c
  2443  0012CE  EF6B  F009         	goto	u3411
  2444  0012D2  EF6E  F009         	goto	u3410
  2445  0012D6                     u3411:
  2446  0012D6  FFFF               	dw	65535	; assembler added errata NOP
  2447  0012D8  EF73  F009         	goto	l125
  2448  0012DC                     u3410:
  2449  0012DC                     l4050:
  2450  0012DC  FFFF               	dw	65535	; assembler added errata NOP
  2451                           
  2452                           ;motors.c: 226:             keepMovingZ = 0;
  2453  0012DE  0E00               	movlw	0
  2454  0012E0  6E18               	movwf	resetPosition@keepMovingZ^0,c
  2455                           
  2456                           ;motors.c: 227:         }else{
  2457  0012E2  EF75  F009         	goto	l4052
  2458  0012E6                     l125:
  2459  0012E6  FFFF               	dw	65535	; assembler added errata NOP
  2460                           
  2461                           ;motors.c: 229:             LATCbits.LATC2 = 1;
  2462  0012E8  848B               	bsf	139,2,c	;volatile
  2463  0012EA                     l4052:
  2464  0012EA  FFFF               	dw	65535	; assembler added errata NOP
  2465  0012EC  EC52  F012         	call	_stepMade	;wreg free
  2466  0012F0  5012               	movf	?_stepMade^0,w,c
  2467  0012F2  1013               	iorwf	(?_stepMade+1)^0,w,c
  2468  0012F4  B4D8               	btfsc	status,2,c
  2469  0012F6  EF7F  F009         	goto	u3421
  2470  0012FA  EF82  F009         	goto	u3420
  2471  0012FE                     u3421:
  2472  0012FE  FFFF               	dw	65535	; assembler added errata NOP
  2473  001300  EF75  F009         	goto	l4052
  2474  001304                     u3420:
  2475  001304  FFFF               	dw	65535	; assembler added errata NOP
  2476  001306                     
  2477                           ;motors.c: 236:         LATAbits.LATA2 = 0;
  2478  001306  9489               	bcf	137,2,c	;volatile
  2479                           
  2480                           ;motors.c: 237:         LATBbits.LATB4 = 0;
  2481  001308  988A               	bcf	138,4,c	;volatile
  2482                           
  2483                           ;motors.c: 238:         LATCbits.LATC2 = 0;
  2484  00130A  948B               	bcf	139,2,c	;volatile
  2485  00130C                     l4054:
  2486  00130C  FFFF               	dw	65535	; assembler added errata NOP
  2487  00130E  EC52  F012         	call	_stepMade	;wreg free
  2488  001312  5012               	movf	?_stepMade^0,w,c
  2489  001314  1013               	iorwf	(?_stepMade+1)^0,w,c
  2490  001316  B4D8               	btfsc	status,2,c
  2491  001318  EF90  F009         	goto	u3431
  2492  00131C  EF93  F009         	goto	u3430
  2493  001320                     u3431:
  2494  001320  FFFF               	dw	65535	; assembler added errata NOP
  2495  001322  EF86  F009         	goto	l4054
  2496  001326                     u3430:
  2497  001326                     l4056:
  2498  001326  FFFF               	dw	65535	; assembler added errata NOP
  2499                           
  2500                           ;motors.c: 189:     while(keepMovingX || keepMovingY || keepMovingZ){
  2501  001328  5016               	movf	resetPosition@keepMovingX^0,w,c
  2502  00132A  A4D8               	btfss	status,2,c
  2503  00132C  EF9A  F009         	goto	u3441
  2504  001330  EF9D  F009         	goto	u3440
  2505  001334                     u3441:
  2506  001334  FFFF               	dw	65535	; assembler added errata NOP
  2507  001336  EF12  F009         	goto	l4034
  2508  00133A                     u3440:
  2509  00133A  FFFF               	dw	65535	; assembler added errata NOP
  2510  00133C  5017               	movf	resetPosition@keepMovingY^0,w,c
  2511  00133E  A4D8               	btfss	status,2,c
  2512  001340  EFA4  F009         	goto	u3451
  2513  001344  EFA7  F009         	goto	u3450
  2514  001348                     u3451:
  2515  001348  FFFF               	dw	65535	; assembler added errata NOP
  2516  00134A  EF12  F009         	goto	l4034
  2517  00134E                     u3450:
  2518  00134E  FFFF               	dw	65535	; assembler added errata NOP
  2519  001350  5018               	movf	resetPosition@keepMovingZ^0,w,c
  2520  001352  A4D8               	btfss	status,2,c
  2521  001354  EFAE  F009         	goto	u3461
  2522  001358  EFB1  F009         	goto	u3460
  2523  00135C                     u3461:
  2524  00135C  FFFF               	dw	65535	; assembler added errata NOP
  2525  00135E  EF12  F009         	goto	l4034
  2526  001362                     u3460:
  2527  001362                     l116:
  2528  001362  FFFF               	dw	65535	; assembler added errata NOP
  2529                           
  2530                           ;motors.c: 245:     T0CONbits.TMR0ON = 0;
  2531  001364  9ED5               	bcf	213,7,c	;volatile
  2532                           
  2533                           ;motors.c: 246:     T2CONbits.TMR2ON = 0;
  2534  001366  94CA               	bcf	202,2,c	;volatile
  2535  001368                     
  2536                           ;motors.c: 248:     TMR0 = 0;
  2537  001368  0E00               	movlw	0
  2538  00136A  6ED7               	movwf	215,c	;volatile
  2539  00136C  0E00               	movlw	0
  2540  00136E  6ED6               	movwf	214,c	;volatile
  2541                           
  2542                           ;motors.c: 249:     TMR2 = 0;
  2543  001370  0E00               	movlw	0
  2544  001372  6ECC               	movwf	204,c	;volatile
  2545  001374                     
  2546                           ;motors.c: 252:     resetStep();
  2547  001374  ECAE  F012         	call	_resetStep	;wreg free
  2548  001378                     
  2549                           ;motors.c: 255:     return(tm0Error);
  2550  001378  505B               	movf	_tm0Error^0,w,c
  2551  00137A  0012               	return		;funcret
  2552  00137C  FFFF               	dw	65535	; errata NOP
  2553  00137E                     __end_of_resetPosition:
  2554                           	callstack 0
  2555                           
  2556 ;; *************** function _setStep *****************
  2557 ;; Defined at:
  2558 ;;		line 67 in file "motors.c"
  2559 ;; Parameters:    Size  Location     Type
  2560 ;;  step            1    wreg     unsigned char 
  2561 ;;  motor           1   17[COMRAM] unsigned char 
  2562 ;; Auto vars:     Size  Location     Type
  2563 ;;  step            1   20[COMRAM] unsigned char 
  2564 ;; Return value:  Size  Location     Type
  2565 ;;                  1    wreg      void 
  2566 ;; Registers used:
  2567 ;;		wreg, status,2, status,0
  2568 ;; Tracked objects:
  2569 ;;		On entry : 0/0
  2570 ;;		On exit  : 0/0
  2571 ;;		Unchanged: 0/0
  2572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2573 ;;      Params:         1       0       0       0       0       0       0
  2574 ;;      Locals:         1       0       0       0       0       0       0
  2575 ;;      Temps:          2       0       0       0       0       0       0
  2576 ;;      Totals:         4       0       0       0       0       0       0
  2577 ;;Total ram usage:        4 bytes
  2578 ;; Hardware stack levels used:    1
  2579 ;; Hardware stack levels required when called:    4
  2580 ;; This function calls:
  2581 ;;		Nothing
  2582 ;; This function is called by:
  2583 ;;		_resetPosition
  2584 ;; This function uses a non-reentrant model
  2585 ;;
  2586                           
  2587                           	psect	text9
  2588  001E06                     __ptext9:
  2589                           	callstack 0
  2590  001E06                     _setStep:
  2591                           	callstack 0
  2592  001E06  FFFF               	dw	65535	; assembler added errata NOP
  2593                           
  2594                           ;incstack = 0
  2595                           ;setStep@step stored from wreg
  2596  001E08  6E15               	movwf	setStep@step^0,c
  2597  001E0A                     
  2598                           ;motors.c: 68:     switch(motor){
  2599  001E0A  EF50  F00F         	goto	l3702
  2600  001E0E                     l3694:
  2601  001E0E  FFFF               	dw	65535	; assembler added errata NOP
  2602                           
  2603                           ;motors.c: 71:             LATAbits.LATA5 = (step & 0x01);
  2604  001E10  C015  F013         	movff	setStep@step,??_setStep
  2605  001E14  0E01               	movlw	1
  2606  001E16  1613               	andwf	??_setStep^0,f,c
  2607  001E18  3A13               	swapf	??_setStep^0,f,c
  2608  001E1A  4613               	rlncf	??_setStep^0,f,c
  2609  001E1C  5089               	movf	137,w,c	;volatile
  2610  001E1E  1813               	xorwf	??_setStep^0,w,c
  2611  001E20  0BDF               	andlw	-33
  2612  001E22  1813               	xorwf	??_setStep^0,w,c
  2613  001E24  6E89               	movwf	137,c	;volatile
  2614                           
  2615                           ;motors.c: 73:             LATBbits.LATB0 = (step & 0x02);
  2616  001E26  C015  F013         	movff	setStep@step,??_setStep
  2617  001E2A  0E02               	movlw	2
  2618  001E2C  1613               	andwf	??_setStep^0,f,c
  2619  001E2E  508A               	movf	138,w,c	;volatile
  2620  001E30  1813               	xorwf	??_setStep^0,w,c
  2621  001E32  0BFE               	andlw	-2
  2622  001E34  1813               	xorwf	??_setStep^0,w,c
  2623  001E36  6E8A               	movwf	138,c	;volatile
  2624                           
  2625                           ;motors.c: 74:             break;
  2626  001E38  EF6B  F00F         	goto	l83
  2627  001E3C                     l3696:
  2628  001E3C  FFFF               	dw	65535	; assembler added errata NOP
  2629                           
  2630                           ;motors.c: 76:             LATBbits.LATB6 = (step & 0x01);
  2631  001E3E  C015  F013         	movff	setStep@step,??_setStep
  2632  001E42  0E01               	movlw	1
  2633  001E44  1613               	andwf	??_setStep^0,f,c
  2634  001E46  3A13               	swapf	??_setStep^0,f,c
  2635  001E48  4613               	rlncf	??_setStep^0,f,c
  2636  001E4A  4613               	rlncf	??_setStep^0,f,c
  2637  001E4C  508A               	movf	138,w,c	;volatile
  2638  001E4E  1813               	xorwf	??_setStep^0,w,c
  2639  001E50  0BBF               	andlw	-65
  2640  001E52  1813               	xorwf	??_setStep^0,w,c
  2641  001E54  6E8A               	movwf	138,c	;volatile
  2642                           
  2643                           ;motors.c: 77:             LATBbits.LATB7 = (step & 0x02);
  2644  001E56  C015  F013         	movff	setStep@step,??_setStep
  2645  001E5A  0E02               	movlw	2
  2646  001E5C  1613               	andwf	??_setStep^0,f,c
  2647  001E5E  3213               	rrcf	??_setStep^0,f,c
  2648  001E60  3213               	rrcf	??_setStep^0,f,c
  2649  001E62  508A               	movf	138,w,c	;volatile
  2650  001E64  1813               	xorwf	??_setStep^0,w,c
  2651  001E66  0B7F               	andlw	-129
  2652  001E68  1813               	xorwf	??_setStep^0,w,c
  2653  001E6A  6E8A               	movwf	138,c	;volatile
  2654                           
  2655                           ;motors.c: 78:             break;
  2656  001E6C  EF6B  F00F         	goto	l83
  2657  001E70                     l3698:
  2658  001E70  FFFF               	dw	65535	; assembler added errata NOP
  2659                           
  2660                           ;motors.c: 80:             LATCbits.LATC4 = (step & 0x01);
  2661  001E72  C015  F013         	movff	setStep@step,??_setStep
  2662  001E76  0E01               	movlw	1
  2663  001E78  1613               	andwf	??_setStep^0,f,c
  2664  001E7A  3A13               	swapf	??_setStep^0,f,c
  2665  001E7C  508B               	movf	139,w,c	;volatile
  2666  001E7E  1813               	xorwf	??_setStep^0,w,c
  2667  001E80  0BEF               	andlw	-17
  2668  001E82  1813               	xorwf	??_setStep^0,w,c
  2669  001E84  6E8B               	movwf	139,c	;volatile
  2670                           
  2671                           ;motors.c: 81:             LATCbits.LATC5 = (step & 0x02);
  2672  001E86  C015  F013         	movff	setStep@step,??_setStep
  2673  001E8A  0E02               	movlw	2
  2674  001E8C  1613               	andwf	??_setStep^0,f,c
  2675  001E8E  3A13               	swapf	??_setStep^0,f,c
  2676  001E90  4613               	rlncf	??_setStep^0,f,c
  2677  001E92  508B               	movf	139,w,c	;volatile
  2678  001E94  1813               	xorwf	??_setStep^0,w,c
  2679  001E96  0BDF               	andlw	-33
  2680  001E98  1813               	xorwf	??_setStep^0,w,c
  2681  001E9A  6E8B               	movwf	139,c	;volatile
  2682                           
  2683                           ;motors.c: 82:             break;
  2684  001E9C  EF6B  F00F         	goto	l83
  2685  001EA0                     l3702:
  2686  001EA0  FFFF               	dw	65535	; assembler added errata NOP
  2687  001EA2  5012               	movf	setStep@motor^0,w,c
  2688  001EA4  6E13               	movwf	??_setStep^0,c
  2689  001EA6  6A14               	clrf	(??_setStep+1)^0,c
  2690                           
  2691                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2692                           ; Switch size 1, requested type "simple"
  2693                           ; Number of cases is 1, Range of values is 0 to 0
  2694                           ; switch strategies available:
  2695                           ; Name         Instructions Cycles
  2696                           ; simple_byte            4     3 (average)
  2697                           ;	Chosen strategy is simple_byte
  2698  001EA8  5014               	movf	(??_setStep+1)^0,w,c
  2699  001EAA  0A00               	xorlw	0	; case 0
  2700  001EAC  B4D8               	btfsc	status,2,c
  2701  001EAE  EF5B  F00F         	goto	l4538
  2702  001EB2  EF6B  F00F         	goto	l83
  2703  001EB6                     l4538:
  2704  001EB6  FFFF               	dw	65535	; assembler added errata NOP
  2705                           
  2706                           ; Switch size 1, requested type "simple"
  2707                           ; Number of cases is 3, Range of values is 0 to 2
  2708                           ; switch strategies available:
  2709                           ; Name         Instructions Cycles
  2710                           ; simple_byte           10     6 (average)
  2711                           ;	Chosen strategy is simple_byte
  2712  001EB8  5013               	movf	??_setStep^0,w,c
  2713  001EBA  0A00               	xorlw	0	; case 0
  2714  001EBC  B4D8               	btfsc	status,2,c
  2715  001EBE  EF07  F00F         	goto	l3694
  2716  001EC2  0A01               	xorlw	1	; case 1
  2717  001EC4  B4D8               	btfsc	status,2,c
  2718  001EC6  EF1E  F00F         	goto	l3696
  2719  001ECA  0A03               	xorlw	3	; case 2
  2720  001ECC  B4D8               	btfsc	status,2,c
  2721  001ECE  EF38  F00F         	goto	l3698
  2722  001ED2  EF6B  F00F         	goto	l83
  2723  001ED6                     l83:
  2724  001ED6  FFFF               	dw	65535	; assembler added errata NOP
  2725  001ED8  0012               	return		;funcret
  2726  001EDA  FFFF               	dw	65535	; errata NOP
  2727  001EDC                     __end_of_setStep:
  2728                           	callstack 0
  2729                           
  2730 ;; *************** function _setDecay *****************
  2731 ;; Defined at:
  2732 ;;		line 136 in file "motors.c"
  2733 ;; Parameters:    Size  Location     Type
  2734 ;;  decay           1    wreg     unsigned char 
  2735 ;;  motor           1   17[COMRAM] unsigned char 
  2736 ;; Auto vars:     Size  Location     Type
  2737 ;;  decay           1   20[COMRAM] unsigned char 
  2738 ;; Return value:  Size  Location     Type
  2739 ;;                  1    wreg      void 
  2740 ;; Registers used:
  2741 ;;		wreg, status,2, status,0
  2742 ;; Tracked objects:
  2743 ;;		On entry : 0/0
  2744 ;;		On exit  : 0/0
  2745 ;;		Unchanged: 0/0
  2746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2747 ;;      Params:         1       0       0       0       0       0       0
  2748 ;;      Locals:         1       0       0       0       0       0       0
  2749 ;;      Temps:          2       0       0       0       0       0       0
  2750 ;;      Totals:         4       0       0       0       0       0       0
  2751 ;;Total ram usage:        4 bytes
  2752 ;; Hardware stack levels used:    1
  2753 ;; Hardware stack levels required when called:    4
  2754 ;; This function calls:
  2755 ;;		Nothing
  2756 ;; This function is called by:
  2757 ;;		_resetPosition
  2758 ;; This function uses a non-reentrant model
  2759 ;;
  2760                           
  2761                           	psect	text10
  2762  0020E4                     __ptext10:
  2763                           	callstack 0
  2764  0020E4                     _setDecay:
  2765                           	callstack 0
  2766  0020E4  FFFF               	dw	65535	; assembler added errata NOP
  2767                           
  2768                           ;incstack = 0
  2769                           ;setDecay@decay stored from wreg
  2770  0020E6  6E15               	movwf	setDecay@decay^0,c
  2771  0020E8                     
  2772                           ;motors.c: 137:     switch(motor){
  2773  0020E8  EF8E  F010         	goto	l3734
  2774  0020EC                     l3726:
  2775  0020EC  FFFF               	dw	65535	; assembler added errata NOP
  2776                           
  2777                           ;motors.c: 139:             LATBbits.LATB2 = decay;
  2778  0020EE  B015               	btfsc	setDecay@decay^0,0,c
  2779  0020F0  D002               	bra	u2955
  2780  0020F2  948A               	bcf	138,2,c	;volatile
  2781  0020F4  D001               	bra	u2956
  2782  0020F6                     u2955:
  2783  0020F6  848A               	bsf	138,2,c	;volatile
  2784  0020F8                     u2956:
  2785                           
  2786                           ;motors.c: 140:             break;
  2787  0020F8  EFA9  F010         	goto	l110
  2788  0020FC                     l3728:
  2789  0020FC  FFFF               	dw	65535	; assembler added errata NOP
  2790                           
  2791                           ;motors.c: 142:             LATCbits.LATC0 = decay;
  2792  0020FE  B015               	btfsc	setDecay@decay^0,0,c
  2793  002100  D002               	bra	u2965
  2794  002102  908B               	bcf	139,0,c	;volatile
  2795  002104  D001               	bra	u2966
  2796  002106                     u2965:
  2797  002106  808B               	bsf	139,0,c	;volatile
  2798  002108                     u2966:
  2799                           
  2800                           ;motors.c: 143:             break;
  2801  002108  EFA9  F010         	goto	l110
  2802  00210C                     l3730:
  2803  00210C  FFFF               	dw	65535	; assembler added errata NOP
  2804                           
  2805                           ;motors.c: 145:             LATDbits.LATD0 = decay;
  2806  00210E  B015               	btfsc	setDecay@decay^0,0,c
  2807  002110  D002               	bra	u2975
  2808  002112  908C               	bcf	140,0,c	;volatile
  2809  002114  D001               	bra	u2976
  2810  002116                     u2975:
  2811  002116  808C               	bsf	140,0,c	;volatile
  2812  002118                     u2976:
  2813                           
  2814                           ;motors.c: 146:             break;
  2815  002118  EFA9  F010         	goto	l110
  2816  00211C                     l3734:
  2817  00211C  FFFF               	dw	65535	; assembler added errata NOP
  2818  00211E  5012               	movf	setDecay@motor^0,w,c
  2819  002120  6E13               	movwf	??_setDecay^0,c
  2820  002122  6A14               	clrf	(??_setDecay+1)^0,c
  2821                           
  2822                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2823                           ; Switch size 1, requested type "simple"
  2824                           ; Number of cases is 1, Range of values is 0 to 0
  2825                           ; switch strategies available:
  2826                           ; Name         Instructions Cycles
  2827                           ; simple_byte            4     3 (average)
  2828                           ;	Chosen strategy is simple_byte
  2829  002124  5014               	movf	(??_setDecay+1)^0,w,c
  2830  002126  0A00               	xorlw	0	; case 0
  2831  002128  B4D8               	btfsc	status,2,c
  2832  00212A  EF99  F010         	goto	l4540
  2833  00212E  EFA9  F010         	goto	l110
  2834  002132                     l4540:
  2835  002132  FFFF               	dw	65535	; assembler added errata NOP
  2836                           
  2837                           ; Switch size 1, requested type "simple"
  2838                           ; Number of cases is 3, Range of values is 0 to 2
  2839                           ; switch strategies available:
  2840                           ; Name         Instructions Cycles
  2841                           ; simple_byte           10     6 (average)
  2842                           ;	Chosen strategy is simple_byte
  2843  002134  5013               	movf	??_setDecay^0,w,c
  2844  002136  0A00               	xorlw	0	; case 0
  2845  002138  B4D8               	btfsc	status,2,c
  2846  00213A  EF76  F010         	goto	l3726
  2847  00213E  0A01               	xorlw	1	; case 1
  2848  002140  B4D8               	btfsc	status,2,c
  2849  002142  EF7E  F010         	goto	l3728
  2850  002146  0A03               	xorlw	3	; case 2
  2851  002148  B4D8               	btfsc	status,2,c
  2852  00214A  EF86  F010         	goto	l3730
  2853  00214E  EFA9  F010         	goto	l110
  2854  002152                     l110:
  2855  002152  FFFF               	dw	65535	; assembler added errata NOP
  2856  002154  0012               	return		;funcret
  2857  002156  FFFF               	dw	65535	; errata NOP
  2858  002158                     __end_of_setDecay:
  2859                           	callstack 0
  2860                           
  2861 ;; *************** function _enableMotor *****************
  2862 ;; Defined at:
  2863 ;;		line 94 in file "motors.c"
  2864 ;; Parameters:    Size  Location     Type
  2865 ;;  enable          1    wreg     unsigned char 
  2866 ;;  motor           1   17[COMRAM] unsigned char 
  2867 ;; Auto vars:     Size  Location     Type
  2868 ;;  enable          1   20[COMRAM] unsigned char 
  2869 ;; Return value:  Size  Location     Type
  2870 ;;                  1    wreg      void 
  2871 ;; Registers used:
  2872 ;;		wreg, status,2, status,0
  2873 ;; Tracked objects:
  2874 ;;		On entry : 0/0
  2875 ;;		On exit  : 0/0
  2876 ;;		Unchanged: 0/0
  2877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2878 ;;      Params:         1       0       0       0       0       0       0
  2879 ;;      Locals:         1       0       0       0       0       0       0
  2880 ;;      Temps:          2       0       0       0       0       0       0
  2881 ;;      Totals:         4       0       0       0       0       0       0
  2882 ;;Total ram usage:        4 bytes
  2883 ;; Hardware stack levels used:    1
  2884 ;; Hardware stack levels required when called:    4
  2885 ;; This function calls:
  2886 ;;		Nothing
  2887 ;; This function is called by:
  2888 ;;		_resetPosition
  2889 ;;		_main
  2890 ;; This function uses a non-reentrant model
  2891 ;;
  2892                           
  2893                           	psect	text11
  2894  002158                     __ptext11:
  2895                           	callstack 0
  2896  002158                     _enableMotor:
  2897                           	callstack 0
  2898  002158  FFFF               	dw	65535	; assembler added errata NOP
  2899                           
  2900                           ;incstack = 0
  2901                           ;enableMotor@enable stored from wreg
  2902  00215A  6E15               	movwf	enableMotor@enable^0,c
  2903  00215C                     
  2904                           ;motors.c: 95:     switch(motor){
  2905  00215C  EFC8  F010         	goto	l3718
  2906  002160                     l3710:
  2907  002160  FFFF               	dw	65535	; assembler added errata NOP
  2908                           
  2909                           ;motors.c: 97:             LATAbits.LATA3 = enable;
  2910  002162  B015               	btfsc	enableMotor@enable^0,0,c
  2911  002164  D002               	bra	u2925
  2912  002166  9689               	bcf	137,3,c	;volatile
  2913  002168  D001               	bra	u2926
  2914  00216A                     u2925:
  2915  00216A  8689               	bsf	137,3,c	;volatile
  2916  00216C                     u2926:
  2917                           
  2918                           ;motors.c: 98:             break;
  2919  00216C  EFE3  F010         	goto	l92
  2920  002170                     l3712:
  2921  002170  FFFF               	dw	65535	; assembler added errata NOP
  2922                           
  2923                           ;motors.c: 100:             LATBbits.LATB5 = enable;
  2924  002172  B015               	btfsc	enableMotor@enable^0,0,c
  2925  002174  D002               	bra	u2935
  2926  002176  9A8A               	bcf	138,5,c	;volatile
  2927  002178  D001               	bra	u2936
  2928  00217A                     u2935:
  2929  00217A  8A8A               	bsf	138,5,c	;volatile
  2930  00217C                     u2936:
  2931                           
  2932                           ;motors.c: 101:             break;
  2933  00217C  EFE3  F010         	goto	l92
  2934  002180                     l3714:
  2935  002180  FFFF               	dw	65535	; assembler added errata NOP
  2936                           
  2937                           ;motors.c: 103:             LATCbits.LATC3 = enable;
  2938  002182  B015               	btfsc	enableMotor@enable^0,0,c
  2939  002184  D002               	bra	u2945
  2940  002186  968B               	bcf	139,3,c	;volatile
  2941  002188  D001               	bra	u2946
  2942  00218A                     u2945:
  2943  00218A  868B               	bsf	139,3,c	;volatile
  2944  00218C                     u2946:
  2945                           
  2946                           ;motors.c: 104:             break;
  2947  00218C  EFE3  F010         	goto	l92
  2948  002190                     l3718:
  2949  002190  FFFF               	dw	65535	; assembler added errata NOP
  2950  002192  5012               	movf	enableMotor@motor^0,w,c
  2951  002194  6E13               	movwf	??_enableMotor^0,c
  2952  002196  6A14               	clrf	(??_enableMotor+1)^0,c
  2953                           
  2954                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2955                           ; Switch size 1, requested type "simple"
  2956                           ; Number of cases is 1, Range of values is 0 to 0
  2957                           ; switch strategies available:
  2958                           ; Name         Instructions Cycles
  2959                           ; simple_byte            4     3 (average)
  2960                           ;	Chosen strategy is simple_byte
  2961  002198  5014               	movf	(??_enableMotor+1)^0,w,c
  2962  00219A  0A00               	xorlw	0	; case 0
  2963  00219C  B4D8               	btfsc	status,2,c
  2964  00219E  EFD3  F010         	goto	l4542
  2965  0021A2  EFE3  F010         	goto	l92
  2966  0021A6                     l4542:
  2967  0021A6  FFFF               	dw	65535	; assembler added errata NOP
  2968                           
  2969                           ; Switch size 1, requested type "simple"
  2970                           ; Number of cases is 3, Range of values is 0 to 2
  2971                           ; switch strategies available:
  2972                           ; Name         Instructions Cycles
  2973                           ; simple_byte           10     6 (average)
  2974                           ;	Chosen strategy is simple_byte
  2975  0021A8  5013               	movf	??_enableMotor^0,w,c
  2976  0021AA  0A00               	xorlw	0	; case 0
  2977  0021AC  B4D8               	btfsc	status,2,c
  2978  0021AE  EFB0  F010         	goto	l3710
  2979  0021B2  0A01               	xorlw	1	; case 1
  2980  0021B4  B4D8               	btfsc	status,2,c
  2981  0021B6  EFB8  F010         	goto	l3712
  2982  0021BA  0A03               	xorlw	3	; case 2
  2983  0021BC  B4D8               	btfsc	status,2,c
  2984  0021BE  EFC0  F010         	goto	l3714
  2985  0021C2  EFE3  F010         	goto	l92
  2986  0021C6                     l92:
  2987  0021C6  FFFF               	dw	65535	; assembler added errata NOP
  2988  0021C8  0012               	return		;funcret
  2989  0021CA  FFFF               	dw	65535	; errata NOP
  2990  0021CC                     __end_of_enableMotor:
  2991                           	callstack 0
  2992                           
  2993 ;; *************** function _resetNewSequence *****************
  2994 ;; Defined at:
  2995 ;;		line 112 in file "usart.c"
  2996 ;; Parameters:    Size  Location     Type
  2997 ;;		None
  2998 ;; Auto vars:     Size  Location     Type
  2999 ;;		None
  3000 ;; Return value:  Size  Location     Type
  3001 ;;                  1    wreg      void 
  3002 ;; Registers used:
  3003 ;;		wreg, status,2
  3004 ;; Tracked objects:
  3005 ;;		On entry : 0/0
  3006 ;;		On exit  : 0/0
  3007 ;;		Unchanged: 0/0
  3008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3009 ;;      Params:         0       0       0       0       0       0       0
  3010 ;;      Locals:         0       0       0       0       0       0       0
  3011 ;;      Temps:          0       0       0       0       0       0       0
  3012 ;;      Totals:         0       0       0       0       0       0       0
  3013 ;;Total ram usage:        0 bytes
  3014 ;; Hardware stack levels used:    1
  3015 ;; Hardware stack levels required when called:    4
  3016 ;; This function calls:
  3017 ;;		Nothing
  3018 ;; This function is called by:
  3019 ;;		_main
  3020 ;; This function uses a non-reentrant model
  3021 ;;
  3022                           
  3023                           	psect	text12
  3024  002534                     __ptext12:
  3025                           	callstack 0
  3026  002534                     _resetNewSequence:
  3027                           	callstack 0
  3028  002534  FFFF               	dw	65535	; assembler added errata NOP
  3029  002536                     
  3030                           ;usart.c: 113:     _newSequence = 0;
  3031  002536  0E00               	movlw	0
  3032  002538  6E5F               	movwf	__newSequence^0,c
  3033  00253A  0012               	return		;funcret
  3034  00253C  FFFF               	dw	65535	; errata NOP
  3035  00253E                     __end_of_resetNewSequence:
  3036                           	callstack 0
  3037                           
  3038 ;; *************** function _reduceSeq *****************
  3039 ;; Defined at:
  3040 ;;		line 89 in file "usart.c"
  3041 ;; Parameters:    Size  Location     Type
  3042 ;;		None
  3043 ;; Auto vars:     Size  Location     Type
  3044 ;;		None
  3045 ;; Return value:  Size  Location     Type
  3046 ;;                  1    wreg      void 
  3047 ;; Registers used:
  3048 ;;		status,2, status,0
  3049 ;; Tracked objects:
  3050 ;;		On entry : 0/0
  3051 ;;		On exit  : 0/0
  3052 ;;		Unchanged: 0/0
  3053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3054 ;;      Params:         0       0       0       0       0       0       0
  3055 ;;      Locals:         0       0       0       0       0       0       0
  3056 ;;      Temps:          0       0       0       0       0       0       0
  3057 ;;      Totals:         0       0       0       0       0       0       0
  3058 ;;Total ram usage:        0 bytes
  3059 ;; Hardware stack levels used:    1
  3060 ;; Hardware stack levels required when called:    4
  3061 ;; This function calls:
  3062 ;;		Nothing
  3063 ;; This function is called by:
  3064 ;;		_main
  3065 ;; This function uses a non-reentrant model
  3066 ;;
  3067                           
  3068                           	psect	text13
  3069  002584                     __ptext13:
  3070                           	callstack 0
  3071  002584                     _reduceSeq:
  3072                           	callstack 0
  3073  002584  FFFF               	dw	65535	; assembler added errata NOP
  3074  002586                     
  3075                           ;usart.c: 90:     dataCounter--;
  3076  002586  0661               	decf	_dataCounter^0,f,c
  3077  002588  0012               	return		;funcret
  3078  00258A  FFFF               	dw	65535	; errata NOP
  3079  00258C                     __end_of_reduceSeq:
  3080                           	callstack 0
  3081                           
  3082 ;; *************** function _readSeq *****************
  3083 ;; Defined at:
  3084 ;;		line 96 in file "usart.c"
  3085 ;; Parameters:    Size  Location     Type
  3086 ;;		None
  3087 ;; Auto vars:     Size  Location     Type
  3088 ;;		None
  3089 ;; Return value:  Size  Location     Type
  3090 ;;                  1    wreg      unsigned char 
  3091 ;; Registers used:
  3092 ;;		wreg, status,2
  3093 ;; Tracked objects:
  3094 ;;		On entry : 0/0
  3095 ;;		On exit  : 0/0
  3096 ;;		Unchanged: 0/0
  3097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3098 ;;      Params:         0       0       0       0       0       0       0
  3099 ;;      Locals:         0       0       0       0       0       0       0
  3100 ;;      Temps:          0       0       0       0       0       0       0
  3101 ;;      Totals:         0       0       0       0       0       0       0
  3102 ;;Total ram usage:        0 bytes
  3103 ;; Hardware stack levels used:    1
  3104 ;; Hardware stack levels required when called:    4
  3105 ;; This function calls:
  3106 ;;		Nothing
  3107 ;; This function is called by:
  3108 ;;		_main
  3109 ;; This function uses a non-reentrant model
  3110 ;;
  3111                           
  3112                           	psect	text14
  3113  00258C                     __ptext14:
  3114                           	callstack 0
  3115  00258C                     _readSeq:
  3116                           	callstack 0
  3117  00258C  FFFF               	dw	65535	; assembler added errata NOP
  3118  00258E                     
  3119                           ;usart.c: 97:     return dataCounter;
  3120  00258E  5061               	movf	_dataCounter^0,w,c
  3121  002590  0012               	return		;funcret
  3122  002592  FFFF               	dw	65535	; errata NOP
  3123  002594                     __end_of_readSeq:
  3124                           	callstack 0
  3125                           
  3126 ;; *************** function _newSequence *****************
  3127 ;; Defined at:
  3128 ;;		line 104 in file "usart.c"
  3129 ;; Parameters:    Size  Location     Type
  3130 ;;		None
  3131 ;; Auto vars:     Size  Location     Type
  3132 ;;		None
  3133 ;; Return value:  Size  Location     Type
  3134 ;;                  1    wreg      unsigned char 
  3135 ;; Registers used:
  3136 ;;		wreg, status,2
  3137 ;; Tracked objects:
  3138 ;;		On entry : 0/0
  3139 ;;		On exit  : 0/0
  3140 ;;		Unchanged: 0/0
  3141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3142 ;;      Params:         0       0       0       0       0       0       0
  3143 ;;      Locals:         0       0       0       0       0       0       0
  3144 ;;      Temps:          0       0       0       0       0       0       0
  3145 ;;      Totals:         0       0       0       0       0       0       0
  3146 ;;Total ram usage:        0 bytes
  3147 ;; Hardware stack levels used:    1
  3148 ;; Hardware stack levels required when called:    4
  3149 ;; This function calls:
  3150 ;;		Nothing
  3151 ;; This function is called by:
  3152 ;;		_main
  3153 ;; This function uses a non-reentrant model
  3154 ;;
  3155                           
  3156                           	psect	text15
  3157  002594                     __ptext15:
  3158                           	callstack 0
  3159  002594                     _newSequence:
  3160                           	callstack 0
  3161  002594  FFFF               	dw	65535	; assembler added errata NOP
  3162  002596                     
  3163                           ;usart.c: 105:     return _newSequence;
  3164  002596  505F               	movf	__newSequence^0,w,c
  3165  002598  0012               	return		;funcret
  3166  00259A  FFFF               	dw	65535	; errata NOP
  3167  00259C                     __end_of_newSequence:
  3168                           	callstack 0
  3169                           
  3170 ;; *************** function _interruptInit *****************
  3171 ;; Defined at:
  3172 ;;		line 102 in file "main.c"
  3173 ;; Parameters:    Size  Location     Type
  3174 ;;		None
  3175 ;; Auto vars:     Size  Location     Type
  3176 ;;		None
  3177 ;; Return value:  Size  Location     Type
  3178 ;;                  1    wreg      void 
  3179 ;; Registers used:
  3180 ;;		None
  3181 ;; Tracked objects:
  3182 ;;		On entry : 0/0
  3183 ;;		On exit  : 0/0
  3184 ;;		Unchanged: 0/0
  3185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3186 ;;      Params:         0       0       0       0       0       0       0
  3187 ;;      Locals:         0       0       0       0       0       0       0
  3188 ;;      Temps:          0       0       0       0       0       0       0
  3189 ;;      Totals:         0       0       0       0       0       0       0
  3190 ;;Total ram usage:        0 bytes
  3191 ;; Hardware stack levels used:    1
  3192 ;; Hardware stack levels required when called:    4
  3193 ;; This function calls:
  3194 ;;		Nothing
  3195 ;; This function is called by:
  3196 ;;		_main
  3197 ;; This function uses a non-reentrant model
  3198 ;;
  3199                           
  3200                           	psect	text16
  3201  002394                     __ptext16:
  3202                           	callstack 0
  3203  002394                     _interruptInit:
  3204                           	callstack 0
  3205  002394  FFFF               	dw	65535	; assembler added errata NOP
  3206  002396                     
  3207                           ;main.c: 104:     if(!INTCONbits.GIE){
  3208  002396  BEF2               	btfsc	242,7,c	;volatile
  3209  002398  EFD0  F011         	goto	u3471
  3210  00239C  EFD3  F011         	goto	u3470
  3211  0023A0                     u3471:
  3212  0023A0  FFFF               	dw	65535	; assembler added errata NOP
  3213  0023A2  EFD5  F011         	goto	l334
  3214  0023A6                     u3470:
  3215  0023A6  FFFF               	dw	65535	; assembler added errata NOP
  3216  0023A8                     
  3217                           ;main.c: 105:         INTCONbits.GIE = 1;
  3218  0023A8  8EF2               	bsf	242,7,c	;volatile
  3219  0023AA                     l334:
  3220  0023AA  FFFF               	dw	65535	; assembler added errata NOP
  3221                           
  3222                           ;main.c: 107:     if(!INTCONbits.PEIE){
  3223  0023AC  BCF2               	btfsc	242,6,c	;volatile
  3224  0023AE  EFDB  F011         	goto	u3481
  3225  0023B2  EFDE  F011         	goto	u3480
  3226  0023B6                     u3481:
  3227  0023B6  FFFF               	dw	65535	; assembler added errata NOP
  3228  0023B8  EFE0  F011         	goto	l335
  3229  0023BC                     u3480:
  3230  0023BC  FFFF               	dw	65535	; assembler added errata NOP
  3231  0023BE                     
  3232                           ;main.c: 108:         INTCONbits.PEIE = 1;
  3233  0023BE  8CF2               	bsf	242,6,c	;volatile
  3234  0023C0                     l335:
  3235  0023C0  FFFF               	dw	65535	; assembler added errata NOP
  3236                           
  3237                           ;main.c: 112:     RCONbits.IPEN = 1;
  3238  0023C2  8ED0               	bsf	208,7,c	;volatile
  3239                           
  3240                           ;main.c: 113:     INTCONbits.T0IE = 1;
  3241  0023C4  8AF2               	bsf	242,5,c	;volatile
  3242                           
  3243                           ;main.c: 114:     PIE1bits.TMR2IE = 1;
  3244  0023C6  829D               	bsf	157,1,c	;volatile
  3245                           
  3246                           ;main.c: 115:     PIE1bits.RC1IE = 1;
  3247  0023C8  8A9D               	bsf	157,5,c	;volatile
  3248  0023CA  0012               	return		;funcret
  3249  0023CC  FFFF               	dw	65535	; errata NOP
  3250  0023CE                     __end_of_interruptInit:
  3251                           	callstack 0
  3252                           
  3253 ;; *************** function _initPinMotors *****************
  3254 ;; Defined at:
  3255 ;;		line 42 in file "motors.c"
  3256 ;; Parameters:    Size  Location     Type
  3257 ;;		None
  3258 ;; Auto vars:     Size  Location     Type
  3259 ;;		None
  3260 ;; Return value:  Size  Location     Type
  3261 ;;                  1    wreg      void 
  3262 ;; Registers used:
  3263 ;;		wreg, status,2, status,0
  3264 ;; Tracked objects:
  3265 ;;		On entry : 0/0
  3266 ;;		On exit  : 0/0
  3267 ;;		Unchanged: 0/0
  3268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3269 ;;      Params:         0       0       0       0       0       0       0
  3270 ;;      Locals:         0       0       0       0       0       0       0
  3271 ;;      Temps:          0       0       0       0       0       0       0
  3272 ;;      Totals:         0       0       0       0       0       0       0
  3273 ;;Total ram usage:        0 bytes
  3274 ;; Hardware stack levels used:    1
  3275 ;; Hardware stack levels required when called:    4
  3276 ;; This function calls:
  3277 ;;		Nothing
  3278 ;; This function is called by:
  3279 ;;		_main
  3280 ;; This function uses a non-reentrant model
  3281 ;;
  3282                           
  3283                           	psect	text17
  3284  002426                     __ptext17:
  3285                           	callstack 0
  3286  002426                     _initPinMotors:
  3287                           	callstack 0
  3288  002426  FFFF               	dw	65535	; assembler added errata NOP
  3289  002428                     
  3290                           ;motors.c: 44:     ADCON1bits.PCFG = 0x06;
  3291  002428  50C1               	movf	193,w,c	;volatile
  3292  00242A  0BF0               	andlw	-16
  3293  00242C  0906               	iorlw	6
  3294  00242E  6EC1               	movwf	193,c	;volatile
  3295  002430                     
  3296                           ;motors.c: 45:     TRISA &= 0b11010001;
  3297  002430  0ED1               	movlw	209
  3298  002432  1692               	andwf	146,f,c	;volatile
  3299  002434                     
  3300                           ;motors.c: 47:     TRISB &= 0b00000010;
  3301  002434  0E02               	movlw	2
  3302  002436  1693               	andwf	147,f,c	;volatile
  3303  002438                     
  3304                           ;motors.c: 48:     TRISC &= 0b11000000;
  3305  002438  0EC0               	movlw	192
  3306  00243A  1694               	andwf	148,f,c	;volatile
  3307  00243C                     
  3308                           ;motors.c: 49:     TRISD &= 0b11000000;
  3309  00243C  0EC0               	movlw	192
  3310  00243E  1695               	andwf	149,f,c	;volatile
  3311  002440                     
  3312                           ;motors.c: 52:     TRISEbits.TRISE0 = 1;
  3313  002440  8096               	bsf	150,0,c	;volatile
  3314  002442                     
  3315                           ;motors.c: 53:     TRISEbits.TRISE1 = 1;
  3316  002442  8296               	bsf	150,1,c	;volatile
  3317  002444                     
  3318                           ;motors.c: 54:     TRISEbits.TRISE2 = 1;
  3319  002444  8496               	bsf	150,2,c	;volatile
  3320  002446                     
  3321                           ;motors.c: 57:     TRISDbits.TRISD7 = 1;
  3322  002446  8E95               	bsf	149,7,c	;volatile
  3323  002448  0012               	return		;funcret
  3324  00244A  FFFF               	dw	65535	; errata NOP
  3325  00244C                     __end_of_initPinMotors:
  3326                           	callstack 0
  3327                           
  3328 ;; *************** function _initADC *****************
  3329 ;; Defined at:
  3330 ;;		line 18 in file "adc.c"
  3331 ;; Parameters:    Size  Location     Type
  3332 ;;		None
  3333 ;; Auto vars:     Size  Location     Type
  3334 ;;		None
  3335 ;; Return value:  Size  Location     Type
  3336 ;;                  1    wreg      void 
  3337 ;; Registers used:
  3338 ;;		wreg, status,2
  3339 ;; Tracked objects:
  3340 ;;		On entry : 0/0
  3341 ;;		On exit  : 0/0
  3342 ;;		Unchanged: 0/0
  3343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3344 ;;      Params:         0       0       0       0       0       0       0
  3345 ;;      Locals:         0       0       0       0       0       0       0
  3346 ;;      Temps:          0       0       0       0       0       0       0
  3347 ;;      Totals:         0       0       0       0       0       0       0
  3348 ;;Total ram usage:        0 bytes
  3349 ;; Hardware stack levels used:    1
  3350 ;; Hardware stack levels required when called:    4
  3351 ;; This function calls:
  3352 ;;		Nothing
  3353 ;; This function is called by:
  3354 ;;		_main
  3355 ;; This function uses a non-reentrant model
  3356 ;;
  3357                           
  3358                           	psect	text18
  3359  00244C                     __ptext18:
  3360                           	callstack 0
  3361  00244C                     _initADC:
  3362                           	callstack 0
  3363  00244C  FFFF               	dw	65535	; assembler added errata NOP
  3364  00244E                     
  3365                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  3366  00244E  50C2               	movf	194,w,c	;volatile
  3367  002450  0B3F               	andlw	-193
  3368  002452  0940               	iorlw	64
  3369  002454  6EC2               	movwf	194,c	;volatile
  3370  002456                     
  3371                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  3372  002456  8CC1               	bsf	193,6,c	;volatile
  3373                           
  3374                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  3375  002458  0EC7               	movlw	-57
  3376  00245A  16C2               	andwf	194,f,c	;volatile
  3377  00245C                     
  3378                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  3379  00245C  94C2               	bcf	194,2,c	;volatile
  3380  00245E                     
  3381                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  3382  00245E  90C2               	bcf	194,0,c	;volatile
  3383  002460                     
  3384                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  3385  002460  9EC1               	bcf	193,7,c	;volatile
  3386                           
  3387                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  3388  002462  50C1               	movf	193,w,c	;volatile
  3389  002464  0BF0               	andlw	-16
  3390  002466  090E               	iorlw	14
  3391  002468  6EC1               	movwf	193,c	;volatile
  3392  00246A                     
  3393                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  3394  00246A  8C9D               	bsf	157,6,c	;volatile
  3395  00246C                     
  3396                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  3397  00246C  8C9F               	bsf	159,6,c	;volatile
  3398  00246E  0012               	return		;funcret
  3399  002470  FFFF               	dw	65535	; errata NOP
  3400  002472                     __end_of_initADC:
  3401                           	callstack 0
  3402                           
  3403 ;; *************** function _getNewSequence *****************
  3404 ;; Defined at:
  3405 ;;		line 213 in file "usart.c"
  3406 ;; Parameters:    Size  Location     Type
  3407 ;;		None
  3408 ;; Auto vars:     Size  Location     Type
  3409 ;;		None
  3410 ;; Return value:  Size  Location     Type
  3411 ;;                  2   17[COMRAM] PTR struct .
  3412 ;; Registers used:
  3413 ;;		wreg, status,2, status,0
  3414 ;; Tracked objects:
  3415 ;;		On entry : 0/0
  3416 ;;		On exit  : 0/0
  3417 ;;		Unchanged: 0/0
  3418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3419 ;;      Params:         2       0       0       0       0       0       0
  3420 ;;      Locals:         0       0       0       0       0       0       0
  3421 ;;      Temps:          0       0       0       0       0       0       0
  3422 ;;      Totals:         2       0       0       0       0       0       0
  3423 ;;Total ram usage:        2 bytes
  3424 ;; Hardware stack levels used:    1
  3425 ;; Hardware stack levels required when called:    4
  3426 ;; This function calls:
  3427 ;;		Nothing
  3428 ;; This function is called by:
  3429 ;;		_main
  3430 ;; This function uses a non-reentrant model
  3431 ;;
  3432                           
  3433                           	psect	text19
  3434  0024CA                     __ptext19:
  3435                           	callstack 0
  3436  0024CA                     _getNewSequence:
  3437                           	callstack 0
  3438  0024CA  FFFF               	dw	65535	; assembler added errata NOP
  3439  0024CC                     
  3440                           ;usart.c: 214:     return(&newSequenceData);
  3441  0024CC  0EEC               	movlw	low _newSequenceData
  3442  0024CE  6E12               	movwf	?_getNewSequence^0,c
  3443  0024D0  0E00               	movlw	high _newSequenceData
  3444  0024D2  6E13               	movwf	(?_getNewSequence+1)^0,c
  3445  0024D4  0012               	return		;funcret
  3446  0024D6  FFFF               	dw	65535	; errata NOP
  3447  0024D8                     __end_of_getNewSequence:
  3448                           	callstack 0
  3449                           
  3450 ;; *************** function _fatalError *****************
  3451 ;; Defined at:
  3452 ;;		line 100 in file "usart.c"
  3453 ;; Parameters:    Size  Location     Type
  3454 ;;		None
  3455 ;; Auto vars:     Size  Location     Type
  3456 ;;		None
  3457 ;; Return value:  Size  Location     Type
  3458 ;;                  1    wreg      unsigned char 
  3459 ;; Registers used:
  3460 ;;		wreg, status,2
  3461 ;; Tracked objects:
  3462 ;;		On entry : 0/0
  3463 ;;		On exit  : 0/0
  3464 ;;		Unchanged: 0/0
  3465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3466 ;;      Params:         0       0       0       0       0       0       0
  3467 ;;      Locals:         0       0       0       0       0       0       0
  3468 ;;      Temps:          0       0       0       0       0       0       0
  3469 ;;      Totals:         0       0       0       0       0       0       0
  3470 ;;Total ram usage:        0 bytes
  3471 ;; Hardware stack levels used:    1
  3472 ;; Hardware stack levels required when called:    4
  3473 ;; This function calls:
  3474 ;;		Nothing
  3475 ;; This function is called by:
  3476 ;;		_main
  3477 ;; This function uses a non-reentrant model
  3478 ;;
  3479                           
  3480                           	psect	text20
  3481  00259C                     __ptext20:
  3482                           	callstack 0
  3483  00259C                     _fatalError:
  3484                           	callstack 0
  3485  00259C  FFFF               	dw	65535	; assembler added errata NOP
  3486  00259E                     
  3487                           ;usart.c: 101:     return _fatalError;
  3488  00259E  5060               	movf	__fatalError^0,w,c
  3489  0025A0  0012               	return		;funcret
  3490  0025A2  FFFF               	dw	65535	; errata NOP
  3491  0025A4                     __end_of_fatalError:
  3492                           	callstack 0
  3493                           
  3494 ;; *************** function _executeData *****************
  3495 ;; Defined at:
  3496 ;;		line 125 in file "main.c"
  3497 ;; Parameters:    Size  Location     Type
  3498 ;;		None
  3499 ;; Auto vars:     Size  Location     Type
  3500 ;;  data            2    9[BANK0 ] PTR struct .
  3501 ;;		 -> dataSequence(20), 
  3502 ;;  errCode         1    8[BANK0 ] unsigned char 
  3503 ;; Return value:  Size  Location     Type
  3504 ;;                  1    wreg      unsigned char 
  3505 ;; Registers used:
  3506 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3507 ;; Tracked objects:
  3508 ;;		On entry : 0/0
  3509 ;;		On exit  : 0/0
  3510 ;;		Unchanged: 0/0
  3511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3512 ;;      Params:         0       0       0       0       0       0       0
  3513 ;;      Locals:         0       3       0       0       0       0       0
  3514 ;;      Temps:          2       0       0       0       0       0       0
  3515 ;;      Totals:         2       3       0       0       0       0       0
  3516 ;;Total ram usage:        5 bytes
  3517 ;; Hardware stack levels used:    1
  3518 ;; Hardware stack levels required when called:    6
  3519 ;; This function calls:
  3520 ;;		_getData
  3521 ;;		_liftArm
  3522 ;;		_moveToPoint
  3523 ;;		_pickObject
  3524 ;;		_releaseObj
  3525 ;;		_rotateObj
  3526 ;;		_touchObject
  3527 ;;		_touchTherm
  3528 ;; This function is called by:
  3529 ;;		_main
  3530 ;; This function uses a non-reentrant model
  3531 ;;
  3532                           
  3533                           	psect	text21
  3534  000D04                     __ptext21:
  3535                           	callstack 0
  3536  000D04                     _executeData:
  3537                           	callstack 0
  3538  000D04  FFFF               	dw	65535	; assembler added errata NOP
  3539  000D06                     
  3540                           ;main.c: 126:     t_sequence *data = getData();
  3541  000D06  EC6C  F012         	call	_getData	;wreg free
  3542  000D0A  C012  F0FD         	movff	?_getData,executeData@data
  3543  000D0E  C013  F0FE         	movff	?_getData+1,executeData@data+1
  3544  000D12                     
  3545                           ;main.c: 132:     switch(data->feederLine){
  3546  000D12  EF35  F007         	goto	l4190
  3547  000D16                     l4162:
  3548  000D16  FFFF               	dw	65535	; assembler added errata NOP
  3549                           
  3550                           ;main.c: 135:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0
      +                          ], feeder1Pos[1]);
  3551  000D18  C04E  F016         	movff	_posVector,moveToPoint@x1
  3552  000D1C  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3553  000D1E  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3554  000D22  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3555  000D24  0E0D               	movlw	low _feeder1Pos
  3556  000D26  6EF6               	movwf	tblptrl,c
  3557  000D28                     	if	1	;There is more than 1 active tblptr byte
  3558  000D28  0E06               	movlw	high _feeder1Pos
  3559  000D2A  6EF7               	movwf	tblptrh,c
  3560  000D2C                     	endif
  3561  000D2C                     	if	0	;There are less than 3 active tblptr bytes
  3562  000D2C                     	endif
  3563  000D2C  0008               	tblrd		*
  3564  000D2E  FFFF               	dw	65535	; errata NOP
  3565  000D30  50F5               	movf	tablat,w,c
  3566  000D32  6E1A               	movwf	moveToPoint@x2^0,c
  3567  000D34  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3568  000D36  0E0E               	movlw	low (_feeder1Pos+1)
  3569  000D38  6EF6               	movwf	tblptrl,c
  3570  000D3A  0E06               	movlw	high (_feeder1Pos+1)
  3571  000D3C  6EF7               	movwf	tblptrh,c
  3572  000D3E                     	if	0	;tblptru may be non-zero
  3573  000D3E                     	endif
  3574  000D3E                     	if	0	;tblptru may be non-zero
  3575  000D3E                     	endif
  3576  000D3E  0008               	tblrd		*
  3577  000D40  FFFF               	dw	65535	; errata NOP
  3578  000D42  50F5               	movf	tablat,w,c
  3579  000D44  6E1C               	movwf	moveToPoint@y2^0,c
  3580  000D46  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3581  000D48  EC21  F005         	call	_moveToPoint	;wreg free
  3582  000D4C  0100               	movlb	0	; () banked
  3583  000D4E  6FFC               	movwf	executeData@errCode& (0+255),b
  3584  000D50                     
  3585                           ; BSR set to: 0
  3586                           ;main.c: 137:             posVector[0] = feeder1Pos[0];
  3587  000D50  0E0D               	movlw	low _feeder1Pos
  3588  000D52  6EF6               	movwf	tblptrl,c
  3589  000D54                     	if	1	;There is more than 1 active tblptr byte
  3590  000D54  0E06               	movlw	high _feeder1Pos
  3591  000D56  6EF7               	movwf	tblptrh,c
  3592  000D58                     	endif
  3593  000D58                     	if	0	;There are less than 3 active tblptr bytes
  3594  000D58                     	endif
  3595  000D58  0008               	tblrd		*
  3596  000D5A  FFFF               	dw	65535	; errata NOP
  3597  000D5C  CFF5 F04E          	movff	tablat,_posVector
  3598  000D60                     
  3599                           ; BSR set to: 0
  3600                           ;main.c: 138:             posVector[1] = feeder1Pos[1];
  3601  000D60  0E0E               	movlw	low (_feeder1Pos+1)
  3602  000D62  6EF6               	movwf	tblptrl,c
  3603  000D64  0E06               	movlw	high (_feeder1Pos+1)
  3604  000D66  6EF7               	movwf	tblptrh,c
  3605  000D68                     	if	0	;tblptru may be non-zero
  3606  000D68                     	endif
  3607  000D68                     	if	0	;tblptru may be non-zero
  3608  000D68                     	endif
  3609  000D68  0008               	tblrd		*
  3610  000D6A  FFFF               	dw	65535	; errata NOP
  3611  000D6C  CFF5 F04F          	movff	tablat,_posVector+1
  3612                           
  3613                           ;main.c: 139:             break;
  3614  000D70  EF58  F007         	goto	l4192
  3615  000D74                     l4168:
  3616  000D74  FFFF               	dw	65535	; assembler added errata NOP
  3617                           
  3618                           ;main.c: 141:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3619  000D76  C04E  F016         	movff	_posVector,moveToPoint@x1
  3620  000D7A  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3621  000D7C  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3622  000D80  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3623  000D82  0E0B               	movlw	low _feeder2Pos
  3624  000D84  6EF6               	movwf	tblptrl,c
  3625  000D86                     	if	1	;There is more than 1 active tblptr byte
  3626  000D86  0E06               	movlw	high _feeder2Pos
  3627  000D88  6EF7               	movwf	tblptrh,c
  3628  000D8A                     	endif
  3629  000D8A                     	if	0	;There are less than 3 active tblptr bytes
  3630  000D8A                     	endif
  3631  000D8A  0008               	tblrd		*
  3632  000D8C  FFFF               	dw	65535	; errata NOP
  3633  000D8E  50F5               	movf	tablat,w,c
  3634  000D90  6E1A               	movwf	moveToPoint@x2^0,c
  3635  000D92  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3636  000D94  0E0C               	movlw	low (_feeder2Pos+1)
  3637  000D96  6EF6               	movwf	tblptrl,c
  3638  000D98  0E06               	movlw	high (_feeder2Pos+1)
  3639  000D9A  6EF7               	movwf	tblptrh,c
  3640  000D9C                     	if	0	;tblptru may be non-zero
  3641  000D9C                     	endif
  3642  000D9C                     	if	0	;tblptru may be non-zero
  3643  000D9C                     	endif
  3644  000D9C  0008               	tblrd		*
  3645  000D9E  FFFF               	dw	65535	; errata NOP
  3646  000DA0  50F5               	movf	tablat,w,c
  3647  000DA2  6E1C               	movwf	moveToPoint@y2^0,c
  3648  000DA4  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3649  000DA6  EC21  F005         	call	_moveToPoint	;wreg free
  3650  000DAA  0100               	movlb	0	; () banked
  3651  000DAC  6FFC               	movwf	executeData@errCode& (0+255),b
  3652  000DAE                     
  3653                           ; BSR set to: 0
  3654                           ;main.c: 142:             posVector[0] = feeder2Pos[0];
  3655  000DAE  0E0B               	movlw	low _feeder2Pos
  3656  000DB0  6EF6               	movwf	tblptrl,c
  3657  000DB2                     	if	1	;There is more than 1 active tblptr byte
  3658  000DB2  0E06               	movlw	high _feeder2Pos
  3659  000DB4  6EF7               	movwf	tblptrh,c
  3660  000DB6                     	endif
  3661  000DB6                     	if	0	;There are less than 3 active tblptr bytes
  3662  000DB6                     	endif
  3663  000DB6  0008               	tblrd		*
  3664  000DB8  FFFF               	dw	65535	; errata NOP
  3665  000DBA  CFF5 F04E          	movff	tablat,_posVector
  3666  000DBE                     
  3667                           ; BSR set to: 0
  3668                           ;main.c: 143:             posVector[1] = feeder2Pos[1];
  3669  000DBE  0E0C               	movlw	low (_feeder2Pos+1)
  3670  000DC0  6EF6               	movwf	tblptrl,c
  3671  000DC2  0E06               	movlw	high (_feeder2Pos+1)
  3672  000DC4  6EF7               	movwf	tblptrh,c
  3673  000DC6                     	if	0	;tblptru may be non-zero
  3674  000DC6                     	endif
  3675  000DC6                     	if	0	;tblptru may be non-zero
  3676  000DC6                     	endif
  3677  000DC6  0008               	tblrd		*
  3678  000DC8  FFFF               	dw	65535	; errata NOP
  3679  000DCA  CFF5 F04F          	movff	tablat,_posVector+1
  3680                           
  3681                           ;main.c: 144:             break;
  3682  000DCE  EF58  F007         	goto	l4192
  3683  000DD2                     l4174:
  3684  000DD2  FFFF               	dw	65535	; assembler added errata NOP
  3685                           
  3686                           ;main.c: 146:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3687  000DD4  C04E  F016         	movff	_posVector,moveToPoint@x1
  3688  000DD8  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3689  000DDA  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3690  000DDE  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3691  000DE0  0E09               	movlw	low _feeder3Pos
  3692  000DE2  6EF6               	movwf	tblptrl,c
  3693  000DE4                     	if	1	;There is more than 1 active tblptr byte
  3694  000DE4  0E06               	movlw	high _feeder3Pos
  3695  000DE6  6EF7               	movwf	tblptrh,c
  3696  000DE8                     	endif
  3697  000DE8                     	if	0	;There are less than 3 active tblptr bytes
  3698  000DE8                     	endif
  3699  000DE8  0008               	tblrd		*
  3700  000DEA  FFFF               	dw	65535	; errata NOP
  3701  000DEC  50F5               	movf	tablat,w,c
  3702  000DEE  6E1A               	movwf	moveToPoint@x2^0,c
  3703  000DF0  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3704  000DF2  0E0A               	movlw	low (_feeder3Pos+1)
  3705  000DF4  6EF6               	movwf	tblptrl,c
  3706  000DF6  0E06               	movlw	high (_feeder3Pos+1)
  3707  000DF8  6EF7               	movwf	tblptrh,c
  3708  000DFA                     	if	0	;tblptru may be non-zero
  3709  000DFA                     	endif
  3710  000DFA                     	if	0	;tblptru may be non-zero
  3711  000DFA                     	endif
  3712  000DFA  0008               	tblrd		*
  3713  000DFC  FFFF               	dw	65535	; errata NOP
  3714  000DFE  50F5               	movf	tablat,w,c
  3715  000E00  6E1C               	movwf	moveToPoint@y2^0,c
  3716  000E02  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3717  000E04  EC21  F005         	call	_moveToPoint	;wreg free
  3718  000E08  0100               	movlb	0	; () banked
  3719  000E0A  6FFC               	movwf	executeData@errCode& (0+255),b
  3720  000E0C                     
  3721                           ; BSR set to: 0
  3722                           ;main.c: 147:             posVector[0] = feeder3Pos[0];
  3723  000E0C  0E09               	movlw	low _feeder3Pos
  3724  000E0E  6EF6               	movwf	tblptrl,c
  3725  000E10                     	if	1	;There is more than 1 active tblptr byte
  3726  000E10  0E06               	movlw	high _feeder3Pos
  3727  000E12  6EF7               	movwf	tblptrh,c
  3728  000E14                     	endif
  3729  000E14                     	if	0	;There are less than 3 active tblptr bytes
  3730  000E14                     	endif
  3731  000E14  0008               	tblrd		*
  3732  000E16  FFFF               	dw	65535	; errata NOP
  3733  000E18  CFF5 F04E          	movff	tablat,_posVector
  3734  000E1C                     
  3735                           ; BSR set to: 0
  3736                           ;main.c: 148:             posVector[1] = feeder3Pos[1];
  3737  000E1C  0E0A               	movlw	low (_feeder3Pos+1)
  3738  000E1E  6EF6               	movwf	tblptrl,c
  3739  000E20  0E06               	movlw	high (_feeder3Pos+1)
  3740  000E22  6EF7               	movwf	tblptrh,c
  3741  000E24                     	if	0	;tblptru may be non-zero
  3742  000E24                     	endif
  3743  000E24                     	if	0	;tblptru may be non-zero
  3744  000E24                     	endif
  3745  000E24  0008               	tblrd		*
  3746  000E26  FFFF               	dw	65535	; errata NOP
  3747  000E28  CFF5 F04F          	movff	tablat,_posVector+1
  3748                           
  3749                           ;main.c: 149:             break;
  3750  000E2C  EF58  F007         	goto	l4192
  3751  000E30                     l4180:
  3752  000E30  FFFF               	dw	65535	; assembler added errata NOP
  3753                           
  3754                           ;main.c: 153:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3755  000E32  C04E  F016         	movff	_posVector,moveToPoint@x1
  3756  000E36  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3757  000E38  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3758  000E3C  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3759  000E3E  C057  F01A         	movff	_newFeeder,moveToPoint@x2
  3760  000E42  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3761  000E44  C058  F01C         	movff	_newFeeder+1,moveToPoint@y2
  3762  000E48  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3763  000E4A  EC21  F005         	call	_moveToPoint	;wreg free
  3764  000E4E  0100               	movlb	0	; () banked
  3765  000E50  6FFC               	movwf	executeData@errCode& (0+255),b
  3766  000E52                     
  3767                           ; BSR set to: 0
  3768                           ;main.c: 154:             posVector[0] = newFeeder[0];
  3769  000E52  C057  F04E         	movff	_newFeeder,_posVector
  3770  000E56                     
  3771                           ; BSR set to: 0
  3772                           ;main.c: 155:             posVector[1] = newFeeder[1];
  3773  000E56  C058  F04F         	movff	_newFeeder+1,_posVector+1
  3774                           
  3775                           ;main.c: 156:             break;
  3776  000E5A  EF58  F007         	goto	l4192
  3777  000E5E                     l4186:
  3778  000E5E  FFFF               	dw	65535	; assembler added errata NOP
  3779                           
  3780                           ;main.c: 160:             errCode = 1;
  3781  000E60  0E01               	movlw	1
  3782  000E62  0100               	movlb	0	; () banked
  3783  000E64  6FFC               	movwf	executeData@errCode& (0+255),b
  3784                           
  3785                           ;main.c: 161:             break;
  3786  000E66  EF58  F007         	goto	l4192
  3787  000E6A                     l4190:
  3788  000E6A  FFFF               	dw	65535	; assembler added errata NOP
  3789  000E6C  C0FD  FFD9         	movff	executeData@data,fsr2l
  3790  000E70  C0FE  FFDA         	movff	executeData@data+1,fsr2h
  3791  000E74  50DF               	movf	indf2,w,c
  3792  000E76  6E43               	movwf	??_executeData^0,c
  3793  000E78  6A44               	clrf	(??_executeData+1)^0,c
  3794                           
  3795                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3796                           ; Switch size 1, requested type "simple"
  3797                           ; Number of cases is 1, Range of values is 0 to 0
  3798                           ; switch strategies available:
  3799                           ; Name         Instructions Cycles
  3800                           ; simple_byte            4     3 (average)
  3801                           ;	Chosen strategy is simple_byte
  3802  000E7A  5044               	movf	(??_executeData+1)^0,w,c
  3803  000E7C  0A00               	xorlw	0	; case 0
  3804  000E7E  B4D8               	btfsc	status,2,c
  3805  000E80  EF44  F007         	goto	l4544
  3806  000E84  EF2F  F007         	goto	l4186
  3807  000E88                     l4544:
  3808  000E88  FFFF               	dw	65535	; assembler added errata NOP
  3809                           
  3810                           ; Switch size 1, requested type "simple"
  3811                           ; Number of cases is 4, Range of values is 0 to 255
  3812                           ; switch strategies available:
  3813                           ; Name         Instructions Cycles
  3814                           ; simple_byte           13     7 (average)
  3815                           ;	Chosen strategy is simple_byte
  3816  000E8A  5043               	movf	??_executeData^0,w,c
  3817  000E8C  0A00               	xorlw	0	; case 0
  3818  000E8E  B4D8               	btfsc	status,2,c
  3819  000E90  EF8B  F006         	goto	l4162
  3820  000E94  0A01               	xorlw	1	; case 1
  3821  000E96  B4D8               	btfsc	status,2,c
  3822  000E98  EFBA  F006         	goto	l4168
  3823  000E9C  0A03               	xorlw	3	; case 2
  3824  000E9E  B4D8               	btfsc	status,2,c
  3825  000EA0  EFE9  F006         	goto	l4174
  3826  000EA4  0AFD               	xorlw	253	; case 255
  3827  000EA6  B4D8               	btfsc	status,2,c
  3828  000EA8  EF18  F007         	goto	l4180
  3829  000EAC  EF2F  F007         	goto	l4186
  3830  000EB0                     l4192:
  3831  000EB0  FFFF               	dw	65535	; assembler added errata NOP
  3832                           
  3833                           ; BSR set to: 0
  3834                           ;main.c: 165:     if(!errCode){
  3835  000EB2  51FC               	movf	executeData@errCode& (0+255),w,b
  3836  000EB4  A4D8               	btfss	status,2,c
  3837  000EB6  EF5F  F007         	goto	u3501
  3838  000EBA  EF62  F007         	goto	u3500
  3839  000EBE                     u3501:
  3840  000EBE  FFFF               	dw	65535	; assembler added errata NOP
  3841  000EC0  EFC5  F007         	goto	l4214
  3842  000EC4                     u3500:
  3843  000EC4  FFFF               	dw	65535	; assembler added errata NOP
  3844  000EC6                     
  3845                           ; BSR set to: 0
  3846                           ;main.c: 168:         errCode = touchObject();
  3847  000EC6  EC1C  F00E         	call	_touchObject	;wreg free
  3848  000ECA  0100               	movlb	0	; () banked
  3849  000ECC  6FFC               	movwf	executeData@errCode& (0+255),b
  3850                           
  3851                           ;main.c: 170:         pickObject();
  3852  000ECE  ECFD  F011         	call	_pickObject	;wreg free
  3853                           
  3854                           ;main.c: 173:         errCode = liftArm();
  3855  000ED2  ECD7  F00F         	call	_liftArm	;wreg free
  3856  000ED6  0100               	movlb	0	; () banked
  3857  000ED8  6FFC               	movwf	executeData@errCode& (0+255),b
  3858  000EDA                     
  3859                           ; BSR set to: 0
  3860  000EDA  C04E  F016         	movff	_posVector,moveToPoint@x1
  3861  000EDE  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3862  000EE0  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3863  000EE4  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3864  000EE6  EE20 F001          	lfsr	2,1
  3865  000EEA  51FD               	movf	executeData@data& (0+255),w,b
  3866  000EEC  26D9               	addwf	fsr2l,f,c
  3867  000EEE  51FE               	movf	(executeData@data+1)& (0+255),w,b
  3868  000EF0  22DA               	addwfc	fsr2h,f,c
  3869  000EF2  50DF               	movf	indf2,w,c
  3870  000EF4  6E43               	movwf	??_executeData^0,c
  3871  000EF6  5043               	movf	??_executeData^0,w,c
  3872  000EF8  6E1A               	movwf	moveToPoint@x2^0,c
  3873  000EFA  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3874  000EFC  EE20 F002          	lfsr	2,2
  3875  000F00  51FD               	movf	executeData@data& (0+255),w,b
  3876  000F02  26D9               	addwf	fsr2l,f,c
  3877  000F04  51FE               	movf	(executeData@data+1)& (0+255),w,b
  3878  000F06  22DA               	addwfc	fsr2h,f,c
  3879  000F08  50DF               	movf	indf2,w,c
  3880  000F0A  6E44               	movwf	(??_executeData+1)^0,c
  3881  000F0C  5044               	movf	(??_executeData+1)^0,w,c
  3882  000F0E  6E1C               	movwf	moveToPoint@y2^0,c
  3883  000F10  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3884  000F12  EC21  F005         	call	_moveToPoint	;wreg free
  3885  000F16                     
  3886                           ;main.c: 177:         posVector[0] = data->posX;
  3887  000F16  0100               	movlb	0	; () banked
  3888  000F18  EE20 F001          	lfsr	2,1
  3889  000F1C  51FD               	movf	executeData@data& (0+255),w,b
  3890  000F1E  26D9               	addwf	fsr2l,f,c
  3891  000F20  51FE               	movf	(executeData@data+1)& (0+255),w,b
  3892  000F22  22DA               	addwfc	fsr2h,f,c
  3893  000F24  50DF               	movf	indf2,w,c
  3894  000F26  6E4E               	movwf	_posVector^0,c
  3895  000F28                     
  3896                           ; BSR set to: 0
  3897                           ;main.c: 178:         posVector[1] = data->posY;
  3898  000F28  EE20 F002          	lfsr	2,2
  3899  000F2C  51FD               	movf	executeData@data& (0+255),w,b
  3900  000F2E  26D9               	addwf	fsr2l,f,c
  3901  000F30  51FE               	movf	(executeData@data+1)& (0+255),w,b
  3902  000F32  22DA               	addwfc	fsr2h,f,c
  3903  000F34  50DF               	movf	indf2,w,c
  3904  000F36  6E4F               	movwf	(_posVector+1)^0,c
  3905  000F38                     
  3906                           ; BSR set to: 0
  3907                           ;main.c: 181:         rotAngle = data->rotation - rotAngle;
  3908  000F38  EE20 F003          	lfsr	2,3
  3909  000F3C  51FD               	movf	executeData@data& (0+255),w,b
  3910  000F3E  26D9               	addwf	fsr2l,f,c
  3911  000F40  51FE               	movf	(executeData@data+1)& (0+255),w,b
  3912  000F42  22DA               	addwfc	fsr2h,f,c
  3913  000F44  50DF               	movf	indf2,w,c
  3914  000F46  6E43               	movwf	??_executeData^0,c
  3915  000F48  5059               	movf	_rotAngle^0,w,c
  3916  000F4A  5C43               	subwf	??_executeData^0,w,c
  3917  000F4C  6E59               	movwf	_rotAngle^0,c
  3918  000F4E  505A               	movf	(_rotAngle+1)^0,w,c
  3919  000F50  A0D8               	btfss	status,0,c
  3920  000F52  285A               	incf	(_rotAngle+1)^0,w,c
  3921  000F54  6A5A               	clrf	(_rotAngle+1)^0,c
  3922  000F56  5E5A               	subwf	(_rotAngle+1)^0,f,c
  3923                           
  3924                           ;main.c: 183:         if(rotAngle < 0){
  3925  000F58  BE5A               	btfsc	(_rotAngle+1)^0,7,c
  3926  000F5A  EFB4  F007         	goto	u3510
  3927  000F5E  EFB1  F007         	goto	u3511
  3928  000F62                     u3511:
  3929  000F62  FFFF               	dw	65535	; assembler added errata NOP
  3930  000F64  EFB9  F007         	goto	l4206
  3931  000F68                     u3510:
  3932  000F68  FFFF               	dw	65535	; assembler added errata NOP
  3933  000F6A                     
  3934                           ; BSR set to: 0
  3935                           ;main.c: 184:             rotAngle += 360;
  3936  000F6A  0E68               	movlw	104
  3937  000F6C  2659               	addwf	_rotAngle^0,f,c
  3938  000F6E  0E01               	movlw	1
  3939  000F70  225A               	addwfc	(_rotAngle+1)^0,f,c
  3940  000F72                     l4206:
  3941  000F72  FFFF               	dw	65535	; assembler added errata NOP
  3942                           
  3943                           ; BSR set to: 0
  3944                           ;main.c: 186:         rotateObj(rotAngle);
  3945  000F74  5059               	movf	_rotAngle^0,w,c
  3946  000F76  EC95  F00E         	call	_rotateObj
  3947  000F7A  ECA3  F00D         	call	_touchTherm	;wreg free
  3948  000F7E                     
  3949                           ;main.c: 191:         releaseObj();
  3950  000F7E  ECE7  F011         	call	_releaseObj	;wreg free
  3951  000F82                     
  3952                           ;main.c: 194:         errCode = liftArm();
  3953  000F82  ECD7  F00F         	call	_liftArm	;wreg free
  3954  000F86  0100               	movlb	0	; () banked
  3955  000F88  6FFC               	movwf	executeData@errCode& (0+255),b
  3956  000F8A                     l4214:
  3957  000F8A  FFFF               	dw	65535	; assembler added errata NOP
  3958                           
  3959                           ; BSR set to: 0
  3960                           ;main.c: 197:     return(errCode);
  3961  000F8C  51FC               	movf	executeData@errCode& (0+255),w,b
  3962  000F8E                     
  3963                           ; BSR set to: 0
  3964  000F8E  0012               	return		;funcret
  3965  000F90  FFFF               	dw	65535	; errata NOP
  3966  000F92                     __end_of_executeData:
  3967                           	callstack 0
  3968                           
  3969 ;; *************** function _touchTherm *****************
  3970 ;; Defined at:
  3971 ;;		line 455 in file "motors.c"
  3972 ;; Parameters:    Size  Location     Type
  3973 ;;		None
  3974 ;; Auto vars:     Size  Location     Type
  3975 ;;		None
  3976 ;; Return value:  Size  Location     Type
  3977 ;;                  1    wreg      unsigned char 
  3978 ;; Registers used:
  3979 ;;		wreg, status,2, status,0, cstack
  3980 ;; Tracked objects:
  3981 ;;		On entry : 0/0
  3982 ;;		On exit  : 0/0
  3983 ;;		Unchanged: 0/0
  3984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3985 ;;      Params:         0       0       0       0       0       0       0
  3986 ;;      Locals:         0       0       0       0       0       0       0
  3987 ;;      Temps:          0       0       0       0       0       0       0
  3988 ;;      Totals:         0       0       0       0       0       0       0
  3989 ;;Total ram usage:        0 bytes
  3990 ;; Hardware stack levels used:    1
  3991 ;; Hardware stack levels required when called:    5
  3992 ;; This function calls:
  3993 ;;		_resetStep
  3994 ;;		_resetTherm
  3995 ;;		_returnTherm
  3996 ;;		_setDirection
  3997 ;;		_startADC
  3998 ;;		_stepMade
  3999 ;;		_stopADC
  4000 ;; This function is called by:
  4001 ;;		_executeData
  4002 ;; This function uses a non-reentrant model
  4003 ;;
  4004                           
  4005                           	psect	text22
  4006  001B46                     __ptext22:
  4007                           	callstack 0
  4008  001B46                     _touchTherm:
  4009                           	callstack 0
  4010  001B46  FFFF               	dw	65535	; assembler added errata NOP
  4011  001B48                     
  4012                           ;motors.c: 458:     setDirection(1, 2);
  4013  001B48  0E02               	movlw	2
  4014  001B4A  6E12               	movwf	setDirection@motor^0,c
  4015  001B4C  0E01               	movlw	1
  4016  001B4E  ECE6  F010         	call	_setDirection
  4017  001B52                     
  4018                           ;motors.c: 460:     T2CONbits.TMR2ON = 1;
  4019  001B52  84CA               	bsf	202,2,c	;volatile
  4020  001B54                     
  4021                           ;motors.c: 462:     tm0Error = 0;
  4022  001B54  0E00               	movlw	0
  4023  001B56  6E5C               	movwf	(_tm0Error+1)^0,c
  4024  001B58  0E00               	movlw	0
  4025  001B5A  6E5B               	movwf	_tm0Error^0,c
  4026  001B5C                     
  4027                           ;motors.c: 463:     tm0Limit = 100;
  4028  001B5C  0E64               	movlw	100
  4029  001B5E  6E68               	movwf	_tm0Limit^0,c
  4030  001B60                     
  4031                           ;motors.c: 464:     T0CONbits.TMR0ON = 1;
  4032  001B60  8ED5               	bsf	213,7,c	;volatile
  4033  001B62                     
  4034                           ;motors.c: 467:     startADC();
  4035  001B62  ECA4  F012         	call	_startADC	;wreg free
  4036                           
  4037                           ;motors.c: 470:     while(!returnTherm() || PORTDbits.RD7){
  4038  001B66  EFE6  F00D         	goto	l3890
  4039  001B6A                     l3880:
  4040  001B6A  FFFF               	dw	65535	; assembler added errata NOP
  4041                           
  4042                           ;motors.c: 473:         if(tm0Error){
  4043  001B6C  505B               	movf	_tm0Error^0,w,c
  4044  001B6E  105C               	iorwf	(_tm0Error+1)^0,w,c
  4045  001B70  B4D8               	btfsc	status,2,c
  4046  001B72  EFBD  F00D         	goto	u3211
  4047  001B76  EFC0  F00D         	goto	u3210
  4048  001B7A                     u3211:
  4049  001B7A  FFFF               	dw	65535	; assembler added errata NOP
  4050  001B7C  EFC8  F00D         	goto	l188
  4051  001B80                     u3210:
  4052  001B80  FFFF               	dw	65535	; assembler added errata NOP
  4053  001B82                     
  4054                           ;motors.c: 475:             LATCbits.LATC2 = 0;
  4055  001B82  948B               	bcf	139,2,c	;volatile
  4056  001B84                     
  4057                           ;motors.c: 476:             tm0Error = 6;
  4058  001B84  0E00               	movlw	0
  4059  001B86  6E5C               	movwf	(_tm0Error+1)^0,c
  4060  001B88  0E06               	movlw	6
  4061  001B8A  6E5B               	movwf	_tm0Error^0,c
  4062                           
  4063                           ;motors.c: 477:             break;
  4064  001B8C  EFFC  F00D         	goto	l3894
  4065  001B90                     l188:
  4066  001B90  FFFF               	dw	65535	; assembler added errata NOP
  4067                           
  4068                           ;motors.c: 481:         LATCbits.LATC2 = 1;
  4069  001B92  848B               	bsf	139,2,c	;volatile
  4070  001B94                     l3886:
  4071  001B94  FFFF               	dw	65535	; assembler added errata NOP
  4072  001B96  EC52  F012         	call	_stepMade	;wreg free
  4073  001B9A  5012               	movf	?_stepMade^0,w,c
  4074  001B9C  1013               	iorwf	(?_stepMade+1)^0,w,c
  4075  001B9E  B4D8               	btfsc	status,2,c
  4076  001BA0  EFD4  F00D         	goto	u3221
  4077  001BA4  EFD7  F00D         	goto	u3220
  4078  001BA8                     u3221:
  4079  001BA8  FFFF               	dw	65535	; assembler added errata NOP
  4080  001BAA  EFCA  F00D         	goto	l3886
  4081  001BAE                     u3220:
  4082  001BAE  FFFF               	dw	65535	; assembler added errata NOP
  4083  001BB0                     
  4084                           ;motors.c: 487:         LATCbits.LATC2 = 0;
  4085  001BB0  948B               	bcf	139,2,c	;volatile
  4086  001BB2                     l3888:
  4087  001BB2  FFFF               	dw	65535	; assembler added errata NOP
  4088  001BB4  EC52  F012         	call	_stepMade	;wreg free
  4089  001BB8  5012               	movf	?_stepMade^0,w,c
  4090  001BBA  1013               	iorwf	(?_stepMade+1)^0,w,c
  4091  001BBC  B4D8               	btfsc	status,2,c
  4092  001BBE  EFE3  F00D         	goto	u3231
  4093  001BC2  EFE6  F00D         	goto	u3230
  4094  001BC6                     u3231:
  4095  001BC6  FFFF               	dw	65535	; assembler added errata NOP
  4096  001BC8  EFD9  F00D         	goto	l3888
  4097  001BCC                     u3230:
  4098  001BCC                     l3890:
  4099  001BCC  FFFF               	dw	65535	; assembler added errata NOP
  4100                           
  4101                           ;motors.c: 470:     while(!returnTherm() || PORTDbits.RD7){
  4102  001BCE  EC88  F012         	call	_returnTherm	;wreg free
  4103  001BD2  5012               	movf	?_returnTherm^0,w,c
  4104  001BD4  1013               	iorwf	(?_returnTherm+1)^0,w,c
  4105  001BD6  B4D8               	btfsc	status,2,c
  4106  001BD8  EFF0  F00D         	goto	u3241
  4107  001BDC  EFF3  F00D         	goto	u3240
  4108  001BE0                     u3241:
  4109  001BE0  FFFF               	dw	65535	; assembler added errata NOP
  4110  001BE2  EFB5  F00D         	goto	l3880
  4111  001BE6                     u3240:
  4112  001BE6  FFFF               	dw	65535	; assembler added errata NOP
  4113  001BE8  BE83               	btfsc	131,7,c	;volatile
  4114  001BEA  EFF9  F00D         	goto	u3251
  4115  001BEE  EFFC  F00D         	goto	u3250
  4116  001BF2                     u3251:
  4117  001BF2  FFFF               	dw	65535	; assembler added errata NOP
  4118  001BF4  EFB5  F00D         	goto	l3880
  4119  001BF8                     u3250:
  4120  001BF8                     l3894:
  4121  001BF8  FFFF               	dw	65535	; assembler added errata NOP
  4122                           
  4123                           ;motors.c: 494:     stopADC();
  4124  001BFA  ECD2  F012         	call	_stopADC	;wreg free
  4125  001BFE                     
  4126                           ;motors.c: 497:     resetTherm();
  4127  001BFE  EC9F  F012         	call	_resetTherm	;wreg free
  4128  001C02                     
  4129                           ;motors.c: 500:     T0CONbits.TMR0ON = 0;
  4130  001C02  9ED5               	bcf	213,7,c	;volatile
  4131  001C04                     
  4132                           ;motors.c: 501:     T2CONbits.TMR2ON = 0;
  4133  001C04  94CA               	bcf	202,2,c	;volatile
  4134                           
  4135                           ;motors.c: 503:     TMR0 = 0;
  4136  001C06  0E00               	movlw	0
  4137  001C08  6ED7               	movwf	215,c	;volatile
  4138  001C0A  0E00               	movlw	0
  4139  001C0C  6ED6               	movwf	214,c	;volatile
  4140                           
  4141                           ;motors.c: 504:     TMR2 = 0;
  4142  001C0E  0E00               	movlw	0
  4143  001C10  6ECC               	movwf	204,c	;volatile
  4144  001C12                     
  4145                           ;motors.c: 507:     resetStep();
  4146  001C12  ECAE  F012         	call	_resetStep	;wreg free
  4147  001C16                     
  4148                           ;motors.c: 510:     if(PORTDbits.RD7){
  4149  001C16  AE83               	btfss	131,7,c	;volatile
  4150  001C18  EF10  F00E         	goto	u3261
  4151  001C1C  EF13  F00E         	goto	u3260
  4152  001C20                     u3261:
  4153  001C20  FFFF               	dw	65535	; assembler added errata NOP
  4154  001C22  EF18  F00E         	goto	l196
  4155  001C26                     u3260:
  4156  001C26  FFFF               	dw	65535	; assembler added errata NOP
  4157  001C28                     
  4158                           ;motors.c: 511:         tm0Error = 2;
  4159  001C28  0E00               	movlw	0
  4160  001C2A  6E5C               	movwf	(_tm0Error+1)^0,c
  4161  001C2C  0E02               	movlw	2
  4162  001C2E  6E5B               	movwf	_tm0Error^0,c
  4163  001C30                     l196:
  4164  001C30  FFFF               	dw	65535	; assembler added errata NOP
  4165                           
  4166                           ;motors.c: 514:     return(tm0Error);
  4167  001C32  505B               	movf	_tm0Error^0,w,c
  4168  001C34  0012               	return		;funcret
  4169  001C36  FFFF               	dw	65535	; errata NOP
  4170  001C38                     __end_of_touchTherm:
  4171                           	callstack 0
  4172                           
  4173 ;; *************** function _returnTherm *****************
  4174 ;; Defined at:
  4175 ;;		line 58 in file "adc.c"
  4176 ;; Parameters:    Size  Location     Type
  4177 ;;		None
  4178 ;; Auto vars:     Size  Location     Type
  4179 ;;		None
  4180 ;; Return value:  Size  Location     Type
  4181 ;;                  2   17[COMRAM] unsigned int 
  4182 ;; Registers used:
  4183 ;;		None
  4184 ;; Tracked objects:
  4185 ;;		On entry : 0/0
  4186 ;;		On exit  : 0/0
  4187 ;;		Unchanged: 0/0
  4188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4189 ;;      Params:         2       0       0       0       0       0       0
  4190 ;;      Locals:         0       0       0       0       0       0       0
  4191 ;;      Temps:          0       0       0       0       0       0       0
  4192 ;;      Totals:         2       0       0       0       0       0       0
  4193 ;;Total ram usage:        2 bytes
  4194 ;; Hardware stack levels used:    1
  4195 ;; Hardware stack levels required when called:    4
  4196 ;; This function calls:
  4197 ;;		Nothing
  4198 ;; This function is called by:
  4199 ;;		_touchTherm
  4200 ;; This function uses a non-reentrant model
  4201 ;;
  4202                           
  4203                           	psect	text23
  4204  002510                     __ptext23:
  4205                           	callstack 0
  4206  002510                     _returnTherm:
  4207                           	callstack 0
  4208  002510  FFFF               	dw	65535	; assembler added errata NOP
  4209  002512                     
  4210                           ;adc.c: 59:     return therm_rel;
  4211  002512  C064  F012         	movff	_therm_rel,?_returnTherm	;volatile
  4212  002516  6A13               	clrf	(?_returnTherm+1)^0,c
  4213  002518  0012               	return		;funcret
  4214  00251A  FFFF               	dw	65535	; errata NOP
  4215  00251C                     __end_of_returnTherm:
  4216                           	callstack 0
  4217                           
  4218 ;; *************** function _resetTherm *****************
  4219 ;; Defined at:
  4220 ;;		line 72 in file "adc.c"
  4221 ;; Parameters:    Size  Location     Type
  4222 ;;		None
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;		None
  4225 ;; Return value:  Size  Location     Type
  4226 ;;                  1    wreg      void 
  4227 ;; Registers used:
  4228 ;;		wreg, status,2
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4234 ;;      Params:         0       0       0       0       0       0       0
  4235 ;;      Locals:         0       0       0       0       0       0       0
  4236 ;;      Temps:          0       0       0       0       0       0       0
  4237 ;;      Totals:         0       0       0       0       0       0       0
  4238 ;;Total ram usage:        0 bytes
  4239 ;; Hardware stack levels used:    1
  4240 ;; Hardware stack levels required when called:    4
  4241 ;; This function calls:
  4242 ;;		Nothing
  4243 ;; This function is called by:
  4244 ;;		_touchTherm
  4245 ;; This function uses a non-reentrant model
  4246 ;;
  4247                           
  4248                           	psect	text24
  4249  00253E                     __ptext24:
  4250                           	callstack 0
  4251  00253E                     _resetTherm:
  4252                           	callstack 0
  4253  00253E  FFFF               	dw	65535	; assembler added errata NOP
  4254  002540                     
  4255                           ;adc.c: 73:     therm_rel = 0;
  4256  002540  0E00               	movlw	0
  4257  002542  6E64               	movwf	_therm_rel^0,c	;volatile
  4258  002544  0012               	return		;funcret
  4259  002546  FFFF               	dw	65535	; errata NOP
  4260  002548                     __end_of_resetTherm:
  4261                           	callstack 0
  4262                           
  4263 ;; *************** function _touchObject *****************
  4264 ;; Defined at:
  4265 ;;		line 384 in file "motors.c"
  4266 ;; Parameters:    Size  Location     Type
  4267 ;;		None
  4268 ;; Auto vars:     Size  Location     Type
  4269 ;;		None
  4270 ;; Return value:  Size  Location     Type
  4271 ;;                  1    wreg      unsigned char 
  4272 ;; Registers used:
  4273 ;;		wreg, status,2, status,0, cstack
  4274 ;; Tracked objects:
  4275 ;;		On entry : 0/0
  4276 ;;		On exit  : 0/0
  4277 ;;		Unchanged: 0/0
  4278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4279 ;;      Params:         0       0       0       0       0       0       0
  4280 ;;      Locals:         0       0       0       0       0       0       0
  4281 ;;      Temps:          0       0       0       0       0       0       0
  4282 ;;      Totals:         0       0       0       0       0       0       0
  4283 ;;Total ram usage:        0 bytes
  4284 ;; Hardware stack levels used:    1
  4285 ;; Hardware stack levels required when called:    5
  4286 ;; This function calls:
  4287 ;;		_resetStep
  4288 ;;		_resetTouch
  4289 ;;		_returnTouch
  4290 ;;		_setDirection
  4291 ;;		_startADC
  4292 ;;		_stepMade
  4293 ;;		_stopADC
  4294 ;; This function is called by:
  4295 ;;		_executeData
  4296 ;; This function uses a non-reentrant model
  4297 ;;
  4298                           
  4299                           	psect	text25
  4300  001C38                     __ptext25:
  4301                           	callstack 0
  4302  001C38                     _touchObject:
  4303                           	callstack 0
  4304  001C38  FFFF               	dw	65535	; assembler added errata NOP
  4305  001C3A                     
  4306                           ;motors.c: 387:     setDirection(1, 2);
  4307  001C3A  0E02               	movlw	2
  4308  001C3C  6E12               	movwf	setDirection@motor^0,c
  4309  001C3E  0E01               	movlw	1
  4310  001C40  ECE6  F010         	call	_setDirection
  4311  001C44                     
  4312                           ;motors.c: 389:     T2CONbits.TMR2ON = 1;
  4313  001C44  84CA               	bsf	202,2,c	;volatile
  4314  001C46                     
  4315                           ;motors.c: 391:     tm0Error = 0;
  4316  001C46  0E00               	movlw	0
  4317  001C48  6E5C               	movwf	(_tm0Error+1)^0,c
  4318  001C4A  0E00               	movlw	0
  4319  001C4C  6E5B               	movwf	_tm0Error^0,c
  4320  001C4E                     
  4321                           ;motors.c: 392:     tm0Limit = 100;
  4322  001C4E  0E64               	movlw	100
  4323  001C50  6E68               	movwf	_tm0Limit^0,c
  4324  001C52                     
  4325                           ;motors.c: 393:     T0CONbits.TMR0ON = 1;
  4326  001C52  8ED5               	bsf	213,7,c	;volatile
  4327  001C54                     
  4328                           ;motors.c: 396:     startADC();
  4329  001C54  ECA4  F012         	call	_startADC	;wreg free
  4330                           
  4331                           ;motors.c: 399:     while(!returnTouch() || PORTDbits.RD7){
  4332  001C58  EF5F  F00E         	goto	l3848
  4333  001C5C                     l3838:
  4334  001C5C  FFFF               	dw	65535	; assembler added errata NOP
  4335                           
  4336                           ;motors.c: 402:         if(tm0Error){
  4337  001C5E  505B               	movf	_tm0Error^0,w,c
  4338  001C60  105C               	iorwf	(_tm0Error+1)^0,w,c
  4339  001C62  B4D8               	btfsc	status,2,c
  4340  001C64  EF36  F00E         	goto	u3151
  4341  001C68  EF39  F00E         	goto	u3150
  4342  001C6C                     u3151:
  4343  001C6C  FFFF               	dw	65535	; assembler added errata NOP
  4344  001C6E  EF41  F00E         	goto	l174
  4345  001C72                     u3150:
  4346  001C72  FFFF               	dw	65535	; assembler added errata NOP
  4347  001C74                     
  4348                           ;motors.c: 404:             LATCbits.LATC2 = 0;
  4349  001C74  948B               	bcf	139,2,c	;volatile
  4350  001C76                     
  4351                           ;motors.c: 405:             tm0Error = 6;
  4352  001C76  0E00               	movlw	0
  4353  001C78  6E5C               	movwf	(_tm0Error+1)^0,c
  4354  001C7A  0E06               	movlw	6
  4355  001C7C  6E5B               	movwf	_tm0Error^0,c
  4356                           
  4357                           ;motors.c: 406:             break;
  4358  001C7E  EF75  F00E         	goto	l3852
  4359  001C82                     l174:
  4360  001C82  FFFF               	dw	65535	; assembler added errata NOP
  4361                           
  4362                           ;motors.c: 410:         LATCbits.LATC2 = 1;
  4363  001C84  848B               	bsf	139,2,c	;volatile
  4364  001C86                     l3844:
  4365  001C86  FFFF               	dw	65535	; assembler added errata NOP
  4366  001C88  EC52  F012         	call	_stepMade	;wreg free
  4367  001C8C  5012               	movf	?_stepMade^0,w,c
  4368  001C8E  1013               	iorwf	(?_stepMade+1)^0,w,c
  4369  001C90  B4D8               	btfsc	status,2,c
  4370  001C92  EF4D  F00E         	goto	u3161
  4371  001C96  EF50  F00E         	goto	u3160
  4372  001C9A                     u3161:
  4373  001C9A  FFFF               	dw	65535	; assembler added errata NOP
  4374  001C9C  EF43  F00E         	goto	l3844
  4375  001CA0                     u3160:
  4376  001CA0  FFFF               	dw	65535	; assembler added errata NOP
  4377  001CA2                     
  4378                           ;motors.c: 416:         LATCbits.LATC2 = 0;
  4379  001CA2  948B               	bcf	139,2,c	;volatile
  4380  001CA4                     l3846:
  4381  001CA4  FFFF               	dw	65535	; assembler added errata NOP
  4382  001CA6  EC52  F012         	call	_stepMade	;wreg free
  4383  001CAA  5012               	movf	?_stepMade^0,w,c
  4384  001CAC  1013               	iorwf	(?_stepMade+1)^0,w,c
  4385  001CAE  B4D8               	btfsc	status,2,c
  4386  001CB0  EF5C  F00E         	goto	u3171
  4387  001CB4  EF5F  F00E         	goto	u3170
  4388  001CB8                     u3171:
  4389  001CB8  FFFF               	dw	65535	; assembler added errata NOP
  4390  001CBA  EF52  F00E         	goto	l3846
  4391  001CBE                     u3170:
  4392  001CBE                     l3848:
  4393  001CBE  FFFF               	dw	65535	; assembler added errata NOP
  4394                           
  4395                           ;motors.c: 399:     while(!returnTouch() || PORTDbits.RD7){
  4396  001CC0  EC8E  F012         	call	_returnTouch	;wreg free
  4397  001CC4  5012               	movf	?_returnTouch^0,w,c
  4398  001CC6  1013               	iorwf	(?_returnTouch+1)^0,w,c
  4399  001CC8  B4D8               	btfsc	status,2,c
  4400  001CCA  EF69  F00E         	goto	u3181
  4401  001CCE  EF6C  F00E         	goto	u3180
  4402  001CD2                     u3181:
  4403  001CD2  FFFF               	dw	65535	; assembler added errata NOP
  4404  001CD4  EF2E  F00E         	goto	l3838
  4405  001CD8                     u3180:
  4406  001CD8  FFFF               	dw	65535	; assembler added errata NOP
  4407  001CDA  BE83               	btfsc	131,7,c	;volatile
  4408  001CDC  EF72  F00E         	goto	u3191
  4409  001CE0  EF75  F00E         	goto	u3190
  4410  001CE4                     u3191:
  4411  001CE4  FFFF               	dw	65535	; assembler added errata NOP
  4412  001CE6  EF2E  F00E         	goto	l3838
  4413  001CEA                     u3190:
  4414  001CEA                     l3852:
  4415  001CEA  FFFF               	dw	65535	; assembler added errata NOP
  4416                           
  4417                           ;motors.c: 423:     stopADC();
  4418  001CEC  ECD2  F012         	call	_stopADC	;wreg free
  4419  001CF0                     
  4420                           ;motors.c: 426:     resetTouch();
  4421  001CF0  ECA9  F012         	call	_resetTouch	;wreg free
  4422  001CF4                     
  4423                           ;motors.c: 429:     T0CONbits.TMR0ON = 0;
  4424  001CF4  9ED5               	bcf	213,7,c	;volatile
  4425  001CF6                     
  4426                           ;motors.c: 430:     T2CONbits.TMR2ON = 0;
  4427  001CF6  94CA               	bcf	202,2,c	;volatile
  4428                           
  4429                           ;motors.c: 432:     TMR0 = 0;
  4430  001CF8  0E00               	movlw	0
  4431  001CFA  6ED7               	movwf	215,c	;volatile
  4432  001CFC  0E00               	movlw	0
  4433  001CFE  6ED6               	movwf	214,c	;volatile
  4434                           
  4435                           ;motors.c: 433:     TMR2 = 0;
  4436  001D00  0E00               	movlw	0
  4437  001D02  6ECC               	movwf	204,c	;volatile
  4438  001D04                     
  4439                           ;motors.c: 436:     resetStep();
  4440  001D04  ECAE  F012         	call	_resetStep	;wreg free
  4441  001D08                     
  4442                           ;motors.c: 439:     if(PORTDbits.RD7){
  4443  001D08  AE83               	btfss	131,7,c	;volatile
  4444  001D0A  EF89  F00E         	goto	u3201
  4445  001D0E  EF8C  F00E         	goto	u3200
  4446  001D12                     u3201:
  4447  001D12  FFFF               	dw	65535	; assembler added errata NOP
  4448  001D14  EF91  F00E         	goto	l182
  4449  001D18                     u3200:
  4450  001D18  FFFF               	dw	65535	; assembler added errata NOP
  4451  001D1A                     
  4452                           ;motors.c: 440:         tm0Error = 2;
  4453  001D1A  0E00               	movlw	0
  4454  001D1C  6E5C               	movwf	(_tm0Error+1)^0,c
  4455  001D1E  0E02               	movlw	2
  4456  001D20  6E5B               	movwf	_tm0Error^0,c
  4457  001D22                     l182:
  4458  001D22  FFFF               	dw	65535	; assembler added errata NOP
  4459                           
  4460                           ;motors.c: 443:     return(tm0Error);
  4461  001D24  505B               	movf	_tm0Error^0,w,c
  4462  001D26  0012               	return		;funcret
  4463  001D28  FFFF               	dw	65535	; errata NOP
  4464  001D2A                     __end_of_touchObject:
  4465                           	callstack 0
  4466                           
  4467 ;; *************** function _stopADC *****************
  4468 ;; Defined at:
  4469 ;;		line 44 in file "adc.c"
  4470 ;; Parameters:    Size  Location     Type
  4471 ;;		None
  4472 ;; Auto vars:     Size  Location     Type
  4473 ;;		None
  4474 ;; Return value:  Size  Location     Type
  4475 ;;                  1    wreg      void 
  4476 ;; Registers used:
  4477 ;;		None
  4478 ;; Tracked objects:
  4479 ;;		On entry : 0/0
  4480 ;;		On exit  : 0/0
  4481 ;;		Unchanged: 0/0
  4482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4483 ;;      Params:         0       0       0       0       0       0       0
  4484 ;;      Locals:         0       0       0       0       0       0       0
  4485 ;;      Temps:          0       0       0       0       0       0       0
  4486 ;;      Totals:         0       0       0       0       0       0       0
  4487 ;;Total ram usage:        0 bytes
  4488 ;; Hardware stack levels used:    1
  4489 ;; Hardware stack levels required when called:    4
  4490 ;; This function calls:
  4491 ;;		Nothing
  4492 ;; This function is called by:
  4493 ;;		_touchObject
  4494 ;;		_touchTherm
  4495 ;; This function uses a non-reentrant model
  4496 ;;
  4497                           
  4498                           	psect	text26
  4499  0025A4                     __ptext26:
  4500                           	callstack 0
  4501  0025A4                     _stopADC:
  4502                           	callstack 0
  4503  0025A4  FFFF               	dw	65535	; assembler added errata NOP
  4504  0025A6                     
  4505                           ;adc.c: 45:     ADCON0bits.ADON = 0;
  4506  0025A6  90C2               	bcf	194,0,c	;volatile
  4507  0025A8  0012               	return		;funcret
  4508  0025AA  FFFF               	dw	65535	; errata NOP
  4509  0025AC                     __end_of_stopADC:
  4510                           	callstack 0
  4511                           
  4512 ;; *************** function _startADC *****************
  4513 ;; Defined at:
  4514 ;;		line 36 in file "adc.c"
  4515 ;; Parameters:    Size  Location     Type
  4516 ;;		None
  4517 ;; Auto vars:     Size  Location     Type
  4518 ;;		None
  4519 ;; Return value:  Size  Location     Type
  4520 ;;                  1    wreg      void 
  4521 ;; Registers used:
  4522 ;;		None
  4523 ;; Tracked objects:
  4524 ;;		On entry : 0/0
  4525 ;;		On exit  : 0/0
  4526 ;;		Unchanged: 0/0
  4527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4528 ;;      Params:         0       0       0       0       0       0       0
  4529 ;;      Locals:         0       0       0       0       0       0       0
  4530 ;;      Temps:          0       0       0       0       0       0       0
  4531 ;;      Totals:         0       0       0       0       0       0       0
  4532 ;;Total ram usage:        0 bytes
  4533 ;; Hardware stack levels used:    1
  4534 ;; Hardware stack levels required when called:    4
  4535 ;; This function calls:
  4536 ;;		Nothing
  4537 ;; This function is called by:
  4538 ;;		_touchObject
  4539 ;;		_touchTherm
  4540 ;; This function uses a non-reentrant model
  4541 ;;
  4542                           
  4543                           	psect	text27
  4544  002548                     __ptext27:
  4545                           	callstack 0
  4546  002548                     _startADC:
  4547                           	callstack 0
  4548  002548  FFFF               	dw	65535	; assembler added errata NOP
  4549  00254A                     
  4550                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  4551  00254A  80C2               	bsf	194,0,c	;volatile
  4552                           
  4553                           ;adc.c: 38:     ADCON0bits.GODONE = 1;
  4554  00254C  84C2               	bsf	194,2,c	;volatile
  4555  00254E  0012               	return		;funcret
  4556  002550  FFFF               	dw	65535	; errata NOP
  4557  002552                     __end_of_startADC:
  4558                           	callstack 0
  4559                           
  4560 ;; *************** function _returnTouch *****************
  4561 ;; Defined at:
  4562 ;;		line 51 in file "adc.c"
  4563 ;; Parameters:    Size  Location     Type
  4564 ;;		None
  4565 ;; Auto vars:     Size  Location     Type
  4566 ;;		None
  4567 ;; Return value:  Size  Location     Type
  4568 ;;                  2   17[COMRAM] unsigned int 
  4569 ;; Registers used:
  4570 ;;		None
  4571 ;; Tracked objects:
  4572 ;;		On entry : 0/0
  4573 ;;		On exit  : 0/0
  4574 ;;		Unchanged: 0/0
  4575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4576 ;;      Params:         2       0       0       0       0       0       0
  4577 ;;      Locals:         0       0       0       0       0       0       0
  4578 ;;      Temps:          0       0       0       0       0       0       0
  4579 ;;      Totals:         2       0       0       0       0       0       0
  4580 ;;Total ram usage:        2 bytes
  4581 ;; Hardware stack levels used:    1
  4582 ;; Hardware stack levels required when called:    4
  4583 ;; This function calls:
  4584 ;;		Nothing
  4585 ;; This function is called by:
  4586 ;;		_touchObject
  4587 ;; This function uses a non-reentrant model
  4588 ;;
  4589                           
  4590                           	psect	text28
  4591  00251C                     __ptext28:
  4592                           	callstack 0
  4593  00251C                     _returnTouch:
  4594                           	callstack 0
  4595  00251C  FFFF               	dw	65535	; assembler added errata NOP
  4596  00251E                     
  4597                           ;adc.c: 52:     return touch_rel;
  4598  00251E  C065  F012         	movff	_touch_rel,?_returnTouch	;volatile
  4599  002522  6A13               	clrf	(?_returnTouch+1)^0,c
  4600  002524  0012               	return		;funcret
  4601  002526  FFFF               	dw	65535	; errata NOP
  4602  002528                     __end_of_returnTouch:
  4603                           	callstack 0
  4604                           
  4605 ;; *************** function _resetTouch *****************
  4606 ;; Defined at:
  4607 ;;		line 65 in file "adc.c"
  4608 ;; Parameters:    Size  Location     Type
  4609 ;;		None
  4610 ;; Auto vars:     Size  Location     Type
  4611 ;;		None
  4612 ;; Return value:  Size  Location     Type
  4613 ;;                  1    wreg      void 
  4614 ;; Registers used:
  4615 ;;		wreg, status,2
  4616 ;; Tracked objects:
  4617 ;;		On entry : 0/0
  4618 ;;		On exit  : 0/0
  4619 ;;		Unchanged: 0/0
  4620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4621 ;;      Params:         0       0       0       0       0       0       0
  4622 ;;      Locals:         0       0       0       0       0       0       0
  4623 ;;      Temps:          0       0       0       0       0       0       0
  4624 ;;      Totals:         0       0       0       0       0       0       0
  4625 ;;Total ram usage:        0 bytes
  4626 ;; Hardware stack levels used:    1
  4627 ;; Hardware stack levels required when called:    4
  4628 ;; This function calls:
  4629 ;;		Nothing
  4630 ;; This function is called by:
  4631 ;;		_touchObject
  4632 ;; This function uses a non-reentrant model
  4633 ;;
  4634                           
  4635                           	psect	text29
  4636  002552                     __ptext29:
  4637                           	callstack 0
  4638  002552                     _resetTouch:
  4639                           	callstack 0
  4640  002552  FFFF               	dw	65535	; assembler added errata NOP
  4641  002554                     
  4642                           ;adc.c: 66:     touch_rel = 0;
  4643  002554  0E00               	movlw	0
  4644  002556  6E65               	movwf	_touch_rel^0,c	;volatile
  4645  002558  0012               	return		;funcret
  4646  00255A  FFFF               	dw	65535	; errata NOP
  4647  00255C                     __end_of_resetTouch:
  4648                           	callstack 0
  4649                           
  4650 ;; *************** function _rotateObj *****************
  4651 ;; Defined at:
  4652 ;;		line 575 in file "motors.c"
  4653 ;; Parameters:    Size  Location     Type
  4654 ;;  rotAngle        1    wreg     unsigned char 
  4655 ;; Auto vars:     Size  Location     Type
  4656 ;;  rotAngle        1    3[BANK0 ] unsigned char 
  4657 ;;  i               2    6[BANK0 ] unsigned int 
  4658 ;;  totStep         2    4[BANK0 ] int 
  4659 ;; Return value:  Size  Location     Type
  4660 ;;                  1    wreg      void 
  4661 ;; Registers used:
  4662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4663 ;; Tracked objects:
  4664 ;;		On entry : 0/0
  4665 ;;		On exit  : 0/0
  4666 ;;		Unchanged: 0/0
  4667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4668 ;;      Params:         0       0       0       0       0       0       0
  4669 ;;      Locals:         0       5       0       0       0       0       0
  4670 ;;      Temps:          0       3       0       0       0       0       0
  4671 ;;      Totals:         0       8       0       0       0       0       0
  4672 ;;Total ram usage:        8 bytes
  4673 ;; Hardware stack levels used:    1
  4674 ;; Hardware stack levels required when called:    5
  4675 ;; This function calls:
  4676 ;;		___fldiv
  4677 ;;		___fltol
  4678 ;;		___xxtofl
  4679 ;;		_stepMade
  4680 ;; This function is called by:
  4681 ;;		_executeData
  4682 ;; This function uses a non-reentrant model
  4683 ;;
  4684                           
  4685                           	psect	text30
  4686  001D2A                     __ptext30:
  4687                           	callstack 0
  4688  001D2A                     _rotateObj:
  4689                           	callstack 0
  4690  001D2A  FFFF               	dw	65535	; assembler added errata NOP
  4691                           
  4692                           ;incstack = 0
  4693                           ;rotateObj@rotAngle stored from wreg
  4694  001D2C  0100               	movlb	0	; () banked
  4695  001D2E  6FF7               	movwf	rotateObj@rotAngle& (0+255),b
  4696  001D30                     
  4697                           ;motors.c: 576:     static const float stepAngle = 0.08789;;motors.c: 577:     static ch
      +                          ar rotSequence[] = {0b1001, 0b0011, 0b0110, 0b1100};;motors.c: 578:     unsigned int i;;
      +                          motors.c: 579:     int totStep = rotAngle/stepAngle;
  4698  001D30  0EAC               	movlw	172
  4699  001D32  6E24               	movwf	___fldiv@a^0,c
  4700  001D34  0EFF               	movlw	255
  4701  001D36  6E25               	movwf	(___fldiv@a+1)^0,c
  4702  001D38  0EB3               	movlw	179
  4703  001D3A  6E26               	movwf	(___fldiv@a+2)^0,c
  4704  001D3C  0E3D               	movlw	61
  4705  001D3E  6E27               	movwf	(___fldiv@a+3)^0,c
  4706  001D40  0100               	movlb	0	; () banked
  4707  001D42  51F7               	movf	rotateObj@rotAngle& (0+255),w,b
  4708  001D44  6E12               	movwf	___xxtofl@val^0,c
  4709  001D46  6A13               	clrf	(___xxtofl@val+1)^0,c
  4710  001D48  6A14               	clrf	(___xxtofl@val+2)^0,c
  4711  001D4A  6A15               	clrf	(___xxtofl@val+3)^0,c
  4712  001D4C  0E01               	movlw	1
  4713  001D4E  ECC9  F007         	call	___xxtofl
  4714  001D52  C012  F020         	movff	?___xxtofl,___fldiv@b
  4715  001D56  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4716  001D5A  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4717  001D5E  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4718  001D62  EC08  F003         	call	___fldiv	;wreg free
  4719  001D66  C020  F039         	movff	?___fldiv,___fltol@f1
  4720  001D6A  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4721  001D6E  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4722  001D72  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4723  001D76  ECEC  F00B         	call	___fltol	;wreg free
  4724  001D7A  C039  F0F8         	movff	?___fltol,rotateObj@totStep
  4725  001D7E  C03A  F0F9         	movff	?___fltol+1,rotateObj@totStep+1
  4726  001D82                     
  4727                           ;motors.c: 582:     for(i = 0; i < totStep; i++){
  4728  001D82  0E00               	movlw	0
  4729  001D84  0100               	movlb	0	; () banked
  4730  001D86  6FFB               	movwf	(rotateObj@i+1)& (0+255),b
  4731  001D88  0E00               	movlw	0
  4732  001D8A  6FFA               	movwf	rotateObj@i& (0+255),b
  4733  001D8C  EFF3  F00E         	goto	l3954
  4734  001D90                     l3942:
  4735  001D90  FFFF               	dw	65535	; assembler added errata NOP
  4736                           
  4737                           ; BSR set to: 0
  4738                           ;motors.c: 584:         LATD &= 0xC3;
  4739  001D92  0EC3               	movlw	195
  4740  001D94  168C               	andwf	140,f,c	;volatile
  4741  001D96                     
  4742                           ; BSR set to: 0
  4743                           ;motors.c: 586:         LATD |= rotSequence[i%4] << 2;
  4744  001D96  0E03               	movlw	3
  4745  001D98  15FA               	andwf	rotateObj@i& (0+255),w,b
  4746  001D9A  6FF4               	movwf	??_rotateObj& (0+255),b
  4747  001D9C  0E00               	movlw	0
  4748  001D9E  15FB               	andwf	(rotateObj@i+1)& (0+255),w,b
  4749  001DA0  6FF5               	movwf	(??_rotateObj+1)& (0+255),b
  4750  001DA2  0E80               	movlw	low rotateObj@rotSequence
  4751  001DA4  25F4               	addwf	??_rotateObj& (0+255),w,b
  4752  001DA6  6ED9               	movwf	fsr2l,c
  4753  001DA8  0E00               	movlw	high rotateObj@rotSequence
  4754  001DAA  21F5               	addwfc	(??_rotateObj+1)& (0+255),w,b
  4755  001DAC  6EDA               	movwf	fsr2h,c
  4756  001DAE  50DF               	movf	indf2,w,c
  4757  001DB0  6FF6               	movwf	(??_rotateObj+2)& (0+255),b
  4758  001DB2  90D8               	bcf	status,0,c
  4759  001DB4  37F6               	rlcf	(??_rotateObj+2)& (0+255),f,b
  4760  001DB6  90D8               	bcf	status,0,c
  4761  001DB8  35F6               	rlcf	(??_rotateObj+2)& (0+255),w,b
  4762  001DBA  128C               	iorwf	140,f,c	;volatile
  4763  001DBC                     
  4764                           ; BSR set to: 0
  4765                           ;motors.c: 590:         T2CONbits.TMR2ON = 1;
  4766  001DBC  84CA               	bsf	202,2,c	;volatile
  4767  001DBE                     l3948:
  4768  001DBE  FFFF               	dw	65535	; assembler added errata NOP
  4769  001DC0  EC52  F012         	call	_stepMade	;wreg free
  4770  001DC4  5012               	movf	?_stepMade^0,w,c
  4771  001DC6  1013               	iorwf	(?_stepMade+1)^0,w,c
  4772  001DC8  B4D8               	btfsc	status,2,c
  4773  001DCA  EFE9  F00E         	goto	u3311
  4774  001DCE  EFEC  F00E         	goto	u3310
  4775  001DD2                     u3311:
  4776  001DD2  FFFF               	dw	65535	; assembler added errata NOP
  4777  001DD4  EFDF  F00E         	goto	l3948
  4778  001DD8                     u3310:
  4779  001DD8  FFFF               	dw	65535	; assembler added errata NOP
  4780  001DDA                     
  4781                           ;motors.c: 592:         T2CONbits.TMR2ON = 1;
  4782  001DDA  84CA               	bsf	202,2,c	;volatile
  4783  001DDC                     
  4784                           ;motors.c: 593:         TMR2 = 0;
  4785  001DDC  0E00               	movlw	0
  4786  001DDE  6ECC               	movwf	204,c	;volatile
  4787  001DE0                     
  4788                           ;motors.c: 594:     }
  4789  001DE0  0100               	movlb	0	; () banked
  4790  001DE2  4BFA               	infsnz	rotateObj@i& (0+255),f,b
  4791  001DE4  2BFB               	incf	(rotateObj@i+1)& (0+255),f,b
  4792  001DE6                     l3954:
  4793  001DE6  FFFF               	dw	65535	; assembler added errata NOP
  4794                           
  4795                           ; BSR set to: 0
  4796  001DE8  51F8               	movf	rotateObj@totStep& (0+255),w,b
  4797  001DEA  5DFA               	subwf	rotateObj@i& (0+255),w,b
  4798  001DEC  51F9               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4799  001DEE  59FB               	subwfb	(rotateObj@i+1)& (0+255),w,b
  4800  001DF0  A0D8               	btfss	status,0,c
  4801  001DF2  EFFD  F00E         	goto	u3321
  4802  001DF6  EF00  F00F         	goto	u3320
  4803  001DFA                     u3321:
  4804  001DFA  FFFF               	dw	65535	; assembler added errata NOP
  4805  001DFC  EFC8  F00E         	goto	l3942
  4806  001E00                     u3320:
  4807  001E00  FFFF               	dw	65535	; assembler added errata NOP
  4808  001E02                     
  4809                           ; BSR set to: 0
  4810  001E02  0012               	return		;funcret
  4811  001E04  FFFF               	dw	65535	; errata NOP
  4812  001E06                     __end_of_rotateObj:
  4813                           	callstack 0
  4814                           
  4815 ;; *************** function ___xxtofl *****************
  4816 ;; Defined at:
  4817 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4818 ;; Parameters:    Size  Location     Type
  4819 ;;  sign            1    wreg     unsigned char 
  4820 ;;  val             4   17[COMRAM] long 
  4821 ;; Auto vars:     Size  Location     Type
  4822 ;;  sign            1   25[COMRAM] unsigned char 
  4823 ;;  arg             4   27[COMRAM] unsigned long 
  4824 ;;  exp             1   26[COMRAM] unsigned char 
  4825 ;; Return value:  Size  Location     Type
  4826 ;;                  4   17[COMRAM] unsigned char 
  4827 ;; Registers used:
  4828 ;;		wreg, status,2, status,0
  4829 ;; Tracked objects:
  4830 ;;		On entry : 0/0
  4831 ;;		On exit  : 0/0
  4832 ;;		Unchanged: 0/0
  4833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4834 ;;      Params:         4       0       0       0       0       0       0
  4835 ;;      Locals:         6       0       0       0       0       0       0
  4836 ;;      Temps:          4       0       0       0       0       0       0
  4837 ;;      Totals:        14       0       0       0       0       0       0
  4838 ;;Total ram usage:       14 bytes
  4839 ;; Hardware stack levels used:    1
  4840 ;; Hardware stack levels required when called:    4
  4841 ;; This function calls:
  4842 ;;		Nothing
  4843 ;; This function is called by:
  4844 ;;		_rotateObj
  4845 ;; This function uses a non-reentrant model
  4846 ;;
  4847                           
  4848                           	psect	text31
  4849  000F92                     __ptext31:
  4850                           	callstack 0
  4851  000F92                     ___xxtofl:
  4852                           	callstack 0
  4853  000F92  FFFF               	dw	65535	; assembler added errata NOP
  4854                           
  4855                           ; BSR set to: 0
  4856                           ;incstack = 0
  4857                           ;___xxtofl@sign stored from wreg
  4858  000F94  6E1A               	movwf	___xxtofl@sign^0,c
  4859  000F96  501A               	movf	___xxtofl@sign^0,w,c
  4860  000F98  B4D8               	btfsc	status,2,c
  4861  000F9A  EFD1  F007         	goto	u2821
  4862  000F9E  EFD4  F007         	goto	u2820
  4863  000FA2                     u2821:
  4864  000FA2  FFFF               	dw	65535	; assembler added errata NOP
  4865  000FA4  EFF9  F007         	goto	l1248
  4866  000FA8                     u2820:
  4867  000FA8  FFFF               	dw	65535	; assembler added errata NOP
  4868  000FAA  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4869  000FAC  EFDD  F007         	goto	u2830
  4870  000FB0  EFDA  F007         	goto	u2831
  4871  000FB4                     u2831:
  4872  000FB4  FFFF               	dw	65535	; assembler added errata NOP
  4873  000FB6  EFF9  F007         	goto	l1248
  4874  000FBA                     u2830:
  4875  000FBA  FFFF               	dw	65535	; assembler added errata NOP
  4876  000FBC  C012  F016         	movff	___xxtofl@val,??___xxtofl
  4877  000FC0  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  4878  000FC4  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  4879  000FC8  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  4880  000FCC  1E16               	comf	??___xxtofl^0,f,c
  4881  000FCE  1E17               	comf	(??___xxtofl+1)^0,f,c
  4882  000FD0  1E18               	comf	(??___xxtofl+2)^0,f,c
  4883  000FD2  1E19               	comf	(??___xxtofl+3)^0,f,c
  4884  000FD4  2A16               	incf	??___xxtofl^0,f,c
  4885  000FD6  0E00               	movlw	0
  4886  000FD8  2217               	addwfc	(??___xxtofl+1)^0,f,c
  4887  000FDA  2218               	addwfc	(??___xxtofl+2)^0,f,c
  4888  000FDC  2219               	addwfc	(??___xxtofl+3)^0,f,c
  4889  000FDE  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  4890  000FE2  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4891  000FE6  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4892  000FEA  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4893  000FEE  EF02  F008         	goto	l3652
  4894  000FF2                     l1248:
  4895  000FF2  FFFF               	dw	65535	; assembler added errata NOP
  4896  000FF4  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  4897  000FF8  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4898  000FFC  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4899  001000  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4900  001004                     l3652:
  4901  001004  FFFF               	dw	65535	; assembler added errata NOP
  4902  001006  5012               	movf	___xxtofl@val^0,w,c
  4903  001008  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  4904  00100A  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  4905  00100C  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  4906  00100E  A4D8               	btfss	status,2,c
  4907  001010  EF0C  F008         	goto	u2841
  4908  001014  EF0F  F008         	goto	u2840
  4909  001018                     u2841:
  4910  001018  FFFF               	dw	65535	; assembler added errata NOP
  4911  00101A  EF1A  F008         	goto	l3658
  4912  00101E                     u2840:
  4913  00101E  FFFF               	dw	65535	; assembler added errata NOP
  4914  001020  0E00               	movlw	0
  4915  001022  6E12               	movwf	?___xxtofl^0,c
  4916  001024  0E00               	movlw	0
  4917  001026  6E13               	movwf	(?___xxtofl+1)^0,c
  4918  001028  0E00               	movlw	0
  4919  00102A  6E14               	movwf	(?___xxtofl+2)^0,c
  4920  00102C  0E00               	movlw	0
  4921  00102E  6E15               	movwf	(?___xxtofl+3)^0,c
  4922  001030  EFC2  F008         	goto	l1251
  4923  001034                     l3658:
  4924  001034  FFFF               	dw	65535	; assembler added errata NOP
  4925  001036  0E96               	movlw	150
  4926  001038  6E1B               	movwf	___xxtofl@exp^0,c
  4927  00103A  EF26  F008         	goto	l3662
  4928  00103E                     l3660:
  4929  00103E  FFFF               	dw	65535	; assembler added errata NOP
  4930  001040  2A1B               	incf	___xxtofl@exp^0,f,c
  4931  001042  90D8               	bcf	status,0,c
  4932  001044  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4933  001046  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4934  001048  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4935  00104A  321C               	rrcf	___xxtofl@arg^0,f,c
  4936  00104C                     l3662:
  4937  00104C  FFFF               	dw	65535	; assembler added errata NOP
  4938  00104E  0E00               	movlw	0
  4939  001050  141C               	andwf	___xxtofl@arg^0,w,c
  4940  001052  6E16               	movwf	??___xxtofl^0,c
  4941  001054  0E00               	movlw	0
  4942  001056  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4943  001058  6E17               	movwf	(??___xxtofl+1)^0,c
  4944  00105A  0E00               	movlw	0
  4945  00105C  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4946  00105E  6E18               	movwf	(??___xxtofl+2)^0,c
  4947  001060  0EFE               	movlw	254
  4948  001062  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4949  001064  6E19               	movwf	(??___xxtofl+3)^0,c
  4950  001066  5016               	movf	??___xxtofl^0,w,c
  4951  001068  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4952  00106A  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4953  00106C  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4954  00106E  A4D8               	btfss	status,2,c
  4955  001070  EF3C  F008         	goto	u2851
  4956  001074  EF3F  F008         	goto	u2850
  4957  001078                     u2851:
  4958  001078  FFFF               	dw	65535	; assembler added errata NOP
  4959  00107A  EF1F  F008         	goto	l3660
  4960  00107E                     u2850:
  4961  00107E  FFFF               	dw	65535	; assembler added errata NOP
  4962  001080  EF4F  F008         	goto	l1255
  4963  001084                     l3664:
  4964  001084  FFFF               	dw	65535	; assembler added errata NOP
  4965  001086  2A1B               	incf	___xxtofl@exp^0,f,c
  4966  001088  0E01               	movlw	1
  4967  00108A  261C               	addwf	___xxtofl@arg^0,f,c
  4968  00108C  0E00               	movlw	0
  4969  00108E  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4970  001090  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4971  001092  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4972  001094  90D8               	bcf	status,0,c
  4973  001096  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4974  001098  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4975  00109A  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4976  00109C  321C               	rrcf	___xxtofl@arg^0,f,c
  4977  00109E                     l1255:
  4978  00109E  FFFF               	dw	65535	; assembler added errata NOP
  4979  0010A0  0E00               	movlw	0
  4980  0010A2  141C               	andwf	___xxtofl@arg^0,w,c
  4981  0010A4  6E16               	movwf	??___xxtofl^0,c
  4982  0010A6  0E00               	movlw	0
  4983  0010A8  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4984  0010AA  6E17               	movwf	(??___xxtofl+1)^0,c
  4985  0010AC  0E00               	movlw	0
  4986  0010AE  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4987  0010B0  6E18               	movwf	(??___xxtofl+2)^0,c
  4988  0010B2  0EFF               	movlw	255
  4989  0010B4  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4990  0010B6  6E19               	movwf	(??___xxtofl+3)^0,c
  4991  0010B8  5016               	movf	??___xxtofl^0,w,c
  4992  0010BA  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4993  0010BC  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4994  0010BE  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4995  0010C0  A4D8               	btfss	status,2,c
  4996  0010C2  EF65  F008         	goto	u2861
  4997  0010C6  EF68  F008         	goto	u2860
  4998  0010CA                     u2861:
  4999  0010CA  FFFF               	dw	65535	; assembler added errata NOP
  5000  0010CC  EF42  F008         	goto	l3664
  5001  0010D0                     u2860:
  5002  0010D0  FFFF               	dw	65535	; assembler added errata NOP
  5003  0010D2  EF72  F008         	goto	l3672
  5004  0010D6                     l3670:
  5005  0010D6  FFFF               	dw	65535	; assembler added errata NOP
  5006  0010D8  061B               	decf	___xxtofl@exp^0,f,c
  5007  0010DA  90D8               	bcf	status,0,c
  5008  0010DC  361C               	rlcf	___xxtofl@arg^0,f,c
  5009  0010DE  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  5010  0010E0  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  5011  0010E2  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  5012  0010E4                     l3672:
  5013  0010E4  FFFF               	dw	65535	; assembler added errata NOP
  5014  0010E6  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  5015  0010E8  EF78  F008         	goto	u2871
  5016  0010EC  EF7B  F008         	goto	u2870
  5017  0010F0                     u2871:
  5018  0010F0  FFFF               	dw	65535	; assembler added errata NOP
  5019  0010F2  EF85  F008         	goto	l1262
  5020  0010F6                     u2870:
  5021  0010F6  FFFF               	dw	65535	; assembler added errata NOP
  5022  0010F8  0E02               	movlw	2
  5023  0010FA  601B               	cpfslt	___xxtofl@exp^0,c
  5024  0010FC  EF82  F008         	goto	u2881
  5025  001100  EF85  F008         	goto	u2880
  5026  001104                     u2881:
  5027  001104  FFFF               	dw	65535	; assembler added errata NOP
  5028  001106  EF6B  F008         	goto	l3670
  5029  00110A                     u2880:
  5030  00110A                     l1262:
  5031  00110A  FFFF               	dw	65535	; assembler added errata NOP
  5032  00110C  B01B               	btfsc	___xxtofl@exp^0,0,c
  5033  00110E  EF8B  F008         	goto	u2891
  5034  001112  EF8E  F008         	goto	u2890
  5035  001116                     u2891:
  5036  001116  FFFF               	dw	65535	; assembler added errata NOP
  5037  001118  EF90  F008         	goto	l3678
  5038  00111C                     u2890:
  5039  00111C  FFFF               	dw	65535	; assembler added errata NOP
  5040  00111E  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  5041  001120                     l3678:
  5042  001120  FFFF               	dw	65535	; assembler added errata NOP
  5043  001122  90D8               	bcf	status,0,c
  5044  001124  321B               	rrcf	___xxtofl@exp^0,f,c
  5045  001126  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  5046  00112A  6A17               	clrf	(??___xxtofl+1)^0,c
  5047  00112C  6A18               	clrf	(??___xxtofl+2)^0,c
  5048  00112E  6A19               	clrf	(??___xxtofl+3)^0,c
  5049  001130  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  5050  001134  6A18               	clrf	(??___xxtofl+2)^0,c
  5051  001136  6A17               	clrf	(??___xxtofl+1)^0,c
  5052  001138  6A16               	clrf	??___xxtofl^0,c
  5053  00113A  5016               	movf	??___xxtofl^0,w,c
  5054  00113C  121C               	iorwf	___xxtofl@arg^0,f,c
  5055  00113E  5017               	movf	(??___xxtofl+1)^0,w,c
  5056  001140  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  5057  001142  5018               	movf	(??___xxtofl+2)^0,w,c
  5058  001144  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  5059  001146  5019               	movf	(??___xxtofl+3)^0,w,c
  5060  001148  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  5061  00114A  501A               	movf	___xxtofl@sign^0,w,c
  5062  00114C  B4D8               	btfsc	status,2,c
  5063  00114E  EFAB  F008         	goto	u2901
  5064  001152  EFAE  F008         	goto	u2900
  5065  001156                     u2901:
  5066  001156  FFFF               	dw	65535	; assembler added errata NOP
  5067  001158  EFB9  F008         	goto	l3688
  5068  00115C                     u2900:
  5069  00115C  FFFF               	dw	65535	; assembler added errata NOP
  5070  00115E  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  5071  001160  EFB7  F008         	goto	u2910
  5072  001164  EFB4  F008         	goto	u2911
  5073  001168                     u2911:
  5074  001168  FFFF               	dw	65535	; assembler added errata NOP
  5075  00116A  EFB9  F008         	goto	l3688
  5076  00116E                     u2910:
  5077  00116E  FFFF               	dw	65535	; assembler added errata NOP
  5078  001170  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  5079  001172                     l3688:
  5080  001172  FFFF               	dw	65535	; assembler added errata NOP
  5081  001174  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  5082  001178  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  5083  00117C  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  5084  001180  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  5085  001184                     l1251:
  5086  001184  FFFF               	dw	65535	; assembler added errata NOP
  5087  001186  0012               	return		;funcret
  5088  001188  FFFF               	dw	65535	; errata NOP
  5089  00118A                     __end_of___xxtofl:
  5090                           	callstack 0
  5091                           
  5092 ;; *************** function ___fltol *****************
  5093 ;; Defined at:
  5094 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  5095 ;; Parameters:    Size  Location     Type
  5096 ;;  f1              4   56[COMRAM] unsigned char 
  5097 ;; Auto vars:     Size  Location     Type
  5098 ;;  exp1            1   65[COMRAM] unsigned char 
  5099 ;;  sign1           1   64[COMRAM] unsigned char 
  5100 ;; Return value:  Size  Location     Type
  5101 ;;                  4   56[COMRAM] long 
  5102 ;; Registers used:
  5103 ;;		wreg, status,2, status,0
  5104 ;; Tracked objects:
  5105 ;;		On entry : 0/0
  5106 ;;		On exit  : 0/0
  5107 ;;		Unchanged: 0/0
  5108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5109 ;;      Params:         4       0       0       0       0       0       0
  5110 ;;      Locals:         2       0       0       0       0       0       0
  5111 ;;      Temps:          4       0       0       0       0       0       0
  5112 ;;      Totals:        10       0       0       0       0       0       0
  5113 ;;Total ram usage:       10 bytes
  5114 ;; Hardware stack levels used:    1
  5115 ;; Hardware stack levels required when called:    4
  5116 ;; This function calls:
  5117 ;;		Nothing
  5118 ;; This function is called by:
  5119 ;;		_rotateObj
  5120 ;; This function uses a non-reentrant model
  5121 ;;
  5122                           
  5123                           	psect	text32
  5124  0017D8                     __ptext32:
  5125                           	callstack 0
  5126  0017D8                     ___fltol:
  5127                           	callstack 0
  5128  0017D8  FFFF               	dw	65535	; assembler added errata NOP
  5129  0017DA  343B               	rlcf	(___fltol@f1+2)^0,w,c
  5130  0017DC  343C               	rlcf	(___fltol@f1+3)^0,w,c
  5131  0017DE  6E42               	movwf	___fltol@exp1^0,c
  5132  0017E0  5042               	movf	___fltol@exp1^0,w,c
  5133  0017E2  A4D8               	btfss	status,2,c
  5134  0017E4  EFF6  F00B         	goto	u2751
  5135  0017E8  EFF9  F00B         	goto	u2750
  5136  0017EC                     u2751:
  5137  0017EC  FFFF               	dw	65535	; assembler added errata NOP
  5138  0017EE  EF05  F00C         	goto	l3608
  5139  0017F2                     u2750:
  5140  0017F2  FFFF               	dw	65535	; assembler added errata NOP
  5141  0017F4                     l3604:
  5142  0017F4  FFFF               	dw	65535	; assembler added errata NOP
  5143  0017F6  0E00               	movlw	0
  5144  0017F8  6E39               	movwf	?___fltol^0,c
  5145  0017FA  0E00               	movlw	0
  5146  0017FC  6E3A               	movwf	(?___fltol+1)^0,c
  5147  0017FE  0E00               	movlw	0
  5148  001800  6E3B               	movwf	(?___fltol+2)^0,c
  5149  001802  0E00               	movlw	0
  5150  001804  6E3C               	movwf	(?___fltol+3)^0,c
  5151  001806  EF84  F00C         	goto	l890
  5152  00180A                     l3608:
  5153  00180A  FFFF               	dw	65535	; assembler added errata NOP
  5154  00180C  C039  F03D         	movff	___fltol@f1,??___fltol
  5155  001810  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  5156  001814  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  5157  001818  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  5158  00181C  0E20               	movlw	32
  5159  00181E  EF17  F00C         	goto	u2760
  5160  001822                     u2765:
  5161  001822  FFFF               	dw	65535	; assembler added errata NOP
  5162  001824  90D8               	bcf	status,0,c
  5163  001826  3240               	rrcf	(??___fltol+3)^0,f,c
  5164  001828  323F               	rrcf	(??___fltol+2)^0,f,c
  5165  00182A  323E               	rrcf	(??___fltol+1)^0,f,c
  5166  00182C  323D               	rrcf	??___fltol^0,f,c
  5167  00182E                     u2760:
  5168  00182E  FFFF               	dw	65535	; assembler added errata NOP
  5169  001830  2EE8               	decfsz	wreg,f,c
  5170  001832  EF11  F00C         	goto	u2765
  5171  001836  503D               	movf	??___fltol^0,w,c
  5172  001838  6E41               	movwf	___fltol@sign1^0,c
  5173  00183A  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  5174  00183C  0EFF               	movlw	255
  5175  00183E  1639               	andwf	___fltol@f1^0,f,c
  5176  001840  0EFF               	movlw	255
  5177  001842  163A               	andwf	(___fltol@f1+1)^0,f,c
  5178  001844  0EFF               	movlw	255
  5179  001846  163B               	andwf	(___fltol@f1+2)^0,f,c
  5180  001848  0E00               	movlw	0
  5181  00184A  163C               	andwf	(___fltol@f1+3)^0,f,c
  5182  00184C  0E96               	movlw	150
  5183  00184E  5E42               	subwf	___fltol@exp1^0,f,c
  5184  001850  BE42               	btfsc	___fltol@exp1^0,7,c
  5185  001852  EF30  F00C         	goto	u2770
  5186  001856  EF2D  F00C         	goto	u2771
  5187  00185A                     u2771:
  5188  00185A  FFFF               	dw	65535	; assembler added errata NOP
  5189  00185C  EF4A  F00C         	goto	l3628
  5190  001860                     u2770:
  5191  001860  FFFF               	dw	65535	; assembler added errata NOP
  5192  001862  5042               	movf	___fltol@exp1^0,w,c
  5193  001864  0A80               	xorlw	128
  5194  001866  0F97               	addlw	151
  5195  001868  B0D8               	btfsc	status,0,c
  5196  00186A  EF39  F00C         	goto	u2781
  5197  00186E  EF3C  F00C         	goto	u2780
  5198  001872                     u2781:
  5199  001872  FFFF               	dw	65535	; assembler added errata NOP
  5200  001874  EF3F  F00C         	goto	l3624
  5201  001878                     u2780:
  5202  001878  FFFF               	dw	65535	; assembler added errata NOP
  5203  00187A  EFFA  F00B         	goto	l3604
  5204  00187E                     l3624:
  5205  00187E  FFFF               	dw	65535	; assembler added errata NOP
  5206  001880  90D8               	bcf	status,0,c
  5207  001882  323C               	rrcf	(___fltol@f1+3)^0,f,c
  5208  001884  323B               	rrcf	(___fltol@f1+2)^0,f,c
  5209  001886  323A               	rrcf	(___fltol@f1+1)^0,f,c
  5210  001888  3239               	rrcf	___fltol@f1^0,f,c
  5211  00188A  3E42               	incfsz	___fltol@exp1^0,f,c
  5212  00188C  EF3F  F00C         	goto	l3624
  5213  001890  EF68  F00C         	goto	l3638
  5214  001894                     l3628:
  5215  001894  FFFF               	dw	65535	; assembler added errata NOP
  5216  001896  0E1F               	movlw	31
  5217  001898  6442               	cpfsgt	___fltol@exp1^0,c
  5218  00189A  EF51  F00C         	goto	u2791
  5219  00189E  EF54  F00C         	goto	u2790
  5220  0018A2                     u2791:
  5221  0018A2  FFFF               	dw	65535	; assembler added errata NOP
  5222  0018A4  EF5E  F00C         	goto	l3636
  5223  0018A8                     u2790:
  5224  0018A8  FFFF               	dw	65535	; assembler added errata NOP
  5225  0018AA  EFFA  F00B         	goto	l3604
  5226  0018AE                     l3634:
  5227  0018AE  FFFF               	dw	65535	; assembler added errata NOP
  5228  0018B0  90D8               	bcf	status,0,c
  5229  0018B2  3639               	rlcf	___fltol@f1^0,f,c
  5230  0018B4  363A               	rlcf	(___fltol@f1+1)^0,f,c
  5231  0018B6  363B               	rlcf	(___fltol@f1+2)^0,f,c
  5232  0018B8  363C               	rlcf	(___fltol@f1+3)^0,f,c
  5233  0018BA  0642               	decf	___fltol@exp1^0,f,c
  5234  0018BC                     l3636:
  5235  0018BC  FFFF               	dw	65535	; assembler added errata NOP
  5236  0018BE  5042               	movf	___fltol@exp1^0,w,c
  5237  0018C0  A4D8               	btfss	status,2,c
  5238  0018C2  EF65  F00C         	goto	u2801
  5239  0018C6  EF68  F00C         	goto	u2800
  5240  0018CA                     u2801:
  5241  0018CA  FFFF               	dw	65535	; assembler added errata NOP
  5242  0018CC  EF57  F00C         	goto	l3634
  5243  0018D0                     u2800:
  5244  0018D0                     l3638:
  5245  0018D0  FFFF               	dw	65535	; assembler added errata NOP
  5246  0018D2  5041               	movf	___fltol@sign1^0,w,c
  5247  0018D4  B4D8               	btfsc	status,2,c
  5248  0018D6  EF6F  F00C         	goto	u2811
  5249  0018DA  EF72  F00C         	goto	u2810
  5250  0018DE                     u2811:
  5251  0018DE  FFFF               	dw	65535	; assembler added errata NOP
  5252  0018E0  EF7B  F00C         	goto	l3642
  5253  0018E4                     u2810:
  5254  0018E4  FFFF               	dw	65535	; assembler added errata NOP
  5255  0018E6  1E3C               	comf	(___fltol@f1+3)^0,f,c
  5256  0018E8  1E3B               	comf	(___fltol@f1+2)^0,f,c
  5257  0018EA  1E3A               	comf	(___fltol@f1+1)^0,f,c
  5258  0018EC  6C39               	negf	___fltol@f1^0,c
  5259  0018EE  0E00               	movlw	0
  5260  0018F0  223A               	addwfc	(___fltol@f1+1)^0,f,c
  5261  0018F2  223B               	addwfc	(___fltol@f1+2)^0,f,c
  5262  0018F4  223C               	addwfc	(___fltol@f1+3)^0,f,c
  5263  0018F6                     l3642:
  5264  0018F6  FFFF               	dw	65535	; assembler added errata NOP
  5265  0018F8  C039  F039         	movff	___fltol@f1,?___fltol
  5266  0018FC  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  5267  001900  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  5268  001904  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  5269  001908                     l890:
  5270  001908  FFFF               	dw	65535	; assembler added errata NOP
  5271  00190A  0012               	return		;funcret
  5272  00190C  FFFF               	dw	65535	; errata NOP
  5273  00190E                     __end_of___fltol:
  5274                           	callstack 0
  5275                           
  5276 ;; *************** function ___fldiv *****************
  5277 ;; Defined at:
  5278 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  5279 ;; Parameters:    Size  Location     Type
  5280 ;;  b               4   31[COMRAM] long 
  5281 ;;  a               4   35[COMRAM] long 
  5282 ;; Auto vars:     Size  Location     Type
  5283 ;;  grs             4   50[COMRAM] unsigned long 
  5284 ;;  rem             4   43[COMRAM] unsigned long 
  5285 ;;  new_exp         2   48[COMRAM] short 
  5286 ;;  aexp            1   55[COMRAM] unsigned char 
  5287 ;;  bexp            1   54[COMRAM] unsigned char 
  5288 ;;  sign            1   47[COMRAM] unsigned char 
  5289 ;; Return value:  Size  Location     Type
  5290 ;;                  4   31[COMRAM] unsigned char 
  5291 ;; Registers used:
  5292 ;;		wreg, status,2, status,0
  5293 ;; Tracked objects:
  5294 ;;		On entry : 0/0
  5295 ;;		On exit  : 0/0
  5296 ;;		Unchanged: 0/0
  5297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5298 ;;      Params:         8       0       0       0       0       0       0
  5299 ;;      Locals:        13       0       0       0       0       0       0
  5300 ;;      Temps:          4       0       0       0       0       0       0
  5301 ;;      Totals:        25       0       0       0       0       0       0
  5302 ;;Total ram usage:       25 bytes
  5303 ;; Hardware stack levels used:    1
  5304 ;; Hardware stack levels required when called:    4
  5305 ;; This function calls:
  5306 ;;		Nothing
  5307 ;; This function is called by:
  5308 ;;		_rotateObj
  5309 ;; This function uses a non-reentrant model
  5310 ;;
  5311                           
  5312                           	psect	text33
  5313  000610                     __ptext33:
  5314                           	callstack 0
  5315  000610                     ___fldiv:
  5316                           	callstack 0
  5317  000610  FFFF               	dw	65535	; assembler added errata NOP
  5318  000612  5023               	movf	(___fldiv@b+3)^0,w,c
  5319  000614  0B80               	andlw	128
  5320  000616  6E30               	movwf	___fldiv@sign^0,c
  5321  000618  5023               	movf	(___fldiv@b+3)^0,w,c
  5322  00061A  2423               	addwf	(___fldiv@b+3)^0,w,c
  5323  00061C  6E37               	movwf	___fldiv@bexp^0,c
  5324  00061E  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5325  000620  EF14  F003         	goto	u2521
  5326  000624  EF17  F003         	goto	u2520
  5327  000628                     u2521:
  5328  000628  FFFF               	dw	65535	; assembler added errata NOP
  5329  00062A  EF19  F003         	goto	l3470
  5330  00062E                     u2520:
  5331  00062E  FFFF               	dw	65535	; assembler added errata NOP
  5332  000630  8037               	bsf	___fldiv@bexp^0,0,c
  5333  000632                     l3470:
  5334  000632  FFFF               	dw	65535	; assembler added errata NOP
  5335  000634  5037               	movf	___fldiv@bexp^0,w,c
  5336  000636  B4D8               	btfsc	status,2,c
  5337  000638  EF20  F003         	goto	u2531
  5338  00063C  EF23  F003         	goto	u2530
  5339  000640                     u2531:
  5340  000640  FFFF               	dw	65535	; assembler added errata NOP
  5341  000642  EF3C  F003         	goto	l3480
  5342  000646                     u2530:
  5343  000646  FFFF               	dw	65535	; assembler added errata NOP
  5344  000648  2837               	incf	___fldiv@bexp^0,w,c
  5345  00064A  A4D8               	btfss	status,2,c
  5346  00064C  EF2A  F003         	goto	u2541
  5347  000650  EF2D  F003         	goto	u2540
  5348  000654                     u2541:
  5349  000654  FFFF               	dw	65535	; assembler added errata NOP
  5350  000656  EF36  F003         	goto	l3476
  5351  00065A                     u2540:
  5352  00065A  FFFF               	dw	65535	; assembler added errata NOP
  5353  00065C  0E00               	movlw	0
  5354  00065E  6E20               	movwf	___fldiv@b^0,c
  5355  000660  0E00               	movlw	0
  5356  000662  6E21               	movwf	(___fldiv@b+1)^0,c
  5357  000664  0E00               	movlw	0
  5358  000666  6E22               	movwf	(___fldiv@b+2)^0,c
  5359  000668  0E00               	movlw	0
  5360  00066A  6E23               	movwf	(___fldiv@b+3)^0,c
  5361  00066C                     l3476:
  5362  00066C  FFFF               	dw	65535	; assembler added errata NOP
  5363  00066E  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5364  000670  0E00               	movlw	0
  5365  000672  6E23               	movwf	(___fldiv@b+3)^0,c
  5366  000674  EF45  F003         	goto	l3482
  5367  000678                     l3480:
  5368  000678  FFFF               	dw	65535	; assembler added errata NOP
  5369  00067A  0E00               	movlw	0
  5370  00067C  6E20               	movwf	___fldiv@b^0,c
  5371  00067E  0E00               	movlw	0
  5372  000680  6E21               	movwf	(___fldiv@b+1)^0,c
  5373  000682  0E00               	movlw	0
  5374  000684  6E22               	movwf	(___fldiv@b+2)^0,c
  5375  000686  0E00               	movlw	0
  5376  000688  6E23               	movwf	(___fldiv@b+3)^0,c
  5377  00068A                     l3482:
  5378  00068A  FFFF               	dw	65535	; assembler added errata NOP
  5379  00068C  5027               	movf	(___fldiv@a+3)^0,w,c
  5380  00068E  0B80               	andlw	128
  5381  000690  1A30               	xorwf	___fldiv@sign^0,f,c
  5382  000692  5027               	movf	(___fldiv@a+3)^0,w,c
  5383  000694  2427               	addwf	(___fldiv@a+3)^0,w,c
  5384  000696  6E38               	movwf	___fldiv@aexp^0,c
  5385  000698  AE26               	btfss	(___fldiv@a+2)^0,7,c
  5386  00069A  EF51  F003         	goto	u2551
  5387  00069E  EF54  F003         	goto	u2550
  5388  0006A2                     u2551:
  5389  0006A2  FFFF               	dw	65535	; assembler added errata NOP
  5390  0006A4  EF56  F003         	goto	l3490
  5391  0006A8                     u2550:
  5392  0006A8  FFFF               	dw	65535	; assembler added errata NOP
  5393  0006AA  8038               	bsf	___fldiv@aexp^0,0,c
  5394  0006AC                     l3490:
  5395  0006AC  FFFF               	dw	65535	; assembler added errata NOP
  5396  0006AE  5038               	movf	___fldiv@aexp^0,w,c
  5397  0006B0  B4D8               	btfsc	status,2,c
  5398  0006B2  EF5D  F003         	goto	u2561
  5399  0006B6  EF60  F003         	goto	u2560
  5400  0006BA                     u2561:
  5401  0006BA  FFFF               	dw	65535	; assembler added errata NOP
  5402  0006BC  EF79  F003         	goto	l3500
  5403  0006C0                     u2560:
  5404  0006C0  FFFF               	dw	65535	; assembler added errata NOP
  5405  0006C2  2838               	incf	___fldiv@aexp^0,w,c
  5406  0006C4  A4D8               	btfss	status,2,c
  5407  0006C6  EF67  F003         	goto	u2571
  5408  0006CA  EF6A  F003         	goto	u2570
  5409  0006CE                     u2571:
  5410  0006CE  FFFF               	dw	65535	; assembler added errata NOP
  5411  0006D0  EF73  F003         	goto	l3496
  5412  0006D4                     u2570:
  5413  0006D4  FFFF               	dw	65535	; assembler added errata NOP
  5414  0006D6  0E00               	movlw	0
  5415  0006D8  6E24               	movwf	___fldiv@a^0,c
  5416  0006DA  0E00               	movlw	0
  5417  0006DC  6E25               	movwf	(___fldiv@a+1)^0,c
  5418  0006DE  0E00               	movlw	0
  5419  0006E0  6E26               	movwf	(___fldiv@a+2)^0,c
  5420  0006E2  0E00               	movlw	0
  5421  0006E4  6E27               	movwf	(___fldiv@a+3)^0,c
  5422  0006E6                     l3496:
  5423  0006E6  FFFF               	dw	65535	; assembler added errata NOP
  5424  0006E8  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5425  0006EA  0E00               	movlw	0
  5426  0006EC  6E27               	movwf	(___fldiv@a+3)^0,c
  5427  0006EE  EF82  F003         	goto	l3502
  5428  0006F2                     l3500:
  5429  0006F2  FFFF               	dw	65535	; assembler added errata NOP
  5430  0006F4  0E00               	movlw	0
  5431  0006F6  6E24               	movwf	___fldiv@a^0,c
  5432  0006F8  0E00               	movlw	0
  5433  0006FA  6E25               	movwf	(___fldiv@a+1)^0,c
  5434  0006FC  0E00               	movlw	0
  5435  0006FE  6E26               	movwf	(___fldiv@a+2)^0,c
  5436  000700  0E00               	movlw	0
  5437  000702  6E27               	movwf	(___fldiv@a+3)^0,c
  5438  000704                     l3502:
  5439  000704  FFFF               	dw	65535	; assembler added errata NOP
  5440  000706  5024               	movf	___fldiv@a^0,w,c
  5441  000708  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5442  00070A  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5443  00070C  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5444  00070E  A4D8               	btfss	status,2,c
  5445  000710  EF8C  F003         	goto	u2581
  5446  000714  EF8F  F003         	goto	u2580
  5447  000718                     u2581:
  5448  000718  FFFF               	dw	65535	; assembler added errata NOP
  5449  00071A  EFA9  F003         	goto	l3514
  5450  00071E                     u2580:
  5451  00071E  FFFF               	dw	65535	; assembler added errata NOP
  5452  000720  0E00               	movlw	0
  5453  000722  6E20               	movwf	___fldiv@b^0,c
  5454  000724  0E00               	movlw	0
  5455  000726  6E21               	movwf	(___fldiv@b+1)^0,c
  5456  000728  0E00               	movlw	0
  5457  00072A  6E22               	movwf	(___fldiv@b+2)^0,c
  5458  00072C  0E00               	movlw	0
  5459  00072E  6E23               	movwf	(___fldiv@b+3)^0,c
  5460  000730  0E80               	movlw	128
  5461  000732  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5462  000734  0E7F               	movlw	127
  5463  000736  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5464  000738                     l3508:
  5465  000738  FFFF               	dw	65535	; assembler added errata NOP
  5466  00073A  5030               	movf	___fldiv@sign^0,w,c
  5467  00073C  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5468  00073E  C020  F020         	movff	___fldiv@b,?___fldiv
  5469  000742  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5470  000746  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5471  00074A  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5472  00074E  EF1E  F005         	goto	l1175
  5473  000752                     l3514:
  5474  000752  FFFF               	dw	65535	; assembler added errata NOP
  5475  000754  5037               	movf	___fldiv@bexp^0,w,c
  5476  000756  A4D8               	btfss	status,2,c
  5477  000758  EFB0  F003         	goto	u2591
  5478  00075C  EFB3  F003         	goto	u2590
  5479  000760                     u2591:
  5480  000760  FFFF               	dw	65535	; assembler added errata NOP
  5481  000762  EFBE  F003         	goto	l3522
  5482  000766                     u2590:
  5483  000766  FFFF               	dw	65535	; assembler added errata NOP
  5484  000768  0E00               	movlw	0
  5485  00076A  6E20               	movwf	?___fldiv^0,c
  5486  00076C  0E00               	movlw	0
  5487  00076E  6E21               	movwf	(?___fldiv+1)^0,c
  5488  000770  0E00               	movlw	0
  5489  000772  6E22               	movwf	(?___fldiv+2)^0,c
  5490  000774  0E00               	movlw	0
  5491  000776  6E23               	movwf	(?___fldiv+3)^0,c
  5492  000778  EF1E  F005         	goto	l1175
  5493  00077C                     l3522:
  5494  00077C  FFFF               	dw	65535	; assembler added errata NOP
  5495  00077E  5038               	movf	___fldiv@aexp^0,w,c
  5496  000780  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5497  000784  6A29               	clrf	(??___fldiv+1)^0,c
  5498  000786  5E28               	subwf	??___fldiv^0,f,c
  5499  000788  0E00               	movlw	0
  5500  00078A  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5501  00078C  0E7F               	movlw	127
  5502  00078E  2428               	addwf	??___fldiv^0,w,c
  5503  000790  6E31               	movwf	___fldiv@new_exp^0,c
  5504  000792  0E00               	movlw	0
  5505  000794  2029               	addwfc	(??___fldiv+1)^0,w,c
  5506  000796  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5507  000798  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5508  00079C  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5509  0007A0  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5510  0007A4  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5511  0007A8  0E00               	movlw	0
  5512  0007AA  6E20               	movwf	___fldiv@b^0,c
  5513  0007AC  0E00               	movlw	0
  5514  0007AE  6E21               	movwf	(___fldiv@b+1)^0,c
  5515  0007B0  0E00               	movlw	0
  5516  0007B2  6E22               	movwf	(___fldiv@b+2)^0,c
  5517  0007B4  0E00               	movlw	0
  5518  0007B6  6E23               	movwf	(___fldiv@b+3)^0,c
  5519  0007B8  0E00               	movlw	0
  5520  0007BA  6E33               	movwf	___fldiv@grs^0,c
  5521  0007BC  0E00               	movlw	0
  5522  0007BE  6E34               	movwf	(___fldiv@grs+1)^0,c
  5523  0007C0  0E00               	movlw	0
  5524  0007C2  6E35               	movwf	(___fldiv@grs+2)^0,c
  5525  0007C4  0E00               	movlw	0
  5526  0007C6  6E36               	movwf	(___fldiv@grs+3)^0,c
  5527  0007C8  0E00               	movlw	0
  5528  0007CA  6E38               	movwf	___fldiv@aexp^0,c
  5529  0007CC  EF2A  F004         	goto	l1177
  5530  0007D0                     l3532:
  5531  0007D0  FFFF               	dw	65535	; assembler added errata NOP
  5532  0007D2  5038               	movf	___fldiv@aexp^0,w,c
  5533  0007D4  B4D8               	btfsc	status,2,c
  5534  0007D6  EFEF  F003         	goto	u2601
  5535  0007DA  EFF2  F003         	goto	u2600
  5536  0007DE                     u2601:
  5537  0007DE  FFFF               	dw	65535	; assembler added errata NOP
  5538  0007E0  EF0D  F004         	goto	l3540
  5539  0007E4                     u2600:
  5540  0007E4  FFFF               	dw	65535	; assembler added errata NOP
  5541  0007E6  90D8               	bcf	status,0,c
  5542  0007E8  362C               	rlcf	___fldiv@rem^0,f,c
  5543  0007EA  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5544  0007EC  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5545  0007EE  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5546  0007F0  90D8               	bcf	status,0,c
  5547  0007F2  3620               	rlcf	___fldiv@b^0,f,c
  5548  0007F4  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5549  0007F6  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5550  0007F8  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5551  0007FA  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5552  0007FC  EF02  F004         	goto	u2611
  5553  000800  EF05  F004         	goto	u2610
  5554  000804                     u2611:
  5555  000804  FFFF               	dw	65535	; assembler added errata NOP
  5556  000806  EF07  F004         	goto	l1180
  5557  00080A                     u2610:
  5558  00080A  FFFF               	dw	65535	; assembler added errata NOP
  5559  00080C  8020               	bsf	___fldiv@b^0,0,c
  5560  00080E                     l1180:
  5561  00080E  FFFF               	dw	65535	; assembler added errata NOP
  5562  000810  90D8               	bcf	status,0,c
  5563  000812  3633               	rlcf	___fldiv@grs^0,f,c
  5564  000814  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5565  000816  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5566  000818  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5567  00081A                     l3540:
  5568  00081A  FFFF               	dw	65535	; assembler added errata NOP
  5569  00081C  5024               	movf	___fldiv@a^0,w,c
  5570  00081E  5C2C               	subwf	___fldiv@rem^0,w,c
  5571  000820  5025               	movf	(___fldiv@a+1)^0,w,c
  5572  000822  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5573  000824  5026               	movf	(___fldiv@a+2)^0,w,c
  5574  000826  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5575  000828  5027               	movf	(___fldiv@a+3)^0,w,c
  5576  00082A  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5577  00082C  A0D8               	btfss	status,0,c
  5578  00082E  EF1B  F004         	goto	u2621
  5579  000832  EF1E  F004         	goto	u2620
  5580  000836                     u2621:
  5581  000836  FFFF               	dw	65535	; assembler added errata NOP
  5582  000838  EF28  F004         	goto	l3546
  5583  00083C                     u2620:
  5584  00083C  FFFF               	dw	65535	; assembler added errata NOP
  5585  00083E  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5586  000840  5024               	movf	___fldiv@a^0,w,c
  5587  000842  5E2C               	subwf	___fldiv@rem^0,f,c
  5588  000844  5025               	movf	(___fldiv@a+1)^0,w,c
  5589  000846  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5590  000848  5026               	movf	(___fldiv@a+2)^0,w,c
  5591  00084A  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5592  00084C  5027               	movf	(___fldiv@a+3)^0,w,c
  5593  00084E  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5594  000850                     l3546:
  5595  000850  FFFF               	dw	65535	; assembler added errata NOP
  5596  000852  2A38               	incf	___fldiv@aexp^0,f,c
  5597  000854                     l1177:
  5598  000854  FFFF               	dw	65535	; assembler added errata NOP
  5599  000856  0E19               	movlw	25
  5600  000858  6438               	cpfsgt	___fldiv@aexp^0,c
  5601  00085A  EF31  F004         	goto	u2631
  5602  00085E  EF34  F004         	goto	u2630
  5603  000862                     u2631:
  5604  000862  FFFF               	dw	65535	; assembler added errata NOP
  5605  000864  EFE8  F003         	goto	l3532
  5606  000868                     u2630:
  5607  000868  FFFF               	dw	65535	; assembler added errata NOP
  5608  00086A  502C               	movf	___fldiv@rem^0,w,c
  5609  00086C  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5610  00086E  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5611  000870  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5612  000872  B4D8               	btfsc	status,2,c
  5613  000874  EF3E  F004         	goto	u2641
  5614  000878  EF41  F004         	goto	u2640
  5615  00087C                     u2641:
  5616  00087C  FFFF               	dw	65535	; assembler added errata NOP
  5617  00087E  EF5E  F004         	goto	l3558
  5618  000882                     u2640:
  5619  000882  FFFF               	dw	65535	; assembler added errata NOP
  5620  000884  8033               	bsf	___fldiv@grs^0,0,c
  5621  000886  EF5E  F004         	goto	l3558
  5622  00088A                     l3552:
  5623  00088A  FFFF               	dw	65535	; assembler added errata NOP
  5624  00088C  90D8               	bcf	status,0,c
  5625  00088E  3620               	rlcf	___fldiv@b^0,f,c
  5626  000890  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5627  000892  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5628  000894  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5629  000896  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5630  000898  EF50  F004         	goto	u2651
  5631  00089C  EF53  F004         	goto	u2650
  5632  0008A0                     u2651:
  5633  0008A0  FFFF               	dw	65535	; assembler added errata NOP
  5634  0008A2  EF55  F004         	goto	l1186
  5635  0008A6                     u2650:
  5636  0008A6  FFFF               	dw	65535	; assembler added errata NOP
  5637  0008A8  8020               	bsf	___fldiv@b^0,0,c
  5638  0008AA                     l1186:
  5639  0008AA  FFFF               	dw	65535	; assembler added errata NOP
  5640  0008AC  90D8               	bcf	status,0,c
  5641  0008AE  3633               	rlcf	___fldiv@grs^0,f,c
  5642  0008B0  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5643  0008B2  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5644  0008B4  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5645  0008B6  0631               	decf	___fldiv@new_exp^0,f,c
  5646  0008B8  A0D8               	btfss	status,0,c
  5647  0008BA  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5648  0008BC                     l3558:
  5649  0008BC  FFFF               	dw	65535	; assembler added errata NOP
  5650  0008BE  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5651  0008C0  EF64  F004         	goto	u2661
  5652  0008C4  EF67  F004         	goto	u2660
  5653  0008C8                     u2661:
  5654  0008C8  FFFF               	dw	65535	; assembler added errata NOP
  5655  0008CA  EF45  F004         	goto	l3552
  5656  0008CE                     u2660:
  5657  0008CE  FFFF               	dw	65535	; assembler added errata NOP
  5658  0008D0  0E00               	movlw	0
  5659  0008D2  6E38               	movwf	___fldiv@aexp^0,c
  5660  0008D4  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5661  0008D6  EF6F  F004         	goto	u2671
  5662  0008DA  EF72  F004         	goto	u2670
  5663  0008DE                     u2671:
  5664  0008DE  FFFF               	dw	65535	; assembler added errata NOP
  5665  0008E0  EF9D  F004         	goto	l1188
  5666  0008E4                     u2670:
  5667  0008E4  FFFF               	dw	65535	; assembler added errata NOP
  5668  0008E6  0EFF               	movlw	255
  5669  0008E8  1433               	andwf	___fldiv@grs^0,w,c
  5670  0008EA  6E28               	movwf	??___fldiv^0,c
  5671  0008EC  0EFF               	movlw	255
  5672  0008EE  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5673  0008F0  6E29               	movwf	(??___fldiv+1)^0,c
  5674  0008F2  0EFF               	movlw	255
  5675  0008F4  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5676  0008F6  6E2A               	movwf	(??___fldiv+2)^0,c
  5677  0008F8  0E7F               	movlw	127
  5678  0008FA  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5679  0008FC  6E2B               	movwf	(??___fldiv+3)^0,c
  5680  0008FE  5028               	movf	??___fldiv^0,w,c
  5681  000900  1029               	iorwf	(??___fldiv+1)^0,w,c
  5682  000902  102A               	iorwf	(??___fldiv+2)^0,w,c
  5683  000904  102B               	iorwf	(??___fldiv+3)^0,w,c
  5684  000906  B4D8               	btfsc	status,2,c
  5685  000908  EF88  F004         	goto	u2681
  5686  00090C  EF8B  F004         	goto	u2680
  5687  000910                     u2681:
  5688  000910  FFFF               	dw	65535	; assembler added errata NOP
  5689  000912  EF91  F004         	goto	l1189
  5690  000916                     u2680:
  5691  000916  FFFF               	dw	65535	; assembler added errata NOP
  5692  000918                     l3566:
  5693  000918  FFFF               	dw	65535	; assembler added errata NOP
  5694  00091A  0E01               	movlw	1
  5695  00091C  6E38               	movwf	___fldiv@aexp^0,c
  5696  00091E  EF9D  F004         	goto	l1188
  5697  000922                     l1189:
  5698  000922  FFFF               	dw	65535	; assembler added errata NOP
  5699  000924  A020               	btfss	___fldiv@b^0,0,c
  5700  000926  EF97  F004         	goto	u2691
  5701  00092A  EF9A  F004         	goto	u2690
  5702  00092E                     u2691:
  5703  00092E  FFFF               	dw	65535	; assembler added errata NOP
  5704  000930  EF9D  F004         	goto	l1188
  5705  000934                     u2690:
  5706  000934  FFFF               	dw	65535	; assembler added errata NOP
  5707  000936  EF8C  F004         	goto	l3566
  5708  00093A                     l1188:
  5709  00093A  FFFF               	dw	65535	; assembler added errata NOP
  5710  00093C  5038               	movf	___fldiv@aexp^0,w,c
  5711  00093E  B4D8               	btfsc	status,2,c
  5712  000940  EFA4  F004         	goto	u2701
  5713  000944  EFA7  F004         	goto	u2700
  5714  000948                     u2701:
  5715  000948  FFFF               	dw	65535	; assembler added errata NOP
  5716  00094A  EFCE  F004         	goto	l3578
  5717  00094E                     u2700:
  5718  00094E  FFFF               	dw	65535	; assembler added errata NOP
  5719  000950  0E01               	movlw	1
  5720  000952  2620               	addwf	___fldiv@b^0,f,c
  5721  000954  0E00               	movlw	0
  5722  000956  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5723  000958  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5724  00095A  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5725  00095C  A023               	btfss	(___fldiv@b+3)^0,0,c
  5726  00095E  EFB3  F004         	goto	u2711
  5727  000962  EFB6  F004         	goto	u2710
  5728  000966                     u2711:
  5729  000966  FFFF               	dw	65535	; assembler added errata NOP
  5730  000968  EFCE  F004         	goto	l3578
  5731  00096C                     u2710:
  5732  00096C  FFFF               	dw	65535	; assembler added errata NOP
  5733  00096E  C020  F028         	movff	___fldiv@b,??___fldiv
  5734  000972  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5735  000976  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5736  00097A  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5737  00097E  342B               	rlcf	(??___fldiv+3)^0,w,c
  5738  000980  322B               	rrcf	(??___fldiv+3)^0,f,c
  5739  000982  322A               	rrcf	(??___fldiv+2)^0,f,c
  5740  000984  3229               	rrcf	(??___fldiv+1)^0,f,c
  5741  000986  3228               	rrcf	??___fldiv^0,f,c
  5742  000988  C028  F020         	movff	??___fldiv,___fldiv@b
  5743  00098C  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5744  000990  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5745  000994  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5746  000998  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5747  00099A  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5748  00099C                     l3578:
  5749  00099C  FFFF               	dw	65535	; assembler added errata NOP
  5750  00099E  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5751  0009A0  EFDA  F004         	goto	u2721
  5752  0009A4  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5753  0009A6  E109               	bnz	u2720
  5754  0009A8  2831               	incf	___fldiv@new_exp^0,w,c
  5755  0009AA  A0D8               	btfss	status,0,c
  5756  0009AC  EFDA  F004         	goto	u2721
  5757  0009B0  EFDD  F004         	goto	u2720
  5758  0009B4                     u2721:
  5759  0009B4  FFFF               	dw	65535	; assembler added errata NOP
  5760  0009B6  EFE9  F004         	goto	l3582
  5761  0009BA                     u2720:
  5762  0009BA  FFFF               	dw	65535	; assembler added errata NOP
  5763  0009BC  0E00               	movlw	0
  5764  0009BE  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5765  0009C0  6831               	setf	___fldiv@new_exp^0,c
  5766  0009C2  0E00               	movlw	0
  5767  0009C4  6E20               	movwf	___fldiv@b^0,c
  5768  0009C6  0E00               	movlw	0
  5769  0009C8  6E21               	movwf	(___fldiv@b+1)^0,c
  5770  0009CA  0E00               	movlw	0
  5771  0009CC  6E22               	movwf	(___fldiv@b+2)^0,c
  5772  0009CE  0E00               	movlw	0
  5773  0009D0  6E23               	movwf	(___fldiv@b+3)^0,c
  5774  0009D2                     l3582:
  5775  0009D2  FFFF               	dw	65535	; assembler added errata NOP
  5776  0009D4  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5777  0009D6  EFF8  F004         	goto	u2730
  5778  0009DA  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5779  0009DC  E106               	bnz	u2731
  5780  0009DE  0431               	decf	___fldiv@new_exp^0,w,c
  5781  0009E0  B0D8               	btfsc	status,0,c
  5782  0009E2  EFF5  F004         	goto	u2731
  5783  0009E6  EFF8  F004         	goto	u2730
  5784  0009EA                     u2731:
  5785  0009EA  FFFF               	dw	65535	; assembler added errata NOP
  5786  0009EC  EF07  F005         	goto	l3586
  5787  0009F0                     u2730:
  5788  0009F0  FFFF               	dw	65535	; assembler added errata NOP
  5789  0009F2  0E00               	movlw	0
  5790  0009F4  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5791  0009F6  0E00               	movlw	0
  5792  0009F8  6E31               	movwf	___fldiv@new_exp^0,c
  5793  0009FA  0E00               	movlw	0
  5794  0009FC  6E20               	movwf	___fldiv@b^0,c
  5795  0009FE  0E00               	movlw	0
  5796  000A00  6E21               	movwf	(___fldiv@b+1)^0,c
  5797  000A02  0E00               	movlw	0
  5798  000A04  6E22               	movwf	(___fldiv@b+2)^0,c
  5799  000A06  0E00               	movlw	0
  5800  000A08  6E23               	movwf	(___fldiv@b+3)^0,c
  5801  000A0A  0E00               	movlw	0
  5802  000A0C  6E30               	movwf	___fldiv@sign^0,c
  5803  000A0E                     l3586:
  5804  000A0E  FFFF               	dw	65535	; assembler added errata NOP
  5805  000A10  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5806  000A14  A037               	btfss	___fldiv@bexp^0,0,c
  5807  000A16  EF0F  F005         	goto	u2741
  5808  000A1A  EF12  F005         	goto	u2740
  5809  000A1E                     u2741:
  5810  000A1E  FFFF               	dw	65535	; assembler added errata NOP
  5811  000A20  EF16  F005         	goto	l3592
  5812  000A24                     u2740:
  5813  000A24  FFFF               	dw	65535	; assembler added errata NOP
  5814  000A26  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5815  000A28  EF18  F005         	goto	l3594
  5816  000A2C                     l3592:
  5817  000A2C  FFFF               	dw	65535	; assembler added errata NOP
  5818  000A2E  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5819  000A30                     l3594:
  5820  000A30  FFFF               	dw	65535	; assembler added errata NOP
  5821  000A32  90D8               	bcf	status,0,c
  5822  000A34  3037               	rrcf	___fldiv@bexp^0,w,c
  5823  000A36  6E23               	movwf	(___fldiv@b+3)^0,c
  5824  000A38  EF9C  F003         	goto	l3508
  5825  000A3C                     l1175:
  5826  000A3C  FFFF               	dw	65535	; assembler added errata NOP
  5827  000A3E  0012               	return		;funcret
  5828  000A40  FFFF               	dw	65535	; errata NOP
  5829  000A42                     __end_of___fldiv:
  5830                           	callstack 0
  5831                           
  5832 ;; *************** function _releaseObj *****************
  5833 ;; Defined at:
  5834 ;;		line 614 in file "motors.c"
  5835 ;; Parameters:    Size  Location     Type
  5836 ;;		None
  5837 ;; Auto vars:     Size  Location     Type
  5838 ;;		None
  5839 ;; Return value:  Size  Location     Type
  5840 ;;                  1    wreg      void 
  5841 ;; Registers used:
  5842 ;;		wreg, status,2, status,0, cstack
  5843 ;; Tracked objects:
  5844 ;;		On entry : 0/0
  5845 ;;		On exit  : 0/0
  5846 ;;		Unchanged: 0/0
  5847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5848 ;;      Params:         0       0       0       0       0       0       0
  5849 ;;      Locals:         0       0       0       0       0       0       0
  5850 ;;      Temps:          0       0       0       0       0       0       0
  5851 ;;      Totals:         0       0       0       0       0       0       0
  5852 ;;Total ram usage:        0 bytes
  5853 ;; Hardware stack levels used:    1
  5854 ;; Hardware stack levels required when called:    5
  5855 ;; This function calls:
  5856 ;;		_stepMade
  5857 ;; This function is called by:
  5858 ;;		_executeData
  5859 ;; This function uses a non-reentrant model
  5860 ;;
  5861                           
  5862                           	psect	text34
  5863  0023CE                     __ptext34:
  5864                           	callstack 0
  5865  0023CE                     _releaseObj:
  5866                           	callstack 0
  5867  0023CE  FFFF               	dw	65535	; assembler added errata NOP
  5868  0023D0                     
  5869                           ;motors.c: 615:     LATDbits.LATD1 = 0;
  5870  0023D0  928C               	bcf	140,1,c	;volatile
  5871                           
  5872                           ;motors.c: 619:     T2CONbits.TMR2ON = 1;
  5873  0023D2  84CA               	bsf	202,2,c	;volatile
  5874  0023D4                     l3964:
  5875  0023D4  FFFF               	dw	65535	; assembler added errata NOP
  5876  0023D6  EC52  F012         	call	_stepMade	;wreg free
  5877  0023DA  5012               	movf	?_stepMade^0,w,c
  5878  0023DC  1013               	iorwf	(?_stepMade+1)^0,w,c
  5879  0023DE  B4D8               	btfsc	status,2,c
  5880  0023E0  EFF4  F011         	goto	u3341
  5881  0023E4  EFF7  F011         	goto	u3340
  5882  0023E8                     u3341:
  5883  0023E8  FFFF               	dw	65535	; assembler added errata NOP
  5884  0023EA  EFEA  F011         	goto	l3964
  5885  0023EE                     u3340:
  5886  0023EE  FFFF               	dw	65535	; assembler added errata NOP
  5887  0023F0                     
  5888                           ;motors.c: 621:     T2CONbits.TMR2ON = 1;
  5889  0023F0  84CA               	bsf	202,2,c	;volatile
  5890  0023F2                     
  5891                           ;motors.c: 622:     TMR2 = 0;
  5892  0023F2  0E00               	movlw	0
  5893  0023F4  6ECC               	movwf	204,c	;volatile
  5894  0023F6  0012               	return		;funcret
  5895  0023F8  FFFF               	dw	65535	; errata NOP
  5896  0023FA                     __end_of_releaseObj:
  5897                           	callstack 0
  5898                           
  5899 ;; *************** function _pickObject *****************
  5900 ;; Defined at:
  5901 ;;		line 600 in file "motors.c"
  5902 ;; Parameters:    Size  Location     Type
  5903 ;;		None
  5904 ;; Auto vars:     Size  Location     Type
  5905 ;;		None
  5906 ;; Return value:  Size  Location     Type
  5907 ;;                  1    wreg      void 
  5908 ;; Registers used:
  5909 ;;		wreg, status,2, status,0, cstack
  5910 ;; Tracked objects:
  5911 ;;		On entry : 0/0
  5912 ;;		On exit  : 0/0
  5913 ;;		Unchanged: 0/0
  5914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5915 ;;      Params:         0       0       0       0       0       0       0
  5916 ;;      Locals:         0       0       0       0       0       0       0
  5917 ;;      Temps:          0       0       0       0       0       0       0
  5918 ;;      Totals:         0       0       0       0       0       0       0
  5919 ;;Total ram usage:        0 bytes
  5920 ;; Hardware stack levels used:    1
  5921 ;; Hardware stack levels required when called:    5
  5922 ;; This function calls:
  5923 ;;		_stepMade
  5924 ;; This function is called by:
  5925 ;;		_executeData
  5926 ;; This function uses a non-reentrant model
  5927 ;;
  5928                           
  5929                           	psect	text35
  5930  0023FA                     __ptext35:
  5931                           	callstack 0
  5932  0023FA                     _pickObject:
  5933                           	callstack 0
  5934  0023FA  FFFF               	dw	65535	; assembler added errata NOP
  5935  0023FC                     
  5936                           ;motors.c: 601:     LATDbits.LATD1 = 1;
  5937  0023FC  828C               	bsf	140,1,c	;volatile
  5938                           
  5939                           ;motors.c: 605:     T2CONbits.TMR2ON = 1;
  5940  0023FE  84CA               	bsf	202,2,c	;volatile
  5941  002400                     l3958:
  5942  002400  FFFF               	dw	65535	; assembler added errata NOP
  5943  002402  EC52  F012         	call	_stepMade	;wreg free
  5944  002406  5012               	movf	?_stepMade^0,w,c
  5945  002408  1013               	iorwf	(?_stepMade+1)^0,w,c
  5946  00240A  B4D8               	btfsc	status,2,c
  5947  00240C  EF0A  F012         	goto	u3331
  5948  002410  EF0D  F012         	goto	u3330
  5949  002414                     u3331:
  5950  002414  FFFF               	dw	65535	; assembler added errata NOP
  5951  002416  EF00  F012         	goto	l3958
  5952  00241A                     u3330:
  5953  00241A  FFFF               	dw	65535	; assembler added errata NOP
  5954  00241C                     
  5955                           ;motors.c: 607:     T2CONbits.TMR2ON = 1;
  5956  00241C  84CA               	bsf	202,2,c	;volatile
  5957  00241E                     
  5958                           ;motors.c: 608:     TMR2 = 0;
  5959  00241E  0E00               	movlw	0
  5960  002420  6ECC               	movwf	204,c	;volatile
  5961  002422  0012               	return		;funcret
  5962  002424  FFFF               	dw	65535	; errata NOP
  5963  002426                     __end_of_pickObject:
  5964                           	callstack 0
  5965                           
  5966 ;; *************** function _moveToPoint *****************
  5967 ;; Defined at:
  5968 ;;		line 264 in file "motors.c"
  5969 ;; Parameters:    Size  Location     Type
  5970 ;;  x1              2   21[COMRAM] unsigned int 
  5971 ;;  y1              2   23[COMRAM] unsigned int 
  5972 ;;  x2              2   25[COMRAM] unsigned int 
  5973 ;;  y2              2   27[COMRAM] unsigned int 
  5974 ;; Auto vars:     Size  Location     Type
  5975 ;;  MOT2Directio    1   34[COMRAM] unsigned char 
  5976 ;;  MOT1Directio    1   33[COMRAM] unsigned char 
  5977 ;;  keepMovingY     1   32[COMRAM] unsigned char 
  5978 ;;  keepMovingX     1   31[COMRAM] unsigned char 
  5979 ;; Return value:  Size  Location     Type
  5980 ;;                  1    wreg      unsigned char 
  5981 ;; Registers used:
  5982 ;;		wreg, status,2, status,0, cstack
  5983 ;; Tracked objects:
  5984 ;;		On entry : 0/0
  5985 ;;		On exit  : 0/0
  5986 ;;		Unchanged: 0/0
  5987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5988 ;;      Params:         8       0       0       0       0       0       0
  5989 ;;      Locals:         4       0       0       0       0       0       0
  5990 ;;      Temps:          2       0       0       0       0       0       0
  5991 ;;      Totals:        14       0       0       0       0       0       0
  5992 ;;Total ram usage:       14 bytes
  5993 ;; Hardware stack levels used:    1
  5994 ;; Hardware stack levels required when called:    5
  5995 ;; This function calls:
  5996 ;;		_resetStep
  5997 ;;		_setDirection
  5998 ;;		_stepCounter
  5999 ;;		_stepMade
  6000 ;; This function is called by:
  6001 ;;		_executeData
  6002 ;; This function uses a non-reentrant model
  6003 ;;
  6004                           
  6005                           	psect	text36
  6006  000A42                     __ptext36:
  6007                           	callstack 0
  6008  000A42                     _moveToPoint:
  6009                           	callstack 0
  6010  000A42  FFFF               	dw	65535	; assembler added errata NOP
  6011  000A44                     
  6012                           ;motors.c: 266:     unsigned char MOT1Direction, MOT2Direction;;motors.c: 269:     if(x2
      +                           > maxX || y2 > maxY){
  6013  000A44  0EE9               	movlw	233
  6014  000A46  5C1A               	subwf	moveToPoint@x2^0,w,c
  6015  000A48  0E03               	movlw	3
  6016  000A4A  581B               	subwfb	(moveToPoint@x2+1)^0,w,c
  6017  000A4C  B0D8               	btfsc	status,0,c
  6018  000A4E  EF2B  F005         	goto	u2981
  6019  000A52  EF2E  F005         	goto	u2980
  6020  000A56                     u2981:
  6021  000A56  FFFF               	dw	65535	; assembler added errata NOP
  6022  000A58  EF3B  F005         	goto	l3744
  6023  000A5C                     u2980:
  6024  000A5C  FFFF               	dw	65535	; assembler added errata NOP
  6025  000A5E  0EE9               	movlw	233
  6026  000A60  5C1C               	subwf	moveToPoint@y2^0,w,c
  6027  000A62  0E03               	movlw	3
  6028  000A64  581D               	subwfb	(moveToPoint@y2+1)^0,w,c
  6029  000A66  A0D8               	btfss	status,0,c
  6030  000A68  EF38  F005         	goto	u2991
  6031  000A6C  EF3B  F005         	goto	u2990
  6032  000A70                     u2991:
  6033  000A70  FFFF               	dw	65535	; assembler added errata NOP
  6034  000A72  EF3F  F005         	goto	l3748
  6035  000A76                     u2990:
  6036  000A76                     l3744:
  6037  000A76  FFFF               	dw	65535	; assembler added errata NOP
  6038                           
  6039                           ;motors.c: 270:         return(5);
  6040  000A78  0E05               	movlw	5
  6041  000A7A  EF7F  F006         	goto	l141
  6042  000A7E                     l3748:
  6043  000A7E  FFFF               	dw	65535	; assembler added errata NOP
  6044                           
  6045                           ;motors.c: 274:     if((x2 - x1) > 0){
  6046  000A80  5016               	movf	moveToPoint@x1^0,w,c
  6047  000A82  5C1A               	subwf	moveToPoint@x2^0,w,c
  6048  000A84  6E1E               	movwf	??_moveToPoint^0,c
  6049  000A86  5017               	movf	(moveToPoint@x1+1)^0,w,c
  6050  000A88  581B               	subwfb	(moveToPoint@x2+1)^0,w,c
  6051  000A8A  6E1F               	movwf	(??_moveToPoint+1)^0,c
  6052  000A8C  501E               	movf	??_moveToPoint^0,w,c
  6053  000A8E  101F               	iorwf	(??_moveToPoint+1)^0,w,c
  6054  000A90  B4D8               	btfsc	status,2,c
  6055  000A92  EF4D  F005         	goto	u3001
  6056  000A96  EF50  F005         	goto	u3000
  6057  000A9A                     u3001:
  6058  000A9A  FFFF               	dw	65535	; assembler added errata NOP
  6059  000A9C  EF5A  F005         	goto	l3754
  6060  000AA0                     u3000:
  6061  000AA0  FFFF               	dw	65535	; assembler added errata NOP
  6062  000AA2                     
  6063                           ;motors.c: 275:         setDirection(1, 0);
  6064  000AA2  0E00               	movlw	0
  6065  000AA4  6E12               	movwf	setDirection@motor^0,c
  6066  000AA6  0E01               	movlw	1
  6067  000AA8  ECE6  F010         	call	_setDirection
  6068  000AAC                     
  6069                           ;motors.c: 276:         MOT1Direction = 1;
  6070  000AAC  0E01               	movlw	1
  6071  000AAE  6E22               	movwf	moveToPoint@MOT1Direction^0,c
  6072                           
  6073                           ;motors.c: 277:     }else{
  6074  000AB0  EF62  F005         	goto	l3758
  6075  000AB4                     l3754:
  6076  000AB4  FFFF               	dw	65535	; assembler added errata NOP
  6077                           
  6078                           ;motors.c: 278:         setDirection(0, 0);
  6079  000AB6  0E00               	movlw	0
  6080  000AB8  6E12               	movwf	setDirection@motor^0,c
  6081  000ABA  0E00               	movlw	0
  6082  000ABC  ECE6  F010         	call	_setDirection
  6083  000AC0                     
  6084                           ;motors.c: 279:         MOT1Direction = 0;
  6085  000AC0  0E00               	movlw	0
  6086  000AC2  6E22               	movwf	moveToPoint@MOT1Direction^0,c
  6087  000AC4                     l3758:
  6088  000AC4  FFFF               	dw	65535	; assembler added errata NOP
  6089                           
  6090                           ;motors.c: 282:     if((y2 - y1) > 0){
  6091  000AC6  5018               	movf	moveToPoint@y1^0,w,c
  6092  000AC8  5C1C               	subwf	moveToPoint@y2^0,w,c
  6093  000ACA  6E1E               	movwf	??_moveToPoint^0,c
  6094  000ACC  5019               	movf	(moveToPoint@y1+1)^0,w,c
  6095  000ACE  581D               	subwfb	(moveToPoint@y2+1)^0,w,c
  6096  000AD0  6E1F               	movwf	(??_moveToPoint+1)^0,c
  6097  000AD2  501E               	movf	??_moveToPoint^0,w,c
  6098  000AD4  101F               	iorwf	(??_moveToPoint+1)^0,w,c
  6099  000AD6  B4D8               	btfsc	status,2,c
  6100  000AD8  EF70  F005         	goto	u3011
  6101  000ADC  EF73  F005         	goto	u3010
  6102  000AE0                     u3011:
  6103  000AE0  FFFF               	dw	65535	; assembler added errata NOP
  6104  000AE2  EF7D  F005         	goto	l3764
  6105  000AE6                     u3010:
  6106  000AE6  FFFF               	dw	65535	; assembler added errata NOP
  6107  000AE8                     
  6108                           ;motors.c: 283:         setDirection(1, 1);
  6109  000AE8  0E01               	movlw	1
  6110  000AEA  6E12               	movwf	setDirection@motor^0,c
  6111  000AEC  0E01               	movlw	1
  6112  000AEE  ECE6  F010         	call	_setDirection
  6113  000AF2                     
  6114                           ;motors.c: 284:         MOT2Direction = 1;
  6115  000AF2  0E01               	movlw	1
  6116  000AF4  6E23               	movwf	moveToPoint@MOT2Direction^0,c
  6117                           
  6118                           ;motors.c: 285:     }else{
  6119  000AF6  EF85  F005         	goto	l3768
  6120  000AFA                     l3764:
  6121  000AFA  FFFF               	dw	65535	; assembler added errata NOP
  6122                           
  6123                           ;motors.c: 286:         setDirection(0, 1);
  6124  000AFC  0E01               	movlw	1
  6125  000AFE  6E12               	movwf	setDirection@motor^0,c
  6126  000B00  0E00               	movlw	0
  6127  000B02  ECE6  F010         	call	_setDirection
  6128  000B06                     
  6129                           ;motors.c: 287:         MOT2Direction = 0;
  6130  000B06  0E00               	movlw	0
  6131  000B08  6E23               	movwf	moveToPoint@MOT2Direction^0,c
  6132  000B0A                     l3768:
  6133  000B0A  FFFF               	dw	65535	; assembler added errata NOP
  6134                           
  6135                           ;motors.c: 290:     unsigned char keepMovingX = 1;
  6136  000B0C  0E01               	movlw	1
  6137  000B0E  6E20               	movwf	moveToPoint@keepMovingX^0,c
  6138  000B10                     
  6139                           ;motors.c: 291:     unsigned char keepMovingY = 1;
  6140  000B10  0E01               	movlw	1
  6141  000B12  6E21               	movwf	moveToPoint@keepMovingY^0,c
  6142  000B14                     
  6143                           ;motors.c: 294:     T2CONbits.TMR2ON = 1;
  6144  000B14  84CA               	bsf	202,2,c	;volatile
  6145  000B16                     
  6146                           ;motors.c: 296:     tm0Error = 0;
  6147  000B16  0E00               	movlw	0
  6148  000B18  6E5C               	movwf	(_tm0Error+1)^0,c
  6149  000B1A  0E00               	movlw	0
  6150  000B1C  6E5B               	movwf	_tm0Error^0,c
  6151  000B1E                     
  6152                           ;motors.c: 297:     tm0Limit = 100;
  6153  000B1E  0E64               	movlw	100
  6154  000B20  6E68               	movwf	_tm0Limit^0,c
  6155  000B22                     
  6156                           ;motors.c: 298:     T0CONbits.TMR0ON = 1;
  6157  000B22  8ED5               	bsf	213,7,c	;volatile
  6158                           
  6159                           ;motors.c: 300:     while(keepMovingX || keepMovingY){
  6160  000B24  EF5F  F006         	goto	l3814
  6161  000B28                     l3780:
  6162  000B28  FFFF               	dw	65535	; assembler added errata NOP
  6163                           
  6164                           ;motors.c: 303:         if(tm0Error){
  6165  000B2A  505B               	movf	_tm0Error^0,w,c
  6166  000B2C  105C               	iorwf	(_tm0Error+1)^0,w,c
  6167  000B2E  B4D8               	btfsc	status,2,c
  6168  000B30  EF9C  F005         	goto	u3021
  6169  000B34  EF9F  F005         	goto	u3020
  6170  000B38                     u3021:
  6171  000B38  FFFF               	dw	65535	; assembler added errata NOP
  6172  000B3A  EFA8  F005         	goto	l3786
  6173  000B3E                     u3020:
  6174  000B3E  FFFF               	dw	65535	; assembler added errata NOP
  6175  000B40                     
  6176                           ;motors.c: 305:             LATAbits.LATA2 = 0;
  6177  000B40  9489               	bcf	137,2,c	;volatile
  6178                           
  6179                           ;motors.c: 306:             LATBbits.LATB4 = 0;
  6180  000B42  988A               	bcf	138,4,c	;volatile
  6181  000B44                     
  6182                           ;motors.c: 307:             tm0Error = 4;
  6183  000B44  0E00               	movlw	0
  6184  000B46  6E5C               	movwf	(_tm0Error+1)^0,c
  6185  000B48  0E04               	movlw	4
  6186  000B4A  6E5B               	movwf	_tm0Error^0,c
  6187                           
  6188                           ;motors.c: 308:             break;
  6189  000B4C  EF73  F006         	goto	l149
  6190  000B50                     l3786:
  6191  000B50  FFFF               	dw	65535	; assembler added errata NOP
  6192                           
  6193                           ;motors.c: 316:         if(MOT1Direction == 1){
  6194  000B52  0422               	decf	moveToPoint@MOT1Direction^0,w,c
  6195  000B54  A4D8               	btfss	status,2,c
  6196  000B56  EFAF  F005         	goto	u3031
  6197  000B5A  EFB2  F005         	goto	u3030
  6198  000B5E                     u3031:
  6199  000B5E  FFFF               	dw	65535	; assembler added errata NOP
  6200  000B60  EFD0  F005         	goto	l3792
  6201  000B64                     u3030:
  6202  000B64  FFFF               	dw	65535	; assembler added errata NOP
  6203  000B66                     
  6204                           ;motors.c: 317:             if(x1 + stepCounter() == x2){
  6205  000B66  EC94  F012         	call	_stepCounter	;wreg free
  6206  000B6A  5016               	movf	moveToPoint@x1^0,w,c
  6207  000B6C  2612               	addwf	?_stepCounter^0,f,c
  6208  000B6E  5017               	movf	(moveToPoint@x1+1)^0,w,c
  6209  000B70  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6210  000B72  501A               	movf	moveToPoint@x2^0,w,c
  6211  000B74  1812               	xorwf	?_stepCounter^0,w,c
  6212  000B76  E107               	bnz	u3041
  6213  000B78  501B               	movf	(moveToPoint@x2+1)^0,w,c
  6214  000B7A  1813               	xorwf	(?_stepCounter+1)^0,w,c
  6215  000B7C  A4D8               	btfss	status,2,c
  6216  000B7E  EFC3  F005         	goto	u3041
  6217  000B82  EFC6  F005         	goto	u3040
  6218  000B86                     u3041:
  6219  000B86  FFFF               	dw	65535	; assembler added errata NOP
  6220  000B88  EFCC  F005         	goto	l151
  6221  000B8C                     u3040:
  6222  000B8C  FFFF               	dw	65535	; assembler added errata NOP
  6223  000B8E                     l3790:
  6224  000B8E  FFFF               	dw	65535	; assembler added errata NOP
  6225                           
  6226                           ;motors.c: 319:                 keepMovingX = 0;
  6227  000B90  0E00               	movlw	0
  6228  000B92  6E20               	movwf	moveToPoint@keepMovingX^0,c
  6229                           
  6230                           ;motors.c: 320:             }else{
  6231  000B94  EFF7  F005         	goto	l3798
  6232  000B98                     l151:
  6233  000B98  FFFF               	dw	65535	; assembler added errata NOP
  6234                           
  6235                           ;motors.c: 322:                 LATAbits.LATA2 = 1;
  6236  000B9A  8489               	bsf	137,2,c	;volatile
  6237  000B9C  EFF7  F005         	goto	l3798
  6238  000BA0                     l3792:
  6239  000BA0  FFFF               	dw	65535	; assembler added errata NOP
  6240  000BA2  5022               	movf	moveToPoint@MOT1Direction^0,w,c
  6241  000BA4  A4D8               	btfss	status,2,c
  6242  000BA6  EFD7  F005         	goto	u3051
  6243  000BAA  EFDA  F005         	goto	u3050
  6244  000BAE                     u3051:
  6245  000BAE  FFFF               	dw	65535	; assembler added errata NOP
  6246  000BB0  EFF7  F005         	goto	l3798
  6247  000BB4                     u3050:
  6248  000BB4  FFFF               	dw	65535	; assembler added errata NOP
  6249  000BB6                     
  6250                           ;motors.c: 325:             if(x1 - stepCounter() == x2){
  6251  000BB6  EC94  F012         	call	_stepCounter	;wreg free
  6252  000BBA  C016  F01E         	movff	moveToPoint@x1,??_moveToPoint
  6253  000BBE  C017  F01F         	movff	moveToPoint@x1+1,??_moveToPoint+1
  6254  000BC2  5012               	movf	?_stepCounter^0,w,c
  6255  000BC4  5E1E               	subwf	??_moveToPoint^0,f,c
  6256  000BC6  5013               	movf	(?_stepCounter+1)^0,w,c
  6257  000BC8  5A1F               	subwfb	(??_moveToPoint+1)^0,f,c
  6258  000BCA  501A               	movf	moveToPoint@x2^0,w,c
  6259  000BCC  181E               	xorwf	??_moveToPoint^0,w,c
  6260  000BCE  E107               	bnz	u3061
  6261  000BD0  501B               	movf	(moveToPoint@x2+1)^0,w,c
  6262  000BD2  181F               	xorwf	(??_moveToPoint+1)^0,w,c
  6263  000BD4  A4D8               	btfss	status,2,c
  6264  000BD6  EFEF  F005         	goto	u3061
  6265  000BDA  EFF2  F005         	goto	u3060
  6266  000BDE                     u3061:
  6267  000BDE  FFFF               	dw	65535	; assembler added errata NOP
  6268  000BE0  EFF5  F005         	goto	l155
  6269  000BE4                     u3060:
  6270  000BE4  FFFF               	dw	65535	; assembler added errata NOP
  6271  000BE6  EFC7  F005         	goto	l3790
  6272  000BEA                     l155:
  6273  000BEA  FFFF               	dw	65535	; assembler added errata NOP
  6274                           
  6275                           ;motors.c: 330:                 LATAbits.LATA2 = 1;
  6276  000BEC  8489               	bsf	137,2,c	;volatile
  6277  000BEE                     l3798:
  6278  000BEE  FFFF               	dw	65535	; assembler added errata NOP
  6279                           
  6280                           ;motors.c: 334:         if(MOT2Direction == 1){
  6281  000BF0  0423               	decf	moveToPoint@MOT2Direction^0,w,c
  6282  000BF2  A4D8               	btfss	status,2,c
  6283  000BF4  EFFE  F005         	goto	u3071
  6284  000BF8  EF01  F006         	goto	u3070
  6285  000BFC                     u3071:
  6286  000BFC  FFFF               	dw	65535	; assembler added errata NOP
  6287  000BFE  EF1F  F006         	goto	l3804
  6288  000C02                     u3070:
  6289  000C02  FFFF               	dw	65535	; assembler added errata NOP
  6290  000C04                     
  6291                           ;motors.c: 336:             if(y1 + stepCounter() == y2){
  6292  000C04  EC94  F012         	call	_stepCounter	;wreg free
  6293  000C08  5018               	movf	moveToPoint@y1^0,w,c
  6294  000C0A  2612               	addwf	?_stepCounter^0,f,c
  6295  000C0C  5019               	movf	(moveToPoint@y1+1)^0,w,c
  6296  000C0E  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6297  000C10  501C               	movf	moveToPoint@y2^0,w,c
  6298  000C12  1812               	xorwf	?_stepCounter^0,w,c
  6299  000C14  E107               	bnz	u3081
  6300  000C16  501D               	movf	(moveToPoint@y2+1)^0,w,c
  6301  000C18  1813               	xorwf	(?_stepCounter+1)^0,w,c
  6302  000C1A  A4D8               	btfss	status,2,c
  6303  000C1C  EF12  F006         	goto	u3081
  6304  000C20  EF15  F006         	goto	u3080
  6305  000C24                     u3081:
  6306  000C24  FFFF               	dw	65535	; assembler added errata NOP
  6307  000C26  EF1B  F006         	goto	l158
  6308  000C2A                     u3080:
  6309  000C2A  FFFF               	dw	65535	; assembler added errata NOP
  6310  000C2C                     l3802:
  6311  000C2C  FFFF               	dw	65535	; assembler added errata NOP
  6312                           
  6313                           ;motors.c: 338:                 keepMovingY = 0;
  6314  000C2E  0E00               	movlw	0
  6315  000C30  6E21               	movwf	moveToPoint@keepMovingY^0,c
  6316                           
  6317                           ;motors.c: 339:             }else{
  6318  000C32  EF42  F006         	goto	l3810
  6319  000C36                     l158:
  6320  000C36  FFFF               	dw	65535	; assembler added errata NOP
  6321                           
  6322                           ;motors.c: 341:                 LATBbits.LATB4 = 1;
  6323  000C38  888A               	bsf	138,4,c	;volatile
  6324  000C3A  EF42  F006         	goto	l3810
  6325  000C3E                     l3804:
  6326  000C3E  FFFF               	dw	65535	; assembler added errata NOP
  6327  000C40  5023               	movf	moveToPoint@MOT2Direction^0,w,c
  6328  000C42  A4D8               	btfss	status,2,c
  6329  000C44  EF26  F006         	goto	u3091
  6330  000C48  EF29  F006         	goto	u3090
  6331  000C4C                     u3091:
  6332  000C4C  FFFF               	dw	65535	; assembler added errata NOP
  6333  000C4E  EF42  F006         	goto	l3810
  6334  000C52                     u3090:
  6335  000C52  FFFF               	dw	65535	; assembler added errata NOP
  6336  000C54                     
  6337                           ;motors.c: 345:             if(y1 + stepCounter() == y2){
  6338  000C54  EC94  F012         	call	_stepCounter	;wreg free
  6339  000C58  5018               	movf	moveToPoint@y1^0,w,c
  6340  000C5A  2612               	addwf	?_stepCounter^0,f,c
  6341  000C5C  5019               	movf	(moveToPoint@y1+1)^0,w,c
  6342  000C5E  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6343  000C60  501C               	movf	moveToPoint@y2^0,w,c
  6344  000C62  1812               	xorwf	?_stepCounter^0,w,c
  6345  000C64  E107               	bnz	u3101
  6346  000C66  501D               	movf	(moveToPoint@y2+1)^0,w,c
  6347  000C68  1813               	xorwf	(?_stepCounter+1)^0,w,c
  6348  000C6A  A4D8               	btfss	status,2,c
  6349  000C6C  EF3A  F006         	goto	u3101
  6350  000C70  EF3D  F006         	goto	u3100
  6351  000C74                     u3101:
  6352  000C74  FFFF               	dw	65535	; assembler added errata NOP
  6353  000C76  EF40  F006         	goto	l162
  6354  000C7A                     u3100:
  6355  000C7A  FFFF               	dw	65535	; assembler added errata NOP
  6356  000C7C  EF16  F006         	goto	l3802
  6357  000C80                     l162:
  6358  000C80  FFFF               	dw	65535	; assembler added errata NOP
  6359                           
  6360                           ;motors.c: 350:                 LATBbits.LATB4 = 1;
  6361  000C82  888A               	bsf	138,4,c	;volatile
  6362  000C84                     l3810:
  6363  000C84  FFFF               	dw	65535	; assembler added errata NOP
  6364  000C86  EC52  F012         	call	_stepMade	;wreg free
  6365  000C8A  5012               	movf	?_stepMade^0,w,c
  6366  000C8C  1013               	iorwf	(?_stepMade+1)^0,w,c
  6367  000C8E  B4D8               	btfsc	status,2,c
  6368  000C90  EF4C  F006         	goto	u3111
  6369  000C94  EF4F  F006         	goto	u3110
  6370  000C98                     u3111:
  6371  000C98  FFFF               	dw	65535	; assembler added errata NOP
  6372  000C9A  EF42  F006         	goto	l3810
  6373  000C9E                     u3110:
  6374  000C9E  FFFF               	dw	65535	; assembler added errata NOP
  6375  000CA0                     
  6376                           ;motors.c: 358:         LATAbits.LATA2 = 0;
  6377  000CA0  9489               	bcf	137,2,c	;volatile
  6378                           
  6379                           ;motors.c: 359:         LATBbits.LATB4 = 0;
  6380  000CA2  988A               	bcf	138,4,c	;volatile
  6381  000CA4                     l3812:
  6382  000CA4  FFFF               	dw	65535	; assembler added errata NOP
  6383  000CA6  EC52  F012         	call	_stepMade	;wreg free
  6384  000CAA  5012               	movf	?_stepMade^0,w,c
  6385  000CAC  1013               	iorwf	(?_stepMade+1)^0,w,c
  6386  000CAE  B4D8               	btfsc	status,2,c
  6387  000CB0  EF5C  F006         	goto	u3121
  6388  000CB4  EF5F  F006         	goto	u3120
  6389  000CB8                     u3121:
  6390  000CB8  FFFF               	dw	65535	; assembler added errata NOP
  6391  000CBA  EF52  F006         	goto	l3812
  6392  000CBE                     u3120:
  6393  000CBE                     l3814:
  6394  000CBE  FFFF               	dw	65535	; assembler added errata NOP
  6395                           
  6396                           ;motors.c: 300:     while(keepMovingX || keepMovingY){
  6397  000CC0  5020               	movf	moveToPoint@keepMovingX^0,w,c
  6398  000CC2  A4D8               	btfss	status,2,c
  6399  000CC4  EF66  F006         	goto	u3131
  6400  000CC8  EF69  F006         	goto	u3130
  6401  000CCC                     u3131:
  6402  000CCC  FFFF               	dw	65535	; assembler added errata NOP
  6403  000CCE  EF94  F005         	goto	l3780
  6404  000CD2                     u3130:
  6405  000CD2  FFFF               	dw	65535	; assembler added errata NOP
  6406  000CD4  5021               	movf	moveToPoint@keepMovingY^0,w,c
  6407  000CD6  A4D8               	btfss	status,2,c
  6408  000CD8  EF70  F006         	goto	u3141
  6409  000CDC  EF73  F006         	goto	u3140
  6410  000CE0                     u3141:
  6411  000CE0  FFFF               	dw	65535	; assembler added errata NOP
  6412  000CE2  EF94  F005         	goto	l3780
  6413  000CE6                     u3140:
  6414  000CE6                     l149:
  6415  000CE6  FFFF               	dw	65535	; assembler added errata NOP
  6416                           
  6417                           ;motors.c: 366:     T0CONbits.TMR0ON = 0;
  6418  000CE8  9ED5               	bcf	213,7,c	;volatile
  6419                           
  6420                           ;motors.c: 367:     T2CONbits.TMR2ON = 0;
  6421  000CEA  94CA               	bcf	202,2,c	;volatile
  6422  000CEC                     
  6423                           ;motors.c: 369:     TMR0 = 0;
  6424  000CEC  0E00               	movlw	0
  6425  000CEE  6ED7               	movwf	215,c	;volatile
  6426  000CF0  0E00               	movlw	0
  6427  000CF2  6ED6               	movwf	214,c	;volatile
  6428                           
  6429                           ;motors.c: 370:     TMR2 = 0;
  6430  000CF4  0E00               	movlw	0
  6431  000CF6  6ECC               	movwf	204,c	;volatile
  6432  000CF8                     
  6433                           ;motors.c: 373:     resetStep();
  6434  000CF8  ECAE  F012         	call	_resetStep	;wreg free
  6435  000CFC                     
  6436                           ;motors.c: 375:     return(tm0Error);
  6437  000CFC  505B               	movf	_tm0Error^0,w,c
  6438  000CFE                     l141:
  6439  000CFE  FFFF               	dw	65535	; assembler added errata NOP
  6440  000D00  0012               	return		;funcret
  6441  000D02  FFFF               	dw	65535	; errata NOP
  6442  000D04                     __end_of_moveToPoint:
  6443                           	callstack 0
  6444                           
  6445 ;; *************** function _stepCounter *****************
  6446 ;; Defined at:
  6447 ;;		line 58 in file "pwm.c"
  6448 ;; Parameters:    Size  Location     Type
  6449 ;;		None
  6450 ;; Auto vars:     Size  Location     Type
  6451 ;;		None
  6452 ;; Return value:  Size  Location     Type
  6453 ;;                  2   17[COMRAM] unsigned int 
  6454 ;; Registers used:
  6455 ;;		None
  6456 ;; Tracked objects:
  6457 ;;		On entry : 0/0
  6458 ;;		On exit  : 0/0
  6459 ;;		Unchanged: 0/0
  6460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6461 ;;      Params:         2       0       0       0       0       0       0
  6462 ;;      Locals:         0       0       0       0       0       0       0
  6463 ;;      Temps:          0       0       0       0       0       0       0
  6464 ;;      Totals:         2       0       0       0       0       0       0
  6465 ;;Total ram usage:        2 bytes
  6466 ;; Hardware stack levels used:    1
  6467 ;; Hardware stack levels required when called:    4
  6468 ;; This function calls:
  6469 ;;		Nothing
  6470 ;; This function is called by:
  6471 ;;		_moveToPoint
  6472 ;; This function uses a non-reentrant model
  6473 ;;
  6474                           
  6475                           	psect	text37
  6476  002528                     __ptext37:
  6477                           	callstack 0
  6478  002528                     _stepCounter:
  6479                           	callstack 0
  6480  002528  FFFF               	dw	65535	; assembler added errata NOP
  6481  00252A                     
  6482                           ;pwm.c: 59:     return pwmStep;
  6483  00252A  C067  F012         	movff	_pwmStep,?_stepCounter	;volatile
  6484  00252E  6A13               	clrf	(?_stepCounter+1)^0,c
  6485  002530  0012               	return		;funcret
  6486  002532  FFFF               	dw	65535	; errata NOP
  6487  002534                     __end_of_stepCounter:
  6488                           	callstack 0
  6489                           
  6490 ;; *************** function _liftArm *****************
  6491 ;; Defined at:
  6492 ;;		line 521 in file "motors.c"
  6493 ;; Parameters:    Size  Location     Type
  6494 ;;		None
  6495 ;; Auto vars:     Size  Location     Type
  6496 ;;		None
  6497 ;; Return value:  Size  Location     Type
  6498 ;;                  1    wreg      unsigned char 
  6499 ;; Registers used:
  6500 ;;		wreg, status,2, status,0, cstack
  6501 ;; Tracked objects:
  6502 ;;		On entry : 0/0
  6503 ;;		On exit  : 0/0
  6504 ;;		Unchanged: 0/0
  6505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6506 ;;      Params:         0       0       0       0       0       0       0
  6507 ;;      Locals:         0       0       0       0       0       0       0
  6508 ;;      Temps:          0       0       0       0       0       0       0
  6509 ;;      Totals:         0       0       0       0       0       0       0
  6510 ;;Total ram usage:        0 bytes
  6511 ;; Hardware stack levels used:    1
  6512 ;; Hardware stack levels required when called:    5
  6513 ;; This function calls:
  6514 ;;		_resetStep
  6515 ;;		_setDirection
  6516 ;;		_stepMade
  6517 ;; This function is called by:
  6518 ;;		_executeData
  6519 ;; This function uses a non-reentrant model
  6520 ;;
  6521                           
  6522                           	psect	text38
  6523  001FAE                     __ptext38:
  6524                           	callstack 0
  6525  001FAE                     _liftArm:
  6526                           	callstack 0
  6527  001FAE  FFFF               	dw	65535	; assembler added errata NOP
  6528  001FB0                     
  6529                           ;motors.c: 524:     setDirection(0, 2);
  6530  001FB0  0E02               	movlw	2
  6531  001FB2  6E12               	movwf	setDirection@motor^0,c
  6532  001FB4  0E00               	movlw	0
  6533  001FB6  ECE6  F010         	call	_setDirection
  6534  001FBA                     
  6535                           ;motors.c: 526:     T2CONbits.TMR2ON = 1;
  6536  001FBA  84CA               	bsf	202,2,c	;volatile
  6537  001FBC                     
  6538                           ;motors.c: 528:     tm0Error = 0;
  6539  001FBC  0E00               	movlw	0
  6540  001FBE  6E5C               	movwf	(_tm0Error+1)^0,c
  6541  001FC0  0E00               	movlw	0
  6542  001FC2  6E5B               	movwf	_tm0Error^0,c
  6543  001FC4                     
  6544                           ;motors.c: 529:     tm0Limit = 100;
  6545  001FC4  0E64               	movlw	100
  6546  001FC6  6E68               	movwf	_tm0Limit^0,c
  6547  001FC8                     
  6548                           ;motors.c: 530:     T0CONbits.TMR0ON = 1;
  6549  001FC8  8ED5               	bsf	213,7,c	;volatile
  6550                           
  6551                           ;motors.c: 534:     while(!PORTEbits.RE2){
  6552  001FCA  EF18  F010         	goto	l200
  6553  001FCE                     l3920:
  6554  001FCE  FFFF               	dw	65535	; assembler added errata NOP
  6555                           
  6556                           ;motors.c: 537:         if(tm0Error){
  6557  001FD0  505B               	movf	_tm0Error^0,w,c
  6558  001FD2  105C               	iorwf	(_tm0Error+1)^0,w,c
  6559  001FD4  B4D8               	btfsc	status,2,c
  6560  001FD6  EFEF  F00F         	goto	u3271
  6561  001FDA  EFF2  F00F         	goto	u3270
  6562  001FDE                     u3271:
  6563  001FDE  FFFF               	dw	65535	; assembler added errata NOP
  6564  001FE0  EFFA  F00F         	goto	l202
  6565  001FE4                     u3270:
  6566  001FE4  FFFF               	dw	65535	; assembler added errata NOP
  6567  001FE6                     
  6568                           ;motors.c: 539:             LATCbits.LATC2 = 0;
  6569  001FE6  948B               	bcf	139,2,c	;volatile
  6570  001FE8                     
  6571                           ;motors.c: 540:             tm0Error = 6;
  6572  001FE8  0E00               	movlw	0
  6573  001FEA  6E5C               	movwf	(_tm0Error+1)^0,c
  6574  001FEC  0E06               	movlw	6
  6575  001FEE  6E5B               	movwf	_tm0Error^0,c
  6576                           
  6577                           ;motors.c: 541:             break;
  6578  001FF0  EF21  F010         	goto	l203
  6579  001FF4                     l202:
  6580  001FF4  FFFF               	dw	65535	; assembler added errata NOP
  6581                           
  6582                           ;motors.c: 546:         LATCbits.LATC2 = 1;
  6583  001FF6  848B               	bsf	139,2,c	;volatile
  6584  001FF8                     l3926:
  6585  001FF8  FFFF               	dw	65535	; assembler added errata NOP
  6586  001FFA  EC52  F012         	call	_stepMade	;wreg free
  6587  001FFE  5012               	movf	?_stepMade^0,w,c
  6588  002000  1013               	iorwf	(?_stepMade+1)^0,w,c
  6589  002002  B4D8               	btfsc	status,2,c
  6590  002004  EF06  F010         	goto	u3281
  6591  002008  EF09  F010         	goto	u3280
  6592  00200C                     u3281:
  6593  00200C  FFFF               	dw	65535	; assembler added errata NOP
  6594  00200E  EFFC  F00F         	goto	l3926
  6595  002012                     u3280:
  6596  002012  FFFF               	dw	65535	; assembler added errata NOP
  6597  002014                     
  6598                           ;motors.c: 552:         LATCbits.LATC2 = 0;
  6599  002014  948B               	bcf	139,2,c	;volatile
  6600  002016                     l3928:
  6601  002016  FFFF               	dw	65535	; assembler added errata NOP
  6602  002018  EC52  F012         	call	_stepMade	;wreg free
  6603  00201C  5012               	movf	?_stepMade^0,w,c
  6604  00201E  1013               	iorwf	(?_stepMade+1)^0,w,c
  6605  002020  B4D8               	btfsc	status,2,c
  6606  002022  EF15  F010         	goto	u3291
  6607  002026  EF18  F010         	goto	u3290
  6608  00202A                     u3291:
  6609  00202A  FFFF               	dw	65535	; assembler added errata NOP
  6610  00202C  EF0B  F010         	goto	l3928
  6611  002030                     u3290:
  6612  002030                     l200:
  6613  002030  FFFF               	dw	65535	; assembler added errata NOP
  6614                           
  6615                           ;motors.c: 534:     while(!PORTEbits.RE2){
  6616  002032  A484               	btfss	132,2,c	;volatile
  6617  002034  EF1E  F010         	goto	u3301
  6618  002038  EF21  F010         	goto	u3300
  6619  00203C                     u3301:
  6620  00203C  FFFF               	dw	65535	; assembler added errata NOP
  6621  00203E  EFE7  F00F         	goto	l3920
  6622  002042                     u3300:
  6623  002042                     l203:
  6624  002042  FFFF               	dw	65535	; assembler added errata NOP
  6625                           
  6626                           ;motors.c: 559:     T0CONbits.TMR0ON = 0;
  6627  002044  9ED5               	bcf	213,7,c	;volatile
  6628                           
  6629                           ;motors.c: 560:     T2CONbits.TMR2ON = 0;
  6630  002046  94CA               	bcf	202,2,c	;volatile
  6631  002048                     
  6632                           ;motors.c: 562:     TMR0 = 0;
  6633  002048  0E00               	movlw	0
  6634  00204A  6ED7               	movwf	215,c	;volatile
  6635  00204C  0E00               	movlw	0
  6636  00204E  6ED6               	movwf	214,c	;volatile
  6637                           
  6638                           ;motors.c: 563:     TMR2 = 0;
  6639  002050  0E00               	movlw	0
  6640  002052  6ECC               	movwf	204,c	;volatile
  6641  002054                     
  6642                           ;motors.c: 566:     resetStep();
  6643  002054  ECAE  F012         	call	_resetStep	;wreg free
  6644  002058                     
  6645                           ;motors.c: 568:     return(tm0Error);
  6646  002058  505B               	movf	_tm0Error^0,w,c
  6647  00205A  0012               	return		;funcret
  6648  00205C  FFFF               	dw	65535	; errata NOP
  6649  00205E                     __end_of_liftArm:
  6650                           	callstack 0
  6651                           
  6652 ;; *************** function _stepMade *****************
  6653 ;; Defined at:
  6654 ;;		line 47 in file "pwm.c"
  6655 ;; Parameters:    Size  Location     Type
  6656 ;;		None
  6657 ;; Auto vars:     Size  Location     Type
  6658 ;;  temp            1   19[COMRAM] unsigned char 
  6659 ;; Return value:  Size  Location     Type
  6660 ;;                  2   17[COMRAM] unsigned int 
  6661 ;; Registers used:
  6662 ;;		wreg, status,2
  6663 ;; Tracked objects:
  6664 ;;		On entry : 0/0
  6665 ;;		On exit  : 0/0
  6666 ;;		Unchanged: 0/0
  6667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6668 ;;      Params:         2       0       0       0       0       0       0
  6669 ;;      Locals:         1       0       0       0       0       0       0
  6670 ;;      Temps:          0       0       0       0       0       0       0
  6671 ;;      Totals:         3       0       0       0       0       0       0
  6672 ;;Total ram usage:        3 bytes
  6673 ;; Hardware stack levels used:    1
  6674 ;; Hardware stack levels required when called:    4
  6675 ;; This function calls:
  6676 ;;		Nothing
  6677 ;; This function is called by:
  6678 ;;		_resetPosition
  6679 ;;		_moveToPoint
  6680 ;;		_touchObject
  6681 ;;		_touchTherm
  6682 ;;		_liftArm
  6683 ;;		_rotateObj
  6684 ;;		_pickObject
  6685 ;;		_releaseObj
  6686 ;; This function uses a non-reentrant model
  6687 ;;
  6688                           
  6689                           	psect	text39
  6690  0024A4                     __ptext39:
  6691                           	callstack 0
  6692  0024A4                     _stepMade:
  6693                           	callstack 0
  6694  0024A4  FFFF               	dw	65535	; assembler added errata NOP
  6695  0024A6                     
  6696                           ;pwm.c: 48:     unsigned char temp = stepToggle;
  6697  0024A6  C066  F014         	movff	_stepToggle,stepMade@temp	;volatile
  6698  0024AA                     
  6699                           ;pwm.c: 50:     stepToggle = 0;
  6700  0024AA  0E00               	movlw	0
  6701  0024AC  6E66               	movwf	_stepToggle^0,c	;volatile
  6702  0024AE                     
  6703                           ;pwm.c: 52:     return temp;
  6704  0024AE  C014  F012         	movff	stepMade@temp,?_stepMade
  6705  0024B2  6A13               	clrf	(?_stepMade+1)^0,c
  6706  0024B4  0012               	return		;funcret
  6707  0024B6  FFFF               	dw	65535	; errata NOP
  6708  0024B8                     __end_of_stepMade:
  6709                           	callstack 0
  6710                           
  6711 ;; *************** function _setDirection *****************
  6712 ;; Defined at:
  6713 ;;		line 115 in file "motors.c"
  6714 ;; Parameters:    Size  Location     Type
  6715 ;;  direction       1    wreg     unsigned char 
  6716 ;;  motor           1   17[COMRAM] unsigned char 
  6717 ;; Auto vars:     Size  Location     Type
  6718 ;;  direction       1   20[COMRAM] unsigned char 
  6719 ;; Return value:  Size  Location     Type
  6720 ;;                  1    wreg      void 
  6721 ;; Registers used:
  6722 ;;		wreg, status,2, status,0
  6723 ;; Tracked objects:
  6724 ;;		On entry : 0/0
  6725 ;;		On exit  : 0/0
  6726 ;;		Unchanged: 0/0
  6727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6728 ;;      Params:         1       0       0       0       0       0       0
  6729 ;;      Locals:         1       0       0       0       0       0       0
  6730 ;;      Temps:          2       0       0       0       0       0       0
  6731 ;;      Totals:         4       0       0       0       0       0       0
  6732 ;;Total ram usage:        4 bytes
  6733 ;; Hardware stack levels used:    1
  6734 ;; Hardware stack levels required when called:    4
  6735 ;; This function calls:
  6736 ;;		Nothing
  6737 ;; This function is called by:
  6738 ;;		_resetPosition
  6739 ;;		_moveToPoint
  6740 ;;		_touchObject
  6741 ;;		_touchTherm
  6742 ;;		_liftArm
  6743 ;; This function uses a non-reentrant model
  6744 ;;
  6745                           
  6746                           	psect	text40
  6747  0021CC                     __ptext40:
  6748                           	callstack 0
  6749  0021CC                     _setDirection:
  6750                           	callstack 0
  6751  0021CC  FFFF               	dw	65535	; assembler added errata NOP
  6752                           
  6753                           ;incstack = 0
  6754                           ;setDirection@direction stored from wreg
  6755  0021CE  6E15               	movwf	setDirection@direction^0,c
  6756  0021D0                     
  6757                           ;motors.c: 116:     switch(motor){
  6758  0021D0  EF02  F011         	goto	l3426
  6759  0021D4                     l3418:
  6760  0021D4  FFFF               	dw	65535	; assembler added errata NOP
  6761                           
  6762                           ;motors.c: 118:             LATAbits.LATA1 = direction;
  6763  0021D6  B015               	btfsc	setDirection@direction^0,0,c
  6764  0021D8  D002               	bra	u2475
  6765  0021DA  9289               	bcf	137,1,c	;volatile
  6766  0021DC  D001               	bra	u2476
  6767  0021DE                     u2475:
  6768  0021DE  8289               	bsf	137,1,c	;volatile
  6769  0021E0                     u2476:
  6770                           
  6771                           ;motors.c: 119:             break;
  6772  0021E0  EF1D  F011         	goto	l101
  6773  0021E4                     l3420:
  6774  0021E4  FFFF               	dw	65535	; assembler added errata NOP
  6775                           
  6776                           ;motors.c: 121:             LATBbits.LATB3 = direction;
  6777  0021E6  B015               	btfsc	setDirection@direction^0,0,c
  6778  0021E8  D002               	bra	u2485
  6779  0021EA  968A               	bcf	138,3,c	;volatile
  6780  0021EC  D001               	bra	u2486
  6781  0021EE                     u2485:
  6782  0021EE  868A               	bsf	138,3,c	;volatile
  6783  0021F0                     u2486:
  6784                           
  6785                           ;motors.c: 122:             break;
  6786  0021F0  EF1D  F011         	goto	l101
  6787  0021F4                     l3422:
  6788  0021F4  FFFF               	dw	65535	; assembler added errata NOP
  6789                           
  6790                           ;motors.c: 124:             LATCbits.LATC1 = direction;
  6791  0021F6  B015               	btfsc	setDirection@direction^0,0,c
  6792  0021F8  D002               	bra	u2495
  6793  0021FA  928B               	bcf	139,1,c	;volatile
  6794  0021FC  D001               	bra	u2496
  6795  0021FE                     u2495:
  6796  0021FE  828B               	bsf	139,1,c	;volatile
  6797  002200                     u2496:
  6798                           
  6799                           ;motors.c: 125:             break;
  6800  002200  EF1D  F011         	goto	l101
  6801  002204                     l3426:
  6802  002204  FFFF               	dw	65535	; assembler added errata NOP
  6803  002206  5012               	movf	setDirection@motor^0,w,c
  6804  002208  6E13               	movwf	??_setDirection^0,c
  6805  00220A  6A14               	clrf	(??_setDirection+1)^0,c
  6806                           
  6807                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6808                           ; Switch size 1, requested type "simple"
  6809                           ; Number of cases is 1, Range of values is 0 to 0
  6810                           ; switch strategies available:
  6811                           ; Name         Instructions Cycles
  6812                           ; simple_byte            4     3 (average)
  6813                           ;	Chosen strategy is simple_byte
  6814  00220C  5014               	movf	(??_setDirection+1)^0,w,c
  6815  00220E  0A00               	xorlw	0	; case 0
  6816  002210  B4D8               	btfsc	status,2,c
  6817  002212  EF0D  F011         	goto	l4546
  6818  002216  EF1D  F011         	goto	l101
  6819  00221A                     l4546:
  6820  00221A  FFFF               	dw	65535	; assembler added errata NOP
  6821                           
  6822                           ; Switch size 1, requested type "simple"
  6823                           ; Number of cases is 3, Range of values is 0 to 2
  6824                           ; switch strategies available:
  6825                           ; Name         Instructions Cycles
  6826                           ; simple_byte           10     6 (average)
  6827                           ;	Chosen strategy is simple_byte
  6828  00221C  5013               	movf	??_setDirection^0,w,c
  6829  00221E  0A00               	xorlw	0	; case 0
  6830  002220  B4D8               	btfsc	status,2,c
  6831  002222  EFEA  F010         	goto	l3418
  6832  002226  0A01               	xorlw	1	; case 1
  6833  002228  B4D8               	btfsc	status,2,c
  6834  00222A  EFF2  F010         	goto	l3420
  6835  00222E  0A03               	xorlw	3	; case 2
  6836  002230  B4D8               	btfsc	status,2,c
  6837  002232  EFFA  F010         	goto	l3422
  6838  002236  EF1D  F011         	goto	l101
  6839  00223A                     l101:
  6840  00223A  FFFF               	dw	65535	; assembler added errata NOP
  6841  00223C  0012               	return		;funcret
  6842  00223E  FFFF               	dw	65535	; errata NOP
  6843  002240                     __end_of_setDirection:
  6844                           	callstack 0
  6845                           
  6846 ;; *************** function _resetStep *****************
  6847 ;; Defined at:
  6848 ;;		line 65 in file "pwm.c"
  6849 ;; Parameters:    Size  Location     Type
  6850 ;;		None
  6851 ;; Auto vars:     Size  Location     Type
  6852 ;;		None
  6853 ;; Return value:  Size  Location     Type
  6854 ;;                  1    wreg      void 
  6855 ;; Registers used:
  6856 ;;		wreg, status,2
  6857 ;; Tracked objects:
  6858 ;;		On entry : 0/0
  6859 ;;		On exit  : 0/0
  6860 ;;		Unchanged: 0/0
  6861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6862 ;;      Params:         0       0       0       0       0       0       0
  6863 ;;      Locals:         0       0       0       0       0       0       0
  6864 ;;      Temps:          0       0       0       0       0       0       0
  6865 ;;      Totals:         0       0       0       0       0       0       0
  6866 ;;Total ram usage:        0 bytes
  6867 ;; Hardware stack levels used:    1
  6868 ;; Hardware stack levels required when called:    4
  6869 ;; This function calls:
  6870 ;;		Nothing
  6871 ;; This function is called by:
  6872 ;;		_resetPosition
  6873 ;;		_moveToPoint
  6874 ;;		_touchObject
  6875 ;;		_touchTherm
  6876 ;;		_liftArm
  6877 ;; This function uses a non-reentrant model
  6878 ;;
  6879                           
  6880                           	psect	text41
  6881  00255C                     __ptext41:
  6882                           	callstack 0
  6883  00255C                     _resetStep:
  6884                           	callstack 0
  6885  00255C  FFFF               	dw	65535	; assembler added errata NOP
  6886  00255E                     
  6887                           ;pwm.c: 66:     pwmStep = 0;
  6888  00255E  0E00               	movlw	0
  6889  002560  6E67               	movwf	_pwmStep^0,c	;volatile
  6890  002562  0012               	return		;funcret
  6891  002564  FFFF               	dw	65535	; errata NOP
  6892  002566                     __end_of_resetStep:
  6893                           	callstack 0
  6894                           
  6895 ;; *************** function _getData *****************
  6896 ;; Defined at:
  6897 ;;		line 205 in file "usart.c"
  6898 ;; Parameters:    Size  Location     Type
  6899 ;;		None
  6900 ;; Auto vars:     Size  Location     Type
  6901 ;;		None
  6902 ;; Return value:  Size  Location     Type
  6903 ;;                  2   17[COMRAM] PTR struct .
  6904 ;; Registers used:
  6905 ;;		wreg, status,2, status,0
  6906 ;; Tracked objects:
  6907 ;;		On entry : 0/0
  6908 ;;		On exit  : 0/0
  6909 ;;		Unchanged: 0/0
  6910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6911 ;;      Params:         2       0       0       0       0       0       0
  6912 ;;      Locals:         0       0       0       0       0       0       0
  6913 ;;      Temps:          0       0       0       0       0       0       0
  6914 ;;      Totals:         2       0       0       0       0       0       0
  6915 ;;Total ram usage:        2 bytes
  6916 ;; Hardware stack levels used:    1
  6917 ;; Hardware stack levels required when called:    4
  6918 ;; This function calls:
  6919 ;;		Nothing
  6920 ;; This function is called by:
  6921 ;;		_executeData
  6922 ;; This function uses a non-reentrant model
  6923 ;;
  6924                           
  6925                           	psect	text42
  6926  0024D8                     __ptext42:
  6927                           	callstack 0
  6928  0024D8                     _getData:
  6929                           	callstack 0
  6930  0024D8  FFFF               	dw	65535	; assembler added errata NOP
  6931  0024DA                     
  6932                           ;usart.c: 206:     return(&dataSequence[0]);
  6933  0024DA  0ED8               	movlw	low _dataSequence
  6934  0024DC  6E12               	movwf	?_getData^0,c
  6935  0024DE  0E00               	movlw	high _dataSequence
  6936  0024E0  6E13               	movwf	(?_getData+1)^0,c
  6937  0024E2  0012               	return		;funcret
  6938  0024E4  FFFF               	dw	65535	; errata NOP
  6939  0024E6                     __end_of_getData:
  6940                           	callstack 0
  6941                           
  6942 ;; *************** function _clearTM0 *****************
  6943 ;; Defined at:
  6944 ;;		line 28 in file "motors.c"
  6945 ;; Parameters:    Size  Location     Type
  6946 ;;		None
  6947 ;; Auto vars:     Size  Location     Type
  6948 ;;		None
  6949 ;; Return value:  Size  Location     Type
  6950 ;;                  1    wreg      void 
  6951 ;; Registers used:
  6952 ;;		wreg, status,2
  6953 ;; Tracked objects:
  6954 ;;		On entry : 0/0
  6955 ;;		On exit  : 0/0
  6956 ;;		Unchanged: 0/0
  6957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6958 ;;      Params:         0       0       0       0       0       0       0
  6959 ;;      Locals:         0       0       0       0       0       0       0
  6960 ;;      Temps:          0       0       0       0       0       0       0
  6961 ;;      Totals:         0       0       0       0       0       0       0
  6962 ;;Total ram usage:        0 bytes
  6963 ;; Hardware stack levels used:    1
  6964 ;; Hardware stack levels required when called:    4
  6965 ;; This function calls:
  6966 ;;		Nothing
  6967 ;; This function is called by:
  6968 ;;		_main
  6969 ;; This function uses a non-reentrant model
  6970 ;;
  6971                           
  6972                           	psect	text43
  6973  0024E6                     __ptext43:
  6974                           	callstack 0
  6975  0024E6                     _clearTM0:
  6976                           	callstack 0
  6977  0024E6  FFFF               	dw	65535	; assembler added errata NOP
  6978  0024E8                     
  6979                           ;motors.c: 29:     tm0Error = 0;
  6980  0024E8  0E00               	movlw	0
  6981  0024EA  6E5C               	movwf	(_tm0Error+1)^0,c
  6982  0024EC  0E00               	movlw	0
  6983  0024EE  6E5B               	movwf	_tm0Error^0,c
  6984  0024F0  0012               	return		;funcret
  6985  0024F2  FFFF               	dw	65535	; errata NOP
  6986  0024F4                     __end_of_clearTM0:
  6987                           	callstack 0
  6988                           
  6989 ;; *************** function _isr *****************
  6990 ;; Defined at:
  6991 ;;		line 17 in file "interrupt.c"
  6992 ;; Parameters:    Size  Location     Type
  6993 ;;		None
  6994 ;; Auto vars:     Size  Location     Type
  6995 ;;  temp            1   16[COMRAM] unsigned char 
  6996 ;; Return value:  Size  Location     Type
  6997 ;;                  1    wreg      void 
  6998 ;; Registers used:
  6999 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7000 ;; Tracked objects:
  7001 ;;		On entry : 0/0
  7002 ;;		On exit  : 0/0
  7003 ;;		Unchanged: 0/0
  7004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7005 ;;      Params:         0       0       0       0       0       0       0
  7006 ;;      Locals:         1       0       0       0       0       0       0
  7007 ;;      Temps:          6       0       0       0       0       0       0
  7008 ;;      Totals:         7       0       0       0       0       0       0
  7009 ;;Total ram usage:        7 bytes
  7010 ;; Hardware stack levels used:    1
  7011 ;; Hardware stack levels required when called:    3
  7012 ;; This function calls:
  7013 ;;		_increaseStep
  7014 ;;		_retPeriod
  7015 ;;		_setThermRel
  7016 ;;		_setTouchRel
  7017 ;;		_toggleStep
  7018 ;;		_whatsTM0Limit
  7019 ;;		_writeTM0
  7020 ;;		i2_storeData
  7021 ;; This function is called by:
  7022 ;;		Interrupt level 2
  7023 ;; This function uses a non-reentrant model
  7024 ;;
  7025                           
  7026                           	psect	intcode
  7027  000008                     __pintcode:
  7028                           	callstack 0
  7029  000008                     _isr:
  7030                           	callstack 0
  7031  000008  FFFF               	dw	65535	; assembler added errata NOP
  7032                           
  7033                           ;incstack = 0
  7034  00000A  826E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7035  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  7036  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  7037  000014  CFF3 F00F          	movff	prodl,??_isr+4
  7038  000018  CFF4 F010          	movff	prodh,??_isr+5
  7039  00001C                     
  7040                           ;interrupt.c: 18:     static unsigned int single_cycle = 0;;interrupt.c: 19:     static 
      +                          unsigned char tm0Count = 0;;interrupt.c: 20:     static unsigned char completeStep = 0;;
      +                          interrupt.c: 23:     if(INTCONbits.T0IF){
  7041  00001C  A4F2               	btfss	242,2,c	;volatile
  7042  00001E  EF13  F000         	goto	i2u237_41
  7043  000022  EF16  F000         	goto	i2u237_40
  7044  000026                     i2u237_41:
  7045  000026  FFFF               	dw	65535	; assembler added errata NOP
  7046  000028  EF2C  F000         	goto	i2l3334
  7047  00002C                     i2u237_40:
  7048  00002C  FFFF               	dw	65535	; assembler added errata NOP
  7049  00002E                     
  7050                           ;interrupt.c: 24:         INTCONbits.T0IF = 0;
  7051  00002E  94F2               	bcf	242,2,c	;volatile
  7052  000030                     
  7053                           ;interrupt.c: 27:         tm0Count++;
  7054  000030  2A63               	incf	isr@tm0Count^0,f,c
  7055  000032                     
  7056                           ;interrupt.c: 29:         if(tm0Count >= whatsTM0Limit()){
  7057  000032  ECD6  F012         	call	_whatsTM0Limit	;wreg free
  7058  000036  6E0B               	movwf	??_isr^0,c
  7059  000038  500B               	movf	??_isr^0,w,c
  7060  00003A  5C63               	subwf	isr@tm0Count^0,w,c
  7061  00003C  A0D8               	btfss	status,0,c
  7062  00003E  EF23  F000         	goto	i2u238_41
  7063  000042  EF26  F000         	goto	i2u238_40
  7064  000046                     i2u238_41:
  7065  000046  FFFF               	dw	65535	; assembler added errata NOP
  7066  000048  EF2C  F000         	goto	i2l3334
  7067  00004C                     i2u238_40:
  7068  00004C  FFFF               	dw	65535	; assembler added errata NOP
  7069  00004E                     
  7070                           ;interrupt.c: 30:             T0CONbits.TMR0ON = 0;
  7071  00004E  9ED5               	bcf	213,7,c	;volatile
  7072  000050                     
  7073                           ;interrupt.c: 31:             tm0Count = 0;
  7074  000050  0E00               	movlw	0
  7075  000052  6E63               	movwf	isr@tm0Count^0,c
  7076  000054                     
  7077                           ;interrupt.c: 32:             writeTM0();
  7078  000054  EC7A  F012         	call	_writeTM0	;wreg free
  7079  000058                     i2l3334:
  7080  000058  FFFF               	dw	65535	; assembler added errata NOP
  7081                           
  7082                           ;interrupt.c: 37:     if(PIR1bits.TMR2IF){
  7083  00005A  A29E               	btfss	158,1,c	;volatile
  7084  00005C  EF32  F000         	goto	i2u239_41
  7085  000060  EF35  F000         	goto	i2u239_40
  7086  000064                     i2u239_41:
  7087  000064  FFFF               	dw	65535	; assembler added errata NOP
  7088  000066  EF63  F000         	goto	i2l3354
  7089  00006A                     i2u239_40:
  7090  00006A  FFFF               	dw	65535	; assembler added errata NOP
  7091  00006C                     
  7092                           ;interrupt.c: 38:         PIR1bits.TMR2IF = 0;
  7093  00006C  929E               	bcf	158,1,c	;volatile
  7094  00006E                     
  7095                           ;interrupt.c: 39:         single_cycle++;
  7096  00006E  4A51               	infsnz	isr@single_cycle^0,f,c
  7097  000070  2A52               	incf	(isr@single_cycle+1)^0,f,c
  7098  000072                     
  7099                           ;interrupt.c: 42:         if(single_cycle > retPeriod()){
  7100  000072  EC81  F012         	call	_retPeriod	;wreg free
  7101  000076  5051               	movf	isr@single_cycle^0,w,c
  7102  000078  5C01               	subwf	?_retPeriod^0,w,c
  7103  00007A  5052               	movf	(isr@single_cycle+1)^0,w,c
  7104  00007C  5802               	subwfb	(?_retPeriod+1)^0,w,c
  7105  00007E  B0D8               	btfsc	status,0,c
  7106  000080  EF44  F000         	goto	i2u240_41
  7107  000084  EF47  F000         	goto	i2u240_40
  7108  000088                     i2u240_41:
  7109  000088  FFFF               	dw	65535	; assembler added errata NOP
  7110  00008A  EF63  F000         	goto	i2l3354
  7111  00008E                     i2u240_40:
  7112  00008E  FFFF               	dw	65535	; assembler added errata NOP
  7113  000090                     
  7114                           ;interrupt.c: 43:             completeStep++;
  7115  000090  2A62               	incf	isr@completeStep^0,f,c
  7116  000092                     
  7117                           ;interrupt.c: 46:             if(completeStep != 0 && !(completeStep % 2)){
  7118  000092  5062               	movf	isr@completeStep^0,w,c
  7119  000094  B4D8               	btfsc	status,2,c
  7120  000096  EF4F  F000         	goto	i2u241_41
  7121  00009A  EF52  F000         	goto	i2u241_40
  7122  00009E                     i2u241_41:
  7123  00009E  FFFF               	dw	65535	; assembler added errata NOP
  7124  0000A0  EF60  F000         	goto	i2l3352
  7125  0000A4                     i2u241_40:
  7126  0000A4  FFFF               	dw	65535	; assembler added errata NOP
  7127  0000A6  B062               	btfsc	isr@completeStep^0,0,c
  7128  0000A8  EF58  F000         	goto	i2u242_41
  7129  0000AC  EF5B  F000         	goto	i2u242_40
  7130  0000B0                     i2u242_41:
  7131  0000B0  FFFF               	dw	65535	; assembler added errata NOP
  7132  0000B2  EF60  F000         	goto	i2l3352
  7133  0000B6                     i2u242_40:
  7134  0000B6  FFFF               	dw	65535	; assembler added errata NOP
  7135  0000B8                     
  7136                           ;interrupt.c: 48:                 completeStep = 0;
  7137  0000B8  0E00               	movlw	0
  7138  0000BA  6E62               	movwf	isr@completeStep^0,c
  7139  0000BC                     
  7140                           ;interrupt.c: 51:                 increaseStep();
  7141  0000BC  ECDA  F012         	call	_increaseStep	;wreg free
  7142  0000C0                     i2l3352:
  7143  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  7144                           
  7145                           ;interrupt.c: 56:             toggleStep();
  7146  0000C2  ECB3  F012         	call	_toggleStep	;wreg free
  7147  0000C6                     i2l3354:
  7148  0000C6  FFFF               	dw	65535	; assembler added errata NOP
  7149                           
  7150                           ;interrupt.c: 61:     if(PIR1bits.ADIF){
  7151  0000C8  AC9E               	btfss	158,6,c	;volatile
  7152  0000CA  EF69  F000         	goto	i2u243_41
  7153  0000CE  EF6C  F000         	goto	i2u243_40
  7154  0000D2                     i2u243_41:
  7155  0000D2  FFFF               	dw	65535	; assembler added errata NOP
  7156  0000D4  EF99  F000         	goto	i2l3366
  7157  0000D8                     i2u243_40:
  7158  0000D8  FFFF               	dw	65535	; assembler added errata NOP
  7159  0000DA                     
  7160                           ;interrupt.c: 62:         PIR1bits.ADIF = 0;
  7161  0000DA  9C9E               	bcf	158,6,c	;volatile
  7162                           
  7163                           ;interrupt.c: 65:         ADC_res = ADRESL;
  7164  0000DC  CFC3 F053          	movff	4035,_ADC_res	;volatile
  7165  0000E0  6A54               	clrf	(_ADC_res+1)^0,c
  7166  0000E2                     
  7167                           ;interrupt.c: 66:         ADC_res |= (ADRESH << 8);
  7168  0000E2  50C4               	movf	196,w,c	;volatile
  7169  0000E4  6E0C               	movwf	(??_isr+1)^0,c
  7170  0000E6  6A0B               	clrf	??_isr^0,c
  7171  0000E8  500B               	movf	??_isr^0,w,c
  7172  0000EA  1253               	iorwf	_ADC_res^0,f,c
  7173  0000EC  500C               	movf	(??_isr+1)^0,w,c
  7174  0000EE  1254               	iorwf	(_ADC_res+1)^0,f,c
  7175                           
  7176                           ;interrupt.c: 69:         if(ADC_res > therm_pressure){
  7177  0000F0  0453               	decf	_ADC_res^0,w,c
  7178  0000F2  0E04               	movlw	4
  7179  0000F4  5854               	subwfb	(_ADC_res+1)^0,w,c
  7180  0000F6  A0D8               	btfss	status,0,c
  7181  0000F8  EF80  F000         	goto	i2u244_41
  7182  0000FC  EF83  F000         	goto	i2u244_40
  7183  000100                     i2u244_41:
  7184  000100  FFFF               	dw	65535	; assembler added errata NOP
  7185  000102  EF8A  F000         	goto	i2l3362
  7186  000106                     i2u244_40:
  7187  000106  FFFF               	dw	65535	; assembler added errata NOP
  7188  000108                     
  7189                           ;interrupt.c: 71:             setTouchRel();
  7190  000108  ECB8  F012         	call	_setTouchRel	;wreg free
  7191                           
  7192                           ;interrupt.c: 72:             setThermRel();
  7193  00010C  ECBD  F012         	call	_setThermRel	;wreg free
  7194                           
  7195                           ;interrupt.c: 73:         }else if(ADC_res > touch_pressure){
  7196  000110  EF99  F000         	goto	i2l3366
  7197  000114                     i2l3362:
  7198  000114  FFFF               	dw	65535	; assembler added errata NOP
  7199  000116  0453               	decf	_ADC_res^0,w,c
  7200  000118  0E02               	movlw	2
  7201  00011A  5854               	subwfb	(_ADC_res+1)^0,w,c
  7202  00011C  A0D8               	btfss	status,0,c
  7203  00011E  EF93  F000         	goto	i2u245_41
  7204  000122  EF96  F000         	goto	i2u245_40
  7205  000126                     i2u245_41:
  7206  000126  FFFF               	dw	65535	; assembler added errata NOP
  7207  000128  EF99  F000         	goto	i2l3366
  7208  00012C                     i2u245_40:
  7209  00012C  FFFF               	dw	65535	; assembler added errata NOP
  7210  00012E                     
  7211                           ;interrupt.c: 75:             setTouchRel();
  7212  00012E  ECB8  F012         	call	_setTouchRel	;wreg free
  7213  000132                     i2l3366:
  7214  000132  FFFF               	dw	65535	; assembler added errata NOP
  7215                           
  7216                           ;interrupt.c: 80:     if(PIR1bits.RC1IF){
  7217  000134  AA9E               	btfss	158,5,c	;volatile
  7218  000136  EF9F  F000         	goto	i2u246_41
  7219  00013A  EFA2  F000         	goto	i2u246_40
  7220  00013E                     i2u246_41:
  7221  00013E  FFFF               	dw	65535	; assembler added errata NOP
  7222  000140  EFA9  F000         	goto	i2l476
  7223  000144                     i2u246_40:
  7224  000144  FFFF               	dw	65535	; assembler added errata NOP
  7225  000146                     
  7226                           ;interrupt.c: 81:         PIR1bits.RC1IF = 0;
  7227  000146  9A9E               	bcf	158,5,c	;volatile
  7228                           
  7229                           ;interrupt.c: 84:         unsigned char temp = RCREG1;
  7230  000148  CFAE F011          	movff	4014,isr@temp	;volatile
  7231  00014C                     
  7232                           ;interrupt.c: 86:         storeData(temp);
  7233  00014C  5011               	movf	isr@temp^0,w,c
  7234  00014E  EC3B  F00B         	call	i2_storeData
  7235  000152                     i2l476:
  7236  000152  FFFF               	dw	65535	; assembler added errata NOP
  7237  000154  C010  FFF4         	movff	??_isr+5,prodh
  7238  000158  C00F  FFF3         	movff	??_isr+4,prodl
  7239  00015C  C00E  FFDA         	movff	??_isr+3,fsr2h
  7240  000160  C00D  FFD9         	movff	??_isr+2,fsr2l
  7241  000164  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7242  000166  0011               	retfie		f
  7243  000168  FFFF               	dw	65535	; errata NOP
  7244  00016A                     __end_of_isr:
  7245                           	callstack 0
  7246                           
  7247 ;; *************** function i2_storeData *****************
  7248 ;; Defined at:
  7249 ;;		line 131 in file "usart.c"
  7250 ;; Parameters:    Size  Location     Type
  7251 ;;  data            1    wreg     unsigned char 
  7252 ;; Auto vars:     Size  Location     Type
  7253 ;;  data            1    9[COMRAM] unsigned char 
  7254 ;; Return value:  Size  Location     Type
  7255 ;;                  1    wreg      void 
  7256 ;; Registers used:
  7257 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7258 ;; Tracked objects:
  7259 ;;		On entry : 0/0
  7260 ;;		On exit  : 0/0
  7261 ;;		Unchanged: 0/0
  7262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7263 ;;      Params:         0       0       0       0       0       0       0
  7264 ;;      Locals:         1       0       0       0       0       0       0
  7265 ;;      Temps:          2       0       0       0       0       0       0
  7266 ;;      Totals:         3       0       0       0       0       0       0
  7267 ;;Total ram usage:        3 bytes
  7268 ;; Hardware stack levels used:    1
  7269 ;; Hardware stack levels required when called:    2
  7270 ;; This function calls:
  7271 ;;		i2_printError
  7272 ;; This function is called by:
  7273 ;;		_isr
  7274 ;; This function uses a non-reentrant model
  7275 ;;
  7276                           
  7277                           	psect	text45
  7278  001676                     __ptext45:
  7279                           	callstack 0
  7280  001676                     i2_storeData:
  7281                           	callstack 0
  7282  001676  FFFF               	dw	65535	; assembler added errata NOP
  7283                           
  7284                           ;incstack = 0
  7285                           ;i2storeData@data stored from wreg
  7286  001678  6E0A               	movwf	i2storeData@data^0,c
  7287  00167A                     
  7288                           ;usart.c: 133:     static unsigned char counter = 0;;usart.c: 134:     static unsigned c
      +                          har mexLength = 5;;usart.c: 135:     static unsigned char command;;usart.c: 136:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 140:     receivedMex[counter] = data;
  7289  00167A  0E45               	movlw	low storeData@receivedMex
  7290  00167C  245E               	addwf	storeData@counter^0,w,c
  7291  00167E  6ED9               	movwf	fsr2l,c
  7292  001680  6ADA               	clrf	fsr2h,c
  7293  001682  0E00               	movlw	high storeData@receivedMex
  7294  001684  22DA               	addwfc	fsr2h,f,c
  7295  001686  C00A  FFDF         	movff	i2storeData@data,indf2
  7296  00168A                     
  7297                           ;usart.c: 142:     counter++;
  7298  00168A  2A5E               	incf	storeData@counter^0,f,c
  7299                           
  7300                           ;usart.c: 145:     switch(receivedMex[0]){
  7301  00168C  EF57  F00B         	goto	i2l3220
  7302  001690                     i2l3212:
  7303  001690  FFFF               	dw	65535	; assembler added errata NOP
  7304                           
  7305                           ;usart.c: 147:             mexLength = 5;
  7306  001692  0E05               	movlw	5
  7307  001694  6E6D               	movwf	storeData@mexLength^0,c
  7308                           
  7309                           ;usart.c: 148:             break;
  7310  001696  EF72  F00B         	goto	i2l3222
  7311  00169A                     i2l3214:
  7312  00169A  FFFF               	dw	65535	; assembler added errata NOP
  7313                           
  7314                           ;usart.c: 150:             mexLength = 9;
  7315  00169C  0E09               	movlw	9
  7316  00169E  6E6D               	movwf	storeData@mexLength^0,c
  7317                           
  7318                           ;usart.c: 151:             break;
  7319  0016A0  EF72  F00B         	goto	i2l3222
  7320  0016A4                     i2l3216:
  7321  0016A4  FFFF               	dw	65535	; assembler added errata NOP
  7322                           
  7323                           ;usart.c: 153:             mexLength = 1;
  7324  0016A6  0E01               	movlw	1
  7325  0016A8  6E6D               	movwf	storeData@mexLength^0,c
  7326                           
  7327                           ;usart.c: 154:             break;
  7328  0016AA  EF72  F00B         	goto	i2l3222
  7329  0016AE                     i2l3220:
  7330  0016AE  FFFF               	dw	65535	; assembler added errata NOP
  7331  0016B0  5045               	movf	storeData@receivedMex^0,w,c
  7332  0016B2  6E08               	movwf	??i2_storeData^0,c
  7333  0016B4  6A09               	clrf	(??i2_storeData+1)^0,c
  7334                           
  7335                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7336                           ; Switch size 1, requested type "simple"
  7337                           ; Number of cases is 1, Range of values is 0 to 0
  7338                           ; switch strategies available:
  7339                           ; Name         Instructions Cycles
  7340                           ; simple_byte            4     3 (average)
  7341                           ;	Chosen strategy is simple_byte
  7342  0016B6  5009               	movf	(??i2_storeData+1)^0,w,c
  7343  0016B8  0A00               	xorlw	0	; case 0
  7344  0016BA  B4D8               	btfsc	status,2,c
  7345  0016BC  EF62  F00B         	goto	i2l4548
  7346  0016C0  EF72  F00B         	goto	i2l3222
  7347  0016C4                     i2l4548:
  7348  0016C4  FFFF               	dw	65535	; assembler added errata NOP
  7349                           
  7350                           ; Switch size 1, requested type "simple"
  7351                           ; Number of cases is 3, Range of values is 0 to 2
  7352                           ; switch strategies available:
  7353                           ; Name         Instructions Cycles
  7354                           ; simple_byte           10     6 (average)
  7355                           ;	Chosen strategy is simple_byte
  7356  0016C6  5008               	movf	??i2_storeData^0,w,c
  7357  0016C8  0A00               	xorlw	0	; case 0
  7358  0016CA  B4D8               	btfsc	status,2,c
  7359  0016CC  EF48  F00B         	goto	i2l3212
  7360  0016D0  0A01               	xorlw	1	; case 1
  7361  0016D2  B4D8               	btfsc	status,2,c
  7362  0016D4  EF4D  F00B         	goto	i2l3214
  7363  0016D8  0A03               	xorlw	3	; case 2
  7364  0016DA  B4D8               	btfsc	status,2,c
  7365  0016DC  EF52  F00B         	goto	i2l3216
  7366  0016E0  EF72  F00B         	goto	i2l3222
  7367  0016E4                     i2l3222:
  7368  0016E4  FFFF               	dw	65535	; assembler added errata NOP
  7369                           
  7370                           ;usart.c: 161:     if(counter >= mexLength){
  7371  0016E6  506D               	movf	storeData@mexLength^0,w,c
  7372  0016E8  5C5E               	subwf	storeData@counter^0,w,c
  7373  0016EA  A0D8               	btfss	status,0,c
  7374  0016EC  EF7A  F00B         	goto	i2u232_41
  7375  0016F0  EF7D  F00B         	goto	i2u232_40
  7376  0016F4                     i2u232_41:
  7377  0016F4  FFFF               	dw	65535	; assembler added errata NOP
  7378  0016F6  EFE9  F00B         	goto	i2l575
  7379  0016FA                     i2u232_40:
  7380  0016FA  FFFF               	dw	65535	; assembler added errata NOP
  7381  0016FC                     
  7382                           ;usart.c: 162:         counter = 0;
  7383  0016FC  0E00               	movlw	0
  7384  0016FE  6E5E               	movwf	storeData@counter^0,c
  7385                           
  7386                           ;usart.c: 166:         switch(receivedMex[0]){
  7387  001700  EFCE  F00B         	goto	i2l3238
  7388  001704                     i2l3226:
  7389  001704  FFFF               	dw	65535	; assembler added errata NOP
  7390                           
  7391                           ;usart.c: 168:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  7392  001706  5061               	movf	_dataCounter^0,w,c
  7393  001708  0D04               	mullw	4
  7394  00170A  0ED8               	movlw	low _dataSequence
  7395  00170C  24F3               	addwf	243,w,c
  7396  00170E  6ED9               	movwf	fsr2l,c
  7397  001710  0E00               	movlw	high _dataSequence
  7398  001712  20F4               	addwfc	prodh,w,c
  7399  001714  6EDA               	movwf	fsr2h,c
  7400  001716  C046  FFDF         	movff	storeData@receivedMex+1,indf2
  7401                           
  7402                           ;usart.c: 169:                 dataSequence[dataCounter].posX = receivedMex[2];
  7403  00171A  5061               	movf	_dataCounter^0,w,c
  7404  00171C  0D04               	mullw	4
  7405  00171E  0ED9               	movlw	low (_dataSequence+1)
  7406  001720  24F3               	addwf	243,w,c
  7407  001722  6ED9               	movwf	fsr2l,c
  7408  001724  0E00               	movlw	high (_dataSequence+1)
  7409  001726  20F4               	addwfc	prodh,w,c
  7410  001728  6EDA               	movwf	fsr2h,c
  7411  00172A  C047  FFDF         	movff	storeData@receivedMex+2,indf2
  7412                           
  7413                           ;usart.c: 170:                 dataSequence[dataCounter].posY = receivedMex[3];
  7414  00172E  5061               	movf	_dataCounter^0,w,c
  7415  001730  0D04               	mullw	4
  7416  001732  0EDA               	movlw	low (_dataSequence+2)
  7417  001734  24F3               	addwf	243,w,c
  7418  001736  6ED9               	movwf	fsr2l,c
  7419  001738  0E00               	movlw	high (_dataSequence+2)
  7420  00173A  20F4               	addwfc	prodh,w,c
  7421  00173C  6EDA               	movwf	fsr2h,c
  7422  00173E  C048  FFDF         	movff	storeData@receivedMex+3,indf2
  7423                           
  7424                           ;usart.c: 171:                 dataSequence[dataCounter].rotation = receivedMex[4];
  7425  001742  5061               	movf	_dataCounter^0,w,c
  7426  001744  0D04               	mullw	4
  7427  001746  0EDB               	movlw	low (_dataSequence+3)
  7428  001748  24F3               	addwf	243,w,c
  7429  00174A  6ED9               	movwf	fsr2l,c
  7430  00174C  0E00               	movlw	high (_dataSequence+3)
  7431  00174E  20F4               	addwfc	prodh,w,c
  7432  001750  6EDA               	movwf	fsr2h,c
  7433  001752  C049  FFDF         	movff	storeData@receivedMex+4,indf2
  7434  001756                     
  7435                           ;usart.c: 173:                 dataCounter++;
  7436  001756  2A61               	incf	_dataCounter^0,f,c
  7437                           
  7438                           ;usart.c: 174:                 break;
  7439  001758  EFE9  F00B         	goto	i2l575
  7440  00175C                     i2l572:
  7441  00175C  FFFF               	dw	65535	; assembler added errata NOP
  7442                           
  7443                           ;usart.c: 177:                 newSequenceData.L = receivedMex[1];
  7444  00175E  C046  F0EC         	movff	storeData@receivedMex+1,_newSequenceData
  7445                           
  7446                           ;usart.c: 178:                 newSequenceData.W = receivedMex[2];
  7447  001762  C047  F0ED         	movff	storeData@receivedMex+2,_newSequenceData+1
  7448                           
  7449                           ;usart.c: 179:                 newSequenceData.init_posX = receivedMex[3];
  7450  001766  C048  F0EE         	movff	storeData@receivedMex+3,_newSequenceData+2
  7451                           
  7452                           ;usart.c: 180:                 newSequenceData.init_posY = receivedMex[4];
  7453  00176A  C049  F0EF         	movff	storeData@receivedMex+4,_newSequenceData+3
  7454                           
  7455                           ;usart.c: 181:                 newSequenceData.init_rot = receivedMex[5];
  7456  00176E  C04A  F0F0         	movff	storeData@receivedMex+5,_newSequenceData+4
  7457                           
  7458                           ;usart.c: 182:                 newSequenceData.end_posX = receivedMex[6];
  7459  001772  C04B  F0F1         	movff	storeData@receivedMex+6,_newSequenceData+5
  7460                           
  7461                           ;usart.c: 183:                 newSequenceData.end_posY = receivedMex[7];
  7462  001776  C04C  F0F2         	movff	storeData@receivedMex+7,_newSequenceData+6
  7463                           
  7464                           ;usart.c: 184:                 newSequenceData.end_rot = receivedMex[8];
  7465  00177A  C04D  F0F3         	movff	storeData@receivedMex+8,_newSequenceData+7
  7466  00177E                     
  7467                           ;usart.c: 186:                 _newSequence = 1;
  7468  00177E  0E01               	movlw	1
  7469  001780  6E5F               	movwf	__newSequence^0,c
  7470                           
  7471                           ;usart.c: 187:                 break;
  7472  001782  EFE9  F00B         	goto	i2l575
  7473  001786                     i2l3232:
  7474  001786  FFFF               	dw	65535	; assembler added errata NOP
  7475                           
  7476                           ;usart.c: 190:                 _fatalError = 1;
  7477  001788  0E01               	movlw	1
  7478  00178A  6E60               	movwf	__fatalError^0,c
  7479                           
  7480                           ;usart.c: 191:                 break;
  7481  00178C  EFE9  F00B         	goto	i2l575
  7482  001790                     i2l3234:
  7483  001790  FFFF               	dw	65535	; assembler added errata NOP
  7484                           
  7485                           ;usart.c: 194:                 printError(8);
  7486  001792  0E08               	movlw	8
  7487  001794  EC15  F00D         	call	i2_printError
  7488                           
  7489                           ;usart.c: 195:                 break;
  7490  001798  EFE9  F00B         	goto	i2l575
  7491  00179C                     i2l3238:
  7492  00179C  FFFF               	dw	65535	; assembler added errata NOP
  7493  00179E  5045               	movf	storeData@receivedMex^0,w,c
  7494  0017A0  6E08               	movwf	??i2_storeData^0,c
  7495  0017A2  6A09               	clrf	(??i2_storeData+1)^0,c
  7496                           
  7497                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7498                           ; Switch size 1, requested type "simple"
  7499                           ; Number of cases is 1, Range of values is 0 to 0
  7500                           ; switch strategies available:
  7501                           ; Name         Instructions Cycles
  7502                           ; simple_byte            4     3 (average)
  7503                           ;	Chosen strategy is simple_byte
  7504  0017A4  5009               	movf	(??i2_storeData+1)^0,w,c
  7505  0017A6  0A00               	xorlw	0	; case 0
  7506  0017A8  B4D8               	btfsc	status,2,c
  7507  0017AA  EFD9  F00B         	goto	i2l4550
  7508  0017AE  EFC8  F00B         	goto	i2l3234
  7509  0017B2                     i2l4550:
  7510  0017B2  FFFF               	dw	65535	; assembler added errata NOP
  7511                           
  7512                           ; Switch size 1, requested type "simple"
  7513                           ; Number of cases is 3, Range of values is 0 to 2
  7514                           ; switch strategies available:
  7515                           ; Name         Instructions Cycles
  7516                           ; simple_byte           10     6 (average)
  7517                           ;	Chosen strategy is simple_byte
  7518  0017B4  5008               	movf	??i2_storeData^0,w,c
  7519  0017B6  0A00               	xorlw	0	; case 0
  7520  0017B8  B4D8               	btfsc	status,2,c
  7521  0017BA  EF82  F00B         	goto	i2l3226
  7522  0017BE  0A01               	xorlw	1	; case 1
  7523  0017C0  B4D8               	btfsc	status,2,c
  7524  0017C2  EFAE  F00B         	goto	i2l572
  7525  0017C6  0A03               	xorlw	3	; case 2
  7526  0017C8  B4D8               	btfsc	status,2,c
  7527  0017CA  EFC3  F00B         	goto	i2l3232
  7528  0017CE  EFC8  F00B         	goto	i2l3234
  7529  0017D2                     i2l575:
  7530  0017D2  FFFF               	dw	65535	; assembler added errata NOP
  7531  0017D4  0012               	return		;funcret
  7532  0017D6  FFFF               	dw	65535	; errata NOP
  7533  0017D8                     __end_ofi2_storeData:
  7534                           	callstack 0
  7535                           
  7536 ;; *************** function i2_printError *****************
  7537 ;; Defined at:
  7538 ;;		line 53 in file "usart.c"
  7539 ;; Parameters:    Size  Location     Type
  7540 ;;  errCode         1    wreg     unsigned char 
  7541 ;; Auto vars:     Size  Location     Type
  7542 ;;  errCode         1    6[COMRAM] unsigned char 
  7543 ;; Return value:  Size  Location     Type
  7544 ;;                  1    wreg      void 
  7545 ;; Registers used:
  7546 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7547 ;; Tracked objects:
  7548 ;;		On entry : 0/0
  7549 ;;		On exit  : 0/0
  7550 ;;		Unchanged: 0/0
  7551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7552 ;;      Params:         0       0       0       0       0       0       0
  7553 ;;      Locals:         1       0       0       0       0       0       0
  7554 ;;      Temps:          2       0       0       0       0       0       0
  7555 ;;      Totals:         3       0       0       0       0       0       0
  7556 ;;Total ram usage:        3 bytes
  7557 ;; Hardware stack levels used:    1
  7558 ;; Hardware stack levels required when called:    1
  7559 ;; This function calls:
  7560 ;;		i2_uartTx
  7561 ;; This function is called by:
  7562 ;;		i2_storeData
  7563 ;; This function uses a non-reentrant model
  7564 ;;
  7565                           
  7566                           	psect	text46
  7567  001A2A                     __ptext46:
  7568                           	callstack 0
  7569  001A2A                     i2_printError:
  7570                           	callstack 0
  7571  001A2A  FFFF               	dw	65535	; assembler added errata NOP
  7572                           
  7573                           ;incstack = 0
  7574                           ;i2printError@errCode stored from wreg
  7575  001A2C  6E07               	movwf	i2printError@errCode^0,c
  7576  001A2E                     
  7577                           ;usart.c: 55:     switch(errCode){
  7578  001A2E  EF71  F00D         	goto	i2l2958
  7579  001A32                     i2l2940:
  7580  001A32  FFFF               	dw	65535	; assembler added errata NOP
  7581                           
  7582                           ;usart.c: 57:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  7583  001A34  0EA4               	movlw	low _errString_Feed
  7584  001A36  6E01               	movwf	i2uartTx@ptr^0,c
  7585  001A38  0E00               	movlw	high _errString_Feed
  7586  001A3A  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7587  001A3C  0E1D               	movlw	29
  7588  001A3E  6E03               	movwf	i2uartTx@length^0,c
  7589  001A40  ECA3  F011         	call	i2_uartTx	;wreg free
  7590                           
  7591                           ;usart.c: 58:             break;
  7592  001A44  EFA0  F00D         	goto	i2l531
  7593  001A48                     i2l2942:
  7594  001A48  FFFF               	dw	65535	; assembler added errata NOP
  7595                           
  7596                           ;usart.c: 60:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  7597  001A4A  0E5C               	movlw	low _errString_ZEND
  7598  001A4C  6E01               	movwf	i2uartTx@ptr^0,c
  7599  001A4E  0E01               	movlw	high _errString_ZEND
  7600  001A50  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7601  001A52  0E28               	movlw	40
  7602  001A54  6E03               	movwf	i2uartTx@length^0,c
  7603  001A56  ECA3  F011         	call	i2_uartTx	;wreg free
  7604                           
  7605                           ;usart.c: 61:             break;
  7606  001A5A  EFA0  F00D         	goto	i2l531
  7607  001A5E                     i2l2944:
  7608  001A5E  FFFF               	dw	65535	; assembler added errata NOP
  7609                           
  7610                           ;usart.c: 63:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  7611  001A60  0E84               	movlw	low _errString_Reset
  7612  001A62  6E01               	movwf	i2uartTx@ptr^0,c
  7613  001A64  0E01               	movlw	high _errString_Reset
  7614  001A66  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7615  001A68  0E27               	movlw	39
  7616  001A6A  6E03               	movwf	i2uartTx@length^0,c
  7617  001A6C  ECA3  F011         	call	i2_uartTx	;wreg free
  7618                           
  7619                           ;usart.c: 64:             break;
  7620  001A70  EFA0  F00D         	goto	i2l531
  7621  001A74                     i2l2946:
  7622  001A74  FFFF               	dw	65535	; assembler added errata NOP
  7623                           
  7624                           ;usart.c: 66:             uartTx(&errString_Point[0], sizeof(errString_Point));
  7625  001A76  0E34               	movlw	low _errString_Point
  7626  001A78  6E01               	movwf	i2uartTx@ptr^0,c
  7627  001A7A  0E01               	movlw	high _errString_Point
  7628  001A7C  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7629  001A7E  0E28               	movlw	40
  7630  001A80  6E03               	movwf	i2uartTx@length^0,c
  7631  001A82  ECA3  F011         	call	i2_uartTx	;wreg free
  7632                           
  7633                           ;usart.c: 67:             break;
  7634  001A86  EFA0  F00D         	goto	i2l531
  7635  001A8A                     i2l2948:
  7636  001A8A  FFFF               	dw	65535	; assembler added errata NOP
  7637                           
  7638                           ;usart.c: 69:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  7639  001A8C  0E84               	movlw	low _errString_Bound
  7640  001A8E  6E01               	movwf	i2uartTx@ptr^0,c
  7641  001A90  0E00               	movlw	high _errString_Bound
  7642  001A92  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7643  001A94  0E20               	movlw	32
  7644  001A96  6E03               	movwf	i2uartTx@length^0,c
  7645  001A98  ECA3  F011         	call	i2_uartTx	;wreg free
  7646                           
  7647                           ;usart.c: 70:             break;
  7648  001A9C  EFA0  F00D         	goto	i2l531
  7649  001AA0                     i2l2950:
  7650  001AA0  FFFF               	dw	65535	; assembler added errata NOP
  7651                           
  7652                           ;usart.c: 72:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  7653  001AA2  0E00               	movlw	low _errString_PointZ
  7654  001AA4  6E01               	movwf	i2uartTx@ptr^0,c
  7655  001AA6  0E01               	movlw	high _errString_PointZ
  7656  001AA8  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7657  001AAA  0E34               	movlw	52
  7658  001AAC  6E03               	movwf	i2uartTx@length^0,c
  7659  001AAE  ECA3  F011         	call	i2_uartTx	;wreg free
  7660                           
  7661                           ;usart.c: 73:             break;
  7662  001AB2  EFA0  F00D         	goto	i2l531
  7663  001AB6                     i2l2952:
  7664  001AB6  FFFF               	dw	65535	; assembler added errata NOP
  7665                           
  7666                           ;usart.c: 75:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  7667  001AB8  0EAB               	movlw	low _errString_Fatal
  7668  001ABA  6E01               	movwf	i2uartTx@ptr^0,c
  7669  001ABC  0E01               	movlw	high _errString_Fatal
  7670  001ABE  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7671  001AC0  0E26               	movlw	38
  7672  001AC2  6E03               	movwf	i2uartTx@length^0,c
  7673  001AC4  ECA3  F011         	call	i2_uartTx	;wreg free
  7674                           
  7675                           ;usart.c: 76:             break;
  7676  001AC8  EFA0  F00D         	goto	i2l531
  7677  001ACC                     i2l2954:
  7678  001ACC  FFFF               	dw	65535	; assembler added errata NOP
  7679                           
  7680                           ;usart.c: 78:             uartTx(&errString_Command[0], sizeof(errString_Command));
  7681  001ACE  0EC1               	movlw	low _errString_Command
  7682  001AD0  6E01               	movwf	i2uartTx@ptr^0,c
  7683  001AD2  0E00               	movlw	high _errString_Command
  7684  001AD4  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7685  001AD6  0E17               	movlw	23
  7686  001AD8  6E03               	movwf	i2uartTx@length^0,c
  7687  001ADA  ECA3  F011         	call	i2_uartTx	;wreg free
  7688                           
  7689                           ;usart.c: 79:             break;
  7690  001ADE  EFA0  F00D         	goto	i2l531
  7691  001AE2                     i2l2958:
  7692  001AE2  FFFF               	dw	65535	; assembler added errata NOP
  7693  001AE4  5007               	movf	i2printError@errCode^0,w,c
  7694  001AE6  6E05               	movwf	??i2_printError^0,c
  7695  001AE8  6A06               	clrf	(??i2_printError+1)^0,c
  7696                           
  7697                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7698                           ; Switch size 1, requested type "simple"
  7699                           ; Number of cases is 1, Range of values is 0 to 0
  7700                           ; switch strategies available:
  7701                           ; Name         Instructions Cycles
  7702                           ; simple_byte            4     3 (average)
  7703                           ;	Chosen strategy is simple_byte
  7704  001AEA  5006               	movf	(??i2_printError+1)^0,w,c
  7705  001AEC  0A00               	xorlw	0	; case 0
  7706  001AEE  B4D8               	btfsc	status,2,c
  7707  001AF0  EF7C  F00D         	goto	i2l4552
  7708  001AF4  EFA0  F00D         	goto	i2l531
  7709  001AF8                     i2l4552:
  7710  001AF8  FFFF               	dw	65535	; assembler added errata NOP
  7711                           
  7712                           ; Switch size 1, requested type "simple"
  7713                           ; Number of cases is 8, Range of values is 1 to 8
  7714                           ; switch strategies available:
  7715                           ; Name         Instructions Cycles
  7716                           ; simple_byte           25    13 (average)
  7717                           ;	Chosen strategy is simple_byte
  7718  001AFA  5005               	movf	??i2_printError^0,w,c
  7719  001AFC  0A01               	xorlw	1	; case 1
  7720  001AFE  B4D8               	btfsc	status,2,c
  7721  001B00  EF19  F00D         	goto	i2l2940
  7722  001B04  0A03               	xorlw	3	; case 2
  7723  001B06  B4D8               	btfsc	status,2,c
  7724  001B08  EF24  F00D         	goto	i2l2942
  7725  001B0C  0A01               	xorlw	1	; case 3
  7726  001B0E  B4D8               	btfsc	status,2,c
  7727  001B10  EF2F  F00D         	goto	i2l2944
  7728  001B14  0A07               	xorlw	7	; case 4
  7729  001B16  B4D8               	btfsc	status,2,c
  7730  001B18  EF3A  F00D         	goto	i2l2946
  7731  001B1C  0A01               	xorlw	1	; case 5
  7732  001B1E  B4D8               	btfsc	status,2,c
  7733  001B20  EF45  F00D         	goto	i2l2948
  7734  001B24  0A03               	xorlw	3	; case 6
  7735  001B26  B4D8               	btfsc	status,2,c
  7736  001B28  EF50  F00D         	goto	i2l2950
  7737  001B2C  0A01               	xorlw	1	; case 7
  7738  001B2E  B4D8               	btfsc	status,2,c
  7739  001B30  EF5B  F00D         	goto	i2l2952
  7740  001B34  0A0F               	xorlw	15	; case 8
  7741  001B36  B4D8               	btfsc	status,2,c
  7742  001B38  EF66  F00D         	goto	i2l2954
  7743  001B3C  EFA0  F00D         	goto	i2l531
  7744  001B40                     i2l531:
  7745  001B40  FFFF               	dw	65535	; assembler added errata NOP
  7746  001B42  0012               	return		;funcret
  7747  001B44  FFFF               	dw	65535	; errata NOP
  7748  001B46                     __end_ofi2_printError:
  7749                           	callstack 0
  7750                           
  7751 ;; *************** function i2_uartTx *****************
  7752 ;; Defined at:
  7753 ;;		line 221 in file "usart.c"
  7754 ;; Parameters:    Size  Location     Type
  7755 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  7756 ;;		 -> errString_Command(23), errString_Fatal(38), errString_PointZ(52), errString_Bound(32), 
  7757 ;;		 -> errString_Point(40), errString_Reset(39), errString_ZEND(40), errString_Feed(29), 
  7758 ;;  length          1    2[COMRAM] unsigned char 
  7759 ;; Auto vars:     Size  Location     Type
  7760 ;;  i               1    3[COMRAM] unsigned char 
  7761 ;; Return value:  Size  Location     Type
  7762 ;;                  1    wreg      void 
  7763 ;; Registers used:
  7764 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7765 ;; Tracked objects:
  7766 ;;		On entry : 0/0
  7767 ;;		On exit  : 0/0
  7768 ;;		Unchanged: 0/0
  7769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7770 ;;      Params:         3       0       0       0       0       0       0
  7771 ;;      Locals:         1       0       0       0       0       0       0
  7772 ;;      Temps:          0       0       0       0       0       0       0
  7773 ;;      Totals:         4       0       0       0       0       0       0
  7774 ;;Total ram usage:        4 bytes
  7775 ;; Hardware stack levels used:    1
  7776 ;; This function calls:
  7777 ;;		Nothing
  7778 ;; This function is called by:
  7779 ;;		i2_printError
  7780 ;; This function uses a non-reentrant model
  7781 ;;
  7782                           
  7783                           	psect	text47
  7784  002346                     __ptext47:
  7785                           	callstack 0
  7786  002346                     i2_uartTx:
  7787                           	callstack 0
  7788  002346  FFFF               	dw	65535	; assembler added errata NOP
  7789  002348                     
  7790                           ;usart.c: 221: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 222: {;usa
      +                          rt.c: 224:     for(char i = 1; i < length; i++){
  7791  002348  0E01               	movlw	1
  7792  00234A  6E04               	movwf	i2uartTx@i^0,c
  7793  00234C  EFBC  F011         	goto	i2l2630
  7794  002350                     i2l2626:
  7795  002350  FFFF               	dw	65535	; assembler added errata NOP
  7796                           
  7797                           ;usart.c: 226:         TXREG = *ptr;
  7798  002352  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  7799  002356  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  7800  00235A  50DF               	movf	indf2,w,c
  7801  00235C  6EAD               	movwf	173,c	;volatile
  7802  00235E                     i2l586:
  7803  00235E  FFFF               	dw	65535	; assembler added errata NOP
  7804  002360  A2AC               	btfss	172,1,c	;volatile
  7805  002362  EFB5  F011         	goto	i2u169_41
  7806  002366  EFB8  F011         	goto	i2u169_40
  7807  00236A                     i2u169_41:
  7808  00236A  FFFF               	dw	65535	; assembler added errata NOP
  7809  00236C  EFAF  F011         	goto	i2l586
  7810  002370                     i2u169_40:
  7811  002370  FFFF               	dw	65535	; assembler added errata NOP
  7812  002372                     
  7813                           ;usart.c: 230:         ptr++;
  7814  002372  4A01               	infsnz	i2uartTx@ptr^0,f,c
  7815  002374  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  7816                           
  7817                           ;usart.c: 231:     }
  7818  002376  2A04               	incf	i2uartTx@i^0,f,c
  7819  002378                     i2l2630:
  7820  002378  FFFF               	dw	65535	; assembler added errata NOP
  7821  00237A  5003               	movf	i2uartTx@length^0,w,c
  7822  00237C  5C04               	subwf	i2uartTx@i^0,w,c
  7823  00237E  A0D8               	btfss	status,0,c
  7824  002380  EFC4  F011         	goto	i2u170_41
  7825  002384  EFC7  F011         	goto	i2u170_40
  7826  002388                     i2u170_41:
  7827  002388  FFFF               	dw	65535	; assembler added errata NOP
  7828  00238A  EFA8  F011         	goto	i2l2626
  7829  00238E                     i2u170_40:
  7830  00238E  FFFF               	dw	65535	; assembler added errata NOP
  7831  002390  0012               	return		;funcret
  7832  002392  FFFF               	dw	65535	; errata NOP
  7833  002394                     __end_ofi2_uartTx:
  7834                           	callstack 0
  7835                           
  7836 ;; *************** function _writeTM0 *****************
  7837 ;; Defined at:
  7838 ;;		line 21 in file "motors.c"
  7839 ;; Parameters:    Size  Location     Type
  7840 ;;		None
  7841 ;; Auto vars:     Size  Location     Type
  7842 ;;		None
  7843 ;; Return value:  Size  Location     Type
  7844 ;;                  1    wreg      void 
  7845 ;; Registers used:
  7846 ;;		wreg, status,2
  7847 ;; Tracked objects:
  7848 ;;		On entry : 0/0
  7849 ;;		On exit  : 0/0
  7850 ;;		Unchanged: 0/0
  7851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7852 ;;      Params:         0       0       0       0       0       0       0
  7853 ;;      Locals:         0       0       0       0       0       0       0
  7854 ;;      Temps:          0       0       0       0       0       0       0
  7855 ;;      Totals:         0       0       0       0       0       0       0
  7856 ;;Total ram usage:        0 bytes
  7857 ;; Hardware stack levels used:    1
  7858 ;; This function calls:
  7859 ;;		Nothing
  7860 ;; This function is called by:
  7861 ;;		_isr
  7862 ;; This function uses a non-reentrant model
  7863 ;;
  7864                           
  7865                           	psect	text48
  7866  0024F4                     __ptext48:
  7867                           	callstack 0
  7868  0024F4                     _writeTM0:
  7869                           	callstack 0
  7870  0024F4  FFFF               	dw	65535	; assembler added errata NOP
  7871  0024F6                     
  7872                           ;motors.c: 22:     tm0Error = 1;
  7873  0024F6  0E00               	movlw	0
  7874  0024F8  6E5C               	movwf	(_tm0Error+1)^0,c
  7875  0024FA  0E01               	movlw	1
  7876  0024FC  6E5B               	movwf	_tm0Error^0,c
  7877  0024FE  0012               	return		;funcret
  7878  002500  FFFF               	dw	65535	; errata NOP
  7879  002502                     __end_of_writeTM0:
  7880                           	callstack 0
  7881                           
  7882 ;; *************** function _whatsTM0Limit *****************
  7883 ;; Defined at:
  7884 ;;		line 35 in file "motors.c"
  7885 ;; Parameters:    Size  Location     Type
  7886 ;;		None
  7887 ;; Auto vars:     Size  Location     Type
  7888 ;;		None
  7889 ;; Return value:  Size  Location     Type
  7890 ;;                  1    wreg      unsigned char 
  7891 ;; Registers used:
  7892 ;;		wreg, status,2
  7893 ;; Tracked objects:
  7894 ;;		On entry : 0/0
  7895 ;;		On exit  : 0/0
  7896 ;;		Unchanged: 0/0
  7897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7898 ;;      Params:         0       0       0       0       0       0       0
  7899 ;;      Locals:         0       0       0       0       0       0       0
  7900 ;;      Temps:          0       0       0       0       0       0       0
  7901 ;;      Totals:         0       0       0       0       0       0       0
  7902 ;;Total ram usage:        0 bytes
  7903 ;; Hardware stack levels used:    1
  7904 ;; This function calls:
  7905 ;;		Nothing
  7906 ;; This function is called by:
  7907 ;;		_isr
  7908 ;; This function uses a non-reentrant model
  7909 ;;
  7910                           
  7911                           	psect	text49
  7912  0025AC                     __ptext49:
  7913                           	callstack 0
  7914  0025AC                     _whatsTM0Limit:
  7915                           	callstack 0
  7916  0025AC  FFFF               	dw	65535	; assembler added errata NOP
  7917  0025AE                     
  7918                           ;motors.c: 36:     return(tm0Limit);
  7919  0025AE  5068               	movf	_tm0Limit^0,w,c
  7920  0025B0  0012               	return		;funcret
  7921  0025B2  FFFF               	dw	65535	; errata NOP
  7922  0025B4                     __end_of_whatsTM0Limit:
  7923                           	callstack 0
  7924                           
  7925 ;; *************** function _toggleStep *****************
  7926 ;; Defined at:
  7927 ;;		line 80 in file "pwm.c"
  7928 ;; Parameters:    Size  Location     Type
  7929 ;;		None
  7930 ;; Auto vars:     Size  Location     Type
  7931 ;;		None
  7932 ;; Return value:  Size  Location     Type
  7933 ;;                  1    wreg      void 
  7934 ;; Registers used:
  7935 ;;		wreg, status,2
  7936 ;; Tracked objects:
  7937 ;;		On entry : 0/0
  7938 ;;		On exit  : 0/0
  7939 ;;		Unchanged: 0/0
  7940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7941 ;;      Params:         0       0       0       0       0       0       0
  7942 ;;      Locals:         0       0       0       0       0       0       0
  7943 ;;      Temps:          0       0       0       0       0       0       0
  7944 ;;      Totals:         0       0       0       0       0       0       0
  7945 ;;Total ram usage:        0 bytes
  7946 ;; Hardware stack levels used:    1
  7947 ;; This function calls:
  7948 ;;		Nothing
  7949 ;; This function is called by:
  7950 ;;		_isr
  7951 ;; This function uses a non-reentrant model
  7952 ;;
  7953                           
  7954                           	psect	text50
  7955  002566                     __ptext50:
  7956                           	callstack 0
  7957  002566                     _toggleStep:
  7958                           	callstack 0
  7959  002566  FFFF               	dw	65535	; assembler added errata NOP
  7960  002568                     
  7961                           ;pwm.c: 81:     stepToggle = 1;
  7962  002568  0E01               	movlw	1
  7963  00256A  6E66               	movwf	_stepToggle^0,c	;volatile
  7964  00256C  0012               	return		;funcret
  7965  00256E  FFFF               	dw	65535	; errata NOP
  7966  002570                     __end_of_toggleStep:
  7967                           	callstack 0
  7968                           
  7969 ;; *************** function _setTouchRel *****************
  7970 ;; Defined at:
  7971 ;;		line 86 in file "adc.c"
  7972 ;; Parameters:    Size  Location     Type
  7973 ;;		None
  7974 ;; Auto vars:     Size  Location     Type
  7975 ;;		None
  7976 ;; Return value:  Size  Location     Type
  7977 ;;                  1    wreg      void 
  7978 ;; Registers used:
  7979 ;;		wreg, status,2
  7980 ;; Tracked objects:
  7981 ;;		On entry : 0/0
  7982 ;;		On exit  : 0/0
  7983 ;;		Unchanged: 0/0
  7984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7985 ;;      Params:         0       0       0       0       0       0       0
  7986 ;;      Locals:         0       0       0       0       0       0       0
  7987 ;;      Temps:          0       0       0       0       0       0       0
  7988 ;;      Totals:         0       0       0       0       0       0       0
  7989 ;;Total ram usage:        0 bytes
  7990 ;; Hardware stack levels used:    1
  7991 ;; This function calls:
  7992 ;;		Nothing
  7993 ;; This function is called by:
  7994 ;;		_isr
  7995 ;; This function uses a non-reentrant model
  7996 ;;
  7997                           
  7998                           	psect	text51
  7999  002570                     __ptext51:
  8000                           	callstack 0
  8001  002570                     _setTouchRel:
  8002                           	callstack 0
  8003  002570  FFFF               	dw	65535	; assembler added errata NOP
  8004  002572                     
  8005                           ;adc.c: 87:     touch_rel = 1;
  8006  002572  0E01               	movlw	1
  8007  002574  6E65               	movwf	_touch_rel^0,c	;volatile
  8008  002576  0012               	return		;funcret
  8009  002578  FFFF               	dw	65535	; errata NOP
  8010  00257A                     __end_of_setTouchRel:
  8011                           	callstack 0
  8012                           
  8013 ;; *************** function _setThermRel *****************
  8014 ;; Defined at:
  8015 ;;		line 79 in file "adc.c"
  8016 ;; Parameters:    Size  Location     Type
  8017 ;;		None
  8018 ;; Auto vars:     Size  Location     Type
  8019 ;;		None
  8020 ;; Return value:  Size  Location     Type
  8021 ;;                  1    wreg      void 
  8022 ;; Registers used:
  8023 ;;		wreg, status,2
  8024 ;; Tracked objects:
  8025 ;;		On entry : 0/0
  8026 ;;		On exit  : 0/0
  8027 ;;		Unchanged: 0/0
  8028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8029 ;;      Params:         0       0       0       0       0       0       0
  8030 ;;      Locals:         0       0       0       0       0       0       0
  8031 ;;      Temps:          0       0       0       0       0       0       0
  8032 ;;      Totals:         0       0       0       0       0       0       0
  8033 ;;Total ram usage:        0 bytes
  8034 ;; Hardware stack levels used:    1
  8035 ;; This function calls:
  8036 ;;		Nothing
  8037 ;; This function is called by:
  8038 ;;		_isr
  8039 ;; This function uses a non-reentrant model
  8040 ;;
  8041                           
  8042                           	psect	text52
  8043  00257A                     __ptext52:
  8044                           	callstack 0
  8045  00257A                     _setThermRel:
  8046                           	callstack 0
  8047  00257A  FFFF               	dw	65535	; assembler added errata NOP
  8048  00257C                     
  8049                           ;adc.c: 80:     therm_rel = 1;
  8050  00257C  0E01               	movlw	1
  8051  00257E  6E64               	movwf	_therm_rel^0,c	;volatile
  8052  002580  0012               	return		;funcret
  8053  002582  FFFF               	dw	65535	; errata NOP
  8054  002584                     __end_of_setThermRel:
  8055                           	callstack 0
  8056                           
  8057 ;; *************** function _retPeriod *****************
  8058 ;; Defined at:
  8059 ;;		line 88 in file "pwm.c"
  8060 ;; Parameters:    Size  Location     Type
  8061 ;;		None
  8062 ;; Auto vars:     Size  Location     Type
  8063 ;;		None
  8064 ;; Return value:  Size  Location     Type
  8065 ;;                  2    0[COMRAM] unsigned int 
  8066 ;; Registers used:
  8067 ;;		None
  8068 ;; Tracked objects:
  8069 ;;		On entry : 0/0
  8070 ;;		On exit  : 0/0
  8071 ;;		Unchanged: 0/0
  8072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8073 ;;      Params:         2       0       0       0       0       0       0
  8074 ;;      Locals:         0       0       0       0       0       0       0
  8075 ;;      Temps:          0       0       0       0       0       0       0
  8076 ;;      Totals:         2       0       0       0       0       0       0
  8077 ;;Total ram usage:        2 bytes
  8078 ;; Hardware stack levels used:    1
  8079 ;; This function calls:
  8080 ;;		Nothing
  8081 ;; This function is called by:
  8082 ;;		_isr
  8083 ;; This function uses a non-reentrant model
  8084 ;;
  8085                           
  8086                           	psect	text53
  8087  002502                     __ptext53:
  8088                           	callstack 0
  8089  002502                     _retPeriod:
  8090                           	callstack 0
  8091  002502  FFFF               	dw	65535	; assembler added errata NOP
  8092  002504                     
  8093                           ;pwm.c: 89:     return pwmPeriod;
  8094  002504  C055  F001         	movff	_pwmPeriod,?_retPeriod
  8095  002508  C056  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  8096  00250C  0012               	return		;funcret
  8097  00250E  FFFF               	dw	65535	; errata NOP
  8098  002510                     __end_of_retPeriod:
  8099                           	callstack 0
  8100                           
  8101 ;; *************** function _increaseStep *****************
  8102 ;; Defined at:
  8103 ;;		line 72 in file "pwm.c"
  8104 ;; Parameters:    Size  Location     Type
  8105 ;;		None
  8106 ;; Auto vars:     Size  Location     Type
  8107 ;;		None
  8108 ;; Return value:  Size  Location     Type
  8109 ;;                  1    wreg      void 
  8110 ;; Registers used:
  8111 ;;		status,2, status,0
  8112 ;; Tracked objects:
  8113 ;;		On entry : 0/0
  8114 ;;		On exit  : 0/0
  8115 ;;		Unchanged: 0/0
  8116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8117 ;;      Params:         0       0       0       0       0       0       0
  8118 ;;      Locals:         0       0       0       0       0       0       0
  8119 ;;      Temps:          0       0       0       0       0       0       0
  8120 ;;      Totals:         0       0       0       0       0       0       0
  8121 ;;Total ram usage:        0 bytes
  8122 ;; Hardware stack levels used:    1
  8123 ;; This function calls:
  8124 ;;		Nothing
  8125 ;; This function is called by:
  8126 ;;		_isr
  8127 ;; This function uses a non-reentrant model
  8128 ;;
  8129                           
  8130                           	psect	text54
  8131  0025B4                     __ptext54:
  8132                           	callstack 0
  8133  0025B4                     _increaseStep:
  8134                           	callstack 0
  8135  0025B4  FFFF               	dw	65535	; assembler added errata NOP
  8136  0025B6                     
  8137                           ;pwm.c: 73:     pwmStep++;
  8138  0025B6  2A67               	incf	_pwmStep^0,f,c	;volatile
  8139  0025B8  0012               	return		;funcret
  8140  0025BA  FFFF               	dw	65535	; errata NOP
  8141  0025BC                     __end_of_increaseStep:
  8142                           	callstack 0
  8143                           
  8144                           	psect	rparam
  8145  0000                     
  8146                           	psect	temp
  8147  00006E                     btemp:
  8148                           	callstack 0
  8149  00006E                     	ds	1
  8150  0000                     int$flags	set	btemp
  8151  0000                     wtemp8	set	btemp+1
  8152  0000                     ttemp5	set	btemp+1
  8153  0000                     ttemp6	set	btemp+4
  8154  0000                     ttemp7	set	btemp+8
  8155                           
  8156                           	psect	idloc
  8157                           
  8158                           ;Config register IDLOC0 @ 0x200000
  8159                           ;	unspecified, using default values
  8160  200000                     	org	2097152
  8161  200000  FF                 	db	255
  8162                           
  8163                           ;Config register IDLOC1 @ 0x200001
  8164                           ;	unspecified, using default values
  8165  200001                     	org	2097153
  8166  200001  FF                 	db	255
  8167                           
  8168                           ;Config register IDLOC2 @ 0x200002
  8169                           ;	unspecified, using default values
  8170  200002                     	org	2097154
  8171  200002  FF                 	db	255
  8172                           
  8173                           ;Config register IDLOC3 @ 0x200003
  8174                           ;	unspecified, using default values
  8175  200003                     	org	2097155
  8176  200003  FF                 	db	255
  8177                           
  8178                           ;Config register IDLOC4 @ 0x200004
  8179                           ;	unspecified, using default values
  8180  200004                     	org	2097156
  8181  200004  FF                 	db	255
  8182                           
  8183                           ;Config register IDLOC5 @ 0x200005
  8184                           ;	unspecified, using default values
  8185  200005                     	org	2097157
  8186  200005  FF                 	db	255
  8187                           
  8188                           ;Config register IDLOC6 @ 0x200006
  8189                           ;	unspecified, using default values
  8190  200006                     	org	2097158
  8191  200006  FF                 	db	255
  8192                           
  8193                           ;Config register IDLOC7 @ 0x200007
  8194                           ;	unspecified, using default values
  8195  200007                     	org	2097159
  8196  200007  FF                 	db	255
  8197                           
  8198                           	psect	config
  8199                           
  8200                           ; Padding undefined space
  8201  300000                     	org	3145728
  8202  300000  FF                 	db	255
  8203                           
  8204                           ;Config register CONFIG1H @ 0x300001
  8205                           ;	Oscillator Selection bits
  8206                           ;	OSC = XT, XT oscillator
  8207                           ;	Oscillator System Clock Switch Enable bit
  8208                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  8209  300001                     	org	3145729
  8210  300001  21                 	db	33
  8211                           
  8212                           ;Config register CONFIG2L @ 0x300002
  8213                           ;	Power-up Timer Enable bit
  8214                           ;	PWRT = OFF, PWRT disabled
  8215                           ;	Brown-out Reset Enable bit
  8216                           ;	BOR = OFF, Brown-out Reset disabled
  8217                           ;	Brown-out Reset Voltage bits
  8218                           ;	BORV = 20, VBOR set to 2.0V
  8219  300002                     	org	3145730
  8220  300002  0D                 	db	13
  8221                           
  8222                           ;Config register CONFIG2H @ 0x300003
  8223                           ;	Watchdog Timer Enable bit
  8224                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8225                           ;	Watchdog Timer Postscale Select bits
  8226                           ;	WDTPS = 128, 1:128
  8227  300003                     	org	3145731
  8228  300003  0E                 	db	14
  8229                           
  8230                           ; Padding undefined space
  8231  300004                     	org	3145732
  8232  300004  FF                 	db	255
  8233                           
  8234                           ;Config register CONFIG3H @ 0x300005
  8235                           ;	CCP2 Mux bit
  8236                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  8237  300005                     	org	3145733
  8238  300005  00                 	db	0
  8239                           
  8240                           ;Config register CONFIG4L @ 0x300006
  8241                           ;	Stack Full/Underflow Reset Enable bit
  8242                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  8243                           ;	Low Voltage ICSP Enable bit
  8244                           ;	LVP = OFF, Low Voltage ICSP disabled
  8245                           ;	Background Debugger Enable bit
  8246                           ;	DEBUG = 0x1, unprogrammed default
  8247  300006                     	org	3145734
  8248  300006  80                 	db	128
  8249                           
  8250                           ; Padding undefined space
  8251  300007                     	org	3145735
  8252  300007  FF                 	db	255
  8253                           
  8254                           ;Config register CONFIG5L @ 0x300008
  8255                           ;	Code Protection bit
  8256                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  8257                           ;	Code Protection bit
  8258                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  8259                           ;	Code Protection bit
  8260                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  8261                           ;	Code Protection bit
  8262                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  8263  300008                     	org	3145736
  8264  300008  0F                 	db	15
  8265                           
  8266                           ;Config register CONFIG5H @ 0x300009
  8267                           ;	Boot Block Code Protection bit
  8268                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  8269                           ;	Data EEPROM Code Protection bit
  8270                           ;	CPD = OFF, Data EEPROM not code protected
  8271  300009                     	org	3145737
  8272  300009  C0                 	db	192
  8273                           
  8274                           ;Config register CONFIG6L @ 0x30000A
  8275                           ;	Write Protection bit
  8276                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  8277                           ;	Write Protection bit
  8278                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  8279                           ;	Write Protection bit
  8280                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  8281                           ;	Write Protection bit
  8282                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  8283  30000A                     	org	3145738
  8284  30000A  0F                 	db	15
  8285                           
  8286                           ;Config register CONFIG6H @ 0x30000B
  8287                           ;	Configuration Register Write Protection bit
  8288                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  8289                           ;	Boot Block Write Protection bit
  8290                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  8291                           ;	Data EEPROM Write Protection bit
  8292                           ;	WRTD = OFF, Data EEPROM not write protected
  8293  30000B                     	org	3145739
  8294  30000B  E0                 	db	224
  8295                           
  8296                           ;Config register CONFIG7L @ 0x30000C
  8297                           ;	Table Read Protection bit
  8298                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  8299                           ;	Table Read Protection bit
  8300                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  8301                           ;	Table Read Protection bit
  8302                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  8303                           ;	Table Read Protection bit
  8304                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  8305  30000C                     	org	3145740
  8306  30000C  0F                 	db	15
  8307                           
  8308                           ;Config register CONFIG7H @ 0x30000D
  8309                           ;	Boot Block Table Read Protection bit
  8310                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  8311  30000D                     	org	3145741
  8312  30000D  40                 	db	64
  8313                           tosu	equ	0xFFF
  8314                           tosh	equ	0xFFE
  8315                           tosl	equ	0xFFD
  8316                           stkptr	equ	0xFFC
  8317                           pclatu	equ	0xFFB
  8318                           pclath	equ	0xFFA
  8319                           pcl	equ	0xFF9
  8320                           tblptru	equ	0xFF8
  8321                           tblptrh	equ	0xFF7
  8322                           tblptrl	equ	0xFF6
  8323                           tablat	equ	0xFF5
  8324                           prodh	equ	0xFF4
  8325                           prodl	equ	0xFF3
  8326                           indf0	equ	0xFEF
  8327                           postinc0	equ	0xFEE
  8328                           postdec0	equ	0xFED
  8329                           preinc0	equ	0xFEC
  8330                           plusw0	equ	0xFEB
  8331                           fsr0h	equ	0xFEA
  8332                           fsr0l	equ	0xFE9
  8333                           wreg	equ	0xFE8
  8334                           indf1	equ	0xFE7
  8335                           postinc1	equ	0xFE6
  8336                           postdec1	equ	0xFE5
  8337                           preinc1	equ	0xFE4
  8338                           plusw1	equ	0xFE3
  8339                           fsr1h	equ	0xFE2
  8340                           fsr1l	equ	0xFE1
  8341                           bsr	equ	0xFE0
  8342                           indf2	equ	0xFDF
  8343                           postinc2	equ	0xFDE
  8344                           postdec2	equ	0xFDD
  8345                           preinc2	equ	0xFDC
  8346                           plusw2	equ	0xFDB
  8347                           fsr2h	equ	0xFDA
  8348                           fsr2l	equ	0xFD9
  8349                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    14
    Data        302
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     68     109
    BANK0           128     11     127
    BANK1           256      5     214
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 52
		 -> errString_Command(BANK0[23]), errString_Fatal(BANK1[38]), errString_PointZ(BANK1[52]), errString_Bound(BANK0[32]), 
		 -> errString_Point(BANK1[40]), errString_Reset(BANK1[39]), errString_ZEND(BANK1[40]), errString_Feed(BANK0[29]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 


Critical Paths under _main in COMRAM

    _main->_executeData
    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_enableMotor
    _resetPosition->_setDecay
    _resetPosition->_setDirection
    _resetPosition->_setStep
    _touchTherm->_setDirection
    _touchObject->_setDirection
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _releaseObj->_stepMade
    _pickObject->_stepMade
    _moveToPoint->_setDirection
    _liftArm->_setDirection

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _main->_executeData
    _executeData->_rotateObj

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   17421
                                              0 BANK1      5     5      0
                           _clearTM0
                        _enableMotor
                        _executeData
                         _fatalError
                     _getNewSequence
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                   _resetNewSequence
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    1604
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0    2807
                                             21 COMRAM     3     3      0
                        _enableMotor
                          _resetStep
                           _setDecay
                       _setDirection
                            _setStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _setStep                                              4     3      1     487
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _setDecay                                             4     3      1     394
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _enableMotor                                          4     3      1     664
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _resetNewSequence                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0   10197
                                             66 COMRAM     2     2      0
                                              8 BANK0      3     3      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0    1058
                          _resetStep
                         _resetTherm
                        _returnTherm
                       _setDirection
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0    1058
                          _resetStep
                         _resetTouch
                        _returnTouch
                       _setDirection
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            8     8      0    3163
                                              0 BANK0      8     8      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         14     6      8    3508
                                             21 COMRAM    14     6      8
                          _resetStep
                       _setDirection
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0    1058
                          _resetStep
                       _setDirection
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _setDirection                                         4     3      1    1024
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0     552
                                             10 COMRAM     7     7      0
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _enableMotor
   _executeData
     _getData
     _liftArm
       _resetStep
       _setDirection
       _stepMade
     _moveToPoint
       _resetStep
       _setDirection
       _stepCounter
       _stepMade
     _pickObject
       _stepMade
     _releaseObj
       _stepMade
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _stepMade
     _touchObject
       _resetStep
       _resetTouch
       _returnTouch
       _setDirection
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTherm
       _returnTherm
       _setDirection
       _startADC
       _stepMade
       _stopADC
   _fatalError
   _getNewSequence
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetNewSequence
   _resetPosition
     _enableMotor
     _resetStep
     _setDecay
     _setDirection
     _setStep
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      5      D6       7       83.6%
BITBANK0            80      0       0       4        0.0%
BANK0               80      B      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     44      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C2      15        0.0%
DATA                 0      0     1C2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Sat Feb 06 12:04:28 2021

                                        ___fldiv@aexp 0038  
                                        ___fldiv@bexp 0037  
                               __end_of_interruptInit 23CE  
                                        ___fldiv@sign 0030  
                                                  l74 2448  
                                                  l83 1ED6  
                                                  l68 24F0  
                                                  l92 21C6  
                                                 l101 223A  
                                                 l110 2152  
                                                 l200 2030  
                                                 l120 1282  
                                                 l121 12B2  
                                                 l210 205A  
                                                 l202 1FF4  
                                                 l203 2042  
                                                 l131 1306  
                                                 l115 124E  
                                                 l124 12B6  
                                                 l116 1362  
                                                 l141 0CFE  
                                                 l221 1DDA  
                                                 l125 12E6  
                                                 l117 127E  
                                                 l206 2014  
                                                 l151 0B98  
                                                 l223 1E02  
                                                 l135 137A  
                                                 l400 254E  
                                                 l162 0C80  
                                                 l234 23F0  
                                                 l322 140A  
                                                 l155 0BEA  
                                                 l235 23F6  
                                                 l403 25A8  
                                                 l323 140C  
                                                 l228 241C  
                                                 l412 2558  
                                                 l316 13C8  
                                                 l149 0CE6  
                                                 l229 2422  
                                                 l325 150A  
                                                 l317 13C2  
                                                 l166 0CA0  
                                                 l158 0C36  
                                                 l406 2524  
                                                 l182 1D22  
                                                 l174 1C82  
                                                 l334 23AA  
                                                 l318 13C4  
                                                 l183 1D26  
                                                 l415 2544  
                                                 l335 23C0  
                                                 l192 1BB0  
                                                 l336 23CA  
                                                 l409 2518  
                                                 l361 24C6  
                                                 l370 2530  
                                                 l178 1CA2  
                                                 l531 1A24  
                                                 l196 1C30  
                                                 l188 1B90  
                                                 l348 0F8E  
                                                 l540 25A0  
                                                 l364 24A0  
                                                 l373 2562  
                                                 l197 1C34  
                                                 l517 248C  
                                                 l534 2588  
                                                 l367 24B4  
                                                 l543 2598  
                                                 l551 229C  
                                                 l537 2590  
                                                 l546 253A  
                                                 l572 15FA  
                                                 l581 24D4  
                                                 l397 246E  
                                                 l590 2342  
                                                 l575 1670  
                                                 l578 24E2  
                                                 l586 2310  
                                                 l890 1908  
                                                 _isr 0008  
                                         _touchObject 1C38  
                                                 prod 000FF3  
                                                 wreg 000FE8  
                                        ___fltol@exp1 0042  
                                         main@errCode 01D3  
                                                l1251 1184  
                                                l1180 080E  
                                                l1262 110A  
                                                l1175 0A3C  
                                                l1255 109E  
                                                l1248 0FF2  
                                                l4000 2428  
                                                l1177 0854  
                                                l1186 08AA  
                                                l4010 2440  
                                                l4002 2430  
                                                l1188 093A  
                                                l4012 2442  
                                                l4004 2434  
                                                l4020 1204  
                                                l4100 2494  
                                                l1189 0922  
                                                l4014 2444  
                                                l4006 2438  
                                                l4030 121A  
                                                l4022 1208  
                                                l4102 2498  
                                                l4200 0F28  
                                                l4104 259E  
                                                l4112 24CC  
                                                l4016 2446  
                                                l4008 243C  
                                                l4040 1262  
                                                l4032 121E  
                                                l4024 120C  
                                                l4120 152E  
                                                l4210 0F7E  
                                                l4202 0F38  
                                                l4050 12DC  
                                                l4042 1274  
                                                l4034 1224  
                                                l4026 1210  
                                                l4018 118C  
                                                l4122 1538  
                                                l4130 1582  
                                                l3420 21E4  
                                                l3500 06F2  
                                                l4212 0F82  
                                                l4204 0F6A  
                                                l4108 2596  
                                                l4060 1350  
                                                l4052 12EA  
                                                l4044 1296  
                                                l4036 123C  
                                                l4028 1212  
                                                l4140 1624  
                                                l4132 159A  
                                                l4124 1542  
                                                l4116 1518  
                                                l4300 14DE  
                                                l3422 21F4  
                                                l3510 073E  
                                                l3502 0704  
                                                l4206 0F72  
                                                l4214 0F8A  
                                                l4070 2396  
                                                l4222 2586  
                                                l4062 1368  
                                                l4054 130C  
                                                l4046 12A8  
                                                l4038 1242  
                                                l4230 2246  
                                                l4142 162E  
                                                l4134 15A2  
                                                l4118 1528  
                                                l4302 14F8  
                                                l3440 255E  
                                                l3416 21D0  
                                                l3432 24A6  
                                                l3504 0720  
                                                l4208 0F7A  
                                                l4160 0D12  
                                                l4080 245C  
                                                l4072 23A8  
                                                l4064 1374  
                                                l4048 12CA  
                                                l4056 1326  
                                                l4232 2286  
                                                l4224 2242  
                                                l4136 15F4  
                                                l4128 154C  
                                                l4304 1500  
                                                l4240 137E  
                                                l3418 21D4  
                                                l3426 2204  
                                                l3434 24AA  
                                                l3442 252A  
                                                l3530 07C8  
                                                l3522 077C  
                                                l3506 0730  
                                                l3514 0752  
                                                l3610 183A  
                                                l3602 17DA  
                                                l3450 2554  
                                                l4170 0DAE  
                                                l4162 0D16  
                                                l4082 245E  
                                                l4074 23BE  
                                                l4066 1378  
                                                l4058 133C  
                                                l4234 2288  
                                                l4138 161C  
                                                l4146 163A  
                                                l4090 2474  
                                                l4250 1390  
                                                l4242 137E  
                                                l3436 24AE  
                                                l3540 081A  
                                                l3532 07D0  
                                                l3524 0798  
                                                l3516 0768  
                                                l3508 0738  
                                                l3612 183C  
                                                l3604 17F4  
                                                l3444 254A  
                                                l3452 2512  
                                                l4180 0E30  
                                                l4172 0DBE  
                                                l4164 0D50  
                                                l4084 2460  
                                                l4076 244E  
                                                l4236 258E  
                                                l4156 2536  
                                                l3460 2324  
                                                l4092 2488  
                                                l4260 13CC  
                                                l4252 1394  
                                                l4244 1384  
                                                l3550 0884  
                                                l3542 083E  
                                                l3534 07E6  
                                                l3526 07A8  
                                                l3518 0768  
                                                l3470 0632  
                                                l3614 184C  
                                                l3446 251E  
                                                l3454 2540  
                                                l4182 0E52  
                                                l4174 0DD2  
                                                l4166 0D60  
                                                l4190 0E6A  
                                                l4158 0D06  
                                                l4086 246A  
                                                l4078 2456  
                                                l3710 2160  
                                                l3702 1EA0  
                                                l3462 232A  
                                                l4094 24BA  
                                                l4270 1436  
                                                l4262 13E6  
                                                l4254 13A0  
                                                l4246 1388  
                                                l3800 0C04  
                                                l3560 08D0  
                                                l3552 088A  
                                                l3544 0840  
                                                l3536 07FA  
                                                l3528 07B8  
                                                l3472 0648  
                                                l3480 0678  
                                                l3464 0612  
                                                l3640 18E6  
                                                l3624 187E  
                                                l3616 1850  
                                                l3608 180A  
                                                l3448 25A6  
                                                l4184 0E56  
                                                l4176 0E0C  
                                                l4168 0D74  
                                                l4192 0EB0  
                                                l4088 246C  
                                                l3712 2170  
                                                l3456 22FA  
                                                l4096 24C2  
                                                l4280 1466  
                                                l4272 1448  
                                                l4264 1404  
                                                l4256 13A8  
                                                l4248 138C  
                                                l3810 0C84  
                                                l3802 0C2C  
                                                l3570 0950  
                                                l3562 08D4  
                                                l3554 0896  
                                                l3546 0850  
                                                l3538 080C  
                                                l3490 06AC  
                                                l3482 068A  
                                                l3474 065C  
                                                l3466 061E  
                                                l3642 18F6  
                                                l3634 18AE  
                                                l3626 188A  
                                                l3618 1862  
                                                l3650 0FBC  
                                                l4194 0EC6  
                                                l4186 0E5E  
                                                l4178 0E1C  
                                                l3714 2180  
                                                l3730 210C  
                                                l3458 2302  
                                                l4098 2492  
                                                l4290 14BE  
                                                l4282 147A  
                                                l4274 1458  
                                                l4266 1410  
                                                l4258 13BC  
                                                l3820 0CF8  
                                                l3812 0CA4  
                                                l3804 0C3E  
                                                l3740 0A44  
                                                l3580 09BC  
                                                l3572 095C  
                                                l3564 08E6  
                                                l3556 08A8  
                                                l3548 086A  
                                                l3492 06C2  
                                                l3484 0692  
                                                l3476 066C  
                                                l3468 0630  
                                                l3636 18BC  
                                                l3628 1894  
                                                l3660 103E  
                                                l3652 1004  
                                                l3900 1C04  
                                                l4196 0EDA  
                                                l3708 215C  
                                                l4540 2132  
                                                l3724 20E8  
                                                l4532 1562  
                                                l4292 14C6  
                                                l4284 148E  
                                                l4276 145A  
                                                l4268 142A  
                                                l3910 1FB0  
                                                l3822 0CFC  
                                                l3806 0C54  
                                                l3814 0CBE  
                                                l3750 0AA2  
                                                l3742 0A5E  
                                                l3590 0A26  
                                                l3582 09D2  
                                                l3574 096E  
                                                l3566 0918  
                                                l3558 08BC  
                                                l3494 06D6  
                                                l3486 0698  
                                                l3478 0670  
                                                l3638 18D0  
                                                l3670 10D6  
                                                l3662 104C  
                                                l3654 1020  
                                                l3646 0F96  
                                                l3830 1C46  
                                                l3902 1C12  
                                                l4198 0F16  
                                                l4542 21A6  
                                                l3718 2190  
                                                l3726 20EC  
                                                l3734 211C  
                                                l4534 1650  
                                                l4294 14CC  
                                                l4286 14B8  
                                                l4278 1460  
                                                l3920 1FCE  
                                                l3912 1FBA  
                                                l3816 0CD4  
                                                l3760 0AE8  
                                                l3752 0AAC  
                                                l3744 0A76  
                                                l3592 0A2C  
                                                l3584 09F2  
                                                l3576 0998  
                                                l3496 06E6  
                                                l3488 06AA  
                                                l3680 1126  
                                                l3672 10E4  
                                                l3664 1084  
                                                l3648 0FAA  
                                                l3840 1C74  
                                                l3832 1C4E  
                                                l3904 1C16  
                                                l4544 0E88  
                                                l3728 20FC  
                                                l4536 19DC  
                                                l4296 14D2  
                                                l4288 14BA  
                                                l4546 221A  
                                                l3930 2048  
                                                l3922 1FE6  
                                                l3914 1FBC  
                                                l3818 0CEC  
                                                l3770 0B10  
                                                l3762 0AF2  
                                                l3754 0AB4  
                                                l3594 0A30  
                                                l3586 0A0E  
                                                l3578 099C  
                                                l3498 06EA  
                                                l3682 114A  
                                                l3674 10F8  
                                                l3666 1088  
                                                l3658 1034  
                                                l3850 1CDA  
                                                l3842 1C76  
                                                l3834 1C52  
                                                l3826 1C3A  
                                                l3906 1C28  
                                                l4538 1EB6  
                                                l4298 14D6  
                                                l3932 2054  
                                                l3924 1FE8  
                                                l3916 1FC4  
                                                l3780 0B28  
                                                l3772 0B14  
                                                l3764 0AFA  
                                                l3756 0AC0  
                                                l3748 0A7E  
                                                l3588 0A14  
                                                l3684 115E  
                                                l3676 111E  
                                                l3668 1094  
                                                l3940 1D82  
                                                l3860 1D04  
                                                l3844 1C86  
                                                l3852 1CEA  
                                                l3836 1C54  
                                                l3828 1C44  
                                                l3692 1E0A  
                                                l3934 2058  
                                                l3926 1FF8  
                                                l3918 1FC8  
                                                l3790 0B8E  
                                                l3782 0B40  
                                                l3774 0B16  
                                                l3766 0B06  
                                                l3758 0AC4  
                                                l3686 1170  
                                                l3678 1120  
                                                l3950 1DDC  
                                                l3942 1D90  
                                                l3862 1D08  
                                                l3854 1CF0  
                                                l3846 1CA4  
                                                l3838 1C5C  
                                                l3870 1B52  
                                                l3694 1E0E  
                                                l3928 2016  
                                                l3792 0BA0  
                                                l3784 0B44  
                                                l3776 0B1E  
                                                l3768 0B0A  
                                                l3960 241E  
                                                l3688 1172  
                                                l3952 1DE0  
                                                l3944 1D96  
                                                l3864 1D1A  
                                                l3856 1CF4  
                                                l3848 1CBE  
                                                l3880 1B6A  
                                                l3872 1B54  
                                                l3696 1E3C  
                                                l3794 0BB6  
                                                l3786 0B50  
                                                l3778 0B22  
                                                l3962 23D0  
                                                l3946 1DBC  
                                                l3954 1DE6  
                                                l3938 1D30  
                                                l3858 1CF6  
                                                l3882 1B82  
                                                l3890 1BCC  
                                                l3874 1B5C  
                                                l3698 1E70  
                                                l3970 1916  
                                                l3788 0B66  
                                                l3956 23FC  
                                                l3964 23D4  
                                                l3948 1DBE  
                                                l3892 1BE8  
                                                l3884 1B84  
                                                l3876 1B60  
                                                l3868 1B48  
                                                l3980 1984  
                                                l3972 192C  
                                                l3798 0BEE  
                                                l3958 2400  
                                                l3966 23F2  
                                                l3886 1B94  
                                                l3894 1BF8  
                                                l3878 1B62  
                                                l3982 199A  
                                                l3974 1942  
                                                l3896 1BFE  
                                                l3888 1BB2  
                                                l3984 19B0  
                                                l3976 1958  
                                                l3968 1912  
                                                l3994 24DA  
                                                l3898 1C02  
                                                l3978 196E  
                                                l3988 19C6  
                                                ?_isr 0001  
                                                l3998 24E8  
                                                u3000 0AA0  
                                                u3001 0A9A  
                                                u3010 0AE6  
                                                u3011 0AE0  
                                                u3100 0C7A  
                                                u3020 0B3E  
                                                u3101 0C74  
                                                u3021 0B38  
                                                u3110 0C9E  
                                                u3030 0B64  
                                                u3111 0C98  
                                                u3031 0B5E  
                                                u3120 0CBE  
                                                u3040 0B8C  
                                                u3200 1D18  
                                                _LATD 000F8C  
                                                u3121 0CB8  
                                                u3041 0B86  
                                                u3201 1D12  
                                                u3130 0CD2  
                                                u3050 0BB4  
                                                u3210 1B80  
                                                u3131 0CCC  
                                                u3051 0BAE  
                                                u3211 1B7A  
                                                u3300 2042  
                                                u3140 0CE6  
                                                u3060 0BE4  
                                                u3220 1BAE  
                                                u2500 2322  
                                                u3301 203C  
                                                u3141 0CE0  
                                                u3061 0BDE  
                                                u3221 1BA8  
                                                u2501 231C  
                                                u3070 0C02  
                                                u3310 1DD8  
                                                u3150 1C72  
                                                u3230 1BCC  
                                                u2510 2340  
                                                u3071 0BFC  
                                                u3311 1DD2  
                                                u3151 1C6C  
                                                u3231 1BC6  
                                                u2511 233A  
                                                u3080 0C2A  
                                                u2600 07E4  
                                                u2520 062E  
                                                u3320 1E00  
                                                u3160 1CA0  
                                                u3240 1BE6  
                                                u3400 12C8  
                                                u3081 0C24  
                                                u2601 07DE  
                                                u2521 0628  
                                                u3321 1DFA  
                                                u3161 1C9A  
                                                u3241 1BE0  
                                                u3401 12C2  
                                                u3090 0C52  
                                                u3330 241A  
                                                u2610 080A  
                                                u2530 0646  
                                                u3170 1CBE  
                                                u3250 1BF8  
                                                u3410 12DC  
                                                u3091 0C4C  
                                                u3331 2414  
                                                u2611 0804  
                                                u2531 0640  
                                                u3171 1CB8  
                                                u3251 1BF2  
                                                u3411 12D6  
                                                u3340 23EE  
                                                u2700 094E  
                                                u2620 083C  
                                                u2540 065A  
                                                u3180 1CD8  
                                                u3260 1C26  
                                                u3500 0EC4  
                                                u3420 1304  
                                                u3341 23E8  
                                                u2701 0948  
                                                u2621 0836  
                                                u2541 0654  
                                                u3181 1CD2  
                                                u3261 1C20  
                                                u3501 0EBE  
                                                u3421 12FE  
                                                u3270 1FE4  
                                                u2710 096C  
                                                u2630 0868  
                                                u2550 06A8  
                                                u3190 1CEA  
                                                u3510 0F68  
                                                u3430 1326  
                                                u3350 123A  
                                                u3271 1FDE  
                                                u2711 0966  
                                                u2631 0862  
                                                u2551 06A2  
                                                u3191 1CE4  
                                                u3511 0F62  
                                                u3431 1320  
                                                u3351 1234  
                                                u3280 2012  
                                                u2720 09BA  
                                                u2640 0882  
                                                u2560 06C0  
                                                u2800 18D0  
                                                u3440 133A  
                                                u3360 1260  
                                                u3520 229A  
                                                u3281 200C  
                                                u2721 09B4  
                                                u2641 087C  
                                                u2561 06BA  
                                                u2801 18CA  
                                                u3441 1334  
                                                u3361 125A  
                                                u3521 2294  
                                                u3290 2030  
                                                u2730 09F0  
                                                u2650 08A6  
                                                u2570 06D4  
                                                u2810 18E4  
                                                u3450 134E  
                                                u3370 1274  
                                                u3530 13BA  
                                                u2475 21DE  
                                                u3291 202A  
                                                u2731 09EA  
                                                u2651 08A0  
                                                u2571 06CE  
                                                u2811 18DE  
                                                u3451 1348  
                                                u3371 126E  
                                                u3531 13B4  
                                                u2476 21E0  
                                                u2740 0A24  
                                                u2660 08CE  
                                                u2580 071E  
                                                u2900 115C  
                                                u2820 0FA8  
                                                u3460 1362  
                                                u3380 1294  
                                                u3540 13E4  
                                                u2485 21EE  
                                                u2741 0A1E  
                                                u2661 08C8  
                                                u2581 0718  
                                                u2901 1156  
                                                u2821 0FA2  
                                                u3461 135C  
                                                u3381 128E  
                                                u3541 13DE  
                                                u2486 21F0  
                                                u2670 08E4  
                                                u2590 0766  
                                                u2750 17F2  
                                                u2910 116E  
                                                u2830 0FBA  
                                                u3470 23A6  
                                                u3390 12A8  
                                                u3550 1428  
                                                u2495 21FE  
                                                u2671 08DE  
                                                u2591 0760  
                                                u2751 17EC  
                                                u2911 1168  
                                                u2831 0FB4  
                                                u3471 23A0  
                                                u3391 12A2  
                                                u3551 1422  
                                                u2496 2200  
                                                u2680 0916  
                                                u2760 182E  
                                                u2840 101E  
                                                u3480 23BC  
                                                u3560 14F6  
                                                u2681 0910  
                                                u2841 1018  
                                                u3481 23B6  
                                                u3561 14F0  
                                                u2690 0934  
                                                u2770 1860  
                                                u2850 107E  
                                                u3490 1598  
                                                u2691 092E  
                                                u2771 185A  
                                                u2851 1078  
                                                u3491 1592  
                                                u2780 1878  
                                                u2860 10D0  
                                                u2781 1872  
                                                u2765 1822  
                                                u2861 10CA  
                                                u2925 216A  
                                                u2790 18A8  
                                                u2870 10F6  
                                                u2926 216C  
                                                u2791 18A2  
                                                u2871 10F0  
                                                u2935 217A  
                                                u2880 110A  
                                                u2936 217C  
                                                u2881 1104  
                                                u2945 218A  
                                                u2890 111C  
                                                u2946 218C  
                                         main@newData 01D4  
                                                u2891 1116  
                                                u2955 20F6  
                                                u2980 0A5C  
                                                u2956 20F8  
                                                u2981 0A56  
                                                u2965 2106  
                                                u2990 0A76  
                                                u2966 2108  
                                                u2991 0A70  
                                                u2975 2116  
                                                u2976 2118  
                                                i2l71 25B0  
                                                i2l65 24FE  
                                                _TMR0 000FD6  
                                                _TMR2 000FCC  
                                 __end_ofi2_storeData 17D8  
                                                _main 137E  
                                                _maxX 006B  
                                                _maxY 0069  
                                __end_ofi2_printError 1B46  
                                                fsr2h 000FDA  
                                                indf2 000FDF  
                                                fsr1l 000FE1  
                                                fsr2l 000FD9  
                                                btemp 006E  
                                                prodh 000FF4  
                                                prodl 000FF3  
                                                start 016A  
                                     ___fldiv@new_exp 0031  
                                        ___param_bank 000000  
                                     ??_whatsTM0Limit 0001  
                                               ??_isr 000B  
                                        ?_executeData 0001  
                                     executeData@data 00FD  
                                       ___fltol@sign1 0041  
                                               ?_main 0001  
                                     __end_of___fldiv 0A42  
                                     __end_of___fltol 190E  
                                               i2l421 2576  
                                               i2l418 2580  
                                               i2l531 1B40  
                                               i2l382 250C  
                                               i2l376 25B8  
                                               i2l379 256C  
                                               i2l572 175C  
                                               i2l476 0152  
                                               i2l590 2390  
                                               i2l575 17D2  
                                               i2l586 235E  
                                rotateObj@rotSequence 0080  
                                               _SPBRG 000FAF  
                                               _TRISA 000F92  
                                               _TRISB 000F93  
                                               _TRISC 000F94  
                                               _TRISD 000F95  
                                               _TXREG 000FAD  
                                     __end_of_getData 24E6  
                                     i2storeData@data 000A  
                                     __end_of_initADC 2472  
                                        ?_newSequence 0001  
                                     __end_of_liftArm 205E  
                                     __end_of_readSeq 2594  
                                        stepMade@temp 0014  
                                     __end_of_setStep 1EDC  
                                               tablat 000FF5  
                                      i2uartTx@length 0003  
                                     __end_of_stopADC 25AC  
                                               ttemp5 006F  
                                               ttemp6 0072  
                                               ttemp7 0076  
                                               status 000FD8  
                                               wtemp8 006F  
                                    __end_ofi2_uartTx 2394  
                                       ?_increaseStep 0001  
                                     __initialization 205E  
                              __size_of_initPinMotors 0026  
                                        __end_of_main 1514  
                            resetPosition@keepMovingX 0016  
                            resetPosition@keepMovingY 0017  
                            resetPosition@keepMovingZ 0018  
                                              ??_main 01D1  
                                       __activetblptr 000002  
                                         i2_storeData 1676  
                                __size_of_enableMotor 0074  
                                         isr@tm0Count 0063  
                                        ?_setThermRel 0001  
                                              _ADRESH 000FC4  
                                              _ADRESL 000FC3  
                                        ?_moveToPoint 0016  
                                              i2l2130 25B6  
                                              i2l2132 2568  
                                              i2l2136 257C  
                                              i2l2138 2572  
                                              i2l3210 168A  
                                              i2l3212 1690  
                                              i2l3220 16AE  
                                              i2l3206 2504  
                                              i2l3230 177E  
                                              i2l3214 169A  
                                              i2l3222 16E4  
                                              i2l3232 1786  
                                              i2l3224 16FC  
                                              i2l3216 16A4  
                                              i2l3208 167A  
                                              i2l3320 001C  
                                              i2l3234 1790  
                                              i2l3226 1704  
                                              i2l3330 0050  
                                              i2l3322 002E  
                                              i2l3228 1756  
                                              i2l3340 0072  
                                              i2l3332 0054  
                                              i2l3324 0030  
                                              i2l2630 2378  
                                              i2l3238 179C  
                                              i2l3350 00BC  
                                              i2l3342 0090  
                                              i2l3326 0032  
                                              i2l3334 0058  
                                              i2l2624 2348  
                                              i2l3360 0108  
                                              i2l3352 00C0  
                                              i2l3344 0092  
                                              i2l3336 006C  
                                              i2l3328 004E  
                                              i2l2626 2350  
                                              i2l3370 014C  
                                              i2l3362 0114  
                                              i2l3346 00A6  
                                              i2l3338 006E  
                                              i2l3354 00C6  
                                              i2l2628 2372  
                                              i2l3364 012E  
                                              i2l3356 00DA  
                                              i2l3348 00B8  
                                              i2l3358 00E2  
                                              i2l3366 0132  
                                              i2l3368 0146  
                                              i2l1882 24F6  
                                              i2l2940 1A32  
                                              i2l1886 25AE  
                                              i2l2950 1AA0  
                                              i2l2942 1A48  
                                              i2l4550 17B2  
                                              i2l4552 1AF8  
                                              i2l2952 1AB6  
                                              i2l2944 1A5E  
                                              i2l2954 1ACC  
                                              i2l2946 1A74  
                                              i2l2938 1A2E  
                                              i2l2948 1A8A  
                                              i2l4548 16C4  
                                              i2l2958 1AE2  
                                              _RCREG1 000FAE  
                                        ?_setTouchRel 0001  
                                       setDecay@decay 0015  
                                    __end_of___xxtofl 118A  
                                       setDecay@motor 0012  
                                    __end_of_clearTM0 24F4  
                                    _errString_PointZ 0100  
                                      ??_increaseStep 0001  
                                           ??___fldiv 0028  
                                           ??___fltol 003D  
                                    __end_of_tim0Init 24CA  
                                    __end_of_tim2Init 24A4  
                                              clear_0 20C4  
                                              clear_1 20D0  
                                           ??_getData 0014  
                                              _uartTx 22F8  
                                    __end_of_setDecay 2158  
                                           ??_initADC 0012  
                                           ??_liftArm 0016  
                                           ??_readSeq 0012  
                                        __pdataCOMRAM 0069  
                               __end_of_resetPosition 137E  
                                        __mediumconst 0000  
                                           ??_setStep 0013  
                                              tblptrh 000FF7  
                                              tblptrl 000FF6  
                                              tblptru 000FF8  
                                        ?_returnTherm 0012  
                                    __end_of_startADC 2552  
                                    __end_of_stepMade 24B8  
                                       _initPinMotors 2426  
                                        ?_returnTouch 0012  
                                           ??_stopADC 0012  
                               __size_ofi2_printError 011C  
                                    __end_of_writeTM0 2502  
                           __size_of_resetNewSequence 000A  
                                        ___xxtofl@arg 001C  
                                        ___xxtofl@exp 001B  
                                        ___xxtofl@val 0012  
                                          __accesstop 0080  
                             __end_of__initialization 20D6  
                                        _dataSequence 00D8  
                                       ___rparam_used 000001  
                                          ___fltol@f1 0039  
                                        ?_stepCounter 0012  
                                         i2uartTx@ptr 0001  
                                      __pcstackCOMRAM 0001  
                                        __newSequence 005F  
                                        __pidataBANK0 22A0  
                                        __pidataBANK1 1EDC  
                                     isr@single_cycle 0051  
                                __size_of_executeData 028E  
                                       ?_setDirection 0012  
                                        i2_printError 1A2A  
                                        ?_touchObject 0001  
                                      _errString_ZEND 015C  
                                      _errString_Feed 00A4  
                                      ?_initPinMotors 0001  
                                           ?i2_uartTx 0001  
                                          __pbssBANK0 00D8  
                                __size_of_newSequence 0008  
                                          _feeder1Pos 060D  
                                          _feeder2Pos 060B  
                                          _feeder3Pos 0609  
                             __size_of_getNewSequence 000E  
                                          _fatalError 259C  
                                  __size_of_reduceSeq 0008  
                                  __size_of_retPeriod 000E  
                                      _touch_pressure 0607  
                                  __size_of_shiftData 0060  
                                  __size_of_resetStep 000A  
                                             _ADC_res 0053  
                                             ?_uartTx 0012  
                                      ??_setDirection 0013  
                                           ?___xxtofl 0012  
                                __end_of_increaseStep 25BC  
                                           ?_clearTM0 0001  
                                          ??i2_uartTx 0004  
                                  __size_of_rotateObj 00DC  
                                   _errString_Command 00C1  
                                  __size_of_usartInit 001E  
                              __size_of_interruptInit 003A  
                                __size_of_setThermRel 000A  
                                  __size_of_storeData 0162  
                                           ?_tim0Init 0001  
                                           ?_tim2Init 0012  
                                __size_of_moveToPoint 02C2  
                                storeData@receivedMex 0045  
                                     _newSequenceData 00EC  
                                           ?_setDecay 0012  
                                __size_of_setTouchRel 000A  
                                         setStep@step 0015  
                                             __Hparam 0000  
                                             __Lparam 0000  
                              __end_of_touch_pressure 0609  
                                             ___fldiv 0610  
                                           ?_startADC 0001  
                                           ?_stepMade 0012  
                                             ___fltol 17D8  
                                        __psmallconst 0600  
                                             __pcinit 205E  
                               __end_of_whatsTM0Limit 25B4  
                                             _getData 24D8  
                                             __ramtop 0600  
                                           ?_writeTM0 0001  
                                          _pickObject 23FA  
                                             __ptext0 137E  
                                             __ptext1 2472  
                                             __ptext2 2490  
                                             __ptext3 24B8  
                                             __ptext4 1514  
                                             __ptext5 190E  
                                             __ptext6 22F8  
                                             __ptext7 2240  
                                             __ptext8 118A  
                                             __ptext9 1E06  
                                     __size_of_uartTx 004E  
                                           _T0CONbits 000FD5  
                                             _initADC 244C  
                                     ??_initPinMotors 0012  
                                             _liftArm 1FAE  
                                           _T2CONbits 000FCA  
                                             _readSeq 258C  
                                        __size_of_isr 0162  
                                          ??___xxtofl 0016  
                                        ?i2_storeData 0001  
                                          ??_clearTM0 0012  
                                             _setStep 1E06  
                                             _pwmStep 0067  
                                             _stopADC 25A4  
                                   __end_of_reduceSeq 258C  
                                   __end_of_retPeriod 2510  
                                          _releaseObj 23CE  
                                __size_of_returnTherm 000C  
                                end_of_initialization 20D6  
                                __size_of_returnTouch 000C  
                                    _resetNewSequence 2534  
                                    rotateObj@totStep 00F8  
                                   __end_of_shiftData 22A0  
                                             isr@temp 0011  
                                   __end_of_resetStep 2566  
                                          ??_tim0Init 0012  
                                       __Lmediumconst 0000  
                                          ??_tim2Init 0014  
                                    storeData@command 005D  
                                    storeData@counter 005E  
                                          ??_setDecay 0013  
                                    enableMotor@motor 0012  
                                          _resetTherm 253E  
                                          _resetTouch 2552  
                                             uartTx@i 0015  
                                         ?_fatalError 0001  
                                           _RCSTAbits 000FAB  
                                             postdec1 000FE5  
                                   __end_of_rotateObj 1E06  
                                             postinc0 000FEE  
                                             postinc1 000FE6  
                                             postinc2 000FDE  
                                          ??_startADC 0012  
                                          ??_stepMade 0014  
                                __size_of_stepCounter 000C  
                                       _interruptInit 2394  
                                   __end_of_usartInit 2490  
                                   __end_of_storeData 1676  
                          __end_ofrotateObj@stepAngle 0605  
                                          ??_writeTM0 0001  
                                           _PORTDbits 000F83  
                                          _printError 190E  
                                           _PORTEbits 000F84  
                                       ??_enableMotor 0013  
                                 i2printError@errCode 0007  
                                          _toggleStep 2566  
                                       ___xxtofl@sign 001A  
                                           _TRISCbits 000F94  
                                           _TRISDbits 000F95  
                                           _TRISEbits 000F96  
                                         ___fldiv@grs 0033  
                                         ___fldiv@rem 002C  
                                __size_of_touchObject 00F2  
                                          _stepToggle 0066  
                                          _touchTherm 1B46  
                                __end_of_setDirection 2240  
                                           _TXSTAbits 000FAC  
                                      _getNewSequence 24CA  
                                      ?_interruptInit 0001  
                                       __pidataCOMRAM 25BC  
                               __size_of_increaseStep 0008  
                                         ?_pickObject 0001  
                                         __fatalError 0060  
                                      __end_of_uartTx 2346  
                                       moveToPoint@x1 0016  
                                       moveToPoint@x2 001A  
                                       moveToPoint@y1 0018  
                                       moveToPoint@y2 001C  
                                 start_initialization 205E  
                                           i2uartTx@i 0004  
                                         __end_of_isr 016A  
                                 __size_of_fatalError 0008  
                                 __end_of_enableMotor 21CC  
                                         ?_releaseObj 0001  
                                   __size_ofi2_uartTx 004E  
                              __end_of_getNewSequence 24D8  
                                     _errString_Fatal 01AB  
                                     _errString_Bound 0084  
                                         ?_resetTherm 0001  
                                     _errString_Reset 0184  
                                         ?_resetTouch 0001  
                                     _errString_Point 0134  
                                        _increaseStep 25B4  
                              __size_of_resetPosition 01F4  
                                       ??_executeData 0043  
                                         __pdataBANK0 0080  
                                         __pdataBANK1 0100  
                                         _dataCounter 0061  
                                            ??_uartTx 0015  
                              moveToPoint@keepMovingX 0020  
                              moveToPoint@keepMovingY 0021  
                                         ?_printError 0001  
                                           ___fldiv@a 0024  
                                           ___fldiv@b 0020  
                                      _therm_pressure 0605  
                                         ?_toggleStep 0001  
                                         __pbssCOMRAM 0045  
                                       __pcstackBANK0 00F4  
                                       __pcstackBANK1 01D1  
                                       ??_newSequence 0012  
                                   __size_of___xxtofl 01F8  
                                __size_ofi2_storeData 0162  
                                   __size_of_clearTM0 000E  
                                     ?_getNewSequence 0012  
                                         ?_touchTherm 0001  
                                 __size_of_pickObject 002C  
                                  executeData@errCode 00FC  
                                   __size_of_tim0Init 0012  
                                   __size_of_tim2Init 0014  
                                     ??_interruptInit 0012  
                                   __size_of_setDecay 0074  
                                           __pintcode 0008  
                                            ?___fldiv 0020  
                                            ?___fltol 0039  
                            __end_of_resetNewSequence 253E  
                                 __size_of_releaseObj 002C  
                                       storeData@data 001B  
                                            ?_getData 0012  
                                   __size_of_startADC 000A  
                                   __size_of_stepMade 0014  
                              __end_of_therm_pressure 0607  
                                            ?_initADC 0001  
                                         __smallconst 0600  
                                            ?_liftArm 0001  
                                         _enableMotor 2158  
                                            ?_readSeq 0001  
                                   __size_of_writeTM0 000E  
                                 __end_of_executeData 0F92  
                                          shiftData@i 0014  
                                            ?_setStep 0012  
                                 __size_of_resetTherm 000A  
                                           _newFeeder 0057  
                                       _resetPosition 118A  
                                 __size_of_resetTouch 000A  
                                       ??_setThermRel 0001  
                                            ?_stopADC 0001  
                               __size_of_setDirection 0074  
                                       ??_moveToPoint 001E  
                                       ??_setTouchRel 0001  
                                 __end_of_newSequence 259C  
                                           _reduceSeq 2584  
                                            _LATAbits 000F89  
                                            _LATBbits 000F8A  
                                           _retPeriod 2502  
                                            _LATCbits 000F8B  
                                            _LATDbits 000F8C  
                                 __size_of_printError 011C  
                                            _IPR1bits 000F9F  
                                            _PIE1bits 000F9D  
                                           _shiftData 2240  
                                            i2u232_40 16FA  
                                            i2u240_40 008E  
                                            i2u232_41 16F4  
                                            i2u240_41 0088  
                                            i2u241_40 00A4  
                                            i2u241_41 009E  
                                            i2u170_40 238E  
                                            i2u242_40 00B6  
                                            i2u170_41 2388  
                                            i2u242_41 00B0  
                                            i2u243_40 00D8  
                                            i2u243_41 00D2  
                                            i2u244_40 0106  
                                            i2u244_41 0100  
                                           _resetStep 255C  
                                            i2u245_40 012C  
                                            i2u237_40 002C  
                                            i2u245_41 0126  
                                            i2u237_41 0026  
                                            i2u246_40 0144  
                                            i2u238_40 004C  
                                            i2u246_41 013E  
                                            i2u238_41 0046  
                                            i2u239_40 006A  
                                            i2u239_41 0064  
                                            i2u169_40 2370  
                                            i2u169_41 236A  
                                            _PIR1bits 000F9E  
                                 __size_of_toggleStep 000A  
                                        ??_fatalError 0012  
                                           _posVector 004E  
                                            _RCONbits 000FD0  
                                           _therm_rel 0064  
                                           _pwmPeriod 0055  
                                   setDirection@motor 0012  
                                           _rotateObj 1D2A  
                                          _ADCON0bits 000FC2  
                                          _ADCON1bits 000FC1  
                                 __size_of_touchTherm 00F2  
                                        _setDirection 21CC  
                                           _usartInit 2472  
                                           _touch_rel 0065  
                                  __end_of_feeder1Pos 060F  
                                  __end_of_feeder2Pos 060D  
                                  __end_of_feeder3Pos 060B  
                                           _storeData 1514  
                                      ?_resetPosition 0001  
                               __end_of_initPinMotors 244C  
                                       ??_returnTherm 0014  
                                       ??_returnTouch 0014  
                                            i2_uartTx 2346  
                                           copy_data0 2072  
                                           copy_data1 2092  
                                           copy_data2 20B2  
                                  __end_of_fatalError 25A4  
                                  rotateObj@stepAngle 0601  
                                          ?_reduceSeq 0001  
                                          ?_retPeriod 0001  
                                        setStep@motor 0012  
                                          rotateObj@i 00FA  
                              __size_of_whatsTM0Limit 0008  
                                 __end_of_setThermRel 2584  
                                 __end_of_moveToPoint 0D04  
                                   printError@errCode 0018  
                                          ?_shiftData 0001  
                                       ??_stepCounter 0014  
                                            __Hrparam 0000  
                                          ?_resetStep 0001  
                                 __end_of_setTouchRel 257A  
                                            __Lrparam 0000  
                                    __size_of___fldiv 0432  
                                    __size_of___fltol 0136  
                                         _executeData 0D04  
                                        ??_pickObject 0015  
                                          ?_rotateObj 0001  
                            moveToPoint@MOT1Direction 0022  
                                       ?i2_printError 0001  
                                    __size_of_getData 000E  
                            moveToPoint@MOT2Direction 0023  
                                       ??_touchObject 0016  
                                          ?_usartInit 0001  
                                    __size_of_initADC 0026  
                                            ___xxtofl 0F92  
                                    __size_of_liftArm 00B0  
                                          ?_storeData 0001  
                                            _clearTM0 24E6  
                                    __size_of_readSeq 0008  
                                  storeData@mexLength 006D  
                                            _tm0Error 005B  
                                            _tm0Limit 0068  
                                    __size_of_setStep 00D6  
                                         _newSequence 2594  
                                            __ptext10 20E4  
                                            __ptext11 2158  
                                            __ptext20 259C  
                                            __ptext12 2534  
                                            __ptext21 0D04  
                                            __ptext13 2584  
                                            __ptext30 1D2A  
                                            __ptext22 1B46  
                                            __ptext14 258C  
                                            __ptext31 0F92  
                                            __ptext23 2510  
                                            __ptext15 2594  
                                            __ptext40 21CC  
                                            __ptext32 17D8  
                                            __ptext24 253E  
                                            __ptext16 2394  
                                            __ptext41 255C  
                                            __ptext33 0610  
                                            __ptext25 1C38  
                                            __ptext17 2426  
                                            __ptext50 2566  
                                            __ptext42 24D8  
                                            __ptext34 23CE  
                                            __ptext26 25A4  
                                            __ptext18 244C  
                                            __ptext51 2570  
                                            __ptext43 24E6  
                                            __ptext35 23FA  
                                            __ptext27 2548  
                                            __ptext19 24CA  
                                            __ptext52 257A  
                                            __ptext36 0A42  
                                            __ptext28 251C  
                                            __ptext53 2502  
                                            __ptext45 1676  
                                            __ptext37 2528  
                                            __ptext29 2552  
                                            __ptext54 25B4  
                                            __ptext46 1A2A  
                                            __ptext38 1FAE  
                                            __ptext47 2346  
                                            __ptext39 24A4  
                                            __ptext48 24F4  
                                            __ptext49 25AC  
                                        ??_releaseObj 0015  
                                    __size_of_stopADC 0008  
                                 __end_of_returnTherm 251C  
                                 __end_of_returnTouch 2528  
                                            _tim0Init 24B8  
                                            _tim2Init 2490  
                                       __size_of_main 0196  
                                            _setDecay 20E4  
                                  __end_of_pickObject 2426  
                                        ??_resetTherm 0012  
                                        ??_resetTouch 0012  
                                           uartTx@ptr 0012  
                                            _rotAngle 0059  
                                     isr@completeStep 0062  
                                            int$flags 006E  
                                            _startADC 2548  
                                            _stepMade 24A4  
                                 __end_of_stepCounter 2534  
                                   rotateObj@rotAngle 00F7  
                                      ??i2_printError 0005  
                                  __end_of_releaseObj 23FA  
                                            _writeTM0 24F4  
                                        ??_printError 0016  
                                       _whatsTM0Limit 25AC  
                                     ??_resetPosition 0016  
                                  tim2Init@_pwmPeriod 0012  
                                          _INTCONbits 000FF2  
                                        ??_toggleStep 0001  
                                    ??_getNewSequence 0014  
                                  __end_of_resetTherm 2548  
                                  __end_of_resetTouch 255C  
                                         _setThermRel 257A  
                                        uartTx@length 0014  
                                         _moveToPoint 0A42  
                                 __end_of_touchObject 1D2A  
                                            intlevel2 25C2  
                                   enableMotor@enable 0015  
                                        ??_touchTherm 0016  
                                         _setTouchRel 2570  
                                         ??_reduceSeq 0012  
                                         ??_retPeriod 0003  
                                          _RCSTA1bits 000FAB  
                                  __end_of_printError 1A2A  
                               setDirection@direction 0015  
                                         ??_shiftData 0012  
                                         ??_resetStep 0012  
                                  __end_of_toggleStep 2570  
                                   ?_resetNewSequence 0001  
                                      ?_whatsTM0Limit 0001  
                                         ??_rotateObj 00F4  
                                  ??_resetNewSequence 0012  
                                  __end_of_touchTherm 1C38  
                                        ?_enableMotor 0012  
                                         ??_usartInit 0012  
                                       ??i2_storeData 0008  
                                         ??_storeData 0019  
                                         _returnTherm 2510  
                                         _returnTouch 251C  
                                         _stepCounter 2528  
