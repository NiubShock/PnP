

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Sat May 08 10:26:20 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     9                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    77                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    78                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    79                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    80                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    81  0000                     
    82                           ; Version 2.20
    83                           ; Generated 12/02/2020 GMT
    84                           ; 
    85                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    86                           ; All rights reserved.
    87                           ; 
    88                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    89                           ; 
    90                           ; Redistribution and use in source and binary forms, with or without modification, are
    91                           ; permitted provided that the following conditions are met:
    92                           ; 
    93                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    94                           ;        conditions and the following disclaimer.
    95                           ; 
    96                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    97                           ;        of conditions and the following disclaimer in the documentation and/or other
    98                           ;        materials provided with the distribution.
    99                           ; 
   100                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   101                           ;        software without specific prior written permission.
   102                           ; 
   103                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   104                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   105                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   106                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   107                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   108                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   109                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   110                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   111                           ; 
   112                           ; 
   113                           ; Code-generator required, PIC18F452 Definitions
   114                           ; 
   115                           ; SFR Addresses
   116  0000                     
   117                           	psect	idataCOMRAM
   118  0029FA                     __pidataCOMRAM:
   119                           	callstack 0
   120                           
   121                           ;initializer for _motCounter
   122  0029FA  00                 	db	0
   123  0029FB  01                 	db	1
   124  0029FC  00                 	db	0
   125  0029FD  01                 	db	1
   126  0029FE  00                 	db	0
   127  0029FF  01                 	db	1
   128                           
   129                           ;initializer for _mexLength
   130  002A00  05                 	db	5
   131                           
   132                           	psect	idataBANK0
   133  00262E                     __pidataBANK0:
   134                           	callstack 0
   135                           
   136                           ;initializer for rotateObj@rotSequence
   137  00262E  24                 	db	36
   138  00262F  0C                 	db	12
   139  002630  18                 	db	24
   140  002631  30                 	db	48
   141                           
   142                           ;initializer for _stepMot3
   143  002632  09                 	db	9
   144  002633  03                 	db	3
   145  002634  06                 	db	6
   146  002635  0C                 	db	12
   147                           
   148                           ;initializer for _stepMot2
   149  002636  11                 	db	17
   150  002637  05                 	db	5
   151  002638  0C                 	db	12
   152  002639  18                 	db	24
   153                           
   154                           ;initializer for _stepMot1
   155  00263A  22                 	db	34
   156  00263B  06                 	db	6
   157  00263C  0C                 	db	12
   158  00263D  28                 	db	40
   159                           
   160                           ;initializer for _pickingTheOBJ
   161  00263E  50                 	db	80
   162  00263F  69                 	db	105
   163  002640  63                 	db	99
   164  002641  6B                 	db	107
   165  002642  69                 	db	105
   166  002643  6E                 	db	110
   167  002644  67                 	db	103
   168  002645  20                 	db	32
   169  002646  74                 	db	116
   170  002647  68                 	db	104
   171  002648  65                 	db	101
   172  002649  20                 	db	32
   173  00264A  6F                 	db	111
   174  00264B  62                 	db	98
   175  00264C  6A                 	db	106
   176  00264D  65                 	db	101
   177  00264E  63                 	db	99
   178  00264F  74                 	db	116
   179  002650  0A                 	db	10
   180  002651  00                 	db	0
   181                           
   182                           ;initializer for _OBJRelease
   183  002652  4F                 	db	79
   184  002653  62                 	db	98
   185  002654  6A                 	db	106
   186  002655  65                 	db	101
   187  002656  63                 	db	99
   188  002657  74                 	db	116
   189  002658  20                 	db	32
   190  002659  72                 	db	114
   191  00265A  65                 	db	101
   192  00265B  6C                 	db	108
   193  00265C  65                 	db	101
   194  00265D  61                 	db	97
   195  00265E  73                 	db	115
   196  00265F  65                 	db	101
   197  002660  64                 	db	100
   198  002661  0A                 	db	10
   199  002662  00                 	db	0
   200                           
   201                           ;initializer for _liftingTheArm
   202  002663  4C                 	db	76
   203  002664  69                 	db	105
   204  002665  66                 	db	102
   205  002666  74                 	db	116
   206  002667  69                 	db	105
   207  002668  6E                 	db	110
   208  002669  67                 	db	103
   209  00266A  20                 	db	32
   210  00266B  74                 	db	116
   211  00266C  68                 	db	104
   212  00266D  65                 	db	101
   213  00266E  20                 	db	32
   214  00266F  61                 	db	97
   215  002670  72                 	db	114
   216  002671  6D                 	db	109
   217  002672  0A                 	db	10
   218  002673  00                 	db	0
   219                           
   220                           ;initializer for _ready
   221  002674  52                 	db	82
   222  002675  65                 	db	101
   223  002676  61                 	db	97
   224  002677  64                 	db	100
   225  002678  79                 	db	121
   226  002679  20                 	db	32
   227  00267A  74                 	db	116
   228  00267B  6F                 	db	111
   229  00267C  20                 	db	32
   230  00267D  77                 	db	119
   231  00267E  6F                 	db	111
   232  00267F  72                 	db	114
   233  002680  6B                 	db	107
   234  002681  0A                 	db	10
   235  002682  00                 	db	0
   236                           
   237                           ;initializer for _OBJPicked
   238  002683  4F                 	db	79
   239  002684  62                 	db	98
   240  002685  6A                 	db	106
   241  002686  65                 	db	101
   242  002687  63                 	db	99
   243  002688  74                 	db	116
   244  002689  20                 	db	32
   245  00268A  70                 	db	112
   246  00268B  69                 	db	105
   247  00268C  63                 	db	99
   248  00268D  6B                 	db	107
   249  00268E  65                 	db	101
   250  00268F  64                 	db	100
   251  002690  0A                 	db	10
   252  002691  00                 	db	0
   253                           
   254                           	psect	idataBANK1
   255  0022FE                     __pidataBANK1:
   256                           	callstack 0
   257                           
   258                           ;initializer for _errString_Bound
   259  0022FE  45                 	db	69
   260  0022FF  72                 	db	114
   261  002300  72                 	db	114
   262  002301  6F                 	db	111
   263  002302  72                 	db	114
   264  002303  2C                 	db	44
   265  002304  20                 	db	32
   266  002305  70                 	db	112
   267  002306  6F                 	db	111
   268  002307  69                 	db	105
   269  002308  6E                 	db	110
   270  002309  74                 	db	116
   271  00230A  20                 	db	32
   272  00230B  6F                 	db	111
   273  00230C  75                 	db	117
   274  00230D  74                 	db	116
   275  00230E  73                 	db	115
   276  00230F  69                 	db	105
   277  002310  64                 	db	100
   278  002311  65                 	db	101
   279  002312  20                 	db	32
   280  002313  62                 	db	98
   281  002314  6F                 	db	111
   282  002315  75                 	db	117
   283  002316  6E                 	db	110
   284  002317  64                 	db	100
   285  002318  61                 	db	97
   286  002319  72                 	db	114
   287  00231A  69                 	db	105
   288  00231B  65                 	db	101
   289  00231C  73                 	db	115
   290  00231D  0A                 	db	10
   291  00231E  00                 	db	0
   292                           
   293                           ;initializer for _resetPos
   294  00231F  52                 	db	82
   295  002320  65                 	db	101
   296  002321  73                 	db	115
   297  002322  65                 	db	101
   298  002323  74                 	db	116
   299  002324  74                 	db	116
   300  002325  69                 	db	105
   301  002326  6E                 	db	110
   302  002327  67                 	db	103
   303  002328  20                 	db	32
   304  002329  74                 	db	116
   305  00232A  68                 	db	104
   306  00232B  65                 	db	101
   307  00232C  20                 	db	32
   308  00232D  69                 	db	105
   309  00232E  6E                 	db	110
   310  00232F  69                 	db	105
   311  002330  74                 	db	116
   312  002331  69                 	db	105
   313  002332  61                 	db	97
   314  002333  6C                 	db	108
   315  002334  20                 	db	32
   316  002335  70                 	db	112
   317  002336  6F                 	db	111
   318  002337  73                 	db	115
   319  002338  69                 	db	105
   320  002339  74                 	db	116
   321  00233A  69                 	db	105
   322  00233B  6F                 	db	111
   323  00233C  6E                 	db	110
   324  00233D  0A                 	db	10
   325  00233E  00                 	db	0
   326                           
   327                           ;initializer for _errString_Feed
   328  00233F  45                 	db	69
   329  002340  72                 	db	114
   330  002341  72                 	db	114
   331  002342  6F                 	db	111
   332  002343  72                 	db	114
   333  002344  2C                 	db	44
   334  002345  20                 	db	32
   335  002346  66                 	db	102
   336  002347  65                 	db	101
   337  002348  65                 	db	101
   338  002349  64                 	db	100
   339  00234A  20                 	db	32
   340  00234B  6C                 	db	108
   341  00234C  69                 	db	105
   342  00234D  6E                 	db	110
   343  00234E  65                 	db	101
   344  00234F  20                 	db	32
   345  002350  6E                 	db	110
   346  002351  6F                 	db	111
   347  002352  74                 	db	116
   348  002353  20                 	db	32
   349  002354  64                 	db	100
   350  002355  65                 	db	101
   351  002356  66                 	db	102
   352  002357  69                 	db	105
   353  002358  6E                 	db	110
   354  002359  65                 	db	101
   355  00235A  64                 	db	100
   356  00235B  0A                 	db	10
   357  00235C  00                 	db	0
   358                           
   359                           ;initializer for _movingToPlace
   360  00235D  4D                 	db	77
   361  00235E  6F                 	db	111
   362  00235F  76                 	db	118
   363  002360  69                 	db	105
   364  002361  6E                 	db	110
   365  002362  67                 	db	103
   366  002363  20                 	db	32
   367  002364  74                 	db	116
   368  002365  6F                 	db	111
   369  002366  20                 	db	32
   370  002367  74                 	db	116
   371  002368  68                 	db	104
   372  002369  65                 	db	101
   373  00236A  20                 	db	32
   374  00236B  70                 	db	112
   375  00236C  6C                 	db	108
   376  00236D  61                 	db	97
   377  00236E  63                 	db	99
   378  00236F  65                 	db	101
   379  002370  20                 	db	32
   380  002371  70                 	db	112
   381  002372  6F                 	db	111
   382  002373  73                 	db	115
   383  002374  69                 	db	105
   384  002375  74                 	db	116
   385  002376  69                 	db	105
   386  002377  6F                 	db	111
   387  002378  6E                 	db	110
   388  002379  0A                 	db	10
   389  00237A  00                 	db	0
   390                           
   391                           ;initializer for _movingToPick
   392  00237B  4D                 	db	77
   393  00237C  6F                 	db	111
   394  00237D  76                 	db	118
   395  00237E  69                 	db	105
   396  00237F  6E                 	db	110
   397  002380  67                 	db	103
   398  002381  20                 	db	32
   399  002382  74                 	db	116
   400  002383  6F                 	db	111
   401  002384  20                 	db	32
   402  002385  74                 	db	116
   403  002386  68                 	db	104
   404  002387  65                 	db	101
   405  002388  20                 	db	32
   406  002389  70                 	db	112
   407  00238A  69                 	db	105
   408  00238B  63                 	db	99
   409  00238C  6B                 	db	107
   410  00238D  20                 	db	32
   411  00238E  70                 	db	112
   412  00238F  6F                 	db	111
   413  002390  73                 	db	115
   414  002391  69                 	db	105
   415  002392  74                 	db	116
   416  002393  69                 	db	105
   417  002394  6F                 	db	111
   418  002395  6E                 	db	110
   419  002396  0A                 	db	10
   420  002397  00                 	db	0
   421                           
   422                           ;initializer for _start
   423  002398  53                 	db	83
   424  002399  74                 	db	116
   425  00239A  61                 	db	97
   426  00239B  72                 	db	114
   427  00239C  74                 	db	116
   428  00239D  69                 	db	105
   429  00239E  6E                 	db	110
   430  00239F  67                 	db	103
   431  0023A0  20                 	db	32
   432  0023A1  74                 	db	116
   433  0023A2  68                 	db	104
   434  0023A3  65                 	db	101
   435  0023A4  20                 	db	32
   436  0023A5  50                 	db	80
   437  0023A6  6E                 	db	110
   438  0023A7  50                 	db	80
   439  0023A8  20                 	db	32
   440  0023A9  73                 	db	115
   441  0023AA  65                 	db	101
   442  0023AB  71                 	db	113
   443  0023AC  75                 	db	117
   444  0023AD  65                 	db	101
   445  0023AE  6E                 	db	110
   446  0023AF  63                 	db	99
   447  0023B0  65                 	db	101
   448  0023B1  0A                 	db	10
   449  0023B2  00                 	db	0
   450                           
   451                           ;initializer for _errString_Command
   452  0023B3  43                 	db	67
   453  0023B4  6F                 	db	111
   454  0023B5  6D                 	db	109
   455  0023B6  6D                 	db	109
   456  0023B7  61                 	db	97
   457  0023B8  6E                 	db	110
   458  0023B9  64                 	db	100
   459  0023BA  20                 	db	32
   460  0023BB  6E                 	db	110
   461  0023BC  6F                 	db	111
   462  0023BD  74                 	db	116
   463  0023BE  20                 	db	32
   464  0023BF  72                 	db	114
   465  0023C0  65                 	db	101
   466  0023C1  63                 	db	99
   467  0023C2  6F                 	db	111
   468  0023C3  67                 	db	103
   469  0023C4  6E                 	db	110
   470  0023C5  69                 	db	105
   471  0023C6  7A                 	db	122
   472  0023C7  65                 	db	101
   473  0023C8  64                 	db	100
   474  0023C9  0A                 	db	10
   475  0023CA  00                 	db	0
   476                           
   477                           ;initializer for _rotateOBJ
   478  0023CB  52                 	db	82
   479  0023CC  6F                 	db	111
   480  0023CD  74                 	db	116
   481  0023CE  61                 	db	97
   482  0023CF  74                 	db	116
   483  0023D0  69                 	db	105
   484  0023D1  6E                 	db	110
   485  0023D2  67                 	db	103
   486  0023D3  20                 	db	32
   487  0023D4  74                 	db	116
   488  0023D5  68                 	db	104
   489  0023D6  65                 	db	101
   490  0023D7  20                 	db	32
   491  0023D8  6F                 	db	111
   492  0023D9  62                 	db	98
   493  0023DA  6A                 	db	106
   494  0023DB  65                 	db	101
   495  0023DC  63                 	db	99
   496  0023DD  74                 	db	116
   497  0023DE  0A                 	db	10
   498  0023DF  00                 	db	0
   499                           
   500                           ;initializer for _placeTheOBJ
   501  0023E0  50                 	db	80
   502  0023E1  6C                 	db	108
   503  0023E2  61                 	db	97
   504  0023E3  63                 	db	99
   505  0023E4  69                 	db	105
   506  0023E5  6E                 	db	110
   507  0023E6  67                 	db	103
   508  0023E7  20                 	db	32
   509  0023E8  74                 	db	116
   510  0023E9  68                 	db	104
   511  0023EA  65                 	db	101
   512  0023EB  20                 	db	32
   513  0023EC  6F                 	db	111
   514  0023ED  62                 	db	98
   515  0023EE  6A                 	db	106
   516  0023EF  65                 	db	101
   517  0023F0  63                 	db	99
   518  0023F1  74                 	db	116
   519  0023F2  0A                 	db	10
   520  0023F3  00                 	db	0
   521                           
   522                           	psect	idataBANK2
   523  0023F4                     __pidataBANK2:
   524                           	callstack 0
   525                           
   526                           ;initializer for _errString_PointZ
   527  0023F4  45                 	db	69
   528  0023F5  72                 	db	114
   529  0023F6  72                 	db	114
   530  0023F7  6F                 	db	111
   531  0023F8  72                 	db	114
   532  0023F9  2C                 	db	44
   533  0023FA  20                 	db	32
   534  0023FB  74                 	db	116
   535  0023FC  69                 	db	105
   536  0023FD  6D                 	db	109
   537  0023FE  65                 	db	101
   538  0023FF  20                 	db	32
   539  002400  65                 	db	101
   540  002401  78                 	db	120
   541  002402  63                 	db	99
   542  002403  65                 	db	101
   543  002404  65                 	db	101
   544  002405  64                 	db	100
   545  002406  65                 	db	101
   546  002407  64                 	db	100
   547  002408  20                 	db	32
   548  002409  74                 	db	116
   549  00240A  6F                 	db	111
   550  00240B  20                 	db	32
   551  00240C  72                 	db	114
   552  00240D  65                 	db	101
   553  00240E  61                 	db	97
   554  00240F  63                 	db	99
   555  002410  68                 	db	104
   556  002411  20                 	db	32
   557  002412  74                 	db	116
   558  002413  68                 	db	104
   559  002414  65                 	db	101
   560  002415  20                 	db	32
   561  002416  65                 	db	101
   562  002417  6E                 	db	110
   563  002418  64                 	db	100
   564  002419  20                 	db	32
   565  00241A  6F                 	db	111
   566  00241B  66                 	db	102
   567  00241C  20                 	db	32
   568  00241D  74                 	db	116
   569  00241E  68                 	db	104
   570  00241F  65                 	db	101
   571  002420  20                 	db	32
   572  002421  5A                 	db	90
   573  002422  20                 	db	32
   574  002423  41                 	db	65
   575  002424  78                 	db	120
   576  002425  69                 	db	105
   577  002426  73                 	db	115
   578  002427  0A                 	db	10
   579  002428  00                 	db	0
   580                           
   581                           ;initializer for _errString_Point
   582  002429  45                 	db	69
   583  00242A  72                 	db	114
   584  00242B  72                 	db	114
   585  00242C  6F                 	db	111
   586  00242D  72                 	db	114
   587  00242E  2C                 	db	44
   588  00242F  20                 	db	32
   589  002430  74                 	db	116
   590  002431  69                 	db	105
   591  002432  6D                 	db	109
   592  002433  65                 	db	101
   593  002434  20                 	db	32
   594  002435  65                 	db	101
   595  002436  78                 	db	120
   596  002437  63                 	db	99
   597  002438  65                 	db	101
   598  002439  65                 	db	101
   599  00243A  64                 	db	100
   600  00243B  65                 	db	101
   601  00243C  64                 	db	100
   602  00243D  20                 	db	32
   603  00243E  74                 	db	116
   604  00243F  6F                 	db	111
   605  002440  20                 	db	32
   606  002441  72                 	db	114
   607  002442  65                 	db	101
   608  002443  61                 	db	97
   609  002444  63                 	db	99
   610  002445  68                 	db	104
   611  002446  20                 	db	32
   612  002447  74                 	db	116
   613  002448  68                 	db	104
   614  002449  65                 	db	101
   615  00244A  20                 	db	32
   616  00244B  70                 	db	112
   617  00244C  6F                 	db	111
   618  00244D  69                 	db	105
   619  00244E  6E                 	db	110
   620  00244F  74                 	db	116
   621  002450  0A                 	db	10
   622  002451  00                 	db	0
   623                           
   624                           ;initializer for _errString_ZEND
   625  002452  45                 	db	69
   626  002453  72                 	db	114
   627  002454  72                 	db	114
   628  002455  6F                 	db	111
   629  002456  72                 	db	114
   630  002457  2C                 	db	44
   631  002458  20                 	db	32
   632  002459  6E                 	db	110
   633  00245A  6F                 	db	111
   634  00245B  20                 	db	32
   635  00245C  6F                 	db	111
   636  00245D  62                 	db	98
   637  00245E  6A                 	db	106
   638  00245F  65                 	db	101
   639  002460  63                 	db	99
   640  002461  74                 	db	116
   641  002462  20                 	db	32
   642  002463  72                 	db	114
   643  002464  65                 	db	101
   644  002465  6C                 	db	108
   645  002466  65                 	db	101
   646  002467  76                 	db	118
   647  002468  61                 	db	97
   648  002469  74                 	db	116
   649  00246A  65                 	db	101
   650  00246B  64                 	db	100
   651  00246C  20                 	db	32
   652  00246D  61                 	db	97
   653  00246E  6C                 	db	108
   654  00246F  6F                 	db	111
   655  002470  6E                 	db	110
   656  002471  67                 	db	103
   657  002472  20                 	db	32
   658  002473  5A                 	db	90
   659  002474  20                 	db	32
   660  002475  41                 	db	65
   661  002476  78                 	db	120
   662  002477  69                 	db	105
   663  002478  73                 	db	115
   664  002479  0A                 	db	10
   665  00247A  00                 	db	0
   666                           
   667                           ;initializer for _errString_Reset
   668  00247B  45                 	db	69
   669  00247C  72                 	db	114
   670  00247D  72                 	db	114
   671  00247E  6F                 	db	111
   672  00247F  72                 	db	114
   673  002480  2C                 	db	44
   674  002481  20                 	db	32
   675  002482  74                 	db	116
   676  002483  69                 	db	105
   677  002484  6D                 	db	109
   678  002485  65                 	db	101
   679  002486  20                 	db	32
   680  002487  65                 	db	101
   681  002488  78                 	db	120
   682  002489  63                 	db	99
   683  00248A  65                 	db	101
   684  00248B  65                 	db	101
   685  00248C  64                 	db	100
   686  00248D  65                 	db	101
   687  00248E  64                 	db	100
   688  00248F  20                 	db	32
   689  002490  74                 	db	116
   690  002491  6F                 	db	111
   691  002492  20                 	db	32
   692  002493  72                 	db	114
   693  002494  65                 	db	101
   694  002495  73                 	db	115
   695  002496  65                 	db	101
   696  002497  74                 	db	116
   697  002498  20                 	db	32
   698  002499  70                 	db	112
   699  00249A  6F                 	db	111
   700  00249B  73                 	db	115
   701  00249C  69                 	db	105
   702  00249D  74                 	db	116
   703  00249E  69                 	db	105
   704  00249F  6F                 	db	111
   705  0024A0  6E                 	db	110
   706  0024A1  0A                 	db	10
   707  0024A2  00                 	db	0
   708                           
   709                           ;initializer for _errString_Fatal
   710  0024A3  46                 	db	70
   711  0024A4  61                 	db	97
   712  0024A5  74                 	db	116
   713  0024A6  61                 	db	97
   714  0024A7  6C                 	db	108
   715  0024A8  20                 	db	32
   716  0024A9  45                 	db	69
   717  0024AA  72                 	db	114
   718  0024AB  72                 	db	114
   719  0024AC  6F                 	db	111
   720  0024AD  72                 	db	114
   721  0024AE  2C                 	db	44
   722  0024AF  20                 	db	32
   723  0024B0  70                 	db	112
   724  0024B1  6C                 	db	108
   725  0024B2  65                 	db	101
   726  0024B3  61                 	db	97
   727  0024B4  73                 	db	115
   728  0024B5  65                 	db	101
   729  0024B6  20                 	db	32
   730  0024B7  72                 	db	114
   731  0024B8  65                 	db	101
   732  0024B9  73                 	db	115
   733  0024BA  65                 	db	101
   734  0024BB  74                 	db	116
   735  0024BC  20                 	db	32
   736  0024BD  74                 	db	116
   737  0024BE  68                 	db	104
   738  0024BF  65                 	db	101
   739  0024C0  20                 	db	32
   740  0024C1  64                 	db	100
   741  0024C2  65                 	db	101
   742  0024C3  76                 	db	118
   743  0024C4  69                 	db	105
   744  0024C5  63                 	db	99
   745  0024C6  65                 	db	101
   746  0024C7  21                 	db	33
   747  0024C8  0A                 	db	10
   748  0024C9  00                 	db	0
   749                           
   750                           	psect	smallconst
   751  000600                     __psmallconst:
   752                           	callstack 0
   753  000600  00                 	db	0
   754  000601  0000               	dw	0
   755  000603  4000               	dw	16384
   756  000605                     __end_ofrotateObj@stepAngle:
   757                           	callstack 0
   758  000605  0065               	dw	101
   759  000607                     __end_of_maxY:
   760                           	callstack 0
   761  000607  0065               	dw	101
   762  000609                     __end_of_maxX:
   763                           	callstack 0
   764  000609  0400               	dw	1024
   765  00060B                     __end_of_therm_pressure:
   766                           	callstack 0
   767  00060B  0200               	dw	512
   768  00060D                     __end_of_touch_pressure:
   769                           	callstack 0
   770  00060D                     _feeder3Pos:
   771                           	callstack 0
   772  00060D  0F                 	db	15
   773  00060E  50                 	db	80
   774  00060F                     __end_of_feeder3Pos:
   775                           	callstack 0
   776  00060F                     _feeder2Pos:
   777                           	callstack 0
   778  00060F  0F                 	db	15
   779  000610  32                 	db	50
   780  000611                     __end_of_feeder2Pos:
   781                           	callstack 0
   782  000611                     _feeder1Pos:
   783                           	callstack 0
   784  000611  0F                 	db	15
   785  000612  14                 	db	20
   786  000613                     __end_of_feeder1Pos:
   787                           	callstack 0
   788  000613  64                 	db	100
   789  000614                     __end_of_maxFeedY:
   790                           	callstack 0
   791  000614  1E                 	db	30
   792  000615                     __end_of_maxFeedX:
   793                           	callstack 0
   794  0000                     _TMR0	set	4054
   795  0000                     _T1CONbits	set	4045
   796  0000                     _TXREG	set	4013
   797  0000                     _SPBRG	set	4015
   798  0000                     _RCSTAbits	set	4011
   799  0000                     _TXSTAbits	set	4012
   800  0000                     _TRISCbits	set	3988
   801  0000                     _RCREG1	set	4014
   802  0000                     _ADRESH	set	4036
   803  0000                     _ADRESL	set	4035
   804  0000                     _PIR1bits	set	3998
   805  0000                     _RCONbits	set	4048
   806  0000                     _INTCONbits	set	4082
   807  0000                     _IPR1bits	set	3999
   808  0000                     _PIE1bits	set	3997
   809  0000                     _ADCON0bits	set	4034
   810  0000                     _RCSTA1bits	set	4011
   811  0000                     _LATD	set	3980
   812  0000                     _PORTDbits	set	3971
   813  0000                     _TMR2	set	4044
   814  0000                     _LATC	set	3979
   815  0000                     _LATB	set	3978
   816  0000                     _LATA	set	3977
   817  0000                     _PORTEbits	set	3972
   818  0000                     _T0CONbits	set	4053
   819  0000                     _T2CONbits	set	4042
   820  0000                     _LATDbits	set	3980
   821  0000                     _LATCbits	set	3979
   822  0000                     _LATBbits	set	3978
   823  0000                     _LATAbits	set	3977
   824  0000                     _TRISDbits	set	3989
   825  0000                     _TRISEbits	set	3990
   826  0000                     _TRISD	set	3989
   827  0000                     _TRISC	set	3988
   828  0000                     _TRISB	set	3987
   829  0000                     _TRISA	set	3986
   830  0000                     _ADCON1bits	set	4033
   831  000615  00                 	db	0	; dummy byte at the end
   832  0000                     
   833                           ; #config settings
   834                           
   835                           	psect	cinit
   836  002588                     __pcinit:
   837                           	callstack 0
   838  002588                     start_initialization:
   839                           	callstack 0
   840  002588                     __initialization:
   841                           	callstack 0
   842                           
   843                           ; Initialize objects allocated to BANK2 (214 bytes)
   844                           ; load TBLPTR registers with __pidataBANK2
   845  002588  0EF4               	movlw	low __pidataBANK2
   846  00258A  6EF6               	movwf	tblptrl,c
   847  00258C  0E23               	movlw	high __pidataBANK2
   848  00258E  6EF7               	movwf	tblptrh,c
   849  002590  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   850  002592  6EF8               	movwf	tblptru,c
   851  002594  EE02  F000         	lfsr	0,__pdataBANK2
   852  002598  EE10 F0D6          	lfsr	1,214
   853  00259C                     copy_data0:
   854  00259C  0009               	tblrd		*+
   855  00259E  CFF5 FFEE          	movff	tablat,postinc0
   856  0025A2  50E5               	movf	postdec1,w,c
   857  0025A4  50E1               	movf	fsr1l,w,c
   858  0025A6  E1FA               	bnz	copy_data0
   859                           
   860                           ; Initialize objects allocated to BANK1 (246 bytes)
   861                           ; load TBLPTR registers with __pidataBANK1
   862  0025A8  0EFE               	movlw	low __pidataBANK1
   863  0025AA  6EF6               	movwf	tblptrl,c
   864  0025AC  0E22               	movlw	high __pidataBANK1
   865  0025AE  6EF7               	movwf	tblptrh,c
   866  0025B0  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   867  0025B2  6EF8               	movwf	tblptru,c
   868  0025B4  EE01  F000         	lfsr	0,__pdataBANK1
   869  0025B8  EE10 F0F6          	lfsr	1,246
   870  0025BC                     copy_data1:
   871  0025BC  0009               	tblrd		*+
   872  0025BE  CFF5 FFEE          	movff	tablat,postinc0
   873  0025C2  50E5               	movf	postdec1,w,c
   874  0025C4  50E1               	movf	fsr1l,w,c
   875  0025C6  E1FA               	bnz	copy_data1
   876                           
   877                           ; Initialize objects allocated to BANK0 (100 bytes)
   878                           ; load TBLPTR registers with __pidataBANK0
   879  0025C8  0E2E               	movlw	low __pidataBANK0
   880  0025CA  6EF6               	movwf	tblptrl,c
   881  0025CC  0E26               	movlw	high __pidataBANK0
   882  0025CE  6EF7               	movwf	tblptrh,c
   883  0025D0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   884  0025D2  6EF8               	movwf	tblptru,c
   885  0025D4  EE00  F080         	lfsr	0,__pdataBANK0
   886  0025D8  EE10 F064          	lfsr	1,100
   887  0025DC                     copy_data2:
   888  0025DC  0009               	tblrd		*+
   889  0025DE  CFF5 FFEE          	movff	tablat,postinc0
   890  0025E2  50E5               	movf	postdec1,w,c
   891  0025E4  50E1               	movf	fsr1l,w,c
   892  0025E6  E1FA               	bnz	copy_data2
   893                           
   894                           ; Initialize objects allocated to COMRAM (7 bytes)
   895                           ; load TBLPTR registers with __pidataCOMRAM
   896  0025E8  0EFA               	movlw	low __pidataCOMRAM
   897  0025EA  6EF6               	movwf	tblptrl,c
   898  0025EC  0E29               	movlw	high __pidataCOMRAM
   899  0025EE  6EF7               	movwf	tblptrh,c
   900  0025F0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   901  0025F2  6EF8               	movwf	tblptru,c
   902  0025F4  EE00  F067         	lfsr	0,__pdataCOMRAM
   903  0025F8  EE10 F007          	lfsr	1,7
   904  0025FC                     copy_data3:
   905  0025FC  0009               	tblrd		*+
   906  0025FE  CFF5 FFEE          	movff	tablat,postinc0
   907  002602  50E5               	movf	postdec1,w,c
   908  002604  50E1               	movf	fsr1l,w,c
   909  002606  E1FA               	bnz	copy_data3
   910                           
   911                           ; Clear objects allocated to BANK0 (28 bytes)
   912  002608  EE00  F0E4         	lfsr	0,__pbssBANK0
   913  00260C  0E1C               	movlw	28
   914  00260E                     clear_0:
   915  00260E  6AEE               	clrf	postinc0,c
   916  002610  06E8               	decf	wreg,f,c
   917  002612  E1FD               	bnz	clear_0
   918                           
   919                           ; Clear objects allocated to COMRAM (36 bytes)
   920  002614  EE00  F043         	lfsr	0,__pbssCOMRAM
   921  002618  0E24               	movlw	36
   922  00261A                     clear_1:
   923  00261A  6AEE               	clrf	postinc0,c
   924  00261C  06E8               	decf	wreg,f,c
   925  00261E  E1FD               	bnz	clear_1
   926  002620                     end_of_initialization:
   927                           	callstack 0
   928  002620                     __end_of__initialization:
   929                           	callstack 0
   930  002620  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   931  002622  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   932  002624  0E00               	movlw	low (__Lmediumconst shr (0+16))
   933  002626  6EF8               	movwf	tblptru,c
   934  002628  0100               	movlb	0
   935  00262A  EF97  F00D         	goto	_main	;jump to C main() function
   936                           
   937                           	psect	bssCOMRAM
   938  000043                     __pbssCOMRAM:
   939                           	callstack 0
   940  000043                     _receivedMex:
   941                           	callstack 0
   942  000043                     	ds	9
   943  00004C                     _posVector:
   944                           	callstack 0
   945  00004C                     	ds	3
   946  00004F                     _pwmPeriod:
   947                           	callstack 0
   948  00004F                     	ds	2
   949  000051                     _single_cycle:
   950                           	callstack 0
   951  000051                     	ds	2
   952  000053                     _ADC_res:
   953                           	callstack 0
   954  000053                     	ds	2
   955  000055                     _newFeeder:
   956                           	callstack 0
   957  000055                     	ds	2
   958  000057                     _rotAngle:
   959                           	callstack 0
   960  000057                     	ds	2
   961  000059                     _tm0Error:
   962                           	callstack 0
   963  000059                     	ds	2
   964  00005B                     _stepToggle:
   965                           	callstack 0
   966  00005B                     	ds	1
   967  00005C                     _pwmStep:
   968                           	callstack 0
   969  00005C                     	ds	1
   970  00005D                     _neverCheck:
   971                           	callstack 0
   972  00005D                     	ds	1
   973  00005E                     _counter:
   974                           	callstack 0
   975  00005E                     	ds	1
   976  00005F                     __newSequence:
   977                           	callstack 0
   978  00005F                     	ds	1
   979  000060                     __fatalError:
   980                           	callstack 0
   981  000060                     	ds	1
   982  000061                     _dataCounter:
   983                           	callstack 0
   984  000061                     	ds	1
   985  000062                     _completeStep:
   986                           	callstack 0
   987  000062                     	ds	1
   988  000063                     _tm0Count:
   989                           	callstack 0
   990  000063                     	ds	1
   991  000064                     _therm_rel:
   992                           	callstack 0
   993  000064                     	ds	1
   994  000065                     _touch_rel:
   995                           	callstack 0
   996  000065                     	ds	1
   997  000066                     _tm0Limit:
   998                           	callstack 0
   999  000066                     	ds	1
  1000                           
  1001                           	psect	dataCOMRAM
  1002  000067                     __pdataCOMRAM:
  1003                           	callstack 0
  1004  000067                     _motCounter:
  1005                           	callstack 0
  1006  000067                     	ds	6
  1007  00006D                     _mexLength:
  1008                           	callstack 0
  1009  00006D                     	ds	1
  1010                           
  1011                           	psect	bssBANK0
  1012  0000E4                     __pbssBANK0:
  1013                           	callstack 0
  1014  0000E4                     _dataSequence:
  1015                           	callstack 0
  1016  0000E4                     	ds	20
  1017  0000F8                     _newSequenceData:
  1018                           	callstack 0
  1019  0000F8                     	ds	8
  1020                           
  1021                           	psect	dataBANK0
  1022  000080                     __pdataBANK0:
  1023                           	callstack 0
  1024  000080                     rotateObj@rotSequence:
  1025                           	callstack 0
  1026  000080                     	ds	4
  1027  000084                     _stepMot3:
  1028                           	callstack 0
  1029  000084                     	ds	4
  1030  000088                     _stepMot2:
  1031                           	callstack 0
  1032  000088                     	ds	4
  1033  00008C                     _stepMot1:
  1034                           	callstack 0
  1035  00008C                     	ds	4
  1036  000090                     _pickingTheOBJ:
  1037                           	callstack 0
  1038  000090                     	ds	20
  1039  0000A4                     _OBJRelease:
  1040                           	callstack 0
  1041  0000A4                     	ds	17
  1042  0000B5                     _liftingTheArm:
  1043                           	callstack 0
  1044  0000B5                     	ds	17
  1045  0000C6                     _ready:
  1046                           	callstack 0
  1047  0000C6                     	ds	15
  1048  0000D5                     _OBJPicked:
  1049                           	callstack 0
  1050  0000D5                     	ds	15
  1051                           
  1052                           	psect	dataBANK1
  1053  000100                     __pdataBANK1:
  1054                           	callstack 0
  1055  000100                     _errString_Bound:
  1056                           	callstack 0
  1057  000100                     	ds	33
  1058  000121                     _resetPos:
  1059                           	callstack 0
  1060  000121                     	ds	32
  1061  000141                     _errString_Feed:
  1062                           	callstack 0
  1063  000141                     	ds	30
  1064  00015F                     _movingToPlace:
  1065                           	callstack 0
  1066  00015F                     	ds	30
  1067  00017D                     _movingToPick:
  1068                           	callstack 0
  1069  00017D                     	ds	29
  1070  00019A                     _start:
  1071                           	callstack 0
  1072  00019A                     	ds	27
  1073  0001B5                     _errString_Command:
  1074                           	callstack 0
  1075  0001B5                     	ds	24
  1076  0001CD                     _rotateOBJ:
  1077                           	callstack 0
  1078  0001CD                     	ds	21
  1079  0001E2                     _placeTheOBJ:
  1080                           	callstack 0
  1081  0001E2                     	ds	20
  1082                           
  1083                           	psect	dataBANK2
  1084  000200                     __pdataBANK2:
  1085                           	callstack 0
  1086  000200                     _errString_PointZ:
  1087                           	callstack 0
  1088  000200                     	ds	53
  1089  000235                     _errString_Point:
  1090                           	callstack 0
  1091  000235                     	ds	41
  1092  00025E                     _errString_ZEND:
  1093                           	callstack 0
  1094  00025E                     	ds	41
  1095  000287                     _errString_Reset:
  1096                           	callstack 0
  1097  000287                     	ds	40
  1098  0002AF                     _errString_Fatal:
  1099                           	callstack 0
  1100  0002AF                     	ds	39
  1101                           
  1102                           	psect	cstackBANK2
  1103  0002D6                     __pcstackBANK2:
  1104                           	callstack 0
  1105  0002D6                     executeData@data:
  1106                           	callstack 0
  1107                           
  1108                           ; 2 bytes @ 0x0
  1109  0002D6                     	ds	2
  1110  0002D8                     executeData@errCode:
  1111                           	callstack 0
  1112                           
  1113                           ; 1 bytes @ 0x2
  1114  0002D8                     	ds	1
  1115  0002D9                     ??_main:
  1116                           
  1117                           ; 1 bytes @ 0x3
  1118  0002D9                     	ds	2
  1119  0002DB                     main@errCode:
  1120                           	callstack 0
  1121                           
  1122                           ; 1 bytes @ 0x5
  1123  0002DB                     	ds	1
  1124  0002DC                     main@newData:
  1125                           	callstack 0
  1126                           
  1127                           ; 2 bytes @ 0x6
  1128  0002DC                     	ds	2
  1129                           
  1130                           	psect	cstackBANK1
  1131  0001F6                     __pcstackBANK1:
  1132                           	callstack 0
  1133  0001F6                     rotateObj@rotAngle:
  1134                           	callstack 0
  1135                           
  1136                           ; 1 bytes @ 0x0
  1137  0001F6                     	ds	1
  1138  0001F7                     rotateObj@totStep:
  1139                           	callstack 0
  1140                           
  1141                           ; 2 bytes @ 0x1
  1142  0001F7                     	ds	2
  1143  0001F9                     rotateObj@i:
  1144                           	callstack 0
  1145                           
  1146                           ; 2 bytes @ 0x3
  1147  0001F9                     	ds	2
  1148  0001FB                     rotateObj@c:
  1149                           	callstack 0
  1150                           
  1151                           ; 2 bytes @ 0x5
  1152  0001FB                     	ds	2
  1153  0001FD                     ??_executeData:
  1154                           
  1155                           ; 1 bytes @ 0x7
  1156  0001FD                     	ds	2
  1157                           
  1158                           	psect	cstackCOMRAM
  1159  000001                     __pcstackCOMRAM:
  1160                           	callstack 0
  1161  000001                     ?_retPeriod:
  1162                           	callstack 0
  1163  000001                     i2uartTx@ptr:
  1164                           	callstack 0
  1165                           
  1166                           ; 2 bytes @ 0x0
  1167  000001                     	ds	2
  1168  000003                     i2uartTx@length:
  1169                           	callstack 0
  1170                           
  1171                           ; 1 bytes @ 0x2
  1172  000003                     	ds	1
  1173  000004                     i2uartTx@i:
  1174                           	callstack 0
  1175                           
  1176                           ; 1 bytes @ 0x3
  1177  000004                     	ds	1
  1178  000005                     ??i2_printError:
  1179                           
  1180                           ; 1 bytes @ 0x4
  1181  000005                     	ds	2
  1182  000007                     i2printError@errCode:
  1183                           	callstack 0
  1184                           
  1185                           ; 1 bytes @ 0x6
  1186  000007                     	ds	1
  1187  000008                     ??i2_storeData:
  1188                           
  1189                           ; 1 bytes @ 0x7
  1190  000008                     	ds	2
  1191  00000A                     i2storeData@data:
  1192                           	callstack 0
  1193                           
  1194                           ; 1 bytes @ 0x9
  1195  00000A                     	ds	1
  1196  00000B                     ??_isr:
  1197                           
  1198                           ; 1 bytes @ 0xA
  1199  00000B                     	ds	6
  1200  000011                     isr@temp:
  1201                           	callstack 0
  1202                           
  1203                           ; 1 bytes @ 0x10
  1204  000011                     	ds	1
  1205  000012                     ??_shiftData:
  1206  000012                     ?_stepMade:
  1207                           	callstack 0
  1208  000012                     ?_stepCounter:
  1209                           	callstack 0
  1210  000012                     ?_returnTouch:
  1211                           	callstack 0
  1212  000012                     ?_returnTherm:
  1213                           	callstack 0
  1214  000012                     ?_getNewSequence:
  1215                           	callstack 0
  1216  000012                     ?_getData:
  1217                           	callstack 0
  1218  000012                     ?___xxtofl:
  1219                           	callstack 0
  1220  000012                     uartTx@ptr:
  1221                           	callstack 0
  1222  000012                     tim2Init@_pwmPeriod:
  1223                           	callstack 0
  1224  000012                     ___xxtofl@val:
  1225                           	callstack 0
  1226                           
  1227                           ; 4 bytes @ 0x11
  1228  000012                     	ds	2
  1229  000014                     shiftData@i:
  1230                           	callstack 0
  1231  000014                     uartTx@length:
  1232                           	callstack 0
  1233  000014                     stepMade@temp:
  1234                           	callstack 0
  1235                           
  1236                           ; 1 bytes @ 0x13
  1237  000014                     	ds	1
  1238  000015                     resetPosition@keepMovingX:
  1239                           	callstack 0
  1240  000015                     uartTx@i:
  1241                           	callstack 0
  1242  000015                     moveToPoint@x1:
  1243                           	callstack 0
  1244                           
  1245                           ; 2 bytes @ 0x14
  1246  000015                     	ds	1
  1247  000016                     ??_printError:
  1248  000016                     ??_printStatus:
  1249  000016                     ??___xxtofl:
  1250  000016                     resetPosition@keepMovingY:
  1251                           	callstack 0
  1252                           
  1253                           ; 1 bytes @ 0x15
  1254  000016                     	ds	1
  1255  000017                     resetPosition@keepMovingZ:
  1256                           	callstack 0
  1257  000017                     moveToPoint@y1:
  1258                           	callstack 0
  1259                           
  1260                           ; 2 bytes @ 0x16
  1261  000017                     	ds	1
  1262  000018                     printError@errCode:
  1263                           	callstack 0
  1264  000018                     printStatus@status:
  1265                           	callstack 0
  1266                           
  1267                           ; 1 bytes @ 0x17
  1268  000018                     	ds	1
  1269  000019                     ??_storeData:
  1270  000019                     moveToPoint@x2:
  1271                           	callstack 0
  1272                           
  1273                           ; 2 bytes @ 0x18
  1274  000019                     	ds	1
  1275  00001A                     ___xxtofl@sign:
  1276                           	callstack 0
  1277                           
  1278                           ; 1 bytes @ 0x19
  1279  00001A                     	ds	1
  1280  00001B                     storeData@data:
  1281                           	callstack 0
  1282  00001B                     ___xxtofl@exp:
  1283                           	callstack 0
  1284  00001B                     moveToPoint@y2:
  1285                           	callstack 0
  1286                           
  1287                           ; 2 bytes @ 0x1A
  1288  00001B                     	ds	1
  1289  00001C                     ___xxtofl@arg:
  1290                           	callstack 0
  1291                           
  1292                           ; 4 bytes @ 0x1B
  1293  00001C                     	ds	1
  1294  00001D                     ??_moveToPoint:
  1295                           
  1296                           ; 1 bytes @ 0x1C
  1297  00001D                     	ds	2
  1298  00001F                     moveToPoint@MOT1Direction:
  1299                           	callstack 0
  1300                           
  1301                           ; 1 bytes @ 0x1E
  1302  00001F                     	ds	1
  1303  000020                     ?___fldiv:
  1304                           	callstack 0
  1305  000020                     moveToPoint@MOT2Direction:
  1306                           	callstack 0
  1307  000020                     ___fldiv@b:
  1308                           	callstack 0
  1309                           
  1310                           ; 4 bytes @ 0x1F
  1311  000020                     	ds	1
  1312  000021                     moveToPoint@keepMovingX:
  1313                           	callstack 0
  1314                           
  1315                           ; 1 bytes @ 0x20
  1316  000021                     	ds	1
  1317  000022                     moveToPoint@keepMovingY:
  1318                           	callstack 0
  1319                           
  1320                           ; 1 bytes @ 0x21
  1321  000022                     	ds	2
  1322  000024                     ___fldiv@a:
  1323                           	callstack 0
  1324                           
  1325                           ; 4 bytes @ 0x23
  1326  000024                     	ds	4
  1327  000028                     ??___fldiv:
  1328                           
  1329                           ; 1 bytes @ 0x27
  1330  000028                     	ds	4
  1331  00002C                     ___fldiv@rem:
  1332                           	callstack 0
  1333                           
  1334                           ; 4 bytes @ 0x2B
  1335  00002C                     	ds	4
  1336  000030                     ___fldiv@sign:
  1337                           	callstack 0
  1338                           
  1339                           ; 1 bytes @ 0x2F
  1340  000030                     	ds	1
  1341  000031                     ___fldiv@new_exp:
  1342                           	callstack 0
  1343                           
  1344                           ; 2 bytes @ 0x30
  1345  000031                     	ds	2
  1346  000033                     ___fldiv@grs:
  1347                           	callstack 0
  1348                           
  1349                           ; 4 bytes @ 0x32
  1350  000033                     	ds	4
  1351  000037                     ___fldiv@bexp:
  1352                           	callstack 0
  1353                           
  1354                           ; 1 bytes @ 0x36
  1355  000037                     	ds	1
  1356  000038                     ___fldiv@aexp:
  1357                           	callstack 0
  1358                           
  1359                           ; 1 bytes @ 0x37
  1360  000038                     	ds	1
  1361  000039                     ?___fltol:
  1362                           	callstack 0
  1363  000039                     ___fltol@f1:
  1364                           	callstack 0
  1365                           
  1366                           ; 4 bytes @ 0x38
  1367  000039                     	ds	4
  1368  00003D                     ??___fltol:
  1369                           
  1370                           ; 1 bytes @ 0x3C
  1371  00003D                     	ds	4
  1372  000041                     ___fltol@sign1:
  1373                           	callstack 0
  1374                           
  1375                           ; 1 bytes @ 0x40
  1376  000041                     	ds	1
  1377  000042                     ___fltol@exp1:
  1378                           	callstack 0
  1379                           
  1380                           ; 1 bytes @ 0x41
  1381  000042                     	ds	1
  1382  000043                     
  1383                           ; 1 bytes @ 0x42
  1384 ;;
  1385 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1386 ;;
  1387 ;; *************** function _main *****************
  1388 ;; Defined at:
  1389 ;;		line 18 in file "main.c"
  1390 ;; Parameters:    Size  Location     Type
  1391 ;;		None
  1392 ;; Auto vars:     Size  Location     Type
  1393 ;;  newData         2    6[BANK2 ] PTR struct .
  1394 ;;		 -> newSequenceData(8), 
  1395 ;;  errCode         1    5[BANK2 ] unsigned char 
  1396 ;; Return value:  Size  Location     Type
  1397 ;;                  1    wreg      void 
  1398 ;; Registers used:
  1399 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1400 ;; Tracked objects:
  1401 ;;		On entry : 0/0
  1402 ;;		On exit  : 0/0
  1403 ;;		Unchanged: 0/0
  1404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1405 ;;      Params:         0       0       0       0       0       0       0
  1406 ;;      Locals:         0       0       0       3       0       0       0
  1407 ;;      Temps:          0       0       0       2       0       0       0
  1408 ;;      Totals:         0       0       0       5       0       0       0
  1409 ;;Total ram usage:        5 bytes
  1410 ;; Hardware stack levels required when called:    7
  1411 ;; This function calls:
  1412 ;;		_clearTM0
  1413 ;;		_executeData
  1414 ;;		_getNewSequence
  1415 ;;		_initADC
  1416 ;;		_initPinMotors
  1417 ;;		_interruptInit
  1418 ;;		_newSequence
  1419 ;;		_printError
  1420 ;;		_printStatus
  1421 ;;		_readSeq
  1422 ;;		_reduceSeq
  1423 ;;		_resetNewSequence
  1424 ;;		_resetPosition
  1425 ;;		_shiftData
  1426 ;;		_storeData
  1427 ;;		_tim0Init
  1428 ;;		_tim1Init
  1429 ;;		_tim2Init
  1430 ;;		_usartInit
  1431 ;; This function is called by:
  1432 ;;		Startup code after reset
  1433 ;; This function uses a non-reentrant model
  1434 ;;
  1435                           
  1436                           	psect	text0
  1437  001B2E                     __ptext0:
  1438                           	callstack 0
  1439  001B2E                     _main:
  1440                           	callstack 24
  1441  001B2E  FFFF               	dw	65535	; assembler added errata NOP
  1442                           
  1443                           ;main.c: 22:     interruptInit();
  1444  001B30  ECC7  F013         	call	_interruptInit	;wreg free
  1445  001B34                     
  1446                           ;main.c: 23:     initPinMotors();
  1447  001B34  EC15  F014         	call	_initPinMotors	;wreg free
  1448  001B38                     
  1449                           ;main.c: 24:     initADC();
  1450  001B38  EC28  F014         	call	_initADC	;wreg free
  1451  001B3C                     
  1452                           ;main.c: 25:     usartInit();
  1453  001B3C  EC3B  F014         	call	_usartInit	;wreg free
  1454  001B40                     
  1455                           ;main.c: 26:     tim0Init();
  1456  001B40  EC5D  F014         	call	_tim0Init	;wreg free
  1457  001B44                     
  1458                           ;main.c: 27:     tim1Init();
  1459  001B44  EC78  F014         	call	_tim1Init	;wreg free
  1460  001B48                     
  1461                           ;main.c: 28:     tim2Init(10);
  1462  001B48  0E00               	movlw	0
  1463  001B4A  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1464  001B4C  0E0A               	movlw	10
  1465  001B4E  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1466  001B50  EC54  F014         	call	_tim2Init	;wreg free
  1467  001B54                     
  1468                           ;main.c: 30:     printStatus(9);
  1469  001B54  0E09               	movlw	9
  1470  001B56  ECDC  F00C         	call	_printStatus
  1471  001B5A                     
  1472                           ;main.c: 32:     errCode = resetPosition();
  1473  001B5A  ECEA  F00B         	call	_resetPosition	;wreg free
  1474  001B5E  0102               	movlb	2	; () banked
  1475  001B60  6FDB               	movwf	main@errCode& (0+255),b
  1476  001B62                     
  1477                           ; BSR set to: 2
  1478                           ;main.c: 33:     if(errCode != 0){
  1479  001B62  51DB               	movf	main@errCode& (0+255),w,b
  1480  001B64  B4D8               	btfsc	status,2,c
  1481  001B66  EFB7  F00D         	goto	u4131
  1482  001B6A  EFBA  F00D         	goto	u4130
  1483  001B6E                     u4131:
  1484  001B6E  FFFF               	dw	65535	; assembler added errata NOP
  1485  001B70  EFC1  F00D         	goto	l4887
  1486  001B74                     u4130:
  1487  001B74  FFFF               	dw	65535	; assembler added errata NOP
  1488  001B76                     
  1489                           ; BSR set to: 2
  1490                           ;main.c: 34:         printError(errCode);
  1491  001B76  51DB               	movf	main@errCode& (0+255),w,b
  1492  001B78  ECD4  F00E         	call	_printError
  1493  001B7C                     l328:
  1494  001B7C  FFFF               	dw	65535	; assembler added errata NOP
  1495  001B7E  EFBE  F00D         	goto	l328
  1496  001B82                     l4887:
  1497  001B82  FFFF               	dw	65535	; assembler added errata NOP
  1498                           
  1499                           ; BSR set to: 2
  1500                           ;main.c: 37:     printStatus(10);
  1501  001B84  0E0A               	movlw	10
  1502  001B86  ECDC  F00C         	call	_printStatus
  1503  001B8A                     
  1504                           ;main.c: 40:     RCSTA1bits.CREN = 1;
  1505  001B8A  88AB               	bsf	171,4,c	;volatile
  1506  001B8C                     l4891:
  1507  001B8C  FFFF               	dw	65535	; assembler added errata NOP
  1508                           
  1509                           ;main.c: 43:         if(newSequence()){
  1510  001B8E  ECE9  F014         	call	_newSequence	;wreg free
  1511  001B92  0900               	iorlw	0
  1512  001B94  B4D8               	btfsc	status,2,c
  1513  001B96  EFCF  F00D         	goto	u4141
  1514  001B9A  EFD2  F00D         	goto	u4140
  1515  001B9E                     u4141:
  1516  001B9E  FFFF               	dw	65535	; assembler added errata NOP
  1517  001BA0  EF1B  F00E         	goto	l4911
  1518  001BA4                     u4140:
  1519  001BA4  FFFF               	dw	65535	; assembler added errata NOP
  1520  001BA6                     
  1521                           ;main.c: 44:             t_newSequence* newData = getNewSequence();
  1522  001BA6  EC7F  F014         	call	_getNewSequence	;wreg free
  1523  001BAA  C012  F2DC         	movff	?_getNewSequence,main@newData
  1524  001BAE  C013  F2DD         	movff	?_getNewSequence+1,main@newData+1
  1525  001BB2                     
  1526                           ;main.c: 46:             newFeeder[0] = newData ->init_posX;
  1527  001BB2  0102               	movlb	2	; () banked
  1528  001BB4  EE20 F002          	lfsr	2,2
  1529  001BB8  51DC               	movf	main@newData& (0+255),w,b
  1530  001BBA  26D9               	addwf	fsr2l,f,c
  1531  001BBC  51DD               	movf	(main@newData+1)& (0+255),w,b
  1532  001BBE  22DA               	addwfc	fsr2h,f,c
  1533  001BC0  50DF               	movf	indf2,w,c
  1534  001BC2  6E55               	movwf	_newFeeder^0,c
  1535  001BC4                     
  1536                           ; BSR set to: 2
  1537                           ;main.c: 47:             newFeeder[1] = newData ->init_posY;
  1538  001BC4  EE20 F003          	lfsr	2,3
  1539  001BC8  51DC               	movf	main@newData& (0+255),w,b
  1540  001BCA  26D9               	addwf	fsr2l,f,c
  1541  001BCC  51DD               	movf	(main@newData+1)& (0+255),w,b
  1542  001BCE  22DA               	addwfc	fsr2h,f,c
  1543  001BD0  50DF               	movf	indf2,w,c
  1544  001BD2  6E56               	movwf	(_newFeeder+1)^0,c
  1545  001BD4                     
  1546                           ; BSR set to: 2
  1547                           ;main.c: 50:             storeData(1);
  1548  001BD4  0E01               	movlw	1
  1549  001BD6  EC66  F008         	call	_storeData
  1550  001BDA                     
  1551                           ;main.c: 51:             storeData(0xFF);
  1552  001BDA  0EFF               	movlw	255
  1553  001BDC  EC66  F008         	call	_storeData
  1554  001BE0                     
  1555                           ;main.c: 52:             storeData(newData ->end_posX);
  1556  001BE0  0102               	movlb	2	; () banked
  1557  001BE2  EE20 F005          	lfsr	2,5
  1558  001BE6  51DC               	movf	main@newData& (0+255),w,b
  1559  001BE8  26D9               	addwf	fsr2l,f,c
  1560  001BEA  51DD               	movf	(main@newData+1)& (0+255),w,b
  1561  001BEC  22DA               	addwfc	fsr2h,f,c
  1562  001BEE  50DF               	movf	indf2,w,c
  1563  001BF0  EC66  F008         	call	_storeData
  1564  001BF4                     
  1565                           ;main.c: 53:             storeData(newData ->end_posY);
  1566  001BF4  0102               	movlb	2	; () banked
  1567  001BF6  EE20 F006          	lfsr	2,6
  1568  001BFA  51DC               	movf	main@newData& (0+255),w,b
  1569  001BFC  26D9               	addwf	fsr2l,f,c
  1570  001BFE  51DD               	movf	(main@newData+1)& (0+255),w,b
  1571  001C00  22DA               	addwfc	fsr2h,f,c
  1572  001C02  50DF               	movf	indf2,w,c
  1573  001C04  EC66  F008         	call	_storeData
  1574  001C08                     
  1575                           ;main.c: 54:             storeData(newData ->end_rot - newData ->init_rot);
  1576  001C08  0102               	movlb	2	; () banked
  1577  001C0A  EE20 F004          	lfsr	2,4
  1578  001C0E  51DC               	movf	main@newData& (0+255),w,b
  1579  001C10  26D9               	addwf	fsr2l,f,c
  1580  001C12  51DD               	movf	(main@newData+1)& (0+255),w,b
  1581  001C14  22DA               	addwfc	fsr2h,f,c
  1582  001C16  50DF               	movf	indf2,w,c
  1583  001C18  6FD9               	movwf	??_main& (0+255),b
  1584  001C1A  EE20 F007          	lfsr	2,7
  1585  001C1E  51DC               	movf	main@newData& (0+255),w,b
  1586  001C20  26D9               	addwf	fsr2l,f,c
  1587  001C22  51DD               	movf	(main@newData+1)& (0+255),w,b
  1588  001C24  22DA               	addwfc	fsr2h,f,c
  1589  001C26  50DF               	movf	indf2,w,c
  1590  001C28  6FDA               	movwf	(??_main+1)& (0+255),b
  1591  001C2A  51D9               	movf	??_main& (0+255),w,b
  1592  001C2C  5DDA               	subwf	(??_main+1)& (0+255),w,b
  1593  001C2E  EC66  F008         	call	_storeData
  1594  001C32                     
  1595                           ;main.c: 57:             resetNewSequence();
  1596  001C32  ECB4  F014         	call	_resetNewSequence	;wreg free
  1597  001C36                     l4911:
  1598  001C36  FFFF               	dw	65535	; assembler added errata NOP
  1599                           
  1600                           ;main.c: 59:         if(readSeq()){
  1601  001C38  ECE5  F014         	call	_readSeq	;wreg free
  1602  001C3C  0900               	iorlw	0
  1603  001C3E  B4D8               	btfsc	status,2,c
  1604  001C40  EF24  F00E         	goto	u4151
  1605  001C44  EF27  F00E         	goto	u4150
  1606  001C48                     u4151:
  1607  001C48  FFFF               	dw	65535	; assembler added errata NOP
  1608  001C4A  EFC6  F00D         	goto	l4891
  1609  001C4E                     u4150:
  1610  001C4E  FFFF               	dw	65535	; assembler added errata NOP
  1611  001C50                     
  1612                           ;main.c: 63:             errCode = executeData();
  1613  001C50  ECC6  F006         	call	_executeData	;wreg free
  1614  001C54  0102               	movlb	2	; () banked
  1615  001C56  6FDB               	movwf	main@errCode& (0+255),b
  1616  001C58                     
  1617                           ; BSR set to: 2
  1618                           ;main.c: 65:             printError(errCode);
  1619  001C58  51DB               	movf	main@errCode& (0+255),w,b
  1620  001C5A  ECD4  F00E         	call	_printError
  1621  001C5E                     
  1622                           ;main.c: 68:             clearTM0();
  1623  001C5E  EC8D  F014         	call	_clearTM0	;wreg free
  1624  001C62                     
  1625                           ;main.c: 72:             reduceSeq();
  1626  001C62  ECE1  F014         	call	_reduceSeq	;wreg free
  1627  001C66                     
  1628                           ;main.c: 73:             shiftData();
  1629  001C66  EC49  F013         	call	_shiftData	;wreg free
  1630  001C6A  EFC6  F00D         	goto	l4891
  1631  001C6E  EFD2  F000         	goto	start
  1632  001C72                     __end_of_main:
  1633                           	callstack 0
  1634                           
  1635 ;; *************** function _usartInit *****************
  1636 ;; Defined at:
  1637 ;;		line 124 in file "usart.c"
  1638 ;; Parameters:    Size  Location     Type
  1639 ;;		None
  1640 ;; Auto vars:     Size  Location     Type
  1641 ;;		None
  1642 ;; Return value:  Size  Location     Type
  1643 ;;                  1    wreg      void 
  1644 ;; Registers used:
  1645 ;;		wreg, status,2
  1646 ;; Tracked objects:
  1647 ;;		On entry : 0/0
  1648 ;;		On exit  : 0/0
  1649 ;;		Unchanged: 0/0
  1650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1651 ;;      Params:         0       0       0       0       0       0       0
  1652 ;;      Locals:         0       0       0       0       0       0       0
  1653 ;;      Temps:          0       0       0       0       0       0       0
  1654 ;;      Totals:         0       0       0       0       0       0       0
  1655 ;;Total ram usage:        0 bytes
  1656 ;; Hardware stack levels used:    1
  1657 ;; Hardware stack levels required when called:    4
  1658 ;; This function calls:
  1659 ;;		Nothing
  1660 ;; This function is called by:
  1661 ;;		_main
  1662 ;; This function uses a non-reentrant model
  1663 ;;
  1664                           
  1665                           	psect	text1
  1666  002876                     __ptext1:
  1667                           	callstack 0
  1668  002876                     _usartInit:
  1669                           	callstack 0
  1670  002876  FFFF               	dw	65535	; assembler added errata NOP
  1671  002878                     
  1672                           ;usart.c: 126:     TRISCbits.TRISC6 = 0;
  1673  002878  9C94               	bcf	148,6,c	;volatile
  1674                           
  1675                           ;usart.c: 127:     TRISCbits.TRISC7 = 1;
  1676  00287A  8E94               	bsf	148,7,c	;volatile
  1677                           
  1678                           ;usart.c: 129:     TXSTAbits.TX9 = 0;
  1679  00287C  9CAC               	bcf	172,6,c	;volatile
  1680                           
  1681                           ;usart.c: 130:     TXSTAbits.TXEN = 1;
  1682  00287E  8AAC               	bsf	172,5,c	;volatile
  1683                           
  1684                           ;usart.c: 131:     TXSTAbits.SYNC = 0;
  1685  002880  98AC               	bcf	172,4,c	;volatile
  1686                           
  1687                           ;usart.c: 132:     TXSTAbits.BRGH = 0;
  1688  002882  94AC               	bcf	172,2,c	;volatile
  1689                           
  1690                           ;usart.c: 134:     RCSTAbits.SPEN = 1;
  1691  002884  8EAB               	bsf	171,7,c	;volatile
  1692                           
  1693                           ;usart.c: 135:     RCSTAbits.RX9 = 0;
  1694  002886  9CAB               	bcf	171,6,c	;volatile
  1695                           
  1696                           ;usart.c: 136:     RCSTAbits.CREN = 0;
  1697  002888  98AB               	bcf	171,4,c	;volatile
  1698                           
  1699                           ;usart.c: 137:     RCSTAbits.ADDEN = 0;
  1700  00288A  96AB               	bcf	171,3,c	;volatile
  1701  00288C                     
  1702                           ;usart.c: 140:     SPBRG = 25;
  1703  00288C  0E19               	movlw	25
  1704  00288E  6EAF               	movwf	175,c	;volatile
  1705  002890  0012               	return		;funcret
  1706  002892  FFFF               	dw	65535	; errata NOP
  1707  002894                     __end_of_usartInit:
  1708                           	callstack 0
  1709                           
  1710 ;; *************** function _tim2Init *****************
  1711 ;; Defined at:
  1712 ;;		line 46 in file "timer.c"
  1713 ;; Parameters:    Size  Location     Type
  1714 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1715 ;; Auto vars:     Size  Location     Type
  1716 ;;		None
  1717 ;; Return value:  Size  Location     Type
  1718 ;;                  1    wreg      void 
  1719 ;; Registers used:
  1720 ;;		None
  1721 ;; Tracked objects:
  1722 ;;		On entry : 0/0
  1723 ;;		On exit  : 0/0
  1724 ;;		Unchanged: 0/0
  1725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1726 ;;      Params:         2       0       0       0       0       0       0
  1727 ;;      Locals:         0       0       0       0       0       0       0
  1728 ;;      Temps:          0       0       0       0       0       0       0
  1729 ;;      Totals:         2       0       0       0       0       0       0
  1730 ;;Total ram usage:        2 bytes
  1731 ;; Hardware stack levels used:    1
  1732 ;; Hardware stack levels required when called:    4
  1733 ;; This function calls:
  1734 ;;		Nothing
  1735 ;; This function is called by:
  1736 ;;		_main
  1737 ;; This function uses a non-reentrant model
  1738 ;;
  1739                           
  1740                           	psect	text2
  1741  0028A8                     __ptext2:
  1742                           	callstack 0
  1743  0028A8                     _tim2Init:
  1744                           	callstack 0
  1745  0028A8  FFFF               	dw	65535	; assembler added errata NOP
  1746  0028AA                     
  1747                           ;timer.c: 47:     T2CONbits.TMR2ON = 0;
  1748  0028AA  94CA               	bcf	202,2,c	;volatile
  1749                           
  1750                           ;timer.c: 48:     T2CONbits.T2CKPS1 = 1;
  1751  0028AC  82CA               	bsf	202,1,c	;volatile
  1752                           
  1753                           ;timer.c: 52:     pwmPeriod = _pwmPeriod;
  1754  0028AE  C012  F04F         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1755  0028B2  C013  F050         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1756  0028B6  0012               	return		;funcret
  1757  0028B8  FFFF               	dw	65535	; errata NOP
  1758  0028BA                     __end_of_tim2Init:
  1759                           	callstack 0
  1760                           
  1761 ;; *************** function _tim1Init *****************
  1762 ;; Defined at:
  1763 ;;		line 33 in file "timer.c"
  1764 ;; Parameters:    Size  Location     Type
  1765 ;;		None
  1766 ;; Auto vars:     Size  Location     Type
  1767 ;;		None
  1768 ;; Return value:  Size  Location     Type
  1769 ;;                  1    wreg      void 
  1770 ;; Registers used:
  1771 ;;		wreg, status,2
  1772 ;; Tracked objects:
  1773 ;;		On entry : 0/0
  1774 ;;		On exit  : 0/0
  1775 ;;		Unchanged: 0/0
  1776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1777 ;;      Params:         0       0       0       0       0       0       0
  1778 ;;      Locals:         0       0       0       0       0       0       0
  1779 ;;      Temps:          0       0       0       0       0       0       0
  1780 ;;      Totals:         0       0       0       0       0       0       0
  1781 ;;Total ram usage:        0 bytes
  1782 ;; Hardware stack levels used:    1
  1783 ;; Hardware stack levels required when called:    4
  1784 ;; This function calls:
  1785 ;;		Nothing
  1786 ;; This function is called by:
  1787 ;;		_main
  1788 ;; This function uses a non-reentrant model
  1789 ;;
  1790                           
  1791                           	psect	text3
  1792  0028F0                     __ptext3:
  1793                           	callstack 0
  1794  0028F0                     _tim1Init:
  1795                           	callstack 0
  1796  0028F0  FFFF               	dw	65535	; assembler added errata NOP
  1797  0028F2                     
  1798                           ;timer.c: 34:     T1CONbits.T1CKPS = 0x03;
  1799  0028F2  0E30               	movlw	48
  1800  0028F4  12CD               	iorwf	205,f,c	;volatile
  1801  0028F6                     
  1802                           ;timer.c: 35:     T1CONbits.TMR1CS = 0;
  1803  0028F6  92CD               	bcf	205,1,c	;volatile
  1804  0028F8                     
  1805                           ;timer.c: 37:     T1CONbits.TMR1ON = 1;
  1806  0028F8  80CD               	bsf	205,0,c	;volatile
  1807  0028FA  0012               	return		;funcret
  1808  0028FC  FFFF               	dw	65535	; errata NOP
  1809  0028FE                     __end_of_tim1Init:
  1810                           	callstack 0
  1811                           
  1812 ;; *************** function _tim0Init *****************
  1813 ;; Defined at:
  1814 ;;		line 21 in file "timer.c"
  1815 ;; Parameters:    Size  Location     Type
  1816 ;;		None
  1817 ;; Auto vars:     Size  Location     Type
  1818 ;;		None
  1819 ;; Return value:  Size  Location     Type
  1820 ;;                  1    wreg      void 
  1821 ;; Registers used:
  1822 ;;		wreg, status,2
  1823 ;; Tracked objects:
  1824 ;;		On entry : 0/0
  1825 ;;		On exit  : 0/0
  1826 ;;		Unchanged: 0/0
  1827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1828 ;;      Params:         0       0       0       0       0       0       0
  1829 ;;      Locals:         0       0       0       0       0       0       0
  1830 ;;      Temps:          0       0       0       0       0       0       0
  1831 ;;      Totals:         0       0       0       0       0       0       0
  1832 ;;Total ram usage:        0 bytes
  1833 ;; Hardware stack levels used:    1
  1834 ;; Hardware stack levels required when called:    4
  1835 ;; This function calls:
  1836 ;;		Nothing
  1837 ;; This function is called by:
  1838 ;;		_main
  1839 ;; This function uses a non-reentrant model
  1840 ;;
  1841                           
  1842                           	psect	text4
  1843  0028BA                     __ptext4:
  1844                           	callstack 0
  1845  0028BA                     _tim0Init:
  1846                           	callstack 0
  1847  0028BA  FFFF               	dw	65535	; assembler added errata NOP
  1848  0028BC                     
  1849                           ;timer.c: 22:     T0CONbits.TMR0ON = 0;
  1850  0028BC  9ED5               	bcf	213,7,c	;volatile
  1851                           
  1852                           ;timer.c: 23:     T0CONbits.T08BIT = 0;
  1853  0028BE  9CD5               	bcf	213,6,c	;volatile
  1854                           
  1855                           ;timer.c: 24:     T0CONbits.T0CS = 0;
  1856  0028C0  9AD5               	bcf	213,5,c	;volatile
  1857                           
  1858                           ;timer.c: 25:     T0CONbits.PSA = 1;
  1859  0028C2  86D5               	bsf	213,3,c	;volatile
  1860  0028C4                     
  1861                           ;timer.c: 26:     T0CONbits.T0PS = 0x07;
  1862  0028C4  0E07               	movlw	7
  1863  0028C6  12D5               	iorwf	213,f,c	;volatile
  1864  0028C8  0012               	return		;funcret
  1865  0028CA  FFFF               	dw	65535	; errata NOP
  1866  0028CC                     __end_of_tim0Init:
  1867                           	callstack 0
  1868                           
  1869 ;; *************** function _storeData *****************
  1870 ;; Defined at:
  1871 ;;		line 236 in file "usart.c"
  1872 ;; Parameters:    Size  Location     Type
  1873 ;;  data            1    wreg     unsigned char 
  1874 ;; Auto vars:     Size  Location     Type
  1875 ;;  data            1   26[COMRAM] unsigned char 
  1876 ;; Return value:  Size  Location     Type
  1877 ;;                  1    wreg      void 
  1878 ;; Registers used:
  1879 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1880 ;; Tracked objects:
  1881 ;;		On entry : 0/0
  1882 ;;		On exit  : 0/0
  1883 ;;		Unchanged: 0/0
  1884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1885 ;;      Params:         0       0       0       0       0       0       0
  1886 ;;      Locals:         1       0       0       0       0       0       0
  1887 ;;      Temps:          2       0       0       0       0       0       0
  1888 ;;      Totals:         3       0       0       0       0       0       0
  1889 ;;Total ram usage:        3 bytes
  1890 ;; Hardware stack levels used:    1
  1891 ;; Hardware stack levels required when called:    6
  1892 ;; This function calls:
  1893 ;;		_printError
  1894 ;; This function is called by:
  1895 ;;		_main
  1896 ;; This function uses a non-reentrant model
  1897 ;;
  1898                           
  1899                           	psect	text5
  1900  0010CC                     __ptext5:
  1901                           	callstack 0
  1902  0010CC                     _storeData:
  1903                           	callstack 0
  1904  0010CC  FFFF               	dw	65535	; assembler added errata NOP
  1905                           
  1906                           ;incstack = 0
  1907                           ;storeData@data stored from wreg
  1908  0010CE  6E1B               	movwf	storeData@data^0,c
  1909  0010D0                     
  1910                           ;usart.c: 242:     receivedMex[counter] = data;
  1911  0010D0  0E43               	movlw	low _receivedMex
  1912  0010D2  245E               	addwf	_counter^0,w,c
  1913  0010D4  6ED9               	movwf	fsr2l,c
  1914  0010D6  6ADA               	clrf	fsr2h,c
  1915  0010D8  0E00               	movlw	high _receivedMex
  1916  0010DA  22DA               	addwfc	fsr2h,f,c
  1917  0010DC  C01B  FFDF         	movff	storeData@data,indf2
  1918  0010E0                     
  1919                           ;usart.c: 244:     counter++;
  1920  0010E0  2A5E               	incf	_counter^0,f,c
  1921                           
  1922                           ;usart.c: 247:     switch(receivedMex[0]){
  1923  0010E2  EF8F  F008         	goto	l4673
  1924  0010E6                     l4663:
  1925  0010E6  FFFF               	dw	65535	; assembler added errata NOP
  1926                           
  1927                           ;usart.c: 249:             mexLength = 5;
  1928  0010E8  0E05               	movlw	5
  1929  0010EA  6E6D               	movwf	_mexLength^0,c
  1930                           
  1931                           ;usart.c: 250:             neverCheck = 0;
  1932  0010EC  0E00               	movlw	0
  1933  0010EE  6E5D               	movwf	_neverCheck^0,c
  1934                           
  1935                           ;usart.c: 251:             break;
  1936  0010F0  EFAA  F008         	goto	l4675
  1937  0010F4                     l4665:
  1938  0010F4  FFFF               	dw	65535	; assembler added errata NOP
  1939                           
  1940                           ;usart.c: 253:             mexLength = 9;
  1941  0010F6  0E09               	movlw	9
  1942  0010F8  6E6D               	movwf	_mexLength^0,c
  1943                           
  1944                           ;usart.c: 254:             neverCheck = 0;
  1945  0010FA  0E00               	movlw	0
  1946  0010FC  6E5D               	movwf	_neverCheck^0,c
  1947                           
  1948                           ;usart.c: 255:             break;
  1949  0010FE  EFAA  F008         	goto	l4675
  1950  001102                     l4667:
  1951  001102  FFFF               	dw	65535	; assembler added errata NOP
  1952                           
  1953                           ;usart.c: 257:             mexLength = 1;
  1954  001104  0E01               	movlw	1
  1955  001106  6E6D               	movwf	_mexLength^0,c
  1956                           
  1957                           ;usart.c: 258:             neverCheck = 0;
  1958  001108  0E00               	movlw	0
  1959  00110A  6E5D               	movwf	_neverCheck^0,c
  1960                           
  1961                           ;usart.c: 259:             break;
  1962  00110C  EFAA  F008         	goto	l4675
  1963  001110                     l4669:
  1964  001110  FFFF               	dw	65535	; assembler added errata NOP
  1965                           
  1966                           ;usart.c: 261:             neverCheck = 1;
  1967  001112  0E01               	movlw	1
  1968  001114  6E5D               	movwf	_neverCheck^0,c
  1969                           
  1970                           ;usart.c: 262:             counter = 0;
  1971  001116  0E00               	movlw	0
  1972  001118  6E5E               	movwf	_counter^0,c
  1973                           
  1974                           ;usart.c: 263:             break;
  1975  00111A  EFAA  F008         	goto	l4675
  1976  00111E                     l4673:
  1977  00111E  FFFF               	dw	65535	; assembler added errata NOP
  1978  001120  5043               	movf	_receivedMex^0,w,c
  1979  001122  6E19               	movwf	??_storeData^0,c
  1980  001124  6A1A               	clrf	(??_storeData+1)^0,c
  1981                           
  1982                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1983                           ; Switch size 1, requested type "simple"
  1984                           ; Number of cases is 1, Range of values is 0 to 0
  1985                           ; switch strategies available:
  1986                           ; Name         Instructions Cycles
  1987                           ; simple_byte            4     3 (average)
  1988                           ;	Chosen strategy is simple_byte
  1989  001126  501A               	movf	(??_storeData+1)^0,w,c
  1990  001128  0A00               	xorlw	0	; case 0
  1991  00112A  B4D8               	btfsc	status,2,c
  1992  00112C  EF9A  F008         	goto	l5083
  1993  001130  EF88  F008         	goto	l4669
  1994  001134                     l5083:
  1995  001134  FFFF               	dw	65535	; assembler added errata NOP
  1996                           
  1997                           ; Switch size 1, requested type "simple"
  1998                           ; Number of cases is 3, Range of values is 1 to 3
  1999                           ; switch strategies available:
  2000                           ; Name         Instructions Cycles
  2001                           ; simple_byte           10     6 (average)
  2002                           ;	Chosen strategy is simple_byte
  2003  001136  5019               	movf	??_storeData^0,w,c
  2004  001138  0A01               	xorlw	1	; case 1
  2005  00113A  B4D8               	btfsc	status,2,c
  2006  00113C  EF73  F008         	goto	l4663
  2007  001140  0A03               	xorlw	3	; case 2
  2008  001142  B4D8               	btfsc	status,2,c
  2009  001144  EF7A  F008         	goto	l4665
  2010  001148  0A01               	xorlw	1	; case 3
  2011  00114A  B4D8               	btfsc	status,2,c
  2012  00114C  EF81  F008         	goto	l4667
  2013  001150  EF88  F008         	goto	l4669
  2014  001154                     l4675:
  2015  001154  FFFF               	dw	65535	; assembler added errata NOP
  2016                           
  2017                           ;usart.c: 268:     if(counter == mexLength && !neverCheck){
  2018  001156  506D               	movf	_mexLength^0,w,c
  2019  001158  185E               	xorwf	_counter^0,w,c
  2020  00115A  A4D8               	btfss	status,2,c
  2021  00115C  EFB2  F008         	goto	u3971
  2022  001160  EFB5  F008         	goto	u3970
  2023  001164                     u3971:
  2024  001164  FFFF               	dw	65535	; assembler added errata NOP
  2025  001166  EFA7  F009         	goto	l640
  2026  00116A                     u3970:
  2027  00116A  FFFF               	dw	65535	; assembler added errata NOP
  2028  00116C  505D               	movf	_neverCheck^0,w,c
  2029  00116E  A4D8               	btfss	status,2,c
  2030  001170  EFBC  F008         	goto	u3981
  2031  001174  EFBF  F008         	goto	u3980
  2032  001178                     u3981:
  2033  001178  FFFF               	dw	65535	; assembler added errata NOP
  2034  00117A  EFA7  F009         	goto	l640
  2035  00117E                     u3980:
  2036  00117E  FFFF               	dw	65535	; assembler added errata NOP
  2037  001180                     
  2038                           ;usart.c: 269:         counter = 0;
  2039  001180  0E00               	movlw	0
  2040  001182  6E5E               	movwf	_counter^0,c
  2041                           
  2042                           ;usart.c: 272:         switch(receivedMex[0]){
  2043  001184  EF89  F009         	goto	l4717
  2044  001188                     l4681:
  2045  001188  FFFF               	dw	65535	; assembler added errata NOP
  2046                           
  2047                           ;usart.c: 274:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  2048  00118A  5061               	movf	_dataCounter^0,w,c
  2049  00118C  0D04               	mullw	4
  2050  00118E  0EE4               	movlw	low _dataSequence
  2051  001190  24F3               	addwf	243,w,c
  2052  001192  6ED9               	movwf	fsr2l,c
  2053  001194  0E00               	movlw	high _dataSequence
  2054  001196  20F4               	addwfc	prodh,w,c
  2055  001198  6EDA               	movwf	fsr2h,c
  2056  00119A  C044  FFDF         	movff	_receivedMex+1,indf2
  2057                           
  2058                           ;usart.c: 275:                 dataSequence[dataCounter].posX = receivedMex[2] * 5;
  2059  00119E  5061               	movf	_dataCounter^0,w,c
  2060  0011A0  0D04               	mullw	4
  2061  0011A2  0EE5               	movlw	low (_dataSequence+1)
  2062  0011A4  24F3               	addwf	243,w,c
  2063  0011A6  6ED9               	movwf	fsr2l,c
  2064  0011A8  0E00               	movlw	high (_dataSequence+1)
  2065  0011AA  20F4               	addwfc	prodh,w,c
  2066  0011AC  6EDA               	movwf	fsr2h,c
  2067  0011AE  5045               	movf	(_receivedMex+2)^0,w,c
  2068  0011B0  0D05               	mullw	5
  2069  0011B2  CFF3 FFDF          	movff	prodl,indf2
  2070                           
  2071                           ;usart.c: 276:                 dataSequence[dataCounter].posY = receivedMex[3] * 5;
  2072  0011B6  5061               	movf	_dataCounter^0,w,c
  2073  0011B8  0D04               	mullw	4
  2074  0011BA  0EE6               	movlw	low (_dataSequence+2)
  2075  0011BC  24F3               	addwf	243,w,c
  2076  0011BE  6ED9               	movwf	fsr2l,c
  2077  0011C0  0E00               	movlw	high (_dataSequence+2)
  2078  0011C2  20F4               	addwfc	prodh,w,c
  2079  0011C4  6EDA               	movwf	fsr2h,c
  2080  0011C6  5046               	movf	(_receivedMex+3)^0,w,c
  2081  0011C8  0D05               	mullw	5
  2082  0011CA  CFF3 FFDF          	movff	prodl,indf2
  2083                           
  2084                           ;usart.c: 277:                 dataSequence[dataCounter].rotation = receivedMex[4];
  2085  0011CE  5061               	movf	_dataCounter^0,w,c
  2086  0011D0  0D04               	mullw	4
  2087  0011D2  0EE7               	movlw	low (_dataSequence+3)
  2088  0011D4  24F3               	addwf	243,w,c
  2089  0011D6  6ED9               	movwf	fsr2l,c
  2090  0011D8  0E00               	movlw	high (_dataSequence+3)
  2091  0011DA  20F4               	addwfc	prodh,w,c
  2092  0011DC  6EDA               	movwf	fsr2h,c
  2093  0011DE  C047  FFDF         	movff	_receivedMex+4,indf2
  2094                           
  2095                           ;usart.c: 280:                 if((dataSequence[dataCounter].posX > maxX || dataSequence
      +                          [dataCounter].posY > maxY) &&
  2096  0011E2  5061               	movf	_dataCounter^0,w,c
  2097  0011E4  0D04               	mullw	4
  2098  0011E6  0EE5               	movlw	low (_dataSequence+1)
  2099  0011E8  24F3               	addwf	243,w,c
  2100  0011EA  6ED9               	movwf	fsr2l,c
  2101  0011EC  0E00               	movlw	high (_dataSequence+1)
  2102  0011EE  20F4               	addwfc	prodh,w,c
  2103  0011F0  6EDA               	movwf	fsr2h,c
  2104  0011F2  0E66               	movlw	102
  2105  0011F4  60DF               	cpfslt	indf2,c
  2106  0011F6  EFFF  F008         	goto	u3991
  2107  0011FA  EF02  F009         	goto	u3990
  2108  0011FE                     u3991:
  2109  0011FE  FFFF               	dw	65535	; assembler added errata NOP
  2110  001200  EF14  F009         	goto	l4685
  2111  001204                     u3990:
  2112  001204  FFFF               	dw	65535	; assembler added errata NOP
  2113  001206  5061               	movf	_dataCounter^0,w,c
  2114  001208  0D04               	mullw	4
  2115  00120A  0EE6               	movlw	low (_dataSequence+2)
  2116  00120C  24F3               	addwf	243,w,c
  2117  00120E  6ED9               	movwf	fsr2l,c
  2118  001210  0E00               	movlw	high (_dataSequence+2)
  2119  001212  20F4               	addwfc	prodh,w,c
  2120  001214  6EDA               	movwf	fsr2h,c
  2121  001216  0E65               	movlw	101
  2122  001218  64DF               	cpfsgt	indf2,c
  2123  00121A  EF11  F009         	goto	u4001
  2124  00121E  EF14  F009         	goto	u4000
  2125  001222                     u4001:
  2126  001222  FFFF               	dw	65535	; assembler added errata NOP
  2127  001224  EF2C  F009         	goto	l4689
  2128  001228                     u4000:
  2129  001228                     l4685:
  2130  001228  FFFF               	dw	65535	; assembler added errata NOP
  2131  00122A  5061               	movf	_dataCounter^0,w,c
  2132  00122C  0D04               	mullw	4
  2133  00122E  0EE4               	movlw	low _dataSequence
  2134  001230  24F3               	addwf	243,w,c
  2135  001232  6ED9               	movwf	fsr2l,c
  2136  001234  0E00               	movlw	high _dataSequence
  2137  001236  20F4               	addwfc	prodh,w,c
  2138  001238  6EDA               	movwf	fsr2h,c
  2139  00123A  28DE               	incf	postinc2,w,c
  2140  00123C  B4D8               	btfsc	status,2,c
  2141  00123E  EF23  F009         	goto	u4011
  2142  001242  EF26  F009         	goto	u4010
  2143  001246                     u4011:
  2144  001246  FFFF               	dw	65535	; assembler added errata NOP
  2145  001248  EF2C  F009         	goto	l4689
  2146  00124C                     u4010:
  2147  00124C  FFFF               	dw	65535	; assembler added errata NOP
  2148  00124E                     
  2149                           ;usart.c: 281:                         dataSequence[dataCounter].feederLine != 0xFF){;us
      +                          art.c: 282:                     printError(5);
  2150  00124E  0E05               	movlw	5
  2151  001250  ECD4  F00E         	call	_printError
  2152                           
  2153                           ;usart.c: 283:                 }else{
  2154  001254  EFA4  F009         	goto	l4719
  2155  001258                     l4689:
  2156  001258  FFFF               	dw	65535	; assembler added errata NOP
  2157                           
  2158                           ;usart.c: 284:                     dataCounter++;
  2159  00125A  2A61               	incf	_dataCounter^0,f,c
  2160  00125C  EFA4  F009         	goto	l4719
  2161  001260                     l633:
  2162  001260  FFFF               	dw	65535	; assembler added errata NOP
  2163                           
  2164                           ;usart.c: 289:                 newSequenceData.L = receivedMex[1];
  2165  001262  C044  F0F8         	movff	_receivedMex+1,_newSequenceData
  2166                           
  2167                           ;usart.c: 290:                 newSequenceData.W = receivedMex[2];
  2168  001266  C045  F0F9         	movff	_receivedMex+2,_newSequenceData+1
  2169  00126A                     
  2170                           ;usart.c: 291:                 newSequenceData.init_posX = receivedMex[3] * 5;
  2171  00126A  5046               	movf	(_receivedMex+3)^0,w,c
  2172  00126C  0D05               	mullw	5
  2173  00126E  CFF3 F0FA          	movff	prodl,_newSequenceData+2
  2174                           
  2175                           ;usart.c: 292:                 newSequenceData.init_posY = receivedMex[4] * 5;
  2176  001272  5047               	movf	(_receivedMex+4)^0,w,c
  2177  001274  0D05               	mullw	5
  2178  001276  CFF3 F0FB          	movff	prodl,_newSequenceData+3
  2179  00127A                     
  2180                           ;usart.c: 293:                 newSequenceData.init_rot = receivedMex[5];
  2181  00127A  C048  F0FC         	movff	_receivedMex+5,_newSequenceData+4
  2182                           
  2183                           ;usart.c: 294:                 newSequenceData.end_posX = receivedMex[6] * 5;
  2184  00127E  5049               	movf	(_receivedMex+6)^0,w,c
  2185  001280  0D05               	mullw	5
  2186  001282  CFF3 F0FD          	movff	prodl,_newSequenceData+5
  2187                           
  2188                           ;usart.c: 295:                 newSequenceData.end_posY = receivedMex[7] * 5;
  2189  001286  504A               	movf	(_receivedMex+7)^0,w,c
  2190  001288  0D05               	mullw	5
  2191  00128A  CFF3 F0FE          	movff	prodl,_newSequenceData+6
  2192  00128E                     
  2193                           ;usart.c: 296:                 newSequenceData.end_rot = receivedMex[8];
  2194  00128E  C04B  F0FF         	movff	_receivedMex+8,_newSequenceData+7
  2195  001292                     
  2196                           ;usart.c: 299:                 if(newSequenceData.init_posX > maxFeedX ||
  2197  001292  0E1F               	movlw	31
  2198  001294  0100               	movlb	0	; () banked
  2199  001296  61FA               	cpfslt	(_newSequenceData+2)& (0+255),b
  2200  001298  EF50  F009         	goto	u4021
  2201  00129C  EF53  F009         	goto	u4020
  2202  0012A0                     u4021:
  2203  0012A0  FFFF               	dw	65535	; assembler added errata NOP
  2204  0012A2  EF71  F009         	goto	l4705
  2205  0012A6                     u4020:
  2206  0012A6  FFFF               	dw	65535	; assembler added errata NOP
  2207  0012A8                     
  2208                           ; BSR set to: 0
  2209  0012A8  0E66               	movlw	102
  2210  0012AA  61FD               	cpfslt	(_newSequenceData+5)& (0+255),b
  2211  0012AC  EF5A  F009         	goto	u4031
  2212  0012B0  EF5D  F009         	goto	u4030
  2213  0012B4                     u4031:
  2214  0012B4  FFFF               	dw	65535	; assembler added errata NOP
  2215  0012B6  EF71  F009         	goto	l4705
  2216  0012BA                     u4030:
  2217  0012BA  FFFF               	dw	65535	; assembler added errata NOP
  2218  0012BC                     
  2219                           ; BSR set to: 0
  2220  0012BC  0E65               	movlw	101
  2221  0012BE  61FB               	cpfslt	(_newSequenceData+3)& (0+255),b
  2222  0012C0  EF64  F009         	goto	u4041
  2223  0012C4  EF67  F009         	goto	u4040
  2224  0012C8                     u4041:
  2225  0012C8  FFFF               	dw	65535	; assembler added errata NOP
  2226  0012CA  EF71  F009         	goto	l4705
  2227  0012CE                     u4040:
  2228  0012CE  FFFF               	dw	65535	; assembler added errata NOP
  2229  0012D0                     
  2230                           ; BSR set to: 0
  2231  0012D0  0E65               	movlw	101
  2232  0012D2  65FE               	cpfsgt	(_newSequenceData+6)& (0+255),b
  2233  0012D4  EF6E  F009         	goto	u4051
  2234  0012D8  EF71  F009         	goto	u4050
  2235  0012DC                     u4051:
  2236  0012DC  FFFF               	dw	65535	; assembler added errata NOP
  2237  0012DE  EF79  F009         	goto	l4709
  2238  0012E2                     u4050:
  2239  0012E2                     l4705:
  2240  0012E2  FFFF               	dw	65535	; assembler added errata NOP
  2241                           
  2242                           ; BSR set to: 0
  2243                           ;usart.c: 302:                         newSequenceData.end_posY > maxY){;usart.c: 303:  
      +                                             _newSequence = 0;
  2244  0012E4  0E00               	movlw	0
  2245  0012E6  6E5F               	movwf	__newSequence^0,c
  2246  0012E8                     
  2247                           ; BSR set to: 0
  2248                           ;usart.c: 304:                     printError(5);
  2249  0012E8  0E05               	movlw	5
  2250  0012EA  ECD4  F00E         	call	_printError
  2251                           
  2252                           ;usart.c: 305:                 }else{
  2253  0012EE  EFA4  F009         	goto	l4719
  2254  0012F2                     l4709:
  2255  0012F2  FFFF               	dw	65535	; assembler added errata NOP
  2256                           
  2257                           ; BSR set to: 0
  2258                           ;usart.c: 306:                     _newSequence = 1;
  2259  0012F4  0E01               	movlw	1
  2260  0012F6  6E5F               	movwf	__newSequence^0,c
  2261  0012F8  EFA4  F009         	goto	l4719
  2262  0012FC                     l4711:
  2263  0012FC  FFFF               	dw	65535	; assembler added errata NOP
  2264                           
  2265                           ;usart.c: 311:                 _fatalError = 1;
  2266  0012FE  0E01               	movlw	1
  2267  001300  6E60               	movwf	__fatalError^0,c
  2268                           
  2269                           ;usart.c: 312:                 break;
  2270  001302  EFA4  F009         	goto	l4719
  2271  001306                     l4713:
  2272  001306  FFFF               	dw	65535	; assembler added errata NOP
  2273                           
  2274                           ;usart.c: 315:                 printError(8);
  2275  001308  0E08               	movlw	8
  2276  00130A  ECD4  F00E         	call	_printError
  2277                           
  2278                           ;usart.c: 316:                 break;
  2279  00130E  EFA4  F009         	goto	l4719
  2280  001312                     l4717:
  2281  001312  FFFF               	dw	65535	; assembler added errata NOP
  2282  001314  5043               	movf	_receivedMex^0,w,c
  2283  001316  6E19               	movwf	??_storeData^0,c
  2284  001318  6A1A               	clrf	(??_storeData+1)^0,c
  2285                           
  2286                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2287                           ; Switch size 1, requested type "simple"
  2288                           ; Number of cases is 1, Range of values is 0 to 0
  2289                           ; switch strategies available:
  2290                           ; Name         Instructions Cycles
  2291                           ; simple_byte            4     3 (average)
  2292                           ;	Chosen strategy is simple_byte
  2293  00131A  501A               	movf	(??_storeData+1)^0,w,c
  2294  00131C  0A00               	xorlw	0	; case 0
  2295  00131E  B4D8               	btfsc	status,2,c
  2296  001320  EF94  F009         	goto	l5085
  2297  001324  EF83  F009         	goto	l4713
  2298  001328                     l5085:
  2299  001328  FFFF               	dw	65535	; assembler added errata NOP
  2300                           
  2301                           ; Switch size 1, requested type "simple"
  2302                           ; Number of cases is 3, Range of values is 1 to 3
  2303                           ; switch strategies available:
  2304                           ; Name         Instructions Cycles
  2305                           ; simple_byte           10     6 (average)
  2306                           ;	Chosen strategy is simple_byte
  2307  00132A  5019               	movf	??_storeData^0,w,c
  2308  00132C  0A01               	xorlw	1	; case 1
  2309  00132E  B4D8               	btfsc	status,2,c
  2310  001330  EFC4  F008         	goto	l4681
  2311  001334  0A03               	xorlw	3	; case 2
  2312  001336  B4D8               	btfsc	status,2,c
  2313  001338  EF30  F009         	goto	l633
  2314  00133C  0A01               	xorlw	1	; case 3
  2315  00133E  B4D8               	btfsc	status,2,c
  2316  001340  EF7E  F009         	goto	l4711
  2317  001344  EF83  F009         	goto	l4713
  2318  001348                     l4719:
  2319  001348  FFFF               	dw	65535	; assembler added errata NOP
  2320                           
  2321                           ;usart.c: 320:         receivedMex[0] = 0;
  2322  00134A  0E00               	movlw	0
  2323  00134C  6E43               	movwf	_receivedMex^0,c
  2324  00134E                     l640:
  2325  00134E  FFFF               	dw	65535	; assembler added errata NOP
  2326  001350  0012               	return		;funcret
  2327  001352  FFFF               	dw	65535	; errata NOP
  2328  001354                     __end_of_storeData:
  2329                           	callstack 0
  2330                           
  2331 ;; *************** function _printError *****************
  2332 ;; Defined at:
  2333 ;;		line 143 in file "usart.c"
  2334 ;; Parameters:    Size  Location     Type
  2335 ;;  errCode         1    wreg     unsigned char 
  2336 ;; Auto vars:     Size  Location     Type
  2337 ;;  errCode         1   23[COMRAM] unsigned char 
  2338 ;; Return value:  Size  Location     Type
  2339 ;;                  1    wreg      void 
  2340 ;; Registers used:
  2341 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2342 ;; Tracked objects:
  2343 ;;		On entry : 0/0
  2344 ;;		On exit  : 0/0
  2345 ;;		Unchanged: 0/0
  2346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2347 ;;      Params:         0       0       0       0       0       0       0
  2348 ;;      Locals:         1       0       0       0       0       0       0
  2349 ;;      Temps:          2       0       0       0       0       0       0
  2350 ;;      Totals:         3       0       0       0       0       0       0
  2351 ;;Total ram usage:        3 bytes
  2352 ;; Hardware stack levels used:    1
  2353 ;; Hardware stack levels required when called:    5
  2354 ;; This function calls:
  2355 ;;		_uartTx
  2356 ;; This function is called by:
  2357 ;;		_main
  2358 ;;		_storeData
  2359 ;; This function uses a non-reentrant model
  2360 ;;
  2361                           
  2362                           	psect	text6
  2363  001DA8                     __ptext6:
  2364                           	callstack 0
  2365  001DA8                     _printError:
  2366                           	callstack 0
  2367  001DA8  FFFF               	dw	65535	; assembler added errata NOP
  2368                           
  2369                           ;incstack = 0
  2370                           ;printError@errCode stored from wreg
  2371  001DAA  6E18               	movwf	printError@errCode^0,c
  2372  001DAC                     
  2373                           ;usart.c: 145:     switch(errCode){
  2374  001DAC  EF30  F00F         	goto	l4487
  2375  001DB0                     l4469:
  2376  001DB0  FFFF               	dw	65535	; assembler added errata NOP
  2377                           
  2378                           ;usart.c: 147:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  2379  001DB2  0E41               	movlw	low _errString_Feed
  2380  001DB4  6E12               	movwf	uartTx@ptr^0,c
  2381  001DB6  0E01               	movlw	high _errString_Feed
  2382  001DB8  6E13               	movwf	(uartTx@ptr+1)^0,c
  2383  001DBA  0E1E               	movlw	30
  2384  001DBC  6E14               	movwf	uartTx@length^0,c
  2385  001DBE  EC79  F013         	call	_uartTx	;wreg free
  2386                           
  2387                           ;usart.c: 148:             break;
  2388  001DC2  EF5F  F00F         	goto	l590
  2389  001DC6                     l4471:
  2390  001DC6  FFFF               	dw	65535	; assembler added errata NOP
  2391                           
  2392                           ;usart.c: 150:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  2393  001DC8  0E5E               	movlw	low _errString_ZEND
  2394  001DCA  6E12               	movwf	uartTx@ptr^0,c
  2395  001DCC  0E02               	movlw	high _errString_ZEND
  2396  001DCE  6E13               	movwf	(uartTx@ptr+1)^0,c
  2397  001DD0  0E29               	movlw	41
  2398  001DD2  6E14               	movwf	uartTx@length^0,c
  2399  001DD4  EC79  F013         	call	_uartTx	;wreg free
  2400                           
  2401                           ;usart.c: 151:             break;
  2402  001DD8  EF5F  F00F         	goto	l590
  2403  001DDC                     l4473:
  2404  001DDC  FFFF               	dw	65535	; assembler added errata NOP
  2405                           
  2406                           ;usart.c: 153:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  2407  001DDE  0E87               	movlw	low _errString_Reset
  2408  001DE0  6E12               	movwf	uartTx@ptr^0,c
  2409  001DE2  0E02               	movlw	high _errString_Reset
  2410  001DE4  6E13               	movwf	(uartTx@ptr+1)^0,c
  2411  001DE6  0E28               	movlw	40
  2412  001DE8  6E14               	movwf	uartTx@length^0,c
  2413  001DEA  EC79  F013         	call	_uartTx	;wreg free
  2414                           
  2415                           ;usart.c: 154:             break;
  2416  001DEE  EF5F  F00F         	goto	l590
  2417  001DF2                     l4475:
  2418  001DF2  FFFF               	dw	65535	; assembler added errata NOP
  2419                           
  2420                           ;usart.c: 156:             uartTx(&errString_Point[0], sizeof(errString_Point));
  2421  001DF4  0E35               	movlw	low _errString_Point
  2422  001DF6  6E12               	movwf	uartTx@ptr^0,c
  2423  001DF8  0E02               	movlw	high _errString_Point
  2424  001DFA  6E13               	movwf	(uartTx@ptr+1)^0,c
  2425  001DFC  0E29               	movlw	41
  2426  001DFE  6E14               	movwf	uartTx@length^0,c
  2427  001E00  EC79  F013         	call	_uartTx	;wreg free
  2428                           
  2429                           ;usart.c: 157:             break;
  2430  001E04  EF5F  F00F         	goto	l590
  2431  001E08                     l4477:
  2432  001E08  FFFF               	dw	65535	; assembler added errata NOP
  2433                           
  2434                           ;usart.c: 159:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  2435  001E0A  0E00               	movlw	low _errString_Bound
  2436  001E0C  6E12               	movwf	uartTx@ptr^0,c
  2437  001E0E  0E01               	movlw	high _errString_Bound
  2438  001E10  6E13               	movwf	(uartTx@ptr+1)^0,c
  2439  001E12  0E21               	movlw	33
  2440  001E14  6E14               	movwf	uartTx@length^0,c
  2441  001E16  EC79  F013         	call	_uartTx	;wreg free
  2442                           
  2443                           ;usart.c: 160:             break;
  2444  001E1A  EF5F  F00F         	goto	l590
  2445  001E1E                     l4479:
  2446  001E1E  FFFF               	dw	65535	; assembler added errata NOP
  2447                           
  2448                           ;usart.c: 162:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  2449  001E20  0E00               	movlw	low _errString_PointZ
  2450  001E22  6E12               	movwf	uartTx@ptr^0,c
  2451  001E24  0E02               	movlw	high _errString_PointZ
  2452  001E26  6E13               	movwf	(uartTx@ptr+1)^0,c
  2453  001E28  0E35               	movlw	53
  2454  001E2A  6E14               	movwf	uartTx@length^0,c
  2455  001E2C  EC79  F013         	call	_uartTx	;wreg free
  2456                           
  2457                           ;usart.c: 163:             break;
  2458  001E30  EF5F  F00F         	goto	l590
  2459  001E34                     l4481:
  2460  001E34  FFFF               	dw	65535	; assembler added errata NOP
  2461                           
  2462                           ;usart.c: 165:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  2463  001E36  0EAF               	movlw	low _errString_Fatal
  2464  001E38  6E12               	movwf	uartTx@ptr^0,c
  2465  001E3A  0E02               	movlw	high _errString_Fatal
  2466  001E3C  6E13               	movwf	(uartTx@ptr+1)^0,c
  2467  001E3E  0E27               	movlw	39
  2468  001E40  6E14               	movwf	uartTx@length^0,c
  2469  001E42  EC79  F013         	call	_uartTx	;wreg free
  2470                           
  2471                           ;usart.c: 166:             break;
  2472  001E46  EF5F  F00F         	goto	l590
  2473  001E4A                     l4483:
  2474  001E4A  FFFF               	dw	65535	; assembler added errata NOP
  2475                           
  2476                           ;usart.c: 168:             uartTx(&errString_Command[0], sizeof(errString_Command));
  2477  001E4C  0EB5               	movlw	low _errString_Command
  2478  001E4E  6E12               	movwf	uartTx@ptr^0,c
  2479  001E50  0E01               	movlw	high _errString_Command
  2480  001E52  6E13               	movwf	(uartTx@ptr+1)^0,c
  2481  001E54  0E18               	movlw	24
  2482  001E56  6E14               	movwf	uartTx@length^0,c
  2483  001E58  EC79  F013         	call	_uartTx	;wreg free
  2484                           
  2485                           ;usart.c: 169:             break;
  2486  001E5C  EF5F  F00F         	goto	l590
  2487  001E60                     l4487:
  2488  001E60  FFFF               	dw	65535	; assembler added errata NOP
  2489  001E62  5018               	movf	printError@errCode^0,w,c
  2490  001E64  6E16               	movwf	??_printError^0,c
  2491  001E66  6A17               	clrf	(??_printError+1)^0,c
  2492                           
  2493                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2494                           ; Switch size 1, requested type "simple"
  2495                           ; Number of cases is 1, Range of values is 0 to 0
  2496                           ; switch strategies available:
  2497                           ; Name         Instructions Cycles
  2498                           ; simple_byte            4     3 (average)
  2499                           ;	Chosen strategy is simple_byte
  2500  001E68  5017               	movf	(??_printError+1)^0,w,c
  2501  001E6A  0A00               	xorlw	0	; case 0
  2502  001E6C  B4D8               	btfsc	status,2,c
  2503  001E6E  EF3B  F00F         	goto	l5087
  2504  001E72  EF5F  F00F         	goto	l590
  2505  001E76                     l5087:
  2506  001E76  FFFF               	dw	65535	; assembler added errata NOP
  2507                           
  2508                           ; Switch size 1, requested type "simple"
  2509                           ; Number of cases is 8, Range of values is 1 to 8
  2510                           ; switch strategies available:
  2511                           ; Name         Instructions Cycles
  2512                           ; simple_byte           25    13 (average)
  2513                           ;	Chosen strategy is simple_byte
  2514  001E78  5016               	movf	??_printError^0,w,c
  2515  001E7A  0A01               	xorlw	1	; case 1
  2516  001E7C  B4D8               	btfsc	status,2,c
  2517  001E7E  EFD8  F00E         	goto	l4469
  2518  001E82  0A03               	xorlw	3	; case 2
  2519  001E84  B4D8               	btfsc	status,2,c
  2520  001E86  EFE3  F00E         	goto	l4471
  2521  001E8A  0A01               	xorlw	1	; case 3
  2522  001E8C  B4D8               	btfsc	status,2,c
  2523  001E8E  EFEE  F00E         	goto	l4473
  2524  001E92  0A07               	xorlw	7	; case 4
  2525  001E94  B4D8               	btfsc	status,2,c
  2526  001E96  EFF9  F00E         	goto	l4475
  2527  001E9A  0A01               	xorlw	1	; case 5
  2528  001E9C  B4D8               	btfsc	status,2,c
  2529  001E9E  EF04  F00F         	goto	l4477
  2530  001EA2  0A03               	xorlw	3	; case 6
  2531  001EA4  B4D8               	btfsc	status,2,c
  2532  001EA6  EF0F  F00F         	goto	l4479
  2533  001EAA  0A01               	xorlw	1	; case 7
  2534  001EAC  B4D8               	btfsc	status,2,c
  2535  001EAE  EF1A  F00F         	goto	l4481
  2536  001EB2  0A0F               	xorlw	15	; case 8
  2537  001EB4  B4D8               	btfsc	status,2,c
  2538  001EB6  EF25  F00F         	goto	l4483
  2539  001EBA  EF5F  F00F         	goto	l590
  2540  001EBE                     l590:
  2541  001EBE  FFFF               	dw	65535	; assembler added errata NOP
  2542  001EC0  0012               	return		;funcret
  2543  001EC2  FFFF               	dw	65535	; errata NOP
  2544  001EC4                     __end_of_printError:
  2545                           	callstack 0
  2546                           
  2547 ;; *************** function _shiftData *****************
  2548 ;; Defined at:
  2549 ;;		line 113 in file "usart.c"
  2550 ;; Parameters:    Size  Location     Type
  2551 ;;		None
  2552 ;; Auto vars:     Size  Location     Type
  2553 ;;  i               1   19[COMRAM] unsigned char 
  2554 ;; Return value:  Size  Location     Type
  2555 ;;                  1    wreg      void 
  2556 ;; Registers used:
  2557 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2558 ;; Tracked objects:
  2559 ;;		On entry : 0/0
  2560 ;;		On exit  : 0/0
  2561 ;;		Unchanged: 0/0
  2562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2563 ;;      Params:         0       0       0       0       0       0       0
  2564 ;;      Locals:         1       0       0       0       0       0       0
  2565 ;;      Temps:          2       0       0       0       0       0       0
  2566 ;;      Totals:         3       0       0       0       0       0       0
  2567 ;;Total ram usage:        3 bytes
  2568 ;; Hardware stack levels used:    1
  2569 ;; Hardware stack levels required when called:    4
  2570 ;; This function calls:
  2571 ;;		Nothing
  2572 ;; This function is called by:
  2573 ;;		_main
  2574 ;; This function uses a non-reentrant model
  2575 ;;
  2576                           
  2577                           	psect	text7
  2578  002692                     __ptext7:
  2579                           	callstack 0
  2580  002692                     _shiftData:
  2581                           	callstack 0
  2582  002692  FFFF               	dw	65535	; assembler added errata NOP
  2583  002694                     
  2584                           ;usart.c: 114:     char i;;usart.c: 116:     for(i = 0; i < 4; i++){
  2585  002694  0E00               	movlw	0
  2586  002696  6E14               	movwf	shiftData@i^0,c
  2587  002698                     l4857:
  2588  002698  FFFF               	dw	65535	; assembler added errata NOP
  2589                           
  2590                           ;usart.c: 117:         dataSequence[i] = dataSequence[i+1];
  2591  00269A  5014               	movf	shiftData@i^0,w,c
  2592  00269C  6E12               	movwf	??_shiftData^0,c
  2593  00269E  6A13               	clrf	(??_shiftData+1)^0,c
  2594  0026A0  90D8               	bcf	status,0,c
  2595  0026A2  3612               	rlcf	??_shiftData^0,f,c
  2596  0026A4  3613               	rlcf	(??_shiftData+1)^0,f,c
  2597  0026A6  90D8               	bcf	status,0,c
  2598  0026A8  3612               	rlcf	??_shiftData^0,f,c
  2599  0026AA  3613               	rlcf	(??_shiftData+1)^0,f,c
  2600  0026AC  0EE8               	movlw	low (_dataSequence+4)
  2601  0026AE  2412               	addwf	??_shiftData^0,w,c
  2602  0026B0  6ED9               	movwf	fsr2l,c
  2603  0026B2  0E00               	movlw	high (_dataSequence+4)
  2604  0026B4  2013               	addwfc	(??_shiftData+1)^0,w,c
  2605  0026B6  6EDA               	movwf	fsr2h,c
  2606  0026B8  5014               	movf	shiftData@i^0,w,c
  2607  0026BA  0D04               	mullw	4
  2608  0026BC  0EE4               	movlw	low _dataSequence
  2609  0026BE  24F3               	addwf	243,w,c
  2610  0026C0  6EE1               	movwf	fsr1l,c
  2611  0026C2  0E00               	movlw	high _dataSequence
  2612  0026C4  20F4               	addwfc	prodh,w,c
  2613  0026C6  6EE2               	movwf	fsr1h,c
  2614  0026C8  CFDE FFE6          	movff	postinc2,postinc1
  2615  0026CC  CFDE FFE6          	movff	postinc2,postinc1
  2616  0026D0  CFDE FFE6          	movff	postinc2,postinc1
  2617  0026D4  CFDE FFE6          	movff	postinc2,postinc1
  2618  0026D8                     
  2619                           ;usart.c: 118:     }
  2620  0026D8  2A14               	incf	shiftData@i^0,f,c
  2621  0026DA  0E03               	movlw	3
  2622  0026DC  6414               	cpfsgt	shiftData@i^0,c
  2623  0026DE  EF73  F013         	goto	u4121
  2624  0026E2  EF76  F013         	goto	u4120
  2625  0026E6                     u4121:
  2626  0026E6  FFFF               	dw	65535	; assembler added errata NOP
  2627  0026E8  EF4C  F013         	goto	l4857
  2628  0026EC                     u4120:
  2629  0026EC  FFFF               	dw	65535	; assembler added errata NOP
  2630  0026EE  0012               	return		;funcret
  2631  0026F0  FFFF               	dw	65535	; errata NOP
  2632  0026F2                     __end_of_shiftData:
  2633                           	callstack 0
  2634                           
  2635 ;; *************** function _resetPosition *****************
  2636 ;; Defined at:
  2637 ;;		line 162 in file "motors.c"
  2638 ;; Parameters:    Size  Location     Type
  2639 ;;		None
  2640 ;; Auto vars:     Size  Location     Type
  2641 ;;  keepMovingZ     1   22[COMRAM] unsigned char 
  2642 ;;  keepMovingY     1   21[COMRAM] unsigned char 
  2643 ;;  keepMovingX     1   20[COMRAM] unsigned char 
  2644 ;; Return value:  Size  Location     Type
  2645 ;;                  1    wreg      unsigned char 
  2646 ;; Registers used:
  2647 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2648 ;; Tracked objects:
  2649 ;;		On entry : 0/0
  2650 ;;		On exit  : 0/0
  2651 ;;		Unchanged: 0/0
  2652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2653 ;;      Params:         0       0       0       0       0       0       0
  2654 ;;      Locals:         3       0       0       0       0       0       0
  2655 ;;      Temps:          0       0       0       0       0       0       0
  2656 ;;      Totals:         3       0       0       0       0       0       0
  2657 ;;Total ram usage:        3 bytes
  2658 ;; Hardware stack levels used:    1
  2659 ;; Hardware stack levels required when called:    5
  2660 ;; This function calls:
  2661 ;;		_resetStep
  2662 ;;		_resetTM0_Temp
  2663 ;;		_resetTM2_Temp
  2664 ;;		_stepMade
  2665 ;; This function is called by:
  2666 ;;		_main
  2667 ;; This function uses a non-reentrant model
  2668 ;;
  2669                           
  2670                           	psect	text8
  2671  0017D4                     __ptext8:
  2672                           	callstack 0
  2673  0017D4                     _resetPosition:
  2674                           	callstack 0
  2675  0017D4  FFFF               	dw	65535	; assembler added errata NOP
  2676  0017D6                     
  2677                           ;motors.c: 182:     motCounter[0][1] = -1;
  2678  0017D6  6868               	setf	(_motCounter+1)^0,c
  2679                           
  2680                           ;motors.c: 183:     motCounter[1][1] = -1;
  2681  0017D8  686A               	setf	(_motCounter+3)^0,c
  2682                           
  2683                           ;motors.c: 184:     motCounter[2][1] = -1;
  2684  0017DA  686C               	setf	(_motCounter+5)^0,c
  2685  0017DC                     
  2686                           ;motors.c: 189:     unsigned char keepMovingX = 1;
  2687  0017DC  0E01               	movlw	1
  2688  0017DE  6E15               	movwf	resetPosition@keepMovingX^0,c
  2689                           
  2690                           ;motors.c: 190:     unsigned char keepMovingY = 1;
  2691  0017E0  0E01               	movlw	1
  2692  0017E2  6E16               	movwf	resetPosition@keepMovingY^0,c
  2693                           
  2694                           ;motors.c: 191:     unsigned char keepMovingZ = 1;
  2695  0017E4  0E01               	movlw	1
  2696  0017E6  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2697  0017E8                     
  2698                           ;motors.c: 194:     T2CONbits.TMR2ON = 1;
  2699  0017E8  84CA               	bsf	202,2,c	;volatile
  2700                           
  2701                           ;motors.c: 196:     tm0Error = 0;
  2702  0017EA  0E00               	movlw	0
  2703  0017EC  6E5A               	movwf	(_tm0Error+1)^0,c
  2704  0017EE  0E00               	movlw	0
  2705  0017F0  6E59               	movwf	_tm0Error^0,c
  2706                           
  2707                           ;motors.c: 197:     tm0Limit = 200;
  2708  0017F2  0EC8               	movlw	200
  2709  0017F4  6E66               	movwf	_tm0Limit^0,c
  2710  0017F6                     
  2711                           ;motors.c: 198:     T0CONbits.TMR0ON = 1;
  2712  0017F6  8ED5               	bsf	213,7,c	;volatile
  2713                           
  2714                           ;motors.c: 200:     while(keepMovingX || keepMovingY || keepMovingZ){
  2715  0017F8  EFAC  F00C         	goto	l4599
  2716  0017FC                     l4557:
  2717  0017FC  FFFF               	dw	65535	; assembler added errata NOP
  2718                           
  2719                           ;motors.c: 202:         resetStep();
  2720  0017FE  ECCD  F014         	call	_resetStep	;wreg free
  2721  001802                     
  2722                           ;motors.c: 205:         if(tm0Error){
  2723  001802  5059               	movf	_tm0Error^0,w,c
  2724  001804  105A               	iorwf	(_tm0Error+1)^0,w,c
  2725  001806  B4D8               	btfsc	status,2,c
  2726  001808  EF08  F00C         	goto	u3811
  2727  00180C  EF0B  F00C         	goto	u3810
  2728  001810                     u3811:
  2729  001810  FFFF               	dw	65535	; assembler added errata NOP
  2730  001812  EF12  F00C         	goto	l131
  2731  001816                     u3810:
  2732  001816  FFFF               	dw	65535	; assembler added errata NOP
  2733  001818                     
  2734                           ;motors.c: 213:             tm0Error = 3;
  2735  001818  0E00               	movlw	0
  2736  00181A  6E5A               	movwf	(_tm0Error+1)^0,c
  2737  00181C  0E03               	movlw	3
  2738  00181E  6E59               	movwf	_tm0Error^0,c
  2739                           
  2740                           ;motors.c: 214:             break;
  2741  001820  EFCA  F00C         	goto	l132
  2742  001824                     l131:
  2743  001824  FFFF               	dw	65535	; assembler added errata NOP
  2744                           
  2745                           ;motors.c: 221:         if(PORTEbits.RE0 || !keepMovingX){
  2746  001826  B084               	btfsc	132,0,c	;volatile
  2747  001828  EF18  F00C         	goto	u3821
  2748  00182C  EF1B  F00C         	goto	u3820
  2749  001830                     u3821:
  2750  001830  FFFF               	dw	65535	; assembler added errata NOP
  2751  001832  EF25  F00C         	goto	l4565
  2752  001836                     u3820:
  2753  001836  FFFF               	dw	65535	; assembler added errata NOP
  2754  001838  5015               	movf	resetPosition@keepMovingX^0,w,c
  2755  00183A  A4D8               	btfss	status,2,c
  2756  00183C  EF22  F00C         	goto	u3831
  2757  001840  EF25  F00C         	goto	u3830
  2758  001844                     u3831:
  2759  001844  FFFF               	dw	65535	; assembler added errata NOP
  2760  001846  EF2A  F00C         	goto	l4567
  2761  00184A                     u3830:
  2762  00184A                     l4565:
  2763  00184A  FFFF               	dw	65535	; assembler added errata NOP
  2764                           
  2765                           ;motors.c: 223:             keepMovingX = 0;
  2766  00184C  0E00               	movlw	0
  2767  00184E  6E15               	movwf	resetPosition@keepMovingX^0,c
  2768                           
  2769                           ;motors.c: 224:         }else{
  2770  001850  EF41  F00C         	goto	l4573
  2771  001854                     l4567:
  2772  001854  FFFF               	dw	65535	; assembler added errata NOP
  2773                           
  2774                           ;motors.c: 230:             motCounter[0][0] += motCounter[0][1];
  2775  001856  5068               	movf	(_motCounter+1)^0,w,c
  2776  001858  2667               	addwf	_motCounter^0,f,c
  2777                           
  2778                           ;motors.c: 231:             if(motCounter[0][0] < 0){
  2779  00185A  BE67               	btfsc	_motCounter^0,7,c
  2780  00185C  EF35  F00C         	goto	u3840
  2781  001860  EF32  F00C         	goto	u3841
  2782  001864                     u3841:
  2783  001864  FFFF               	dw	65535	; assembler added errata NOP
  2784  001866  EF38  F00C         	goto	l4571
  2785  00186A                     u3840:
  2786  00186A  FFFF               	dw	65535	; assembler added errata NOP
  2787  00186C                     
  2788                           ;motors.c: 232:                 motCounter[0][0] = 3;
  2789  00186C  0E03               	movlw	3
  2790  00186E  6E67               	movwf	_motCounter^0,c
  2791  001870                     l4571:
  2792  001870  FFFF               	dw	65535	; assembler added errata NOP
  2793                           
  2794                           ;motors.c: 235:             LATA = stepMot1[motCounter[0][0]];
  2795  001872  0E8C               	movlw	low _stepMot1
  2796  001874  2467               	addwf	_motCounter^0,w,c
  2797  001876  6ED9               	movwf	fsr2l,c
  2798  001878  6ADA               	clrf	fsr2h,c
  2799  00187A  0E00               	movlw	high _stepMot1
  2800  00187C  22DA               	addwfc	fsr2h,f,c
  2801  00187E  50DF               	movf	indf2,w,c
  2802  001880  6E89               	movwf	137,c	;volatile
  2803  001882                     l4573:
  2804  001882  FFFF               	dw	65535	; assembler added errata NOP
  2805                           
  2806                           ;motors.c: 240:         if(PORTEbits.RE1 || !keepMovingY){
  2807  001884  B284               	btfsc	132,1,c	;volatile
  2808  001886  EF47  F00C         	goto	u3851
  2809  00188A  EF4A  F00C         	goto	u3850
  2810  00188E                     u3851:
  2811  00188E  FFFF               	dw	65535	; assembler added errata NOP
  2812  001890  EF54  F00C         	goto	l4577
  2813  001894                     u3850:
  2814  001894  FFFF               	dw	65535	; assembler added errata NOP
  2815  001896  5016               	movf	resetPosition@keepMovingY^0,w,c
  2816  001898  A4D8               	btfss	status,2,c
  2817  00189A  EF51  F00C         	goto	u3861
  2818  00189E  EF54  F00C         	goto	u3860
  2819  0018A2                     u3861:
  2820  0018A2  FFFF               	dw	65535	; assembler added errata NOP
  2821  0018A4  EF59  F00C         	goto	l4579
  2822  0018A8                     u3860:
  2823  0018A8                     l4577:
  2824  0018A8  FFFF               	dw	65535	; assembler added errata NOP
  2825                           
  2826                           ;motors.c: 242:             keepMovingY = 0;
  2827  0018AA  0E00               	movlw	0
  2828  0018AC  6E16               	movwf	resetPosition@keepMovingY^0,c
  2829                           
  2830                           ;motors.c: 243:         }else{
  2831  0018AE  EF70  F00C         	goto	l4585
  2832  0018B2                     l4579:
  2833  0018B2  FFFF               	dw	65535	; assembler added errata NOP
  2834                           
  2835                           ;motors.c: 249:             motCounter[1][0] += motCounter[1][1];
  2836  0018B4  506A               	movf	(_motCounter+3)^0,w,c
  2837  0018B6  2669               	addwf	(_motCounter+2)^0,f,c
  2838                           
  2839                           ;motors.c: 250:             if(motCounter[1][0] < 0){
  2840  0018B8  BE69               	btfsc	(_motCounter+2)^0,7,c
  2841  0018BA  EF64  F00C         	goto	u3870
  2842  0018BE  EF61  F00C         	goto	u3871
  2843  0018C2                     u3871:
  2844  0018C2  FFFF               	dw	65535	; assembler added errata NOP
  2845  0018C4  EF67  F00C         	goto	l4583
  2846  0018C8                     u3870:
  2847  0018C8  FFFF               	dw	65535	; assembler added errata NOP
  2848  0018CA                     
  2849                           ;motors.c: 251:                 motCounter[1][0] = 3;
  2850  0018CA  0E03               	movlw	3
  2851  0018CC  6E69               	movwf	(_motCounter+2)^0,c
  2852  0018CE                     l4583:
  2853  0018CE  FFFF               	dw	65535	; assembler added errata NOP
  2854                           
  2855                           ;motors.c: 254:             LATB = stepMot2[motCounter[1][0]];
  2856  0018D0  0E88               	movlw	low _stepMot2
  2857  0018D2  2469               	addwf	(_motCounter+2)^0,w,c
  2858  0018D4  6ED9               	movwf	fsr2l,c
  2859  0018D6  6ADA               	clrf	fsr2h,c
  2860  0018D8  0E00               	movlw	high _stepMot2
  2861  0018DA  22DA               	addwfc	fsr2h,f,c
  2862  0018DC  50DF               	movf	indf2,w,c
  2863  0018DE  6E8A               	movwf	138,c	;volatile
  2864  0018E0                     l4585:
  2865  0018E0  FFFF               	dw	65535	; assembler added errata NOP
  2866                           
  2867                           ;motors.c: 259:         if(PORTEbits.RE2 || !keepMovingZ){
  2868  0018E2  B484               	btfsc	132,2,c	;volatile
  2869  0018E4  EF76  F00C         	goto	u3881
  2870  0018E8  EF79  F00C         	goto	u3880
  2871  0018EC                     u3881:
  2872  0018EC  FFFF               	dw	65535	; assembler added errata NOP
  2873  0018EE  EF83  F00C         	goto	l4589
  2874  0018F2                     u3880:
  2875  0018F2  FFFF               	dw	65535	; assembler added errata NOP
  2876  0018F4  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2877  0018F6  A4D8               	btfss	status,2,c
  2878  0018F8  EF80  F00C         	goto	u3891
  2879  0018FC  EF83  F00C         	goto	u3890
  2880  001900                     u3891:
  2881  001900  FFFF               	dw	65535	; assembler added errata NOP
  2882  001902  EF88  F00C         	goto	l4591
  2883  001906                     u3890:
  2884  001906                     l4589:
  2885  001906  FFFF               	dw	65535	; assembler added errata NOP
  2886                           
  2887                           ;motors.c: 261:             keepMovingZ = 0;
  2888  001908  0E00               	movlw	0
  2889  00190A  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2890                           
  2891                           ;motors.c: 262:         }else{
  2892  00190C  EF9F  F00C         	goto	l4597
  2893  001910                     l4591:
  2894  001910  FFFF               	dw	65535	; assembler added errata NOP
  2895                           
  2896                           ;motors.c: 268:             motCounter[2][0] += motCounter[2][1];
  2897  001912  506C               	movf	(_motCounter+5)^0,w,c
  2898  001914  266B               	addwf	(_motCounter+4)^0,f,c
  2899                           
  2900                           ;motors.c: 269:             if(motCounter[2][0] < 0){
  2901  001916  BE6B               	btfsc	(_motCounter+4)^0,7,c
  2902  001918  EF93  F00C         	goto	u3900
  2903  00191C  EF90  F00C         	goto	u3901
  2904  001920                     u3901:
  2905  001920  FFFF               	dw	65535	; assembler added errata NOP
  2906  001922  EF96  F00C         	goto	l4595
  2907  001926                     u3900:
  2908  001926  FFFF               	dw	65535	; assembler added errata NOP
  2909  001928                     
  2910                           ;motors.c: 270:                 motCounter[2][0] = 3;
  2911  001928  0E03               	movlw	3
  2912  00192A  6E6B               	movwf	(_motCounter+4)^0,c
  2913  00192C                     l4595:
  2914  00192C  FFFF               	dw	65535	; assembler added errata NOP
  2915                           
  2916                           ;motors.c: 273:             LATC = stepMot3[motCounter[2][0]];
  2917  00192E  0E84               	movlw	low _stepMot3
  2918  001930  246B               	addwf	(_motCounter+4)^0,w,c
  2919  001932  6ED9               	movwf	fsr2l,c
  2920  001934  6ADA               	clrf	fsr2h,c
  2921  001936  0E00               	movlw	high _stepMot3
  2922  001938  22DA               	addwfc	fsr2h,f,c
  2923  00193A  50DF               	movf	indf2,w,c
  2924  00193C  6E8B               	movwf	139,c	;volatile
  2925  00193E                     l4597:
  2926  00193E  FFFF               	dw	65535	; assembler added errata NOP
  2927  001940  EC4A  F014         	call	_stepMade	;wreg free
  2928  001944  5012               	movf	?_stepMade^0,w,c
  2929  001946  1013               	iorwf	(?_stepMade+1)^0,w,c
  2930  001948  B4D8               	btfsc	status,2,c
  2931  00194A  EFA9  F00C         	goto	u3911
  2932  00194E  EFAC  F00C         	goto	u3910
  2933  001952                     u3911:
  2934  001952  FFFF               	dw	65535	; assembler added errata NOP
  2935  001954  EF9F  F00C         	goto	l4597
  2936  001958                     u3910:
  2937  001958                     l4599:
  2938  001958  FFFF               	dw	65535	; assembler added errata NOP
  2939                           
  2940                           ;motors.c: 200:     while(keepMovingX || keepMovingY || keepMovingZ){
  2941  00195A  5015               	movf	resetPosition@keepMovingX^0,w,c
  2942  00195C  A4D8               	btfss	status,2,c
  2943  00195E  EFB3  F00C         	goto	u3921
  2944  001962  EFB6  F00C         	goto	u3920
  2945  001966                     u3921:
  2946  001966  FFFF               	dw	65535	; assembler added errata NOP
  2947  001968  EFFE  F00B         	goto	l4557
  2948  00196C                     u3920:
  2949  00196C  FFFF               	dw	65535	; assembler added errata NOP
  2950  00196E  5016               	movf	resetPosition@keepMovingY^0,w,c
  2951  001970  A4D8               	btfss	status,2,c
  2952  001972  EFBD  F00C         	goto	u3931
  2953  001976  EFC0  F00C         	goto	u3930
  2954  00197A                     u3931:
  2955  00197A  FFFF               	dw	65535	; assembler added errata NOP
  2956  00197C  EFFE  F00B         	goto	l4557
  2957  001980                     u3930:
  2958  001980  FFFF               	dw	65535	; assembler added errata NOP
  2959  001982  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2960  001984  A4D8               	btfss	status,2,c
  2961  001986  EFC7  F00C         	goto	u3941
  2962  00198A  EFCA  F00C         	goto	u3940
  2963  00198E                     u3941:
  2964  00198E  FFFF               	dw	65535	; assembler added errata NOP
  2965  001990  EFFE  F00B         	goto	l4557
  2966  001994                     u3940:
  2967  001994                     l132:
  2968  001994  FFFF               	dw	65535	; assembler added errata NOP
  2969                           
  2970                           ;motors.c: 293:     T0CONbits.TMR0ON = 0;
  2971  001996  9ED5               	bcf	213,7,c	;volatile
  2972                           
  2973                           ;motors.c: 294:     T2CONbits.TMR2ON = 0;
  2974  001998  94CA               	bcf	202,2,c	;volatile
  2975  00199A                     
  2976                           ;motors.c: 296:     resetTM0_Temp();
  2977  00199A  ECC8  F014         	call	_resetTM0_Temp	;wreg free
  2978                           
  2979                           ;motors.c: 297:     resetTM2_Temp();
  2980  00199E  EC66  F014         	call	_resetTM2_Temp	;wreg free
  2981  0019A2                     
  2982                           ;motors.c: 299:     TMR0 = 0;
  2983  0019A2  0E00               	movlw	0
  2984  0019A4  6ED7               	movwf	215,c	;volatile
  2985  0019A6  0E00               	movlw	0
  2986  0019A8  6ED6               	movwf	214,c	;volatile
  2987  0019AA                     
  2988                           ;motors.c: 300:     TMR2 = 0;
  2989  0019AA  0E00               	movlw	0
  2990  0019AC  6ECC               	movwf	204,c	;volatile
  2991                           
  2992                           ;motors.c: 303:     resetStep();
  2993  0019AE  ECCD  F014         	call	_resetStep	;wreg free
  2994  0019B2                     
  2995                           ;motors.c: 306:     return(tm0Error);
  2996  0019B2  5059               	movf	_tm0Error^0,w,c
  2997  0019B4  0012               	return		;funcret
  2998  0019B6  FFFF               	dw	65535	; errata NOP
  2999  0019B8                     __end_of_resetPosition:
  3000                           	callstack 0
  3001                           
  3002 ;; *************** function _resetNewSequence *****************
  3003 ;; Defined at:
  3004 ;;		line 105 in file "usart.c"
  3005 ;; Parameters:    Size  Location     Type
  3006 ;;		None
  3007 ;; Auto vars:     Size  Location     Type
  3008 ;;		None
  3009 ;; Return value:  Size  Location     Type
  3010 ;;                  1    wreg      void 
  3011 ;; Registers used:
  3012 ;;		wreg, status,2
  3013 ;; Tracked objects:
  3014 ;;		On entry : 0/0
  3015 ;;		On exit  : 0/0
  3016 ;;		Unchanged: 0/0
  3017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3018 ;;      Params:         0       0       0       0       0       0       0
  3019 ;;      Locals:         0       0       0       0       0       0       0
  3020 ;;      Temps:          0       0       0       0       0       0       0
  3021 ;;      Totals:         0       0       0       0       0       0       0
  3022 ;;Total ram usage:        0 bytes
  3023 ;; Hardware stack levels used:    1
  3024 ;; Hardware stack levels required when called:    4
  3025 ;; This function calls:
  3026 ;;		Nothing
  3027 ;; This function is called by:
  3028 ;;		_main
  3029 ;; This function uses a non-reentrant model
  3030 ;;
  3031                           
  3032                           	psect	text9
  3033  002968                     __ptext9:
  3034                           	callstack 0
  3035  002968                     _resetNewSequence:
  3036                           	callstack 0
  3037  002968  FFFF               	dw	65535	; assembler added errata NOP
  3038  00296A                     
  3039                           ;usart.c: 106:     _newSequence = 0;
  3040  00296A  0E00               	movlw	0
  3041  00296C  6E5F               	movwf	__newSequence^0,c
  3042  00296E  0012               	return		;funcret
  3043  002970  FFFF               	dw	65535	; errata NOP
  3044  002972                     __end_of_resetNewSequence:
  3045                           	callstack 0
  3046                           
  3047 ;; *************** function _reduceSeq *****************
  3048 ;; Defined at:
  3049 ;;		line 75 in file "usart.c"
  3050 ;; Parameters:    Size  Location     Type
  3051 ;;		None
  3052 ;; Auto vars:     Size  Location     Type
  3053 ;;		None
  3054 ;; Return value:  Size  Location     Type
  3055 ;;                  1    wreg      void 
  3056 ;; Registers used:
  3057 ;;		status,2, status,0
  3058 ;; Tracked objects:
  3059 ;;		On entry : 0/0
  3060 ;;		On exit  : 0/0
  3061 ;;		Unchanged: 0/0
  3062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3063 ;;      Params:         0       0       0       0       0       0       0
  3064 ;;      Locals:         0       0       0       0       0       0       0
  3065 ;;      Temps:          0       0       0       0       0       0       0
  3066 ;;      Totals:         0       0       0       0       0       0       0
  3067 ;;Total ram usage:        0 bytes
  3068 ;; Hardware stack levels used:    1
  3069 ;; Hardware stack levels required when called:    4
  3070 ;; This function calls:
  3071 ;;		Nothing
  3072 ;; This function is called by:
  3073 ;;		_main
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077                           	psect	text10
  3078  0029C2                     __ptext10:
  3079                           	callstack 0
  3080  0029C2                     _reduceSeq:
  3081                           	callstack 0
  3082  0029C2  FFFF               	dw	65535	; assembler added errata NOP
  3083  0029C4                     
  3084                           ;usart.c: 76:     dataCounter--;
  3085  0029C4  0661               	decf	_dataCounter^0,f,c
  3086  0029C6  0012               	return		;funcret
  3087  0029C8  FFFF               	dw	65535	; errata NOP
  3088  0029CA                     __end_of_reduceSeq:
  3089                           	callstack 0
  3090                           
  3091 ;; *************** function _readSeq *****************
  3092 ;; Defined at:
  3093 ;;		line 89 in file "usart.c"
  3094 ;; Parameters:    Size  Location     Type
  3095 ;;		None
  3096 ;; Auto vars:     Size  Location     Type
  3097 ;;		None
  3098 ;; Return value:  Size  Location     Type
  3099 ;;                  1    wreg      unsigned char 
  3100 ;; Registers used:
  3101 ;;		wreg, status,2
  3102 ;; Tracked objects:
  3103 ;;		On entry : 0/0
  3104 ;;		On exit  : 0/0
  3105 ;;		Unchanged: 0/0
  3106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3107 ;;      Params:         0       0       0       0       0       0       0
  3108 ;;      Locals:         0       0       0       0       0       0       0
  3109 ;;      Temps:          0       0       0       0       0       0       0
  3110 ;;      Totals:         0       0       0       0       0       0       0
  3111 ;;Total ram usage:        0 bytes
  3112 ;; Hardware stack levels used:    1
  3113 ;; Hardware stack levels required when called:    4
  3114 ;; This function calls:
  3115 ;;		Nothing
  3116 ;; This function is called by:
  3117 ;;		_main
  3118 ;; This function uses a non-reentrant model
  3119 ;;
  3120                           
  3121                           	psect	text11
  3122  0029CA                     __ptext11:
  3123                           	callstack 0
  3124  0029CA                     _readSeq:
  3125                           	callstack 0
  3126  0029CA  FFFF               	dw	65535	; assembler added errata NOP
  3127  0029CC                     
  3128                           ;usart.c: 90:     return dataCounter;
  3129  0029CC  5061               	movf	_dataCounter^0,w,c
  3130  0029CE  0012               	return		;funcret
  3131  0029D0  FFFF               	dw	65535	; errata NOP
  3132  0029D2                     __end_of_readSeq:
  3133                           	callstack 0
  3134                           
  3135 ;; *************** function _newSequence *****************
  3136 ;; Defined at:
  3137 ;;		line 97 in file "usart.c"
  3138 ;; Parameters:    Size  Location     Type
  3139 ;;		None
  3140 ;; Auto vars:     Size  Location     Type
  3141 ;;		None
  3142 ;; Return value:  Size  Location     Type
  3143 ;;                  1    wreg      unsigned char 
  3144 ;; Registers used:
  3145 ;;		wreg, status,2
  3146 ;; Tracked objects:
  3147 ;;		On entry : 0/0
  3148 ;;		On exit  : 0/0
  3149 ;;		Unchanged: 0/0
  3150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3151 ;;      Params:         0       0       0       0       0       0       0
  3152 ;;      Locals:         0       0       0       0       0       0       0
  3153 ;;      Temps:          0       0       0       0       0       0       0
  3154 ;;      Totals:         0       0       0       0       0       0       0
  3155 ;;Total ram usage:        0 bytes
  3156 ;; Hardware stack levels used:    1
  3157 ;; Hardware stack levels required when called:    4
  3158 ;; This function calls:
  3159 ;;		Nothing
  3160 ;; This function is called by:
  3161 ;;		_main
  3162 ;; This function uses a non-reentrant model
  3163 ;;
  3164                           
  3165                           	psect	text12
  3166  0029D2                     __ptext12:
  3167                           	callstack 0
  3168  0029D2                     _newSequence:
  3169                           	callstack 0
  3170  0029D2  FFFF               	dw	65535	; assembler added errata NOP
  3171  0029D4                     
  3172                           ;usart.c: 98:     return _newSequence;
  3173  0029D4  505F               	movf	__newSequence^0,w,c
  3174  0029D6  0012               	return		;funcret
  3175  0029D8  FFFF               	dw	65535	; errata NOP
  3176  0029DA                     __end_of_newSequence:
  3177                           	callstack 0
  3178                           
  3179 ;; *************** function _interruptInit *****************
  3180 ;; Defined at:
  3181 ;;		line 35 in file "interrupt.c"
  3182 ;; Parameters:    Size  Location     Type
  3183 ;;		None
  3184 ;; Auto vars:     Size  Location     Type
  3185 ;;		None
  3186 ;; Return value:  Size  Location     Type
  3187 ;;                  1    wreg      void 
  3188 ;; Registers used:
  3189 ;;		None
  3190 ;; Tracked objects:
  3191 ;;		On entry : 0/0
  3192 ;;		On exit  : 0/0
  3193 ;;		Unchanged: 0/0
  3194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3195 ;;      Params:         0       0       0       0       0       0       0
  3196 ;;      Locals:         0       0       0       0       0       0       0
  3197 ;;      Temps:          0       0       0       0       0       0       0
  3198 ;;      Totals:         0       0       0       0       0       0       0
  3199 ;;Total ram usage:        0 bytes
  3200 ;; Hardware stack levels used:    1
  3201 ;; Hardware stack levels required when called:    4
  3202 ;; This function calls:
  3203 ;;		Nothing
  3204 ;; This function is called by:
  3205 ;;		_main
  3206 ;; This function uses a non-reentrant model
  3207 ;;
  3208                           
  3209                           	psect	text13
  3210  00278E                     __ptext13:
  3211                           	callstack 0
  3212  00278E                     _interruptInit:
  3213                           	callstack 0
  3214  00278E  FFFF               	dw	65535	; assembler added errata NOP
  3215  002790                     
  3216                           ;interrupt.c: 37:     if(!INTCONbits.GIE){
  3217  002790  BEF2               	btfsc	242,7,c	;volatile
  3218  002792  EFCD  F013         	goto	u3951
  3219  002796  EFD0  F013         	goto	u3950
  3220  00279A                     u3951:
  3221  00279A  FFFF               	dw	65535	; assembler added errata NOP
  3222  00279C  EFD2  F013         	goto	l449
  3223  0027A0                     u3950:
  3224  0027A0  FFFF               	dw	65535	; assembler added errata NOP
  3225  0027A2                     
  3226                           ;interrupt.c: 38:         INTCONbits.GIE = 1;
  3227  0027A2  8EF2               	bsf	242,7,c	;volatile
  3228  0027A4                     l449:
  3229  0027A4  FFFF               	dw	65535	; assembler added errata NOP
  3230                           
  3231                           ;interrupt.c: 40:     if(!INTCONbits.PEIE){
  3232  0027A6  BCF2               	btfsc	242,6,c	;volatile
  3233  0027A8  EFD8  F013         	goto	u3961
  3234  0027AC  EFDB  F013         	goto	u3960
  3235  0027B0                     u3961:
  3236  0027B0  FFFF               	dw	65535	; assembler added errata NOP
  3237  0027B2  EFDD  F013         	goto	l450
  3238  0027B6                     u3960:
  3239  0027B6  FFFF               	dw	65535	; assembler added errata NOP
  3240  0027B8                     
  3241                           ;interrupt.c: 41:         INTCONbits.PEIE = 1;
  3242  0027B8  8CF2               	bsf	242,6,c	;volatile
  3243  0027BA                     l450:
  3244  0027BA  FFFF               	dw	65535	; assembler added errata NOP
  3245                           
  3246                           ;interrupt.c: 45:     RCONbits.IPEN = 1;
  3247  0027BC  8ED0               	bsf	208,7,c	;volatile
  3248                           
  3249                           ;interrupt.c: 46:     INTCONbits.T0IE = 1;
  3250  0027BE  8AF2               	bsf	242,5,c	;volatile
  3251                           
  3252                           ;interrupt.c: 47:     PIE1bits.TMR1IE = 1;
  3253  0027C0  809D               	bsf	157,0,c	;volatile
  3254                           
  3255                           ;interrupt.c: 48:     PIE1bits.TMR2IE = 1;
  3256  0027C2  829D               	bsf	157,1,c	;volatile
  3257                           
  3258                           ;interrupt.c: 49:     PIE1bits.RC1IE = 1;
  3259  0027C4  8A9D               	bsf	157,5,c	;volatile
  3260  0027C6  0012               	return		;funcret
  3261  0027C8  FFFF               	dw	65535	; errata NOP
  3262  0027CA                     __end_of_interruptInit:
  3263                           	callstack 0
  3264                           
  3265 ;; *************** function _initPinMotors *****************
  3266 ;; Defined at:
  3267 ;;		line 46 in file "motors.c"
  3268 ;; Parameters:    Size  Location     Type
  3269 ;;		None
  3270 ;; Auto vars:     Size  Location     Type
  3271 ;;		None
  3272 ;; Return value:  Size  Location     Type
  3273 ;;                  1    wreg      void 
  3274 ;; Registers used:
  3275 ;;		wreg, status,2, status,0
  3276 ;; Tracked objects:
  3277 ;;		On entry : 0/0
  3278 ;;		On exit  : 0/0
  3279 ;;		Unchanged: 0/0
  3280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3281 ;;      Params:         0       0       0       0       0       0       0
  3282 ;;      Locals:         0       0       0       0       0       0       0
  3283 ;;      Temps:          0       0       0       0       0       0       0
  3284 ;;      Totals:         0       0       0       0       0       0       0
  3285 ;;Total ram usage:        0 bytes
  3286 ;; Hardware stack levels used:    1
  3287 ;; Hardware stack levels required when called:    4
  3288 ;; This function calls:
  3289 ;;		Nothing
  3290 ;; This function is called by:
  3291 ;;		_main
  3292 ;; This function uses a non-reentrant model
  3293 ;;
  3294                           
  3295                           	psect	text14
  3296  00282A                     __ptext14:
  3297                           	callstack 0
  3298  00282A                     _initPinMotors:
  3299                           	callstack 0
  3300  00282A  FFFF               	dw	65535	; assembler added errata NOP
  3301  00282C                     
  3302                           ;motors.c: 48:     ADCON1bits.PCFG = 0x06;
  3303  00282C  50C1               	movf	193,w,c	;volatile
  3304  00282E  0BF0               	andlw	-16
  3305  002830  0906               	iorlw	6
  3306  002832  6EC1               	movwf	193,c	;volatile
  3307  002834                     
  3308                           ;motors.c: 49:     TRISA &= 0b11010001;
  3309  002834  0ED1               	movlw	209
  3310  002836  1692               	andwf	146,f,c	;volatile
  3311  002838                     
  3312                           ;motors.c: 51:     TRISB &= 0b00000010;
  3313  002838  0E02               	movlw	2
  3314  00283A  1693               	andwf	147,f,c	;volatile
  3315  00283C                     
  3316                           ;motors.c: 52:     TRISC &= 0b11000000;
  3317  00283C  0EC0               	movlw	192
  3318  00283E  1694               	andwf	148,f,c	;volatile
  3319  002840                     
  3320                           ;motors.c: 53:     TRISD &= 0b11000000;
  3321  002840  0EC0               	movlw	192
  3322  002842  1695               	andwf	149,f,c	;volatile
  3323  002844                     
  3324                           ;motors.c: 56:     TRISEbits.TRISE0 = 1;
  3325  002844  8096               	bsf	150,0,c	;volatile
  3326  002846                     
  3327                           ;motors.c: 57:     TRISEbits.TRISE1 = 1;
  3328  002846  8296               	bsf	150,1,c	;volatile
  3329  002848                     
  3330                           ;motors.c: 58:     TRISEbits.TRISE2 = 1;
  3331  002848  8496               	bsf	150,2,c	;volatile
  3332  00284A                     
  3333                           ;motors.c: 61:     TRISDbits.TRISD7 = 1;
  3334  00284A  8E95               	bsf	149,7,c	;volatile
  3335  00284C  0012               	return		;funcret
  3336  00284E  FFFF               	dw	65535	; errata NOP
  3337  002850                     __end_of_initPinMotors:
  3338                           	callstack 0
  3339                           
  3340 ;; *************** function _initADC *****************
  3341 ;; Defined at:
  3342 ;;		line 18 in file "adc.c"
  3343 ;; Parameters:    Size  Location     Type
  3344 ;;		None
  3345 ;; Auto vars:     Size  Location     Type
  3346 ;;		None
  3347 ;; Return value:  Size  Location     Type
  3348 ;;                  1    wreg      void 
  3349 ;; Registers used:
  3350 ;;		wreg, status,2
  3351 ;; Tracked objects:
  3352 ;;		On entry : 0/0
  3353 ;;		On exit  : 0/0
  3354 ;;		Unchanged: 0/0
  3355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3356 ;;      Params:         0       0       0       0       0       0       0
  3357 ;;      Locals:         0       0       0       0       0       0       0
  3358 ;;      Temps:          0       0       0       0       0       0       0
  3359 ;;      Totals:         0       0       0       0       0       0       0
  3360 ;;Total ram usage:        0 bytes
  3361 ;; Hardware stack levels used:    1
  3362 ;; Hardware stack levels required when called:    4
  3363 ;; This function calls:
  3364 ;;		Nothing
  3365 ;; This function is called by:
  3366 ;;		_main
  3367 ;; This function uses a non-reentrant model
  3368 ;;
  3369                           
  3370                           	psect	text15
  3371  002850                     __ptext15:
  3372                           	callstack 0
  3373  002850                     _initADC:
  3374                           	callstack 0
  3375  002850  FFFF               	dw	65535	; assembler added errata NOP
  3376  002852                     
  3377                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  3378  002852  50C2               	movf	194,w,c	;volatile
  3379  002854  0B3F               	andlw	-193
  3380  002856  0940               	iorlw	64
  3381  002858  6EC2               	movwf	194,c	;volatile
  3382  00285A                     
  3383                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  3384  00285A  8CC1               	bsf	193,6,c	;volatile
  3385                           
  3386                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  3387  00285C  0EC7               	movlw	-57
  3388  00285E  16C2               	andwf	194,f,c	;volatile
  3389  002860                     
  3390                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  3391  002860  94C2               	bcf	194,2,c	;volatile
  3392  002862                     
  3393                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  3394  002862  90C2               	bcf	194,0,c	;volatile
  3395  002864                     
  3396                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  3397  002864  9EC1               	bcf	193,7,c	;volatile
  3398                           
  3399                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  3400  002866  50C1               	movf	193,w,c	;volatile
  3401  002868  0BF0               	andlw	-16
  3402  00286A  090E               	iorlw	14
  3403  00286C  6EC1               	movwf	193,c	;volatile
  3404  00286E                     
  3405                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  3406  00286E  8C9D               	bsf	157,6,c	;volatile
  3407  002870                     
  3408                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  3409  002870  8C9F               	bsf	159,6,c	;volatile
  3410  002872  0012               	return		;funcret
  3411  002874  FFFF               	dw	65535	; errata NOP
  3412  002876                     __end_of_initADC:
  3413                           	callstack 0
  3414                           
  3415 ;; *************** function _getNewSequence *****************
  3416 ;; Defined at:
  3417 ;;		line 68 in file "usart.c"
  3418 ;; Parameters:    Size  Location     Type
  3419 ;;		None
  3420 ;; Auto vars:     Size  Location     Type
  3421 ;;		None
  3422 ;; Return value:  Size  Location     Type
  3423 ;;                  2   17[COMRAM] PTR struct .
  3424 ;; Registers used:
  3425 ;;		wreg, status,2, status,0
  3426 ;; Tracked objects:
  3427 ;;		On entry : 0/0
  3428 ;;		On exit  : 0/0
  3429 ;;		Unchanged: 0/0
  3430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3431 ;;      Params:         2       0       0       0       0       0       0
  3432 ;;      Locals:         0       0       0       0       0       0       0
  3433 ;;      Temps:          0       0       0       0       0       0       0
  3434 ;;      Totals:         2       0       0       0       0       0       0
  3435 ;;Total ram usage:        2 bytes
  3436 ;; Hardware stack levels used:    1
  3437 ;; Hardware stack levels required when called:    4
  3438 ;; This function calls:
  3439 ;;		Nothing
  3440 ;; This function is called by:
  3441 ;;		_main
  3442 ;; This function uses a non-reentrant model
  3443 ;;
  3444                           
  3445                           	psect	text16
  3446  0028FE                     __ptext16:
  3447                           	callstack 0
  3448  0028FE                     _getNewSequence:
  3449                           	callstack 0
  3450  0028FE  FFFF               	dw	65535	; assembler added errata NOP
  3451  002900                     
  3452                           ;usart.c: 69:     return(&newSequenceData);
  3453  002900  0EF8               	movlw	low _newSequenceData
  3454  002902  6E12               	movwf	?_getNewSequence^0,c
  3455  002904  0E00               	movlw	high _newSequenceData
  3456  002906  6E13               	movwf	(?_getNewSequence+1)^0,c
  3457  002908  0012               	return		;funcret
  3458  00290A  FFFF               	dw	65535	; errata NOP
  3459  00290C                     __end_of_getNewSequence:
  3460                           	callstack 0
  3461                           
  3462 ;; *************** function _executeData *****************
  3463 ;; Defined at:
  3464 ;;		line 86 in file "main.c"
  3465 ;; Parameters:    Size  Location     Type
  3466 ;;		None
  3467 ;; Auto vars:     Size  Location     Type
  3468 ;;  data            2    0[BANK2 ] PTR struct .
  3469 ;;		 -> dataSequence(20), 
  3470 ;;  errCode         1    2[BANK2 ] unsigned char 
  3471 ;; Return value:  Size  Location     Type
  3472 ;;                  1    wreg      unsigned char 
  3473 ;; Registers used:
  3474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3475 ;; Tracked objects:
  3476 ;;		On entry : 0/0
  3477 ;;		On exit  : 0/0
  3478 ;;		Unchanged: 0/0
  3479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3480 ;;      Params:         0       0       0       0       0       0       0
  3481 ;;      Locals:         0       0       0       3       0       0       0
  3482 ;;      Temps:          0       0       2       0       0       0       0
  3483 ;;      Totals:         0       0       2       3       0       0       0
  3484 ;;Total ram usage:        5 bytes
  3485 ;; Hardware stack levels used:    1
  3486 ;; Hardware stack levels required when called:    6
  3487 ;; This function calls:
  3488 ;;		_getData
  3489 ;;		_liftArm
  3490 ;;		_moveToPoint
  3491 ;;		_pickObject
  3492 ;;		_printStatus
  3493 ;;		_releaseObj
  3494 ;;		_rotateObj
  3495 ;;		_touchObject
  3496 ;;		_touchTherm
  3497 ;; This function is called by:
  3498 ;;		_main
  3499 ;; This function uses a non-reentrant model
  3500 ;;
  3501                           
  3502                           	psect	text17
  3503  000D8C                     __ptext17:
  3504                           	callstack 0
  3505  000D8C                     _executeData:
  3506                           	callstack 0
  3507  000D8C  FFFF               	dw	65535	; assembler added errata NOP
  3508  000D8E                     
  3509                           ;main.c: 88:     t_sequence *data = getData();
  3510  000D8E  EC86  F014         	call	_getData	;wreg free
  3511  000D92  C012  F2D6         	movff	?_getData,executeData@data
  3512  000D96  C013  F2D7         	movff	?_getData+1,executeData@data+1
  3513  000D9A                     
  3514                           ;main.c: 92:     printStatus(0);
  3515  000D9A  0E00               	movlw	0
  3516  000D9C  ECDC  F00C         	call	_printStatus
  3517  000DA0                     
  3518                           ;main.c: 93:     printStatus(1);
  3519  000DA0  0E01               	movlw	1
  3520  000DA2  ECDC  F00C         	call	_printStatus
  3521                           
  3522                           ;main.c: 97:     switch(data->feederLine){
  3523  000DA6  EF7F  F007         	goto	l4771
  3524  000DAA                     l4743:
  3525  000DAA  FFFF               	dw	65535	; assembler added errata NOP
  3526                           
  3527                           ; BSR set to: 1
  3528                           ;main.c: 100:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0
      +                          ], feeder1Pos[1]);
  3529  000DAC  C04C  F015         	movff	_posVector,moveToPoint@x1
  3530  000DB0  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3531  000DB2  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3532  000DB6  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3533  000DB8  0E11               	movlw	low _feeder1Pos
  3534  000DBA  6EF6               	movwf	tblptrl,c
  3535  000DBC                     	if	1	;There is more than 1 active tblptr byte
  3536  000DBC  0E06               	movlw	high _feeder1Pos
  3537  000DBE  6EF7               	movwf	tblptrh,c
  3538  000DC0                     	endif
  3539  000DC0                     	if	0	;There are less than 3 active tblptr bytes
  3540  000DC0                     	endif
  3541  000DC0  0008               	tblrd		*
  3542  000DC2  FFFF               	dw	65535	; errata NOP
  3543  000DC4  50F5               	movf	tablat,w,c
  3544  000DC6  6E19               	movwf	moveToPoint@x2^0,c
  3545  000DC8  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3546  000DCA  0E12               	movlw	low (_feeder1Pos+1)
  3547  000DCC  6EF6               	movwf	tblptrl,c
  3548  000DCE  0E06               	movlw	high (_feeder1Pos+1)
  3549  000DD0  6EF7               	movwf	tblptrh,c
  3550  000DD2                     	if	0	;tblptru may be non-zero
  3551  000DD2                     	endif
  3552  000DD2                     	if	0	;tblptru may be non-zero
  3553  000DD2                     	endif
  3554  000DD2  0008               	tblrd		*
  3555  000DD4  FFFF               	dw	65535	; errata NOP
  3556  000DD6  50F5               	movf	tablat,w,c
  3557  000DD8  6E1B               	movwf	moveToPoint@y2^0,c
  3558  000DDA  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3559  000DDC  EC24  F005         	call	_moveToPoint	;wreg free
  3560  000DE0  0102               	movlb	2	; () banked
  3561  000DE2  6FD8               	movwf	executeData@errCode& (0+255),b
  3562  000DE4                     
  3563                           ; BSR set to: 2
  3564                           ;main.c: 102:             posVector[0] = feeder1Pos[0];
  3565  000DE4  0E11               	movlw	low _feeder1Pos
  3566  000DE6  6EF6               	movwf	tblptrl,c
  3567  000DE8                     	if	1	;There is more than 1 active tblptr byte
  3568  000DE8  0E06               	movlw	high _feeder1Pos
  3569  000DEA  6EF7               	movwf	tblptrh,c
  3570  000DEC                     	endif
  3571  000DEC                     	if	0	;There are less than 3 active tblptr bytes
  3572  000DEC                     	endif
  3573  000DEC  0008               	tblrd		*
  3574  000DEE  FFFF               	dw	65535	; errata NOP
  3575  000DF0  CFF5 F04C          	movff	tablat,_posVector
  3576  000DF4                     
  3577                           ; BSR set to: 2
  3578                           ;main.c: 103:             posVector[1] = feeder1Pos[1];
  3579  000DF4  0E12               	movlw	low (_feeder1Pos+1)
  3580  000DF6  6EF6               	movwf	tblptrl,c
  3581  000DF8  0E06               	movlw	high (_feeder1Pos+1)
  3582  000DFA  6EF7               	movwf	tblptrh,c
  3583  000DFC                     	if	0	;tblptru may be non-zero
  3584  000DFC                     	endif
  3585  000DFC                     	if	0	;tblptru may be non-zero
  3586  000DFC                     	endif
  3587  000DFC  0008               	tblrd		*
  3588  000DFE  FFFF               	dw	65535	; errata NOP
  3589  000E00  CFF5 F04D          	movff	tablat,_posVector+1
  3590                           
  3591                           ;main.c: 104:             break;
  3592  000E04  EFA3  F007         	goto	l4773
  3593  000E08                     l4749:
  3594  000E08  FFFF               	dw	65535	; assembler added errata NOP
  3595                           
  3596                           ; BSR set to: 1
  3597                           ;main.c: 106:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3598  000E0A  C04C  F015         	movff	_posVector,moveToPoint@x1
  3599  000E0E  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3600  000E10  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3601  000E14  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3602  000E16  0E0F               	movlw	low _feeder2Pos
  3603  000E18  6EF6               	movwf	tblptrl,c
  3604  000E1A                     	if	1	;There is more than 1 active tblptr byte
  3605  000E1A  0E06               	movlw	high _feeder2Pos
  3606  000E1C  6EF7               	movwf	tblptrh,c
  3607  000E1E                     	endif
  3608  000E1E                     	if	0	;There are less than 3 active tblptr bytes
  3609  000E1E                     	endif
  3610  000E1E  0008               	tblrd		*
  3611  000E20  FFFF               	dw	65535	; errata NOP
  3612  000E22  50F5               	movf	tablat,w,c
  3613  000E24  6E19               	movwf	moveToPoint@x2^0,c
  3614  000E26  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3615  000E28  0E10               	movlw	low (_feeder2Pos+1)
  3616  000E2A  6EF6               	movwf	tblptrl,c
  3617  000E2C  0E06               	movlw	high (_feeder2Pos+1)
  3618  000E2E  6EF7               	movwf	tblptrh,c
  3619  000E30                     	if	0	;tblptru may be non-zero
  3620  000E30                     	endif
  3621  000E30                     	if	0	;tblptru may be non-zero
  3622  000E30                     	endif
  3623  000E30  0008               	tblrd		*
  3624  000E32  FFFF               	dw	65535	; errata NOP
  3625  000E34  50F5               	movf	tablat,w,c
  3626  000E36  6E1B               	movwf	moveToPoint@y2^0,c
  3627  000E38  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3628  000E3A  EC24  F005         	call	_moveToPoint	;wreg free
  3629  000E3E  0102               	movlb	2	; () banked
  3630  000E40  6FD8               	movwf	executeData@errCode& (0+255),b
  3631  000E42                     
  3632                           ; BSR set to: 2
  3633                           ;main.c: 107:             posVector[0] = feeder2Pos[0];
  3634  000E42  0E0F               	movlw	low _feeder2Pos
  3635  000E44  6EF6               	movwf	tblptrl,c
  3636  000E46                     	if	1	;There is more than 1 active tblptr byte
  3637  000E46  0E06               	movlw	high _feeder2Pos
  3638  000E48  6EF7               	movwf	tblptrh,c
  3639  000E4A                     	endif
  3640  000E4A                     	if	0	;There are less than 3 active tblptr bytes
  3641  000E4A                     	endif
  3642  000E4A  0008               	tblrd		*
  3643  000E4C  FFFF               	dw	65535	; errata NOP
  3644  000E4E  CFF5 F04C          	movff	tablat,_posVector
  3645  000E52                     
  3646                           ; BSR set to: 2
  3647                           ;main.c: 108:             posVector[1] = feeder2Pos[1];
  3648  000E52  0E10               	movlw	low (_feeder2Pos+1)
  3649  000E54  6EF6               	movwf	tblptrl,c
  3650  000E56  0E06               	movlw	high (_feeder2Pos+1)
  3651  000E58  6EF7               	movwf	tblptrh,c
  3652  000E5A                     	if	0	;tblptru may be non-zero
  3653  000E5A                     	endif
  3654  000E5A                     	if	0	;tblptru may be non-zero
  3655  000E5A                     	endif
  3656  000E5A  0008               	tblrd		*
  3657  000E5C  FFFF               	dw	65535	; errata NOP
  3658  000E5E  CFF5 F04D          	movff	tablat,_posVector+1
  3659                           
  3660                           ;main.c: 109:             break;
  3661  000E62  EFA3  F007         	goto	l4773
  3662  000E66                     l4755:
  3663  000E66  FFFF               	dw	65535	; assembler added errata NOP
  3664                           
  3665                           ; BSR set to: 1
  3666                           ;main.c: 111:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3667  000E68  C04C  F015         	movff	_posVector,moveToPoint@x1
  3668  000E6C  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3669  000E6E  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3670  000E72  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3671  000E74  0E0D               	movlw	low _feeder3Pos
  3672  000E76  6EF6               	movwf	tblptrl,c
  3673  000E78                     	if	1	;There is more than 1 active tblptr byte
  3674  000E78  0E06               	movlw	high _feeder3Pos
  3675  000E7A  6EF7               	movwf	tblptrh,c
  3676  000E7C                     	endif
  3677  000E7C                     	if	0	;There are less than 3 active tblptr bytes
  3678  000E7C                     	endif
  3679  000E7C  0008               	tblrd		*
  3680  000E7E  FFFF               	dw	65535	; errata NOP
  3681  000E80  50F5               	movf	tablat,w,c
  3682  000E82  6E19               	movwf	moveToPoint@x2^0,c
  3683  000E84  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3684  000E86  0E0E               	movlw	low (_feeder3Pos+1)
  3685  000E88  6EF6               	movwf	tblptrl,c
  3686  000E8A  0E06               	movlw	high (_feeder3Pos+1)
  3687  000E8C  6EF7               	movwf	tblptrh,c
  3688  000E8E                     	if	0	;tblptru may be non-zero
  3689  000E8E                     	endif
  3690  000E8E                     	if	0	;tblptru may be non-zero
  3691  000E8E                     	endif
  3692  000E8E  0008               	tblrd		*
  3693  000E90  FFFF               	dw	65535	; errata NOP
  3694  000E92  50F5               	movf	tablat,w,c
  3695  000E94  6E1B               	movwf	moveToPoint@y2^0,c
  3696  000E96  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3697  000E98  EC24  F005         	call	_moveToPoint	;wreg free
  3698  000E9C  0102               	movlb	2	; () banked
  3699  000E9E  6FD8               	movwf	executeData@errCode& (0+255),b
  3700  000EA0                     
  3701                           ; BSR set to: 2
  3702                           ;main.c: 112:             posVector[0] = feeder3Pos[0];
  3703  000EA0  0E0D               	movlw	low _feeder3Pos
  3704  000EA2  6EF6               	movwf	tblptrl,c
  3705  000EA4                     	if	1	;There is more than 1 active tblptr byte
  3706  000EA4  0E06               	movlw	high _feeder3Pos
  3707  000EA6  6EF7               	movwf	tblptrh,c
  3708  000EA8                     	endif
  3709  000EA8                     	if	0	;There are less than 3 active tblptr bytes
  3710  000EA8                     	endif
  3711  000EA8  0008               	tblrd		*
  3712  000EAA  FFFF               	dw	65535	; errata NOP
  3713  000EAC  CFF5 F04C          	movff	tablat,_posVector
  3714  000EB0                     
  3715                           ; BSR set to: 2
  3716                           ;main.c: 113:             posVector[1] = feeder3Pos[1];
  3717  000EB0  0E0E               	movlw	low (_feeder3Pos+1)
  3718  000EB2  6EF6               	movwf	tblptrl,c
  3719  000EB4  0E06               	movlw	high (_feeder3Pos+1)
  3720  000EB6  6EF7               	movwf	tblptrh,c
  3721  000EB8                     	if	0	;tblptru may be non-zero
  3722  000EB8                     	endif
  3723  000EB8                     	if	0	;tblptru may be non-zero
  3724  000EB8                     	endif
  3725  000EB8  0008               	tblrd		*
  3726  000EBA  FFFF               	dw	65535	; errata NOP
  3727  000EBC  CFF5 F04D          	movff	tablat,_posVector+1
  3728                           
  3729                           ;main.c: 114:             break;
  3730  000EC0  EFA3  F007         	goto	l4773
  3731  000EC4                     l4761:
  3732  000EC4  FFFF               	dw	65535	; assembler added errata NOP
  3733                           
  3734                           ; BSR set to: 1
  3735                           ;main.c: 118:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3736  000EC6  C04C  F015         	movff	_posVector,moveToPoint@x1
  3737  000ECA  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3738  000ECC  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3739  000ED0  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3740  000ED2  C055  F019         	movff	_newFeeder,moveToPoint@x2
  3741  000ED6  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3742  000ED8  C056  F01B         	movff	_newFeeder+1,moveToPoint@y2
  3743  000EDC  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3744  000EDE  EC24  F005         	call	_moveToPoint	;wreg free
  3745  000EE2  0102               	movlb	2	; () banked
  3746  000EE4  6FD8               	movwf	executeData@errCode& (0+255),b
  3747  000EE6                     
  3748                           ; BSR set to: 2
  3749                           ;main.c: 119:             posVector[0] = newFeeder[0];
  3750  000EE6  C055  F04C         	movff	_newFeeder,_posVector
  3751  000EEA                     
  3752                           ; BSR set to: 2
  3753                           ;main.c: 120:             posVector[1] = newFeeder[1];
  3754  000EEA  C056  F04D         	movff	_newFeeder+1,_posVector+1
  3755                           
  3756                           ;main.c: 121:             break;
  3757  000EEE  EFA3  F007         	goto	l4773
  3758  000EF2                     l4767:
  3759  000EF2  FFFF               	dw	65535	; assembler added errata NOP
  3760                           
  3761                           ; BSR set to: 1
  3762                           ;main.c: 125:             errCode = 1;
  3763  000EF4  0E01               	movlw	1
  3764  000EF6  0102               	movlb	2	; () banked
  3765  000EF8  6FD8               	movwf	executeData@errCode& (0+255),b
  3766                           
  3767                           ;main.c: 126:             break;
  3768  000EFA  EFA3  F007         	goto	l4773
  3769  000EFE                     l4771:
  3770  000EFE  FFFF               	dw	65535	; assembler added errata NOP
  3771  000F00  C2D6  FFD9         	movff	executeData@data,fsr2l
  3772  000F04  C2D7  FFDA         	movff	executeData@data+1,fsr2h
  3773  000F08  50DF               	movf	indf2,w,c
  3774  000F0A  0101               	movlb	1	; () banked
  3775  000F0C  6FFD               	movwf	??_executeData& (0+255),b
  3776  000F0E  6BFE               	clrf	(??_executeData+1)& (0+255),b
  3777                           
  3778                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3779                           ; Switch size 1, requested type "simple"
  3780                           ; Number of cases is 1, Range of values is 0 to 0
  3781                           ; switch strategies available:
  3782                           ; Name         Instructions Cycles
  3783                           ; simple_byte            4     3 (average)
  3784                           ;	Chosen strategy is simple_byte
  3785  000F10  51FE               	movf	(??_executeData+1)& (0+255),w,b
  3786  000F12  0A00               	xorlw	0	; case 0
  3787  000F14  B4D8               	btfsc	status,2,c
  3788  000F16  EF8F  F007         	goto	l5089
  3789  000F1A  EF79  F007         	goto	l4767
  3790  000F1E                     l5089:
  3791  000F1E  FFFF               	dw	65535	; assembler added errata NOP
  3792                           
  3793                           ; BSR set to: 1
  3794                           ; Switch size 1, requested type "simple"
  3795                           ; Number of cases is 4, Range of values is 0 to 255
  3796                           ; switch strategies available:
  3797                           ; Name         Instructions Cycles
  3798                           ; simple_byte           13     7 (average)
  3799                           ;	Chosen strategy is simple_byte
  3800  000F20  51FD               	movf	??_executeData& (0+255),w,b
  3801  000F22  0A00               	xorlw	0	; case 0
  3802  000F24  B4D8               	btfsc	status,2,c
  3803  000F26  EFD5  F006         	goto	l4743
  3804  000F2A  0A01               	xorlw	1	; case 1
  3805  000F2C  B4D8               	btfsc	status,2,c
  3806  000F2E  EF04  F007         	goto	l4749
  3807  000F32  0A03               	xorlw	3	; case 2
  3808  000F34  B4D8               	btfsc	status,2,c
  3809  000F36  EF33  F007         	goto	l4755
  3810  000F3A  0AFD               	xorlw	253	; case 255
  3811  000F3C  B4D8               	btfsc	status,2,c
  3812  000F3E  EF62  F007         	goto	l4761
  3813  000F42  EF79  F007         	goto	l4767
  3814  000F46                     l4773:
  3815  000F46  FFFF               	dw	65535	; assembler added errata NOP
  3816                           
  3817                           ; BSR set to: 2
  3818                           ;main.c: 130:     if(!errCode){
  3819  000F48  51D8               	movf	executeData@errCode& (0+255),w,b
  3820  000F4A  A4D8               	btfss	status,2,c
  3821  000F4C  EFAA  F007         	goto	u4061
  3822  000F50  EFAD  F007         	goto	u4060
  3823  000F54                     u4061:
  3824  000F54  FFFF               	dw	65535	; assembler added errata NOP
  3825  000F56  EFBE  F007         	goto	l4779
  3826  000F5A                     u4060:
  3827  000F5A  FFFF               	dw	65535	; assembler added errata NOP
  3828  000F5C                     
  3829                           ; BSR set to: 2
  3830                           ;main.c: 132:         printStatus(2);
  3831  000F5C  0E02               	movlw	2
  3832  000F5E  ECDC  F00C         	call	_printStatus
  3833                           
  3834                           ;main.c: 134:         errCode = touchObject();
  3835  000F62  EC79  F010         	call	_touchObject	;wreg free
  3836  000F66  0102               	movlb	2	; () banked
  3837  000F68  6FD8               	movwf	executeData@errCode& (0+255),b
  3838  000F6A                     
  3839                           ; BSR set to: 2
  3840                           ;main.c: 135:         if(errCode != 0){
  3841  000F6A  51D8               	movf	executeData@errCode& (0+255),w,b
  3842  000F6C  B4D8               	btfsc	status,2,c
  3843  000F6E  EFBB  F007         	goto	u4071
  3844  000F72  EFBE  F007         	goto	u4070
  3845  000F76                     u4071:
  3846  000F76  FFFF               	dw	65535	; assembler added errata NOP
  3847  000F78  EFC2  F007         	goto	l4783
  3848  000F7C                     u4070:
  3849  000F7C                     l4779:
  3850  000F7C  FFFF               	dw	65535	; assembler added errata NOP
  3851                           
  3852                           ; BSR set to: 2
  3853                           ;main.c: 136:             return(errCode);
  3854  000F7E  51D8               	movf	executeData@errCode& (0+255),w,b
  3855  000F80  EF63  F008         	goto	l348
  3856  000F84                     l4783:
  3857  000F84  FFFF               	dw	65535	; assembler added errata NOP
  3858                           
  3859                           ; BSR set to: 2
  3860                           ;main.c: 139:         printStatus(3);
  3861  000F86  0E03               	movlw	3
  3862  000F88  ECDC  F00C         	call	_printStatus
  3863  000F8C                     
  3864                           ;main.c: 141:         pickObject();
  3865  000F8C  ECFD  F013         	call	_pickObject	;wreg free
  3866  000F90                     
  3867                           ;main.c: 143:         printStatus(4);
  3868  000F90  0E04               	movlw	4
  3869  000F92  ECDC  F00C         	call	_printStatus
  3870  000F96                     
  3871                           ;main.c: 145:         errCode = liftArm();
  3872  000F96  EC65  F012         	call	_liftArm	;wreg free
  3873  000F9A  0102               	movlb	2	; () banked
  3874  000F9C  6FD8               	movwf	executeData@errCode& (0+255),b
  3875  000F9E                     
  3876                           ; BSR set to: 2
  3877                           ;main.c: 146:         if(errCode != 0){
  3878  000F9E  51D8               	movf	executeData@errCode& (0+255),w,b
  3879  000FA0  B4D8               	btfsc	status,2,c
  3880  000FA2  EFD5  F007         	goto	u4081
  3881  000FA6  EFD8  F007         	goto	u4080
  3882  000FAA                     u4081:
  3883  000FAA  FFFF               	dw	65535	; assembler added errata NOP
  3884  000FAC  EFDB  F007         	goto	l4797
  3885  000FB0                     u4080:
  3886  000FB0  FFFF               	dw	65535	; assembler added errata NOP
  3887  000FB2  EFBE  F007         	goto	l4779
  3888  000FB6                     l4797:
  3889  000FB6  FFFF               	dw	65535	; assembler added errata NOP
  3890                           
  3891                           ; BSR set to: 2
  3892                           ;main.c: 150:         printStatus(5);
  3893  000FB8  0E05               	movlw	5
  3894  000FBA  ECDC  F00C         	call	_printStatus
  3895                           
  3896                           ;main.c: 152:         errCode = moveToPoint(posVector[0], posVector[1], data->posX, data
      +                          ->posY);
  3897  000FBE  C04C  F015         	movff	_posVector,moveToPoint@x1
  3898  000FC2  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3899  000FC4  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3900  000FC8  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3901  000FCA  0102               	movlb	2	; () banked
  3902  000FCC  EE20 F001          	lfsr	2,1
  3903  000FD0  51D6               	movf	executeData@data& (0+255),w,b
  3904  000FD2  26D9               	addwf	fsr2l,f,c
  3905  000FD4  51D7               	movf	(executeData@data+1)& (0+255),w,b
  3906  000FD6  22DA               	addwfc	fsr2h,f,c
  3907  000FD8  50DF               	movf	indf2,w,c
  3908  000FDA  0101               	movlb	1	; () banked
  3909  000FDC  6FFD               	movwf	??_executeData& (0+255),b
  3910  000FDE  51FD               	movf	??_executeData& (0+255),w,b
  3911  000FE0  6E19               	movwf	moveToPoint@x2^0,c
  3912  000FE2  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3913  000FE4  0102               	movlb	2	; () banked
  3914  000FE6  EE20 F002          	lfsr	2,2
  3915  000FEA  51D6               	movf	executeData@data& (0+255),w,b
  3916  000FEC  26D9               	addwf	fsr2l,f,c
  3917  000FEE  51D7               	movf	(executeData@data+1)& (0+255),w,b
  3918  000FF0  22DA               	addwfc	fsr2h,f,c
  3919  000FF2  50DF               	movf	indf2,w,c
  3920  000FF4  0101               	movlb	1	; () banked
  3921  000FF6  6FFE               	movwf	(??_executeData+1)& (0+255),b
  3922  000FF8  51FE               	movf	(??_executeData+1)& (0+255),w,b
  3923  000FFA  6E1B               	movwf	moveToPoint@y2^0,c
  3924  000FFC  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3925  000FFE  EC24  F005         	call	_moveToPoint	;wreg free
  3926  001002  0102               	movlb	2	; () banked
  3927  001004  6FD8               	movwf	executeData@errCode& (0+255),b
  3928  001006                     
  3929                           ; BSR set to: 2
  3930                           ;main.c: 153:         if(errCode != 0){
  3931  001006  51D8               	movf	executeData@errCode& (0+255),w,b
  3932  001008  B4D8               	btfsc	status,2,c
  3933  00100A  EF09  F008         	goto	u4091
  3934  00100E  EF0C  F008         	goto	u4090
  3935  001012                     u4091:
  3936  001012  FFFF               	dw	65535	; assembler added errata NOP
  3937  001014  EF0F  F008         	goto	l4805
  3938  001018                     u4090:
  3939  001018  FFFF               	dw	65535	; assembler added errata NOP
  3940  00101A  EFBE  F007         	goto	l4779
  3941  00101E                     l4805:
  3942  00101E  FFFF               	dw	65535	; assembler added errata NOP
  3943                           
  3944                           ; BSR set to: 2
  3945                           ;main.c: 156:         posVector[0] = data->posX;
  3946  001020  EE20 F001          	lfsr	2,1
  3947  001024  51D6               	movf	executeData@data& (0+255),w,b
  3948  001026  26D9               	addwf	fsr2l,f,c
  3949  001028  51D7               	movf	(executeData@data+1)& (0+255),w,b
  3950  00102A  22DA               	addwfc	fsr2h,f,c
  3951  00102C  50DF               	movf	indf2,w,c
  3952  00102E  6E4C               	movwf	_posVector^0,c
  3953                           
  3954                           ;main.c: 157:         posVector[1] = data->posY;
  3955  001030  EE20 F002          	lfsr	2,2
  3956  001034  51D6               	movf	executeData@data& (0+255),w,b
  3957  001036  26D9               	addwf	fsr2l,f,c
  3958  001038  51D7               	movf	(executeData@data+1)& (0+255),w,b
  3959  00103A  22DA               	addwfc	fsr2h,f,c
  3960  00103C  50DF               	movf	indf2,w,c
  3961  00103E  6E4D               	movwf	(_posVector+1)^0,c
  3962  001040                     
  3963                           ; BSR set to: 2
  3964                           ;main.c: 159:         printStatus(6);
  3965  001040  0E06               	movlw	6
  3966  001042  ECDC  F00C         	call	_printStatus
  3967  001046                     
  3968                           ;main.c: 161:         rotAngle = data->rotation;
  3969  001046  0102               	movlb	2	; () banked
  3970  001048  EE20 F003          	lfsr	2,3
  3971  00104C  51D6               	movf	executeData@data& (0+255),w,b
  3972  00104E  26D9               	addwf	fsr2l,f,c
  3973  001050  51D7               	movf	(executeData@data+1)& (0+255),w,b
  3974  001052  22DA               	addwfc	fsr2h,f,c
  3975  001054  50DF               	movf	indf2,w,c
  3976  001056  0101               	movlb	1	; () banked
  3977  001058  6FFD               	movwf	??_executeData& (0+255),b
  3978  00105A  51FD               	movf	??_executeData& (0+255),w,b
  3979  00105C  6E57               	movwf	_rotAngle^0,c
  3980  00105E  6A58               	clrf	(_rotAngle+1)^0,c
  3981  001060                     
  3982                           ; BSR set to: 1
  3983                           ;main.c: 163:         if(rotAngle < 0){
  3984  001060  BE58               	btfsc	(_rotAngle+1)^0,7,c
  3985  001062  EF38  F008         	goto	u4100
  3986  001066  EF35  F008         	goto	u4101
  3987  00106A                     u4101:
  3988  00106A  FFFF               	dw	65535	; assembler added errata NOP
  3989  00106C  EF3D  F008         	goto	l4815
  3990  001070                     u4100:
  3991  001070  FFFF               	dw	65535	; assembler added errata NOP
  3992  001072                     
  3993                           ; BSR set to: 1
  3994                           ;main.c: 164:             rotAngle += 360;
  3995  001072  0E68               	movlw	104
  3996  001074  2657               	addwf	_rotAngle^0,f,c
  3997  001076  0E01               	movlw	1
  3998  001078  2258               	addwfc	(_rotAngle+1)^0,f,c
  3999  00107A                     l4815:
  4000  00107A  FFFF               	dw	65535	; assembler added errata NOP
  4001                           
  4002                           ; BSR set to: 1
  4003                           ;main.c: 166:         rotateObj(rotAngle);
  4004  00107C  5057               	movf	_rotAngle^0,w,c
  4005  00107E  EC02  F011         	call	_rotateObj
  4006  001082                     
  4007                           ;main.c: 168:         printStatus(7);
  4008  001082  0E07               	movlw	7
  4009  001084  ECDC  F00C         	call	_printStatus
  4010  001088                     
  4011                           ;main.c: 170:         errCode = touchTherm();
  4012  001088  ECF0  F00F         	call	_touchTherm	;wreg free
  4013  00108C  0102               	movlb	2	; () banked
  4014  00108E  6FD8               	movwf	executeData@errCode& (0+255),b
  4015  001090                     
  4016                           ; BSR set to: 2
  4017                           ;main.c: 171:         if(errCode != 0){
  4018  001090  51D8               	movf	executeData@errCode& (0+255),w,b
  4019  001092  B4D8               	btfsc	status,2,c
  4020  001094  EF4E  F008         	goto	u4111
  4021  001098  EF51  F008         	goto	u4110
  4022  00109C                     u4111:
  4023  00109C  FFFF               	dw	65535	; assembler added errata NOP
  4024  00109E  EF54  F008         	goto	l4827
  4025  0010A2                     u4110:
  4026  0010A2  FFFF               	dw	65535	; assembler added errata NOP
  4027  0010A4  EFBE  F007         	goto	l4779
  4028  0010A8                     l4827:
  4029  0010A8  FFFF               	dw	65535	; assembler added errata NOP
  4030                           
  4031                           ; BSR set to: 2
  4032                           ;main.c: 175:         printStatus(8);
  4033  0010AA  0E08               	movlw	8
  4034  0010AC  ECDC  F00C         	call	_printStatus
  4035  0010B0                     
  4036                           ;main.c: 177:         releaseObj();
  4037  0010B0  ECE5  F013         	call	_releaseObj	;wreg free
  4038  0010B4                     
  4039                           ;main.c: 179:         printStatus(4);
  4040  0010B4  0E04               	movlw	4
  4041  0010B6  ECDC  F00C         	call	_printStatus
  4042  0010BA                     
  4043                           ;main.c: 181:         errCode = liftArm();
  4044  0010BA  EC65  F012         	call	_liftArm	;wreg free
  4045  0010BE  0102               	movlb	2	; () banked
  4046  0010C0  6FD8               	movwf	executeData@errCode& (0+255),b
  4047  0010C2  EFBE  F007         	goto	l4779
  4048  0010C6                     l348:
  4049  0010C6  FFFF               	dw	65535	; assembler added errata NOP
  4050                           
  4051                           ; BSR set to: 2
  4052  0010C8  0012               	return		;funcret
  4053  0010CA  FFFF               	dw	65535	; errata NOP
  4054  0010CC                     __end_of_executeData:
  4055                           	callstack 0
  4056                           
  4057 ;; *************** function _touchTherm *****************
  4058 ;; Defined at:
  4059 ;;		line 595 in file "motors.c"
  4060 ;; Parameters:    Size  Location     Type
  4061 ;;		None
  4062 ;; Auto vars:     Size  Location     Type
  4063 ;;		None
  4064 ;; Return value:  Size  Location     Type
  4065 ;;                  1    wreg      unsigned char 
  4066 ;; Registers used:
  4067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4068 ;; Tracked objects:
  4069 ;;		On entry : 0/0
  4070 ;;		On exit  : 0/0
  4071 ;;		Unchanged: 0/0
  4072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4073 ;;      Params:         0       0       0       0       0       0       0
  4074 ;;      Locals:         0       0       0       0       0       0       0
  4075 ;;      Temps:          0       0       0       0       0       0       0
  4076 ;;      Totals:         0       0       0       0       0       0       0
  4077 ;;Total ram usage:        0 bytes
  4078 ;; Hardware stack levels used:    1
  4079 ;; Hardware stack levels required when called:    5
  4080 ;; This function calls:
  4081 ;;		_resetStep
  4082 ;;		_resetTM0_Temp
  4083 ;;		_resetTM2_Temp
  4084 ;;		_resetTherm
  4085 ;;		_resetTouch
  4086 ;;		_returnTherm
  4087 ;;		_startADC
  4088 ;;		_stepMade
  4089 ;;		_stopADC
  4090 ;; This function is called by:
  4091 ;;		_executeData
  4092 ;; This function uses a non-reentrant model
  4093 ;;
  4094                           
  4095                           	psect	text18
  4096  001FE0                     __ptext18:
  4097                           	callstack 0
  4098  001FE0                     _touchTherm:
  4099                           	callstack 0
  4100  001FE0  FFFF               	dw	65535	; assembler added errata NOP
  4101  001FE2                     
  4102                           ;motors.c: 601:     motCounter[2][1] = 1;
  4103  001FE2  0E01               	movlw	1
  4104  001FE4  6E6C               	movwf	(_motCounter+5)^0,c
  4105  001FE6                     
  4106                           ;motors.c: 604:     T2CONbits.TMR2ON = 1;
  4107  001FE6  84CA               	bsf	202,2,c	;volatile
  4108                           
  4109                           ;motors.c: 606:     tm0Error = 0;
  4110  001FE8  0E00               	movlw	0
  4111  001FEA  6E5A               	movwf	(_tm0Error+1)^0,c
  4112  001FEC  0E00               	movlw	0
  4113  001FEE  6E59               	movwf	_tm0Error^0,c
  4114                           
  4115                           ;motors.c: 607:     tm0Limit = 200;
  4116  001FF0  0EC8               	movlw	200
  4117  001FF2  6E66               	movwf	_tm0Limit^0,c
  4118  001FF4                     
  4119                           ;motors.c: 608:     T0CONbits.TMR0ON = 1;
  4120  001FF4  8ED5               	bsf	213,7,c	;volatile
  4121  001FF6                     
  4122                           ;motors.c: 611:     startADC();
  4123  001FF6  ECB9  F014         	call	_startADC	;wreg free
  4124                           
  4125                           ;motors.c: 614:     resetTouch();
  4126  001FFA  ECBE  F014         	call	_resetTouch	;wreg free
  4127                           
  4128                           ;motors.c: 615:     resetTherm();
  4129  001FFE  ECC3  F014         	call	_resetTherm	;wreg free
  4130                           
  4131                           ;motors.c: 618:     while(!returnTherm() || PORTDbits.RD7){
  4132  002002  EF41  F010         	goto	l4369
  4133  002006                     l4353:
  4134  002006  FFFF               	dw	65535	; assembler added errata NOP
  4135                           
  4136                           ;motors.c: 620:         resetStep();
  4137  002008  ECCD  F014         	call	_resetStep	;wreg free
  4138  00200C                     
  4139                           ;motors.c: 623:         if(tm0Error){
  4140  00200C  5059               	movf	_tm0Error^0,w,c
  4141  00200E  105A               	iorwf	(_tm0Error+1)^0,w,c
  4142  002010  B4D8               	btfsc	status,2,c
  4143  002012  EF0D  F010         	goto	u3661
  4144  002016  EF10  F010         	goto	u3660
  4145  00201A                     u3661:
  4146  00201A  FFFF               	dw	65535	; assembler added errata NOP
  4147  00201C  EF17  F010         	goto	l4359
  4148  002020                     u3660:
  4149  002020  FFFF               	dw	65535	; assembler added errata NOP
  4150  002022                     
  4151                           ;motors.c: 628:             tm0Error = 6;
  4152  002022  0E00               	movlw	0
  4153  002024  6E5A               	movwf	(_tm0Error+1)^0,c
  4154  002026  0E06               	movlw	6
  4155  002028  6E59               	movwf	_tm0Error^0,c
  4156                           
  4157                           ;motors.c: 629:             break;
  4158  00202A  EF57  F010         	goto	l4373
  4159  00202E                     l4359:
  4160  00202E  FFFF               	dw	65535	; assembler added errata NOP
  4161                           
  4162                           ;motors.c: 637:             motCounter[2][0] += motCounter[2][1];
  4163  002030  506C               	movf	(_motCounter+5)^0,w,c
  4164  002032  266B               	addwf	(_motCounter+4)^0,f,c
  4165                           
  4166                           ;motors.c: 638:             if(motCounter[2][0] > 3){
  4167  002034  506B               	movf	(_motCounter+4)^0,w,c
  4168  002036  0A80               	xorlw	128
  4169  002038  0F7C               	addlw	-132
  4170  00203A  A0D8               	btfss	status,0,c
  4171  00203C  EF22  F010         	goto	u3671
  4172  002040  EF25  F010         	goto	u3670
  4173  002044                     u3671:
  4174  002044  FFFF               	dw	65535	; assembler added errata NOP
  4175  002046  EF28  F010         	goto	l4363
  4176  00204A                     u3670:
  4177  00204A  FFFF               	dw	65535	; assembler added errata NOP
  4178  00204C                     
  4179                           ;motors.c: 639:                 motCounter[2][0] = 0;
  4180  00204C  0E00               	movlw	0
  4181  00204E  6E6B               	movwf	(_motCounter+4)^0,c
  4182  002050                     l4363:
  4183  002050  FFFF               	dw	65535	; assembler added errata NOP
  4184                           
  4185                           ;motors.c: 642:             LATC = stepMot3[motCounter[2][0]];
  4186  002052  0E84               	movlw	low _stepMot3
  4187  002054  246B               	addwf	(_motCounter+4)^0,w,c
  4188  002056  6ED9               	movwf	fsr2l,c
  4189  002058  6ADA               	clrf	fsr2h,c
  4190  00205A  0E00               	movlw	high _stepMot3
  4191  00205C  22DA               	addwfc	fsr2h,f,c
  4192  00205E  50DF               	movf	indf2,w,c
  4193  002060  6E8B               	movwf	139,c	;volatile
  4194  002062                     l4365:
  4195  002062  FFFF               	dw	65535	; assembler added errata NOP
  4196  002064  EC4A  F014         	call	_stepMade	;wreg free
  4197  002068  5012               	movf	?_stepMade^0,w,c
  4198  00206A  1013               	iorwf	(?_stepMade+1)^0,w,c
  4199  00206C  B4D8               	btfsc	status,2,c
  4200  00206E  EF3B  F010         	goto	u3681
  4201  002072  EF3E  F010         	goto	u3680
  4202  002076                     u3681:
  4203  002076  FFFF               	dw	65535	; assembler added errata NOP
  4204  002078  EF31  F010         	goto	l4365
  4205  00207C                     u3680:
  4206  00207C  FFFF               	dw	65535	; assembler added errata NOP
  4207  00207E                     
  4208                           ;motors.c: 657:         startADC();
  4209  00207E  ECB9  F014         	call	_startADC	;wreg free
  4210  002082                     l4369:
  4211  002082  FFFF               	dw	65535	; assembler added errata NOP
  4212                           
  4213                           ;motors.c: 618:     while(!returnTherm() || PORTDbits.RD7){
  4214  002084  ECA2  F014         	call	_returnTherm	;wreg free
  4215  002088  5012               	movf	?_returnTherm^0,w,c
  4216  00208A  1013               	iorwf	(?_returnTherm+1)^0,w,c
  4217  00208C  B4D8               	btfsc	status,2,c
  4218  00208E  EF4B  F010         	goto	u3691
  4219  002092  EF4E  F010         	goto	u3690
  4220  002096                     u3691:
  4221  002096  FFFF               	dw	65535	; assembler added errata NOP
  4222  002098  EF03  F010         	goto	l4353
  4223  00209C                     u3690:
  4224  00209C  FFFF               	dw	65535	; assembler added errata NOP
  4225  00209E  BE83               	btfsc	131,7,c	;volatile
  4226  0020A0  EF54  F010         	goto	u3701
  4227  0020A4  EF57  F010         	goto	u3700
  4228  0020A8                     u3701:
  4229  0020A8  FFFF               	dw	65535	; assembler added errata NOP
  4230  0020AA  EF03  F010         	goto	l4353
  4231  0020AE                     u3700:
  4232  0020AE                     l4373:
  4233  0020AE  FFFF               	dw	65535	; assembler added errata NOP
  4234                           
  4235                           ;motors.c: 663:     stopADC();
  4236  0020B0  ECED  F014         	call	_stopADC	;wreg free
  4237  0020B4                     
  4238                           ;motors.c: 666:     T0CONbits.TMR0ON = 0;
  4239  0020B4  9ED5               	bcf	213,7,c	;volatile
  4240  0020B6                     
  4241                           ;motors.c: 667:     T2CONbits.TMR2ON = 0;
  4242  0020B6  94CA               	bcf	202,2,c	;volatile
  4243  0020B8                     
  4244                           ;motors.c: 669:     resetTM0_Temp();
  4245  0020B8  ECC8  F014         	call	_resetTM0_Temp	;wreg free
  4246  0020BC                     
  4247                           ;motors.c: 670:     resetTM2_Temp();
  4248  0020BC  EC66  F014         	call	_resetTM2_Temp	;wreg free
  4249  0020C0                     
  4250                           ;motors.c: 672:     TMR0 = 0;
  4251  0020C0  0E00               	movlw	0
  4252  0020C2  6ED7               	movwf	215,c	;volatile
  4253  0020C4  0E00               	movlw	0
  4254  0020C6  6ED6               	movwf	214,c	;volatile
  4255  0020C8                     
  4256                           ;motors.c: 673:     TMR2 = 0;
  4257  0020C8  0E00               	movlw	0
  4258  0020CA  6ECC               	movwf	204,c	;volatile
  4259  0020CC                     
  4260                           ;motors.c: 676:     resetStep();
  4261  0020CC  ECCD  F014         	call	_resetStep	;wreg free
  4262  0020D0                     
  4263                           ;motors.c: 679:     if(PORTDbits.RD7){
  4264  0020D0  AE83               	btfss	131,7,c	;volatile
  4265  0020D2  EF6D  F010         	goto	u3711
  4266  0020D6  EF70  F010         	goto	u3710
  4267  0020DA                     u3711:
  4268  0020DA  FFFF               	dw	65535	; assembler added errata NOP
  4269  0020DC  EF75  F010         	goto	l210
  4270  0020E0                     u3710:
  4271  0020E0  FFFF               	dw	65535	; assembler added errata NOP
  4272  0020E2                     
  4273                           ;motors.c: 680:         tm0Error = 2;
  4274  0020E2  0E00               	movlw	0
  4275  0020E4  6E5A               	movwf	(_tm0Error+1)^0,c
  4276  0020E6  0E02               	movlw	2
  4277  0020E8  6E59               	movwf	_tm0Error^0,c
  4278  0020EA                     l210:
  4279  0020EA  FFFF               	dw	65535	; assembler added errata NOP
  4280                           
  4281                           ;motors.c: 683:     return(tm0Error);
  4282  0020EC  5059               	movf	_tm0Error^0,w,c
  4283  0020EE  0012               	return		;funcret
  4284  0020F0  FFFF               	dw	65535	; errata NOP
  4285  0020F2                     __end_of_touchTherm:
  4286                           	callstack 0
  4287                           
  4288 ;; *************** function _returnTherm *****************
  4289 ;; Defined at:
  4290 ;;		line 58 in file "adc.c"
  4291 ;; Parameters:    Size  Location     Type
  4292 ;;		None
  4293 ;; Auto vars:     Size  Location     Type
  4294 ;;		None
  4295 ;; Return value:  Size  Location     Type
  4296 ;;                  2   17[COMRAM] unsigned int 
  4297 ;; Registers used:
  4298 ;;		None
  4299 ;; Tracked objects:
  4300 ;;		On entry : 0/0
  4301 ;;		On exit  : 0/0
  4302 ;;		Unchanged: 0/0
  4303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4304 ;;      Params:         2       0       0       0       0       0       0
  4305 ;;      Locals:         0       0       0       0       0       0       0
  4306 ;;      Temps:          0       0       0       0       0       0       0
  4307 ;;      Totals:         2       0       0       0       0       0       0
  4308 ;;Total ram usage:        2 bytes
  4309 ;; Hardware stack levels used:    1
  4310 ;; Hardware stack levels required when called:    4
  4311 ;; This function calls:
  4312 ;;		Nothing
  4313 ;; This function is called by:
  4314 ;;		_touchTherm
  4315 ;; This function uses a non-reentrant model
  4316 ;;
  4317                           
  4318                           	psect	text19
  4319  002944                     __ptext19:
  4320                           	callstack 0
  4321  002944                     _returnTherm:
  4322                           	callstack 0
  4323  002944  FFFF               	dw	65535	; assembler added errata NOP
  4324  002946                     
  4325                           ;adc.c: 59:     return therm_rel;
  4326  002946  C064  F012         	movff	_therm_rel,?_returnTherm	;volatile
  4327  00294A  6A13               	clrf	(?_returnTherm+1)^0,c
  4328  00294C  0012               	return		;funcret
  4329  00294E  FFFF               	dw	65535	; errata NOP
  4330  002950                     __end_of_returnTherm:
  4331                           	callstack 0
  4332                           
  4333 ;; *************** function _touchObject *****************
  4334 ;; Defined at:
  4335 ;;		line 497 in file "motors.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;		None
  4338 ;; Auto vars:     Size  Location     Type
  4339 ;;		None
  4340 ;; Return value:  Size  Location     Type
  4341 ;;                  1    wreg      unsigned char 
  4342 ;; Registers used:
  4343 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4349 ;;      Params:         0       0       0       0       0       0       0
  4350 ;;      Locals:         0       0       0       0       0       0       0
  4351 ;;      Temps:          0       0       0       0       0       0       0
  4352 ;;      Totals:         0       0       0       0       0       0       0
  4353 ;;Total ram usage:        0 bytes
  4354 ;; Hardware stack levels used:    1
  4355 ;; Hardware stack levels required when called:    5
  4356 ;; This function calls:
  4357 ;;		_resetStep
  4358 ;;		_resetTM0_Temp
  4359 ;;		_resetTM2_Temp
  4360 ;;		_resetTherm
  4361 ;;		_resetTouch
  4362 ;;		_returnTouch
  4363 ;;		_startADC
  4364 ;;		_stepMade
  4365 ;;		_stopADC
  4366 ;; This function is called by:
  4367 ;;		_executeData
  4368 ;; This function uses a non-reentrant model
  4369 ;;
  4370                           
  4371                           	psect	text20
  4372  0020F2                     __ptext20:
  4373                           	callstack 0
  4374  0020F2                     _touchObject:
  4375                           	callstack 0
  4376  0020F2  FFFF               	dw	65535	; assembler added errata NOP
  4377  0020F4                     
  4378                           ;motors.c: 503:     motCounter[2][1] = 1;
  4379  0020F4  0E01               	movlw	1
  4380  0020F6  6E6C               	movwf	(_motCounter+5)^0,c
  4381  0020F8                     
  4382                           ;motors.c: 506:     T2CONbits.TMR2ON = 1;
  4383  0020F8  84CA               	bsf	202,2,c	;volatile
  4384                           
  4385                           ;motors.c: 508:     tm0Error = 0;
  4386  0020FA  0E00               	movlw	0
  4387  0020FC  6E5A               	movwf	(_tm0Error+1)^0,c
  4388  0020FE  0E00               	movlw	0
  4389  002100  6E59               	movwf	_tm0Error^0,c
  4390                           
  4391                           ;motors.c: 509:     tm0Limit = 200;
  4392  002102  0EC8               	movlw	200
  4393  002104  6E66               	movwf	_tm0Limit^0,c
  4394  002106                     
  4395                           ;motors.c: 510:     T0CONbits.TMR0ON = 1;
  4396  002106  8ED5               	bsf	213,7,c	;volatile
  4397  002108                     
  4398                           ;motors.c: 513:     startADC();
  4399  002108  ECB9  F014         	call	_startADC	;wreg free
  4400                           
  4401                           ;motors.c: 516:     resetTouch();
  4402  00210C  ECBE  F014         	call	_resetTouch	;wreg free
  4403                           
  4404                           ;motors.c: 517:     resetTherm();
  4405  002110  ECC3  F014         	call	_resetTherm	;wreg free
  4406                           
  4407                           ;motors.c: 520:     while(!returnTouch() || PORTDbits.RD7){
  4408  002114  EFCA  F010         	goto	l4319
  4409  002118                     l4303:
  4410  002118  FFFF               	dw	65535	; assembler added errata NOP
  4411                           
  4412                           ;motors.c: 522:         resetStep();
  4413  00211A  ECCD  F014         	call	_resetStep	;wreg free
  4414  00211E                     
  4415                           ;motors.c: 525:         if(tm0Error){
  4416  00211E  5059               	movf	_tm0Error^0,w,c
  4417  002120  105A               	iorwf	(_tm0Error+1)^0,w,c
  4418  002122  B4D8               	btfsc	status,2,c
  4419  002124  EF96  F010         	goto	u3601
  4420  002128  EF99  F010         	goto	u3600
  4421  00212C                     u3601:
  4422  00212C  FFFF               	dw	65535	; assembler added errata NOP
  4423  00212E  EFA0  F010         	goto	l4309
  4424  002132                     u3600:
  4425  002132  FFFF               	dw	65535	; assembler added errata NOP
  4426  002134                     
  4427                           ;motors.c: 530:             tm0Error = 6;
  4428  002134  0E00               	movlw	0
  4429  002136  6E5A               	movwf	(_tm0Error+1)^0,c
  4430  002138  0E06               	movlw	6
  4431  00213A  6E59               	movwf	_tm0Error^0,c
  4432                           
  4433                           ;motors.c: 531:             break;
  4434  00213C  EFE0  F010         	goto	l4323
  4435  002140                     l4309:
  4436  002140  FFFF               	dw	65535	; assembler added errata NOP
  4437                           
  4438                           ;motors.c: 539:             motCounter[2][0] += motCounter[2][1];
  4439  002142  506C               	movf	(_motCounter+5)^0,w,c
  4440  002144  266B               	addwf	(_motCounter+4)^0,f,c
  4441                           
  4442                           ;motors.c: 540:             if(motCounter[2][0] > 3){
  4443  002146  506B               	movf	(_motCounter+4)^0,w,c
  4444  002148  0A80               	xorlw	128
  4445  00214A  0F7C               	addlw	-132
  4446  00214C  A0D8               	btfss	status,0,c
  4447  00214E  EFAB  F010         	goto	u3611
  4448  002152  EFAE  F010         	goto	u3610
  4449  002156                     u3611:
  4450  002156  FFFF               	dw	65535	; assembler added errata NOP
  4451  002158  EFB1  F010         	goto	l4313
  4452  00215C                     u3610:
  4453  00215C  FFFF               	dw	65535	; assembler added errata NOP
  4454  00215E                     
  4455                           ;motors.c: 541:                 motCounter[2][0] = 0;
  4456  00215E  0E00               	movlw	0
  4457  002160  6E6B               	movwf	(_motCounter+4)^0,c
  4458  002162                     l4313:
  4459  002162  FFFF               	dw	65535	; assembler added errata NOP
  4460                           
  4461                           ;motors.c: 544:             LATC = stepMot3[motCounter[2][0]];
  4462  002164  0E84               	movlw	low _stepMot3
  4463  002166  246B               	addwf	(_motCounter+4)^0,w,c
  4464  002168  6ED9               	movwf	fsr2l,c
  4465  00216A  6ADA               	clrf	fsr2h,c
  4466  00216C  0E00               	movlw	high _stepMot3
  4467  00216E  22DA               	addwfc	fsr2h,f,c
  4468  002170  50DF               	movf	indf2,w,c
  4469  002172  6E8B               	movwf	139,c	;volatile
  4470  002174                     l4315:
  4471  002174  FFFF               	dw	65535	; assembler added errata NOP
  4472  002176  EC4A  F014         	call	_stepMade	;wreg free
  4473  00217A  5012               	movf	?_stepMade^0,w,c
  4474  00217C  1013               	iorwf	(?_stepMade+1)^0,w,c
  4475  00217E  B4D8               	btfsc	status,2,c
  4476  002180  EFC4  F010         	goto	u3621
  4477  002184  EFC7  F010         	goto	u3620
  4478  002188                     u3621:
  4479  002188  FFFF               	dw	65535	; assembler added errata NOP
  4480  00218A  EFBA  F010         	goto	l4315
  4481  00218E                     u3620:
  4482  00218E  FFFF               	dw	65535	; assembler added errata NOP
  4483  002190                     
  4484                           ;motors.c: 558:         startADC();
  4485  002190  ECB9  F014         	call	_startADC	;wreg free
  4486  002194                     l4319:
  4487  002194  FFFF               	dw	65535	; assembler added errata NOP
  4488                           
  4489                           ;motors.c: 520:     while(!returnTouch() || PORTDbits.RD7){
  4490  002196  ECA8  F014         	call	_returnTouch	;wreg free
  4491  00219A  5012               	movf	?_returnTouch^0,w,c
  4492  00219C  1013               	iorwf	(?_returnTouch+1)^0,w,c
  4493  00219E  B4D8               	btfsc	status,2,c
  4494  0021A0  EFD4  F010         	goto	u3631
  4495  0021A4  EFD7  F010         	goto	u3630
  4496  0021A8                     u3631:
  4497  0021A8  FFFF               	dw	65535	; assembler added errata NOP
  4498  0021AA  EF8C  F010         	goto	l4303
  4499  0021AE                     u3630:
  4500  0021AE  FFFF               	dw	65535	; assembler added errata NOP
  4501  0021B0  BE83               	btfsc	131,7,c	;volatile
  4502  0021B2  EFDD  F010         	goto	u3641
  4503  0021B6  EFE0  F010         	goto	u3640
  4504  0021BA                     u3641:
  4505  0021BA  FFFF               	dw	65535	; assembler added errata NOP
  4506  0021BC  EF8C  F010         	goto	l4303
  4507  0021C0                     u3640:
  4508  0021C0                     l4323:
  4509  0021C0  FFFF               	dw	65535	; assembler added errata NOP
  4510                           
  4511                           ;motors.c: 563:     stopADC();
  4512  0021C2  ECED  F014         	call	_stopADC	;wreg free
  4513  0021C6                     
  4514                           ;motors.c: 566:     T0CONbits.TMR0ON = 0;
  4515  0021C6  9ED5               	bcf	213,7,c	;volatile
  4516  0021C8                     
  4517                           ;motors.c: 567:     T2CONbits.TMR2ON = 0;
  4518  0021C8  94CA               	bcf	202,2,c	;volatile
  4519  0021CA                     
  4520                           ;motors.c: 569:     resetTM0_Temp();
  4521  0021CA  ECC8  F014         	call	_resetTM0_Temp	;wreg free
  4522  0021CE                     
  4523                           ;motors.c: 570:     resetTM2_Temp();
  4524  0021CE  EC66  F014         	call	_resetTM2_Temp	;wreg free
  4525  0021D2                     
  4526                           ;motors.c: 572:     TMR0 = 0;
  4527  0021D2  0E00               	movlw	0
  4528  0021D4  6ED7               	movwf	215,c	;volatile
  4529  0021D6  0E00               	movlw	0
  4530  0021D8  6ED6               	movwf	214,c	;volatile
  4531  0021DA                     
  4532                           ;motors.c: 573:     TMR2 = 0;
  4533  0021DA  0E00               	movlw	0
  4534  0021DC  6ECC               	movwf	204,c	;volatile
  4535  0021DE                     
  4536                           ;motors.c: 576:     resetStep();
  4537  0021DE  ECCD  F014         	call	_resetStep	;wreg free
  4538  0021E2                     
  4539                           ;motors.c: 579:     if(PORTDbits.RD7){
  4540  0021E2  AE83               	btfss	131,7,c	;volatile
  4541  0021E4  EFF6  F010         	goto	u3651
  4542  0021E8  EFF9  F010         	goto	u3650
  4543  0021EC                     u3651:
  4544  0021EC  FFFF               	dw	65535	; assembler added errata NOP
  4545  0021EE  EFFE  F010         	goto	l198
  4546  0021F2                     u3650:
  4547  0021F2  FFFF               	dw	65535	; assembler added errata NOP
  4548  0021F4                     
  4549                           ;motors.c: 580:         tm0Error = 2;
  4550  0021F4  0E00               	movlw	0
  4551  0021F6  6E5A               	movwf	(_tm0Error+1)^0,c
  4552  0021F8  0E02               	movlw	2
  4553  0021FA  6E59               	movwf	_tm0Error^0,c
  4554  0021FC                     l198:
  4555  0021FC  FFFF               	dw	65535	; assembler added errata NOP
  4556                           
  4557                           ;motors.c: 583:     return(tm0Error);
  4558  0021FE  5059               	movf	_tm0Error^0,w,c
  4559  002200  0012               	return		;funcret
  4560  002202  FFFF               	dw	65535	; errata NOP
  4561  002204                     __end_of_touchObject:
  4562                           	callstack 0
  4563                           
  4564 ;; *************** function _stopADC *****************
  4565 ;; Defined at:
  4566 ;;		line 44 in file "adc.c"
  4567 ;; Parameters:    Size  Location     Type
  4568 ;;		None
  4569 ;; Auto vars:     Size  Location     Type
  4570 ;;		None
  4571 ;; Return value:  Size  Location     Type
  4572 ;;                  1    wreg      void 
  4573 ;; Registers used:
  4574 ;;		None
  4575 ;; Tracked objects:
  4576 ;;		On entry : 0/0
  4577 ;;		On exit  : 0/0
  4578 ;;		Unchanged: 0/0
  4579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4580 ;;      Params:         0       0       0       0       0       0       0
  4581 ;;      Locals:         0       0       0       0       0       0       0
  4582 ;;      Temps:          0       0       0       0       0       0       0
  4583 ;;      Totals:         0       0       0       0       0       0       0
  4584 ;;Total ram usage:        0 bytes
  4585 ;; Hardware stack levels used:    1
  4586 ;; Hardware stack levels required when called:    4
  4587 ;; This function calls:
  4588 ;;		Nothing
  4589 ;; This function is called by:
  4590 ;;		_touchObject
  4591 ;;		_touchTherm
  4592 ;; This function uses a non-reentrant model
  4593 ;;
  4594                           
  4595                           	psect	text21
  4596  0029DA                     __ptext21:
  4597                           	callstack 0
  4598  0029DA                     _stopADC:
  4599                           	callstack 0
  4600  0029DA  FFFF               	dw	65535	; assembler added errata NOP
  4601  0029DC                     
  4602                           ;adc.c: 45:     ADCON0bits.ADON = 0;
  4603  0029DC  90C2               	bcf	194,0,c	;volatile
  4604  0029DE  0012               	return		;funcret
  4605  0029E0  FFFF               	dw	65535	; errata NOP
  4606  0029E2                     __end_of_stopADC:
  4607                           	callstack 0
  4608                           
  4609 ;; *************** function _startADC *****************
  4610 ;; Defined at:
  4611 ;;		line 36 in file "adc.c"
  4612 ;; Parameters:    Size  Location     Type
  4613 ;;		None
  4614 ;; Auto vars:     Size  Location     Type
  4615 ;;		None
  4616 ;; Return value:  Size  Location     Type
  4617 ;;                  1    wreg      void 
  4618 ;; Registers used:
  4619 ;;		None
  4620 ;; Tracked objects:
  4621 ;;		On entry : 0/0
  4622 ;;		On exit  : 0/0
  4623 ;;		Unchanged: 0/0
  4624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4625 ;;      Params:         0       0       0       0       0       0       0
  4626 ;;      Locals:         0       0       0       0       0       0       0
  4627 ;;      Temps:          0       0       0       0       0       0       0
  4628 ;;      Totals:         0       0       0       0       0       0       0
  4629 ;;Total ram usage:        0 bytes
  4630 ;; Hardware stack levels used:    1
  4631 ;; Hardware stack levels required when called:    4
  4632 ;; This function calls:
  4633 ;;		Nothing
  4634 ;; This function is called by:
  4635 ;;		_touchObject
  4636 ;;		_touchTherm
  4637 ;; This function uses a non-reentrant model
  4638 ;;
  4639                           
  4640                           	psect	text22
  4641  002972                     __ptext22:
  4642                           	callstack 0
  4643  002972                     _startADC:
  4644                           	callstack 0
  4645  002972  FFFF               	dw	65535	; assembler added errata NOP
  4646  002974                     
  4647                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  4648  002974  80C2               	bsf	194,0,c	;volatile
  4649                           
  4650                           ;adc.c: 38:     ADCON0bits.GODONE = 1;
  4651  002976  84C2               	bsf	194,2,c	;volatile
  4652  002978  0012               	return		;funcret
  4653  00297A  FFFF               	dw	65535	; errata NOP
  4654  00297C                     __end_of_startADC:
  4655                           	callstack 0
  4656                           
  4657 ;; *************** function _returnTouch *****************
  4658 ;; Defined at:
  4659 ;;		line 51 in file "adc.c"
  4660 ;; Parameters:    Size  Location     Type
  4661 ;;		None
  4662 ;; Auto vars:     Size  Location     Type
  4663 ;;		None
  4664 ;; Return value:  Size  Location     Type
  4665 ;;                  2   17[COMRAM] unsigned int 
  4666 ;; Registers used:
  4667 ;;		None
  4668 ;; Tracked objects:
  4669 ;;		On entry : 0/0
  4670 ;;		On exit  : 0/0
  4671 ;;		Unchanged: 0/0
  4672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4673 ;;      Params:         2       0       0       0       0       0       0
  4674 ;;      Locals:         0       0       0       0       0       0       0
  4675 ;;      Temps:          0       0       0       0       0       0       0
  4676 ;;      Totals:         2       0       0       0       0       0       0
  4677 ;;Total ram usage:        2 bytes
  4678 ;; Hardware stack levels used:    1
  4679 ;; Hardware stack levels required when called:    4
  4680 ;; This function calls:
  4681 ;;		Nothing
  4682 ;; This function is called by:
  4683 ;;		_touchObject
  4684 ;; This function uses a non-reentrant model
  4685 ;;
  4686                           
  4687                           	psect	text23
  4688  002950                     __ptext23:
  4689                           	callstack 0
  4690  002950                     _returnTouch:
  4691                           	callstack 0
  4692  002950  FFFF               	dw	65535	; assembler added errata NOP
  4693  002952                     
  4694                           ;adc.c: 52:     return touch_rel;
  4695  002952  C065  F012         	movff	_touch_rel,?_returnTouch	;volatile
  4696  002956  6A13               	clrf	(?_returnTouch+1)^0,c
  4697  002958  0012               	return		;funcret
  4698  00295A  FFFF               	dw	65535	; errata NOP
  4699  00295C                     __end_of_returnTouch:
  4700                           	callstack 0
  4701                           
  4702 ;; *************** function _resetTouch *****************
  4703 ;; Defined at:
  4704 ;;		line 65 in file "adc.c"
  4705 ;; Parameters:    Size  Location     Type
  4706 ;;		None
  4707 ;; Auto vars:     Size  Location     Type
  4708 ;;		None
  4709 ;; Return value:  Size  Location     Type
  4710 ;;                  1    wreg      void 
  4711 ;; Registers used:
  4712 ;;		wreg, status,2
  4713 ;; Tracked objects:
  4714 ;;		On entry : 0/0
  4715 ;;		On exit  : 0/0
  4716 ;;		Unchanged: 0/0
  4717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4718 ;;      Params:         0       0       0       0       0       0       0
  4719 ;;      Locals:         0       0       0       0       0       0       0
  4720 ;;      Temps:          0       0       0       0       0       0       0
  4721 ;;      Totals:         0       0       0       0       0       0       0
  4722 ;;Total ram usage:        0 bytes
  4723 ;; Hardware stack levels used:    1
  4724 ;; Hardware stack levels required when called:    4
  4725 ;; This function calls:
  4726 ;;		Nothing
  4727 ;; This function is called by:
  4728 ;;		_touchObject
  4729 ;;		_touchTherm
  4730 ;; This function uses a non-reentrant model
  4731 ;;
  4732                           
  4733                           	psect	text24
  4734  00297C                     __ptext24:
  4735                           	callstack 0
  4736  00297C                     _resetTouch:
  4737                           	callstack 0
  4738  00297C  FFFF               	dw	65535	; assembler added errata NOP
  4739  00297E                     
  4740                           ;adc.c: 66:     touch_rel = 0;
  4741  00297E  0E00               	movlw	0
  4742  002980  6E65               	movwf	_touch_rel^0,c	;volatile
  4743  002982  0012               	return		;funcret
  4744  002984  FFFF               	dw	65535	; errata NOP
  4745  002986                     __end_of_resetTouch:
  4746                           	callstack 0
  4747                           
  4748 ;; *************** function _resetTherm *****************
  4749 ;; Defined at:
  4750 ;;		line 72 in file "adc.c"
  4751 ;; Parameters:    Size  Location     Type
  4752 ;;		None
  4753 ;; Auto vars:     Size  Location     Type
  4754 ;;		None
  4755 ;; Return value:  Size  Location     Type
  4756 ;;                  1    wreg      void 
  4757 ;; Registers used:
  4758 ;;		wreg, status,2
  4759 ;; Tracked objects:
  4760 ;;		On entry : 0/0
  4761 ;;		On exit  : 0/0
  4762 ;;		Unchanged: 0/0
  4763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4764 ;;      Params:         0       0       0       0       0       0       0
  4765 ;;      Locals:         0       0       0       0       0       0       0
  4766 ;;      Temps:          0       0       0       0       0       0       0
  4767 ;;      Totals:         0       0       0       0       0       0       0
  4768 ;;Total ram usage:        0 bytes
  4769 ;; Hardware stack levels used:    1
  4770 ;; Hardware stack levels required when called:    4
  4771 ;; This function calls:
  4772 ;;		Nothing
  4773 ;; This function is called by:
  4774 ;;		_touchObject
  4775 ;;		_touchTherm
  4776 ;; This function uses a non-reentrant model
  4777 ;;
  4778                           
  4779                           	psect	text25
  4780  002986                     __ptext25:
  4781                           	callstack 0
  4782  002986                     _resetTherm:
  4783                           	callstack 0
  4784  002986  FFFF               	dw	65535	; assembler added errata NOP
  4785  002988                     
  4786                           ;adc.c: 73:     therm_rel = 0;
  4787  002988  0E00               	movlw	0
  4788  00298A  6E64               	movwf	_therm_rel^0,c	;volatile
  4789  00298C  0012               	return		;funcret
  4790  00298E  FFFF               	dw	65535	; errata NOP
  4791  002990                     __end_of_resetTherm:
  4792                           	callstack 0
  4793                           
  4794 ;; *************** function _rotateObj *****************
  4795 ;; Defined at:
  4796 ;;		line 768 in file "motors.c"
  4797 ;; Parameters:    Size  Location     Type
  4798 ;;  rotAngle        1    wreg     unsigned char 
  4799 ;; Auto vars:     Size  Location     Type
  4800 ;;  rotAngle        1    0[BANK1 ] unsigned char 
  4801 ;;  c               2    5[BANK1 ] unsigned int 
  4802 ;;  i               2    3[BANK1 ] unsigned int 
  4803 ;;  totStep         2    1[BANK1 ] int 
  4804 ;; Return value:  Size  Location     Type
  4805 ;;                  1    wreg      void 
  4806 ;; Registers used:
  4807 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4808 ;; Tracked objects:
  4809 ;;		On entry : 0/0
  4810 ;;		On exit  : 0/0
  4811 ;;		Unchanged: 0/0
  4812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4813 ;;      Params:         0       0       0       0       0       0       0
  4814 ;;      Locals:         0       0       7       0       0       0       0
  4815 ;;      Temps:          0       0       0       0       0       0       0
  4816 ;;      Totals:         0       0       7       0       0       0       0
  4817 ;;Total ram usage:        7 bytes
  4818 ;; Hardware stack levels used:    1
  4819 ;; Hardware stack levels required when called:    5
  4820 ;; This function calls:
  4821 ;;		___fldiv
  4822 ;;		___fltol
  4823 ;;		___xxtofl
  4824 ;;		_resetStep
  4825 ;;		_resetTM2_Temp
  4826 ;;		_stepMade
  4827 ;; This function is called by:
  4828 ;;		_executeData
  4829 ;; This function uses a non-reentrant model
  4830 ;;
  4831                           
  4832                           	psect	text26
  4833  002204                     __ptext26:
  4834                           	callstack 0
  4835  002204                     _rotateObj:
  4836                           	callstack 0
  4837  002204  FFFF               	dw	65535	; assembler added errata NOP
  4838                           
  4839                           ;incstack = 0
  4840                           ;rotateObj@rotAngle stored from wreg
  4841  002206  0101               	movlb	1	; () banked
  4842  002208  6FF6               	movwf	rotateObj@rotAngle& (0+255),b
  4843  00220A                     
  4844                           ;motors.c: 770:     static const float stepAngle = 2;;motors.c: 771:     static char rot
      +                          Sequence[] = {0b100100, 0b001100, 0b011000, 0b110000};;motors.c: 772:     unsigned int i
      +                          , c = 0;
  4845  00220A  0E00               	movlw	0
  4846  00220C  0101               	movlb	1	; () banked
  4847  00220E  6FFC               	movwf	(rotateObj@c+1)& (0+255),b
  4848  002210  0E00               	movlw	0
  4849  002212  6FFB               	movwf	rotateObj@c& (0+255),b
  4850  002214                     
  4851                           ; BSR set to: 1
  4852                           ;motors.c: 773:     int totStep = rotAngle/stepAngle;
  4853  002214  0E00               	movlw	0
  4854  002216  6E24               	movwf	___fldiv@a^0,c
  4855  002218  0E00               	movlw	0
  4856  00221A  6E25               	movwf	(___fldiv@a+1)^0,c
  4857  00221C  0E00               	movlw	0
  4858  00221E  6E26               	movwf	(___fldiv@a+2)^0,c
  4859  002220  0E40               	movlw	64
  4860  002222  6E27               	movwf	(___fldiv@a+3)^0,c
  4861  002224  51F6               	movf	rotateObj@rotAngle& (0+255),w,b
  4862  002226  6E12               	movwf	___xxtofl@val^0,c
  4863  002228  6A13               	clrf	(___xxtofl@val+1)^0,c
  4864  00222A  6A14               	clrf	(___xxtofl@val+2)^0,c
  4865  00222C  6A15               	clrf	(___xxtofl@val+3)^0,c
  4866  00222E  0E01               	movlw	1
  4867  002230  ECEE  F00A         	call	___xxtofl
  4868  002234  C012  F020         	movff	?___xxtofl,___fldiv@b
  4869  002238  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4870  00223C  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4871  002240  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4872  002244  EC0B  F003         	call	___fldiv	;wreg free
  4873  002248  C020  F039         	movff	?___fldiv,___fltol@f1
  4874  00224C  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4875  002250  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4876  002254  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4877  002258  EC39  F00E         	call	___fltol	;wreg free
  4878  00225C  C039  F1F7         	movff	?___fltol,rotateObj@totStep
  4879  002260  C03A  F1F8         	movff	?___fltol+1,rotateObj@totStep+1
  4880  002264                     
  4881                           ;motors.c: 776:     for(i = 0; i < totStep; i++){
  4882  002264  0E00               	movlw	0
  4883  002266  0101               	movlb	1	; () banked
  4884  002268  6FFA               	movwf	(rotateObj@i+1)& (0+255),b
  4885  00226A  0E00               	movlw	0
  4886  00226C  6FF9               	movwf	rotateObj@i& (0+255),b
  4887  00226E  EF6B  F011         	goto	l4447
  4888  002272                     l4431:
  4889  002272  FFFF               	dw	65535	; assembler added errata NOP
  4890                           
  4891                           ; BSR set to: 1
  4892                           ;motors.c: 780:         LATD = rotSequence[c];
  4893  002274  0E80               	movlw	low rotateObj@rotSequence
  4894  002276  25FB               	addwf	rotateObj@c& (0+255),w,b
  4895  002278  6ED9               	movwf	fsr2l,c
  4896  00227A  0E00               	movlw	high rotateObj@rotSequence
  4897  00227C  21FC               	addwfc	(rotateObj@c+1)& (0+255),w,b
  4898  00227E  6EDA               	movwf	fsr2h,c
  4899  002280  50DF               	movf	indf2,w,c
  4900  002282  6E8C               	movwf	140,c	;volatile
  4901  002284                     
  4902                           ; BSR set to: 1
  4903                           ;motors.c: 782:         c++;
  4904  002284  4BFB               	infsnz	rotateObj@c& (0+255),f,b
  4905  002286  2BFC               	incf	(rotateObj@c+1)& (0+255),f,b
  4906  002288                     
  4907                           ; BSR set to: 1
  4908                           ;motors.c: 783:         if (c >= 4) {c = 0;}
  4909  002288  51FC               	movf	(rotateObj@c+1)& (0+255),w,b
  4910  00228A  E10A               	bnz	u3760
  4911  00228C  0E04               	movlw	4
  4912  00228E  5DFB               	subwf	rotateObj@c& (0+255),w,b
  4913  002290  A0D8               	btfss	status,0,c
  4914  002292  EF4D  F011         	goto	u3761
  4915  002296  EF50  F011         	goto	u3760
  4916  00229A                     u3761:
  4917  00229A  FFFF               	dw	65535	; assembler added errata NOP
  4918  00229C  EF55  F011         	goto	l4439
  4919  0022A0                     u3760:
  4920  0022A0  FFFF               	dw	65535	; assembler added errata NOP
  4921  0022A2                     
  4922                           ; BSR set to: 1
  4923  0022A2  0E00               	movlw	0
  4924  0022A4  6FFC               	movwf	(rotateObj@c+1)& (0+255),b
  4925  0022A6  0E00               	movlw	0
  4926  0022A8  6FFB               	movwf	rotateObj@c& (0+255),b
  4927  0022AA                     l4439:
  4928  0022AA  FFFF               	dw	65535	; assembler added errata NOP
  4929                           
  4930                           ; BSR set to: 1
  4931                           ;motors.c: 786:         T2CONbits.TMR2ON = 1;
  4932  0022AC  84CA               	bsf	202,2,c	;volatile
  4933  0022AE                     l4441:
  4934  0022AE  FFFF               	dw	65535	; assembler added errata NOP
  4935  0022B0  EC4A  F014         	call	_stepMade	;wreg free
  4936  0022B4  5012               	movf	?_stepMade^0,w,c
  4937  0022B6  1013               	iorwf	(?_stepMade+1)^0,w,c
  4938  0022B8  B4D8               	btfsc	status,2,c
  4939  0022BA  EF61  F011         	goto	u3771
  4940  0022BE  EF64  F011         	goto	u3770
  4941  0022C2                     u3771:
  4942  0022C2  FFFF               	dw	65535	; assembler added errata NOP
  4943  0022C4  EF57  F011         	goto	l4441
  4944  0022C8                     u3770:
  4945  0022C8  FFFF               	dw	65535	; assembler added errata NOP
  4946  0022CA                     
  4947                           ;motors.c: 788:         T2CONbits.TMR2ON = 0;
  4948  0022CA  94CA               	bcf	202,2,c	;volatile
  4949  0022CC                     
  4950                           ;motors.c: 789:         TMR2 = 0;
  4951  0022CC  0E00               	movlw	0
  4952  0022CE  6ECC               	movwf	204,c	;volatile
  4953  0022D0                     
  4954                           ;motors.c: 790:     }
  4955  0022D0  0101               	movlb	1	; () banked
  4956  0022D2  4BF9               	infsnz	rotateObj@i& (0+255),f,b
  4957  0022D4  2BFA               	incf	(rotateObj@i+1)& (0+255),f,b
  4958  0022D6                     l4447:
  4959  0022D6  FFFF               	dw	65535	; assembler added errata NOP
  4960                           
  4961                           ; BSR set to: 1
  4962  0022D8  51F7               	movf	rotateObj@totStep& (0+255),w,b
  4963  0022DA  5DF9               	subwf	rotateObj@i& (0+255),w,b
  4964  0022DC  51F8               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4965  0022DE  59FA               	subwfb	(rotateObj@i+1)& (0+255),w,b
  4966  0022E0  A0D8               	btfss	status,0,c
  4967  0022E2  EF75  F011         	goto	u3781
  4968  0022E6  EF78  F011         	goto	u3780
  4969  0022EA                     u3781:
  4970  0022EA  FFFF               	dw	65535	; assembler added errata NOP
  4971  0022EC  EF39  F011         	goto	l4431
  4972  0022F0                     u3780:
  4973  0022F0  FFFF               	dw	65535	; assembler added errata NOP
  4974  0022F2                     
  4975                           ; BSR set to: 1
  4976                           ;motors.c: 793:     resetTM2_Temp();
  4977  0022F2  EC66  F014         	call	_resetTM2_Temp	;wreg free
  4978                           
  4979                           ;motors.c: 796:     resetStep();
  4980  0022F6  ECCD  F014         	call	_resetStep	;wreg free
  4981  0022FA  0012               	return		;funcret
  4982  0022FC  FFFF               	dw	65535	; errata NOP
  4983  0022FE                     __end_of_rotateObj:
  4984                           	callstack 0
  4985                           
  4986 ;; *************** function ___xxtofl *****************
  4987 ;; Defined at:
  4988 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4989 ;; Parameters:    Size  Location     Type
  4990 ;;  sign            1    wreg     unsigned char 
  4991 ;;  val             4   17[COMRAM] long 
  4992 ;; Auto vars:     Size  Location     Type
  4993 ;;  sign            1   25[COMRAM] unsigned char 
  4994 ;;  arg             4   27[COMRAM] unsigned long 
  4995 ;;  exp             1   26[COMRAM] unsigned char 
  4996 ;; Return value:  Size  Location     Type
  4997 ;;                  4   17[COMRAM] unsigned char 
  4998 ;; Registers used:
  4999 ;;		wreg, status,2, status,0
  5000 ;; Tracked objects:
  5001 ;;		On entry : 0/0
  5002 ;;		On exit  : 0/0
  5003 ;;		Unchanged: 0/0
  5004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5005 ;;      Params:         4       0       0       0       0       0       0
  5006 ;;      Locals:         6       0       0       0       0       0       0
  5007 ;;      Temps:          4       0       0       0       0       0       0
  5008 ;;      Totals:        14       0       0       0       0       0       0
  5009 ;;Total ram usage:       14 bytes
  5010 ;; Hardware stack levels used:    1
  5011 ;; Hardware stack levels required when called:    4
  5012 ;; This function calls:
  5013 ;;		Nothing
  5014 ;; This function is called by:
  5015 ;;		_rotateObj
  5016 ;; This function uses a non-reentrant model
  5017 ;;
  5018                           
  5019                           	psect	text27
  5020  0015DC                     __ptext27:
  5021                           	callstack 0
  5022  0015DC                     ___xxtofl:
  5023                           	callstack 0
  5024  0015DC  FFFF               	dw	65535	; assembler added errata NOP
  5025                           
  5026                           ;incstack = 0
  5027                           ;___xxtofl@sign stored from wreg
  5028  0015DE  6E1A               	movwf	___xxtofl@sign^0,c
  5029  0015E0  501A               	movf	___xxtofl@sign^0,w,c
  5030  0015E2  B4D8               	btfsc	status,2,c
  5031  0015E4  EFF6  F00A         	goto	u3281
  5032  0015E8  EFF9  F00A         	goto	u3280
  5033  0015EC                     u3281:
  5034  0015EC  FFFF               	dw	65535	; assembler added errata NOP
  5035  0015EE  EF1E  F00B         	goto	l1337
  5036  0015F2                     u3280:
  5037  0015F2  FFFF               	dw	65535	; assembler added errata NOP
  5038  0015F4  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  5039  0015F6  EF02  F00B         	goto	u3290
  5040  0015FA  EFFF  F00A         	goto	u3291
  5041  0015FE                     u3291:
  5042  0015FE  FFFF               	dw	65535	; assembler added errata NOP
  5043  001600  EF1E  F00B         	goto	l1337
  5044  001604                     u3290:
  5045  001604  FFFF               	dw	65535	; assembler added errata NOP
  5046  001606  C012  F016         	movff	___xxtofl@val,??___xxtofl
  5047  00160A  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  5048  00160E  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  5049  001612  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  5050  001616  1E16               	comf	??___xxtofl^0,f,c
  5051  001618  1E17               	comf	(??___xxtofl+1)^0,f,c
  5052  00161A  1E18               	comf	(??___xxtofl+2)^0,f,c
  5053  00161C  1E19               	comf	(??___xxtofl+3)^0,f,c
  5054  00161E  2A16               	incf	??___xxtofl^0,f,c
  5055  001620  0E00               	movlw	0
  5056  001622  2217               	addwfc	(??___xxtofl+1)^0,f,c
  5057  001624  2218               	addwfc	(??___xxtofl+2)^0,f,c
  5058  001626  2219               	addwfc	(??___xxtofl+3)^0,f,c
  5059  001628  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  5060  00162C  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  5061  001630  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  5062  001634  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  5063  001638  EF27  F00B         	goto	l4163
  5064  00163C                     l1337:
  5065  00163C  FFFF               	dw	65535	; assembler added errata NOP
  5066  00163E  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  5067  001642  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  5068  001646  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  5069  00164A  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  5070  00164E                     l4163:
  5071  00164E  FFFF               	dw	65535	; assembler added errata NOP
  5072  001650  5012               	movf	___xxtofl@val^0,w,c
  5073  001652  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  5074  001654  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  5075  001656  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  5076  001658  A4D8               	btfss	status,2,c
  5077  00165A  EF31  F00B         	goto	u3301
  5078  00165E  EF34  F00B         	goto	u3300
  5079  001662                     u3301:
  5080  001662  FFFF               	dw	65535	; assembler added errata NOP
  5081  001664  EF3F  F00B         	goto	l4169
  5082  001668                     u3300:
  5083  001668  FFFF               	dw	65535	; assembler added errata NOP
  5084  00166A  0E00               	movlw	0
  5085  00166C  6E12               	movwf	?___xxtofl^0,c
  5086  00166E  0E00               	movlw	0
  5087  001670  6E13               	movwf	(?___xxtofl+1)^0,c
  5088  001672  0E00               	movlw	0
  5089  001674  6E14               	movwf	(?___xxtofl+2)^0,c
  5090  001676  0E00               	movlw	0
  5091  001678  6E15               	movwf	(?___xxtofl+3)^0,c
  5092  00167A  EFE7  F00B         	goto	l1340
  5093  00167E                     l4169:
  5094  00167E  FFFF               	dw	65535	; assembler added errata NOP
  5095  001680  0E96               	movlw	150
  5096  001682  6E1B               	movwf	___xxtofl@exp^0,c
  5097  001684  EF4B  F00B         	goto	l4173
  5098  001688                     l4171:
  5099  001688  FFFF               	dw	65535	; assembler added errata NOP
  5100  00168A  2A1B               	incf	___xxtofl@exp^0,f,c
  5101  00168C  90D8               	bcf	status,0,c
  5102  00168E  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  5103  001690  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  5104  001692  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  5105  001694  321C               	rrcf	___xxtofl@arg^0,f,c
  5106  001696                     l4173:
  5107  001696  FFFF               	dw	65535	; assembler added errata NOP
  5108  001698  0E00               	movlw	0
  5109  00169A  141C               	andwf	___xxtofl@arg^0,w,c
  5110  00169C  6E16               	movwf	??___xxtofl^0,c
  5111  00169E  0E00               	movlw	0
  5112  0016A0  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  5113  0016A2  6E17               	movwf	(??___xxtofl+1)^0,c
  5114  0016A4  0E00               	movlw	0
  5115  0016A6  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  5116  0016A8  6E18               	movwf	(??___xxtofl+2)^0,c
  5117  0016AA  0EFE               	movlw	254
  5118  0016AC  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  5119  0016AE  6E19               	movwf	(??___xxtofl+3)^0,c
  5120  0016B0  5016               	movf	??___xxtofl^0,w,c
  5121  0016B2  1017               	iorwf	(??___xxtofl+1)^0,w,c
  5122  0016B4  1018               	iorwf	(??___xxtofl+2)^0,w,c
  5123  0016B6  1019               	iorwf	(??___xxtofl+3)^0,w,c
  5124  0016B8  A4D8               	btfss	status,2,c
  5125  0016BA  EF61  F00B         	goto	u3311
  5126  0016BE  EF64  F00B         	goto	u3310
  5127  0016C2                     u3311:
  5128  0016C2  FFFF               	dw	65535	; assembler added errata NOP
  5129  0016C4  EF44  F00B         	goto	l4171
  5130  0016C8                     u3310:
  5131  0016C8  FFFF               	dw	65535	; assembler added errata NOP
  5132  0016CA  EF74  F00B         	goto	l1344
  5133  0016CE                     l4175:
  5134  0016CE  FFFF               	dw	65535	; assembler added errata NOP
  5135  0016D0  2A1B               	incf	___xxtofl@exp^0,f,c
  5136  0016D2  0E01               	movlw	1
  5137  0016D4  261C               	addwf	___xxtofl@arg^0,f,c
  5138  0016D6  0E00               	movlw	0
  5139  0016D8  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  5140  0016DA  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  5141  0016DC  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  5142  0016DE  90D8               	bcf	status,0,c
  5143  0016E0  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  5144  0016E2  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  5145  0016E4  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  5146  0016E6  321C               	rrcf	___xxtofl@arg^0,f,c
  5147  0016E8                     l1344:
  5148  0016E8  FFFF               	dw	65535	; assembler added errata NOP
  5149  0016EA  0E00               	movlw	0
  5150  0016EC  141C               	andwf	___xxtofl@arg^0,w,c
  5151  0016EE  6E16               	movwf	??___xxtofl^0,c
  5152  0016F0  0E00               	movlw	0
  5153  0016F2  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  5154  0016F4  6E17               	movwf	(??___xxtofl+1)^0,c
  5155  0016F6  0E00               	movlw	0
  5156  0016F8  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  5157  0016FA  6E18               	movwf	(??___xxtofl+2)^0,c
  5158  0016FC  0EFF               	movlw	255
  5159  0016FE  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  5160  001700  6E19               	movwf	(??___xxtofl+3)^0,c
  5161  001702  5016               	movf	??___xxtofl^0,w,c
  5162  001704  1017               	iorwf	(??___xxtofl+1)^0,w,c
  5163  001706  1018               	iorwf	(??___xxtofl+2)^0,w,c
  5164  001708  1019               	iorwf	(??___xxtofl+3)^0,w,c
  5165  00170A  A4D8               	btfss	status,2,c
  5166  00170C  EF8A  F00B         	goto	u3321
  5167  001710  EF8D  F00B         	goto	u3320
  5168  001714                     u3321:
  5169  001714  FFFF               	dw	65535	; assembler added errata NOP
  5170  001716  EF67  F00B         	goto	l4175
  5171  00171A                     u3320:
  5172  00171A  FFFF               	dw	65535	; assembler added errata NOP
  5173  00171C  EF97  F00B         	goto	l4183
  5174  001720                     l4181:
  5175  001720  FFFF               	dw	65535	; assembler added errata NOP
  5176  001722  061B               	decf	___xxtofl@exp^0,f,c
  5177  001724  90D8               	bcf	status,0,c
  5178  001726  361C               	rlcf	___xxtofl@arg^0,f,c
  5179  001728  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  5180  00172A  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  5181  00172C  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  5182  00172E                     l4183:
  5183  00172E  FFFF               	dw	65535	; assembler added errata NOP
  5184  001730  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  5185  001732  EF9D  F00B         	goto	u3331
  5186  001736  EFA0  F00B         	goto	u3330
  5187  00173A                     u3331:
  5188  00173A  FFFF               	dw	65535	; assembler added errata NOP
  5189  00173C  EFAA  F00B         	goto	l1351
  5190  001740                     u3330:
  5191  001740  FFFF               	dw	65535	; assembler added errata NOP
  5192  001742  0E02               	movlw	2
  5193  001744  601B               	cpfslt	___xxtofl@exp^0,c
  5194  001746  EFA7  F00B         	goto	u3341
  5195  00174A  EFAA  F00B         	goto	u3340
  5196  00174E                     u3341:
  5197  00174E  FFFF               	dw	65535	; assembler added errata NOP
  5198  001750  EF90  F00B         	goto	l4181
  5199  001754                     u3340:
  5200  001754                     l1351:
  5201  001754  FFFF               	dw	65535	; assembler added errata NOP
  5202  001756  B01B               	btfsc	___xxtofl@exp^0,0,c
  5203  001758  EFB0  F00B         	goto	u3351
  5204  00175C  EFB3  F00B         	goto	u3350
  5205  001760                     u3351:
  5206  001760  FFFF               	dw	65535	; assembler added errata NOP
  5207  001762  EFB5  F00B         	goto	l4189
  5208  001766                     u3350:
  5209  001766  FFFF               	dw	65535	; assembler added errata NOP
  5210  001768  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  5211  00176A                     l4189:
  5212  00176A  FFFF               	dw	65535	; assembler added errata NOP
  5213  00176C  90D8               	bcf	status,0,c
  5214  00176E  321B               	rrcf	___xxtofl@exp^0,f,c
  5215  001770  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  5216  001774  6A17               	clrf	(??___xxtofl+1)^0,c
  5217  001776  6A18               	clrf	(??___xxtofl+2)^0,c
  5218  001778  6A19               	clrf	(??___xxtofl+3)^0,c
  5219  00177A  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  5220  00177E  6A18               	clrf	(??___xxtofl+2)^0,c
  5221  001780  6A17               	clrf	(??___xxtofl+1)^0,c
  5222  001782  6A16               	clrf	??___xxtofl^0,c
  5223  001784  5016               	movf	??___xxtofl^0,w,c
  5224  001786  121C               	iorwf	___xxtofl@arg^0,f,c
  5225  001788  5017               	movf	(??___xxtofl+1)^0,w,c
  5226  00178A  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  5227  00178C  5018               	movf	(??___xxtofl+2)^0,w,c
  5228  00178E  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  5229  001790  5019               	movf	(??___xxtofl+3)^0,w,c
  5230  001792  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  5231  001794  501A               	movf	___xxtofl@sign^0,w,c
  5232  001796  B4D8               	btfsc	status,2,c
  5233  001798  EFD0  F00B         	goto	u3361
  5234  00179C  EFD3  F00B         	goto	u3360
  5235  0017A0                     u3361:
  5236  0017A0  FFFF               	dw	65535	; assembler added errata NOP
  5237  0017A2  EFDE  F00B         	goto	l4199
  5238  0017A6                     u3360:
  5239  0017A6  FFFF               	dw	65535	; assembler added errata NOP
  5240  0017A8  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  5241  0017AA  EFDC  F00B         	goto	u3370
  5242  0017AE  EFD9  F00B         	goto	u3371
  5243  0017B2                     u3371:
  5244  0017B2  FFFF               	dw	65535	; assembler added errata NOP
  5245  0017B4  EFDE  F00B         	goto	l4199
  5246  0017B8                     u3370:
  5247  0017B8  FFFF               	dw	65535	; assembler added errata NOP
  5248  0017BA  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  5249  0017BC                     l4199:
  5250  0017BC  FFFF               	dw	65535	; assembler added errata NOP
  5251  0017BE  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  5252  0017C2  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  5253  0017C6  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  5254  0017CA  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  5255  0017CE                     l1340:
  5256  0017CE  FFFF               	dw	65535	; assembler added errata NOP
  5257  0017D0  0012               	return		;funcret
  5258  0017D2  FFFF               	dw	65535	; errata NOP
  5259  0017D4                     __end_of___xxtofl:
  5260                           	callstack 0
  5261                           
  5262 ;; *************** function ___fltol *****************
  5263 ;; Defined at:
  5264 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  5265 ;; Parameters:    Size  Location     Type
  5266 ;;  f1              4   56[COMRAM] unsigned char 
  5267 ;; Auto vars:     Size  Location     Type
  5268 ;;  exp1            1   65[COMRAM] unsigned char 
  5269 ;;  sign1           1   64[COMRAM] unsigned char 
  5270 ;; Return value:  Size  Location     Type
  5271 ;;                  4   56[COMRAM] long 
  5272 ;; Registers used:
  5273 ;;		wreg, status,2, status,0
  5274 ;; Tracked objects:
  5275 ;;		On entry : 0/0
  5276 ;;		On exit  : 0/0
  5277 ;;		Unchanged: 0/0
  5278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5279 ;;      Params:         4       0       0       0       0       0       0
  5280 ;;      Locals:         2       0       0       0       0       0       0
  5281 ;;      Temps:          4       0       0       0       0       0       0
  5282 ;;      Totals:        10       0       0       0       0       0       0
  5283 ;;Total ram usage:       10 bytes
  5284 ;; Hardware stack levels used:    1
  5285 ;; Hardware stack levels required when called:    4
  5286 ;; This function calls:
  5287 ;;		Nothing
  5288 ;; This function is called by:
  5289 ;;		_rotateObj
  5290 ;; This function uses a non-reentrant model
  5291 ;;
  5292                           
  5293                           	psect	text28
  5294  001C72                     __ptext28:
  5295                           	callstack 0
  5296  001C72                     ___fltol:
  5297                           	callstack 0
  5298  001C72  FFFF               	dw	65535	; assembler added errata NOP
  5299  001C74  343B               	rlcf	(___fltol@f1+2)^0,w,c
  5300  001C76  343C               	rlcf	(___fltol@f1+3)^0,w,c
  5301  001C78  6E42               	movwf	___fltol@exp1^0,c
  5302  001C7A  5042               	movf	___fltol@exp1^0,w,c
  5303  001C7C  A4D8               	btfss	status,2,c
  5304  001C7E  EF43  F00E         	goto	u3211
  5305  001C82  EF46  F00E         	goto	u3210
  5306  001C86                     u3211:
  5307  001C86  FFFF               	dw	65535	; assembler added errata NOP
  5308  001C88  EF52  F00E         	goto	l4119
  5309  001C8C                     u3210:
  5310  001C8C  FFFF               	dw	65535	; assembler added errata NOP
  5311  001C8E                     l4115:
  5312  001C8E  FFFF               	dw	65535	; assembler added errata NOP
  5313  001C90  0E00               	movlw	0
  5314  001C92  6E39               	movwf	?___fltol^0,c
  5315  001C94  0E00               	movlw	0
  5316  001C96  6E3A               	movwf	(?___fltol+1)^0,c
  5317  001C98  0E00               	movlw	0
  5318  001C9A  6E3B               	movwf	(?___fltol+2)^0,c
  5319  001C9C  0E00               	movlw	0
  5320  001C9E  6E3C               	movwf	(?___fltol+3)^0,c
  5321  001CA0  EFD1  F00E         	goto	l979
  5322  001CA4                     l4119:
  5323  001CA4  FFFF               	dw	65535	; assembler added errata NOP
  5324  001CA6  C039  F03D         	movff	___fltol@f1,??___fltol
  5325  001CAA  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  5326  001CAE  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  5327  001CB2  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  5328  001CB6  0E20               	movlw	32
  5329  001CB8  EF64  F00E         	goto	u3220
  5330  001CBC                     u3225:
  5331  001CBC  FFFF               	dw	65535	; assembler added errata NOP
  5332  001CBE  90D8               	bcf	status,0,c
  5333  001CC0  3240               	rrcf	(??___fltol+3)^0,f,c
  5334  001CC2  323F               	rrcf	(??___fltol+2)^0,f,c
  5335  001CC4  323E               	rrcf	(??___fltol+1)^0,f,c
  5336  001CC6  323D               	rrcf	??___fltol^0,f,c
  5337  001CC8                     u3220:
  5338  001CC8  FFFF               	dw	65535	; assembler added errata NOP
  5339  001CCA  2EE8               	decfsz	wreg,f,c
  5340  001CCC  EF5E  F00E         	goto	u3225
  5341  001CD0  503D               	movf	??___fltol^0,w,c
  5342  001CD2  6E41               	movwf	___fltol@sign1^0,c
  5343  001CD4  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  5344  001CD6  0EFF               	movlw	255
  5345  001CD8  1639               	andwf	___fltol@f1^0,f,c
  5346  001CDA  0EFF               	movlw	255
  5347  001CDC  163A               	andwf	(___fltol@f1+1)^0,f,c
  5348  001CDE  0EFF               	movlw	255
  5349  001CE0  163B               	andwf	(___fltol@f1+2)^0,f,c
  5350  001CE2  0E00               	movlw	0
  5351  001CE4  163C               	andwf	(___fltol@f1+3)^0,f,c
  5352  001CE6  0E96               	movlw	150
  5353  001CE8  5E42               	subwf	___fltol@exp1^0,f,c
  5354  001CEA  BE42               	btfsc	___fltol@exp1^0,7,c
  5355  001CEC  EF7D  F00E         	goto	u3230
  5356  001CF0  EF7A  F00E         	goto	u3231
  5357  001CF4                     u3231:
  5358  001CF4  FFFF               	dw	65535	; assembler added errata NOP
  5359  001CF6  EF97  F00E         	goto	l4139
  5360  001CFA                     u3230:
  5361  001CFA  FFFF               	dw	65535	; assembler added errata NOP
  5362  001CFC  5042               	movf	___fltol@exp1^0,w,c
  5363  001CFE  0A80               	xorlw	128
  5364  001D00  0F97               	addlw	151
  5365  001D02  B0D8               	btfsc	status,0,c
  5366  001D04  EF86  F00E         	goto	u3241
  5367  001D08  EF89  F00E         	goto	u3240
  5368  001D0C                     u3241:
  5369  001D0C  FFFF               	dw	65535	; assembler added errata NOP
  5370  001D0E  EF8C  F00E         	goto	l4135
  5371  001D12                     u3240:
  5372  001D12  FFFF               	dw	65535	; assembler added errata NOP
  5373  001D14  EF47  F00E         	goto	l4115
  5374  001D18                     l4135:
  5375  001D18  FFFF               	dw	65535	; assembler added errata NOP
  5376  001D1A  90D8               	bcf	status,0,c
  5377  001D1C  323C               	rrcf	(___fltol@f1+3)^0,f,c
  5378  001D1E  323B               	rrcf	(___fltol@f1+2)^0,f,c
  5379  001D20  323A               	rrcf	(___fltol@f1+1)^0,f,c
  5380  001D22  3239               	rrcf	___fltol@f1^0,f,c
  5381  001D24  3E42               	incfsz	___fltol@exp1^0,f,c
  5382  001D26  EF8C  F00E         	goto	l4135
  5383  001D2A  EFB5  F00E         	goto	l4149
  5384  001D2E                     l4139:
  5385  001D2E  FFFF               	dw	65535	; assembler added errata NOP
  5386  001D30  0E1F               	movlw	31
  5387  001D32  6442               	cpfsgt	___fltol@exp1^0,c
  5388  001D34  EF9E  F00E         	goto	u3251
  5389  001D38  EFA1  F00E         	goto	u3250
  5390  001D3C                     u3251:
  5391  001D3C  FFFF               	dw	65535	; assembler added errata NOP
  5392  001D3E  EFAB  F00E         	goto	l4147
  5393  001D42                     u3250:
  5394  001D42  FFFF               	dw	65535	; assembler added errata NOP
  5395  001D44  EF47  F00E         	goto	l4115
  5396  001D48                     l4145:
  5397  001D48  FFFF               	dw	65535	; assembler added errata NOP
  5398  001D4A  90D8               	bcf	status,0,c
  5399  001D4C  3639               	rlcf	___fltol@f1^0,f,c
  5400  001D4E  363A               	rlcf	(___fltol@f1+1)^0,f,c
  5401  001D50  363B               	rlcf	(___fltol@f1+2)^0,f,c
  5402  001D52  363C               	rlcf	(___fltol@f1+3)^0,f,c
  5403  001D54  0642               	decf	___fltol@exp1^0,f,c
  5404  001D56                     l4147:
  5405  001D56  FFFF               	dw	65535	; assembler added errata NOP
  5406  001D58  5042               	movf	___fltol@exp1^0,w,c
  5407  001D5A  A4D8               	btfss	status,2,c
  5408  001D5C  EFB2  F00E         	goto	u3261
  5409  001D60  EFB5  F00E         	goto	u3260
  5410  001D64                     u3261:
  5411  001D64  FFFF               	dw	65535	; assembler added errata NOP
  5412  001D66  EFA4  F00E         	goto	l4145
  5413  001D6A                     u3260:
  5414  001D6A                     l4149:
  5415  001D6A  FFFF               	dw	65535	; assembler added errata NOP
  5416  001D6C  5041               	movf	___fltol@sign1^0,w,c
  5417  001D6E  B4D8               	btfsc	status,2,c
  5418  001D70  EFBC  F00E         	goto	u3271
  5419  001D74  EFBF  F00E         	goto	u3270
  5420  001D78                     u3271:
  5421  001D78  FFFF               	dw	65535	; assembler added errata NOP
  5422  001D7A  EFC8  F00E         	goto	l4153
  5423  001D7E                     u3270:
  5424  001D7E  FFFF               	dw	65535	; assembler added errata NOP
  5425  001D80  1E3C               	comf	(___fltol@f1+3)^0,f,c
  5426  001D82  1E3B               	comf	(___fltol@f1+2)^0,f,c
  5427  001D84  1E3A               	comf	(___fltol@f1+1)^0,f,c
  5428  001D86  6C39               	negf	___fltol@f1^0,c
  5429  001D88  0E00               	movlw	0
  5430  001D8A  223A               	addwfc	(___fltol@f1+1)^0,f,c
  5431  001D8C  223B               	addwfc	(___fltol@f1+2)^0,f,c
  5432  001D8E  223C               	addwfc	(___fltol@f1+3)^0,f,c
  5433  001D90                     l4153:
  5434  001D90  FFFF               	dw	65535	; assembler added errata NOP
  5435  001D92  C039  F039         	movff	___fltol@f1,?___fltol
  5436  001D96  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  5437  001D9A  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  5438  001D9E  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  5439  001DA2                     l979:
  5440  001DA2  FFFF               	dw	65535	; assembler added errata NOP
  5441  001DA4  0012               	return		;funcret
  5442  001DA6  FFFF               	dw	65535	; errata NOP
  5443  001DA8                     __end_of___fltol:
  5444                           	callstack 0
  5445                           
  5446 ;; *************** function ___fldiv *****************
  5447 ;; Defined at:
  5448 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  5449 ;; Parameters:    Size  Location     Type
  5450 ;;  b               4   31[COMRAM] long 
  5451 ;;  a               4   35[COMRAM] long 
  5452 ;; Auto vars:     Size  Location     Type
  5453 ;;  grs             4   50[COMRAM] unsigned long 
  5454 ;;  rem             4   43[COMRAM] unsigned long 
  5455 ;;  new_exp         2   48[COMRAM] short 
  5456 ;;  aexp            1   55[COMRAM] unsigned char 
  5457 ;;  bexp            1   54[COMRAM] unsigned char 
  5458 ;;  sign            1   47[COMRAM] unsigned char 
  5459 ;; Return value:  Size  Location     Type
  5460 ;;                  4   31[COMRAM] unsigned char 
  5461 ;; Registers used:
  5462 ;;		wreg, status,2, status,0
  5463 ;; Tracked objects:
  5464 ;;		On entry : 0/0
  5465 ;;		On exit  : 0/0
  5466 ;;		Unchanged: 0/0
  5467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5468 ;;      Params:         8       0       0       0       0       0       0
  5469 ;;      Locals:        13       0       0       0       0       0       0
  5470 ;;      Temps:          4       0       0       0       0       0       0
  5471 ;;      Totals:        25       0       0       0       0       0       0
  5472 ;;Total ram usage:       25 bytes
  5473 ;; Hardware stack levels used:    1
  5474 ;; Hardware stack levels required when called:    4
  5475 ;; This function calls:
  5476 ;;		Nothing
  5477 ;; This function is called by:
  5478 ;;		_rotateObj
  5479 ;; This function uses a non-reentrant model
  5480 ;;
  5481                           
  5482                           	psect	text29
  5483  000616                     __ptext29:
  5484                           	callstack 0
  5485  000616                     ___fldiv:
  5486                           	callstack 0
  5487  000616  FFFF               	dw	65535	; assembler added errata NOP
  5488  000618  5023               	movf	(___fldiv@b+3)^0,w,c
  5489  00061A  0B80               	andlw	128
  5490  00061C  6E30               	movwf	___fldiv@sign^0,c
  5491  00061E  5023               	movf	(___fldiv@b+3)^0,w,c
  5492  000620  2423               	addwf	(___fldiv@b+3)^0,w,c
  5493  000622  6E37               	movwf	___fldiv@bexp^0,c
  5494  000624  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5495  000626  EF17  F003         	goto	u2981
  5496  00062A  EF1A  F003         	goto	u2980
  5497  00062E                     u2981:
  5498  00062E  FFFF               	dw	65535	; assembler added errata NOP
  5499  000630  EF1C  F003         	goto	l3981
  5500  000634                     u2980:
  5501  000634  FFFF               	dw	65535	; assembler added errata NOP
  5502  000636  8037               	bsf	___fldiv@bexp^0,0,c
  5503  000638                     l3981:
  5504  000638  FFFF               	dw	65535	; assembler added errata NOP
  5505  00063A  5037               	movf	___fldiv@bexp^0,w,c
  5506  00063C  B4D8               	btfsc	status,2,c
  5507  00063E  EF23  F003         	goto	u2991
  5508  000642  EF26  F003         	goto	u2990
  5509  000646                     u2991:
  5510  000646  FFFF               	dw	65535	; assembler added errata NOP
  5511  000648  EF3F  F003         	goto	l3991
  5512  00064C                     u2990:
  5513  00064C  FFFF               	dw	65535	; assembler added errata NOP
  5514  00064E  2837               	incf	___fldiv@bexp^0,w,c
  5515  000650  A4D8               	btfss	status,2,c
  5516  000652  EF2D  F003         	goto	u3001
  5517  000656  EF30  F003         	goto	u3000
  5518  00065A                     u3001:
  5519  00065A  FFFF               	dw	65535	; assembler added errata NOP
  5520  00065C  EF39  F003         	goto	l3987
  5521  000660                     u3000:
  5522  000660  FFFF               	dw	65535	; assembler added errata NOP
  5523  000662  0E00               	movlw	0
  5524  000664  6E20               	movwf	___fldiv@b^0,c
  5525  000666  0E00               	movlw	0
  5526  000668  6E21               	movwf	(___fldiv@b+1)^0,c
  5527  00066A  0E00               	movlw	0
  5528  00066C  6E22               	movwf	(___fldiv@b+2)^0,c
  5529  00066E  0E00               	movlw	0
  5530  000670  6E23               	movwf	(___fldiv@b+3)^0,c
  5531  000672                     l3987:
  5532  000672  FFFF               	dw	65535	; assembler added errata NOP
  5533  000674  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5534  000676  0E00               	movlw	0
  5535  000678  6E23               	movwf	(___fldiv@b+3)^0,c
  5536  00067A  EF48  F003         	goto	l3993
  5537  00067E                     l3991:
  5538  00067E  FFFF               	dw	65535	; assembler added errata NOP
  5539  000680  0E00               	movlw	0
  5540  000682  6E20               	movwf	___fldiv@b^0,c
  5541  000684  0E00               	movlw	0
  5542  000686  6E21               	movwf	(___fldiv@b+1)^0,c
  5543  000688  0E00               	movlw	0
  5544  00068A  6E22               	movwf	(___fldiv@b+2)^0,c
  5545  00068C  0E00               	movlw	0
  5546  00068E  6E23               	movwf	(___fldiv@b+3)^0,c
  5547  000690                     l3993:
  5548  000690  FFFF               	dw	65535	; assembler added errata NOP
  5549  000692  5027               	movf	(___fldiv@a+3)^0,w,c
  5550  000694  0B80               	andlw	128
  5551  000696  1A30               	xorwf	___fldiv@sign^0,f,c
  5552  000698  5027               	movf	(___fldiv@a+3)^0,w,c
  5553  00069A  2427               	addwf	(___fldiv@a+3)^0,w,c
  5554  00069C  6E38               	movwf	___fldiv@aexp^0,c
  5555  00069E  AE26               	btfss	(___fldiv@a+2)^0,7,c
  5556  0006A0  EF54  F003         	goto	u3011
  5557  0006A4  EF57  F003         	goto	u3010
  5558  0006A8                     u3011:
  5559  0006A8  FFFF               	dw	65535	; assembler added errata NOP
  5560  0006AA  EF59  F003         	goto	l4001
  5561  0006AE                     u3010:
  5562  0006AE  FFFF               	dw	65535	; assembler added errata NOP
  5563  0006B0  8038               	bsf	___fldiv@aexp^0,0,c
  5564  0006B2                     l4001:
  5565  0006B2  FFFF               	dw	65535	; assembler added errata NOP
  5566  0006B4  5038               	movf	___fldiv@aexp^0,w,c
  5567  0006B6  B4D8               	btfsc	status,2,c
  5568  0006B8  EF60  F003         	goto	u3021
  5569  0006BC  EF63  F003         	goto	u3020
  5570  0006C0                     u3021:
  5571  0006C0  FFFF               	dw	65535	; assembler added errata NOP
  5572  0006C2  EF7C  F003         	goto	l4011
  5573  0006C6                     u3020:
  5574  0006C6  FFFF               	dw	65535	; assembler added errata NOP
  5575  0006C8  2838               	incf	___fldiv@aexp^0,w,c
  5576  0006CA  A4D8               	btfss	status,2,c
  5577  0006CC  EF6A  F003         	goto	u3031
  5578  0006D0  EF6D  F003         	goto	u3030
  5579  0006D4                     u3031:
  5580  0006D4  FFFF               	dw	65535	; assembler added errata NOP
  5581  0006D6  EF76  F003         	goto	l4007
  5582  0006DA                     u3030:
  5583  0006DA  FFFF               	dw	65535	; assembler added errata NOP
  5584  0006DC  0E00               	movlw	0
  5585  0006DE  6E24               	movwf	___fldiv@a^0,c
  5586  0006E0  0E00               	movlw	0
  5587  0006E2  6E25               	movwf	(___fldiv@a+1)^0,c
  5588  0006E4  0E00               	movlw	0
  5589  0006E6  6E26               	movwf	(___fldiv@a+2)^0,c
  5590  0006E8  0E00               	movlw	0
  5591  0006EA  6E27               	movwf	(___fldiv@a+3)^0,c
  5592  0006EC                     l4007:
  5593  0006EC  FFFF               	dw	65535	; assembler added errata NOP
  5594  0006EE  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5595  0006F0  0E00               	movlw	0
  5596  0006F2  6E27               	movwf	(___fldiv@a+3)^0,c
  5597  0006F4  EF85  F003         	goto	l4013
  5598  0006F8                     l4011:
  5599  0006F8  FFFF               	dw	65535	; assembler added errata NOP
  5600  0006FA  0E00               	movlw	0
  5601  0006FC  6E24               	movwf	___fldiv@a^0,c
  5602  0006FE  0E00               	movlw	0
  5603  000700  6E25               	movwf	(___fldiv@a+1)^0,c
  5604  000702  0E00               	movlw	0
  5605  000704  6E26               	movwf	(___fldiv@a+2)^0,c
  5606  000706  0E00               	movlw	0
  5607  000708  6E27               	movwf	(___fldiv@a+3)^0,c
  5608  00070A                     l4013:
  5609  00070A  FFFF               	dw	65535	; assembler added errata NOP
  5610  00070C  5024               	movf	___fldiv@a^0,w,c
  5611  00070E  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5612  000710  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5613  000712  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5614  000714  A4D8               	btfss	status,2,c
  5615  000716  EF8F  F003         	goto	u3041
  5616  00071A  EF92  F003         	goto	u3040
  5617  00071E                     u3041:
  5618  00071E  FFFF               	dw	65535	; assembler added errata NOP
  5619  000720  EFAC  F003         	goto	l4025
  5620  000724                     u3040:
  5621  000724  FFFF               	dw	65535	; assembler added errata NOP
  5622  000726  0E00               	movlw	0
  5623  000728  6E20               	movwf	___fldiv@b^0,c
  5624  00072A  0E00               	movlw	0
  5625  00072C  6E21               	movwf	(___fldiv@b+1)^0,c
  5626  00072E  0E00               	movlw	0
  5627  000730  6E22               	movwf	(___fldiv@b+2)^0,c
  5628  000732  0E00               	movlw	0
  5629  000734  6E23               	movwf	(___fldiv@b+3)^0,c
  5630  000736  0E80               	movlw	128
  5631  000738  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5632  00073A  0E7F               	movlw	127
  5633  00073C  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5634  00073E                     l4019:
  5635  00073E  FFFF               	dw	65535	; assembler added errata NOP
  5636  000740  5030               	movf	___fldiv@sign^0,w,c
  5637  000742  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5638  000744  C020  F020         	movff	___fldiv@b,?___fldiv
  5639  000748  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5640  00074C  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5641  000750  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5642  000754  EF21  F005         	goto	l1264
  5643  000758                     l4025:
  5644  000758  FFFF               	dw	65535	; assembler added errata NOP
  5645  00075A  5037               	movf	___fldiv@bexp^0,w,c
  5646  00075C  A4D8               	btfss	status,2,c
  5647  00075E  EFB3  F003         	goto	u3051
  5648  000762  EFB6  F003         	goto	u3050
  5649  000766                     u3051:
  5650  000766  FFFF               	dw	65535	; assembler added errata NOP
  5651  000768  EFC1  F003         	goto	l4033
  5652  00076C                     u3050:
  5653  00076C  FFFF               	dw	65535	; assembler added errata NOP
  5654  00076E  0E00               	movlw	0
  5655  000770  6E20               	movwf	?___fldiv^0,c
  5656  000772  0E00               	movlw	0
  5657  000774  6E21               	movwf	(?___fldiv+1)^0,c
  5658  000776  0E00               	movlw	0
  5659  000778  6E22               	movwf	(?___fldiv+2)^0,c
  5660  00077A  0E00               	movlw	0
  5661  00077C  6E23               	movwf	(?___fldiv+3)^0,c
  5662  00077E  EF21  F005         	goto	l1264
  5663  000782                     l4033:
  5664  000782  FFFF               	dw	65535	; assembler added errata NOP
  5665  000784  5038               	movf	___fldiv@aexp^0,w,c
  5666  000786  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5667  00078A  6A29               	clrf	(??___fldiv+1)^0,c
  5668  00078C  5E28               	subwf	??___fldiv^0,f,c
  5669  00078E  0E00               	movlw	0
  5670  000790  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5671  000792  0E7F               	movlw	127
  5672  000794  2428               	addwf	??___fldiv^0,w,c
  5673  000796  6E31               	movwf	___fldiv@new_exp^0,c
  5674  000798  0E00               	movlw	0
  5675  00079A  2029               	addwfc	(??___fldiv+1)^0,w,c
  5676  00079C  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5677  00079E  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5678  0007A2  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5679  0007A6  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5680  0007AA  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5681  0007AE  0E00               	movlw	0
  5682  0007B0  6E20               	movwf	___fldiv@b^0,c
  5683  0007B2  0E00               	movlw	0
  5684  0007B4  6E21               	movwf	(___fldiv@b+1)^0,c
  5685  0007B6  0E00               	movlw	0
  5686  0007B8  6E22               	movwf	(___fldiv@b+2)^0,c
  5687  0007BA  0E00               	movlw	0
  5688  0007BC  6E23               	movwf	(___fldiv@b+3)^0,c
  5689  0007BE  0E00               	movlw	0
  5690  0007C0  6E33               	movwf	___fldiv@grs^0,c
  5691  0007C2  0E00               	movlw	0
  5692  0007C4  6E34               	movwf	(___fldiv@grs+1)^0,c
  5693  0007C6  0E00               	movlw	0
  5694  0007C8  6E35               	movwf	(___fldiv@grs+2)^0,c
  5695  0007CA  0E00               	movlw	0
  5696  0007CC  6E36               	movwf	(___fldiv@grs+3)^0,c
  5697  0007CE  0E00               	movlw	0
  5698  0007D0  6E38               	movwf	___fldiv@aexp^0,c
  5699  0007D2  EF2D  F004         	goto	l1266
  5700  0007D6                     l4043:
  5701  0007D6  FFFF               	dw	65535	; assembler added errata NOP
  5702  0007D8  5038               	movf	___fldiv@aexp^0,w,c
  5703  0007DA  B4D8               	btfsc	status,2,c
  5704  0007DC  EFF2  F003         	goto	u3061
  5705  0007E0  EFF5  F003         	goto	u3060
  5706  0007E4                     u3061:
  5707  0007E4  FFFF               	dw	65535	; assembler added errata NOP
  5708  0007E6  EF10  F004         	goto	l4051
  5709  0007EA                     u3060:
  5710  0007EA  FFFF               	dw	65535	; assembler added errata NOP
  5711  0007EC  90D8               	bcf	status,0,c
  5712  0007EE  362C               	rlcf	___fldiv@rem^0,f,c
  5713  0007F0  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5714  0007F2  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5715  0007F4  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5716  0007F6  90D8               	bcf	status,0,c
  5717  0007F8  3620               	rlcf	___fldiv@b^0,f,c
  5718  0007FA  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5719  0007FC  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5720  0007FE  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5721  000800  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5722  000802  EF05  F004         	goto	u3071
  5723  000806  EF08  F004         	goto	u3070
  5724  00080A                     u3071:
  5725  00080A  FFFF               	dw	65535	; assembler added errata NOP
  5726  00080C  EF0A  F004         	goto	l1269
  5727  000810                     u3070:
  5728  000810  FFFF               	dw	65535	; assembler added errata NOP
  5729  000812  8020               	bsf	___fldiv@b^0,0,c
  5730  000814                     l1269:
  5731  000814  FFFF               	dw	65535	; assembler added errata NOP
  5732  000816  90D8               	bcf	status,0,c
  5733  000818  3633               	rlcf	___fldiv@grs^0,f,c
  5734  00081A  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5735  00081C  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5736  00081E  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5737  000820                     l4051:
  5738  000820  FFFF               	dw	65535	; assembler added errata NOP
  5739  000822  5024               	movf	___fldiv@a^0,w,c
  5740  000824  5C2C               	subwf	___fldiv@rem^0,w,c
  5741  000826  5025               	movf	(___fldiv@a+1)^0,w,c
  5742  000828  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5743  00082A  5026               	movf	(___fldiv@a+2)^0,w,c
  5744  00082C  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5745  00082E  5027               	movf	(___fldiv@a+3)^0,w,c
  5746  000830  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5747  000832  A0D8               	btfss	status,0,c
  5748  000834  EF1E  F004         	goto	u3081
  5749  000838  EF21  F004         	goto	u3080
  5750  00083C                     u3081:
  5751  00083C  FFFF               	dw	65535	; assembler added errata NOP
  5752  00083E  EF2B  F004         	goto	l4057
  5753  000842                     u3080:
  5754  000842  FFFF               	dw	65535	; assembler added errata NOP
  5755  000844  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5756  000846  5024               	movf	___fldiv@a^0,w,c
  5757  000848  5E2C               	subwf	___fldiv@rem^0,f,c
  5758  00084A  5025               	movf	(___fldiv@a+1)^0,w,c
  5759  00084C  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5760  00084E  5026               	movf	(___fldiv@a+2)^0,w,c
  5761  000850  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5762  000852  5027               	movf	(___fldiv@a+3)^0,w,c
  5763  000854  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5764  000856                     l4057:
  5765  000856  FFFF               	dw	65535	; assembler added errata NOP
  5766  000858  2A38               	incf	___fldiv@aexp^0,f,c
  5767  00085A                     l1266:
  5768  00085A  FFFF               	dw	65535	; assembler added errata NOP
  5769  00085C  0E19               	movlw	25
  5770  00085E  6438               	cpfsgt	___fldiv@aexp^0,c
  5771  000860  EF34  F004         	goto	u3091
  5772  000864  EF37  F004         	goto	u3090
  5773  000868                     u3091:
  5774  000868  FFFF               	dw	65535	; assembler added errata NOP
  5775  00086A  EFEB  F003         	goto	l4043
  5776  00086E                     u3090:
  5777  00086E  FFFF               	dw	65535	; assembler added errata NOP
  5778  000870  502C               	movf	___fldiv@rem^0,w,c
  5779  000872  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5780  000874  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5781  000876  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5782  000878  B4D8               	btfsc	status,2,c
  5783  00087A  EF41  F004         	goto	u3101
  5784  00087E  EF44  F004         	goto	u3100
  5785  000882                     u3101:
  5786  000882  FFFF               	dw	65535	; assembler added errata NOP
  5787  000884  EF61  F004         	goto	l4069
  5788  000888                     u3100:
  5789  000888  FFFF               	dw	65535	; assembler added errata NOP
  5790  00088A  8033               	bsf	___fldiv@grs^0,0,c
  5791  00088C  EF61  F004         	goto	l4069
  5792  000890                     l4063:
  5793  000890  FFFF               	dw	65535	; assembler added errata NOP
  5794  000892  90D8               	bcf	status,0,c
  5795  000894  3620               	rlcf	___fldiv@b^0,f,c
  5796  000896  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5797  000898  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5798  00089A  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5799  00089C  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5800  00089E  EF53  F004         	goto	u3111
  5801  0008A2  EF56  F004         	goto	u3110
  5802  0008A6                     u3111:
  5803  0008A6  FFFF               	dw	65535	; assembler added errata NOP
  5804  0008A8  EF58  F004         	goto	l1275
  5805  0008AC                     u3110:
  5806  0008AC  FFFF               	dw	65535	; assembler added errata NOP
  5807  0008AE  8020               	bsf	___fldiv@b^0,0,c
  5808  0008B0                     l1275:
  5809  0008B0  FFFF               	dw	65535	; assembler added errata NOP
  5810  0008B2  90D8               	bcf	status,0,c
  5811  0008B4  3633               	rlcf	___fldiv@grs^0,f,c
  5812  0008B6  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5813  0008B8  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5814  0008BA  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5815  0008BC  0631               	decf	___fldiv@new_exp^0,f,c
  5816  0008BE  A0D8               	btfss	status,0,c
  5817  0008C0  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5818  0008C2                     l4069:
  5819  0008C2  FFFF               	dw	65535	; assembler added errata NOP
  5820  0008C4  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5821  0008C6  EF67  F004         	goto	u3121
  5822  0008CA  EF6A  F004         	goto	u3120
  5823  0008CE                     u3121:
  5824  0008CE  FFFF               	dw	65535	; assembler added errata NOP
  5825  0008D0  EF48  F004         	goto	l4063
  5826  0008D4                     u3120:
  5827  0008D4  FFFF               	dw	65535	; assembler added errata NOP
  5828  0008D6  0E00               	movlw	0
  5829  0008D8  6E38               	movwf	___fldiv@aexp^0,c
  5830  0008DA  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5831  0008DC  EF72  F004         	goto	u3131
  5832  0008E0  EF75  F004         	goto	u3130
  5833  0008E4                     u3131:
  5834  0008E4  FFFF               	dw	65535	; assembler added errata NOP
  5835  0008E6  EFA0  F004         	goto	l1277
  5836  0008EA                     u3130:
  5837  0008EA  FFFF               	dw	65535	; assembler added errata NOP
  5838  0008EC  0EFF               	movlw	255
  5839  0008EE  1433               	andwf	___fldiv@grs^0,w,c
  5840  0008F0  6E28               	movwf	??___fldiv^0,c
  5841  0008F2  0EFF               	movlw	255
  5842  0008F4  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5843  0008F6  6E29               	movwf	(??___fldiv+1)^0,c
  5844  0008F8  0EFF               	movlw	255
  5845  0008FA  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5846  0008FC  6E2A               	movwf	(??___fldiv+2)^0,c
  5847  0008FE  0E7F               	movlw	127
  5848  000900  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5849  000902  6E2B               	movwf	(??___fldiv+3)^0,c
  5850  000904  5028               	movf	??___fldiv^0,w,c
  5851  000906  1029               	iorwf	(??___fldiv+1)^0,w,c
  5852  000908  102A               	iorwf	(??___fldiv+2)^0,w,c
  5853  00090A  102B               	iorwf	(??___fldiv+3)^0,w,c
  5854  00090C  B4D8               	btfsc	status,2,c
  5855  00090E  EF8B  F004         	goto	u3141
  5856  000912  EF8E  F004         	goto	u3140
  5857  000916                     u3141:
  5858  000916  FFFF               	dw	65535	; assembler added errata NOP
  5859  000918  EF94  F004         	goto	l1278
  5860  00091C                     u3140:
  5861  00091C  FFFF               	dw	65535	; assembler added errata NOP
  5862  00091E                     l4077:
  5863  00091E  FFFF               	dw	65535	; assembler added errata NOP
  5864  000920  0E01               	movlw	1
  5865  000922  6E38               	movwf	___fldiv@aexp^0,c
  5866  000924  EFA0  F004         	goto	l1277
  5867  000928                     l1278:
  5868  000928  FFFF               	dw	65535	; assembler added errata NOP
  5869  00092A  A020               	btfss	___fldiv@b^0,0,c
  5870  00092C  EF9A  F004         	goto	u3151
  5871  000930  EF9D  F004         	goto	u3150
  5872  000934                     u3151:
  5873  000934  FFFF               	dw	65535	; assembler added errata NOP
  5874  000936  EFA0  F004         	goto	l1277
  5875  00093A                     u3150:
  5876  00093A  FFFF               	dw	65535	; assembler added errata NOP
  5877  00093C  EF8F  F004         	goto	l4077
  5878  000940                     l1277:
  5879  000940  FFFF               	dw	65535	; assembler added errata NOP
  5880  000942  5038               	movf	___fldiv@aexp^0,w,c
  5881  000944  B4D8               	btfsc	status,2,c
  5882  000946  EFA7  F004         	goto	u3161
  5883  00094A  EFAA  F004         	goto	u3160
  5884  00094E                     u3161:
  5885  00094E  FFFF               	dw	65535	; assembler added errata NOP
  5886  000950  EFD1  F004         	goto	l4089
  5887  000954                     u3160:
  5888  000954  FFFF               	dw	65535	; assembler added errata NOP
  5889  000956  0E01               	movlw	1
  5890  000958  2620               	addwf	___fldiv@b^0,f,c
  5891  00095A  0E00               	movlw	0
  5892  00095C  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5893  00095E  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5894  000960  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5895  000962  A023               	btfss	(___fldiv@b+3)^0,0,c
  5896  000964  EFB6  F004         	goto	u3171
  5897  000968  EFB9  F004         	goto	u3170
  5898  00096C                     u3171:
  5899  00096C  FFFF               	dw	65535	; assembler added errata NOP
  5900  00096E  EFD1  F004         	goto	l4089
  5901  000972                     u3170:
  5902  000972  FFFF               	dw	65535	; assembler added errata NOP
  5903  000974  C020  F028         	movff	___fldiv@b,??___fldiv
  5904  000978  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5905  00097C  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5906  000980  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5907  000984  342B               	rlcf	(??___fldiv+3)^0,w,c
  5908  000986  322B               	rrcf	(??___fldiv+3)^0,f,c
  5909  000988  322A               	rrcf	(??___fldiv+2)^0,f,c
  5910  00098A  3229               	rrcf	(??___fldiv+1)^0,f,c
  5911  00098C  3228               	rrcf	??___fldiv^0,f,c
  5912  00098E  C028  F020         	movff	??___fldiv,___fldiv@b
  5913  000992  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5914  000996  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5915  00099A  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5916  00099E  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5917  0009A0  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5918  0009A2                     l4089:
  5919  0009A2  FFFF               	dw	65535	; assembler added errata NOP
  5920  0009A4  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5921  0009A6  EFDD  F004         	goto	u3181
  5922  0009AA  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5923  0009AC  E109               	bnz	u3180
  5924  0009AE  2831               	incf	___fldiv@new_exp^0,w,c
  5925  0009B0  A0D8               	btfss	status,0,c
  5926  0009B2  EFDD  F004         	goto	u3181
  5927  0009B6  EFE0  F004         	goto	u3180
  5928  0009BA                     u3181:
  5929  0009BA  FFFF               	dw	65535	; assembler added errata NOP
  5930  0009BC  EFEC  F004         	goto	l4093
  5931  0009C0                     u3180:
  5932  0009C0  FFFF               	dw	65535	; assembler added errata NOP
  5933  0009C2  0E00               	movlw	0
  5934  0009C4  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5935  0009C6  6831               	setf	___fldiv@new_exp^0,c
  5936  0009C8  0E00               	movlw	0
  5937  0009CA  6E20               	movwf	___fldiv@b^0,c
  5938  0009CC  0E00               	movlw	0
  5939  0009CE  6E21               	movwf	(___fldiv@b+1)^0,c
  5940  0009D0  0E00               	movlw	0
  5941  0009D2  6E22               	movwf	(___fldiv@b+2)^0,c
  5942  0009D4  0E00               	movlw	0
  5943  0009D6  6E23               	movwf	(___fldiv@b+3)^0,c
  5944  0009D8                     l4093:
  5945  0009D8  FFFF               	dw	65535	; assembler added errata NOP
  5946  0009DA  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5947  0009DC  EFFB  F004         	goto	u3190
  5948  0009E0  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5949  0009E2  E106               	bnz	u3191
  5950  0009E4  0431               	decf	___fldiv@new_exp^0,w,c
  5951  0009E6  B0D8               	btfsc	status,0,c
  5952  0009E8  EFF8  F004         	goto	u3191
  5953  0009EC  EFFB  F004         	goto	u3190
  5954  0009F0                     u3191:
  5955  0009F0  FFFF               	dw	65535	; assembler added errata NOP
  5956  0009F2  EF0A  F005         	goto	l4097
  5957  0009F6                     u3190:
  5958  0009F6  FFFF               	dw	65535	; assembler added errata NOP
  5959  0009F8  0E00               	movlw	0
  5960  0009FA  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5961  0009FC  0E00               	movlw	0
  5962  0009FE  6E31               	movwf	___fldiv@new_exp^0,c
  5963  000A00  0E00               	movlw	0
  5964  000A02  6E20               	movwf	___fldiv@b^0,c
  5965  000A04  0E00               	movlw	0
  5966  000A06  6E21               	movwf	(___fldiv@b+1)^0,c
  5967  000A08  0E00               	movlw	0
  5968  000A0A  6E22               	movwf	(___fldiv@b+2)^0,c
  5969  000A0C  0E00               	movlw	0
  5970  000A0E  6E23               	movwf	(___fldiv@b+3)^0,c
  5971  000A10  0E00               	movlw	0
  5972  000A12  6E30               	movwf	___fldiv@sign^0,c
  5973  000A14                     l4097:
  5974  000A14  FFFF               	dw	65535	; assembler added errata NOP
  5975  000A16  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5976  000A1A  A037               	btfss	___fldiv@bexp^0,0,c
  5977  000A1C  EF12  F005         	goto	u3201
  5978  000A20  EF15  F005         	goto	u3200
  5979  000A24                     u3201:
  5980  000A24  FFFF               	dw	65535	; assembler added errata NOP
  5981  000A26  EF19  F005         	goto	l4103
  5982  000A2A                     u3200:
  5983  000A2A  FFFF               	dw	65535	; assembler added errata NOP
  5984  000A2C  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5985  000A2E  EF1B  F005         	goto	l4105
  5986  000A32                     l4103:
  5987  000A32  FFFF               	dw	65535	; assembler added errata NOP
  5988  000A34  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5989  000A36                     l4105:
  5990  000A36  FFFF               	dw	65535	; assembler added errata NOP
  5991  000A38  90D8               	bcf	status,0,c
  5992  000A3A  3037               	rrcf	___fldiv@bexp^0,w,c
  5993  000A3C  6E23               	movwf	(___fldiv@b+3)^0,c
  5994  000A3E  EF9F  F003         	goto	l4019
  5995  000A42                     l1264:
  5996  000A42  FFFF               	dw	65535	; assembler added errata NOP
  5997  000A44  0012               	return		;funcret
  5998  000A46  FFFF               	dw	65535	; errata NOP
  5999  000A48                     __end_of___fldiv:
  6000                           	callstack 0
  6001                           
  6002 ;; *************** function _releaseObj *****************
  6003 ;; Defined at:
  6004 ;;		line 819 in file "motors.c"
  6005 ;; Parameters:    Size  Location     Type
  6006 ;;		None
  6007 ;; Auto vars:     Size  Location     Type
  6008 ;;		None
  6009 ;; Return value:  Size  Location     Type
  6010 ;;                  1    wreg      void 
  6011 ;; Registers used:
  6012 ;;		wreg, status,2, status,0, cstack
  6013 ;; Tracked objects:
  6014 ;;		On entry : 0/0
  6015 ;;		On exit  : 0/0
  6016 ;;		Unchanged: 0/0
  6017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6018 ;;      Params:         0       0       0       0       0       0       0
  6019 ;;      Locals:         0       0       0       0       0       0       0
  6020 ;;      Temps:          0       0       0       0       0       0       0
  6021 ;;      Totals:         0       0       0       0       0       0       0
  6022 ;;Total ram usage:        0 bytes
  6023 ;; Hardware stack levels used:    1
  6024 ;; Hardware stack levels required when called:    5
  6025 ;; This function calls:
  6026 ;;		_resetTM2_Temp
  6027 ;;		_stepMade
  6028 ;; This function is called by:
  6029 ;;		_executeData
  6030 ;; This function uses a non-reentrant model
  6031 ;;
  6032                           
  6033                           	psect	text30
  6034  0027CA                     __ptext30:
  6035                           	callstack 0
  6036  0027CA                     _releaseObj:
  6037                           	callstack 0
  6038  0027CA  FFFF               	dw	65535	; assembler added errata NOP
  6039  0027CC                     
  6040                           ;motors.c: 820:     LATDbits.LATD1 = 0;
  6041  0027CC  928C               	bcf	140,1,c	;volatile
  6042                           
  6043                           ;motors.c: 823:     T2CONbits.TMR2ON = 1;
  6044  0027CE  84CA               	bsf	202,2,c	;volatile
  6045  0027D0                     l4461:
  6046  0027D0  FFFF               	dw	65535	; assembler added errata NOP
  6047  0027D2  EC4A  F014         	call	_stepMade	;wreg free
  6048  0027D6  5012               	movf	?_stepMade^0,w,c
  6049  0027D8  1013               	iorwf	(?_stepMade+1)^0,w,c
  6050  0027DA  B4D8               	btfsc	status,2,c
  6051  0027DC  EFF2  F013         	goto	u3801
  6052  0027E0  EFF5  F013         	goto	u3800
  6053  0027E4                     u3801:
  6054  0027E4  FFFF               	dw	65535	; assembler added errata NOP
  6055  0027E6  EFE8  F013         	goto	l4461
  6056  0027EA                     u3800:
  6057  0027EA  FFFF               	dw	65535	; assembler added errata NOP
  6058  0027EC                     
  6059                           ;motors.c: 825:     T2CONbits.TMR2ON = 0;
  6060  0027EC  94CA               	bcf	202,2,c	;volatile
  6061  0027EE                     
  6062                           ;motors.c: 826:     TMR2 = 0;
  6063  0027EE  0E00               	movlw	0
  6064  0027F0  6ECC               	movwf	204,c	;volatile
  6065  0027F2                     
  6066                           ;motors.c: 829:     resetTM2_Temp();
  6067  0027F2  EC66  F014         	call	_resetTM2_Temp	;wreg free
  6068  0027F6  0012               	return		;funcret
  6069  0027F8  FFFF               	dw	65535	; errata NOP
  6070  0027FA                     __end_of_releaseObj:
  6071                           	callstack 0
  6072                           
  6073 ;; *************** function _printStatus *****************
  6074 ;; Defined at:
  6075 ;;		line 176 in file "usart.c"
  6076 ;; Parameters:    Size  Location     Type
  6077 ;;  status          1    wreg     unsigned char 
  6078 ;; Auto vars:     Size  Location     Type
  6079 ;;  status          1   23[COMRAM] unsigned char 
  6080 ;; Return value:  Size  Location     Type
  6081 ;;                  1    wreg      void 
  6082 ;; Registers used:
  6083 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6084 ;; Tracked objects:
  6085 ;;		On entry : 0/0
  6086 ;;		On exit  : 0/0
  6087 ;;		Unchanged: 0/0
  6088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6089 ;;      Params:         0       0       0       0       0       0       0
  6090 ;;      Locals:         1       0       0       0       0       0       0
  6091 ;;      Temps:          2       0       0       0       0       0       0
  6092 ;;      Totals:         3       0       0       0       0       0       0
  6093 ;;Total ram usage:        3 bytes
  6094 ;; Hardware stack levels used:    1
  6095 ;; Hardware stack levels required when called:    5
  6096 ;; This function calls:
  6097 ;;		_uartTx
  6098 ;; This function is called by:
  6099 ;;		_main
  6100 ;;		_executeData
  6101 ;; This function uses a non-reentrant model
  6102 ;;
  6103                           
  6104                           	psect	text31
  6105  0019B8                     __ptext31:
  6106                           	callstack 0
  6107  0019B8                     _printStatus:
  6108                           	callstack 0
  6109  0019B8  FFFF               	dw	65535	; assembler added errata NOP
  6110                           
  6111                           ;incstack = 0
  6112                           ;printStatus@status stored from wreg
  6113  0019BA  6E18               	movwf	printStatus@status^0,c
  6114  0019BC                     
  6115                           ;usart.c: 177:     switch(status){
  6116  0019BC  EF59  F00D         	goto	l4519
  6117  0019C0                     l4495:
  6118  0019C0  FFFF               	dw	65535	; assembler added errata NOP
  6119                           
  6120                           ;usart.c: 179:             uartTx(&start[0], sizeof(start));
  6121  0019C2  0E9A               	movlw	low _start
  6122  0019C4  6E12               	movwf	uartTx@ptr^0,c
  6123  0019C6  0E01               	movlw	high _start
  6124  0019C8  6E13               	movwf	(uartTx@ptr+1)^0,c
  6125  0019CA  0E1B               	movlw	27
  6126  0019CC  6E14               	movwf	uartTx@length^0,c
  6127  0019CE  EC79  F013         	call	_uartTx	;wreg free
  6128                           
  6129                           ;usart.c: 180:             break;
  6130  0019D2  EF94  F00D         	goto	l607
  6131  0019D6                     l4497:
  6132  0019D6  FFFF               	dw	65535	; assembler added errata NOP
  6133                           
  6134                           ;usart.c: 182:             uartTx(&movingToPick[0], sizeof(movingToPick));
  6135  0019D8  0E7D               	movlw	low _movingToPick
  6136  0019DA  6E12               	movwf	uartTx@ptr^0,c
  6137  0019DC  0E01               	movlw	high _movingToPick
  6138  0019DE  6E13               	movwf	(uartTx@ptr+1)^0,c
  6139  0019E0  0E1D               	movlw	29
  6140  0019E2  6E14               	movwf	uartTx@length^0,c
  6141  0019E4  EC79  F013         	call	_uartTx	;wreg free
  6142                           
  6143                           ;usart.c: 183:             break;
  6144  0019E8  EF94  F00D         	goto	l607
  6145  0019EC                     l4499:
  6146  0019EC  FFFF               	dw	65535	; assembler added errata NOP
  6147                           
  6148                           ;usart.c: 185:             uartTx(&pickingTheOBJ[0], sizeof(pickingTheOBJ));
  6149  0019EE  0E90               	movlw	low _pickingTheOBJ
  6150  0019F0  6E12               	movwf	uartTx@ptr^0,c
  6151  0019F2  0E00               	movlw	high _pickingTheOBJ
  6152  0019F4  6E13               	movwf	(uartTx@ptr+1)^0,c
  6153  0019F6  0E14               	movlw	20
  6154  0019F8  6E14               	movwf	uartTx@length^0,c
  6155  0019FA  EC79  F013         	call	_uartTx	;wreg free
  6156                           
  6157                           ;usart.c: 186:             break;
  6158  0019FE  EF94  F00D         	goto	l607
  6159  001A02                     l4501:
  6160  001A02  FFFF               	dw	65535	; assembler added errata NOP
  6161                           
  6162                           ;usart.c: 188:             uartTx(&OBJPicked[0], sizeof(OBJPicked));
  6163  001A04  0ED5               	movlw	low _OBJPicked
  6164  001A06  6E12               	movwf	uartTx@ptr^0,c
  6165  001A08  0E00               	movlw	high _OBJPicked
  6166  001A0A  6E13               	movwf	(uartTx@ptr+1)^0,c
  6167  001A0C  0E0F               	movlw	15
  6168  001A0E  6E14               	movwf	uartTx@length^0,c
  6169  001A10  EC79  F013         	call	_uartTx	;wreg free
  6170                           
  6171                           ;usart.c: 189:             break;
  6172  001A14  EF94  F00D         	goto	l607
  6173  001A18                     l4503:
  6174  001A18  FFFF               	dw	65535	; assembler added errata NOP
  6175                           
  6176                           ;usart.c: 191:             uartTx(&liftingTheArm[0], sizeof(liftingTheArm));
  6177  001A1A  0EB5               	movlw	low _liftingTheArm
  6178  001A1C  6E12               	movwf	uartTx@ptr^0,c
  6179  001A1E  0E00               	movlw	high _liftingTheArm
  6180  001A20  6E13               	movwf	(uartTx@ptr+1)^0,c
  6181  001A22  0E11               	movlw	17
  6182  001A24  6E14               	movwf	uartTx@length^0,c
  6183  001A26  EC79  F013         	call	_uartTx	;wreg free
  6184                           
  6185                           ;usart.c: 192:             break;
  6186  001A2A  EF94  F00D         	goto	l607
  6187  001A2E                     l4505:
  6188  001A2E  FFFF               	dw	65535	; assembler added errata NOP
  6189                           
  6190                           ;usart.c: 194:             uartTx(&movingToPlace[0], sizeof(movingToPlace));
  6191  001A30  0E5F               	movlw	low _movingToPlace
  6192  001A32  6E12               	movwf	uartTx@ptr^0,c
  6193  001A34  0E01               	movlw	high _movingToPlace
  6194  001A36  6E13               	movwf	(uartTx@ptr+1)^0,c
  6195  001A38  0E1E               	movlw	30
  6196  001A3A  6E14               	movwf	uartTx@length^0,c
  6197  001A3C  EC79  F013         	call	_uartTx	;wreg free
  6198                           
  6199                           ;usart.c: 195:             break;
  6200  001A40  EF94  F00D         	goto	l607
  6201  001A44                     l4507:
  6202  001A44  FFFF               	dw	65535	; assembler added errata NOP
  6203                           
  6204                           ;usart.c: 197:             uartTx(&rotateOBJ[0], sizeof(rotateOBJ));
  6205  001A46  0ECD               	movlw	low _rotateOBJ
  6206  001A48  6E12               	movwf	uartTx@ptr^0,c
  6207  001A4A  0E01               	movlw	high _rotateOBJ
  6208  001A4C  6E13               	movwf	(uartTx@ptr+1)^0,c
  6209  001A4E  0E15               	movlw	21
  6210  001A50  6E14               	movwf	uartTx@length^0,c
  6211  001A52  EC79  F013         	call	_uartTx	;wreg free
  6212                           
  6213                           ;usart.c: 198:             break;
  6214  001A56  EF94  F00D         	goto	l607
  6215  001A5A                     l4509:
  6216  001A5A  FFFF               	dw	65535	; assembler added errata NOP
  6217                           
  6218                           ;usart.c: 200:             uartTx(&placeTheOBJ[0], sizeof(placeTheOBJ));
  6219  001A5C  0EE2               	movlw	low _placeTheOBJ
  6220  001A5E  6E12               	movwf	uartTx@ptr^0,c
  6221  001A60  0E01               	movlw	high _placeTheOBJ
  6222  001A62  6E13               	movwf	(uartTx@ptr+1)^0,c
  6223  001A64  0E14               	movlw	20
  6224  001A66  6E14               	movwf	uartTx@length^0,c
  6225  001A68  EC79  F013         	call	_uartTx	;wreg free
  6226                           
  6227                           ;usart.c: 201:             break;
  6228  001A6C  EF94  F00D         	goto	l607
  6229  001A70                     l4511:
  6230  001A70  FFFF               	dw	65535	; assembler added errata NOP
  6231                           
  6232                           ;usart.c: 203:             uartTx(&OBJRelease[0], sizeof(OBJRelease));
  6233  001A72  0EA4               	movlw	low _OBJRelease
  6234  001A74  6E12               	movwf	uartTx@ptr^0,c
  6235  001A76  0E00               	movlw	high _OBJRelease
  6236  001A78  6E13               	movwf	(uartTx@ptr+1)^0,c
  6237  001A7A  0E11               	movlw	17
  6238  001A7C  6E14               	movwf	uartTx@length^0,c
  6239  001A7E  EC79  F013         	call	_uartTx	;wreg free
  6240                           
  6241                           ;usart.c: 204:             break;
  6242  001A82  EF94  F00D         	goto	l607
  6243  001A86                     l4513:
  6244  001A86  FFFF               	dw	65535	; assembler added errata NOP
  6245                           
  6246                           ;usart.c: 206:             uartTx(&resetPos[0], sizeof(resetPos));
  6247  001A88  0E21               	movlw	low _resetPos
  6248  001A8A  6E12               	movwf	uartTx@ptr^0,c
  6249  001A8C  0E01               	movlw	high _resetPos
  6250  001A8E  6E13               	movwf	(uartTx@ptr+1)^0,c
  6251  001A90  0E20               	movlw	32
  6252  001A92  6E14               	movwf	uartTx@length^0,c
  6253  001A94  EC79  F013         	call	_uartTx	;wreg free
  6254                           
  6255                           ;usart.c: 207:             break;
  6256  001A98  EF94  F00D         	goto	l607
  6257  001A9C                     l4515:
  6258  001A9C  FFFF               	dw	65535	; assembler added errata NOP
  6259                           
  6260                           ;usart.c: 209:             uartTx(&ready[0], sizeof(ready));
  6261  001A9E  0EC6               	movlw	low _ready
  6262  001AA0  6E12               	movwf	uartTx@ptr^0,c
  6263  001AA2  0E00               	movlw	high _ready
  6264  001AA4  6E13               	movwf	(uartTx@ptr+1)^0,c
  6265  001AA6  0E0F               	movlw	15
  6266  001AA8  6E14               	movwf	uartTx@length^0,c
  6267  001AAA  EC79  F013         	call	_uartTx	;wreg free
  6268  001AAE  EF94  F00D         	goto	l607
  6269  001AB2                     l4519:
  6270  001AB2  FFFF               	dw	65535	; assembler added errata NOP
  6271  001AB4  5018               	movf	printStatus@status^0,w,c
  6272  001AB6  6E16               	movwf	??_printStatus^0,c
  6273  001AB8  6A17               	clrf	(??_printStatus+1)^0,c
  6274                           
  6275                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6276                           ; Switch size 1, requested type "simple"
  6277                           ; Number of cases is 1, Range of values is 0 to 0
  6278                           ; switch strategies available:
  6279                           ; Name         Instructions Cycles
  6280                           ; simple_byte            4     3 (average)
  6281                           ;	Chosen strategy is simple_byte
  6282  001ABA  5017               	movf	(??_printStatus+1)^0,w,c
  6283  001ABC  0A00               	xorlw	0	; case 0
  6284  001ABE  B4D8               	btfsc	status,2,c
  6285  001AC0  EF64  F00D         	goto	l5091
  6286  001AC4  EF94  F00D         	goto	l607
  6287  001AC8                     l5091:
  6288  001AC8  FFFF               	dw	65535	; assembler added errata NOP
  6289                           
  6290                           ; Switch size 1, requested type "simple"
  6291                           ; Number of cases is 11, Range of values is 0 to 10
  6292                           ; switch strategies available:
  6293                           ; Name         Instructions Cycles
  6294                           ; simple_byte           34    18 (average)
  6295                           ;	Chosen strategy is simple_byte
  6296  001ACA  5016               	movf	??_printStatus^0,w,c
  6297  001ACC  0A00               	xorlw	0	; case 0
  6298  001ACE  B4D8               	btfsc	status,2,c
  6299  001AD0  EFE0  F00C         	goto	l4495
  6300  001AD4  0A01               	xorlw	1	; case 1
  6301  001AD6  B4D8               	btfsc	status,2,c
  6302  001AD8  EFEB  F00C         	goto	l4497
  6303  001ADC  0A03               	xorlw	3	; case 2
  6304  001ADE  B4D8               	btfsc	status,2,c
  6305  001AE0  EFF6  F00C         	goto	l4499
  6306  001AE4  0A01               	xorlw	1	; case 3
  6307  001AE6  B4D8               	btfsc	status,2,c
  6308  001AE8  EF01  F00D         	goto	l4501
  6309  001AEC  0A07               	xorlw	7	; case 4
  6310  001AEE  B4D8               	btfsc	status,2,c
  6311  001AF0  EF0C  F00D         	goto	l4503
  6312  001AF4  0A01               	xorlw	1	; case 5
  6313  001AF6  B4D8               	btfsc	status,2,c
  6314  001AF8  EF17  F00D         	goto	l4505
  6315  001AFC  0A03               	xorlw	3	; case 6
  6316  001AFE  B4D8               	btfsc	status,2,c
  6317  001B00  EF22  F00D         	goto	l4507
  6318  001B04  0A01               	xorlw	1	; case 7
  6319  001B06  B4D8               	btfsc	status,2,c
  6320  001B08  EF2D  F00D         	goto	l4509
  6321  001B0C  0A0F               	xorlw	15	; case 8
  6322  001B0E  B4D8               	btfsc	status,2,c
  6323  001B10  EF38  F00D         	goto	l4511
  6324  001B14  0A01               	xorlw	1	; case 9
  6325  001B16  B4D8               	btfsc	status,2,c
  6326  001B18  EF43  F00D         	goto	l4513
  6327  001B1C  0A03               	xorlw	3	; case 10
  6328  001B1E  B4D8               	btfsc	status,2,c
  6329  001B20  EF4E  F00D         	goto	l4515
  6330  001B24  EF94  F00D         	goto	l607
  6331  001B28                     l607:
  6332  001B28  FFFF               	dw	65535	; assembler added errata NOP
  6333  001B2A  0012               	return		;funcret
  6334  001B2C  FFFF               	dw	65535	; errata NOP
  6335  001B2E                     __end_of_printStatus:
  6336                           	callstack 0
  6337                           
  6338 ;; *************** function _uartTx *****************
  6339 ;; Defined at:
  6340 ;;		line 220 in file "usart.c"
  6341 ;; Parameters:    Size  Location     Type
  6342 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  6343 ;;		 -> ready(15), resetPos(32), OBJRelease(17), placeTheOBJ(20), 
  6344 ;;		 -> rotateOBJ(21), movingToPlace(30), liftingTheArm(17), OBJPicked(15), 
  6345 ;;		 -> pickingTheOBJ(20), movingToPick(29), start(27), errString_Command(24), 
  6346 ;;		 -> errString_Fatal(39), errString_PointZ(53), errString_Bound(33), errString_Point(41), 
  6347 ;;		 -> errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  6348 ;;  length          1   19[COMRAM] unsigned char 
  6349 ;; Auto vars:     Size  Location     Type
  6350 ;;  i               1   20[COMRAM] unsigned char 
  6351 ;; Return value:  Size  Location     Type
  6352 ;;                  1    wreg      void 
  6353 ;; Registers used:
  6354 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6355 ;; Tracked objects:
  6356 ;;		On entry : 0/0
  6357 ;;		On exit  : 0/0
  6358 ;;		Unchanged: 0/0
  6359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6360 ;;      Params:         3       0       0       0       0       0       0
  6361 ;;      Locals:         1       0       0       0       0       0       0
  6362 ;;      Temps:          0       0       0       0       0       0       0
  6363 ;;      Totals:         4       0       0       0       0       0       0
  6364 ;;Total ram usage:        4 bytes
  6365 ;; Hardware stack levels used:    1
  6366 ;; Hardware stack levels required when called:    4
  6367 ;; This function calls:
  6368 ;;		Nothing
  6369 ;; This function is called by:
  6370 ;;		_printError
  6371 ;;		_printStatus
  6372 ;; This function uses a non-reentrant model
  6373 ;;
  6374                           
  6375                           	psect	text32
  6376  0026F2                     __ptext32:
  6377                           	callstack 0
  6378  0026F2                     _uartTx:
  6379                           	callstack 0
  6380  0026F2  FFFF               	dw	65535	; assembler added errata NOP
  6381  0026F4                     
  6382                           ;usart.c: 220: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 221: {;usa
      +                          rt.c: 223:     for(char i = 1; i < length; i++){
  6383  0026F4  0E01               	movlw	1
  6384  0026F6  6E15               	movwf	uartTx@i^0,c
  6385  0026F8  EF92  F013         	goto	l3973
  6386  0026FC                     l3969:
  6387  0026FC  FFFF               	dw	65535	; assembler added errata NOP
  6388                           
  6389                           ;usart.c: 225:         TXREG = *ptr;
  6390  0026FE  C012  FFD9         	movff	uartTx@ptr,fsr2l
  6391  002702  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  6392  002706  50DF               	movf	indf2,w,c
  6393  002708  6EAD               	movwf	173,c	;volatile
  6394  00270A                     l612:
  6395  00270A  FFFF               	dw	65535	; assembler added errata NOP
  6396  00270C  A2AC               	btfss	172,1,c	;volatile
  6397  00270E  EF8B  F013         	goto	u2961
  6398  002712  EF8E  F013         	goto	u2960
  6399  002716                     u2961:
  6400  002716  FFFF               	dw	65535	; assembler added errata NOP
  6401  002718  EF85  F013         	goto	l612
  6402  00271C                     u2960:
  6403  00271C  FFFF               	dw	65535	; assembler added errata NOP
  6404  00271E                     
  6405                           ;usart.c: 229:         ptr++;
  6406  00271E  4A12               	infsnz	uartTx@ptr^0,f,c
  6407  002720  2A13               	incf	(uartTx@ptr+1)^0,f,c
  6408                           
  6409                           ;usart.c: 230:     }
  6410  002722  2A15               	incf	uartTx@i^0,f,c
  6411  002724                     l3973:
  6412  002724  FFFF               	dw	65535	; assembler added errata NOP
  6413  002726  5014               	movf	uartTx@length^0,w,c
  6414  002728  5C15               	subwf	uartTx@i^0,w,c
  6415  00272A  A0D8               	btfss	status,0,c
  6416  00272C  EF9A  F013         	goto	u2971
  6417  002730  EF9D  F013         	goto	u2970
  6418  002734                     u2971:
  6419  002734  FFFF               	dw	65535	; assembler added errata NOP
  6420  002736  EF7E  F013         	goto	l3969
  6421  00273A                     u2970:
  6422  00273A  FFFF               	dw	65535	; assembler added errata NOP
  6423  00273C  0012               	return		;funcret
  6424  00273E  FFFF               	dw	65535	; errata NOP
  6425  002740                     __end_of_uartTx:
  6426                           	callstack 0
  6427                           
  6428 ;; *************** function _pickObject *****************
  6429 ;; Defined at:
  6430 ;;		line 802 in file "motors.c"
  6431 ;; Parameters:    Size  Location     Type
  6432 ;;		None
  6433 ;; Auto vars:     Size  Location     Type
  6434 ;;		None
  6435 ;; Return value:  Size  Location     Type
  6436 ;;                  1    wreg      void 
  6437 ;; Registers used:
  6438 ;;		wreg, status,2, status,0, cstack
  6439 ;; Tracked objects:
  6440 ;;		On entry : 0/0
  6441 ;;		On exit  : 0/0
  6442 ;;		Unchanged: 0/0
  6443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6444 ;;      Params:         0       0       0       0       0       0       0
  6445 ;;      Locals:         0       0       0       0       0       0       0
  6446 ;;      Temps:          0       0       0       0       0       0       0
  6447 ;;      Totals:         0       0       0       0       0       0       0
  6448 ;;Total ram usage:        0 bytes
  6449 ;; Hardware stack levels used:    1
  6450 ;; Hardware stack levels required when called:    5
  6451 ;; This function calls:
  6452 ;;		_resetTM2_Temp
  6453 ;;		_stepMade
  6454 ;; This function is called by:
  6455 ;;		_executeData
  6456 ;; This function uses a non-reentrant model
  6457 ;;
  6458                           
  6459                           	psect	text33
  6460  0027FA                     __ptext33:
  6461                           	callstack 0
  6462  0027FA                     _pickObject:
  6463                           	callstack 0
  6464  0027FA  FFFF               	dw	65535	; assembler added errata NOP
  6465  0027FC                     
  6466                           ;motors.c: 803:     LATDbits.LATD1 = 1;
  6467  0027FC  828C               	bsf	140,1,c	;volatile
  6468                           
  6469                           ;motors.c: 806:     T2CONbits.TMR2ON = 1;
  6470  0027FE  84CA               	bsf	202,2,c	;volatile
  6471  002800                     l4453:
  6472  002800  FFFF               	dw	65535	; assembler added errata NOP
  6473  002802  EC4A  F014         	call	_stepMade	;wreg free
  6474  002806  5012               	movf	?_stepMade^0,w,c
  6475  002808  1013               	iorwf	(?_stepMade+1)^0,w,c
  6476  00280A  B4D8               	btfsc	status,2,c
  6477  00280C  EF0A  F014         	goto	u3791
  6478  002810  EF0D  F014         	goto	u3790
  6479  002814                     u3791:
  6480  002814  FFFF               	dw	65535	; assembler added errata NOP
  6481  002816  EF00  F014         	goto	l4453
  6482  00281A                     u3790:
  6483  00281A  FFFF               	dw	65535	; assembler added errata NOP
  6484  00281C                     
  6485                           ;motors.c: 808:     T2CONbits.TMR2ON = 0;
  6486  00281C  94CA               	bcf	202,2,c	;volatile
  6487  00281E                     
  6488                           ;motors.c: 809:     TMR2 = 0;
  6489  00281E  0E00               	movlw	0
  6490  002820  6ECC               	movwf	204,c	;volatile
  6491  002822                     
  6492                           ;motors.c: 812:     resetTM2_Temp();
  6493  002822  EC66  F014         	call	_resetTM2_Temp	;wreg free
  6494  002826  0012               	return		;funcret
  6495  002828  FFFF               	dw	65535	; errata NOP
  6496  00282A                     __end_of_pickObject:
  6497                           	callstack 0
  6498                           
  6499 ;; *************** function _moveToPoint *****************
  6500 ;; Defined at:
  6501 ;;		line 315 in file "motors.c"
  6502 ;; Parameters:    Size  Location     Type
  6503 ;;  x1              2   20[COMRAM] int 
  6504 ;;  y1              2   22[COMRAM] int 
  6505 ;;  x2              2   24[COMRAM] int 
  6506 ;;  y2              2   26[COMRAM] int 
  6507 ;; Auto vars:     Size  Location     Type
  6508 ;;  keepMovingY     1   33[COMRAM] unsigned char 
  6509 ;;  keepMovingX     1   32[COMRAM] unsigned char 
  6510 ;;  MOT2Directio    1   31[COMRAM] unsigned char 
  6511 ;;  MOT1Directio    1   30[COMRAM] unsigned char 
  6512 ;; Return value:  Size  Location     Type
  6513 ;;                  1    wreg      unsigned char 
  6514 ;; Registers used:
  6515 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6516 ;; Tracked objects:
  6517 ;;		On entry : 0/0
  6518 ;;		On exit  : 0/0
  6519 ;;		Unchanged: 0/0
  6520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6521 ;;      Params:         8       0       0       0       0       0       0
  6522 ;;      Locals:         4       0       0       0       0       0       0
  6523 ;;      Temps:          2       0       0       0       0       0       0
  6524 ;;      Totals:        14       0       0       0       0       0       0
  6525 ;;Total ram usage:       14 bytes
  6526 ;; Hardware stack levels used:    1
  6527 ;; Hardware stack levels required when called:    5
  6528 ;; This function calls:
  6529 ;;		_resetStep
  6530 ;;		_resetTM0_Temp
  6531 ;;		_resetTM2_Temp
  6532 ;;		_stepCounter
  6533 ;;		_stepMade
  6534 ;; This function is called by:
  6535 ;;		_executeData
  6536 ;; This function uses a non-reentrant model
  6537 ;;
  6538                           
  6539                           	psect	text34
  6540  000A48                     __ptext34:
  6541                           	callstack 0
  6542  000A48                     _moveToPoint:
  6543                           	callstack 0
  6544  000A48  FFFF               	dw	65535	; assembler added errata NOP
  6545  000A4A                     
  6546                           ;motors.c: 317:     unsigned char MOT1Direction, MOT2Direction;;motors.c: 337:     if((x
      +                          2 - x1) > 0){
  6547  000A4A  5015               	movf	moveToPoint@x1^0,w,c
  6548  000A4C  5C19               	subwf	moveToPoint@x2^0,w,c
  6549  000A4E  6E1D               	movwf	??_moveToPoint^0,c
  6550  000A50  5016               	movf	(moveToPoint@x1+1)^0,w,c
  6551  000A52  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  6552  000A54  6E1E               	movwf	(??_moveToPoint+1)^0,c
  6553  000A56  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  6554  000A58  EF36  F005         	goto	u3381
  6555  000A5C  501E               	movf	(??_moveToPoint+1)^0,w,c
  6556  000A5E  E109               	bnz	u3380
  6557  000A60  041D               	decf	??_moveToPoint^0,w,c
  6558  000A62  A0D8               	btfss	status,0,c
  6559  000A64  EF36  F005         	goto	u3381
  6560  000A68  EF39  F005         	goto	u3380
  6561  000A6C                     u3381:
  6562  000A6C  FFFF               	dw	65535	; assembler added errata NOP
  6563  000A6E  EF40  F005         	goto	l154
  6564  000A72                     u3380:
  6565  000A72  FFFF               	dw	65535	; assembler added errata NOP
  6566  000A74                     
  6567                           ;motors.c: 338:         motCounter[0][1] = 1;
  6568  000A74  0E01               	movlw	1
  6569  000A76  6E68               	movwf	(_motCounter+1)^0,c
  6570                           
  6571                           ;motors.c: 339:         MOT1Direction = 1;
  6572  000A78  0E01               	movlw	1
  6573  000A7A  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  6574                           
  6575                           ;motors.c: 340:     }else{
  6576  000A7C  EF44  F005         	goto	l4209
  6577  000A80                     l154:
  6578  000A80  FFFF               	dw	65535	; assembler added errata NOP
  6579                           
  6580                           ;motors.c: 341:         motCounter[0][1] = -1;
  6581  000A82  6868               	setf	(_motCounter+1)^0,c
  6582  000A84                     
  6583                           ;motors.c: 342:         MOT1Direction = 0;
  6584  000A84  0E00               	movlw	0
  6585  000A86  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  6586  000A88                     l4209:
  6587  000A88  FFFF               	dw	65535	; assembler added errata NOP
  6588                           
  6589                           ;motors.c: 345:     if((y2 - y1) > 0){
  6590  000A8A  5017               	movf	moveToPoint@y1^0,w,c
  6591  000A8C  5C1B               	subwf	moveToPoint@y2^0,w,c
  6592  000A8E  6E1D               	movwf	??_moveToPoint^0,c
  6593  000A90  5018               	movf	(moveToPoint@y1+1)^0,w,c
  6594  000A92  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  6595  000A94  6E1E               	movwf	(??_moveToPoint+1)^0,c
  6596  000A96  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  6597  000A98  EF56  F005         	goto	u3391
  6598  000A9C  501E               	movf	(??_moveToPoint+1)^0,w,c
  6599  000A9E  E109               	bnz	u3390
  6600  000AA0  041D               	decf	??_moveToPoint^0,w,c
  6601  000AA2  A0D8               	btfss	status,0,c
  6602  000AA4  EF56  F005         	goto	u3391
  6603  000AA8  EF59  F005         	goto	u3390
  6604  000AAC                     u3391:
  6605  000AAC  FFFF               	dw	65535	; assembler added errata NOP
  6606  000AAE  EF60  F005         	goto	l156
  6607  000AB2                     u3390:
  6608  000AB2  FFFF               	dw	65535	; assembler added errata NOP
  6609  000AB4                     
  6610                           ;motors.c: 346:         motCounter[1][1] = 1;
  6611  000AB4  0E01               	movlw	1
  6612  000AB6  6E6A               	movwf	(_motCounter+3)^0,c
  6613                           
  6614                           ;motors.c: 347:         MOT2Direction = 1;
  6615  000AB8  0E01               	movlw	1
  6616  000ABA  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  6617                           
  6618                           ;motors.c: 348:     }else{
  6619  000ABC  EF64  F005         	goto	l157
  6620  000AC0                     l156:
  6621  000AC0  FFFF               	dw	65535	; assembler added errata NOP
  6622                           
  6623                           ;motors.c: 349:         motCounter[1][1] = -1;
  6624  000AC2  686A               	setf	(_motCounter+3)^0,c
  6625  000AC4                     
  6626                           ;motors.c: 350:         MOT2Direction = 0;
  6627  000AC4  0E00               	movlw	0
  6628  000AC6  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  6629  000AC8                     l157:
  6630  000AC8  FFFF               	dw	65535	; assembler added errata NOP
  6631                           
  6632                           ;motors.c: 355:     unsigned char keepMovingX = 1;
  6633  000ACA  0E01               	movlw	1
  6634  000ACC  6E21               	movwf	moveToPoint@keepMovingX^0,c
  6635                           
  6636                           ;motors.c: 356:     unsigned char keepMovingY = 1;
  6637  000ACE  0E01               	movlw	1
  6638  000AD0  6E22               	movwf	moveToPoint@keepMovingY^0,c
  6639  000AD2                     
  6640                           ;motors.c: 359:     T2CONbits.TMR2ON = 1;
  6641  000AD2  84CA               	bsf	202,2,c	;volatile
  6642                           
  6643                           ;motors.c: 361:     tm0Error = 0;
  6644  000AD4  0E00               	movlw	0
  6645  000AD6  6E5A               	movwf	(_tm0Error+1)^0,c
  6646  000AD8  0E00               	movlw	0
  6647  000ADA  6E59               	movwf	_tm0Error^0,c
  6648                           
  6649                           ;motors.c: 362:     tm0Limit = 200;
  6650  000ADC  0EC8               	movlw	200
  6651  000ADE  6E66               	movwf	_tm0Limit^0,c
  6652  000AE0                     
  6653                           ;motors.c: 363:     T0CONbits.TMR0ON = 1;
  6654  000AE0  8ED5               	bsf	213,7,c	;volatile
  6655                           
  6656                           ;motors.c: 365:     while(keepMovingX || keepMovingY){
  6657  000AE2  EFA0  F006         	goto	l4281
  6658  000AE6                     l4219:
  6659  000AE6  FFFF               	dw	65535	; assembler added errata NOP
  6660                           
  6661                           ;motors.c: 368:         if(tm0Error){
  6662  000AE8  5059               	movf	_tm0Error^0,w,c
  6663  000AEA  105A               	iorwf	(_tm0Error+1)^0,w,c
  6664  000AEC  B4D8               	btfsc	status,2,c
  6665  000AEE  EF7B  F005         	goto	u3401
  6666  000AF2  EF7E  F005         	goto	u3400
  6667  000AF6                     u3401:
  6668  000AF6  FFFF               	dw	65535	; assembler added errata NOP
  6669  000AF8  EF85  F005         	goto	l4223
  6670  000AFC                     u3400:
  6671  000AFC  FFFF               	dw	65535	; assembler added errata NOP
  6672  000AFE                     
  6673                           ;motors.c: 374:             tm0Error = 4;
  6674  000AFE  0E00               	movlw	0
  6675  000B00  6E5A               	movwf	(_tm0Error+1)^0,c
  6676  000B02  0E04               	movlw	4
  6677  000B04  6E59               	movwf	_tm0Error^0,c
  6678                           
  6679                           ;motors.c: 375:             break;
  6680  000B06  EFB4  F006         	goto	l161
  6681  000B0A                     l4223:
  6682  000B0A  FFFF               	dw	65535	; assembler added errata NOP
  6683                           
  6684                           ;motors.c: 383:         if(MOT1Direction == 1){
  6685  000B0C  041F               	decf	moveToPoint@MOT1Direction^0,w,c
  6686  000B0E  A4D8               	btfss	status,2,c
  6687  000B10  EF8C  F005         	goto	u3411
  6688  000B14  EF8F  F005         	goto	u3410
  6689  000B18                     u3411:
  6690  000B18  FFFF               	dw	65535	; assembler added errata NOP
  6691  000B1A  EFCE  F005         	goto	l4237
  6692  000B1E                     u3410:
  6693  000B1E  FFFF               	dw	65535	; assembler added errata NOP
  6694  000B20                     
  6695                           ;motors.c: 384:             if(x1 + stepCounter() >= x2){
  6696  000B20  ECAE  F014         	call	_stepCounter	;wreg free
  6697  000B24  5015               	movf	moveToPoint@x1^0,w,c
  6698  000B26  2612               	addwf	?_stepCounter^0,f,c
  6699  000B28  5016               	movf	(moveToPoint@x1+1)^0,w,c
  6700  000B2A  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6701  000B2C  5019               	movf	moveToPoint@x2^0,w,c
  6702  000B2E  5C12               	subwf	?_stepCounter^0,w,c
  6703  000B30  501A               	movf	(moveToPoint@x2+1)^0,w,c
  6704  000B32  5813               	subwfb	(?_stepCounter+1)^0,w,c
  6705  000B34  A0D8               	btfss	status,0,c
  6706  000B36  EF9F  F005         	goto	u3421
  6707  000B3A  EFA2  F005         	goto	u3420
  6708  000B3E                     u3421:
  6709  000B3E  FFFF               	dw	65535	; assembler added errata NOP
  6710  000B40  EFA8  F005         	goto	l4229
  6711  000B44                     u3420:
  6712  000B44  FFFF               	dw	65535	; assembler added errata NOP
  6713  000B46                     l4227:
  6714  000B46  FFFF               	dw	65535	; assembler added errata NOP
  6715                           
  6716                           ;motors.c: 386:                 keepMovingX = 0;
  6717  000B48  0E00               	movlw	0
  6718  000B4A  6E21               	movwf	moveToPoint@keepMovingX^0,c
  6719                           
  6720                           ;motors.c: 387:             }else if(keepMovingX){
  6721  000B4C  EF0C  F006         	goto	l4251
  6722  000B50                     l4229:
  6723  000B50  FFFF               	dw	65535	; assembler added errata NOP
  6724  000B52  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6725  000B54  B4D8               	btfsc	status,2,c
  6726  000B56  EFAF  F005         	goto	u3431
  6727  000B5A  EFB2  F005         	goto	u3430
  6728  000B5E                     u3431:
  6729  000B5E  FFFF               	dw	65535	; assembler added errata NOP
  6730  000B60  EF0C  F006         	goto	l4251
  6731  000B64                     u3430:
  6732  000B64  FFFF               	dw	65535	; assembler added errata NOP
  6733  000B66                     
  6734                           ;motors.c: 393:             motCounter[0][0] += motCounter[0][1];
  6735  000B66  5068               	movf	(_motCounter+1)^0,w,c
  6736  000B68  2667               	addwf	_motCounter^0,f,c
  6737                           
  6738                           ;motors.c: 394:             if(motCounter[0][0] > 3){
  6739  000B6A  5067               	movf	_motCounter^0,w,c
  6740  000B6C  0A80               	xorlw	128
  6741  000B6E  0F7C               	addlw	-132
  6742  000B70  A0D8               	btfss	status,0,c
  6743  000B72  EFBD  F005         	goto	u3441
  6744  000B76  EFC0  F005         	goto	u3440
  6745  000B7A                     u3441:
  6746  000B7A  FFFF               	dw	65535	; assembler added errata NOP
  6747  000B7C  EFC3  F005         	goto	l4235
  6748  000B80                     u3440:
  6749  000B80  FFFF               	dw	65535	; assembler added errata NOP
  6750  000B82                     
  6751                           ;motors.c: 395:                 motCounter[0][0] = 0;
  6752  000B82  0E00               	movlw	0
  6753  000B84  6E67               	movwf	_motCounter^0,c
  6754  000B86                     l4235:
  6755  000B86  FFFF               	dw	65535	; assembler added errata NOP
  6756                           
  6757                           ;motors.c: 398:             LATA = stepMot1[motCounter[0][0]];
  6758  000B88  0E8C               	movlw	low _stepMot1
  6759  000B8A  2467               	addwf	_motCounter^0,w,c
  6760  000B8C  6ED9               	movwf	fsr2l,c
  6761  000B8E  6ADA               	clrf	fsr2h,c
  6762  000B90  0E00               	movlw	high _stepMot1
  6763  000B92  22DA               	addwfc	fsr2h,f,c
  6764  000B94  50DF               	movf	indf2,w,c
  6765  000B96  6E89               	movwf	137,c	;volatile
  6766  000B98  EF0C  F006         	goto	l4251
  6767  000B9C                     l4237:
  6768  000B9C  FFFF               	dw	65535	; assembler added errata NOP
  6769  000B9E  501F               	movf	moveToPoint@MOT1Direction^0,w,c
  6770  000BA0  A4D8               	btfss	status,2,c
  6771  000BA2  EFD5  F005         	goto	u3451
  6772  000BA6  EFD8  F005         	goto	u3450
  6773  000BAA                     u3451:
  6774  000BAA  FFFF               	dw	65535	; assembler added errata NOP
  6775  000BAC  EF0C  F006         	goto	l4251
  6776  000BB0                     u3450:
  6777  000BB0  FFFF               	dw	65535	; assembler added errata NOP
  6778  000BB2                     
  6779                           ;motors.c: 402:             if(x1 - stepCounter() <= x2){
  6780  000BB2  ECAE  F014         	call	_stepCounter	;wreg free
  6781  000BB6  C015  F01D         	movff	moveToPoint@x1,??_moveToPoint
  6782  000BBA  C016  F01E         	movff	moveToPoint@x1+1,??_moveToPoint+1
  6783  000BBE  5012               	movf	?_stepCounter^0,w,c
  6784  000BC0  5E1D               	subwf	??_moveToPoint^0,f,c
  6785  000BC2  5013               	movf	(?_stepCounter+1)^0,w,c
  6786  000BC4  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6787  000BC6  501D               	movf	??_moveToPoint^0,w,c
  6788  000BC8  5C19               	subwf	moveToPoint@x2^0,w,c
  6789  000BCA  501E               	movf	(??_moveToPoint+1)^0,w,c
  6790  000BCC  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  6791  000BCE  A0D8               	btfss	status,0,c
  6792  000BD0  EFEC  F005         	goto	u3461
  6793  000BD4  EFEF  F005         	goto	u3460
  6794  000BD8                     u3461:
  6795  000BD8  FFFF               	dw	65535	; assembler added errata NOP
  6796  000BDA  EFF2  F005         	goto	l4243
  6797  000BDE                     u3460:
  6798  000BDE  FFFF               	dw	65535	; assembler added errata NOP
  6799  000BE0  EFA3  F005         	goto	l4227
  6800  000BE4                     l4243:
  6801  000BE4  FFFF               	dw	65535	; assembler added errata NOP
  6802  000BE6  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6803  000BE8  B4D8               	btfsc	status,2,c
  6804  000BEA  EFF9  F005         	goto	u3471
  6805  000BEE  EFFC  F005         	goto	u3470
  6806  000BF2                     u3471:
  6807  000BF2  FFFF               	dw	65535	; assembler added errata NOP
  6808  000BF4  EF0C  F006         	goto	l4251
  6809  000BF8                     u3470:
  6810  000BF8  FFFF               	dw	65535	; assembler added errata NOP
  6811  000BFA                     
  6812                           ;motors.c: 411:             motCounter[0][0] += motCounter[0][1];
  6813  000BFA  5068               	movf	(_motCounter+1)^0,w,c
  6814  000BFC  2667               	addwf	_motCounter^0,f,c
  6815                           
  6816                           ;motors.c: 412:             if(motCounter[0][0] < 0){
  6817  000BFE  BE67               	btfsc	_motCounter^0,7,c
  6818  000C00  EF07  F006         	goto	u3480
  6819  000C04  EF04  F006         	goto	u3481
  6820  000C08                     u3481:
  6821  000C08  FFFF               	dw	65535	; assembler added errata NOP
  6822  000C0A  EFC3  F005         	goto	l4235
  6823  000C0E                     u3480:
  6824  000C0E  FFFF               	dw	65535	; assembler added errata NOP
  6825  000C10                     
  6826                           ;motors.c: 413:                 motCounter[0][0] = 3;
  6827  000C10  0E03               	movlw	3
  6828  000C12  6E67               	movwf	_motCounter^0,c
  6829  000C14  EFC3  F005         	goto	l4235
  6830  000C18                     l4251:
  6831  000C18  FFFF               	dw	65535	; assembler added errata NOP
  6832                           
  6833                           ;motors.c: 421:         if(MOT2Direction == 1){
  6834  000C1A  0420               	decf	moveToPoint@MOT2Direction^0,w,c
  6835  000C1C  A4D8               	btfss	status,2,c
  6836  000C1E  EF13  F006         	goto	u3491
  6837  000C22  EF16  F006         	goto	u3490
  6838  000C26                     u3491:
  6839  000C26  FFFF               	dw	65535	; assembler added errata NOP
  6840  000C28  EF55  F006         	goto	l4265
  6841  000C2C                     u3490:
  6842  000C2C  FFFF               	dw	65535	; assembler added errata NOP
  6843  000C2E                     
  6844                           ;motors.c: 423:             if(y1 + stepCounter() >= y2){
  6845  000C2E  ECAE  F014         	call	_stepCounter	;wreg free
  6846  000C32  5017               	movf	moveToPoint@y1^0,w,c
  6847  000C34  2612               	addwf	?_stepCounter^0,f,c
  6848  000C36  5018               	movf	(moveToPoint@y1+1)^0,w,c
  6849  000C38  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6850  000C3A  501B               	movf	moveToPoint@y2^0,w,c
  6851  000C3C  5C12               	subwf	?_stepCounter^0,w,c
  6852  000C3E  501C               	movf	(moveToPoint@y2+1)^0,w,c
  6853  000C40  5813               	subwfb	(?_stepCounter+1)^0,w,c
  6854  000C42  A0D8               	btfss	status,0,c
  6855  000C44  EF26  F006         	goto	u3501
  6856  000C48  EF29  F006         	goto	u3500
  6857  000C4C                     u3501:
  6858  000C4C  FFFF               	dw	65535	; assembler added errata NOP
  6859  000C4E  EF2F  F006         	goto	l4257
  6860  000C52                     u3500:
  6861  000C52  FFFF               	dw	65535	; assembler added errata NOP
  6862  000C54                     l4255:
  6863  000C54  FFFF               	dw	65535	; assembler added errata NOP
  6864                           
  6865                           ;motors.c: 425:                 keepMovingY = 0;
  6866  000C56  0E00               	movlw	0
  6867  000C58  6E22               	movwf	moveToPoint@keepMovingY^0,c
  6868                           
  6869                           ;motors.c: 426:             }else if(keepMovingY){
  6870  000C5A  EF93  F006         	goto	l4279
  6871  000C5E                     l4257:
  6872  000C5E  FFFF               	dw	65535	; assembler added errata NOP
  6873  000C60  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6874  000C62  B4D8               	btfsc	status,2,c
  6875  000C64  EF36  F006         	goto	u3511
  6876  000C68  EF39  F006         	goto	u3510
  6877  000C6C                     u3511:
  6878  000C6C  FFFF               	dw	65535	; assembler added errata NOP
  6879  000C6E  EF93  F006         	goto	l178
  6880  000C72                     u3510:
  6881  000C72  FFFF               	dw	65535	; assembler added errata NOP
  6882  000C74                     
  6883                           ;motors.c: 432:             motCounter[1][0] += motCounter[1][1];
  6884  000C74  506A               	movf	(_motCounter+3)^0,w,c
  6885  000C76  2669               	addwf	(_motCounter+2)^0,f,c
  6886                           
  6887                           ;motors.c: 433:             if(motCounter[1][0] > 3){
  6888  000C78  5069               	movf	(_motCounter+2)^0,w,c
  6889  000C7A  0A80               	xorlw	128
  6890  000C7C  0F7C               	addlw	-132
  6891  000C7E  A0D8               	btfss	status,0,c
  6892  000C80  EF44  F006         	goto	u3521
  6893  000C84  EF47  F006         	goto	u3520
  6894  000C88                     u3521:
  6895  000C88  FFFF               	dw	65535	; assembler added errata NOP
  6896  000C8A  EF4A  F006         	goto	l4263
  6897  000C8E                     u3520:
  6898  000C8E  FFFF               	dw	65535	; assembler added errata NOP
  6899  000C90                     
  6900                           ;motors.c: 434:                 motCounter[1][0] = 0;
  6901  000C90  0E00               	movlw	0
  6902  000C92  6E69               	movwf	(_motCounter+2)^0,c
  6903  000C94                     l4263:
  6904  000C94  FFFF               	dw	65535	; assembler added errata NOP
  6905                           
  6906                           ;motors.c: 437:             LATB = stepMot2[motCounter[1][0]];
  6907  000C96  0E88               	movlw	low _stepMot2
  6908  000C98  2469               	addwf	(_motCounter+2)^0,w,c
  6909  000C9A  6ED9               	movwf	fsr2l,c
  6910  000C9C  6ADA               	clrf	fsr2h,c
  6911  000C9E  0E00               	movlw	high _stepMot2
  6912  000CA0  22DA               	addwfc	fsr2h,f,c
  6913  000CA2  50DF               	movf	indf2,w,c
  6914  000CA4  6E8A               	movwf	138,c	;volatile
  6915  000CA6  EF93  F006         	goto	l4279
  6916  000CAA                     l4265:
  6917  000CAA  FFFF               	dw	65535	; assembler added errata NOP
  6918  000CAC  5020               	movf	moveToPoint@MOT2Direction^0,w,c
  6919  000CAE  A4D8               	btfss	status,2,c
  6920  000CB0  EF5C  F006         	goto	u3531
  6921  000CB4  EF5F  F006         	goto	u3530
  6922  000CB8                     u3531:
  6923  000CB8  FFFF               	dw	65535	; assembler added errata NOP
  6924  000CBA  EF93  F006         	goto	l4279
  6925  000CBE                     u3530:
  6926  000CBE  FFFF               	dw	65535	; assembler added errata NOP
  6927  000CC0                     
  6928                           ;motors.c: 442:             if(y1 - stepCounter() <= y2){
  6929  000CC0  ECAE  F014         	call	_stepCounter	;wreg free
  6930  000CC4  C017  F01D         	movff	moveToPoint@y1,??_moveToPoint
  6931  000CC8  C018  F01E         	movff	moveToPoint@y1+1,??_moveToPoint+1
  6932  000CCC  5012               	movf	?_stepCounter^0,w,c
  6933  000CCE  5E1D               	subwf	??_moveToPoint^0,f,c
  6934  000CD0  5013               	movf	(?_stepCounter+1)^0,w,c
  6935  000CD2  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6936  000CD4  501D               	movf	??_moveToPoint^0,w,c
  6937  000CD6  5C1B               	subwf	moveToPoint@y2^0,w,c
  6938  000CD8  501E               	movf	(??_moveToPoint+1)^0,w,c
  6939  000CDA  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  6940  000CDC  A0D8               	btfss	status,0,c
  6941  000CDE  EF73  F006         	goto	u3541
  6942  000CE2  EF76  F006         	goto	u3540
  6943  000CE6                     u3541:
  6944  000CE6  FFFF               	dw	65535	; assembler added errata NOP
  6945  000CE8  EF79  F006         	goto	l4271
  6946  000CEC                     u3540:
  6947  000CEC  FFFF               	dw	65535	; assembler added errata NOP
  6948  000CEE  EF2A  F006         	goto	l4255
  6949  000CF2                     l4271:
  6950  000CF2  FFFF               	dw	65535	; assembler added errata NOP
  6951  000CF4  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6952  000CF6  B4D8               	btfsc	status,2,c
  6953  000CF8  EF80  F006         	goto	u3551
  6954  000CFC  EF83  F006         	goto	u3550
  6955  000D00                     u3551:
  6956  000D00  FFFF               	dw	65535	; assembler added errata NOP
  6957  000D02  EF93  F006         	goto	l4279
  6958  000D06                     u3550:
  6959  000D06  FFFF               	dw	65535	; assembler added errata NOP
  6960  000D08                     
  6961                           ;motors.c: 451:             motCounter[1][0] += motCounter[1][1];
  6962  000D08  506A               	movf	(_motCounter+3)^0,w,c
  6963  000D0A  2669               	addwf	(_motCounter+2)^0,f,c
  6964                           
  6965                           ;motors.c: 452:             if(motCounter[1][0] < 0){
  6966  000D0C  BE69               	btfsc	(_motCounter+2)^0,7,c
  6967  000D0E  EF8E  F006         	goto	u3560
  6968  000D12  EF8B  F006         	goto	u3561
  6969  000D16                     u3561:
  6970  000D16  FFFF               	dw	65535	; assembler added errata NOP
  6971  000D18  EF4A  F006         	goto	l4263
  6972  000D1C                     u3560:
  6973  000D1C  FFFF               	dw	65535	; assembler added errata NOP
  6974  000D1E                     
  6975                           ;motors.c: 453:                 motCounter[1][0] = 3;
  6976  000D1E  0E03               	movlw	3
  6977  000D20  6E69               	movwf	(_motCounter+2)^0,c
  6978  000D22  EF4A  F006         	goto	l4263
  6979  000D26                     l178:
  6980  000D26                     l4279:
  6981  000D26  FFFF               	dw	65535	; assembler added errata NOP
  6982  000D28  EC4A  F014         	call	_stepMade	;wreg free
  6983  000D2C  5012               	movf	?_stepMade^0,w,c
  6984  000D2E  1013               	iorwf	(?_stepMade+1)^0,w,c
  6985  000D30  B4D8               	btfsc	status,2,c
  6986  000D32  EF9D  F006         	goto	u3571
  6987  000D36  EFA0  F006         	goto	u3570
  6988  000D3A                     u3571:
  6989  000D3A  FFFF               	dw	65535	; assembler added errata NOP
  6990  000D3C  EF93  F006         	goto	l4279
  6991  000D40                     u3570:
  6992  000D40                     l4281:
  6993  000D40  FFFF               	dw	65535	; assembler added errata NOP
  6994                           
  6995                           ;motors.c: 365:     while(keepMovingX || keepMovingY){
  6996  000D42  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6997  000D44  A4D8               	btfss	status,2,c
  6998  000D46  EFA7  F006         	goto	u3581
  6999  000D4A  EFAA  F006         	goto	u3580
  7000  000D4E                     u3581:
  7001  000D4E  FFFF               	dw	65535	; assembler added errata NOP
  7002  000D50  EF73  F005         	goto	l4219
  7003  000D54                     u3580:
  7004  000D54  FFFF               	dw	65535	; assembler added errata NOP
  7005  000D56  5022               	movf	moveToPoint@keepMovingY^0,w,c
  7006  000D58  A4D8               	btfss	status,2,c
  7007  000D5A  EFB1  F006         	goto	u3591
  7008  000D5E  EFB4  F006         	goto	u3590
  7009  000D62                     u3591:
  7010  000D62  FFFF               	dw	65535	; assembler added errata NOP
  7011  000D64  EF73  F005         	goto	l4219
  7012  000D68                     u3590:
  7013  000D68                     l161:
  7014  000D68  FFFF               	dw	65535	; assembler added errata NOP
  7015                           
  7016                           ;motors.c: 476:     T0CONbits.TMR0ON = 0;
  7017  000D6A  9ED5               	bcf	213,7,c	;volatile
  7018                           
  7019                           ;motors.c: 477:     T2CONbits.TMR2ON = 0;
  7020  000D6C  94CA               	bcf	202,2,c	;volatile
  7021  000D6E                     
  7022                           ;motors.c: 479:     resetTM0_Temp();
  7023  000D6E  ECC8  F014         	call	_resetTM0_Temp	;wreg free
  7024                           
  7025                           ;motors.c: 480:     resetTM2_Temp();
  7026  000D72  EC66  F014         	call	_resetTM2_Temp	;wreg free
  7027  000D76                     
  7028                           ;motors.c: 482:     TMR0 = 0;
  7029  000D76  0E00               	movlw	0
  7030  000D78  6ED7               	movwf	215,c	;volatile
  7031  000D7A  0E00               	movlw	0
  7032  000D7C  6ED6               	movwf	214,c	;volatile
  7033  000D7E                     
  7034                           ;motors.c: 483:     TMR2 = 0;
  7035  000D7E  0E00               	movlw	0
  7036  000D80  6ECC               	movwf	204,c	;volatile
  7037                           
  7038                           ;motors.c: 486:     resetStep();
  7039  000D82  ECCD  F014         	call	_resetStep	;wreg free
  7040  000D86                     
  7041                           ;motors.c: 488:     return(tm0Error);
  7042  000D86  5059               	movf	_tm0Error^0,w,c
  7043  000D88  0012               	return		;funcret
  7044  000D8A  FFFF               	dw	65535	; errata NOP
  7045  000D8C                     __end_of_moveToPoint:
  7046                           	callstack 0
  7047                           
  7048 ;; *************** function _stepCounter *****************
  7049 ;; Defined at:
  7050 ;;		line 71 in file "timer.c"
  7051 ;; Parameters:    Size  Location     Type
  7052 ;;		None
  7053 ;; Auto vars:     Size  Location     Type
  7054 ;;		None
  7055 ;; Return value:  Size  Location     Type
  7056 ;;                  2   17[COMRAM] unsigned int 
  7057 ;; Registers used:
  7058 ;;		None
  7059 ;; Tracked objects:
  7060 ;;		On entry : 0/0
  7061 ;;		On exit  : 0/0
  7062 ;;		Unchanged: 0/0
  7063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7064 ;;      Params:         2       0       0       0       0       0       0
  7065 ;;      Locals:         0       0       0       0       0       0       0
  7066 ;;      Temps:          0       0       0       0       0       0       0
  7067 ;;      Totals:         2       0       0       0       0       0       0
  7068 ;;Total ram usage:        2 bytes
  7069 ;; Hardware stack levels used:    1
  7070 ;; Hardware stack levels required when called:    4
  7071 ;; This function calls:
  7072 ;;		Nothing
  7073 ;; This function is called by:
  7074 ;;		_moveToPoint
  7075 ;; This function uses a non-reentrant model
  7076 ;;
  7077                           
  7078                           	psect	text35
  7079  00295C                     __ptext35:
  7080                           	callstack 0
  7081  00295C                     _stepCounter:
  7082                           	callstack 0
  7083  00295C  FFFF               	dw	65535	; assembler added errata NOP
  7084  00295E                     
  7085                           ;timer.c: 72:     return pwmStep;
  7086  00295E  C05C  F012         	movff	_pwmStep,?_stepCounter	;volatile
  7087  002962  6A13               	clrf	(?_stepCounter+1)^0,c
  7088  002964  0012               	return		;funcret
  7089  002966  FFFF               	dw	65535	; errata NOP
  7090  002968                     __end_of_stepCounter:
  7091                           	callstack 0
  7092                           
  7093 ;; *************** function _liftArm *****************
  7094 ;; Defined at:
  7095 ;;		line 690 in file "motors.c"
  7096 ;; Parameters:    Size  Location     Type
  7097 ;;		None
  7098 ;; Auto vars:     Size  Location     Type
  7099 ;;		None
  7100 ;; Return value:  Size  Location     Type
  7101 ;;                  1    wreg      unsigned char 
  7102 ;; Registers used:
  7103 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7104 ;; Tracked objects:
  7105 ;;		On entry : 0/0
  7106 ;;		On exit  : 0/0
  7107 ;;		Unchanged: 0/0
  7108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7109 ;;      Params:         0       0       0       0       0       0       0
  7110 ;;      Locals:         0       0       0       0       0       0       0
  7111 ;;      Temps:          0       0       0       0       0       0       0
  7112 ;;      Totals:         0       0       0       0       0       0       0
  7113 ;;Total ram usage:        0 bytes
  7114 ;; Hardware stack levels used:    1
  7115 ;; Hardware stack levels required when called:    5
  7116 ;; This function calls:
  7117 ;;		_resetStep
  7118 ;;		_resetTM0_Temp
  7119 ;;		_resetTM2_Temp
  7120 ;;		_stepMade
  7121 ;; This function is called by:
  7122 ;;		_executeData
  7123 ;; This function uses a non-reentrant model
  7124 ;;
  7125                           
  7126                           	psect	text36
  7127  0024CA                     __ptext36:
  7128                           	callstack 0
  7129  0024CA                     _liftArm:
  7130                           	callstack 0
  7131  0024CA  FFFF               	dw	65535	; assembler added errata NOP
  7132  0024CC                     
  7133                           ;motors.c: 696:     motCounter[2][1] = -1;
  7134  0024CC  686C               	setf	(_motCounter+5)^0,c
  7135                           
  7136                           ;motors.c: 699:     T2CONbits.TMR2ON = 1;
  7137  0024CE  84CA               	bsf	202,2,c	;volatile
  7138  0024D0                     
  7139                           ;motors.c: 701:     tm0Error = 0;
  7140  0024D0  0E00               	movlw	0
  7141  0024D2  6E5A               	movwf	(_tm0Error+1)^0,c
  7142  0024D4  0E00               	movlw	0
  7143  0024D6  6E59               	movwf	_tm0Error^0,c
  7144                           
  7145                           ;motors.c: 702:     tm0Limit = 200;
  7146  0024D8  0EC8               	movlw	200
  7147  0024DA  6E66               	movwf	_tm0Limit^0,c
  7148  0024DC                     
  7149                           ;motors.c: 703:     T0CONbits.TMR0ON = 1;
  7150  0024DC  8ED5               	bsf	213,7,c	;volatile
  7151                           
  7152                           ;motors.c: 707:     while(!PORTEbits.RE2){
  7153  0024DE  EFA9  F012         	goto	l214
  7154  0024E2                     l4401:
  7155  0024E2  FFFF               	dw	65535	; assembler added errata NOP
  7156                           
  7157                           ;motors.c: 709:         resetStep();
  7158  0024E4  ECCD  F014         	call	_resetStep	;wreg free
  7159  0024E8                     
  7160                           ;motors.c: 712:         if(tm0Error){
  7161  0024E8  5059               	movf	_tm0Error^0,w,c
  7162  0024EA  105A               	iorwf	(_tm0Error+1)^0,w,c
  7163  0024EC  B4D8               	btfsc	status,2,c
  7164  0024EE  EF7B  F012         	goto	u3721
  7165  0024F2  EF7E  F012         	goto	u3720
  7166  0024F6                     u3721:
  7167  0024F6  FFFF               	dw	65535	; assembler added errata NOP
  7168  0024F8  EF85  F012         	goto	l4407
  7169  0024FC                     u3720:
  7170  0024FC  FFFF               	dw	65535	; assembler added errata NOP
  7171  0024FE                     
  7172                           ;motors.c: 717:             tm0Error = 6;
  7173  0024FE  0E00               	movlw	0
  7174  002500  6E5A               	movwf	(_tm0Error+1)^0,c
  7175  002502  0E06               	movlw	6
  7176  002504  6E59               	movwf	_tm0Error^0,c
  7177                           
  7178                           ;motors.c: 718:             break;
  7179  002506  EFB2  F012         	goto	l217
  7180  00250A                     l4407:
  7181  00250A  FFFF               	dw	65535	; assembler added errata NOP
  7182                           
  7183                           ;motors.c: 727:             motCounter[2][0] += motCounter[2][1];
  7184  00250C  506C               	movf	(_motCounter+5)^0,w,c
  7185  00250E  266B               	addwf	(_motCounter+4)^0,f,c
  7186                           
  7187                           ;motors.c: 728:             if(motCounter[2][0] < 0){
  7188  002510  BE6B               	btfsc	(_motCounter+4)^0,7,c
  7189  002512  EF90  F012         	goto	u3730
  7190  002516  EF8D  F012         	goto	u3731
  7191  00251A                     u3731:
  7192  00251A  FFFF               	dw	65535	; assembler added errata NOP
  7193  00251C  EF93  F012         	goto	l4411
  7194  002520                     u3730:
  7195  002520  FFFF               	dw	65535	; assembler added errata NOP
  7196  002522                     
  7197                           ;motors.c: 729:                 motCounter[2][0] = 3;
  7198  002522  0E03               	movlw	3
  7199  002524  6E6B               	movwf	(_motCounter+4)^0,c
  7200  002526                     l4411:
  7201  002526  FFFF               	dw	65535	; assembler added errata NOP
  7202                           
  7203                           ;motors.c: 732:             LATC = stepMot3[motCounter[2][0]];
  7204  002528  0E84               	movlw	low _stepMot3
  7205  00252A  246B               	addwf	(_motCounter+4)^0,w,c
  7206  00252C  6ED9               	movwf	fsr2l,c
  7207  00252E  6ADA               	clrf	fsr2h,c
  7208  002530  0E00               	movlw	high _stepMot3
  7209  002532  22DA               	addwfc	fsr2h,f,c
  7210  002534  50DF               	movf	indf2,w,c
  7211  002536  6E8B               	movwf	139,c	;volatile
  7212  002538                     l4413:
  7213  002538  FFFF               	dw	65535	; assembler added errata NOP
  7214  00253A  EC4A  F014         	call	_stepMade	;wreg free
  7215  00253E  5012               	movf	?_stepMade^0,w,c
  7216  002540  1013               	iorwf	(?_stepMade+1)^0,w,c
  7217  002542  B4D8               	btfsc	status,2,c
  7218  002544  EFA6  F012         	goto	u3741
  7219  002548  EFA9  F012         	goto	u3740
  7220  00254C                     u3741:
  7221  00254C  FFFF               	dw	65535	; assembler added errata NOP
  7222  00254E  EF9C  F012         	goto	l4413
  7223  002552                     u3740:
  7224  002552                     l214:
  7225  002552  FFFF               	dw	65535	; assembler added errata NOP
  7226                           
  7227                           ;motors.c: 707:     while(!PORTEbits.RE2){
  7228  002554  A484               	btfss	132,2,c	;volatile
  7229  002556  EFAF  F012         	goto	u3751
  7230  00255A  EFB2  F012         	goto	u3750
  7231  00255E                     u3751:
  7232  00255E  FFFF               	dw	65535	; assembler added errata NOP
  7233  002560  EF71  F012         	goto	l4401
  7234  002564                     u3750:
  7235  002564                     l217:
  7236  002564  FFFF               	dw	65535	; assembler added errata NOP
  7237                           
  7238                           ;motors.c: 749:     T0CONbits.TMR0ON = 0;
  7239  002566  9ED5               	bcf	213,7,c	;volatile
  7240                           
  7241                           ;motors.c: 750:     T2CONbits.TMR2ON = 0;
  7242  002568  94CA               	bcf	202,2,c	;volatile
  7243  00256A                     
  7244                           ;motors.c: 752:     resetTM0_Temp();
  7245  00256A  ECC8  F014         	call	_resetTM0_Temp	;wreg free
  7246                           
  7247                           ;motors.c: 753:     resetTM2_Temp();
  7248  00256E  EC66  F014         	call	_resetTM2_Temp	;wreg free
  7249  002572                     
  7250                           ;motors.c: 755:     TMR0 = 0;
  7251  002572  0E00               	movlw	0
  7252  002574  6ED7               	movwf	215,c	;volatile
  7253  002576  0E00               	movlw	0
  7254  002578  6ED6               	movwf	214,c	;volatile
  7255  00257A                     
  7256                           ;motors.c: 756:     TMR2 = 0;
  7257  00257A  0E00               	movlw	0
  7258  00257C  6ECC               	movwf	204,c	;volatile
  7259                           
  7260                           ;motors.c: 759:     resetStep();
  7261  00257E  ECCD  F014         	call	_resetStep	;wreg free
  7262  002582                     
  7263                           ;motors.c: 761:     return(tm0Error);
  7264  002582  5059               	movf	_tm0Error^0,w,c
  7265  002584  0012               	return		;funcret
  7266  002586  FFFF               	dw	65535	; errata NOP
  7267  002588                     __end_of_liftArm:
  7268                           	callstack 0
  7269                           
  7270 ;; *************** function _stepMade *****************
  7271 ;; Defined at:
  7272 ;;		line 60 in file "timer.c"
  7273 ;; Parameters:    Size  Location     Type
  7274 ;;		None
  7275 ;; Auto vars:     Size  Location     Type
  7276 ;;  temp            1   19[COMRAM] unsigned char 
  7277 ;; Return value:  Size  Location     Type
  7278 ;;                  2   17[COMRAM] unsigned int 
  7279 ;; Registers used:
  7280 ;;		wreg, status,2
  7281 ;; Tracked objects:
  7282 ;;		On entry : 0/0
  7283 ;;		On exit  : 0/0
  7284 ;;		Unchanged: 0/0
  7285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7286 ;;      Params:         2       0       0       0       0       0       0
  7287 ;;      Locals:         1       0       0       0       0       0       0
  7288 ;;      Temps:          0       0       0       0       0       0       0
  7289 ;;      Totals:         3       0       0       0       0       0       0
  7290 ;;Total ram usage:        3 bytes
  7291 ;; Hardware stack levels used:    1
  7292 ;; Hardware stack levels required when called:    4
  7293 ;; This function calls:
  7294 ;;		Nothing
  7295 ;; This function is called by:
  7296 ;;		_resetPosition
  7297 ;;		_moveToPoint
  7298 ;;		_touchObject
  7299 ;;		_touchTherm
  7300 ;;		_liftArm
  7301 ;;		_rotateObj
  7302 ;;		_pickObject
  7303 ;;		_releaseObj
  7304 ;; This function uses a non-reentrant model
  7305 ;;
  7306                           
  7307                           	psect	text37
  7308  002894                     __ptext37:
  7309                           	callstack 0
  7310  002894                     _stepMade:
  7311                           	callstack 0
  7312  002894  FFFF               	dw	65535	; assembler added errata NOP
  7313  002896                     
  7314                           ;timer.c: 61:     unsigned char temp = stepToggle;
  7315  002896  C05B  F014         	movff	_stepToggle,stepMade@temp	;volatile
  7316  00289A                     
  7317                           ;timer.c: 63:     stepToggle = 0;
  7318  00289A  0E00               	movlw	0
  7319  00289C  6E5B               	movwf	_stepToggle^0,c	;volatile
  7320  00289E                     
  7321                           ;timer.c: 65:     return temp;
  7322  00289E  C014  F012         	movff	stepMade@temp,?_stepMade
  7323  0028A2  6A13               	clrf	(?_stepMade+1)^0,c
  7324  0028A4  0012               	return		;funcret
  7325  0028A6  FFFF               	dw	65535	; errata NOP
  7326  0028A8                     __end_of_stepMade:
  7327                           	callstack 0
  7328                           
  7329 ;; *************** function _resetTM2_Temp *****************
  7330 ;; Defined at:
  7331 ;;		line 26 in file "interrupt.c"
  7332 ;; Parameters:    Size  Location     Type
  7333 ;;		None
  7334 ;; Auto vars:     Size  Location     Type
  7335 ;;		None
  7336 ;; Return value:  Size  Location     Type
  7337 ;;                  1    wreg      void 
  7338 ;; Registers used:
  7339 ;;		wreg, status,2
  7340 ;; Tracked objects:
  7341 ;;		On entry : 0/0
  7342 ;;		On exit  : 0/0
  7343 ;;		Unchanged: 0/0
  7344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7345 ;;      Params:         0       0       0       0       0       0       0
  7346 ;;      Locals:         0       0       0       0       0       0       0
  7347 ;;      Temps:          0       0       0       0       0       0       0
  7348 ;;      Totals:         0       0       0       0       0       0       0
  7349 ;;Total ram usage:        0 bytes
  7350 ;; Hardware stack levels used:    1
  7351 ;; Hardware stack levels required when called:    4
  7352 ;; This function calls:
  7353 ;;		Nothing
  7354 ;; This function is called by:
  7355 ;;		_resetPosition
  7356 ;;		_moveToPoint
  7357 ;;		_touchObject
  7358 ;;		_touchTherm
  7359 ;;		_liftArm
  7360 ;;		_rotateObj
  7361 ;;		_pickObject
  7362 ;;		_releaseObj
  7363 ;; This function uses a non-reentrant model
  7364 ;;
  7365                           
  7366                           	psect	text38
  7367  0028CC                     __ptext38:
  7368                           	callstack 0
  7369  0028CC                     _resetTM2_Temp:
  7370                           	callstack 0
  7371  0028CC  FFFF               	dw	65535	; assembler added errata NOP
  7372  0028CE                     
  7373                           ;interrupt.c: 27:     single_cycle = 0;
  7374  0028CE  0E00               	movlw	0
  7375  0028D0  6E52               	movwf	(_single_cycle+1)^0,c
  7376  0028D2  0E00               	movlw	0
  7377  0028D4  6E51               	movwf	_single_cycle^0,c
  7378                           
  7379                           ;interrupt.c: 28:     completeStep = 0;
  7380  0028D6  0E00               	movlw	0
  7381  0028D8  6E62               	movwf	_completeStep^0,c
  7382  0028DA  0012               	return		;funcret
  7383  0028DC  FFFF               	dw	65535	; errata NOP
  7384  0028DE                     __end_of_resetTM2_Temp:
  7385                           	callstack 0
  7386                           
  7387 ;; *************** function _resetTM0_Temp *****************
  7388 ;; Defined at:
  7389 ;;		line 22 in file "interrupt.c"
  7390 ;; Parameters:    Size  Location     Type
  7391 ;;		None
  7392 ;; Auto vars:     Size  Location     Type
  7393 ;;		None
  7394 ;; Return value:  Size  Location     Type
  7395 ;;                  1    wreg      void 
  7396 ;; Registers used:
  7397 ;;		wreg, status,2
  7398 ;; Tracked objects:
  7399 ;;		On entry : 0/0
  7400 ;;		On exit  : 0/0
  7401 ;;		Unchanged: 0/0
  7402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7403 ;;      Params:         0       0       0       0       0       0       0
  7404 ;;      Locals:         0       0       0       0       0       0       0
  7405 ;;      Temps:          0       0       0       0       0       0       0
  7406 ;;      Totals:         0       0       0       0       0       0       0
  7407 ;;Total ram usage:        0 bytes
  7408 ;; Hardware stack levels used:    1
  7409 ;; Hardware stack levels required when called:    4
  7410 ;; This function calls:
  7411 ;;		Nothing
  7412 ;; This function is called by:
  7413 ;;		_resetPosition
  7414 ;;		_moveToPoint
  7415 ;;		_touchObject
  7416 ;;		_touchTherm
  7417 ;;		_liftArm
  7418 ;; This function uses a non-reentrant model
  7419 ;;
  7420                           
  7421                           	psect	text39
  7422  002990                     __ptext39:
  7423                           	callstack 0
  7424  002990                     _resetTM0_Temp:
  7425                           	callstack 0
  7426  002990  FFFF               	dw	65535	; assembler added errata NOP
  7427  002992                     
  7428                           ;interrupt.c: 23:     tm0Count = 0;
  7429  002992  0E00               	movlw	0
  7430  002994  6E63               	movwf	_tm0Count^0,c
  7431  002996  0012               	return		;funcret
  7432  002998  FFFF               	dw	65535	; errata NOP
  7433  00299A                     __end_of_resetTM0_Temp:
  7434                           	callstack 0
  7435                           
  7436 ;; *************** function _resetStep *****************
  7437 ;; Defined at:
  7438 ;;		line 78 in file "timer.c"
  7439 ;; Parameters:    Size  Location     Type
  7440 ;;		None
  7441 ;; Auto vars:     Size  Location     Type
  7442 ;;		None
  7443 ;; Return value:  Size  Location     Type
  7444 ;;                  1    wreg      void 
  7445 ;; Registers used:
  7446 ;;		wreg, status,2
  7447 ;; Tracked objects:
  7448 ;;		On entry : 0/0
  7449 ;;		On exit  : 0/0
  7450 ;;		Unchanged: 0/0
  7451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7452 ;;      Params:         0       0       0       0       0       0       0
  7453 ;;      Locals:         0       0       0       0       0       0       0
  7454 ;;      Temps:          0       0       0       0       0       0       0
  7455 ;;      Totals:         0       0       0       0       0       0       0
  7456 ;;Total ram usage:        0 bytes
  7457 ;; Hardware stack levels used:    1
  7458 ;; Hardware stack levels required when called:    4
  7459 ;; This function calls:
  7460 ;;		Nothing
  7461 ;; This function is called by:
  7462 ;;		_resetPosition
  7463 ;;		_moveToPoint
  7464 ;;		_touchObject
  7465 ;;		_touchTherm
  7466 ;;		_liftArm
  7467 ;;		_rotateObj
  7468 ;; This function uses a non-reentrant model
  7469 ;;
  7470                           
  7471                           	psect	text40
  7472  00299A                     __ptext40:
  7473                           	callstack 0
  7474  00299A                     _resetStep:
  7475                           	callstack 0
  7476  00299A  FFFF               	dw	65535	; assembler added errata NOP
  7477  00299C                     
  7478                           ;timer.c: 79:     pwmStep = 0;
  7479  00299C  0E00               	movlw	0
  7480  00299E  6E5C               	movwf	_pwmStep^0,c	;volatile
  7481  0029A0  0012               	return		;funcret
  7482  0029A2  FFFF               	dw	65535	; errata NOP
  7483  0029A4                     __end_of_resetStep:
  7484                           	callstack 0
  7485                           
  7486 ;; *************** function _getData *****************
  7487 ;; Defined at:
  7488 ;;		line 60 in file "usart.c"
  7489 ;; Parameters:    Size  Location     Type
  7490 ;;		None
  7491 ;; Auto vars:     Size  Location     Type
  7492 ;;		None
  7493 ;; Return value:  Size  Location     Type
  7494 ;;                  2   17[COMRAM] PTR struct .
  7495 ;; Registers used:
  7496 ;;		wreg, status,2, status,0
  7497 ;; Tracked objects:
  7498 ;;		On entry : 0/0
  7499 ;;		On exit  : 0/0
  7500 ;;		Unchanged: 0/0
  7501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7502 ;;      Params:         2       0       0       0       0       0       0
  7503 ;;      Locals:         0       0       0       0       0       0       0
  7504 ;;      Temps:          0       0       0       0       0       0       0
  7505 ;;      Totals:         2       0       0       0       0       0       0
  7506 ;;Total ram usage:        2 bytes
  7507 ;; Hardware stack levels used:    1
  7508 ;; Hardware stack levels required when called:    4
  7509 ;; This function calls:
  7510 ;;		Nothing
  7511 ;; This function is called by:
  7512 ;;		_executeData
  7513 ;; This function uses a non-reentrant model
  7514 ;;
  7515                           
  7516                           	psect	text41
  7517  00290C                     __ptext41:
  7518                           	callstack 0
  7519  00290C                     _getData:
  7520                           	callstack 0
  7521  00290C  FFFF               	dw	65535	; assembler added errata NOP
  7522  00290E                     
  7523                           ;usart.c: 61:     return(&dataSequence[0]);
  7524  00290E  0EE4               	movlw	low _dataSequence
  7525  002910  6E12               	movwf	?_getData^0,c
  7526  002912  0E00               	movlw	high _dataSequence
  7527  002914  6E13               	movwf	(?_getData+1)^0,c
  7528  002916  0012               	return		;funcret
  7529  002918  FFFF               	dw	65535	; errata NOP
  7530  00291A                     __end_of_getData:
  7531                           	callstack 0
  7532                           
  7533 ;; *************** function _clearTM0 *****************
  7534 ;; Defined at:
  7535 ;;		line 32 in file "motors.c"
  7536 ;; Parameters:    Size  Location     Type
  7537 ;;		None
  7538 ;; Auto vars:     Size  Location     Type
  7539 ;;		None
  7540 ;; Return value:  Size  Location     Type
  7541 ;;                  1    wreg      void 
  7542 ;; Registers used:
  7543 ;;		wreg, status,2
  7544 ;; Tracked objects:
  7545 ;;		On entry : 0/0
  7546 ;;		On exit  : 0/0
  7547 ;;		Unchanged: 0/0
  7548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7549 ;;      Params:         0       0       0       0       0       0       0
  7550 ;;      Locals:         0       0       0       0       0       0       0
  7551 ;;      Temps:          0       0       0       0       0       0       0
  7552 ;;      Totals:         0       0       0       0       0       0       0
  7553 ;;Total ram usage:        0 bytes
  7554 ;; Hardware stack levels used:    1
  7555 ;; Hardware stack levels required when called:    4
  7556 ;; This function calls:
  7557 ;;		Nothing
  7558 ;; This function is called by:
  7559 ;;		_main
  7560 ;; This function uses a non-reentrant model
  7561 ;;
  7562                           
  7563                           	psect	text42
  7564  00291A                     __ptext42:
  7565                           	callstack 0
  7566  00291A                     _clearTM0:
  7567                           	callstack 0
  7568  00291A  FFFF               	dw	65535	; assembler added errata NOP
  7569  00291C                     
  7570                           ;motors.c: 33:     tm0Error = 0;
  7571  00291C  0E00               	movlw	0
  7572  00291E  6E5A               	movwf	(_tm0Error+1)^0,c
  7573  002920  0E00               	movlw	0
  7574  002922  6E59               	movwf	_tm0Error^0,c
  7575  002924  0012               	return		;funcret
  7576  002926  FFFF               	dw	65535	; errata NOP
  7577  002928                     __end_of_clearTM0:
  7578                           	callstack 0
  7579                           
  7580 ;; *************** function _isr *****************
  7581 ;; Defined at:
  7582 ;;		line 52 in file "interrupt.c"
  7583 ;; Parameters:    Size  Location     Type
  7584 ;;		None
  7585 ;; Auto vars:     Size  Location     Type
  7586 ;;  temp            1   16[COMRAM] unsigned char 
  7587 ;; Return value:  Size  Location     Type
  7588 ;;                  1    wreg      void 
  7589 ;; Registers used:
  7590 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7591 ;; Tracked objects:
  7592 ;;		On entry : 0/0
  7593 ;;		On exit  : 0/0
  7594 ;;		Unchanged: 0/0
  7595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7596 ;;      Params:         0       0       0       0       0       0       0
  7597 ;;      Locals:         1       0       0       0       0       0       0
  7598 ;;      Temps:          6       0       0       0       0       0       0
  7599 ;;      Totals:         7       0       0       0       0       0       0
  7600 ;;Total ram usage:        7 bytes
  7601 ;; Hardware stack levels used:    1
  7602 ;; Hardware stack levels required when called:    3
  7603 ;; This function calls:
  7604 ;;		_abortAll
  7605 ;;		_fatalError
  7606 ;;		_increaseStep
  7607 ;;		_retPeriod
  7608 ;;		_setThermRel
  7609 ;;		_setTouchRel
  7610 ;;		_toggleStep
  7611 ;;		_whatsTM0Limit
  7612 ;;		_writeTM0
  7613 ;;		i2_storeData
  7614 ;; This function is called by:
  7615 ;;		Interrupt level 2
  7616 ;; This function uses a non-reentrant model
  7617 ;;
  7618                           
  7619                           	psect	intcode
  7620  000008                     __pintcode:
  7621                           	callstack 0
  7622  000008                     _isr:
  7623                           	callstack 0
  7624  000008  FFFF               	dw	65535	; assembler added errata NOP
  7625                           
  7626                           ;incstack = 0
  7627  00000A  826E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7628  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  7629  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  7630  000014  CFF3 F00F          	movff	prodl,??_isr+4
  7631  000018  CFF4 F010          	movff	prodh,??_isr+5
  7632  00001C                     
  7633                           ;interrupt.c: 56:     if(INTCONbits.T0IF){
  7634  00001C  A4F2               	btfss	242,2,c	;volatile
  7635  00001E  EF13  F000         	goto	i2u284_41
  7636  000022  EF16  F000         	goto	i2u284_40
  7637  000026                     i2u284_41:
  7638  000026  FFFF               	dw	65535	; assembler added errata NOP
  7639  000028  EF2C  F000         	goto	i2l3731
  7640  00002C                     i2u284_40:
  7641  00002C  FFFF               	dw	65535	; assembler added errata NOP
  7642  00002E                     
  7643                           ;interrupt.c: 57:         INTCONbits.T0IF = 0;
  7644  00002E  94F2               	bcf	242,2,c	;volatile
  7645  000030                     
  7646                           ;interrupt.c: 60:         tm0Count++;
  7647  000030  2A63               	incf	_tm0Count^0,f,c
  7648  000032                     
  7649                           ;interrupt.c: 62:         if(tm0Count >= whatsTM0Limit()){
  7650  000032  ECF1  F014         	call	_whatsTM0Limit	;wreg free
  7651  000036  6E0B               	movwf	??_isr^0,c
  7652  000038  500B               	movf	??_isr^0,w,c
  7653  00003A  5C63               	subwf	_tm0Count^0,w,c
  7654  00003C  A0D8               	btfss	status,0,c
  7655  00003E  EF23  F000         	goto	i2u285_41
  7656  000042  EF26  F000         	goto	i2u285_40
  7657  000046                     i2u285_41:
  7658  000046  FFFF               	dw	65535	; assembler added errata NOP
  7659  000048  EF2C  F000         	goto	i2l3731
  7660  00004C                     i2u285_40:
  7661  00004C  FFFF               	dw	65535	; assembler added errata NOP
  7662  00004E                     
  7663                           ;interrupt.c: 63:             T0CONbits.TMR0ON = 0;
  7664  00004E  9ED5               	bcf	213,7,c	;volatile
  7665  000050                     
  7666                           ;interrupt.c: 64:             tm0Count = 0;
  7667  000050  0E00               	movlw	0
  7668  000052  6E63               	movwf	_tm0Count^0,c
  7669  000054                     
  7670                           ;interrupt.c: 65:             writeTM0();
  7671  000054  EC94  F014         	call	_writeTM0	;wreg free
  7672  000058                     i2l3731:
  7673  000058  FFFF               	dw	65535	; assembler added errata NOP
  7674                           
  7675                           ;interrupt.c: 70:     if(PIR1bits.TMR1IF){
  7676  00005A  A09E               	btfss	158,0,c	;volatile
  7677  00005C  EF32  F000         	goto	i2u286_41
  7678  000060  EF35  F000         	goto	i2u286_40
  7679  000064                     i2u286_41:
  7680  000064  FFFF               	dw	65535	; assembler added errata NOP
  7681  000066  EF45  F000         	goto	i2l3739
  7682  00006A                     i2u286_40:
  7683  00006A  FFFF               	dw	65535	; assembler added errata NOP
  7684  00006C                     
  7685                           ;interrupt.c: 71:         PIR1bits.TMR1IF = 0;
  7686  00006C  909E               	bcf	158,0,c	;volatile
  7687  00006E                     
  7688                           ;interrupt.c: 72:         if(fatalError()){
  7689  00006E  ECF9  F014         	call	_fatalError	;wreg free
  7690  000072  0900               	iorlw	0
  7691  000074  B4D8               	btfsc	status,2,c
  7692  000076  EF3F  F000         	goto	i2u287_41
  7693  00007A  EF42  F000         	goto	i2u287_40
  7694  00007E                     i2u287_41:
  7695  00007E  FFFF               	dw	65535	; assembler added errata NOP
  7696  000080  EF45  F000         	goto	i2l3739
  7697  000084                     i2u287_40:
  7698  000084  FFFF               	dw	65535	; assembler added errata NOP
  7699  000086                     
  7700                           ;interrupt.c: 73:             abortAll();
  7701  000086  EC6F  F014         	call	_abortAll	;wreg free
  7702  00008A                     i2l3739:
  7703  00008A  FFFF               	dw	65535	; assembler added errata NOP
  7704                           
  7705                           ;interrupt.c: 78:     if(PIR1bits.TMR2IF){
  7706  00008C  A29E               	btfss	158,1,c	;volatile
  7707  00008E  EF4B  F000         	goto	i2u288_41
  7708  000092  EF4E  F000         	goto	i2u288_40
  7709  000096                     i2u288_41:
  7710  000096  FFFF               	dw	65535	; assembler added errata NOP
  7711  000098  EF80  F000         	goto	i2l3761
  7712  00009C                     i2u288_40:
  7713  00009C  FFFF               	dw	65535	; assembler added errata NOP
  7714  00009E                     
  7715                           ;interrupt.c: 79:         PIR1bits.TMR2IF = 0;
  7716  00009E  929E               	bcf	158,1,c	;volatile
  7717  0000A0                     
  7718                           ;interrupt.c: 80:         single_cycle++;
  7719  0000A0  4A51               	infsnz	_single_cycle^0,f,c
  7720  0000A2  2A52               	incf	(_single_cycle+1)^0,f,c
  7721  0000A4                     
  7722                           ;interrupt.c: 83:         if(single_cycle > retPeriod()){
  7723  0000A4  EC9B  F014         	call	_retPeriod	;wreg free
  7724  0000A8  5051               	movf	_single_cycle^0,w,c
  7725  0000AA  5C01               	subwf	?_retPeriod^0,w,c
  7726  0000AC  5052               	movf	(_single_cycle+1)^0,w,c
  7727  0000AE  5802               	subwfb	(?_retPeriod+1)^0,w,c
  7728  0000B0  B0D8               	btfsc	status,0,c
  7729  0000B2  EF5D  F000         	goto	i2u289_41
  7730  0000B6  EF60  F000         	goto	i2u289_40
  7731  0000BA                     i2u289_41:
  7732  0000BA  FFFF               	dw	65535	; assembler added errata NOP
  7733  0000BC  EF80  F000         	goto	i2l3761
  7734  0000C0                     i2u289_40:
  7735  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  7736  0000C2                     
  7737                           ;interrupt.c: 84:             single_cycle = 0;
  7738  0000C2  0E00               	movlw	0
  7739  0000C4  6E52               	movwf	(_single_cycle+1)^0,c
  7740  0000C6  0E00               	movlw	0
  7741  0000C8  6E51               	movwf	_single_cycle^0,c
  7742  0000CA                     
  7743                           ;interrupt.c: 85:             completeStep++;
  7744  0000CA  2A62               	incf	_completeStep^0,f,c
  7745  0000CC                     
  7746                           ;interrupt.c: 88:             if(completeStep != 0 && !(completeStep % 2)){
  7747  0000CC  5062               	movf	_completeStep^0,w,c
  7748  0000CE  B4D8               	btfsc	status,2,c
  7749  0000D0  EF6C  F000         	goto	i2u290_41
  7750  0000D4  EF6F  F000         	goto	i2u290_40
  7751  0000D8                     i2u290_41:
  7752  0000D8  FFFF               	dw	65535	; assembler added errata NOP
  7753  0000DA  EF7D  F000         	goto	i2l3759
  7754  0000DE                     i2u290_40:
  7755  0000DE  FFFF               	dw	65535	; assembler added errata NOP
  7756  0000E0  B062               	btfsc	_completeStep^0,0,c
  7757  0000E2  EF75  F000         	goto	i2u291_41
  7758  0000E6  EF78  F000         	goto	i2u291_40
  7759  0000EA                     i2u291_41:
  7760  0000EA  FFFF               	dw	65535	; assembler added errata NOP
  7761  0000EC  EF7D  F000         	goto	i2l3759
  7762  0000F0                     i2u291_40:
  7763  0000F0  FFFF               	dw	65535	; assembler added errata NOP
  7764  0000F2                     
  7765                           ;interrupt.c: 90:                 completeStep = 0;
  7766  0000F2  0E00               	movlw	0
  7767  0000F4  6E62               	movwf	_completeStep^0,c
  7768  0000F6                     
  7769                           ;interrupt.c: 93:                 increaseStep();
  7770  0000F6  ECF5  F014         	call	_increaseStep	;wreg free
  7771  0000FA                     i2l3759:
  7772  0000FA  FFFF               	dw	65535	; assembler added errata NOP
  7773                           
  7774                           ;interrupt.c: 98:             toggleStep();
  7775  0000FC  ECD2  F014         	call	_toggleStep	;wreg free
  7776  000100                     i2l3761:
  7777  000100  FFFF               	dw	65535	; assembler added errata NOP
  7778                           
  7779                           ;interrupt.c: 103:     if(PIR1bits.ADIF){
  7780  000102  AC9E               	btfss	158,6,c	;volatile
  7781  000104  EF86  F000         	goto	i2u292_41
  7782  000108  EF89  F000         	goto	i2u292_40
  7783  00010C                     i2u292_41:
  7784  00010C  FFFF               	dw	65535	; assembler added errata NOP
  7785  00010E  EFB6  F000         	goto	i2l3773
  7786  000112                     i2u292_40:
  7787  000112  FFFF               	dw	65535	; assembler added errata NOP
  7788  000114                     
  7789                           ;interrupt.c: 104:         PIR1bits.ADIF = 0;
  7790  000114  9C9E               	bcf	158,6,c	;volatile
  7791                           
  7792                           ;interrupt.c: 107:         ADC_res = ADRESL;
  7793  000116  CFC3 F053          	movff	4035,_ADC_res	;volatile
  7794  00011A  6A54               	clrf	(_ADC_res+1)^0,c
  7795  00011C                     
  7796                           ;interrupt.c: 108:         ADC_res |= (ADRESH << 8);
  7797  00011C  50C4               	movf	196,w,c	;volatile
  7798  00011E  6E0C               	movwf	(??_isr+1)^0,c
  7799  000120  6A0B               	clrf	??_isr^0,c
  7800  000122  500B               	movf	??_isr^0,w,c
  7801  000124  1253               	iorwf	_ADC_res^0,f,c
  7802  000126  500C               	movf	(??_isr+1)^0,w,c
  7803  000128  1254               	iorwf	(_ADC_res+1)^0,f,c
  7804                           
  7805                           ;interrupt.c: 111:         if(ADC_res > therm_pressure){
  7806  00012A  0453               	decf	_ADC_res^0,w,c
  7807  00012C  0E04               	movlw	4
  7808  00012E  5854               	subwfb	(_ADC_res+1)^0,w,c
  7809  000130  A0D8               	btfss	status,0,c
  7810  000132  EF9D  F000         	goto	i2u293_41
  7811  000136  EFA0  F000         	goto	i2u293_40
  7812  00013A                     i2u293_41:
  7813  00013A  FFFF               	dw	65535	; assembler added errata NOP
  7814  00013C  EFA7  F000         	goto	i2l3769
  7815  000140                     i2u293_40:
  7816  000140  FFFF               	dw	65535	; assembler added errata NOP
  7817  000142                     
  7818                           ;interrupt.c: 113:             setTouchRel();
  7819  000142  ECD7  F014         	call	_setTouchRel	;wreg free
  7820                           
  7821                           ;interrupt.c: 114:             setThermRel();
  7822  000146  ECDC  F014         	call	_setThermRel	;wreg free
  7823                           
  7824                           ;interrupt.c: 115:         }else if(ADC_res > touch_pressure){
  7825  00014A  EFB6  F000         	goto	i2l3773
  7826  00014E                     i2l3769:
  7827  00014E  FFFF               	dw	65535	; assembler added errata NOP
  7828  000150  0453               	decf	_ADC_res^0,w,c
  7829  000152  0E02               	movlw	2
  7830  000154  5854               	subwfb	(_ADC_res+1)^0,w,c
  7831  000156  A0D8               	btfss	status,0,c
  7832  000158  EFB0  F000         	goto	i2u294_41
  7833  00015C  EFB3  F000         	goto	i2u294_40
  7834  000160                     i2u294_41:
  7835  000160  FFFF               	dw	65535	; assembler added errata NOP
  7836  000162  EFB6  F000         	goto	i2l3773
  7837  000166                     i2u294_40:
  7838  000166  FFFF               	dw	65535	; assembler added errata NOP
  7839  000168                     
  7840                           ;interrupt.c: 117:             setTouchRel();
  7841  000168  ECD7  F014         	call	_setTouchRel	;wreg free
  7842  00016C                     i2l3773:
  7843  00016C  FFFF               	dw	65535	; assembler added errata NOP
  7844                           
  7845                           ;interrupt.c: 122:     if(PIR1bits.RC1IF){
  7846  00016E  AA9E               	btfss	158,5,c	;volatile
  7847  000170  EFBC  F000         	goto	i2u295_41
  7848  000174  EFBF  F000         	goto	i2u295_40
  7849  000178                     i2u295_41:
  7850  000178  FFFF               	dw	65535	; assembler added errata NOP
  7851  00017A  EFC6  F000         	goto	i2l468
  7852  00017E                     i2u295_40:
  7853  00017E  FFFF               	dw	65535	; assembler added errata NOP
  7854  000180                     
  7855                           ;interrupt.c: 123:         PIR1bits.RC1IF = 0;
  7856  000180  9A9E               	bcf	158,5,c	;volatile
  7857                           
  7858                           ;interrupt.c: 126:         unsigned char temp = RCREG1;
  7859  000182  CFAE F011          	movff	4014,isr@temp	;volatile
  7860  000186                     
  7861                           ;interrupt.c: 128:         storeData(temp);
  7862  000186  5011               	movf	isr@temp^0,w,c
  7863  000188  ECAA  F009         	call	i2_storeData
  7864  00018C                     i2l468:
  7865  00018C  FFFF               	dw	65535	; assembler added errata NOP
  7866  00018E  C010  FFF4         	movff	??_isr+5,prodh
  7867  000192  C00F  FFF3         	movff	??_isr+4,prodl
  7868  000196  C00E  FFDA         	movff	??_isr+3,fsr2h
  7869  00019A  C00D  FFD9         	movff	??_isr+2,fsr2l
  7870  00019E  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7871  0001A0  0011               	retfie		f
  7872  0001A2  FFFF               	dw	65535	; errata NOP
  7873  0001A4                     __end_of_isr:
  7874                           	callstack 0
  7875                           
  7876 ;; *************** function i2_storeData *****************
  7877 ;; Defined at:
  7878 ;;		line 236 in file "usart.c"
  7879 ;; Parameters:    Size  Location     Type
  7880 ;;  data            1    wreg     unsigned char 
  7881 ;; Auto vars:     Size  Location     Type
  7882 ;;  data            1    9[COMRAM] unsigned char 
  7883 ;; Return value:  Size  Location     Type
  7884 ;;                  1    wreg      void 
  7885 ;; Registers used:
  7886 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7887 ;; Tracked objects:
  7888 ;;		On entry : 0/0
  7889 ;;		On exit  : 0/0
  7890 ;;		Unchanged: 0/0
  7891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7892 ;;      Params:         0       0       0       0       0       0       0
  7893 ;;      Locals:         1       0       0       0       0       0       0
  7894 ;;      Temps:          2       0       0       0       0       0       0
  7895 ;;      Totals:         3       0       0       0       0       0       0
  7896 ;;Total ram usage:        3 bytes
  7897 ;; Hardware stack levels used:    1
  7898 ;; Hardware stack levels required when called:    2
  7899 ;; This function calls:
  7900 ;;		i2_printError
  7901 ;; This function is called by:
  7902 ;;		_isr
  7903 ;; This function uses a non-reentrant model
  7904 ;;
  7905                           
  7906                           	psect	text44
  7907  001354                     __ptext44:
  7908                           	callstack 0
  7909  001354                     i2_storeData:
  7910                           	callstack 0
  7911  001354  FFFF               	dw	65535	; assembler added errata NOP
  7912                           
  7913                           ;incstack = 0
  7914                           ;i2storeData@data stored from wreg
  7915  001356  6E0A               	movwf	i2storeData@data^0,c
  7916  001358                     
  7917                           ;usart.c: 242:     receivedMex[counter] = data;
  7918  001358  0E43               	movlw	low _receivedMex
  7919  00135A  245E               	addwf	_counter^0,w,c
  7920  00135C  6ED9               	movwf	fsr2l,c
  7921  00135E  6ADA               	clrf	fsr2h,c
  7922  001360  0E00               	movlw	high _receivedMex
  7923  001362  22DA               	addwfc	fsr2h,f,c
  7924  001364  C00A  FFDF         	movff	i2storeData@data,indf2
  7925  001368                     
  7926                           ;usart.c: 244:     counter++;
  7927  001368  2A5E               	incf	_counter^0,f,c
  7928                           
  7929                           ;usart.c: 247:     switch(receivedMex[0]){
  7930  00136A  EFD3  F009         	goto	i2l3601
  7931  00136E                     i2l3591:
  7932  00136E  FFFF               	dw	65535	; assembler added errata NOP
  7933                           
  7934                           ;usart.c: 249:             mexLength = 5;
  7935  001370  0E05               	movlw	5
  7936  001372  6E6D               	movwf	_mexLength^0,c
  7937                           
  7938                           ;usart.c: 250:             neverCheck = 0;
  7939  001374  0E00               	movlw	0
  7940  001376  6E5D               	movwf	_neverCheck^0,c
  7941                           
  7942                           ;usart.c: 251:             break;
  7943  001378  EFEE  F009         	goto	i2l3603
  7944  00137C                     i2l3593:
  7945  00137C  FFFF               	dw	65535	; assembler added errata NOP
  7946                           
  7947                           ;usart.c: 253:             mexLength = 9;
  7948  00137E  0E09               	movlw	9
  7949  001380  6E6D               	movwf	_mexLength^0,c
  7950                           
  7951                           ;usart.c: 254:             neverCheck = 0;
  7952  001382  0E00               	movlw	0
  7953  001384  6E5D               	movwf	_neverCheck^0,c
  7954                           
  7955                           ;usart.c: 255:             break;
  7956  001386  EFEE  F009         	goto	i2l3603
  7957  00138A                     i2l3595:
  7958  00138A  FFFF               	dw	65535	; assembler added errata NOP
  7959                           
  7960                           ;usart.c: 257:             mexLength = 1;
  7961  00138C  0E01               	movlw	1
  7962  00138E  6E6D               	movwf	_mexLength^0,c
  7963                           
  7964                           ;usart.c: 258:             neverCheck = 0;
  7965  001390  0E00               	movlw	0
  7966  001392  6E5D               	movwf	_neverCheck^0,c
  7967                           
  7968                           ;usart.c: 259:             break;
  7969  001394  EFEE  F009         	goto	i2l3603
  7970  001398                     i2l3597:
  7971  001398  FFFF               	dw	65535	; assembler added errata NOP
  7972                           
  7973                           ;usart.c: 261:             neverCheck = 1;
  7974  00139A  0E01               	movlw	1
  7975  00139C  6E5D               	movwf	_neverCheck^0,c
  7976                           
  7977                           ;usart.c: 262:             counter = 0;
  7978  00139E  0E00               	movlw	0
  7979  0013A0  6E5E               	movwf	_counter^0,c
  7980                           
  7981                           ;usart.c: 263:             break;
  7982  0013A2  EFEE  F009         	goto	i2l3603
  7983  0013A6                     i2l3601:
  7984  0013A6  FFFF               	dw	65535	; assembler added errata NOP
  7985  0013A8  5043               	movf	_receivedMex^0,w,c
  7986  0013AA  6E08               	movwf	??i2_storeData^0,c
  7987  0013AC  6A09               	clrf	(??i2_storeData+1)^0,c
  7988                           
  7989                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7990                           ; Switch size 1, requested type "simple"
  7991                           ; Number of cases is 1, Range of values is 0 to 0
  7992                           ; switch strategies available:
  7993                           ; Name         Instructions Cycles
  7994                           ; simple_byte            4     3 (average)
  7995                           ;	Chosen strategy is simple_byte
  7996  0013AE  5009               	movf	(??i2_storeData+1)^0,w,c
  7997  0013B0  0A00               	xorlw	0	; case 0
  7998  0013B2  B4D8               	btfsc	status,2,c
  7999  0013B4  EFDE  F009         	goto	i2l5093
  8000  0013B8  EFCC  F009         	goto	i2l3597
  8001  0013BC                     i2l5093:
  8002  0013BC  FFFF               	dw	65535	; assembler added errata NOP
  8003                           
  8004                           ; Switch size 1, requested type "simple"
  8005                           ; Number of cases is 3, Range of values is 1 to 3
  8006                           ; switch strategies available:
  8007                           ; Name         Instructions Cycles
  8008                           ; simple_byte           10     6 (average)
  8009                           ;	Chosen strategy is simple_byte
  8010  0013BE  5008               	movf	??i2_storeData^0,w,c
  8011  0013C0  0A01               	xorlw	1	; case 1
  8012  0013C2  B4D8               	btfsc	status,2,c
  8013  0013C4  EFB7  F009         	goto	i2l3591
  8014  0013C8  0A03               	xorlw	3	; case 2
  8015  0013CA  B4D8               	btfsc	status,2,c
  8016  0013CC  EFBE  F009         	goto	i2l3593
  8017  0013D0  0A01               	xorlw	1	; case 3
  8018  0013D2  B4D8               	btfsc	status,2,c
  8019  0013D4  EFC5  F009         	goto	i2l3595
  8020  0013D8  EFCC  F009         	goto	i2l3597
  8021  0013DC                     i2l3603:
  8022  0013DC  FFFF               	dw	65535	; assembler added errata NOP
  8023                           
  8024                           ;usart.c: 268:     if(counter == mexLength && !neverCheck){
  8025  0013DE  506D               	movf	_mexLength^0,w,c
  8026  0013E0  185E               	xorwf	_counter^0,w,c
  8027  0013E2  A4D8               	btfss	status,2,c
  8028  0013E4  EFF6  F009         	goto	i2u272_41
  8029  0013E8  EFF9  F009         	goto	i2u272_40
  8030  0013EC                     i2u272_41:
  8031  0013EC  FFFF               	dw	65535	; assembler added errata NOP
  8032  0013EE  EFEB  F00A         	goto	i2l640
  8033  0013F2                     i2u272_40:
  8034  0013F2  FFFF               	dw	65535	; assembler added errata NOP
  8035  0013F4  505D               	movf	_neverCheck^0,w,c
  8036  0013F6  A4D8               	btfss	status,2,c
  8037  0013F8  EF00  F00A         	goto	i2u273_41
  8038  0013FC  EF03  F00A         	goto	i2u273_40
  8039  001400                     i2u273_41:
  8040  001400  FFFF               	dw	65535	; assembler added errata NOP
  8041  001402  EFEB  F00A         	goto	i2l640
  8042  001406                     i2u273_40:
  8043  001406  FFFF               	dw	65535	; assembler added errata NOP
  8044  001408                     
  8045                           ;usart.c: 269:         counter = 0;
  8046  001408  0E00               	movlw	0
  8047  00140A  6E5E               	movwf	_counter^0,c
  8048                           
  8049                           ;usart.c: 272:         switch(receivedMex[0]){
  8050  00140C  EFCD  F00A         	goto	i2l3645
  8051  001410                     i2l3609:
  8052  001410  FFFF               	dw	65535	; assembler added errata NOP
  8053                           
  8054                           ;usart.c: 274:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  8055  001412  5061               	movf	_dataCounter^0,w,c
  8056  001414  0D04               	mullw	4
  8057  001416  0EE4               	movlw	low _dataSequence
  8058  001418  24F3               	addwf	243,w,c
  8059  00141A  6ED9               	movwf	fsr2l,c
  8060  00141C  0E00               	movlw	high _dataSequence
  8061  00141E  20F4               	addwfc	prodh,w,c
  8062  001420  6EDA               	movwf	fsr2h,c
  8063  001422  C044  FFDF         	movff	_receivedMex+1,indf2
  8064                           
  8065                           ;usart.c: 275:                 dataSequence[dataCounter].posX = receivedMex[2] * 5;
  8066  001426  5061               	movf	_dataCounter^0,w,c
  8067  001428  0D04               	mullw	4
  8068  00142A  0EE5               	movlw	low (_dataSequence+1)
  8069  00142C  24F3               	addwf	243,w,c
  8070  00142E  6ED9               	movwf	fsr2l,c
  8071  001430  0E00               	movlw	high (_dataSequence+1)
  8072  001432  20F4               	addwfc	prodh,w,c
  8073  001434  6EDA               	movwf	fsr2h,c
  8074  001436  5045               	movf	(_receivedMex+2)^0,w,c
  8075  001438  0D05               	mullw	5
  8076  00143A  CFF3 FFDF          	movff	prodl,indf2
  8077                           
  8078                           ;usart.c: 276:                 dataSequence[dataCounter].posY = receivedMex[3] * 5;
  8079  00143E  5061               	movf	_dataCounter^0,w,c
  8080  001440  0D04               	mullw	4
  8081  001442  0EE6               	movlw	low (_dataSequence+2)
  8082  001444  24F3               	addwf	243,w,c
  8083  001446  6ED9               	movwf	fsr2l,c
  8084  001448  0E00               	movlw	high (_dataSequence+2)
  8085  00144A  20F4               	addwfc	prodh,w,c
  8086  00144C  6EDA               	movwf	fsr2h,c
  8087  00144E  5046               	movf	(_receivedMex+3)^0,w,c
  8088  001450  0D05               	mullw	5
  8089  001452  CFF3 FFDF          	movff	prodl,indf2
  8090                           
  8091                           ;usart.c: 277:                 dataSequence[dataCounter].rotation = receivedMex[4];
  8092  001456  5061               	movf	_dataCounter^0,w,c
  8093  001458  0D04               	mullw	4
  8094  00145A  0EE7               	movlw	low (_dataSequence+3)
  8095  00145C  24F3               	addwf	243,w,c
  8096  00145E  6ED9               	movwf	fsr2l,c
  8097  001460  0E00               	movlw	high (_dataSequence+3)
  8098  001462  20F4               	addwfc	prodh,w,c
  8099  001464  6EDA               	movwf	fsr2h,c
  8100  001466  C047  FFDF         	movff	_receivedMex+4,indf2
  8101                           
  8102                           ;usart.c: 280:                 if((dataSequence[dataCounter].posX > maxX || dataSequence
      +                          [dataCounter].posY > maxY) &&
  8103  00146A  5061               	movf	_dataCounter^0,w,c
  8104  00146C  0D04               	mullw	4
  8105  00146E  0EE5               	movlw	low (_dataSequence+1)
  8106  001470  24F3               	addwf	243,w,c
  8107  001472  6ED9               	movwf	fsr2l,c
  8108  001474  0E00               	movlw	high (_dataSequence+1)
  8109  001476  20F4               	addwfc	prodh,w,c
  8110  001478  6EDA               	movwf	fsr2h,c
  8111  00147A  0E66               	movlw	102
  8112  00147C  60DF               	cpfslt	indf2,c
  8113  00147E  EF43  F00A         	goto	i2u274_41
  8114  001482  EF46  F00A         	goto	i2u274_40
  8115  001486                     i2u274_41:
  8116  001486  FFFF               	dw	65535	; assembler added errata NOP
  8117  001488  EF58  F00A         	goto	i2l3613
  8118  00148C                     i2u274_40:
  8119  00148C  FFFF               	dw	65535	; assembler added errata NOP
  8120  00148E  5061               	movf	_dataCounter^0,w,c
  8121  001490  0D04               	mullw	4
  8122  001492  0EE6               	movlw	low (_dataSequence+2)
  8123  001494  24F3               	addwf	243,w,c
  8124  001496  6ED9               	movwf	fsr2l,c
  8125  001498  0E00               	movlw	high (_dataSequence+2)
  8126  00149A  20F4               	addwfc	prodh,w,c
  8127  00149C  6EDA               	movwf	fsr2h,c
  8128  00149E  0E65               	movlw	101
  8129  0014A0  64DF               	cpfsgt	indf2,c
  8130  0014A2  EF55  F00A         	goto	i2u275_41
  8131  0014A6  EF58  F00A         	goto	i2u275_40
  8132  0014AA                     i2u275_41:
  8133  0014AA  FFFF               	dw	65535	; assembler added errata NOP
  8134  0014AC  EF70  F00A         	goto	i2l3617
  8135  0014B0                     i2u275_40:
  8136  0014B0                     i2l3613:
  8137  0014B0  FFFF               	dw	65535	; assembler added errata NOP
  8138  0014B2  5061               	movf	_dataCounter^0,w,c
  8139  0014B4  0D04               	mullw	4
  8140  0014B6  0EE4               	movlw	low _dataSequence
  8141  0014B8  24F3               	addwf	243,w,c
  8142  0014BA  6ED9               	movwf	fsr2l,c
  8143  0014BC  0E00               	movlw	high _dataSequence
  8144  0014BE  20F4               	addwfc	prodh,w,c
  8145  0014C0  6EDA               	movwf	fsr2h,c
  8146  0014C2  28DE               	incf	postinc2,w,c
  8147  0014C4  B4D8               	btfsc	status,2,c
  8148  0014C6  EF67  F00A         	goto	i2u276_41
  8149  0014CA  EF6A  F00A         	goto	i2u276_40
  8150  0014CE                     i2u276_41:
  8151  0014CE  FFFF               	dw	65535	; assembler added errata NOP
  8152  0014D0  EF70  F00A         	goto	i2l3617
  8153  0014D4                     i2u276_40:
  8154  0014D4  FFFF               	dw	65535	; assembler added errata NOP
  8155  0014D6                     
  8156                           ;usart.c: 281:                         dataSequence[dataCounter].feederLine != 0xFF){;us
      +                          art.c: 282:                     printError(5);
  8157  0014D6  0E05               	movlw	5
  8158  0014D8  EC62  F00F         	call	i2_printError
  8159                           
  8160                           ;usart.c: 283:                 }else{
  8161  0014DC  EFE8  F00A         	goto	i2l3647
  8162  0014E0                     i2l3617:
  8163  0014E0  FFFF               	dw	65535	; assembler added errata NOP
  8164                           
  8165                           ;usart.c: 284:                     dataCounter++;
  8166  0014E2  2A61               	incf	_dataCounter^0,f,c
  8167  0014E4  EFE8  F00A         	goto	i2l3647
  8168  0014E8                     i2l633:
  8169  0014E8  FFFF               	dw	65535	; assembler added errata NOP
  8170                           
  8171                           ;usart.c: 289:                 newSequenceData.L = receivedMex[1];
  8172  0014EA  C044  F0F8         	movff	_receivedMex+1,_newSequenceData
  8173                           
  8174                           ;usart.c: 290:                 newSequenceData.W = receivedMex[2];
  8175  0014EE  C045  F0F9         	movff	_receivedMex+2,_newSequenceData+1
  8176  0014F2                     
  8177                           ;usart.c: 291:                 newSequenceData.init_posX = receivedMex[3] * 5;
  8178  0014F2  5046               	movf	(_receivedMex+3)^0,w,c
  8179  0014F4  0D05               	mullw	5
  8180  0014F6  CFF3 F0FA          	movff	prodl,_newSequenceData+2
  8181                           
  8182                           ;usart.c: 292:                 newSequenceData.init_posY = receivedMex[4] * 5;
  8183  0014FA  5047               	movf	(_receivedMex+4)^0,w,c
  8184  0014FC  0D05               	mullw	5
  8185  0014FE  CFF3 F0FB          	movff	prodl,_newSequenceData+3
  8186  001502                     
  8187                           ;usart.c: 293:                 newSequenceData.init_rot = receivedMex[5];
  8188  001502  C048  F0FC         	movff	_receivedMex+5,_newSequenceData+4
  8189                           
  8190                           ;usart.c: 294:                 newSequenceData.end_posX = receivedMex[6] * 5;
  8191  001506  5049               	movf	(_receivedMex+6)^0,w,c
  8192  001508  0D05               	mullw	5
  8193  00150A  CFF3 F0FD          	movff	prodl,_newSequenceData+5
  8194                           
  8195                           ;usart.c: 295:                 newSequenceData.end_posY = receivedMex[7] * 5;
  8196  00150E  504A               	movf	(_receivedMex+7)^0,w,c
  8197  001510  0D05               	mullw	5
  8198  001512  CFF3 F0FE          	movff	prodl,_newSequenceData+6
  8199  001516                     
  8200                           ;usart.c: 296:                 newSequenceData.end_rot = receivedMex[8];
  8201  001516  C04B  F0FF         	movff	_receivedMex+8,_newSequenceData+7
  8202  00151A                     
  8203                           ;usart.c: 299:                 if(newSequenceData.init_posX > maxFeedX ||
  8204  00151A  0E1F               	movlw	31
  8205  00151C  0100               	movlb	0	; () banked
  8206  00151E  61FA               	cpfslt	(_newSequenceData+2)& (0+255),b
  8207  001520  EF94  F00A         	goto	i2u277_41
  8208  001524  EF97  F00A         	goto	i2u277_40
  8209  001528                     i2u277_41:
  8210  001528  FFFF               	dw	65535	; assembler added errata NOP
  8211  00152A  EFB5  F00A         	goto	i2l3633
  8212  00152E                     i2u277_40:
  8213  00152E  FFFF               	dw	65535	; assembler added errata NOP
  8214  001530                     
  8215                           ; BSR set to: 0
  8216  001530  0E66               	movlw	102
  8217  001532  61FD               	cpfslt	(_newSequenceData+5)& (0+255),b
  8218  001534  EF9E  F00A         	goto	i2u278_41
  8219  001538  EFA1  F00A         	goto	i2u278_40
  8220  00153C                     i2u278_41:
  8221  00153C  FFFF               	dw	65535	; assembler added errata NOP
  8222  00153E  EFB5  F00A         	goto	i2l3633
  8223  001542                     i2u278_40:
  8224  001542  FFFF               	dw	65535	; assembler added errata NOP
  8225  001544                     
  8226                           ; BSR set to: 0
  8227  001544  0E65               	movlw	101
  8228  001546  61FB               	cpfslt	(_newSequenceData+3)& (0+255),b
  8229  001548  EFA8  F00A         	goto	i2u279_41
  8230  00154C  EFAB  F00A         	goto	i2u279_40
  8231  001550                     i2u279_41:
  8232  001550  FFFF               	dw	65535	; assembler added errata NOP
  8233  001552  EFB5  F00A         	goto	i2l3633
  8234  001556                     i2u279_40:
  8235  001556  FFFF               	dw	65535	; assembler added errata NOP
  8236  001558                     
  8237                           ; BSR set to: 0
  8238  001558  0E65               	movlw	101
  8239  00155A  65FE               	cpfsgt	(_newSequenceData+6)& (0+255),b
  8240  00155C  EFB2  F00A         	goto	i2u280_41
  8241  001560  EFB5  F00A         	goto	i2u280_40
  8242  001564                     i2u280_41:
  8243  001564  FFFF               	dw	65535	; assembler added errata NOP
  8244  001566  EFBD  F00A         	goto	i2l3637
  8245  00156A                     i2u280_40:
  8246  00156A                     i2l3633:
  8247  00156A  FFFF               	dw	65535	; assembler added errata NOP
  8248                           
  8249                           ; BSR set to: 0
  8250                           ;usart.c: 302:                         newSequenceData.end_posY > maxY){;usart.c: 303:  
      +                                             _newSequence = 0;
  8251  00156C  0E00               	movlw	0
  8252  00156E  6E5F               	movwf	__newSequence^0,c
  8253  001570                     
  8254                           ; BSR set to: 0
  8255                           ;usart.c: 304:                     printError(5);
  8256  001570  0E05               	movlw	5
  8257  001572  EC62  F00F         	call	i2_printError
  8258                           
  8259                           ;usart.c: 305:                 }else{
  8260  001576  EFE8  F00A         	goto	i2l3647
  8261  00157A                     i2l3637:
  8262  00157A  FFFF               	dw	65535	; assembler added errata NOP
  8263                           
  8264                           ; BSR set to: 0
  8265                           ;usart.c: 306:                     _newSequence = 1;
  8266  00157C  0E01               	movlw	1
  8267  00157E  6E5F               	movwf	__newSequence^0,c
  8268  001580  EFE8  F00A         	goto	i2l3647
  8269  001584                     i2l3639:
  8270  001584  FFFF               	dw	65535	; assembler added errata NOP
  8271                           
  8272                           ;usart.c: 311:                 _fatalError = 1;
  8273  001586  0E01               	movlw	1
  8274  001588  6E60               	movwf	__fatalError^0,c
  8275                           
  8276                           ;usart.c: 312:                 break;
  8277  00158A  EFE8  F00A         	goto	i2l3647
  8278  00158E                     i2l3641:
  8279  00158E  FFFF               	dw	65535	; assembler added errata NOP
  8280                           
  8281                           ;usart.c: 315:                 printError(8);
  8282  001590  0E08               	movlw	8
  8283  001592  EC62  F00F         	call	i2_printError
  8284                           
  8285                           ;usart.c: 316:                 break;
  8286  001596  EFE8  F00A         	goto	i2l3647
  8287  00159A                     i2l3645:
  8288  00159A  FFFF               	dw	65535	; assembler added errata NOP
  8289  00159C  5043               	movf	_receivedMex^0,w,c
  8290  00159E  6E08               	movwf	??i2_storeData^0,c
  8291  0015A0  6A09               	clrf	(??i2_storeData+1)^0,c
  8292                           
  8293                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8294                           ; Switch size 1, requested type "simple"
  8295                           ; Number of cases is 1, Range of values is 0 to 0
  8296                           ; switch strategies available:
  8297                           ; Name         Instructions Cycles
  8298                           ; simple_byte            4     3 (average)
  8299                           ;	Chosen strategy is simple_byte
  8300  0015A2  5009               	movf	(??i2_storeData+1)^0,w,c
  8301  0015A4  0A00               	xorlw	0	; case 0
  8302  0015A6  B4D8               	btfsc	status,2,c
  8303  0015A8  EFD8  F00A         	goto	i2l5095
  8304  0015AC  EFC7  F00A         	goto	i2l3641
  8305  0015B0                     i2l5095:
  8306  0015B0  FFFF               	dw	65535	; assembler added errata NOP
  8307                           
  8308                           ; Switch size 1, requested type "simple"
  8309                           ; Number of cases is 3, Range of values is 1 to 3
  8310                           ; switch strategies available:
  8311                           ; Name         Instructions Cycles
  8312                           ; simple_byte           10     6 (average)
  8313                           ;	Chosen strategy is simple_byte
  8314  0015B2  5008               	movf	??i2_storeData^0,w,c
  8315  0015B4  0A01               	xorlw	1	; case 1
  8316  0015B6  B4D8               	btfsc	status,2,c
  8317  0015B8  EF08  F00A         	goto	i2l3609
  8318  0015BC  0A03               	xorlw	3	; case 2
  8319  0015BE  B4D8               	btfsc	status,2,c
  8320  0015C0  EF74  F00A         	goto	i2l633
  8321  0015C4  0A01               	xorlw	1	; case 3
  8322  0015C6  B4D8               	btfsc	status,2,c
  8323  0015C8  EFC2  F00A         	goto	i2l3639
  8324  0015CC  EFC7  F00A         	goto	i2l3641
  8325  0015D0                     i2l3647:
  8326  0015D0  FFFF               	dw	65535	; assembler added errata NOP
  8327                           
  8328                           ;usart.c: 320:         receivedMex[0] = 0;
  8329  0015D2  0E00               	movlw	0
  8330  0015D4  6E43               	movwf	_receivedMex^0,c
  8331  0015D6                     i2l640:
  8332  0015D6  FFFF               	dw	65535	; assembler added errata NOP
  8333  0015D8  0012               	return		;funcret
  8334  0015DA  FFFF               	dw	65535	; errata NOP
  8335  0015DC                     __end_ofi2_storeData:
  8336                           	callstack 0
  8337                           
  8338 ;; *************** function _writeTM0 *****************
  8339 ;; Defined at:
  8340 ;;		line 25 in file "motors.c"
  8341 ;; Parameters:    Size  Location     Type
  8342 ;;		None
  8343 ;; Auto vars:     Size  Location     Type
  8344 ;;		None
  8345 ;; Return value:  Size  Location     Type
  8346 ;;                  1    wreg      void 
  8347 ;; Registers used:
  8348 ;;		wreg, status,2
  8349 ;; Tracked objects:
  8350 ;;		On entry : 0/0
  8351 ;;		On exit  : 0/0
  8352 ;;		Unchanged: 0/0
  8353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8354 ;;      Params:         0       0       0       0       0       0       0
  8355 ;;      Locals:         0       0       0       0       0       0       0
  8356 ;;      Temps:          0       0       0       0       0       0       0
  8357 ;;      Totals:         0       0       0       0       0       0       0
  8358 ;;Total ram usage:        0 bytes
  8359 ;; Hardware stack levels used:    1
  8360 ;; This function calls:
  8361 ;;		Nothing
  8362 ;; This function is called by:
  8363 ;;		_isr
  8364 ;; This function uses a non-reentrant model
  8365 ;;
  8366                           
  8367                           	psect	text45
  8368  002928                     __ptext45:
  8369                           	callstack 0
  8370  002928                     _writeTM0:
  8371                           	callstack 0
  8372  002928  FFFF               	dw	65535	; assembler added errata NOP
  8373  00292A                     
  8374                           ;motors.c: 26:     tm0Error = 1;
  8375  00292A  0E00               	movlw	0
  8376  00292C  6E5A               	movwf	(_tm0Error+1)^0,c
  8377  00292E  0E01               	movlw	1
  8378  002930  6E59               	movwf	_tm0Error^0,c
  8379  002932  0012               	return		;funcret
  8380  002934  FFFF               	dw	65535	; errata NOP
  8381  002936                     __end_of_writeTM0:
  8382                           	callstack 0
  8383                           
  8384 ;; *************** function _whatsTM0Limit *****************
  8385 ;; Defined at:
  8386 ;;		line 39 in file "motors.c"
  8387 ;; Parameters:    Size  Location     Type
  8388 ;;		None
  8389 ;; Auto vars:     Size  Location     Type
  8390 ;;		None
  8391 ;; Return value:  Size  Location     Type
  8392 ;;                  1    wreg      unsigned char 
  8393 ;; Registers used:
  8394 ;;		wreg, status,2
  8395 ;; Tracked objects:
  8396 ;;		On entry : 0/0
  8397 ;;		On exit  : 0/0
  8398 ;;		Unchanged: 0/0
  8399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8400 ;;      Params:         0       0       0       0       0       0       0
  8401 ;;      Locals:         0       0       0       0       0       0       0
  8402 ;;      Temps:          0       0       0       0       0       0       0
  8403 ;;      Totals:         0       0       0       0       0       0       0
  8404 ;;Total ram usage:        0 bytes
  8405 ;; Hardware stack levels used:    1
  8406 ;; This function calls:
  8407 ;;		Nothing
  8408 ;; This function is called by:
  8409 ;;		_isr
  8410 ;; This function uses a non-reentrant model
  8411 ;;
  8412                           
  8413                           	psect	text46
  8414  0029E2                     __ptext46:
  8415                           	callstack 0
  8416  0029E2                     _whatsTM0Limit:
  8417                           	callstack 0
  8418  0029E2  FFFF               	dw	65535	; assembler added errata NOP
  8419  0029E4                     
  8420                           ;motors.c: 40:     return(tm0Limit);
  8421  0029E4  5066               	movf	_tm0Limit^0,w,c
  8422  0029E6  0012               	return		;funcret
  8423  0029E8  FFFF               	dw	65535	; errata NOP
  8424  0029EA                     __end_of_whatsTM0Limit:
  8425                           	callstack 0
  8426                           
  8427 ;; *************** function _toggleStep *****************
  8428 ;; Defined at:
  8429 ;;		line 93 in file "timer.c"
  8430 ;; Parameters:    Size  Location     Type
  8431 ;;		None
  8432 ;; Auto vars:     Size  Location     Type
  8433 ;;		None
  8434 ;; Return value:  Size  Location     Type
  8435 ;;                  1    wreg      void 
  8436 ;; Registers used:
  8437 ;;		wreg, status,2
  8438 ;; Tracked objects:
  8439 ;;		On entry : 0/0
  8440 ;;		On exit  : 0/0
  8441 ;;		Unchanged: 0/0
  8442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8443 ;;      Params:         0       0       0       0       0       0       0
  8444 ;;      Locals:         0       0       0       0       0       0       0
  8445 ;;      Temps:          0       0       0       0       0       0       0
  8446 ;;      Totals:         0       0       0       0       0       0       0
  8447 ;;Total ram usage:        0 bytes
  8448 ;; Hardware stack levels used:    1
  8449 ;; This function calls:
  8450 ;;		Nothing
  8451 ;; This function is called by:
  8452 ;;		_isr
  8453 ;; This function uses a non-reentrant model
  8454 ;;
  8455                           
  8456                           	psect	text47
  8457  0029A4                     __ptext47:
  8458                           	callstack 0
  8459  0029A4                     _toggleStep:
  8460                           	callstack 0
  8461  0029A4  FFFF               	dw	65535	; assembler added errata NOP
  8462  0029A6                     
  8463                           ;timer.c: 94:     stepToggle = 1;
  8464  0029A6  0E01               	movlw	1
  8465  0029A8  6E5B               	movwf	_stepToggle^0,c	;volatile
  8466  0029AA  0012               	return		;funcret
  8467  0029AC  FFFF               	dw	65535	; errata NOP
  8468  0029AE                     __end_of_toggleStep:
  8469                           	callstack 0
  8470                           
  8471 ;; *************** function _setTouchRel *****************
  8472 ;; Defined at:
  8473 ;;		line 86 in file "adc.c"
  8474 ;; Parameters:    Size  Location     Type
  8475 ;;		None
  8476 ;; Auto vars:     Size  Location     Type
  8477 ;;		None
  8478 ;; Return value:  Size  Location     Type
  8479 ;;                  1    wreg      void 
  8480 ;; Registers used:
  8481 ;;		wreg, status,2
  8482 ;; Tracked objects:
  8483 ;;		On entry : 0/0
  8484 ;;		On exit  : 0/0
  8485 ;;		Unchanged: 0/0
  8486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8487 ;;      Params:         0       0       0       0       0       0       0
  8488 ;;      Locals:         0       0       0       0       0       0       0
  8489 ;;      Temps:          0       0       0       0       0       0       0
  8490 ;;      Totals:         0       0       0       0       0       0       0
  8491 ;;Total ram usage:        0 bytes
  8492 ;; Hardware stack levels used:    1
  8493 ;; This function calls:
  8494 ;;		Nothing
  8495 ;; This function is called by:
  8496 ;;		_isr
  8497 ;; This function uses a non-reentrant model
  8498 ;;
  8499                           
  8500                           	psect	text48
  8501  0029AE                     __ptext48:
  8502                           	callstack 0
  8503  0029AE                     _setTouchRel:
  8504                           	callstack 0
  8505  0029AE  FFFF               	dw	65535	; assembler added errata NOP
  8506  0029B0                     
  8507                           ;adc.c: 87:     touch_rel = 1;
  8508  0029B0  0E01               	movlw	1
  8509  0029B2  6E65               	movwf	_touch_rel^0,c	;volatile
  8510  0029B4  0012               	return		;funcret
  8511  0029B6  FFFF               	dw	65535	; errata NOP
  8512  0029B8                     __end_of_setTouchRel:
  8513                           	callstack 0
  8514                           
  8515 ;; *************** function _setThermRel *****************
  8516 ;; Defined at:
  8517 ;;		line 79 in file "adc.c"
  8518 ;; Parameters:    Size  Location     Type
  8519 ;;		None
  8520 ;; Auto vars:     Size  Location     Type
  8521 ;;		None
  8522 ;; Return value:  Size  Location     Type
  8523 ;;                  1    wreg      void 
  8524 ;; Registers used:
  8525 ;;		wreg, status,2
  8526 ;; Tracked objects:
  8527 ;;		On entry : 0/0
  8528 ;;		On exit  : 0/0
  8529 ;;		Unchanged: 0/0
  8530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8531 ;;      Params:         0       0       0       0       0       0       0
  8532 ;;      Locals:         0       0       0       0       0       0       0
  8533 ;;      Temps:          0       0       0       0       0       0       0
  8534 ;;      Totals:         0       0       0       0       0       0       0
  8535 ;;Total ram usage:        0 bytes
  8536 ;; Hardware stack levels used:    1
  8537 ;; This function calls:
  8538 ;;		Nothing
  8539 ;; This function is called by:
  8540 ;;		_isr
  8541 ;; This function uses a non-reentrant model
  8542 ;;
  8543                           
  8544                           	psect	text49
  8545  0029B8                     __ptext49:
  8546                           	callstack 0
  8547  0029B8                     _setThermRel:
  8548                           	callstack 0
  8549  0029B8  FFFF               	dw	65535	; assembler added errata NOP
  8550  0029BA                     
  8551                           ;adc.c: 80:     therm_rel = 1;
  8552  0029BA  0E01               	movlw	1
  8553  0029BC  6E64               	movwf	_therm_rel^0,c	;volatile
  8554  0029BE  0012               	return		;funcret
  8555  0029C0  FFFF               	dw	65535	; errata NOP
  8556  0029C2                     __end_of_setThermRel:
  8557                           	callstack 0
  8558                           
  8559 ;; *************** function _retPeriod *****************
  8560 ;; Defined at:
  8561 ;;		line 101 in file "timer.c"
  8562 ;; Parameters:    Size  Location     Type
  8563 ;;		None
  8564 ;; Auto vars:     Size  Location     Type
  8565 ;;		None
  8566 ;; Return value:  Size  Location     Type
  8567 ;;                  2    0[COMRAM] unsigned int 
  8568 ;; Registers used:
  8569 ;;		None
  8570 ;; Tracked objects:
  8571 ;;		On entry : 0/0
  8572 ;;		On exit  : 0/0
  8573 ;;		Unchanged: 0/0
  8574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8575 ;;      Params:         2       0       0       0       0       0       0
  8576 ;;      Locals:         0       0       0       0       0       0       0
  8577 ;;      Temps:          0       0       0       0       0       0       0
  8578 ;;      Totals:         2       0       0       0       0       0       0
  8579 ;;Total ram usage:        2 bytes
  8580 ;; Hardware stack levels used:    1
  8581 ;; This function calls:
  8582 ;;		Nothing
  8583 ;; This function is called by:
  8584 ;;		_isr
  8585 ;; This function uses a non-reentrant model
  8586 ;;
  8587                           
  8588                           	psect	text50
  8589  002936                     __ptext50:
  8590                           	callstack 0
  8591  002936                     _retPeriod:
  8592                           	callstack 0
  8593  002936  FFFF               	dw	65535	; assembler added errata NOP
  8594  002938                     
  8595                           ;timer.c: 102:     return pwmPeriod;
  8596  002938  C04F  F001         	movff	_pwmPeriod,?_retPeriod
  8597  00293C  C050  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  8598  002940  0012               	return		;funcret
  8599  002942  FFFF               	dw	65535	; errata NOP
  8600  002944                     __end_of_retPeriod:
  8601                           	callstack 0
  8602                           
  8603 ;; *************** function _increaseStep *****************
  8604 ;; Defined at:
  8605 ;;		line 85 in file "timer.c"
  8606 ;; Parameters:    Size  Location     Type
  8607 ;;		None
  8608 ;; Auto vars:     Size  Location     Type
  8609 ;;		None
  8610 ;; Return value:  Size  Location     Type
  8611 ;;                  1    wreg      void 
  8612 ;; Registers used:
  8613 ;;		status,2, status,0
  8614 ;; Tracked objects:
  8615 ;;		On entry : 0/0
  8616 ;;		On exit  : 0/0
  8617 ;;		Unchanged: 0/0
  8618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8619 ;;      Params:         0       0       0       0       0       0       0
  8620 ;;      Locals:         0       0       0       0       0       0       0
  8621 ;;      Temps:          0       0       0       0       0       0       0
  8622 ;;      Totals:         0       0       0       0       0       0       0
  8623 ;;Total ram usage:        0 bytes
  8624 ;; Hardware stack levels used:    1
  8625 ;; This function calls:
  8626 ;;		Nothing
  8627 ;; This function is called by:
  8628 ;;		_isr
  8629 ;; This function uses a non-reentrant model
  8630 ;;
  8631                           
  8632                           	psect	text51
  8633  0029EA                     __ptext51:
  8634                           	callstack 0
  8635  0029EA                     _increaseStep:
  8636                           	callstack 0
  8637  0029EA  FFFF               	dw	65535	; assembler added errata NOP
  8638  0029EC                     
  8639                           ;timer.c: 86:     pwmStep++;
  8640  0029EC  2A5C               	incf	_pwmStep^0,f,c	;volatile
  8641  0029EE  0012               	return		;funcret
  8642  0029F0  FFFF               	dw	65535	; errata NOP
  8643  0029F2                     __end_of_increaseStep:
  8644                           	callstack 0
  8645                           
  8646 ;; *************** function _fatalError *****************
  8647 ;; Defined at:
  8648 ;;		line 93 in file "usart.c"
  8649 ;; Parameters:    Size  Location     Type
  8650 ;;		None
  8651 ;; Auto vars:     Size  Location     Type
  8652 ;;		None
  8653 ;; Return value:  Size  Location     Type
  8654 ;;                  1    wreg      unsigned char 
  8655 ;; Registers used:
  8656 ;;		wreg, status,2
  8657 ;; Tracked objects:
  8658 ;;		On entry : 0/0
  8659 ;;		On exit  : 0/0
  8660 ;;		Unchanged: 0/0
  8661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8662 ;;      Params:         0       0       0       0       0       0       0
  8663 ;;      Locals:         0       0       0       0       0       0       0
  8664 ;;      Temps:          0       0       0       0       0       0       0
  8665 ;;      Totals:         0       0       0       0       0       0       0
  8666 ;;Total ram usage:        0 bytes
  8667 ;; Hardware stack levels used:    1
  8668 ;; This function calls:
  8669 ;;		Nothing
  8670 ;; This function is called by:
  8671 ;;		_isr
  8672 ;; This function uses a non-reentrant model
  8673 ;;
  8674                           
  8675                           	psect	text52
  8676  0029F2                     __ptext52:
  8677                           	callstack 0
  8678  0029F2                     _fatalError:
  8679                           	callstack 0
  8680  0029F2  FFFF               	dw	65535	; assembler added errata NOP
  8681  0029F4                     
  8682                           ;usart.c: 94:     return _fatalError;
  8683  0029F4  5060               	movf	__fatalError^0,w,c
  8684  0029F6  0012               	return		;funcret
  8685  0029F8  FFFF               	dw	65535	; errata NOP
  8686  0029FA                     __end_of_fatalError:
  8687                           	callstack 0
  8688                           
  8689 ;; *************** function _abortAll *****************
  8690 ;; Defined at:
  8691 ;;		line 836 in file "motors.c"
  8692 ;; Parameters:    Size  Location     Type
  8693 ;;		None
  8694 ;; Auto vars:     Size  Location     Type
  8695 ;;		None
  8696 ;; Return value:  Size  Location     Type
  8697 ;;                  1    wreg      void 
  8698 ;; Registers used:
  8699 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8700 ;; Tracked objects:
  8701 ;;		On entry : 0/0
  8702 ;;		On exit  : 0/0
  8703 ;;		Unchanged: 0/0
  8704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8705 ;;      Params:         0       0       0       0       0       0       0
  8706 ;;      Locals:         0       0       0       0       0       0       0
  8707 ;;      Temps:          0       0       0       0       0       0       0
  8708 ;;      Totals:         0       0       0       0       0       0       0
  8709 ;;Total ram usage:        0 bytes
  8710 ;; Hardware stack levels used:    1
  8711 ;; Hardware stack levels required when called:    2
  8712 ;; This function calls:
  8713 ;;		i2_printError
  8714 ;; This function is called by:
  8715 ;;		_isr
  8716 ;; This function uses a non-reentrant model
  8717 ;;
  8718                           
  8719                           	psect	text53
  8720  0028DE                     __ptext53:
  8721                           	callstack 0
  8722  0028DE                     _abortAll:
  8723                           	callstack 0
  8724  0028DE  FFFF               	dw	65535	; assembler added errata NOP
  8725  0028E0                     
  8726                           ;motors.c: 844:     printError(7);
  8727  0028E0  0E07               	movlw	7
  8728  0028E2  EC62  F00F         	call	i2_printError
  8729  0028E6                     i2l251:
  8730  0028E6  FFFF               	dw	65535	; assembler added errata NOP
  8731  0028E8  EF73  F014         	goto	i2l251
  8732  0028EC  0012               	return		;funcret
  8733  0028EE  FFFF               	dw	65535	; errata NOP
  8734  0028F0                     __end_of_abortAll:
  8735                           	callstack 0
  8736                           
  8737 ;; *************** function i2_printError *****************
  8738 ;; Defined at:
  8739 ;;		line 143 in file "usart.c"
  8740 ;; Parameters:    Size  Location     Type
  8741 ;;  errCode         1    wreg     unsigned char 
  8742 ;; Auto vars:     Size  Location     Type
  8743 ;;  errCode         1    6[COMRAM] unsigned char 
  8744 ;; Return value:  Size  Location     Type
  8745 ;;                  1    wreg      void 
  8746 ;; Registers used:
  8747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8748 ;; Tracked objects:
  8749 ;;		On entry : 0/0
  8750 ;;		On exit  : 0/0
  8751 ;;		Unchanged: 0/0
  8752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8753 ;;      Params:         0       0       0       0       0       0       0
  8754 ;;      Locals:         1       0       0       0       0       0       0
  8755 ;;      Temps:          2       0       0       0       0       0       0
  8756 ;;      Totals:         3       0       0       0       0       0       0
  8757 ;;Total ram usage:        3 bytes
  8758 ;; Hardware stack levels used:    1
  8759 ;; Hardware stack levels required when called:    1
  8760 ;; This function calls:
  8761 ;;		i2_uartTx
  8762 ;; This function is called by:
  8763 ;;		_abortAll
  8764 ;;		i2_storeData
  8765 ;; This function uses a non-reentrant model
  8766 ;;
  8767                           
  8768                           	psect	text54
  8769  001EC4                     __ptext54:
  8770                           	callstack 0
  8771  001EC4                     i2_printError:
  8772                           	callstack 0
  8773  001EC4  FFFF               	dw	65535	; assembler added errata NOP
  8774                           
  8775                           ;incstack = 0
  8776                           ;i2printError@errCode stored from wreg
  8777  001EC6  6E07               	movwf	i2printError@errCode^0,c
  8778  001EC8                     
  8779                           ;usart.c: 145:     switch(errCode){
  8780  001EC8  EFBE  F00F         	goto	i2l3243
  8781  001ECC                     i2l3225:
  8782  001ECC  FFFF               	dw	65535	; assembler added errata NOP
  8783                           
  8784                           ;usart.c: 147:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  8785  001ECE  0E41               	movlw	low _errString_Feed
  8786  001ED0  6E01               	movwf	i2uartTx@ptr^0,c
  8787  001ED2  0E01               	movlw	high _errString_Feed
  8788  001ED4  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8789  001ED6  0E1E               	movlw	30
  8790  001ED8  6E03               	movwf	i2uartTx@length^0,c
  8791  001EDA  ECA0  F013         	call	i2_uartTx	;wreg free
  8792                           
  8793                           ;usart.c: 148:             break;
  8794  001EDE  EFED  F00F         	goto	i2l590
  8795  001EE2                     i2l3227:
  8796  001EE2  FFFF               	dw	65535	; assembler added errata NOP
  8797                           
  8798                           ;usart.c: 150:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  8799  001EE4  0E5E               	movlw	low _errString_ZEND
  8800  001EE6  6E01               	movwf	i2uartTx@ptr^0,c
  8801  001EE8  0E02               	movlw	high _errString_ZEND
  8802  001EEA  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8803  001EEC  0E29               	movlw	41
  8804  001EEE  6E03               	movwf	i2uartTx@length^0,c
  8805  001EF0  ECA0  F013         	call	i2_uartTx	;wreg free
  8806                           
  8807                           ;usart.c: 151:             break;
  8808  001EF4  EFED  F00F         	goto	i2l590
  8809  001EF8                     i2l3229:
  8810  001EF8  FFFF               	dw	65535	; assembler added errata NOP
  8811                           
  8812                           ;usart.c: 153:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  8813  001EFA  0E87               	movlw	low _errString_Reset
  8814  001EFC  6E01               	movwf	i2uartTx@ptr^0,c
  8815  001EFE  0E02               	movlw	high _errString_Reset
  8816  001F00  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8817  001F02  0E28               	movlw	40
  8818  001F04  6E03               	movwf	i2uartTx@length^0,c
  8819  001F06  ECA0  F013         	call	i2_uartTx	;wreg free
  8820                           
  8821                           ;usart.c: 154:             break;
  8822  001F0A  EFED  F00F         	goto	i2l590
  8823  001F0E                     i2l3231:
  8824  001F0E  FFFF               	dw	65535	; assembler added errata NOP
  8825                           
  8826                           ;usart.c: 156:             uartTx(&errString_Point[0], sizeof(errString_Point));
  8827  001F10  0E35               	movlw	low _errString_Point
  8828  001F12  6E01               	movwf	i2uartTx@ptr^0,c
  8829  001F14  0E02               	movlw	high _errString_Point
  8830  001F16  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8831  001F18  0E29               	movlw	41
  8832  001F1A  6E03               	movwf	i2uartTx@length^0,c
  8833  001F1C  ECA0  F013         	call	i2_uartTx	;wreg free
  8834                           
  8835                           ;usart.c: 157:             break;
  8836  001F20  EFED  F00F         	goto	i2l590
  8837  001F24                     i2l3233:
  8838  001F24  FFFF               	dw	65535	; assembler added errata NOP
  8839                           
  8840                           ;usart.c: 159:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  8841  001F26  0E00               	movlw	low _errString_Bound
  8842  001F28  6E01               	movwf	i2uartTx@ptr^0,c
  8843  001F2A  0E01               	movlw	high _errString_Bound
  8844  001F2C  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8845  001F2E  0E21               	movlw	33
  8846  001F30  6E03               	movwf	i2uartTx@length^0,c
  8847  001F32  ECA0  F013         	call	i2_uartTx	;wreg free
  8848                           
  8849                           ;usart.c: 160:             break;
  8850  001F36  EFED  F00F         	goto	i2l590
  8851  001F3A                     i2l3235:
  8852  001F3A  FFFF               	dw	65535	; assembler added errata NOP
  8853                           
  8854                           ;usart.c: 162:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  8855  001F3C  0E00               	movlw	low _errString_PointZ
  8856  001F3E  6E01               	movwf	i2uartTx@ptr^0,c
  8857  001F40  0E02               	movlw	high _errString_PointZ
  8858  001F42  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8859  001F44  0E35               	movlw	53
  8860  001F46  6E03               	movwf	i2uartTx@length^0,c
  8861  001F48  ECA0  F013         	call	i2_uartTx	;wreg free
  8862                           
  8863                           ;usart.c: 163:             break;
  8864  001F4C  EFED  F00F         	goto	i2l590
  8865  001F50                     i2l3237:
  8866  001F50  FFFF               	dw	65535	; assembler added errata NOP
  8867                           
  8868                           ;usart.c: 165:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  8869  001F52  0EAF               	movlw	low _errString_Fatal
  8870  001F54  6E01               	movwf	i2uartTx@ptr^0,c
  8871  001F56  0E02               	movlw	high _errString_Fatal
  8872  001F58  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8873  001F5A  0E27               	movlw	39
  8874  001F5C  6E03               	movwf	i2uartTx@length^0,c
  8875  001F5E  ECA0  F013         	call	i2_uartTx	;wreg free
  8876                           
  8877                           ;usart.c: 166:             break;
  8878  001F62  EFED  F00F         	goto	i2l590
  8879  001F66                     i2l3239:
  8880  001F66  FFFF               	dw	65535	; assembler added errata NOP
  8881                           
  8882                           ;usart.c: 168:             uartTx(&errString_Command[0], sizeof(errString_Command));
  8883  001F68  0EB5               	movlw	low _errString_Command
  8884  001F6A  6E01               	movwf	i2uartTx@ptr^0,c
  8885  001F6C  0E01               	movlw	high _errString_Command
  8886  001F6E  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8887  001F70  0E18               	movlw	24
  8888  001F72  6E03               	movwf	i2uartTx@length^0,c
  8889  001F74  ECA0  F013         	call	i2_uartTx	;wreg free
  8890                           
  8891                           ;usart.c: 169:             break;
  8892  001F78  EFED  F00F         	goto	i2l590
  8893  001F7C                     i2l3243:
  8894  001F7C  FFFF               	dw	65535	; assembler added errata NOP
  8895  001F7E  5007               	movf	i2printError@errCode^0,w,c
  8896  001F80  6E05               	movwf	??i2_printError^0,c
  8897  001F82  6A06               	clrf	(??i2_printError+1)^0,c
  8898                           
  8899                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8900                           ; Switch size 1, requested type "simple"
  8901                           ; Number of cases is 1, Range of values is 0 to 0
  8902                           ; switch strategies available:
  8903                           ; Name         Instructions Cycles
  8904                           ; simple_byte            4     3 (average)
  8905                           ;	Chosen strategy is simple_byte
  8906  001F84  5006               	movf	(??i2_printError+1)^0,w,c
  8907  001F86  0A00               	xorlw	0	; case 0
  8908  001F88  B4D8               	btfsc	status,2,c
  8909  001F8A  EFC9  F00F         	goto	i2l5097
  8910  001F8E  EFED  F00F         	goto	i2l590
  8911  001F92                     i2l5097:
  8912  001F92  FFFF               	dw	65535	; assembler added errata NOP
  8913                           
  8914                           ; Switch size 1, requested type "simple"
  8915                           ; Number of cases is 8, Range of values is 1 to 8
  8916                           ; switch strategies available:
  8917                           ; Name         Instructions Cycles
  8918                           ; simple_byte           25    13 (average)
  8919                           ;	Chosen strategy is simple_byte
  8920  001F94  5005               	movf	??i2_printError^0,w,c
  8921  001F96  0A01               	xorlw	1	; case 1
  8922  001F98  B4D8               	btfsc	status,2,c
  8923  001F9A  EF66  F00F         	goto	i2l3225
  8924  001F9E  0A03               	xorlw	3	; case 2
  8925  001FA0  B4D8               	btfsc	status,2,c
  8926  001FA2  EF71  F00F         	goto	i2l3227
  8927  001FA6  0A01               	xorlw	1	; case 3
  8928  001FA8  B4D8               	btfsc	status,2,c
  8929  001FAA  EF7C  F00F         	goto	i2l3229
  8930  001FAE  0A07               	xorlw	7	; case 4
  8931  001FB0  B4D8               	btfsc	status,2,c
  8932  001FB2  EF87  F00F         	goto	i2l3231
  8933  001FB6  0A01               	xorlw	1	; case 5
  8934  001FB8  B4D8               	btfsc	status,2,c
  8935  001FBA  EF92  F00F         	goto	i2l3233
  8936  001FBE  0A03               	xorlw	3	; case 6
  8937  001FC0  B4D8               	btfsc	status,2,c
  8938  001FC2  EF9D  F00F         	goto	i2l3235
  8939  001FC6  0A01               	xorlw	1	; case 7
  8940  001FC8  B4D8               	btfsc	status,2,c
  8941  001FCA  EFA8  F00F         	goto	i2l3237
  8942  001FCE  0A0F               	xorlw	15	; case 8
  8943  001FD0  B4D8               	btfsc	status,2,c
  8944  001FD2  EFB3  F00F         	goto	i2l3239
  8945  001FD6  EFED  F00F         	goto	i2l590
  8946  001FDA                     i2l590:
  8947  001FDA  FFFF               	dw	65535	; assembler added errata NOP
  8948  001FDC  0012               	return		;funcret
  8949  001FDE  FFFF               	dw	65535	; errata NOP
  8950  001FE0                     __end_ofi2_printError:
  8951                           	callstack 0
  8952                           
  8953 ;; *************** function i2_uartTx *****************
  8954 ;; Defined at:
  8955 ;;		line 220 in file "usart.c"
  8956 ;; Parameters:    Size  Location     Type
  8957 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  8958 ;;		 -> ready(15), resetPos(32), OBJRelease(17), placeTheOBJ(20), 
  8959 ;;		 -> rotateOBJ(21), movingToPlace(30), liftingTheArm(17), OBJPicked(15), 
  8960 ;;		 -> pickingTheOBJ(20), movingToPick(29), start(27), errString_Command(24), 
  8961 ;;		 -> errString_Fatal(39), errString_PointZ(53), errString_Bound(33), errString_Point(41), 
  8962 ;;		 -> errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  8963 ;;  length          1    2[COMRAM] unsigned char 
  8964 ;; Auto vars:     Size  Location     Type
  8965 ;;  i               1    3[COMRAM] unsigned char 
  8966 ;; Return value:  Size  Location     Type
  8967 ;;                  1    wreg      void 
  8968 ;; Registers used:
  8969 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8970 ;; Tracked objects:
  8971 ;;		On entry : 0/0
  8972 ;;		On exit  : 0/0
  8973 ;;		Unchanged: 0/0
  8974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8975 ;;      Params:         3       0       0       0       0       0       0
  8976 ;;      Locals:         1       0       0       0       0       0       0
  8977 ;;      Temps:          0       0       0       0       0       0       0
  8978 ;;      Totals:         4       0       0       0       0       0       0
  8979 ;;Total ram usage:        4 bytes
  8980 ;; Hardware stack levels used:    1
  8981 ;; This function calls:
  8982 ;;		Nothing
  8983 ;; This function is called by:
  8984 ;;		i2_printError
  8985 ;; This function uses a non-reentrant model
  8986 ;;
  8987                           
  8988                           	psect	text55
  8989  002740                     __ptext55:
  8990                           	callstack 0
  8991  002740                     i2_uartTx:
  8992                           	callstack 0
  8993  002740  FFFF               	dw	65535	; assembler added errata NOP
  8994  002742                     
  8995                           ;usart.c: 220: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 221: {;usa
      +                          rt.c: 223:     for(char i = 1; i < length; i++){
  8996  002742  0E01               	movlw	1
  8997  002744  6E04               	movwf	i2uartTx@i^0,c
  8998  002746  EFB9  F013         	goto	i2l2895
  8999  00274A                     i2l2891:
  9000  00274A  FFFF               	dw	65535	; assembler added errata NOP
  9001                           
  9002                           ;usart.c: 225:         TXREG = *ptr;
  9003  00274C  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  9004  002750  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  9005  002754  50DF               	movf	indf2,w,c
  9006  002756  6EAD               	movwf	173,c	;volatile
  9007  002758                     i2l612:
  9008  002758  FFFF               	dw	65535	; assembler added errata NOP
  9009  00275A  A2AC               	btfss	172,1,c	;volatile
  9010  00275C  EFB2  F013         	goto	i2u195_41
  9011  002760  EFB5  F013         	goto	i2u195_40
  9012  002764                     i2u195_41:
  9013  002764  FFFF               	dw	65535	; assembler added errata NOP
  9014  002766  EFAC  F013         	goto	i2l612
  9015  00276A                     i2u195_40:
  9016  00276A  FFFF               	dw	65535	; assembler added errata NOP
  9017  00276C                     
  9018                           ;usart.c: 229:         ptr++;
  9019  00276C  4A01               	infsnz	i2uartTx@ptr^0,f,c
  9020  00276E  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  9021                           
  9022                           ;usart.c: 230:     }
  9023  002770  2A04               	incf	i2uartTx@i^0,f,c
  9024  002772                     i2l2895:
  9025  002772  FFFF               	dw	65535	; assembler added errata NOP
  9026  002774  5003               	movf	i2uartTx@length^0,w,c
  9027  002776  5C04               	subwf	i2uartTx@i^0,w,c
  9028  002778  A0D8               	btfss	status,0,c
  9029  00277A  EFC1  F013         	goto	i2u196_41
  9030  00277E  EFC4  F013         	goto	i2u196_40
  9031  002782                     i2u196_41:
  9032  002782  FFFF               	dw	65535	; assembler added errata NOP
  9033  002784  EFA5  F013         	goto	i2l2891
  9034  002788                     i2u196_40:
  9035  002788  FFFF               	dw	65535	; assembler added errata NOP
  9036  00278A  0012               	return		;funcret
  9037  00278C  FFFF               	dw	65535	; errata NOP
  9038  00278E                     __end_ofi2_uartTx:
  9039                           	callstack 0
  9040                           
  9041                           	psect	rparam
  9042  0000                     
  9043                           	psect	temp
  9044  00006E                     btemp:
  9045                           	callstack 0
  9046  00006E                     	ds	1
  9047  0000                     int$flags	set	btemp
  9048  0000                     wtemp8	set	btemp+1
  9049  0000                     ttemp5	set	btemp+1
  9050  0000                     ttemp6	set	btemp+4
  9051  0000                     ttemp7	set	btemp+8
  9052                           
  9053                           	psect	idloc
  9054                           
  9055                           ;Config register IDLOC0 @ 0x200000
  9056                           ;	unspecified, using default values
  9057  200000                     	org	2097152
  9058  200000  FF                 	db	255
  9059                           
  9060                           ;Config register IDLOC1 @ 0x200001
  9061                           ;	unspecified, using default values
  9062  200001                     	org	2097153
  9063  200001  FF                 	db	255
  9064                           
  9065                           ;Config register IDLOC2 @ 0x200002
  9066                           ;	unspecified, using default values
  9067  200002                     	org	2097154
  9068  200002  FF                 	db	255
  9069                           
  9070                           ;Config register IDLOC3 @ 0x200003
  9071                           ;	unspecified, using default values
  9072  200003                     	org	2097155
  9073  200003  FF                 	db	255
  9074                           
  9075                           ;Config register IDLOC4 @ 0x200004
  9076                           ;	unspecified, using default values
  9077  200004                     	org	2097156
  9078  200004  FF                 	db	255
  9079                           
  9080                           ;Config register IDLOC5 @ 0x200005
  9081                           ;	unspecified, using default values
  9082  200005                     	org	2097157
  9083  200005  FF                 	db	255
  9084                           
  9085                           ;Config register IDLOC6 @ 0x200006
  9086                           ;	unspecified, using default values
  9087  200006                     	org	2097158
  9088  200006  FF                 	db	255
  9089                           
  9090                           ;Config register IDLOC7 @ 0x200007
  9091                           ;	unspecified, using default values
  9092  200007                     	org	2097159
  9093  200007  FF                 	db	255
  9094                           
  9095                           	psect	config
  9096                           
  9097                           ; Padding undefined space
  9098  300000                     	org	3145728
  9099  300000  FF                 	db	255
  9100                           
  9101                           ;Config register CONFIG1H @ 0x300001
  9102                           ;	Oscillator Selection bits
  9103                           ;	OSC = XT, XT oscillator
  9104                           ;	Oscillator System Clock Switch Enable bit
  9105                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  9106  300001                     	org	3145729
  9107  300001  21                 	db	33
  9108                           
  9109                           ;Config register CONFIG2L @ 0x300002
  9110                           ;	Power-up Timer Enable bit
  9111                           ;	PWRT = OFF, PWRT disabled
  9112                           ;	Brown-out Reset Enable bit
  9113                           ;	BOR = OFF, Brown-out Reset disabled
  9114                           ;	Brown-out Reset Voltage bits
  9115                           ;	BORV = 20, VBOR set to 2.0V
  9116  300002                     	org	3145730
  9117  300002  0D                 	db	13
  9118                           
  9119                           ;Config register CONFIG2H @ 0x300003
  9120                           ;	Watchdog Timer Enable bit
  9121                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  9122                           ;	Watchdog Timer Postscale Select bits
  9123                           ;	WDTPS = 128, 1:128
  9124  300003                     	org	3145731
  9125  300003  0E                 	db	14
  9126                           
  9127                           ; Padding undefined space
  9128  300004                     	org	3145732
  9129  300004  FF                 	db	255
  9130                           
  9131                           ;Config register CONFIG3H @ 0x300005
  9132                           ;	CCP2 Mux bit
  9133                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  9134  300005                     	org	3145733
  9135  300005  00                 	db	0
  9136                           
  9137                           ;Config register CONFIG4L @ 0x300006
  9138                           ;	Stack Full/Underflow Reset Enable bit
  9139                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  9140                           ;	Low Voltage ICSP Enable bit
  9141                           ;	LVP = OFF, Low Voltage ICSP disabled
  9142                           ;	Background Debugger Enable bit
  9143                           ;	DEBUG = 0x1, unprogrammed default
  9144  300006                     	org	3145734
  9145  300006  80                 	db	128
  9146                           
  9147                           ; Padding undefined space
  9148  300007                     	org	3145735
  9149  300007  FF                 	db	255
  9150                           
  9151                           ;Config register CONFIG5L @ 0x300008
  9152                           ;	Code Protection bit
  9153                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  9154                           ;	Code Protection bit
  9155                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  9156                           ;	Code Protection bit
  9157                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  9158                           ;	Code Protection bit
  9159                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  9160  300008                     	org	3145736
  9161  300008  0F                 	db	15
  9162                           
  9163                           ;Config register CONFIG5H @ 0x300009
  9164                           ;	Boot Block Code Protection bit
  9165                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  9166                           ;	Data EEPROM Code Protection bit
  9167                           ;	CPD = OFF, Data EEPROM not code protected
  9168  300009                     	org	3145737
  9169  300009  C0                 	db	192
  9170                           
  9171                           ;Config register CONFIG6L @ 0x30000A
  9172                           ;	Write Protection bit
  9173                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  9174                           ;	Write Protection bit
  9175                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  9176                           ;	Write Protection bit
  9177                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  9178                           ;	Write Protection bit
  9179                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  9180  30000A                     	org	3145738
  9181  30000A  0F                 	db	15
  9182                           
  9183                           ;Config register CONFIG6H @ 0x30000B
  9184                           ;	Configuration Register Write Protection bit
  9185                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  9186                           ;	Boot Block Write Protection bit
  9187                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  9188                           ;	Data EEPROM Write Protection bit
  9189                           ;	WRTD = OFF, Data EEPROM not write protected
  9190  30000B                     	org	3145739
  9191  30000B  E0                 	db	224
  9192                           
  9193                           ;Config register CONFIG7L @ 0x30000C
  9194                           ;	Table Read Protection bit
  9195                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  9196                           ;	Table Read Protection bit
  9197                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  9198                           ;	Table Read Protection bit
  9199                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  9200                           ;	Table Read Protection bit
  9201                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  9202  30000C                     	org	3145740
  9203  30000C  0F                 	db	15
  9204                           
  9205                           ;Config register CONFIG7H @ 0x30000D
  9206                           ;	Boot Block Table Read Protection bit
  9207                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  9208  30000D                     	org	3145741
  9209  30000D  40                 	db	64
  9210                           tosu	equ	0xFFF
  9211                           tosh	equ	0xFFE
  9212                           tosl	equ	0xFFD
  9213                           stkptr	equ	0xFFC
  9214                           pclatu	equ	0xFFB
  9215                           pclath	equ	0xFFA
  9216                           pcl	equ	0xFF9
  9217                           tblptru	equ	0xFF8
  9218                           tblptrh	equ	0xFF7
  9219                           tblptrl	equ	0xFF6
  9220                           tablat	equ	0xFF5
  9221                           prodh	equ	0xFF4
  9222                           prodl	equ	0xFF3
  9223                           indf0	equ	0xFEF
  9224                           postinc0	equ	0xFEE
  9225                           postdec0	equ	0xFED
  9226                           preinc0	equ	0xFEC
  9227                           plusw0	equ	0xFEB
  9228                           fsr0h	equ	0xFEA
  9229                           fsr0l	equ	0xFE9
  9230                           wreg	equ	0xFE8
  9231                           indf1	equ	0xFE7
  9232                           postinc1	equ	0xFE6
  9233                           postdec1	equ	0xFE5
  9234                           preinc1	equ	0xFE4
  9235                           plusw1	equ	0xFE3
  9236                           fsr1h	equ	0xFE2
  9237                           fsr1l	equ	0xFE1
  9238                           bsr	equ	0xFE0
  9239                           indf2	equ	0xFDF
  9240                           postinc2	equ	0xFDE
  9241                           postdec2	equ	0xFDD
  9242                           preinc2	equ	0xFDC
  9243                           plusw2	equ	0xFDB
  9244                           fsr2h	equ	0xFDA
  9245                           fsr2l	equ	0xFD9
  9246                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    20
    Data        567
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     66     109
    BANK0           128      0     128
    BANK1           256      9     255
    BANK2           256      8     222
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 53
		 -> ready(BANK0[15]), resetPos(BANK1[32]), OBJRelease(BANK0[17]), placeTheOBJ(BANK1[20]), 
		 -> rotateOBJ(BANK1[21]), movingToPlace(BANK1[30]), liftingTheArm(BANK0[17]), OBJPicked(BANK0[15]), 
		 -> pickingTheOBJ(BANK0[20]), movingToPick(BANK1[29]), start(BANK1[27]), errString_Command(BANK1[24]), 
		 -> errString_Fatal(BANK2[39]), errString_PointZ(BANK2[53]), errString_Bound(BANK1[33]), errString_Point(BANK2[41]), 
		 -> errString_Reset(BANK2[40]), errString_ZEND(BANK2[41]), errString_Feed(BANK1[30]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 


Critical Paths under _main in COMRAM

    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_stepMade
    _touchTherm->_stepMade
    _touchObject->_stepMade
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _releaseObj->_stepMade
    _printStatus->_uartTx
    _pickObject->_stepMade
    _moveToPoint->_stepMade
    _liftArm->_stepMade

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    _abortAll->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_executeData
    _executeData->_rotateObj

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_executeData

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   21536
                                              3 BANK2      5     5      0
                           _clearTM0
                        _executeData
                     _getNewSequence
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                        _printStatus
                            _readSeq
                          _reduceSeq
                   _resetNewSequence
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim1Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim1Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    3584
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    3553
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0     238
                                             20 COMRAM     3     3      0
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (1) _resetNewSequence                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0   10066
                                              7 BANK1      2     2      0
                                              0 BANK2      3     3      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                        _printStatus
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0      34
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                         _resetTherm
                         _resetTouch
                        _returnTherm
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0      34
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                         _resetTherm
                         _resetTouch
                        _returnTouch
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            7     7      0    3203
                                              0 BANK1      7     7      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
                          _resetStep
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0      34
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (1) _printStatus                                          3     3      0    3553
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    3522
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0      34
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         14     6      8    2546
                                             20 COMRAM    14     6      8
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0      34
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _resetTM2_Temp                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resetTM0_Temp                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0    1059
                                             10 COMRAM     7     7      0
                           _abortAll
                         _fatalError
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _abortAll                                             0     0      0     507
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _executeData
     _getData
     _liftArm
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _stepMade
     _moveToPoint
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _stepCounter
       _stepMade
     _pickObject
       _resetTM2_Temp
       _stepMade
     _printStatus
       _uartTx
     _releaseObj
       _resetTM2_Temp
       _stepMade
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _resetStep
       _resetTM2_Temp
       _stepMade
     _touchObject
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _resetTherm
       _resetTouch
       _returnTouch
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _resetTherm
       _resetTouch
       _returnTherm
       _startADC
       _stepMade
       _stopADC
   _getNewSequence
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _printStatus
     _uartTx
   _readSeq
   _reduceSeq
   _resetNewSequence
   _resetPosition
     _resetStep
     _resetTM0_Temp
     _resetTM2_Temp
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim1Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _abortAll
     i2_printError
       i2_uartTx
   _fatalError
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      8      DE       9       86.7%
BITBANK1           100      0       0       6        0.0%
BANK1              100      9      FF       7       99.6%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     42      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2CA      15        0.0%
DATA                 0      0     2CA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Sat May 08 10:26:20 2021

                                        ___fldiv@aexp 0038  
                                        ___fldiv@bexp 0037  
                               __end_of_interruptInit 27CA  
                                        ___fldiv@sign 0030  
                                                  l90 284C  
                                                  l84 2924  
                                                 l210 20EA  
                                                 l211 20EE  
                                                 l131 1824  
                                                 l132 1994  
                                                 l222 2584  
                                                 l214 2552  
                                                 l151 19B4  
                                                 l217 2564  
                                                 l161 0D68  
                                                 l241 281C  
                                                 l154 0A80  
                                                 l242 2826  
                                                 l234 22CA  
                                                 l156 0AC0  
                                                 l236 22FA  
                                                 l157 0AC8  
                                                 l247 27EC  
                                                 l248 27F6  
                                                 l328 1B7C  
                                                 l329 1B7E  
                                                 l178 0D26  
                                                 l450 27BA  
                                                 l443 2996  
                                                 l187 0D88  
                                                 l371 2978  
                                                 l451 27C6  
                                                 l612 270A  
                                                 l380 294C  
                                                 l348 10C6  
                                                 l446 28DA  
                                                 l374 29DE  
                                                 l198 21FC  
                                                 l550 2908  
                                                 l607 1B28  
                                                 l383 2982  
                                                 l199 2200  
                                                 l616 273C  
                                                 l368 2872  
                                                 l640 134E  
                                                 l377 2958  
                                                 l449 27A4  
                                                 l553 29C6  
                                                 l633 1260  
                                                 l386 298C  
                                                 l547 2916  
                                                 l565 29D6  
                                                 l573 26EE  
                                                 l661 28B6  
                                                 l670 29A0  
                                                 l590 1EBE  
                                                 l559 29CE  
                                                 l655 28C8  
                                                 l664 28A4  
                                                 l568 296E  
                                                 l576 2890  
                                                 l658 28FA  
                                                 l667 2964  
                                                 l979 1DA2  
                                                 _isr 0008  
                                         _touchObject 20F2  
                                                 prod 000FF3  
                                                 wreg 000FE8  
                                        ___fltol@exp1 0042  
                                         main@errCode 02DB  
                                                l1340 17CE  
                                                l1351 1754  
                                                l1264 0A42  
                                                l1344 16E8  
                                                l4001 06B2  
                                                l1337 163C  
                                                l1266 085A  
                                                l1275 08B0  
                                                l4003 06C8  
                                                l4011 06F8  
                                                l4101 0A2C  
                                                l1277 0940  
                                                l1269 0814  
                                                l4021 0744  
                                                l4013 070A  
                                                l4005 06DC  
                                                l1278 0928  
                                                l4103 0A32  
                                                l4015 0726  
                                                l4007 06EC  
                                                l4105 0A36  
                                                l4041 07CE  
                                                l4033 0782  
                                                l4017 0736  
                                                l4025 0758  
                                                l4009 06F0  
                                                l4121 1CD4  
                                                l4113 1C74  
                                                l4211 0AB4  
                                                l4203 0A4A  
                                                l4051 0820  
                                                l4043 07D6  
                                                l4035 079E  
                                                l4027 076E  
                                                l4019 073E  
                                                l4123 1CD6  
                                                l4115 1C8E  
                                                l4221 0AFE  
                                                l4213 0AC4  
                                                l4205 0A74  
                                                l4061 088A  
                                                l4053 0844  
                                                l4045 07EC  
                                                l4037 07AE  
                                                l4029 076E  
                                                l4125 1CE6  
                                                l4301 2108  
                                                l4231 0B66  
                                                l4223 0B0A  
                                                l4215 0AD2  
                                                l4207 0A84  
                                                l4071 08D6  
                                                l4063 0890  
                                                l4055 0846  
                                                l4047 0800  
                                                l4039 07BE  
                                                l4151 1D80  
                                                l4135 1D18  
                                                l4127 1CEA  
                                                l4119 1CA4  
                                                l4311 215E  
                                                l4303 2118  
                                                l4401 24E2  
                                                l4233 0B82  
                                                l4225 0B20  
                                                l4217 0AE0  
                                                l4209 0A88  
                                                l4081 0956  
                                                l4073 08DA  
                                                l4065 089C  
                                                l4057 0856  
                                                l4049 0812  
                                                l4153 1D90  
                                                l4145 1D48  
                                                l4137 1D24  
                                                l4129 1CFC  
                                                l4161 1606  
                                                l4321 21B0  
                                                l4313 2162  
                                                l4305 211E  
                                                l4411 2526  
                                                l4403 24E8  
                                                l4243 0BE4  
                                                l4235 0B86  
                                                l4251 0C18  
                                                l4227 0B46  
                                                l4219 0AE6  
                                                l4091 09C2  
                                                l4083 0962  
                                                l4075 08EC  
                                                l4067 08AE  
                                                l4059 0870  
                                                l4147 1D56  
                                                l4139 1D2E  
                                                l4171 1688  
                                                l4163 164E  
                                                l4331 21CE  
                                                l4315 2174  
                                                l4323 21C0  
                                                l4307 2134  
                                                l4421 2582  
                                                l4413 2538  
                                                l4405 24FE  
                                                l4261 0C90  
                                                l4253 0C2E  
                                                l4245 0BFA  
                                                l4229 0B50  
                                                l4237 0B9C  
                                                l4501 1A02  
                                                l4093 09D8  
                                                l4085 0974  
                                                l4077 091E  
                                                l4069 08C2  
                                                l4149 1D6A  
                                                l4181 1720  
                                                l4173 1696  
                                                l4165 166A  
                                                l4157 15E0  
                                                l4341 21F4  
                                                l4333 21D2  
                                                l4325 21C6  
                                                l4317 2190  
                                                l4309 2140  
                                                l4415 256A  
                                                l4407 250A  
                                                l4271 0CF2  
                                                l4263 0C94  
                                                l4255 0C54  
                                                l4247 0C10  
                                                l4239 0BB2  
                                                l4511 1A70  
                                                l4503 1A18  
                                                l4095 09F8  
                                                l4087 099E  
                                                l4191 1770  
                                                l4183 172E  
                                                l4175 16CE  
                                                l4159 15F4  
                                                l4431 2272  
                                                l4335 21DA  
                                                l4327 21C8  
                                                l4319 2194  
                                                l4351 1FF6  
                                                l4417 2572  
                                                l4409 2522  
                                                l4273 0D08  
                                                l4257 0C5E  
                                                l4265 0CAA  
                                                l4281 0D40  
                                                l4513 1A86  
                                                l4505 1A2E  
                                                l4097 0A14  
                                                l4089 09A2  
                                                l4193 1794  
                                                l4185 1742  
                                                l4177 16D2  
                                                l4169 167E  
                                                l4441 22AE  
                                                l4433 2284  
                                                l4425 220A  
                                                l4337 21DE  
                                                l4329 21CA  
                                                l4361 204C  
                                                l4353 2006  
                                                l4345 1FE2  
                                                l4601 196E  
                                                l4419 257A  
                                                l4291 0D86  
                                                l4283 0D56  
                                                l4275 0D1E  
                                                l4267 0CC0  
                                                l4259 0C74  
                                                l4451 27FC  
                                                l5091 1AC8  
                                                l4515 1A9C  
                                                l4507 1A44  
                                                l4099 0A1A  
                                                l4195 17A8  
                                                l4187 1768  
                                                l4179 16DE  
                                                l4443 22CC  
                                                l4435 2288  
                                                l4427 2214  
                                                l4339 21E2  
                                                l4371 209E  
                                                l4363 2050  
                                                l4355 200C  
                                                l4347 1FE6  
                                                l4531 282C  
                                                l4611 19B2  
                                                l4603 1982  
                                                l5083 1134  
                                                l4525 290E  
                                                l4285 0D6E  
                                                l4453 2800  
                                                l4509 1A5A  
                                                l4461 27D0  
                                                l4197 17BA  
                                                l4189 176A  
                                                l4445 22D0  
                                                l4437 22A2  
                                                l4429 2264  
                                                l4381 20BC  
                                                l4365 2062  
                                                l4373 20AE  
                                                l4357 2022  
                                                l4349 1FF4  
                                                l4621 2852  
                                                l4541 2844  
                                                l4533 2834  
                                                l4605 199A  
                                                l5085 1328  
                                                l4701 12BC  
                                                l4287 0D76  
                                                l4279 0D26  
                                                l4455 281E  
                                                l4519 1AB2  
                                                l4463 27EE  
                                                l4199 17BC  
                                                l4439 22AA  
                                                l4447 22D6  
                                                l4295 20F4  
                                                l4391 20E2  
                                                l4383 20C0  
                                                l4375 20B4  
                                                l4367 207E  
                                                l4359 202E  
                                                l4631 286E  
                                                l4623 285A  
                                                l4543 2846  
                                                l4535 2838  
                                                l4615 2790  
                                                l4607 19A2  
                                                l4551 17DC  
                                                l5087 1E76  
                                                l4471 1DC6  
                                                l4711 12FC  
                                                l4703 12D0  
                                                l4529 291C  
                                                l4289 0D7E  
                                                l4457 2822  
                                                l4465 27F2  
                                                l4449 22F2  
                                                l4297 20F8  
                                                l4385 20C8  
                                                l4377 20B6  
                                                l4369 2082  
                                                l5089 0F1E  
                                                l4633 2870  
                                                l4625 2860  
                                                l4545 2848  
                                                l4537 283C  
                                                l4617 27A2  
                                                l4609 19AA  
                                                l4561 1818  
                                                l4553 17E8  
                                                l4481 1E34  
                                                l4473 1DDC  
                                                l4713 1306  
                                                l4705 12E2  
                                                l4641 28C4  
                                                l4395 24CC  
                                                l4459 27CC  
                                                l4299 2106  
                                                l4387 20CC  
                                                l4379 20B8  
                                                l4811 1060  
                                                l4627 2862  
                                                l4547 284A  
                                                l4539 2840  
                                                l4619 27B8  
                                                l4651 29D4  
                                                l4731 29CC  
                                                l4571 1870  
                                                l4563 1838  
                                                l4555 17F6  
                                                l4483 1E4A  
                                                l4475 1DF2  
                                                l4467 1DAC  
                                                l4707 12E8  
                                                l4643 28F2  
                                                l4635 2878  
                                                l3941 2896  
                                                l4397 24D0  
                                                l4493 19BC  
                                                l4389 20D0  
                                                l4821 1090  
                                                l4813 1072  
                                                l4805 101E  
                                                l4741 0DA0  
                                                l4629 2864  
                                                l4581 18CA  
                                                l4573 1882  
                                                l4565 184A  
                                                l4557 17FC  
                                                l4549 17D6  
                                                l4477 1E08  
                                                l4469 1DB0  
                                                l4709 12F2  
                                                l4717 1312  
                                                l4661 10E0  
                                                l4645 28F6  
                                                l4637 288C  
                                                l4901 1BDA  
                                                l3951 28CE  
                                                l3943 289A  
                                                l4399 24DC  
                                                l4495 19C0  
                                                l4831 10B4  
                                                l4815 107A  
                                                l4807 1040  
                                                l4751 0E42  
                                                l4743 0DAA  
                                                l4735 0D8E  
                                                l4655 2900  
                                                l4591 1910  
                                                l4583 18CE  
                                                l4575 1896  
                                                l4567 1854  
                                                l4559 1802  
                                                l4479 1E1E  
                                                l4487 1E60  
                                                l4719 1348  
                                                l4663 10E6  
                                                l4639 28BC  
                                                l4647 28F8  
                                                l4903 1BE0  
                                                l4911 1C36  
                                                l3945 289E  
                                                l3953 295E  
                                                l4497 19D6  
                                                l3961 2952  
                                                l4833 10BA  
                                                l4817 1082  
                                                l4809 1046  
                                                l4761 0EC4  
                                                l4753 0E52  
                                                l4745 0DE4  
                                                l4737 0D9A  
                                                l4729 296A  
                                                l4593 1928  
                                                l4585 18E0  
                                                l4577 18A8  
                                                l4569 186C  
                                                l4681 1188  
                                                l4665 10F4  
                                                l4673 111E  
                                                l4649 28AA  
                                                l4921 1C66  
                                                l4913 1C50  
                                                l4905 1BF4  
                                                l3939 299C  
                                                l3971 271E  
                                                l4499 19EC  
                                                l3955 2974  
                                                l3963 29DC  
                                                l4827 10A8  
                                                l4819 1088  
                                                l4763 0EE6  
                                                l4755 0E66  
                                                l4747 0DF4  
                                                l4771 0EFE  
                                                l4739 0D9A  
                                                l4595 192C  
                                                l4587 18F4  
                                                l4579 18B2  
                                                l4851 2694  
                                                l4691 126A  
                                                l4683 1206  
                                                l4667 1102  
                                                l4675 1154  
                                                l4659 10D0  
                                                l4915 1C58  
                                                l4907 1C08  
                                                l3949 2992  
                                                l3973 2724  
                                                l3981 0638  
                                                l3957 297E  
                                                l3965 2946  
                                                l4829 10B0  
                                                l4765 0EEA  
                                                l4757 0EA0  
                                                l4749 0E08  
                                                l4773 0F46  
                                                l4597 193E  
                                                l4589 1906  
                                                l4861 26DA  
                                                l4693 127A  
                                                l4685 1228  
                                                l4677 116C  
                                                l4669 1110  
                                                l4917 1C5E  
                                                l4909 1C32  
                                                l3967 26F4  
                                                l3983 064E  
                                                l3991 067E  
                                                l3975 0618  
                                                l3959 2988  
                                                l4791 0F9E  
                                                l4783 0F84  
                                                l4775 0F5C  
                                                l4767 0EF2  
                                                l4759 0EB0  
                                                l4599 1958  
                                                l4695 128E  
                                                l4687 124E  
                                                l4679 1180  
                                                l4919 1C62  
                                                l4871 1B3C  
                                                l4863 1B2E  
                                                l3969 26FC  
                                                l3993 0690  
                                                l3985 0662  
                                                l3977 0624  
                                                l4785 0F8C  
                                                l4777 0F6A  
                                                l4849 29C4  
                                                l4857 2698  
                                                l4697 1292  
                                                l4689 1258  
                                                l4881 1B5A  
                                                l4873 1B40  
                                                l4865 1B2E  
                                                l3995 0698  
                                                l3987 0672  
                                                l3979 0636  
                                                l4787 0F90  
                                                l4779 0F7C  
                                                l4859 26D8  
                                                l4699 12A8  
                                                l4891 1B8C  
                                                l4883 1B62  
                                                l4875 1B44  
                                                l4867 1B34  
                                                ?_isr 0001  
                                                l3997 069E  
                                                l3989 0676  
                                                l4797 0FB6  
                                                l4789 0F96  
                                                l4893 1BA6  
                                                l4885 1B76  
                                                l4877 1B48  
                                                l4869 1B38  
                                                l3999 06B0  
                                                l4799 1006  
                                                l4895 1BB2  
                                                l4887 1B82  
                                                l4879 1B54  
                                                l4897 1BC4  
                                                l4889 1B8A  
                                                l4899 1BD4  
                                                u3000 0660  
                                                u3001 065A  
                                                u3010 06AE  
                                                u3011 06A8  
                                                u3100 0888  
                                                u3020 06C6  
                                                u3101 0882  
                                                u3021 06C0  
                                                _LATA 000F89  
                                                u3110 08AC  
                                                u3030 06DA  
                                                _LATB 000F8A  
                                                u3111 08A6  
                                                u3031 06D4  
                                                _LATC 000F8B  
                                                u3200 0A2A  
                                                u3120 08D4  
                                                u3040 0724  
                                                u4000 1228  
                                                _LATD 000F8C  
                                                u3201 0A24  
                                                u3121 08CE  
                                                u3041 071E  
                                                u4001 1222  
                                                u3130 08EA  
                                                u3050 076C  
                                                u3210 1C8C  
                                                u4010 124C  
                                                u3131 08E4  
                                                u3051 0766  
                                                u3211 1C86  
                                                u4011 1246  
                                                u3140 091C  
                                                u3060 07EA  
                                                u3220 1CC8  
                                                u3300 1668  
                                                u4100 1070  
                                                u4020 12A6  
                                                u3141 0916  
                                                u3061 07E4  
                                                u3301 1662  
                                                u4101 106A  
                                                u4021 12A0  
                                                u3150 093A  
                                                u3070 0810  
                                                u3230 1CFA  
                                                u3310 16C8  
                                                u4110 10A2  
                                                u4030 12BA  
                                                u3151 0934  
                                                u3071 080A  
                                                u3231 1CF4  
                                                u3311 16C2  
                                                u4111 109C  
                                                u4031 12B4  
                                                u3400 0AFC  
                                                u3160 0954  
                                                u3080 0842  
                                                u3240 1D12  
                                                u3320 171A  
                                                u4120 26EC  
                                                u4040 12CE  
                                                u3401 0AF6  
                                                u3161 094E  
                                                u3081 083C  
                                                u3241 1D0C  
                                                u3225 1CBC  
                                                u3321 1714  
                                                u4121 26E6  
                                                u4041 12C8  
                                                u3410 0B1E  
                                                u3170 0972  
                                                u3090 086E  
                                                u3250 1D42  
                                                u3330 1740  
                                                u4050 12E2  
                                                u4130 1B74  
                                                u3411 0B18  
                                                u3171 096C  
                                                u3091 0868  
                                                u3251 1D3C  
                                                u3331 173A  
                                                u4051 12DC  
                                                u4131 1B6E  
                                                u3500 0C52  
                                                u3420 0B44  
                                                u3180 09C0  
                                                u3260 1D6A  
                                                u3340 1754  
                                                u4060 0F5A  
                                                u4140 1BA4  
                                                u3501 0C4C  
                                                u3421 0B3E  
                                                u3181 09BA  
                                                u3261 1D64  
                                                u3341 174E  
                                                u4061 0F54  
                                                u4141 1B9E  
                                                u3510 0C72  
                                                u3430 0B64  
                                                u3190 09F6  
                                                u3270 1D7E  
                                                u3350 1766  
                                                u4070 0F7C  
                                                u4150 1C4E  
                                                u3511 0C6C  
                                                u3431 0B5E  
                                                u3191 09F0  
                                                u3271 1D78  
                                                u3351 1760  
                                                u4071 0F76  
                                                u4151 1C48  
                                                u3520 0C8E  
                                                u3440 0B80  
                                                u3360 17A6  
                                                u3280 15F2  
                                                u3600 2132  
                                                u4080 0FB0  
                                                u3521 0C88  
                                                u3441 0B7A  
                                                u3361 17A0  
                                                u3281 15EC  
                                                u3601 212C  
                                                u4081 0FAA  
                                                u3530 0CBE  
                                                u3450 0BB0  
                                                u3370 17B8  
                                                u3290 1604  
                                                u3610 215C  
                                                u4090 1018  
                                                u3531 0CB8  
                                                u3451 0BAA  
                                                u3371 17B2  
                                                u3291 15FE  
                                                u3611 2156  
                                                u4091 1012  
                                                u3540 0CEC  
                                                u3460 0BDE  
                                                u3380 0A72  
                                                u3620 218E  
                                                u3700 20AE  
                                                u3541 0CE6  
                                                u3461 0BD8  
                                                u3381 0A6C  
                                                u3621 2188  
                                                u3701 20A8  
                                                u3550 0D06  
                                                u3470 0BF8  
                                                u3390 0AB2  
                                                u3630 21AE  
                                                u3710 20E0  
                                                u3551 0D00  
                                                u3471 0BF2  
                                                u3391 0AAC  
                                                u3631 21A8  
                                                u3711 20DA  
                                                u3720 24FC  
                                                u3560 0D1C  
                                                u3480 0C0E  
                                                u3800 27EA  
                                                u3640 21C0  
                                                u3721 24F6  
                                                u3561 0D16  
                                                u3481 0C08  
                                                u3801 27E4  
                                                u3641 21BA  
                                                u3730 2520  
                                                u3570 0D40  
                                                u3490 0C2C  
                                                u3650 21F2  
                                                u3810 1816  
                                                u3731 251A  
                                                u3571 0D3A  
                                                u3491 0C26  
                                                u3651 21EC  
                                                u3811 1810  
                                                u3740 2552  
                                                u3580 0D54  
                                                u3660 2020  
                                                u3900 1926  
                                                u3820 1836  
                                                u3741 254C  
                                                u3581 0D4E  
                                                u3661 201A  
                                                u3901 1920  
                                                u3821 1830  
                                                u3750 2564  
                                                u3590 0D68  
                                                u3670 204A  
                                                u3910 1958  
                                                u3830 184A  
                                                u3751 255E  
                                                u3591 0D62  
                                                u3671 2044  
                                                u3911 1952  
                                                u3831 1844  
                                                u2960 271C  
                                                u3760 22A0  
                                                u3680 207C  
                                                u3920 196C  
                                                u3840 186A  
                                                u2961 2716  
                                                u3761 229A  
                                                u3681 2076  
                                                u3921 1966  
                                                u3841 1864  
                                                u2970 273A  
                                                u3770 22C8  
                                                u3690 209C  
                                                u3930 1980  
                                                u3850 1894  
                                         main@newData 02DC  
                                                u2971 2734  
                                                u3771 22C2  
                                                u3691 2096  
                                                u3931 197A  
                                                u3851 188E  
                                                u2980 0634  
                                                u3780 22F0  
                                                u3940 1994  
                                                u3860 18A8  
                                                u2981 062E  
                                                u3781 22EA  
                                                u3941 198E  
                                                u3861 18A2  
                                                u3790 281A  
                                                u2990 064C  
                                                u3950 27A0  
                                                u3870 18C8  
                                                u3791 2814  
                                                u2991 0646  
                                                u3951 279A  
                                                u3871 18C2  
                                                u3960 27B6  
                                                u3880 18F2  
                                                u3961 27B0  
                                                u3881 18EC  
                                                u3890 1906  
                                                u3970 116A  
                                                u3891 1900  
                                                u3971 1164  
                                                u3980 117E  
                                                u3981 1178  
                                                u3990 1204  
                                                u3991 11FE  
                                                i2l81 2932  
                                                i2l87 29E6  
                                                _TMR0 000FD6  
                                                _TMR2 000FCC  
                                 __end_ofi2_storeData 15DC  
                                                _main 1B2E  
                                                _maxX 0607  
                                                _maxY 0605  
                                __end_ofi2_printError 1FE0  
                                                fsr2h 000FDA  
                                                indf2 000FDF  
                                                fsr1l 000FE1  
                                                fsr2l 000FD9  
                                                btemp 006E  
                                                prodh 000FF4  
                                                prodl 000FF3  
                                                start 01A4  
                                     ___fldiv@new_exp 0031  
                                        ___param_bank 000000  
                                     ??_whatsTM0Limit 0001  
                                               ??_isr 000B  
                                        ?_executeData 0001  
                                     executeData@data 02D6  
                                       ___fltol@sign1 0041  
                                               ?_main 0001  
                                     __end_of___fldiv 0A48  
                                     __end_of___fltol 1DA8  
                                               i2l251 28E6  
                                               i2l252 28E8  
                                               i2l612 2758  
                                               i2l616 278A  
                                               i2l392 29B4  
                                               i2l640 15D6  
                                               i2l633 14E8  
                                               i2l562 29F6  
                                               i2l468 018C  
                                               i2l389 29BE  
                                               i2l590 1FDA  
                                               i2l673 29EE  
                                               i2l676 29AA  
                                               i2l679 2940  
                                rotateObj@rotSequence 0080  
                                               _SPBRG 000FAF  
                                               _TRISA 000F92  
                                               _TRISB 000F93  
                                               _TRISC 000F94  
                                               _TRISD 000F95  
                                               _TXREG 000FAD  
                                     __end_of_getData 291A  
                                     i2storeData@data 000A  
                                     __end_of_initADC 2876  
                                        ?_newSequence 0001  
                                     __end_of_liftArm 2588  
                                     __end_of_readSeq 29D2  
                                               _ready 00C6  
                                        stepMade@temp 0014  
                                               _start 019A  
                                               tablat 000FF5  
                                      i2uartTx@length 0003  
                                     __end_of_stopADC 29E2  
                                               ttemp5 006F  
                                               ttemp6 0072  
                                               ttemp7 0076  
                                               status 000FD8  
                                               wtemp8 006F  
                                    __end_ofi2_uartTx 278E  
                                       ?_increaseStep 0001  
                                     __initialization 2588  
                              __size_of_initPinMotors 0026  
                                        __end_of_main 1C72  
                                        __end_of_maxX 0609  
                                        __end_of_maxY 0607  
                            resetPosition@keepMovingX 0015  
                            resetPosition@keepMovingY 0016  
                            resetPosition@keepMovingZ 0017  
                                              ??_main 02D9  
                                       __activetblptr 000002  
                               __end_of_resetTM0_Temp 299A  
                               __end_of_resetTM2_Temp 28DE  
                                         i2_storeData 1354  
                                        ?_setThermRel 0001  
                                              _ADRESH 000FC4  
                                              _ADRESL 000FC3  
                                        ?_moveToPoint 0015  
                                              i2l2321 29BA  
                                              i2l2331 29EC  
                                              i2l2323 29B0  
                                              i2l2325 29F4  
                                              i2l2333 29A6  
                                              i2l3231 1F0E  
                                              i2l3223 1EC8  
                                              i2l3233 1F24  
                                              i2l3225 1ECC  
                                              i2l3235 1F3A  
                                              i2l3227 1EE2  
                                              i2l3243 1F7C  
                                              i2l3237 1F50  
                                              i2l3229 1EF8  
                                              i2l3239 1F66  
                                              i2l3335 28E0  
                                              i2l3601 13A6  
                                              i2l3611 148E  
                                              i2l3603 13DC  
                                              i2l3621 1502  
                                              i2l3613 14B0  
                                              i2l3605 13F4  
                                              i2l3631 1558  
                                              i2l3623 1516  
                                              i2l3615 14D6  
                                              i2l3607 1408  
                                              i2l3641 158E  
                                              i2l3633 156A  
                                              i2l3625 151A  
                                              i2l3617 14E0  
                                              i2l3609 1410  
                                              i2l3721 0030  
                                              i2l3635 1570  
                                              i2l3627 1530  
                                              i2l3619 14F2  
                                              i2l3723 0032  
                                              i2l3731 0058  
                                              i2l3637 157A  
                                              i2l3629 1544  
                                              i2l3645 159A  
                                              i2l5093 13BC  
                                              i2l3741 009E  
                                              i2l3733 006C  
                                              i2l3725 004E  
                                              i2l3717 001C  
                                              i2l1983 29E4  
                                              i2l5095 15B0  
                                              i2l3639 1584  
                                              i2l3647 15D0  
                                              i2l3591 136E  
                                              i2l3751 00CC  
                                              i2l3743 00A0  
                                              i2l3735 006E  
                                              i2l3727 0050  
                                              i2l3719 002E  
                                              i2l5097 1F92  
                                              i2l3585 2938  
                                              i2l3593 137C  
                                              i2l3753 00E0  
                                              i2l3745 00A4  
                                              i2l3761 0100  
                                              i2l3737 0086  
                                              i2l3729 0054  
                                              i2l2891 274A  
                                              i2l1979 292A  
                                              i2l3595 138A  
                                              i2l3587 1358  
                                              i2l3771 0168  
                                              i2l3763 0114  
                                              i2l3755 00F2  
                                              i2l3747 00C2  
                                              i2l3739 008A  
                                              i2l2893 276C  
                                              i2l3597 1398  
                                              i2l3589 1368  
                                              i2l3765 011C  
                                              i2l3773 016C  
                                              i2l3757 00F6  
                                              i2l3749 00CA  
                                              i2l2895 2772  
                                              i2l3775 0180  
                                              i2l3767 0142  
                                              i2l3759 00FA  
                                              i2l2889 2742  
                                              i2l3777 0186  
                                              i2l3769 014E  
                                              _RCREG1 000FAE  
                                        ?_setTouchRel 0001  
                                    __end_of_abortAll 28F0  
                                    __end_of___xxtofl 17D4  
                                    __end_of_clearTM0 2928  
                                    _errString_PointZ 0200  
                                      ??_increaseStep 0001  
                                    __end_of_maxFeedX 0615  
                                    __end_of_maxFeedY 0614  
                                           ??___fldiv 0028  
                                           ??___fltol 003D  
                                    __end_of_tim0Init 28CC  
                                    __end_of_tim1Init 28FE  
                                    __end_of_tim2Init 28BA  
                                              clear_0 260E  
                                              clear_1 261A  
                                           ??_getData 0014  
                                              _uartTx 26F2  
                                           ??_initADC 0012  
                                           ??_liftArm 0015  
                                           ??_readSeq 0012  
                                        __pdataCOMRAM 0067  
                               __end_of_resetPosition 19B8  
                                        __mediumconst 0000  
                                              tblptrh 000FF7  
                                              tblptrl 000FF6  
                                              tblptru 000FF8  
                                        ?_returnTherm 0012  
                                    __end_of_startADC 297C  
                                    __end_of_stepMade 28A8  
                                       _initPinMotors 282A  
                                        ?_returnTouch 0012  
                                           ??_stopADC 0012  
                               __size_ofi2_printError 011C  
                                    __end_of_writeTM0 2936  
                                        ?_printStatus 0001  
                           __size_of_resetNewSequence 000A  
                                        ___xxtofl@arg 001C  
                                        ___xxtofl@exp 001B  
                                        ___xxtofl@val 0012  
                                          __accesstop 0080  
                             __end_of__initialization 2620  
                                        _dataSequence 00E4  
                                       ___rparam_used 000001  
                                          ___fltol@f1 0039  
                                        ?_stepCounter 0012  
                                         i2uartTx@ptr 0001  
                                      __pcstackCOMRAM 0001  
                                        __newSequence 005F  
                                        __pidataBANK0 262E  
                                        __pidataBANK1 22FE  
                                        __pidataBANK2 23F4  
                                __size_of_executeData 0340  
                                        i2_printError 1EC4  
                                        ?_touchObject 0001  
                                      _errString_ZEND 025E  
                                      _errString_Feed 0141  
                                      ?_initPinMotors 0001  
                                           ?i2_uartTx 0001  
                                          __pbssBANK0 00E4  
                                __size_of_newSequence 0008  
                                          _feeder1Pos 0611  
                                          _feeder2Pos 060F  
                                          _feeder3Pos 060D  
                                       _liftingTheArm 00B5  
                             __size_of_getNewSequence 000E  
                                          _fatalError 29F2  
                                  __size_of_reduceSeq 0008  
                                  __size_of_retPeriod 000E  
                                      _touch_pressure 060B  
                                  __size_of_shiftData 0060  
                                  __size_of_resetStep 000A  
                                             _ADC_res 0053  
                                             ?_uartTx 0012  
                                           ?_abortAll 0001  
                                           ?___xxtofl 0012  
                                __end_of_increaseStep 29F2  
                                           ?_clearTM0 0001  
                                          ??i2_uartTx 0004  
                                  __size_of_rotateObj 00FA  
                                   _errString_Command 01B5  
                                  __size_of_usartInit 001E  
                              __size_of_interruptInit 003C  
                                __size_of_setThermRel 000A  
                                  __size_of_storeData 0288  
                                           ?_tim0Init 0001  
                                           ?_tim1Init 0001  
                                           ?_tim2Init 0012  
                                __size_of_moveToPoint 0344  
                                     _newSequenceData 00F8  
                                __size_of_setTouchRel 000A  
                                             __Hparam 0000  
                                             __Lparam 0000  
                              __end_of_touch_pressure 060D  
                                             ___fldiv 0616  
                                           ?_startADC 0001  
                                           ?_stepMade 0012  
                                             ___fltol 1C72  
                                        __psmallconst 0600  
                                             __pcinit 2588  
                               __end_of_whatsTM0Limit 29EA  
                                             _getData 290C  
                                             __ramtop 0600  
                                           ?_writeTM0 0001  
                                          _pickObject 27FA  
                                             __ptext0 1B2E  
                                             __ptext1 2876  
                                             __ptext2 28A8  
                                             __ptext3 28F0  
                                             __ptext4 28BA  
                                             __ptext5 10CC  
                                             __ptext6 1DA8  
                                             __ptext7 2692  
                                             __ptext8 17D4  
                                             __ptext9 2968  
                                     __size_of_uartTx 004E  
                                           _T0CONbits 000FD5  
                                             _initADC 2850  
                                           _T1CONbits 000FCD  
                                     ??_initPinMotors 0012  
                                             _counter 005E  
                                             _liftArm 24CA  
                                           _T2CONbits 000FCA  
                                          ??_abortAll 0008  
                                             _readSeq 29CA  
                                        __size_of_isr 019C  
                                          ??___xxtofl 0016  
                                          _neverCheck 005D  
                                        ?i2_storeData 0001  
                                          ??_clearTM0 0012  
                                          _motCounter 0067  
                                             _pwmStep 005C  
                                             _stopADC 29DA  
                                   __end_of_reduceSeq 29CA  
                                   __end_of_retPeriod 2944  
                                          _releaseObj 27CA  
                                __size_of_returnTherm 000C  
                                end_of_initialization 2620  
                                __size_of_returnTouch 000C  
                                    _resetNewSequence 2968  
                                    rotateObj@totStep 01F7  
                                   __end_of_shiftData 26F2  
                                             isr@temp 0011  
                                   __end_of_resetStep 29A4  
                                          ??_tim0Init 0012  
                                       __Lmediumconst 0000  
                                          ??_tim1Init 0012  
                                          ??_tim2Init 0014  
                                           _OBJPicked 00D5  
                                __size_of_printStatus 0176  
                                          _resetTherm 2986  
                                          _resetTouch 297C  
                                             uartTx@i 0015  
                                       _pickingTheOBJ 0090  
                                         ?_fatalError 0001  
                                           _RCSTAbits 000FAB  
                                             postdec1 000FE5  
                                   __end_of_rotateObj 22FE  
                                             postinc0 000FEE  
                                             postinc1 000FE6  
                                             postinc2 000FDE  
                                          ??_startADC 0012  
                                          ??_stepMade 0014  
                                __size_of_stepCounter 000C  
                                       _interruptInit 278E  
                                   __end_of_usartInit 2894  
                                   __end_of_storeData 1354  
                          __end_ofrotateObj@stepAngle 0605  
                                          ??_writeTM0 0001  
                                           _PORTDbits 000F83  
                                          _printError 1DA8  
                                           _PORTEbits 000F84  
                                 i2printError@errCode 0007  
                                          _toggleStep 29A4  
                                       ___xxtofl@sign 001A  
                                           _TRISCbits 000F94  
                                           _TRISDbits 000F95  
                                           _TRISEbits 000F96  
                                         ___fldiv@grs 0033  
                                         ___fldiv@rem 002C  
                                __size_of_touchObject 0112  
                                          _stepToggle 005B  
                                        _completeStep 0062  
                                          _touchTherm 1FE0  
                                           _TXSTAbits 000FAC  
                                      _getNewSequence 28FE  
                              __size_of_resetTM0_Temp 000A  
                              __size_of_resetTM2_Temp 0012  
                                      ?_interruptInit 0001  
                                       __pidataCOMRAM 29FA  
                               __size_of_increaseStep 0008  
                                         ?_pickObject 0001  
                                         __fatalError 0060  
                                      __end_of_uartTx 2740  
                                       moveToPoint@x1 0015  
                                       moveToPoint@x2 0019  
                                       moveToPoint@y1 0017  
                                       moveToPoint@y2 001B  
                                 start_initialization 2588  
                                           i2uartTx@i 0004  
                                         __end_of_isr 01A4  
                                 __size_of_fatalError 0008  
                                         ?_releaseObj 0001  
                                   __size_ofi2_uartTx 004E  
                              __end_of_getNewSequence 290C  
                                     _errString_Fatal 02AF  
                                     _errString_Bound 0100  
                                         ?_resetTherm 0001  
                                     _errString_Reset 0287  
                                         ?_resetTouch 0001  
                                     _errString_Point 0235  
                                        _increaseStep 29EA  
                              __size_of_resetPosition 01E4  
                                       ??_executeData 01FD  
                                         __pdataBANK0 0080  
                                         __pdataBANK1 0100  
                                         __pdataBANK2 0200  
                                         _dataCounter 0061  
                                            ??_uartTx 0015  
                              moveToPoint@keepMovingX 0021  
                              moveToPoint@keepMovingY 0022  
                                         ?_printError 0001  
                                           ___fldiv@a 0024  
                                           ___fldiv@b 0020  
                                      _therm_pressure 0609  
                                         ?_toggleStep 0001  
                                         __pbssCOMRAM 0043  
                                       _resetTM0_Temp 2990  
                                       _resetTM2_Temp 28CC  
                                       __pcstackBANK1 01F6  
                                       __pcstackBANK2 02D6  
                                       ??_newSequence 0012  
                                   __size_of_abortAll 0012  
                                   __size_of___xxtofl 01F8  
                                __size_ofi2_storeData 0288  
                                   __size_of_clearTM0 000E  
                                     ?_getNewSequence 0012  
                                         ?_touchTherm 0001  
                                   printStatus@status 0018  
                                 __size_of_pickObject 0030  
                                  executeData@errCode 02D8  
                                   __size_of_tim0Init 0012  
                                   __size_of_tim1Init 000E  
                                   __size_of_tim2Init 0012  
                                     ??_interruptInit 0012  
                                           __pintcode 0008  
                                            ?___fldiv 0020  
                                            ?___fltol 0039  
                            __end_of_resetNewSequence 2972  
                                 __size_of_releaseObj 0030  
                                       storeData@data 001B  
                                            ?_getData 0012  
                                   __size_of_startADC 000A  
                                   __size_of_stepMade 0014  
                              __end_of_therm_pressure 060B  
                                            ?_initADC 0001  
                                         __smallconst 0600  
                                            ?_liftArm 0001  
                                            ?_readSeq 0001  
                                      ?_resetTM0_Temp 0001  
                                   __size_of_writeTM0 000E  
                                      ?_resetTM2_Temp 0001  
                                 __end_of_executeData 10CC  
                                          shiftData@i 0014  
                                 __size_of_resetTherm 000A  
                                           _newFeeder 0055  
                                       _resetPosition 17D4  
                                 __size_of_resetTouch 000A  
                                           _mexLength 006D  
                                       ??_setThermRel 0001  
                                            ?_stopADC 0001  
                                       ??_moveToPoint 001D  
                                       ??_setTouchRel 0001  
                                 __end_of_newSequence 29DA  
                                           _reduceSeq 29C2  
                                            _LATAbits 000F89  
                                            _LATBbits 000F8A  
                                           _retPeriod 2936  
                                            _LATCbits 000F8B  
                                            _LATDbits 000F8C  
                                 __size_of_printError 011C  
                                            _IPR1bits 000F9F  
                                            _PIE1bits 000F9D  
                                           _shiftData 2692  
                                           _resetStep 299A  
                                            i2u280_40 156A  
                                            i2u272_40 13F2  
                                            i2u280_41 1564  
                                            i2u272_41 13EC  
                                            i2u273_40 1406  
                                            i2u273_41 1400  
                                            _PIR1bits 000F9E  
                                            i2u274_40 148C  
                                            i2u290_40 00DE  
                                            i2u274_41 1486  
                                            i2u290_41 00D8  
                                            i2u195_40 276A  
                                            i2u275_40 14B0  
                                            i2u291_40 00F0  
                                            i2u195_41 2764  
                                            i2u275_41 14AA  
                                            i2u291_41 00EA  
                                            i2u196_40 2788  
                                            i2u276_40 14D4  
                                            i2u292_40 0112  
                                            i2u284_40 002C  
                                            i2u196_41 2782  
                                            i2u276_41 14CE  
                                            i2u292_41 010C  
                                            i2u284_41 0026  
                                            i2u277_40 152E  
                                            i2u293_40 0140  
                                            i2u285_40 004C  
                                            i2u277_41 1528  
                                            i2u293_41 013A  
                                            i2u285_41 0046  
                                            i2u278_40 1542  
                                            i2u294_40 0166  
                                            i2u286_40 006A  
                                            i2u278_41 153C  
                                            i2u294_41 0160  
                                            i2u286_41 0064  
                                            i2u279_40 1556  
                                            i2u295_40 017E  
                                            i2u287_40 0084  
                                            i2u279_41 1550  
                                            i2u295_41 0178  
                                            i2u287_41 007E  
                                            i2u288_40 009C  
                                            i2u288_41 0096  
                                            i2u289_40 00C0  
                                            i2u289_41 00BA  
                                 __size_of_toggleStep 000A  
                                        ??_fatalError 0001  
                                           _posVector 004C  
                                            _RCONbits 000FD0  
                                           _therm_rel 0064  
                                           _pwmPeriod 004F  
                                           _rotateOBJ 01CD  
                                           _rotateObj 2204  
                                          _ADCON0bits 000FC2  
                                          _ADCON1bits 000FC1  
                                 __size_of_touchTherm 0112  
                                           _usartInit 2876  
                                           _touch_rel 0065  
                                  __end_of_feeder1Pos 0613  
                                  __end_of_feeder2Pos 0611  
                                  __end_of_feeder3Pos 060F  
                                           _storeData 10CC  
                                      ?_resetPosition 0001  
                               __end_of_initPinMotors 2850  
                                       ??_returnTherm 0014  
                                       ??_returnTouch 0014  
                                            i2_uartTx 2740  
                                       _movingToPlace 015F  
                                           copy_data0 259C  
                                           copy_data1 25BC  
                                           copy_data2 25DC  
                                           copy_data3 25FC  
                                  __end_of_fatalError 29FA  
                                       ??_printStatus 0016  
                                  rotateObj@stepAngle 0601  
                                          ?_reduceSeq 0001  
                                          ?_retPeriod 0001  
                                          rotateObj@c 01FB  
                                          rotateObj@i 01F9  
                              __size_of_whatsTM0Limit 0008  
                                 __end_of_setThermRel 29C2  
                                 __end_of_moveToPoint 0D8C  
                                   printError@errCode 0018  
                                          ?_shiftData 0001  
                                       ??_stepCounter 0014  
                                            __Hrparam 0000  
                                          ?_resetStep 0001  
                                 __end_of_setTouchRel 29B8  
                                            __Lrparam 0000  
                                    __size_of___fldiv 0432  
                                    __size_of___fltol 0136  
                                         _executeData 0D8C  
                                        ??_pickObject 0015  
                                          ?_rotateObj 0001  
                            moveToPoint@MOT1Direction 001F  
                                     ??_resetTM0_Temp 0012  
                                       ?i2_printError 0001  
                                     ??_resetTM2_Temp 0012  
                                    __size_of_getData 000E  
                            moveToPoint@MOT2Direction 0020  
                                       ??_touchObject 0015  
                                            _abortAll 28DE  
                                          ?_usartInit 0001  
                                    __size_of_initADC 0026  
                                            ___xxtofl 15DC  
                                    __size_of_liftArm 00BE  
                                          ?_storeData 0001  
                                            _clearTM0 291A  
                                    __size_of_readSeq 0008  
                                            _tm0Count 0063  
                                            _tm0Error 0059  
                                            _tm0Limit 0066  
                                         _newSequence 29D2  
                                            __ptext10 29C2  
                                            __ptext11 29CA  
                                            __ptext20 20F2  
                                            __ptext12 29D2  
                                            __ptext21 29DA  
                                            __ptext13 278E  
                                            __ptext30 27CA  
                                            __ptext22 2972  
                                            __ptext14 282A  
                                            __ptext31 19B8  
                                            __ptext23 2950  
                                            __ptext15 2850  
                                            __ptext40 299A  
                                            __ptext32 26F2  
                                            __ptext24 297C  
                                            __ptext16 28FE  
                                            __ptext41 290C  
                                            __ptext33 27FA  
                                            __ptext25 2986  
                                            __ptext17 0D8C  
                                            __ptext50 2936  
                                            __ptext42 291A  
                                            __ptext34 0A48  
                                            __ptext26 2204  
                                            __ptext18 1FE0  
                                            __ptext51 29EA  
                                            __ptext35 295C  
                                            __ptext27 15DC  
                                            __ptext19 2944  
                                            __ptext52 29F2  
                                            __ptext44 1354  
                                            __ptext36 24CA  
                                            __ptext28 1C72  
                                            __ptext53 28DE  
                                            __ptext45 2928  
                                            __ptext37 2894  
                                            __ptext29 0616  
                                            __ptext54 1EC4  
                                            __ptext46 29E2  
                                            __ptext38 28CC  
                                            __ptext55 2740  
                                            __ptext47 29A4  
                                            __ptext39 2990  
                                            __ptext48 29AE  
                                            __ptext49 29B8  
                                        ??_releaseObj 0015  
                                    __size_of_stopADC 0008  
                                            _maxFeedX 0614  
                                            _maxFeedY 0613  
                                         _placeTheOBJ 01E2  
                                 __end_of_returnTherm 2950  
                                 __end_of_returnTouch 295C  
                                            _tim0Init 28BA  
                                            _tim1Init 28F0  
                                            _tim2Init 28A8  
                                       __size_of_main 0144  
                                         _receivedMex 0043  
                                  __end_of_pickObject 282A  
                                        ??_resetTherm 0012  
                                 __end_of_printStatus 1B2E  
                                        ??_resetTouch 0012  
                                           uartTx@ptr 0012  
                                            _resetPos 0121  
                                            _rotAngle 0057  
                                            int$flags 006E  
                                            _startADC 2972  
                                            _stepMade 2894  
                                            _stepMot1 008C  
                                            _stepMot2 0088  
                                            _stepMot3 0084  
                                 __end_of_stepCounter 2968  
                                   rotateObj@rotAngle 01F6  
                                      ??i2_printError 0005  
                                  __end_of_releaseObj 27FA  
                                        _movingToPick 017D  
                                            _writeTM0 2928  
                                        ??_printError 0016  
                                       _whatsTM0Limit 29E2  
                                     ??_resetPosition 0015  
                                  tim2Init@_pwmPeriod 0012  
                                          _INTCONbits 000FF2  
                                        ??_toggleStep 0001  
                                    ??_getNewSequence 0014  
                                  __end_of_resetTherm 2990  
                                  __end_of_resetTouch 2986  
                                         _setThermRel 29B8  
                                        uartTx@length 0014  
                                          _OBJRelease 00A4  
                                        _single_cycle 0051  
                                         _moveToPoint 0A48  
                                 __end_of_touchObject 2204  
                                            intlevel2 2A02  
                                        ??_touchTherm 0015  
                                         _setTouchRel 29AE  
                                         ??_reduceSeq 0012  
                                         ??_retPeriod 0003  
                                          _RCSTA1bits 000FAB  
                                  __end_of_printError 1EC4  
                                         ??_shiftData 0012  
                                         ??_resetStep 0012  
                                  __end_of_toggleStep 29AE  
                                   ?_resetNewSequence 0001  
                                      ?_whatsTM0Limit 0001  
                                         ??_rotateObj 0043  
                                  ??_resetNewSequence 0012  
                                  __end_of_touchTherm 20F2  
                                         ??_usartInit 0012  
                                       ??i2_storeData 0008  
                                         ??_storeData 0019  
                                         _returnTherm 2944  
                                         _returnTouch 2950  
                                         _printStatus 19B8  
                                         _stepCounter 295C  
