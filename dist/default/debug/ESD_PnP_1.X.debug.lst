

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Tue Apr 27 15:13:58 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    72                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    73                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    74                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    75  0000                     
    76                           ; Version 2.20
    77                           ; Generated 12/02/2020 GMT
    78                           ; 
    79                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    80                           ; All rights reserved.
    81                           ; 
    82                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    83                           ; 
    84                           ; Redistribution and use in source and binary forms, with or without modification, are
    85                           ; permitted provided that the following conditions are met:
    86                           ; 
    87                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    88                           ;        conditions and the following disclaimer.
    89                           ; 
    90                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    91                           ;        of conditions and the following disclaimer in the documentation and/or other
    92                           ;        materials provided with the distribution.
    93                           ; 
    94                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    95                           ;        software without specific prior written permission.
    96                           ; 
    97                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    98                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    99                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   100                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   101                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   102                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   103                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   104                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   105                           ; 
   106                           ; 
   107                           ; Code-generator required, PIC18F452 Definitions
   108                           ; 
   109                           ; SFR Addresses
   110  0000                     
   111                           	psect	idataCOMRAM
   112  00247E                     __pidataCOMRAM:
   113                           	callstack 0
   114                           
   115                           ;initializer for _motCounter
   116  00247E  0000               	dw	0
   117  002480  0001               	dw	1
   118  002482  0000               	dw	0
   119  002484  0001               	dw	1
   120  002486  0000               	dw	0
   121  002488  0001               	dw	1
   122                           
   123                           ;initializer for _maxX
   124  00248A  00C9               	dw	201
   125                           
   126                           ;initializer for storeData@mexLength
   127  00248C  05                 	db	5
   128                           
   129                           	psect	idataBANK0
   130  0022EC                     __pidataBANK0:
   131                           	callstack 0
   132                           
   133                           ;initializer for rotateObj@rotSequence
   134  0022EC  24                 	db	36
   135  0022ED  0C                 	db	12
   136  0022EE  18                 	db	24
   137  0022EF  30                 	db	48
   138                           
   139                           ;initializer for _stepMot3
   140  0022F0  09                 	db	9
   141  0022F1  03                 	db	3
   142  0022F2  06                 	db	6
   143  0022F3  0C                 	db	12
   144                           
   145                           ;initializer for _stepMot2
   146  0022F4  11                 	db	17
   147  0022F5  05                 	db	5
   148  0022F6  0C                 	db	12
   149  0022F7  18                 	db	24
   150                           
   151                           ;initializer for _stepMot1
   152  0022F8  22                 	db	34
   153  0022F9  06                 	db	6
   154  0022FA  0C                 	db	12
   155  0022FB  28                 	db	40
   156                           
   157                           ;initializer for _maxY
   158  0022FC  00C9               	dw	201
   159                           
   160                           ;initializer for _errString_Feed
   161  0022FE  45                 	db	69
   162  0022FF  72                 	db	114
   163  002300  72                 	db	114
   164  002301  6F                 	db	111
   165  002302  72                 	db	114
   166  002303  2C                 	db	44
   167  002304  20                 	db	32
   168  002305  66                 	db	102
   169  002306  65                 	db	101
   170  002307  65                 	db	101
   171  002308  64                 	db	100
   172  002309  20                 	db	32
   173  00230A  6C                 	db	108
   174  00230B  69                 	db	105
   175  00230C  6E                 	db	110
   176  00230D  65                 	db	101
   177  00230E  20                 	db	32
   178  00230F  6E                 	db	110
   179  002310  6F                 	db	111
   180  002311  74                 	db	116
   181  002312  20                 	db	32
   182  002313  64                 	db	100
   183  002314  65                 	db	101
   184  002315  66                 	db	102
   185  002316  69                 	db	105
   186  002317  6E                 	db	110
   187  002318  65                 	db	101
   188  002319  64                 	db	100
   189  00231A  0A                 	db	10
   190  00231B  00                 	db	0
   191                           
   192                           ;initializer for _errString_Command
   193  00231C  43                 	db	67
   194  00231D  6F                 	db	111
   195  00231E  6D                 	db	109
   196  00231F  6D                 	db	109
   197  002320  61                 	db	97
   198  002321  6E                 	db	110
   199  002322  64                 	db	100
   200  002323  20                 	db	32
   201  002324  6E                 	db	110
   202  002325  6F                 	db	111
   203  002326  74                 	db	116
   204  002327  20                 	db	32
   205  002328  72                 	db	114
   206  002329  65                 	db	101
   207  00232A  63                 	db	99
   208  00232B  6F                 	db	111
   209  00232C  67                 	db	103
   210  00232D  6E                 	db	110
   211  00232E  69                 	db	105
   212  00232F  7A                 	db	122
   213  002330  65                 	db	101
   214  002331  64                 	db	100
   215  002332  0A                 	db	10
   216  002333  00                 	db	0
   217                           
   218                           	psect	idataBANK1
   219  001ED8                     __pidataBANK1:
   220                           	callstack 0
   221                           
   222                           ;initializer for _errString_PointZ
   223  001ED8  45                 	db	69
   224  001ED9  72                 	db	114
   225  001EDA  72                 	db	114
   226  001EDB  6F                 	db	111
   227  001EDC  72                 	db	114
   228  001EDD  2C                 	db	44
   229  001EDE  20                 	db	32
   230  001EDF  74                 	db	116
   231  001EE0  69                 	db	105
   232  001EE1  6D                 	db	109
   233  001EE2  65                 	db	101
   234  001EE3  20                 	db	32
   235  001EE4  65                 	db	101
   236  001EE5  78                 	db	120
   237  001EE6  63                 	db	99
   238  001EE7  65                 	db	101
   239  001EE8  65                 	db	101
   240  001EE9  64                 	db	100
   241  001EEA  65                 	db	101
   242  001EEB  64                 	db	100
   243  001EEC  20                 	db	32
   244  001EED  74                 	db	116
   245  001EEE  6F                 	db	111
   246  001EEF  20                 	db	32
   247  001EF0  72                 	db	114
   248  001EF1  65                 	db	101
   249  001EF2  61                 	db	97
   250  001EF3  63                 	db	99
   251  001EF4  68                 	db	104
   252  001EF5  20                 	db	32
   253  001EF6  74                 	db	116
   254  001EF7  68                 	db	104
   255  001EF8  65                 	db	101
   256  001EF9  20                 	db	32
   257  001EFA  65                 	db	101
   258  001EFB  6E                 	db	110
   259  001EFC  64                 	db	100
   260  001EFD  20                 	db	32
   261  001EFE  6F                 	db	111
   262  001EFF  66                 	db	102
   263  001F00  20                 	db	32
   264  001F01  74                 	db	116
   265  001F02  68                 	db	104
   266  001F03  65                 	db	101
   267  001F04  20                 	db	32
   268  001F05  5A                 	db	90
   269  001F06  20                 	db	32
   270  001F07  41                 	db	65
   271  001F08  78                 	db	120
   272  001F09  69                 	db	105
   273  001F0A  73                 	db	115
   274  001F0B  0A                 	db	10
   275  001F0C  00                 	db	0
   276                           
   277                           ;initializer for _errString_Point
   278  001F0D  45                 	db	69
   279  001F0E  72                 	db	114
   280  001F0F  72                 	db	114
   281  001F10  6F                 	db	111
   282  001F11  72                 	db	114
   283  001F12  2C                 	db	44
   284  001F13  20                 	db	32
   285  001F14  74                 	db	116
   286  001F15  69                 	db	105
   287  001F16  6D                 	db	109
   288  001F17  65                 	db	101
   289  001F18  20                 	db	32
   290  001F19  65                 	db	101
   291  001F1A  78                 	db	120
   292  001F1B  63                 	db	99
   293  001F1C  65                 	db	101
   294  001F1D  65                 	db	101
   295  001F1E  64                 	db	100
   296  001F1F  65                 	db	101
   297  001F20  64                 	db	100
   298  001F21  20                 	db	32
   299  001F22  74                 	db	116
   300  001F23  6F                 	db	111
   301  001F24  20                 	db	32
   302  001F25  72                 	db	114
   303  001F26  65                 	db	101
   304  001F27  61                 	db	97
   305  001F28  63                 	db	99
   306  001F29  68                 	db	104
   307  001F2A  20                 	db	32
   308  001F2B  74                 	db	116
   309  001F2C  68                 	db	104
   310  001F2D  65                 	db	101
   311  001F2E  20                 	db	32
   312  001F2F  70                 	db	112
   313  001F30  6F                 	db	111
   314  001F31  69                 	db	105
   315  001F32  6E                 	db	110
   316  001F33  74                 	db	116
   317  001F34  0A                 	db	10
   318  001F35  00                 	db	0
   319                           
   320                           ;initializer for _errString_ZEND
   321  001F36  45                 	db	69
   322  001F37  72                 	db	114
   323  001F38  72                 	db	114
   324  001F39  6F                 	db	111
   325  001F3A  72                 	db	114
   326  001F3B  2C                 	db	44
   327  001F3C  20                 	db	32
   328  001F3D  6E                 	db	110
   329  001F3E  6F                 	db	111
   330  001F3F  20                 	db	32
   331  001F40  6F                 	db	111
   332  001F41  62                 	db	98
   333  001F42  6A                 	db	106
   334  001F43  65                 	db	101
   335  001F44  63                 	db	99
   336  001F45  74                 	db	116
   337  001F46  20                 	db	32
   338  001F47  72                 	db	114
   339  001F48  65                 	db	101
   340  001F49  6C                 	db	108
   341  001F4A  65                 	db	101
   342  001F4B  76                 	db	118
   343  001F4C  61                 	db	97
   344  001F4D  74                 	db	116
   345  001F4E  65                 	db	101
   346  001F4F  64                 	db	100
   347  001F50  20                 	db	32
   348  001F51  61                 	db	97
   349  001F52  6C                 	db	108
   350  001F53  6F                 	db	111
   351  001F54  6E                 	db	110
   352  001F55  67                 	db	103
   353  001F56  20                 	db	32
   354  001F57  5A                 	db	90
   355  001F58  20                 	db	32
   356  001F59  41                 	db	65
   357  001F5A  78                 	db	120
   358  001F5B  69                 	db	105
   359  001F5C  73                 	db	115
   360  001F5D  0A                 	db	10
   361  001F5E  00                 	db	0
   362                           
   363                           ;initializer for _errString_Reset
   364  001F5F  45                 	db	69
   365  001F60  72                 	db	114
   366  001F61  72                 	db	114
   367  001F62  6F                 	db	111
   368  001F63  72                 	db	114
   369  001F64  2C                 	db	44
   370  001F65  20                 	db	32
   371  001F66  74                 	db	116
   372  001F67  69                 	db	105
   373  001F68  6D                 	db	109
   374  001F69  65                 	db	101
   375  001F6A  20                 	db	32
   376  001F6B  65                 	db	101
   377  001F6C  78                 	db	120
   378  001F6D  63                 	db	99
   379  001F6E  65                 	db	101
   380  001F6F  65                 	db	101
   381  001F70  64                 	db	100
   382  001F71  65                 	db	101
   383  001F72  64                 	db	100
   384  001F73  20                 	db	32
   385  001F74  74                 	db	116
   386  001F75  6F                 	db	111
   387  001F76  20                 	db	32
   388  001F77  72                 	db	114
   389  001F78  65                 	db	101
   390  001F79  73                 	db	115
   391  001F7A  65                 	db	101
   392  001F7B  74                 	db	116
   393  001F7C  20                 	db	32
   394  001F7D  70                 	db	112
   395  001F7E  6F                 	db	111
   396  001F7F  73                 	db	115
   397  001F80  69                 	db	105
   398  001F81  74                 	db	116
   399  001F82  69                 	db	105
   400  001F83  6F                 	db	111
   401  001F84  6E                 	db	110
   402  001F85  0A                 	db	10
   403  001F86  00                 	db	0
   404                           
   405                           ;initializer for _errString_Fatal
   406  001F87  46                 	db	70
   407  001F88  61                 	db	97
   408  001F89  74                 	db	116
   409  001F8A  61                 	db	97
   410  001F8B  6C                 	db	108
   411  001F8C  20                 	db	32
   412  001F8D  45                 	db	69
   413  001F8E  72                 	db	114
   414  001F8F  72                 	db	114
   415  001F90  6F                 	db	111
   416  001F91  72                 	db	114
   417  001F92  2C                 	db	44
   418  001F93  20                 	db	32
   419  001F94  70                 	db	112
   420  001F95  6C                 	db	108
   421  001F96  65                 	db	101
   422  001F97  61                 	db	97
   423  001F98  73                 	db	115
   424  001F99  65                 	db	101
   425  001F9A  20                 	db	32
   426  001F9B  72                 	db	114
   427  001F9C  65                 	db	101
   428  001F9D  73                 	db	115
   429  001F9E  65                 	db	101
   430  001F9F  74                 	db	116
   431  001FA0  20                 	db	32
   432  001FA1  74                 	db	116
   433  001FA2  68                 	db	104
   434  001FA3  65                 	db	101
   435  001FA4  20                 	db	32
   436  001FA5  64                 	db	100
   437  001FA6  65                 	db	101
   438  001FA7  76                 	db	118
   439  001FA8  69                 	db	105
   440  001FA9  63                 	db	99
   441  001FAA  65                 	db	101
   442  001FAB  21                 	db	33
   443  001FAC  0A                 	db	10
   444  001FAD  00                 	db	0
   445                           
   446                           ;initializer for _errString_Bound
   447  001FAE  45                 	db	69
   448  001FAF  72                 	db	114
   449  001FB0  72                 	db	114
   450  001FB1  6F                 	db	111
   451  001FB2  72                 	db	114
   452  001FB3  2C                 	db	44
   453  001FB4  20                 	db	32
   454  001FB5  70                 	db	112
   455  001FB6  6F                 	db	111
   456  001FB7  69                 	db	105
   457  001FB8  6E                 	db	110
   458  001FB9  74                 	db	116
   459  001FBA  20                 	db	32
   460  001FBB  6F                 	db	111
   461  001FBC  75                 	db	117
   462  001FBD  74                 	db	116
   463  001FBE  73                 	db	115
   464  001FBF  69                 	db	105
   465  001FC0  64                 	db	100
   466  001FC1  65                 	db	101
   467  001FC2  20                 	db	32
   468  001FC3  62                 	db	98
   469  001FC4  6F                 	db	111
   470  001FC5  75                 	db	117
   471  001FC6  6E                 	db	110
   472  001FC7  64                 	db	100
   473  001FC8  61                 	db	97
   474  001FC9  72                 	db	114
   475  001FCA  69                 	db	105
   476  001FCB  65                 	db	101
   477  001FCC  73                 	db	115
   478  001FCD  0A                 	db	10
   479  001FCE  00                 	db	0
   480                           
   481                           	psect	smallconst
   482  000600                     __psmallconst:
   483                           	callstack 0
   484  000600  00                 	db	0
   485  000601  FFAC               	dw	65452
   486  000603  3DB3               	dw	15795
   487  000605                     __end_ofrotateObj@stepAngle:
   488                           	callstack 0
   489  000605  0400               	dw	1024
   490  000607                     __end_of_therm_pressure:
   491                           	callstack 0
   492  000607  0200               	dw	512
   493  000609                     __end_of_touch_pressure:
   494                           	callstack 0
   495  000609                     _feeder3Pos:
   496                           	callstack 0
   497  000609  1E                 	db	30
   498  00060A  96                 	db	150
   499  00060B                     __end_of_feeder3Pos:
   500                           	callstack 0
   501  00060B                     _feeder2Pos:
   502                           	callstack 0
   503  00060B  1E                 	db	30
   504  00060C  64                 	db	100
   505  00060D                     __end_of_feeder2Pos:
   506                           	callstack 0
   507  00060D                     _feeder1Pos:
   508                           	callstack 0
   509  00060D  1E                 	db	30
   510  00060E  32                 	db	50
   511  00060F                     __end_of_feeder1Pos:
   512                           	callstack 0
   513  00060F  C8                 	db	200
   514  000610                     __end_of_maxFeedY:
   515                           	callstack 0
   516  000610  3C                 	db	60
   517  000611                     __end_of_maxFeedX:
   518                           	callstack 0
   519  0000                     _TMR0	set	4054
   520  0000                     _T1CONbits	set	4045
   521  0000                     _TXREG	set	4013
   522  0000                     _SPBRG	set	4015
   523  0000                     _TXSTAbits	set	4012
   524  0000                     _TRISCbits	set	3988
   525  0000                     _RCREG1	set	4014
   526  0000                     _ADRESH	set	4036
   527  0000                     _ADRESL	set	4035
   528  0000                     _PIR1bits	set	3998
   529  0000                     _RCONbits	set	4048
   530  0000                     _INTCONbits	set	4082
   531  0000                     _IPR1bits	set	3999
   532  0000                     _PIE1bits	set	3997
   533  0000                     _ADCON0bits	set	4034
   534  0000                     _RCSTAbits	set	4011
   535  0000                     _RCSTA1bits	set	4011
   536  0000                     _LATD	set	3980
   537  0000                     _PORTDbits	set	3971
   538  0000                     _TMR2	set	4044
   539  0000                     _LATC	set	3979
   540  0000                     _LATB	set	3978
   541  0000                     _LATA	set	3977
   542  0000                     _PORTEbits	set	3972
   543  0000                     _T0CONbits	set	4053
   544  0000                     _T2CONbits	set	4042
   545  0000                     _LATDbits	set	3980
   546  0000                     _LATCbits	set	3979
   547  0000                     _LATBbits	set	3978
   548  0000                     _LATAbits	set	3977
   549  0000                     _TRISDbits	set	3989
   550  0000                     _TRISEbits	set	3990
   551  0000                     _TRISD	set	3989
   552  0000                     _TRISC	set	3988
   553  0000                     _TRISB	set	3987
   554  0000                     _TRISA	set	3986
   555  0000                     _ADCON1bits	set	4033
   556  000611  00                 	db	0	; dummy byte at the end
   557  0000                     
   558                           ; #config settings
   559                           
   560                           	psect	cinit
   561  00216A                     __pcinit:
   562                           	callstack 0
   563  00216A                     start_initialization:
   564                           	callstack 0
   565  00216A                     __initialization:
   566                           	callstack 0
   567                           
   568                           ; Initialize objects allocated to BANK1 (247 bytes)
   569                           ; load TBLPTR registers with __pidataBANK1
   570  00216A  0ED8               	movlw	low __pidataBANK1
   571  00216C  6EF6               	movwf	tblptrl,c
   572  00216E  0E1E               	movlw	high __pidataBANK1
   573  002170  6EF7               	movwf	tblptrh,c
   574  002172  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   575  002174  6EF8               	movwf	tblptru,c
   576  002176  EE01  F000         	lfsr	0,__pdataBANK1
   577  00217A  EE10 F0F7          	lfsr	1,247
   578  00217E                     copy_data0:
   579  00217E  0009               	tblrd		*+
   580  002180  CFF5 FFEE          	movff	tablat,postinc0
   581  002184  50E5               	movf	postdec1,w,c
   582  002186  50E1               	movf	fsr1l,w,c
   583  002188  E1FA               	bnz	copy_data0
   584                           
   585                           ; Initialize objects allocated to BANK0 (72 bytes)
   586                           ; load TBLPTR registers with __pidataBANK0
   587  00218A  0EEC               	movlw	low __pidataBANK0
   588  00218C  6EF6               	movwf	tblptrl,c
   589  00218E  0E22               	movlw	high __pidataBANK0
   590  002190  6EF7               	movwf	tblptrh,c
   591  002192  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   592  002194  6EF8               	movwf	tblptru,c
   593  002196  EE00  F080         	lfsr	0,__pdataBANK0
   594  00219A  EE10 F048          	lfsr	1,72
   595  00219E                     copy_data1:
   596  00219E  0009               	tblrd		*+
   597  0021A0  CFF5 FFEE          	movff	tablat,postinc0
   598  0021A4  50E5               	movf	postdec1,w,c
   599  0021A6  50E1               	movf	fsr1l,w,c
   600  0021A8  E1FA               	bnz	copy_data1
   601                           
   602                           ; Initialize objects allocated to COMRAM (15 bytes)
   603                           ; load TBLPTR registers with __pidataCOMRAM
   604  0021AA  0E7E               	movlw	low __pidataCOMRAM
   605  0021AC  6EF6               	movwf	tblptrl,c
   606  0021AE  0E24               	movlw	high __pidataCOMRAM
   607  0021B0  6EF7               	movwf	tblptrh,c
   608  0021B2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   609  0021B4  6EF8               	movwf	tblptru,c
   610  0021B6  EE00  F05E         	lfsr	0,__pdataCOMRAM
   611  0021BA  EE10 F00F          	lfsr	1,15
   612  0021BE                     copy_data2:
   613  0021BE  0009               	tblrd		*+
   614  0021C0  CFF5 FFEE          	movff	tablat,postinc0
   615  0021C4  50E5               	movf	postdec1,w,c
   616  0021C6  50E1               	movf	fsr1l,w,c
   617  0021C8  E1FA               	bnz	copy_data2
   618                           
   619                           ; Clear objects allocated to BANK0 (37 bytes)
   620  0021CA  EE00  F0C8         	lfsr	0,__pbssBANK0
   621  0021CE  0E25               	movlw	37
   622  0021D0                     clear_0:
   623  0021D0  6AEE               	clrf	postinc0,c
   624  0021D2  06E8               	decf	wreg,f,c
   625  0021D4  E1FD               	bnz	clear_0
   626                           
   627                           ; Clear objects allocated to COMRAM (27 bytes)
   628  0021D6  EE00  F043         	lfsr	0,__pbssCOMRAM
   629  0021DA  0E1B               	movlw	27
   630  0021DC                     clear_1:
   631  0021DC  6AEE               	clrf	postinc0,c
   632  0021DE  06E8               	decf	wreg,f,c
   633  0021E0  E1FD               	bnz	clear_1
   634  0021E2                     end_of_initialization:
   635                           	callstack 0
   636  0021E2                     __end_of__initialization:
   637                           	callstack 0
   638  0021E2  906D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   639  0021E4  926D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   640  0021E6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   641  0021E8  6EF8               	movwf	tblptru,c
   642  0021EA  0100               	movlb	0
   643  0021EC  EF46  F00A         	goto	_main	;jump to C main() function
   644                           
   645                           	psect	bssCOMRAM
   646  000043                     __pbssCOMRAM:
   647                           	callstack 0
   648  000043                     _posVector:
   649                           	callstack 0
   650  000043                     	ds	3
   651  000046                     _pwmPeriod:
   652                           	callstack 0
   653  000046                     	ds	2
   654  000048                     isr@single_cycle:
   655                           	callstack 0
   656  000048                     	ds	2
   657  00004A                     _ADC_res:
   658                           	callstack 0
   659  00004A                     	ds	2
   660  00004C                     _newFeeder:
   661                           	callstack 0
   662  00004C                     	ds	2
   663  00004E                     _rotAngle:
   664                           	callstack 0
   665  00004E                     	ds	2
   666  000050                     _tm0Error:
   667                           	callstack 0
   668  000050                     	ds	2
   669  000052                     _stepToggle:
   670                           	callstack 0
   671  000052                     	ds	1
   672  000053                     _pwmStep:
   673                           	callstack 0
   674  000053                     	ds	1
   675  000054                     	ds	1
   676  000055                     storeData@counter:
   677                           	callstack 0
   678  000055                     	ds	1
   679  000056                     __newSequence:
   680                           	callstack 0
   681  000056                     	ds	1
   682  000057                     __fatalError:
   683                           	callstack 0
   684  000057                     	ds	1
   685  000058                     _dataCounter:
   686                           	callstack 0
   687  000058                     	ds	1
   688  000059                     isr@completeStep:
   689                           	callstack 0
   690  000059                     	ds	1
   691  00005A                     isr@tm0Count:
   692                           	callstack 0
   693  00005A                     	ds	1
   694  00005B                     _therm_rel:
   695                           	callstack 0
   696  00005B                     	ds	1
   697  00005C                     _touch_rel:
   698                           	callstack 0
   699  00005C                     	ds	1
   700  00005D                     _tm0Limit:
   701                           	callstack 0
   702  00005D                     	ds	1
   703                           
   704                           	psect	dataCOMRAM
   705  00005E                     __pdataCOMRAM:
   706                           	callstack 0
   707  00005E                     _motCounter:
   708                           	callstack 0
   709  00005E                     	ds	12
   710  00006A                     	ds	2
   711  00006C                     storeData@mexLength:
   712                           	callstack 0
   713  00006C                     	ds	1
   714                           
   715                           	psect	bssBANK0
   716  0000C8                     __pbssBANK0:
   717                           	callstack 0
   718  0000C8                     storeData@receivedMex:
   719                           	callstack 0
   720  0000C8                     	ds	9
   721  0000D1                     _dataSequence:
   722                           	callstack 0
   723  0000D1                     	ds	20
   724  0000E5                     _newSequenceData:
   725                           	callstack 0
   726  0000E5                     	ds	8
   727                           
   728                           	psect	dataBANK0
   729  000080                     __pdataBANK0:
   730                           	callstack 0
   731  000080                     rotateObj@rotSequence:
   732                           	callstack 0
   733  000080                     	ds	4
   734  000084                     _stepMot3:
   735                           	callstack 0
   736  000084                     	ds	4
   737  000088                     _stepMot2:
   738                           	callstack 0
   739  000088                     	ds	4
   740  00008C                     _stepMot1:
   741                           	callstack 0
   742  00008C                     	ds	4
   743  000090                     	ds	2
   744  000092                     _errString_Feed:
   745                           	callstack 0
   746  000092                     	ds	30
   747  0000B0                     _errString_Command:
   748                           	callstack 0
   749  0000B0                     	ds	24
   750                           
   751                           	psect	dataBANK1
   752  000100                     __pdataBANK1:
   753                           	callstack 0
   754  000100                     _errString_PointZ:
   755                           	callstack 0
   756  000100                     	ds	53
   757  000135                     _errString_Point:
   758                           	callstack 0
   759  000135                     	ds	41
   760  00015E                     _errString_ZEND:
   761                           	callstack 0
   762  00015E                     	ds	41
   763  000187                     _errString_Reset:
   764                           	callstack 0
   765  000187                     	ds	40
   766  0001AF                     _errString_Fatal:
   767                           	callstack 0
   768  0001AF                     	ds	39
   769  0001D6                     _errString_Bound:
   770                           	callstack 0
   771  0001D6                     	ds	33
   772                           
   773                           	psect	cstackBANK0
   774  0000ED                     __pcstackBANK0:
   775                           	callstack 0
   776  0000ED                     ??_rotateObj:
   777                           
   778                           ; 1 bytes @ 0x0
   779  0000ED                     	ds	2
   780  0000EF                     rotateObj@rotAngle:
   781                           	callstack 0
   782                           
   783                           ; 1 bytes @ 0x2
   784  0000EF                     	ds	1
   785  0000F0                     rotateObj@totStep:
   786                           	callstack 0
   787                           
   788                           ; 2 bytes @ 0x3
   789  0000F0                     	ds	2
   790  0000F2                     rotateObj@i:
   791                           	callstack 0
   792                           
   793                           ; 2 bytes @ 0x5
   794  0000F2                     	ds	2
   795  0000F4                     ??_executeData:
   796                           
   797                           ; 1 bytes @ 0x7
   798  0000F4                     	ds	2
   799  0000F6                     executeData@errCode:
   800                           	callstack 0
   801                           
   802                           ; 1 bytes @ 0x9
   803  0000F6                     	ds	1
   804  0000F7                     executeData@data:
   805                           	callstack 0
   806                           
   807                           ; 2 bytes @ 0xA
   808  0000F7                     	ds	2
   809  0000F9                     ??_main:
   810                           
   811                           ; 1 bytes @ 0xC
   812  0000F9                     	ds	2
   813  0000FB                     main@errCode:
   814                           	callstack 0
   815                           
   816                           ; 1 bytes @ 0xE
   817  0000FB                     	ds	1
   818  0000FC                     main@newData:
   819                           	callstack 0
   820                           
   821                           ; 2 bytes @ 0xF
   822  0000FC                     	ds	2
   823                           
   824                           	psect	cstackCOMRAM
   825  000001                     __pcstackCOMRAM:
   826                           	callstack 0
   827  000001                     ?_retPeriod:
   828                           	callstack 0
   829  000001                     i2uartTx@ptr:
   830                           	callstack 0
   831                           
   832                           ; 2 bytes @ 0x0
   833  000001                     	ds	2
   834  000003                     i2uartTx@length:
   835                           	callstack 0
   836                           
   837                           ; 1 bytes @ 0x2
   838  000003                     	ds	1
   839  000004                     i2uartTx@i:
   840                           	callstack 0
   841                           
   842                           ; 1 bytes @ 0x3
   843  000004                     	ds	1
   844  000005                     ??i2_printError:
   845                           
   846                           ; 1 bytes @ 0x4
   847  000005                     	ds	2
   848  000007                     i2printError@errCode:
   849                           	callstack 0
   850                           
   851                           ; 1 bytes @ 0x6
   852  000007                     	ds	1
   853  000008                     ??i2_storeData:
   854                           
   855                           ; 1 bytes @ 0x7
   856  000008                     	ds	2
   857  00000A                     i2storeData@data:
   858                           	callstack 0
   859                           
   860                           ; 1 bytes @ 0x9
   861  00000A                     	ds	1
   862  00000B                     ??_isr:
   863                           
   864                           ; 1 bytes @ 0xA
   865  00000B                     	ds	6
   866  000011                     isr@temp:
   867                           	callstack 0
   868                           
   869                           ; 1 bytes @ 0x10
   870  000011                     	ds	1
   871  000012                     ??_shiftData:
   872  000012                     ?_stepMade:
   873                           	callstack 0
   874  000012                     ?_stepCounter:
   875                           	callstack 0
   876  000012                     ?_returnTouch:
   877                           	callstack 0
   878  000012                     ?_returnTherm:
   879                           	callstack 0
   880  000012                     ?_getNewSequence:
   881                           	callstack 0
   882  000012                     ?_getData:
   883                           	callstack 0
   884  000012                     ?___xxtofl:
   885                           	callstack 0
   886  000012                     uartTx@ptr:
   887                           	callstack 0
   888  000012                     tim2Init@_pwmPeriod:
   889                           	callstack 0
   890  000012                     ___xxtofl@val:
   891                           	callstack 0
   892                           
   893                           ; 4 bytes @ 0x11
   894  000012                     	ds	2
   895  000014                     shiftData@i:
   896                           	callstack 0
   897  000014                     uartTx@length:
   898                           	callstack 0
   899  000014                     stepMade@temp:
   900                           	callstack 0
   901                           
   902                           ; 1 bytes @ 0x13
   903  000014                     	ds	1
   904  000015                     resetPosition@keepMovingX:
   905                           	callstack 0
   906  000015                     uartTx@i:
   907                           	callstack 0
   908  000015                     moveToPoint@x1:
   909                           	callstack 0
   910                           
   911                           ; 2 bytes @ 0x14
   912  000015                     	ds	1
   913  000016                     ??_printError:
   914  000016                     ??___xxtofl:
   915  000016                     resetPosition@keepMovingY:
   916                           	callstack 0
   917                           
   918                           ; 1 bytes @ 0x15
   919  000016                     	ds	1
   920  000017                     resetPosition@keepMovingZ:
   921                           	callstack 0
   922  000017                     moveToPoint@y1:
   923                           	callstack 0
   924                           
   925                           ; 2 bytes @ 0x16
   926  000017                     	ds	1
   927  000018                     printError@errCode:
   928                           	callstack 0
   929                           
   930                           ; 1 bytes @ 0x17
   931  000018                     	ds	1
   932  000019                     ??_storeData:
   933  000019                     moveToPoint@x2:
   934                           	callstack 0
   935                           
   936                           ; 2 bytes @ 0x18
   937  000019                     	ds	1
   938  00001A                     ___xxtofl@sign:
   939                           	callstack 0
   940                           
   941                           ; 1 bytes @ 0x19
   942  00001A                     	ds	1
   943  00001B                     storeData@data:
   944                           	callstack 0
   945  00001B                     ___xxtofl@exp:
   946                           	callstack 0
   947  00001B                     moveToPoint@y2:
   948                           	callstack 0
   949                           
   950                           ; 2 bytes @ 0x1A
   951  00001B                     	ds	1
   952  00001C                     ___xxtofl@arg:
   953                           	callstack 0
   954                           
   955                           ; 4 bytes @ 0x1B
   956  00001C                     	ds	1
   957  00001D                     ??_moveToPoint:
   958                           
   959                           ; 1 bytes @ 0x1C
   960  00001D                     	ds	2
   961  00001F                     moveToPoint@MOT1Direction:
   962                           	callstack 0
   963                           
   964                           ; 1 bytes @ 0x1E
   965  00001F                     	ds	1
   966  000020                     ?___fldiv:
   967                           	callstack 0
   968  000020                     moveToPoint@MOT2Direction:
   969                           	callstack 0
   970  000020                     ___fldiv@b:
   971                           	callstack 0
   972                           
   973                           ; 4 bytes @ 0x1F
   974  000020                     	ds	1
   975  000021                     moveToPoint@keepMovingX:
   976                           	callstack 0
   977                           
   978                           ; 1 bytes @ 0x20
   979  000021                     	ds	1
   980  000022                     moveToPoint@keepMovingY:
   981                           	callstack 0
   982                           
   983                           ; 1 bytes @ 0x21
   984  000022                     	ds	2
   985  000024                     ___fldiv@a:
   986                           	callstack 0
   987                           
   988                           ; 4 bytes @ 0x23
   989  000024                     	ds	4
   990  000028                     ??___fldiv:
   991                           
   992                           ; 1 bytes @ 0x27
   993  000028                     	ds	4
   994  00002C                     ___fldiv@rem:
   995                           	callstack 0
   996                           
   997                           ; 4 bytes @ 0x2B
   998  00002C                     	ds	4
   999  000030                     ___fldiv@sign:
  1000                           	callstack 0
  1001                           
  1002                           ; 1 bytes @ 0x2F
  1003  000030                     	ds	1
  1004  000031                     ___fldiv@new_exp:
  1005                           	callstack 0
  1006                           
  1007                           ; 2 bytes @ 0x30
  1008  000031                     	ds	2
  1009  000033                     ___fldiv@grs:
  1010                           	callstack 0
  1011                           
  1012                           ; 4 bytes @ 0x32
  1013  000033                     	ds	4
  1014  000037                     ___fldiv@bexp:
  1015                           	callstack 0
  1016                           
  1017                           ; 1 bytes @ 0x36
  1018  000037                     	ds	1
  1019  000038                     ___fldiv@aexp:
  1020                           	callstack 0
  1021                           
  1022                           ; 1 bytes @ 0x37
  1023  000038                     	ds	1
  1024  000039                     ?___fltol:
  1025                           	callstack 0
  1026  000039                     ___fltol@f1:
  1027                           	callstack 0
  1028                           
  1029                           ; 4 bytes @ 0x38
  1030  000039                     	ds	4
  1031  00003D                     ??___fltol:
  1032                           
  1033                           ; 1 bytes @ 0x3C
  1034  00003D                     	ds	4
  1035  000041                     ___fltol@sign1:
  1036                           	callstack 0
  1037                           
  1038                           ; 1 bytes @ 0x40
  1039  000041                     	ds	1
  1040  000042                     ___fltol@exp1:
  1041                           	callstack 0
  1042                           
  1043                           ; 1 bytes @ 0x41
  1044  000042                     	ds	1
  1045                           
  1046 ;;
  1047 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1048 ;;
  1049 ;; *************** function _main *****************
  1050 ;; Defined at:
  1051 ;;		line 19 in file "main.c"
  1052 ;; Parameters:    Size  Location     Type
  1053 ;;		None
  1054 ;; Auto vars:     Size  Location     Type
  1055 ;;  newData         2   15[BANK0 ] PTR struct .
  1056 ;;		 -> newSequenceData(8), 
  1057 ;;  errCode         1   14[BANK0 ] unsigned char 
  1058 ;; Return value:  Size  Location     Type
  1059 ;;                  1    wreg      void 
  1060 ;; Registers used:
  1061 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1062 ;; Tracked objects:
  1063 ;;		On entry : 0/0
  1064 ;;		On exit  : 0/0
  1065 ;;		Unchanged: 0/0
  1066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1067 ;;      Params:         0       0       0       0       0       0       0
  1068 ;;      Locals:         0       3       0       0       0       0       0
  1069 ;;      Temps:          0       2       0       0       0       0       0
  1070 ;;      Totals:         0       5       0       0       0       0       0
  1071 ;;Total ram usage:        5 bytes
  1072 ;; Hardware stack levels required when called:    7
  1073 ;; This function calls:
  1074 ;;		_clearTM0
  1075 ;;		_executeData
  1076 ;;		_getNewSequence
  1077 ;;		_initADC
  1078 ;;		_initPinMotors
  1079 ;;		_interruptInit
  1080 ;;		_newSequence
  1081 ;;		_printError
  1082 ;;		_readSeq
  1083 ;;		_reduceSeq
  1084 ;;		_resetNewSequence
  1085 ;;		_resetPosition
  1086 ;;		_shiftData
  1087 ;;		_storeData
  1088 ;;		_tim0Init
  1089 ;;		_tim1Init
  1090 ;;		_tim2Init
  1091 ;;		_usartInit
  1092 ;; This function is called by:
  1093 ;;		Startup code after reset
  1094 ;; This function uses a non-reentrant model
  1095 ;;
  1096                           
  1097                           	psect	text0
  1098  00148C                     __ptext0:
  1099                           	callstack 0
  1100  00148C                     _main:
  1101                           	callstack 24
  1102  00148C  FFFF               	dw	65535	; assembler added errata NOP
  1103                           
  1104                           ;main.c: 23:     interruptInit();
  1105  00148E  EC9A  F011         	call	_interruptInit	;wreg free
  1106  001492                     
  1107                           ;main.c: 24:     initPinMotors();
  1108  001492  ECE4  F011         	call	_initPinMotors	;wreg free
  1109  001496                     
  1110                           ;main.c: 25:     initADC();
  1111  001496  ECF7  F011         	call	_initADC	;wreg free
  1112  00149A                     
  1113                           ;main.c: 26:     usartInit();
  1114  00149A  EC0A  F012         	call	_usartInit	;wreg free
  1115  00149E                     
  1116                           ;main.c: 27:     tim0Init();
  1117  00149E  EC2D  F012         	call	_tim0Init	;wreg free
  1118  0014A2                     
  1119                           ;main.c: 28:     tim1Init();
  1120  0014A2  EC47  F012         	call	_tim1Init	;wreg free
  1121  0014A6                     
  1122                           ;main.c: 29:     tim2Init(10);
  1123  0014A6  0E00               	movlw	0
  1124  0014A8  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1125  0014AA  0E0A               	movlw	10
  1126  0014AC  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1127  0014AE  EC19  F012         	call	_tim2Init	;wreg free
  1128  0014B2                     
  1129                           ;main.c: 32:     errCode = resetPosition();
  1130  0014B2  EC49  F008         	call	_resetPosition	;wreg free
  1131  0014B6  0100               	movlb	0	; () banked
  1132  0014B8  6FFB               	movwf	main@errCode& (0+255),b
  1133  0014BA                     
  1134                           ; BSR set to: 0
  1135                           ;main.c: 33:     if(errCode != 0){
  1136  0014BA  51FB               	movf	main@errCode& (0+255),w,b
  1137  0014BC  B4D8               	btfsc	status,2,c
  1138  0014BE  EF63  F00A         	goto	u3701
  1139  0014C2  EF66  F00A         	goto	u3700
  1140  0014C6                     u3701:
  1141  0014C6  FFFF               	dw	65535	; assembler added errata NOP
  1142  0014C8  EF6D  F00A         	goto	l333
  1143  0014CC                     u3700:
  1144  0014CC  FFFF               	dw	65535	; assembler added errata NOP
  1145  0014CE                     
  1146                           ; BSR set to: 0
  1147                           ;main.c: 34:         printError(errCode);
  1148  0014CE  51FB               	movf	main@errCode& (0+255),w,b
  1149  0014D0  ECC2  F00D         	call	_printError
  1150  0014D4                     l334:
  1151  0014D4  FFFF               	dw	65535	; assembler added errata NOP
  1152  0014D6  EF6A  F00A         	goto	l334
  1153  0014DA                     l333:
  1154  0014DA  FFFF               	dw	65535	; assembler added errata NOP
  1155                           
  1156                           ; BSR set to: 0
  1157                           ;main.c: 39:     RCSTA1bits.CREN = 1;
  1158  0014DC  88AB               	bsf	171,4,c	;volatile
  1159  0014DE                     l4492:
  1160  0014DE  FFFF               	dw	65535	; assembler added errata NOP
  1161                           
  1162                           ;main.c: 42:         if(newSequence()){
  1163  0014E0  ECB3  F012         	call	_newSequence	;wreg free
  1164  0014E4  0900               	iorlw	0
  1165  0014E6  B4D8               	btfsc	status,2,c
  1166  0014E8  EF78  F00A         	goto	u3711
  1167  0014EC  EF7B  F00A         	goto	u3710
  1168  0014F0                     u3711:
  1169  0014F0  FFFF               	dw	65535	; assembler added errata NOP
  1170  0014F2  EFFD  F00A         	goto	l4520
  1171  0014F6                     u3710:
  1172  0014F6  FFFF               	dw	65535	; assembler added errata NOP
  1173  0014F8                     
  1174                           ;main.c: 43:             t_newSequence* newData = getNewSequence();
  1175  0014F8  EC4E  F012         	call	_getNewSequence	;wreg free
  1176  0014FC  C012  F0FC         	movff	?_getNewSequence,main@newData
  1177  001500  C013  F0FD         	movff	?_getNewSequence+1,main@newData+1
  1178  001504                     
  1179                           ;main.c: 45:             newFeeder[0] = newData ->init_posX;
  1180  001504  0100               	movlb	0	; () banked
  1181  001506  EE20 F002          	lfsr	2,2
  1182  00150A  51FC               	movf	main@newData& (0+255),w,b
  1183  00150C  26D9               	addwf	fsr2l,f,c
  1184  00150E  51FD               	movf	(main@newData+1)& (0+255),w,b
  1185  001510  22DA               	addwfc	fsr2h,f,c
  1186  001512  50DF               	movf	indf2,w,c
  1187  001514  6E4C               	movwf	_newFeeder^0,c
  1188  001516                     
  1189                           ; BSR set to: 0
  1190                           ;main.c: 46:             newFeeder[1] = newData ->init_posY;
  1191  001516  EE20 F003          	lfsr	2,3
  1192  00151A  51FC               	movf	main@newData& (0+255),w,b
  1193  00151C  26D9               	addwf	fsr2l,f,c
  1194  00151E  51FD               	movf	(main@newData+1)& (0+255),w,b
  1195  001520  22DA               	addwfc	fsr2h,f,c
  1196  001522  50DF               	movf	indf2,w,c
  1197  001524  6E4D               	movwf	(_newFeeder+1)^0,c
  1198  001526                     
  1199                           ; BSR set to: 0
  1200                           ;main.c: 50:             RCSTAbits.CREN = 0;
  1201  001526  98AB               	bcf	171,4,c	;volatile
  1202  001528                     
  1203                           ; BSR set to: 0
  1204                           ;main.c: 55:             if(newData ->end_posX > maxFeedX || newData ->end_posY > maxFee
      +                          dY){
  1205  001528  EE20 F005          	lfsr	2,5
  1206  00152C  51FC               	movf	main@newData& (0+255),w,b
  1207  00152E  26D9               	addwf	fsr2l,f,c
  1208  001530  51FD               	movf	(main@newData+1)& (0+255),w,b
  1209  001532  22DA               	addwfc	fsr2h,f,c
  1210  001534  0E3D               	movlw	61
  1211  001536  60DF               	cpfslt	indf2,c
  1212  001538  EFA0  F00A         	goto	u3721
  1213  00153C  EFA3  F00A         	goto	u3720
  1214  001540                     u3721:
  1215  001540  FFFF               	dw	65535	; assembler added errata NOP
  1216  001542  EFB3  F00A         	goto	l4506
  1217  001546                     u3720:
  1218  001546  FFFF               	dw	65535	; assembler added errata NOP
  1219  001548                     
  1220                           ; BSR set to: 0
  1221  001548  EE20 F006          	lfsr	2,6
  1222  00154C  51FC               	movf	main@newData& (0+255),w,b
  1223  00154E  26D9               	addwf	fsr2l,f,c
  1224  001550  51FD               	movf	(main@newData+1)& (0+255),w,b
  1225  001552  22DA               	addwfc	fsr2h,f,c
  1226  001554  0EC8               	movlw	200
  1227  001556  64DF               	cpfsgt	indf2,c
  1228  001558  EFB0  F00A         	goto	u3731
  1229  00155C  EFB3  F00A         	goto	u3730
  1230  001560                     u3731:
  1231  001560  FFFF               	dw	65535	; assembler added errata NOP
  1232  001562  EFB8  F00A         	goto	l4508
  1233  001566                     u3730:
  1234  001566                     l4506:
  1235  001566  FFFF               	dw	65535	; assembler added errata NOP
  1236                           
  1237                           ; BSR set to: 0
  1238                           ;main.c: 56:                 errCode = 5;
  1239  001568  0E05               	movlw	5
  1240  00156A  6FFB               	movwf	main@errCode& (0+255),b
  1241                           
  1242                           ;main.c: 57:             }else{
  1243  00156C  EFCC  F00A         	goto	l4510
  1244  001570                     l4508:
  1245  001570  FFFF               	dw	65535	; assembler added errata NOP
  1246                           
  1247                           ; BSR set to: 0
  1248                           ;main.c: 58:                 storeData(newData ->end_posX);
  1249  001572  EE20 F005          	lfsr	2,5
  1250  001576  51FC               	movf	main@newData& (0+255),w,b
  1251  001578  26D9               	addwf	fsr2l,f,c
  1252  00157A  51FD               	movf	(main@newData+1)& (0+255),w,b
  1253  00157C  22DA               	addwfc	fsr2h,f,c
  1254  00157E  50DF               	movf	indf2,w,c
  1255  001580  EC1B  F00B         	call	_storeData
  1256                           
  1257                           ;main.c: 59:                 storeData(newData ->end_posY);
  1258  001584  0100               	movlb	0	; () banked
  1259  001586  EE20 F006          	lfsr	2,6
  1260  00158A  51FC               	movf	main@newData& (0+255),w,b
  1261  00158C  26D9               	addwf	fsr2l,f,c
  1262  00158E  51FD               	movf	(main@newData+1)& (0+255),w,b
  1263  001590  22DA               	addwfc	fsr2h,f,c
  1264  001592  50DF               	movf	indf2,w,c
  1265  001594  EC1B  F00B         	call	_storeData
  1266  001598                     l4510:
  1267  001598  FFFF               	dw	65535	; assembler added errata NOP
  1268                           
  1269                           ;main.c: 63:             if(errCode == 0){
  1270  00159A  0100               	movlb	0	; () banked
  1271  00159C  51FB               	movf	main@errCode& (0+255),w,b
  1272  00159E  A4D8               	btfss	status,2,c
  1273  0015A0  EFD4  F00A         	goto	u3741
  1274  0015A4  EFD7  F00A         	goto	u3740
  1275  0015A8                     u3741:
  1276  0015A8  FFFF               	dw	65535	; assembler added errata NOP
  1277  0015AA  EFF5  F00A         	goto	l4514
  1278  0015AE                     u3740:
  1279  0015AE  FFFF               	dw	65535	; assembler added errata NOP
  1280  0015B0                     
  1281                           ; BSR set to: 0
  1282                           ;main.c: 65:                 storeData(0);
  1283  0015B0  0E00               	movlw	0
  1284  0015B2  EC1B  F00B         	call	_storeData
  1285                           
  1286                           ;main.c: 66:                 storeData(0xFF);
  1287  0015B6  0EFF               	movlw	255
  1288  0015B8  EC1B  F00B         	call	_storeData
  1289                           
  1290                           ;main.c: 67:                 storeData(newData ->end_rot - newData ->init_rot);
  1291  0015BC  0100               	movlb	0	; () banked
  1292  0015BE  EE20 F004          	lfsr	2,4
  1293  0015C2  51FC               	movf	main@newData& (0+255),w,b
  1294  0015C4  26D9               	addwf	fsr2l,f,c
  1295  0015C6  51FD               	movf	(main@newData+1)& (0+255),w,b
  1296  0015C8  22DA               	addwfc	fsr2h,f,c
  1297  0015CA  50DF               	movf	indf2,w,c
  1298  0015CC  6FF9               	movwf	??_main& (0+255),b
  1299  0015CE  EE20 F007          	lfsr	2,7
  1300  0015D2  51FC               	movf	main@newData& (0+255),w,b
  1301  0015D4  26D9               	addwf	fsr2l,f,c
  1302  0015D6  51FD               	movf	(main@newData+1)& (0+255),w,b
  1303  0015D8  22DA               	addwfc	fsr2h,f,c
  1304  0015DA  50DF               	movf	indf2,w,c
  1305  0015DC  6FFA               	movwf	(??_main+1)& (0+255),b
  1306  0015DE  51F9               	movf	??_main& (0+255),w,b
  1307  0015E0  5DFA               	subwf	(??_main+1)& (0+255),w,b
  1308  0015E2  EC1B  F00B         	call	_storeData
  1309                           
  1310                           ;main.c: 68:             }else{
  1311  0015E6  EFF9  F00A         	goto	l4516
  1312  0015EA                     l4514:
  1313  0015EA  FFFF               	dw	65535	; assembler added errata NOP
  1314                           
  1315                           ; BSR set to: 0
  1316                           ;main.c: 69:                 printError(errCode);
  1317  0015EC  51FB               	movf	main@errCode& (0+255),w,b
  1318  0015EE  ECC2  F00D         	call	_printError
  1319  0015F2                     l4516:
  1320  0015F2  FFFF               	dw	65535	; assembler added errata NOP
  1321                           
  1322                           ;main.c: 73:             RCSTAbits.CREN = 1;
  1323  0015F4  88AB               	bsf	171,4,c	;volatile
  1324  0015F6                     
  1325                           ;main.c: 76:             resetNewSequence();
  1326  0015F6  EC83  F012         	call	_resetNewSequence	;wreg free
  1327  0015FA                     l4520:
  1328  0015FA  FFFF               	dw	65535	; assembler added errata NOP
  1329                           
  1330                           ;main.c: 78:         if(readSeq()){
  1331  0015FC  ECAF  F012         	call	_readSeq	;wreg free
  1332  001600  0900               	iorlw	0
  1333  001602  B4D8               	btfsc	status,2,c
  1334  001604  EF06  F00B         	goto	u3751
  1335  001608  EF09  F00B         	goto	u3750
  1336  00160C                     u3751:
  1337  00160C  FFFF               	dw	65535	; assembler added errata NOP
  1338  00160E  EF6F  F00A         	goto	l4492
  1339  001612                     u3750:
  1340  001612  FFFF               	dw	65535	; assembler added errata NOP
  1341  001614                     
  1342                           ;main.c: 82:             errCode = executeData();
  1343  001614  EC05  F007         	call	_executeData	;wreg free
  1344  001618  0100               	movlb	0	; () banked
  1345  00161A  6FFB               	movwf	main@errCode& (0+255),b
  1346  00161C                     
  1347                           ; BSR set to: 0
  1348                           ;main.c: 84:             printError(errCode);
  1349  00161C  51FB               	movf	main@errCode& (0+255),w,b
  1350  00161E  ECC2  F00D         	call	_printError
  1351  001622                     
  1352                           ;main.c: 87:             clearTM0();
  1353  001622  EC5C  F012         	call	_clearTM0	;wreg free
  1354  001626                     
  1355                           ;main.c: 91:             reduceSeq();
  1356  001626  ECAB  F012         	call	_reduceSeq	;wreg free
  1357  00162A                     
  1358                           ;main.c: 92:             shiftData();
  1359  00162A  ECF8  F010         	call	_shiftData	;wreg free
  1360  00162E  EF6F  F00A         	goto	l4492
  1361  001632  EFD2  F000         	goto	start
  1362  001636                     __end_of_main:
  1363                           	callstack 0
  1364                           
  1365 ;; *************** function _usartInit *****************
  1366 ;; Defined at:
  1367 ;;		line 92 in file "usart.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;		None
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;		None
  1372 ;; Return value:  Size  Location     Type
  1373 ;;                  1    wreg      void 
  1374 ;; Registers used:
  1375 ;;		wreg, status,2
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1381 ;;      Params:         0       0       0       0       0       0       0
  1382 ;;      Locals:         0       0       0       0       0       0       0
  1383 ;;      Temps:          0       0       0       0       0       0       0
  1384 ;;      Totals:         0       0       0       0       0       0       0
  1385 ;;Total ram usage:        0 bytes
  1386 ;; Hardware stack levels used:    1
  1387 ;; Hardware stack levels required when called:    4
  1388 ;; This function calls:
  1389 ;;		Nothing
  1390 ;; This function is called by:
  1391 ;;		_main
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           	psect	text1
  1396  002414                     __ptext1:
  1397                           	callstack 0
  1398  002414                     _usartInit:
  1399                           	callstack 0
  1400  002414  FFFF               	dw	65535	; assembler added errata NOP
  1401  002416                     
  1402                           ;usart.c: 94:     TRISCbits.TRISC6 = 0;
  1403  002416  9C94               	bcf	148,6,c	;volatile
  1404                           
  1405                           ;usart.c: 95:     TRISCbits.TRISC7 = 1;
  1406  002418  8E94               	bsf	148,7,c	;volatile
  1407                           
  1408                           ;usart.c: 97:     TXSTAbits.TX9 = 0;
  1409  00241A  9CAC               	bcf	172,6,c	;volatile
  1410                           
  1411                           ;usart.c: 98:     TXSTAbits.TXEN = 1;
  1412  00241C  8AAC               	bsf	172,5,c	;volatile
  1413                           
  1414                           ;usart.c: 99:     TXSTAbits.SYNC = 0;
  1415  00241E  98AC               	bcf	172,4,c	;volatile
  1416                           
  1417                           ;usart.c: 100:     TXSTAbits.BRGH = 0;
  1418  002420  94AC               	bcf	172,2,c	;volatile
  1419                           
  1420                           ;usart.c: 102:     RCSTAbits.SPEN = 1;
  1421  002422  8EAB               	bsf	171,7,c	;volatile
  1422                           
  1423                           ;usart.c: 103:     RCSTAbits.RX9 = 0;
  1424  002424  9CAB               	bcf	171,6,c	;volatile
  1425                           
  1426                           ;usart.c: 104:     RCSTAbits.CREN = 0;
  1427  002426  98AB               	bcf	171,4,c	;volatile
  1428                           
  1429                           ;usart.c: 105:     RCSTAbits.ADDEN = 0;
  1430  002428  96AB               	bcf	171,3,c	;volatile
  1431  00242A                     
  1432                           ;usart.c: 108:     SPBRG = 25;
  1433  00242A  0E19               	movlw	25
  1434  00242C  6EAF               	movwf	175,c	;volatile
  1435  00242E  0012               	return		;funcret
  1436  002430  FFFF               	dw	65535	; errata NOP
  1437  002432                     __end_of_usartInit:
  1438                           	callstack 0
  1439                           
  1440 ;; *************** function _tim2Init *****************
  1441 ;; Defined at:
  1442 ;;		line 46 in file "timer.c"
  1443 ;; Parameters:    Size  Location     Type
  1444 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1445 ;; Auto vars:     Size  Location     Type
  1446 ;;		None
  1447 ;; Return value:  Size  Location     Type
  1448 ;;                  1    wreg      void 
  1449 ;; Registers used:
  1450 ;;		wreg, status,2
  1451 ;; Tracked objects:
  1452 ;;		On entry : 0/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1456 ;;      Params:         2       0       0       0       0       0       0
  1457 ;;      Locals:         0       0       0       0       0       0       0
  1458 ;;      Temps:          0       0       0       0       0       0       0
  1459 ;;      Totals:         2       0       0       0       0       0       0
  1460 ;;Total ram usage:        2 bytes
  1461 ;; Hardware stack levels used:    1
  1462 ;; Hardware stack levels required when called:    4
  1463 ;; This function calls:
  1464 ;;		Nothing
  1465 ;; This function is called by:
  1466 ;;		_main
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           	psect	text2
  1471  002432                     __ptext2:
  1472                           	callstack 0
  1473  002432                     _tim2Init:
  1474                           	callstack 0
  1475  002432  FFFF               	dw	65535	; assembler added errata NOP
  1476  002434                     
  1477                           ;timer.c: 47:     T2CONbits.TMR2ON = 0;
  1478  002434  94CA               	bcf	202,2,c	;volatile
  1479  002436                     
  1480                           ;timer.c: 48:     T2CONbits.T2CKPS = 0x10;
  1481  002436  0EFC               	movlw	-4
  1482  002438  16CA               	andwf	202,f,c	;volatile
  1483  00243A                     
  1484                           ;timer.c: 51:     pwmPeriod = _pwmPeriod;
  1485  00243A  C012  F046         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1486  00243E  C013  F047         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1487  002442  0012               	return		;funcret
  1488  002444  FFFF               	dw	65535	; errata NOP
  1489  002446                     __end_of_tim2Init:
  1490                           	callstack 0
  1491                           
  1492 ;; *************** function _tim1Init *****************
  1493 ;; Defined at:
  1494 ;;		line 33 in file "timer.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;		None
  1497 ;; Auto vars:     Size  Location     Type
  1498 ;;		None
  1499 ;; Return value:  Size  Location     Type
  1500 ;;                  1    wreg      void 
  1501 ;; Registers used:
  1502 ;;		wreg, status,2
  1503 ;; Tracked objects:
  1504 ;;		On entry : 0/0
  1505 ;;		On exit  : 0/0
  1506 ;;		Unchanged: 0/0
  1507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1508 ;;      Params:         0       0       0       0       0       0       0
  1509 ;;      Locals:         0       0       0       0       0       0       0
  1510 ;;      Temps:          0       0       0       0       0       0       0
  1511 ;;      Totals:         0       0       0       0       0       0       0
  1512 ;;Total ram usage:        0 bytes
  1513 ;; Hardware stack levels used:    1
  1514 ;; Hardware stack levels required when called:    4
  1515 ;; This function calls:
  1516 ;;		Nothing
  1517 ;; This function is called by:
  1518 ;;		_main
  1519 ;; This function uses a non-reentrant model
  1520 ;;
  1521                           
  1522                           	psect	text3
  1523  00248E                     __ptext3:
  1524                           	callstack 0
  1525  00248E                     _tim1Init:
  1526                           	callstack 0
  1527  00248E  FFFF               	dw	65535	; assembler added errata NOP
  1528  002490                     
  1529                           ;timer.c: 34:     T1CONbits.T1CKPS = 0x03;
  1530  002490  0E30               	movlw	48
  1531  002492  12CD               	iorwf	205,f,c	;volatile
  1532  002494                     
  1533                           ;timer.c: 35:     T1CONbits.TMR1CS = 0;
  1534  002494  92CD               	bcf	205,1,c	;volatile
  1535  002496                     
  1536                           ;timer.c: 37:     T1CONbits.TMR1ON = 1;
  1537  002496  80CD               	bsf	205,0,c	;volatile
  1538  002498  0012               	return		;funcret
  1539  00249A  FFFF               	dw	65535	; errata NOP
  1540  00249C                     __end_of_tim1Init:
  1541                           	callstack 0
  1542                           
  1543 ;; *************** function _tim0Init *****************
  1544 ;; Defined at:
  1545 ;;		line 21 in file "timer.c"
  1546 ;; Parameters:    Size  Location     Type
  1547 ;;		None
  1548 ;; Auto vars:     Size  Location     Type
  1549 ;;		None
  1550 ;; Return value:  Size  Location     Type
  1551 ;;                  1    wreg      void 
  1552 ;; Registers used:
  1553 ;;		wreg, status,2
  1554 ;; Tracked objects:
  1555 ;;		On entry : 0/0
  1556 ;;		On exit  : 0/0
  1557 ;;		Unchanged: 0/0
  1558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1559 ;;      Params:         0       0       0       0       0       0       0
  1560 ;;      Locals:         0       0       0       0       0       0       0
  1561 ;;      Temps:          0       0       0       0       0       0       0
  1562 ;;      Totals:         0       0       0       0       0       0       0
  1563 ;;Total ram usage:        0 bytes
  1564 ;; Hardware stack levels used:    1
  1565 ;; Hardware stack levels required when called:    4
  1566 ;; This function calls:
  1567 ;;		Nothing
  1568 ;; This function is called by:
  1569 ;;		_main
  1570 ;; This function uses a non-reentrant model
  1571 ;;
  1572                           
  1573                           	psect	text4
  1574  00245A                     __ptext4:
  1575                           	callstack 0
  1576  00245A                     _tim0Init:
  1577                           	callstack 0
  1578  00245A  FFFF               	dw	65535	; assembler added errata NOP
  1579  00245C                     
  1580                           ;timer.c: 22:     T0CONbits.TMR0ON = 0;
  1581  00245C  9ED5               	bcf	213,7,c	;volatile
  1582                           
  1583                           ;timer.c: 23:     T0CONbits.T08BIT = 0;
  1584  00245E  9CD5               	bcf	213,6,c	;volatile
  1585                           
  1586                           ;timer.c: 24:     T0CONbits.T0CS = 0;
  1587  002460  9AD5               	bcf	213,5,c	;volatile
  1588                           
  1589                           ;timer.c: 25:     T0CONbits.PSA = 1;
  1590  002462  86D5               	bsf	213,3,c	;volatile
  1591  002464                     
  1592                           ;timer.c: 26:     T0CONbits.T0PS = 0x07;
  1593  002464  0E07               	movlw	7
  1594  002466  12D5               	iorwf	213,f,c	;volatile
  1595  002468  0012               	return		;funcret
  1596  00246A  FFFF               	dw	65535	; errata NOP
  1597  00246C                     __end_of_tim0Init:
  1598                           	callstack 0
  1599                           
  1600 ;; *************** function _storeData *****************
  1601 ;; Defined at:
  1602 ;;		line 164 in file "usart.c"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;  data            1    wreg     unsigned char 
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;  data            1   26[COMRAM] unsigned char 
  1607 ;; Return value:  Size  Location     Type
  1608 ;;                  1    wreg      void 
  1609 ;; Registers used:
  1610 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1611 ;; Tracked objects:
  1612 ;;		On entry : 0/0
  1613 ;;		On exit  : 0/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1616 ;;      Params:         0       0       0       0       0       0       0
  1617 ;;      Locals:         1       0       0       0       0       0       0
  1618 ;;      Temps:          2       0       0       0       0       0       0
  1619 ;;      Totals:         3       0       0       0       0       0       0
  1620 ;;Total ram usage:        3 bytes
  1621 ;; Hardware stack levels used:    1
  1622 ;; Hardware stack levels required when called:    6
  1623 ;; This function calls:
  1624 ;;		_printError
  1625 ;; This function is called by:
  1626 ;;		_main
  1627 ;; This function uses a non-reentrant model
  1628 ;;
  1629                           
  1630                           	psect	text5
  1631  001636                     __ptext5:
  1632                           	callstack 0
  1633  001636                     _storeData:
  1634                           	callstack 0
  1635  001636  FFFF               	dw	65535	; assembler added errata NOP
  1636                           
  1637                           ;incstack = 0
  1638                           ;storeData@data stored from wreg
  1639  001638  6E1B               	movwf	storeData@data^0,c
  1640  00163A                     
  1641                           ;usart.c: 166:     static unsigned char counter = 0;;usart.c: 167:     static unsigned c
      +                          har mexLength = 5;;usart.c: 168:     static unsigned char command;;usart.c: 169:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 173:     receivedMex[counter] = data;
  1642  00163A  0EC8               	movlw	low storeData@receivedMex
  1643  00163C  2455               	addwf	storeData@counter^0,w,c
  1644  00163E  6ED9               	movwf	fsr2l,c
  1645  001640  6ADA               	clrf	fsr2h,c
  1646  001642  0E00               	movlw	high storeData@receivedMex
  1647  001644  22DA               	addwfc	fsr2h,f,c
  1648  001646  C01B  FFDF         	movff	storeData@data,indf2
  1649  00164A                     
  1650                           ;usart.c: 175:     counter++;
  1651  00164A  2A55               	incf	storeData@counter^0,f,c
  1652                           
  1653                           ;usart.c: 178:     switch(receivedMex[0]){
  1654  00164C  EF37  F00B         	goto	l4344
  1655  001650                     l4336:
  1656  001650  FFFF               	dw	65535	; assembler added errata NOP
  1657                           
  1658                           ; BSR set to: 0
  1659                           ;usart.c: 180:             mexLength = 5;
  1660  001652  0E05               	movlw	5
  1661  001654  6E6C               	movwf	storeData@mexLength^0,c
  1662                           
  1663                           ;usart.c: 181:             break;
  1664  001656  EF53  F00B         	goto	l4346
  1665  00165A                     l4338:
  1666  00165A  FFFF               	dw	65535	; assembler added errata NOP
  1667                           
  1668                           ; BSR set to: 0
  1669                           ;usart.c: 183:             mexLength = 9;
  1670  00165C  0E09               	movlw	9
  1671  00165E  6E6C               	movwf	storeData@mexLength^0,c
  1672                           
  1673                           ;usart.c: 184:             break;
  1674  001660  EF53  F00B         	goto	l4346
  1675  001664                     l4340:
  1676  001664  FFFF               	dw	65535	; assembler added errata NOP
  1677                           
  1678                           ; BSR set to: 0
  1679                           ;usart.c: 186:             mexLength = 1;
  1680  001666  0E01               	movlw	1
  1681  001668  6E6C               	movwf	storeData@mexLength^0,c
  1682                           
  1683                           ;usart.c: 187:             break;
  1684  00166A  EF53  F00B         	goto	l4346
  1685  00166E                     l4344:
  1686  00166E  FFFF               	dw	65535	; assembler added errata NOP
  1687  001670  0100               	movlb	0	; () banked
  1688  001672  51C8               	movf	storeData@receivedMex& (0+255),w,b
  1689  001674  6E19               	movwf	??_storeData^0,c
  1690  001676  6A1A               	clrf	(??_storeData+1)^0,c
  1691                           
  1692                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1693                           ; Switch size 1, requested type "simple"
  1694                           ; Number of cases is 1, Range of values is 0 to 0
  1695                           ; switch strategies available:
  1696                           ; Name         Instructions Cycles
  1697                           ; simple_byte            4     3 (average)
  1698                           ;	Chosen strategy is simple_byte
  1699  001678  501A               	movf	(??_storeData+1)^0,w,c
  1700  00167A  0A00               	xorlw	0	; case 0
  1701  00167C  B4D8               	btfsc	status,2,c
  1702  00167E  EF43  F00B         	goto	l4712
  1703  001682  EF53  F00B         	goto	l4346
  1704  001686                     l4712:
  1705  001686  FFFF               	dw	65535	; assembler added errata NOP
  1706                           
  1707                           ; BSR set to: 0
  1708                           ; Switch size 1, requested type "simple"
  1709                           ; Number of cases is 3, Range of values is 0 to 2
  1710                           ; switch strategies available:
  1711                           ; Name         Instructions Cycles
  1712                           ; simple_byte           10     6 (average)
  1713                           ;	Chosen strategy is simple_byte
  1714  001688  5019               	movf	??_storeData^0,w,c
  1715  00168A  0A00               	xorlw	0	; case 0
  1716  00168C  B4D8               	btfsc	status,2,c
  1717  00168E  EF28  F00B         	goto	l4336
  1718  001692  0A01               	xorlw	1	; case 1
  1719  001694  B4D8               	btfsc	status,2,c
  1720  001696  EF2D  F00B         	goto	l4338
  1721  00169A  0A03               	xorlw	3	; case 2
  1722  00169C  B4D8               	btfsc	status,2,c
  1723  00169E  EF32  F00B         	goto	l4340
  1724  0016A2  EF53  F00B         	goto	l4346
  1725  0016A6                     l4346:
  1726  0016A6  FFFF               	dw	65535	; assembler added errata NOP
  1727                           
  1728                           ; BSR set to: 0
  1729                           ;usart.c: 194:     if(counter >= mexLength){
  1730  0016A8  506C               	movf	storeData@mexLength^0,w,c
  1731  0016AA  5C55               	subwf	storeData@counter^0,w,c
  1732  0016AC  A0D8               	btfss	status,0,c
  1733  0016AE  EF5B  F00B         	goto	u3661
  1734  0016B2  EF5E  F00B         	goto	u3660
  1735  0016B6                     u3661:
  1736  0016B6  FFFF               	dw	65535	; assembler added errata NOP
  1737  0016B8  EFD6  F00B         	goto	l583
  1738  0016BC                     u3660:
  1739  0016BC  FFFF               	dw	65535	; assembler added errata NOP
  1740  0016BE                     
  1741                           ; BSR set to: 0
  1742                           ;usart.c: 195:         counter = 0;
  1743  0016BE  0E00               	movlw	0
  1744  0016C0  6E55               	movwf	storeData@counter^0,c
  1745                           
  1746                           ;usart.c: 198:         switch(receivedMex[0]){
  1747  0016C2  EFBB  F00B         	goto	l4368
  1748  0016C6                     l4350:
  1749  0016C6  FFFF               	dw	65535	; assembler added errata NOP
  1750                           
  1751                           ; BSR set to: 0
  1752                           ;usart.c: 200:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  1753  0016C8  5058               	movf	_dataCounter^0,w,c
  1754  0016CA  0D04               	mullw	4
  1755  0016CC  0ED1               	movlw	low _dataSequence
  1756  0016CE  24F3               	addwf	243,w,c
  1757  0016D0  6ED9               	movwf	fsr2l,c
  1758  0016D2  0E00               	movlw	high _dataSequence
  1759  0016D4  20F4               	addwfc	prodh,w,c
  1760  0016D6  6EDA               	movwf	fsr2h,c
  1761  0016D8  C0C9  FFDF         	movff	storeData@receivedMex+1,indf2
  1762                           
  1763                           ;usart.c: 201:                 dataSequence[dataCounter].posX = receivedMex[2] * 10;
  1764  0016DC  5058               	movf	_dataCounter^0,w,c
  1765  0016DE  0D04               	mullw	4
  1766  0016E0  0ED2               	movlw	low (_dataSequence+1)
  1767  0016E2  24F3               	addwf	243,w,c
  1768  0016E4  6ED9               	movwf	fsr2l,c
  1769  0016E6  0E00               	movlw	high (_dataSequence+1)
  1770  0016E8  20F4               	addwfc	prodh,w,c
  1771  0016EA  6EDA               	movwf	fsr2h,c
  1772  0016EC  51CA               	movf	(storeData@receivedMex+2)& (0+255),w,b
  1773  0016EE  0D0A               	mullw	10
  1774  0016F0  CFF3 FFDF          	movff	prodl,indf2
  1775                           
  1776                           ;usart.c: 202:                 dataSequence[dataCounter].posY = receivedMex[3] * 10;
  1777  0016F4  5058               	movf	_dataCounter^0,w,c
  1778  0016F6  0D04               	mullw	4
  1779  0016F8  0ED3               	movlw	low (_dataSequence+2)
  1780  0016FA  24F3               	addwf	243,w,c
  1781  0016FC  6ED9               	movwf	fsr2l,c
  1782  0016FE  0E00               	movlw	high (_dataSequence+2)
  1783  001700  20F4               	addwfc	prodh,w,c
  1784  001702  6EDA               	movwf	fsr2h,c
  1785  001704  51CB               	movf	(storeData@receivedMex+3)& (0+255),w,b
  1786  001706  0D0A               	mullw	10
  1787  001708  CFF3 FFDF          	movff	prodl,indf2
  1788                           
  1789                           ;usart.c: 203:                 dataSequence[dataCounter].rotation = receivedMex[4];
  1790  00170C  5058               	movf	_dataCounter^0,w,c
  1791  00170E  0D04               	mullw	4
  1792  001710  0ED4               	movlw	low (_dataSequence+3)
  1793  001712  24F3               	addwf	243,w,c
  1794  001714  6ED9               	movwf	fsr2l,c
  1795  001716  0E00               	movlw	high (_dataSequence+3)
  1796  001718  20F4               	addwfc	prodh,w,c
  1797  00171A  6EDA               	movwf	fsr2h,c
  1798  00171C  C0CC  FFDF         	movff	storeData@receivedMex+4,indf2
  1799  001720                     
  1800                           ; BSR set to: 0
  1801                           ;usart.c: 205:                 dataCounter++;
  1802  001720  2A58               	incf	_dataCounter^0,f,c
  1803                           
  1804                           ;usart.c: 206:                 break;
  1805  001722  EFD6  F00B         	goto	l583
  1806  001726                     l580:
  1807  001726  FFFF               	dw	65535	; assembler added errata NOP
  1808                           
  1809                           ; BSR set to: 0
  1810                           ;usart.c: 209:                 newSequenceData.L = receivedMex[1];
  1811  001728  C0C9  F0E5         	movff	storeData@receivedMex+1,_newSequenceData
  1812                           
  1813                           ;usart.c: 210:                 newSequenceData.W = receivedMex[2];
  1814  00172C  C0CA  F0E6         	movff	storeData@receivedMex+2,_newSequenceData+1
  1815  001730                     
  1816                           ; BSR set to: 0
  1817                           ;usart.c: 211:                 newSequenceData.init_posX = receivedMex[3] * 10;
  1818  001730  51CB               	movf	(storeData@receivedMex+3)& (0+255),w,b
  1819  001732  0D0A               	mullw	10
  1820  001734  CFF3 F0E7          	movff	prodl,_newSequenceData+2
  1821                           
  1822                           ;usart.c: 212:                 newSequenceData.init_posY = receivedMex[4] * 10;
  1823  001738  51CC               	movf	(storeData@receivedMex+4)& (0+255),w,b
  1824  00173A  0D0A               	mullw	10
  1825  00173C  CFF3 F0E8          	movff	prodl,_newSequenceData+3
  1826  001740                     
  1827                           ; BSR set to: 0
  1828                           ;usart.c: 213:                 newSequenceData.init_rot = receivedMex[5];
  1829  001740  C0CD  F0E9         	movff	storeData@receivedMex+5,_newSequenceData+4
  1830                           
  1831                           ;usart.c: 214:                 newSequenceData.end_posX = receivedMex[6] * 10;
  1832  001744  51CE               	movf	(storeData@receivedMex+6)& (0+255),w,b
  1833  001746  0D0A               	mullw	10
  1834  001748  CFF3 F0EA          	movff	prodl,_newSequenceData+5
  1835                           
  1836                           ;usart.c: 215:                 newSequenceData.end_posY = receivedMex[7] * 10;
  1837  00174C  51CF               	movf	(storeData@receivedMex+7)& (0+255),w,b
  1838  00174E  0D0A               	mullw	10
  1839  001750  CFF3 F0EB          	movff	prodl,_newSequenceData+6
  1840  001754                     
  1841                           ; BSR set to: 0
  1842                           ;usart.c: 216:                 newSequenceData.end_rot = receivedMex[8];
  1843  001754  C0D0  F0EC         	movff	storeData@receivedMex+8,_newSequenceData+7
  1844  001758                     
  1845                           ; BSR set to: 0
  1846                           ;usart.c: 218:                 _newSequence = 1;
  1847  001758  0E01               	movlw	1
  1848  00175A  6E56               	movwf	__newSequence^0,c
  1849                           
  1850                           ;usart.c: 219:                 break;
  1851  00175C  EFD6  F00B         	goto	l583
  1852  001760                     l4362:
  1853  001760  FFFF               	dw	65535	; assembler added errata NOP
  1854                           
  1855                           ; BSR set to: 0
  1856                           ;usart.c: 222:                 _fatalError = 1;
  1857  001762  0E01               	movlw	1
  1858  001764  6E57               	movwf	__fatalError^0,c
  1859                           
  1860                           ;usart.c: 223:                 break;
  1861  001766  EFD6  F00B         	goto	l583
  1862  00176A                     l4364:
  1863  00176A  FFFF               	dw	65535	; assembler added errata NOP
  1864                           
  1865                           ; BSR set to: 0
  1866                           ;usart.c: 226:                 printError(8);
  1867  00176C  0E08               	movlw	8
  1868  00176E  ECC2  F00D         	call	_printError
  1869                           
  1870                           ;usart.c: 227:                 break;
  1871  001772  EFD6  F00B         	goto	l583
  1872  001776                     l4368:
  1873  001776  FFFF               	dw	65535	; assembler added errata NOP
  1874                           
  1875                           ; BSR set to: 0
  1876  001778  51C8               	movf	storeData@receivedMex& (0+255),w,b
  1877  00177A  6E19               	movwf	??_storeData^0,c
  1878  00177C  6A1A               	clrf	(??_storeData+1)^0,c
  1879                           
  1880                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1881                           ; Switch size 1, requested type "simple"
  1882                           ; Number of cases is 1, Range of values is 0 to 0
  1883                           ; switch strategies available:
  1884                           ; Name         Instructions Cycles
  1885                           ; simple_byte            4     3 (average)
  1886                           ;	Chosen strategy is simple_byte
  1887  00177E  501A               	movf	(??_storeData+1)^0,w,c
  1888  001780  0A00               	xorlw	0	; case 0
  1889  001782  B4D8               	btfsc	status,2,c
  1890  001784  EFC6  F00B         	goto	l4714
  1891  001788  EFB5  F00B         	goto	l4364
  1892  00178C                     l4714:
  1893  00178C  FFFF               	dw	65535	; assembler added errata NOP
  1894                           
  1895                           ; BSR set to: 0
  1896                           ; Switch size 1, requested type "simple"
  1897                           ; Number of cases is 3, Range of values is 0 to 2
  1898                           ; switch strategies available:
  1899                           ; Name         Instructions Cycles
  1900                           ; simple_byte           10     6 (average)
  1901                           ;	Chosen strategy is simple_byte
  1902  00178E  5019               	movf	??_storeData^0,w,c
  1903  001790  0A00               	xorlw	0	; case 0
  1904  001792  B4D8               	btfsc	status,2,c
  1905  001794  EF63  F00B         	goto	l4350
  1906  001798  0A01               	xorlw	1	; case 1
  1907  00179A  B4D8               	btfsc	status,2,c
  1908  00179C  EF93  F00B         	goto	l580
  1909  0017A0  0A03               	xorlw	3	; case 2
  1910  0017A2  B4D8               	btfsc	status,2,c
  1911  0017A4  EFB0  F00B         	goto	l4362
  1912  0017A8  EFB5  F00B         	goto	l4364
  1913  0017AC                     l583:
  1914  0017AC  FFFF               	dw	65535	; assembler added errata NOP
  1915  0017AE  0012               	return		;funcret
  1916  0017B0  FFFF               	dw	65535	; errata NOP
  1917  0017B2                     __end_of_storeData:
  1918                           	callstack 0
  1919                           
  1920 ;; *************** function _printError *****************
  1921 ;; Defined at:
  1922 ;;		line 111 in file "usart.c"
  1923 ;; Parameters:    Size  Location     Type
  1924 ;;  errCode         1    wreg     unsigned char 
  1925 ;; Auto vars:     Size  Location     Type
  1926 ;;  errCode         1   23[COMRAM] unsigned char 
  1927 ;; Return value:  Size  Location     Type
  1928 ;;                  1    wreg      void 
  1929 ;; Registers used:
  1930 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1931 ;; Tracked objects:
  1932 ;;		On entry : 0/0
  1933 ;;		On exit  : 0/0
  1934 ;;		Unchanged: 0/0
  1935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1936 ;;      Params:         0       0       0       0       0       0       0
  1937 ;;      Locals:         1       0       0       0       0       0       0
  1938 ;;      Temps:          2       0       0       0       0       0       0
  1939 ;;      Totals:         3       0       0       0       0       0       0
  1940 ;;Total ram usage:        3 bytes
  1941 ;; Hardware stack levels used:    1
  1942 ;; Hardware stack levels required when called:    5
  1943 ;; This function calls:
  1944 ;;		_uartTx
  1945 ;; This function is called by:
  1946 ;;		_main
  1947 ;;		_storeData
  1948 ;; This function uses a non-reentrant model
  1949 ;;
  1950                           
  1951                           	psect	text6
  1952  001B84                     __ptext6:
  1953                           	callstack 0
  1954  001B84                     _printError:
  1955                           	callstack 0
  1956  001B84  FFFF               	dw	65535	; assembler added errata NOP
  1957                           
  1958                           ;incstack = 0
  1959                           ;printError@errCode stored from wreg
  1960  001B86  6E18               	movwf	printError@errCode^0,c
  1961  001B88                     
  1962                           ;usart.c: 113:     switch(errCode){
  1963  001B88  EF1E  F00E         	goto	l4186
  1964  001B8C                     l4168:
  1965  001B8C  FFFF               	dw	65535	; assembler added errata NOP
  1966                           
  1967                           ;usart.c: 115:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  1968  001B8E  0E92               	movlw	low _errString_Feed
  1969  001B90  6E12               	movwf	uartTx@ptr^0,c
  1970  001B92  0E00               	movlw	high _errString_Feed
  1971  001B94  6E13               	movwf	(uartTx@ptr+1)^0,c
  1972  001B96  0E1E               	movlw	30
  1973  001B98  6E14               	movwf	uartTx@length^0,c
  1974  001B9A  EC28  F011         	call	_uartTx	;wreg free
  1975                           
  1976                           ;usart.c: 116:             break;
  1977  001B9E  EF4D  F00E         	goto	l550
  1978  001BA2                     l4170:
  1979  001BA2  FFFF               	dw	65535	; assembler added errata NOP
  1980                           
  1981                           ;usart.c: 118:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  1982  001BA4  0E5E               	movlw	low _errString_ZEND
  1983  001BA6  6E12               	movwf	uartTx@ptr^0,c
  1984  001BA8  0E01               	movlw	high _errString_ZEND
  1985  001BAA  6E13               	movwf	(uartTx@ptr+1)^0,c
  1986  001BAC  0E29               	movlw	41
  1987  001BAE  6E14               	movwf	uartTx@length^0,c
  1988  001BB0  EC28  F011         	call	_uartTx	;wreg free
  1989                           
  1990                           ;usart.c: 119:             break;
  1991  001BB4  EF4D  F00E         	goto	l550
  1992  001BB8                     l4172:
  1993  001BB8  FFFF               	dw	65535	; assembler added errata NOP
  1994                           
  1995                           ;usart.c: 121:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  1996  001BBA  0E87               	movlw	low _errString_Reset
  1997  001BBC  6E12               	movwf	uartTx@ptr^0,c
  1998  001BBE  0E01               	movlw	high _errString_Reset
  1999  001BC0  6E13               	movwf	(uartTx@ptr+1)^0,c
  2000  001BC2  0E28               	movlw	40
  2001  001BC4  6E14               	movwf	uartTx@length^0,c
  2002  001BC6  EC28  F011         	call	_uartTx	;wreg free
  2003                           
  2004                           ;usart.c: 122:             break;
  2005  001BCA  EF4D  F00E         	goto	l550
  2006  001BCE                     l4174:
  2007  001BCE  FFFF               	dw	65535	; assembler added errata NOP
  2008                           
  2009                           ;usart.c: 124:             uartTx(&errString_Point[0], sizeof(errString_Point));
  2010  001BD0  0E35               	movlw	low _errString_Point
  2011  001BD2  6E12               	movwf	uartTx@ptr^0,c
  2012  001BD4  0E01               	movlw	high _errString_Point
  2013  001BD6  6E13               	movwf	(uartTx@ptr+1)^0,c
  2014  001BD8  0E29               	movlw	41
  2015  001BDA  6E14               	movwf	uartTx@length^0,c
  2016  001BDC  EC28  F011         	call	_uartTx	;wreg free
  2017                           
  2018                           ;usart.c: 125:             break;
  2019  001BE0  EF4D  F00E         	goto	l550
  2020  001BE4                     l4176:
  2021  001BE4  FFFF               	dw	65535	; assembler added errata NOP
  2022                           
  2023                           ;usart.c: 127:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  2024  001BE6  0ED6               	movlw	low _errString_Bound
  2025  001BE8  6E12               	movwf	uartTx@ptr^0,c
  2026  001BEA  0E01               	movlw	high _errString_Bound
  2027  001BEC  6E13               	movwf	(uartTx@ptr+1)^0,c
  2028  001BEE  0E21               	movlw	33
  2029  001BF0  6E14               	movwf	uartTx@length^0,c
  2030  001BF2  EC28  F011         	call	_uartTx	;wreg free
  2031                           
  2032                           ;usart.c: 128:             break;
  2033  001BF6  EF4D  F00E         	goto	l550
  2034  001BFA                     l4178:
  2035  001BFA  FFFF               	dw	65535	; assembler added errata NOP
  2036                           
  2037                           ;usart.c: 130:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  2038  001BFC  0E00               	movlw	low _errString_PointZ
  2039  001BFE  6E12               	movwf	uartTx@ptr^0,c
  2040  001C00  0E01               	movlw	high _errString_PointZ
  2041  001C02  6E13               	movwf	(uartTx@ptr+1)^0,c
  2042  001C04  0E35               	movlw	53
  2043  001C06  6E14               	movwf	uartTx@length^0,c
  2044  001C08  EC28  F011         	call	_uartTx	;wreg free
  2045                           
  2046                           ;usart.c: 131:             break;
  2047  001C0C  EF4D  F00E         	goto	l550
  2048  001C10                     l4180:
  2049  001C10  FFFF               	dw	65535	; assembler added errata NOP
  2050                           
  2051                           ;usart.c: 133:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  2052  001C12  0EAF               	movlw	low _errString_Fatal
  2053  001C14  6E12               	movwf	uartTx@ptr^0,c
  2054  001C16  0E01               	movlw	high _errString_Fatal
  2055  001C18  6E13               	movwf	(uartTx@ptr+1)^0,c
  2056  001C1A  0E27               	movlw	39
  2057  001C1C  6E14               	movwf	uartTx@length^0,c
  2058  001C1E  EC28  F011         	call	_uartTx	;wreg free
  2059                           
  2060                           ;usart.c: 134:             break;
  2061  001C22  EF4D  F00E         	goto	l550
  2062  001C26                     l4182:
  2063  001C26  FFFF               	dw	65535	; assembler added errata NOP
  2064                           
  2065                           ;usart.c: 136:             uartTx(&errString_Command[0], sizeof(errString_Command));
  2066  001C28  0EB0               	movlw	low _errString_Command
  2067  001C2A  6E12               	movwf	uartTx@ptr^0,c
  2068  001C2C  0E00               	movlw	high _errString_Command
  2069  001C2E  6E13               	movwf	(uartTx@ptr+1)^0,c
  2070  001C30  0E18               	movlw	24
  2071  001C32  6E14               	movwf	uartTx@length^0,c
  2072  001C34  EC28  F011         	call	_uartTx	;wreg free
  2073                           
  2074                           ;usart.c: 137:             break;
  2075  001C38  EF4D  F00E         	goto	l550
  2076  001C3C                     l4186:
  2077  001C3C  FFFF               	dw	65535	; assembler added errata NOP
  2078  001C3E  5018               	movf	printError@errCode^0,w,c
  2079  001C40  6E16               	movwf	??_printError^0,c
  2080  001C42  6A17               	clrf	(??_printError+1)^0,c
  2081                           
  2082                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2083                           ; Switch size 1, requested type "simple"
  2084                           ; Number of cases is 1, Range of values is 0 to 0
  2085                           ; switch strategies available:
  2086                           ; Name         Instructions Cycles
  2087                           ; simple_byte            4     3 (average)
  2088                           ;	Chosen strategy is simple_byte
  2089  001C44  5017               	movf	(??_printError+1)^0,w,c
  2090  001C46  0A00               	xorlw	0	; case 0
  2091  001C48  B4D8               	btfsc	status,2,c
  2092  001C4A  EF29  F00E         	goto	l4716
  2093  001C4E  EF4D  F00E         	goto	l550
  2094  001C52                     l4716:
  2095  001C52  FFFF               	dw	65535	; assembler added errata NOP
  2096                           
  2097                           ; Switch size 1, requested type "simple"
  2098                           ; Number of cases is 8, Range of values is 1 to 8
  2099                           ; switch strategies available:
  2100                           ; Name         Instructions Cycles
  2101                           ; simple_byte           25    13 (average)
  2102                           ;	Chosen strategy is simple_byte
  2103  001C54  5016               	movf	??_printError^0,w,c
  2104  001C56  0A01               	xorlw	1	; case 1
  2105  001C58  B4D8               	btfsc	status,2,c
  2106  001C5A  EFC6  F00D         	goto	l4168
  2107  001C5E  0A03               	xorlw	3	; case 2
  2108  001C60  B4D8               	btfsc	status,2,c
  2109  001C62  EFD1  F00D         	goto	l4170
  2110  001C66  0A01               	xorlw	1	; case 3
  2111  001C68  B4D8               	btfsc	status,2,c
  2112  001C6A  EFDC  F00D         	goto	l4172
  2113  001C6E  0A07               	xorlw	7	; case 4
  2114  001C70  B4D8               	btfsc	status,2,c
  2115  001C72  EFE7  F00D         	goto	l4174
  2116  001C76  0A01               	xorlw	1	; case 5
  2117  001C78  B4D8               	btfsc	status,2,c
  2118  001C7A  EFF2  F00D         	goto	l4176
  2119  001C7E  0A03               	xorlw	3	; case 6
  2120  001C80  B4D8               	btfsc	status,2,c
  2121  001C82  EFFD  F00D         	goto	l4178
  2122  001C86  0A01               	xorlw	1	; case 7
  2123  001C88  B4D8               	btfsc	status,2,c
  2124  001C8A  EF08  F00E         	goto	l4180
  2125  001C8E  0A0F               	xorlw	15	; case 8
  2126  001C90  B4D8               	btfsc	status,2,c
  2127  001C92  EF13  F00E         	goto	l4182
  2128  001C96  EF4D  F00E         	goto	l550
  2129  001C9A                     l550:
  2130  001C9A  FFFF               	dw	65535	; assembler added errata NOP
  2131  001C9C  0012               	return		;funcret
  2132  001C9E  FFFF               	dw	65535	; errata NOP
  2133  001CA0                     __end_of_printError:
  2134                           	callstack 0
  2135                           
  2136 ;; *************** function _uartTx *****************
  2137 ;; Defined at:
  2138 ;;		line 148 in file "usart.c"
  2139 ;; Parameters:    Size  Location     Type
  2140 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  2141 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  2142 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  2143 ;;  length          1   19[COMRAM] unsigned char 
  2144 ;; Auto vars:     Size  Location     Type
  2145 ;;  i               1   20[COMRAM] unsigned char 
  2146 ;; Return value:  Size  Location     Type
  2147 ;;                  1    wreg      void 
  2148 ;; Registers used:
  2149 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2150 ;; Tracked objects:
  2151 ;;		On entry : 0/0
  2152 ;;		On exit  : 0/0
  2153 ;;		Unchanged: 0/0
  2154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2155 ;;      Params:         3       0       0       0       0       0       0
  2156 ;;      Locals:         1       0       0       0       0       0       0
  2157 ;;      Temps:          0       0       0       0       0       0       0
  2158 ;;      Totals:         4       0       0       0       0       0       0
  2159 ;;Total ram usage:        4 bytes
  2160 ;; Hardware stack levels used:    1
  2161 ;; Hardware stack levels required when called:    4
  2162 ;; This function calls:
  2163 ;;		Nothing
  2164 ;; This function is called by:
  2165 ;;		_printError
  2166 ;; This function uses a non-reentrant model
  2167 ;;
  2168                           
  2169                           	psect	text7
  2170  002250                     __ptext7:
  2171                           	callstack 0
  2172  002250                     _uartTx:
  2173                           	callstack 0
  2174  002250  FFFF               	dw	65535	; assembler added errata NOP
  2175  002252                     
  2176                           ;usart.c: 148: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 149: {;usa
      +                          rt.c: 151:     for(char i = 1; i < length; i++){
  2177  002252  0E01               	movlw	1
  2178  002254  6E15               	movwf	uartTx@i^0,c
  2179  002256  EF41  F011         	goto	l3678
  2180  00225A                     l3674:
  2181  00225A  FFFF               	dw	65535	; assembler added errata NOP
  2182                           
  2183                           ;usart.c: 153:         TXREG = *ptr;
  2184  00225C  C012  FFD9         	movff	uartTx@ptr,fsr2l
  2185  002260  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  2186  002264  50DF               	movf	indf2,w,c
  2187  002266  6EAD               	movwf	173,c	;volatile
  2188  002268                     l555:
  2189  002268  FFFF               	dw	65535	; assembler added errata NOP
  2190  00226A  A2AC               	btfss	172,1,c	;volatile
  2191  00226C  EF3A  F011         	goto	u2641
  2192  002270  EF3D  F011         	goto	u2640
  2193  002274                     u2641:
  2194  002274  FFFF               	dw	65535	; assembler added errata NOP
  2195  002276  EF34  F011         	goto	l555
  2196  00227A                     u2640:
  2197  00227A  FFFF               	dw	65535	; assembler added errata NOP
  2198  00227C                     
  2199                           ;usart.c: 157:         ptr++;
  2200  00227C  4A12               	infsnz	uartTx@ptr^0,f,c
  2201  00227E  2A13               	incf	(uartTx@ptr+1)^0,f,c
  2202                           
  2203                           ;usart.c: 158:     }
  2204  002280  2A15               	incf	uartTx@i^0,f,c
  2205  002282                     l3678:
  2206  002282  FFFF               	dw	65535	; assembler added errata NOP
  2207  002284  5014               	movf	uartTx@length^0,w,c
  2208  002286  5C15               	subwf	uartTx@i^0,w,c
  2209  002288  A0D8               	btfss	status,0,c
  2210  00228A  EF49  F011         	goto	u2651
  2211  00228E  EF4C  F011         	goto	u2650
  2212  002292                     u2651:
  2213  002292  FFFF               	dw	65535	; assembler added errata NOP
  2214  002294  EF2D  F011         	goto	l3674
  2215  002298                     u2650:
  2216  002298  FFFF               	dw	65535	; assembler added errata NOP
  2217  00229A  0012               	return		;funcret
  2218  00229C  FFFF               	dw	65535	; errata NOP
  2219  00229E                     __end_of_uartTx:
  2220                           	callstack 0
  2221                           
  2222 ;; *************** function _shiftData *****************
  2223 ;; Defined at:
  2224 ;;		line 81 in file "usart.c"
  2225 ;; Parameters:    Size  Location     Type
  2226 ;;		None
  2227 ;; Auto vars:     Size  Location     Type
  2228 ;;  i               1   19[COMRAM] unsigned char 
  2229 ;; Return value:  Size  Location     Type
  2230 ;;                  1    wreg      void 
  2231 ;; Registers used:
  2232 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2233 ;; Tracked objects:
  2234 ;;		On entry : 0/0
  2235 ;;		On exit  : 0/0
  2236 ;;		Unchanged: 0/0
  2237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2238 ;;      Params:         0       0       0       0       0       0       0
  2239 ;;      Locals:         1       0       0       0       0       0       0
  2240 ;;      Temps:          2       0       0       0       0       0       0
  2241 ;;      Totals:         3       0       0       0       0       0       0
  2242 ;;Total ram usage:        3 bytes
  2243 ;; Hardware stack levels used:    1
  2244 ;; Hardware stack levels required when called:    4
  2245 ;; This function calls:
  2246 ;;		Nothing
  2247 ;; This function is called by:
  2248 ;;		_main
  2249 ;; This function uses a non-reentrant model
  2250 ;;
  2251                           
  2252                           	psect	text8
  2253  0021F0                     __ptext8:
  2254                           	callstack 0
  2255  0021F0                     _shiftData:
  2256                           	callstack 0
  2257  0021F0  FFFF               	dw	65535	; assembler added errata NOP
  2258  0021F2                     
  2259                           ;usart.c: 82:     char i;;usart.c: 84:     for(i = 0; i < 4; i++){
  2260  0021F2  0E00               	movlw	0
  2261  0021F4  6E14               	movwf	shiftData@i^0,c
  2262  0021F6                     l4464:
  2263  0021F6  FFFF               	dw	65535	; assembler added errata NOP
  2264                           
  2265                           ;usart.c: 85:         dataSequence[i] = dataSequence[i+1];
  2266  0021F8  5014               	movf	shiftData@i^0,w,c
  2267  0021FA  6E12               	movwf	??_shiftData^0,c
  2268  0021FC  6A13               	clrf	(??_shiftData+1)^0,c
  2269  0021FE  90D8               	bcf	status,0,c
  2270  002200  3612               	rlcf	??_shiftData^0,f,c
  2271  002202  3613               	rlcf	(??_shiftData+1)^0,f,c
  2272  002204  90D8               	bcf	status,0,c
  2273  002206  3612               	rlcf	??_shiftData^0,f,c
  2274  002208  3613               	rlcf	(??_shiftData+1)^0,f,c
  2275  00220A  0ED5               	movlw	low (_dataSequence+4)
  2276  00220C  2412               	addwf	??_shiftData^0,w,c
  2277  00220E  6ED9               	movwf	fsr2l,c
  2278  002210  0E00               	movlw	high (_dataSequence+4)
  2279  002212  2013               	addwfc	(??_shiftData+1)^0,w,c
  2280  002214  6EDA               	movwf	fsr2h,c
  2281  002216  5014               	movf	shiftData@i^0,w,c
  2282  002218  0D04               	mullw	4
  2283  00221A  0ED1               	movlw	low _dataSequence
  2284  00221C  24F3               	addwf	243,w,c
  2285  00221E  6EE1               	movwf	fsr1l,c
  2286  002220  0E00               	movlw	high _dataSequence
  2287  002222  20F4               	addwfc	prodh,w,c
  2288  002224  6EE2               	movwf	fsr1h,c
  2289  002226  CFDE FFE6          	movff	postinc2,postinc1
  2290  00222A  CFDE FFE6          	movff	postinc2,postinc1
  2291  00222E  CFDE FFE6          	movff	postinc2,postinc1
  2292  002232  CFDE FFE6          	movff	postinc2,postinc1
  2293  002236                     
  2294                           ;usart.c: 86:     }
  2295  002236  2A14               	incf	shiftData@i^0,f,c
  2296  002238  0E03               	movlw	3
  2297  00223A  6414               	cpfsgt	shiftData@i^0,c
  2298  00223C  EF22  F011         	goto	u3691
  2299  002240  EF25  F011         	goto	u3690
  2300  002244                     u3691:
  2301  002244  FFFF               	dw	65535	; assembler added errata NOP
  2302  002246  EFFB  F010         	goto	l4464
  2303  00224A                     u3690:
  2304  00224A  FFFF               	dw	65535	; assembler added errata NOP
  2305  00224C  0012               	return		;funcret
  2306  00224E  FFFF               	dw	65535	; errata NOP
  2307  002250                     __end_of_shiftData:
  2308                           	callstack 0
  2309                           
  2310 ;; *************** function _resetPosition *****************
  2311 ;; Defined at:
  2312 ;;		line 165 in file "motors.c"
  2313 ;; Parameters:    Size  Location     Type
  2314 ;;		None
  2315 ;; Auto vars:     Size  Location     Type
  2316 ;;  keepMovingZ     1   22[COMRAM] unsigned char 
  2317 ;;  keepMovingY     1   21[COMRAM] unsigned char 
  2318 ;;  keepMovingX     1   20[COMRAM] unsigned char 
  2319 ;; Return value:  Size  Location     Type
  2320 ;;                  1    wreg      unsigned char 
  2321 ;; Registers used:
  2322 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2323 ;; Tracked objects:
  2324 ;;		On entry : 0/0
  2325 ;;		On exit  : 0/0
  2326 ;;		Unchanged: 0/0
  2327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2328 ;;      Params:         0       0       0       0       0       0       0
  2329 ;;      Locals:         3       0       0       0       0       0       0
  2330 ;;      Temps:          0       0       0       0       0       0       0
  2331 ;;      Totals:         3       0       0       0       0       0       0
  2332 ;;Total ram usage:        3 bytes
  2333 ;; Hardware stack levels used:    1
  2334 ;; Hardware stack levels required when called:    5
  2335 ;; This function calls:
  2336 ;;		_resetStep
  2337 ;;		_stepMade
  2338 ;; This function is called by:
  2339 ;;		_main
  2340 ;; This function uses a non-reentrant model
  2341 ;;
  2342                           
  2343                           	psect	text9
  2344  001092                     __ptext9:
  2345                           	callstack 0
  2346  001092                     _resetPosition:
  2347                           	callstack 0
  2348  001092  FFFF               	dw	65535	; assembler added errata NOP
  2349  001094                     
  2350                           ;motors.c: 185:     motCounter[0][1] = -1;
  2351  001094  6860               	setf	(_motCounter+2)^0,c
  2352  001096  6861               	setf	(_motCounter+3)^0,c
  2353                           
  2354                           ;motors.c: 186:     motCounter[1][1] = -1;
  2355  001098  6864               	setf	(_motCounter+6)^0,c
  2356  00109A  6865               	setf	(_motCounter+7)^0,c
  2357                           
  2358                           ;motors.c: 187:     motCounter[2][1] = -1;
  2359  00109C  6868               	setf	(_motCounter+10)^0,c
  2360  00109E  6869               	setf	(_motCounter+11)^0,c
  2361  0010A0                     
  2362                           ;motors.c: 192:     unsigned char keepMovingX = 1;
  2363  0010A0  0E01               	movlw	1
  2364  0010A2  6E15               	movwf	resetPosition@keepMovingX^0,c
  2365                           
  2366                           ;motors.c: 193:     unsigned char keepMovingY = 1;
  2367  0010A4  0E01               	movlw	1
  2368  0010A6  6E16               	movwf	resetPosition@keepMovingY^0,c
  2369                           
  2370                           ;motors.c: 194:     unsigned char keepMovingZ = 1;
  2371  0010A8  0E01               	movlw	1
  2372  0010AA  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2373  0010AC                     
  2374                           ;motors.c: 197:     T2CONbits.TMR2ON = 1;
  2375  0010AC  84CA               	bsf	202,2,c	;volatile
  2376                           
  2377                           ;motors.c: 199:     tm0Error = 0;
  2378  0010AE  0E00               	movlw	0
  2379  0010B0  6E51               	movwf	(_tm0Error+1)^0,c
  2380  0010B2  0E00               	movlw	0
  2381  0010B4  6E50               	movwf	_tm0Error^0,c
  2382                           
  2383                           ;motors.c: 200:     tm0Limit = 250;
  2384  0010B6  0EFA               	movlw	250
  2385  0010B8  6E5D               	movwf	_tm0Limit^0,c
  2386  0010BA                     
  2387                           ;motors.c: 201:     T0CONbits.TMR0ON = 1;
  2388  0010BA  8ED5               	bsf	213,7,c	;volatile
  2389                           
  2390                           ;motors.c: 203:     while(keepMovingX || keepMovingY || keepMovingZ){
  2391  0010BC  EF1E  F009         	goto	l4270
  2392  0010C0                     l4224:
  2393  0010C0  FFFF               	dw	65535	; assembler added errata NOP
  2394                           
  2395                           ;motors.c: 206:         if(tm0Error){
  2396  0010C2  5050               	movf	_tm0Error^0,w,c
  2397  0010C4  1051               	iorwf	(_tm0Error+1)^0,w,c
  2398  0010C6  B4D8               	btfsc	status,2,c
  2399  0010C8  EF68  F008         	goto	u3501
  2400  0010CC  EF6B  F008         	goto	u3500
  2401  0010D0                     u3501:
  2402  0010D0  FFFF               	dw	65535	; assembler added errata NOP
  2403  0010D2  EF72  F008         	goto	l131
  2404  0010D6                     u3500:
  2405  0010D6  FFFF               	dw	65535	; assembler added errata NOP
  2406  0010D8                     
  2407                           ;motors.c: 214:             tm0Error = 3;
  2408  0010D8  0E00               	movlw	0
  2409  0010DA  6E51               	movwf	(_tm0Error+1)^0,c
  2410  0010DC  0E03               	movlw	3
  2411  0010DE  6E50               	movwf	_tm0Error^0,c
  2412                           
  2413                           ;motors.c: 215:             break;
  2414  0010E0  EF3C  F009         	goto	l132
  2415  0010E4                     l131:
  2416  0010E4  FFFF               	dw	65535	; assembler added errata NOP
  2417                           
  2418                           ;motors.c: 222:         if(PORTEbits.RE0 || !keepMovingX){
  2419  0010E6  B084               	btfsc	132,0,c	;volatile
  2420  0010E8  EF78  F008         	goto	u3511
  2421  0010EC  EF7B  F008         	goto	u3510
  2422  0010F0                     u3511:
  2423  0010F0  FFFF               	dw	65535	; assembler added errata NOP
  2424  0010F2  EF85  F008         	goto	l4230
  2425  0010F6                     u3510:
  2426  0010F6  FFFF               	dw	65535	; assembler added errata NOP
  2427  0010F8  5015               	movf	resetPosition@keepMovingX^0,w,c
  2428  0010FA  A4D8               	btfss	status,2,c
  2429  0010FC  EF82  F008         	goto	u3521
  2430  001100  EF85  F008         	goto	u3520
  2431  001104                     u3521:
  2432  001104  FFFF               	dw	65535	; assembler added errata NOP
  2433  001106  EF8A  F008         	goto	l4232
  2434  00110A                     u3520:
  2435  00110A                     l4230:
  2436  00110A  FFFF               	dw	65535	; assembler added errata NOP
  2437                           
  2438                           ;motors.c: 224:             keepMovingX = 0;
  2439  00110C  0E00               	movlw	0
  2440  00110E  6E15               	movwf	resetPosition@keepMovingX^0,c
  2441                           
  2442                           ;motors.c: 225:         }else{
  2443  001110  EFA7  F008         	goto	l4240
  2444  001114                     l4232:
  2445  001114  FFFF               	dw	65535	; assembler added errata NOP
  2446                           
  2447                           ;motors.c: 231:             motCounter[0][0] += motCounter[0][1];
  2448  001116  EE20  F060         	lfsr	2,_motCounter+2
  2449  00111A  50DE               	movf	postinc2,w,c
  2450  00111C  265E               	addwf	_motCounter^0,f,c
  2451  00111E  50DD               	movf	postdec2,w,c
  2452  001120  225F               	addwfc	(_motCounter+1)^0,f,c
  2453  001122                     
  2454                           ;motors.c: 232:             if(motCounter[0][0] < 0){
  2455  001122  BE5F               	btfsc	(_motCounter+1)^0,7,c
  2456  001124  EF99  F008         	goto	u3530
  2457  001128  EF96  F008         	goto	u3531
  2458  00112C                     u3531:
  2459  00112C  FFFF               	dw	65535	; assembler added errata NOP
  2460  00112E  EF9E  F008         	goto	l4238
  2461  001132                     u3530:
  2462  001132  FFFF               	dw	65535	; assembler added errata NOP
  2463  001134                     
  2464                           ;motors.c: 233:                 motCounter[0][0] = 3;
  2465  001134  0E00               	movlw	0
  2466  001136  6E5F               	movwf	(_motCounter+1)^0,c
  2467  001138  0E03               	movlw	3
  2468  00113A  6E5E               	movwf	_motCounter^0,c
  2469  00113C                     l4238:
  2470  00113C  FFFF               	dw	65535	; assembler added errata NOP
  2471                           
  2472                           ;motors.c: 236:             LATA = stepMot1[motCounter[0][0]];
  2473  00113E  0E8C               	movlw	low _stepMot1
  2474  001140  245E               	addwf	_motCounter^0,w,c
  2475  001142  6ED9               	movwf	fsr2l,c
  2476  001144  0E00               	movlw	high _stepMot1
  2477  001146  205F               	addwfc	(_motCounter+1)^0,w,c
  2478  001148  6EDA               	movwf	fsr2h,c
  2479  00114A  50DF               	movf	indf2,w,c
  2480  00114C  6E89               	movwf	137,c	;volatile
  2481  00114E                     l4240:
  2482  00114E  FFFF               	dw	65535	; assembler added errata NOP
  2483                           
  2484                           ;motors.c: 241:         if(PORTEbits.RE1 || !keepMovingY){
  2485  001150  B284               	btfsc	132,1,c	;volatile
  2486  001152  EFAD  F008         	goto	u3541
  2487  001156  EFB0  F008         	goto	u3540
  2488  00115A                     u3541:
  2489  00115A  FFFF               	dw	65535	; assembler added errata NOP
  2490  00115C  EFBA  F008         	goto	l4244
  2491  001160                     u3540:
  2492  001160  FFFF               	dw	65535	; assembler added errata NOP
  2493  001162  5016               	movf	resetPosition@keepMovingY^0,w,c
  2494  001164  A4D8               	btfss	status,2,c
  2495  001166  EFB7  F008         	goto	u3551
  2496  00116A  EFBA  F008         	goto	u3550
  2497  00116E                     u3551:
  2498  00116E  FFFF               	dw	65535	; assembler added errata NOP
  2499  001170  EFBF  F008         	goto	l4246
  2500  001174                     u3550:
  2501  001174                     l4244:
  2502  001174  FFFF               	dw	65535	; assembler added errata NOP
  2503                           
  2504                           ;motors.c: 243:             keepMovingY = 0;
  2505  001176  0E00               	movlw	0
  2506  001178  6E16               	movwf	resetPosition@keepMovingY^0,c
  2507                           
  2508                           ;motors.c: 244:         }else{
  2509  00117A  EFDC  F008         	goto	l4254
  2510  00117E                     l4246:
  2511  00117E  FFFF               	dw	65535	; assembler added errata NOP
  2512                           
  2513                           ;motors.c: 250:             motCounter[1][0] += motCounter[1][1];
  2514  001180  EE20  F064         	lfsr	2,_motCounter+6
  2515  001184  50DE               	movf	postinc2,w,c
  2516  001186  2662               	addwf	(_motCounter+4)^0,f,c
  2517  001188  50DD               	movf	postdec2,w,c
  2518  00118A  2263               	addwfc	(_motCounter+5)^0,f,c
  2519  00118C                     
  2520                           ;motors.c: 251:             if(motCounter[1][0] < 0){
  2521  00118C  BE63               	btfsc	(_motCounter+5)^0,7,c
  2522  00118E  EFCE  F008         	goto	u3560
  2523  001192  EFCB  F008         	goto	u3561
  2524  001196                     u3561:
  2525  001196  FFFF               	dw	65535	; assembler added errata NOP
  2526  001198  EFD3  F008         	goto	l4252
  2527  00119C                     u3560:
  2528  00119C  FFFF               	dw	65535	; assembler added errata NOP
  2529  00119E                     
  2530                           ;motors.c: 252:                 motCounter[1][0] = 3;
  2531  00119E  0E00               	movlw	0
  2532  0011A0  6E63               	movwf	(_motCounter+5)^0,c
  2533  0011A2  0E03               	movlw	3
  2534  0011A4  6E62               	movwf	(_motCounter+4)^0,c
  2535  0011A6                     l4252:
  2536  0011A6  FFFF               	dw	65535	; assembler added errata NOP
  2537                           
  2538                           ;motors.c: 255:             LATB = stepMot2[motCounter[1][0]];
  2539  0011A8  0E88               	movlw	low _stepMot2
  2540  0011AA  2462               	addwf	(_motCounter+4)^0,w,c
  2541  0011AC  6ED9               	movwf	fsr2l,c
  2542  0011AE  0E00               	movlw	high _stepMot2
  2543  0011B0  2063               	addwfc	(_motCounter+5)^0,w,c
  2544  0011B2  6EDA               	movwf	fsr2h,c
  2545  0011B4  50DF               	movf	indf2,w,c
  2546  0011B6  6E8A               	movwf	138,c	;volatile
  2547  0011B8                     l4254:
  2548  0011B8  FFFF               	dw	65535	; assembler added errata NOP
  2549                           
  2550                           ;motors.c: 260:         if(PORTEbits.RE2 || !keepMovingZ){
  2551  0011BA  B484               	btfsc	132,2,c	;volatile
  2552  0011BC  EFE2  F008         	goto	u3571
  2553  0011C0  EFE5  F008         	goto	u3570
  2554  0011C4                     u3571:
  2555  0011C4  FFFF               	dw	65535	; assembler added errata NOP
  2556  0011C6  EFEF  F008         	goto	l4258
  2557  0011CA                     u3570:
  2558  0011CA  FFFF               	dw	65535	; assembler added errata NOP
  2559  0011CC  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2560  0011CE  A4D8               	btfss	status,2,c
  2561  0011D0  EFEC  F008         	goto	u3581
  2562  0011D4  EFEF  F008         	goto	u3580
  2563  0011D8                     u3581:
  2564  0011D8  FFFF               	dw	65535	; assembler added errata NOP
  2565  0011DA  EFF4  F008         	goto	l4260
  2566  0011DE                     u3580:
  2567  0011DE                     l4258:
  2568  0011DE  FFFF               	dw	65535	; assembler added errata NOP
  2569                           
  2570                           ;motors.c: 262:             keepMovingZ = 0;
  2571  0011E0  0E00               	movlw	0
  2572  0011E2  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2573                           
  2574                           ;motors.c: 263:         }else{
  2575  0011E4  EF11  F009         	goto	l4268
  2576  0011E8                     l4260:
  2577  0011E8  FFFF               	dw	65535	; assembler added errata NOP
  2578                           
  2579                           ;motors.c: 269:             motCounter[2][0] += motCounter[2][1];
  2580  0011EA  EE20  F068         	lfsr	2,_motCounter+10
  2581  0011EE  50DE               	movf	postinc2,w,c
  2582  0011F0  2666               	addwf	(_motCounter+8)^0,f,c
  2583  0011F2  50DD               	movf	postdec2,w,c
  2584  0011F4  2267               	addwfc	(_motCounter+9)^0,f,c
  2585  0011F6                     
  2586                           ;motors.c: 270:             if(motCounter[2][0] < 0){
  2587  0011F6  BE67               	btfsc	(_motCounter+9)^0,7,c
  2588  0011F8  EF03  F009         	goto	u3590
  2589  0011FC  EF00  F009         	goto	u3591
  2590  001200                     u3591:
  2591  001200  FFFF               	dw	65535	; assembler added errata NOP
  2592  001202  EF08  F009         	goto	l4266
  2593  001206                     u3590:
  2594  001206  FFFF               	dw	65535	; assembler added errata NOP
  2595  001208                     
  2596                           ;motors.c: 271:                 motCounter[2][0] = 3;
  2597  001208  0E00               	movlw	0
  2598  00120A  6E67               	movwf	(_motCounter+9)^0,c
  2599  00120C  0E03               	movlw	3
  2600  00120E  6E66               	movwf	(_motCounter+8)^0,c
  2601  001210                     l4266:
  2602  001210  FFFF               	dw	65535	; assembler added errata NOP
  2603                           
  2604                           ;motors.c: 274:             LATC = stepMot3[motCounter[2][0]];
  2605  001212  0E84               	movlw	low _stepMot3
  2606  001214  2466               	addwf	(_motCounter+8)^0,w,c
  2607  001216  6ED9               	movwf	fsr2l,c
  2608  001218  0E00               	movlw	high _stepMot3
  2609  00121A  2067               	addwfc	(_motCounter+9)^0,w,c
  2610  00121C  6EDA               	movwf	fsr2h,c
  2611  00121E  50DF               	movf	indf2,w,c
  2612  001220  6E8B               	movwf	139,c	;volatile
  2613  001222                     l4268:
  2614  001222  FFFF               	dw	65535	; assembler added errata NOP
  2615  001224  EC23  F012         	call	_stepMade	;wreg free
  2616  001228  5012               	movf	?_stepMade^0,w,c
  2617  00122A  1013               	iorwf	(?_stepMade+1)^0,w,c
  2618  00122C  B4D8               	btfsc	status,2,c
  2619  00122E  EF1B  F009         	goto	u3601
  2620  001232  EF1E  F009         	goto	u3600
  2621  001236                     u3601:
  2622  001236  FFFF               	dw	65535	; assembler added errata NOP
  2623  001238  EF11  F009         	goto	l4268
  2624  00123C                     u3600:
  2625  00123C                     l4270:
  2626  00123C  FFFF               	dw	65535	; assembler added errata NOP
  2627                           
  2628                           ;motors.c: 203:     while(keepMovingX || keepMovingY || keepMovingZ){
  2629  00123E  5015               	movf	resetPosition@keepMovingX^0,w,c
  2630  001240  A4D8               	btfss	status,2,c
  2631  001242  EF25  F009         	goto	u3611
  2632  001246  EF28  F009         	goto	u3610
  2633  00124A                     u3611:
  2634  00124A  FFFF               	dw	65535	; assembler added errata NOP
  2635  00124C  EF60  F008         	goto	l4224
  2636  001250                     u3610:
  2637  001250  FFFF               	dw	65535	; assembler added errata NOP
  2638  001252  5016               	movf	resetPosition@keepMovingY^0,w,c
  2639  001254  A4D8               	btfss	status,2,c
  2640  001256  EF2F  F009         	goto	u3621
  2641  00125A  EF32  F009         	goto	u3620
  2642  00125E                     u3621:
  2643  00125E  FFFF               	dw	65535	; assembler added errata NOP
  2644  001260  EF60  F008         	goto	l4224
  2645  001264                     u3620:
  2646  001264  FFFF               	dw	65535	; assembler added errata NOP
  2647  001266  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2648  001268  A4D8               	btfss	status,2,c
  2649  00126A  EF39  F009         	goto	u3631
  2650  00126E  EF3C  F009         	goto	u3630
  2651  001272                     u3631:
  2652  001272  FFFF               	dw	65535	; assembler added errata NOP
  2653  001274  EF60  F008         	goto	l4224
  2654  001278                     u3630:
  2655  001278                     l132:
  2656  001278  FFFF               	dw	65535	; assembler added errata NOP
  2657                           
  2658                           ;motors.c: 294:     T0CONbits.TMR0ON = 0;
  2659  00127A  9ED5               	bcf	213,7,c	;volatile
  2660                           
  2661                           ;motors.c: 295:     T2CONbits.TMR2ON = 0;
  2662  00127C  94CA               	bcf	202,2,c	;volatile
  2663  00127E                     
  2664                           ;motors.c: 297:     TMR0 = 0;
  2665  00127E  0E00               	movlw	0
  2666  001280  6ED7               	movwf	215,c	;volatile
  2667  001282  0E00               	movlw	0
  2668  001284  6ED6               	movwf	214,c	;volatile
  2669                           
  2670                           ;motors.c: 298:     TMR2 = 0;
  2671  001286  0E00               	movlw	0
  2672  001288  6ECC               	movwf	204,c	;volatile
  2673  00128A                     
  2674                           ;motors.c: 301:     resetStep();
  2675  00128A  EC97  F012         	call	_resetStep	;wreg free
  2676  00128E                     
  2677                           ;motors.c: 304:     return(tm0Error);
  2678  00128E  5050               	movf	_tm0Error^0,w,c
  2679  001290  0012               	return		;funcret
  2680  001292  FFFF               	dw	65535	; errata NOP
  2681  001294                     __end_of_resetPosition:
  2682                           	callstack 0
  2683                           
  2684 ;; *************** function _resetNewSequence *****************
  2685 ;; Defined at:
  2686 ;;		line 73 in file "usart.c"
  2687 ;; Parameters:    Size  Location     Type
  2688 ;;		None
  2689 ;; Auto vars:     Size  Location     Type
  2690 ;;		None
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  1    wreg      void 
  2693 ;; Registers used:
  2694 ;;		wreg, status,2
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2700 ;;      Params:         0       0       0       0       0       0       0
  2701 ;;      Locals:         0       0       0       0       0       0       0
  2702 ;;      Temps:          0       0       0       0       0       0       0
  2703 ;;      Totals:         0       0       0       0       0       0       0
  2704 ;;Total ram usage:        0 bytes
  2705 ;; Hardware stack levels used:    1
  2706 ;; Hardware stack levels required when called:    4
  2707 ;; This function calls:
  2708 ;;		Nothing
  2709 ;; This function is called by:
  2710 ;;		_main
  2711 ;; This function uses a non-reentrant model
  2712 ;;
  2713                           
  2714                           	psect	text10
  2715  002506                     __ptext10:
  2716                           	callstack 0
  2717  002506                     _resetNewSequence:
  2718                           	callstack 0
  2719  002506  FFFF               	dw	65535	; assembler added errata NOP
  2720  002508                     
  2721                           ;usart.c: 74:     _newSequence = 0;
  2722  002508  0E00               	movlw	0
  2723  00250A  6E56               	movwf	__newSequence^0,c
  2724  00250C  0012               	return		;funcret
  2725  00250E  FFFF               	dw	65535	; errata NOP
  2726  002510                     __end_of_resetNewSequence:
  2727                           	callstack 0
  2728                           
  2729 ;; *************** function _reduceSeq *****************
  2730 ;; Defined at:
  2731 ;;		line 50 in file "usart.c"
  2732 ;; Parameters:    Size  Location     Type
  2733 ;;		None
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;		None
  2736 ;; Return value:  Size  Location     Type
  2737 ;;                  1    wreg      void 
  2738 ;; Registers used:
  2739 ;;		status,2, status,0
  2740 ;; Tracked objects:
  2741 ;;		On entry : 0/0
  2742 ;;		On exit  : 0/0
  2743 ;;		Unchanged: 0/0
  2744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2745 ;;      Params:         0       0       0       0       0       0       0
  2746 ;;      Locals:         0       0       0       0       0       0       0
  2747 ;;      Temps:          0       0       0       0       0       0       0
  2748 ;;      Totals:         0       0       0       0       0       0       0
  2749 ;;Total ram usage:        0 bytes
  2750 ;; Hardware stack levels used:    1
  2751 ;; Hardware stack levels required when called:    4
  2752 ;; This function calls:
  2753 ;;		Nothing
  2754 ;; This function is called by:
  2755 ;;		_main
  2756 ;; This function uses a non-reentrant model
  2757 ;;
  2758                           
  2759                           	psect	text11
  2760  002556                     __ptext11:
  2761                           	callstack 0
  2762  002556                     _reduceSeq:
  2763                           	callstack 0
  2764  002556  FFFF               	dw	65535	; assembler added errata NOP
  2765  002558                     
  2766                           ;usart.c: 51:     dataCounter--;
  2767  002558  0658               	decf	_dataCounter^0,f,c
  2768  00255A  0012               	return		;funcret
  2769  00255C  FFFF               	dw	65535	; errata NOP
  2770  00255E                     __end_of_reduceSeq:
  2771                           	callstack 0
  2772                           
  2773 ;; *************** function _readSeq *****************
  2774 ;; Defined at:
  2775 ;;		line 57 in file "usart.c"
  2776 ;; Parameters:    Size  Location     Type
  2777 ;;		None
  2778 ;; Auto vars:     Size  Location     Type
  2779 ;;		None
  2780 ;; Return value:  Size  Location     Type
  2781 ;;                  1    wreg      unsigned char 
  2782 ;; Registers used:
  2783 ;;		wreg, status,2
  2784 ;; Tracked objects:
  2785 ;;		On entry : 0/0
  2786 ;;		On exit  : 0/0
  2787 ;;		Unchanged: 0/0
  2788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2789 ;;      Params:         0       0       0       0       0       0       0
  2790 ;;      Locals:         0       0       0       0       0       0       0
  2791 ;;      Temps:          0       0       0       0       0       0       0
  2792 ;;      Totals:         0       0       0       0       0       0       0
  2793 ;;Total ram usage:        0 bytes
  2794 ;; Hardware stack levels used:    1
  2795 ;; Hardware stack levels required when called:    4
  2796 ;; This function calls:
  2797 ;;		Nothing
  2798 ;; This function is called by:
  2799 ;;		_main
  2800 ;; This function uses a non-reentrant model
  2801 ;;
  2802                           
  2803                           	psect	text12
  2804  00255E                     __ptext12:
  2805                           	callstack 0
  2806  00255E                     _readSeq:
  2807                           	callstack 0
  2808  00255E  FFFF               	dw	65535	; assembler added errata NOP
  2809  002560                     
  2810                           ;usart.c: 58:     return dataCounter;
  2811  002560  5058               	movf	_dataCounter^0,w,c
  2812  002562  0012               	return		;funcret
  2813  002564  FFFF               	dw	65535	; errata NOP
  2814  002566                     __end_of_readSeq:
  2815                           	callstack 0
  2816                           
  2817 ;; *************** function _newSequence *****************
  2818 ;; Defined at:
  2819 ;;		line 65 in file "usart.c"
  2820 ;; Parameters:    Size  Location     Type
  2821 ;;		None
  2822 ;; Auto vars:     Size  Location     Type
  2823 ;;		None
  2824 ;; Return value:  Size  Location     Type
  2825 ;;                  1    wreg      unsigned char 
  2826 ;; Registers used:
  2827 ;;		wreg, status,2
  2828 ;; Tracked objects:
  2829 ;;		On entry : 0/0
  2830 ;;		On exit  : 0/0
  2831 ;;		Unchanged: 0/0
  2832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2833 ;;      Params:         0       0       0       0       0       0       0
  2834 ;;      Locals:         0       0       0       0       0       0       0
  2835 ;;      Temps:          0       0       0       0       0       0       0
  2836 ;;      Totals:         0       0       0       0       0       0       0
  2837 ;;Total ram usage:        0 bytes
  2838 ;; Hardware stack levels used:    1
  2839 ;; Hardware stack levels required when called:    4
  2840 ;; This function calls:
  2841 ;;		Nothing
  2842 ;; This function is called by:
  2843 ;;		_main
  2844 ;; This function uses a non-reentrant model
  2845 ;;
  2846                           
  2847                           	psect	text13
  2848  002566                     __ptext13:
  2849                           	callstack 0
  2850  002566                     _newSequence:
  2851                           	callstack 0
  2852  002566  FFFF               	dw	65535	; assembler added errata NOP
  2853  002568                     
  2854                           ;usart.c: 66:     return _newSequence;
  2855  002568  5056               	movf	__newSequence^0,w,c
  2856  00256A  0012               	return		;funcret
  2857  00256C  FFFF               	dw	65535	; errata NOP
  2858  00256E                     __end_of_newSequence:
  2859                           	callstack 0
  2860                           
  2861 ;; *************** function _interruptInit *****************
  2862 ;; Defined at:
  2863 ;;		line 21 in file "interrupt.c"
  2864 ;; Parameters:    Size  Location     Type
  2865 ;;		None
  2866 ;; Auto vars:     Size  Location     Type
  2867 ;;		None
  2868 ;; Return value:  Size  Location     Type
  2869 ;;                  1    wreg      void 
  2870 ;; Registers used:
  2871 ;;		None
  2872 ;; Tracked objects:
  2873 ;;		On entry : 0/0
  2874 ;;		On exit  : 0/0
  2875 ;;		Unchanged: 0/0
  2876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2877 ;;      Params:         0       0       0       0       0       0       0
  2878 ;;      Locals:         0       0       0       0       0       0       0
  2879 ;;      Temps:          0       0       0       0       0       0       0
  2880 ;;      Totals:         0       0       0       0       0       0       0
  2881 ;;Total ram usage:        0 bytes
  2882 ;; Hardware stack levels used:    1
  2883 ;; Hardware stack levels required when called:    4
  2884 ;; This function calls:
  2885 ;;		Nothing
  2886 ;; This function is called by:
  2887 ;;		_main
  2888 ;; This function uses a non-reentrant model
  2889 ;;
  2890                           
  2891                           	psect	text14
  2892  002334                     __ptext14:
  2893                           	callstack 0
  2894  002334                     _interruptInit:
  2895                           	callstack 0
  2896  002334  FFFF               	dw	65535	; assembler added errata NOP
  2897  002336                     
  2898                           ;interrupt.c: 23:     if(!INTCONbits.GIE){
  2899  002336  BEF2               	btfsc	242,7,c	;volatile
  2900  002338  EFA0  F011         	goto	u3641
  2901  00233C  EFA3  F011         	goto	u3640
  2902  002340                     u3641:
  2903  002340  FFFF               	dw	65535	; assembler added errata NOP
  2904  002342  EFA5  F011         	goto	l444
  2905  002346                     u3640:
  2906  002346  FFFF               	dw	65535	; assembler added errata NOP
  2907  002348                     
  2908                           ;interrupt.c: 24:         INTCONbits.GIE = 1;
  2909  002348  8EF2               	bsf	242,7,c	;volatile
  2910  00234A                     l444:
  2911  00234A  FFFF               	dw	65535	; assembler added errata NOP
  2912                           
  2913                           ;interrupt.c: 26:     if(!INTCONbits.PEIE){
  2914  00234C  BCF2               	btfsc	242,6,c	;volatile
  2915  00234E  EFAB  F011         	goto	u3651
  2916  002352  EFAE  F011         	goto	u3650
  2917  002356                     u3651:
  2918  002356  FFFF               	dw	65535	; assembler added errata NOP
  2919  002358  EFB0  F011         	goto	l445
  2920  00235C                     u3650:
  2921  00235C  FFFF               	dw	65535	; assembler added errata NOP
  2922  00235E                     
  2923                           ;interrupt.c: 27:         INTCONbits.PEIE = 1;
  2924  00235E  8CF2               	bsf	242,6,c	;volatile
  2925  002360                     l445:
  2926  002360  FFFF               	dw	65535	; assembler added errata NOP
  2927                           
  2928                           ;interrupt.c: 31:     RCONbits.IPEN = 1;
  2929  002362  8ED0               	bsf	208,7,c	;volatile
  2930                           
  2931                           ;interrupt.c: 32:     INTCONbits.T0IE = 1;
  2932  002364  8AF2               	bsf	242,5,c	;volatile
  2933                           
  2934                           ;interrupt.c: 33:     PIE1bits.TMR1IE = 1;
  2935  002366  809D               	bsf	157,0,c	;volatile
  2936                           
  2937                           ;interrupt.c: 34:     PIE1bits.TMR2IE = 1;
  2938  002368  829D               	bsf	157,1,c	;volatile
  2939                           
  2940                           ;interrupt.c: 35:     PIE1bits.RC1IE = 1;
  2941  00236A  8A9D               	bsf	157,5,c	;volatile
  2942  00236C  0012               	return		;funcret
  2943  00236E  FFFF               	dw	65535	; errata NOP
  2944  002370                     __end_of_interruptInit:
  2945                           	callstack 0
  2946                           
  2947 ;; *************** function _initPinMotors *****************
  2948 ;; Defined at:
  2949 ;;		line 49 in file "motors.c"
  2950 ;; Parameters:    Size  Location     Type
  2951 ;;		None
  2952 ;; Auto vars:     Size  Location     Type
  2953 ;;		None
  2954 ;; Return value:  Size  Location     Type
  2955 ;;                  1    wreg      void 
  2956 ;; Registers used:
  2957 ;;		wreg, status,2, status,0
  2958 ;; Tracked objects:
  2959 ;;		On entry : 0/0
  2960 ;;		On exit  : 0/0
  2961 ;;		Unchanged: 0/0
  2962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2963 ;;      Params:         0       0       0       0       0       0       0
  2964 ;;      Locals:         0       0       0       0       0       0       0
  2965 ;;      Temps:          0       0       0       0       0       0       0
  2966 ;;      Totals:         0       0       0       0       0       0       0
  2967 ;;Total ram usage:        0 bytes
  2968 ;; Hardware stack levels used:    1
  2969 ;; Hardware stack levels required when called:    4
  2970 ;; This function calls:
  2971 ;;		Nothing
  2972 ;; This function is called by:
  2973 ;;		_main
  2974 ;; This function uses a non-reentrant model
  2975 ;;
  2976                           
  2977                           	psect	text15
  2978  0023C8                     __ptext15:
  2979                           	callstack 0
  2980  0023C8                     _initPinMotors:
  2981                           	callstack 0
  2982  0023C8  FFFF               	dw	65535	; assembler added errata NOP
  2983  0023CA                     
  2984                           ;motors.c: 51:     ADCON1bits.PCFG = 0x06;
  2985  0023CA  50C1               	movf	193,w,c	;volatile
  2986  0023CC  0BF0               	andlw	-16
  2987  0023CE  0906               	iorlw	6
  2988  0023D0  6EC1               	movwf	193,c	;volatile
  2989  0023D2                     
  2990                           ;motors.c: 52:     TRISA &= 0b11010001;
  2991  0023D2  0ED1               	movlw	209
  2992  0023D4  1692               	andwf	146,f,c	;volatile
  2993  0023D6                     
  2994                           ;motors.c: 54:     TRISB &= 0b00000010;
  2995  0023D6  0E02               	movlw	2
  2996  0023D8  1693               	andwf	147,f,c	;volatile
  2997  0023DA                     
  2998                           ;motors.c: 55:     TRISC &= 0b11000000;
  2999  0023DA  0EC0               	movlw	192
  3000  0023DC  1694               	andwf	148,f,c	;volatile
  3001  0023DE                     
  3002                           ;motors.c: 56:     TRISD &= 0b11000000;
  3003  0023DE  0EC0               	movlw	192
  3004  0023E0  1695               	andwf	149,f,c	;volatile
  3005  0023E2                     
  3006                           ;motors.c: 59:     TRISEbits.TRISE0 = 1;
  3007  0023E2  8096               	bsf	150,0,c	;volatile
  3008  0023E4                     
  3009                           ;motors.c: 60:     TRISEbits.TRISE1 = 1;
  3010  0023E4  8296               	bsf	150,1,c	;volatile
  3011  0023E6                     
  3012                           ;motors.c: 61:     TRISEbits.TRISE2 = 1;
  3013  0023E6  8496               	bsf	150,2,c	;volatile
  3014  0023E8                     
  3015                           ;motors.c: 64:     TRISDbits.TRISD7 = 1;
  3016  0023E8  8E95               	bsf	149,7,c	;volatile
  3017  0023EA  0012               	return		;funcret
  3018  0023EC  FFFF               	dw	65535	; errata NOP
  3019  0023EE                     __end_of_initPinMotors:
  3020                           	callstack 0
  3021                           
  3022 ;; *************** function _initADC *****************
  3023 ;; Defined at:
  3024 ;;		line 18 in file "adc.c"
  3025 ;; Parameters:    Size  Location     Type
  3026 ;;		None
  3027 ;; Auto vars:     Size  Location     Type
  3028 ;;		None
  3029 ;; Return value:  Size  Location     Type
  3030 ;;                  1    wreg      void 
  3031 ;; Registers used:
  3032 ;;		wreg, status,2
  3033 ;; Tracked objects:
  3034 ;;		On entry : 0/0
  3035 ;;		On exit  : 0/0
  3036 ;;		Unchanged: 0/0
  3037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3038 ;;      Params:         0       0       0       0       0       0       0
  3039 ;;      Locals:         0       0       0       0       0       0       0
  3040 ;;      Temps:          0       0       0       0       0       0       0
  3041 ;;      Totals:         0       0       0       0       0       0       0
  3042 ;;Total ram usage:        0 bytes
  3043 ;; Hardware stack levels used:    1
  3044 ;; Hardware stack levels required when called:    4
  3045 ;; This function calls:
  3046 ;;		Nothing
  3047 ;; This function is called by:
  3048 ;;		_main
  3049 ;; This function uses a non-reentrant model
  3050 ;;
  3051                           
  3052                           	psect	text16
  3053  0023EE                     __ptext16:
  3054                           	callstack 0
  3055  0023EE                     _initADC:
  3056                           	callstack 0
  3057  0023EE  FFFF               	dw	65535	; assembler added errata NOP
  3058  0023F0                     
  3059                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  3060  0023F0  50C2               	movf	194,w,c	;volatile
  3061  0023F2  0B3F               	andlw	-193
  3062  0023F4  0940               	iorlw	64
  3063  0023F6  6EC2               	movwf	194,c	;volatile
  3064  0023F8                     
  3065                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  3066  0023F8  8CC1               	bsf	193,6,c	;volatile
  3067                           
  3068                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  3069  0023FA  0EC7               	movlw	-57
  3070  0023FC  16C2               	andwf	194,f,c	;volatile
  3071  0023FE                     
  3072                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  3073  0023FE  94C2               	bcf	194,2,c	;volatile
  3074  002400                     
  3075                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  3076  002400  90C2               	bcf	194,0,c	;volatile
  3077  002402                     
  3078                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  3079  002402  9EC1               	bcf	193,7,c	;volatile
  3080                           
  3081                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  3082  002404  50C1               	movf	193,w,c	;volatile
  3083  002406  0BF0               	andlw	-16
  3084  002408  090E               	iorlw	14
  3085  00240A  6EC1               	movwf	193,c	;volatile
  3086  00240C                     
  3087                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  3088  00240C  8C9D               	bsf	157,6,c	;volatile
  3089  00240E                     
  3090                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  3091  00240E  8C9F               	bsf	159,6,c	;volatile
  3092  002410  0012               	return		;funcret
  3093  002412  FFFF               	dw	65535	; errata NOP
  3094  002414                     __end_of_initADC:
  3095                           	callstack 0
  3096                           
  3097 ;; *************** function _getNewSequence *****************
  3098 ;; Defined at:
  3099 ;;		line 43 in file "usart.c"
  3100 ;; Parameters:    Size  Location     Type
  3101 ;;		None
  3102 ;; Auto vars:     Size  Location     Type
  3103 ;;		None
  3104 ;; Return value:  Size  Location     Type
  3105 ;;                  2   17[COMRAM] PTR struct .
  3106 ;; Registers used:
  3107 ;;		wreg, status,2, status,0
  3108 ;; Tracked objects:
  3109 ;;		On entry : 0/0
  3110 ;;		On exit  : 0/0
  3111 ;;		Unchanged: 0/0
  3112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3113 ;;      Params:         2       0       0       0       0       0       0
  3114 ;;      Locals:         0       0       0       0       0       0       0
  3115 ;;      Temps:          0       0       0       0       0       0       0
  3116 ;;      Totals:         2       0       0       0       0       0       0
  3117 ;;Total ram usage:        2 bytes
  3118 ;; Hardware stack levels used:    1
  3119 ;; Hardware stack levels required when called:    4
  3120 ;; This function calls:
  3121 ;;		Nothing
  3122 ;; This function is called by:
  3123 ;;		_main
  3124 ;; This function uses a non-reentrant model
  3125 ;;
  3126                           
  3127                           	psect	text17
  3128  00249C                     __ptext17:
  3129                           	callstack 0
  3130  00249C                     _getNewSequence:
  3131                           	callstack 0
  3132  00249C  FFFF               	dw	65535	; assembler added errata NOP
  3133  00249E                     
  3134                           ;usart.c: 44:     return(&newSequenceData);
  3135  00249E  0EE5               	movlw	low _newSequenceData
  3136  0024A0  6E12               	movwf	?_getNewSequence^0,c
  3137  0024A2  0E00               	movlw	high _newSequenceData
  3138  0024A4  6E13               	movwf	(?_getNewSequence+1)^0,c
  3139  0024A6  0012               	return		;funcret
  3140  0024A8  FFFF               	dw	65535	; errata NOP
  3141  0024AA                     __end_of_getNewSequence:
  3142                           	callstack 0
  3143                           
  3144 ;; *************** function _executeData *****************
  3145 ;; Defined at:
  3146 ;;		line 105 in file "main.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;		None
  3149 ;; Auto vars:     Size  Location     Type
  3150 ;;  data            2   10[BANK0 ] PTR struct .
  3151 ;;		 -> dataSequence(20), 
  3152 ;;  errCode         1    9[BANK0 ] unsigned char 
  3153 ;; Return value:  Size  Location     Type
  3154 ;;                  1    wreg      unsigned char 
  3155 ;; Registers used:
  3156 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3157 ;; Tracked objects:
  3158 ;;		On entry : 0/0
  3159 ;;		On exit  : 0/0
  3160 ;;		Unchanged: 0/0
  3161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3162 ;;      Params:         0       0       0       0       0       0       0
  3163 ;;      Locals:         0       3       0       0       0       0       0
  3164 ;;      Temps:          0       2       0       0       0       0       0
  3165 ;;      Totals:         0       5       0       0       0       0       0
  3166 ;;Total ram usage:        5 bytes
  3167 ;; Hardware stack levels used:    1
  3168 ;; Hardware stack levels required when called:    6
  3169 ;; This function calls:
  3170 ;;		_getData
  3171 ;;		_liftArm
  3172 ;;		_moveToPoint
  3173 ;;		_pickObject
  3174 ;;		_releaseObj
  3175 ;;		_rotateObj
  3176 ;;		_touchObject
  3177 ;;		_touchTherm
  3178 ;; This function is called by:
  3179 ;;		_main
  3180 ;; This function uses a non-reentrant model
  3181 ;;
  3182                           
  3183                           	psect	text18
  3184  000E0A                     __ptext18:
  3185                           	callstack 0
  3186  000E0A                     _executeData:
  3187                           	callstack 0
  3188  000E0A  FFFF               	dw	65535	; assembler added errata NOP
  3189  000E0C                     
  3190                           ;main.c: 106:     t_sequence *data = getData();
  3191  000E0C  EC55  F012         	call	_getData	;wreg free
  3192  000E10  C012  F0F7         	movff	?_getData,executeData@data
  3193  000E14  C013  F0F8         	movff	?_getData+1,executeData@data+1
  3194  000E18                     
  3195                           ;main.c: 112:     switch(data->feederLine){
  3196  000E18  EFB7  F007         	goto	l4420
  3197  000E1C                     l4392:
  3198  000E1C  FFFF               	dw	65535	; assembler added errata NOP
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;main.c: 115:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0
      +                          ], feeder1Pos[1]);
  3202  000E1E  C043  F015         	movff	_posVector,moveToPoint@x1
  3203  000E22  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3204  000E24  C044  F017         	movff	_posVector+1,moveToPoint@y1
  3205  000E28  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3206  000E2A  0E0D               	movlw	low _feeder1Pos
  3207  000E2C  6EF6               	movwf	tblptrl,c
  3208  000E2E                     	if	1	;There is more than 1 active tblptr byte
  3209  000E2E  0E06               	movlw	high _feeder1Pos
  3210  000E30  6EF7               	movwf	tblptrh,c
  3211  000E32                     	endif
  3212  000E32                     	if	0	;There are less than 3 active tblptr bytes
  3213  000E32                     	endif
  3214  000E32  0008               	tblrd		*
  3215  000E34  FFFF               	dw	65535	; errata NOP
  3216  000E36  50F5               	movf	tablat,w,c
  3217  000E38  6E19               	movwf	moveToPoint@x2^0,c
  3218  000E3A  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3219  000E3C  0E0E               	movlw	low (_feeder1Pos+1)
  3220  000E3E  6EF6               	movwf	tblptrl,c
  3221  000E40  0E06               	movlw	high (_feeder1Pos+1)
  3222  000E42  6EF7               	movwf	tblptrh,c
  3223  000E44                     	if	0	;tblptru may be non-zero
  3224  000E44                     	endif
  3225  000E44                     	if	0	;tblptru may be non-zero
  3226  000E44                     	endif
  3227  000E44  0008               	tblrd		*
  3228  000E46  FFFF               	dw	65535	; errata NOP
  3229  000E48  50F5               	movf	tablat,w,c
  3230  000E4A  6E1B               	movwf	moveToPoint@y2^0,c
  3231  000E4C  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3232  000E4E  EC22  F005         	call	_moveToPoint	;wreg free
  3233  000E52  0100               	movlb	0	; () banked
  3234  000E54  6FF6               	movwf	executeData@errCode& (0+255),b
  3235  000E56                     
  3236                           ; BSR set to: 0
  3237                           ;main.c: 117:             posVector[0] = feeder1Pos[0];
  3238  000E56  0E0D               	movlw	low _feeder1Pos
  3239  000E58  6EF6               	movwf	tblptrl,c
  3240  000E5A                     	if	1	;There is more than 1 active tblptr byte
  3241  000E5A  0E06               	movlw	high _feeder1Pos
  3242  000E5C  6EF7               	movwf	tblptrh,c
  3243  000E5E                     	endif
  3244  000E5E                     	if	0	;There are less than 3 active tblptr bytes
  3245  000E5E                     	endif
  3246  000E5E  0008               	tblrd		*
  3247  000E60  FFFF               	dw	65535	; errata NOP
  3248  000E62  CFF5 F043          	movff	tablat,_posVector
  3249  000E66                     
  3250                           ; BSR set to: 0
  3251                           ;main.c: 118:             posVector[1] = feeder1Pos[1];
  3252  000E66  0E0E               	movlw	low (_feeder1Pos+1)
  3253  000E68  6EF6               	movwf	tblptrl,c
  3254  000E6A  0E06               	movlw	high (_feeder1Pos+1)
  3255  000E6C  6EF7               	movwf	tblptrh,c
  3256  000E6E                     	if	0	;tblptru may be non-zero
  3257  000E6E                     	endif
  3258  000E6E                     	if	0	;tblptru may be non-zero
  3259  000E6E                     	endif
  3260  000E6E  0008               	tblrd		*
  3261  000E70  FFFF               	dw	65535	; errata NOP
  3262  000E72  CFF5 F044          	movff	tablat,_posVector+1
  3263                           
  3264                           ;main.c: 119:             break;
  3265  000E76  EFDB  F007         	goto	l4422
  3266  000E7A                     l4398:
  3267  000E7A  FFFF               	dw	65535	; assembler added errata NOP
  3268                           
  3269                           ; BSR set to: 0
  3270                           ;main.c: 121:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3271  000E7C  C043  F015         	movff	_posVector,moveToPoint@x1
  3272  000E80  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3273  000E82  C044  F017         	movff	_posVector+1,moveToPoint@y1
  3274  000E86  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3275  000E88  0E0B               	movlw	low _feeder2Pos
  3276  000E8A  6EF6               	movwf	tblptrl,c
  3277  000E8C                     	if	1	;There is more than 1 active tblptr byte
  3278  000E8C  0E06               	movlw	high _feeder2Pos
  3279  000E8E  6EF7               	movwf	tblptrh,c
  3280  000E90                     	endif
  3281  000E90                     	if	0	;There are less than 3 active tblptr bytes
  3282  000E90                     	endif
  3283  000E90  0008               	tblrd		*
  3284  000E92  FFFF               	dw	65535	; errata NOP
  3285  000E94  50F5               	movf	tablat,w,c
  3286  000E96  6E19               	movwf	moveToPoint@x2^0,c
  3287  000E98  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3288  000E9A  0E0C               	movlw	low (_feeder2Pos+1)
  3289  000E9C  6EF6               	movwf	tblptrl,c
  3290  000E9E  0E06               	movlw	high (_feeder2Pos+1)
  3291  000EA0  6EF7               	movwf	tblptrh,c
  3292  000EA2                     	if	0	;tblptru may be non-zero
  3293  000EA2                     	endif
  3294  000EA2                     	if	0	;tblptru may be non-zero
  3295  000EA2                     	endif
  3296  000EA2  0008               	tblrd		*
  3297  000EA4  FFFF               	dw	65535	; errata NOP
  3298  000EA6  50F5               	movf	tablat,w,c
  3299  000EA8  6E1B               	movwf	moveToPoint@y2^0,c
  3300  000EAA  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3301  000EAC  EC22  F005         	call	_moveToPoint	;wreg free
  3302  000EB0  0100               	movlb	0	; () banked
  3303  000EB2  6FF6               	movwf	executeData@errCode& (0+255),b
  3304  000EB4                     
  3305                           ; BSR set to: 0
  3306                           ;main.c: 122:             posVector[0] = feeder2Pos[0];
  3307  000EB4  0E0B               	movlw	low _feeder2Pos
  3308  000EB6  6EF6               	movwf	tblptrl,c
  3309  000EB8                     	if	1	;There is more than 1 active tblptr byte
  3310  000EB8  0E06               	movlw	high _feeder2Pos
  3311  000EBA  6EF7               	movwf	tblptrh,c
  3312  000EBC                     	endif
  3313  000EBC                     	if	0	;There are less than 3 active tblptr bytes
  3314  000EBC                     	endif
  3315  000EBC  0008               	tblrd		*
  3316  000EBE  FFFF               	dw	65535	; errata NOP
  3317  000EC0  CFF5 F043          	movff	tablat,_posVector
  3318  000EC4                     
  3319                           ; BSR set to: 0
  3320                           ;main.c: 123:             posVector[1] = feeder2Pos[1];
  3321  000EC4  0E0C               	movlw	low (_feeder2Pos+1)
  3322  000EC6  6EF6               	movwf	tblptrl,c
  3323  000EC8  0E06               	movlw	high (_feeder2Pos+1)
  3324  000ECA  6EF7               	movwf	tblptrh,c
  3325  000ECC                     	if	0	;tblptru may be non-zero
  3326  000ECC                     	endif
  3327  000ECC                     	if	0	;tblptru may be non-zero
  3328  000ECC                     	endif
  3329  000ECC  0008               	tblrd		*
  3330  000ECE  FFFF               	dw	65535	; errata NOP
  3331  000ED0  CFF5 F044          	movff	tablat,_posVector+1
  3332                           
  3333                           ;main.c: 124:             break;
  3334  000ED4  EFDB  F007         	goto	l4422
  3335  000ED8                     l4404:
  3336  000ED8  FFFF               	dw	65535	; assembler added errata NOP
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;main.c: 126:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3340  000EDA  C043  F015         	movff	_posVector,moveToPoint@x1
  3341  000EDE  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3342  000EE0  C044  F017         	movff	_posVector+1,moveToPoint@y1
  3343  000EE4  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3344  000EE6  0E09               	movlw	low _feeder3Pos
  3345  000EE8  6EF6               	movwf	tblptrl,c
  3346  000EEA                     	if	1	;There is more than 1 active tblptr byte
  3347  000EEA  0E06               	movlw	high _feeder3Pos
  3348  000EEC  6EF7               	movwf	tblptrh,c
  3349  000EEE                     	endif
  3350  000EEE                     	if	0	;There are less than 3 active tblptr bytes
  3351  000EEE                     	endif
  3352  000EEE  0008               	tblrd		*
  3353  000EF0  FFFF               	dw	65535	; errata NOP
  3354  000EF2  50F5               	movf	tablat,w,c
  3355  000EF4  6E19               	movwf	moveToPoint@x2^0,c
  3356  000EF6  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3357  000EF8  0E0A               	movlw	low (_feeder3Pos+1)
  3358  000EFA  6EF6               	movwf	tblptrl,c
  3359  000EFC  0E06               	movlw	high (_feeder3Pos+1)
  3360  000EFE  6EF7               	movwf	tblptrh,c
  3361  000F00                     	if	0	;tblptru may be non-zero
  3362  000F00                     	endif
  3363  000F00                     	if	0	;tblptru may be non-zero
  3364  000F00                     	endif
  3365  000F00  0008               	tblrd		*
  3366  000F02  FFFF               	dw	65535	; errata NOP
  3367  000F04  50F5               	movf	tablat,w,c
  3368  000F06  6E1B               	movwf	moveToPoint@y2^0,c
  3369  000F08  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3370  000F0A  EC22  F005         	call	_moveToPoint	;wreg free
  3371  000F0E  0100               	movlb	0	; () banked
  3372  000F10  6FF6               	movwf	executeData@errCode& (0+255),b
  3373  000F12                     
  3374                           ; BSR set to: 0
  3375                           ;main.c: 127:             posVector[0] = feeder3Pos[0];
  3376  000F12  0E09               	movlw	low _feeder3Pos
  3377  000F14  6EF6               	movwf	tblptrl,c
  3378  000F16                     	if	1	;There is more than 1 active tblptr byte
  3379  000F16  0E06               	movlw	high _feeder3Pos
  3380  000F18  6EF7               	movwf	tblptrh,c
  3381  000F1A                     	endif
  3382  000F1A                     	if	0	;There are less than 3 active tblptr bytes
  3383  000F1A                     	endif
  3384  000F1A  0008               	tblrd		*
  3385  000F1C  FFFF               	dw	65535	; errata NOP
  3386  000F1E  CFF5 F043          	movff	tablat,_posVector
  3387  000F22                     
  3388                           ; BSR set to: 0
  3389                           ;main.c: 128:             posVector[1] = feeder3Pos[1];
  3390  000F22  0E0A               	movlw	low (_feeder3Pos+1)
  3391  000F24  6EF6               	movwf	tblptrl,c
  3392  000F26  0E06               	movlw	high (_feeder3Pos+1)
  3393  000F28  6EF7               	movwf	tblptrh,c
  3394  000F2A                     	if	0	;tblptru may be non-zero
  3395  000F2A                     	endif
  3396  000F2A                     	if	0	;tblptru may be non-zero
  3397  000F2A                     	endif
  3398  000F2A  0008               	tblrd		*
  3399  000F2C  FFFF               	dw	65535	; errata NOP
  3400  000F2E  CFF5 F044          	movff	tablat,_posVector+1
  3401                           
  3402                           ;main.c: 129:             break;
  3403  000F32  EFDB  F007         	goto	l4422
  3404  000F36                     l4410:
  3405  000F36  FFFF               	dw	65535	; assembler added errata NOP
  3406                           
  3407                           ; BSR set to: 0
  3408                           ;main.c: 133:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3409  000F38  C043  F015         	movff	_posVector,moveToPoint@x1
  3410  000F3C  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3411  000F3E  C044  F017         	movff	_posVector+1,moveToPoint@y1
  3412  000F42  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3413  000F44  C04C  F019         	movff	_newFeeder,moveToPoint@x2
  3414  000F48  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3415  000F4A  C04D  F01B         	movff	_newFeeder+1,moveToPoint@y2
  3416  000F4E  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3417  000F50  EC22  F005         	call	_moveToPoint	;wreg free
  3418  000F54  0100               	movlb	0	; () banked
  3419  000F56  6FF6               	movwf	executeData@errCode& (0+255),b
  3420  000F58                     
  3421                           ; BSR set to: 0
  3422                           ;main.c: 134:             posVector[0] = newFeeder[0];
  3423  000F58  C04C  F043         	movff	_newFeeder,_posVector
  3424  000F5C                     
  3425                           ; BSR set to: 0
  3426                           ;main.c: 135:             posVector[1] = newFeeder[1];
  3427  000F5C  C04D  F044         	movff	_newFeeder+1,_posVector+1
  3428                           
  3429                           ;main.c: 136:             break;
  3430  000F60  EFDB  F007         	goto	l4422
  3431  000F64                     l4416:
  3432  000F64  FFFF               	dw	65535	; assembler added errata NOP
  3433                           
  3434                           ; BSR set to: 0
  3435                           ;main.c: 140:             errCode = 1;
  3436  000F66  0E01               	movlw	1
  3437  000F68  6FF6               	movwf	executeData@errCode& (0+255),b
  3438                           
  3439                           ;main.c: 141:             break;
  3440  000F6A  EFDB  F007         	goto	l4422
  3441  000F6E                     l4420:
  3442  000F6E  FFFF               	dw	65535	; assembler added errata NOP
  3443  000F70  C0F7  FFD9         	movff	executeData@data,fsr2l
  3444  000F74  C0F8  FFDA         	movff	executeData@data+1,fsr2h
  3445  000F78  50DF               	movf	indf2,w,c
  3446  000F7A  0100               	movlb	0	; () banked
  3447  000F7C  6FF4               	movwf	??_executeData& (0+255),b
  3448  000F7E  6BF5               	clrf	(??_executeData+1)& (0+255),b
  3449                           
  3450                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3451                           ; Switch size 1, requested type "simple"
  3452                           ; Number of cases is 1, Range of values is 0 to 0
  3453                           ; switch strategies available:
  3454                           ; Name         Instructions Cycles
  3455                           ; simple_byte            4     3 (average)
  3456                           ;	Chosen strategy is simple_byte
  3457  000F80  51F5               	movf	(??_executeData+1)& (0+255),w,b
  3458  000F82  0A00               	xorlw	0	; case 0
  3459  000F84  B4D8               	btfsc	status,2,c
  3460  000F86  EFC7  F007         	goto	l4718
  3461  000F8A  EFB2  F007         	goto	l4416
  3462  000F8E                     l4718:
  3463  000F8E  FFFF               	dw	65535	; assembler added errata NOP
  3464                           
  3465                           ; BSR set to: 0
  3466                           ; Switch size 1, requested type "simple"
  3467                           ; Number of cases is 4, Range of values is 0 to 255
  3468                           ; switch strategies available:
  3469                           ; Name         Instructions Cycles
  3470                           ; simple_byte           13     7 (average)
  3471                           ;	Chosen strategy is simple_byte
  3472  000F90  51F4               	movf	??_executeData& (0+255),w,b
  3473  000F92  0A00               	xorlw	0	; case 0
  3474  000F94  B4D8               	btfsc	status,2,c
  3475  000F96  EF0E  F007         	goto	l4392
  3476  000F9A  0A01               	xorlw	1	; case 1
  3477  000F9C  B4D8               	btfsc	status,2,c
  3478  000F9E  EF3D  F007         	goto	l4398
  3479  000FA2  0A03               	xorlw	3	; case 2
  3480  000FA4  B4D8               	btfsc	status,2,c
  3481  000FA6  EF6C  F007         	goto	l4404
  3482  000FAA  0AFD               	xorlw	253	; case 255
  3483  000FAC  B4D8               	btfsc	status,2,c
  3484  000FAE  EF9B  F007         	goto	l4410
  3485  000FB2  EFB2  F007         	goto	l4416
  3486  000FB6                     l4422:
  3487  000FB6  FFFF               	dw	65535	; assembler added errata NOP
  3488                           
  3489                           ; BSR set to: 0
  3490                           ;main.c: 145:     if(!errCode){
  3491  000FB8  51F6               	movf	executeData@errCode& (0+255),w,b
  3492  000FBA  A4D8               	btfss	status,2,c
  3493  000FBC  EFE2  F007         	goto	u3671
  3494  000FC0  EFE5  F007         	goto	u3670
  3495  000FC4                     u3671:
  3496  000FC4  FFFF               	dw	65535	; assembler added errata NOP
  3497  000FC6  EF45  F008         	goto	l4448
  3498  000FCA                     u3670:
  3499  000FCA  FFFF               	dw	65535	; assembler added errata NOP
  3500  000FCC                     
  3501                           ; BSR set to: 0
  3502  000FCC  EC32  F00D         	call	_touchObject	;wreg free
  3503  000FD0                     
  3504                           ;main.c: 150:         pickObject();
  3505  000FD0  ECCE  F011         	call	_pickObject	;wreg free
  3506  000FD4  EC55  F010         	call	_liftArm	;wreg free
  3507  000FD8  C043  F015         	movff	_posVector,moveToPoint@x1
  3508  000FDC  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3509  000FDE  C044  F017         	movff	_posVector+1,moveToPoint@y1
  3510  000FE2  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3511  000FE4  0100               	movlb	0	; () banked
  3512  000FE6  EE20 F001          	lfsr	2,1
  3513  000FEA  51F7               	movf	executeData@data& (0+255),w,b
  3514  000FEC  26D9               	addwf	fsr2l,f,c
  3515  000FEE  51F8               	movf	(executeData@data+1)& (0+255),w,b
  3516  000FF0  22DA               	addwfc	fsr2h,f,c
  3517  000FF2  50DF               	movf	indf2,w,c
  3518  000FF4  6FF4               	movwf	??_executeData& (0+255),b
  3519  000FF6  51F4               	movf	??_executeData& (0+255),w,b
  3520  000FF8  6E19               	movwf	moveToPoint@x2^0,c
  3521  000FFA  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3522  000FFC  EE20 F002          	lfsr	2,2
  3523  001000  51F7               	movf	executeData@data& (0+255),w,b
  3524  001002  26D9               	addwf	fsr2l,f,c
  3525  001004  51F8               	movf	(executeData@data+1)& (0+255),w,b
  3526  001006  22DA               	addwfc	fsr2h,f,c
  3527  001008  50DF               	movf	indf2,w,c
  3528  00100A  6FF5               	movwf	(??_executeData+1)& (0+255),b
  3529  00100C  51F5               	movf	(??_executeData+1)& (0+255),w,b
  3530  00100E  6E1B               	movwf	moveToPoint@y2^0,c
  3531  001010  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3532  001012  EC22  F005         	call	_moveToPoint	;wreg free
  3533  001016                     
  3534                           ;main.c: 157:         posVector[0] = data->posX;
  3535  001016  0100               	movlb	0	; () banked
  3536  001018  EE20 F001          	lfsr	2,1
  3537  00101C  51F7               	movf	executeData@data& (0+255),w,b
  3538  00101E  26D9               	addwf	fsr2l,f,c
  3539  001020  51F8               	movf	(executeData@data+1)& (0+255),w,b
  3540  001022  22DA               	addwfc	fsr2h,f,c
  3541  001024  50DF               	movf	indf2,w,c
  3542  001026  6E43               	movwf	_posVector^0,c
  3543  001028                     
  3544                           ; BSR set to: 0
  3545                           ;main.c: 158:         posVector[1] = data->posY;
  3546  001028  EE20 F002          	lfsr	2,2
  3547  00102C  51F7               	movf	executeData@data& (0+255),w,b
  3548  00102E  26D9               	addwf	fsr2l,f,c
  3549  001030  51F8               	movf	(executeData@data+1)& (0+255),w,b
  3550  001032  22DA               	addwfc	fsr2h,f,c
  3551  001034  50DF               	movf	indf2,w,c
  3552  001036  6E44               	movwf	(_posVector+1)^0,c
  3553  001038                     
  3554                           ; BSR set to: 0
  3555                           ;main.c: 161:         rotAngle = data->rotation - rotAngle;
  3556  001038  EE20 F003          	lfsr	2,3
  3557  00103C  51F7               	movf	executeData@data& (0+255),w,b
  3558  00103E  26D9               	addwf	fsr2l,f,c
  3559  001040  51F8               	movf	(executeData@data+1)& (0+255),w,b
  3560  001042  22DA               	addwfc	fsr2h,f,c
  3561  001044  50DF               	movf	indf2,w,c
  3562  001046  6FF4               	movwf	??_executeData& (0+255),b
  3563  001048  504E               	movf	_rotAngle^0,w,c
  3564  00104A  5DF4               	subwf	??_executeData& (0+255),w,b
  3565  00104C  6E4E               	movwf	_rotAngle^0,c
  3566  00104E  504F               	movf	(_rotAngle+1)^0,w,c
  3567  001050  A0D8               	btfss	status,0,c
  3568  001052  284F               	incf	(_rotAngle+1)^0,w,c
  3569  001054  6A4F               	clrf	(_rotAngle+1)^0,c
  3570  001056  5E4F               	subwf	(_rotAngle+1)^0,f,c
  3571                           
  3572                           ;main.c: 163:         if(rotAngle < 0){
  3573  001058  BE4F               	btfsc	(_rotAngle+1)^0,7,c
  3574  00105A  EF34  F008         	goto	u3680
  3575  00105E  EF31  F008         	goto	u3681
  3576  001062                     u3681:
  3577  001062  FFFF               	dw	65535	; assembler added errata NOP
  3578  001064  EF39  F008         	goto	l4440
  3579  001068                     u3680:
  3580  001068  FFFF               	dw	65535	; assembler added errata NOP
  3581  00106A                     
  3582                           ; BSR set to: 0
  3583                           ;main.c: 164:             rotAngle += 360;
  3584  00106A  0E68               	movlw	104
  3585  00106C  264E               	addwf	_rotAngle^0,f,c
  3586  00106E  0E01               	movlw	1
  3587  001070  224F               	addwfc	(_rotAngle+1)^0,f,c
  3588  001072                     l4440:
  3589  001072  FFFF               	dw	65535	; assembler added errata NOP
  3590                           
  3591                           ; BSR set to: 0
  3592                           ;main.c: 166:         rotateObj(rotAngle);
  3593  001074  504E               	movf	_rotAngle^0,w,c
  3594  001076  ECE8  F00F         	call	_rotateObj
  3595  00107A  EC50  F00E         	call	_touchTherm	;wreg free
  3596  00107E                     
  3597                           ;main.c: 171:         releaseObj();
  3598  00107E  ECB8  F011         	call	_releaseObj	;wreg free
  3599  001082                     
  3600                           ;main.c: 174:         errCode = liftArm();
  3601  001082  EC55  F010         	call	_liftArm	;wreg free
  3602  001086  0100               	movlb	0	; () banked
  3603  001088  6FF6               	movwf	executeData@errCode& (0+255),b
  3604  00108A                     l4448:
  3605  00108A  FFFF               	dw	65535	; assembler added errata NOP
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;main.c: 177:     return(errCode);
  3609  00108C  51F6               	movf	executeData@errCode& (0+255),w,b
  3610  00108E                     
  3611                           ; BSR set to: 0
  3612  00108E  0012               	return		;funcret
  3613  001090  FFFF               	dw	65535	; errata NOP
  3614  001092                     __end_of_executeData:
  3615                           	callstack 0
  3616                           
  3617 ;; *************** function _touchTherm *****************
  3618 ;; Defined at:
  3619 ;;		line 590 in file "motors.c"
  3620 ;; Parameters:    Size  Location     Type
  3621 ;;		None
  3622 ;; Auto vars:     Size  Location     Type
  3623 ;;		None
  3624 ;; Return value:  Size  Location     Type
  3625 ;;                  1    wreg      unsigned char 
  3626 ;; Registers used:
  3627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3628 ;; Tracked objects:
  3629 ;;		On entry : 0/0
  3630 ;;		On exit  : 0/0
  3631 ;;		Unchanged: 0/0
  3632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3633 ;;      Params:         0       0       0       0       0       0       0
  3634 ;;      Locals:         0       0       0       0       0       0       0
  3635 ;;      Temps:          0       0       0       0       0       0       0
  3636 ;;      Totals:         0       0       0       0       0       0       0
  3637 ;;Total ram usage:        0 bytes
  3638 ;; Hardware stack levels used:    1
  3639 ;; Hardware stack levels required when called:    5
  3640 ;; This function calls:
  3641 ;;		_resetStep
  3642 ;;		_resetTherm
  3643 ;;		_returnTherm
  3644 ;;		_startADC
  3645 ;;		_stepMade
  3646 ;;		_stopADC
  3647 ;; This function is called by:
  3648 ;;		_executeData
  3649 ;; This function uses a non-reentrant model
  3650 ;;
  3651                           
  3652                           	psect	text19
  3653  001CA0                     __ptext19:
  3654                           	callstack 0
  3655  001CA0                     _touchTherm:
  3656                           	callstack 0
  3657  001CA0  FFFF               	dw	65535	; assembler added errata NOP
  3658  001CA2                     
  3659                           ;motors.c: 596:     motCounter[2][1] = 1;
  3660  001CA2  0E00               	movlw	0
  3661  001CA4  6E69               	movwf	(_motCounter+11)^0,c
  3662  001CA6  0E01               	movlw	1
  3663  001CA8  6E68               	movwf	(_motCounter+10)^0,c
  3664  001CAA                     
  3665                           ;motors.c: 599:     T2CONbits.TMR2ON = 1;
  3666  001CAA  84CA               	bsf	202,2,c	;volatile
  3667                           
  3668                           ;motors.c: 601:     tm0Error = 0;
  3669  001CAC  0E00               	movlw	0
  3670  001CAE  6E51               	movwf	(_tm0Error+1)^0,c
  3671  001CB0  0E00               	movlw	0
  3672  001CB2  6E50               	movwf	_tm0Error^0,c
  3673                           
  3674                           ;motors.c: 602:     tm0Limit = 250;
  3675  001CB4  0EFA               	movlw	250
  3676  001CB6  6E5D               	movwf	_tm0Limit^0,c
  3677  001CB8                     
  3678                           ;motors.c: 603:     T0CONbits.TMR0ON = 1;
  3679  001CB8  8ED5               	bsf	213,7,c	;volatile
  3680  001CBA                     l4066:
  3681  001CBA  FFFF               	dw	65535	; assembler added errata NOP
  3682                           
  3683                           ;motors.c: 606:     startADC();
  3684  001CBC  EC88  F012         	call	_startADC	;wreg free
  3685                           
  3686                           ;motors.c: 609:     while(!returnTherm() || PORTDbits.RD7){
  3687  001CC0  EFA8  F00E         	goto	l4084
  3688  001CC4                     l4068:
  3689  001CC4  FFFF               	dw	65535	; assembler added errata NOP
  3690                           
  3691                           ;motors.c: 612:         if(tm0Error){
  3692  001CC6  5050               	movf	_tm0Error^0,w,c
  3693  001CC8  1051               	iorwf	(_tm0Error+1)^0,w,c
  3694  001CCA  B4D8               	btfsc	status,2,c
  3695  001CCC  EF6A  F00E         	goto	u3361
  3696  001CD0  EF6D  F00E         	goto	u3360
  3697  001CD4                     u3361:
  3698  001CD4  FFFF               	dw	65535	; assembler added errata NOP
  3699  001CD6  EF74  F00E         	goto	l4072
  3700  001CDA                     u3360:
  3701  001CDA  FFFF               	dw	65535	; assembler added errata NOP
  3702  001CDC                     
  3703                           ;motors.c: 617:             tm0Error = 6;
  3704  001CDC  0E00               	movlw	0
  3705  001CDE  6E51               	movwf	(_tm0Error+1)^0,c
  3706  001CE0  0E06               	movlw	6
  3707  001CE2  6E50               	movwf	_tm0Error^0,c
  3708                           
  3709                           ;motors.c: 618:             break;
  3710  001CE4  EFBE  F00E         	goto	l4088
  3711  001CE8                     l4072:
  3712  001CE8  FFFF               	dw	65535	; assembler added errata NOP
  3713                           
  3714                           ;motors.c: 626:             motCounter[2][0] += motCounter[2][1];
  3715  001CEA  EE20  F068         	lfsr	2,_motCounter+10
  3716  001CEE  50DE               	movf	postinc2,w,c
  3717  001CF0  2666               	addwf	(_motCounter+8)^0,f,c
  3718  001CF2  50DD               	movf	postdec2,w,c
  3719  001CF4  2267               	addwfc	(_motCounter+9)^0,f,c
  3720  001CF6                     
  3721                           ;motors.c: 627:             if(motCounter[2][0] > 3){
  3722  001CF6  BE67               	btfsc	(_motCounter+9)^0,7,c
  3723  001CF8  EF87  F00E         	goto	u3371
  3724  001CFC  5067               	movf	(_motCounter+9)^0,w,c
  3725  001CFE  E10A               	bnz	u3370
  3726  001D00  0E04               	movlw	4
  3727  001D02  5C66               	subwf	(_motCounter+8)^0,w,c
  3728  001D04  A0D8               	btfss	status,0,c
  3729  001D06  EF87  F00E         	goto	u3371
  3730  001D0A  EF8A  F00E         	goto	u3370
  3731  001D0E                     u3371:
  3732  001D0E  FFFF               	dw	65535	; assembler added errata NOP
  3733  001D10  EF8F  F00E         	goto	l4078
  3734  001D14                     u3370:
  3735  001D14  FFFF               	dw	65535	; assembler added errata NOP
  3736  001D16                     
  3737                           ;motors.c: 628:                 motCounter[2][0] = 0;
  3738  001D16  0E00               	movlw	0
  3739  001D18  6E67               	movwf	(_motCounter+9)^0,c
  3740  001D1A  0E00               	movlw	0
  3741  001D1C  6E66               	movwf	(_motCounter+8)^0,c
  3742  001D1E                     l4078:
  3743  001D1E  FFFF               	dw	65535	; assembler added errata NOP
  3744                           
  3745                           ;motors.c: 631:             LATC = stepMot3[motCounter[2][0]];
  3746  001D20  0E84               	movlw	low _stepMot3
  3747  001D22  2466               	addwf	(_motCounter+8)^0,w,c
  3748  001D24  6ED9               	movwf	fsr2l,c
  3749  001D26  0E00               	movlw	high _stepMot3
  3750  001D28  2067               	addwfc	(_motCounter+9)^0,w,c
  3751  001D2A  6EDA               	movwf	fsr2h,c
  3752  001D2C  50DF               	movf	indf2,w,c
  3753  001D2E  6E8B               	movwf	139,c	;volatile
  3754  001D30                     l4080:
  3755  001D30  FFFF               	dw	65535	; assembler added errata NOP
  3756  001D32  EC23  F012         	call	_stepMade	;wreg free
  3757  001D36  5012               	movf	?_stepMade^0,w,c
  3758  001D38  1013               	iorwf	(?_stepMade+1)^0,w,c
  3759  001D3A  B4D8               	btfsc	status,2,c
  3760  001D3C  EFA2  F00E         	goto	u3381
  3761  001D40  EFA5  F00E         	goto	u3380
  3762  001D44                     u3381:
  3763  001D44  FFFF               	dw	65535	; assembler added errata NOP
  3764  001D46  EF98  F00E         	goto	l4080
  3765  001D4A                     u3380:
  3766  001D4A  FFFF               	dw	65535	; assembler added errata NOP
  3767  001D4C  EF5D  F00E         	goto	l4066
  3768  001D50                     l4084:
  3769  001D50  FFFF               	dw	65535	; assembler added errata NOP
  3770                           
  3771                           ;motors.c: 609:     while(!returnTherm() || PORTDbits.RD7){
  3772  001D52  EC71  F012         	call	_returnTherm	;wreg free
  3773  001D56  5012               	movf	?_returnTherm^0,w,c
  3774  001D58  1013               	iorwf	(?_returnTherm+1)^0,w,c
  3775  001D5A  B4D8               	btfsc	status,2,c
  3776  001D5C  EFB2  F00E         	goto	u3391
  3777  001D60  EFB5  F00E         	goto	u3390
  3778  001D64                     u3391:
  3779  001D64  FFFF               	dw	65535	; assembler added errata NOP
  3780  001D66  EF62  F00E         	goto	l4068
  3781  001D6A                     u3390:
  3782  001D6A  FFFF               	dw	65535	; assembler added errata NOP
  3783  001D6C  BE83               	btfsc	131,7,c	;volatile
  3784  001D6E  EFBB  F00E         	goto	u3401
  3785  001D72  EFBE  F00E         	goto	u3400
  3786  001D76                     u3401:
  3787  001D76  FFFF               	dw	65535	; assembler added errata NOP
  3788  001D78  EF62  F00E         	goto	l4068
  3789  001D7C                     u3400:
  3790  001D7C                     l4088:
  3791  001D7C  FFFF               	dw	65535	; assembler added errata NOP
  3792                           
  3793                           ;motors.c: 652:     stopADC();
  3794  001D7E  ECB7  F012         	call	_stopADC	;wreg free
  3795  001D82                     
  3796                           ;motors.c: 655:     resetTherm();
  3797  001D82  EC92  F012         	call	_resetTherm	;wreg free
  3798  001D86                     
  3799                           ;motors.c: 658:     T0CONbits.TMR0ON = 0;
  3800  001D86  9ED5               	bcf	213,7,c	;volatile
  3801  001D88                     
  3802                           ;motors.c: 659:     T2CONbits.TMR2ON = 0;
  3803  001D88  94CA               	bcf	202,2,c	;volatile
  3804                           
  3805                           ;motors.c: 661:     TMR0 = 0;
  3806  001D8A  0E00               	movlw	0
  3807  001D8C  6ED7               	movwf	215,c	;volatile
  3808  001D8E  0E00               	movlw	0
  3809  001D90  6ED6               	movwf	214,c	;volatile
  3810                           
  3811                           ;motors.c: 662:     TMR2 = 0;
  3812  001D92  0E00               	movlw	0
  3813  001D94  6ECC               	movwf	204,c	;volatile
  3814  001D96                     
  3815                           ;motors.c: 665:     resetStep();
  3816  001D96  EC97  F012         	call	_resetStep	;wreg free
  3817  001D9A                     
  3818                           ;motors.c: 668:     if(PORTDbits.RD7){
  3819  001D9A  AE83               	btfss	131,7,c	;volatile
  3820  001D9C  EFD2  F00E         	goto	u3411
  3821  001DA0  EFD5  F00E         	goto	u3410
  3822  001DA4                     u3411:
  3823  001DA4  FFFF               	dw	65535	; assembler added errata NOP
  3824  001DA6  EFDA  F00E         	goto	l213
  3825  001DAA                     u3410:
  3826  001DAA  FFFF               	dw	65535	; assembler added errata NOP
  3827  001DAC                     
  3828                           ;motors.c: 669:         tm0Error = 2;
  3829  001DAC  0E00               	movlw	0
  3830  001DAE  6E51               	movwf	(_tm0Error+1)^0,c
  3831  001DB0  0E02               	movlw	2
  3832  001DB2  6E50               	movwf	_tm0Error^0,c
  3833  001DB4                     l213:
  3834  001DB4  FFFF               	dw	65535	; assembler added errata NOP
  3835                           
  3836                           ;motors.c: 672:     return(tm0Error);
  3837  001DB6  5050               	movf	_tm0Error^0,w,c
  3838  001DB8  0012               	return		;funcret
  3839  001DBA  FFFF               	dw	65535	; errata NOP
  3840  001DBC                     __end_of_touchTherm:
  3841                           	callstack 0
  3842                           
  3843 ;; *************** function _returnTherm *****************
  3844 ;; Defined at:
  3845 ;;		line 58 in file "adc.c"
  3846 ;; Parameters:    Size  Location     Type
  3847 ;;		None
  3848 ;; Auto vars:     Size  Location     Type
  3849 ;;		None
  3850 ;; Return value:  Size  Location     Type
  3851 ;;                  2   17[COMRAM] unsigned int 
  3852 ;; Registers used:
  3853 ;;		None
  3854 ;; Tracked objects:
  3855 ;;		On entry : 0/0
  3856 ;;		On exit  : 0/0
  3857 ;;		Unchanged: 0/0
  3858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3859 ;;      Params:         2       0       0       0       0       0       0
  3860 ;;      Locals:         0       0       0       0       0       0       0
  3861 ;;      Temps:          0       0       0       0       0       0       0
  3862 ;;      Totals:         2       0       0       0       0       0       0
  3863 ;;Total ram usage:        2 bytes
  3864 ;; Hardware stack levels used:    1
  3865 ;; Hardware stack levels required when called:    4
  3866 ;; This function calls:
  3867 ;;		Nothing
  3868 ;; This function is called by:
  3869 ;;		_touchTherm
  3870 ;; This function uses a non-reentrant model
  3871 ;;
  3872                           
  3873                           	psect	text20
  3874  0024E2                     __ptext20:
  3875                           	callstack 0
  3876  0024E2                     _returnTherm:
  3877                           	callstack 0
  3878  0024E2  FFFF               	dw	65535	; assembler added errata NOP
  3879  0024E4                     
  3880                           ;adc.c: 59:     return therm_rel;
  3881  0024E4  C05B  F012         	movff	_therm_rel,?_returnTherm	;volatile
  3882  0024E8  6A13               	clrf	(?_returnTherm+1)^0,c
  3883  0024EA  0012               	return		;funcret
  3884  0024EC  FFFF               	dw	65535	; errata NOP
  3885  0024EE                     __end_of_returnTherm:
  3886                           	callstack 0
  3887                           
  3888 ;; *************** function _touchObject *****************
  3889 ;; Defined at:
  3890 ;;		line 497 in file "motors.c"
  3891 ;; Parameters:    Size  Location     Type
  3892 ;;		None
  3893 ;; Auto vars:     Size  Location     Type
  3894 ;;		None
  3895 ;; Return value:  Size  Location     Type
  3896 ;;                  1    wreg      unsigned char 
  3897 ;; Registers used:
  3898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3899 ;; Tracked objects:
  3900 ;;		On entry : 0/0
  3901 ;;		On exit  : 0/0
  3902 ;;		Unchanged: 0/0
  3903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3904 ;;      Params:         0       0       0       0       0       0       0
  3905 ;;      Locals:         0       0       0       0       0       0       0
  3906 ;;      Temps:          0       0       0       0       0       0       0
  3907 ;;      Totals:         0       0       0       0       0       0       0
  3908 ;;Total ram usage:        0 bytes
  3909 ;; Hardware stack levels used:    1
  3910 ;; Hardware stack levels required when called:    5
  3911 ;; This function calls:
  3912 ;;		_resetStep
  3913 ;;		_resetTherm
  3914 ;;		_resetTouch
  3915 ;;		_returnTouch
  3916 ;;		_startADC
  3917 ;;		_stepMade
  3918 ;;		_stopADC
  3919 ;; This function is called by:
  3920 ;;		_executeData
  3921 ;; This function uses a non-reentrant model
  3922 ;;
  3923                           
  3924                           	psect	text21
  3925  001A64                     __ptext21:
  3926                           	callstack 0
  3927  001A64                     _touchObject:
  3928                           	callstack 0
  3929  001A64  FFFF               	dw	65535	; assembler added errata NOP
  3930  001A66                     
  3931                           ;motors.c: 503:     motCounter[2][1] = 1;
  3932  001A66  0E00               	movlw	0
  3933  001A68  6E69               	movwf	(_motCounter+11)^0,c
  3934  001A6A  0E01               	movlw	1
  3935  001A6C  6E68               	movwf	(_motCounter+10)^0,c
  3936  001A6E                     
  3937                           ;motors.c: 506:     T2CONbits.TMR2ON = 1;
  3938  001A6E  84CA               	bsf	202,2,c	;volatile
  3939                           
  3940                           ;motors.c: 508:     tm0Error = 0;
  3941  001A70  0E00               	movlw	0
  3942  001A72  6E51               	movwf	(_tm0Error+1)^0,c
  3943  001A74  0E00               	movlw	0
  3944  001A76  6E50               	movwf	_tm0Error^0,c
  3945                           
  3946                           ;motors.c: 509:     tm0Limit = 250;
  3947  001A78  0EFA               	movlw	250
  3948  001A7A  6E5D               	movwf	_tm0Limit^0,c
  3949  001A7C                     
  3950                           ;motors.c: 510:     T0CONbits.TMR0ON = 1;
  3951  001A7C  8ED5               	bsf	213,7,c	;volatile
  3952  001A7E                     l4020:
  3953  001A7E  FFFF               	dw	65535	; assembler added errata NOP
  3954                           
  3955                           ;motors.c: 513:     startADC();
  3956  001A80  EC88  F012         	call	_startADC	;wreg free
  3957                           
  3958                           ;motors.c: 516:     while(!returnTouch() || PORTDbits.RD7){
  3959  001A84  EF8A  F00D         	goto	l4038
  3960  001A88                     l4022:
  3961  001A88  FFFF               	dw	65535	; assembler added errata NOP
  3962                           
  3963                           ;motors.c: 519:         if(tm0Error){
  3964  001A8A  5050               	movf	_tm0Error^0,w,c
  3965  001A8C  1051               	iorwf	(_tm0Error+1)^0,w,c
  3966  001A8E  B4D8               	btfsc	status,2,c
  3967  001A90  EF4C  F00D         	goto	u3301
  3968  001A94  EF4F  F00D         	goto	u3300
  3969  001A98                     u3301:
  3970  001A98  FFFF               	dw	65535	; assembler added errata NOP
  3971  001A9A  EF56  F00D         	goto	l4026
  3972  001A9E                     u3300:
  3973  001A9E  FFFF               	dw	65535	; assembler added errata NOP
  3974  001AA0                     
  3975                           ;motors.c: 524:             tm0Error = 6;
  3976  001AA0  0E00               	movlw	0
  3977  001AA2  6E51               	movwf	(_tm0Error+1)^0,c
  3978  001AA4  0E06               	movlw	6
  3979  001AA6  6E50               	movwf	_tm0Error^0,c
  3980                           
  3981                           ;motors.c: 525:             break;
  3982  001AA8  EFA0  F00D         	goto	l4042
  3983  001AAC                     l4026:
  3984  001AAC  FFFF               	dw	65535	; assembler added errata NOP
  3985                           
  3986                           ;motors.c: 533:             motCounter[2][0] += motCounter[2][1];
  3987  001AAE  EE20  F068         	lfsr	2,_motCounter+10
  3988  001AB2  50DE               	movf	postinc2,w,c
  3989  001AB4  2666               	addwf	(_motCounter+8)^0,f,c
  3990  001AB6  50DD               	movf	postdec2,w,c
  3991  001AB8  2267               	addwfc	(_motCounter+9)^0,f,c
  3992  001ABA                     
  3993                           ;motors.c: 534:             if(motCounter[2][0] > 3){
  3994  001ABA  BE67               	btfsc	(_motCounter+9)^0,7,c
  3995  001ABC  EF69  F00D         	goto	u3311
  3996  001AC0  5067               	movf	(_motCounter+9)^0,w,c
  3997  001AC2  E10A               	bnz	u3310
  3998  001AC4  0E04               	movlw	4
  3999  001AC6  5C66               	subwf	(_motCounter+8)^0,w,c
  4000  001AC8  A0D8               	btfss	status,0,c
  4001  001ACA  EF69  F00D         	goto	u3311
  4002  001ACE  EF6C  F00D         	goto	u3310
  4003  001AD2                     u3311:
  4004  001AD2  FFFF               	dw	65535	; assembler added errata NOP
  4005  001AD4  EF71  F00D         	goto	l4032
  4006  001AD8                     u3310:
  4007  001AD8  FFFF               	dw	65535	; assembler added errata NOP
  4008  001ADA                     
  4009                           ;motors.c: 535:                 motCounter[2][0] = 0;
  4010  001ADA  0E00               	movlw	0
  4011  001ADC  6E67               	movwf	(_motCounter+9)^0,c
  4012  001ADE  0E00               	movlw	0
  4013  001AE0  6E66               	movwf	(_motCounter+8)^0,c
  4014  001AE2                     l4032:
  4015  001AE2  FFFF               	dw	65535	; assembler added errata NOP
  4016                           
  4017                           ;motors.c: 538:             LATC = stepMot3[motCounter[2][0]];
  4018  001AE4  0E84               	movlw	low _stepMot3
  4019  001AE6  2466               	addwf	(_motCounter+8)^0,w,c
  4020  001AE8  6ED9               	movwf	fsr2l,c
  4021  001AEA  0E00               	movlw	high _stepMot3
  4022  001AEC  2067               	addwfc	(_motCounter+9)^0,w,c
  4023  001AEE  6EDA               	movwf	fsr2h,c
  4024  001AF0  50DF               	movf	indf2,w,c
  4025  001AF2  6E8B               	movwf	139,c	;volatile
  4026  001AF4                     l4034:
  4027  001AF4  FFFF               	dw	65535	; assembler added errata NOP
  4028  001AF6  EC23  F012         	call	_stepMade	;wreg free
  4029  001AFA  5012               	movf	?_stepMade^0,w,c
  4030  001AFC  1013               	iorwf	(?_stepMade+1)^0,w,c
  4031  001AFE  B4D8               	btfsc	status,2,c
  4032  001B00  EF84  F00D         	goto	u3321
  4033  001B04  EF87  F00D         	goto	u3320
  4034  001B08                     u3321:
  4035  001B08  FFFF               	dw	65535	; assembler added errata NOP
  4036  001B0A  EF7A  F00D         	goto	l4034
  4037  001B0E                     u3320:
  4038  001B0E  FFFF               	dw	65535	; assembler added errata NOP
  4039  001B10  EF3F  F00D         	goto	l4020
  4040  001B14                     l4038:
  4041  001B14  FFFF               	dw	65535	; assembler added errata NOP
  4042                           
  4043                           ;motors.c: 516:     while(!returnTouch() || PORTDbits.RD7){
  4044  001B16  EC77  F012         	call	_returnTouch	;wreg free
  4045  001B1A  5012               	movf	?_returnTouch^0,w,c
  4046  001B1C  1013               	iorwf	(?_returnTouch+1)^0,w,c
  4047  001B1E  B4D8               	btfsc	status,2,c
  4048  001B20  EF94  F00D         	goto	u3331
  4049  001B24  EF97  F00D         	goto	u3330
  4050  001B28                     u3331:
  4051  001B28  FFFF               	dw	65535	; assembler added errata NOP
  4052  001B2A  EF44  F00D         	goto	l4022
  4053  001B2E                     u3330:
  4054  001B2E  FFFF               	dw	65535	; assembler added errata NOP
  4055  001B30  BE83               	btfsc	131,7,c	;volatile
  4056  001B32  EF9D  F00D         	goto	u3341
  4057  001B36  EFA0  F00D         	goto	u3340
  4058  001B3A                     u3341:
  4059  001B3A  FFFF               	dw	65535	; assembler added errata NOP
  4060  001B3C  EF44  F00D         	goto	l4022
  4061  001B40                     u3340:
  4062  001B40                     l4042:
  4063  001B40  FFFF               	dw	65535	; assembler added errata NOP
  4064                           
  4065                           ;motors.c: 557:     stopADC();
  4066  001B42  ECB7  F012         	call	_stopADC	;wreg free
  4067  001B46                     
  4068                           ;motors.c: 560:     resetTouch();
  4069  001B46  EC8D  F012         	call	_resetTouch	;wreg free
  4070  001B4A                     
  4071                           ;motors.c: 563:     T0CONbits.TMR0ON = 0;
  4072  001B4A  9ED5               	bcf	213,7,c	;volatile
  4073  001B4C                     
  4074                           ;motors.c: 564:     T2CONbits.TMR2ON = 0;
  4075  001B4C  94CA               	bcf	202,2,c	;volatile
  4076                           
  4077                           ;motors.c: 566:     TMR0 = 0;
  4078  001B4E  0E00               	movlw	0
  4079  001B50  6ED7               	movwf	215,c	;volatile
  4080  001B52  0E00               	movlw	0
  4081  001B54  6ED6               	movwf	214,c	;volatile
  4082                           
  4083                           ;motors.c: 567:     TMR2 = 0;
  4084  001B56  0E00               	movlw	0
  4085  001B58  6ECC               	movwf	204,c	;volatile
  4086  001B5A                     
  4087                           ;motors.c: 570:     resetStep();
  4088  001B5A  EC97  F012         	call	_resetStep	;wreg free
  4089  001B5E                     
  4090                           ;motors.c: 571:     resetTherm();
  4091  001B5E  EC92  F012         	call	_resetTherm	;wreg free
  4092  001B62                     
  4093                           ;motors.c: 574:     if(PORTDbits.RD7){
  4094  001B62  AE83               	btfss	131,7,c	;volatile
  4095  001B64  EFB6  F00D         	goto	u3351
  4096  001B68  EFB9  F00D         	goto	u3350
  4097  001B6C                     u3351:
  4098  001B6C  FFFF               	dw	65535	; assembler added errata NOP
  4099  001B6E  EFBE  F00D         	goto	l201
  4100  001B72                     u3350:
  4101  001B72  FFFF               	dw	65535	; assembler added errata NOP
  4102  001B74                     
  4103                           ;motors.c: 575:         tm0Error = 2;
  4104  001B74  0E00               	movlw	0
  4105  001B76  6E51               	movwf	(_tm0Error+1)^0,c
  4106  001B78  0E02               	movlw	2
  4107  001B7A  6E50               	movwf	_tm0Error^0,c
  4108  001B7C                     l201:
  4109  001B7C  FFFF               	dw	65535	; assembler added errata NOP
  4110                           
  4111                           ;motors.c: 578:     return(tm0Error);
  4112  001B7E  5050               	movf	_tm0Error^0,w,c
  4113  001B80  0012               	return		;funcret
  4114  001B82  FFFF               	dw	65535	; errata NOP
  4115  001B84                     __end_of_touchObject:
  4116                           	callstack 0
  4117                           
  4118 ;; *************** function _stopADC *****************
  4119 ;; Defined at:
  4120 ;;		line 44 in file "adc.c"
  4121 ;; Parameters:    Size  Location     Type
  4122 ;;		None
  4123 ;; Auto vars:     Size  Location     Type
  4124 ;;		None
  4125 ;; Return value:  Size  Location     Type
  4126 ;;                  1    wreg      void 
  4127 ;; Registers used:
  4128 ;;		None
  4129 ;; Tracked objects:
  4130 ;;		On entry : 0/0
  4131 ;;		On exit  : 0/0
  4132 ;;		Unchanged: 0/0
  4133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4134 ;;      Params:         0       0       0       0       0       0       0
  4135 ;;      Locals:         0       0       0       0       0       0       0
  4136 ;;      Temps:          0       0       0       0       0       0       0
  4137 ;;      Totals:         0       0       0       0       0       0       0
  4138 ;;Total ram usage:        0 bytes
  4139 ;; Hardware stack levels used:    1
  4140 ;; Hardware stack levels required when called:    4
  4141 ;; This function calls:
  4142 ;;		Nothing
  4143 ;; This function is called by:
  4144 ;;		_touchObject
  4145 ;;		_touchTherm
  4146 ;; This function uses a non-reentrant model
  4147 ;;
  4148                           
  4149                           	psect	text22
  4150  00256E                     __ptext22:
  4151                           	callstack 0
  4152  00256E                     _stopADC:
  4153                           	callstack 0
  4154  00256E  FFFF               	dw	65535	; assembler added errata NOP
  4155  002570                     
  4156                           ;adc.c: 45:     ADCON0bits.ADON = 0;
  4157  002570  90C2               	bcf	194,0,c	;volatile
  4158  002572  0012               	return		;funcret
  4159  002574  FFFF               	dw	65535	; errata NOP
  4160  002576                     __end_of_stopADC:
  4161                           	callstack 0
  4162                           
  4163 ;; *************** function _startADC *****************
  4164 ;; Defined at:
  4165 ;;		line 36 in file "adc.c"
  4166 ;; Parameters:    Size  Location     Type
  4167 ;;		None
  4168 ;; Auto vars:     Size  Location     Type
  4169 ;;		None
  4170 ;; Return value:  Size  Location     Type
  4171 ;;                  1    wreg      void 
  4172 ;; Registers used:
  4173 ;;		None
  4174 ;; Tracked objects:
  4175 ;;		On entry : 0/0
  4176 ;;		On exit  : 0/0
  4177 ;;		Unchanged: 0/0
  4178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4179 ;;      Params:         0       0       0       0       0       0       0
  4180 ;;      Locals:         0       0       0       0       0       0       0
  4181 ;;      Temps:          0       0       0       0       0       0       0
  4182 ;;      Totals:         0       0       0       0       0       0       0
  4183 ;;Total ram usage:        0 bytes
  4184 ;; Hardware stack levels used:    1
  4185 ;; Hardware stack levels required when called:    4
  4186 ;; This function calls:
  4187 ;;		Nothing
  4188 ;; This function is called by:
  4189 ;;		_touchObject
  4190 ;;		_touchTherm
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           	psect	text23
  4195  002510                     __ptext23:
  4196                           	callstack 0
  4197  002510                     _startADC:
  4198                           	callstack 0
  4199  002510  FFFF               	dw	65535	; assembler added errata NOP
  4200  002512                     
  4201                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  4202  002512  80C2               	bsf	194,0,c	;volatile
  4203                           
  4204                           ;adc.c: 38:     ADCON0bits.GODONE = 1;
  4205  002514  84C2               	bsf	194,2,c	;volatile
  4206  002516  0012               	return		;funcret
  4207  002518  FFFF               	dw	65535	; errata NOP
  4208  00251A                     __end_of_startADC:
  4209                           	callstack 0
  4210                           
  4211 ;; *************** function _returnTouch *****************
  4212 ;; Defined at:
  4213 ;;		line 51 in file "adc.c"
  4214 ;; Parameters:    Size  Location     Type
  4215 ;;		None
  4216 ;; Auto vars:     Size  Location     Type
  4217 ;;		None
  4218 ;; Return value:  Size  Location     Type
  4219 ;;                  2   17[COMRAM] unsigned int 
  4220 ;; Registers used:
  4221 ;;		None
  4222 ;; Tracked objects:
  4223 ;;		On entry : 0/0
  4224 ;;		On exit  : 0/0
  4225 ;;		Unchanged: 0/0
  4226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4227 ;;      Params:         2       0       0       0       0       0       0
  4228 ;;      Locals:         0       0       0       0       0       0       0
  4229 ;;      Temps:          0       0       0       0       0       0       0
  4230 ;;      Totals:         2       0       0       0       0       0       0
  4231 ;;Total ram usage:        2 bytes
  4232 ;; Hardware stack levels used:    1
  4233 ;; Hardware stack levels required when called:    4
  4234 ;; This function calls:
  4235 ;;		Nothing
  4236 ;; This function is called by:
  4237 ;;		_touchObject
  4238 ;; This function uses a non-reentrant model
  4239 ;;
  4240                           
  4241                           	psect	text24
  4242  0024EE                     __ptext24:
  4243                           	callstack 0
  4244  0024EE                     _returnTouch:
  4245                           	callstack 0
  4246  0024EE  FFFF               	dw	65535	; assembler added errata NOP
  4247  0024F0                     
  4248                           ;adc.c: 52:     return touch_rel;
  4249  0024F0  C05C  F012         	movff	_touch_rel,?_returnTouch	;volatile
  4250  0024F4  6A13               	clrf	(?_returnTouch+1)^0,c
  4251  0024F6  0012               	return		;funcret
  4252  0024F8  FFFF               	dw	65535	; errata NOP
  4253  0024FA                     __end_of_returnTouch:
  4254                           	callstack 0
  4255                           
  4256 ;; *************** function _resetTouch *****************
  4257 ;; Defined at:
  4258 ;;		line 65 in file "adc.c"
  4259 ;; Parameters:    Size  Location     Type
  4260 ;;		None
  4261 ;; Auto vars:     Size  Location     Type
  4262 ;;		None
  4263 ;; Return value:  Size  Location     Type
  4264 ;;                  1    wreg      void 
  4265 ;; Registers used:
  4266 ;;		wreg, status,2
  4267 ;; Tracked objects:
  4268 ;;		On entry : 0/0
  4269 ;;		On exit  : 0/0
  4270 ;;		Unchanged: 0/0
  4271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4272 ;;      Params:         0       0       0       0       0       0       0
  4273 ;;      Locals:         0       0       0       0       0       0       0
  4274 ;;      Temps:          0       0       0       0       0       0       0
  4275 ;;      Totals:         0       0       0       0       0       0       0
  4276 ;;Total ram usage:        0 bytes
  4277 ;; Hardware stack levels used:    1
  4278 ;; Hardware stack levels required when called:    4
  4279 ;; This function calls:
  4280 ;;		Nothing
  4281 ;; This function is called by:
  4282 ;;		_touchObject
  4283 ;; This function uses a non-reentrant model
  4284 ;;
  4285                           
  4286                           	psect	text25
  4287  00251A                     __ptext25:
  4288                           	callstack 0
  4289  00251A                     _resetTouch:
  4290                           	callstack 0
  4291  00251A  FFFF               	dw	65535	; assembler added errata NOP
  4292  00251C                     
  4293                           ;adc.c: 66:     touch_rel = 0;
  4294  00251C  0E00               	movlw	0
  4295  00251E  6E5C               	movwf	_touch_rel^0,c	;volatile
  4296  002520  0012               	return		;funcret
  4297  002522  FFFF               	dw	65535	; errata NOP
  4298  002524                     __end_of_resetTouch:
  4299                           	callstack 0
  4300                           
  4301 ;; *************** function _resetTherm *****************
  4302 ;; Defined at:
  4303 ;;		line 72 in file "adc.c"
  4304 ;; Parameters:    Size  Location     Type
  4305 ;;		None
  4306 ;; Auto vars:     Size  Location     Type
  4307 ;;		None
  4308 ;; Return value:  Size  Location     Type
  4309 ;;                  1    wreg      void 
  4310 ;; Registers used:
  4311 ;;		wreg, status,2
  4312 ;; Tracked objects:
  4313 ;;		On entry : 0/0
  4314 ;;		On exit  : 0/0
  4315 ;;		Unchanged: 0/0
  4316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4317 ;;      Params:         0       0       0       0       0       0       0
  4318 ;;      Locals:         0       0       0       0       0       0       0
  4319 ;;      Temps:          0       0       0       0       0       0       0
  4320 ;;      Totals:         0       0       0       0       0       0       0
  4321 ;;Total ram usage:        0 bytes
  4322 ;; Hardware stack levels used:    1
  4323 ;; Hardware stack levels required when called:    4
  4324 ;; This function calls:
  4325 ;;		Nothing
  4326 ;; This function is called by:
  4327 ;;		_touchObject
  4328 ;;		_touchTherm
  4329 ;; This function uses a non-reentrant model
  4330 ;;
  4331                           
  4332                           	psect	text26
  4333  002524                     __ptext26:
  4334                           	callstack 0
  4335  002524                     _resetTherm:
  4336                           	callstack 0
  4337  002524  FFFF               	dw	65535	; assembler added errata NOP
  4338  002526                     
  4339                           ;adc.c: 73:     therm_rel = 0;
  4340  002526  0E00               	movlw	0
  4341  002528  6E5B               	movwf	_therm_rel^0,c	;volatile
  4342  00252A  0012               	return		;funcret
  4343  00252C  FFFF               	dw	65535	; errata NOP
  4344  00252E                     __end_of_resetTherm:
  4345                           	callstack 0
  4346                           
  4347 ;; *************** function _rotateObj *****************
  4348 ;; Defined at:
  4349 ;;		line 752 in file "motors.c"
  4350 ;; Parameters:    Size  Location     Type
  4351 ;;  rotAngle        1    wreg     unsigned char 
  4352 ;; Auto vars:     Size  Location     Type
  4353 ;;  rotAngle        1    2[BANK0 ] unsigned char 
  4354 ;;  i               2    5[BANK0 ] unsigned int 
  4355 ;;  totStep         2    3[BANK0 ] int 
  4356 ;; Return value:  Size  Location     Type
  4357 ;;                  1    wreg      void 
  4358 ;; Registers used:
  4359 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4360 ;; Tracked objects:
  4361 ;;		On entry : 0/0
  4362 ;;		On exit  : 0/0
  4363 ;;		Unchanged: 0/0
  4364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4365 ;;      Params:         0       0       0       0       0       0       0
  4366 ;;      Locals:         0       5       0       0       0       0       0
  4367 ;;      Temps:          0       2       0       0       0       0       0
  4368 ;;      Totals:         0       7       0       0       0       0       0
  4369 ;;Total ram usage:        7 bytes
  4370 ;; Hardware stack levels used:    1
  4371 ;; Hardware stack levels required when called:    5
  4372 ;; This function calls:
  4373 ;;		___fldiv
  4374 ;;		___fltol
  4375 ;;		___xxtofl
  4376 ;;		_resetStep
  4377 ;;		_stepMade
  4378 ;; This function is called by:
  4379 ;;		_executeData
  4380 ;; This function uses a non-reentrant model
  4381 ;;
  4382                           
  4383                           	psect	text27
  4384  001FD0                     __ptext27:
  4385                           	callstack 0
  4386  001FD0                     _rotateObj:
  4387                           	callstack 0
  4388  001FD0  FFFF               	dw	65535	; assembler added errata NOP
  4389                           
  4390                           ;incstack = 0
  4391                           ;rotateObj@rotAngle stored from wreg
  4392  001FD2  0100               	movlb	0	; () banked
  4393  001FD4  6FEF               	movwf	rotateObj@rotAngle& (0+255),b
  4394  001FD6                     
  4395                           ;motors.c: 753:     static const float stepAngle = 0.08789;;motors.c: 754:     static ch
      +                          ar rotSequence[] = {0b100100, 0b001100, 0b011000, 0b110000};;motors.c: 755:     unsigned
      +                           int i;;motors.c: 756:     int totStep = rotAngle/stepAngle;
  4396  001FD6  0EAC               	movlw	172
  4397  001FD8  6E24               	movwf	___fldiv@a^0,c
  4398  001FDA  0EFF               	movlw	255
  4399  001FDC  6E25               	movwf	(___fldiv@a+1)^0,c
  4400  001FDE  0EB3               	movlw	179
  4401  001FE0  6E26               	movwf	(___fldiv@a+2)^0,c
  4402  001FE2  0E3D               	movlw	61
  4403  001FE4  6E27               	movwf	(___fldiv@a+3)^0,c
  4404  001FE6  0100               	movlb	0	; () banked
  4405  001FE8  51EF               	movf	rotateObj@rotAngle& (0+255),w,b
  4406  001FEA  6E12               	movwf	___xxtofl@val^0,c
  4407  001FEC  6A13               	clrf	(___xxtofl@val+1)^0,c
  4408  001FEE  6A14               	clrf	(___xxtofl@val+2)^0,c
  4409  001FF0  6A15               	clrf	(___xxtofl@val+3)^0,c
  4410  001FF2  0E01               	movlw	1
  4411  001FF4  EC4A  F009         	call	___xxtofl
  4412  001FF8  C012  F020         	movff	?___xxtofl,___fldiv@b
  4413  001FFC  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4414  002000  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4415  002004  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4416  002008  EC09  F003         	call	___fldiv	;wreg free
  4417  00200C  C020  F039         	movff	?___fldiv,___fltol@f1
  4418  002010  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4419  002014  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4420  002018  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4421  00201C  EC97  F00C         	call	___fltol	;wreg free
  4422  002020  C039  F0F0         	movff	?___fltol,rotateObj@totStep
  4423  002024  C03A  F0F1         	movff	?___fltol+1,rotateObj@totStep+1
  4424  002028                     
  4425                           ;motors.c: 759:     for(i = 0; i < totStep; i++){
  4426  002028  0E00               	movlw	0
  4427  00202A  0100               	movlb	0	; () banked
  4428  00202C  6FF3               	movwf	(rotateObj@i+1)& (0+255),b
  4429  00202E  0E00               	movlw	0
  4430  002030  6FF2               	movwf	rotateObj@i& (0+255),b
  4431  002032  EF41  F010         	goto	l4148
  4432  002036                     l4136:
  4433  002036  FFFF               	dw	65535	; assembler added errata NOP
  4434                           
  4435                           ; BSR set to: 0
  4436                           ;motors.c: 761:         LATD &= 0xC3;
  4437  002038  0EC3               	movlw	195
  4438  00203A  168C               	andwf	140,f,c	;volatile
  4439  00203C                     
  4440                           ; BSR set to: 0
  4441                           ;motors.c: 763:         LATD |= rotSequence[i%4];
  4442  00203C  0E03               	movlw	3
  4443  00203E  15F2               	andwf	rotateObj@i& (0+255),w,b
  4444  002040  6FED               	movwf	??_rotateObj& (0+255),b
  4445  002042  0E00               	movlw	0
  4446  002044  15F3               	andwf	(rotateObj@i+1)& (0+255),w,b
  4447  002046  6FEE               	movwf	(??_rotateObj+1)& (0+255),b
  4448  002048  0E80               	movlw	low rotateObj@rotSequence
  4449  00204A  25ED               	addwf	??_rotateObj& (0+255),w,b
  4450  00204C  6ED9               	movwf	fsr2l,c
  4451  00204E  0E00               	movlw	high rotateObj@rotSequence
  4452  002050  21EE               	addwfc	(??_rotateObj+1)& (0+255),w,b
  4453  002052  6EDA               	movwf	fsr2h,c
  4454  002054  50DF               	movf	indf2,w,c
  4455  002056  128C               	iorwf	140,f,c	;volatile
  4456  002058                     
  4457                           ; BSR set to: 0
  4458                           ;motors.c: 766:         T2CONbits.TMR2ON = 1;
  4459  002058  84CA               	bsf	202,2,c	;volatile
  4460  00205A                     l4142:
  4461  00205A  FFFF               	dw	65535	; assembler added errata NOP
  4462  00205C  EC23  F012         	call	_stepMade	;wreg free
  4463  002060  5012               	movf	?_stepMade^0,w,c
  4464  002062  1013               	iorwf	(?_stepMade+1)^0,w,c
  4465  002064  B4D8               	btfsc	status,2,c
  4466  002066  EF37  F010         	goto	u3461
  4467  00206A  EF3A  F010         	goto	u3460
  4468  00206E                     u3461:
  4469  00206E  FFFF               	dw	65535	; assembler added errata NOP
  4470  002070  EF2D  F010         	goto	l4142
  4471  002074                     u3460:
  4472  002074  FFFF               	dw	65535	; assembler added errata NOP
  4473  002076                     
  4474                           ;motors.c: 768:         T2CONbits.TMR2ON = 0;
  4475  002076  94CA               	bcf	202,2,c	;volatile
  4476  002078                     
  4477                           ;motors.c: 769:         TMR2 = 0;
  4478  002078  0E00               	movlw	0
  4479  00207A  6ECC               	movwf	204,c	;volatile
  4480  00207C                     
  4481                           ;motors.c: 770:     }
  4482  00207C  0100               	movlb	0	; () banked
  4483  00207E  4BF2               	infsnz	rotateObj@i& (0+255),f,b
  4484  002080  2BF3               	incf	(rotateObj@i+1)& (0+255),f,b
  4485  002082                     l4148:
  4486  002082  FFFF               	dw	65535	; assembler added errata NOP
  4487                           
  4488                           ; BSR set to: 0
  4489  002084  51F0               	movf	rotateObj@totStep& (0+255),w,b
  4490  002086  5DF2               	subwf	rotateObj@i& (0+255),w,b
  4491  002088  51F1               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4492  00208A  59F3               	subwfb	(rotateObj@i+1)& (0+255),w,b
  4493  00208C  A0D8               	btfss	status,0,c
  4494  00208E  EF4B  F010         	goto	u3471
  4495  002092  EF4E  F010         	goto	u3470
  4496  002096                     u3471:
  4497  002096  FFFF               	dw	65535	; assembler added errata NOP
  4498  002098  EF1B  F010         	goto	l4136
  4499  00209C                     u3470:
  4500  00209C  FFFF               	dw	65535	; assembler added errata NOP
  4501  00209E                     
  4502                           ; BSR set to: 0
  4503                           ;motors.c: 773:     TMR2 = 0;
  4504  00209E  0E00               	movlw	0
  4505  0020A0  6ECC               	movwf	204,c	;volatile
  4506  0020A2                     
  4507                           ; BSR set to: 0
  4508                           ;motors.c: 776:     resetStep();
  4509  0020A2  EC97  F012         	call	_resetStep	;wreg free
  4510  0020A6  0012               	return		;funcret
  4511  0020A8  FFFF               	dw	65535	; errata NOP
  4512  0020AA                     __end_of_rotateObj:
  4513                           	callstack 0
  4514                           
  4515 ;; *************** function ___xxtofl *****************
  4516 ;; Defined at:
  4517 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4518 ;; Parameters:    Size  Location     Type
  4519 ;;  sign            1    wreg     unsigned char 
  4520 ;;  val             4   17[COMRAM] long 
  4521 ;; Auto vars:     Size  Location     Type
  4522 ;;  sign            1   25[COMRAM] unsigned char 
  4523 ;;  arg             4   27[COMRAM] unsigned long 
  4524 ;;  exp             1   26[COMRAM] unsigned char 
  4525 ;; Return value:  Size  Location     Type
  4526 ;;                  4   17[COMRAM] unsigned char 
  4527 ;; Registers used:
  4528 ;;		wreg, status,2, status,0
  4529 ;; Tracked objects:
  4530 ;;		On entry : 0/0
  4531 ;;		On exit  : 0/0
  4532 ;;		Unchanged: 0/0
  4533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4534 ;;      Params:         4       0       0       0       0       0       0
  4535 ;;      Locals:         6       0       0       0       0       0       0
  4536 ;;      Temps:          4       0       0       0       0       0       0
  4537 ;;      Totals:        14       0       0       0       0       0       0
  4538 ;;Total ram usage:       14 bytes
  4539 ;; Hardware stack levels used:    1
  4540 ;; Hardware stack levels required when called:    4
  4541 ;; This function calls:
  4542 ;;		Nothing
  4543 ;; This function is called by:
  4544 ;;		_rotateObj
  4545 ;; This function uses a non-reentrant model
  4546 ;;
  4547                           
  4548                           	psect	text28
  4549  001294                     __ptext28:
  4550                           	callstack 0
  4551  001294                     ___xxtofl:
  4552                           	callstack 0
  4553  001294  FFFF               	dw	65535	; assembler added errata NOP
  4554                           
  4555                           ;incstack = 0
  4556                           ;___xxtofl@sign stored from wreg
  4557  001296  6E1A               	movwf	___xxtofl@sign^0,c
  4558  001298  501A               	movf	___xxtofl@sign^0,w,c
  4559  00129A  B4D8               	btfsc	status,2,c
  4560  00129C  EF52  F009         	goto	u2961
  4561  0012A0  EF55  F009         	goto	u2960
  4562  0012A4                     u2961:
  4563  0012A4  FFFF               	dw	65535	; assembler added errata NOP
  4564  0012A6  EF7A  F009         	goto	l1280
  4565  0012AA                     u2960:
  4566  0012AA  FFFF               	dw	65535	; assembler added errata NOP
  4567  0012AC  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4568  0012AE  EF5E  F009         	goto	u2970
  4569  0012B2  EF5B  F009         	goto	u2971
  4570  0012B6                     u2971:
  4571  0012B6  FFFF               	dw	65535	; assembler added errata NOP
  4572  0012B8  EF7A  F009         	goto	l1280
  4573  0012BC                     u2970:
  4574  0012BC  FFFF               	dw	65535	; assembler added errata NOP
  4575  0012BE  C012  F016         	movff	___xxtofl@val,??___xxtofl
  4576  0012C2  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  4577  0012C6  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  4578  0012CA  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  4579  0012CE  1E16               	comf	??___xxtofl^0,f,c
  4580  0012D0  1E17               	comf	(??___xxtofl+1)^0,f,c
  4581  0012D2  1E18               	comf	(??___xxtofl+2)^0,f,c
  4582  0012D4  1E19               	comf	(??___xxtofl+3)^0,f,c
  4583  0012D6  2A16               	incf	??___xxtofl^0,f,c
  4584  0012D8  0E00               	movlw	0
  4585  0012DA  2217               	addwfc	(??___xxtofl+1)^0,f,c
  4586  0012DC  2218               	addwfc	(??___xxtofl+2)^0,f,c
  4587  0012DE  2219               	addwfc	(??___xxtofl+3)^0,f,c
  4588  0012E0  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  4589  0012E4  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4590  0012E8  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4591  0012EC  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4592  0012F0  EF83  F009         	goto	l3868
  4593  0012F4                     l1280:
  4594  0012F4  FFFF               	dw	65535	; assembler added errata NOP
  4595  0012F6  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  4596  0012FA  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4597  0012FE  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4598  001302  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4599  001306                     l3868:
  4600  001306  FFFF               	dw	65535	; assembler added errata NOP
  4601  001308  5012               	movf	___xxtofl@val^0,w,c
  4602  00130A  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  4603  00130C  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  4604  00130E  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  4605  001310  A4D8               	btfss	status,2,c
  4606  001312  EF8D  F009         	goto	u2981
  4607  001316  EF90  F009         	goto	u2980
  4608  00131A                     u2981:
  4609  00131A  FFFF               	dw	65535	; assembler added errata NOP
  4610  00131C  EF9B  F009         	goto	l3874
  4611  001320                     u2980:
  4612  001320  FFFF               	dw	65535	; assembler added errata NOP
  4613  001322  0E00               	movlw	0
  4614  001324  6E12               	movwf	?___xxtofl^0,c
  4615  001326  0E00               	movlw	0
  4616  001328  6E13               	movwf	(?___xxtofl+1)^0,c
  4617  00132A  0E00               	movlw	0
  4618  00132C  6E14               	movwf	(?___xxtofl+2)^0,c
  4619  00132E  0E00               	movlw	0
  4620  001330  6E15               	movwf	(?___xxtofl+3)^0,c
  4621  001332  EF43  F00A         	goto	l1283
  4622  001336                     l3874:
  4623  001336  FFFF               	dw	65535	; assembler added errata NOP
  4624  001338  0E96               	movlw	150
  4625  00133A  6E1B               	movwf	___xxtofl@exp^0,c
  4626  00133C  EFA7  F009         	goto	l3878
  4627  001340                     l3876:
  4628  001340  FFFF               	dw	65535	; assembler added errata NOP
  4629  001342  2A1B               	incf	___xxtofl@exp^0,f,c
  4630  001344  90D8               	bcf	status,0,c
  4631  001346  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4632  001348  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4633  00134A  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4634  00134C  321C               	rrcf	___xxtofl@arg^0,f,c
  4635  00134E                     l3878:
  4636  00134E  FFFF               	dw	65535	; assembler added errata NOP
  4637  001350  0E00               	movlw	0
  4638  001352  141C               	andwf	___xxtofl@arg^0,w,c
  4639  001354  6E16               	movwf	??___xxtofl^0,c
  4640  001356  0E00               	movlw	0
  4641  001358  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4642  00135A  6E17               	movwf	(??___xxtofl+1)^0,c
  4643  00135C  0E00               	movlw	0
  4644  00135E  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4645  001360  6E18               	movwf	(??___xxtofl+2)^0,c
  4646  001362  0EFE               	movlw	254
  4647  001364  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4648  001366  6E19               	movwf	(??___xxtofl+3)^0,c
  4649  001368  5016               	movf	??___xxtofl^0,w,c
  4650  00136A  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4651  00136C  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4652  00136E  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4653  001370  A4D8               	btfss	status,2,c
  4654  001372  EFBD  F009         	goto	u2991
  4655  001376  EFC0  F009         	goto	u2990
  4656  00137A                     u2991:
  4657  00137A  FFFF               	dw	65535	; assembler added errata NOP
  4658  00137C  EFA0  F009         	goto	l3876
  4659  001380                     u2990:
  4660  001380  FFFF               	dw	65535	; assembler added errata NOP
  4661  001382  EFD0  F009         	goto	l1287
  4662  001386                     l3880:
  4663  001386  FFFF               	dw	65535	; assembler added errata NOP
  4664  001388  2A1B               	incf	___xxtofl@exp^0,f,c
  4665  00138A  0E01               	movlw	1
  4666  00138C  261C               	addwf	___xxtofl@arg^0,f,c
  4667  00138E  0E00               	movlw	0
  4668  001390  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4669  001392  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4670  001394  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4671  001396  90D8               	bcf	status,0,c
  4672  001398  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4673  00139A  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4674  00139C  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4675  00139E  321C               	rrcf	___xxtofl@arg^0,f,c
  4676  0013A0                     l1287:
  4677  0013A0  FFFF               	dw	65535	; assembler added errata NOP
  4678  0013A2  0E00               	movlw	0
  4679  0013A4  141C               	andwf	___xxtofl@arg^0,w,c
  4680  0013A6  6E16               	movwf	??___xxtofl^0,c
  4681  0013A8  0E00               	movlw	0
  4682  0013AA  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4683  0013AC  6E17               	movwf	(??___xxtofl+1)^0,c
  4684  0013AE  0E00               	movlw	0
  4685  0013B0  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4686  0013B2  6E18               	movwf	(??___xxtofl+2)^0,c
  4687  0013B4  0EFF               	movlw	255
  4688  0013B6  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4689  0013B8  6E19               	movwf	(??___xxtofl+3)^0,c
  4690  0013BA  5016               	movf	??___xxtofl^0,w,c
  4691  0013BC  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4692  0013BE  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4693  0013C0  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4694  0013C2  A4D8               	btfss	status,2,c
  4695  0013C4  EFE6  F009         	goto	u3001
  4696  0013C8  EFE9  F009         	goto	u3000
  4697  0013CC                     u3001:
  4698  0013CC  FFFF               	dw	65535	; assembler added errata NOP
  4699  0013CE  EFC3  F009         	goto	l3880
  4700  0013D2                     u3000:
  4701  0013D2  FFFF               	dw	65535	; assembler added errata NOP
  4702  0013D4  EFF3  F009         	goto	l3888
  4703  0013D8                     l3886:
  4704  0013D8  FFFF               	dw	65535	; assembler added errata NOP
  4705  0013DA  061B               	decf	___xxtofl@exp^0,f,c
  4706  0013DC  90D8               	bcf	status,0,c
  4707  0013DE  361C               	rlcf	___xxtofl@arg^0,f,c
  4708  0013E0  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4709  0013E2  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4710  0013E4  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4711  0013E6                     l3888:
  4712  0013E6  FFFF               	dw	65535	; assembler added errata NOP
  4713  0013E8  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4714  0013EA  EFF9  F009         	goto	u3011
  4715  0013EE  EFFC  F009         	goto	u3010
  4716  0013F2                     u3011:
  4717  0013F2  FFFF               	dw	65535	; assembler added errata NOP
  4718  0013F4  EF06  F00A         	goto	l1294
  4719  0013F8                     u3010:
  4720  0013F8  FFFF               	dw	65535	; assembler added errata NOP
  4721  0013FA  0E02               	movlw	2
  4722  0013FC  601B               	cpfslt	___xxtofl@exp^0,c
  4723  0013FE  EF03  F00A         	goto	u3021
  4724  001402  EF06  F00A         	goto	u3020
  4725  001406                     u3021:
  4726  001406  FFFF               	dw	65535	; assembler added errata NOP
  4727  001408  EFEC  F009         	goto	l3886
  4728  00140C                     u3020:
  4729  00140C                     l1294:
  4730  00140C  FFFF               	dw	65535	; assembler added errata NOP
  4731  00140E  B01B               	btfsc	___xxtofl@exp^0,0,c
  4732  001410  EF0C  F00A         	goto	u3031
  4733  001414  EF0F  F00A         	goto	u3030
  4734  001418                     u3031:
  4735  001418  FFFF               	dw	65535	; assembler added errata NOP
  4736  00141A  EF11  F00A         	goto	l3894
  4737  00141E                     u3030:
  4738  00141E  FFFF               	dw	65535	; assembler added errata NOP
  4739  001420  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  4740  001422                     l3894:
  4741  001422  FFFF               	dw	65535	; assembler added errata NOP
  4742  001424  90D8               	bcf	status,0,c
  4743  001426  321B               	rrcf	___xxtofl@exp^0,f,c
  4744  001428  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  4745  00142C  6A17               	clrf	(??___xxtofl+1)^0,c
  4746  00142E  6A18               	clrf	(??___xxtofl+2)^0,c
  4747  001430  6A19               	clrf	(??___xxtofl+3)^0,c
  4748  001432  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  4749  001436  6A18               	clrf	(??___xxtofl+2)^0,c
  4750  001438  6A17               	clrf	(??___xxtofl+1)^0,c
  4751  00143A  6A16               	clrf	??___xxtofl^0,c
  4752  00143C  5016               	movf	??___xxtofl^0,w,c
  4753  00143E  121C               	iorwf	___xxtofl@arg^0,f,c
  4754  001440  5017               	movf	(??___xxtofl+1)^0,w,c
  4755  001442  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4756  001444  5018               	movf	(??___xxtofl+2)^0,w,c
  4757  001446  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4758  001448  5019               	movf	(??___xxtofl+3)^0,w,c
  4759  00144A  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4760  00144C  501A               	movf	___xxtofl@sign^0,w,c
  4761  00144E  B4D8               	btfsc	status,2,c
  4762  001450  EF2C  F00A         	goto	u3041
  4763  001454  EF2F  F00A         	goto	u3040
  4764  001458                     u3041:
  4765  001458  FFFF               	dw	65535	; assembler added errata NOP
  4766  00145A  EF3A  F00A         	goto	l3904
  4767  00145E                     u3040:
  4768  00145E  FFFF               	dw	65535	; assembler added errata NOP
  4769  001460  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4770  001462  EF38  F00A         	goto	u3050
  4771  001466  EF35  F00A         	goto	u3051
  4772  00146A                     u3051:
  4773  00146A  FFFF               	dw	65535	; assembler added errata NOP
  4774  00146C  EF3A  F00A         	goto	l3904
  4775  001470                     u3050:
  4776  001470  FFFF               	dw	65535	; assembler added errata NOP
  4777  001472  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  4778  001474                     l3904:
  4779  001474  FFFF               	dw	65535	; assembler added errata NOP
  4780  001476  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  4781  00147A  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  4782  00147E  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  4783  001482  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  4784  001486                     l1283:
  4785  001486  FFFF               	dw	65535	; assembler added errata NOP
  4786  001488  0012               	return		;funcret
  4787  00148A  FFFF               	dw	65535	; errata NOP
  4788  00148C                     __end_of___xxtofl:
  4789                           	callstack 0
  4790                           
  4791 ;; *************** function ___fltol *****************
  4792 ;; Defined at:
  4793 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  4794 ;; Parameters:    Size  Location     Type
  4795 ;;  f1              4   56[COMRAM] unsigned char 
  4796 ;; Auto vars:     Size  Location     Type
  4797 ;;  exp1            1   65[COMRAM] unsigned char 
  4798 ;;  sign1           1   64[COMRAM] unsigned char 
  4799 ;; Return value:  Size  Location     Type
  4800 ;;                  4   56[COMRAM] long 
  4801 ;; Registers used:
  4802 ;;		wreg, status,2, status,0
  4803 ;; Tracked objects:
  4804 ;;		On entry : 0/0
  4805 ;;		On exit  : 0/0
  4806 ;;		Unchanged: 0/0
  4807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4808 ;;      Params:         4       0       0       0       0       0       0
  4809 ;;      Locals:         2       0       0       0       0       0       0
  4810 ;;      Temps:          4       0       0       0       0       0       0
  4811 ;;      Totals:        10       0       0       0       0       0       0
  4812 ;;Total ram usage:       10 bytes
  4813 ;; Hardware stack levels used:    1
  4814 ;; Hardware stack levels required when called:    4
  4815 ;; This function calls:
  4816 ;;		Nothing
  4817 ;; This function is called by:
  4818 ;;		_rotateObj
  4819 ;; This function uses a non-reentrant model
  4820 ;;
  4821                           
  4822                           	psect	text29
  4823  00192E                     __ptext29:
  4824                           	callstack 0
  4825  00192E                     ___fltol:
  4826                           	callstack 0
  4827  00192E  FFFF               	dw	65535	; assembler added errata NOP
  4828  001930  343B               	rlcf	(___fltol@f1+2)^0,w,c
  4829  001932  343C               	rlcf	(___fltol@f1+3)^0,w,c
  4830  001934  6E42               	movwf	___fltol@exp1^0,c
  4831  001936  5042               	movf	___fltol@exp1^0,w,c
  4832  001938  A4D8               	btfss	status,2,c
  4833  00193A  EFA1  F00C         	goto	u2891
  4834  00193E  EFA4  F00C         	goto	u2890
  4835  001942                     u2891:
  4836  001942  FFFF               	dw	65535	; assembler added errata NOP
  4837  001944  EFB0  F00C         	goto	l3824
  4838  001948                     u2890:
  4839  001948  FFFF               	dw	65535	; assembler added errata NOP
  4840  00194A                     l3820:
  4841  00194A  FFFF               	dw	65535	; assembler added errata NOP
  4842  00194C  0E00               	movlw	0
  4843  00194E  6E39               	movwf	?___fltol^0,c
  4844  001950  0E00               	movlw	0
  4845  001952  6E3A               	movwf	(?___fltol+1)^0,c
  4846  001954  0E00               	movlw	0
  4847  001956  6E3B               	movwf	(?___fltol+2)^0,c
  4848  001958  0E00               	movlw	0
  4849  00195A  6E3C               	movwf	(?___fltol+3)^0,c
  4850  00195C  EF2F  F00D         	goto	l922
  4851  001960                     l3824:
  4852  001960  FFFF               	dw	65535	; assembler added errata NOP
  4853  001962  C039  F03D         	movff	___fltol@f1,??___fltol
  4854  001966  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  4855  00196A  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  4856  00196E  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  4857  001972  0E20               	movlw	32
  4858  001974  EFC2  F00C         	goto	u2900
  4859  001978                     u2905:
  4860  001978  FFFF               	dw	65535	; assembler added errata NOP
  4861  00197A  90D8               	bcf	status,0,c
  4862  00197C  3240               	rrcf	(??___fltol+3)^0,f,c
  4863  00197E  323F               	rrcf	(??___fltol+2)^0,f,c
  4864  001980  323E               	rrcf	(??___fltol+1)^0,f,c
  4865  001982  323D               	rrcf	??___fltol^0,f,c
  4866  001984                     u2900:
  4867  001984  FFFF               	dw	65535	; assembler added errata NOP
  4868  001986  2EE8               	decfsz	wreg,f,c
  4869  001988  EFBC  F00C         	goto	u2905
  4870  00198C  503D               	movf	??___fltol^0,w,c
  4871  00198E  6E41               	movwf	___fltol@sign1^0,c
  4872  001990  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  4873  001992  0EFF               	movlw	255
  4874  001994  1639               	andwf	___fltol@f1^0,f,c
  4875  001996  0EFF               	movlw	255
  4876  001998  163A               	andwf	(___fltol@f1+1)^0,f,c
  4877  00199A  0EFF               	movlw	255
  4878  00199C  163B               	andwf	(___fltol@f1+2)^0,f,c
  4879  00199E  0E00               	movlw	0
  4880  0019A0  163C               	andwf	(___fltol@f1+3)^0,f,c
  4881  0019A2  0E96               	movlw	150
  4882  0019A4  5E42               	subwf	___fltol@exp1^0,f,c
  4883  0019A6  BE42               	btfsc	___fltol@exp1^0,7,c
  4884  0019A8  EFDB  F00C         	goto	u2910
  4885  0019AC  EFD8  F00C         	goto	u2911
  4886  0019B0                     u2911:
  4887  0019B0  FFFF               	dw	65535	; assembler added errata NOP
  4888  0019B2  EFF5  F00C         	goto	l3844
  4889  0019B6                     u2910:
  4890  0019B6  FFFF               	dw	65535	; assembler added errata NOP
  4891  0019B8  5042               	movf	___fltol@exp1^0,w,c
  4892  0019BA  0A80               	xorlw	128
  4893  0019BC  0F97               	addlw	151
  4894  0019BE  B0D8               	btfsc	status,0,c
  4895  0019C0  EFE4  F00C         	goto	u2921
  4896  0019C4  EFE7  F00C         	goto	u2920
  4897  0019C8                     u2921:
  4898  0019C8  FFFF               	dw	65535	; assembler added errata NOP
  4899  0019CA  EFEA  F00C         	goto	l3840
  4900  0019CE                     u2920:
  4901  0019CE  FFFF               	dw	65535	; assembler added errata NOP
  4902  0019D0  EFA5  F00C         	goto	l3820
  4903  0019D4                     l3840:
  4904  0019D4  FFFF               	dw	65535	; assembler added errata NOP
  4905  0019D6  90D8               	bcf	status,0,c
  4906  0019D8  323C               	rrcf	(___fltol@f1+3)^0,f,c
  4907  0019DA  323B               	rrcf	(___fltol@f1+2)^0,f,c
  4908  0019DC  323A               	rrcf	(___fltol@f1+1)^0,f,c
  4909  0019DE  3239               	rrcf	___fltol@f1^0,f,c
  4910  0019E0  3E42               	incfsz	___fltol@exp1^0,f,c
  4911  0019E2  EFEA  F00C         	goto	l3840
  4912  0019E6  EF13  F00D         	goto	l3854
  4913  0019EA                     l3844:
  4914  0019EA  FFFF               	dw	65535	; assembler added errata NOP
  4915  0019EC  0E1F               	movlw	31
  4916  0019EE  6442               	cpfsgt	___fltol@exp1^0,c
  4917  0019F0  EFFC  F00C         	goto	u2931
  4918  0019F4  EFFF  F00C         	goto	u2930
  4919  0019F8                     u2931:
  4920  0019F8  FFFF               	dw	65535	; assembler added errata NOP
  4921  0019FA  EF09  F00D         	goto	l3852
  4922  0019FE                     u2930:
  4923  0019FE  FFFF               	dw	65535	; assembler added errata NOP
  4924  001A00  EFA5  F00C         	goto	l3820
  4925  001A04                     l3850:
  4926  001A04  FFFF               	dw	65535	; assembler added errata NOP
  4927  001A06  90D8               	bcf	status,0,c
  4928  001A08  3639               	rlcf	___fltol@f1^0,f,c
  4929  001A0A  363A               	rlcf	(___fltol@f1+1)^0,f,c
  4930  001A0C  363B               	rlcf	(___fltol@f1+2)^0,f,c
  4931  001A0E  363C               	rlcf	(___fltol@f1+3)^0,f,c
  4932  001A10  0642               	decf	___fltol@exp1^0,f,c
  4933  001A12                     l3852:
  4934  001A12  FFFF               	dw	65535	; assembler added errata NOP
  4935  001A14  5042               	movf	___fltol@exp1^0,w,c
  4936  001A16  A4D8               	btfss	status,2,c
  4937  001A18  EF10  F00D         	goto	u2941
  4938  001A1C  EF13  F00D         	goto	u2940
  4939  001A20                     u2941:
  4940  001A20  FFFF               	dw	65535	; assembler added errata NOP
  4941  001A22  EF02  F00D         	goto	l3850
  4942  001A26                     u2940:
  4943  001A26                     l3854:
  4944  001A26  FFFF               	dw	65535	; assembler added errata NOP
  4945  001A28  5041               	movf	___fltol@sign1^0,w,c
  4946  001A2A  B4D8               	btfsc	status,2,c
  4947  001A2C  EF1A  F00D         	goto	u2951
  4948  001A30  EF1D  F00D         	goto	u2950
  4949  001A34                     u2951:
  4950  001A34  FFFF               	dw	65535	; assembler added errata NOP
  4951  001A36  EF26  F00D         	goto	l3858
  4952  001A3A                     u2950:
  4953  001A3A  FFFF               	dw	65535	; assembler added errata NOP
  4954  001A3C  1E3C               	comf	(___fltol@f1+3)^0,f,c
  4955  001A3E  1E3B               	comf	(___fltol@f1+2)^0,f,c
  4956  001A40  1E3A               	comf	(___fltol@f1+1)^0,f,c
  4957  001A42  6C39               	negf	___fltol@f1^0,c
  4958  001A44  0E00               	movlw	0
  4959  001A46  223A               	addwfc	(___fltol@f1+1)^0,f,c
  4960  001A48  223B               	addwfc	(___fltol@f1+2)^0,f,c
  4961  001A4A  223C               	addwfc	(___fltol@f1+3)^0,f,c
  4962  001A4C                     l3858:
  4963  001A4C  FFFF               	dw	65535	; assembler added errata NOP
  4964  001A4E  C039  F039         	movff	___fltol@f1,?___fltol
  4965  001A52  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  4966  001A56  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  4967  001A5A  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  4968  001A5E                     l922:
  4969  001A5E  FFFF               	dw	65535	; assembler added errata NOP
  4970  001A60  0012               	return		;funcret
  4971  001A62  FFFF               	dw	65535	; errata NOP
  4972  001A64                     __end_of___fltol:
  4973                           	callstack 0
  4974                           
  4975 ;; *************** function ___fldiv *****************
  4976 ;; Defined at:
  4977 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  4978 ;; Parameters:    Size  Location     Type
  4979 ;;  b               4   31[COMRAM] long 
  4980 ;;  a               4   35[COMRAM] long 
  4981 ;; Auto vars:     Size  Location     Type
  4982 ;;  grs             4   50[COMRAM] unsigned long 
  4983 ;;  rem             4   43[COMRAM] unsigned long 
  4984 ;;  new_exp         2   48[COMRAM] short 
  4985 ;;  aexp            1   55[COMRAM] unsigned char 
  4986 ;;  bexp            1   54[COMRAM] unsigned char 
  4987 ;;  sign            1   47[COMRAM] unsigned char 
  4988 ;; Return value:  Size  Location     Type
  4989 ;;                  4   31[COMRAM] unsigned char 
  4990 ;; Registers used:
  4991 ;;		wreg, status,2, status,0
  4992 ;; Tracked objects:
  4993 ;;		On entry : 0/0
  4994 ;;		On exit  : 0/0
  4995 ;;		Unchanged: 0/0
  4996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4997 ;;      Params:         8       0       0       0       0       0       0
  4998 ;;      Locals:        13       0       0       0       0       0       0
  4999 ;;      Temps:          4       0       0       0       0       0       0
  5000 ;;      Totals:        25       0       0       0       0       0       0
  5001 ;;Total ram usage:       25 bytes
  5002 ;; Hardware stack levels used:    1
  5003 ;; Hardware stack levels required when called:    4
  5004 ;; This function calls:
  5005 ;;		Nothing
  5006 ;; This function is called by:
  5007 ;;		_rotateObj
  5008 ;; This function uses a non-reentrant model
  5009 ;;
  5010                           
  5011                           	psect	text30
  5012  000612                     __ptext30:
  5013                           	callstack 0
  5014  000612                     ___fldiv:
  5015                           	callstack 0
  5016  000612  FFFF               	dw	65535	; assembler added errata NOP
  5017  000614  5023               	movf	(___fldiv@b+3)^0,w,c
  5018  000616  0B80               	andlw	128
  5019  000618  6E30               	movwf	___fldiv@sign^0,c
  5020  00061A  5023               	movf	(___fldiv@b+3)^0,w,c
  5021  00061C  2423               	addwf	(___fldiv@b+3)^0,w,c
  5022  00061E  6E37               	movwf	___fldiv@bexp^0,c
  5023  000620  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5024  000622  EF15  F003         	goto	u2661
  5025  000626  EF18  F003         	goto	u2660
  5026  00062A                     u2661:
  5027  00062A  FFFF               	dw	65535	; assembler added errata NOP
  5028  00062C  EF1A  F003         	goto	l3686
  5029  000630                     u2660:
  5030  000630  FFFF               	dw	65535	; assembler added errata NOP
  5031  000632  8037               	bsf	___fldiv@bexp^0,0,c
  5032  000634                     l3686:
  5033  000634  FFFF               	dw	65535	; assembler added errata NOP
  5034  000636  5037               	movf	___fldiv@bexp^0,w,c
  5035  000638  B4D8               	btfsc	status,2,c
  5036  00063A  EF21  F003         	goto	u2671
  5037  00063E  EF24  F003         	goto	u2670
  5038  000642                     u2671:
  5039  000642  FFFF               	dw	65535	; assembler added errata NOP
  5040  000644  EF3D  F003         	goto	l3696
  5041  000648                     u2670:
  5042  000648  FFFF               	dw	65535	; assembler added errata NOP
  5043  00064A  2837               	incf	___fldiv@bexp^0,w,c
  5044  00064C  A4D8               	btfss	status,2,c
  5045  00064E  EF2B  F003         	goto	u2681
  5046  000652  EF2E  F003         	goto	u2680
  5047  000656                     u2681:
  5048  000656  FFFF               	dw	65535	; assembler added errata NOP
  5049  000658  EF37  F003         	goto	l3692
  5050  00065C                     u2680:
  5051  00065C  FFFF               	dw	65535	; assembler added errata NOP
  5052  00065E  0E00               	movlw	0
  5053  000660  6E20               	movwf	___fldiv@b^0,c
  5054  000662  0E00               	movlw	0
  5055  000664  6E21               	movwf	(___fldiv@b+1)^0,c
  5056  000666  0E00               	movlw	0
  5057  000668  6E22               	movwf	(___fldiv@b+2)^0,c
  5058  00066A  0E00               	movlw	0
  5059  00066C  6E23               	movwf	(___fldiv@b+3)^0,c
  5060  00066E                     l3692:
  5061  00066E  FFFF               	dw	65535	; assembler added errata NOP
  5062  000670  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5063  000672  0E00               	movlw	0
  5064  000674  6E23               	movwf	(___fldiv@b+3)^0,c
  5065  000676  EF46  F003         	goto	l3698
  5066  00067A                     l3696:
  5067  00067A  FFFF               	dw	65535	; assembler added errata NOP
  5068  00067C  0E00               	movlw	0
  5069  00067E  6E20               	movwf	___fldiv@b^0,c
  5070  000680  0E00               	movlw	0
  5071  000682  6E21               	movwf	(___fldiv@b+1)^0,c
  5072  000684  0E00               	movlw	0
  5073  000686  6E22               	movwf	(___fldiv@b+2)^0,c
  5074  000688  0E00               	movlw	0
  5075  00068A  6E23               	movwf	(___fldiv@b+3)^0,c
  5076  00068C                     l3698:
  5077  00068C  FFFF               	dw	65535	; assembler added errata NOP
  5078  00068E  5027               	movf	(___fldiv@a+3)^0,w,c
  5079  000690  0B80               	andlw	128
  5080  000692  1A30               	xorwf	___fldiv@sign^0,f,c
  5081  000694  5027               	movf	(___fldiv@a+3)^0,w,c
  5082  000696  2427               	addwf	(___fldiv@a+3)^0,w,c
  5083  000698  6E38               	movwf	___fldiv@aexp^0,c
  5084  00069A  AE26               	btfss	(___fldiv@a+2)^0,7,c
  5085  00069C  EF52  F003         	goto	u2691
  5086  0006A0  EF55  F003         	goto	u2690
  5087  0006A4                     u2691:
  5088  0006A4  FFFF               	dw	65535	; assembler added errata NOP
  5089  0006A6  EF57  F003         	goto	l3706
  5090  0006AA                     u2690:
  5091  0006AA  FFFF               	dw	65535	; assembler added errata NOP
  5092  0006AC  8038               	bsf	___fldiv@aexp^0,0,c
  5093  0006AE                     l3706:
  5094  0006AE  FFFF               	dw	65535	; assembler added errata NOP
  5095  0006B0  5038               	movf	___fldiv@aexp^0,w,c
  5096  0006B2  B4D8               	btfsc	status,2,c
  5097  0006B4  EF5E  F003         	goto	u2701
  5098  0006B8  EF61  F003         	goto	u2700
  5099  0006BC                     u2701:
  5100  0006BC  FFFF               	dw	65535	; assembler added errata NOP
  5101  0006BE  EF7A  F003         	goto	l3716
  5102  0006C2                     u2700:
  5103  0006C2  FFFF               	dw	65535	; assembler added errata NOP
  5104  0006C4  2838               	incf	___fldiv@aexp^0,w,c
  5105  0006C6  A4D8               	btfss	status,2,c
  5106  0006C8  EF68  F003         	goto	u2711
  5107  0006CC  EF6B  F003         	goto	u2710
  5108  0006D0                     u2711:
  5109  0006D0  FFFF               	dw	65535	; assembler added errata NOP
  5110  0006D2  EF74  F003         	goto	l3712
  5111  0006D6                     u2710:
  5112  0006D6  FFFF               	dw	65535	; assembler added errata NOP
  5113  0006D8  0E00               	movlw	0
  5114  0006DA  6E24               	movwf	___fldiv@a^0,c
  5115  0006DC  0E00               	movlw	0
  5116  0006DE  6E25               	movwf	(___fldiv@a+1)^0,c
  5117  0006E0  0E00               	movlw	0
  5118  0006E2  6E26               	movwf	(___fldiv@a+2)^0,c
  5119  0006E4  0E00               	movlw	0
  5120  0006E6  6E27               	movwf	(___fldiv@a+3)^0,c
  5121  0006E8                     l3712:
  5122  0006E8  FFFF               	dw	65535	; assembler added errata NOP
  5123  0006EA  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5124  0006EC  0E00               	movlw	0
  5125  0006EE  6E27               	movwf	(___fldiv@a+3)^0,c
  5126  0006F0  EF83  F003         	goto	l3718
  5127  0006F4                     l3716:
  5128  0006F4  FFFF               	dw	65535	; assembler added errata NOP
  5129  0006F6  0E00               	movlw	0
  5130  0006F8  6E24               	movwf	___fldiv@a^0,c
  5131  0006FA  0E00               	movlw	0
  5132  0006FC  6E25               	movwf	(___fldiv@a+1)^0,c
  5133  0006FE  0E00               	movlw	0
  5134  000700  6E26               	movwf	(___fldiv@a+2)^0,c
  5135  000702  0E00               	movlw	0
  5136  000704  6E27               	movwf	(___fldiv@a+3)^0,c
  5137  000706                     l3718:
  5138  000706  FFFF               	dw	65535	; assembler added errata NOP
  5139  000708  5024               	movf	___fldiv@a^0,w,c
  5140  00070A  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5141  00070C  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5142  00070E  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5143  000710  A4D8               	btfss	status,2,c
  5144  000712  EF8D  F003         	goto	u2721
  5145  000716  EF90  F003         	goto	u2720
  5146  00071A                     u2721:
  5147  00071A  FFFF               	dw	65535	; assembler added errata NOP
  5148  00071C  EFAA  F003         	goto	l3730
  5149  000720                     u2720:
  5150  000720  FFFF               	dw	65535	; assembler added errata NOP
  5151  000722  0E00               	movlw	0
  5152  000724  6E20               	movwf	___fldiv@b^0,c
  5153  000726  0E00               	movlw	0
  5154  000728  6E21               	movwf	(___fldiv@b+1)^0,c
  5155  00072A  0E00               	movlw	0
  5156  00072C  6E22               	movwf	(___fldiv@b+2)^0,c
  5157  00072E  0E00               	movlw	0
  5158  000730  6E23               	movwf	(___fldiv@b+3)^0,c
  5159  000732  0E80               	movlw	128
  5160  000734  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5161  000736  0E7F               	movlw	127
  5162  000738  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5163  00073A                     l3724:
  5164  00073A  FFFF               	dw	65535	; assembler added errata NOP
  5165  00073C  5030               	movf	___fldiv@sign^0,w,c
  5166  00073E  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5167  000740  C020  F020         	movff	___fldiv@b,?___fldiv
  5168  000744  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5169  000748  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5170  00074C  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5171  000750  EF1F  F005         	goto	l1207
  5172  000754                     l3730:
  5173  000754  FFFF               	dw	65535	; assembler added errata NOP
  5174  000756  5037               	movf	___fldiv@bexp^0,w,c
  5175  000758  A4D8               	btfss	status,2,c
  5176  00075A  EFB1  F003         	goto	u2731
  5177  00075E  EFB4  F003         	goto	u2730
  5178  000762                     u2731:
  5179  000762  FFFF               	dw	65535	; assembler added errata NOP
  5180  000764  EFBF  F003         	goto	l3738
  5181  000768                     u2730:
  5182  000768  FFFF               	dw	65535	; assembler added errata NOP
  5183  00076A  0E00               	movlw	0
  5184  00076C  6E20               	movwf	?___fldiv^0,c
  5185  00076E  0E00               	movlw	0
  5186  000770  6E21               	movwf	(?___fldiv+1)^0,c
  5187  000772  0E00               	movlw	0
  5188  000774  6E22               	movwf	(?___fldiv+2)^0,c
  5189  000776  0E00               	movlw	0
  5190  000778  6E23               	movwf	(?___fldiv+3)^0,c
  5191  00077A  EF1F  F005         	goto	l1207
  5192  00077E                     l3738:
  5193  00077E  FFFF               	dw	65535	; assembler added errata NOP
  5194  000780  5038               	movf	___fldiv@aexp^0,w,c
  5195  000782  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5196  000786  6A29               	clrf	(??___fldiv+1)^0,c
  5197  000788  5E28               	subwf	??___fldiv^0,f,c
  5198  00078A  0E00               	movlw	0
  5199  00078C  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5200  00078E  0E7F               	movlw	127
  5201  000790  2428               	addwf	??___fldiv^0,w,c
  5202  000792  6E31               	movwf	___fldiv@new_exp^0,c
  5203  000794  0E00               	movlw	0
  5204  000796  2029               	addwfc	(??___fldiv+1)^0,w,c
  5205  000798  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5206  00079A  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5207  00079E  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5208  0007A2  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5209  0007A6  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5210  0007AA  0E00               	movlw	0
  5211  0007AC  6E20               	movwf	___fldiv@b^0,c
  5212  0007AE  0E00               	movlw	0
  5213  0007B0  6E21               	movwf	(___fldiv@b+1)^0,c
  5214  0007B2  0E00               	movlw	0
  5215  0007B4  6E22               	movwf	(___fldiv@b+2)^0,c
  5216  0007B6  0E00               	movlw	0
  5217  0007B8  6E23               	movwf	(___fldiv@b+3)^0,c
  5218  0007BA  0E00               	movlw	0
  5219  0007BC  6E33               	movwf	___fldiv@grs^0,c
  5220  0007BE  0E00               	movlw	0
  5221  0007C0  6E34               	movwf	(___fldiv@grs+1)^0,c
  5222  0007C2  0E00               	movlw	0
  5223  0007C4  6E35               	movwf	(___fldiv@grs+2)^0,c
  5224  0007C6  0E00               	movlw	0
  5225  0007C8  6E36               	movwf	(___fldiv@grs+3)^0,c
  5226  0007CA  0E00               	movlw	0
  5227  0007CC  6E38               	movwf	___fldiv@aexp^0,c
  5228  0007CE  EF2B  F004         	goto	l1209
  5229  0007D2                     l3748:
  5230  0007D2  FFFF               	dw	65535	; assembler added errata NOP
  5231  0007D4  5038               	movf	___fldiv@aexp^0,w,c
  5232  0007D6  B4D8               	btfsc	status,2,c
  5233  0007D8  EFF0  F003         	goto	u2741
  5234  0007DC  EFF3  F003         	goto	u2740
  5235  0007E0                     u2741:
  5236  0007E0  FFFF               	dw	65535	; assembler added errata NOP
  5237  0007E2  EF0E  F004         	goto	l3756
  5238  0007E6                     u2740:
  5239  0007E6  FFFF               	dw	65535	; assembler added errata NOP
  5240  0007E8  90D8               	bcf	status,0,c
  5241  0007EA  362C               	rlcf	___fldiv@rem^0,f,c
  5242  0007EC  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5243  0007EE  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5244  0007F0  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5245  0007F2  90D8               	bcf	status,0,c
  5246  0007F4  3620               	rlcf	___fldiv@b^0,f,c
  5247  0007F6  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5248  0007F8  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5249  0007FA  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5250  0007FC  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5251  0007FE  EF03  F004         	goto	u2751
  5252  000802  EF06  F004         	goto	u2750
  5253  000806                     u2751:
  5254  000806  FFFF               	dw	65535	; assembler added errata NOP
  5255  000808  EF08  F004         	goto	l1212
  5256  00080C                     u2750:
  5257  00080C  FFFF               	dw	65535	; assembler added errata NOP
  5258  00080E  8020               	bsf	___fldiv@b^0,0,c
  5259  000810                     l1212:
  5260  000810  FFFF               	dw	65535	; assembler added errata NOP
  5261  000812  90D8               	bcf	status,0,c
  5262  000814  3633               	rlcf	___fldiv@grs^0,f,c
  5263  000816  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5264  000818  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5265  00081A  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5266  00081C                     l3756:
  5267  00081C  FFFF               	dw	65535	; assembler added errata NOP
  5268  00081E  5024               	movf	___fldiv@a^0,w,c
  5269  000820  5C2C               	subwf	___fldiv@rem^0,w,c
  5270  000822  5025               	movf	(___fldiv@a+1)^0,w,c
  5271  000824  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5272  000826  5026               	movf	(___fldiv@a+2)^0,w,c
  5273  000828  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5274  00082A  5027               	movf	(___fldiv@a+3)^0,w,c
  5275  00082C  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5276  00082E  A0D8               	btfss	status,0,c
  5277  000830  EF1C  F004         	goto	u2761
  5278  000834  EF1F  F004         	goto	u2760
  5279  000838                     u2761:
  5280  000838  FFFF               	dw	65535	; assembler added errata NOP
  5281  00083A  EF29  F004         	goto	l3762
  5282  00083E                     u2760:
  5283  00083E  FFFF               	dw	65535	; assembler added errata NOP
  5284  000840  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5285  000842  5024               	movf	___fldiv@a^0,w,c
  5286  000844  5E2C               	subwf	___fldiv@rem^0,f,c
  5287  000846  5025               	movf	(___fldiv@a+1)^0,w,c
  5288  000848  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5289  00084A  5026               	movf	(___fldiv@a+2)^0,w,c
  5290  00084C  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5291  00084E  5027               	movf	(___fldiv@a+3)^0,w,c
  5292  000850  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5293  000852                     l3762:
  5294  000852  FFFF               	dw	65535	; assembler added errata NOP
  5295  000854  2A38               	incf	___fldiv@aexp^0,f,c
  5296  000856                     l1209:
  5297  000856  FFFF               	dw	65535	; assembler added errata NOP
  5298  000858  0E19               	movlw	25
  5299  00085A  6438               	cpfsgt	___fldiv@aexp^0,c
  5300  00085C  EF32  F004         	goto	u2771
  5301  000860  EF35  F004         	goto	u2770
  5302  000864                     u2771:
  5303  000864  FFFF               	dw	65535	; assembler added errata NOP
  5304  000866  EFE9  F003         	goto	l3748
  5305  00086A                     u2770:
  5306  00086A  FFFF               	dw	65535	; assembler added errata NOP
  5307  00086C  502C               	movf	___fldiv@rem^0,w,c
  5308  00086E  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5309  000870  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5310  000872  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5311  000874  B4D8               	btfsc	status,2,c
  5312  000876  EF3F  F004         	goto	u2781
  5313  00087A  EF42  F004         	goto	u2780
  5314  00087E                     u2781:
  5315  00087E  FFFF               	dw	65535	; assembler added errata NOP
  5316  000880  EF5F  F004         	goto	l3774
  5317  000884                     u2780:
  5318  000884  FFFF               	dw	65535	; assembler added errata NOP
  5319  000886  8033               	bsf	___fldiv@grs^0,0,c
  5320  000888  EF5F  F004         	goto	l3774
  5321  00088C                     l3768:
  5322  00088C  FFFF               	dw	65535	; assembler added errata NOP
  5323  00088E  90D8               	bcf	status,0,c
  5324  000890  3620               	rlcf	___fldiv@b^0,f,c
  5325  000892  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5326  000894  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5327  000896  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5328  000898  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5329  00089A  EF51  F004         	goto	u2791
  5330  00089E  EF54  F004         	goto	u2790
  5331  0008A2                     u2791:
  5332  0008A2  FFFF               	dw	65535	; assembler added errata NOP
  5333  0008A4  EF56  F004         	goto	l1218
  5334  0008A8                     u2790:
  5335  0008A8  FFFF               	dw	65535	; assembler added errata NOP
  5336  0008AA  8020               	bsf	___fldiv@b^0,0,c
  5337  0008AC                     l1218:
  5338  0008AC  FFFF               	dw	65535	; assembler added errata NOP
  5339  0008AE  90D8               	bcf	status,0,c
  5340  0008B0  3633               	rlcf	___fldiv@grs^0,f,c
  5341  0008B2  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5342  0008B4  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5343  0008B6  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5344  0008B8  0631               	decf	___fldiv@new_exp^0,f,c
  5345  0008BA  A0D8               	btfss	status,0,c
  5346  0008BC  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5347  0008BE                     l3774:
  5348  0008BE  FFFF               	dw	65535	; assembler added errata NOP
  5349  0008C0  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5350  0008C2  EF65  F004         	goto	u2801
  5351  0008C6  EF68  F004         	goto	u2800
  5352  0008CA                     u2801:
  5353  0008CA  FFFF               	dw	65535	; assembler added errata NOP
  5354  0008CC  EF46  F004         	goto	l3768
  5355  0008D0                     u2800:
  5356  0008D0  FFFF               	dw	65535	; assembler added errata NOP
  5357  0008D2  0E00               	movlw	0
  5358  0008D4  6E38               	movwf	___fldiv@aexp^0,c
  5359  0008D6  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5360  0008D8  EF70  F004         	goto	u2811
  5361  0008DC  EF73  F004         	goto	u2810
  5362  0008E0                     u2811:
  5363  0008E0  FFFF               	dw	65535	; assembler added errata NOP
  5364  0008E2  EF9E  F004         	goto	l1220
  5365  0008E6                     u2810:
  5366  0008E6  FFFF               	dw	65535	; assembler added errata NOP
  5367  0008E8  0EFF               	movlw	255
  5368  0008EA  1433               	andwf	___fldiv@grs^0,w,c
  5369  0008EC  6E28               	movwf	??___fldiv^0,c
  5370  0008EE  0EFF               	movlw	255
  5371  0008F0  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5372  0008F2  6E29               	movwf	(??___fldiv+1)^0,c
  5373  0008F4  0EFF               	movlw	255
  5374  0008F6  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5375  0008F8  6E2A               	movwf	(??___fldiv+2)^0,c
  5376  0008FA  0E7F               	movlw	127
  5377  0008FC  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5378  0008FE  6E2B               	movwf	(??___fldiv+3)^0,c
  5379  000900  5028               	movf	??___fldiv^0,w,c
  5380  000902  1029               	iorwf	(??___fldiv+1)^0,w,c
  5381  000904  102A               	iorwf	(??___fldiv+2)^0,w,c
  5382  000906  102B               	iorwf	(??___fldiv+3)^0,w,c
  5383  000908  B4D8               	btfsc	status,2,c
  5384  00090A  EF89  F004         	goto	u2821
  5385  00090E  EF8C  F004         	goto	u2820
  5386  000912                     u2821:
  5387  000912  FFFF               	dw	65535	; assembler added errata NOP
  5388  000914  EF92  F004         	goto	l1221
  5389  000918                     u2820:
  5390  000918  FFFF               	dw	65535	; assembler added errata NOP
  5391  00091A                     l3782:
  5392  00091A  FFFF               	dw	65535	; assembler added errata NOP
  5393  00091C  0E01               	movlw	1
  5394  00091E  6E38               	movwf	___fldiv@aexp^0,c
  5395  000920  EF9E  F004         	goto	l1220
  5396  000924                     l1221:
  5397  000924  FFFF               	dw	65535	; assembler added errata NOP
  5398  000926  A020               	btfss	___fldiv@b^0,0,c
  5399  000928  EF98  F004         	goto	u2831
  5400  00092C  EF9B  F004         	goto	u2830
  5401  000930                     u2831:
  5402  000930  FFFF               	dw	65535	; assembler added errata NOP
  5403  000932  EF9E  F004         	goto	l1220
  5404  000936                     u2830:
  5405  000936  FFFF               	dw	65535	; assembler added errata NOP
  5406  000938  EF8D  F004         	goto	l3782
  5407  00093C                     l1220:
  5408  00093C  FFFF               	dw	65535	; assembler added errata NOP
  5409  00093E  5038               	movf	___fldiv@aexp^0,w,c
  5410  000940  B4D8               	btfsc	status,2,c
  5411  000942  EFA5  F004         	goto	u2841
  5412  000946  EFA8  F004         	goto	u2840
  5413  00094A                     u2841:
  5414  00094A  FFFF               	dw	65535	; assembler added errata NOP
  5415  00094C  EFCF  F004         	goto	l3794
  5416  000950                     u2840:
  5417  000950  FFFF               	dw	65535	; assembler added errata NOP
  5418  000952  0E01               	movlw	1
  5419  000954  2620               	addwf	___fldiv@b^0,f,c
  5420  000956  0E00               	movlw	0
  5421  000958  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5422  00095A  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5423  00095C  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5424  00095E  A023               	btfss	(___fldiv@b+3)^0,0,c
  5425  000960  EFB4  F004         	goto	u2851
  5426  000964  EFB7  F004         	goto	u2850
  5427  000968                     u2851:
  5428  000968  FFFF               	dw	65535	; assembler added errata NOP
  5429  00096A  EFCF  F004         	goto	l3794
  5430  00096E                     u2850:
  5431  00096E  FFFF               	dw	65535	; assembler added errata NOP
  5432  000970  C020  F028         	movff	___fldiv@b,??___fldiv
  5433  000974  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5434  000978  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5435  00097C  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5436  000980  342B               	rlcf	(??___fldiv+3)^0,w,c
  5437  000982  322B               	rrcf	(??___fldiv+3)^0,f,c
  5438  000984  322A               	rrcf	(??___fldiv+2)^0,f,c
  5439  000986  3229               	rrcf	(??___fldiv+1)^0,f,c
  5440  000988  3228               	rrcf	??___fldiv^0,f,c
  5441  00098A  C028  F020         	movff	??___fldiv,___fldiv@b
  5442  00098E  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5443  000992  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5444  000996  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5445  00099A  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5446  00099C  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5447  00099E                     l3794:
  5448  00099E  FFFF               	dw	65535	; assembler added errata NOP
  5449  0009A0  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5450  0009A2  EFDB  F004         	goto	u2861
  5451  0009A6  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5452  0009A8  E109               	bnz	u2860
  5453  0009AA  2831               	incf	___fldiv@new_exp^0,w,c
  5454  0009AC  A0D8               	btfss	status,0,c
  5455  0009AE  EFDB  F004         	goto	u2861
  5456  0009B2  EFDE  F004         	goto	u2860
  5457  0009B6                     u2861:
  5458  0009B6  FFFF               	dw	65535	; assembler added errata NOP
  5459  0009B8  EFEA  F004         	goto	l3798
  5460  0009BC                     u2860:
  5461  0009BC  FFFF               	dw	65535	; assembler added errata NOP
  5462  0009BE  0E00               	movlw	0
  5463  0009C0  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5464  0009C2  6831               	setf	___fldiv@new_exp^0,c
  5465  0009C4  0E00               	movlw	0
  5466  0009C6  6E20               	movwf	___fldiv@b^0,c
  5467  0009C8  0E00               	movlw	0
  5468  0009CA  6E21               	movwf	(___fldiv@b+1)^0,c
  5469  0009CC  0E00               	movlw	0
  5470  0009CE  6E22               	movwf	(___fldiv@b+2)^0,c
  5471  0009D0  0E00               	movlw	0
  5472  0009D2  6E23               	movwf	(___fldiv@b+3)^0,c
  5473  0009D4                     l3798:
  5474  0009D4  FFFF               	dw	65535	; assembler added errata NOP
  5475  0009D6  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5476  0009D8  EFF9  F004         	goto	u2870
  5477  0009DC  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5478  0009DE  E106               	bnz	u2871
  5479  0009E0  0431               	decf	___fldiv@new_exp^0,w,c
  5480  0009E2  B0D8               	btfsc	status,0,c
  5481  0009E4  EFF6  F004         	goto	u2871
  5482  0009E8  EFF9  F004         	goto	u2870
  5483  0009EC                     u2871:
  5484  0009EC  FFFF               	dw	65535	; assembler added errata NOP
  5485  0009EE  EF08  F005         	goto	l3802
  5486  0009F2                     u2870:
  5487  0009F2  FFFF               	dw	65535	; assembler added errata NOP
  5488  0009F4  0E00               	movlw	0
  5489  0009F6  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5490  0009F8  0E00               	movlw	0
  5491  0009FA  6E31               	movwf	___fldiv@new_exp^0,c
  5492  0009FC  0E00               	movlw	0
  5493  0009FE  6E20               	movwf	___fldiv@b^0,c
  5494  000A00  0E00               	movlw	0
  5495  000A02  6E21               	movwf	(___fldiv@b+1)^0,c
  5496  000A04  0E00               	movlw	0
  5497  000A06  6E22               	movwf	(___fldiv@b+2)^0,c
  5498  000A08  0E00               	movlw	0
  5499  000A0A  6E23               	movwf	(___fldiv@b+3)^0,c
  5500  000A0C  0E00               	movlw	0
  5501  000A0E  6E30               	movwf	___fldiv@sign^0,c
  5502  000A10                     l3802:
  5503  000A10  FFFF               	dw	65535	; assembler added errata NOP
  5504  000A12  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5505  000A16  A037               	btfss	___fldiv@bexp^0,0,c
  5506  000A18  EF10  F005         	goto	u2881
  5507  000A1C  EF13  F005         	goto	u2880
  5508  000A20                     u2881:
  5509  000A20  FFFF               	dw	65535	; assembler added errata NOP
  5510  000A22  EF17  F005         	goto	l3808
  5511  000A26                     u2880:
  5512  000A26  FFFF               	dw	65535	; assembler added errata NOP
  5513  000A28  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5514  000A2A  EF19  F005         	goto	l3810
  5515  000A2E                     l3808:
  5516  000A2E  FFFF               	dw	65535	; assembler added errata NOP
  5517  000A30  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5518  000A32                     l3810:
  5519  000A32  FFFF               	dw	65535	; assembler added errata NOP
  5520  000A34  90D8               	bcf	status,0,c
  5521  000A36  3037               	rrcf	___fldiv@bexp^0,w,c
  5522  000A38  6E23               	movwf	(___fldiv@b+3)^0,c
  5523  000A3A  EF9D  F003         	goto	l3724
  5524  000A3E                     l1207:
  5525  000A3E  FFFF               	dw	65535	; assembler added errata NOP
  5526  000A40  0012               	return		;funcret
  5527  000A42  FFFF               	dw	65535	; errata NOP
  5528  000A44                     __end_of___fldiv:
  5529                           	callstack 0
  5530                           
  5531 ;; *************** function _releaseObj *****************
  5532 ;; Defined at:
  5533 ;;		line 795 in file "motors.c"
  5534 ;; Parameters:    Size  Location     Type
  5535 ;;		None
  5536 ;; Auto vars:     Size  Location     Type
  5537 ;;		None
  5538 ;; Return value:  Size  Location     Type
  5539 ;;                  1    wreg      void 
  5540 ;; Registers used:
  5541 ;;		wreg, status,2, status,0, cstack
  5542 ;; Tracked objects:
  5543 ;;		On entry : 0/0
  5544 ;;		On exit  : 0/0
  5545 ;;		Unchanged: 0/0
  5546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5547 ;;      Params:         0       0       0       0       0       0       0
  5548 ;;      Locals:         0       0       0       0       0       0       0
  5549 ;;      Temps:          0       0       0       0       0       0       0
  5550 ;;      Totals:         0       0       0       0       0       0       0
  5551 ;;Total ram usage:        0 bytes
  5552 ;; Hardware stack levels used:    1
  5553 ;; Hardware stack levels required when called:    5
  5554 ;; This function calls:
  5555 ;;		_stepMade
  5556 ;; This function is called by:
  5557 ;;		_executeData
  5558 ;; This function uses a non-reentrant model
  5559 ;;
  5560                           
  5561                           	psect	text31
  5562  002370                     __ptext31:
  5563                           	callstack 0
  5564  002370                     _releaseObj:
  5565                           	callstack 0
  5566  002370  FFFF               	dw	65535	; assembler added errata NOP
  5567  002372                     
  5568                           ;motors.c: 796:     LATDbits.LATD1 = 0;
  5569  002372  928C               	bcf	140,1,c	;volatile
  5570                           
  5571                           ;motors.c: 799:     T2CONbits.TMR2ON = 1;
  5572  002374  84CA               	bsf	202,2,c	;volatile
  5573  002376                     l4162:
  5574  002376  FFFF               	dw	65535	; assembler added errata NOP
  5575  002378  EC23  F012         	call	_stepMade	;wreg free
  5576  00237C  5012               	movf	?_stepMade^0,w,c
  5577  00237E  1013               	iorwf	(?_stepMade+1)^0,w,c
  5578  002380  B4D8               	btfsc	status,2,c
  5579  002382  EFC5  F011         	goto	u3491
  5580  002386  EFC8  F011         	goto	u3490
  5581  00238A                     u3491:
  5582  00238A  FFFF               	dw	65535	; assembler added errata NOP
  5583  00238C  EFBB  F011         	goto	l4162
  5584  002390                     u3490:
  5585  002390  FFFF               	dw	65535	; assembler added errata NOP
  5586  002392                     
  5587                           ;motors.c: 801:     T2CONbits.TMR2ON = 0;
  5588  002392  94CA               	bcf	202,2,c	;volatile
  5589  002394                     
  5590                           ;motors.c: 802:     TMR2 = 0;
  5591  002394  0E00               	movlw	0
  5592  002396  6ECC               	movwf	204,c	;volatile
  5593  002398  0012               	return		;funcret
  5594  00239A  FFFF               	dw	65535	; errata NOP
  5595  00239C                     __end_of_releaseObj:
  5596                           	callstack 0
  5597                           
  5598 ;; *************** function _pickObject *****************
  5599 ;; Defined at:
  5600 ;;		line 782 in file "motors.c"
  5601 ;; Parameters:    Size  Location     Type
  5602 ;;		None
  5603 ;; Auto vars:     Size  Location     Type
  5604 ;;		None
  5605 ;; Return value:  Size  Location     Type
  5606 ;;                  1    wreg      void 
  5607 ;; Registers used:
  5608 ;;		wreg, status,2, status,0, cstack
  5609 ;; Tracked objects:
  5610 ;;		On entry : 0/0
  5611 ;;		On exit  : 0/0
  5612 ;;		Unchanged: 0/0
  5613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5614 ;;      Params:         0       0       0       0       0       0       0
  5615 ;;      Locals:         0       0       0       0       0       0       0
  5616 ;;      Temps:          0       0       0       0       0       0       0
  5617 ;;      Totals:         0       0       0       0       0       0       0
  5618 ;;Total ram usage:        0 bytes
  5619 ;; Hardware stack levels used:    1
  5620 ;; Hardware stack levels required when called:    5
  5621 ;; This function calls:
  5622 ;;		_stepMade
  5623 ;; This function is called by:
  5624 ;;		_executeData
  5625 ;; This function uses a non-reentrant model
  5626 ;;
  5627                           
  5628                           	psect	text32
  5629  00239C                     __ptext32:
  5630                           	callstack 0
  5631  00239C                     _pickObject:
  5632                           	callstack 0
  5633  00239C  FFFF               	dw	65535	; assembler added errata NOP
  5634  00239E                     
  5635                           ;motors.c: 783:     LATDbits.LATD1 = 1;
  5636  00239E  828C               	bsf	140,1,c	;volatile
  5637                           
  5638                           ;motors.c: 786:     T2CONbits.TMR2ON = 1;
  5639  0023A0  84CA               	bsf	202,2,c	;volatile
  5640  0023A2                     l4156:
  5641  0023A2  FFFF               	dw	65535	; assembler added errata NOP
  5642  0023A4  EC23  F012         	call	_stepMade	;wreg free
  5643  0023A8  5012               	movf	?_stepMade^0,w,c
  5644  0023AA  1013               	iorwf	(?_stepMade+1)^0,w,c
  5645  0023AC  B4D8               	btfsc	status,2,c
  5646  0023AE  EFDB  F011         	goto	u3481
  5647  0023B2  EFDE  F011         	goto	u3480
  5648  0023B6                     u3481:
  5649  0023B6  FFFF               	dw	65535	; assembler added errata NOP
  5650  0023B8  EFD1  F011         	goto	l4156
  5651  0023BC                     u3480:
  5652  0023BC  FFFF               	dw	65535	; assembler added errata NOP
  5653  0023BE                     
  5654                           ;motors.c: 788:     T2CONbits.TMR2ON = 0;
  5655  0023BE  94CA               	bcf	202,2,c	;volatile
  5656  0023C0                     
  5657                           ;motors.c: 789:     TMR2 = 0;
  5658  0023C0  0E00               	movlw	0
  5659  0023C2  6ECC               	movwf	204,c	;volatile
  5660  0023C4  0012               	return		;funcret
  5661  0023C6  FFFF               	dw	65535	; errata NOP
  5662  0023C8                     __end_of_pickObject:
  5663                           	callstack 0
  5664                           
  5665 ;; *************** function _moveToPoint *****************
  5666 ;; Defined at:
  5667 ;;		line 313 in file "motors.c"
  5668 ;; Parameters:    Size  Location     Type
  5669 ;;  x1              2   20[COMRAM] int 
  5670 ;;  y1              2   22[COMRAM] int 
  5671 ;;  x2              2   24[COMRAM] int 
  5672 ;;  y2              2   26[COMRAM] int 
  5673 ;; Auto vars:     Size  Location     Type
  5674 ;;  keepMovingY     1   33[COMRAM] unsigned char 
  5675 ;;  keepMovingX     1   32[COMRAM] unsigned char 
  5676 ;;  MOT2Directio    1   31[COMRAM] unsigned char 
  5677 ;;  MOT1Directio    1   30[COMRAM] unsigned char 
  5678 ;; Return value:  Size  Location     Type
  5679 ;;                  1    wreg      unsigned char 
  5680 ;; Registers used:
  5681 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5682 ;; Tracked objects:
  5683 ;;		On entry : 0/0
  5684 ;;		On exit  : 0/0
  5685 ;;		Unchanged: 0/0
  5686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5687 ;;      Params:         8       0       0       0       0       0       0
  5688 ;;      Locals:         4       0       0       0       0       0       0
  5689 ;;      Temps:          2       0       0       0       0       0       0
  5690 ;;      Totals:        14       0       0       0       0       0       0
  5691 ;;Total ram usage:       14 bytes
  5692 ;; Hardware stack levels used:    1
  5693 ;; Hardware stack levels required when called:    5
  5694 ;; This function calls:
  5695 ;;		_resetStep
  5696 ;;		_stepCounter
  5697 ;;		_stepMade
  5698 ;; This function is called by:
  5699 ;;		_executeData
  5700 ;; This function uses a non-reentrant model
  5701 ;;
  5702                           
  5703                           	psect	text33
  5704  000A44                     __ptext33:
  5705                           	callstack 0
  5706  000A44                     _moveToPoint:
  5707                           	callstack 0
  5708  000A44  FFFF               	dw	65535	; assembler added errata NOP
  5709  000A46                     
  5710                           ;motors.c: 315:     unsigned char MOT1Direction, MOT2Direction;;motors.c: 318:     if(x2
      +                           > maxX || y2 > maxY){
  5711  000A46  501A               	movf	(moveToPoint@x2+1)^0,w,c
  5712  000A48  E107               	bnz	u3061
  5713  000A4A  0ECA               	movlw	202
  5714  000A4C  5C19               	subwf	moveToPoint@x2^0,w,c
  5715  000A4E  B0D8               	btfsc	status,0,c
  5716  000A50  EF2C  F005         	goto	u3061
  5717  000A54  EF2F  F005         	goto	u3060
  5718  000A58                     u3061:
  5719  000A58  FFFF               	dw	65535	; assembler added errata NOP
  5720  000A5A  EF3C  F005         	goto	l3912
  5721  000A5E                     u3060:
  5722  000A5E  FFFF               	dw	65535	; assembler added errata NOP
  5723  000A60  501C               	movf	(moveToPoint@y2+1)^0,w,c
  5724  000A62  E10A               	bnz	u3070
  5725  000A64  0ECA               	movlw	202
  5726  000A66  5C1B               	subwf	moveToPoint@y2^0,w,c
  5727  000A68  A0D8               	btfss	status,0,c
  5728  000A6A  EF39  F005         	goto	u3071
  5729  000A6E  EF3C  F005         	goto	u3070
  5730  000A72                     u3071:
  5731  000A72  FFFF               	dw	65535	; assembler added errata NOP
  5732  000A74  EF40  F005         	goto	l3916
  5733  000A78                     u3070:
  5734  000A78                     l3912:
  5735  000A78  FFFF               	dw	65535	; assembler added errata NOP
  5736                           
  5737                           ;motors.c: 319:         return(5);
  5738  000A7A  0E05               	movlw	5
  5739  000A7C  EF02  F007         	goto	l157
  5740  000A80                     l3916:
  5741  000A80  FFFF               	dw	65535	; assembler added errata NOP
  5742                           
  5743                           ;motors.c: 340:     if((x2 - x1) > 0){
  5744  000A82  5015               	movf	moveToPoint@x1^0,w,c
  5745  000A84  5C19               	subwf	moveToPoint@x2^0,w,c
  5746  000A86  6E1D               	movwf	??_moveToPoint^0,c
  5747  000A88  5016               	movf	(moveToPoint@x1+1)^0,w,c
  5748  000A8A  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  5749  000A8C  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5750  000A8E  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5751  000A90  EF52  F005         	goto	u3081
  5752  000A94  501E               	movf	(??_moveToPoint+1)^0,w,c
  5753  000A96  E109               	bnz	u3080
  5754  000A98  041D               	decf	??_moveToPoint^0,w,c
  5755  000A9A  A0D8               	btfss	status,0,c
  5756  000A9C  EF52  F005         	goto	u3081
  5757  000AA0  EF55  F005         	goto	u3080
  5758  000AA4                     u3081:
  5759  000AA4  FFFF               	dw	65535	; assembler added errata NOP
  5760  000AA6  EF5E  F005         	goto	l158
  5761  000AAA                     u3080:
  5762  000AAA  FFFF               	dw	65535	; assembler added errata NOP
  5763  000AAC                     
  5764                           ;motors.c: 341:         motCounter[0][1] = 1;
  5765  000AAC  0E00               	movlw	0
  5766  000AAE  6E61               	movwf	(_motCounter+3)^0,c
  5767  000AB0  0E01               	movlw	1
  5768  000AB2  6E60               	movwf	(_motCounter+2)^0,c
  5769                           
  5770                           ;motors.c: 342:         MOT1Direction = 1;
  5771  000AB4  0E01               	movlw	1
  5772  000AB6  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  5773                           
  5774                           ;motors.c: 343:     }else{
  5775  000AB8  EF63  F005         	goto	l3922
  5776  000ABC                     l158:
  5777  000ABC  FFFF               	dw	65535	; assembler added errata NOP
  5778                           
  5779                           ;motors.c: 344:         motCounter[0][1] = -1;
  5780  000ABE  6860               	setf	(_motCounter+2)^0,c
  5781  000AC0  6861               	setf	(_motCounter+3)^0,c
  5782  000AC2                     
  5783                           ;motors.c: 345:         MOT1Direction = 0;
  5784  000AC2  0E00               	movlw	0
  5785  000AC4  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  5786  000AC6                     l3922:
  5787  000AC6  FFFF               	dw	65535	; assembler added errata NOP
  5788                           
  5789                           ;motors.c: 348:     if((y2 - y1) > 0){
  5790  000AC8  5017               	movf	moveToPoint@y1^0,w,c
  5791  000ACA  5C1B               	subwf	moveToPoint@y2^0,w,c
  5792  000ACC  6E1D               	movwf	??_moveToPoint^0,c
  5793  000ACE  5018               	movf	(moveToPoint@y1+1)^0,w,c
  5794  000AD0  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  5795  000AD2  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5796  000AD4  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5797  000AD6  EF75  F005         	goto	u3091
  5798  000ADA  501E               	movf	(??_moveToPoint+1)^0,w,c
  5799  000ADC  E109               	bnz	u3090
  5800  000ADE  041D               	decf	??_moveToPoint^0,w,c
  5801  000AE0  A0D8               	btfss	status,0,c
  5802  000AE2  EF75  F005         	goto	u3091
  5803  000AE6  EF78  F005         	goto	u3090
  5804  000AEA                     u3091:
  5805  000AEA  FFFF               	dw	65535	; assembler added errata NOP
  5806  000AEC  EF81  F005         	goto	l160
  5807  000AF0                     u3090:
  5808  000AF0  FFFF               	dw	65535	; assembler added errata NOP
  5809  000AF2                     
  5810                           ;motors.c: 349:         motCounter[1][1] = 1;
  5811  000AF2  0E00               	movlw	0
  5812  000AF4  6E65               	movwf	(_motCounter+7)^0,c
  5813  000AF6  0E01               	movlw	1
  5814  000AF8  6E64               	movwf	(_motCounter+6)^0,c
  5815                           
  5816                           ;motors.c: 350:         MOT2Direction = 1;
  5817  000AFA  0E01               	movlw	1
  5818  000AFC  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  5819                           
  5820                           ;motors.c: 351:     }else{
  5821  000AFE  EF86  F005         	goto	l161
  5822  000B02                     l160:
  5823  000B02  FFFF               	dw	65535	; assembler added errata NOP
  5824                           
  5825                           ;motors.c: 352:         motCounter[2][1] = -1;
  5826  000B04  6868               	setf	(_motCounter+10)^0,c
  5827  000B06  6869               	setf	(_motCounter+11)^0,c
  5828  000B08                     
  5829                           ;motors.c: 353:         MOT2Direction = 0;
  5830  000B08  0E00               	movlw	0
  5831  000B0A  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  5832  000B0C                     l161:
  5833  000B0C  FFFF               	dw	65535	; assembler added errata NOP
  5834                           
  5835                           ;motors.c: 358:     unsigned char keepMovingX = 1;
  5836  000B0E  0E01               	movlw	1
  5837  000B10  6E21               	movwf	moveToPoint@keepMovingX^0,c
  5838                           
  5839                           ;motors.c: 359:     unsigned char keepMovingY = 1;
  5840  000B12  0E01               	movlw	1
  5841  000B14  6E22               	movwf	moveToPoint@keepMovingY^0,c
  5842  000B16                     
  5843                           ;motors.c: 362:     T2CONbits.TMR2ON = 1;
  5844  000B16  84CA               	bsf	202,2,c	;volatile
  5845                           
  5846                           ;motors.c: 364:     tm0Error = 0;
  5847  000B18  0E00               	movlw	0
  5848  000B1A  6E51               	movwf	(_tm0Error+1)^0,c
  5849  000B1C  0E00               	movlw	0
  5850  000B1E  6E50               	movwf	_tm0Error^0,c
  5851                           
  5852                           ;motors.c: 365:     tm0Limit = 250;
  5853  000B20  0EFA               	movlw	250
  5854  000B22  6E5D               	movwf	_tm0Limit^0,c
  5855  000B24                     
  5856                           ;motors.c: 366:     T0CONbits.TMR0ON = 1;
  5857  000B24  8ED5               	bsf	213,7,c	;volatile
  5858                           
  5859                           ;motors.c: 368:     while(keepMovingX || keepMovingY){
  5860  000B26  EFE2  F006         	goto	l4002
  5861  000B2A                     l3932:
  5862  000B2A  FFFF               	dw	65535	; assembler added errata NOP
  5863                           
  5864                           ;motors.c: 371:         if(tm0Error){
  5865  000B2C  5050               	movf	_tm0Error^0,w,c
  5866  000B2E  1051               	iorwf	(_tm0Error+1)^0,w,c
  5867  000B30  B4D8               	btfsc	status,2,c
  5868  000B32  EF9D  F005         	goto	u3101
  5869  000B36  EFA0  F005         	goto	u3100
  5870  000B3A                     u3101:
  5871  000B3A  FFFF               	dw	65535	; assembler added errata NOP
  5872  000B3C  EFA7  F005         	goto	l3936
  5873  000B40                     u3100:
  5874  000B40  FFFF               	dw	65535	; assembler added errata NOP
  5875  000B42                     
  5876                           ;motors.c: 377:             tm0Error = 4;
  5877  000B42  0E00               	movlw	0
  5878  000B44  6E51               	movwf	(_tm0Error+1)^0,c
  5879  000B46  0E04               	movlw	4
  5880  000B48  6E50               	movwf	_tm0Error^0,c
  5881                           
  5882                           ;motors.c: 378:             break;
  5883  000B4A  EFF6  F006         	goto	l165
  5884  000B4E                     l3936:
  5885  000B4E  FFFF               	dw	65535	; assembler added errata NOP
  5886                           
  5887                           ;motors.c: 386:         if(MOT1Direction == 1){
  5888  000B50  041F               	decf	moveToPoint@MOT1Direction^0,w,c
  5889  000B52  A4D8               	btfss	status,2,c
  5890  000B54  EFAE  F005         	goto	u3111
  5891  000B58  EFB1  F005         	goto	u3110
  5892  000B5C                     u3111:
  5893  000B5C  FFFF               	dw	65535	; assembler added errata NOP
  5894  000B5E  EFFA  F005         	goto	l3952
  5895  000B62                     u3110:
  5896  000B62  FFFF               	dw	65535	; assembler added errata NOP
  5897  000B64                     
  5898                           ;motors.c: 387:             if(x1 + stepCounter() >= x2){
  5899  000B64  EC7D  F012         	call	_stepCounter	;wreg free
  5900  000B68  5015               	movf	moveToPoint@x1^0,w,c
  5901  000B6A  2612               	addwf	?_stepCounter^0,f,c
  5902  000B6C  5016               	movf	(moveToPoint@x1+1)^0,w,c
  5903  000B6E  2213               	addwfc	(?_stepCounter+1)^0,f,c
  5904  000B70  5019               	movf	moveToPoint@x2^0,w,c
  5905  000B72  5C12               	subwf	?_stepCounter^0,w,c
  5906  000B74  501A               	movf	(moveToPoint@x2+1)^0,w,c
  5907  000B76  5813               	subwfb	(?_stepCounter+1)^0,w,c
  5908  000B78  A0D8               	btfss	status,0,c
  5909  000B7A  EFC1  F005         	goto	u3121
  5910  000B7E  EFC4  F005         	goto	u3120
  5911  000B82                     u3121:
  5912  000B82  FFFF               	dw	65535	; assembler added errata NOP
  5913  000B84  EFCA  F005         	goto	l3942
  5914  000B88                     u3120:
  5915  000B88  FFFF               	dw	65535	; assembler added errata NOP
  5916  000B8A                     l3940:
  5917  000B8A  FFFF               	dw	65535	; assembler added errata NOP
  5918                           
  5919                           ;motors.c: 389:                 keepMovingX = 0;
  5920  000B8C  0E00               	movlw	0
  5921  000B8E  6E21               	movwf	moveToPoint@keepMovingX^0,c
  5922                           
  5923                           ;motors.c: 390:             }else if(keepMovingX){
  5924  000B90  EF3E  F006         	goto	l3968
  5925  000B94                     l3942:
  5926  000B94  FFFF               	dw	65535	; assembler added errata NOP
  5927  000B96  5021               	movf	moveToPoint@keepMovingX^0,w,c
  5928  000B98  B4D8               	btfsc	status,2,c
  5929  000B9A  EFD1  F005         	goto	u3131
  5930  000B9E  EFD4  F005         	goto	u3130
  5931  000BA2                     u3131:
  5932  000BA2  FFFF               	dw	65535	; assembler added errata NOP
  5933  000BA4  EF3E  F006         	goto	l3968
  5934  000BA8                     u3130:
  5935  000BA8  FFFF               	dw	65535	; assembler added errata NOP
  5936  000BAA                     
  5937                           ;motors.c: 396:             motCounter[0][0] += motCounter[0][1];
  5938  000BAA  EE20  F060         	lfsr	2,_motCounter+2
  5939  000BAE  50DE               	movf	postinc2,w,c
  5940  000BB0  265E               	addwf	_motCounter^0,f,c
  5941  000BB2  50DD               	movf	postdec2,w,c
  5942  000BB4  225F               	addwfc	(_motCounter+1)^0,f,c
  5943  000BB6                     
  5944                           ;motors.c: 397:             if(motCounter[0][0] > 3){
  5945  000BB6  BE5F               	btfsc	(_motCounter+1)^0,7,c
  5946  000BB8  EFE7  F005         	goto	u3141
  5947  000BBC  505F               	movf	(_motCounter+1)^0,w,c
  5948  000BBE  E10A               	bnz	u3140
  5949  000BC0  0E04               	movlw	4
  5950  000BC2  5C5E               	subwf	_motCounter^0,w,c
  5951  000BC4  A0D8               	btfss	status,0,c
  5952  000BC6  EFE7  F005         	goto	u3141
  5953  000BCA  EFEA  F005         	goto	u3140
  5954  000BCE                     u3141:
  5955  000BCE  FFFF               	dw	65535	; assembler added errata NOP
  5956  000BD0  EFEF  F005         	goto	l3950
  5957  000BD4                     u3140:
  5958  000BD4  FFFF               	dw	65535	; assembler added errata NOP
  5959  000BD6                     
  5960                           ;motors.c: 398:                 motCounter[0][0] = 0;
  5961  000BD6  0E00               	movlw	0
  5962  000BD8  6E5F               	movwf	(_motCounter+1)^0,c
  5963  000BDA  0E00               	movlw	0
  5964  000BDC  6E5E               	movwf	_motCounter^0,c
  5965  000BDE                     l3950:
  5966  000BDE  FFFF               	dw	65535	; assembler added errata NOP
  5967                           
  5968                           ;motors.c: 401:             LATA = stepMot1[motCounter[0][0]];
  5969  000BE0  0E8C               	movlw	low _stepMot1
  5970  000BE2  245E               	addwf	_motCounter^0,w,c
  5971  000BE4  6ED9               	movwf	fsr2l,c
  5972  000BE6  0E00               	movlw	high _stepMot1
  5973  000BE8  205F               	addwfc	(_motCounter+1)^0,w,c
  5974  000BEA  6EDA               	movwf	fsr2h,c
  5975  000BEC  50DF               	movf	indf2,w,c
  5976  000BEE  6E89               	movwf	137,c	;volatile
  5977  000BF0  EF3E  F006         	goto	l3968
  5978  000BF4                     l3952:
  5979  000BF4  FFFF               	dw	65535	; assembler added errata NOP
  5980  000BF6  501F               	movf	moveToPoint@MOT1Direction^0,w,c
  5981  000BF8  A4D8               	btfss	status,2,c
  5982  000BFA  EF01  F006         	goto	u3151
  5983  000BFE  EF04  F006         	goto	u3150
  5984  000C02                     u3151:
  5985  000C02  FFFF               	dw	65535	; assembler added errata NOP
  5986  000C04  EF3E  F006         	goto	l3968
  5987  000C08                     u3150:
  5988  000C08  FFFF               	dw	65535	; assembler added errata NOP
  5989  000C0A                     
  5990                           ;motors.c: 405:             if(x1 - stepCounter() <= x2){
  5991  000C0A  EC7D  F012         	call	_stepCounter	;wreg free
  5992  000C0E  C015  F01D         	movff	moveToPoint@x1,??_moveToPoint
  5993  000C12  C016  F01E         	movff	moveToPoint@x1+1,??_moveToPoint+1
  5994  000C16  5012               	movf	?_stepCounter^0,w,c
  5995  000C18  5E1D               	subwf	??_moveToPoint^0,f,c
  5996  000C1A  5013               	movf	(?_stepCounter+1)^0,w,c
  5997  000C1C  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  5998  000C1E  501D               	movf	??_moveToPoint^0,w,c
  5999  000C20  5C19               	subwf	moveToPoint@x2^0,w,c
  6000  000C22  501E               	movf	(??_moveToPoint+1)^0,w,c
  6001  000C24  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  6002  000C26  A0D8               	btfss	status,0,c
  6003  000C28  EF18  F006         	goto	u3161
  6004  000C2C  EF1B  F006         	goto	u3160
  6005  000C30                     u3161:
  6006  000C30  FFFF               	dw	65535	; assembler added errata NOP
  6007  000C32  EF1E  F006         	goto	l3958
  6008  000C36                     u3160:
  6009  000C36  FFFF               	dw	65535	; assembler added errata NOP
  6010  000C38  EFC5  F005         	goto	l3940
  6011  000C3C                     l3958:
  6012  000C3C  FFFF               	dw	65535	; assembler added errata NOP
  6013  000C3E  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6014  000C40  B4D8               	btfsc	status,2,c
  6015  000C42  EF25  F006         	goto	u3171
  6016  000C46  EF28  F006         	goto	u3170
  6017  000C4A                     u3171:
  6018  000C4A  FFFF               	dw	65535	; assembler added errata NOP
  6019  000C4C  EF3E  F006         	goto	l3968
  6020  000C50                     u3170:
  6021  000C50  FFFF               	dw	65535	; assembler added errata NOP
  6022  000C52                     
  6023                           ;motors.c: 414:             motCounter[0][0] += motCounter[0][1];
  6024  000C52  EE20  F060         	lfsr	2,_motCounter+2
  6025  000C56  50DE               	movf	postinc2,w,c
  6026  000C58  265E               	addwf	_motCounter^0,f,c
  6027  000C5A  50DD               	movf	postdec2,w,c
  6028  000C5C  225F               	addwfc	(_motCounter+1)^0,f,c
  6029  000C5E                     
  6030                           ;motors.c: 415:             if(motCounter[0][0] < 0){
  6031  000C5E  BE5F               	btfsc	(_motCounter+1)^0,7,c
  6032  000C60  EF37  F006         	goto	u3180
  6033  000C64  EF34  F006         	goto	u3181
  6034  000C68                     u3181:
  6035  000C68  FFFF               	dw	65535	; assembler added errata NOP
  6036  000C6A  EFEF  F005         	goto	l3950
  6037  000C6E                     u3180:
  6038  000C6E  FFFF               	dw	65535	; assembler added errata NOP
  6039  000C70                     
  6040                           ;motors.c: 416:                 motCounter[0][0] = 3;
  6041  000C70  0E00               	movlw	0
  6042  000C72  6E5F               	movwf	(_motCounter+1)^0,c
  6043  000C74  0E03               	movlw	3
  6044  000C76  6E5E               	movwf	_motCounter^0,c
  6045  000C78  EFEF  F005         	goto	l3950
  6046  000C7C                     l3968:
  6047  000C7C  FFFF               	dw	65535	; assembler added errata NOP
  6048                           
  6049                           ;motors.c: 424:         if(MOT2Direction == 1){
  6050  000C7E  0420               	decf	moveToPoint@MOT2Direction^0,w,c
  6051  000C80  A4D8               	btfss	status,2,c
  6052  000C82  EF45  F006         	goto	u3191
  6053  000C86  EF48  F006         	goto	u3190
  6054  000C8A                     u3191:
  6055  000C8A  FFFF               	dw	65535	; assembler added errata NOP
  6056  000C8C  EF91  F006         	goto	l3984
  6057  000C90                     u3190:
  6058  000C90  FFFF               	dw	65535	; assembler added errata NOP
  6059  000C92                     
  6060                           ;motors.c: 426:             if(y1 + stepCounter() >= y2){
  6061  000C92  EC7D  F012         	call	_stepCounter	;wreg free
  6062  000C96  5017               	movf	moveToPoint@y1^0,w,c
  6063  000C98  2612               	addwf	?_stepCounter^0,f,c
  6064  000C9A  5018               	movf	(moveToPoint@y1+1)^0,w,c
  6065  000C9C  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6066  000C9E  501B               	movf	moveToPoint@y2^0,w,c
  6067  000CA0  5C12               	subwf	?_stepCounter^0,w,c
  6068  000CA2  501C               	movf	(moveToPoint@y2+1)^0,w,c
  6069  000CA4  5813               	subwfb	(?_stepCounter+1)^0,w,c
  6070  000CA6  A0D8               	btfss	status,0,c
  6071  000CA8  EF58  F006         	goto	u3201
  6072  000CAC  EF5B  F006         	goto	u3200
  6073  000CB0                     u3201:
  6074  000CB0  FFFF               	dw	65535	; assembler added errata NOP
  6075  000CB2  EF61  F006         	goto	l3974
  6076  000CB6                     u3200:
  6077  000CB6  FFFF               	dw	65535	; assembler added errata NOP
  6078  000CB8                     l3972:
  6079  000CB8  FFFF               	dw	65535	; assembler added errata NOP
  6080                           
  6081                           ;motors.c: 428:                 keepMovingY = 0;
  6082  000CBA  0E00               	movlw	0
  6083  000CBC  6E22               	movwf	moveToPoint@keepMovingY^0,c
  6084                           
  6085                           ;motors.c: 429:             }else if(keepMovingY){
  6086  000CBE  EFD5  F006         	goto	l4000
  6087  000CC2                     l3974:
  6088  000CC2  FFFF               	dw	65535	; assembler added errata NOP
  6089  000CC4  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6090  000CC6  B4D8               	btfsc	status,2,c
  6091  000CC8  EF68  F006         	goto	u3211
  6092  000CCC  EF6B  F006         	goto	u3210
  6093  000CD0                     u3211:
  6094  000CD0  FFFF               	dw	65535	; assembler added errata NOP
  6095  000CD2  EFD5  F006         	goto	l182
  6096  000CD6                     u3210:
  6097  000CD6  FFFF               	dw	65535	; assembler added errata NOP
  6098  000CD8                     
  6099                           ;motors.c: 435:             motCounter[1][0] += motCounter[1][1];
  6100  000CD8  EE20  F064         	lfsr	2,_motCounter+6
  6101  000CDC  50DE               	movf	postinc2,w,c
  6102  000CDE  2662               	addwf	(_motCounter+4)^0,f,c
  6103  000CE0  50DD               	movf	postdec2,w,c
  6104  000CE2  2263               	addwfc	(_motCounter+5)^0,f,c
  6105  000CE4                     
  6106                           ;motors.c: 436:             if(motCounter[1][0] > 3){
  6107  000CE4  BE63               	btfsc	(_motCounter+5)^0,7,c
  6108  000CE6  EF7E  F006         	goto	u3221
  6109  000CEA  5063               	movf	(_motCounter+5)^0,w,c
  6110  000CEC  E10A               	bnz	u3220
  6111  000CEE  0E04               	movlw	4
  6112  000CF0  5C62               	subwf	(_motCounter+4)^0,w,c
  6113  000CF2  A0D8               	btfss	status,0,c
  6114  000CF4  EF7E  F006         	goto	u3221
  6115  000CF8  EF81  F006         	goto	u3220
  6116  000CFC                     u3221:
  6117  000CFC  FFFF               	dw	65535	; assembler added errata NOP
  6118  000CFE  EF86  F006         	goto	l3982
  6119  000D02                     u3220:
  6120  000D02  FFFF               	dw	65535	; assembler added errata NOP
  6121  000D04                     
  6122                           ;motors.c: 437:                 motCounter[1][0] = 0;
  6123  000D04  0E00               	movlw	0
  6124  000D06  6E63               	movwf	(_motCounter+5)^0,c
  6125  000D08  0E00               	movlw	0
  6126  000D0A  6E62               	movwf	(_motCounter+4)^0,c
  6127  000D0C                     l3982:
  6128  000D0C  FFFF               	dw	65535	; assembler added errata NOP
  6129                           
  6130                           ;motors.c: 440:             LATB = stepMot2[motCounter[1][0]];
  6131  000D0E  0E88               	movlw	low _stepMot2
  6132  000D10  2462               	addwf	(_motCounter+4)^0,w,c
  6133  000D12  6ED9               	movwf	fsr2l,c
  6134  000D14  0E00               	movlw	high _stepMot2
  6135  000D16  2063               	addwfc	(_motCounter+5)^0,w,c
  6136  000D18  6EDA               	movwf	fsr2h,c
  6137  000D1A  50DF               	movf	indf2,w,c
  6138  000D1C  6E8A               	movwf	138,c	;volatile
  6139  000D1E  EFD5  F006         	goto	l4000
  6140  000D22                     l3984:
  6141  000D22  FFFF               	dw	65535	; assembler added errata NOP
  6142  000D24  5020               	movf	moveToPoint@MOT2Direction^0,w,c
  6143  000D26  A4D8               	btfss	status,2,c
  6144  000D28  EF98  F006         	goto	u3231
  6145  000D2C  EF9B  F006         	goto	u3230
  6146  000D30                     u3231:
  6147  000D30  FFFF               	dw	65535	; assembler added errata NOP
  6148  000D32  EFD5  F006         	goto	l4000
  6149  000D36                     u3230:
  6150  000D36  FFFF               	dw	65535	; assembler added errata NOP
  6151  000D38                     
  6152                           ;motors.c: 445:             if(y1 - stepCounter() <= y2){
  6153  000D38  EC7D  F012         	call	_stepCounter	;wreg free
  6154  000D3C  C017  F01D         	movff	moveToPoint@y1,??_moveToPoint
  6155  000D40  C018  F01E         	movff	moveToPoint@y1+1,??_moveToPoint+1
  6156  000D44  5012               	movf	?_stepCounter^0,w,c
  6157  000D46  5E1D               	subwf	??_moveToPoint^0,f,c
  6158  000D48  5013               	movf	(?_stepCounter+1)^0,w,c
  6159  000D4A  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6160  000D4C  501D               	movf	??_moveToPoint^0,w,c
  6161  000D4E  5C1B               	subwf	moveToPoint@y2^0,w,c
  6162  000D50  501E               	movf	(??_moveToPoint+1)^0,w,c
  6163  000D52  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  6164  000D54  A0D8               	btfss	status,0,c
  6165  000D56  EFAF  F006         	goto	u3241
  6166  000D5A  EFB2  F006         	goto	u3240
  6167  000D5E                     u3241:
  6168  000D5E  FFFF               	dw	65535	; assembler added errata NOP
  6169  000D60  EFB5  F006         	goto	l3990
  6170  000D64                     u3240:
  6171  000D64  FFFF               	dw	65535	; assembler added errata NOP
  6172  000D66  EF5C  F006         	goto	l3972
  6173  000D6A                     l3990:
  6174  000D6A  FFFF               	dw	65535	; assembler added errata NOP
  6175  000D6C  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6176  000D6E  B4D8               	btfsc	status,2,c
  6177  000D70  EFBC  F006         	goto	u3251
  6178  000D74  EFBF  F006         	goto	u3250
  6179  000D78                     u3251:
  6180  000D78  FFFF               	dw	65535	; assembler added errata NOP
  6181  000D7A  EFD5  F006         	goto	l4000
  6182  000D7E                     u3250:
  6183  000D7E  FFFF               	dw	65535	; assembler added errata NOP
  6184  000D80                     
  6185                           ;motors.c: 454:             motCounter[1][0] += motCounter[1][1];
  6186  000D80  EE20  F064         	lfsr	2,_motCounter+6
  6187  000D84  50DE               	movf	postinc2,w,c
  6188  000D86  2662               	addwf	(_motCounter+4)^0,f,c
  6189  000D88  50DD               	movf	postdec2,w,c
  6190  000D8A  2263               	addwfc	(_motCounter+5)^0,f,c
  6191  000D8C                     
  6192                           ;motors.c: 455:             if(motCounter[1][0] < 0){
  6193  000D8C  BE63               	btfsc	(_motCounter+5)^0,7,c
  6194  000D8E  EFCE  F006         	goto	u3260
  6195  000D92  EFCB  F006         	goto	u3261
  6196  000D96                     u3261:
  6197  000D96  FFFF               	dw	65535	; assembler added errata NOP
  6198  000D98  EF86  F006         	goto	l3982
  6199  000D9C                     u3260:
  6200  000D9C  FFFF               	dw	65535	; assembler added errata NOP
  6201  000D9E                     
  6202                           ;motors.c: 456:                 motCounter[1][0] = 3;
  6203  000D9E  0E00               	movlw	0
  6204  000DA0  6E63               	movwf	(_motCounter+5)^0,c
  6205  000DA2  0E03               	movlw	3
  6206  000DA4  6E62               	movwf	(_motCounter+4)^0,c
  6207  000DA6  EF86  F006         	goto	l3982
  6208  000DAA                     l182:
  6209  000DAA                     l4000:
  6210  000DAA  FFFF               	dw	65535	; assembler added errata NOP
  6211  000DAC  EC23  F012         	call	_stepMade	;wreg free
  6212  000DB0  5012               	movf	?_stepMade^0,w,c
  6213  000DB2  1013               	iorwf	(?_stepMade+1)^0,w,c
  6214  000DB4  B4D8               	btfsc	status,2,c
  6215  000DB6  EFDF  F006         	goto	u3271
  6216  000DBA  EFE2  F006         	goto	u3270
  6217  000DBE                     u3271:
  6218  000DBE  FFFF               	dw	65535	; assembler added errata NOP
  6219  000DC0  EFD5  F006         	goto	l4000
  6220  000DC4                     u3270:
  6221  000DC4                     l4002:
  6222  000DC4  FFFF               	dw	65535	; assembler added errata NOP
  6223                           
  6224                           ;motors.c: 368:     while(keepMovingX || keepMovingY){
  6225  000DC6  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6226  000DC8  A4D8               	btfss	status,2,c
  6227  000DCA  EFE9  F006         	goto	u3281
  6228  000DCE  EFEC  F006         	goto	u3280
  6229  000DD2                     u3281:
  6230  000DD2  FFFF               	dw	65535	; assembler added errata NOP
  6231  000DD4  EF95  F005         	goto	l3932
  6232  000DD8                     u3280:
  6233  000DD8  FFFF               	dw	65535	; assembler added errata NOP
  6234  000DDA  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6235  000DDC  A4D8               	btfss	status,2,c
  6236  000DDE  EFF3  F006         	goto	u3291
  6237  000DE2  EFF6  F006         	goto	u3290
  6238  000DE6                     u3291:
  6239  000DE6  FFFF               	dw	65535	; assembler added errata NOP
  6240  000DE8  EF95  F005         	goto	l3932
  6241  000DEC                     u3290:
  6242  000DEC                     l165:
  6243  000DEC  FFFF               	dw	65535	; assembler added errata NOP
  6244                           
  6245                           ;motors.c: 479:     T0CONbits.TMR0ON = 0;
  6246  000DEE  9ED5               	bcf	213,7,c	;volatile
  6247                           
  6248                           ;motors.c: 480:     T2CONbits.TMR2ON = 0;
  6249  000DF0  94CA               	bcf	202,2,c	;volatile
  6250  000DF2                     
  6251                           ;motors.c: 482:     TMR0 = 0;
  6252  000DF2  0E00               	movlw	0
  6253  000DF4  6ED7               	movwf	215,c	;volatile
  6254  000DF6  0E00               	movlw	0
  6255  000DF8  6ED6               	movwf	214,c	;volatile
  6256                           
  6257                           ;motors.c: 483:     TMR2 = 0;
  6258  000DFA  0E00               	movlw	0
  6259  000DFC  6ECC               	movwf	204,c	;volatile
  6260  000DFE                     
  6261                           ;motors.c: 486:     resetStep();
  6262  000DFE  EC97  F012         	call	_resetStep	;wreg free
  6263  000E02                     
  6264                           ;motors.c: 488:     return(tm0Error);
  6265  000E02  5050               	movf	_tm0Error^0,w,c
  6266  000E04                     l157:
  6267  000E04  FFFF               	dw	65535	; assembler added errata NOP
  6268  000E06  0012               	return		;funcret
  6269  000E08  FFFF               	dw	65535	; errata NOP
  6270  000E0A                     __end_of_moveToPoint:
  6271                           	callstack 0
  6272                           
  6273 ;; *************** function _stepCounter *****************
  6274 ;; Defined at:
  6275 ;;		line 70 in file "timer.c"
  6276 ;; Parameters:    Size  Location     Type
  6277 ;;		None
  6278 ;; Auto vars:     Size  Location     Type
  6279 ;;		None
  6280 ;; Return value:  Size  Location     Type
  6281 ;;                  2   17[COMRAM] unsigned int 
  6282 ;; Registers used:
  6283 ;;		None
  6284 ;; Tracked objects:
  6285 ;;		On entry : 0/0
  6286 ;;		On exit  : 0/0
  6287 ;;		Unchanged: 0/0
  6288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6289 ;;      Params:         2       0       0       0       0       0       0
  6290 ;;      Locals:         0       0       0       0       0       0       0
  6291 ;;      Temps:          0       0       0       0       0       0       0
  6292 ;;      Totals:         2       0       0       0       0       0       0
  6293 ;;Total ram usage:        2 bytes
  6294 ;; Hardware stack levels used:    1
  6295 ;; Hardware stack levels required when called:    4
  6296 ;; This function calls:
  6297 ;;		Nothing
  6298 ;; This function is called by:
  6299 ;;		_moveToPoint
  6300 ;; This function uses a non-reentrant model
  6301 ;;
  6302                           
  6303                           	psect	text34
  6304  0024FA                     __ptext34:
  6305                           	callstack 0
  6306  0024FA                     _stepCounter:
  6307                           	callstack 0
  6308  0024FA  FFFF               	dw	65535	; assembler added errata NOP
  6309  0024FC                     
  6310                           ;timer.c: 71:     return pwmStep;
  6311  0024FC  C053  F012         	movff	_pwmStep,?_stepCounter	;volatile
  6312  002500  6A13               	clrf	(?_stepCounter+1)^0,c
  6313  002502  0012               	return		;funcret
  6314  002504  FFFF               	dw	65535	; errata NOP
  6315  002506                     __end_of_stepCounter:
  6316                           	callstack 0
  6317                           
  6318 ;; *************** function _liftArm *****************
  6319 ;; Defined at:
  6320 ;;		line 679 in file "motors.c"
  6321 ;; Parameters:    Size  Location     Type
  6322 ;;		None
  6323 ;; Auto vars:     Size  Location     Type
  6324 ;;		None
  6325 ;; Return value:  Size  Location     Type
  6326 ;;                  1    wreg      unsigned char 
  6327 ;; Registers used:
  6328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6329 ;; Tracked objects:
  6330 ;;		On entry : 0/0
  6331 ;;		On exit  : 0/0
  6332 ;;		Unchanged: 0/0
  6333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6334 ;;      Params:         0       0       0       0       0       0       0
  6335 ;;      Locals:         0       0       0       0       0       0       0
  6336 ;;      Temps:          0       0       0       0       0       0       0
  6337 ;;      Totals:         0       0       0       0       0       0       0
  6338 ;;Total ram usage:        0 bytes
  6339 ;; Hardware stack levels used:    1
  6340 ;; Hardware stack levels required when called:    5
  6341 ;; This function calls:
  6342 ;;		_resetStep
  6343 ;;		_stepMade
  6344 ;; This function is called by:
  6345 ;;		_executeData
  6346 ;; This function uses a non-reentrant model
  6347 ;;
  6348                           
  6349                           	psect	text35
  6350  0020AA                     __ptext35:
  6351                           	callstack 0
  6352  0020AA                     _liftArm:
  6353                           	callstack 0
  6354  0020AA  FFFF               	dw	65535	; assembler added errata NOP
  6355  0020AC                     
  6356                           ;motors.c: 685:     motCounter[2][1] = -1;
  6357  0020AC  6868               	setf	(_motCounter+10)^0,c
  6358  0020AE  6869               	setf	(_motCounter+11)^0,c
  6359                           
  6360                           ;motors.c: 688:     T2CONbits.TMR2ON = 1;
  6361  0020B0  84CA               	bsf	202,2,c	;volatile
  6362  0020B2                     
  6363                           ;motors.c: 690:     tm0Error = 0;
  6364  0020B2  0E00               	movlw	0
  6365  0020B4  6E51               	movwf	(_tm0Error+1)^0,c
  6366  0020B6  0E00               	movlw	0
  6367  0020B8  6E50               	movwf	_tm0Error^0,c
  6368                           
  6369                           ;motors.c: 691:     tm0Limit = 250;
  6370  0020BA  0EFA               	movlw	250
  6371  0020BC  6E5D               	movwf	_tm0Limit^0,c
  6372  0020BE                     
  6373                           ;motors.c: 692:     T0CONbits.TMR0ON = 1;
  6374  0020BE  8ED5               	bsf	213,7,c	;volatile
  6375                           
  6376                           ;motors.c: 696:     while(!PORTEbits.RE2){
  6377  0020C0  EF9E  F010         	goto	l217
  6378  0020C4                     l4110:
  6379  0020C4  FFFF               	dw	65535	; assembler added errata NOP
  6380                           
  6381                           ;motors.c: 699:         if(tm0Error){
  6382  0020C6  5050               	movf	_tm0Error^0,w,c
  6383  0020C8  1051               	iorwf	(_tm0Error+1)^0,w,c
  6384  0020CA  B4D8               	btfsc	status,2,c
  6385  0020CC  EF6A  F010         	goto	u3421
  6386  0020D0  EF6D  F010         	goto	u3420
  6387  0020D4                     u3421:
  6388  0020D4  FFFF               	dw	65535	; assembler added errata NOP
  6389  0020D6  EF74  F010         	goto	l4114
  6390  0020DA                     u3420:
  6391  0020DA  FFFF               	dw	65535	; assembler added errata NOP
  6392  0020DC                     
  6393                           ;motors.c: 704:             tm0Error = 6;
  6394  0020DC  0E00               	movlw	0
  6395  0020DE  6E51               	movwf	(_tm0Error+1)^0,c
  6396  0020E0  0E06               	movlw	6
  6397  0020E2  6E50               	movwf	_tm0Error^0,c
  6398                           
  6399                           ;motors.c: 705:             break;
  6400  0020E4  EFA7  F010         	goto	l220
  6401  0020E8                     l4114:
  6402  0020E8  FFFF               	dw	65535	; assembler added errata NOP
  6403                           
  6404                           ;motors.c: 714:             motCounter[2][0] += motCounter[2][1];
  6405  0020EA  EE20  F068         	lfsr	2,_motCounter+10
  6406  0020EE  50DE               	movf	postinc2,w,c
  6407  0020F0  2666               	addwf	(_motCounter+8)^0,f,c
  6408  0020F2  50DD               	movf	postdec2,w,c
  6409  0020F4  2267               	addwfc	(_motCounter+9)^0,f,c
  6410  0020F6                     
  6411                           ;motors.c: 715:             if(motCounter[2][0] < 0){
  6412  0020F6  BE67               	btfsc	(_motCounter+9)^0,7,c
  6413  0020F8  EF83  F010         	goto	u3430
  6414  0020FC  EF80  F010         	goto	u3431
  6415  002100                     u3431:
  6416  002100  FFFF               	dw	65535	; assembler added errata NOP
  6417  002102  EF88  F010         	goto	l4120
  6418  002106                     u3430:
  6419  002106  FFFF               	dw	65535	; assembler added errata NOP
  6420  002108                     
  6421                           ;motors.c: 716:                 motCounter[2][0] = 3;
  6422  002108  0E00               	movlw	0
  6423  00210A  6E67               	movwf	(_motCounter+9)^0,c
  6424  00210C  0E03               	movlw	3
  6425  00210E  6E66               	movwf	(_motCounter+8)^0,c
  6426  002110                     l4120:
  6427  002110  FFFF               	dw	65535	; assembler added errata NOP
  6428                           
  6429                           ;motors.c: 719:             LATC = stepMot3[motCounter[2][0]];
  6430  002112  0E84               	movlw	low _stepMot3
  6431  002114  2466               	addwf	(_motCounter+8)^0,w,c
  6432  002116  6ED9               	movwf	fsr2l,c
  6433  002118  0E00               	movlw	high _stepMot3
  6434  00211A  2067               	addwfc	(_motCounter+9)^0,w,c
  6435  00211C  6EDA               	movwf	fsr2h,c
  6436  00211E  50DF               	movf	indf2,w,c
  6437  002120  6E8B               	movwf	139,c	;volatile
  6438  002122                     l4122:
  6439  002122  FFFF               	dw	65535	; assembler added errata NOP
  6440  002124  EC23  F012         	call	_stepMade	;wreg free
  6441  002128  5012               	movf	?_stepMade^0,w,c
  6442  00212A  1013               	iorwf	(?_stepMade+1)^0,w,c
  6443  00212C  B4D8               	btfsc	status,2,c
  6444  00212E  EF9B  F010         	goto	u3441
  6445  002132  EF9E  F010         	goto	u3440
  6446  002136                     u3441:
  6447  002136  FFFF               	dw	65535	; assembler added errata NOP
  6448  002138  EF91  F010         	goto	l4122
  6449  00213C                     u3440:
  6450  00213C                     l217:
  6451  00213C  FFFF               	dw	65535	; assembler added errata NOP
  6452                           
  6453                           ;motors.c: 696:     while(!PORTEbits.RE2){
  6454  00213E  A484               	btfss	132,2,c	;volatile
  6455  002140  EFA4  F010         	goto	u3451
  6456  002144  EFA7  F010         	goto	u3450
  6457  002148                     u3451:
  6458  002148  FFFF               	dw	65535	; assembler added errata NOP
  6459  00214A  EF62  F010         	goto	l4110
  6460  00214E                     u3450:
  6461  00214E                     l220:
  6462  00214E  FFFF               	dw	65535	; assembler added errata NOP
  6463                           
  6464                           ;motors.c: 736:     T0CONbits.TMR0ON = 0;
  6465  002150  9ED5               	bcf	213,7,c	;volatile
  6466                           
  6467                           ;motors.c: 737:     T2CONbits.TMR2ON = 0;
  6468  002152  94CA               	bcf	202,2,c	;volatile
  6469  002154                     
  6470                           ;motors.c: 739:     TMR0 = 0;
  6471  002154  0E00               	movlw	0
  6472  002156  6ED7               	movwf	215,c	;volatile
  6473  002158  0E00               	movlw	0
  6474  00215A  6ED6               	movwf	214,c	;volatile
  6475                           
  6476                           ;motors.c: 740:     TMR2 = 0;
  6477  00215C  0E00               	movlw	0
  6478  00215E  6ECC               	movwf	204,c	;volatile
  6479  002160                     
  6480                           ;motors.c: 743:     resetStep();
  6481  002160  EC97  F012         	call	_resetStep	;wreg free
  6482  002164                     
  6483                           ;motors.c: 745:     return(tm0Error);
  6484  002164  5050               	movf	_tm0Error^0,w,c
  6485  002166  0012               	return		;funcret
  6486  002168  FFFF               	dw	65535	; errata NOP
  6487  00216A                     __end_of_liftArm:
  6488                           	callstack 0
  6489                           
  6490 ;; *************** function _stepMade *****************
  6491 ;; Defined at:
  6492 ;;		line 59 in file "timer.c"
  6493 ;; Parameters:    Size  Location     Type
  6494 ;;		None
  6495 ;; Auto vars:     Size  Location     Type
  6496 ;;  temp            1   19[COMRAM] unsigned char 
  6497 ;; Return value:  Size  Location     Type
  6498 ;;                  2   17[COMRAM] unsigned int 
  6499 ;; Registers used:
  6500 ;;		wreg, status,2
  6501 ;; Tracked objects:
  6502 ;;		On entry : 0/0
  6503 ;;		On exit  : 0/0
  6504 ;;		Unchanged: 0/0
  6505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6506 ;;      Params:         2       0       0       0       0       0       0
  6507 ;;      Locals:         1       0       0       0       0       0       0
  6508 ;;      Temps:          0       0       0       0       0       0       0
  6509 ;;      Totals:         3       0       0       0       0       0       0
  6510 ;;Total ram usage:        3 bytes
  6511 ;; Hardware stack levels used:    1
  6512 ;; Hardware stack levels required when called:    4
  6513 ;; This function calls:
  6514 ;;		Nothing
  6515 ;; This function is called by:
  6516 ;;		_resetPosition
  6517 ;;		_moveToPoint
  6518 ;;		_touchObject
  6519 ;;		_touchTherm
  6520 ;;		_liftArm
  6521 ;;		_rotateObj
  6522 ;;		_pickObject
  6523 ;;		_releaseObj
  6524 ;; This function uses a non-reentrant model
  6525 ;;
  6526                           
  6527                           	psect	text36
  6528  002446                     __ptext36:
  6529                           	callstack 0
  6530  002446                     _stepMade:
  6531                           	callstack 0
  6532  002446  FFFF               	dw	65535	; assembler added errata NOP
  6533  002448                     
  6534                           ;timer.c: 60:     unsigned char temp = stepToggle;
  6535  002448  C052  F014         	movff	_stepToggle,stepMade@temp	;volatile
  6536  00244C                     
  6537                           ;timer.c: 62:     stepToggle = 0;
  6538  00244C  0E00               	movlw	0
  6539  00244E  6E52               	movwf	_stepToggle^0,c	;volatile
  6540  002450                     
  6541                           ;timer.c: 64:     return temp;
  6542  002450  C014  F012         	movff	stepMade@temp,?_stepMade
  6543  002454  6A13               	clrf	(?_stepMade+1)^0,c
  6544  002456  0012               	return		;funcret
  6545  002458  FFFF               	dw	65535	; errata NOP
  6546  00245A                     __end_of_stepMade:
  6547                           	callstack 0
  6548                           
  6549 ;; *************** function _resetStep *****************
  6550 ;; Defined at:
  6551 ;;		line 77 in file "timer.c"
  6552 ;; Parameters:    Size  Location     Type
  6553 ;;		None
  6554 ;; Auto vars:     Size  Location     Type
  6555 ;;		None
  6556 ;; Return value:  Size  Location     Type
  6557 ;;                  1    wreg      void 
  6558 ;; Registers used:
  6559 ;;		wreg, status,2
  6560 ;; Tracked objects:
  6561 ;;		On entry : 0/0
  6562 ;;		On exit  : 0/0
  6563 ;;		Unchanged: 0/0
  6564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6565 ;;      Params:         0       0       0       0       0       0       0
  6566 ;;      Locals:         0       0       0       0       0       0       0
  6567 ;;      Temps:          0       0       0       0       0       0       0
  6568 ;;      Totals:         0       0       0       0       0       0       0
  6569 ;;Total ram usage:        0 bytes
  6570 ;; Hardware stack levels used:    1
  6571 ;; Hardware stack levels required when called:    4
  6572 ;; This function calls:
  6573 ;;		Nothing
  6574 ;; This function is called by:
  6575 ;;		_resetPosition
  6576 ;;		_moveToPoint
  6577 ;;		_touchObject
  6578 ;;		_touchTherm
  6579 ;;		_liftArm
  6580 ;;		_rotateObj
  6581 ;; This function uses a non-reentrant model
  6582 ;;
  6583                           
  6584                           	psect	text37
  6585  00252E                     __ptext37:
  6586                           	callstack 0
  6587  00252E                     _resetStep:
  6588                           	callstack 0
  6589  00252E  FFFF               	dw	65535	; assembler added errata NOP
  6590  002530                     
  6591                           ;timer.c: 78:     pwmStep = 0;
  6592  002530  0E00               	movlw	0
  6593  002532  6E53               	movwf	_pwmStep^0,c	;volatile
  6594  002534  0012               	return		;funcret
  6595  002536  FFFF               	dw	65535	; errata NOP
  6596  002538                     __end_of_resetStep:
  6597                           	callstack 0
  6598                           
  6599 ;; *************** function _getData *****************
  6600 ;; Defined at:
  6601 ;;		line 35 in file "usart.c"
  6602 ;; Parameters:    Size  Location     Type
  6603 ;;		None
  6604 ;; Auto vars:     Size  Location     Type
  6605 ;;		None
  6606 ;; Return value:  Size  Location     Type
  6607 ;;                  2   17[COMRAM] PTR struct .
  6608 ;; Registers used:
  6609 ;;		wreg, status,2, status,0
  6610 ;; Tracked objects:
  6611 ;;		On entry : 0/0
  6612 ;;		On exit  : 0/0
  6613 ;;		Unchanged: 0/0
  6614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6615 ;;      Params:         2       0       0       0       0       0       0
  6616 ;;      Locals:         0       0       0       0       0       0       0
  6617 ;;      Temps:          0       0       0       0       0       0       0
  6618 ;;      Totals:         2       0       0       0       0       0       0
  6619 ;;Total ram usage:        2 bytes
  6620 ;; Hardware stack levels used:    1
  6621 ;; Hardware stack levels required when called:    4
  6622 ;; This function calls:
  6623 ;;		Nothing
  6624 ;; This function is called by:
  6625 ;;		_executeData
  6626 ;; This function uses a non-reentrant model
  6627 ;;
  6628                           
  6629                           	psect	text38
  6630  0024AA                     __ptext38:
  6631                           	callstack 0
  6632  0024AA                     _getData:
  6633                           	callstack 0
  6634  0024AA  FFFF               	dw	65535	; assembler added errata NOP
  6635  0024AC                     
  6636                           ;usart.c: 36:     return(&dataSequence[0]);
  6637  0024AC  0ED1               	movlw	low _dataSequence
  6638  0024AE  6E12               	movwf	?_getData^0,c
  6639  0024B0  0E00               	movlw	high _dataSequence
  6640  0024B2  6E13               	movwf	(?_getData+1)^0,c
  6641  0024B4  0012               	return		;funcret
  6642  0024B6  FFFF               	dw	65535	; errata NOP
  6643  0024B8                     __end_of_getData:
  6644                           	callstack 0
  6645                           
  6646 ;; *************** function _clearTM0 *****************
  6647 ;; Defined at:
  6648 ;;		line 35 in file "motors.c"
  6649 ;; Parameters:    Size  Location     Type
  6650 ;;		None
  6651 ;; Auto vars:     Size  Location     Type
  6652 ;;		None
  6653 ;; Return value:  Size  Location     Type
  6654 ;;                  1    wreg      void 
  6655 ;; Registers used:
  6656 ;;		wreg, status,2
  6657 ;; Tracked objects:
  6658 ;;		On entry : 0/0
  6659 ;;		On exit  : 0/0
  6660 ;;		Unchanged: 0/0
  6661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6662 ;;      Params:         0       0       0       0       0       0       0
  6663 ;;      Locals:         0       0       0       0       0       0       0
  6664 ;;      Temps:          0       0       0       0       0       0       0
  6665 ;;      Totals:         0       0       0       0       0       0       0
  6666 ;;Total ram usage:        0 bytes
  6667 ;; Hardware stack levels used:    1
  6668 ;; Hardware stack levels required when called:    4
  6669 ;; This function calls:
  6670 ;;		Nothing
  6671 ;; This function is called by:
  6672 ;;		_main
  6673 ;; This function uses a non-reentrant model
  6674 ;;
  6675                           
  6676                           	psect	text39
  6677  0024B8                     __ptext39:
  6678                           	callstack 0
  6679  0024B8                     _clearTM0:
  6680                           	callstack 0
  6681  0024B8  FFFF               	dw	65535	; assembler added errata NOP
  6682  0024BA                     
  6683                           ;motors.c: 36:     tm0Error = 0;
  6684  0024BA  0E00               	movlw	0
  6685  0024BC  6E51               	movwf	(_tm0Error+1)^0,c
  6686  0024BE  0E00               	movlw	0
  6687  0024C0  6E50               	movwf	_tm0Error^0,c
  6688  0024C2  0012               	return		;funcret
  6689  0024C4  FFFF               	dw	65535	; errata NOP
  6690  0024C6                     __end_of_clearTM0:
  6691                           	callstack 0
  6692                           
  6693 ;; *************** function _isr *****************
  6694 ;; Defined at:
  6695 ;;		line 38 in file "interrupt.c"
  6696 ;; Parameters:    Size  Location     Type
  6697 ;;		None
  6698 ;; Auto vars:     Size  Location     Type
  6699 ;;  temp            1   16[COMRAM] unsigned char 
  6700 ;; Return value:  Size  Location     Type
  6701 ;;                  1    wreg      void 
  6702 ;; Registers used:
  6703 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6704 ;; Tracked objects:
  6705 ;;		On entry : 0/0
  6706 ;;		On exit  : 0/0
  6707 ;;		Unchanged: 0/0
  6708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6709 ;;      Params:         0       0       0       0       0       0       0
  6710 ;;      Locals:         1       0       0       0       0       0       0
  6711 ;;      Temps:          6       0       0       0       0       0       0
  6712 ;;      Totals:         7       0       0       0       0       0       0
  6713 ;;Total ram usage:        7 bytes
  6714 ;; Hardware stack levels used:    1
  6715 ;; Hardware stack levels required when called:    3
  6716 ;; This function calls:
  6717 ;;		_abortAll
  6718 ;;		_fatalError
  6719 ;;		_increaseStep
  6720 ;;		_retPeriod
  6721 ;;		_setThermRel
  6722 ;;		_setTouchRel
  6723 ;;		_toggleStep
  6724 ;;		_whatsTM0Limit
  6725 ;;		_writeTM0
  6726 ;;		i2_storeData
  6727 ;; This function is called by:
  6728 ;;		Interrupt level 2
  6729 ;; This function uses a non-reentrant model
  6730 ;;
  6731                           
  6732                           	psect	intcode
  6733  000008                     __pintcode:
  6734                           	callstack 0
  6735  000008                     _isr:
  6736                           	callstack 0
  6737  000008  FFFF               	dw	65535	; assembler added errata NOP
  6738                           
  6739                           ;incstack = 0
  6740  00000A  826D               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6741  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  6742  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  6743  000014  CFF3 F00F          	movff	prodl,??_isr+4
  6744  000018  CFF4 F010          	movff	prodh,??_isr+5
  6745  00001C                     
  6746                           ;interrupt.c: 39:     static unsigned int single_cycle = 0;;interrupt.c: 40:     static 
      +                          unsigned char tm0Count = 0;;interrupt.c: 41:     static unsigned char completeStep = 0;;
      +                          interrupt.c: 44:     if(INTCONbits.T0IF){
  6747  00001C  A4F2               	btfss	242,2,c	;volatile
  6748  00001E  EF13  F000         	goto	i2u252_41
  6749  000022  EF16  F000         	goto	i2u252_40
  6750  000026                     i2u252_41:
  6751  000026  FFFF               	dw	65535	; assembler added errata NOP
  6752  000028  EF2C  F000         	goto	i2l3420
  6753  00002C                     i2u252_40:
  6754  00002C  FFFF               	dw	65535	; assembler added errata NOP
  6755  00002E                     
  6756                           ;interrupt.c: 45:         INTCONbits.T0IF = 0;
  6757  00002E  94F2               	bcf	242,2,c	;volatile
  6758  000030                     
  6759                           ;interrupt.c: 48:         tm0Count++;
  6760  000030  2A5A               	incf	isr@tm0Count^0,f,c
  6761  000032                     
  6762                           ;interrupt.c: 50:         if(tm0Count >= whatsTM0Limit()){
  6763  000032  ECBB  F012         	call	_whatsTM0Limit	;wreg free
  6764  000036  6E0B               	movwf	??_isr^0,c
  6765  000038  500B               	movf	??_isr^0,w,c
  6766  00003A  5C5A               	subwf	isr@tm0Count^0,w,c
  6767  00003C  A0D8               	btfss	status,0,c
  6768  00003E  EF23  F000         	goto	i2u253_41
  6769  000042  EF26  F000         	goto	i2u253_40
  6770  000046                     i2u253_41:
  6771  000046  FFFF               	dw	65535	; assembler added errata NOP
  6772  000048  EF2C  F000         	goto	i2l3420
  6773  00004C                     i2u253_40:
  6774  00004C  FFFF               	dw	65535	; assembler added errata NOP
  6775  00004E                     
  6776                           ;interrupt.c: 51:             T0CONbits.TMR0ON = 0;
  6777  00004E  9ED5               	bcf	213,7,c	;volatile
  6778  000050                     
  6779                           ;interrupt.c: 52:             tm0Count = 0;
  6780  000050  0E00               	movlw	0
  6781  000052  6E5A               	movwf	isr@tm0Count^0,c
  6782  000054                     
  6783                           ;interrupt.c: 53:             writeTM0();
  6784  000054  EC63  F012         	call	_writeTM0	;wreg free
  6785  000058                     i2l3420:
  6786  000058  FFFF               	dw	65535	; assembler added errata NOP
  6787                           
  6788                           ;interrupt.c: 58:     if(PIR1bits.TMR1IF){
  6789  00005A  A09E               	btfss	158,0,c	;volatile
  6790  00005C  EF32  F000         	goto	i2u254_41
  6791  000060  EF35  F000         	goto	i2u254_40
  6792  000064                     i2u254_41:
  6793  000064  FFFF               	dw	65535	; assembler added errata NOP
  6794  000066  EF45  F000         	goto	i2l3428
  6795  00006A                     i2u254_40:
  6796  00006A  FFFF               	dw	65535	; assembler added errata NOP
  6797  00006C                     
  6798                           ;interrupt.c: 59:         PIR1bits.TMR1IF = 0;
  6799  00006C  909E               	bcf	158,0,c	;volatile
  6800  00006E                     
  6801                           ;interrupt.c: 60:         if(fatalError()){
  6802  00006E  ECC3  F012         	call	_fatalError	;wreg free
  6803  000072  0900               	iorlw	0
  6804  000074  B4D8               	btfsc	status,2,c
  6805  000076  EF3F  F000         	goto	i2u255_41
  6806  00007A  EF42  F000         	goto	i2u255_40
  6807  00007E                     i2u255_41:
  6808  00007E  FFFF               	dw	65535	; assembler added errata NOP
  6809  000080  EF45  F000         	goto	i2l3428
  6810  000084                     i2u255_40:
  6811  000084  FFFF               	dw	65535	; assembler added errata NOP
  6812  000086                     
  6813                           ;interrupt.c: 61:             abortAll();
  6814  000086  EC36  F012         	call	_abortAll	;wreg free
  6815  00008A                     i2l3428:
  6816  00008A  FFFF               	dw	65535	; assembler added errata NOP
  6817                           
  6818                           ;interrupt.c: 66:     if(PIR1bits.TMR2IF){
  6819  00008C  A29E               	btfss	158,1,c	;volatile
  6820  00008E  EF4B  F000         	goto	i2u256_41
  6821  000092  EF4E  F000         	goto	i2u256_40
  6822  000096                     i2u256_41:
  6823  000096  FFFF               	dw	65535	; assembler added errata NOP
  6824  000098  EF80  F000         	goto	i2l3450
  6825  00009C                     i2u256_40:
  6826  00009C  FFFF               	dw	65535	; assembler added errata NOP
  6827  00009E                     
  6828                           ;interrupt.c: 67:         PIR1bits.TMR2IF = 0;
  6829  00009E  929E               	bcf	158,1,c	;volatile
  6830  0000A0                     
  6831                           ;interrupt.c: 68:         single_cycle++;
  6832  0000A0  4A48               	infsnz	isr@single_cycle^0,f,c
  6833  0000A2  2A49               	incf	(isr@single_cycle+1)^0,f,c
  6834  0000A4                     
  6835                           ;interrupt.c: 71:         if(single_cycle > retPeriod()){
  6836  0000A4  EC6A  F012         	call	_retPeriod	;wreg free
  6837  0000A8  5048               	movf	isr@single_cycle^0,w,c
  6838  0000AA  5C01               	subwf	?_retPeriod^0,w,c
  6839  0000AC  5049               	movf	(isr@single_cycle+1)^0,w,c
  6840  0000AE  5802               	subwfb	(?_retPeriod+1)^0,w,c
  6841  0000B0  B0D8               	btfsc	status,0,c
  6842  0000B2  EF5D  F000         	goto	i2u257_41
  6843  0000B6  EF60  F000         	goto	i2u257_40
  6844  0000BA                     i2u257_41:
  6845  0000BA  FFFF               	dw	65535	; assembler added errata NOP
  6846  0000BC  EF80  F000         	goto	i2l3450
  6847  0000C0                     i2u257_40:
  6848  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  6849  0000C2                     
  6850                           ;interrupt.c: 72:             single_cycle = 0;
  6851  0000C2  0E00               	movlw	0
  6852  0000C4  6E49               	movwf	(isr@single_cycle+1)^0,c
  6853  0000C6  0E00               	movlw	0
  6854  0000C8  6E48               	movwf	isr@single_cycle^0,c
  6855  0000CA                     
  6856                           ;interrupt.c: 73:             completeStep++;
  6857  0000CA  2A59               	incf	isr@completeStep^0,f,c
  6858  0000CC                     
  6859                           ;interrupt.c: 76:             if(completeStep != 0 && !(completeStep % 2)){
  6860  0000CC  5059               	movf	isr@completeStep^0,w,c
  6861  0000CE  B4D8               	btfsc	status,2,c
  6862  0000D0  EF6C  F000         	goto	i2u258_41
  6863  0000D4  EF6F  F000         	goto	i2u258_40
  6864  0000D8                     i2u258_41:
  6865  0000D8  FFFF               	dw	65535	; assembler added errata NOP
  6866  0000DA  EF7D  F000         	goto	i2l3448
  6867  0000DE                     i2u258_40:
  6868  0000DE  FFFF               	dw	65535	; assembler added errata NOP
  6869  0000E0  B059               	btfsc	isr@completeStep^0,0,c
  6870  0000E2  EF75  F000         	goto	i2u259_41
  6871  0000E6  EF78  F000         	goto	i2u259_40
  6872  0000EA                     i2u259_41:
  6873  0000EA  FFFF               	dw	65535	; assembler added errata NOP
  6874  0000EC  EF7D  F000         	goto	i2l3448
  6875  0000F0                     i2u259_40:
  6876  0000F0  FFFF               	dw	65535	; assembler added errata NOP
  6877  0000F2                     
  6878                           ;interrupt.c: 78:                 completeStep = 0;
  6879  0000F2  0E00               	movlw	0
  6880  0000F4  6E59               	movwf	isr@completeStep^0,c
  6881  0000F6                     
  6882                           ;interrupt.c: 81:                 increaseStep();
  6883  0000F6  ECBF  F012         	call	_increaseStep	;wreg free
  6884  0000FA                     i2l3448:
  6885  0000FA  FFFF               	dw	65535	; assembler added errata NOP
  6886                           
  6887                           ;interrupt.c: 86:             toggleStep();
  6888  0000FC  EC9C  F012         	call	_toggleStep	;wreg free
  6889  000100                     i2l3450:
  6890  000100  FFFF               	dw	65535	; assembler added errata NOP
  6891                           
  6892                           ;interrupt.c: 91:     if(PIR1bits.ADIF){
  6893  000102  AC9E               	btfss	158,6,c	;volatile
  6894  000104  EF86  F000         	goto	i2u260_41
  6895  000108  EF89  F000         	goto	i2u260_40
  6896  00010C                     i2u260_41:
  6897  00010C  FFFF               	dw	65535	; assembler added errata NOP
  6898  00010E  EFB6  F000         	goto	i2l3462
  6899  000112                     i2u260_40:
  6900  000112  FFFF               	dw	65535	; assembler added errata NOP
  6901  000114                     
  6902                           ;interrupt.c: 92:         PIR1bits.ADIF = 0;
  6903  000114  9C9E               	bcf	158,6,c	;volatile
  6904                           
  6905                           ;interrupt.c: 95:         ADC_res = ADRESL;
  6906  000116  CFC3 F04A          	movff	4035,_ADC_res	;volatile
  6907  00011A  6A4B               	clrf	(_ADC_res+1)^0,c
  6908  00011C                     
  6909                           ;interrupt.c: 96:         ADC_res |= (ADRESH << 8);
  6910  00011C  50C4               	movf	196,w,c	;volatile
  6911  00011E  6E0C               	movwf	(??_isr+1)^0,c
  6912  000120  6A0B               	clrf	??_isr^0,c
  6913  000122  500B               	movf	??_isr^0,w,c
  6914  000124  124A               	iorwf	_ADC_res^0,f,c
  6915  000126  500C               	movf	(??_isr+1)^0,w,c
  6916  000128  124B               	iorwf	(_ADC_res+1)^0,f,c
  6917                           
  6918                           ;interrupt.c: 99:         if(ADC_res > therm_pressure){
  6919  00012A  044A               	decf	_ADC_res^0,w,c
  6920  00012C  0E04               	movlw	4
  6921  00012E  584B               	subwfb	(_ADC_res+1)^0,w,c
  6922  000130  A0D8               	btfss	status,0,c
  6923  000132  EF9D  F000         	goto	i2u261_41
  6924  000136  EFA0  F000         	goto	i2u261_40
  6925  00013A                     i2u261_41:
  6926  00013A  FFFF               	dw	65535	; assembler added errata NOP
  6927  00013C  EFA7  F000         	goto	i2l3458
  6928  000140                     i2u261_40:
  6929  000140  FFFF               	dw	65535	; assembler added errata NOP
  6930  000142                     
  6931                           ;interrupt.c: 101:             setTouchRel();
  6932  000142  ECA1  F012         	call	_setTouchRel	;wreg free
  6933                           
  6934                           ;interrupt.c: 102:             setThermRel();
  6935  000146  ECA6  F012         	call	_setThermRel	;wreg free
  6936                           
  6937                           ;interrupt.c: 103:         }else if(ADC_res > touch_pressure){
  6938  00014A  EFB6  F000         	goto	i2l3462
  6939  00014E                     i2l3458:
  6940  00014E  FFFF               	dw	65535	; assembler added errata NOP
  6941  000150  044A               	decf	_ADC_res^0,w,c
  6942  000152  0E02               	movlw	2
  6943  000154  584B               	subwfb	(_ADC_res+1)^0,w,c
  6944  000156  A0D8               	btfss	status,0,c
  6945  000158  EFB0  F000         	goto	i2u262_41
  6946  00015C  EFB3  F000         	goto	i2u262_40
  6947  000160                     i2u262_41:
  6948  000160  FFFF               	dw	65535	; assembler added errata NOP
  6949  000162  EFB6  F000         	goto	i2l3462
  6950  000166                     i2u262_40:
  6951  000166  FFFF               	dw	65535	; assembler added errata NOP
  6952  000168                     
  6953                           ;interrupt.c: 105:             setTouchRel();
  6954  000168  ECA1  F012         	call	_setTouchRel	;wreg free
  6955  00016C                     i2l3462:
  6956  00016C  FFFF               	dw	65535	; assembler added errata NOP
  6957                           
  6958                           ;interrupt.c: 110:     if(PIR1bits.RC1IF){
  6959  00016E  AA9E               	btfss	158,5,c	;volatile
  6960  000170  EFBC  F000         	goto	i2u263_41
  6961  000174  EFBF  F000         	goto	i2u263_40
  6962  000178                     i2u263_41:
  6963  000178  FFFF               	dw	65535	; assembler added errata NOP
  6964  00017A  EFC6  F000         	goto	i2l469
  6965  00017E                     i2u263_40:
  6966  00017E  FFFF               	dw	65535	; assembler added errata NOP
  6967  000180                     
  6968                           ;interrupt.c: 111:         PIR1bits.RC1IF = 0;
  6969  000180  9A9E               	bcf	158,5,c	;volatile
  6970                           
  6971                           ;interrupt.c: 114:         unsigned char temp = RCREG1;
  6972  000182  CFAE F011          	movff	4014,isr@temp	;volatile
  6973  000186                     
  6974                           ;interrupt.c: 116:         storeData(temp);
  6975  000186  5011               	movf	isr@temp^0,w,c
  6976  000188  ECD9  F00B         	call	i2_storeData
  6977  00018C                     i2l469:
  6978  00018C  FFFF               	dw	65535	; assembler added errata NOP
  6979  00018E  C010  FFF4         	movff	??_isr+5,prodh
  6980  000192  C00F  FFF3         	movff	??_isr+4,prodl
  6981  000196  C00E  FFDA         	movff	??_isr+3,fsr2h
  6982  00019A  C00D  FFD9         	movff	??_isr+2,fsr2l
  6983  00019E  926D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6984  0001A0  0011               	retfie		f
  6985  0001A2  FFFF               	dw	65535	; errata NOP
  6986  0001A4                     __end_of_isr:
  6987                           	callstack 0
  6988                           
  6989 ;; *************** function i2_storeData *****************
  6990 ;; Defined at:
  6991 ;;		line 164 in file "usart.c"
  6992 ;; Parameters:    Size  Location     Type
  6993 ;;  data            1    wreg     unsigned char 
  6994 ;; Auto vars:     Size  Location     Type
  6995 ;;  data            1    9[COMRAM] unsigned char 
  6996 ;; Return value:  Size  Location     Type
  6997 ;;                  1    wreg      void 
  6998 ;; Registers used:
  6999 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7000 ;; Tracked objects:
  7001 ;;		On entry : 0/0
  7002 ;;		On exit  : 0/0
  7003 ;;		Unchanged: 0/0
  7004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7005 ;;      Params:         0       0       0       0       0       0       0
  7006 ;;      Locals:         1       0       0       0       0       0       0
  7007 ;;      Temps:          2       0       0       0       0       0       0
  7008 ;;      Totals:         3       0       0       0       0       0       0
  7009 ;;Total ram usage:        3 bytes
  7010 ;; Hardware stack levels used:    1
  7011 ;; Hardware stack levels required when called:    2
  7012 ;; This function calls:
  7013 ;;		i2_printError
  7014 ;; This function is called by:
  7015 ;;		_isr
  7016 ;; This function uses a non-reentrant model
  7017 ;;
  7018                           
  7019                           	psect	text41
  7020  0017B2                     __ptext41:
  7021                           	callstack 0
  7022  0017B2                     i2_storeData:
  7023                           	callstack 0
  7024  0017B2  FFFF               	dw	65535	; assembler added errata NOP
  7025                           
  7026                           ;incstack = 0
  7027                           ;i2storeData@data stored from wreg
  7028  0017B4  6E0A               	movwf	i2storeData@data^0,c
  7029  0017B6                     
  7030                           ;usart.c: 166:     static unsigned char counter = 0;;usart.c: 167:     static unsigned c
      +                          har mexLength = 5;;usart.c: 168:     static unsigned char command;;usart.c: 169:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 173:     receivedMex[counter] = data;
  7031  0017B6  0EC8               	movlw	low storeData@receivedMex
  7032  0017B8  2455               	addwf	storeData@counter^0,w,c
  7033  0017BA  6ED9               	movwf	fsr2l,c
  7034  0017BC  6ADA               	clrf	fsr2h,c
  7035  0017BE  0E00               	movlw	high storeData@receivedMex
  7036  0017C0  22DA               	addwfc	fsr2h,f,c
  7037  0017C2  C00A  FFDF         	movff	i2storeData@data,indf2
  7038  0017C6                     
  7039                           ;usart.c: 175:     counter++;
  7040  0017C6  2A55               	incf	storeData@counter^0,f,c
  7041                           
  7042                           ;usart.c: 178:     switch(receivedMex[0]){
  7043  0017C8  EFF5  F00B         	goto	i2l3306
  7044  0017CC                     i2l3298:
  7045  0017CC  FFFF               	dw	65535	; assembler added errata NOP
  7046                           
  7047                           ; BSR set to: 0
  7048                           ;usart.c: 180:             mexLength = 5;
  7049  0017CE  0E05               	movlw	5
  7050  0017D0  6E6C               	movwf	storeData@mexLength^0,c
  7051                           
  7052                           ;usart.c: 181:             break;
  7053  0017D2  EF11  F00C         	goto	i2l3308
  7054  0017D6                     i2l3300:
  7055  0017D6  FFFF               	dw	65535	; assembler added errata NOP
  7056                           
  7057                           ; BSR set to: 0
  7058                           ;usart.c: 183:             mexLength = 9;
  7059  0017D8  0E09               	movlw	9
  7060  0017DA  6E6C               	movwf	storeData@mexLength^0,c
  7061                           
  7062                           ;usart.c: 184:             break;
  7063  0017DC  EF11  F00C         	goto	i2l3308
  7064  0017E0                     i2l3302:
  7065  0017E0  FFFF               	dw	65535	; assembler added errata NOP
  7066                           
  7067                           ; BSR set to: 0
  7068                           ;usart.c: 186:             mexLength = 1;
  7069  0017E2  0E01               	movlw	1
  7070  0017E4  6E6C               	movwf	storeData@mexLength^0,c
  7071                           
  7072                           ;usart.c: 187:             break;
  7073  0017E6  EF11  F00C         	goto	i2l3308
  7074  0017EA                     i2l3306:
  7075  0017EA  FFFF               	dw	65535	; assembler added errata NOP
  7076  0017EC  0100               	movlb	0	; () banked
  7077  0017EE  51C8               	movf	storeData@receivedMex& (0+255),w,b
  7078  0017F0  6E08               	movwf	??i2_storeData^0,c
  7079  0017F2  6A09               	clrf	(??i2_storeData+1)^0,c
  7080                           
  7081                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7082                           ; Switch size 1, requested type "simple"
  7083                           ; Number of cases is 1, Range of values is 0 to 0
  7084                           ; switch strategies available:
  7085                           ; Name         Instructions Cycles
  7086                           ; simple_byte            4     3 (average)
  7087                           ;	Chosen strategy is simple_byte
  7088  0017F4  5009               	movf	(??i2_storeData+1)^0,w,c
  7089  0017F6  0A00               	xorlw	0	; case 0
  7090  0017F8  B4D8               	btfsc	status,2,c
  7091  0017FA  EF01  F00C         	goto	i2l4720
  7092  0017FE  EF11  F00C         	goto	i2l3308
  7093  001802                     i2l4720:
  7094  001802  FFFF               	dw	65535	; assembler added errata NOP
  7095                           
  7096                           ; BSR set to: 0
  7097                           ; Switch size 1, requested type "simple"
  7098                           ; Number of cases is 3, Range of values is 0 to 2
  7099                           ; switch strategies available:
  7100                           ; Name         Instructions Cycles
  7101                           ; simple_byte           10     6 (average)
  7102                           ;	Chosen strategy is simple_byte
  7103  001804  5008               	movf	??i2_storeData^0,w,c
  7104  001806  0A00               	xorlw	0	; case 0
  7105  001808  B4D8               	btfsc	status,2,c
  7106  00180A  EFE6  F00B         	goto	i2l3298
  7107  00180E  0A01               	xorlw	1	; case 1
  7108  001810  B4D8               	btfsc	status,2,c
  7109  001812  EFEB  F00B         	goto	i2l3300
  7110  001816  0A03               	xorlw	3	; case 2
  7111  001818  B4D8               	btfsc	status,2,c
  7112  00181A  EFF0  F00B         	goto	i2l3302
  7113  00181E  EF11  F00C         	goto	i2l3308
  7114  001822                     i2l3308:
  7115  001822  FFFF               	dw	65535	; assembler added errata NOP
  7116                           
  7117                           ; BSR set to: 0
  7118                           ;usart.c: 194:     if(counter >= mexLength){
  7119  001824  506C               	movf	storeData@mexLength^0,w,c
  7120  001826  5C55               	subwf	storeData@counter^0,w,c
  7121  001828  A0D8               	btfss	status,0,c
  7122  00182A  EF19  F00C         	goto	i2u245_41
  7123  00182E  EF1C  F00C         	goto	i2u245_40
  7124  001832                     i2u245_41:
  7125  001832  FFFF               	dw	65535	; assembler added errata NOP
  7126  001834  EF94  F00C         	goto	i2l583
  7127  001838                     i2u245_40:
  7128  001838  FFFF               	dw	65535	; assembler added errata NOP
  7129  00183A                     
  7130                           ; BSR set to: 0
  7131                           ;usart.c: 195:         counter = 0;
  7132  00183A  0E00               	movlw	0
  7133  00183C  6E55               	movwf	storeData@counter^0,c
  7134                           
  7135                           ;usart.c: 198:         switch(receivedMex[0]){
  7136  00183E  EF79  F00C         	goto	i2l3330
  7137  001842                     i2l3312:
  7138  001842  FFFF               	dw	65535	; assembler added errata NOP
  7139                           
  7140                           ; BSR set to: 0
  7141                           ;usart.c: 200:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  7142  001844  5058               	movf	_dataCounter^0,w,c
  7143  001846  0D04               	mullw	4
  7144  001848  0ED1               	movlw	low _dataSequence
  7145  00184A  24F3               	addwf	243,w,c
  7146  00184C  6ED9               	movwf	fsr2l,c
  7147  00184E  0E00               	movlw	high _dataSequence
  7148  001850  20F4               	addwfc	prodh,w,c
  7149  001852  6EDA               	movwf	fsr2h,c
  7150  001854  C0C9  FFDF         	movff	storeData@receivedMex+1,indf2
  7151                           
  7152                           ;usart.c: 201:                 dataSequence[dataCounter].posX = receivedMex[2] * 10;
  7153  001858  5058               	movf	_dataCounter^0,w,c
  7154  00185A  0D04               	mullw	4
  7155  00185C  0ED2               	movlw	low (_dataSequence+1)
  7156  00185E  24F3               	addwf	243,w,c
  7157  001860  6ED9               	movwf	fsr2l,c
  7158  001862  0E00               	movlw	high (_dataSequence+1)
  7159  001864  20F4               	addwfc	prodh,w,c
  7160  001866  6EDA               	movwf	fsr2h,c
  7161  001868  51CA               	movf	(storeData@receivedMex+2)& (0+255),w,b
  7162  00186A  0D0A               	mullw	10
  7163  00186C  CFF3 FFDF          	movff	prodl,indf2
  7164                           
  7165                           ;usart.c: 202:                 dataSequence[dataCounter].posY = receivedMex[3] * 10;
  7166  001870  5058               	movf	_dataCounter^0,w,c
  7167  001872  0D04               	mullw	4
  7168  001874  0ED3               	movlw	low (_dataSequence+2)
  7169  001876  24F3               	addwf	243,w,c
  7170  001878  6ED9               	movwf	fsr2l,c
  7171  00187A  0E00               	movlw	high (_dataSequence+2)
  7172  00187C  20F4               	addwfc	prodh,w,c
  7173  00187E  6EDA               	movwf	fsr2h,c
  7174  001880  51CB               	movf	(storeData@receivedMex+3)& (0+255),w,b
  7175  001882  0D0A               	mullw	10
  7176  001884  CFF3 FFDF          	movff	prodl,indf2
  7177                           
  7178                           ;usart.c: 203:                 dataSequence[dataCounter].rotation = receivedMex[4];
  7179  001888  5058               	movf	_dataCounter^0,w,c
  7180  00188A  0D04               	mullw	4
  7181  00188C  0ED4               	movlw	low (_dataSequence+3)
  7182  00188E  24F3               	addwf	243,w,c
  7183  001890  6ED9               	movwf	fsr2l,c
  7184  001892  0E00               	movlw	high (_dataSequence+3)
  7185  001894  20F4               	addwfc	prodh,w,c
  7186  001896  6EDA               	movwf	fsr2h,c
  7187  001898  C0CC  FFDF         	movff	storeData@receivedMex+4,indf2
  7188  00189C                     
  7189                           ; BSR set to: 0
  7190                           ;usart.c: 205:                 dataCounter++;
  7191  00189C  2A58               	incf	_dataCounter^0,f,c
  7192                           
  7193                           ;usart.c: 206:                 break;
  7194  00189E  EF94  F00C         	goto	i2l583
  7195  0018A2                     i2l580:
  7196  0018A2  FFFF               	dw	65535	; assembler added errata NOP
  7197                           
  7198                           ; BSR set to: 0
  7199                           ;usart.c: 209:                 newSequenceData.L = receivedMex[1];
  7200  0018A4  C0C9  F0E5         	movff	storeData@receivedMex+1,_newSequenceData
  7201                           
  7202                           ;usart.c: 210:                 newSequenceData.W = receivedMex[2];
  7203  0018A8  C0CA  F0E6         	movff	storeData@receivedMex+2,_newSequenceData+1
  7204  0018AC                     
  7205                           ; BSR set to: 0
  7206                           ;usart.c: 211:                 newSequenceData.init_posX = receivedMex[3] * 10;
  7207  0018AC  51CB               	movf	(storeData@receivedMex+3)& (0+255),w,b
  7208  0018AE  0D0A               	mullw	10
  7209  0018B0  CFF3 F0E7          	movff	prodl,_newSequenceData+2
  7210                           
  7211                           ;usart.c: 212:                 newSequenceData.init_posY = receivedMex[4] * 10;
  7212  0018B4  51CC               	movf	(storeData@receivedMex+4)& (0+255),w,b
  7213  0018B6  0D0A               	mullw	10
  7214  0018B8  CFF3 F0E8          	movff	prodl,_newSequenceData+3
  7215  0018BC                     
  7216                           ; BSR set to: 0
  7217                           ;usart.c: 213:                 newSequenceData.init_rot = receivedMex[5];
  7218  0018BC  C0CD  F0E9         	movff	storeData@receivedMex+5,_newSequenceData+4
  7219                           
  7220                           ;usart.c: 214:                 newSequenceData.end_posX = receivedMex[6] * 10;
  7221  0018C0  51CE               	movf	(storeData@receivedMex+6)& (0+255),w,b
  7222  0018C2  0D0A               	mullw	10
  7223  0018C4  CFF3 F0EA          	movff	prodl,_newSequenceData+5
  7224                           
  7225                           ;usart.c: 215:                 newSequenceData.end_posY = receivedMex[7] * 10;
  7226  0018C8  51CF               	movf	(storeData@receivedMex+7)& (0+255),w,b
  7227  0018CA  0D0A               	mullw	10
  7228  0018CC  CFF3 F0EB          	movff	prodl,_newSequenceData+6
  7229  0018D0                     
  7230                           ; BSR set to: 0
  7231                           ;usart.c: 216:                 newSequenceData.end_rot = receivedMex[8];
  7232  0018D0  C0D0  F0EC         	movff	storeData@receivedMex+8,_newSequenceData+7
  7233  0018D4                     
  7234                           ; BSR set to: 0
  7235                           ;usart.c: 218:                 _newSequence = 1;
  7236  0018D4  0E01               	movlw	1
  7237  0018D6  6E56               	movwf	__newSequence^0,c
  7238                           
  7239                           ;usart.c: 219:                 break;
  7240  0018D8  EF94  F00C         	goto	i2l583
  7241  0018DC                     i2l3324:
  7242  0018DC  FFFF               	dw	65535	; assembler added errata NOP
  7243                           
  7244                           ; BSR set to: 0
  7245                           ;usart.c: 222:                 _fatalError = 1;
  7246  0018DE  0E01               	movlw	1
  7247  0018E0  6E57               	movwf	__fatalError^0,c
  7248                           
  7249                           ;usart.c: 223:                 break;
  7250  0018E2  EF94  F00C         	goto	i2l583
  7251  0018E6                     i2l3326:
  7252  0018E6  FFFF               	dw	65535	; assembler added errata NOP
  7253                           
  7254                           ; BSR set to: 0
  7255                           ;usart.c: 226:                 printError(8);
  7256  0018E8  0E08               	movlw	8
  7257  0018EA  ECDE  F00E         	call	i2_printError
  7258                           
  7259                           ;usart.c: 227:                 break;
  7260  0018EE  EF94  F00C         	goto	i2l583
  7261  0018F2                     i2l3330:
  7262  0018F2  FFFF               	dw	65535	; assembler added errata NOP
  7263                           
  7264                           ; BSR set to: 0
  7265  0018F4  51C8               	movf	storeData@receivedMex& (0+255),w,b
  7266  0018F6  6E08               	movwf	??i2_storeData^0,c
  7267  0018F8  6A09               	clrf	(??i2_storeData+1)^0,c
  7268                           
  7269                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7270                           ; Switch size 1, requested type "simple"
  7271                           ; Number of cases is 1, Range of values is 0 to 0
  7272                           ; switch strategies available:
  7273                           ; Name         Instructions Cycles
  7274                           ; simple_byte            4     3 (average)
  7275                           ;	Chosen strategy is simple_byte
  7276  0018FA  5009               	movf	(??i2_storeData+1)^0,w,c
  7277  0018FC  0A00               	xorlw	0	; case 0
  7278  0018FE  B4D8               	btfsc	status,2,c
  7279  001900  EF84  F00C         	goto	i2l4722
  7280  001904  EF73  F00C         	goto	i2l3326
  7281  001908                     i2l4722:
  7282  001908  FFFF               	dw	65535	; assembler added errata NOP
  7283                           
  7284                           ; BSR set to: 0
  7285                           ; Switch size 1, requested type "simple"
  7286                           ; Number of cases is 3, Range of values is 0 to 2
  7287                           ; switch strategies available:
  7288                           ; Name         Instructions Cycles
  7289                           ; simple_byte           10     6 (average)
  7290                           ;	Chosen strategy is simple_byte
  7291  00190A  5008               	movf	??i2_storeData^0,w,c
  7292  00190C  0A00               	xorlw	0	; case 0
  7293  00190E  B4D8               	btfsc	status,2,c
  7294  001910  EF21  F00C         	goto	i2l3312
  7295  001914  0A01               	xorlw	1	; case 1
  7296  001916  B4D8               	btfsc	status,2,c
  7297  001918  EF51  F00C         	goto	i2l580
  7298  00191C  0A03               	xorlw	3	; case 2
  7299  00191E  B4D8               	btfsc	status,2,c
  7300  001920  EF6E  F00C         	goto	i2l3324
  7301  001924  EF73  F00C         	goto	i2l3326
  7302  001928                     i2l583:
  7303  001928  FFFF               	dw	65535	; assembler added errata NOP
  7304  00192A  0012               	return		;funcret
  7305  00192C  FFFF               	dw	65535	; errata NOP
  7306  00192E                     __end_ofi2_storeData:
  7307                           	callstack 0
  7308                           
  7309 ;; *************** function _writeTM0 *****************
  7310 ;; Defined at:
  7311 ;;		line 28 in file "motors.c"
  7312 ;; Parameters:    Size  Location     Type
  7313 ;;		None
  7314 ;; Auto vars:     Size  Location     Type
  7315 ;;		None
  7316 ;; Return value:  Size  Location     Type
  7317 ;;                  1    wreg      void 
  7318 ;; Registers used:
  7319 ;;		wreg, status,2
  7320 ;; Tracked objects:
  7321 ;;		On entry : 0/0
  7322 ;;		On exit  : 0/0
  7323 ;;		Unchanged: 0/0
  7324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7325 ;;      Params:         0       0       0       0       0       0       0
  7326 ;;      Locals:         0       0       0       0       0       0       0
  7327 ;;      Temps:          0       0       0       0       0       0       0
  7328 ;;      Totals:         0       0       0       0       0       0       0
  7329 ;;Total ram usage:        0 bytes
  7330 ;; Hardware stack levels used:    1
  7331 ;; This function calls:
  7332 ;;		Nothing
  7333 ;; This function is called by:
  7334 ;;		_isr
  7335 ;; This function uses a non-reentrant model
  7336 ;;
  7337                           
  7338                           	psect	text42
  7339  0024C6                     __ptext42:
  7340                           	callstack 0
  7341  0024C6                     _writeTM0:
  7342                           	callstack 0
  7343  0024C6  FFFF               	dw	65535	; assembler added errata NOP
  7344  0024C8                     
  7345                           ;motors.c: 29:     tm0Error = 1;
  7346  0024C8  0E00               	movlw	0
  7347  0024CA  6E51               	movwf	(_tm0Error+1)^0,c
  7348  0024CC  0E01               	movlw	1
  7349  0024CE  6E50               	movwf	_tm0Error^0,c
  7350  0024D0  0012               	return		;funcret
  7351  0024D2  FFFF               	dw	65535	; errata NOP
  7352  0024D4                     __end_of_writeTM0:
  7353                           	callstack 0
  7354                           
  7355 ;; *************** function _whatsTM0Limit *****************
  7356 ;; Defined at:
  7357 ;;		line 42 in file "motors.c"
  7358 ;; Parameters:    Size  Location     Type
  7359 ;;		None
  7360 ;; Auto vars:     Size  Location     Type
  7361 ;;		None
  7362 ;; Return value:  Size  Location     Type
  7363 ;;                  1    wreg      unsigned char 
  7364 ;; Registers used:
  7365 ;;		wreg, status,2
  7366 ;; Tracked objects:
  7367 ;;		On entry : 0/0
  7368 ;;		On exit  : 0/0
  7369 ;;		Unchanged: 0/0
  7370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7371 ;;      Params:         0       0       0       0       0       0       0
  7372 ;;      Locals:         0       0       0       0       0       0       0
  7373 ;;      Temps:          0       0       0       0       0       0       0
  7374 ;;      Totals:         0       0       0       0       0       0       0
  7375 ;;Total ram usage:        0 bytes
  7376 ;; Hardware stack levels used:    1
  7377 ;; This function calls:
  7378 ;;		Nothing
  7379 ;; This function is called by:
  7380 ;;		_isr
  7381 ;; This function uses a non-reentrant model
  7382 ;;
  7383                           
  7384                           	psect	text43
  7385  002576                     __ptext43:
  7386                           	callstack 0
  7387  002576                     _whatsTM0Limit:
  7388                           	callstack 0
  7389  002576  FFFF               	dw	65535	; assembler added errata NOP
  7390  002578                     
  7391                           ;motors.c: 43:     return(tm0Limit);
  7392  002578  505D               	movf	_tm0Limit^0,w,c
  7393  00257A  0012               	return		;funcret
  7394  00257C  FFFF               	dw	65535	; errata NOP
  7395  00257E                     __end_of_whatsTM0Limit:
  7396                           	callstack 0
  7397                           
  7398 ;; *************** function _toggleStep *****************
  7399 ;; Defined at:
  7400 ;;		line 92 in file "timer.c"
  7401 ;; Parameters:    Size  Location     Type
  7402 ;;		None
  7403 ;; Auto vars:     Size  Location     Type
  7404 ;;		None
  7405 ;; Return value:  Size  Location     Type
  7406 ;;                  1    wreg      void 
  7407 ;; Registers used:
  7408 ;;		wreg, status,2
  7409 ;; Tracked objects:
  7410 ;;		On entry : 0/0
  7411 ;;		On exit  : 0/0
  7412 ;;		Unchanged: 0/0
  7413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7414 ;;      Params:         0       0       0       0       0       0       0
  7415 ;;      Locals:         0       0       0       0       0       0       0
  7416 ;;      Temps:          0       0       0       0       0       0       0
  7417 ;;      Totals:         0       0       0       0       0       0       0
  7418 ;;Total ram usage:        0 bytes
  7419 ;; Hardware stack levels used:    1
  7420 ;; This function calls:
  7421 ;;		Nothing
  7422 ;; This function is called by:
  7423 ;;		_isr
  7424 ;; This function uses a non-reentrant model
  7425 ;;
  7426                           
  7427                           	psect	text44
  7428  002538                     __ptext44:
  7429                           	callstack 0
  7430  002538                     _toggleStep:
  7431                           	callstack 0
  7432  002538  FFFF               	dw	65535	; assembler added errata NOP
  7433  00253A                     
  7434                           ;timer.c: 93:     stepToggle = 1;
  7435  00253A  0E01               	movlw	1
  7436  00253C  6E52               	movwf	_stepToggle^0,c	;volatile
  7437  00253E  0012               	return		;funcret
  7438  002540  FFFF               	dw	65535	; errata NOP
  7439  002542                     __end_of_toggleStep:
  7440                           	callstack 0
  7441                           
  7442 ;; *************** function _setTouchRel *****************
  7443 ;; Defined at:
  7444 ;;		line 86 in file "adc.c"
  7445 ;; Parameters:    Size  Location     Type
  7446 ;;		None
  7447 ;; Auto vars:     Size  Location     Type
  7448 ;;		None
  7449 ;; Return value:  Size  Location     Type
  7450 ;;                  1    wreg      void 
  7451 ;; Registers used:
  7452 ;;		wreg, status,2
  7453 ;; Tracked objects:
  7454 ;;		On entry : 0/0
  7455 ;;		On exit  : 0/0
  7456 ;;		Unchanged: 0/0
  7457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7458 ;;      Params:         0       0       0       0       0       0       0
  7459 ;;      Locals:         0       0       0       0       0       0       0
  7460 ;;      Temps:          0       0       0       0       0       0       0
  7461 ;;      Totals:         0       0       0       0       0       0       0
  7462 ;;Total ram usage:        0 bytes
  7463 ;; Hardware stack levels used:    1
  7464 ;; This function calls:
  7465 ;;		Nothing
  7466 ;; This function is called by:
  7467 ;;		_isr
  7468 ;; This function uses a non-reentrant model
  7469 ;;
  7470                           
  7471                           	psect	text45
  7472  002542                     __ptext45:
  7473                           	callstack 0
  7474  002542                     _setTouchRel:
  7475                           	callstack 0
  7476  002542  FFFF               	dw	65535	; assembler added errata NOP
  7477  002544                     
  7478                           ;adc.c: 87:     touch_rel = 1;
  7479  002544  0E01               	movlw	1
  7480  002546  6E5C               	movwf	_touch_rel^0,c	;volatile
  7481  002548  0012               	return		;funcret
  7482  00254A  FFFF               	dw	65535	; errata NOP
  7483  00254C                     __end_of_setTouchRel:
  7484                           	callstack 0
  7485                           
  7486 ;; *************** function _setThermRel *****************
  7487 ;; Defined at:
  7488 ;;		line 79 in file "adc.c"
  7489 ;; Parameters:    Size  Location     Type
  7490 ;;		None
  7491 ;; Auto vars:     Size  Location     Type
  7492 ;;		None
  7493 ;; Return value:  Size  Location     Type
  7494 ;;                  1    wreg      void 
  7495 ;; Registers used:
  7496 ;;		wreg, status,2
  7497 ;; Tracked objects:
  7498 ;;		On entry : 0/0
  7499 ;;		On exit  : 0/0
  7500 ;;		Unchanged: 0/0
  7501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7502 ;;      Params:         0       0       0       0       0       0       0
  7503 ;;      Locals:         0       0       0       0       0       0       0
  7504 ;;      Temps:          0       0       0       0       0       0       0
  7505 ;;      Totals:         0       0       0       0       0       0       0
  7506 ;;Total ram usage:        0 bytes
  7507 ;; Hardware stack levels used:    1
  7508 ;; This function calls:
  7509 ;;		Nothing
  7510 ;; This function is called by:
  7511 ;;		_isr
  7512 ;; This function uses a non-reentrant model
  7513 ;;
  7514                           
  7515                           	psect	text46
  7516  00254C                     __ptext46:
  7517                           	callstack 0
  7518  00254C                     _setThermRel:
  7519                           	callstack 0
  7520  00254C  FFFF               	dw	65535	; assembler added errata NOP
  7521  00254E                     
  7522                           ;adc.c: 80:     therm_rel = 1;
  7523  00254E  0E01               	movlw	1
  7524  002550  6E5B               	movwf	_therm_rel^0,c	;volatile
  7525  002552  0012               	return		;funcret
  7526  002554  FFFF               	dw	65535	; errata NOP
  7527  002556                     __end_of_setThermRel:
  7528                           	callstack 0
  7529                           
  7530 ;; *************** function _retPeriod *****************
  7531 ;; Defined at:
  7532 ;;		line 100 in file "timer.c"
  7533 ;; Parameters:    Size  Location     Type
  7534 ;;		None
  7535 ;; Auto vars:     Size  Location     Type
  7536 ;;		None
  7537 ;; Return value:  Size  Location     Type
  7538 ;;                  2    0[COMRAM] unsigned int 
  7539 ;; Registers used:
  7540 ;;		None
  7541 ;; Tracked objects:
  7542 ;;		On entry : 0/0
  7543 ;;		On exit  : 0/0
  7544 ;;		Unchanged: 0/0
  7545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7546 ;;      Params:         2       0       0       0       0       0       0
  7547 ;;      Locals:         0       0       0       0       0       0       0
  7548 ;;      Temps:          0       0       0       0       0       0       0
  7549 ;;      Totals:         2       0       0       0       0       0       0
  7550 ;;Total ram usage:        2 bytes
  7551 ;; Hardware stack levels used:    1
  7552 ;; This function calls:
  7553 ;;		Nothing
  7554 ;; This function is called by:
  7555 ;;		_isr
  7556 ;; This function uses a non-reentrant model
  7557 ;;
  7558                           
  7559                           	psect	text47
  7560  0024D4                     __ptext47:
  7561                           	callstack 0
  7562  0024D4                     _retPeriod:
  7563                           	callstack 0
  7564  0024D4  FFFF               	dw	65535	; assembler added errata NOP
  7565  0024D6                     
  7566                           ;timer.c: 101:     return pwmPeriod;
  7567  0024D6  C046  F001         	movff	_pwmPeriod,?_retPeriod
  7568  0024DA  C047  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  7569  0024DE  0012               	return		;funcret
  7570  0024E0  FFFF               	dw	65535	; errata NOP
  7571  0024E2                     __end_of_retPeriod:
  7572                           	callstack 0
  7573                           
  7574 ;; *************** function _increaseStep *****************
  7575 ;; Defined at:
  7576 ;;		line 84 in file "timer.c"
  7577 ;; Parameters:    Size  Location     Type
  7578 ;;		None
  7579 ;; Auto vars:     Size  Location     Type
  7580 ;;		None
  7581 ;; Return value:  Size  Location     Type
  7582 ;;                  1    wreg      void 
  7583 ;; Registers used:
  7584 ;;		status,2, status,0
  7585 ;; Tracked objects:
  7586 ;;		On entry : 0/0
  7587 ;;		On exit  : 0/0
  7588 ;;		Unchanged: 0/0
  7589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7590 ;;      Params:         0       0       0       0       0       0       0
  7591 ;;      Locals:         0       0       0       0       0       0       0
  7592 ;;      Temps:          0       0       0       0       0       0       0
  7593 ;;      Totals:         0       0       0       0       0       0       0
  7594 ;;Total ram usage:        0 bytes
  7595 ;; Hardware stack levels used:    1
  7596 ;; This function calls:
  7597 ;;		Nothing
  7598 ;; This function is called by:
  7599 ;;		_isr
  7600 ;; This function uses a non-reentrant model
  7601 ;;
  7602                           
  7603                           	psect	text48
  7604  00257E                     __ptext48:
  7605                           	callstack 0
  7606  00257E                     _increaseStep:
  7607                           	callstack 0
  7608  00257E  FFFF               	dw	65535	; assembler added errata NOP
  7609  002580                     
  7610                           ;timer.c: 85:     pwmStep++;
  7611  002580  2A53               	incf	_pwmStep^0,f,c	;volatile
  7612  002582  0012               	return		;funcret
  7613  002584  FFFF               	dw	65535	; errata NOP
  7614  002586                     __end_of_increaseStep:
  7615                           	callstack 0
  7616                           
  7617 ;; *************** function _fatalError *****************
  7618 ;; Defined at:
  7619 ;;		line 61 in file "usart.c"
  7620 ;; Parameters:    Size  Location     Type
  7621 ;;		None
  7622 ;; Auto vars:     Size  Location     Type
  7623 ;;		None
  7624 ;; Return value:  Size  Location     Type
  7625 ;;                  1    wreg      unsigned char 
  7626 ;; Registers used:
  7627 ;;		wreg, status,2
  7628 ;; Tracked objects:
  7629 ;;		On entry : 0/0
  7630 ;;		On exit  : 0/0
  7631 ;;		Unchanged: 0/0
  7632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7633 ;;      Params:         0       0       0       0       0       0       0
  7634 ;;      Locals:         0       0       0       0       0       0       0
  7635 ;;      Temps:          0       0       0       0       0       0       0
  7636 ;;      Totals:         0       0       0       0       0       0       0
  7637 ;;Total ram usage:        0 bytes
  7638 ;; Hardware stack levels used:    1
  7639 ;; This function calls:
  7640 ;;		Nothing
  7641 ;; This function is called by:
  7642 ;;		_isr
  7643 ;; This function uses a non-reentrant model
  7644 ;;
  7645                           
  7646                           	psect	text49
  7647  002586                     __ptext49:
  7648                           	callstack 0
  7649  002586                     _fatalError:
  7650                           	callstack 0
  7651  002586  FFFF               	dw	65535	; assembler added errata NOP
  7652  002588                     
  7653                           ;usart.c: 62:     return _fatalError;
  7654  002588  5057               	movf	__fatalError^0,w,c
  7655  00258A  0012               	return		;funcret
  7656  00258C  FFFF               	dw	65535	; errata NOP
  7657  00258E                     __end_of_fatalError:
  7658                           	callstack 0
  7659                           
  7660 ;; *************** function _abortAll *****************
  7661 ;; Defined at:
  7662 ;;		line 809 in file "motors.c"
  7663 ;; Parameters:    Size  Location     Type
  7664 ;;		None
  7665 ;; Auto vars:     Size  Location     Type
  7666 ;;		None
  7667 ;; Return value:  Size  Location     Type
  7668 ;;                  1    wreg      void 
  7669 ;; Registers used:
  7670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7671 ;; Tracked objects:
  7672 ;;		On entry : 0/0
  7673 ;;		On exit  : 0/0
  7674 ;;		Unchanged: 0/0
  7675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7676 ;;      Params:         0       0       0       0       0       0       0
  7677 ;;      Locals:         0       0       0       0       0       0       0
  7678 ;;      Temps:          0       0       0       0       0       0       0
  7679 ;;      Totals:         0       0       0       0       0       0       0
  7680 ;;Total ram usage:        0 bytes
  7681 ;; Hardware stack levels used:    1
  7682 ;; Hardware stack levels required when called:    2
  7683 ;; This function calls:
  7684 ;;		i2_printError
  7685 ;; This function is called by:
  7686 ;;		_isr
  7687 ;; This function uses a non-reentrant model
  7688 ;;
  7689                           
  7690                           	psect	text50
  7691  00246C                     __ptext50:
  7692                           	callstack 0
  7693  00246C                     _abortAll:
  7694                           	callstack 0
  7695  00246C  FFFF               	dw	65535	; assembler added errata NOP
  7696  00246E                     
  7697                           ;motors.c: 817:     printError(7);
  7698  00246E  0E07               	movlw	7
  7699  002470  ECDE  F00E         	call	i2_printError
  7700  002474                     i2l253:
  7701  002474  FFFF               	dw	65535	; assembler added errata NOP
  7702  002476  EF3A  F012         	goto	i2l253
  7703  00247A  0012               	return		;funcret
  7704  00247C  FFFF               	dw	65535	; errata NOP
  7705  00247E                     __end_of_abortAll:
  7706                           	callstack 0
  7707                           
  7708 ;; *************** function i2_printError *****************
  7709 ;; Defined at:
  7710 ;;		line 111 in file "usart.c"
  7711 ;; Parameters:    Size  Location     Type
  7712 ;;  errCode         1    wreg     unsigned char 
  7713 ;; Auto vars:     Size  Location     Type
  7714 ;;  errCode         1    6[COMRAM] unsigned char 
  7715 ;; Return value:  Size  Location     Type
  7716 ;;                  1    wreg      void 
  7717 ;; Registers used:
  7718 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7719 ;; Tracked objects:
  7720 ;;		On entry : 0/0
  7721 ;;		On exit  : 0/0
  7722 ;;		Unchanged: 0/0
  7723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7724 ;;      Params:         0       0       0       0       0       0       0
  7725 ;;      Locals:         1       0       0       0       0       0       0
  7726 ;;      Temps:          2       0       0       0       0       0       0
  7727 ;;      Totals:         3       0       0       0       0       0       0
  7728 ;;Total ram usage:        3 bytes
  7729 ;; Hardware stack levels used:    1
  7730 ;; Hardware stack levels required when called:    1
  7731 ;; This function calls:
  7732 ;;		i2_uartTx
  7733 ;; This function is called by:
  7734 ;;		_abortAll
  7735 ;;		i2_storeData
  7736 ;; This function uses a non-reentrant model
  7737 ;;
  7738                           
  7739                           	psect	text51
  7740  001DBC                     __ptext51:
  7741                           	callstack 0
  7742  001DBC                     i2_printError:
  7743                           	callstack 0
  7744  001DBC  FFFF               	dw	65535	; assembler added errata NOP
  7745                           
  7746                           ;incstack = 0
  7747                           ;i2printError@errCode stored from wreg
  7748  001DBE  6E07               	movwf	i2printError@errCode^0,c
  7749  001DC0                     
  7750                           ;usart.c: 113:     switch(errCode){
  7751  001DC0  EF3A  F00F         	goto	i2l3010
  7752  001DC4                     i2l2992:
  7753  001DC4  FFFF               	dw	65535	; assembler added errata NOP
  7754                           
  7755                           ;usart.c: 115:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  7756  001DC6  0E92               	movlw	low _errString_Feed
  7757  001DC8  6E01               	movwf	i2uartTx@ptr^0,c
  7758  001DCA  0E00               	movlw	high _errString_Feed
  7759  001DCC  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7760  001DCE  0E1E               	movlw	30
  7761  001DD0  6E03               	movwf	i2uartTx@length^0,c
  7762  001DD2  EC4F  F011         	call	i2_uartTx	;wreg free
  7763                           
  7764                           ;usart.c: 116:             break;
  7765  001DD6  EF69  F00F         	goto	i2l550
  7766  001DDA                     i2l2994:
  7767  001DDA  FFFF               	dw	65535	; assembler added errata NOP
  7768                           
  7769                           ;usart.c: 118:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  7770  001DDC  0E5E               	movlw	low _errString_ZEND
  7771  001DDE  6E01               	movwf	i2uartTx@ptr^0,c
  7772  001DE0  0E01               	movlw	high _errString_ZEND
  7773  001DE2  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7774  001DE4  0E29               	movlw	41
  7775  001DE6  6E03               	movwf	i2uartTx@length^0,c
  7776  001DE8  EC4F  F011         	call	i2_uartTx	;wreg free
  7777                           
  7778                           ;usart.c: 119:             break;
  7779  001DEC  EF69  F00F         	goto	i2l550
  7780  001DF0                     i2l2996:
  7781  001DF0  FFFF               	dw	65535	; assembler added errata NOP
  7782                           
  7783                           ;usart.c: 121:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  7784  001DF2  0E87               	movlw	low _errString_Reset
  7785  001DF4  6E01               	movwf	i2uartTx@ptr^0,c
  7786  001DF6  0E01               	movlw	high _errString_Reset
  7787  001DF8  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7788  001DFA  0E28               	movlw	40
  7789  001DFC  6E03               	movwf	i2uartTx@length^0,c
  7790  001DFE  EC4F  F011         	call	i2_uartTx	;wreg free
  7791                           
  7792                           ;usart.c: 122:             break;
  7793  001E02  EF69  F00F         	goto	i2l550
  7794  001E06                     i2l2998:
  7795  001E06  FFFF               	dw	65535	; assembler added errata NOP
  7796                           
  7797                           ;usart.c: 124:             uartTx(&errString_Point[0], sizeof(errString_Point));
  7798  001E08  0E35               	movlw	low _errString_Point
  7799  001E0A  6E01               	movwf	i2uartTx@ptr^0,c
  7800  001E0C  0E01               	movlw	high _errString_Point
  7801  001E0E  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7802  001E10  0E29               	movlw	41
  7803  001E12  6E03               	movwf	i2uartTx@length^0,c
  7804  001E14  EC4F  F011         	call	i2_uartTx	;wreg free
  7805                           
  7806                           ;usart.c: 125:             break;
  7807  001E18  EF69  F00F         	goto	i2l550
  7808  001E1C                     i2l3000:
  7809  001E1C  FFFF               	dw	65535	; assembler added errata NOP
  7810                           
  7811                           ;usart.c: 127:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  7812  001E1E  0ED6               	movlw	low _errString_Bound
  7813  001E20  6E01               	movwf	i2uartTx@ptr^0,c
  7814  001E22  0E01               	movlw	high _errString_Bound
  7815  001E24  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7816  001E26  0E21               	movlw	33
  7817  001E28  6E03               	movwf	i2uartTx@length^0,c
  7818  001E2A  EC4F  F011         	call	i2_uartTx	;wreg free
  7819                           
  7820                           ;usart.c: 128:             break;
  7821  001E2E  EF69  F00F         	goto	i2l550
  7822  001E32                     i2l3002:
  7823  001E32  FFFF               	dw	65535	; assembler added errata NOP
  7824                           
  7825                           ;usart.c: 130:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  7826  001E34  0E00               	movlw	low _errString_PointZ
  7827  001E36  6E01               	movwf	i2uartTx@ptr^0,c
  7828  001E38  0E01               	movlw	high _errString_PointZ
  7829  001E3A  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7830  001E3C  0E35               	movlw	53
  7831  001E3E  6E03               	movwf	i2uartTx@length^0,c
  7832  001E40  EC4F  F011         	call	i2_uartTx	;wreg free
  7833                           
  7834                           ;usart.c: 131:             break;
  7835  001E44  EF69  F00F         	goto	i2l550
  7836  001E48                     i2l3004:
  7837  001E48  FFFF               	dw	65535	; assembler added errata NOP
  7838                           
  7839                           ;usart.c: 133:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  7840  001E4A  0EAF               	movlw	low _errString_Fatal
  7841  001E4C  6E01               	movwf	i2uartTx@ptr^0,c
  7842  001E4E  0E01               	movlw	high _errString_Fatal
  7843  001E50  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7844  001E52  0E27               	movlw	39
  7845  001E54  6E03               	movwf	i2uartTx@length^0,c
  7846  001E56  EC4F  F011         	call	i2_uartTx	;wreg free
  7847                           
  7848                           ;usart.c: 134:             break;
  7849  001E5A  EF69  F00F         	goto	i2l550
  7850  001E5E                     i2l3006:
  7851  001E5E  FFFF               	dw	65535	; assembler added errata NOP
  7852                           
  7853                           ;usart.c: 136:             uartTx(&errString_Command[0], sizeof(errString_Command));
  7854  001E60  0EB0               	movlw	low _errString_Command
  7855  001E62  6E01               	movwf	i2uartTx@ptr^0,c
  7856  001E64  0E00               	movlw	high _errString_Command
  7857  001E66  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7858  001E68  0E18               	movlw	24
  7859  001E6A  6E03               	movwf	i2uartTx@length^0,c
  7860  001E6C  EC4F  F011         	call	i2_uartTx	;wreg free
  7861                           
  7862                           ;usart.c: 137:             break;
  7863  001E70  EF69  F00F         	goto	i2l550
  7864  001E74                     i2l3010:
  7865  001E74  FFFF               	dw	65535	; assembler added errata NOP
  7866  001E76  5007               	movf	i2printError@errCode^0,w,c
  7867  001E78  6E05               	movwf	??i2_printError^0,c
  7868  001E7A  6A06               	clrf	(??i2_printError+1)^0,c
  7869                           
  7870                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7871                           ; Switch size 1, requested type "simple"
  7872                           ; Number of cases is 1, Range of values is 0 to 0
  7873                           ; switch strategies available:
  7874                           ; Name         Instructions Cycles
  7875                           ; simple_byte            4     3 (average)
  7876                           ;	Chosen strategy is simple_byte
  7877  001E7C  5006               	movf	(??i2_printError+1)^0,w,c
  7878  001E7E  0A00               	xorlw	0	; case 0
  7879  001E80  B4D8               	btfsc	status,2,c
  7880  001E82  EF45  F00F         	goto	i2l4724
  7881  001E86  EF69  F00F         	goto	i2l550
  7882  001E8A                     i2l4724:
  7883  001E8A  FFFF               	dw	65535	; assembler added errata NOP
  7884                           
  7885                           ; Switch size 1, requested type "simple"
  7886                           ; Number of cases is 8, Range of values is 1 to 8
  7887                           ; switch strategies available:
  7888                           ; Name         Instructions Cycles
  7889                           ; simple_byte           25    13 (average)
  7890                           ;	Chosen strategy is simple_byte
  7891  001E8C  5005               	movf	??i2_printError^0,w,c
  7892  001E8E  0A01               	xorlw	1	; case 1
  7893  001E90  B4D8               	btfsc	status,2,c
  7894  001E92  EFE2  F00E         	goto	i2l2992
  7895  001E96  0A03               	xorlw	3	; case 2
  7896  001E98  B4D8               	btfsc	status,2,c
  7897  001E9A  EFED  F00E         	goto	i2l2994
  7898  001E9E  0A01               	xorlw	1	; case 3
  7899  001EA0  B4D8               	btfsc	status,2,c
  7900  001EA2  EFF8  F00E         	goto	i2l2996
  7901  001EA6  0A07               	xorlw	7	; case 4
  7902  001EA8  B4D8               	btfsc	status,2,c
  7903  001EAA  EF03  F00F         	goto	i2l2998
  7904  001EAE  0A01               	xorlw	1	; case 5
  7905  001EB0  B4D8               	btfsc	status,2,c
  7906  001EB2  EF0E  F00F         	goto	i2l3000
  7907  001EB6  0A03               	xorlw	3	; case 6
  7908  001EB8  B4D8               	btfsc	status,2,c
  7909  001EBA  EF19  F00F         	goto	i2l3002
  7910  001EBE  0A01               	xorlw	1	; case 7
  7911  001EC0  B4D8               	btfsc	status,2,c
  7912  001EC2  EF24  F00F         	goto	i2l3004
  7913  001EC6  0A0F               	xorlw	15	; case 8
  7914  001EC8  B4D8               	btfsc	status,2,c
  7915  001ECA  EF2F  F00F         	goto	i2l3006
  7916  001ECE  EF69  F00F         	goto	i2l550
  7917  001ED2                     i2l550:
  7918  001ED2  FFFF               	dw	65535	; assembler added errata NOP
  7919  001ED4  0012               	return		;funcret
  7920  001ED6  FFFF               	dw	65535	; errata NOP
  7921  001ED8                     __end_ofi2_printError:
  7922                           	callstack 0
  7923                           
  7924 ;; *************** function i2_uartTx *****************
  7925 ;; Defined at:
  7926 ;;		line 148 in file "usart.c"
  7927 ;; Parameters:    Size  Location     Type
  7928 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  7929 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  7930 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  7931 ;;  length          1    2[COMRAM] unsigned char 
  7932 ;; Auto vars:     Size  Location     Type
  7933 ;;  i               1    3[COMRAM] unsigned char 
  7934 ;; Return value:  Size  Location     Type
  7935 ;;                  1    wreg      void 
  7936 ;; Registers used:
  7937 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7938 ;; Tracked objects:
  7939 ;;		On entry : 0/0
  7940 ;;		On exit  : 0/0
  7941 ;;		Unchanged: 0/0
  7942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7943 ;;      Params:         3       0       0       0       0       0       0
  7944 ;;      Locals:         1       0       0       0       0       0       0
  7945 ;;      Temps:          0       0       0       0       0       0       0
  7946 ;;      Totals:         4       0       0       0       0       0       0
  7947 ;;Total ram usage:        4 bytes
  7948 ;; Hardware stack levels used:    1
  7949 ;; This function calls:
  7950 ;;		Nothing
  7951 ;; This function is called by:
  7952 ;;		i2_printError
  7953 ;; This function uses a non-reentrant model
  7954 ;;
  7955                           
  7956                           	psect	text52
  7957  00229E                     __ptext52:
  7958                           	callstack 0
  7959  00229E                     i2_uartTx:
  7960                           	callstack 0
  7961  00229E  FFFF               	dw	65535	; assembler added errata NOP
  7962  0022A0                     
  7963                           ;usart.c: 148: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 149: {;usa
      +                          rt.c: 151:     for(char i = 1; i < length; i++){
  7964  0022A0  0E01               	movlw	1
  7965  0022A2  6E04               	movwf	i2uartTx@i^0,c
  7966  0022A4  EF68  F011         	goto	i2l2700
  7967  0022A8                     i2l2696:
  7968  0022A8  FFFF               	dw	65535	; assembler added errata NOP
  7969                           
  7970                           ;usart.c: 153:         TXREG = *ptr;
  7971  0022AA  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  7972  0022AE  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  7973  0022B2  50DF               	movf	indf2,w,c
  7974  0022B4  6EAD               	movwf	173,c	;volatile
  7975  0022B6                     i2l555:
  7976  0022B6  FFFF               	dw	65535	; assembler added errata NOP
  7977  0022B8  A2AC               	btfss	172,1,c	;volatile
  7978  0022BA  EF61  F011         	goto	i2u179_41
  7979  0022BE  EF64  F011         	goto	i2u179_40
  7980  0022C2                     i2u179_41:
  7981  0022C2  FFFF               	dw	65535	; assembler added errata NOP
  7982  0022C4  EF5B  F011         	goto	i2l555
  7983  0022C8                     i2u179_40:
  7984  0022C8  FFFF               	dw	65535	; assembler added errata NOP
  7985  0022CA                     
  7986                           ;usart.c: 157:         ptr++;
  7987  0022CA  4A01               	infsnz	i2uartTx@ptr^0,f,c
  7988  0022CC  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  7989                           
  7990                           ;usart.c: 158:     }
  7991  0022CE  2A04               	incf	i2uartTx@i^0,f,c
  7992  0022D0                     i2l2700:
  7993  0022D0  FFFF               	dw	65535	; assembler added errata NOP
  7994  0022D2  5003               	movf	i2uartTx@length^0,w,c
  7995  0022D4  5C04               	subwf	i2uartTx@i^0,w,c
  7996  0022D6  A0D8               	btfss	status,0,c
  7997  0022D8  EF70  F011         	goto	i2u180_41
  7998  0022DC  EF73  F011         	goto	i2u180_40
  7999  0022E0                     i2u180_41:
  8000  0022E0  FFFF               	dw	65535	; assembler added errata NOP
  8001  0022E2  EF54  F011         	goto	i2l2696
  8002  0022E6                     i2u180_40:
  8003  0022E6  FFFF               	dw	65535	; assembler added errata NOP
  8004  0022E8  0012               	return		;funcret
  8005  0022EA  FFFF               	dw	65535	; errata NOP
  8006  0022EC                     __end_ofi2_uartTx:
  8007                           	callstack 0
  8008                           
  8009                           	psect	rparam
  8010  0000                     
  8011                           	psect	temp
  8012  00006D                     btemp:
  8013                           	callstack 0
  8014  00006D                     	ds	1
  8015  0000                     int$flags	set	btemp
  8016  0000                     wtemp8	set	btemp+1
  8017  0000                     ttemp5	set	btemp+1
  8018  0000                     ttemp6	set	btemp+4
  8019  0000                     ttemp7	set	btemp+8
  8020                           
  8021                           	psect	idloc
  8022                           
  8023                           ;Config register IDLOC0 @ 0x200000
  8024                           ;	unspecified, using default values
  8025  200000                     	org	2097152
  8026  200000  FF                 	db	255
  8027                           
  8028                           ;Config register IDLOC1 @ 0x200001
  8029                           ;	unspecified, using default values
  8030  200001                     	org	2097153
  8031  200001  FF                 	db	255
  8032                           
  8033                           ;Config register IDLOC2 @ 0x200002
  8034                           ;	unspecified, using default values
  8035  200002                     	org	2097154
  8036  200002  FF                 	db	255
  8037                           
  8038                           ;Config register IDLOC3 @ 0x200003
  8039                           ;	unspecified, using default values
  8040  200003                     	org	2097155
  8041  200003  FF                 	db	255
  8042                           
  8043                           ;Config register IDLOC4 @ 0x200004
  8044                           ;	unspecified, using default values
  8045  200004                     	org	2097156
  8046  200004  FF                 	db	255
  8047                           
  8048                           ;Config register IDLOC5 @ 0x200005
  8049                           ;	unspecified, using default values
  8050  200005                     	org	2097157
  8051  200005  FF                 	db	255
  8052                           
  8053                           ;Config register IDLOC6 @ 0x200006
  8054                           ;	unspecified, using default values
  8055  200006                     	org	2097158
  8056  200006  FF                 	db	255
  8057                           
  8058                           ;Config register IDLOC7 @ 0x200007
  8059                           ;	unspecified, using default values
  8060  200007                     	org	2097159
  8061  200007  FF                 	db	255
  8062                           
  8063                           	psect	config
  8064                           
  8065                           ; Padding undefined space
  8066  300000                     	org	3145728
  8067  300000  FF                 	db	255
  8068                           
  8069                           ;Config register CONFIG1H @ 0x300001
  8070                           ;	Oscillator Selection bits
  8071                           ;	OSC = XT, XT oscillator
  8072                           ;	Oscillator System Clock Switch Enable bit
  8073                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  8074  300001                     	org	3145729
  8075  300001  21                 	db	33
  8076                           
  8077                           ;Config register CONFIG2L @ 0x300002
  8078                           ;	Power-up Timer Enable bit
  8079                           ;	PWRT = OFF, PWRT disabled
  8080                           ;	Brown-out Reset Enable bit
  8081                           ;	BOR = OFF, Brown-out Reset disabled
  8082                           ;	Brown-out Reset Voltage bits
  8083                           ;	BORV = 20, VBOR set to 2.0V
  8084  300002                     	org	3145730
  8085  300002  0D                 	db	13
  8086                           
  8087                           ;Config register CONFIG2H @ 0x300003
  8088                           ;	Watchdog Timer Enable bit
  8089                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8090                           ;	Watchdog Timer Postscale Select bits
  8091                           ;	WDTPS = 128, 1:128
  8092  300003                     	org	3145731
  8093  300003  0E                 	db	14
  8094                           
  8095                           ; Padding undefined space
  8096  300004                     	org	3145732
  8097  300004  FF                 	db	255
  8098                           
  8099                           ;Config register CONFIG3H @ 0x300005
  8100                           ;	CCP2 Mux bit
  8101                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  8102  300005                     	org	3145733
  8103  300005  00                 	db	0
  8104                           
  8105                           ;Config register CONFIG4L @ 0x300006
  8106                           ;	Stack Full/Underflow Reset Enable bit
  8107                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  8108                           ;	Low Voltage ICSP Enable bit
  8109                           ;	LVP = OFF, Low Voltage ICSP disabled
  8110                           ;	Background Debugger Enable bit
  8111                           ;	DEBUG = 0x1, unprogrammed default
  8112  300006                     	org	3145734
  8113  300006  80                 	db	128
  8114                           
  8115                           ; Padding undefined space
  8116  300007                     	org	3145735
  8117  300007  FF                 	db	255
  8118                           
  8119                           ;Config register CONFIG5L @ 0x300008
  8120                           ;	Code Protection bit
  8121                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  8122                           ;	Code Protection bit
  8123                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  8124                           ;	Code Protection bit
  8125                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  8126                           ;	Code Protection bit
  8127                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  8128  300008                     	org	3145736
  8129  300008  0F                 	db	15
  8130                           
  8131                           ;Config register CONFIG5H @ 0x300009
  8132                           ;	Boot Block Code Protection bit
  8133                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  8134                           ;	Data EEPROM Code Protection bit
  8135                           ;	CPD = OFF, Data EEPROM not code protected
  8136  300009                     	org	3145737
  8137  300009  C0                 	db	192
  8138                           
  8139                           ;Config register CONFIG6L @ 0x30000A
  8140                           ;	Write Protection bit
  8141                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  8142                           ;	Write Protection bit
  8143                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  8144                           ;	Write Protection bit
  8145                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  8146                           ;	Write Protection bit
  8147                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  8148  30000A                     	org	3145738
  8149  30000A  0F                 	db	15
  8150                           
  8151                           ;Config register CONFIG6H @ 0x30000B
  8152                           ;	Configuration Register Write Protection bit
  8153                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  8154                           ;	Boot Block Write Protection bit
  8155                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  8156                           ;	Data EEPROM Write Protection bit
  8157                           ;	WRTD = OFF, Data EEPROM not write protected
  8158  30000B                     	org	3145739
  8159  30000B  E0                 	db	224
  8160                           
  8161                           ;Config register CONFIG7L @ 0x30000C
  8162                           ;	Table Read Protection bit
  8163                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  8164                           ;	Table Read Protection bit
  8165                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  8166                           ;	Table Read Protection bit
  8167                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  8168                           ;	Table Read Protection bit
  8169                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  8170  30000C                     	org	3145740
  8171  30000C  0F                 	db	15
  8172                           
  8173                           ;Config register CONFIG7H @ 0x30000D
  8174                           ;	Boot Block Table Read Protection bit
  8175                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  8176  30000D                     	org	3145741
  8177  30000D  40                 	db	64
  8178                           tosu	equ	0xFFF
  8179                           tosh	equ	0xFFE
  8180                           tosl	equ	0xFFD
  8181                           stkptr	equ	0xFFC
  8182                           pclatu	equ	0xFFB
  8183                           pclath	equ	0xFFA
  8184                           pcl	equ	0xFF9
  8185                           tblptru	equ	0xFF8
  8186                           tblptrh	equ	0xFF7
  8187                           tblptrl	equ	0xFF6
  8188                           tablat	equ	0xFF5
  8189                           prodh	equ	0xFF4
  8190                           prodl	equ	0xFF3
  8191                           indf0	equ	0xFEF
  8192                           postinc0	equ	0xFEE
  8193                           postdec0	equ	0xFED
  8194                           preinc0	equ	0xFEC
  8195                           plusw0	equ	0xFEB
  8196                           fsr0h	equ	0xFEA
  8197                           fsr0l	equ	0xFE9
  8198                           wreg	equ	0xFE8
  8199                           indf1	equ	0xFE7
  8200                           postinc1	equ	0xFE6
  8201                           postdec1	equ	0xFE5
  8202                           preinc1	equ	0xFE4
  8203                           plusw1	equ	0xFE3
  8204                           fsr1h	equ	0xFE2
  8205                           fsr1l	equ	0xFE1
  8206                           bsr	equ	0xFE0
  8207                           indf2	equ	0xFDF
  8208                           postinc2	equ	0xFDE
  8209                           postdec2	equ	0xFDD
  8210                           preinc2	equ	0xFDC
  8211                           plusw2	equ	0xFDB
  8212                           fsr2h	equ	0xFDA
  8213                           fsr2l	equ	0xFD9
  8214                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    16
    Data        334
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     66     108
    BANK0           128     17     126
    BANK1           256      0     247
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 53
		 -> errString_Command(BANK0[24]), errString_Fatal(BANK1[39]), errString_PointZ(BANK1[53]), errString_Bound(BANK1[33]), 
		 -> errString_Point(BANK1[41]), errString_Reset(BANK1[40]), errString_ZEND(BANK1[41]), errString_Feed(BANK0[30]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 


Critical Paths under _main in COMRAM

    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_stepMade
    _touchTherm->_stepMade
    _touchObject->_stepMade
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _releaseObj->_stepMade
    _pickObject->_stepMade
    _moveToPoint->_stepMade
    _liftArm->_stepMade

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    _abortAll->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _main->_executeData
    _executeData->_rotateObj

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   10309
                                             12 BANK0      5     5      0
                           _clearTM0
                        _executeData
                     _getNewSequence
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                   _resetNewSequence
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim1Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim1Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    1604
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0     238
                                             20 COMRAM     3     3      0
                          _resetStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (1) _resetNewSequence                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0    6225
                                              7 BANK0      5     5      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0      34
                          _resetStep
                         _resetTherm
                        _returnTherm
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0      34
                          _resetStep
                         _resetTherm
                         _resetTouch
                        _returnTouch
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            7     7      0    3163
                                              0 BANK0      7     7      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
                          _resetStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         14     6      8    2608
                                             20 COMRAM    14     6      8
                          _resetStep
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0      34
                          _resetStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0    1059
                                             10 COMRAM     7     7      0
                           _abortAll
                         _fatalError
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _abortAll                                             0     0      0     507
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _executeData
     _getData
     _liftArm
       _resetStep
       _stepMade
     _moveToPoint
       _resetStep
       _stepCounter
       _stepMade
     _pickObject
       _stepMade
     _releaseObj
       _stepMade
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _resetStep
       _stepMade
     _touchObject
       _resetStep
       _resetTherm
       _resetTouch
       _returnTouch
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTherm
       _returnTherm
       _startADC
       _stepMade
       _stopADC
   _getNewSequence
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetNewSequence
   _resetPosition
     _resetStep
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim1Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _abortAll
     i2_printError
       i2_uartTx
   _fatalError
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F7       7       96.5%
BITBANK0            80      0       0       4        0.0%
BANK0               80     11      7E       5       98.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     42      6C       1       85.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1E1      15        0.0%
DATA                 0      0     1E1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Tue Apr 27 15:13:58 2021

                                        ___fldiv@aexp 0038  
                                        ___fldiv@bexp 0037  
                               __end_of_interruptInit 2370  
                                        ___fldiv@sign 0030  
                                                  l90 23EA  
                                                  l84 24C2  
                                                 l201 1B7C  
                                                 l202 1B80  
                                                 l131 10E4  
                                                 l220 214E  
                                                 l132 1278  
                                                 l213 1DB4  
                                                 l214 1DB8  
                                                 l151 1290  
                                                 l160 0B02  
                                                 l225 2166  
                                                 l217 213C  
                                                 l161 0B0C  
                                                 l250 2398  
                                                 l243 23BE  
                                                 l244 23C4  
                                                 l236 2076  
                                                 l165 0DEC  
                                                 l157 0E04  
                                                 l333 14DA  
                                                 l510 24B4  
                                                 l182 0DAA  
                                                 l158 0ABC  
                                                 l238 20A6  
                                                 l334 14D4  
                                                 l335 14D6  
                                                 l360 108E  
                                                 l249 2392  
                                                 l513 24A6  
                                                 l601 2498  
                                                 l610 2502  
                                                 l444 234A  
                                                 l516 255A  
                                                 l604 2442  
                                                 l613 2534  
                                                 l381 2572  
                                                 l445 2360  
                                                 l525 256A  
                                                 l533 224C  
                                                 l390 2520  
                                                 l446 236C  
                                                 l550 1C9A  
                                                 l607 2456  
                                                 l375 2410  
                                                 l519 2562  
                                                 l384 24F6  
                                                 l528 250C  
                                                 l536 242E  
                                                 l393 252A  
                                                 l378 2516  
                                                 l387 24EA  
                                                 l555 2268  
                                                 l580 1726  
                                                 l559 229A  
                                                 l583 17AC  
                                                 l922 1A5E  
                                                 l598 2468  
                                                 _isr 0008  
                                         _touchObject 1A64  
                                                 prod 000FF3  
                                                 wreg 000FE8  
                                        ___fltol@exp1 0042  
                                         main@errCode 00FB  
                                                l1220 093C  
                                                l1212 0810  
                                                l1221 0924  
                                                l1207 0A3E  
                                                l1209 0856  
                                                l1218 08AC  
                                                l4000 0DAA  
                                                l1280 12F4  
                                                l4010 0E02  
                                                l4002 0DC4  
                                                l1283 1486  
                                                l4004 0DDA  
                                                l4020 1A7E  
                                                l4100 1DAC  
                                                l4110 20C4  
                                                l4006 0DF2  
                                                l1294 140C  
                                                l4030 1ADA  
                                                l4022 1A88  
                                                l4014 1A66  
                                                l1287 13A0  
                                                l4120 2110  
                                                l4112 20DC  
                                                l4104 20AC  
                                                l4008 0DFE  
                                                l4040 1B30  
                                                l4032 1AE2  
                                                l4024 1AA0  
                                                l4016 1A6E  
                                                l4200 23D2  
                                                l4122 2122  
                                                l4114 20E8  
                                                l4106 20B2  
                                                l4050 1B5A  
                                                l4034 1AF4  
                                                l4042 1B40  
                                                l4026 1AAC  
                                                l4018 1A7C  
                                                l4210 23E4  
                                                l4202 23D6  
                                                l4124 2154  
                                                l4116 20F6  
                                                l4108 20BE  
                                                l4140 2058  
                                                l4132 1FD6  
                                                l4052 1B5E  
                                                l4044 1B46  
                                                l4028 1ABA  
                                                l4060 1CA2  
                                                l4300 240C  
                                                l4212 23E6  
                                                l4204 23DA  
                                                l4220 10AC  
                                                l4126 2160  
                                                l4118 2108  
                                                l4150 209E  
                                                l4142 205A  
                                                l4134 2028  
                                                l4054 1B62  
                                                l4046 1B4A  
                                                l4038 1B14  
                                                l4070 1CDC  
                                                l4062 1CAA  
                                                l4302 240E  
                                                l4214 23E8  
                                                l4206 23DE  
                                                l4230 110A  
                                                l4222 10BA  
                                                l4310 2464  
                                                l4128 2164  
                                                l4160 2372  
                                                l4152 20A2  
                                                l4144 2078  
                                                l4136 2036  
                                                l4056 1B74  
                                                l4048 1B4C  
                                                l4080 1D30  
                                                l4072 1CE8  
                                                l4064 1CB8  
                                                l4400 0EB4  
                                                l4208 23E2  
                                                l4240 114E  
                                                l4232 1114  
                                                l4224 10C0  
                                                l4216 1094  
                                                l4312 2490  
                                                l4320 2436  
                                                l4304 2416  
                                                l4154 239E  
                                                l4162 2376  
                                                l4146 207C  
                                                l4138 203C  
                                                l4090 1D82  
                                                l4074 1CF6  
                                                l4066 1CBA  
                                                l4410 0F36  
                                                l4402 0EC4  
                                                l4250 119E  
                                                l4242 1162  
                                                l4234 1122  
                                                l4226 10D8  
                                                l4218 10A0  
                                                l4170 1BA2  
                                                l4314 2494  
                                                l4322 243A  
                                                l4306 242A  
                                                l4156 23A2  
                                                l4164 2394  
                                                l3700 0694  
                                                l4148 2082  
                                                l4092 1D86  
                                                l4076 1D16  
                                                l4068 1CC4  
                                                l4084 1D50  
                                                l4412 0F58  
                                                l4404 0ED8  
                                                l4420 0F6E  
                                                l4324 2568  
                                                l4260 11E8  
                                                l4252 11A6  
                                                l4244 1174  
                                                l4236 1134  
                                                l4228 10F8  
                                                l4180 1C10  
                                                l4172 1BB8  
                                                l4340 1664  
                                                l4332 163A  
                                                l4308 245C  
                                                l4316 2496  
                                                l4500 1526  
                                                l4158 23C0  
                                                l3710 06D8  
                                                l3702 069A  
                                                l4094 1D88  
                                                l4086 1D6C  
                                                l4078 1D1E  
                                                l4430 0FD8  
                                                l4414 0F5C  
                                                l4406 0F12  
                                                l4422 0FB6  
                                                l4262 11F6  
                                                l4254 11B8  
                                                l4246 117E  
                                                l4238 113C  
                                                l4270 123C  
                                                l4182 1C26  
                                                l4174 1BCE  
                                                l4166 1B88  
                                                l4350 16C6  
                                                l4334 164A  
                                                l4318 2434  
                                                l4510 1598  
                                                l4502 1528  
                                                l4192 24AC  
                                                l3800 09F4  
                                                l3720 0722  
                                                l3712 06E8  
                                                l3704 06AC  
                                                l4096 1D96  
                                                l4088 1D7C  
                                                l4440 1072  
                                                l4432 1016  
                                                l4424 0FCC  
                                                l4416 0F64  
                                                l4408 0F22  
                                                l4328 249E  
                                                l4280 128E  
                                                l4272 1252  
                                                l4264 1208  
                                                l4256 11CC  
                                                l4248 118C  
                                                l4176 1BE4  
                                                l4168 1B8C  
                                                l4360 1758  
                                                l4352 1720  
                                                l4336 1650  
                                                l4344 166E  
                                                l4512 15B0  
                                                l4504 1548  
                                                l4520 15FA  
                                                l3650 244C  
                                                l3810 0A32  
                                                l3802 0A10  
                                                l3722 0732  
                                                l3730 0754  
                                                l3714 06EC  
                                                l3706 06AE  
                                                l4098 1D9A  
                                                l4442 107A  
                                                l4434 1028  
                                                l4426 0FD0  
                                                l4290 23F0  
                                                l4274 1266  
                                                l4266 1210  
                                                l4258 11DE  
                                                l4178 1BFA  
                                                l4186 1C3C  
                                                l4362 1760  
                                                l4354 1730  
                                                l4338 165A  
                                                l4346 16A6  
                                                l4530 162A  
                                                l4522 1614  
                                                l4514 15EA  
                                                l4506 1566  
                                                l4196 24BA  
                                                l3652 2450  
                                                l3804 0A16  
                                                l3740 079A  
                                                l3732 076A  
                                                l3724 073A  
                                                l3708 06C4  
                                                l3716 06F4  
                                                l3820 194A  
                                                l3900 1460  
                                                l3660 2512  
                                                l4444 107E  
                                                l4436 1038  
                                                l4428 0FD4  
                                                l4292 23F8  
                                                l4284 2336  
                                                l4276 127E  
                                                l4268 1222  
                                                l4364 176A  
                                                l4356 1740  
                                                l4348 16BE  
                                                l4524 161C  
                                                l4516 15F2  
                                                l4508 1570  
                                                l3910 0A60  
                                                l3806 0A28  
                                                l3750 07E8  
                                                l3742 07AA  
                                                l3734 076A  
                                                l3726 0740  
                                                l3718 0706  
                                                l3830 19A2  
                                                l3902 1472  
                                                l3662 24F0  
                                                l3670 24E4  
                                                l4446 1082  
                                                l4438 106A  
                                                l4390 0E18  
                                                l4294 23FE  
                                                l4198 23CA  
                                                l4286 2348  
                                                l4382 2508  
                                                l4278 128A  
                                                l4358 1754  
                                                l4526 1622  
                                                l4518 15F6  
                                                l4470 148C  
                                                l3656 2530  
                                                l3648 2448  
                                                l3920 0AC2  
                                                l3912 0A78  
                                                l3808 0A2E  
                                                l3760 0842  
                                                l3752 07FC  
                                                l3744 07BA  
                                                l3680 0614  
                                                l3840 19D4  
                                                l3832 19A6  
                                                l3824 1960  
                                                l3904 1474  
                                                l3664 2570  
                                                l4448 108A  
                                                l4392 0E1C  
                                                l4296 2400  
                                                l4288 235E  
                                                l4384 2560  
                                                l4456 2558  
                                                l4464 21F6  
                                                l3672 2252  
                                                l4368 1776  
                                                l4712 1686  
                                                l4528 1626  
                                                l4480 149E  
                                                l4472 148C  
                                                l3658 24FC  
                                                l3930 0B24  
                                                l3922 0AC6  
                                                l3770 0898  
                                                l3762 0852  
                                                l3754 080E  
                                                l3746 07CA  
                                                l3738 077E  
                                                l3690 065E  
                                                l3682 0620  
                                                l3850 1A04  
                                                l3842 19E0  
                                                l3834 19B8  
                                                l3826 1990  
                                                l3818 1930  
                                                l3666 251C  
                                                l4394 0E56  
                                                l4298 2402  
                                                l4466 2236  
                                                l4458 21F2  
                                                l3674 225A  
                                                l4714 178C  
                                                l4490 14CE  
                                                l4482 14A2  
                                                l4474 1492  
                                                l3940 0B8A  
                                                l3932 0B2A  
                                                l3924 0AF2  
                                                l3916 0A80  
                                                l3908 0A46  
                                                l3780 08E8  
                                                l3772 08AA  
                                                l3764 086C  
                                                l3756 081C  
                                                l3748 07D2  
                                                l3692 066E  
                                                l3684 0632  
                                                l3852 1A12  
                                                l3844 19EA  
                                                l3828 1992  
                                                l3668 2526  
                                                l4396 0E66  
                                                l4388 0E0C  
                                                l4468 2238  
                                                l3676 227C  
                                                l4716 1C52  
                                                l4492 14DE  
                                                l4484 14A6  
                                                l4476 1496  
                                                l3950 0BDE  
                                                l3942 0B94  
                                                l3934 0B42  
                                                l3926 0B08  
                                                l3918 0AAC  
                                                l3790 0970  
                                                l3782 091A  
                                                l3766 0886  
                                                l3774 08BE  
                                                l3758 0840  
                                                l3694 0672  
                                                l3686 0634  
                                                l3854 1A26  
                                                l3870 1322  
                                                l3862 1298  
                                                l4718 0F8E  
                                                l4398 0E7A  
                                                l3678 2282  
                                                l4494 14F8  
                                                l4486 14B2  
                                                l4478 149A  
                                                l3960 0C52  
                                                l3944 0BAA  
                                                l3952 0BF4  
                                                l3936 0B4E  
                                                l3928 0B16  
                                                l3792 099A  
                                                l3776 08D2  
                                                l3768 088C  
                                                l3688 064A  
                                                l3696 067A  
                                                l3856 1A3C  
                                                l3880 1386  
                                                l3864 12AC  
                                                l4496 1504  
                                                l4488 14BA  
                                                l3970 0C92  
                                                l3962 0C5E  
                                                l3954 0C0A  
                                                l3946 0BB6  
                                                l3938 0B64  
                                                l3786 0952  
                                                l3794 099E  
                                                l3778 08D6  
                                                l3698 068C  
                                                l3858 1A4C  
                                                l3890 13FA  
                                                l3882 138A  
                                                l3874 1336  
                                                l3866 12BE  
                                                l4498 1516  
                                                l3980 0D04  
                                                l3972 0CB8  
                                                l3964 0C70  
                                                l3948 0BD6  
                                                l3796 09BE  
                                                l3788 095E  
                                                l3892 1420  
                                                l3884 1396  
                                                l3876 1340  
                                                l3868 1306  
                                                l3990 0D6A  
                                                l3982 0D0C  
                                                l3974 0CC2  
                                                l3958 0C3C  
                                                l3798 09D4  
                                                l3894 1422  
                                                l3886 13D8  
                                                l3878 134E  
                                                l3992 0D80  
                                                l3976 0CD8  
                                                l3984 0D22  
                                                l3968 0C7C  
                                                l3896 1428  
                                                l3888 13E6  
                                                l3994 0D8C  
                                                l3986 0D38  
                                                l3978 0CE4  
                                                l3898 144C  
                                                l3996 0D9E  
                                                ?_isr 0001  
                                                u3000 13D2  
                                                u3001 13CC  
                                                u3010 13F8  
                                                u3011 13F2  
                                                u3100 0B40  
                                                u3020 140C  
                                                u3101 0B3A  
                                                u3021 1406  
                                                _LATA 000F89  
                                                u3110 0B62  
                                                u3030 141E  
                                                _LATB 000F8A  
                                                u3111 0B5C  
                                                u3031 1418  
                                                _LATC 000F8B  
                                                u3200 0CB6  
                                                u3120 0B88  
                                                u3040 145E  
                                                _LATD 000F8C  
                                                u3201 0CB0  
                                                u3121 0B82  
                                                u3041 1458  
                                                u3210 0CD6  
                                                u3130 0BA8  
                                                u3050 1470  
                                                u3211 0CD0  
                                                u3131 0BA2  
                                                u3051 146A  
                                                u3220 0D02  
                                                u3140 0BD4  
                                                u3060 0A5E  
                                                u3300 1A9E  
                                                u3221 0CFC  
                                                u3141 0BCE  
                                                u3061 0A58  
                                                u3301 1A98  
                                                u3230 0D36  
                                                u3150 0C08  
                                                u3070 0A78  
                                                u3310 1AD8  
                                                u3231 0D30  
                                                u3151 0C02  
                                                u3071 0A72  
                                                u3311 1AD2  
                                                u3240 0D64  
                                                u3160 0C36  
                                                u3080 0AAA  
                                                u3320 1B0E  
                                                u3400 1D7C  
                                                u3241 0D5E  
                                                u3161 0C30  
                                                u3081 0AA4  
                                                u3321 1B08  
                                                u3401 1D76  
                                                u3250 0D7E  
                                                u3170 0C50  
                                                u3090 0AF0  
                                                u3330 1B2E  
                                                u3410 1DAA  
                                                u3251 0D78  
                                                u3171 0C4A  
                                                u3091 0AEA  
                                                u3331 1B28  
                                                u3411 1DA4  
                                                u3420 20DA  
                                                u3260 0D9C  
                                                u3180 0C6E  
                                                u2700 06C2  
                                                u3340 1B40  
                                                u3500 10D6  
                                                u3421 20D4  
                                                u3261 0D96  
                                                u3181 0C68  
                                                u2701 06BC  
                                                u3341 1B3A  
                                                u3501 10D0  
                                                u3430 2106  
                                                u3270 0DC4  
                                                u3190 0C90  
                                                u2710 06D6  
                                                u3350 1B72  
                                                u3510 10F6  
                                                u3431 2100  
                                                u3271 0DBE  
                                                u3191 0C8A  
                                                u2711 06D0  
                                                u3351 1B6C  
                                                u3511 10F0  
                                                u3440 213C  
                                                u3280 0DD8  
                                                u2800 08D0  
                                                u2720 0720  
                                                u3360 1CDA  
                                                u3600 123C  
                                                u3520 110A  
                                                u2640 227A  
                                                u3441 2136  
                                                u3281 0DD2  
                                                u2801 08CA  
                                                u2721 071A  
                                                u3361 1CD4  
                                                u3601 1236  
                                                u3521 1104  
                                                u2641 2274  
                                                u3450 214E  
                                                u3290 0DEC  
                                                u2810 08E6  
                                                u2730 0768  
                                                u3370 1D14  
                                                u3610 1250  
                                                u3530 1132  
                                                u2650 2298  
                                                u3451 2148  
                                                u3291 0DE6  
                                                u2811 08E0  
                                                u2731 0762  
                                                u3371 1D0E  
                                                u3611 124A  
                                                u3531 112C  
                                                u2651 2292  
                                                u2820 0918  
                                                u2740 07E6  
                                                u2660 0630  
                                                u2900 1984  
                                                u3460 2074  
                                                u3380 1D4A  
                                                u3620 1264  
                                                u3540 1160  
                                                u3700 14CC  
                                                u2821 0912  
                                                u2741 07E0  
                                                u2661 062A  
                                                u3461 206E  
                                                u3381 1D44  
                                                u3621 125E  
                                                u3541 115A  
                                                u3701 14C6  
                                                u2830 0936  
                                                u2750 080C  
                                                u2670 0648  
                                                u2910 19B6  
                                                u3470 209C  
                                                u3390 1D6A  
                                                u3630 1278  
                                                u3550 1174  
                                                u3710 14F6  
                                                u2831 0930  
                                                u2751 0806  
                                                u2671 0642  
                                                u2911 19B0  
                                                u3471 2096  
                                                u3391 1D64  
                                                u3631 1272  
                                                u3551 116E  
                                                u3711 14F0  
                                                u3480 23BC  
                                                u2840 0950  
                                                u2760 083E  
                                                u2680 065C  
                                                u2920 19CE  
                                                u3640 2346  
                                                u3560 119C  
                                                u3720 1546  
                                                u3481 23B6  
                                                u2841 094A  
                                                u2761 0838  
                                                u2681 0656  
                                                u2921 19C8  
                                                u2905 1978  
                                                u3641 2340  
                                                u3561 1196  
                                                u3721 1540  
                                                u3490 2390  
                                                u2850 096E  
                                                u2770 086A  
                                                u2690 06AA  
                                                u2930 19FE  
                                                u3650 235C  
                                                u3570 11CA  
                                                u3730 1566  
                                                u3491 238A  
                                                u2851 0968  
                                                u2771 0864  
                                                u2691 06A4  
                                                u2931 19F8  
                                                u3651 2356  
                                                u3571 11C4  
                                                u3731 1560  
                                                u2860 09BC  
                                                u2780 0884  
                                                u2940 1A26  
                                                u3580 11DE  
                                                u3660 16BC  
                                                u3740 15AE  
                                                u2861 09B6  
                                                u2781 087E  
                                                u2941 1A20  
                                                u3581 11D8  
                                                u3661 16B6  
                                                u3741 15A8  
                                                u2870 09F2  
                                                u2790 08A8  
                                                u2950 1A3A  
                                                u3670 0FCA  
                                                u3590 1206  
                                                u3750 1612  
                                                u2871 09EC  
                                                u2791 08A2  
                                                u2951 1A34  
                                                u3671 0FC4  
                                                u3591 1200  
                                                u3751 160C  
                                                u2880 0A26  
                                                u2960 12AA  
                                                u3680 1068  
                                                u2881 0A20  
                                                u2961 12A4  
                                                u3681 1062  
                                                u2890 1948  
                                                u2970 12BC  
                                                u3690 224A  
                                         main@newData 00FC  
                                                u2891 1942  
                                                u2971 12B6  
                                                u3691 2244  
                                                u2980 1320  
                                                u2981 131A  
                                                u2990 1380  
                                                u2991 137A  
                                                i2l81 24D0  
                                                i2l87 257A  
                                                _TMR0 000FD6  
                                                _TMR2 000FCC  
                                 __end_ofi2_storeData 192E  
                                                _main 148C  
                                                _maxX 006A  
                                                _maxY 0090  
                                __end_ofi2_printError 1ED8  
                                                fsr2h 000FDA  
                                                indf2 000FDF  
                                                fsr1l 000FE1  
                                                fsr2l 000FD9  
                                                btemp 006D  
                                                prodh 000FF4  
                                                prodl 000FF3  
                                                start 01A4  
                                     ___fldiv@new_exp 0031  
                                        ___param_bank 000000  
                                     ??_whatsTM0Limit 0001  
                                               ??_isr 000B  
                                        ?_executeData 0001  
                                     executeData@data 00F7  
                                       ___fltol@sign1 0041  
                                               ?_main 0001  
                                     __end_of___fldiv 0A44  
                                     __end_of___fltol 1A64  
                                               i2l253 2474  
                                               i2l254 2476  
                                               i2l522 258A  
                                               i2l550 1ED2  
                                               i2l622 24DE  
                                               i2l616 2582  
                                               i2l555 22B6  
                                               i2l619 253E  
                                               i2l396 2552  
                                               i2l580 18A2  
                                               i2l469 018C  
                                               i2l559 22E8  
                                               i2l399 2548  
                                               i2l583 1928  
                                rotateObj@rotSequence 0080  
                                               _SPBRG 000FAF  
                                               _TRISA 000F92  
                                               _TRISB 000F93  
                                               _TRISC 000F94  
                                               _TRISD 000F95  
                                               _TXREG 000FAD  
                                     __end_of_getData 24B8  
                                     i2storeData@data 000A  
                                     __end_of_initADC 2414  
                                        ?_newSequence 0001  
                                     __end_of_liftArm 216A  
                                     __end_of_readSeq 2566  
                                        stepMade@temp 0014  
                                               tablat 000FF5  
                                      i2uartTx@length 0003  
                                     __end_of_stopADC 2576  
                                               ttemp5 006E  
                                               ttemp6 0071  
                                               ttemp7 0075  
                                               status 000FD8  
                                               wtemp8 006E  
                                    __end_ofi2_uartTx 22EC  
                                       ?_increaseStep 0001  
                                     __initialization 216A  
                              __size_of_initPinMotors 0026  
                                        __end_of_main 1636  
                            resetPosition@keepMovingX 0015  
                            resetPosition@keepMovingY 0016  
                            resetPosition@keepMovingZ 0017  
                                              ??_main 00F9  
                                       __activetblptr 000002  
                                         i2_storeData 17B2  
                                         isr@tm0Count 005A  
                                        ?_setThermRel 0001  
                                              _ADRESH 000FC4  
                                              _ADRESL 000FC3  
                                        ?_moveToPoint 0015  
                                              i2l3000 1E1C  
                                              i2l3002 1E32  
                                              i2l3010 1E74  
                                              i2l3004 1E48  
                                              i2l3006 1E5E  
                                              i2l3104 246E  
                                              i2l2160 2544  
                                              i2l2162 2588  
                                              i2l2170 253A  
                                              i2l3300 17D6  
                                              i2l2158 254E  
                                              i2l3310 183A  
                                              i2l3302 17E0  
                                              i2l2168 2580  
                                              i2l3320 18D0  
                                              i2l3312 1842  
                                              i2l3322 18D4  
                                              i2l3314 189C  
                                              i2l3330 18F2  
                                              i2l3306 17EA  
                                              i2l3410 0030  
                                              i2l2700 22D0  
                                              i2l3324 18DC  
                                              i2l3316 18AC  
                                              i2l3308 1822  
                                              i2l3412 0032  
                                              i2l3420 0058  
                                              i2l3326 18E6  
                                              i2l3318 18BC  
                                              i2l3430 009E  
                                              i2l3422 006C  
                                              i2l3414 004E  
                                              i2l3406 001C  
                                              i2l3440 00CC  
                                              i2l3432 00A0  
                                              i2l3424 006E  
                                              i2l3416 0050  
                                              i2l3408 002E  
                                              i2l3442 00E0  
                                              i2l3434 00A4  
                                              i2l3450 0100  
                                              i2l3426 0086  
                                              i2l3418 0054  
                                              i2l3292 24D6  
                                              i2l3460 0168  
                                              i2l3452 0114  
                                              i2l3444 00F2  
                                              i2l3436 00C2  
                                              i2l3428 008A  
                                              i2l3294 17B6  
                                              i2l3454 011C  
                                              i2l3462 016C  
                                              i2l3446 00F6  
                                              i2l3438 00CA  
                                              i2l1880 24C8  
                                              i2l3296 17C6  
                                              i2l3464 0180  
                                              i2l3456 0142  
                                              i2l3448 00FA  
                                              i2l3298 17CC  
                                              i2l3466 0186  
                                              i2l3458 014E  
                                              i2l1884 2578  
                                              i2l2694 22A0  
                                              i2l2696 22A8  
                                              i2l4720 1802  
                                              i2l2698 22CA  
                                              i2l4722 1908  
                                              i2l4724 1E8A  
                                              i2l2990 1DC0  
                                              i2l2992 1DC4  
                                              i2l2994 1DDA  
                                              i2l2996 1DF0  
                                              i2l2998 1E06  
                                              _RCREG1 000FAE  
                                        ?_setTouchRel 0001  
                                    __end_of_abortAll 247E  
                                    __end_of___xxtofl 148C  
                                    __end_of_clearTM0 24C6  
                                    _errString_PointZ 0100  
                                      ??_increaseStep 0001  
                                    __end_of_maxFeedX 0611  
                                    __end_of_maxFeedY 0610  
                                           ??___fldiv 0028  
                                           ??___fltol 003D  
                                    __end_of_tim0Init 246C  
                                    __end_of_tim1Init 249C  
                                    __end_of_tim2Init 2446  
                                              clear_0 21D0  
                                              clear_1 21DC  
                                           ??_getData 0014  
                                              _uartTx 2250  
                                           ??_initADC 0012  
                                           ??_liftArm 0015  
                                           ??_readSeq 0012  
                                        __pdataCOMRAM 005E  
                               __end_of_resetPosition 1294  
                                        __mediumconst 0000  
                                              tblptrh 000FF7  
                                              tblptrl 000FF6  
                                              tblptru 000FF8  
                                        ?_returnTherm 0012  
                                    __end_of_startADC 251A  
                                    __end_of_stepMade 245A  
                                       _initPinMotors 23C8  
                                        ?_returnTouch 0012  
                                           ??_stopADC 0012  
                               __size_ofi2_printError 011C  
                                    __end_of_writeTM0 24D4  
                           __size_of_resetNewSequence 000A  
                                        ___xxtofl@arg 001C  
                                        ___xxtofl@exp 001B  
                                        ___xxtofl@val 0012  
                                          __accesstop 0080  
                             __end_of__initialization 21E2  
                                        _dataSequence 00D1  
                                       ___rparam_used 000001  
                                          ___fltol@f1 0039  
                                        ?_stepCounter 0012  
                                         i2uartTx@ptr 0001  
                                      __pcstackCOMRAM 0001  
                                        __newSequence 0056  
                                        __pidataBANK0 22EC  
                                        __pidataBANK1 1ED8  
                                     isr@single_cycle 0048  
                                __size_of_executeData 0288  
                                        i2_printError 1DBC  
                                        ?_touchObject 0001  
                                      _errString_ZEND 015E  
                                      _errString_Feed 0092  
                                      ?_initPinMotors 0001  
                                           ?i2_uartTx 0001  
                                          __pbssBANK0 00C8  
                                __size_of_newSequence 0008  
                                          _feeder1Pos 060D  
                                          _feeder2Pos 060B  
                                          _feeder3Pos 0609  
                             __size_of_getNewSequence 000E  
                                          _fatalError 2586  
                                  __size_of_reduceSeq 0008  
                                  __size_of_retPeriod 000E  
                                      _touch_pressure 0607  
                                  __size_of_shiftData 0060  
                                  __size_of_resetStep 000A  
                                             _ADC_res 004A  
                                             ?_uartTx 0012  
                                           ?_abortAll 0001  
                                           ?___xxtofl 0012  
                                __end_of_increaseStep 2586  
                                           ?_clearTM0 0001  
                                          ??i2_uartTx 0004  
                                  __size_of_rotateObj 00DA  
                                   _errString_Command 00B0  
                                  __size_of_usartInit 001E  
                              __size_of_interruptInit 003C  
                                __size_of_setThermRel 000A  
                                  __size_of_storeData 017C  
                                           ?_tim0Init 0001  
                                           ?_tim1Init 0001  
                                           ?_tim2Init 0012  
                                __size_of_moveToPoint 03C6  
                                storeData@receivedMex 00C8  
                                     _newSequenceData 00E5  
                                __size_of_setTouchRel 000A  
                                             __Hparam 0000  
                                             __Lparam 0000  
                              __end_of_touch_pressure 0609  
                                             ___fldiv 0612  
                                           ?_startADC 0001  
                                           ?_stepMade 0012  
                                             ___fltol 192E  
                                        __psmallconst 0600  
                                             __pcinit 216A  
                               __end_of_whatsTM0Limit 257E  
                                             _getData 24AA  
                                             __ramtop 0600  
                                           ?_writeTM0 0001  
                                          _pickObject 239C  
                                             __ptext0 148C  
                                             __ptext1 2414  
                                             __ptext2 2432  
                                             __ptext3 248E  
                                             __ptext4 245A  
                                             __ptext5 1636  
                                             __ptext6 1B84  
                                             __ptext7 2250  
                                             __ptext8 21F0  
                                             __ptext9 1092  
                                     __size_of_uartTx 004E  
                                           _T0CONbits 000FD5  
                                             _initADC 23EE  
                                           _T1CONbits 000FCD  
                                     ??_initPinMotors 0012  
                                             _liftArm 20AA  
                                           _T2CONbits 000FCA  
                                          ??_abortAll 0008  
                                             _readSeq 255E  
                                        __size_of_isr 019C  
                                          ??___xxtofl 0016  
                                        ?i2_storeData 0001  
                                          ??_clearTM0 0012  
                                          _motCounter 005E  
                                             _pwmStep 0053  
                                             _stopADC 256E  
                                   __end_of_reduceSeq 255E  
                                   __end_of_retPeriod 24E2  
                                          _releaseObj 2370  
                                __size_of_returnTherm 000C  
                                end_of_initialization 21E2  
                                __size_of_returnTouch 000C  
                                    _resetNewSequence 2506  
                                    rotateObj@totStep 00F0  
                                   __end_of_shiftData 2250  
                                             isr@temp 0011  
                                   __end_of_resetStep 2538  
                                          ??_tim0Init 0012  
                                       __Lmediumconst 0000  
                                          ??_tim1Init 0012  
                                          ??_tim2Init 0014  
                                    storeData@command 0054  
                                    storeData@counter 0055  
                                          _resetTherm 2524  
                                          _resetTouch 251A  
                                             uartTx@i 0015  
                                         ?_fatalError 0001  
                                           _RCSTAbits 000FAB  
                                             postdec1 000FE5  
                                             postdec2 000FDD  
                                   __end_of_rotateObj 20AA  
                                             postinc0 000FEE  
                                             postinc1 000FE6  
                                             postinc2 000FDE  
                                          ??_startADC 0012  
                                          ??_stepMade 0014  
                                __size_of_stepCounter 000C  
                                       _interruptInit 2334  
                                   __end_of_usartInit 2432  
                                   __end_of_storeData 17B2  
                          __end_ofrotateObj@stepAngle 0605  
                                          ??_writeTM0 0001  
                                           _PORTDbits 000F83  
                                          _printError 1B84  
                                           _PORTEbits 000F84  
                                 i2printError@errCode 0007  
                                          _toggleStep 2538  
                                       ___xxtofl@sign 001A  
                                           _TRISCbits 000F94  
                                           _TRISDbits 000F95  
                                           _TRISEbits 000F96  
                                         ___fldiv@grs 0033  
                                         ___fldiv@rem 002C  
                                __size_of_touchObject 0120  
                                          _stepToggle 0052  
                                          _touchTherm 1CA0  
                                           _TXSTAbits 000FAC  
                                      _getNewSequence 249C  
                                      ?_interruptInit 0001  
                                       __pidataCOMRAM 247E  
                               __size_of_increaseStep 0008  
                                         ?_pickObject 0001  
                                         __fatalError 0057  
                                      __end_of_uartTx 229E  
                                       moveToPoint@x1 0015  
                                       moveToPoint@x2 0019  
                                       moveToPoint@y1 0017  
                                       moveToPoint@y2 001B  
                                 start_initialization 216A  
                                           i2uartTx@i 0004  
                                         __end_of_isr 01A4  
                                 __size_of_fatalError 0008  
                                         ?_releaseObj 0001  
                                   __size_ofi2_uartTx 004E  
                              __end_of_getNewSequence 24AA  
                                     _errString_Fatal 01AF  
                                     _errString_Bound 01D6  
                                         ?_resetTherm 0001  
                                     _errString_Reset 0187  
                                         ?_resetTouch 0001  
                                     _errString_Point 0135  
                                        _increaseStep 257E  
                              __size_of_resetPosition 0202  
                                       ??_executeData 00F4  
                                         __pdataBANK0 0080  
                                         __pdataBANK1 0100  
                                         _dataCounter 0058  
                                            ??_uartTx 0015  
                              moveToPoint@keepMovingX 0021  
                              moveToPoint@keepMovingY 0022  
                                         ?_printError 0001  
                                           ___fldiv@a 0024  
                                           ___fldiv@b 0020  
                                      _therm_pressure 0605  
                                         ?_toggleStep 0001  
                                         __pbssCOMRAM 0043  
                                       __pcstackBANK0 00ED  
                                       ??_newSequence 0012  
                                   __size_of_abortAll 0012  
                                   __size_of___xxtofl 01F8  
                                __size_ofi2_storeData 017C  
                                   __size_of_clearTM0 000E  
                                     ?_getNewSequence 0012  
                                         ?_touchTherm 0001  
                                 __size_of_pickObject 002C  
                                  executeData@errCode 00F6  
                                   __size_of_tim0Init 0012  
                                   __size_of_tim1Init 000E  
                                   __size_of_tim2Init 0014  
                                     ??_interruptInit 0012  
                                           __pintcode 0008  
                                            ?___fldiv 0020  
                                            ?___fltol 0039  
                            __end_of_resetNewSequence 2510  
                                 __size_of_releaseObj 002C  
                                       storeData@data 001B  
                                            ?_getData 0012  
                                   __size_of_startADC 000A  
                                   __size_of_stepMade 0014  
                              __end_of_therm_pressure 0607  
                                            ?_initADC 0001  
                                         __smallconst 0600  
                                            ?_liftArm 0001  
                                            ?_readSeq 0001  
                                   __size_of_writeTM0 000E  
                                 __end_of_executeData 1092  
                                          shiftData@i 0014  
                                 __size_of_resetTherm 000A  
                                           _newFeeder 004C  
                                       _resetPosition 1092  
                                 __size_of_resetTouch 000A  
                                       ??_setThermRel 0001  
                                            ?_stopADC 0001  
                                       ??_moveToPoint 001D  
                                       ??_setTouchRel 0001  
                                 __end_of_newSequence 256E  
                                           _reduceSeq 2556  
                                            _LATAbits 000F89  
                                            _LATBbits 000F8A  
                                           _retPeriod 24D4  
                                            _LATCbits 000F8B  
                                            _LATDbits 000F8C  
                                 __size_of_printError 011C  
                                            _IPR1bits 000F9F  
                                            _PIE1bits 000F9D  
                                           _shiftData 21F0  
                                            i2u180_40 22E6  
                                            i2u260_40 0112  
                                            i2u252_40 002C  
                                            i2u180_41 22E0  
                                            i2u260_41 010C  
                                            i2u252_41 0026  
                                           _resetStep 252E  
                                            i2u245_40 1838  
                                            i2u261_40 0140  
                                            i2u253_40 004C  
                                            i2u245_41 1832  
                                            i2u261_41 013A  
                                            i2u253_41 0046  
                                            i2u262_40 0166  
                                            i2u254_40 006A  
                                            i2u262_41 0160  
                                            i2u254_41 0064  
                                            i2u263_40 017E  
                                            i2u255_40 0084  
                                            i2u263_41 0178  
                                            i2u255_41 007E  
                                            i2u256_40 009C  
                                            i2u256_41 0096  
                                            i2u257_40 00C0  
                                            i2u257_41 00BA  
                                            _PIR1bits 000F9E  
                                            i2u258_40 00DE  
                                            i2u258_41 00D8  
                                            i2u179_40 22C8  
                                            i2u259_40 00F0  
                                            i2u179_41 22C2  
                                            i2u259_41 00EA  
                                 __size_of_toggleStep 000A  
                                        ??_fatalError 0001  
                                           _posVector 0043  
                                            _RCONbits 000FD0  
                                           _therm_rel 005B  
                                           _pwmPeriod 0046  
                                           _rotateObj 1FD0  
                                          _ADCON0bits 000FC2  
                                          _ADCON1bits 000FC1  
                                 __size_of_touchTherm 011C  
                                           _usartInit 2414  
                                           _touch_rel 005C  
                                  __end_of_feeder1Pos 060F  
                                  __end_of_feeder2Pos 060D  
                                  __end_of_feeder3Pos 060B  
                                           _storeData 1636  
                                      ?_resetPosition 0001  
                               __end_of_initPinMotors 23EE  
                                       ??_returnTherm 0014  
                                       ??_returnTouch 0014  
                                            i2_uartTx 229E  
                                           copy_data0 217E  
                                           copy_data1 219E  
                                           copy_data2 21BE  
                                  __end_of_fatalError 258E  
                                  rotateObj@stepAngle 0601  
                                          ?_reduceSeq 0001  
                                          ?_retPeriod 0001  
                                          rotateObj@i 00F2  
                              __size_of_whatsTM0Limit 0008  
                                 __end_of_setThermRel 2556  
                                 __end_of_moveToPoint 0E0A  
                                   printError@errCode 0018  
                                          ?_shiftData 0001  
                                       ??_stepCounter 0014  
                                            __Hrparam 0000  
                                          ?_resetStep 0001  
                                 __end_of_setTouchRel 254C  
                                            __Lrparam 0000  
                                    __size_of___fldiv 0432  
                                    __size_of___fltol 0136  
                                         _executeData 0E0A  
                                        ??_pickObject 0015  
                                          ?_rotateObj 0001  
                            moveToPoint@MOT1Direction 001F  
                                       ?i2_printError 0001  
                                    __size_of_getData 000E  
                            moveToPoint@MOT2Direction 0020  
                                       ??_touchObject 0015  
                                            _abortAll 246C  
                                          ?_usartInit 0001  
                                    __size_of_initADC 0026  
                                            ___xxtofl 1294  
                                    __size_of_liftArm 00C0  
                                          ?_storeData 0001  
                                            _clearTM0 24B8  
                                    __size_of_readSeq 0008  
                                  storeData@mexLength 006C  
                                            _tm0Error 0050  
                                            _tm0Limit 005D  
                                         _newSequence 2566  
                                            __ptext10 2506  
                                            __ptext11 2556  
                                            __ptext20 24E2  
                                            __ptext12 255E  
                                            __ptext21 1A64  
                                            __ptext13 2566  
                                            __ptext30 0612  
                                            __ptext22 256E  
                                            __ptext14 2334  
                                            __ptext31 2370  
                                            __ptext23 2510  
                                            __ptext15 23C8  
                                            __ptext32 239C  
                                            __ptext24 24EE  
                                            __ptext16 23EE  
                                            __ptext41 17B2  
                                            __ptext33 0A44  
                                            __ptext25 251A  
                                            __ptext17 249C  
                                            __ptext50 246C  
                                            __ptext42 24C6  
                                            __ptext34 24FA  
                                            __ptext26 2524  
                                            __ptext18 0E0A  
                                            __ptext51 1DBC  
                                            __ptext43 2576  
                                            __ptext35 20AA  
                                            __ptext27 1FD0  
                                            __ptext19 1CA0  
                                            __ptext52 229E  
                                            __ptext44 2538  
                                            __ptext36 2446  
                                            __ptext28 1294  
                                            __ptext45 2542  
                                            __ptext37 252E  
                                            __ptext29 192E  
                                            __ptext46 254C  
                                            __ptext38 24AA  
                                            __ptext47 24D4  
                                            __ptext39 24B8  
                                            __ptext48 257E  
                                            __ptext49 2586  
                                        ??_releaseObj 0015  
                                    __size_of_stopADC 0008  
                                            _maxFeedX 0610  
                                            _maxFeedY 060F  
                                 __end_of_returnTherm 24EE  
                                 __end_of_returnTouch 24FA  
                                            _tim0Init 245A  
                                            _tim1Init 248E  
                                            _tim2Init 2432  
                                       __size_of_main 01AA  
                                  __end_of_pickObject 23C8  
                                        ??_resetTherm 0012  
                                        ??_resetTouch 0012  
                                           uartTx@ptr 0012  
                                            _rotAngle 004E  
                                     isr@completeStep 0059  
                                            int$flags 006D  
                                            _startADC 2510  
                                            _stepMade 2446  
                                            _stepMot1 008C  
                                            _stepMot2 0088  
                                            _stepMot3 0084  
                                 __end_of_stepCounter 2506  
                                   rotateObj@rotAngle 00EF  
                                      ??i2_printError 0005  
                                  __end_of_releaseObj 239C  
                                            _writeTM0 24C6  
                                        ??_printError 0016  
                                       _whatsTM0Limit 2576  
                                     ??_resetPosition 0015  
                                  tim2Init@_pwmPeriod 0012  
                                          _INTCONbits 000FF2  
                                        ??_toggleStep 0001  
                                    ??_getNewSequence 0014  
                                  __end_of_resetTherm 252E  
                                  __end_of_resetTouch 2524  
                                         _setThermRel 254C  
                                        uartTx@length 0014  
                                         _moveToPoint 0A44  
                                 __end_of_touchObject 1B84  
                                            intlevel2 258E  
                                        ??_touchTherm 0015  
                                         _setTouchRel 2542  
                                         ??_reduceSeq 0012  
                                         ??_retPeriod 0003  
                                          _RCSTA1bits 000FAB  
                                  __end_of_printError 1CA0  
                                         ??_shiftData 0012  
                                         ??_resetStep 0012  
                                  __end_of_toggleStep 2542  
                                   ?_resetNewSequence 0001  
                                      ?_whatsTM0Limit 0001  
                                         ??_rotateObj 00ED  
                                  ??_resetNewSequence 0012  
                                  __end_of_touchTherm 1DBC  
                                         ??_usartInit 0012  
                                       ??i2_storeData 0008  
                                         ??_storeData 0019  
                                         _returnTherm 24E2  
                                         _returnTouch 24EE  
                                         _stepCounter 24FA  
