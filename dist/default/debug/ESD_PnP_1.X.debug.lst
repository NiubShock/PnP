

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Mon Mar 29 11:06:52 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    77                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    78                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    79                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    80                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    81  0000                     
    82                           ; Version 2.20
    83                           ; Generated 12/02/2020 GMT
    84                           ; 
    85                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    86                           ; All rights reserved.
    87                           ; 
    88                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    89                           ; 
    90                           ; Redistribution and use in source and binary forms, with or without modification, are
    91                           ; permitted provided that the following conditions are met:
    92                           ; 
    93                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    94                           ;        conditions and the following disclaimer.
    95                           ; 
    96                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    97                           ;        of conditions and the following disclaimer in the documentation and/or other
    98                           ;        materials provided with the distribution.
    99                           ; 
   100                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   101                           ;        software without specific prior written permission.
   102                           ; 
   103                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   104                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   105                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   106                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   107                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   108                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   109                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   110                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   111                           ; 
   112                           ; 
   113                           ; Code-generator required, PIC18F452 Definitions
   114                           ; 
   115                           ; SFR Addresses
   116  0000                     
   117                           	psect	idataCOMRAM
   118  002686                     __pidataCOMRAM:
   119                           	callstack 0
   120                           
   121                           ;initializer for _maxY
   122  002686  03E8               	dw	1000
   123                           
   124                           ;initializer for _maxX
   125  002688  03E8               	dw	1000
   126                           
   127                           ;initializer for storeData@mexLength
   128  00268A  05                 	db	5
   129                           
   130                           	psect	idataBANK0
   131  002322                     __pidataBANK0:
   132                           	callstack 0
   133                           
   134                           ;initializer for rotateObj@rotSequence
   135  002322  09                 	db	9
   136  002323  03                 	db	3
   137  002324  06                 	db	6
   138  002325  0C                 	db	12
   139                           
   140                           ;initializer for _errString_Bound
   141  002326  45                 	db	69
   142  002327  72                 	db	114
   143  002328  72                 	db	114
   144  002329  6F                 	db	111
   145  00232A  72                 	db	114
   146  00232B  2C                 	db	44
   147  00232C  20                 	db	32
   148  00232D  70                 	db	112
   149  00232E  6F                 	db	111
   150  00232F  69                 	db	105
   151  002330  6E                 	db	110
   152  002331  74                 	db	116
   153  002332  20                 	db	32
   154  002333  6F                 	db	111
   155  002334  75                 	db	117
   156  002335  74                 	db	116
   157  002336  73                 	db	115
   158  002337  69                 	db	105
   159  002338  64                 	db	100
   160  002339  65                 	db	101
   161  00233A  20                 	db	32
   162  00233B  62                 	db	98
   163  00233C  6F                 	db	111
   164  00233D  75                 	db	117
   165  00233E  6E                 	db	110
   166  00233F  64                 	db	100
   167  002340  61                 	db	97
   168  002341  72                 	db	114
   169  002342  69                 	db	105
   170  002343  65                 	db	101
   171  002344  73                 	db	115
   172  002345  0A                 	db	10
   173  002346  00                 	db	0
   174                           
   175                           ;initializer for _errString_Feed
   176  002347  45                 	db	69
   177  002348  72                 	db	114
   178  002349  72                 	db	114
   179  00234A  6F                 	db	111
   180  00234B  72                 	db	114
   181  00234C  2C                 	db	44
   182  00234D  20                 	db	32
   183  00234E  66                 	db	102
   184  00234F  65                 	db	101
   185  002350  65                 	db	101
   186  002351  64                 	db	100
   187  002352  20                 	db	32
   188  002353  6C                 	db	108
   189  002354  69                 	db	105
   190  002355  6E                 	db	110
   191  002356  65                 	db	101
   192  002357  20                 	db	32
   193  002358  6E                 	db	110
   194  002359  6F                 	db	111
   195  00235A  74                 	db	116
   196  00235B  20                 	db	32
   197  00235C  64                 	db	100
   198  00235D  65                 	db	101
   199  00235E  66                 	db	102
   200  00235F  69                 	db	105
   201  002360  6E                 	db	110
   202  002361  65                 	db	101
   203  002362  64                 	db	100
   204  002363  0A                 	db	10
   205  002364  00                 	db	0
   206                           
   207                           ;initializer for _errString_Command
   208  002365  43                 	db	67
   209  002366  6F                 	db	111
   210  002367  6D                 	db	109
   211  002368  6D                 	db	109
   212  002369  61                 	db	97
   213  00236A  6E                 	db	110
   214  00236B  64                 	db	100
   215  00236C  20                 	db	32
   216  00236D  6E                 	db	110
   217  00236E  6F                 	db	111
   218  00236F  74                 	db	116
   219  002370  20                 	db	32
   220  002371  72                 	db	114
   221  002372  65                 	db	101
   222  002373  63                 	db	99
   223  002374  6F                 	db	111
   224  002375  67                 	db	103
   225  002376  6E                 	db	110
   226  002377  69                 	db	105
   227  002378  7A                 	db	122
   228  002379  65                 	db	101
   229  00237A  64                 	db	100
   230  00237B  0A                 	db	10
   231  00237C  00                 	db	0
   232                           
   233                           	psect	idataBANK1
   234  001E10                     __pidataBANK1:
   235                           	callstack 0
   236                           
   237                           ;initializer for _errString_PointZ
   238  001E10  45                 	db	69
   239  001E11  72                 	db	114
   240  001E12  72                 	db	114
   241  001E13  6F                 	db	111
   242  001E14  72                 	db	114
   243  001E15  2C                 	db	44
   244  001E16  20                 	db	32
   245  001E17  74                 	db	116
   246  001E18  69                 	db	105
   247  001E19  6D                 	db	109
   248  001E1A  65                 	db	101
   249  001E1B  20                 	db	32
   250  001E1C  65                 	db	101
   251  001E1D  78                 	db	120
   252  001E1E  63                 	db	99
   253  001E1F  65                 	db	101
   254  001E20  65                 	db	101
   255  001E21  64                 	db	100
   256  001E22  65                 	db	101
   257  001E23  64                 	db	100
   258  001E24  20                 	db	32
   259  001E25  74                 	db	116
   260  001E26  6F                 	db	111
   261  001E27  20                 	db	32
   262  001E28  72                 	db	114
   263  001E29  65                 	db	101
   264  001E2A  61                 	db	97
   265  001E2B  63                 	db	99
   266  001E2C  68                 	db	104
   267  001E2D  20                 	db	32
   268  001E2E  74                 	db	116
   269  001E2F  68                 	db	104
   270  001E30  65                 	db	101
   271  001E31  20                 	db	32
   272  001E32  65                 	db	101
   273  001E33  6E                 	db	110
   274  001E34  64                 	db	100
   275  001E35  20                 	db	32
   276  001E36  6F                 	db	111
   277  001E37  66                 	db	102
   278  001E38  20                 	db	32
   279  001E39  74                 	db	116
   280  001E3A  68                 	db	104
   281  001E3B  65                 	db	101
   282  001E3C  20                 	db	32
   283  001E3D  5A                 	db	90
   284  001E3E  20                 	db	32
   285  001E3F  41                 	db	65
   286  001E40  78                 	db	120
   287  001E41  69                 	db	105
   288  001E42  73                 	db	115
   289  001E43  0A                 	db	10
   290  001E44  00                 	db	0
   291                           
   292                           ;initializer for _errString_Point
   293  001E45  45                 	db	69
   294  001E46  72                 	db	114
   295  001E47  72                 	db	114
   296  001E48  6F                 	db	111
   297  001E49  72                 	db	114
   298  001E4A  2C                 	db	44
   299  001E4B  20                 	db	32
   300  001E4C  74                 	db	116
   301  001E4D  69                 	db	105
   302  001E4E  6D                 	db	109
   303  001E4F  65                 	db	101
   304  001E50  20                 	db	32
   305  001E51  65                 	db	101
   306  001E52  78                 	db	120
   307  001E53  63                 	db	99
   308  001E54  65                 	db	101
   309  001E55  65                 	db	101
   310  001E56  64                 	db	100
   311  001E57  65                 	db	101
   312  001E58  64                 	db	100
   313  001E59  20                 	db	32
   314  001E5A  74                 	db	116
   315  001E5B  6F                 	db	111
   316  001E5C  20                 	db	32
   317  001E5D  72                 	db	114
   318  001E5E  65                 	db	101
   319  001E5F  61                 	db	97
   320  001E60  63                 	db	99
   321  001E61  68                 	db	104
   322  001E62  20                 	db	32
   323  001E63  74                 	db	116
   324  001E64  68                 	db	104
   325  001E65  65                 	db	101
   326  001E66  20                 	db	32
   327  001E67  70                 	db	112
   328  001E68  6F                 	db	111
   329  001E69  69                 	db	105
   330  001E6A  6E                 	db	110
   331  001E6B  74                 	db	116
   332  001E6C  0A                 	db	10
   333  001E6D  00                 	db	0
   334                           
   335                           ;initializer for _errString_ZEND
   336  001E6E  45                 	db	69
   337  001E6F  72                 	db	114
   338  001E70  72                 	db	114
   339  001E71  6F                 	db	111
   340  001E72  72                 	db	114
   341  001E73  2C                 	db	44
   342  001E74  20                 	db	32
   343  001E75  6E                 	db	110
   344  001E76  6F                 	db	111
   345  001E77  20                 	db	32
   346  001E78  6F                 	db	111
   347  001E79  62                 	db	98
   348  001E7A  6A                 	db	106
   349  001E7B  65                 	db	101
   350  001E7C  63                 	db	99
   351  001E7D  74                 	db	116
   352  001E7E  20                 	db	32
   353  001E7F  72                 	db	114
   354  001E80  65                 	db	101
   355  001E81  6C                 	db	108
   356  001E82  65                 	db	101
   357  001E83  76                 	db	118
   358  001E84  61                 	db	97
   359  001E85  74                 	db	116
   360  001E86  65                 	db	101
   361  001E87  64                 	db	100
   362  001E88  20                 	db	32
   363  001E89  61                 	db	97
   364  001E8A  6C                 	db	108
   365  001E8B  6F                 	db	111
   366  001E8C  6E                 	db	110
   367  001E8D  67                 	db	103
   368  001E8E  20                 	db	32
   369  001E8F  5A                 	db	90
   370  001E90  20                 	db	32
   371  001E91  41                 	db	65
   372  001E92  78                 	db	120
   373  001E93  69                 	db	105
   374  001E94  73                 	db	115
   375  001E95  0A                 	db	10
   376  001E96  00                 	db	0
   377                           
   378                           ;initializer for _errString_Reset
   379  001E97  45                 	db	69
   380  001E98  72                 	db	114
   381  001E99  72                 	db	114
   382  001E9A  6F                 	db	111
   383  001E9B  72                 	db	114
   384  001E9C  2C                 	db	44
   385  001E9D  20                 	db	32
   386  001E9E  74                 	db	116
   387  001E9F  69                 	db	105
   388  001EA0  6D                 	db	109
   389  001EA1  65                 	db	101
   390  001EA2  20                 	db	32
   391  001EA3  65                 	db	101
   392  001EA4  78                 	db	120
   393  001EA5  63                 	db	99
   394  001EA6  65                 	db	101
   395  001EA7  65                 	db	101
   396  001EA8  64                 	db	100
   397  001EA9  65                 	db	101
   398  001EAA  64                 	db	100
   399  001EAB  20                 	db	32
   400  001EAC  74                 	db	116
   401  001EAD  6F                 	db	111
   402  001EAE  20                 	db	32
   403  001EAF  72                 	db	114
   404  001EB0  65                 	db	101
   405  001EB1  73                 	db	115
   406  001EB2  65                 	db	101
   407  001EB3  74                 	db	116
   408  001EB4  20                 	db	32
   409  001EB5  70                 	db	112
   410  001EB6  6F                 	db	111
   411  001EB7  73                 	db	115
   412  001EB8  69                 	db	105
   413  001EB9  74                 	db	116
   414  001EBA  69                 	db	105
   415  001EBB  6F                 	db	111
   416  001EBC  6E                 	db	110
   417  001EBD  0A                 	db	10
   418  001EBE  00                 	db	0
   419                           
   420                           ;initializer for _errString_Fatal
   421  001EBF  46                 	db	70
   422  001EC0  61                 	db	97
   423  001EC1  74                 	db	116
   424  001EC2  61                 	db	97
   425  001EC3  6C                 	db	108
   426  001EC4  20                 	db	32
   427  001EC5  45                 	db	69
   428  001EC6  72                 	db	114
   429  001EC7  72                 	db	114
   430  001EC8  6F                 	db	111
   431  001EC9  72                 	db	114
   432  001ECA  2C                 	db	44
   433  001ECB  20                 	db	32
   434  001ECC  70                 	db	112
   435  001ECD  6C                 	db	108
   436  001ECE  65                 	db	101
   437  001ECF  61                 	db	97
   438  001ED0  73                 	db	115
   439  001ED1  65                 	db	101
   440  001ED2  20                 	db	32
   441  001ED3  72                 	db	114
   442  001ED4  65                 	db	101
   443  001ED5  73                 	db	115
   444  001ED6  65                 	db	101
   445  001ED7  74                 	db	116
   446  001ED8  20                 	db	32
   447  001ED9  74                 	db	116
   448  001EDA  68                 	db	104
   449  001EDB  65                 	db	101
   450  001EDC  20                 	db	32
   451  001EDD  64                 	db	100
   452  001EDE  65                 	db	101
   453  001EDF  76                 	db	118
   454  001EE0  69                 	db	105
   455  001EE1  63                 	db	99
   456  001EE2  65                 	db	101
   457  001EE3  21                 	db	33
   458  001EE4  0A                 	db	10
   459  001EE5  00                 	db	0
   460                           
   461                           	psect	smallconst
   462  000600                     __psmallconst:
   463                           	callstack 0
   464  000600  00                 	db	0
   465  000601  FFAC               	dw	65452
   466  000603  3DB3               	dw	15795
   467  000605                     __end_ofrotateObj@stepAngle:
   468                           	callstack 0
   469  000605  0400               	dw	1024
   470  000607                     __end_of_therm_pressure:
   471                           	callstack 0
   472  000607  0200               	dw	512
   473  000609                     __end_of_touch_pressure:
   474                           	callstack 0
   475  000609                     _feeder3Pos:
   476                           	callstack 0
   477  000609  19                 	db	25
   478  00060A  19                 	db	25
   479  00060B                     __end_of_feeder3Pos:
   480                           	callstack 0
   481  00060B                     _feeder2Pos:
   482                           	callstack 0
   483  00060B  0F                 	db	15
   484  00060C  0F                 	db	15
   485  00060D                     __end_of_feeder2Pos:
   486                           	callstack 0
   487  00060D                     _feeder1Pos:
   488                           	callstack 0
   489  00060D  05                 	db	5
   490  00060E  05                 	db	5
   491  00060F                     __end_of_feeder1Pos:
   492                           	callstack 0
   493  0000                     _TMR0	set	4054
   494  0000                     _TXREG	set	4013
   495  0000                     _SPBRG	set	4015
   496  0000                     _TXSTAbits	set	4012
   497  0000                     _TRISCbits	set	3988
   498  0000                     _RCREG1	set	4014
   499  0000                     _ADRESH	set	4036
   500  0000                     _ADRESL	set	4035
   501  0000                     _PIR1bits	set	3998
   502  0000                     _IPR1bits	set	3999
   503  0000                     _ADCON0bits	set	4034
   504  0000                     _T1CONbits	set	4045
   505  0000                     _PIE1bits	set	3997
   506  0000                     _RCONbits	set	4048
   507  0000                     _INTCONbits	set	4082
   508  0000                     _RCSTAbits	set	4011
   509  0000                     _RCSTA1bits	set	4011
   510  0000                     _LATD	set	3980
   511  0000                     _PORTDbits	set	3971
   512  0000                     _TMR2	set	4044
   513  0000                     _PORTEbits	set	3972
   514  0000                     _T0CONbits	set	4053
   515  0000                     _T2CONbits	set	4042
   516  0000                     _LATDbits	set	3980
   517  0000                     _LATCbits	set	3979
   518  0000                     _LATBbits	set	3978
   519  0000                     _LATAbits	set	3977
   520  0000                     _TRISDbits	set	3989
   521  0000                     _TRISEbits	set	3990
   522  0000                     _TRISD	set	3989
   523  0000                     _TRISC	set	3988
   524  0000                     _TRISB	set	3987
   525  0000                     _TRISA	set	3986
   526  0000                     _ADCON1bits	set	4033
   527  00060F  00                 	db	0	; dummy byte at the end
   528  0000                     
   529                           ; #config settings
   530                           
   531                           	psect	cinit
   532  00206C                     __pcinit:
   533                           	callstack 0
   534  00206C                     start_initialization:
   535                           	callstack 0
   536  00206C                     __initialization:
   537                           	callstack 0
   538                           
   539                           ; Initialize objects allocated to BANK1 (214 bytes)
   540                           ; load TBLPTR registers with __pidataBANK1
   541  00206C  0E10               	movlw	low __pidataBANK1
   542  00206E  6EF6               	movwf	tblptrl,c
   543  002070  0E1E               	movlw	high __pidataBANK1
   544  002072  6EF7               	movwf	tblptrh,c
   545  002074  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   546  002076  6EF8               	movwf	tblptru,c
   547  002078  EE01  F000         	lfsr	0,__pdataBANK1
   548  00207C  EE10 F0D6          	lfsr	1,214
   549  002080                     copy_data0:
   550  002080  0009               	tblrd		*+
   551  002082  CFF5 FFEE          	movff	tablat,postinc0
   552  002086  50E5               	movf	postdec1,w,c
   553  002088  50E1               	movf	fsr1l,w,c
   554  00208A  E1FA               	bnz	copy_data0
   555                           
   556                           ; Initialize objects allocated to BANK0 (91 bytes)
   557                           ; load TBLPTR registers with __pidataBANK0
   558  00208C  0E22               	movlw	low __pidataBANK0
   559  00208E  6EF6               	movwf	tblptrl,c
   560  002090  0E23               	movlw	high __pidataBANK0
   561  002092  6EF7               	movwf	tblptrh,c
   562  002094  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   563  002096  6EF8               	movwf	tblptru,c
   564  002098  EE00  F080         	lfsr	0,__pdataBANK0
   565  00209C  EE10 F05B          	lfsr	1,91
   566  0020A0                     copy_data1:
   567  0020A0  0009               	tblrd		*+
   568  0020A2  CFF5 FFEE          	movff	tablat,postinc0
   569  0020A6  50E5               	movf	postdec1,w,c
   570  0020A8  50E1               	movf	fsr1l,w,c
   571  0020AA  E1FA               	bnz	copy_data1
   572                           
   573                           ; Initialize objects allocated to COMRAM (5 bytes)
   574                           ; load TBLPTR registers with __pidataCOMRAM
   575  0020AC  0E86               	movlw	low __pidataCOMRAM
   576  0020AE  6EF6               	movwf	tblptrl,c
   577  0020B0  0E26               	movlw	high __pidataCOMRAM
   578  0020B2  6EF7               	movwf	tblptrh,c
   579  0020B4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   580  0020B6  6EF8               	movwf	tblptru,c
   581  0020B8  EE00  F069         	lfsr	0,__pdataCOMRAM
   582  0020BC  EE10 F005          	lfsr	1,5
   583  0020C0                     copy_data2:
   584  0020C0  0009               	tblrd		*+
   585  0020C2  CFF5 FFEE          	movff	tablat,postinc0
   586  0020C6  50E5               	movf	postdec1,w,c
   587  0020C8  50E1               	movf	fsr1l,w,c
   588  0020CA  E1FA               	bnz	copy_data2
   589                           
   590                           ; Clear objects allocated to BANK0 (28 bytes)
   591  0020CC  EE00  F0DB         	lfsr	0,__pbssBANK0
   592  0020D0  0E1C               	movlw	28
   593  0020D2                     clear_0:
   594  0020D2  6AEE               	clrf	postinc0,c
   595  0020D4  06E8               	decf	wreg,f,c
   596  0020D6  E1FD               	bnz	clear_0
   597                           
   598                           ; Clear objects allocated to COMRAM (36 bytes)
   599  0020D8  EE00  F045         	lfsr	0,__pbssCOMRAM
   600  0020DC  0E24               	movlw	36
   601  0020DE                     clear_1:
   602  0020DE  6AEE               	clrf	postinc0,c
   603  0020E0  06E8               	decf	wreg,f,c
   604  0020E2  E1FD               	bnz	clear_1
   605  0020E4                     end_of_initialization:
   606                           	callstack 0
   607  0020E4                     __end_of__initialization:
   608                           	callstack 0
   609  0020E4  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   610  0020E6  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   611  0020E8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   612  0020EA  6EF8               	movwf	tblptru,c
   613  0020EC  0100               	movlb	0
   614  0020EE  EF53  F00B         	goto	_main	;jump to C main() function
   615                           
   616                           	psect	bssCOMRAM
   617  000045                     __pbssCOMRAM:
   618                           	callstack 0
   619  000045                     storeData@receivedMex:
   620                           	callstack 0
   621  000045                     	ds	9
   622  00004E                     _posVector:
   623                           	callstack 0
   624  00004E                     	ds	3
   625  000051                     isr@single_cycle:
   626                           	callstack 0
   627  000051                     	ds	2
   628  000053                     _ADC_res:
   629                           	callstack 0
   630  000053                     	ds	2
   631  000055                     _pwmPeriod:
   632                           	callstack 0
   633  000055                     	ds	2
   634  000057                     _newFeeder:
   635                           	callstack 0
   636  000057                     	ds	2
   637  000059                     _rotAngle:
   638                           	callstack 0
   639  000059                     	ds	2
   640  00005B                     _tm0Error:
   641                           	callstack 0
   642  00005B                     	ds	2
   643  00005D                     	ds	1
   644  00005E                     storeData@counter:
   645                           	callstack 0
   646  00005E                     	ds	1
   647  00005F                     __newSequence:
   648                           	callstack 0
   649  00005F                     	ds	1
   650  000060                     __fatalError:
   651                           	callstack 0
   652  000060                     	ds	1
   653  000061                     _dataCounter:
   654                           	callstack 0
   655  000061                     	ds	1
   656  000062                     isr@completeStep:
   657                           	callstack 0
   658  000062                     	ds	1
   659  000063                     isr@tm0Count:
   660                           	callstack 0
   661  000063                     	ds	1
   662  000064                     _therm_rel:
   663                           	callstack 0
   664  000064                     	ds	1
   665  000065                     _touch_rel:
   666                           	callstack 0
   667  000065                     	ds	1
   668  000066                     _stepToggle:
   669                           	callstack 0
   670  000066                     	ds	1
   671  000067                     _pwmStep:
   672                           	callstack 0
   673  000067                     	ds	1
   674  000068                     _tm0Limit:
   675                           	callstack 0
   676  000068                     	ds	1
   677                           
   678                           	psect	dataCOMRAM
   679  000069                     __pdataCOMRAM:
   680                           	callstack 0
   681  000069                     	ds	2
   682  00006B                     	ds	2
   683  00006D                     storeData@mexLength:
   684                           	callstack 0
   685  00006D                     	ds	1
   686                           
   687                           	psect	bssBANK0
   688  0000DB                     __pbssBANK0:
   689                           	callstack 0
   690  0000DB                     _dataSequence:
   691                           	callstack 0
   692  0000DB                     	ds	20
   693  0000EF                     _newSequenceData:
   694                           	callstack 0
   695  0000EF                     	ds	8
   696                           
   697                           	psect	dataBANK0
   698  000080                     __pdataBANK0:
   699                           	callstack 0
   700  000080                     rotateObj@rotSequence:
   701                           	callstack 0
   702  000080                     	ds	4
   703  000084                     _errString_Bound:
   704                           	callstack 0
   705  000084                     	ds	33
   706  0000A5                     _errString_Feed:
   707                           	callstack 0
   708  0000A5                     	ds	30
   709  0000C3                     _errString_Command:
   710                           	callstack 0
   711  0000C3                     	ds	24
   712                           
   713                           	psect	dataBANK1
   714  000100                     __pdataBANK1:
   715                           	callstack 0
   716  000100                     _errString_PointZ:
   717                           	callstack 0
   718  000100                     	ds	53
   719  000135                     _errString_Point:
   720                           	callstack 0
   721  000135                     	ds	41
   722  00015E                     _errString_ZEND:
   723                           	callstack 0
   724  00015E                     	ds	41
   725  000187                     _errString_Reset:
   726                           	callstack 0
   727  000187                     	ds	40
   728  0001AF                     _errString_Fatal:
   729                           	callstack 0
   730  0001AF                     	ds	39
   731                           
   732                           	psect	cstackBANK1
   733  0001D6                     __pcstackBANK1:
   734                           	callstack 0
   735  0001D6                     executeData@errCode:
   736                           	callstack 0
   737                           
   738                           ; 1 bytes @ 0x0
   739  0001D6                     	ds	1
   740  0001D7                     executeData@data:
   741                           	callstack 0
   742                           
   743                           ; 2 bytes @ 0x1
   744  0001D7                     	ds	2
   745  0001D9                     ??_main:
   746                           
   747                           ; 1 bytes @ 0x3
   748  0001D9                     	ds	2
   749  0001DB                     main@errCode:
   750                           	callstack 0
   751                           
   752                           ; 1 bytes @ 0x5
   753  0001DB                     	ds	1
   754  0001DC                     main@newData:
   755                           	callstack 0
   756                           
   757                           ; 2 bytes @ 0x6
   758  0001DC                     	ds	2
   759                           
   760                           	psect	cstackBANK0
   761  0000F7                     __pcstackBANK0:
   762                           	callstack 0
   763  0000F7                     ??_rotateObj:
   764                           
   765                           ; 1 bytes @ 0x0
   766  0000F7                     	ds	3
   767  0000FA                     rotateObj@rotAngle:
   768                           	callstack 0
   769                           
   770                           ; 1 bytes @ 0x3
   771  0000FA                     	ds	1
   772  0000FB                     rotateObj@totStep:
   773                           	callstack 0
   774                           
   775                           ; 2 bytes @ 0x4
   776  0000FB                     	ds	2
   777  0000FD                     rotateObj@i:
   778                           	callstack 0
   779                           
   780                           ; 2 bytes @ 0x6
   781  0000FD                     	ds	2
   782                           
   783                           	psect	cstackCOMRAM
   784  000001                     __pcstackCOMRAM:
   785                           	callstack 0
   786  000001                     ?_retPeriod:
   787                           	callstack 0
   788  000001                     i2enableMotor@motor:
   789                           	callstack 0
   790  000001                     i2uartTx@ptr:
   791                           	callstack 0
   792                           
   793                           ; 2 bytes @ 0x0
   794  000001                     	ds	1
   795  000002                     ??i2_enableMotor:
   796                           
   797                           ; 1 bytes @ 0x1
   798  000002                     	ds	1
   799  000003                     i2uartTx@length:
   800                           	callstack 0
   801                           
   802                           ; 1 bytes @ 0x2
   803  000003                     	ds	1
   804  000004                     i2enableMotor@enable:
   805                           	callstack 0
   806  000004                     i2uartTx@i:
   807                           	callstack 0
   808                           
   809                           ; 1 bytes @ 0x3
   810  000004                     	ds	1
   811  000005                     ??i2_printError:
   812                           
   813                           ; 1 bytes @ 0x4
   814  000005                     	ds	2
   815  000007                     i2printError@errCode:
   816                           	callstack 0
   817                           
   818                           ; 1 bytes @ 0x6
   819  000007                     	ds	1
   820  000008                     ??i2_storeData:
   821                           
   822                           ; 1 bytes @ 0x7
   823  000008                     	ds	2
   824  00000A                     i2storeData@data:
   825                           	callstack 0
   826                           
   827                           ; 1 bytes @ 0x9
   828  00000A                     	ds	1
   829  00000B                     ??_isr:
   830                           
   831                           ; 1 bytes @ 0xA
   832  00000B                     	ds	6
   833  000011                     isr@temp:
   834                           	callstack 0
   835                           
   836                           ; 1 bytes @ 0x10
   837  000011                     	ds	1
   838  000012                     ??_shiftData:
   839  000012                     ?_stepMade:
   840                           	callstack 0
   841  000012                     ?_stepCounter:
   842                           	callstack 0
   843  000012                     ?_returnTouch:
   844                           	callstack 0
   845  000012                     ?_returnTherm:
   846                           	callstack 0
   847  000012                     ?_getNewSequence:
   848                           	callstack 0
   849  000012                     ?_getData:
   850                           	callstack 0
   851  000012                     ?___xxtofl:
   852                           	callstack 0
   853  000012                     setStep@motor:
   854                           	callstack 0
   855  000012                     enableMotor@motor:
   856                           	callstack 0
   857  000012                     setDirection@motor:
   858                           	callstack 0
   859  000012                     setDecay@motor:
   860                           	callstack 0
   861  000012                     tim2Init@_pwmPeriod:
   862                           	callstack 0
   863  000012                     uartTx@ptr:
   864                           	callstack 0
   865  000012                     ___xxtofl@val:
   866                           	callstack 0
   867                           
   868                           ; 4 bytes @ 0x11
   869  000012                     	ds	1
   870  000013                     ??_setStep:
   871  000013                     ??_enableMotor:
   872  000013                     ??_setDirection:
   873  000013                     ??_setDecay:
   874                           
   875                           ; 1 bytes @ 0x12
   876  000013                     	ds	1
   877  000014                     stepMade@temp:
   878                           	callstack 0
   879  000014                     shiftData@i:
   880                           	callstack 0
   881  000014                     uartTx@length:
   882                           	callstack 0
   883                           
   884                           ; 1 bytes @ 0x13
   885  000014                     	ds	1
   886  000015                     setStep@step:
   887                           	callstack 0
   888  000015                     enableMotor@enable:
   889                           	callstack 0
   890  000015                     setDirection@direction:
   891                           	callstack 0
   892  000015                     setDecay@decay:
   893                           	callstack 0
   894  000015                     uartTx@i:
   895                           	callstack 0
   896                           
   897                           ; 1 bytes @ 0x14
   898  000015                     	ds	1
   899  000016                     ??_printError:
   900  000016                     ??___xxtofl:
   901  000016                     resetPosition@keepMovingX:
   902                           	callstack 0
   903  000016                     moveToPoint@x1:
   904                           	callstack 0
   905                           
   906                           ; 2 bytes @ 0x15
   907  000016                     	ds	1
   908  000017                     resetPosition@keepMovingY:
   909                           	callstack 0
   910                           
   911                           ; 1 bytes @ 0x16
   912  000017                     	ds	1
   913  000018                     resetPosition@keepMovingZ:
   914                           	callstack 0
   915  000018                     printError@errCode:
   916                           	callstack 0
   917  000018                     moveToPoint@y1:
   918                           	callstack 0
   919                           
   920                           ; 2 bytes @ 0x17
   921  000018                     	ds	1
   922  000019                     ??_storeData:
   923                           
   924                           ; 1 bytes @ 0x18
   925  000019                     	ds	1
   926  00001A                     ___xxtofl@sign:
   927                           	callstack 0
   928  00001A                     moveToPoint@x2:
   929                           	callstack 0
   930                           
   931                           ; 2 bytes @ 0x19
   932  00001A                     	ds	1
   933  00001B                     storeData@data:
   934                           	callstack 0
   935  00001B                     ___xxtofl@exp:
   936                           	callstack 0
   937                           
   938                           ; 1 bytes @ 0x1A
   939  00001B                     	ds	1
   940  00001C                     moveToPoint@y2:
   941                           	callstack 0
   942  00001C                     ___xxtofl@arg:
   943                           	callstack 0
   944                           
   945                           ; 4 bytes @ 0x1B
   946  00001C                     	ds	2
   947  00001E                     ??_moveToPoint:
   948                           
   949                           ; 1 bytes @ 0x1D
   950  00001E                     	ds	2
   951  000020                     ?___fldiv:
   952                           	callstack 0
   953  000020                     moveToPoint@keepMovingY:
   954                           	callstack 0
   955  000020                     ___fldiv@b:
   956                           	callstack 0
   957                           
   958                           ; 4 bytes @ 0x1F
   959  000020                     	ds	1
   960  000021                     moveToPoint@MOT1Direction:
   961                           	callstack 0
   962                           
   963                           ; 1 bytes @ 0x20
   964  000021                     	ds	1
   965  000022                     moveToPoint@MOT2Direction:
   966                           	callstack 0
   967                           
   968                           ; 1 bytes @ 0x21
   969  000022                     	ds	1
   970  000023                     moveToPoint@keepMovingX:
   971                           	callstack 0
   972                           
   973                           ; 1 bytes @ 0x22
   974  000023                     	ds	1
   975  000024                     ___fldiv@a:
   976                           	callstack 0
   977                           
   978                           ; 4 bytes @ 0x23
   979  000024                     	ds	4
   980  000028                     ??___fldiv:
   981                           
   982                           ; 1 bytes @ 0x27
   983  000028                     	ds	4
   984  00002C                     ___fldiv@rem:
   985                           	callstack 0
   986                           
   987                           ; 4 bytes @ 0x2B
   988  00002C                     	ds	4
   989  000030                     ___fldiv@sign:
   990                           	callstack 0
   991                           
   992                           ; 1 bytes @ 0x2F
   993  000030                     	ds	1
   994  000031                     ___fldiv@new_exp:
   995                           	callstack 0
   996                           
   997                           ; 2 bytes @ 0x30
   998  000031                     	ds	2
   999  000033                     ___fldiv@grs:
  1000                           	callstack 0
  1001                           
  1002                           ; 4 bytes @ 0x32
  1003  000033                     	ds	4
  1004  000037                     ___fldiv@bexp:
  1005                           	callstack 0
  1006                           
  1007                           ; 1 bytes @ 0x36
  1008  000037                     	ds	1
  1009  000038                     ___fldiv@aexp:
  1010                           	callstack 0
  1011                           
  1012                           ; 1 bytes @ 0x37
  1013  000038                     	ds	1
  1014  000039                     ?___fltol:
  1015                           	callstack 0
  1016  000039                     ___fltol@f1:
  1017                           	callstack 0
  1018                           
  1019                           ; 4 bytes @ 0x38
  1020  000039                     	ds	4
  1021  00003D                     ??___fltol:
  1022                           
  1023                           ; 1 bytes @ 0x3C
  1024  00003D                     	ds	4
  1025  000041                     ___fltol@sign1:
  1026                           	callstack 0
  1027                           
  1028                           ; 1 bytes @ 0x40
  1029  000041                     	ds	1
  1030  000042                     ___fltol@exp1:
  1031                           	callstack 0
  1032                           
  1033                           ; 1 bytes @ 0x41
  1034  000042                     	ds	1
  1035  000043                     ??_executeData:
  1036                           
  1037                           ; 1 bytes @ 0x42
  1038  000043                     	ds	2
  1039                           
  1040 ;;
  1041 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1042 ;;
  1043 ;; *************** function _main *****************
  1044 ;; Defined at:
  1045 ;;		line 17 in file "main.c"
  1046 ;; Parameters:    Size  Location     Type
  1047 ;;		None
  1048 ;; Auto vars:     Size  Location     Type
  1049 ;;  newData         2    6[BANK1 ] PTR struct .
  1050 ;;		 -> newSequenceData(8), 
  1051 ;;  errCode         1    5[BANK1 ] unsigned char 
  1052 ;; Return value:  Size  Location     Type
  1053 ;;                  1    wreg      void 
  1054 ;; Registers used:
  1055 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 0/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1061 ;;      Params:         0       0       0       0       0       0       0
  1062 ;;      Locals:         0       0       3       0       0       0       0
  1063 ;;      Temps:          0       0       2       0       0       0       0
  1064 ;;      Totals:         0       0       5       0       0       0       0
  1065 ;;Total ram usage:        5 bytes
  1066 ;; Hardware stack levels required when called:    7
  1067 ;; This function calls:
  1068 ;;		_clearTM0
  1069 ;;		_executeData
  1070 ;;		_getNewSequence
  1071 ;;		_initADC
  1072 ;;		_initPinMotors
  1073 ;;		_interruptInit
  1074 ;;		_newSequence
  1075 ;;		_printError
  1076 ;;		_readSeq
  1077 ;;		_reduceSeq
  1078 ;;		_resetNewSequence
  1079 ;;		_resetPosition
  1080 ;;		_shiftData
  1081 ;;		_storeData
  1082 ;;		_tim0Init
  1083 ;;		_tim1Init
  1084 ;;		_tim2Init
  1085 ;;		_usartInit
  1086 ;; This function is called by:
  1087 ;;		Startup code after reset
  1088 ;; This function uses a non-reentrant model
  1089 ;;
  1090                           
  1091                           	psect	text0
  1092  0016A6                     __ptext0:
  1093                           	callstack 0
  1094  0016A6                     _main:
  1095                           	callstack 24
  1096  0016A6  FFFF               	dw	65535	; assembler added errata NOP
  1097                           
  1098                           ;main.c: 21:     interruptInit();
  1099  0016A8  EC0D  F012         	call	_interruptInit	;wreg free
  1100  0016AC                     
  1101                           ;main.c: 22:     initPinMotors();
  1102  0016AC  EC6E  F012         	call	_initPinMotors	;wreg free
  1103  0016B0                     
  1104                           ;main.c: 23:     initADC();
  1105  0016B0  EC81  F012         	call	_initADC	;wreg free
  1106  0016B4                     
  1107                           ;main.c: 24:     usartInit();
  1108  0016B4  EC94  F012         	call	_usartInit	;wreg free
  1109  0016B8                     
  1110                           ;main.c: 25:     tim0Init();
  1111  0016B8  ECB9  F012         	call	_tim0Init	;wreg free
  1112  0016BC                     
  1113                           ;main.c: 26:     tim1Init();
  1114  0016BC  ECC2  F012         	call	_tim1Init	;wreg free
  1115  0016C0                     
  1116                           ;main.c: 27:     tim2Init(10);
  1117  0016C0  0E00               	movlw	0
  1118  0016C2  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1119  0016C4  0E0A               	movlw	10
  1120  0016C6  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1121  0016C8  ECA3  F012         	call	_tim2Init	;wreg free
  1122                           
  1123                           ;main.c: 30:     errCode = resetPosition();
  1124  0016CC  ECF7  F008         	call	_resetPosition	;wreg free
  1125  0016D0  0101               	movlb	1	; () banked
  1126  0016D2  6FDB               	movwf	main@errCode& (0+255),b
  1127  0016D4                     
  1128                           ; BSR set to: 1
  1129                           ;main.c: 31:     if(errCode != 0){
  1130  0016D4  51DB               	movf	main@errCode& (0+255),w,b
  1131  0016D6  B4D8               	btfsc	status,2,c
  1132  0016D8  EF70  F00B         	goto	u3731
  1133  0016DC  EF73  F00B         	goto	u3730
  1134  0016E0                     u3731:
  1135  0016E0  FFFF               	dw	65535	; assembler added errata NOP
  1136  0016E2  EF7A  F00B         	goto	l326
  1137  0016E6                     u3730:
  1138  0016E6  FFFF               	dw	65535	; assembler added errata NOP
  1139  0016E8                     
  1140                           ; BSR set to: 1
  1141                           ;main.c: 32:         printError(errCode);
  1142  0016E8  51DB               	movf	main@errCode& (0+255),w,b
  1143  0016EA  EC8C  F00C         	call	_printError
  1144  0016EE                     l327:
  1145  0016EE  FFFF               	dw	65535	; assembler added errata NOP
  1146  0016F0  EF77  F00B         	goto	l327
  1147  0016F4                     l326:
  1148  0016F4  FFFF               	dw	65535	; assembler added errata NOP
  1149                           
  1150                           ; BSR set to: 1
  1151                           ;main.c: 37:     RCSTA1bits.CREN = 1;
  1152  0016F6  88AB               	bsf	171,4,c	;volatile
  1153  0016F8                     l4373:
  1154  0016F8  FFFF               	dw	65535	; assembler added errata NOP
  1155                           
  1156                           ;main.c: 40:         if(newSequence()){
  1157  0016FA  EC2F  F013         	call	_newSequence	;wreg free
  1158  0016FE  0900               	iorlw	0
  1159  001700  B4D8               	btfsc	status,2,c
  1160  001702  EF85  F00B         	goto	u3741
  1161  001706  EF88  F00B         	goto	u3740
  1162  00170A                     u3741:
  1163  00170A  FFFF               	dw	65535	; assembler added errata NOP
  1164  00170C  EFD3  F00B         	goto	l4397
  1165  001710                     u3740:
  1166  001710  FFFF               	dw	65535	; assembler added errata NOP
  1167  001712                     
  1168                           ;main.c: 41:             t_newSequence* newData = getNewSequence();
  1169  001712  ECCA  F012         	call	_getNewSequence	;wreg free
  1170  001716  C012  F1DC         	movff	?_getNewSequence,main@newData
  1171  00171A  C013  F1DD         	movff	?_getNewSequence+1,main@newData+1
  1172  00171E                     
  1173                           ;main.c: 43:             newFeeder[0] = newData ->init_posX;
  1174  00171E  0101               	movlb	1	; () banked
  1175  001720  EE20 F002          	lfsr	2,2
  1176  001724  51DC               	movf	main@newData& (0+255),w,b
  1177  001726  26D9               	addwf	fsr2l,f,c
  1178  001728  51DD               	movf	(main@newData+1)& (0+255),w,b
  1179  00172A  22DA               	addwfc	fsr2h,f,c
  1180  00172C  50DF               	movf	indf2,w,c
  1181  00172E  6E57               	movwf	_newFeeder^0,c
  1182  001730                     
  1183                           ; BSR set to: 1
  1184                           ;main.c: 44:             newFeeder[1] = newData ->init_posY;
  1185  001730  EE20 F003          	lfsr	2,3
  1186  001734  51DC               	movf	main@newData& (0+255),w,b
  1187  001736  26D9               	addwf	fsr2l,f,c
  1188  001738  51DD               	movf	(main@newData+1)& (0+255),w,b
  1189  00173A  22DA               	addwfc	fsr2h,f,c
  1190  00173C  50DF               	movf	indf2,w,c
  1191  00173E  6E58               	movwf	(_newFeeder+1)^0,c
  1192  001740                     
  1193                           ; BSR set to: 1
  1194                           ;main.c: 48:             RCSTAbits.CREN = 0;
  1195  001740  98AB               	bcf	171,4,c	;volatile
  1196  001742                     
  1197                           ; BSR set to: 1
  1198                           ;main.c: 51:             storeData(0);
  1199  001742  0E00               	movlw	0
  1200  001744  ECF1  F009         	call	_storeData
  1201  001748                     
  1202                           ;main.c: 52:             storeData(0xFF);
  1203  001748  0EFF               	movlw	255
  1204  00174A  ECF1  F009         	call	_storeData
  1205  00174E                     
  1206                           ;main.c: 53:             storeData(newData ->end_posX);
  1207  00174E  0101               	movlb	1	; () banked
  1208  001750  EE20 F005          	lfsr	2,5
  1209  001754  51DC               	movf	main@newData& (0+255),w,b
  1210  001756  26D9               	addwf	fsr2l,f,c
  1211  001758  51DD               	movf	(main@newData+1)& (0+255),w,b
  1212  00175A  22DA               	addwfc	fsr2h,f,c
  1213  00175C  50DF               	movf	indf2,w,c
  1214  00175E  ECF1  F009         	call	_storeData
  1215  001762                     
  1216                           ;main.c: 54:             storeData(newData ->end_posY);
  1217  001762  0101               	movlb	1	; () banked
  1218  001764  EE20 F006          	lfsr	2,6
  1219  001768  51DC               	movf	main@newData& (0+255),w,b
  1220  00176A  26D9               	addwf	fsr2l,f,c
  1221  00176C  51DD               	movf	(main@newData+1)& (0+255),w,b
  1222  00176E  22DA               	addwfc	fsr2h,f,c
  1223  001770  50DF               	movf	indf2,w,c
  1224  001772  ECF1  F009         	call	_storeData
  1225  001776                     
  1226                           ;main.c: 55:             storeData(newData ->end_rot - newData ->init_rot);
  1227  001776  0101               	movlb	1	; () banked
  1228  001778  EE20 F004          	lfsr	2,4
  1229  00177C  51DC               	movf	main@newData& (0+255),w,b
  1230  00177E  26D9               	addwf	fsr2l,f,c
  1231  001780  51DD               	movf	(main@newData+1)& (0+255),w,b
  1232  001782  22DA               	addwfc	fsr2h,f,c
  1233  001784  50DF               	movf	indf2,w,c
  1234  001786  6FD9               	movwf	??_main& (0+255),b
  1235  001788  EE20 F007          	lfsr	2,7
  1236  00178C  51DC               	movf	main@newData& (0+255),w,b
  1237  00178E  26D9               	addwf	fsr2l,f,c
  1238  001790  51DD               	movf	(main@newData+1)& (0+255),w,b
  1239  001792  22DA               	addwfc	fsr2h,f,c
  1240  001794  50DF               	movf	indf2,w,c
  1241  001796  6FDA               	movwf	(??_main+1)& (0+255),b
  1242  001798  51D9               	movf	??_main& (0+255),w,b
  1243  00179A  5DDA               	subwf	(??_main+1)& (0+255),w,b
  1244  00179C  ECF1  F009         	call	_storeData
  1245  0017A0                     
  1246                           ;main.c: 58:             RCSTAbits.CREN = 1;
  1247  0017A0  88AB               	bsf	171,4,c	;volatile
  1248  0017A2                     
  1249                           ;main.c: 61:             resetNewSequence();
  1250  0017A2  ECFF  F012         	call	_resetNewSequence	;wreg free
  1251  0017A6                     l4397:
  1252  0017A6  FFFF               	dw	65535	; assembler added errata NOP
  1253                           
  1254                           ;main.c: 73:         if(readSeq()){
  1255  0017A8  EC2B  F013         	call	_readSeq	;wreg free
  1256  0017AC  0900               	iorlw	0
  1257  0017AE  B4D8               	btfsc	status,2,c
  1258  0017B0  EFDC  F00B         	goto	u3751
  1259  0017B4  EFDF  F00B         	goto	u3750
  1260  0017B8                     u3751:
  1261  0017B8  FFFF               	dw	65535	; assembler added errata NOP
  1262  0017BA  EF7C  F00B         	goto	l4373
  1263  0017BE                     u3750:
  1264  0017BE  FFFF               	dw	65535	; assembler added errata NOP
  1265  0017C0                     
  1266                           ;main.c: 76:             errCode = executeData();
  1267  0017C0  ECB4  F006         	call	_executeData	;wreg free
  1268  0017C4  0101               	movlb	1	; () banked
  1269  0017C6  6FDB               	movwf	main@errCode& (0+255),b
  1270  0017C8                     
  1271                           ; BSR set to: 1
  1272                           ;main.c: 77:             printError(errCode);
  1273  0017C8  51DB               	movf	main@errCode& (0+255),w,b
  1274  0017CA  EC8C  F00C         	call	_printError
  1275  0017CE                     
  1276                           ;main.c: 78:             clearTM0();
  1277  0017CE  ECD8  F012         	call	_clearTM0	;wreg free
  1278  0017D2                     
  1279                           ;main.c: 82:             reduceSeq();
  1280  0017D2  EC27  F013         	call	_reduceSeq	;wreg free
  1281  0017D6                     
  1282                           ;main.c: 83:             shiftData();
  1283  0017D6  EC61  F011         	call	_shiftData	;wreg free
  1284  0017DA  EF7C  F00B         	goto	l4373
  1285  0017DE  EFCE  F000         	goto	start
  1286  0017E2                     __end_of_main:
  1287                           	callstack 0
  1288                           
  1289 ;; *************** function _usartInit *****************
  1290 ;; Defined at:
  1291 ;;		line 34 in file "usart.c"
  1292 ;; Parameters:    Size  Location     Type
  1293 ;;		None
  1294 ;; Auto vars:     Size  Location     Type
  1295 ;;		None
  1296 ;; Return value:  Size  Location     Type
  1297 ;;                  1    wreg      void 
  1298 ;; Registers used:
  1299 ;;		wreg, status,2
  1300 ;; Tracked objects:
  1301 ;;		On entry : 0/0
  1302 ;;		On exit  : 0/0
  1303 ;;		Unchanged: 0/0
  1304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1305 ;;      Params:         0       0       0       0       0       0       0
  1306 ;;      Locals:         0       0       0       0       0       0       0
  1307 ;;      Temps:          0       0       0       0       0       0       0
  1308 ;;      Totals:         0       0       0       0       0       0       0
  1309 ;;Total ram usage:        0 bytes
  1310 ;; Hardware stack levels used:    1
  1311 ;; Hardware stack levels required when called:    4
  1312 ;; This function calls:
  1313 ;;		Nothing
  1314 ;; This function is called by:
  1315 ;;		_main
  1316 ;; This function uses a non-reentrant model
  1317 ;;
  1318                           
  1319                           	psect	text1
  1320  002528                     __ptext1:
  1321                           	callstack 0
  1322  002528                     _usartInit:
  1323                           	callstack 0
  1324  002528  FFFF               	dw	65535	; assembler added errata NOP
  1325  00252A                     
  1326                           ;usart.c: 36:     TRISCbits.TRISC6 = 0;
  1327  00252A  9C94               	bcf	148,6,c	;volatile
  1328                           
  1329                           ;usart.c: 37:     TRISCbits.TRISC7 = 1;
  1330  00252C  8E94               	bsf	148,7,c	;volatile
  1331                           
  1332                           ;usart.c: 39:     TXSTAbits.TX9 = 0;
  1333  00252E  9CAC               	bcf	172,6,c	;volatile
  1334                           
  1335                           ;usart.c: 40:     TXSTAbits.TXEN = 1;
  1336  002530  8AAC               	bsf	172,5,c	;volatile
  1337                           
  1338                           ;usart.c: 41:     TXSTAbits.SYNC = 0;
  1339  002532  98AC               	bcf	172,4,c	;volatile
  1340                           
  1341                           ;usart.c: 42:     TXSTAbits.BRGH = 0;
  1342  002534  94AC               	bcf	172,2,c	;volatile
  1343                           
  1344                           ;usart.c: 44:     RCSTAbits.SPEN = 1;
  1345  002536  8EAB               	bsf	171,7,c	;volatile
  1346                           
  1347                           ;usart.c: 45:     RCSTAbits.RX9 = 0;
  1348  002538  9CAB               	bcf	171,6,c	;volatile
  1349                           
  1350                           ;usart.c: 46:     RCSTAbits.CREN = 0;
  1351  00253A  98AB               	bcf	171,4,c	;volatile
  1352                           
  1353                           ;usart.c: 47:     RCSTAbits.ADDEN = 0;
  1354  00253C  96AB               	bcf	171,3,c	;volatile
  1355  00253E                     
  1356                           ;usart.c: 50:     SPBRG = 25;
  1357  00253E  0E19               	movlw	25
  1358  002540  6EAF               	movwf	175,c	;volatile
  1359  002542  0012               	return		;funcret
  1360  002544  FFFF               	dw	65535	; errata NOP
  1361  002546                     __end_of_usartInit:
  1362                           	callstack 0
  1363                           
  1364 ;; *************** function _tim2Init *****************
  1365 ;; Defined at:
  1366 ;;		line 48 in file "pwm.c"
  1367 ;; Parameters:    Size  Location     Type
  1368 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1369 ;; Auto vars:     Size  Location     Type
  1370 ;;		None
  1371 ;; Return value:  Size  Location     Type
  1372 ;;                  1    wreg      void 
  1373 ;; Registers used:
  1374 ;;		wreg, status,2
  1375 ;; Tracked objects:
  1376 ;;		On entry : 0/0
  1377 ;;		On exit  : 0/0
  1378 ;;		Unchanged: 0/0
  1379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1380 ;;      Params:         2       0       0       0       0       0       0
  1381 ;;      Locals:         0       0       0       0       0       0       0
  1382 ;;      Temps:          0       0       0       0       0       0       0
  1383 ;;      Totals:         2       0       0       0       0       0       0
  1384 ;;Total ram usage:        2 bytes
  1385 ;; Hardware stack levels used:    1
  1386 ;; Hardware stack levels required when called:    4
  1387 ;; This function calls:
  1388 ;;		Nothing
  1389 ;; This function is called by:
  1390 ;;		_main
  1391 ;; This function uses a non-reentrant model
  1392 ;;
  1393                           
  1394                           	psect	text2
  1395  002546                     __ptext2:
  1396                           	callstack 0
  1397  002546                     _tim2Init:
  1398                           	callstack 0
  1399  002546  FFFF               	dw	65535	; assembler added errata NOP
  1400  002548                     
  1401                           ;pwm.c: 49:     T2CONbits.TMR2ON = 0;
  1402  002548  94CA               	bcf	202,2,c	;volatile
  1403  00254A                     
  1404                           ;pwm.c: 50:     T2CONbits.T2CKPS = 0x01;
  1405  00254A  50CA               	movf	202,w,c	;volatile
  1406  00254C  0BFC               	andlw	-4
  1407  00254E  0901               	iorlw	1
  1408  002550  6ECA               	movwf	202,c	;volatile
  1409  002552                     
  1410                           ;pwm.c: 53:     pwmPeriod = _pwmPeriod;
  1411  002552  C012  F055         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1412  002556  C013  F056         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1413  00255A  0012               	return		;funcret
  1414  00255C  FFFF               	dw	65535	; errata NOP
  1415  00255E                     __end_of_tim2Init:
  1416                           	callstack 0
  1417                           
  1418 ;; *************** function _tim1Init *****************
  1419 ;; Defined at:
  1420 ;;		line 33 in file "pwm.c"
  1421 ;; Parameters:    Size  Location     Type
  1422 ;;		None
  1423 ;; Auto vars:     Size  Location     Type
  1424 ;;		None
  1425 ;; Return value:  Size  Location     Type
  1426 ;;                  1    wreg      void 
  1427 ;; Registers used:
  1428 ;;		wreg, status,2
  1429 ;; Tracked objects:
  1430 ;;		On entry : 0/0
  1431 ;;		On exit  : 0/0
  1432 ;;		Unchanged: 0/0
  1433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1434 ;;      Params:         0       0       0       0       0       0       0
  1435 ;;      Locals:         0       0       0       0       0       0       0
  1436 ;;      Temps:          0       0       0       0       0       0       0
  1437 ;;      Totals:         0       0       0       0       0       0       0
  1438 ;;Total ram usage:        0 bytes
  1439 ;; Hardware stack levels used:    1
  1440 ;; Hardware stack levels required when called:    4
  1441 ;; This function calls:
  1442 ;;		Nothing
  1443 ;; This function is called by:
  1444 ;;		_main
  1445 ;; This function uses a non-reentrant model
  1446 ;;
  1447                           
  1448                           	psect	text3
  1449  002584                     __ptext3:
  1450                           	callstack 0
  1451  002584                     _tim1Init:
  1452                           	callstack 0
  1453  002584  FFFF               	dw	65535	; assembler added errata NOP
  1454  002586                     
  1455                           ;pwm.c: 34:     T1CONbits.T1CKPS = 0x03;
  1456  002586  0E30               	movlw	48
  1457  002588  12CD               	iorwf	205,f,c	;volatile
  1458  00258A                     
  1459                           ;pwm.c: 35:     T1CONbits.TMR1CS = 0;
  1460  00258A  92CD               	bcf	205,1,c	;volatile
  1461  00258C                     
  1462                           ;pwm.c: 37:     PIE1bits.TMR1IE = 1;
  1463  00258C  809D               	bsf	157,0,c	;volatile
  1464  00258E                     
  1465                           ;pwm.c: 39:     T1CONbits.TMR1ON = 1;
  1466  00258E  80CD               	bsf	205,0,c	;volatile
  1467  002590  0012               	return		;funcret
  1468  002592  FFFF               	dw	65535	; errata NOP
  1469  002594                     __end_of_tim1Init:
  1470                           	callstack 0
  1471                           
  1472 ;; *************** function _tim0Init *****************
  1473 ;; Defined at:
  1474 ;;		line 21 in file "pwm.c"
  1475 ;; Parameters:    Size  Location     Type
  1476 ;;		None
  1477 ;; Auto vars:     Size  Location     Type
  1478 ;;		None
  1479 ;; Return value:  Size  Location     Type
  1480 ;;                  1    wreg      void 
  1481 ;; Registers used:
  1482 ;;		wreg, status,2
  1483 ;; Tracked objects:
  1484 ;;		On entry : 0/0
  1485 ;;		On exit  : 0/0
  1486 ;;		Unchanged: 0/0
  1487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1488 ;;      Params:         0       0       0       0       0       0       0
  1489 ;;      Locals:         0       0       0       0       0       0       0
  1490 ;;      Temps:          0       0       0       0       0       0       0
  1491 ;;      Totals:         0       0       0       0       0       0       0
  1492 ;;Total ram usage:        0 bytes
  1493 ;; Hardware stack levels used:    1
  1494 ;; Hardware stack levels required when called:    4
  1495 ;; This function calls:
  1496 ;;		Nothing
  1497 ;; This function is called by:
  1498 ;;		_main
  1499 ;; This function uses a non-reentrant model
  1500 ;;
  1501                           
  1502                           	psect	text4
  1503  002572                     __ptext4:
  1504                           	callstack 0
  1505  002572                     _tim0Init:
  1506                           	callstack 0
  1507  002572  FFFF               	dw	65535	; assembler added errata NOP
  1508  002574                     
  1509                           ;pwm.c: 22:     T0CONbits.TMR0ON = 0;
  1510  002574  9ED5               	bcf	213,7,c	;volatile
  1511                           
  1512                           ;pwm.c: 23:     T0CONbits.T08BIT = 0;
  1513  002576  9CD5               	bcf	213,6,c	;volatile
  1514                           
  1515                           ;pwm.c: 24:     T0CONbits.T0CS = 0;
  1516  002578  9AD5               	bcf	213,5,c	;volatile
  1517                           
  1518                           ;pwm.c: 25:     T0CONbits.PSA = 1;
  1519  00257A  86D5               	bsf	213,3,c	;volatile
  1520  00257C                     
  1521                           ;pwm.c: 26:     T0CONbits.T0PS = 0x07;
  1522  00257C  0E07               	movlw	7
  1523  00257E  12D5               	iorwf	213,f,c	;volatile
  1524  002580  0012               	return		;funcret
  1525  002582  FFFF               	dw	65535	; errata NOP
  1526  002584                     __end_of_tim0Init:
  1527                           	callstack 0
  1528                           
  1529 ;; *************** function _storeData *****************
  1530 ;; Defined at:
  1531 ;;		line 131 in file "usart.c"
  1532 ;; Parameters:    Size  Location     Type
  1533 ;;  data            1    wreg     unsigned char 
  1534 ;; Auto vars:     Size  Location     Type
  1535 ;;  data            1   26[COMRAM] unsigned char 
  1536 ;; Return value:  Size  Location     Type
  1537 ;;                  1    wreg      void 
  1538 ;; Registers used:
  1539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1540 ;; Tracked objects:
  1541 ;;		On entry : 0/0
  1542 ;;		On exit  : 0/0
  1543 ;;		Unchanged: 0/0
  1544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1545 ;;      Params:         0       0       0       0       0       0       0
  1546 ;;      Locals:         1       0       0       0       0       0       0
  1547 ;;      Temps:          2       0       0       0       0       0       0
  1548 ;;      Totals:         3       0       0       0       0       0       0
  1549 ;;Total ram usage:        3 bytes
  1550 ;; Hardware stack levels used:    1
  1551 ;; Hardware stack levels required when called:    6
  1552 ;; This function calls:
  1553 ;;		_printError
  1554 ;; This function is called by:
  1555 ;;		_main
  1556 ;; This function uses a non-reentrant model
  1557 ;;
  1558                           
  1559                           	psect	text5
  1560  0013E2                     __ptext5:
  1561                           	callstack 0
  1562  0013E2                     _storeData:
  1563                           	callstack 0
  1564  0013E2  FFFF               	dw	65535	; assembler added errata NOP
  1565                           
  1566                           ;incstack = 0
  1567                           ;storeData@data stored from wreg
  1568  0013E4  6E1B               	movwf	storeData@data^0,c
  1569  0013E6                     
  1570                           ;usart.c: 133:     static unsigned char counter = 0;;usart.c: 134:     static unsigned c
      +                          har mexLength = 5;;usart.c: 135:     static unsigned char command;;usart.c: 136:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 140:     receivedMex[counter] = data;
  1571  0013E6  0E45               	movlw	low storeData@receivedMex
  1572  0013E8  245E               	addwf	storeData@counter^0,w,c
  1573  0013EA  6ED9               	movwf	fsr2l,c
  1574  0013EC  6ADA               	clrf	fsr2h,c
  1575  0013EE  0E00               	movlw	high storeData@receivedMex
  1576  0013F0  22DA               	addwfc	fsr2h,f,c
  1577  0013F2  C01B  FFDF         	movff	storeData@data,indf2
  1578  0013F6                     
  1579                           ;usart.c: 142:     counter++;
  1580  0013F6  2A5E               	incf	storeData@counter^0,f,c
  1581                           
  1582                           ;usart.c: 145:     switch(receivedMex[0]){
  1583  0013F8  EF0D  F00A         	goto	l4241
  1584  0013FC                     l4233:
  1585  0013FC  FFFF               	dw	65535	; assembler added errata NOP
  1586                           
  1587                           ;usart.c: 147:             mexLength = 5;
  1588  0013FE  0E05               	movlw	5
  1589  001400  6E6D               	movwf	storeData@mexLength^0,c
  1590                           
  1591                           ;usart.c: 148:             break;
  1592  001402  EF28  F00A         	goto	l4243
  1593  001406                     l4235:
  1594  001406  FFFF               	dw	65535	; assembler added errata NOP
  1595                           
  1596                           ;usart.c: 150:             mexLength = 9;
  1597  001408  0E09               	movlw	9
  1598  00140A  6E6D               	movwf	storeData@mexLength^0,c
  1599                           
  1600                           ;usart.c: 151:             break;
  1601  00140C  EF28  F00A         	goto	l4243
  1602  001410                     l4237:
  1603  001410  FFFF               	dw	65535	; assembler added errata NOP
  1604                           
  1605                           ;usart.c: 153:             mexLength = 1;
  1606  001412  0E01               	movlw	1
  1607  001414  6E6D               	movwf	storeData@mexLength^0,c
  1608                           
  1609                           ;usart.c: 154:             break;
  1610  001416  EF28  F00A         	goto	l4243
  1611  00141A                     l4241:
  1612  00141A  FFFF               	dw	65535	; assembler added errata NOP
  1613  00141C  5045               	movf	storeData@receivedMex^0,w,c
  1614  00141E  6E19               	movwf	??_storeData^0,c
  1615  001420  6A1A               	clrf	(??_storeData+1)^0,c
  1616                           
  1617                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1618                           ; Switch size 1, requested type "simple"
  1619                           ; Number of cases is 1, Range of values is 0 to 0
  1620                           ; switch strategies available:
  1621                           ; Name         Instructions Cycles
  1622                           ; simple_byte            4     3 (average)
  1623                           ;	Chosen strategy is simple_byte
  1624  001422  501A               	movf	(??_storeData+1)^0,w,c
  1625  001424  0A00               	xorlw	0	; case 0
  1626  001426  B4D8               	btfsc	status,2,c
  1627  001428  EF18  F00A         	goto	l4649
  1628  00142C  EF28  F00A         	goto	l4243
  1629  001430                     l4649:
  1630  001430  FFFF               	dw	65535	; assembler added errata NOP
  1631                           
  1632                           ; Switch size 1, requested type "simple"
  1633                           ; Number of cases is 3, Range of values is 0 to 2
  1634                           ; switch strategies available:
  1635                           ; Name         Instructions Cycles
  1636                           ; simple_byte           10     6 (average)
  1637                           ;	Chosen strategy is simple_byte
  1638  001432  5019               	movf	??_storeData^0,w,c
  1639  001434  0A00               	xorlw	0	; case 0
  1640  001436  B4D8               	btfsc	status,2,c
  1641  001438  EFFE  F009         	goto	l4233
  1642  00143C  0A01               	xorlw	1	; case 1
  1643  00143E  B4D8               	btfsc	status,2,c
  1644  001440  EF03  F00A         	goto	l4235
  1645  001444  0A03               	xorlw	3	; case 2
  1646  001446  B4D8               	btfsc	status,2,c
  1647  001448  EF08  F00A         	goto	l4237
  1648  00144C  EF28  F00A         	goto	l4243
  1649  001450                     l4243:
  1650  001450  FFFF               	dw	65535	; assembler added errata NOP
  1651                           
  1652                           ;usart.c: 161:     if(counter >= mexLength){
  1653  001452  506D               	movf	storeData@mexLength^0,w,c
  1654  001454  5C5E               	subwf	storeData@counter^0,w,c
  1655  001456  A0D8               	btfss	status,0,c
  1656  001458  EF30  F00A         	goto	u3691
  1657  00145C  EF33  F00A         	goto	u3690
  1658  001460                     u3691:
  1659  001460  FFFF               	dw	65535	; assembler added errata NOP
  1660  001462  EF9F  F00A         	goto	l592
  1661  001466                     u3690:
  1662  001466  FFFF               	dw	65535	; assembler added errata NOP
  1663  001468                     
  1664                           ;usart.c: 162:         counter = 0;
  1665  001468  0E00               	movlw	0
  1666  00146A  6E5E               	movwf	storeData@counter^0,c
  1667                           
  1668                           ;usart.c: 166:         switch(receivedMex[0]){
  1669  00146C  EF84  F00A         	goto	l4259
  1670  001470                     l4247:
  1671  001470  FFFF               	dw	65535	; assembler added errata NOP
  1672                           
  1673                           ;usart.c: 168:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  1674  001472  5061               	movf	_dataCounter^0,w,c
  1675  001474  0D04               	mullw	4
  1676  001476  0EDB               	movlw	low _dataSequence
  1677  001478  24F3               	addwf	243,w,c
  1678  00147A  6ED9               	movwf	fsr2l,c
  1679  00147C  0E00               	movlw	high _dataSequence
  1680  00147E  20F4               	addwfc	prodh,w,c
  1681  001480  6EDA               	movwf	fsr2h,c
  1682  001482  C046  FFDF         	movff	storeData@receivedMex+1,indf2
  1683                           
  1684                           ;usart.c: 169:                 dataSequence[dataCounter].posX = receivedMex[2];
  1685  001486  5061               	movf	_dataCounter^0,w,c
  1686  001488  0D04               	mullw	4
  1687  00148A  0EDC               	movlw	low (_dataSequence+1)
  1688  00148C  24F3               	addwf	243,w,c
  1689  00148E  6ED9               	movwf	fsr2l,c
  1690  001490  0E00               	movlw	high (_dataSequence+1)
  1691  001492  20F4               	addwfc	prodh,w,c
  1692  001494  6EDA               	movwf	fsr2h,c
  1693  001496  C047  FFDF         	movff	storeData@receivedMex+2,indf2
  1694                           
  1695                           ;usart.c: 170:                 dataSequence[dataCounter].posY = receivedMex[3];
  1696  00149A  5061               	movf	_dataCounter^0,w,c
  1697  00149C  0D04               	mullw	4
  1698  00149E  0EDD               	movlw	low (_dataSequence+2)
  1699  0014A0  24F3               	addwf	243,w,c
  1700  0014A2  6ED9               	movwf	fsr2l,c
  1701  0014A4  0E00               	movlw	high (_dataSequence+2)
  1702  0014A6  20F4               	addwfc	prodh,w,c
  1703  0014A8  6EDA               	movwf	fsr2h,c
  1704  0014AA  C048  FFDF         	movff	storeData@receivedMex+3,indf2
  1705                           
  1706                           ;usart.c: 171:                 dataSequence[dataCounter].rotation = receivedMex[4];
  1707  0014AE  5061               	movf	_dataCounter^0,w,c
  1708  0014B0  0D04               	mullw	4
  1709  0014B2  0EDE               	movlw	low (_dataSequence+3)
  1710  0014B4  24F3               	addwf	243,w,c
  1711  0014B6  6ED9               	movwf	fsr2l,c
  1712  0014B8  0E00               	movlw	high (_dataSequence+3)
  1713  0014BA  20F4               	addwfc	prodh,w,c
  1714  0014BC  6EDA               	movwf	fsr2h,c
  1715  0014BE  C049  FFDF         	movff	storeData@receivedMex+4,indf2
  1716  0014C2                     
  1717                           ;usart.c: 173:                 dataCounter++;
  1718  0014C2  2A61               	incf	_dataCounter^0,f,c
  1719                           
  1720                           ;usart.c: 174:                 break;
  1721  0014C4  EF9F  F00A         	goto	l592
  1722  0014C8                     l589:
  1723  0014C8  FFFF               	dw	65535	; assembler added errata NOP
  1724                           
  1725                           ;usart.c: 177:                 newSequenceData.L = receivedMex[1];
  1726  0014CA  C046  F0EF         	movff	storeData@receivedMex+1,_newSequenceData
  1727                           
  1728                           ;usart.c: 178:                 newSequenceData.W = receivedMex[2];
  1729  0014CE  C047  F0F0         	movff	storeData@receivedMex+2,_newSequenceData+1
  1730                           
  1731                           ;usart.c: 179:                 newSequenceData.init_posX = receivedMex[3];
  1732  0014D2  C048  F0F1         	movff	storeData@receivedMex+3,_newSequenceData+2
  1733                           
  1734                           ;usart.c: 180:                 newSequenceData.init_posY = receivedMex[4];
  1735  0014D6  C049  F0F2         	movff	storeData@receivedMex+4,_newSequenceData+3
  1736                           
  1737                           ;usart.c: 181:                 newSequenceData.init_rot = receivedMex[5];
  1738  0014DA  C04A  F0F3         	movff	storeData@receivedMex+5,_newSequenceData+4
  1739                           
  1740                           ;usart.c: 182:                 newSequenceData.end_posX = receivedMex[6];
  1741  0014DE  C04B  F0F4         	movff	storeData@receivedMex+6,_newSequenceData+5
  1742                           
  1743                           ;usart.c: 183:                 newSequenceData.end_posY = receivedMex[7];
  1744  0014E2  C04C  F0F5         	movff	storeData@receivedMex+7,_newSequenceData+6
  1745                           
  1746                           ;usart.c: 184:                 newSequenceData.end_rot = receivedMex[8];
  1747  0014E6  C04D  F0F6         	movff	storeData@receivedMex+8,_newSequenceData+7
  1748  0014EA                     
  1749                           ;usart.c: 186:                 _newSequence = 1;
  1750  0014EA  0E01               	movlw	1
  1751  0014EC  6E5F               	movwf	__newSequence^0,c
  1752                           
  1753                           ;usart.c: 187:                 break;
  1754  0014EE  EF9F  F00A         	goto	l592
  1755  0014F2                     l4253:
  1756  0014F2  FFFF               	dw	65535	; assembler added errata NOP
  1757                           
  1758                           ;usart.c: 190:                 _fatalError = 1;
  1759  0014F4  0E01               	movlw	1
  1760  0014F6  6E60               	movwf	__fatalError^0,c
  1761                           
  1762                           ;usart.c: 191:                 break;
  1763  0014F8  EF9F  F00A         	goto	l592
  1764  0014FC                     l4255:
  1765  0014FC  FFFF               	dw	65535	; assembler added errata NOP
  1766                           
  1767                           ;usart.c: 194:                 printError(8);
  1768  0014FE  0E08               	movlw	8
  1769  001500  EC8C  F00C         	call	_printError
  1770                           
  1771                           ;usart.c: 195:                 break;
  1772  001504  EF9F  F00A         	goto	l592
  1773  001508                     l4259:
  1774  001508  FFFF               	dw	65535	; assembler added errata NOP
  1775  00150A  5045               	movf	storeData@receivedMex^0,w,c
  1776  00150C  6E19               	movwf	??_storeData^0,c
  1777  00150E  6A1A               	clrf	(??_storeData+1)^0,c
  1778                           
  1779                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1780                           ; Switch size 1, requested type "simple"
  1781                           ; Number of cases is 1, Range of values is 0 to 0
  1782                           ; switch strategies available:
  1783                           ; Name         Instructions Cycles
  1784                           ; simple_byte            4     3 (average)
  1785                           ;	Chosen strategy is simple_byte
  1786  001510  501A               	movf	(??_storeData+1)^0,w,c
  1787  001512  0A00               	xorlw	0	; case 0
  1788  001514  B4D8               	btfsc	status,2,c
  1789  001516  EF8F  F00A         	goto	l4651
  1790  00151A  EF7E  F00A         	goto	l4255
  1791  00151E                     l4651:
  1792  00151E  FFFF               	dw	65535	; assembler added errata NOP
  1793                           
  1794                           ; Switch size 1, requested type "simple"
  1795                           ; Number of cases is 3, Range of values is 0 to 2
  1796                           ; switch strategies available:
  1797                           ; Name         Instructions Cycles
  1798                           ; simple_byte           10     6 (average)
  1799                           ;	Chosen strategy is simple_byte
  1800  001520  5019               	movf	??_storeData^0,w,c
  1801  001522  0A00               	xorlw	0	; case 0
  1802  001524  B4D8               	btfsc	status,2,c
  1803  001526  EF38  F00A         	goto	l4247
  1804  00152A  0A01               	xorlw	1	; case 1
  1805  00152C  B4D8               	btfsc	status,2,c
  1806  00152E  EF64  F00A         	goto	l589
  1807  001532  0A03               	xorlw	3	; case 2
  1808  001534  B4D8               	btfsc	status,2,c
  1809  001536  EF79  F00A         	goto	l4253
  1810  00153A  EF7E  F00A         	goto	l4255
  1811  00153E                     l592:
  1812  00153E  FFFF               	dw	65535	; assembler added errata NOP
  1813  001540  0012               	return		;funcret
  1814  001542  FFFF               	dw	65535	; errata NOP
  1815  001544                     __end_of_storeData:
  1816                           	callstack 0
  1817                           
  1818 ;; *************** function _printError *****************
  1819 ;; Defined at:
  1820 ;;		line 53 in file "usart.c"
  1821 ;; Parameters:    Size  Location     Type
  1822 ;;  errCode         1    wreg     unsigned char 
  1823 ;; Auto vars:     Size  Location     Type
  1824 ;;  errCode         1   23[COMRAM] unsigned char 
  1825 ;; Return value:  Size  Location     Type
  1826 ;;                  1    wreg      void 
  1827 ;; Registers used:
  1828 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1829 ;; Tracked objects:
  1830 ;;		On entry : 0/0
  1831 ;;		On exit  : 0/0
  1832 ;;		Unchanged: 0/0
  1833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1834 ;;      Params:         0       0       0       0       0       0       0
  1835 ;;      Locals:         1       0       0       0       0       0       0
  1836 ;;      Temps:          2       0       0       0       0       0       0
  1837 ;;      Totals:         3       0       0       0       0       0       0
  1838 ;;Total ram usage:        3 bytes
  1839 ;; Hardware stack levels used:    1
  1840 ;; Hardware stack levels required when called:    5
  1841 ;; This function calls:
  1842 ;;		_uartTx
  1843 ;; This function is called by:
  1844 ;;		_main
  1845 ;;		_storeData
  1846 ;; This function uses a non-reentrant model
  1847 ;;
  1848                           
  1849                           	psect	text6
  1850  001918                     __ptext6:
  1851                           	callstack 0
  1852  001918                     _printError:
  1853                           	callstack 0
  1854  001918  FFFF               	dw	65535	; assembler added errata NOP
  1855                           
  1856                           ;incstack = 0
  1857                           ;printError@errCode stored from wreg
  1858  00191A  6E18               	movwf	printError@errCode^0,c
  1859  00191C                     
  1860                           ;usart.c: 55:     switch(errCode){
  1861  00191C  EFE8  F00C         	goto	l4097
  1862  001920                     l4079:
  1863  001920  FFFF               	dw	65535	; assembler added errata NOP
  1864                           
  1865                           ;usart.c: 57:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  1866  001922  0EA5               	movlw	low _errString_Feed
  1867  001924  6E12               	movwf	uartTx@ptr^0,c
  1868  001926  0E00               	movlw	high _errString_Feed
  1869  001928  6E13               	movwf	(uartTx@ptr+1)^0,c
  1870  00192A  0E1E               	movlw	30
  1871  00192C  6E14               	movwf	uartTx@length^0,c
  1872  00192E  ECBF  F011         	call	_uartTx	;wreg free
  1873                           
  1874                           ;usart.c: 58:             break;
  1875  001932  EF17  F00D         	goto	l548
  1876  001936                     l4081:
  1877  001936  FFFF               	dw	65535	; assembler added errata NOP
  1878                           
  1879                           ;usart.c: 60:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  1880  001938  0E5E               	movlw	low _errString_ZEND
  1881  00193A  6E12               	movwf	uartTx@ptr^0,c
  1882  00193C  0E01               	movlw	high _errString_ZEND
  1883  00193E  6E13               	movwf	(uartTx@ptr+1)^0,c
  1884  001940  0E29               	movlw	41
  1885  001942  6E14               	movwf	uartTx@length^0,c
  1886  001944  ECBF  F011         	call	_uartTx	;wreg free
  1887                           
  1888                           ;usart.c: 61:             break;
  1889  001948  EF17  F00D         	goto	l548
  1890  00194C                     l4083:
  1891  00194C  FFFF               	dw	65535	; assembler added errata NOP
  1892                           
  1893                           ;usart.c: 63:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  1894  00194E  0E87               	movlw	low _errString_Reset
  1895  001950  6E12               	movwf	uartTx@ptr^0,c
  1896  001952  0E01               	movlw	high _errString_Reset
  1897  001954  6E13               	movwf	(uartTx@ptr+1)^0,c
  1898  001956  0E28               	movlw	40
  1899  001958  6E14               	movwf	uartTx@length^0,c
  1900  00195A  ECBF  F011         	call	_uartTx	;wreg free
  1901                           
  1902                           ;usart.c: 64:             break;
  1903  00195E  EF17  F00D         	goto	l548
  1904  001962                     l4085:
  1905  001962  FFFF               	dw	65535	; assembler added errata NOP
  1906                           
  1907                           ;usart.c: 66:             uartTx(&errString_Point[0], sizeof(errString_Point));
  1908  001964  0E35               	movlw	low _errString_Point
  1909  001966  6E12               	movwf	uartTx@ptr^0,c
  1910  001968  0E01               	movlw	high _errString_Point
  1911  00196A  6E13               	movwf	(uartTx@ptr+1)^0,c
  1912  00196C  0E29               	movlw	41
  1913  00196E  6E14               	movwf	uartTx@length^0,c
  1914  001970  ECBF  F011         	call	_uartTx	;wreg free
  1915                           
  1916                           ;usart.c: 67:             break;
  1917  001974  EF17  F00D         	goto	l548
  1918  001978                     l4087:
  1919  001978  FFFF               	dw	65535	; assembler added errata NOP
  1920                           
  1921                           ;usart.c: 69:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  1922  00197A  0E84               	movlw	low _errString_Bound
  1923  00197C  6E12               	movwf	uartTx@ptr^0,c
  1924  00197E  0E00               	movlw	high _errString_Bound
  1925  001980  6E13               	movwf	(uartTx@ptr+1)^0,c
  1926  001982  0E21               	movlw	33
  1927  001984  6E14               	movwf	uartTx@length^0,c
  1928  001986  ECBF  F011         	call	_uartTx	;wreg free
  1929                           
  1930                           ;usart.c: 70:             break;
  1931  00198A  EF17  F00D         	goto	l548
  1932  00198E                     l4089:
  1933  00198E  FFFF               	dw	65535	; assembler added errata NOP
  1934                           
  1935                           ;usart.c: 72:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  1936  001990  0E00               	movlw	low _errString_PointZ
  1937  001992  6E12               	movwf	uartTx@ptr^0,c
  1938  001994  0E01               	movlw	high _errString_PointZ
  1939  001996  6E13               	movwf	(uartTx@ptr+1)^0,c
  1940  001998  0E35               	movlw	53
  1941  00199A  6E14               	movwf	uartTx@length^0,c
  1942  00199C  ECBF  F011         	call	_uartTx	;wreg free
  1943                           
  1944                           ;usart.c: 73:             break;
  1945  0019A0  EF17  F00D         	goto	l548
  1946  0019A4                     l4091:
  1947  0019A4  FFFF               	dw	65535	; assembler added errata NOP
  1948                           
  1949                           ;usart.c: 75:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  1950  0019A6  0EAF               	movlw	low _errString_Fatal
  1951  0019A8  6E12               	movwf	uartTx@ptr^0,c
  1952  0019AA  0E01               	movlw	high _errString_Fatal
  1953  0019AC  6E13               	movwf	(uartTx@ptr+1)^0,c
  1954  0019AE  0E27               	movlw	39
  1955  0019B0  6E14               	movwf	uartTx@length^0,c
  1956  0019B2  ECBF  F011         	call	_uartTx	;wreg free
  1957                           
  1958                           ;usart.c: 76:             break;
  1959  0019B6  EF17  F00D         	goto	l548
  1960  0019BA                     l4093:
  1961  0019BA  FFFF               	dw	65535	; assembler added errata NOP
  1962                           
  1963                           ;usart.c: 78:             uartTx(&errString_Command[0], sizeof(errString_Command));
  1964  0019BC  0EC3               	movlw	low _errString_Command
  1965  0019BE  6E12               	movwf	uartTx@ptr^0,c
  1966  0019C0  0E00               	movlw	high _errString_Command
  1967  0019C2  6E13               	movwf	(uartTx@ptr+1)^0,c
  1968  0019C4  0E18               	movlw	24
  1969  0019C6  6E14               	movwf	uartTx@length^0,c
  1970  0019C8  ECBF  F011         	call	_uartTx	;wreg free
  1971                           
  1972                           ;usart.c: 79:             break;
  1973  0019CC  EF17  F00D         	goto	l548
  1974  0019D0                     l4097:
  1975  0019D0  FFFF               	dw	65535	; assembler added errata NOP
  1976  0019D2  5018               	movf	printError@errCode^0,w,c
  1977  0019D4  6E16               	movwf	??_printError^0,c
  1978  0019D6  6A17               	clrf	(??_printError+1)^0,c
  1979                           
  1980                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1981                           ; Switch size 1, requested type "simple"
  1982                           ; Number of cases is 1, Range of values is 0 to 0
  1983                           ; switch strategies available:
  1984                           ; Name         Instructions Cycles
  1985                           ; simple_byte            4     3 (average)
  1986                           ;	Chosen strategy is simple_byte
  1987  0019D8  5017               	movf	(??_printError+1)^0,w,c
  1988  0019DA  0A00               	xorlw	0	; case 0
  1989  0019DC  B4D8               	btfsc	status,2,c
  1990  0019DE  EFF3  F00C         	goto	l4653
  1991  0019E2  EF17  F00D         	goto	l548
  1992  0019E6                     l4653:
  1993  0019E6  FFFF               	dw	65535	; assembler added errata NOP
  1994                           
  1995                           ; Switch size 1, requested type "simple"
  1996                           ; Number of cases is 8, Range of values is 1 to 8
  1997                           ; switch strategies available:
  1998                           ; Name         Instructions Cycles
  1999                           ; simple_byte           25    13 (average)
  2000                           ;	Chosen strategy is simple_byte
  2001  0019E8  5016               	movf	??_printError^0,w,c
  2002  0019EA  0A01               	xorlw	1	; case 1
  2003  0019EC  B4D8               	btfsc	status,2,c
  2004  0019EE  EF90  F00C         	goto	l4079
  2005  0019F2  0A03               	xorlw	3	; case 2
  2006  0019F4  B4D8               	btfsc	status,2,c
  2007  0019F6  EF9B  F00C         	goto	l4081
  2008  0019FA  0A01               	xorlw	1	; case 3
  2009  0019FC  B4D8               	btfsc	status,2,c
  2010  0019FE  EFA6  F00C         	goto	l4083
  2011  001A02  0A07               	xorlw	7	; case 4
  2012  001A04  B4D8               	btfsc	status,2,c
  2013  001A06  EFB1  F00C         	goto	l4085
  2014  001A0A  0A01               	xorlw	1	; case 5
  2015  001A0C  B4D8               	btfsc	status,2,c
  2016  001A0E  EFBC  F00C         	goto	l4087
  2017  001A12  0A03               	xorlw	3	; case 6
  2018  001A14  B4D8               	btfsc	status,2,c
  2019  001A16  EFC7  F00C         	goto	l4089
  2020  001A1A  0A01               	xorlw	1	; case 7
  2021  001A1C  B4D8               	btfsc	status,2,c
  2022  001A1E  EFD2  F00C         	goto	l4091
  2023  001A22  0A0F               	xorlw	15	; case 8
  2024  001A24  B4D8               	btfsc	status,2,c
  2025  001A26  EFDD  F00C         	goto	l4093
  2026  001A2A  EF17  F00D         	goto	l548
  2027  001A2E                     l548:
  2028  001A2E  FFFF               	dw	65535	; assembler added errata NOP
  2029  001A30  0012               	return		;funcret
  2030  001A32  FFFF               	dw	65535	; errata NOP
  2031  001A34                     __end_of_printError:
  2032                           	callstack 0
  2033                           
  2034 ;; *************** function _uartTx *****************
  2035 ;; Defined at:
  2036 ;;		line 221 in file "usart.c"
  2037 ;; Parameters:    Size  Location     Type
  2038 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  2039 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  2040 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  2041 ;;  length          1   19[COMRAM] unsigned char 
  2042 ;; Auto vars:     Size  Location     Type
  2043 ;;  i               1   20[COMRAM] unsigned char 
  2044 ;; Return value:  Size  Location     Type
  2045 ;;                  1    wreg      void 
  2046 ;; Registers used:
  2047 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2048 ;; Tracked objects:
  2049 ;;		On entry : 0/0
  2050 ;;		On exit  : 0/0
  2051 ;;		Unchanged: 0/0
  2052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2053 ;;      Params:         3       0       0       0       0       0       0
  2054 ;;      Locals:         1       0       0       0       0       0       0
  2055 ;;      Temps:          0       0       0       0       0       0       0
  2056 ;;      Totals:         4       0       0       0       0       0       0
  2057 ;;Total ram usage:        4 bytes
  2058 ;; Hardware stack levels used:    1
  2059 ;; Hardware stack levels required when called:    4
  2060 ;; This function calls:
  2061 ;;		Nothing
  2062 ;; This function is called by:
  2063 ;;		_printError
  2064 ;; This function uses a non-reentrant model
  2065 ;;
  2066                           
  2067                           	psect	text7
  2068  00237E                     __ptext7:
  2069                           	callstack 0
  2070  00237E                     _uartTx:
  2071                           	callstack 0
  2072  00237E  FFFF               	dw	65535	; assembler added errata NOP
  2073  002380                     
  2074                           ;usart.c: 221: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 222: {;usa
      +                          rt.c: 224:     for(char i = 1; i < length; i++){
  2075  002380  0E01               	movlw	1
  2076  002382  6E15               	movwf	uartTx@i^0,c
  2077  002384  EFD8  F011         	goto	l3555
  2078  002388                     l3551:
  2079  002388  FFFF               	dw	65535	; assembler added errata NOP
  2080                           
  2081                           ;usart.c: 226:         TXREG = *ptr;
  2082  00238A  C012  FFD9         	movff	uartTx@ptr,fsr2l
  2083  00238E  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  2084  002392  50DF               	movf	indf2,w,c
  2085  002394  6EAD               	movwf	173,c	;volatile
  2086  002396                     l603:
  2087  002396  FFFF               	dw	65535	; assembler added errata NOP
  2088  002398  A2AC               	btfss	172,1,c	;volatile
  2089  00239A  EFD1  F011         	goto	u2661
  2090  00239E  EFD4  F011         	goto	u2660
  2091  0023A2                     u2661:
  2092  0023A2  FFFF               	dw	65535	; assembler added errata NOP
  2093  0023A4  EFCB  F011         	goto	l603
  2094  0023A8                     u2660:
  2095  0023A8  FFFF               	dw	65535	; assembler added errata NOP
  2096  0023AA                     
  2097                           ;usart.c: 230:         ptr++;
  2098  0023AA  4A12               	infsnz	uartTx@ptr^0,f,c
  2099  0023AC  2A13               	incf	(uartTx@ptr+1)^0,f,c
  2100                           
  2101                           ;usart.c: 231:     }
  2102  0023AE  2A15               	incf	uartTx@i^0,f,c
  2103  0023B0                     l3555:
  2104  0023B0  FFFF               	dw	65535	; assembler added errata NOP
  2105  0023B2  5014               	movf	uartTx@length^0,w,c
  2106  0023B4  5C15               	subwf	uartTx@i^0,w,c
  2107  0023B6  A0D8               	btfss	status,0,c
  2108  0023B8  EFE0  F011         	goto	u2671
  2109  0023BC  EFE3  F011         	goto	u2670
  2110  0023C0                     u2671:
  2111  0023C0  FFFF               	dw	65535	; assembler added errata NOP
  2112  0023C2  EFC4  F011         	goto	l3551
  2113  0023C6                     u2670:
  2114  0023C6  FFFF               	dw	65535	; assembler added errata NOP
  2115  0023C8  0012               	return		;funcret
  2116  0023CA  FFFF               	dw	65535	; errata NOP
  2117  0023CC                     __end_of_uartTx:
  2118                           	callstack 0
  2119                           
  2120 ;; *************** function _shiftData *****************
  2121 ;; Defined at:
  2122 ;;		line 120 in file "usart.c"
  2123 ;; Parameters:    Size  Location     Type
  2124 ;;		None
  2125 ;; Auto vars:     Size  Location     Type
  2126 ;;  i               1   19[COMRAM] unsigned char 
  2127 ;; Return value:  Size  Location     Type
  2128 ;;                  1    wreg      void 
  2129 ;; Registers used:
  2130 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2131 ;; Tracked objects:
  2132 ;;		On entry : 0/0
  2133 ;;		On exit  : 0/0
  2134 ;;		Unchanged: 0/0
  2135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2136 ;;      Params:         0       0       0       0       0       0       0
  2137 ;;      Locals:         1       0       0       0       0       0       0
  2138 ;;      Temps:          2       0       0       0       0       0       0
  2139 ;;      Totals:         3       0       0       0       0       0       0
  2140 ;;Total ram usage:        3 bytes
  2141 ;; Hardware stack levels used:    1
  2142 ;; Hardware stack levels required when called:    4
  2143 ;; This function calls:
  2144 ;;		Nothing
  2145 ;; This function is called by:
  2146 ;;		_main
  2147 ;; This function uses a non-reentrant model
  2148 ;;
  2149                           
  2150                           	psect	text8
  2151  0022C2                     __ptext8:
  2152                           	callstack 0
  2153  0022C2                     _shiftData:
  2154                           	callstack 0
  2155  0022C2  FFFF               	dw	65535	; assembler added errata NOP
  2156  0022C4                     
  2157                           ;usart.c: 121:     char i;;usart.c: 123:     for(i = 0; i < 4; i++){
  2158  0022C4  0E00               	movlw	0
  2159  0022C6  6E14               	movwf	shiftData@i^0,c
  2160  0022C8                     l4347:
  2161  0022C8  FFFF               	dw	65535	; assembler added errata NOP
  2162                           
  2163                           ;usart.c: 124:         dataSequence[i] = dataSequence[i+1];
  2164  0022CA  5014               	movf	shiftData@i^0,w,c
  2165  0022CC  6E12               	movwf	??_shiftData^0,c
  2166  0022CE  6A13               	clrf	(??_shiftData+1)^0,c
  2167  0022D0  90D8               	bcf	status,0,c
  2168  0022D2  3612               	rlcf	??_shiftData^0,f,c
  2169  0022D4  3613               	rlcf	(??_shiftData+1)^0,f,c
  2170  0022D6  90D8               	bcf	status,0,c
  2171  0022D8  3612               	rlcf	??_shiftData^0,f,c
  2172  0022DA  3613               	rlcf	(??_shiftData+1)^0,f,c
  2173  0022DC  0EDF               	movlw	low (_dataSequence+4)
  2174  0022DE  2412               	addwf	??_shiftData^0,w,c
  2175  0022E0  6ED9               	movwf	fsr2l,c
  2176  0022E2  0E00               	movlw	high (_dataSequence+4)
  2177  0022E4  2013               	addwfc	(??_shiftData+1)^0,w,c
  2178  0022E6  6EDA               	movwf	fsr2h,c
  2179  0022E8  5014               	movf	shiftData@i^0,w,c
  2180  0022EA  0D04               	mullw	4
  2181  0022EC  0EDB               	movlw	low _dataSequence
  2182  0022EE  24F3               	addwf	243,w,c
  2183  0022F0  6EE1               	movwf	fsr1l,c
  2184  0022F2  0E00               	movlw	high _dataSequence
  2185  0022F4  20F4               	addwfc	prodh,w,c
  2186  0022F6  6EE2               	movwf	fsr1h,c
  2187  0022F8  CFDE FFE6          	movff	postinc2,postinc1
  2188  0022FC  CFDE FFE6          	movff	postinc2,postinc1
  2189  002300  CFDE FFE6          	movff	postinc2,postinc1
  2190  002304  CFDE FFE6          	movff	postinc2,postinc1
  2191  002308                     
  2192                           ;usart.c: 125:     }
  2193  002308  2A14               	incf	shiftData@i^0,f,c
  2194  00230A  0E03               	movlw	3
  2195  00230C  6414               	cpfsgt	shiftData@i^0,c
  2196  00230E  EF8B  F011         	goto	u3721
  2197  002312  EF8E  F011         	goto	u3720
  2198  002316                     u3721:
  2199  002316  FFFF               	dw	65535	; assembler added errata NOP
  2200  002318  EF64  F011         	goto	l4347
  2201  00231C                     u3720:
  2202  00231C  FFFF               	dw	65535	; assembler added errata NOP
  2203  00231E  0012               	return		;funcret
  2204  002320  FFFF               	dw	65535	; errata NOP
  2205  002322                     __end_of_shiftData:
  2206                           	callstack 0
  2207                           
  2208 ;; *************** function _resetPosition *****************
  2209 ;; Defined at:
  2210 ;;		line 158 in file "motors.c"
  2211 ;; Parameters:    Size  Location     Type
  2212 ;;		None
  2213 ;; Auto vars:     Size  Location     Type
  2214 ;;  keepMovingZ     1   23[COMRAM] unsigned char 
  2215 ;;  keepMovingY     1   22[COMRAM] unsigned char 
  2216 ;;  keepMovingX     1   21[COMRAM] unsigned char 
  2217 ;; Return value:  Size  Location     Type
  2218 ;;                  1    wreg      unsigned char 
  2219 ;; Registers used:
  2220 ;;		wreg, status,2, status,0, cstack
  2221 ;; Tracked objects:
  2222 ;;		On entry : 0/0
  2223 ;;		On exit  : 0/0
  2224 ;;		Unchanged: 0/0
  2225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2226 ;;      Params:         0       0       0       0       0       0       0
  2227 ;;      Locals:         3       0       0       0       0       0       0
  2228 ;;      Temps:          0       0       0       0       0       0       0
  2229 ;;      Totals:         3       0       0       0       0       0       0
  2230 ;;Total ram usage:        3 bytes
  2231 ;; Hardware stack levels used:    1
  2232 ;; Hardware stack levels required when called:    5
  2233 ;; This function calls:
  2234 ;;		_enableMotor
  2235 ;;		_resetStep
  2236 ;;		_setDecay
  2237 ;;		_setDirection
  2238 ;;		_setStep
  2239 ;;		_stepMade
  2240 ;; This function is called by:
  2241 ;;		_main
  2242 ;; This function uses a non-reentrant model
  2243 ;;
  2244                           
  2245                           	psect	text9
  2246  0011EE                     __ptext9:
  2247                           	callstack 0
  2248  0011EE                     _resetPosition:
  2249                           	callstack 0
  2250  0011EE  FFFF               	dw	65535	; assembler added errata NOP
  2251  0011F0                     
  2252                           ;motors.c: 160:     setStep(0, 0);
  2253  0011F0  0E00               	movlw	0
  2254  0011F2  6E12               	movwf	setStep@motor^0,c
  2255  0011F4  0E00               	movlw	0
  2256  0011F6  EC73  F00F         	call	_setStep
  2257                           
  2258                           ;motors.c: 161:     setStep(1, 0);
  2259  0011FA  0E00               	movlw	0
  2260  0011FC  6E12               	movwf	setStep@motor^0,c
  2261  0011FE  0E01               	movlw	1
  2262  001200  EC73  F00F         	call	_setStep
  2263                           
  2264                           ;motors.c: 162:     setStep(2, 0);
  2265  001204  0E00               	movlw	0
  2266  001206  6E12               	movwf	setStep@motor^0,c
  2267  001208  0E02               	movlw	2
  2268  00120A  EC73  F00F         	call	_setStep
  2269                           
  2270                           ;motors.c: 164:     setDirection(0, 0);
  2271  00120E  0E00               	movlw	0
  2272  001210  6E12               	movwf	setDirection@motor^0,c
  2273  001212  0E00               	movlw	0
  2274  001214  ECED  F010         	call	_setDirection
  2275                           
  2276                           ;motors.c: 165:     setDirection(0, 1);
  2277  001218  0E01               	movlw	1
  2278  00121A  6E12               	movwf	setDirection@motor^0,c
  2279  00121C  0E00               	movlw	0
  2280  00121E  ECED  F010         	call	_setDirection
  2281                           
  2282                           ;motors.c: 166:     setDirection(0, 2);
  2283  001222  0E02               	movlw	2
  2284  001224  6E12               	movwf	setDirection@motor^0,c
  2285  001226  0E00               	movlw	0
  2286  001228  ECED  F010         	call	_setDirection
  2287                           
  2288                           ;motors.c: 168:     setDecay(1, 0);
  2289  00122C  0E00               	movlw	0
  2290  00122E  6E12               	movwf	setDecay@motor^0,c
  2291  001230  0E01               	movlw	1
  2292  001232  EC79  F010         	call	_setDecay
  2293                           
  2294                           ;motors.c: 169:     setDecay(1, 1);
  2295  001236  0E01               	movlw	1
  2296  001238  6E12               	movwf	setDecay@motor^0,c
  2297  00123A  0E01               	movlw	1
  2298  00123C  EC79  F010         	call	_setDecay
  2299                           
  2300                           ;motors.c: 170:     setDecay(1, 2);
  2301  001240  0E02               	movlw	2
  2302  001242  6E12               	movwf	setDecay@motor^0,c
  2303  001244  0E01               	movlw	1
  2304  001246  EC79  F010         	call	_setDecay
  2305                           
  2306                           ;motors.c: 172:     enableMotor(0, 0);
  2307  00124A  0E00               	movlw	0
  2308  00124C  6E12               	movwf	enableMotor@motor^0,c
  2309  00124E  0E00               	movlw	0
  2310  001250  ECB3  F010         	call	_enableMotor
  2311                           
  2312                           ;motors.c: 173:     enableMotor(0, 1);
  2313  001254  0E01               	movlw	1
  2314  001256  6E12               	movwf	enableMotor@motor^0,c
  2315  001258  0E00               	movlw	0
  2316  00125A  ECB3  F010         	call	_enableMotor
  2317                           
  2318                           ;motors.c: 174:     enableMotor(0, 2);
  2319  00125E  0E02               	movlw	2
  2320  001260  6E12               	movwf	enableMotor@motor^0,c
  2321  001262  0E00               	movlw	0
  2322  001264  ECB3  F010         	call	_enableMotor
  2323  001268                     
  2324                           ;motors.c: 178:     unsigned char keepMovingX = 1;
  2325  001268  0E01               	movlw	1
  2326  00126A  6E16               	movwf	resetPosition@keepMovingX^0,c
  2327  00126C                     
  2328                           ;motors.c: 179:     unsigned char keepMovingY = 1;
  2329  00126C  0E01               	movlw	1
  2330  00126E  6E17               	movwf	resetPosition@keepMovingY^0,c
  2331  001270                     
  2332                           ;motors.c: 180:     unsigned char keepMovingZ = 1;
  2333  001270  0E01               	movlw	1
  2334  001272  6E18               	movwf	resetPosition@keepMovingZ^0,c
  2335  001274                     
  2336                           ;motors.c: 183:     T2CONbits.TMR2ON = 1;
  2337  001274  84CA               	bsf	202,2,c	;volatile
  2338  001276                     
  2339                           ;motors.c: 185:     tm0Error = 0;
  2340  001276  0E00               	movlw	0
  2341  001278  6E5C               	movwf	(_tm0Error+1)^0,c
  2342  00127A  0E00               	movlw	0
  2343  00127C  6E5B               	movwf	_tm0Error^0,c
  2344  00127E                     
  2345                           ;motors.c: 186:     tm0Limit = 250;
  2346  00127E  0EFA               	movlw	250
  2347  001280  6E68               	movwf	_tm0Limit^0,c
  2348  001282                     
  2349                           ;motors.c: 187:     T0CONbits.TMR0ON = 1;
  2350  001282  8ED5               	bsf	213,7,c	;volatile
  2351                           
  2352                           ;motors.c: 189:     while(keepMovingX || keepMovingY || keepMovingZ){
  2353  001284  EFC5  F009         	goto	l4165
  2354  001288                     l4143:
  2355  001288  FFFF               	dw	65535	; assembler added errata NOP
  2356                           
  2357                           ;motors.c: 192:         if(tm0Error){
  2358  00128A  505B               	movf	_tm0Error^0,w,c
  2359  00128C  105C               	iorwf	(_tm0Error+1)^0,w,c
  2360  00128E  B4D8               	btfsc	status,2,c
  2361  001290  EF4C  F009         	goto	u3551
  2362  001294  EF4F  F009         	goto	u3550
  2363  001298                     u3551:
  2364  001298  FFFF               	dw	65535	; assembler added errata NOP
  2365  00129A  EF59  F009         	goto	l117
  2366  00129E                     u3550:
  2367  00129E  FFFF               	dw	65535	; assembler added errata NOP
  2368  0012A0                     
  2369                           ;motors.c: 194:             LATAbits.LATA2 = 0;
  2370  0012A0  9489               	bcf	137,2,c	;volatile
  2371                           
  2372                           ;motors.c: 195:             LATBbits.LATB4 = 0;
  2373  0012A2  988A               	bcf	138,4,c	;volatile
  2374                           
  2375                           ;motors.c: 196:             LATCbits.LATC2 = 0;
  2376  0012A4  948B               	bcf	139,2,c	;volatile
  2377  0012A6                     
  2378                           ;motors.c: 198:             tm0Error = 3;
  2379  0012A6  0E00               	movlw	0
  2380  0012A8  6E5C               	movwf	(_tm0Error+1)^0,c
  2381  0012AA  0E03               	movlw	3
  2382  0012AC  6E5B               	movwf	_tm0Error^0,c
  2383                           
  2384                           ;motors.c: 199:             break;
  2385  0012AE  EFE3  F009         	goto	l118
  2386  0012B2                     l117:
  2387  0012B2  FFFF               	dw	65535	; assembler added errata NOP
  2388                           
  2389                           ;motors.c: 206:         if(PORTEbits.RE0 || !keepMovingX){
  2390  0012B4  B084               	btfsc	132,0,c	;volatile
  2391  0012B6  EF5F  F009         	goto	u3561
  2392  0012BA  EF62  F009         	goto	u3560
  2393  0012BE                     u3561:
  2394  0012BE  FFFF               	dw	65535	; assembler added errata NOP
  2395  0012C0  EF6C  F009         	goto	l4151
  2396  0012C4                     u3560:
  2397  0012C4  FFFF               	dw	65535	; assembler added errata NOP
  2398  0012C6  5016               	movf	resetPosition@keepMovingX^0,w,c
  2399  0012C8  A4D8               	btfss	status,2,c
  2400  0012CA  EF69  F009         	goto	u3571
  2401  0012CE  EF6C  F009         	goto	u3570
  2402  0012D2                     u3571:
  2403  0012D2  FFFF               	dw	65535	; assembler added errata NOP
  2404  0012D4  EF71  F009         	goto	l119
  2405  0012D8                     u3570:
  2406  0012D8                     l4151:
  2407  0012D8  FFFF               	dw	65535	; assembler added errata NOP
  2408                           
  2409                           ;motors.c: 208:             keepMovingX = 0;
  2410  0012DA  0E00               	movlw	0
  2411  0012DC  6E16               	movwf	resetPosition@keepMovingX^0,c
  2412                           
  2413                           ;motors.c: 209:         }else{
  2414  0012DE  EF73  F009         	goto	l122
  2415  0012E2                     l119:
  2416  0012E2  FFFF               	dw	65535	; assembler added errata NOP
  2417                           
  2418                           ;motors.c: 211:             LATAbits.LATA2 = 1;
  2419  0012E4  8489               	bsf	137,2,c	;volatile
  2420  0012E6                     l122:
  2421  0012E6  FFFF               	dw	65535	; assembler added errata NOP
  2422                           
  2423                           ;motors.c: 215:         if(PORTEbits.RE1 || !keepMovingY){
  2424  0012E8  B284               	btfsc	132,1,c	;volatile
  2425  0012EA  EF79  F009         	goto	u3581
  2426  0012EE  EF7C  F009         	goto	u3580
  2427  0012F2                     u3581:
  2428  0012F2  FFFF               	dw	65535	; assembler added errata NOP
  2429  0012F4  EF86  F009         	goto	l4155
  2430  0012F8                     u3580:
  2431  0012F8  FFFF               	dw	65535	; assembler added errata NOP
  2432  0012FA  5017               	movf	resetPosition@keepMovingY^0,w,c
  2433  0012FC  A4D8               	btfss	status,2,c
  2434  0012FE  EF83  F009         	goto	u3591
  2435  001302  EF86  F009         	goto	u3590
  2436  001306                     u3591:
  2437  001306  FFFF               	dw	65535	; assembler added errata NOP
  2438  001308  EF8B  F009         	goto	l123
  2439  00130C                     u3590:
  2440  00130C                     l4155:
  2441  00130C  FFFF               	dw	65535	; assembler added errata NOP
  2442                           
  2443                           ;motors.c: 217:             keepMovingY = 0;
  2444  00130E  0E00               	movlw	0
  2445  001310  6E17               	movwf	resetPosition@keepMovingY^0,c
  2446                           
  2447                           ;motors.c: 218:         }else{
  2448  001312  EF8D  F009         	goto	l126
  2449  001316                     l123:
  2450  001316  FFFF               	dw	65535	; assembler added errata NOP
  2451                           
  2452                           ;motors.c: 220:             LATBbits.LATB4 = 1;
  2453  001318  888A               	bsf	138,4,c	;volatile
  2454  00131A                     l126:
  2455  00131A  FFFF               	dw	65535	; assembler added errata NOP
  2456                           
  2457                           ;motors.c: 224:         if(PORTEbits.RE2 || !keepMovingZ){
  2458  00131C  B484               	btfsc	132,2,c	;volatile
  2459  00131E  EF93  F009         	goto	u3601
  2460  001322  EF96  F009         	goto	u3600
  2461  001326                     u3601:
  2462  001326  FFFF               	dw	65535	; assembler added errata NOP
  2463  001328  EFA0  F009         	goto	l4159
  2464  00132C                     u3600:
  2465  00132C  FFFF               	dw	65535	; assembler added errata NOP
  2466  00132E  5018               	movf	resetPosition@keepMovingZ^0,w,c
  2467  001330  A4D8               	btfss	status,2,c
  2468  001332  EF9D  F009         	goto	u3611
  2469  001336  EFA0  F009         	goto	u3610
  2470  00133A                     u3611:
  2471  00133A  FFFF               	dw	65535	; assembler added errata NOP
  2472  00133C  EFA5  F009         	goto	l127
  2473  001340                     u3610:
  2474  001340                     l4159:
  2475  001340  FFFF               	dw	65535	; assembler added errata NOP
  2476                           
  2477                           ;motors.c: 226:             keepMovingZ = 0;
  2478  001342  0E00               	movlw	0
  2479  001344  6E18               	movwf	resetPosition@keepMovingZ^0,c
  2480                           
  2481                           ;motors.c: 227:         }else{
  2482  001346  EFA7  F009         	goto	l4161
  2483  00134A                     l127:
  2484  00134A  FFFF               	dw	65535	; assembler added errata NOP
  2485                           
  2486                           ;motors.c: 229:             LATCbits.LATC2 = 1;
  2487  00134C  848B               	bsf	139,2,c	;volatile
  2488  00134E                     l4161:
  2489  00134E  FFFF               	dw	65535	; assembler added errata NOP
  2490  001350  ECAF  F012         	call	_stepMade	;wreg free
  2491  001354  5012               	movf	?_stepMade^0,w,c
  2492  001356  1013               	iorwf	(?_stepMade+1)^0,w,c
  2493  001358  B4D8               	btfsc	status,2,c
  2494  00135A  EFB1  F009         	goto	u3621
  2495  00135E  EFB4  F009         	goto	u3620
  2496  001362                     u3621:
  2497  001362  FFFF               	dw	65535	; assembler added errata NOP
  2498  001364  EFA7  F009         	goto	l4161
  2499  001368                     u3620:
  2500  001368  FFFF               	dw	65535	; assembler added errata NOP
  2501  00136A                     
  2502                           ;motors.c: 236:         LATAbits.LATA2 = 0;
  2503  00136A  9489               	bcf	137,2,c	;volatile
  2504                           
  2505                           ;motors.c: 237:         LATBbits.LATB4 = 0;
  2506  00136C  988A               	bcf	138,4,c	;volatile
  2507                           
  2508                           ;motors.c: 238:         LATCbits.LATC2 = 0;
  2509  00136E  948B               	bcf	139,2,c	;volatile
  2510  001370                     l4163:
  2511  001370  FFFF               	dw	65535	; assembler added errata NOP
  2512  001372  ECAF  F012         	call	_stepMade	;wreg free
  2513  001376  5012               	movf	?_stepMade^0,w,c
  2514  001378  1013               	iorwf	(?_stepMade+1)^0,w,c
  2515  00137A  B4D8               	btfsc	status,2,c
  2516  00137C  EFC2  F009         	goto	u3631
  2517  001380  EFC5  F009         	goto	u3630
  2518  001384                     u3631:
  2519  001384  FFFF               	dw	65535	; assembler added errata NOP
  2520  001386  EFB8  F009         	goto	l4163
  2521  00138A                     u3630:
  2522  00138A                     l4165:
  2523  00138A  FFFF               	dw	65535	; assembler added errata NOP
  2524                           
  2525                           ;motors.c: 189:     while(keepMovingX || keepMovingY || keepMovingZ){
  2526  00138C  5016               	movf	resetPosition@keepMovingX^0,w,c
  2527  00138E  A4D8               	btfss	status,2,c
  2528  001390  EFCC  F009         	goto	u3641
  2529  001394  EFCF  F009         	goto	u3640
  2530  001398                     u3641:
  2531  001398  FFFF               	dw	65535	; assembler added errata NOP
  2532  00139A  EF44  F009         	goto	l4143
  2533  00139E                     u3640:
  2534  00139E  FFFF               	dw	65535	; assembler added errata NOP
  2535  0013A0  5017               	movf	resetPosition@keepMovingY^0,w,c
  2536  0013A2  A4D8               	btfss	status,2,c
  2537  0013A4  EFD6  F009         	goto	u3651
  2538  0013A8  EFD9  F009         	goto	u3650
  2539  0013AC                     u3651:
  2540  0013AC  FFFF               	dw	65535	; assembler added errata NOP
  2541  0013AE  EF44  F009         	goto	l4143
  2542  0013B2                     u3650:
  2543  0013B2  FFFF               	dw	65535	; assembler added errata NOP
  2544  0013B4  5018               	movf	resetPosition@keepMovingZ^0,w,c
  2545  0013B6  A4D8               	btfss	status,2,c
  2546  0013B8  EFE0  F009         	goto	u3661
  2547  0013BC  EFE3  F009         	goto	u3660
  2548  0013C0                     u3661:
  2549  0013C0  FFFF               	dw	65535	; assembler added errata NOP
  2550  0013C2  EF44  F009         	goto	l4143
  2551  0013C6                     u3660:
  2552  0013C6                     l118:
  2553  0013C6  FFFF               	dw	65535	; assembler added errata NOP
  2554                           
  2555                           ;motors.c: 245:     T0CONbits.TMR0ON = 0;
  2556  0013C8  9ED5               	bcf	213,7,c	;volatile
  2557                           
  2558                           ;motors.c: 246:     T2CONbits.TMR2ON = 0;
  2559  0013CA  94CA               	bcf	202,2,c	;volatile
  2560  0013CC                     
  2561                           ;motors.c: 248:     TMR0 = 0;
  2562  0013CC  0E00               	movlw	0
  2563  0013CE  6ED7               	movwf	215,c	;volatile
  2564  0013D0  0E00               	movlw	0
  2565  0013D2  6ED6               	movwf	214,c	;volatile
  2566                           
  2567                           ;motors.c: 249:     TMR2 = 0;
  2568  0013D4  0E00               	movlw	0
  2569  0013D6  6ECC               	movwf	204,c	;volatile
  2570  0013D8                     
  2571                           ;motors.c: 252:     resetStep();
  2572  0013D8  EC13  F013         	call	_resetStep	;wreg free
  2573  0013DC                     
  2574                           ;motors.c: 255:     return(tm0Error);
  2575  0013DC  505B               	movf	_tm0Error^0,w,c
  2576  0013DE  0012               	return		;funcret
  2577  0013E0  FFFF               	dw	65535	; errata NOP
  2578  0013E2                     __end_of_resetPosition:
  2579                           	callstack 0
  2580                           
  2581 ;; *************** function _setStep *****************
  2582 ;; Defined at:
  2583 ;;		line 67 in file "motors.c"
  2584 ;; Parameters:    Size  Location     Type
  2585 ;;  step            1    wreg     unsigned char 
  2586 ;;  motor           1   17[COMRAM] unsigned char 
  2587 ;; Auto vars:     Size  Location     Type
  2588 ;;  step            1   20[COMRAM] unsigned char 
  2589 ;; Return value:  Size  Location     Type
  2590 ;;                  1    wreg      void 
  2591 ;; Registers used:
  2592 ;;		wreg, status,2, status,0
  2593 ;; Tracked objects:
  2594 ;;		On entry : 0/0
  2595 ;;		On exit  : 0/0
  2596 ;;		Unchanged: 0/0
  2597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2598 ;;      Params:         1       0       0       0       0       0       0
  2599 ;;      Locals:         1       0       0       0       0       0       0
  2600 ;;      Temps:          2       0       0       0       0       0       0
  2601 ;;      Totals:         4       0       0       0       0       0       0
  2602 ;;Total ram usage:        4 bytes
  2603 ;; Hardware stack levels used:    1
  2604 ;; Hardware stack levels required when called:    4
  2605 ;; This function calls:
  2606 ;;		Nothing
  2607 ;; This function is called by:
  2608 ;;		_resetPosition
  2609 ;; This function uses a non-reentrant model
  2610 ;;
  2611                           
  2612                           	psect	text10
  2613  001EE6                     __ptext10:
  2614                           	callstack 0
  2615  001EE6                     _setStep:
  2616                           	callstack 0
  2617  001EE6  FFFF               	dw	65535	; assembler added errata NOP
  2618                           
  2619                           ;incstack = 0
  2620                           ;setStep@step stored from wreg
  2621  001EE8  6E15               	movwf	setStep@step^0,c
  2622  001EEA                     
  2623                           ;motors.c: 68:     switch(motor){
  2624  001EEA  EFC0  F00F         	goto	l3795
  2625  001EEE                     l3787:
  2626  001EEE  FFFF               	dw	65535	; assembler added errata NOP
  2627                           
  2628                           ;motors.c: 71:             LATAbits.LATA5 = (step & 0x01);
  2629  001EF0  C015  F013         	movff	setStep@step,??_setStep
  2630  001EF4  0E01               	movlw	1
  2631  001EF6  1613               	andwf	??_setStep^0,f,c
  2632  001EF8  3A13               	swapf	??_setStep^0,f,c
  2633  001EFA  4613               	rlncf	??_setStep^0,f,c
  2634  001EFC  5089               	movf	137,w,c	;volatile
  2635  001EFE  1813               	xorwf	??_setStep^0,w,c
  2636  001F00  0BDF               	andlw	-33
  2637  001F02  1813               	xorwf	??_setStep^0,w,c
  2638  001F04  6E89               	movwf	137,c	;volatile
  2639                           
  2640                           ;motors.c: 73:             LATBbits.LATB0 = (step & 0x02);
  2641  001F06  C015  F013         	movff	setStep@step,??_setStep
  2642  001F0A  0E02               	movlw	2
  2643  001F0C  1613               	andwf	??_setStep^0,f,c
  2644  001F0E  508A               	movf	138,w,c	;volatile
  2645  001F10  1813               	xorwf	??_setStep^0,w,c
  2646  001F12  0BFE               	andlw	-2
  2647  001F14  1813               	xorwf	??_setStep^0,w,c
  2648  001F16  6E8A               	movwf	138,c	;volatile
  2649                           
  2650                           ;motors.c: 74:             break;
  2651  001F18  EFDB  F00F         	goto	l85
  2652  001F1C                     l3789:
  2653  001F1C  FFFF               	dw	65535	; assembler added errata NOP
  2654                           
  2655                           ;motors.c: 76:             LATBbits.LATB6 = (step & 0x01);
  2656  001F1E  C015  F013         	movff	setStep@step,??_setStep
  2657  001F22  0E01               	movlw	1
  2658  001F24  1613               	andwf	??_setStep^0,f,c
  2659  001F26  3A13               	swapf	??_setStep^0,f,c
  2660  001F28  4613               	rlncf	??_setStep^0,f,c
  2661  001F2A  4613               	rlncf	??_setStep^0,f,c
  2662  001F2C  508A               	movf	138,w,c	;volatile
  2663  001F2E  1813               	xorwf	??_setStep^0,w,c
  2664  001F30  0BBF               	andlw	-65
  2665  001F32  1813               	xorwf	??_setStep^0,w,c
  2666  001F34  6E8A               	movwf	138,c	;volatile
  2667                           
  2668                           ;motors.c: 77:             LATBbits.LATB7 = (step & 0x02);
  2669  001F36  C015  F013         	movff	setStep@step,??_setStep
  2670  001F3A  0E02               	movlw	2
  2671  001F3C  1613               	andwf	??_setStep^0,f,c
  2672  001F3E  3213               	rrcf	??_setStep^0,f,c
  2673  001F40  3213               	rrcf	??_setStep^0,f,c
  2674  001F42  508A               	movf	138,w,c	;volatile
  2675  001F44  1813               	xorwf	??_setStep^0,w,c
  2676  001F46  0B7F               	andlw	-129
  2677  001F48  1813               	xorwf	??_setStep^0,w,c
  2678  001F4A  6E8A               	movwf	138,c	;volatile
  2679                           
  2680                           ;motors.c: 78:             break;
  2681  001F4C  EFDB  F00F         	goto	l85
  2682  001F50                     l3791:
  2683  001F50  FFFF               	dw	65535	; assembler added errata NOP
  2684                           
  2685                           ;motors.c: 80:             LATCbits.LATC4 = (step & 0x01);
  2686  001F52  C015  F013         	movff	setStep@step,??_setStep
  2687  001F56  0E01               	movlw	1
  2688  001F58  1613               	andwf	??_setStep^0,f,c
  2689  001F5A  3A13               	swapf	??_setStep^0,f,c
  2690  001F5C  508B               	movf	139,w,c	;volatile
  2691  001F5E  1813               	xorwf	??_setStep^0,w,c
  2692  001F60  0BEF               	andlw	-17
  2693  001F62  1813               	xorwf	??_setStep^0,w,c
  2694  001F64  6E8B               	movwf	139,c	;volatile
  2695                           
  2696                           ;motors.c: 81:             LATCbits.LATC5 = (step & 0x02);
  2697  001F66  C015  F013         	movff	setStep@step,??_setStep
  2698  001F6A  0E02               	movlw	2
  2699  001F6C  1613               	andwf	??_setStep^0,f,c
  2700  001F6E  3A13               	swapf	??_setStep^0,f,c
  2701  001F70  4613               	rlncf	??_setStep^0,f,c
  2702  001F72  508B               	movf	139,w,c	;volatile
  2703  001F74  1813               	xorwf	??_setStep^0,w,c
  2704  001F76  0BDF               	andlw	-33
  2705  001F78  1813               	xorwf	??_setStep^0,w,c
  2706  001F7A  6E8B               	movwf	139,c	;volatile
  2707                           
  2708                           ;motors.c: 82:             break;
  2709  001F7C  EFDB  F00F         	goto	l85
  2710  001F80                     l3795:
  2711  001F80  FFFF               	dw	65535	; assembler added errata NOP
  2712  001F82  5012               	movf	setStep@motor^0,w,c
  2713  001F84  6E13               	movwf	??_setStep^0,c
  2714  001F86  6A14               	clrf	(??_setStep+1)^0,c
  2715                           
  2716                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2717                           ; Switch size 1, requested type "simple"
  2718                           ; Number of cases is 1, Range of values is 0 to 0
  2719                           ; switch strategies available:
  2720                           ; Name         Instructions Cycles
  2721                           ; simple_byte            4     3 (average)
  2722                           ;	Chosen strategy is simple_byte
  2723  001F88  5014               	movf	(??_setStep+1)^0,w,c
  2724  001F8A  0A00               	xorlw	0	; case 0
  2725  001F8C  B4D8               	btfsc	status,2,c
  2726  001F8E  EFCB  F00F         	goto	l4655
  2727  001F92  EFDB  F00F         	goto	l85
  2728  001F96                     l4655:
  2729  001F96  FFFF               	dw	65535	; assembler added errata NOP
  2730                           
  2731                           ; Switch size 1, requested type "simple"
  2732                           ; Number of cases is 3, Range of values is 0 to 2
  2733                           ; switch strategies available:
  2734                           ; Name         Instructions Cycles
  2735                           ; simple_byte           10     6 (average)
  2736                           ;	Chosen strategy is simple_byte
  2737  001F98  5013               	movf	??_setStep^0,w,c
  2738  001F9A  0A00               	xorlw	0	; case 0
  2739  001F9C  B4D8               	btfsc	status,2,c
  2740  001F9E  EF77  F00F         	goto	l3787
  2741  001FA2  0A01               	xorlw	1	; case 1
  2742  001FA4  B4D8               	btfsc	status,2,c
  2743  001FA6  EF8E  F00F         	goto	l3789
  2744  001FAA  0A03               	xorlw	3	; case 2
  2745  001FAC  B4D8               	btfsc	status,2,c
  2746  001FAE  EFA8  F00F         	goto	l3791
  2747  001FB2  EFDB  F00F         	goto	l85
  2748  001FB6                     l85:
  2749  001FB6  FFFF               	dw	65535	; assembler added errata NOP
  2750  001FB8  0012               	return		;funcret
  2751  001FBA  FFFF               	dw	65535	; errata NOP
  2752  001FBC                     __end_of_setStep:
  2753                           	callstack 0
  2754                           
  2755 ;; *************** function _setDecay *****************
  2756 ;; Defined at:
  2757 ;;		line 136 in file "motors.c"
  2758 ;; Parameters:    Size  Location     Type
  2759 ;;  decay           1    wreg     unsigned char 
  2760 ;;  motor           1   17[COMRAM] unsigned char 
  2761 ;; Auto vars:     Size  Location     Type
  2762 ;;  decay           1   20[COMRAM] unsigned char 
  2763 ;; Return value:  Size  Location     Type
  2764 ;;                  1    wreg      void 
  2765 ;; Registers used:
  2766 ;;		wreg, status,2, status,0
  2767 ;; Tracked objects:
  2768 ;;		On entry : 0/0
  2769 ;;		On exit  : 0/0
  2770 ;;		Unchanged: 0/0
  2771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2772 ;;      Params:         1       0       0       0       0       0       0
  2773 ;;      Locals:         1       0       0       0       0       0       0
  2774 ;;      Temps:          2       0       0       0       0       0       0
  2775 ;;      Totals:         4       0       0       0       0       0       0
  2776 ;;Total ram usage:        4 bytes
  2777 ;; Hardware stack levels used:    1
  2778 ;; Hardware stack levels required when called:    4
  2779 ;; This function calls:
  2780 ;;		Nothing
  2781 ;; This function is called by:
  2782 ;;		_resetPosition
  2783 ;; This function uses a non-reentrant model
  2784 ;;
  2785                           
  2786                           	psect	text11
  2787  0020F2                     __ptext11:
  2788                           	callstack 0
  2789  0020F2                     _setDecay:
  2790                           	callstack 0
  2791  0020F2  FFFF               	dw	65535	; assembler added errata NOP
  2792                           
  2793                           ;incstack = 0
  2794                           ;setDecay@decay stored from wreg
  2795  0020F4  6E15               	movwf	setDecay@decay^0,c
  2796  0020F6                     
  2797                           ;motors.c: 137:     switch(motor){
  2798  0020F6  EF95  F010         	goto	l3827
  2799  0020FA                     l3819:
  2800  0020FA  FFFF               	dw	65535	; assembler added errata NOP
  2801                           
  2802                           ;motors.c: 139:             LATBbits.LATB2 = decay;
  2803  0020FC  B015               	btfsc	setDecay@decay^0,0,c
  2804  0020FE  D002               	bra	u3115
  2805  002100  948A               	bcf	138,2,c	;volatile
  2806  002102  D001               	bra	u3116
  2807  002104                     u3115:
  2808  002104  848A               	bsf	138,2,c	;volatile
  2809  002106                     u3116:
  2810                           
  2811                           ;motors.c: 140:             break;
  2812  002106  EFB0  F010         	goto	l112
  2813  00210A                     l3821:
  2814  00210A  FFFF               	dw	65535	; assembler added errata NOP
  2815                           
  2816                           ;motors.c: 142:             LATCbits.LATC0 = decay;
  2817  00210C  B015               	btfsc	setDecay@decay^0,0,c
  2818  00210E  D002               	bra	u3125
  2819  002110  908B               	bcf	139,0,c	;volatile
  2820  002112  D001               	bra	u3126
  2821  002114                     u3125:
  2822  002114  808B               	bsf	139,0,c	;volatile
  2823  002116                     u3126:
  2824                           
  2825                           ;motors.c: 143:             break;
  2826  002116  EFB0  F010         	goto	l112
  2827  00211A                     l3823:
  2828  00211A  FFFF               	dw	65535	; assembler added errata NOP
  2829                           
  2830                           ;motors.c: 145:             LATDbits.LATD0 = decay;
  2831  00211C  B015               	btfsc	setDecay@decay^0,0,c
  2832  00211E  D002               	bra	u3135
  2833  002120  908C               	bcf	140,0,c	;volatile
  2834  002122  D001               	bra	u3136
  2835  002124                     u3135:
  2836  002124  808C               	bsf	140,0,c	;volatile
  2837  002126                     u3136:
  2838                           
  2839                           ;motors.c: 146:             break;
  2840  002126  EFB0  F010         	goto	l112
  2841  00212A                     l3827:
  2842  00212A  FFFF               	dw	65535	; assembler added errata NOP
  2843  00212C  5012               	movf	setDecay@motor^0,w,c
  2844  00212E  6E13               	movwf	??_setDecay^0,c
  2845  002130  6A14               	clrf	(??_setDecay+1)^0,c
  2846                           
  2847                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2848                           ; Switch size 1, requested type "simple"
  2849                           ; Number of cases is 1, Range of values is 0 to 0
  2850                           ; switch strategies available:
  2851                           ; Name         Instructions Cycles
  2852                           ; simple_byte            4     3 (average)
  2853                           ;	Chosen strategy is simple_byte
  2854  002132  5014               	movf	(??_setDecay+1)^0,w,c
  2855  002134  0A00               	xorlw	0	; case 0
  2856  002136  B4D8               	btfsc	status,2,c
  2857  002138  EFA0  F010         	goto	l4657
  2858  00213C  EFB0  F010         	goto	l112
  2859  002140                     l4657:
  2860  002140  FFFF               	dw	65535	; assembler added errata NOP
  2861                           
  2862                           ; Switch size 1, requested type "simple"
  2863                           ; Number of cases is 3, Range of values is 0 to 2
  2864                           ; switch strategies available:
  2865                           ; Name         Instructions Cycles
  2866                           ; simple_byte           10     6 (average)
  2867                           ;	Chosen strategy is simple_byte
  2868  002142  5013               	movf	??_setDecay^0,w,c
  2869  002144  0A00               	xorlw	0	; case 0
  2870  002146  B4D8               	btfsc	status,2,c
  2871  002148  EF7D  F010         	goto	l3819
  2872  00214C  0A01               	xorlw	1	; case 1
  2873  00214E  B4D8               	btfsc	status,2,c
  2874  002150  EF85  F010         	goto	l3821
  2875  002154  0A03               	xorlw	3	; case 2
  2876  002156  B4D8               	btfsc	status,2,c
  2877  002158  EF8D  F010         	goto	l3823
  2878  00215C  EFB0  F010         	goto	l112
  2879  002160                     l112:
  2880  002160  FFFF               	dw	65535	; assembler added errata NOP
  2881  002162  0012               	return		;funcret
  2882  002164  FFFF               	dw	65535	; errata NOP
  2883  002166                     __end_of_setDecay:
  2884                           	callstack 0
  2885                           
  2886 ;; *************** function _enableMotor *****************
  2887 ;; Defined at:
  2888 ;;		line 94 in file "motors.c"
  2889 ;; Parameters:    Size  Location     Type
  2890 ;;  enable          1    wreg     unsigned char 
  2891 ;;  motor           1   17[COMRAM] unsigned char 
  2892 ;; Auto vars:     Size  Location     Type
  2893 ;;  enable          1   20[COMRAM] unsigned char 
  2894 ;; Return value:  Size  Location     Type
  2895 ;;                  1    wreg      void 
  2896 ;; Registers used:
  2897 ;;		wreg, status,2, status,0
  2898 ;; Tracked objects:
  2899 ;;		On entry : 0/0
  2900 ;;		On exit  : 0/0
  2901 ;;		Unchanged: 0/0
  2902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2903 ;;      Params:         1       0       0       0       0       0       0
  2904 ;;      Locals:         1       0       0       0       0       0       0
  2905 ;;      Temps:          2       0       0       0       0       0       0
  2906 ;;      Totals:         4       0       0       0       0       0       0
  2907 ;;Total ram usage:        4 bytes
  2908 ;; Hardware stack levels used:    1
  2909 ;; Hardware stack levels required when called:    4
  2910 ;; This function calls:
  2911 ;;		Nothing
  2912 ;; This function is called by:
  2913 ;;		_resetPosition
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           	psect	text12
  2918  002166                     __ptext12:
  2919                           	callstack 0
  2920  002166                     _enableMotor:
  2921                           	callstack 0
  2922  002166  FFFF               	dw	65535	; assembler added errata NOP
  2923                           
  2924                           ;incstack = 0
  2925                           ;enableMotor@enable stored from wreg
  2926  002168  6E15               	movwf	enableMotor@enable^0,c
  2927  00216A                     
  2928                           ;motors.c: 95:     switch(motor){
  2929  00216A  EFCF  F010         	goto	l3811
  2930  00216E                     l3803:
  2931  00216E  FFFF               	dw	65535	; assembler added errata NOP
  2932                           
  2933                           ;motors.c: 97:             LATAbits.LATA3 = enable;
  2934  002170  B015               	btfsc	enableMotor@enable^0,0,c
  2935  002172  D002               	bra	u3085
  2936  002174  9689               	bcf	137,3,c	;volatile
  2937  002176  D001               	bra	u3086
  2938  002178                     u3085:
  2939  002178  8689               	bsf	137,3,c	;volatile
  2940  00217A                     u3086:
  2941                           
  2942                           ;motors.c: 98:             break;
  2943  00217A  EFEA  F010         	goto	l94
  2944  00217E                     l3805:
  2945  00217E  FFFF               	dw	65535	; assembler added errata NOP
  2946                           
  2947                           ;motors.c: 100:             LATBbits.LATB5 = enable;
  2948  002180  B015               	btfsc	enableMotor@enable^0,0,c
  2949  002182  D002               	bra	u3095
  2950  002184  9A8A               	bcf	138,5,c	;volatile
  2951  002186  D001               	bra	u3096
  2952  002188                     u3095:
  2953  002188  8A8A               	bsf	138,5,c	;volatile
  2954  00218A                     u3096:
  2955                           
  2956                           ;motors.c: 101:             break;
  2957  00218A  EFEA  F010         	goto	l94
  2958  00218E                     l3807:
  2959  00218E  FFFF               	dw	65535	; assembler added errata NOP
  2960                           
  2961                           ;motors.c: 103:             LATCbits.LATC3 = enable;
  2962  002190  B015               	btfsc	enableMotor@enable^0,0,c
  2963  002192  D002               	bra	u3105
  2964  002194  968B               	bcf	139,3,c	;volatile
  2965  002196  D001               	bra	u3106
  2966  002198                     u3105:
  2967  002198  868B               	bsf	139,3,c	;volatile
  2968  00219A                     u3106:
  2969                           
  2970                           ;motors.c: 104:             break;
  2971  00219A  EFEA  F010         	goto	l94
  2972  00219E                     l3811:
  2973  00219E  FFFF               	dw	65535	; assembler added errata NOP
  2974  0021A0  5012               	movf	enableMotor@motor^0,w,c
  2975  0021A2  6E13               	movwf	??_enableMotor^0,c
  2976  0021A4  6A14               	clrf	(??_enableMotor+1)^0,c
  2977                           
  2978                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2979                           ; Switch size 1, requested type "simple"
  2980                           ; Number of cases is 1, Range of values is 0 to 0
  2981                           ; switch strategies available:
  2982                           ; Name         Instructions Cycles
  2983                           ; simple_byte            4     3 (average)
  2984                           ;	Chosen strategy is simple_byte
  2985  0021A6  5014               	movf	(??_enableMotor+1)^0,w,c
  2986  0021A8  0A00               	xorlw	0	; case 0
  2987  0021AA  B4D8               	btfsc	status,2,c
  2988  0021AC  EFDA  F010         	goto	l4659
  2989  0021B0  EFEA  F010         	goto	l94
  2990  0021B4                     l4659:
  2991  0021B4  FFFF               	dw	65535	; assembler added errata NOP
  2992                           
  2993                           ; Switch size 1, requested type "simple"
  2994                           ; Number of cases is 3, Range of values is 0 to 2
  2995                           ; switch strategies available:
  2996                           ; Name         Instructions Cycles
  2997                           ; simple_byte           10     6 (average)
  2998                           ;	Chosen strategy is simple_byte
  2999  0021B6  5013               	movf	??_enableMotor^0,w,c
  3000  0021B8  0A00               	xorlw	0	; case 0
  3001  0021BA  B4D8               	btfsc	status,2,c
  3002  0021BC  EFB7  F010         	goto	l3803
  3003  0021C0  0A01               	xorlw	1	; case 1
  3004  0021C2  B4D8               	btfsc	status,2,c
  3005  0021C4  EFBF  F010         	goto	l3805
  3006  0021C8  0A03               	xorlw	3	; case 2
  3007  0021CA  B4D8               	btfsc	status,2,c
  3008  0021CC  EFC7  F010         	goto	l3807
  3009  0021D0  EFEA  F010         	goto	l94
  3010  0021D4                     l94:
  3011  0021D4  FFFF               	dw	65535	; assembler added errata NOP
  3012  0021D6  0012               	return		;funcret
  3013  0021D8  FFFF               	dw	65535	; errata NOP
  3014  0021DA                     __end_of_enableMotor:
  3015                           	callstack 0
  3016                           
  3017 ;; *************** function _resetNewSequence *****************
  3018 ;; Defined at:
  3019 ;;		line 112 in file "usart.c"
  3020 ;; Parameters:    Size  Location     Type
  3021 ;;		None
  3022 ;; Auto vars:     Size  Location     Type
  3023 ;;		None
  3024 ;; Return value:  Size  Location     Type
  3025 ;;                  1    wreg      void 
  3026 ;; Registers used:
  3027 ;;		wreg, status,2
  3028 ;; Tracked objects:
  3029 ;;		On entry : 0/0
  3030 ;;		On exit  : 0/0
  3031 ;;		Unchanged: 0/0
  3032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3033 ;;      Params:         0       0       0       0       0       0       0
  3034 ;;      Locals:         0       0       0       0       0       0       0
  3035 ;;      Temps:          0       0       0       0       0       0       0
  3036 ;;      Totals:         0       0       0       0       0       0       0
  3037 ;;Total ram usage:        0 bytes
  3038 ;; Hardware stack levels used:    1
  3039 ;; Hardware stack levels required when called:    4
  3040 ;; This function calls:
  3041 ;;		Nothing
  3042 ;; This function is called by:
  3043 ;;		_main
  3044 ;; This function uses a non-reentrant model
  3045 ;;
  3046                           
  3047                           	psect	text13
  3048  0025FE                     __ptext13:
  3049                           	callstack 0
  3050  0025FE                     _resetNewSequence:
  3051                           	callstack 0
  3052  0025FE  FFFF               	dw	65535	; assembler added errata NOP
  3053  002600                     
  3054                           ;usart.c: 113:     _newSequence = 0;
  3055  002600  0E00               	movlw	0
  3056  002602  6E5F               	movwf	__newSequence^0,c
  3057  002604  0012               	return		;funcret
  3058  002606  FFFF               	dw	65535	; errata NOP
  3059  002608                     __end_of_resetNewSequence:
  3060                           	callstack 0
  3061                           
  3062 ;; *************** function _reduceSeq *****************
  3063 ;; Defined at:
  3064 ;;		line 89 in file "usart.c"
  3065 ;; Parameters:    Size  Location     Type
  3066 ;;		None
  3067 ;; Auto vars:     Size  Location     Type
  3068 ;;		None
  3069 ;; Return value:  Size  Location     Type
  3070 ;;                  1    wreg      void 
  3071 ;; Registers used:
  3072 ;;		status,2, status,0
  3073 ;; Tracked objects:
  3074 ;;		On entry : 0/0
  3075 ;;		On exit  : 0/0
  3076 ;;		Unchanged: 0/0
  3077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3078 ;;      Params:         0       0       0       0       0       0       0
  3079 ;;      Locals:         0       0       0       0       0       0       0
  3080 ;;      Temps:          0       0       0       0       0       0       0
  3081 ;;      Totals:         0       0       0       0       0       0       0
  3082 ;;Total ram usage:        0 bytes
  3083 ;; Hardware stack levels used:    1
  3084 ;; Hardware stack levels required when called:    4
  3085 ;; This function calls:
  3086 ;;		Nothing
  3087 ;; This function is called by:
  3088 ;;		_main
  3089 ;; This function uses a non-reentrant model
  3090 ;;
  3091                           
  3092                           	psect	text14
  3093  00264E                     __ptext14:
  3094                           	callstack 0
  3095  00264E                     _reduceSeq:
  3096                           	callstack 0
  3097  00264E  FFFF               	dw	65535	; assembler added errata NOP
  3098  002650                     
  3099                           ;usart.c: 90:     dataCounter--;
  3100  002650  0661               	decf	_dataCounter^0,f,c
  3101  002652  0012               	return		;funcret
  3102  002654  FFFF               	dw	65535	; errata NOP
  3103  002656                     __end_of_reduceSeq:
  3104                           	callstack 0
  3105                           
  3106 ;; *************** function _readSeq *****************
  3107 ;; Defined at:
  3108 ;;		line 96 in file "usart.c"
  3109 ;; Parameters:    Size  Location     Type
  3110 ;;		None
  3111 ;; Auto vars:     Size  Location     Type
  3112 ;;		None
  3113 ;; Return value:  Size  Location     Type
  3114 ;;                  1    wreg      unsigned char 
  3115 ;; Registers used:
  3116 ;;		wreg, status,2
  3117 ;; Tracked objects:
  3118 ;;		On entry : 0/0
  3119 ;;		On exit  : 0/0
  3120 ;;		Unchanged: 0/0
  3121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3122 ;;      Params:         0       0       0       0       0       0       0
  3123 ;;      Locals:         0       0       0       0       0       0       0
  3124 ;;      Temps:          0       0       0       0       0       0       0
  3125 ;;      Totals:         0       0       0       0       0       0       0
  3126 ;;Total ram usage:        0 bytes
  3127 ;; Hardware stack levels used:    1
  3128 ;; Hardware stack levels required when called:    4
  3129 ;; This function calls:
  3130 ;;		Nothing
  3131 ;; This function is called by:
  3132 ;;		_main
  3133 ;; This function uses a non-reentrant model
  3134 ;;
  3135                           
  3136                           	psect	text15
  3137  002656                     __ptext15:
  3138                           	callstack 0
  3139  002656                     _readSeq:
  3140                           	callstack 0
  3141  002656  FFFF               	dw	65535	; assembler added errata NOP
  3142  002658                     
  3143                           ;usart.c: 97:     return dataCounter;
  3144  002658  5061               	movf	_dataCounter^0,w,c
  3145  00265A  0012               	return		;funcret
  3146  00265C  FFFF               	dw	65535	; errata NOP
  3147  00265E                     __end_of_readSeq:
  3148                           	callstack 0
  3149                           
  3150 ;; *************** function _newSequence *****************
  3151 ;; Defined at:
  3152 ;;		line 104 in file "usart.c"
  3153 ;; Parameters:    Size  Location     Type
  3154 ;;		None
  3155 ;; Auto vars:     Size  Location     Type
  3156 ;;		None
  3157 ;; Return value:  Size  Location     Type
  3158 ;;                  1    wreg      unsigned char 
  3159 ;; Registers used:
  3160 ;;		wreg, status,2
  3161 ;; Tracked objects:
  3162 ;;		On entry : 0/0
  3163 ;;		On exit  : 0/0
  3164 ;;		Unchanged: 0/0
  3165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3166 ;;      Params:         0       0       0       0       0       0       0
  3167 ;;      Locals:         0       0       0       0       0       0       0
  3168 ;;      Temps:          0       0       0       0       0       0       0
  3169 ;;      Totals:         0       0       0       0       0       0       0
  3170 ;;Total ram usage:        0 bytes
  3171 ;; Hardware stack levels used:    1
  3172 ;; Hardware stack levels required when called:    4
  3173 ;; This function calls:
  3174 ;;		Nothing
  3175 ;; This function is called by:
  3176 ;;		_main
  3177 ;; This function uses a non-reentrant model
  3178 ;;
  3179                           
  3180                           	psect	text16
  3181  00265E                     __ptext16:
  3182                           	callstack 0
  3183  00265E                     _newSequence:
  3184                           	callstack 0
  3185  00265E  FFFF               	dw	65535	; assembler added errata NOP
  3186  002660                     
  3187                           ;usart.c: 105:     return _newSequence;
  3188  002660  505F               	movf	__newSequence^0,w,c
  3189  002662  0012               	return		;funcret
  3190  002664  FFFF               	dw	65535	; errata NOP
  3191  002666                     __end_of_newSequence:
  3192                           	callstack 0
  3193                           
  3194 ;; *************** function _interruptInit *****************
  3195 ;; Defined at:
  3196 ;;		line 96 in file "main.c"
  3197 ;; Parameters:    Size  Location     Type
  3198 ;;		None
  3199 ;; Auto vars:     Size  Location     Type
  3200 ;;		None
  3201 ;; Return value:  Size  Location     Type
  3202 ;;                  1    wreg      void 
  3203 ;; Registers used:
  3204 ;;		None
  3205 ;; Tracked objects:
  3206 ;;		On entry : 0/0
  3207 ;;		On exit  : 0/0
  3208 ;;		Unchanged: 0/0
  3209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3210 ;;      Params:         0       0       0       0       0       0       0
  3211 ;;      Locals:         0       0       0       0       0       0       0
  3212 ;;      Temps:          0       0       0       0       0       0       0
  3213 ;;      Totals:         0       0       0       0       0       0       0
  3214 ;;Total ram usage:        0 bytes
  3215 ;; Hardware stack levels used:    1
  3216 ;; Hardware stack levels required when called:    4
  3217 ;; This function calls:
  3218 ;;		Nothing
  3219 ;; This function is called by:
  3220 ;;		_main
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           	psect	text17
  3225  00241A                     __ptext17:
  3226                           	callstack 0
  3227  00241A                     _interruptInit:
  3228                           	callstack 0
  3229  00241A  FFFF               	dw	65535	; assembler added errata NOP
  3230  00241C                     
  3231                           ;main.c: 98:     if(!INTCONbits.GIE){
  3232  00241C  BEF2               	btfsc	242,7,c	;volatile
  3233  00241E  EF13  F012         	goto	u3671
  3234  002422  EF16  F012         	goto	u3670
  3235  002426                     u3671:
  3236  002426  FFFF               	dw	65535	; assembler added errata NOP
  3237  002428  EF18  F012         	goto	l338
  3238  00242C                     u3670:
  3239  00242C  FFFF               	dw	65535	; assembler added errata NOP
  3240  00242E                     
  3241                           ;main.c: 99:         INTCONbits.GIE = 1;
  3242  00242E  8EF2               	bsf	242,7,c	;volatile
  3243  002430                     l338:
  3244  002430  FFFF               	dw	65535	; assembler added errata NOP
  3245                           
  3246                           ;main.c: 101:     if(!INTCONbits.PEIE){
  3247  002432  BCF2               	btfsc	242,6,c	;volatile
  3248  002434  EF1E  F012         	goto	u3681
  3249  002438  EF21  F012         	goto	u3680
  3250  00243C                     u3681:
  3251  00243C  FFFF               	dw	65535	; assembler added errata NOP
  3252  00243E  EF23  F012         	goto	l339
  3253  002442                     u3680:
  3254  002442  FFFF               	dw	65535	; assembler added errata NOP
  3255  002444                     
  3256                           ;main.c: 102:         INTCONbits.PEIE = 1;
  3257  002444  8CF2               	bsf	242,6,c	;volatile
  3258  002446                     l339:
  3259  002446  FFFF               	dw	65535	; assembler added errata NOP
  3260                           
  3261                           ;main.c: 106:     RCONbits.IPEN = 1;
  3262  002448  8ED0               	bsf	208,7,c	;volatile
  3263                           
  3264                           ;main.c: 107:     INTCONbits.T0IE = 1;
  3265  00244A  8AF2               	bsf	242,5,c	;volatile
  3266                           
  3267                           ;main.c: 108:     PIE1bits.TMR2IE = 1;
  3268  00244C  829D               	bsf	157,1,c	;volatile
  3269                           
  3270                           ;main.c: 109:     PIE1bits.RC1IE = 1;
  3271  00244E  8A9D               	bsf	157,5,c	;volatile
  3272  002450  0012               	return		;funcret
  3273  002452  FFFF               	dw	65535	; errata NOP
  3274  002454                     __end_of_interruptInit:
  3275                           	callstack 0
  3276                           
  3277 ;; *************** function _initPinMotors *****************
  3278 ;; Defined at:
  3279 ;;		line 42 in file "motors.c"
  3280 ;; Parameters:    Size  Location     Type
  3281 ;;		None
  3282 ;; Auto vars:     Size  Location     Type
  3283 ;;		None
  3284 ;; Return value:  Size  Location     Type
  3285 ;;                  1    wreg      void 
  3286 ;; Registers used:
  3287 ;;		wreg, status,2, status,0
  3288 ;; Tracked objects:
  3289 ;;		On entry : 0/0
  3290 ;;		On exit  : 0/0
  3291 ;;		Unchanged: 0/0
  3292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3293 ;;      Params:         0       0       0       0       0       0       0
  3294 ;;      Locals:         0       0       0       0       0       0       0
  3295 ;;      Temps:          0       0       0       0       0       0       0
  3296 ;;      Totals:         0       0       0       0       0       0       0
  3297 ;;Total ram usage:        0 bytes
  3298 ;; Hardware stack levels used:    1
  3299 ;; Hardware stack levels required when called:    4
  3300 ;; This function calls:
  3301 ;;		Nothing
  3302 ;; This function is called by:
  3303 ;;		_main
  3304 ;; This function uses a non-reentrant model
  3305 ;;
  3306                           
  3307                           	psect	text18
  3308  0024DC                     __ptext18:
  3309                           	callstack 0
  3310  0024DC                     _initPinMotors:
  3311                           	callstack 0
  3312  0024DC  FFFF               	dw	65535	; assembler added errata NOP
  3313  0024DE                     
  3314                           ;motors.c: 44:     ADCON1bits.PCFG = 0x06;
  3315  0024DE  50C1               	movf	193,w,c	;volatile
  3316  0024E0  0BF0               	andlw	-16
  3317  0024E2  0906               	iorlw	6
  3318  0024E4  6EC1               	movwf	193,c	;volatile
  3319  0024E6                     
  3320                           ;motors.c: 45:     TRISA &= 0b11010001;
  3321  0024E6  0ED1               	movlw	209
  3322  0024E8  1692               	andwf	146,f,c	;volatile
  3323  0024EA                     
  3324                           ;motors.c: 47:     TRISB &= 0b00000010;
  3325  0024EA  0E02               	movlw	2
  3326  0024EC  1693               	andwf	147,f,c	;volatile
  3327  0024EE                     
  3328                           ;motors.c: 48:     TRISC &= 0b11000000;
  3329  0024EE  0EC0               	movlw	192
  3330  0024F0  1694               	andwf	148,f,c	;volatile
  3331  0024F2                     
  3332                           ;motors.c: 49:     TRISD &= 0b11000000;
  3333  0024F2  0EC0               	movlw	192
  3334  0024F4  1695               	andwf	149,f,c	;volatile
  3335  0024F6                     
  3336                           ;motors.c: 52:     TRISEbits.TRISE0 = 1;
  3337  0024F6  8096               	bsf	150,0,c	;volatile
  3338  0024F8                     
  3339                           ;motors.c: 53:     TRISEbits.TRISE1 = 1;
  3340  0024F8  8296               	bsf	150,1,c	;volatile
  3341  0024FA                     
  3342                           ;motors.c: 54:     TRISEbits.TRISE2 = 1;
  3343  0024FA  8496               	bsf	150,2,c	;volatile
  3344  0024FC                     
  3345                           ;motors.c: 57:     TRISDbits.TRISD7 = 1;
  3346  0024FC  8E95               	bsf	149,7,c	;volatile
  3347  0024FE  0012               	return		;funcret
  3348  002500  FFFF               	dw	65535	; errata NOP
  3349  002502                     __end_of_initPinMotors:
  3350                           	callstack 0
  3351                           
  3352 ;; *************** function _initADC *****************
  3353 ;; Defined at:
  3354 ;;		line 18 in file "adc.c"
  3355 ;; Parameters:    Size  Location     Type
  3356 ;;		None
  3357 ;; Auto vars:     Size  Location     Type
  3358 ;;		None
  3359 ;; Return value:  Size  Location     Type
  3360 ;;                  1    wreg      void 
  3361 ;; Registers used:
  3362 ;;		wreg, status,2
  3363 ;; Tracked objects:
  3364 ;;		On entry : 0/0
  3365 ;;		On exit  : 0/0
  3366 ;;		Unchanged: 0/0
  3367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3368 ;;      Params:         0       0       0       0       0       0       0
  3369 ;;      Locals:         0       0       0       0       0       0       0
  3370 ;;      Temps:          0       0       0       0       0       0       0
  3371 ;;      Totals:         0       0       0       0       0       0       0
  3372 ;;Total ram usage:        0 bytes
  3373 ;; Hardware stack levels used:    1
  3374 ;; Hardware stack levels required when called:    4
  3375 ;; This function calls:
  3376 ;;		Nothing
  3377 ;; This function is called by:
  3378 ;;		_main
  3379 ;; This function uses a non-reentrant model
  3380 ;;
  3381                           
  3382                           	psect	text19
  3383  002502                     __ptext19:
  3384                           	callstack 0
  3385  002502                     _initADC:
  3386                           	callstack 0
  3387  002502  FFFF               	dw	65535	; assembler added errata NOP
  3388  002504                     
  3389                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  3390  002504  50C2               	movf	194,w,c	;volatile
  3391  002506  0B3F               	andlw	-193
  3392  002508  0940               	iorlw	64
  3393  00250A  6EC2               	movwf	194,c	;volatile
  3394  00250C                     
  3395                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  3396  00250C  8CC1               	bsf	193,6,c	;volatile
  3397                           
  3398                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  3399  00250E  0EC7               	movlw	-57
  3400  002510  16C2               	andwf	194,f,c	;volatile
  3401  002512                     
  3402                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  3403  002512  94C2               	bcf	194,2,c	;volatile
  3404  002514                     
  3405                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  3406  002514  90C2               	bcf	194,0,c	;volatile
  3407  002516                     
  3408                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  3409  002516  9EC1               	bcf	193,7,c	;volatile
  3410                           
  3411                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  3412  002518  50C1               	movf	193,w,c	;volatile
  3413  00251A  0BF0               	andlw	-16
  3414  00251C  090E               	iorlw	14
  3415  00251E  6EC1               	movwf	193,c	;volatile
  3416  002520                     
  3417                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  3418  002520  8C9D               	bsf	157,6,c	;volatile
  3419  002522                     
  3420                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  3421  002522  8C9F               	bsf	159,6,c	;volatile
  3422  002524  0012               	return		;funcret
  3423  002526  FFFF               	dw	65535	; errata NOP
  3424  002528                     __end_of_initADC:
  3425                           	callstack 0
  3426                           
  3427 ;; *************** function _getNewSequence *****************
  3428 ;; Defined at:
  3429 ;;		line 213 in file "usart.c"
  3430 ;; Parameters:    Size  Location     Type
  3431 ;;		None
  3432 ;; Auto vars:     Size  Location     Type
  3433 ;;		None
  3434 ;; Return value:  Size  Location     Type
  3435 ;;                  2   17[COMRAM] PTR struct .
  3436 ;; Registers used:
  3437 ;;		wreg, status,2, status,0
  3438 ;; Tracked objects:
  3439 ;;		On entry : 0/0
  3440 ;;		On exit  : 0/0
  3441 ;;		Unchanged: 0/0
  3442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3443 ;;      Params:         2       0       0       0       0       0       0
  3444 ;;      Locals:         0       0       0       0       0       0       0
  3445 ;;      Temps:          0       0       0       0       0       0       0
  3446 ;;      Totals:         2       0       0       0       0       0       0
  3447 ;;Total ram usage:        2 bytes
  3448 ;; Hardware stack levels used:    1
  3449 ;; Hardware stack levels required when called:    4
  3450 ;; This function calls:
  3451 ;;		Nothing
  3452 ;; This function is called by:
  3453 ;;		_main
  3454 ;; This function uses a non-reentrant model
  3455 ;;
  3456                           
  3457                           	psect	text20
  3458  002594                     __ptext20:
  3459                           	callstack 0
  3460  002594                     _getNewSequence:
  3461                           	callstack 0
  3462  002594  FFFF               	dw	65535	; assembler added errata NOP
  3463  002596                     
  3464                           ;usart.c: 214:     return(&newSequenceData);
  3465  002596  0EEF               	movlw	low _newSequenceData
  3466  002598  6E12               	movwf	?_getNewSequence^0,c
  3467  00259A  0E00               	movlw	high _newSequenceData
  3468  00259C  6E13               	movwf	(?_getNewSequence+1)^0,c
  3469  00259E  0012               	return		;funcret
  3470  0025A0  FFFF               	dw	65535	; errata NOP
  3471  0025A2                     __end_of_getNewSequence:
  3472                           	callstack 0
  3473                           
  3474 ;; *************** function _executeData *****************
  3475 ;; Defined at:
  3476 ;;		line 119 in file "main.c"
  3477 ;; Parameters:    Size  Location     Type
  3478 ;;		None
  3479 ;; Auto vars:     Size  Location     Type
  3480 ;;  data            2    1[BANK1 ] PTR struct .
  3481 ;;		 -> dataSequence(20), 
  3482 ;;  errCode         1    0[BANK1 ] unsigned char 
  3483 ;; Return value:  Size  Location     Type
  3484 ;;                  1    wreg      unsigned char 
  3485 ;; Registers used:
  3486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3487 ;; Tracked objects:
  3488 ;;		On entry : 0/0
  3489 ;;		On exit  : 0/0
  3490 ;;		Unchanged: 0/0
  3491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3492 ;;      Params:         0       0       0       0       0       0       0
  3493 ;;      Locals:         0       0       3       0       0       0       0
  3494 ;;      Temps:          2       0       0       0       0       0       0
  3495 ;;      Totals:         2       0       3       0       0       0       0
  3496 ;;Total ram usage:        5 bytes
  3497 ;; Hardware stack levels used:    1
  3498 ;; Hardware stack levels required when called:    6
  3499 ;; This function calls:
  3500 ;;		_getData
  3501 ;;		_liftArm
  3502 ;;		_moveToPoint
  3503 ;;		_pickObject
  3504 ;;		_releaseObj
  3505 ;;		_rotateObj
  3506 ;;		_touchObject
  3507 ;;		_touchTherm
  3508 ;; This function is called by:
  3509 ;;		_main
  3510 ;; This function uses a non-reentrant model
  3511 ;;
  3512                           
  3513                           	psect	text21
  3514  000D68                     __ptext21:
  3515                           	callstack 0
  3516  000D68                     _executeData:
  3517                           	callstack 0
  3518  000D68  FFFF               	dw	65535	; assembler added errata NOP
  3519  000D6A                     
  3520                           ;main.c: 120:     t_sequence *data = getData();
  3521  000D6A  ECD1  F012         	call	_getData	;wreg free
  3522  000D6E  C012  F1D7         	movff	?_getData,executeData@data
  3523  000D72  C013  F1D8         	movff	?_getData+1,executeData@data+1
  3524  000D76                     
  3525                           ;main.c: 126:     switch(data->feederLine){
  3526  000D76  EF67  F007         	goto	l4307
  3527  000D7A                     l4279:
  3528  000D7A  FFFF               	dw	65535	; assembler added errata NOP
  3529                           
  3530                           ;main.c: 129:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0
      +                          ], feeder1Pos[1]);
  3531  000D7C  C04E  F016         	movff	_posVector,moveToPoint@x1
  3532  000D80  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3533  000D82  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3534  000D86  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3535  000D88  0E0D               	movlw	low _feeder1Pos
  3536  000D8A  6EF6               	movwf	tblptrl,c
  3537  000D8C                     	if	1	;There is more than 1 active tblptr byte
  3538  000D8C  0E06               	movlw	high _feeder1Pos
  3539  000D8E  6EF7               	movwf	tblptrh,c
  3540  000D90                     	endif
  3541  000D90                     	if	0	;There are less than 3 active tblptr bytes
  3542  000D90                     	endif
  3543  000D90  0008               	tblrd		*
  3544  000D92  FFFF               	dw	65535	; errata NOP
  3545  000D94  50F5               	movf	tablat,w,c
  3546  000D96  6E1A               	movwf	moveToPoint@x2^0,c
  3547  000D98  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3548  000D9A  0E0E               	movlw	low (_feeder1Pos+1)
  3549  000D9C  6EF6               	movwf	tblptrl,c
  3550  000D9E  0E06               	movlw	high (_feeder1Pos+1)
  3551  000DA0  6EF7               	movwf	tblptrh,c
  3552  000DA2                     	if	0	;tblptru may be non-zero
  3553  000DA2                     	endif
  3554  000DA2                     	if	0	;tblptru may be non-zero
  3555  000DA2                     	endif
  3556  000DA2  0008               	tblrd		*
  3557  000DA4  FFFF               	dw	65535	; errata NOP
  3558  000DA6  50F5               	movf	tablat,w,c
  3559  000DA8  6E1C               	movwf	moveToPoint@y2^0,c
  3560  000DAA  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3561  000DAC  EC21  F005         	call	_moveToPoint	;wreg free
  3562  000DB0  0101               	movlb	1	; () banked
  3563  000DB2  6FD6               	movwf	executeData@errCode& (0+255),b
  3564  000DB4                     
  3565                           ; BSR set to: 1
  3566                           ;main.c: 131:             posVector[0] = feeder1Pos[0];
  3567  000DB4  0E0D               	movlw	low _feeder1Pos
  3568  000DB6  6EF6               	movwf	tblptrl,c
  3569  000DB8                     	if	1	;There is more than 1 active tblptr byte
  3570  000DB8  0E06               	movlw	high _feeder1Pos
  3571  000DBA  6EF7               	movwf	tblptrh,c
  3572  000DBC                     	endif
  3573  000DBC                     	if	0	;There are less than 3 active tblptr bytes
  3574  000DBC                     	endif
  3575  000DBC  0008               	tblrd		*
  3576  000DBE  FFFF               	dw	65535	; errata NOP
  3577  000DC0  CFF5 F04E          	movff	tablat,_posVector
  3578  000DC4                     
  3579                           ; BSR set to: 1
  3580                           ;main.c: 132:             posVector[1] = feeder1Pos[1];
  3581  000DC4  0E0E               	movlw	low (_feeder1Pos+1)
  3582  000DC6  6EF6               	movwf	tblptrl,c
  3583  000DC8  0E06               	movlw	high (_feeder1Pos+1)
  3584  000DCA  6EF7               	movwf	tblptrh,c
  3585  000DCC                     	if	0	;tblptru may be non-zero
  3586  000DCC                     	endif
  3587  000DCC                     	if	0	;tblptru may be non-zero
  3588  000DCC                     	endif
  3589  000DCC  0008               	tblrd		*
  3590  000DCE  FFFF               	dw	65535	; errata NOP
  3591  000DD0  CFF5 F04F          	movff	tablat,_posVector+1
  3592                           
  3593                           ;main.c: 133:             break;
  3594  000DD4  EF8A  F007         	goto	l4309
  3595  000DD8                     l4285:
  3596  000DD8  FFFF               	dw	65535	; assembler added errata NOP
  3597                           
  3598                           ;main.c: 135:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3599  000DDA  C04E  F016         	movff	_posVector,moveToPoint@x1
  3600  000DDE  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3601  000DE0  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3602  000DE4  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3603  000DE6  0E0B               	movlw	low _feeder2Pos
  3604  000DE8  6EF6               	movwf	tblptrl,c
  3605  000DEA                     	if	1	;There is more than 1 active tblptr byte
  3606  000DEA  0E06               	movlw	high _feeder2Pos
  3607  000DEC  6EF7               	movwf	tblptrh,c
  3608  000DEE                     	endif
  3609  000DEE                     	if	0	;There are less than 3 active tblptr bytes
  3610  000DEE                     	endif
  3611  000DEE  0008               	tblrd		*
  3612  000DF0  FFFF               	dw	65535	; errata NOP
  3613  000DF2  50F5               	movf	tablat,w,c
  3614  000DF4  6E1A               	movwf	moveToPoint@x2^0,c
  3615  000DF6  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3616  000DF8  0E0C               	movlw	low (_feeder2Pos+1)
  3617  000DFA  6EF6               	movwf	tblptrl,c
  3618  000DFC  0E06               	movlw	high (_feeder2Pos+1)
  3619  000DFE  6EF7               	movwf	tblptrh,c
  3620  000E00                     	if	0	;tblptru may be non-zero
  3621  000E00                     	endif
  3622  000E00                     	if	0	;tblptru may be non-zero
  3623  000E00                     	endif
  3624  000E00  0008               	tblrd		*
  3625  000E02  FFFF               	dw	65535	; errata NOP
  3626  000E04  50F5               	movf	tablat,w,c
  3627  000E06  6E1C               	movwf	moveToPoint@y2^0,c
  3628  000E08  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3629  000E0A  EC21  F005         	call	_moveToPoint	;wreg free
  3630  000E0E  0101               	movlb	1	; () banked
  3631  000E10  6FD6               	movwf	executeData@errCode& (0+255),b
  3632  000E12                     
  3633                           ; BSR set to: 1
  3634                           ;main.c: 136:             posVector[0] = feeder2Pos[0];
  3635  000E12  0E0B               	movlw	low _feeder2Pos
  3636  000E14  6EF6               	movwf	tblptrl,c
  3637  000E16                     	if	1	;There is more than 1 active tblptr byte
  3638  000E16  0E06               	movlw	high _feeder2Pos
  3639  000E18  6EF7               	movwf	tblptrh,c
  3640  000E1A                     	endif
  3641  000E1A                     	if	0	;There are less than 3 active tblptr bytes
  3642  000E1A                     	endif
  3643  000E1A  0008               	tblrd		*
  3644  000E1C  FFFF               	dw	65535	; errata NOP
  3645  000E1E  CFF5 F04E          	movff	tablat,_posVector
  3646  000E22                     
  3647                           ; BSR set to: 1
  3648                           ;main.c: 137:             posVector[1] = feeder2Pos[1];
  3649  000E22  0E0C               	movlw	low (_feeder2Pos+1)
  3650  000E24  6EF6               	movwf	tblptrl,c
  3651  000E26  0E06               	movlw	high (_feeder2Pos+1)
  3652  000E28  6EF7               	movwf	tblptrh,c
  3653  000E2A                     	if	0	;tblptru may be non-zero
  3654  000E2A                     	endif
  3655  000E2A                     	if	0	;tblptru may be non-zero
  3656  000E2A                     	endif
  3657  000E2A  0008               	tblrd		*
  3658  000E2C  FFFF               	dw	65535	; errata NOP
  3659  000E2E  CFF5 F04F          	movff	tablat,_posVector+1
  3660                           
  3661                           ;main.c: 138:             break;
  3662  000E32  EF8A  F007         	goto	l4309
  3663  000E36                     l4291:
  3664  000E36  FFFF               	dw	65535	; assembler added errata NOP
  3665                           
  3666                           ;main.c: 140:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3667  000E38  C04E  F016         	movff	_posVector,moveToPoint@x1
  3668  000E3C  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3669  000E3E  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3670  000E42  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3671  000E44  0E09               	movlw	low _feeder3Pos
  3672  000E46  6EF6               	movwf	tblptrl,c
  3673  000E48                     	if	1	;There is more than 1 active tblptr byte
  3674  000E48  0E06               	movlw	high _feeder3Pos
  3675  000E4A  6EF7               	movwf	tblptrh,c
  3676  000E4C                     	endif
  3677  000E4C                     	if	0	;There are less than 3 active tblptr bytes
  3678  000E4C                     	endif
  3679  000E4C  0008               	tblrd		*
  3680  000E4E  FFFF               	dw	65535	; errata NOP
  3681  000E50  50F5               	movf	tablat,w,c
  3682  000E52  6E1A               	movwf	moveToPoint@x2^0,c
  3683  000E54  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3684  000E56  0E0A               	movlw	low (_feeder3Pos+1)
  3685  000E58  6EF6               	movwf	tblptrl,c
  3686  000E5A  0E06               	movlw	high (_feeder3Pos+1)
  3687  000E5C  6EF7               	movwf	tblptrh,c
  3688  000E5E                     	if	0	;tblptru may be non-zero
  3689  000E5E                     	endif
  3690  000E5E                     	if	0	;tblptru may be non-zero
  3691  000E5E                     	endif
  3692  000E5E  0008               	tblrd		*
  3693  000E60  FFFF               	dw	65535	; errata NOP
  3694  000E62  50F5               	movf	tablat,w,c
  3695  000E64  6E1C               	movwf	moveToPoint@y2^0,c
  3696  000E66  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3697  000E68  EC21  F005         	call	_moveToPoint	;wreg free
  3698  000E6C  0101               	movlb	1	; () banked
  3699  000E6E  6FD6               	movwf	executeData@errCode& (0+255),b
  3700  000E70                     
  3701                           ; BSR set to: 1
  3702                           ;main.c: 141:             posVector[0] = feeder3Pos[0];
  3703  000E70  0E09               	movlw	low _feeder3Pos
  3704  000E72  6EF6               	movwf	tblptrl,c
  3705  000E74                     	if	1	;There is more than 1 active tblptr byte
  3706  000E74  0E06               	movlw	high _feeder3Pos
  3707  000E76  6EF7               	movwf	tblptrh,c
  3708  000E78                     	endif
  3709  000E78                     	if	0	;There are less than 3 active tblptr bytes
  3710  000E78                     	endif
  3711  000E78  0008               	tblrd		*
  3712  000E7A  FFFF               	dw	65535	; errata NOP
  3713  000E7C  CFF5 F04E          	movff	tablat,_posVector
  3714  000E80                     
  3715                           ; BSR set to: 1
  3716                           ;main.c: 142:             posVector[1] = feeder3Pos[1];
  3717  000E80  0E0A               	movlw	low (_feeder3Pos+1)
  3718  000E82  6EF6               	movwf	tblptrl,c
  3719  000E84  0E06               	movlw	high (_feeder3Pos+1)
  3720  000E86  6EF7               	movwf	tblptrh,c
  3721  000E88                     	if	0	;tblptru may be non-zero
  3722  000E88                     	endif
  3723  000E88                     	if	0	;tblptru may be non-zero
  3724  000E88                     	endif
  3725  000E88  0008               	tblrd		*
  3726  000E8A  FFFF               	dw	65535	; errata NOP
  3727  000E8C  CFF5 F04F          	movff	tablat,_posVector+1
  3728                           
  3729                           ;main.c: 143:             break;
  3730  000E90  EF8A  F007         	goto	l4309
  3731  000E94                     l4297:
  3732  000E94  FFFF               	dw	65535	; assembler added errata NOP
  3733                           
  3734                           ;main.c: 147:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3735  000E96  C04E  F016         	movff	_posVector,moveToPoint@x1
  3736  000E9A  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3737  000E9C  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3738  000EA0  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3739  000EA2  C057  F01A         	movff	_newFeeder,moveToPoint@x2
  3740  000EA6  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3741  000EA8  C058  F01C         	movff	_newFeeder+1,moveToPoint@y2
  3742  000EAC  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3743  000EAE  EC21  F005         	call	_moveToPoint	;wreg free
  3744  000EB2  0101               	movlb	1	; () banked
  3745  000EB4  6FD6               	movwf	executeData@errCode& (0+255),b
  3746  000EB6                     
  3747                           ; BSR set to: 1
  3748                           ;main.c: 148:             posVector[0] = newFeeder[0];
  3749  000EB6  C057  F04E         	movff	_newFeeder,_posVector
  3750  000EBA                     
  3751                           ; BSR set to: 1
  3752                           ;main.c: 149:             posVector[1] = newFeeder[1];
  3753  000EBA  C058  F04F         	movff	_newFeeder+1,_posVector+1
  3754                           
  3755                           ;main.c: 150:             break;
  3756  000EBE  EF8A  F007         	goto	l4309
  3757  000EC2                     l4303:
  3758  000EC2  FFFF               	dw	65535	; assembler added errata NOP
  3759                           
  3760                           ;main.c: 154:             errCode = 1;
  3761  000EC4  0E01               	movlw	1
  3762  000EC6  0101               	movlb	1	; () banked
  3763  000EC8  6FD6               	movwf	executeData@errCode& (0+255),b
  3764                           
  3765                           ;main.c: 155:             break;
  3766  000ECA  EF8A  F007         	goto	l4309
  3767  000ECE                     l4307:
  3768  000ECE  FFFF               	dw	65535	; assembler added errata NOP
  3769  000ED0  C1D7  FFD9         	movff	executeData@data,fsr2l
  3770  000ED4  C1D8  FFDA         	movff	executeData@data+1,fsr2h
  3771  000ED8  50DF               	movf	indf2,w,c
  3772  000EDA  6E43               	movwf	??_executeData^0,c
  3773  000EDC  6A44               	clrf	(??_executeData+1)^0,c
  3774                           
  3775                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3776                           ; Switch size 1, requested type "simple"
  3777                           ; Number of cases is 1, Range of values is 0 to 0
  3778                           ; switch strategies available:
  3779                           ; Name         Instructions Cycles
  3780                           ; simple_byte            4     3 (average)
  3781                           ;	Chosen strategy is simple_byte
  3782  000EDE  5044               	movf	(??_executeData+1)^0,w,c
  3783  000EE0  0A00               	xorlw	0	; case 0
  3784  000EE2  B4D8               	btfsc	status,2,c
  3785  000EE4  EF76  F007         	goto	l4661
  3786  000EE8  EF61  F007         	goto	l4303
  3787  000EEC                     l4661:
  3788  000EEC  FFFF               	dw	65535	; assembler added errata NOP
  3789                           
  3790                           ; Switch size 1, requested type "simple"
  3791                           ; Number of cases is 4, Range of values is 0 to 255
  3792                           ; switch strategies available:
  3793                           ; Name         Instructions Cycles
  3794                           ; simple_byte           13     7 (average)
  3795                           ;	Chosen strategy is simple_byte
  3796  000EEE  5043               	movf	??_executeData^0,w,c
  3797  000EF0  0A00               	xorlw	0	; case 0
  3798  000EF2  B4D8               	btfsc	status,2,c
  3799  000EF4  EFBD  F006         	goto	l4279
  3800  000EF8  0A01               	xorlw	1	; case 1
  3801  000EFA  B4D8               	btfsc	status,2,c
  3802  000EFC  EFEC  F006         	goto	l4285
  3803  000F00  0A03               	xorlw	3	; case 2
  3804  000F02  B4D8               	btfsc	status,2,c
  3805  000F04  EF1B  F007         	goto	l4291
  3806  000F08  0AFD               	xorlw	253	; case 255
  3807  000F0A  B4D8               	btfsc	status,2,c
  3808  000F0C  EF4A  F007         	goto	l4297
  3809  000F10  EF61  F007         	goto	l4303
  3810  000F14                     l4309:
  3811  000F14  FFFF               	dw	65535	; assembler added errata NOP
  3812                           
  3813                           ; BSR set to: 1
  3814                           ;main.c: 159:     if(!errCode){
  3815  000F16  51D6               	movf	executeData@errCode& (0+255),w,b
  3816  000F18  A4D8               	btfss	status,2,c
  3817  000F1A  EF91  F007         	goto	u3701
  3818  000F1E  EF94  F007         	goto	u3700
  3819  000F22                     u3701:
  3820  000F22  FFFF               	dw	65535	; assembler added errata NOP
  3821  000F24  EFF7  F007         	goto	l4331
  3822  000F28                     u3700:
  3823  000F28  FFFF               	dw	65535	; assembler added errata NOP
  3824  000F2A                     
  3825                           ; BSR set to: 1
  3826                           ;main.c: 162:         errCode = touchObject();
  3827  000F2A  EC21  F00E         	call	_touchObject	;wreg free
  3828  000F2E  0101               	movlb	1	; () banked
  3829  000F30  6FD6               	movwf	executeData@errCode& (0+255),b
  3830                           
  3831                           ;main.c: 164:         pickObject();
  3832  000F32  EC58  F012         	call	_pickObject	;wreg free
  3833                           
  3834                           ;main.c: 167:         errCode = liftArm();
  3835  000F36  ECDE  F00F         	call	_liftArm	;wreg free
  3836  000F3A  0101               	movlb	1	; () banked
  3837  000F3C  6FD6               	movwf	executeData@errCode& (0+255),b
  3838  000F3E                     
  3839                           ; BSR set to: 1
  3840  000F3E  C04E  F016         	movff	_posVector,moveToPoint@x1
  3841  000F42  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3842  000F44  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3843  000F48  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3844  000F4A  EE20 F001          	lfsr	2,1
  3845  000F4E  51D7               	movf	executeData@data& (0+255),w,b
  3846  000F50  26D9               	addwf	fsr2l,f,c
  3847  000F52  51D8               	movf	(executeData@data+1)& (0+255),w,b
  3848  000F54  22DA               	addwfc	fsr2h,f,c
  3849  000F56  50DF               	movf	indf2,w,c
  3850  000F58  6E43               	movwf	??_executeData^0,c
  3851  000F5A  5043               	movf	??_executeData^0,w,c
  3852  000F5C  6E1A               	movwf	moveToPoint@x2^0,c
  3853  000F5E  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3854  000F60  EE20 F002          	lfsr	2,2
  3855  000F64  51D7               	movf	executeData@data& (0+255),w,b
  3856  000F66  26D9               	addwf	fsr2l,f,c
  3857  000F68  51D8               	movf	(executeData@data+1)& (0+255),w,b
  3858  000F6A  22DA               	addwfc	fsr2h,f,c
  3859  000F6C  50DF               	movf	indf2,w,c
  3860  000F6E  6E44               	movwf	(??_executeData+1)^0,c
  3861  000F70  5044               	movf	(??_executeData+1)^0,w,c
  3862  000F72  6E1C               	movwf	moveToPoint@y2^0,c
  3863  000F74  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3864  000F76  EC21  F005         	call	_moveToPoint	;wreg free
  3865  000F7A                     
  3866                           ;main.c: 171:         posVector[0] = data->posX;
  3867  000F7A  0101               	movlb	1	; () banked
  3868  000F7C  EE20 F001          	lfsr	2,1
  3869  000F80  51D7               	movf	executeData@data& (0+255),w,b
  3870  000F82  26D9               	addwf	fsr2l,f,c
  3871  000F84  51D8               	movf	(executeData@data+1)& (0+255),w,b
  3872  000F86  22DA               	addwfc	fsr2h,f,c
  3873  000F88  50DF               	movf	indf2,w,c
  3874  000F8A  6E4E               	movwf	_posVector^0,c
  3875  000F8C                     
  3876                           ; BSR set to: 1
  3877                           ;main.c: 172:         posVector[1] = data->posY;
  3878  000F8C  EE20 F002          	lfsr	2,2
  3879  000F90  51D7               	movf	executeData@data& (0+255),w,b
  3880  000F92  26D9               	addwf	fsr2l,f,c
  3881  000F94  51D8               	movf	(executeData@data+1)& (0+255),w,b
  3882  000F96  22DA               	addwfc	fsr2h,f,c
  3883  000F98  50DF               	movf	indf2,w,c
  3884  000F9A  6E4F               	movwf	(_posVector+1)^0,c
  3885  000F9C                     
  3886                           ; BSR set to: 1
  3887                           ;main.c: 175:         rotAngle = data->rotation - rotAngle;
  3888  000F9C  EE20 F003          	lfsr	2,3
  3889  000FA0  51D7               	movf	executeData@data& (0+255),w,b
  3890  000FA2  26D9               	addwf	fsr2l,f,c
  3891  000FA4  51D8               	movf	(executeData@data+1)& (0+255),w,b
  3892  000FA6  22DA               	addwfc	fsr2h,f,c
  3893  000FA8  50DF               	movf	indf2,w,c
  3894  000FAA  6E43               	movwf	??_executeData^0,c
  3895  000FAC  5059               	movf	_rotAngle^0,w,c
  3896  000FAE  5C43               	subwf	??_executeData^0,w,c
  3897  000FB0  6E59               	movwf	_rotAngle^0,c
  3898  000FB2  505A               	movf	(_rotAngle+1)^0,w,c
  3899  000FB4  A0D8               	btfss	status,0,c
  3900  000FB6  285A               	incf	(_rotAngle+1)^0,w,c
  3901  000FB8  6A5A               	clrf	(_rotAngle+1)^0,c
  3902  000FBA  5E5A               	subwf	(_rotAngle+1)^0,f,c
  3903                           
  3904                           ;main.c: 177:         if(rotAngle < 0){
  3905  000FBC  BE5A               	btfsc	(_rotAngle+1)^0,7,c
  3906  000FBE  EFE6  F007         	goto	u3710
  3907  000FC2  EFE3  F007         	goto	u3711
  3908  000FC6                     u3711:
  3909  000FC6  FFFF               	dw	65535	; assembler added errata NOP
  3910  000FC8  EFEB  F007         	goto	l4323
  3911  000FCC                     u3710:
  3912  000FCC  FFFF               	dw	65535	; assembler added errata NOP
  3913  000FCE                     
  3914                           ; BSR set to: 1
  3915                           ;main.c: 178:             rotAngle += 360;
  3916  000FCE  0E68               	movlw	104
  3917  000FD0  2659               	addwf	_rotAngle^0,f,c
  3918  000FD2  0E01               	movlw	1
  3919  000FD4  225A               	addwfc	(_rotAngle+1)^0,f,c
  3920  000FD6                     l4323:
  3921  000FD6  FFFF               	dw	65535	; assembler added errata NOP
  3922                           
  3923                           ; BSR set to: 1
  3924                           ;main.c: 180:         rotateObj(rotAngle);
  3925  000FD8  5059               	movf	_rotAngle^0,w,c
  3926  000FDA  EC9A  F00E         	call	_rotateObj
  3927  000FDE  ECA8  F00D         	call	_touchTherm	;wreg free
  3928  000FE2                     
  3929                           ;main.c: 185:         releaseObj();
  3930  000FE2  EC42  F012         	call	_releaseObj	;wreg free
  3931  000FE6                     
  3932                           ;main.c: 188:         errCode = liftArm();
  3933  000FE6  ECDE  F00F         	call	_liftArm	;wreg free
  3934  000FEA  0101               	movlb	1	; () banked
  3935  000FEC  6FD6               	movwf	executeData@errCode& (0+255),b
  3936  000FEE                     l4331:
  3937  000FEE  FFFF               	dw	65535	; assembler added errata NOP
  3938                           
  3939                           ; BSR set to: 1
  3940                           ;main.c: 191:     return(errCode);
  3941  000FF0  51D6               	movf	executeData@errCode& (0+255),w,b
  3942  000FF2                     
  3943                           ; BSR set to: 1
  3944  000FF2  0012               	return		;funcret
  3945  000FF4  FFFF               	dw	65535	; errata NOP
  3946  000FF6                     __end_of_executeData:
  3947                           	callstack 0
  3948                           
  3949 ;; *************** function _touchTherm *****************
  3950 ;; Defined at:
  3951 ;;		line 455 in file "motors.c"
  3952 ;; Parameters:    Size  Location     Type
  3953 ;;		None
  3954 ;; Auto vars:     Size  Location     Type
  3955 ;;		None
  3956 ;; Return value:  Size  Location     Type
  3957 ;;                  1    wreg      unsigned char 
  3958 ;; Registers used:
  3959 ;;		wreg, status,2, status,0, cstack
  3960 ;; Tracked objects:
  3961 ;;		On entry : 0/0
  3962 ;;		On exit  : 0/0
  3963 ;;		Unchanged: 0/0
  3964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3965 ;;      Params:         0       0       0       0       0       0       0
  3966 ;;      Locals:         0       0       0       0       0       0       0
  3967 ;;      Temps:          0       0       0       0       0       0       0
  3968 ;;      Totals:         0       0       0       0       0       0       0
  3969 ;;Total ram usage:        0 bytes
  3970 ;; Hardware stack levels used:    1
  3971 ;; Hardware stack levels required when called:    5
  3972 ;; This function calls:
  3973 ;;		_resetStep
  3974 ;;		_resetTherm
  3975 ;;		_returnTherm
  3976 ;;		_setDirection
  3977 ;;		_startADC
  3978 ;;		_stepMade
  3979 ;;		_stopADC
  3980 ;; This function is called by:
  3981 ;;		_executeData
  3982 ;; This function uses a non-reentrant model
  3983 ;;
  3984                           
  3985                           	psect	text22
  3986  001B50                     __ptext22:
  3987                           	callstack 0
  3988  001B50                     _touchTherm:
  3989                           	callstack 0
  3990  001B50  FFFF               	dw	65535	; assembler added errata NOP
  3991  001B52                     
  3992                           ;motors.c: 458:     setDirection(1, 2);
  3993  001B52  0E02               	movlw	2
  3994  001B54  6E12               	movwf	setDirection@motor^0,c
  3995  001B56  0E01               	movlw	1
  3996  001B58  ECED  F010         	call	_setDirection
  3997  001B5C                     
  3998                           ;motors.c: 460:     T2CONbits.TMR2ON = 1;
  3999  001B5C  84CA               	bsf	202,2,c	;volatile
  4000  001B5E                     
  4001                           ;motors.c: 462:     tm0Error = 0;
  4002  001B5E  0E00               	movlw	0
  4003  001B60  6E5C               	movwf	(_tm0Error+1)^0,c
  4004  001B62  0E00               	movlw	0
  4005  001B64  6E5B               	movwf	_tm0Error^0,c
  4006  001B66                     
  4007                           ;motors.c: 463:     tm0Limit = 250;
  4008  001B66  0EFA               	movlw	250
  4009  001B68  6E68               	movwf	_tm0Limit^0,c
  4010  001B6A                     
  4011                           ;motors.c: 464:     T0CONbits.TMR0ON = 1;
  4012  001B6A  8ED5               	bsf	213,7,c	;volatile
  4013  001B6C                     
  4014                           ;motors.c: 467:     startADC();
  4015  001B6C  EC09  F013         	call	_startADC	;wreg free
  4016                           
  4017                           ;motors.c: 470:     while(!returnTherm() || PORTDbits.RD7){
  4018  001B70  EFEB  F00D         	goto	l3999
  4019  001B74                     l3989:
  4020  001B74  FFFF               	dw	65535	; assembler added errata NOP
  4021                           
  4022                           ;motors.c: 473:         if(tm0Error){
  4023  001B76  505B               	movf	_tm0Error^0,w,c
  4024  001B78  105C               	iorwf	(_tm0Error+1)^0,w,c
  4025  001B7A  B4D8               	btfsc	status,2,c
  4026  001B7C  EFC2  F00D         	goto	u3411
  4027  001B80  EFC5  F00D         	goto	u3410
  4028  001B84                     u3411:
  4029  001B84  FFFF               	dw	65535	; assembler added errata NOP
  4030  001B86  EFCD  F00D         	goto	l194
  4031  001B8A                     u3410:
  4032  001B8A  FFFF               	dw	65535	; assembler added errata NOP
  4033  001B8C                     
  4034                           ;motors.c: 475:             LATCbits.LATC2 = 0;
  4035  001B8C  948B               	bcf	139,2,c	;volatile
  4036  001B8E                     
  4037                           ;motors.c: 476:             tm0Error = 6;
  4038  001B8E  0E00               	movlw	0
  4039  001B90  6E5C               	movwf	(_tm0Error+1)^0,c
  4040  001B92  0E06               	movlw	6
  4041  001B94  6E5B               	movwf	_tm0Error^0,c
  4042                           
  4043                           ;motors.c: 477:             break;
  4044  001B96  EF01  F00E         	goto	l4003
  4045  001B9A                     l194:
  4046  001B9A  FFFF               	dw	65535	; assembler added errata NOP
  4047                           
  4048                           ;motors.c: 481:         LATCbits.LATC2 = 1;
  4049  001B9C  848B               	bsf	139,2,c	;volatile
  4050  001B9E                     l3995:
  4051  001B9E  FFFF               	dw	65535	; assembler added errata NOP
  4052  001BA0  ECAF  F012         	call	_stepMade	;wreg free
  4053  001BA4  5012               	movf	?_stepMade^0,w,c
  4054  001BA6  1013               	iorwf	(?_stepMade+1)^0,w,c
  4055  001BA8  B4D8               	btfsc	status,2,c
  4056  001BAA  EFD9  F00D         	goto	u3421
  4057  001BAE  EFDC  F00D         	goto	u3420
  4058  001BB2                     u3421:
  4059  001BB2  FFFF               	dw	65535	; assembler added errata NOP
  4060  001BB4  EFCF  F00D         	goto	l3995
  4061  001BB8                     u3420:
  4062  001BB8  FFFF               	dw	65535	; assembler added errata NOP
  4063  001BBA                     
  4064                           ;motors.c: 487:         LATCbits.LATC2 = 0;
  4065  001BBA  948B               	bcf	139,2,c	;volatile
  4066  001BBC                     l3997:
  4067  001BBC  FFFF               	dw	65535	; assembler added errata NOP
  4068  001BBE  ECAF  F012         	call	_stepMade	;wreg free
  4069  001BC2  5012               	movf	?_stepMade^0,w,c
  4070  001BC4  1013               	iorwf	(?_stepMade+1)^0,w,c
  4071  001BC6  B4D8               	btfsc	status,2,c
  4072  001BC8  EFE8  F00D         	goto	u3431
  4073  001BCC  EFEB  F00D         	goto	u3430
  4074  001BD0                     u3431:
  4075  001BD0  FFFF               	dw	65535	; assembler added errata NOP
  4076  001BD2  EFDE  F00D         	goto	l3997
  4077  001BD6                     u3430:
  4078  001BD6                     l3999:
  4079  001BD6  FFFF               	dw	65535	; assembler added errata NOP
  4080                           
  4081                           ;motors.c: 470:     while(!returnTherm() || PORTDbits.RD7){
  4082  001BD8  ECED  F012         	call	_returnTherm	;wreg free
  4083  001BDC  5012               	movf	?_returnTherm^0,w,c
  4084  001BDE  1013               	iorwf	(?_returnTherm+1)^0,w,c
  4085  001BE0  B4D8               	btfsc	status,2,c
  4086  001BE2  EFF5  F00D         	goto	u3441
  4087  001BE6  EFF8  F00D         	goto	u3440
  4088  001BEA                     u3441:
  4089  001BEA  FFFF               	dw	65535	; assembler added errata NOP
  4090  001BEC  EFBA  F00D         	goto	l3989
  4091  001BF0                     u3440:
  4092  001BF0  FFFF               	dw	65535	; assembler added errata NOP
  4093  001BF2  BE83               	btfsc	131,7,c	;volatile
  4094  001BF4  EFFE  F00D         	goto	u3451
  4095  001BF8  EF01  F00E         	goto	u3450
  4096  001BFC                     u3451:
  4097  001BFC  FFFF               	dw	65535	; assembler added errata NOP
  4098  001BFE  EFBA  F00D         	goto	l3989
  4099  001C02                     u3450:
  4100  001C02                     l4003:
  4101  001C02  FFFF               	dw	65535	; assembler added errata NOP
  4102                           
  4103                           ;motors.c: 494:     stopADC();
  4104  001C04  EC33  F013         	call	_stopADC	;wreg free
  4105  001C08                     
  4106                           ;motors.c: 497:     resetTherm();
  4107  001C08  EC04  F013         	call	_resetTherm	;wreg free
  4108  001C0C                     
  4109                           ;motors.c: 500:     T0CONbits.TMR0ON = 0;
  4110  001C0C  9ED5               	bcf	213,7,c	;volatile
  4111  001C0E                     
  4112                           ;motors.c: 501:     T2CONbits.TMR2ON = 0;
  4113  001C0E  94CA               	bcf	202,2,c	;volatile
  4114                           
  4115                           ;motors.c: 503:     TMR0 = 0;
  4116  001C10  0E00               	movlw	0
  4117  001C12  6ED7               	movwf	215,c	;volatile
  4118  001C14  0E00               	movlw	0
  4119  001C16  6ED6               	movwf	214,c	;volatile
  4120                           
  4121                           ;motors.c: 504:     TMR2 = 0;
  4122  001C18  0E00               	movlw	0
  4123  001C1A  6ECC               	movwf	204,c	;volatile
  4124  001C1C                     
  4125                           ;motors.c: 507:     resetStep();
  4126  001C1C  EC13  F013         	call	_resetStep	;wreg free
  4127  001C20                     
  4128                           ;motors.c: 510:     if(PORTDbits.RD7){
  4129  001C20  AE83               	btfss	131,7,c	;volatile
  4130  001C22  EF15  F00E         	goto	u3461
  4131  001C26  EF18  F00E         	goto	u3460
  4132  001C2A                     u3461:
  4133  001C2A  FFFF               	dw	65535	; assembler added errata NOP
  4134  001C2C  EF1D  F00E         	goto	l202
  4135  001C30                     u3460:
  4136  001C30  FFFF               	dw	65535	; assembler added errata NOP
  4137  001C32                     
  4138                           ;motors.c: 511:         tm0Error = 2;
  4139  001C32  0E00               	movlw	0
  4140  001C34  6E5C               	movwf	(_tm0Error+1)^0,c
  4141  001C36  0E02               	movlw	2
  4142  001C38  6E5B               	movwf	_tm0Error^0,c
  4143  001C3A                     l202:
  4144  001C3A  FFFF               	dw	65535	; assembler added errata NOP
  4145                           
  4146                           ;motors.c: 514:     return(tm0Error);
  4147  001C3C  505B               	movf	_tm0Error^0,w,c
  4148  001C3E  0012               	return		;funcret
  4149  001C40  FFFF               	dw	65535	; errata NOP
  4150  001C42                     __end_of_touchTherm:
  4151                           	callstack 0
  4152                           
  4153 ;; *************** function _returnTherm *****************
  4154 ;; Defined at:
  4155 ;;		line 58 in file "adc.c"
  4156 ;; Parameters:    Size  Location     Type
  4157 ;;		None
  4158 ;; Auto vars:     Size  Location     Type
  4159 ;;		None
  4160 ;; Return value:  Size  Location     Type
  4161 ;;                  2   17[COMRAM] unsigned int 
  4162 ;; Registers used:
  4163 ;;		None
  4164 ;; Tracked objects:
  4165 ;;		On entry : 0/0
  4166 ;;		On exit  : 0/0
  4167 ;;		Unchanged: 0/0
  4168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4169 ;;      Params:         2       0       0       0       0       0       0
  4170 ;;      Locals:         0       0       0       0       0       0       0
  4171 ;;      Temps:          0       0       0       0       0       0       0
  4172 ;;      Totals:         2       0       0       0       0       0       0
  4173 ;;Total ram usage:        2 bytes
  4174 ;; Hardware stack levels used:    1
  4175 ;; Hardware stack levels required when called:    4
  4176 ;; This function calls:
  4177 ;;		Nothing
  4178 ;; This function is called by:
  4179 ;;		_touchTherm
  4180 ;; This function uses a non-reentrant model
  4181 ;;
  4182                           
  4183                           	psect	text23
  4184  0025DA                     __ptext23:
  4185                           	callstack 0
  4186  0025DA                     _returnTherm:
  4187                           	callstack 0
  4188  0025DA  FFFF               	dw	65535	; assembler added errata NOP
  4189  0025DC                     
  4190                           ;adc.c: 59:     return therm_rel;
  4191  0025DC  C064  F012         	movff	_therm_rel,?_returnTherm	;volatile
  4192  0025E0  6A13               	clrf	(?_returnTherm+1)^0,c
  4193  0025E2  0012               	return		;funcret
  4194  0025E4  FFFF               	dw	65535	; errata NOP
  4195  0025E6                     __end_of_returnTherm:
  4196                           	callstack 0
  4197                           
  4198 ;; *************** function _resetTherm *****************
  4199 ;; Defined at:
  4200 ;;		line 72 in file "adc.c"
  4201 ;; Parameters:    Size  Location     Type
  4202 ;;		None
  4203 ;; Auto vars:     Size  Location     Type
  4204 ;;		None
  4205 ;; Return value:  Size  Location     Type
  4206 ;;                  1    wreg      void 
  4207 ;; Registers used:
  4208 ;;		wreg, status,2
  4209 ;; Tracked objects:
  4210 ;;		On entry : 0/0
  4211 ;;		On exit  : 0/0
  4212 ;;		Unchanged: 0/0
  4213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4214 ;;      Params:         0       0       0       0       0       0       0
  4215 ;;      Locals:         0       0       0       0       0       0       0
  4216 ;;      Temps:          0       0       0       0       0       0       0
  4217 ;;      Totals:         0       0       0       0       0       0       0
  4218 ;;Total ram usage:        0 bytes
  4219 ;; Hardware stack levels used:    1
  4220 ;; Hardware stack levels required when called:    4
  4221 ;; This function calls:
  4222 ;;		Nothing
  4223 ;; This function is called by:
  4224 ;;		_touchTherm
  4225 ;; This function uses a non-reentrant model
  4226 ;;
  4227                           
  4228                           	psect	text24
  4229  002608                     __ptext24:
  4230                           	callstack 0
  4231  002608                     _resetTherm:
  4232                           	callstack 0
  4233  002608  FFFF               	dw	65535	; assembler added errata NOP
  4234  00260A                     
  4235                           ;adc.c: 73:     therm_rel = 0;
  4236  00260A  0E00               	movlw	0
  4237  00260C  6E64               	movwf	_therm_rel^0,c	;volatile
  4238  00260E  0012               	return		;funcret
  4239  002610  FFFF               	dw	65535	; errata NOP
  4240  002612                     __end_of_resetTherm:
  4241                           	callstack 0
  4242                           
  4243 ;; *************** function _touchObject *****************
  4244 ;; Defined at:
  4245 ;;		line 384 in file "motors.c"
  4246 ;; Parameters:    Size  Location     Type
  4247 ;;		None
  4248 ;; Auto vars:     Size  Location     Type
  4249 ;;		None
  4250 ;; Return value:  Size  Location     Type
  4251 ;;                  1    wreg      unsigned char 
  4252 ;; Registers used:
  4253 ;;		wreg, status,2, status,0, cstack
  4254 ;; Tracked objects:
  4255 ;;		On entry : 0/0
  4256 ;;		On exit  : 0/0
  4257 ;;		Unchanged: 0/0
  4258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4259 ;;      Params:         0       0       0       0       0       0       0
  4260 ;;      Locals:         0       0       0       0       0       0       0
  4261 ;;      Temps:          0       0       0       0       0       0       0
  4262 ;;      Totals:         0       0       0       0       0       0       0
  4263 ;;Total ram usage:        0 bytes
  4264 ;; Hardware stack levels used:    1
  4265 ;; Hardware stack levels required when called:    5
  4266 ;; This function calls:
  4267 ;;		_resetStep
  4268 ;;		_resetTouch
  4269 ;;		_returnTouch
  4270 ;;		_setDirection
  4271 ;;		_startADC
  4272 ;;		_stepMade
  4273 ;;		_stopADC
  4274 ;; This function is called by:
  4275 ;;		_executeData
  4276 ;; This function uses a non-reentrant model
  4277 ;;
  4278                           
  4279                           	psect	text25
  4280  001C42                     __ptext25:
  4281                           	callstack 0
  4282  001C42                     _touchObject:
  4283                           	callstack 0
  4284  001C42  FFFF               	dw	65535	; assembler added errata NOP
  4285  001C44                     
  4286                           ;motors.c: 387:     setDirection(1, 2);
  4287  001C44  0E02               	movlw	2
  4288  001C46  6E12               	movwf	setDirection@motor^0,c
  4289  001C48  0E01               	movlw	1
  4290  001C4A  ECED  F010         	call	_setDirection
  4291  001C4E                     
  4292                           ;motors.c: 389:     T2CONbits.TMR2ON = 1;
  4293  001C4E  84CA               	bsf	202,2,c	;volatile
  4294  001C50                     
  4295                           ;motors.c: 391:     tm0Error = 0;
  4296  001C50  0E00               	movlw	0
  4297  001C52  6E5C               	movwf	(_tm0Error+1)^0,c
  4298  001C54  0E00               	movlw	0
  4299  001C56  6E5B               	movwf	_tm0Error^0,c
  4300  001C58                     
  4301                           ;motors.c: 392:     tm0Limit = 250;
  4302  001C58  0EFA               	movlw	250
  4303  001C5A  6E68               	movwf	_tm0Limit^0,c
  4304  001C5C                     
  4305                           ;motors.c: 393:     T0CONbits.TMR0ON = 1;
  4306  001C5C  8ED5               	bsf	213,7,c	;volatile
  4307  001C5E                     
  4308                           ;motors.c: 396:     startADC();
  4309  001C5E  EC09  F013         	call	_startADC	;wreg free
  4310                           
  4311                           ;motors.c: 399:     while(!returnTouch() || PORTDbits.RD7){
  4312  001C62  EF64  F00E         	goto	l3957
  4313  001C66                     l3947:
  4314  001C66  FFFF               	dw	65535	; assembler added errata NOP
  4315                           
  4316                           ;motors.c: 402:         if(tm0Error){
  4317  001C68  505B               	movf	_tm0Error^0,w,c
  4318  001C6A  105C               	iorwf	(_tm0Error+1)^0,w,c
  4319  001C6C  B4D8               	btfsc	status,2,c
  4320  001C6E  EF3B  F00E         	goto	u3351
  4321  001C72  EF3E  F00E         	goto	u3350
  4322  001C76                     u3351:
  4323  001C76  FFFF               	dw	65535	; assembler added errata NOP
  4324  001C78  EF46  F00E         	goto	l180
  4325  001C7C                     u3350:
  4326  001C7C  FFFF               	dw	65535	; assembler added errata NOP
  4327  001C7E                     
  4328                           ;motors.c: 404:             LATCbits.LATC2 = 0;
  4329  001C7E  948B               	bcf	139,2,c	;volatile
  4330  001C80                     
  4331                           ;motors.c: 405:             tm0Error = 6;
  4332  001C80  0E00               	movlw	0
  4333  001C82  6E5C               	movwf	(_tm0Error+1)^0,c
  4334  001C84  0E06               	movlw	6
  4335  001C86  6E5B               	movwf	_tm0Error^0,c
  4336                           
  4337                           ;motors.c: 406:             break;
  4338  001C88  EF7A  F00E         	goto	l3961
  4339  001C8C                     l180:
  4340  001C8C  FFFF               	dw	65535	; assembler added errata NOP
  4341                           
  4342                           ;motors.c: 410:         LATCbits.LATC2 = 1;
  4343  001C8E  848B               	bsf	139,2,c	;volatile
  4344  001C90                     l3953:
  4345  001C90  FFFF               	dw	65535	; assembler added errata NOP
  4346  001C92  ECAF  F012         	call	_stepMade	;wreg free
  4347  001C96  5012               	movf	?_stepMade^0,w,c
  4348  001C98  1013               	iorwf	(?_stepMade+1)^0,w,c
  4349  001C9A  B4D8               	btfsc	status,2,c
  4350  001C9C  EF52  F00E         	goto	u3361
  4351  001CA0  EF55  F00E         	goto	u3360
  4352  001CA4                     u3361:
  4353  001CA4  FFFF               	dw	65535	; assembler added errata NOP
  4354  001CA6  EF48  F00E         	goto	l3953
  4355  001CAA                     u3360:
  4356  001CAA  FFFF               	dw	65535	; assembler added errata NOP
  4357  001CAC                     
  4358                           ;motors.c: 416:         LATCbits.LATC2 = 0;
  4359  001CAC  948B               	bcf	139,2,c	;volatile
  4360  001CAE                     l3955:
  4361  001CAE  FFFF               	dw	65535	; assembler added errata NOP
  4362  001CB0  ECAF  F012         	call	_stepMade	;wreg free
  4363  001CB4  5012               	movf	?_stepMade^0,w,c
  4364  001CB6  1013               	iorwf	(?_stepMade+1)^0,w,c
  4365  001CB8  B4D8               	btfsc	status,2,c
  4366  001CBA  EF61  F00E         	goto	u3371
  4367  001CBE  EF64  F00E         	goto	u3370
  4368  001CC2                     u3371:
  4369  001CC2  FFFF               	dw	65535	; assembler added errata NOP
  4370  001CC4  EF57  F00E         	goto	l3955
  4371  001CC8                     u3370:
  4372  001CC8                     l3957:
  4373  001CC8  FFFF               	dw	65535	; assembler added errata NOP
  4374                           
  4375                           ;motors.c: 399:     while(!returnTouch() || PORTDbits.RD7){
  4376  001CCA  ECF3  F012         	call	_returnTouch	;wreg free
  4377  001CCE  5012               	movf	?_returnTouch^0,w,c
  4378  001CD0  1013               	iorwf	(?_returnTouch+1)^0,w,c
  4379  001CD2  B4D8               	btfsc	status,2,c
  4380  001CD4  EF6E  F00E         	goto	u3381
  4381  001CD8  EF71  F00E         	goto	u3380
  4382  001CDC                     u3381:
  4383  001CDC  FFFF               	dw	65535	; assembler added errata NOP
  4384  001CDE  EF33  F00E         	goto	l3947
  4385  001CE2                     u3380:
  4386  001CE2  FFFF               	dw	65535	; assembler added errata NOP
  4387  001CE4  BE83               	btfsc	131,7,c	;volatile
  4388  001CE6  EF77  F00E         	goto	u3391
  4389  001CEA  EF7A  F00E         	goto	u3390
  4390  001CEE                     u3391:
  4391  001CEE  FFFF               	dw	65535	; assembler added errata NOP
  4392  001CF0  EF33  F00E         	goto	l3947
  4393  001CF4                     u3390:
  4394  001CF4                     l3961:
  4395  001CF4  FFFF               	dw	65535	; assembler added errata NOP
  4396                           
  4397                           ;motors.c: 423:     stopADC();
  4398  001CF6  EC33  F013         	call	_stopADC	;wreg free
  4399  001CFA                     
  4400                           ;motors.c: 426:     resetTouch();
  4401  001CFA  EC0E  F013         	call	_resetTouch	;wreg free
  4402  001CFE                     
  4403                           ;motors.c: 429:     T0CONbits.TMR0ON = 0;
  4404  001CFE  9ED5               	bcf	213,7,c	;volatile
  4405  001D00                     
  4406                           ;motors.c: 430:     T2CONbits.TMR2ON = 0;
  4407  001D00  94CA               	bcf	202,2,c	;volatile
  4408                           
  4409                           ;motors.c: 432:     TMR0 = 0;
  4410  001D02  0E00               	movlw	0
  4411  001D04  6ED7               	movwf	215,c	;volatile
  4412  001D06  0E00               	movlw	0
  4413  001D08  6ED6               	movwf	214,c	;volatile
  4414                           
  4415                           ;motors.c: 433:     TMR2 = 0;
  4416  001D0A  0E00               	movlw	0
  4417  001D0C  6ECC               	movwf	204,c	;volatile
  4418  001D0E                     
  4419                           ;motors.c: 436:     resetStep();
  4420  001D0E  EC13  F013         	call	_resetStep	;wreg free
  4421  001D12                     
  4422                           ;motors.c: 439:     if(PORTDbits.RD7){
  4423  001D12  AE83               	btfss	131,7,c	;volatile
  4424  001D14  EF8E  F00E         	goto	u3401
  4425  001D18  EF91  F00E         	goto	u3400
  4426  001D1C                     u3401:
  4427  001D1C  FFFF               	dw	65535	; assembler added errata NOP
  4428  001D1E  EF96  F00E         	goto	l188
  4429  001D22                     u3400:
  4430  001D22  FFFF               	dw	65535	; assembler added errata NOP
  4431  001D24                     
  4432                           ;motors.c: 440:         tm0Error = 2;
  4433  001D24  0E00               	movlw	0
  4434  001D26  6E5C               	movwf	(_tm0Error+1)^0,c
  4435  001D28  0E02               	movlw	2
  4436  001D2A  6E5B               	movwf	_tm0Error^0,c
  4437  001D2C                     l188:
  4438  001D2C  FFFF               	dw	65535	; assembler added errata NOP
  4439                           
  4440                           ;motors.c: 443:     return(tm0Error);
  4441  001D2E  505B               	movf	_tm0Error^0,w,c
  4442  001D30  0012               	return		;funcret
  4443  001D32  FFFF               	dw	65535	; errata NOP
  4444  001D34                     __end_of_touchObject:
  4445                           	callstack 0
  4446                           
  4447 ;; *************** function _stopADC *****************
  4448 ;; Defined at:
  4449 ;;		line 44 in file "adc.c"
  4450 ;; Parameters:    Size  Location     Type
  4451 ;;		None
  4452 ;; Auto vars:     Size  Location     Type
  4453 ;;		None
  4454 ;; Return value:  Size  Location     Type
  4455 ;;                  1    wreg      void 
  4456 ;; Registers used:
  4457 ;;		None
  4458 ;; Tracked objects:
  4459 ;;		On entry : 0/0
  4460 ;;		On exit  : 0/0
  4461 ;;		Unchanged: 0/0
  4462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4463 ;;      Params:         0       0       0       0       0       0       0
  4464 ;;      Locals:         0       0       0       0       0       0       0
  4465 ;;      Temps:          0       0       0       0       0       0       0
  4466 ;;      Totals:         0       0       0       0       0       0       0
  4467 ;;Total ram usage:        0 bytes
  4468 ;; Hardware stack levels used:    1
  4469 ;; Hardware stack levels required when called:    4
  4470 ;; This function calls:
  4471 ;;		Nothing
  4472 ;; This function is called by:
  4473 ;;		_touchObject
  4474 ;;		_touchTherm
  4475 ;; This function uses a non-reentrant model
  4476 ;;
  4477                           
  4478                           	psect	text26
  4479  002666                     __ptext26:
  4480                           	callstack 0
  4481  002666                     _stopADC:
  4482                           	callstack 0
  4483  002666  FFFF               	dw	65535	; assembler added errata NOP
  4484  002668                     
  4485                           ;adc.c: 45:     ADCON0bits.ADON = 0;
  4486  002668  90C2               	bcf	194,0,c	;volatile
  4487  00266A  0012               	return		;funcret
  4488  00266C  FFFF               	dw	65535	; errata NOP
  4489  00266E                     __end_of_stopADC:
  4490                           	callstack 0
  4491                           
  4492 ;; *************** function _startADC *****************
  4493 ;; Defined at:
  4494 ;;		line 36 in file "adc.c"
  4495 ;; Parameters:    Size  Location     Type
  4496 ;;		None
  4497 ;; Auto vars:     Size  Location     Type
  4498 ;;		None
  4499 ;; Return value:  Size  Location     Type
  4500 ;;                  1    wreg      void 
  4501 ;; Registers used:
  4502 ;;		None
  4503 ;; Tracked objects:
  4504 ;;		On entry : 0/0
  4505 ;;		On exit  : 0/0
  4506 ;;		Unchanged: 0/0
  4507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4508 ;;      Params:         0       0       0       0       0       0       0
  4509 ;;      Locals:         0       0       0       0       0       0       0
  4510 ;;      Temps:          0       0       0       0       0       0       0
  4511 ;;      Totals:         0       0       0       0       0       0       0
  4512 ;;Total ram usage:        0 bytes
  4513 ;; Hardware stack levels used:    1
  4514 ;; Hardware stack levels required when called:    4
  4515 ;; This function calls:
  4516 ;;		Nothing
  4517 ;; This function is called by:
  4518 ;;		_touchObject
  4519 ;;		_touchTherm
  4520 ;; This function uses a non-reentrant model
  4521 ;;
  4522                           
  4523                           	psect	text27
  4524  002612                     __ptext27:
  4525                           	callstack 0
  4526  002612                     _startADC:
  4527                           	callstack 0
  4528  002612  FFFF               	dw	65535	; assembler added errata NOP
  4529  002614                     
  4530                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  4531  002614  80C2               	bsf	194,0,c	;volatile
  4532                           
  4533                           ;adc.c: 38:     ADCON0bits.GODONE = 1;
  4534  002616  84C2               	bsf	194,2,c	;volatile
  4535  002618  0012               	return		;funcret
  4536  00261A  FFFF               	dw	65535	; errata NOP
  4537  00261C                     __end_of_startADC:
  4538                           	callstack 0
  4539                           
  4540 ;; *************** function _returnTouch *****************
  4541 ;; Defined at:
  4542 ;;		line 51 in file "adc.c"
  4543 ;; Parameters:    Size  Location     Type
  4544 ;;		None
  4545 ;; Auto vars:     Size  Location     Type
  4546 ;;		None
  4547 ;; Return value:  Size  Location     Type
  4548 ;;                  2   17[COMRAM] unsigned int 
  4549 ;; Registers used:
  4550 ;;		None
  4551 ;; Tracked objects:
  4552 ;;		On entry : 0/0
  4553 ;;		On exit  : 0/0
  4554 ;;		Unchanged: 0/0
  4555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4556 ;;      Params:         2       0       0       0       0       0       0
  4557 ;;      Locals:         0       0       0       0       0       0       0
  4558 ;;      Temps:          0       0       0       0       0       0       0
  4559 ;;      Totals:         2       0       0       0       0       0       0
  4560 ;;Total ram usage:        2 bytes
  4561 ;; Hardware stack levels used:    1
  4562 ;; Hardware stack levels required when called:    4
  4563 ;; This function calls:
  4564 ;;		Nothing
  4565 ;; This function is called by:
  4566 ;;		_touchObject
  4567 ;; This function uses a non-reentrant model
  4568 ;;
  4569                           
  4570                           	psect	text28
  4571  0025E6                     __ptext28:
  4572                           	callstack 0
  4573  0025E6                     _returnTouch:
  4574                           	callstack 0
  4575  0025E6  FFFF               	dw	65535	; assembler added errata NOP
  4576  0025E8                     
  4577                           ;adc.c: 52:     return touch_rel;
  4578  0025E8  C065  F012         	movff	_touch_rel,?_returnTouch	;volatile
  4579  0025EC  6A13               	clrf	(?_returnTouch+1)^0,c
  4580  0025EE  0012               	return		;funcret
  4581  0025F0  FFFF               	dw	65535	; errata NOP
  4582  0025F2                     __end_of_returnTouch:
  4583                           	callstack 0
  4584                           
  4585 ;; *************** function _resetTouch *****************
  4586 ;; Defined at:
  4587 ;;		line 65 in file "adc.c"
  4588 ;; Parameters:    Size  Location     Type
  4589 ;;		None
  4590 ;; Auto vars:     Size  Location     Type
  4591 ;;		None
  4592 ;; Return value:  Size  Location     Type
  4593 ;;                  1    wreg      void 
  4594 ;; Registers used:
  4595 ;;		wreg, status,2
  4596 ;; Tracked objects:
  4597 ;;		On entry : 0/0
  4598 ;;		On exit  : 0/0
  4599 ;;		Unchanged: 0/0
  4600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4601 ;;      Params:         0       0       0       0       0       0       0
  4602 ;;      Locals:         0       0       0       0       0       0       0
  4603 ;;      Temps:          0       0       0       0       0       0       0
  4604 ;;      Totals:         0       0       0       0       0       0       0
  4605 ;;Total ram usage:        0 bytes
  4606 ;; Hardware stack levels used:    1
  4607 ;; Hardware stack levels required when called:    4
  4608 ;; This function calls:
  4609 ;;		Nothing
  4610 ;; This function is called by:
  4611 ;;		_touchObject
  4612 ;; This function uses a non-reentrant model
  4613 ;;
  4614                           
  4615                           	psect	text29
  4616  00261C                     __ptext29:
  4617                           	callstack 0
  4618  00261C                     _resetTouch:
  4619                           	callstack 0
  4620  00261C  FFFF               	dw	65535	; assembler added errata NOP
  4621  00261E                     
  4622                           ;adc.c: 66:     touch_rel = 0;
  4623  00261E  0E00               	movlw	0
  4624  002620  6E65               	movwf	_touch_rel^0,c	;volatile
  4625  002622  0012               	return		;funcret
  4626  002624  FFFF               	dw	65535	; errata NOP
  4627  002626                     __end_of_resetTouch:
  4628                           	callstack 0
  4629                           
  4630 ;; *************** function _rotateObj *****************
  4631 ;; Defined at:
  4632 ;;		line 575 in file "motors.c"
  4633 ;; Parameters:    Size  Location     Type
  4634 ;;  rotAngle        1    wreg     unsigned char 
  4635 ;; Auto vars:     Size  Location     Type
  4636 ;;  rotAngle        1    3[BANK0 ] unsigned char 
  4637 ;;  i               2    6[BANK0 ] unsigned int 
  4638 ;;  totStep         2    4[BANK0 ] int 
  4639 ;; Return value:  Size  Location     Type
  4640 ;;                  1    wreg      void 
  4641 ;; Registers used:
  4642 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4643 ;; Tracked objects:
  4644 ;;		On entry : 0/0
  4645 ;;		On exit  : 0/0
  4646 ;;		Unchanged: 0/0
  4647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4648 ;;      Params:         0       0       0       0       0       0       0
  4649 ;;      Locals:         0       5       0       0       0       0       0
  4650 ;;      Temps:          0       3       0       0       0       0       0
  4651 ;;      Totals:         0       8       0       0       0       0       0
  4652 ;;Total ram usage:        8 bytes
  4653 ;; Hardware stack levels used:    1
  4654 ;; Hardware stack levels required when called:    5
  4655 ;; This function calls:
  4656 ;;		___fldiv
  4657 ;;		___fltol
  4658 ;;		___xxtofl
  4659 ;;		_stepMade
  4660 ;; This function is called by:
  4661 ;;		_executeData
  4662 ;; This function uses a non-reentrant model
  4663 ;;
  4664                           
  4665                           	psect	text30
  4666  001D34                     __ptext30:
  4667                           	callstack 0
  4668  001D34                     _rotateObj:
  4669                           	callstack 0
  4670  001D34  FFFF               	dw	65535	; assembler added errata NOP
  4671                           
  4672                           ;incstack = 0
  4673                           ;rotateObj@rotAngle stored from wreg
  4674  001D36  0100               	movlb	0	; () banked
  4675  001D38  6FFA               	movwf	rotateObj@rotAngle& (0+255),b
  4676  001D3A                     
  4677                           ;motors.c: 576:     static const float stepAngle = 0.08789;;motors.c: 577:     static ch
      +                          ar rotSequence[] = {0b1001, 0b0011, 0b0110, 0b1100};;motors.c: 578:     unsigned int i;;
      +                          motors.c: 579:     int totStep = rotAngle/stepAngle;
  4678  001D3A  0EAC               	movlw	172
  4679  001D3C  6E24               	movwf	___fldiv@a^0,c
  4680  001D3E  0EFF               	movlw	255
  4681  001D40  6E25               	movwf	(___fldiv@a+1)^0,c
  4682  001D42  0EB3               	movlw	179
  4683  001D44  6E26               	movwf	(___fldiv@a+2)^0,c
  4684  001D46  0E3D               	movlw	61
  4685  001D48  6E27               	movwf	(___fldiv@a+3)^0,c
  4686  001D4A  0100               	movlb	0	; () banked
  4687  001D4C  51FA               	movf	rotateObj@rotAngle& (0+255),w,b
  4688  001D4E  6E12               	movwf	___xxtofl@val^0,c
  4689  001D50  6A13               	clrf	(___xxtofl@val+1)^0,c
  4690  001D52  6A14               	clrf	(___xxtofl@val+2)^0,c
  4691  001D54  6A15               	clrf	(___xxtofl@val+3)^0,c
  4692  001D56  0E01               	movlw	1
  4693  001D58  ECFB  F007         	call	___xxtofl
  4694  001D5C  C012  F020         	movff	?___xxtofl,___fldiv@b
  4695  001D60  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4696  001D64  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4697  001D68  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4698  001D6C  EC08  F003         	call	___fldiv	;wreg free
  4699  001D70  C020  F039         	movff	?___fldiv,___fltol@f1
  4700  001D74  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4701  001D78  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4702  001D7C  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4703  001D80  ECF1  F00B         	call	___fltol	;wreg free
  4704  001D84  C039  F0FB         	movff	?___fltol,rotateObj@totStep
  4705  001D88  C03A  F0FC         	movff	?___fltol+1,rotateObj@totStep+1
  4706  001D8C                     
  4707                           ;motors.c: 582:     for(i = 0; i < totStep; i++){
  4708  001D8C  0E00               	movlw	0
  4709  001D8E  0100               	movlb	0	; () banked
  4710  001D90  6FFE               	movwf	(rotateObj@i+1)& (0+255),b
  4711  001D92  0E00               	movlw	0
  4712  001D94  6FFD               	movwf	rotateObj@i& (0+255),b
  4713  001D96  EFF8  F00E         	goto	l4063
  4714  001D9A                     l4051:
  4715  001D9A  FFFF               	dw	65535	; assembler added errata NOP
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;motors.c: 584:         LATD &= 0xC3;
  4719  001D9C  0EC3               	movlw	195
  4720  001D9E  168C               	andwf	140,f,c	;volatile
  4721  001DA0                     
  4722                           ; BSR set to: 0
  4723                           ;motors.c: 586:         LATD |= rotSequence[i%4] << 2;
  4724  001DA0  0E03               	movlw	3
  4725  001DA2  15FD               	andwf	rotateObj@i& (0+255),w,b
  4726  001DA4  6FF7               	movwf	??_rotateObj& (0+255),b
  4727  001DA6  0E00               	movlw	0
  4728  001DA8  15FE               	andwf	(rotateObj@i+1)& (0+255),w,b
  4729  001DAA  6FF8               	movwf	(??_rotateObj+1)& (0+255),b
  4730  001DAC  0E80               	movlw	low rotateObj@rotSequence
  4731  001DAE  25F7               	addwf	??_rotateObj& (0+255),w,b
  4732  001DB0  6ED9               	movwf	fsr2l,c
  4733  001DB2  0E00               	movlw	high rotateObj@rotSequence
  4734  001DB4  21F8               	addwfc	(??_rotateObj+1)& (0+255),w,b
  4735  001DB6  6EDA               	movwf	fsr2h,c
  4736  001DB8  50DF               	movf	indf2,w,c
  4737  001DBA  6FF9               	movwf	(??_rotateObj+2)& (0+255),b
  4738  001DBC  90D8               	bcf	status,0,c
  4739  001DBE  37F9               	rlcf	(??_rotateObj+2)& (0+255),f,b
  4740  001DC0  90D8               	bcf	status,0,c
  4741  001DC2  35F9               	rlcf	(??_rotateObj+2)& (0+255),w,b
  4742  001DC4  128C               	iorwf	140,f,c	;volatile
  4743  001DC6                     
  4744                           ; BSR set to: 0
  4745                           ;motors.c: 590:         T2CONbits.TMR2ON = 1;
  4746  001DC6  84CA               	bsf	202,2,c	;volatile
  4747  001DC8                     l4057:
  4748  001DC8  FFFF               	dw	65535	; assembler added errata NOP
  4749  001DCA  ECAF  F012         	call	_stepMade	;wreg free
  4750  001DCE  5012               	movf	?_stepMade^0,w,c
  4751  001DD0  1013               	iorwf	(?_stepMade+1)^0,w,c
  4752  001DD2  B4D8               	btfsc	status,2,c
  4753  001DD4  EFEE  F00E         	goto	u3511
  4754  001DD8  EFF1  F00E         	goto	u3510
  4755  001DDC                     u3511:
  4756  001DDC  FFFF               	dw	65535	; assembler added errata NOP
  4757  001DDE  EFE4  F00E         	goto	l4057
  4758  001DE2                     u3510:
  4759  001DE2  FFFF               	dw	65535	; assembler added errata NOP
  4760  001DE4                     
  4761                           ;motors.c: 592:         T2CONbits.TMR2ON = 1;
  4762  001DE4  84CA               	bsf	202,2,c	;volatile
  4763  001DE6                     
  4764                           ;motors.c: 593:         TMR2 = 0;
  4765  001DE6  0E00               	movlw	0
  4766  001DE8  6ECC               	movwf	204,c	;volatile
  4767  001DEA                     
  4768                           ;motors.c: 594:     }
  4769  001DEA  0100               	movlb	0	; () banked
  4770  001DEC  4BFD               	infsnz	rotateObj@i& (0+255),f,b
  4771  001DEE  2BFE               	incf	(rotateObj@i+1)& (0+255),f,b
  4772  001DF0                     l4063:
  4773  001DF0  FFFF               	dw	65535	; assembler added errata NOP
  4774                           
  4775                           ; BSR set to: 0
  4776  001DF2  51FB               	movf	rotateObj@totStep& (0+255),w,b
  4777  001DF4  5DFD               	subwf	rotateObj@i& (0+255),w,b
  4778  001DF6  51FC               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4779  001DF8  59FE               	subwfb	(rotateObj@i+1)& (0+255),w,b
  4780  001DFA  A0D8               	btfss	status,0,c
  4781  001DFC  EF02  F00F         	goto	u3521
  4782  001E00  EF05  F00F         	goto	u3520
  4783  001E04                     u3521:
  4784  001E04  FFFF               	dw	65535	; assembler added errata NOP
  4785  001E06  EFCD  F00E         	goto	l4051
  4786  001E0A                     u3520:
  4787  001E0A  FFFF               	dw	65535	; assembler added errata NOP
  4788  001E0C                     
  4789                           ; BSR set to: 0
  4790  001E0C  0012               	return		;funcret
  4791  001E0E  FFFF               	dw	65535	; errata NOP
  4792  001E10                     __end_of_rotateObj:
  4793                           	callstack 0
  4794                           
  4795 ;; *************** function ___xxtofl *****************
  4796 ;; Defined at:
  4797 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4798 ;; Parameters:    Size  Location     Type
  4799 ;;  sign            1    wreg     unsigned char 
  4800 ;;  val             4   17[COMRAM] long 
  4801 ;; Auto vars:     Size  Location     Type
  4802 ;;  sign            1   25[COMRAM] unsigned char 
  4803 ;;  arg             4   27[COMRAM] unsigned long 
  4804 ;;  exp             1   26[COMRAM] unsigned char 
  4805 ;; Return value:  Size  Location     Type
  4806 ;;                  4   17[COMRAM] unsigned char 
  4807 ;; Registers used:
  4808 ;;		wreg, status,2, status,0
  4809 ;; Tracked objects:
  4810 ;;		On entry : 0/0
  4811 ;;		On exit  : 0/0
  4812 ;;		Unchanged: 0/0
  4813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4814 ;;      Params:         4       0       0       0       0       0       0
  4815 ;;      Locals:         6       0       0       0       0       0       0
  4816 ;;      Temps:          4       0       0       0       0       0       0
  4817 ;;      Totals:        14       0       0       0       0       0       0
  4818 ;;Total ram usage:       14 bytes
  4819 ;; Hardware stack levels used:    1
  4820 ;; Hardware stack levels required when called:    4
  4821 ;; This function calls:
  4822 ;;		Nothing
  4823 ;; This function is called by:
  4824 ;;		_rotateObj
  4825 ;; This function uses a non-reentrant model
  4826 ;;
  4827                           
  4828                           	psect	text31
  4829  000FF6                     __ptext31:
  4830                           	callstack 0
  4831  000FF6                     ___xxtofl:
  4832                           	callstack 0
  4833  000FF6  FFFF               	dw	65535	; assembler added errata NOP
  4834                           
  4835                           ; BSR set to: 0
  4836                           ;incstack = 0
  4837                           ;___xxtofl@sign stored from wreg
  4838  000FF8  6E1A               	movwf	___xxtofl@sign^0,c
  4839  000FFA  501A               	movf	___xxtofl@sign^0,w,c
  4840  000FFC  B4D8               	btfsc	status,2,c
  4841  000FFE  EF03  F008         	goto	u2981
  4842  001002  EF06  F008         	goto	u2980
  4843  001006                     u2981:
  4844  001006  FFFF               	dw	65535	; assembler added errata NOP
  4845  001008  EF2B  F008         	goto	l1265
  4846  00100C                     u2980:
  4847  00100C  FFFF               	dw	65535	; assembler added errata NOP
  4848  00100E  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4849  001010  EF0F  F008         	goto	u2990
  4850  001014  EF0C  F008         	goto	u2991
  4851  001018                     u2991:
  4852  001018  FFFF               	dw	65535	; assembler added errata NOP
  4853  00101A  EF2B  F008         	goto	l1265
  4854  00101E                     u2990:
  4855  00101E  FFFF               	dw	65535	; assembler added errata NOP
  4856  001020  C012  F016         	movff	___xxtofl@val,??___xxtofl
  4857  001024  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  4858  001028  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  4859  00102C  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  4860  001030  1E16               	comf	??___xxtofl^0,f,c
  4861  001032  1E17               	comf	(??___xxtofl+1)^0,f,c
  4862  001034  1E18               	comf	(??___xxtofl+2)^0,f,c
  4863  001036  1E19               	comf	(??___xxtofl+3)^0,f,c
  4864  001038  2A16               	incf	??___xxtofl^0,f,c
  4865  00103A  0E00               	movlw	0
  4866  00103C  2217               	addwfc	(??___xxtofl+1)^0,f,c
  4867  00103E  2218               	addwfc	(??___xxtofl+2)^0,f,c
  4868  001040  2219               	addwfc	(??___xxtofl+3)^0,f,c
  4869  001042  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  4870  001046  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4871  00104A  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4872  00104E  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4873  001052  EF34  F008         	goto	l3745
  4874  001056                     l1265:
  4875  001056  FFFF               	dw	65535	; assembler added errata NOP
  4876  001058  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  4877  00105C  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4878  001060  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4879  001064  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4880  001068                     l3745:
  4881  001068  FFFF               	dw	65535	; assembler added errata NOP
  4882  00106A  5012               	movf	___xxtofl@val^0,w,c
  4883  00106C  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  4884  00106E  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  4885  001070  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  4886  001072  A4D8               	btfss	status,2,c
  4887  001074  EF3E  F008         	goto	u3001
  4888  001078  EF41  F008         	goto	u3000
  4889  00107C                     u3001:
  4890  00107C  FFFF               	dw	65535	; assembler added errata NOP
  4891  00107E  EF4C  F008         	goto	l3751
  4892  001082                     u3000:
  4893  001082  FFFF               	dw	65535	; assembler added errata NOP
  4894  001084  0E00               	movlw	0
  4895  001086  6E12               	movwf	?___xxtofl^0,c
  4896  001088  0E00               	movlw	0
  4897  00108A  6E13               	movwf	(?___xxtofl+1)^0,c
  4898  00108C  0E00               	movlw	0
  4899  00108E  6E14               	movwf	(?___xxtofl+2)^0,c
  4900  001090  0E00               	movlw	0
  4901  001092  6E15               	movwf	(?___xxtofl+3)^0,c
  4902  001094  EFF4  F008         	goto	l1268
  4903  001098                     l3751:
  4904  001098  FFFF               	dw	65535	; assembler added errata NOP
  4905  00109A  0E96               	movlw	150
  4906  00109C  6E1B               	movwf	___xxtofl@exp^0,c
  4907  00109E  EF58  F008         	goto	l3755
  4908  0010A2                     l3753:
  4909  0010A2  FFFF               	dw	65535	; assembler added errata NOP
  4910  0010A4  2A1B               	incf	___xxtofl@exp^0,f,c
  4911  0010A6  90D8               	bcf	status,0,c
  4912  0010A8  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4913  0010AA  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4914  0010AC  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4915  0010AE  321C               	rrcf	___xxtofl@arg^0,f,c
  4916  0010B0                     l3755:
  4917  0010B0  FFFF               	dw	65535	; assembler added errata NOP
  4918  0010B2  0E00               	movlw	0
  4919  0010B4  141C               	andwf	___xxtofl@arg^0,w,c
  4920  0010B6  6E16               	movwf	??___xxtofl^0,c
  4921  0010B8  0E00               	movlw	0
  4922  0010BA  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4923  0010BC  6E17               	movwf	(??___xxtofl+1)^0,c
  4924  0010BE  0E00               	movlw	0
  4925  0010C0  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4926  0010C2  6E18               	movwf	(??___xxtofl+2)^0,c
  4927  0010C4  0EFE               	movlw	254
  4928  0010C6  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4929  0010C8  6E19               	movwf	(??___xxtofl+3)^0,c
  4930  0010CA  5016               	movf	??___xxtofl^0,w,c
  4931  0010CC  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4932  0010CE  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4933  0010D0  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4934  0010D2  A4D8               	btfss	status,2,c
  4935  0010D4  EF6E  F008         	goto	u3011
  4936  0010D8  EF71  F008         	goto	u3010
  4937  0010DC                     u3011:
  4938  0010DC  FFFF               	dw	65535	; assembler added errata NOP
  4939  0010DE  EF51  F008         	goto	l3753
  4940  0010E2                     u3010:
  4941  0010E2  FFFF               	dw	65535	; assembler added errata NOP
  4942  0010E4  EF81  F008         	goto	l1272
  4943  0010E8                     l3757:
  4944  0010E8  FFFF               	dw	65535	; assembler added errata NOP
  4945  0010EA  2A1B               	incf	___xxtofl@exp^0,f,c
  4946  0010EC  0E01               	movlw	1
  4947  0010EE  261C               	addwf	___xxtofl@arg^0,f,c
  4948  0010F0  0E00               	movlw	0
  4949  0010F2  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4950  0010F4  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4951  0010F6  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4952  0010F8  90D8               	bcf	status,0,c
  4953  0010FA  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4954  0010FC  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4955  0010FE  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4956  001100  321C               	rrcf	___xxtofl@arg^0,f,c
  4957  001102                     l1272:
  4958  001102  FFFF               	dw	65535	; assembler added errata NOP
  4959  001104  0E00               	movlw	0
  4960  001106  141C               	andwf	___xxtofl@arg^0,w,c
  4961  001108  6E16               	movwf	??___xxtofl^0,c
  4962  00110A  0E00               	movlw	0
  4963  00110C  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4964  00110E  6E17               	movwf	(??___xxtofl+1)^0,c
  4965  001110  0E00               	movlw	0
  4966  001112  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4967  001114  6E18               	movwf	(??___xxtofl+2)^0,c
  4968  001116  0EFF               	movlw	255
  4969  001118  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4970  00111A  6E19               	movwf	(??___xxtofl+3)^0,c
  4971  00111C  5016               	movf	??___xxtofl^0,w,c
  4972  00111E  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4973  001120  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4974  001122  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4975  001124  A4D8               	btfss	status,2,c
  4976  001126  EF97  F008         	goto	u3021
  4977  00112A  EF9A  F008         	goto	u3020
  4978  00112E                     u3021:
  4979  00112E  FFFF               	dw	65535	; assembler added errata NOP
  4980  001130  EF74  F008         	goto	l3757
  4981  001134                     u3020:
  4982  001134  FFFF               	dw	65535	; assembler added errata NOP
  4983  001136  EFA4  F008         	goto	l3765
  4984  00113A                     l3763:
  4985  00113A  FFFF               	dw	65535	; assembler added errata NOP
  4986  00113C  061B               	decf	___xxtofl@exp^0,f,c
  4987  00113E  90D8               	bcf	status,0,c
  4988  001140  361C               	rlcf	___xxtofl@arg^0,f,c
  4989  001142  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4990  001144  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4991  001146  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4992  001148                     l3765:
  4993  001148  FFFF               	dw	65535	; assembler added errata NOP
  4994  00114A  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4995  00114C  EFAA  F008         	goto	u3031
  4996  001150  EFAD  F008         	goto	u3030
  4997  001154                     u3031:
  4998  001154  FFFF               	dw	65535	; assembler added errata NOP
  4999  001156  EFB7  F008         	goto	l1279
  5000  00115A                     u3030:
  5001  00115A  FFFF               	dw	65535	; assembler added errata NOP
  5002  00115C  0E02               	movlw	2
  5003  00115E  601B               	cpfslt	___xxtofl@exp^0,c
  5004  001160  EFB4  F008         	goto	u3041
  5005  001164  EFB7  F008         	goto	u3040
  5006  001168                     u3041:
  5007  001168  FFFF               	dw	65535	; assembler added errata NOP
  5008  00116A  EF9D  F008         	goto	l3763
  5009  00116E                     u3040:
  5010  00116E                     l1279:
  5011  00116E  FFFF               	dw	65535	; assembler added errata NOP
  5012  001170  B01B               	btfsc	___xxtofl@exp^0,0,c
  5013  001172  EFBD  F008         	goto	u3051
  5014  001176  EFC0  F008         	goto	u3050
  5015  00117A                     u3051:
  5016  00117A  FFFF               	dw	65535	; assembler added errata NOP
  5017  00117C  EFC2  F008         	goto	l3771
  5018  001180                     u3050:
  5019  001180  FFFF               	dw	65535	; assembler added errata NOP
  5020  001182  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  5021  001184                     l3771:
  5022  001184  FFFF               	dw	65535	; assembler added errata NOP
  5023  001186  90D8               	bcf	status,0,c
  5024  001188  321B               	rrcf	___xxtofl@exp^0,f,c
  5025  00118A  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  5026  00118E  6A17               	clrf	(??___xxtofl+1)^0,c
  5027  001190  6A18               	clrf	(??___xxtofl+2)^0,c
  5028  001192  6A19               	clrf	(??___xxtofl+3)^0,c
  5029  001194  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  5030  001198  6A18               	clrf	(??___xxtofl+2)^0,c
  5031  00119A  6A17               	clrf	(??___xxtofl+1)^0,c
  5032  00119C  6A16               	clrf	??___xxtofl^0,c
  5033  00119E  5016               	movf	??___xxtofl^0,w,c
  5034  0011A0  121C               	iorwf	___xxtofl@arg^0,f,c
  5035  0011A2  5017               	movf	(??___xxtofl+1)^0,w,c
  5036  0011A4  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  5037  0011A6  5018               	movf	(??___xxtofl+2)^0,w,c
  5038  0011A8  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  5039  0011AA  5019               	movf	(??___xxtofl+3)^0,w,c
  5040  0011AC  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  5041  0011AE  501A               	movf	___xxtofl@sign^0,w,c
  5042  0011B0  B4D8               	btfsc	status,2,c
  5043  0011B2  EFDD  F008         	goto	u3061
  5044  0011B6  EFE0  F008         	goto	u3060
  5045  0011BA                     u3061:
  5046  0011BA  FFFF               	dw	65535	; assembler added errata NOP
  5047  0011BC  EFEB  F008         	goto	l3781
  5048  0011C0                     u3060:
  5049  0011C0  FFFF               	dw	65535	; assembler added errata NOP
  5050  0011C2  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  5051  0011C4  EFE9  F008         	goto	u3070
  5052  0011C8  EFE6  F008         	goto	u3071
  5053  0011CC                     u3071:
  5054  0011CC  FFFF               	dw	65535	; assembler added errata NOP
  5055  0011CE  EFEB  F008         	goto	l3781
  5056  0011D2                     u3070:
  5057  0011D2  FFFF               	dw	65535	; assembler added errata NOP
  5058  0011D4  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  5059  0011D6                     l3781:
  5060  0011D6  FFFF               	dw	65535	; assembler added errata NOP
  5061  0011D8  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  5062  0011DC  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  5063  0011E0  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  5064  0011E4  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  5065  0011E8                     l1268:
  5066  0011E8  FFFF               	dw	65535	; assembler added errata NOP
  5067  0011EA  0012               	return		;funcret
  5068  0011EC  FFFF               	dw	65535	; errata NOP
  5069  0011EE                     __end_of___xxtofl:
  5070                           	callstack 0
  5071                           
  5072 ;; *************** function ___fltol *****************
  5073 ;; Defined at:
  5074 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  5075 ;; Parameters:    Size  Location     Type
  5076 ;;  f1              4   56[COMRAM] unsigned char 
  5077 ;; Auto vars:     Size  Location     Type
  5078 ;;  exp1            1   65[COMRAM] unsigned char 
  5079 ;;  sign1           1   64[COMRAM] unsigned char 
  5080 ;; Return value:  Size  Location     Type
  5081 ;;                  4   56[COMRAM] long 
  5082 ;; Registers used:
  5083 ;;		wreg, status,2, status,0
  5084 ;; Tracked objects:
  5085 ;;		On entry : 0/0
  5086 ;;		On exit  : 0/0
  5087 ;;		Unchanged: 0/0
  5088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5089 ;;      Params:         4       0       0       0       0       0       0
  5090 ;;      Locals:         2       0       0       0       0       0       0
  5091 ;;      Temps:          4       0       0       0       0       0       0
  5092 ;;      Totals:        10       0       0       0       0       0       0
  5093 ;;Total ram usage:       10 bytes
  5094 ;; Hardware stack levels used:    1
  5095 ;; Hardware stack levels required when called:    4
  5096 ;; This function calls:
  5097 ;;		Nothing
  5098 ;; This function is called by:
  5099 ;;		_rotateObj
  5100 ;; This function uses a non-reentrant model
  5101 ;;
  5102                           
  5103                           	psect	text32
  5104  0017E2                     __ptext32:
  5105                           	callstack 0
  5106  0017E2                     ___fltol:
  5107                           	callstack 0
  5108  0017E2  FFFF               	dw	65535	; assembler added errata NOP
  5109  0017E4  343B               	rlcf	(___fltol@f1+2)^0,w,c
  5110  0017E6  343C               	rlcf	(___fltol@f1+3)^0,w,c
  5111  0017E8  6E42               	movwf	___fltol@exp1^0,c
  5112  0017EA  5042               	movf	___fltol@exp1^0,w,c
  5113  0017EC  A4D8               	btfss	status,2,c
  5114  0017EE  EFFB  F00B         	goto	u2911
  5115  0017F2  EFFE  F00B         	goto	u2910
  5116  0017F6                     u2911:
  5117  0017F6  FFFF               	dw	65535	; assembler added errata NOP
  5118  0017F8  EF0A  F00C         	goto	l3701
  5119  0017FC                     u2910:
  5120  0017FC  FFFF               	dw	65535	; assembler added errata NOP
  5121  0017FE                     l3697:
  5122  0017FE  FFFF               	dw	65535	; assembler added errata NOP
  5123  001800  0E00               	movlw	0
  5124  001802  6E39               	movwf	?___fltol^0,c
  5125  001804  0E00               	movlw	0
  5126  001806  6E3A               	movwf	(?___fltol+1)^0,c
  5127  001808  0E00               	movlw	0
  5128  00180A  6E3B               	movwf	(?___fltol+2)^0,c
  5129  00180C  0E00               	movlw	0
  5130  00180E  6E3C               	movwf	(?___fltol+3)^0,c
  5131  001810  EF89  F00C         	goto	l907
  5132  001814                     l3701:
  5133  001814  FFFF               	dw	65535	; assembler added errata NOP
  5134  001816  C039  F03D         	movff	___fltol@f1,??___fltol
  5135  00181A  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  5136  00181E  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  5137  001822  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  5138  001826  0E20               	movlw	32
  5139  001828  EF1C  F00C         	goto	u2920
  5140  00182C                     u2925:
  5141  00182C  FFFF               	dw	65535	; assembler added errata NOP
  5142  00182E  90D8               	bcf	status,0,c
  5143  001830  3240               	rrcf	(??___fltol+3)^0,f,c
  5144  001832  323F               	rrcf	(??___fltol+2)^0,f,c
  5145  001834  323E               	rrcf	(??___fltol+1)^0,f,c
  5146  001836  323D               	rrcf	??___fltol^0,f,c
  5147  001838                     u2920:
  5148  001838  FFFF               	dw	65535	; assembler added errata NOP
  5149  00183A  2EE8               	decfsz	wreg,f,c
  5150  00183C  EF16  F00C         	goto	u2925
  5151  001840  503D               	movf	??___fltol^0,w,c
  5152  001842  6E41               	movwf	___fltol@sign1^0,c
  5153  001844  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  5154  001846  0EFF               	movlw	255
  5155  001848  1639               	andwf	___fltol@f1^0,f,c
  5156  00184A  0EFF               	movlw	255
  5157  00184C  163A               	andwf	(___fltol@f1+1)^0,f,c
  5158  00184E  0EFF               	movlw	255
  5159  001850  163B               	andwf	(___fltol@f1+2)^0,f,c
  5160  001852  0E00               	movlw	0
  5161  001854  163C               	andwf	(___fltol@f1+3)^0,f,c
  5162  001856  0E96               	movlw	150
  5163  001858  5E42               	subwf	___fltol@exp1^0,f,c
  5164  00185A  BE42               	btfsc	___fltol@exp1^0,7,c
  5165  00185C  EF35  F00C         	goto	u2930
  5166  001860  EF32  F00C         	goto	u2931
  5167  001864                     u2931:
  5168  001864  FFFF               	dw	65535	; assembler added errata NOP
  5169  001866  EF4F  F00C         	goto	l3721
  5170  00186A                     u2930:
  5171  00186A  FFFF               	dw	65535	; assembler added errata NOP
  5172  00186C  5042               	movf	___fltol@exp1^0,w,c
  5173  00186E  0A80               	xorlw	128
  5174  001870  0F97               	addlw	151
  5175  001872  B0D8               	btfsc	status,0,c
  5176  001874  EF3E  F00C         	goto	u2941
  5177  001878  EF41  F00C         	goto	u2940
  5178  00187C                     u2941:
  5179  00187C  FFFF               	dw	65535	; assembler added errata NOP
  5180  00187E  EF44  F00C         	goto	l3717
  5181  001882                     u2940:
  5182  001882  FFFF               	dw	65535	; assembler added errata NOP
  5183  001884  EFFF  F00B         	goto	l3697
  5184  001888                     l3717:
  5185  001888  FFFF               	dw	65535	; assembler added errata NOP
  5186  00188A  90D8               	bcf	status,0,c
  5187  00188C  323C               	rrcf	(___fltol@f1+3)^0,f,c
  5188  00188E  323B               	rrcf	(___fltol@f1+2)^0,f,c
  5189  001890  323A               	rrcf	(___fltol@f1+1)^0,f,c
  5190  001892  3239               	rrcf	___fltol@f1^0,f,c
  5191  001894  3E42               	incfsz	___fltol@exp1^0,f,c
  5192  001896  EF44  F00C         	goto	l3717
  5193  00189A  EF6D  F00C         	goto	l3731
  5194  00189E                     l3721:
  5195  00189E  FFFF               	dw	65535	; assembler added errata NOP
  5196  0018A0  0E1F               	movlw	31
  5197  0018A2  6442               	cpfsgt	___fltol@exp1^0,c
  5198  0018A4  EF56  F00C         	goto	u2951
  5199  0018A8  EF59  F00C         	goto	u2950
  5200  0018AC                     u2951:
  5201  0018AC  FFFF               	dw	65535	; assembler added errata NOP
  5202  0018AE  EF63  F00C         	goto	l3729
  5203  0018B2                     u2950:
  5204  0018B2  FFFF               	dw	65535	; assembler added errata NOP
  5205  0018B4  EFFF  F00B         	goto	l3697
  5206  0018B8                     l3727:
  5207  0018B8  FFFF               	dw	65535	; assembler added errata NOP
  5208  0018BA  90D8               	bcf	status,0,c
  5209  0018BC  3639               	rlcf	___fltol@f1^0,f,c
  5210  0018BE  363A               	rlcf	(___fltol@f1+1)^0,f,c
  5211  0018C0  363B               	rlcf	(___fltol@f1+2)^0,f,c
  5212  0018C2  363C               	rlcf	(___fltol@f1+3)^0,f,c
  5213  0018C4  0642               	decf	___fltol@exp1^0,f,c
  5214  0018C6                     l3729:
  5215  0018C6  FFFF               	dw	65535	; assembler added errata NOP
  5216  0018C8  5042               	movf	___fltol@exp1^0,w,c
  5217  0018CA  A4D8               	btfss	status,2,c
  5218  0018CC  EF6A  F00C         	goto	u2961
  5219  0018D0  EF6D  F00C         	goto	u2960
  5220  0018D4                     u2961:
  5221  0018D4  FFFF               	dw	65535	; assembler added errata NOP
  5222  0018D6  EF5C  F00C         	goto	l3727
  5223  0018DA                     u2960:
  5224  0018DA                     l3731:
  5225  0018DA  FFFF               	dw	65535	; assembler added errata NOP
  5226  0018DC  5041               	movf	___fltol@sign1^0,w,c
  5227  0018DE  B4D8               	btfsc	status,2,c
  5228  0018E0  EF74  F00C         	goto	u2971
  5229  0018E4  EF77  F00C         	goto	u2970
  5230  0018E8                     u2971:
  5231  0018E8  FFFF               	dw	65535	; assembler added errata NOP
  5232  0018EA  EF80  F00C         	goto	l3735
  5233  0018EE                     u2970:
  5234  0018EE  FFFF               	dw	65535	; assembler added errata NOP
  5235  0018F0  1E3C               	comf	(___fltol@f1+3)^0,f,c
  5236  0018F2  1E3B               	comf	(___fltol@f1+2)^0,f,c
  5237  0018F4  1E3A               	comf	(___fltol@f1+1)^0,f,c
  5238  0018F6  6C39               	negf	___fltol@f1^0,c
  5239  0018F8  0E00               	movlw	0
  5240  0018FA  223A               	addwfc	(___fltol@f1+1)^0,f,c
  5241  0018FC  223B               	addwfc	(___fltol@f1+2)^0,f,c
  5242  0018FE  223C               	addwfc	(___fltol@f1+3)^0,f,c
  5243  001900                     l3735:
  5244  001900  FFFF               	dw	65535	; assembler added errata NOP
  5245  001902  C039  F039         	movff	___fltol@f1,?___fltol
  5246  001906  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  5247  00190A  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  5248  00190E  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  5249  001912                     l907:
  5250  001912  FFFF               	dw	65535	; assembler added errata NOP
  5251  001914  0012               	return		;funcret
  5252  001916  FFFF               	dw	65535	; errata NOP
  5253  001918                     __end_of___fltol:
  5254                           	callstack 0
  5255                           
  5256 ;; *************** function ___fldiv *****************
  5257 ;; Defined at:
  5258 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  5259 ;; Parameters:    Size  Location     Type
  5260 ;;  b               4   31[COMRAM] long 
  5261 ;;  a               4   35[COMRAM] long 
  5262 ;; Auto vars:     Size  Location     Type
  5263 ;;  grs             4   50[COMRAM] unsigned long 
  5264 ;;  rem             4   43[COMRAM] unsigned long 
  5265 ;;  new_exp         2   48[COMRAM] short 
  5266 ;;  aexp            1   55[COMRAM] unsigned char 
  5267 ;;  bexp            1   54[COMRAM] unsigned char 
  5268 ;;  sign            1   47[COMRAM] unsigned char 
  5269 ;; Return value:  Size  Location     Type
  5270 ;;                  4   31[COMRAM] unsigned char 
  5271 ;; Registers used:
  5272 ;;		wreg, status,2, status,0
  5273 ;; Tracked objects:
  5274 ;;		On entry : 0/0
  5275 ;;		On exit  : 0/0
  5276 ;;		Unchanged: 0/0
  5277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5278 ;;      Params:         8       0       0       0       0       0       0
  5279 ;;      Locals:        13       0       0       0       0       0       0
  5280 ;;      Temps:          4       0       0       0       0       0       0
  5281 ;;      Totals:        25       0       0       0       0       0       0
  5282 ;;Total ram usage:       25 bytes
  5283 ;; Hardware stack levels used:    1
  5284 ;; Hardware stack levels required when called:    4
  5285 ;; This function calls:
  5286 ;;		Nothing
  5287 ;; This function is called by:
  5288 ;;		_rotateObj
  5289 ;; This function uses a non-reentrant model
  5290 ;;
  5291                           
  5292                           	psect	text33
  5293  000610                     __ptext33:
  5294                           	callstack 0
  5295  000610                     ___fldiv:
  5296                           	callstack 0
  5297  000610  FFFF               	dw	65535	; assembler added errata NOP
  5298  000612  5023               	movf	(___fldiv@b+3)^0,w,c
  5299  000614  0B80               	andlw	128
  5300  000616  6E30               	movwf	___fldiv@sign^0,c
  5301  000618  5023               	movf	(___fldiv@b+3)^0,w,c
  5302  00061A  2423               	addwf	(___fldiv@b+3)^0,w,c
  5303  00061C  6E37               	movwf	___fldiv@bexp^0,c
  5304  00061E  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5305  000620  EF14  F003         	goto	u2681
  5306  000624  EF17  F003         	goto	u2680
  5307  000628                     u2681:
  5308  000628  FFFF               	dw	65535	; assembler added errata NOP
  5309  00062A  EF19  F003         	goto	l3563
  5310  00062E                     u2680:
  5311  00062E  FFFF               	dw	65535	; assembler added errata NOP
  5312  000630  8037               	bsf	___fldiv@bexp^0,0,c
  5313  000632                     l3563:
  5314  000632  FFFF               	dw	65535	; assembler added errata NOP
  5315  000634  5037               	movf	___fldiv@bexp^0,w,c
  5316  000636  B4D8               	btfsc	status,2,c
  5317  000638  EF20  F003         	goto	u2691
  5318  00063C  EF23  F003         	goto	u2690
  5319  000640                     u2691:
  5320  000640  FFFF               	dw	65535	; assembler added errata NOP
  5321  000642  EF3C  F003         	goto	l3573
  5322  000646                     u2690:
  5323  000646  FFFF               	dw	65535	; assembler added errata NOP
  5324  000648  2837               	incf	___fldiv@bexp^0,w,c
  5325  00064A  A4D8               	btfss	status,2,c
  5326  00064C  EF2A  F003         	goto	u2701
  5327  000650  EF2D  F003         	goto	u2700
  5328  000654                     u2701:
  5329  000654  FFFF               	dw	65535	; assembler added errata NOP
  5330  000656  EF36  F003         	goto	l3569
  5331  00065A                     u2700:
  5332  00065A  FFFF               	dw	65535	; assembler added errata NOP
  5333  00065C  0E00               	movlw	0
  5334  00065E  6E20               	movwf	___fldiv@b^0,c
  5335  000660  0E00               	movlw	0
  5336  000662  6E21               	movwf	(___fldiv@b+1)^0,c
  5337  000664  0E00               	movlw	0
  5338  000666  6E22               	movwf	(___fldiv@b+2)^0,c
  5339  000668  0E00               	movlw	0
  5340  00066A  6E23               	movwf	(___fldiv@b+3)^0,c
  5341  00066C                     l3569:
  5342  00066C  FFFF               	dw	65535	; assembler added errata NOP
  5343  00066E  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5344  000670  0E00               	movlw	0
  5345  000672  6E23               	movwf	(___fldiv@b+3)^0,c
  5346  000674  EF45  F003         	goto	l3575
  5347  000678                     l3573:
  5348  000678  FFFF               	dw	65535	; assembler added errata NOP
  5349  00067A  0E00               	movlw	0
  5350  00067C  6E20               	movwf	___fldiv@b^0,c
  5351  00067E  0E00               	movlw	0
  5352  000680  6E21               	movwf	(___fldiv@b+1)^0,c
  5353  000682  0E00               	movlw	0
  5354  000684  6E22               	movwf	(___fldiv@b+2)^0,c
  5355  000686  0E00               	movlw	0
  5356  000688  6E23               	movwf	(___fldiv@b+3)^0,c
  5357  00068A                     l3575:
  5358  00068A  FFFF               	dw	65535	; assembler added errata NOP
  5359  00068C  5027               	movf	(___fldiv@a+3)^0,w,c
  5360  00068E  0B80               	andlw	128
  5361  000690  1A30               	xorwf	___fldiv@sign^0,f,c
  5362  000692  5027               	movf	(___fldiv@a+3)^0,w,c
  5363  000694  2427               	addwf	(___fldiv@a+3)^0,w,c
  5364  000696  6E38               	movwf	___fldiv@aexp^0,c
  5365  000698  AE26               	btfss	(___fldiv@a+2)^0,7,c
  5366  00069A  EF51  F003         	goto	u2711
  5367  00069E  EF54  F003         	goto	u2710
  5368  0006A2                     u2711:
  5369  0006A2  FFFF               	dw	65535	; assembler added errata NOP
  5370  0006A4  EF56  F003         	goto	l3583
  5371  0006A8                     u2710:
  5372  0006A8  FFFF               	dw	65535	; assembler added errata NOP
  5373  0006AA  8038               	bsf	___fldiv@aexp^0,0,c
  5374  0006AC                     l3583:
  5375  0006AC  FFFF               	dw	65535	; assembler added errata NOP
  5376  0006AE  5038               	movf	___fldiv@aexp^0,w,c
  5377  0006B0  B4D8               	btfsc	status,2,c
  5378  0006B2  EF5D  F003         	goto	u2721
  5379  0006B6  EF60  F003         	goto	u2720
  5380  0006BA                     u2721:
  5381  0006BA  FFFF               	dw	65535	; assembler added errata NOP
  5382  0006BC  EF79  F003         	goto	l3593
  5383  0006C0                     u2720:
  5384  0006C0  FFFF               	dw	65535	; assembler added errata NOP
  5385  0006C2  2838               	incf	___fldiv@aexp^0,w,c
  5386  0006C4  A4D8               	btfss	status,2,c
  5387  0006C6  EF67  F003         	goto	u2731
  5388  0006CA  EF6A  F003         	goto	u2730
  5389  0006CE                     u2731:
  5390  0006CE  FFFF               	dw	65535	; assembler added errata NOP
  5391  0006D0  EF73  F003         	goto	l3589
  5392  0006D4                     u2730:
  5393  0006D4  FFFF               	dw	65535	; assembler added errata NOP
  5394  0006D6  0E00               	movlw	0
  5395  0006D8  6E24               	movwf	___fldiv@a^0,c
  5396  0006DA  0E00               	movlw	0
  5397  0006DC  6E25               	movwf	(___fldiv@a+1)^0,c
  5398  0006DE  0E00               	movlw	0
  5399  0006E0  6E26               	movwf	(___fldiv@a+2)^0,c
  5400  0006E2  0E00               	movlw	0
  5401  0006E4  6E27               	movwf	(___fldiv@a+3)^0,c
  5402  0006E6                     l3589:
  5403  0006E6  FFFF               	dw	65535	; assembler added errata NOP
  5404  0006E8  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5405  0006EA  0E00               	movlw	0
  5406  0006EC  6E27               	movwf	(___fldiv@a+3)^0,c
  5407  0006EE  EF82  F003         	goto	l3595
  5408  0006F2                     l3593:
  5409  0006F2  FFFF               	dw	65535	; assembler added errata NOP
  5410  0006F4  0E00               	movlw	0
  5411  0006F6  6E24               	movwf	___fldiv@a^0,c
  5412  0006F8  0E00               	movlw	0
  5413  0006FA  6E25               	movwf	(___fldiv@a+1)^0,c
  5414  0006FC  0E00               	movlw	0
  5415  0006FE  6E26               	movwf	(___fldiv@a+2)^0,c
  5416  000700  0E00               	movlw	0
  5417  000702  6E27               	movwf	(___fldiv@a+3)^0,c
  5418  000704                     l3595:
  5419  000704  FFFF               	dw	65535	; assembler added errata NOP
  5420  000706  5024               	movf	___fldiv@a^0,w,c
  5421  000708  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5422  00070A  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5423  00070C  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5424  00070E  A4D8               	btfss	status,2,c
  5425  000710  EF8C  F003         	goto	u2741
  5426  000714  EF8F  F003         	goto	u2740
  5427  000718                     u2741:
  5428  000718  FFFF               	dw	65535	; assembler added errata NOP
  5429  00071A  EFA9  F003         	goto	l3607
  5430  00071E                     u2740:
  5431  00071E  FFFF               	dw	65535	; assembler added errata NOP
  5432  000720  0E00               	movlw	0
  5433  000722  6E20               	movwf	___fldiv@b^0,c
  5434  000724  0E00               	movlw	0
  5435  000726  6E21               	movwf	(___fldiv@b+1)^0,c
  5436  000728  0E00               	movlw	0
  5437  00072A  6E22               	movwf	(___fldiv@b+2)^0,c
  5438  00072C  0E00               	movlw	0
  5439  00072E  6E23               	movwf	(___fldiv@b+3)^0,c
  5440  000730  0E80               	movlw	128
  5441  000732  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5442  000734  0E7F               	movlw	127
  5443  000736  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5444  000738                     l3601:
  5445  000738  FFFF               	dw	65535	; assembler added errata NOP
  5446  00073A  5030               	movf	___fldiv@sign^0,w,c
  5447  00073C  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5448  00073E  C020  F020         	movff	___fldiv@b,?___fldiv
  5449  000742  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5450  000746  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5451  00074A  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5452  00074E  EF1E  F005         	goto	l1192
  5453  000752                     l3607:
  5454  000752  FFFF               	dw	65535	; assembler added errata NOP
  5455  000754  5037               	movf	___fldiv@bexp^0,w,c
  5456  000756  A4D8               	btfss	status,2,c
  5457  000758  EFB0  F003         	goto	u2751
  5458  00075C  EFB3  F003         	goto	u2750
  5459  000760                     u2751:
  5460  000760  FFFF               	dw	65535	; assembler added errata NOP
  5461  000762  EFBE  F003         	goto	l3615
  5462  000766                     u2750:
  5463  000766  FFFF               	dw	65535	; assembler added errata NOP
  5464  000768  0E00               	movlw	0
  5465  00076A  6E20               	movwf	?___fldiv^0,c
  5466  00076C  0E00               	movlw	0
  5467  00076E  6E21               	movwf	(?___fldiv+1)^0,c
  5468  000770  0E00               	movlw	0
  5469  000772  6E22               	movwf	(?___fldiv+2)^0,c
  5470  000774  0E00               	movlw	0
  5471  000776  6E23               	movwf	(?___fldiv+3)^0,c
  5472  000778  EF1E  F005         	goto	l1192
  5473  00077C                     l3615:
  5474  00077C  FFFF               	dw	65535	; assembler added errata NOP
  5475  00077E  5038               	movf	___fldiv@aexp^0,w,c
  5476  000780  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5477  000784  6A29               	clrf	(??___fldiv+1)^0,c
  5478  000786  5E28               	subwf	??___fldiv^0,f,c
  5479  000788  0E00               	movlw	0
  5480  00078A  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5481  00078C  0E7F               	movlw	127
  5482  00078E  2428               	addwf	??___fldiv^0,w,c
  5483  000790  6E31               	movwf	___fldiv@new_exp^0,c
  5484  000792  0E00               	movlw	0
  5485  000794  2029               	addwfc	(??___fldiv+1)^0,w,c
  5486  000796  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5487  000798  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5488  00079C  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5489  0007A0  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5490  0007A4  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5491  0007A8  0E00               	movlw	0
  5492  0007AA  6E20               	movwf	___fldiv@b^0,c
  5493  0007AC  0E00               	movlw	0
  5494  0007AE  6E21               	movwf	(___fldiv@b+1)^0,c
  5495  0007B0  0E00               	movlw	0
  5496  0007B2  6E22               	movwf	(___fldiv@b+2)^0,c
  5497  0007B4  0E00               	movlw	0
  5498  0007B6  6E23               	movwf	(___fldiv@b+3)^0,c
  5499  0007B8  0E00               	movlw	0
  5500  0007BA  6E33               	movwf	___fldiv@grs^0,c
  5501  0007BC  0E00               	movlw	0
  5502  0007BE  6E34               	movwf	(___fldiv@grs+1)^0,c
  5503  0007C0  0E00               	movlw	0
  5504  0007C2  6E35               	movwf	(___fldiv@grs+2)^0,c
  5505  0007C4  0E00               	movlw	0
  5506  0007C6  6E36               	movwf	(___fldiv@grs+3)^0,c
  5507  0007C8  0E00               	movlw	0
  5508  0007CA  6E38               	movwf	___fldiv@aexp^0,c
  5509  0007CC  EF2A  F004         	goto	l1194
  5510  0007D0                     l3625:
  5511  0007D0  FFFF               	dw	65535	; assembler added errata NOP
  5512  0007D2  5038               	movf	___fldiv@aexp^0,w,c
  5513  0007D4  B4D8               	btfsc	status,2,c
  5514  0007D6  EFEF  F003         	goto	u2761
  5515  0007DA  EFF2  F003         	goto	u2760
  5516  0007DE                     u2761:
  5517  0007DE  FFFF               	dw	65535	; assembler added errata NOP
  5518  0007E0  EF0D  F004         	goto	l3633
  5519  0007E4                     u2760:
  5520  0007E4  FFFF               	dw	65535	; assembler added errata NOP
  5521  0007E6  90D8               	bcf	status,0,c
  5522  0007E8  362C               	rlcf	___fldiv@rem^0,f,c
  5523  0007EA  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5524  0007EC  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5525  0007EE  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5526  0007F0  90D8               	bcf	status,0,c
  5527  0007F2  3620               	rlcf	___fldiv@b^0,f,c
  5528  0007F4  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5529  0007F6  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5530  0007F8  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5531  0007FA  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5532  0007FC  EF02  F004         	goto	u2771
  5533  000800  EF05  F004         	goto	u2770
  5534  000804                     u2771:
  5535  000804  FFFF               	dw	65535	; assembler added errata NOP
  5536  000806  EF07  F004         	goto	l1197
  5537  00080A                     u2770:
  5538  00080A  FFFF               	dw	65535	; assembler added errata NOP
  5539  00080C  8020               	bsf	___fldiv@b^0,0,c
  5540  00080E                     l1197:
  5541  00080E  FFFF               	dw	65535	; assembler added errata NOP
  5542  000810  90D8               	bcf	status,0,c
  5543  000812  3633               	rlcf	___fldiv@grs^0,f,c
  5544  000814  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5545  000816  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5546  000818  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5547  00081A                     l3633:
  5548  00081A  FFFF               	dw	65535	; assembler added errata NOP
  5549  00081C  5024               	movf	___fldiv@a^0,w,c
  5550  00081E  5C2C               	subwf	___fldiv@rem^0,w,c
  5551  000820  5025               	movf	(___fldiv@a+1)^0,w,c
  5552  000822  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5553  000824  5026               	movf	(___fldiv@a+2)^0,w,c
  5554  000826  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5555  000828  5027               	movf	(___fldiv@a+3)^0,w,c
  5556  00082A  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5557  00082C  A0D8               	btfss	status,0,c
  5558  00082E  EF1B  F004         	goto	u2781
  5559  000832  EF1E  F004         	goto	u2780
  5560  000836                     u2781:
  5561  000836  FFFF               	dw	65535	; assembler added errata NOP
  5562  000838  EF28  F004         	goto	l3639
  5563  00083C                     u2780:
  5564  00083C  FFFF               	dw	65535	; assembler added errata NOP
  5565  00083E  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5566  000840  5024               	movf	___fldiv@a^0,w,c
  5567  000842  5E2C               	subwf	___fldiv@rem^0,f,c
  5568  000844  5025               	movf	(___fldiv@a+1)^0,w,c
  5569  000846  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5570  000848  5026               	movf	(___fldiv@a+2)^0,w,c
  5571  00084A  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5572  00084C  5027               	movf	(___fldiv@a+3)^0,w,c
  5573  00084E  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5574  000850                     l3639:
  5575  000850  FFFF               	dw	65535	; assembler added errata NOP
  5576  000852  2A38               	incf	___fldiv@aexp^0,f,c
  5577  000854                     l1194:
  5578  000854  FFFF               	dw	65535	; assembler added errata NOP
  5579  000856  0E19               	movlw	25
  5580  000858  6438               	cpfsgt	___fldiv@aexp^0,c
  5581  00085A  EF31  F004         	goto	u2791
  5582  00085E  EF34  F004         	goto	u2790
  5583  000862                     u2791:
  5584  000862  FFFF               	dw	65535	; assembler added errata NOP
  5585  000864  EFE8  F003         	goto	l3625
  5586  000868                     u2790:
  5587  000868  FFFF               	dw	65535	; assembler added errata NOP
  5588  00086A  502C               	movf	___fldiv@rem^0,w,c
  5589  00086C  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5590  00086E  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5591  000870  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5592  000872  B4D8               	btfsc	status,2,c
  5593  000874  EF3E  F004         	goto	u2801
  5594  000878  EF41  F004         	goto	u2800
  5595  00087C                     u2801:
  5596  00087C  FFFF               	dw	65535	; assembler added errata NOP
  5597  00087E  EF5E  F004         	goto	l3651
  5598  000882                     u2800:
  5599  000882  FFFF               	dw	65535	; assembler added errata NOP
  5600  000884  8033               	bsf	___fldiv@grs^0,0,c
  5601  000886  EF5E  F004         	goto	l3651
  5602  00088A                     l3645:
  5603  00088A  FFFF               	dw	65535	; assembler added errata NOP
  5604  00088C  90D8               	bcf	status,0,c
  5605  00088E  3620               	rlcf	___fldiv@b^0,f,c
  5606  000890  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5607  000892  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5608  000894  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5609  000896  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5610  000898  EF50  F004         	goto	u2811
  5611  00089C  EF53  F004         	goto	u2810
  5612  0008A0                     u2811:
  5613  0008A0  FFFF               	dw	65535	; assembler added errata NOP
  5614  0008A2  EF55  F004         	goto	l1203
  5615  0008A6                     u2810:
  5616  0008A6  FFFF               	dw	65535	; assembler added errata NOP
  5617  0008A8  8020               	bsf	___fldiv@b^0,0,c
  5618  0008AA                     l1203:
  5619  0008AA  FFFF               	dw	65535	; assembler added errata NOP
  5620  0008AC  90D8               	bcf	status,0,c
  5621  0008AE  3633               	rlcf	___fldiv@grs^0,f,c
  5622  0008B0  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5623  0008B2  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5624  0008B4  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5625  0008B6  0631               	decf	___fldiv@new_exp^0,f,c
  5626  0008B8  A0D8               	btfss	status,0,c
  5627  0008BA  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5628  0008BC                     l3651:
  5629  0008BC  FFFF               	dw	65535	; assembler added errata NOP
  5630  0008BE  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5631  0008C0  EF64  F004         	goto	u2821
  5632  0008C4  EF67  F004         	goto	u2820
  5633  0008C8                     u2821:
  5634  0008C8  FFFF               	dw	65535	; assembler added errata NOP
  5635  0008CA  EF45  F004         	goto	l3645
  5636  0008CE                     u2820:
  5637  0008CE  FFFF               	dw	65535	; assembler added errata NOP
  5638  0008D0  0E00               	movlw	0
  5639  0008D2  6E38               	movwf	___fldiv@aexp^0,c
  5640  0008D4  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5641  0008D6  EF6F  F004         	goto	u2831
  5642  0008DA  EF72  F004         	goto	u2830
  5643  0008DE                     u2831:
  5644  0008DE  FFFF               	dw	65535	; assembler added errata NOP
  5645  0008E0  EF9D  F004         	goto	l1205
  5646  0008E4                     u2830:
  5647  0008E4  FFFF               	dw	65535	; assembler added errata NOP
  5648  0008E6  0EFF               	movlw	255
  5649  0008E8  1433               	andwf	___fldiv@grs^0,w,c
  5650  0008EA  6E28               	movwf	??___fldiv^0,c
  5651  0008EC  0EFF               	movlw	255
  5652  0008EE  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5653  0008F0  6E29               	movwf	(??___fldiv+1)^0,c
  5654  0008F2  0EFF               	movlw	255
  5655  0008F4  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5656  0008F6  6E2A               	movwf	(??___fldiv+2)^0,c
  5657  0008F8  0E7F               	movlw	127
  5658  0008FA  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5659  0008FC  6E2B               	movwf	(??___fldiv+3)^0,c
  5660  0008FE  5028               	movf	??___fldiv^0,w,c
  5661  000900  1029               	iorwf	(??___fldiv+1)^0,w,c
  5662  000902  102A               	iorwf	(??___fldiv+2)^0,w,c
  5663  000904  102B               	iorwf	(??___fldiv+3)^0,w,c
  5664  000906  B4D8               	btfsc	status,2,c
  5665  000908  EF88  F004         	goto	u2841
  5666  00090C  EF8B  F004         	goto	u2840
  5667  000910                     u2841:
  5668  000910  FFFF               	dw	65535	; assembler added errata NOP
  5669  000912  EF91  F004         	goto	l1206
  5670  000916                     u2840:
  5671  000916  FFFF               	dw	65535	; assembler added errata NOP
  5672  000918                     l3659:
  5673  000918  FFFF               	dw	65535	; assembler added errata NOP
  5674  00091A  0E01               	movlw	1
  5675  00091C  6E38               	movwf	___fldiv@aexp^0,c
  5676  00091E  EF9D  F004         	goto	l1205
  5677  000922                     l1206:
  5678  000922  FFFF               	dw	65535	; assembler added errata NOP
  5679  000924  A020               	btfss	___fldiv@b^0,0,c
  5680  000926  EF97  F004         	goto	u2851
  5681  00092A  EF9A  F004         	goto	u2850
  5682  00092E                     u2851:
  5683  00092E  FFFF               	dw	65535	; assembler added errata NOP
  5684  000930  EF9D  F004         	goto	l1205
  5685  000934                     u2850:
  5686  000934  FFFF               	dw	65535	; assembler added errata NOP
  5687  000936  EF8C  F004         	goto	l3659
  5688  00093A                     l1205:
  5689  00093A  FFFF               	dw	65535	; assembler added errata NOP
  5690  00093C  5038               	movf	___fldiv@aexp^0,w,c
  5691  00093E  B4D8               	btfsc	status,2,c
  5692  000940  EFA4  F004         	goto	u2861
  5693  000944  EFA7  F004         	goto	u2860
  5694  000948                     u2861:
  5695  000948  FFFF               	dw	65535	; assembler added errata NOP
  5696  00094A  EFCE  F004         	goto	l3671
  5697  00094E                     u2860:
  5698  00094E  FFFF               	dw	65535	; assembler added errata NOP
  5699  000950  0E01               	movlw	1
  5700  000952  2620               	addwf	___fldiv@b^0,f,c
  5701  000954  0E00               	movlw	0
  5702  000956  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5703  000958  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5704  00095A  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5705  00095C  A023               	btfss	(___fldiv@b+3)^0,0,c
  5706  00095E  EFB3  F004         	goto	u2871
  5707  000962  EFB6  F004         	goto	u2870
  5708  000966                     u2871:
  5709  000966  FFFF               	dw	65535	; assembler added errata NOP
  5710  000968  EFCE  F004         	goto	l3671
  5711  00096C                     u2870:
  5712  00096C  FFFF               	dw	65535	; assembler added errata NOP
  5713  00096E  C020  F028         	movff	___fldiv@b,??___fldiv
  5714  000972  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5715  000976  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5716  00097A  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5717  00097E  342B               	rlcf	(??___fldiv+3)^0,w,c
  5718  000980  322B               	rrcf	(??___fldiv+3)^0,f,c
  5719  000982  322A               	rrcf	(??___fldiv+2)^0,f,c
  5720  000984  3229               	rrcf	(??___fldiv+1)^0,f,c
  5721  000986  3228               	rrcf	??___fldiv^0,f,c
  5722  000988  C028  F020         	movff	??___fldiv,___fldiv@b
  5723  00098C  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5724  000990  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5725  000994  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5726  000998  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5727  00099A  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5728  00099C                     l3671:
  5729  00099C  FFFF               	dw	65535	; assembler added errata NOP
  5730  00099E  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5731  0009A0  EFDA  F004         	goto	u2881
  5732  0009A4  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5733  0009A6  E109               	bnz	u2880
  5734  0009A8  2831               	incf	___fldiv@new_exp^0,w,c
  5735  0009AA  A0D8               	btfss	status,0,c
  5736  0009AC  EFDA  F004         	goto	u2881
  5737  0009B0  EFDD  F004         	goto	u2880
  5738  0009B4                     u2881:
  5739  0009B4  FFFF               	dw	65535	; assembler added errata NOP
  5740  0009B6  EFE9  F004         	goto	l3675
  5741  0009BA                     u2880:
  5742  0009BA  FFFF               	dw	65535	; assembler added errata NOP
  5743  0009BC  0E00               	movlw	0
  5744  0009BE  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5745  0009C0  6831               	setf	___fldiv@new_exp^0,c
  5746  0009C2  0E00               	movlw	0
  5747  0009C4  6E20               	movwf	___fldiv@b^0,c
  5748  0009C6  0E00               	movlw	0
  5749  0009C8  6E21               	movwf	(___fldiv@b+1)^0,c
  5750  0009CA  0E00               	movlw	0
  5751  0009CC  6E22               	movwf	(___fldiv@b+2)^0,c
  5752  0009CE  0E00               	movlw	0
  5753  0009D0  6E23               	movwf	(___fldiv@b+3)^0,c
  5754  0009D2                     l3675:
  5755  0009D2  FFFF               	dw	65535	; assembler added errata NOP
  5756  0009D4  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5757  0009D6  EFF8  F004         	goto	u2890
  5758  0009DA  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5759  0009DC  E106               	bnz	u2891
  5760  0009DE  0431               	decf	___fldiv@new_exp^0,w,c
  5761  0009E0  B0D8               	btfsc	status,0,c
  5762  0009E2  EFF5  F004         	goto	u2891
  5763  0009E6  EFF8  F004         	goto	u2890
  5764  0009EA                     u2891:
  5765  0009EA  FFFF               	dw	65535	; assembler added errata NOP
  5766  0009EC  EF07  F005         	goto	l3679
  5767  0009F0                     u2890:
  5768  0009F0  FFFF               	dw	65535	; assembler added errata NOP
  5769  0009F2  0E00               	movlw	0
  5770  0009F4  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5771  0009F6  0E00               	movlw	0
  5772  0009F8  6E31               	movwf	___fldiv@new_exp^0,c
  5773  0009FA  0E00               	movlw	0
  5774  0009FC  6E20               	movwf	___fldiv@b^0,c
  5775  0009FE  0E00               	movlw	0
  5776  000A00  6E21               	movwf	(___fldiv@b+1)^0,c
  5777  000A02  0E00               	movlw	0
  5778  000A04  6E22               	movwf	(___fldiv@b+2)^0,c
  5779  000A06  0E00               	movlw	0
  5780  000A08  6E23               	movwf	(___fldiv@b+3)^0,c
  5781  000A0A  0E00               	movlw	0
  5782  000A0C  6E30               	movwf	___fldiv@sign^0,c
  5783  000A0E                     l3679:
  5784  000A0E  FFFF               	dw	65535	; assembler added errata NOP
  5785  000A10  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5786  000A14  A037               	btfss	___fldiv@bexp^0,0,c
  5787  000A16  EF0F  F005         	goto	u2901
  5788  000A1A  EF12  F005         	goto	u2900
  5789  000A1E                     u2901:
  5790  000A1E  FFFF               	dw	65535	; assembler added errata NOP
  5791  000A20  EF16  F005         	goto	l3685
  5792  000A24                     u2900:
  5793  000A24  FFFF               	dw	65535	; assembler added errata NOP
  5794  000A26  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5795  000A28  EF18  F005         	goto	l3687
  5796  000A2C                     l3685:
  5797  000A2C  FFFF               	dw	65535	; assembler added errata NOP
  5798  000A2E  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5799  000A30                     l3687:
  5800  000A30  FFFF               	dw	65535	; assembler added errata NOP
  5801  000A32  90D8               	bcf	status,0,c
  5802  000A34  3037               	rrcf	___fldiv@bexp^0,w,c
  5803  000A36  6E23               	movwf	(___fldiv@b+3)^0,c
  5804  000A38  EF9C  F003         	goto	l3601
  5805  000A3C                     l1192:
  5806  000A3C  FFFF               	dw	65535	; assembler added errata NOP
  5807  000A3E  0012               	return		;funcret
  5808  000A40  FFFF               	dw	65535	; errata NOP
  5809  000A42                     __end_of___fldiv:
  5810                           	callstack 0
  5811                           
  5812 ;; *************** function _releaseObj *****************
  5813 ;; Defined at:
  5814 ;;		line 614 in file "motors.c"
  5815 ;; Parameters:    Size  Location     Type
  5816 ;;		None
  5817 ;; Auto vars:     Size  Location     Type
  5818 ;;		None
  5819 ;; Return value:  Size  Location     Type
  5820 ;;                  1    wreg      void 
  5821 ;; Registers used:
  5822 ;;		wreg, status,2, status,0, cstack
  5823 ;; Tracked objects:
  5824 ;;		On entry : 0/0
  5825 ;;		On exit  : 0/0
  5826 ;;		Unchanged: 0/0
  5827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5828 ;;      Params:         0       0       0       0       0       0       0
  5829 ;;      Locals:         0       0       0       0       0       0       0
  5830 ;;      Temps:          0       0       0       0       0       0       0
  5831 ;;      Totals:         0       0       0       0       0       0       0
  5832 ;;Total ram usage:        0 bytes
  5833 ;; Hardware stack levels used:    1
  5834 ;; Hardware stack levels required when called:    5
  5835 ;; This function calls:
  5836 ;;		_stepMade
  5837 ;; This function is called by:
  5838 ;;		_executeData
  5839 ;; This function uses a non-reentrant model
  5840 ;;
  5841                           
  5842                           	psect	text34
  5843  002484                     __ptext34:
  5844                           	callstack 0
  5845  002484                     _releaseObj:
  5846                           	callstack 0
  5847  002484  FFFF               	dw	65535	; assembler added errata NOP
  5848  002486                     
  5849                           ;motors.c: 615:     LATDbits.LATD1 = 0;
  5850  002486  928C               	bcf	140,1,c	;volatile
  5851                           
  5852                           ;motors.c: 619:     T2CONbits.TMR2ON = 1;
  5853  002488  84CA               	bsf	202,2,c	;volatile
  5854  00248A                     l4073:
  5855  00248A  FFFF               	dw	65535	; assembler added errata NOP
  5856  00248C  ECAF  F012         	call	_stepMade	;wreg free
  5857  002490  5012               	movf	?_stepMade^0,w,c
  5858  002492  1013               	iorwf	(?_stepMade+1)^0,w,c
  5859  002494  B4D8               	btfsc	status,2,c
  5860  002496  EF4F  F012         	goto	u3541
  5861  00249A  EF52  F012         	goto	u3540
  5862  00249E                     u3541:
  5863  00249E  FFFF               	dw	65535	; assembler added errata NOP
  5864  0024A0  EF45  F012         	goto	l4073
  5865  0024A4                     u3540:
  5866  0024A4  FFFF               	dw	65535	; assembler added errata NOP
  5867  0024A6                     
  5868                           ;motors.c: 621:     T2CONbits.TMR2ON = 1;
  5869  0024A6  84CA               	bsf	202,2,c	;volatile
  5870  0024A8                     
  5871                           ;motors.c: 622:     TMR2 = 0;
  5872  0024A8  0E00               	movlw	0
  5873  0024AA  6ECC               	movwf	204,c	;volatile
  5874  0024AC  0012               	return		;funcret
  5875  0024AE  FFFF               	dw	65535	; errata NOP
  5876  0024B0                     __end_of_releaseObj:
  5877                           	callstack 0
  5878                           
  5879 ;; *************** function _pickObject *****************
  5880 ;; Defined at:
  5881 ;;		line 600 in file "motors.c"
  5882 ;; Parameters:    Size  Location     Type
  5883 ;;		None
  5884 ;; Auto vars:     Size  Location     Type
  5885 ;;		None
  5886 ;; Return value:  Size  Location     Type
  5887 ;;                  1    wreg      void 
  5888 ;; Registers used:
  5889 ;;		wreg, status,2, status,0, cstack
  5890 ;; Tracked objects:
  5891 ;;		On entry : 0/0
  5892 ;;		On exit  : 0/0
  5893 ;;		Unchanged: 0/0
  5894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5895 ;;      Params:         0       0       0       0       0       0       0
  5896 ;;      Locals:         0       0       0       0       0       0       0
  5897 ;;      Temps:          0       0       0       0       0       0       0
  5898 ;;      Totals:         0       0       0       0       0       0       0
  5899 ;;Total ram usage:        0 bytes
  5900 ;; Hardware stack levels used:    1
  5901 ;; Hardware stack levels required when called:    5
  5902 ;; This function calls:
  5903 ;;		_stepMade
  5904 ;; This function is called by:
  5905 ;;		_executeData
  5906 ;; This function uses a non-reentrant model
  5907 ;;
  5908                           
  5909                           	psect	text35
  5910  0024B0                     __ptext35:
  5911                           	callstack 0
  5912  0024B0                     _pickObject:
  5913                           	callstack 0
  5914  0024B0  FFFF               	dw	65535	; assembler added errata NOP
  5915  0024B2                     
  5916                           ;motors.c: 601:     LATDbits.LATD1 = 1;
  5917  0024B2  828C               	bsf	140,1,c	;volatile
  5918                           
  5919                           ;motors.c: 605:     T2CONbits.TMR2ON = 1;
  5920  0024B4  84CA               	bsf	202,2,c	;volatile
  5921  0024B6                     l4067:
  5922  0024B6  FFFF               	dw	65535	; assembler added errata NOP
  5923  0024B8  ECAF  F012         	call	_stepMade	;wreg free
  5924  0024BC  5012               	movf	?_stepMade^0,w,c
  5925  0024BE  1013               	iorwf	(?_stepMade+1)^0,w,c
  5926  0024C0  B4D8               	btfsc	status,2,c
  5927  0024C2  EF65  F012         	goto	u3531
  5928  0024C6  EF68  F012         	goto	u3530
  5929  0024CA                     u3531:
  5930  0024CA  FFFF               	dw	65535	; assembler added errata NOP
  5931  0024CC  EF5B  F012         	goto	l4067
  5932  0024D0                     u3530:
  5933  0024D0  FFFF               	dw	65535	; assembler added errata NOP
  5934  0024D2                     
  5935                           ;motors.c: 607:     T2CONbits.TMR2ON = 1;
  5936  0024D2  84CA               	bsf	202,2,c	;volatile
  5937  0024D4                     
  5938                           ;motors.c: 608:     TMR2 = 0;
  5939  0024D4  0E00               	movlw	0
  5940  0024D6  6ECC               	movwf	204,c	;volatile
  5941  0024D8  0012               	return		;funcret
  5942  0024DA  FFFF               	dw	65535	; errata NOP
  5943  0024DC                     __end_of_pickObject:
  5944                           	callstack 0
  5945                           
  5946 ;; *************** function _moveToPoint *****************
  5947 ;; Defined at:
  5948 ;;		line 264 in file "motors.c"
  5949 ;; Parameters:    Size  Location     Type
  5950 ;;  x1              2   21[COMRAM] int 
  5951 ;;  y1              2   23[COMRAM] int 
  5952 ;;  x2              2   25[COMRAM] int 
  5953 ;;  y2              2   27[COMRAM] int 
  5954 ;; Auto vars:     Size  Location     Type
  5955 ;;  keepMovingX     1   34[COMRAM] unsigned char 
  5956 ;;  MOT2Directio    1   33[COMRAM] unsigned char 
  5957 ;;  MOT1Directio    1   32[COMRAM] unsigned char 
  5958 ;;  keepMovingY     1   31[COMRAM] unsigned char 
  5959 ;; Return value:  Size  Location     Type
  5960 ;;                  1    wreg      unsigned char 
  5961 ;; Registers used:
  5962 ;;		wreg, status,2, status,0, cstack
  5963 ;; Tracked objects:
  5964 ;;		On entry : 0/0
  5965 ;;		On exit  : 0/0
  5966 ;;		Unchanged: 0/0
  5967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5968 ;;      Params:         8       0       0       0       0       0       0
  5969 ;;      Locals:         4       0       0       0       0       0       0
  5970 ;;      Temps:          2       0       0       0       0       0       0
  5971 ;;      Totals:        14       0       0       0       0       0       0
  5972 ;;Total ram usage:       14 bytes
  5973 ;; Hardware stack levels used:    1
  5974 ;; Hardware stack levels required when called:    5
  5975 ;; This function calls:
  5976 ;;		_resetStep
  5977 ;;		_setDirection
  5978 ;;		_stepCounter
  5979 ;;		_stepMade
  5980 ;; This function is called by:
  5981 ;;		_executeData
  5982 ;; This function uses a non-reentrant model
  5983 ;;
  5984                           
  5985                           	psect	text36
  5986  000A42                     __ptext36:
  5987                           	callstack 0
  5988  000A42                     _moveToPoint:
  5989                           	callstack 0
  5990  000A42  FFFF               	dw	65535	; assembler added errata NOP
  5991  000A44                     
  5992                           ;motors.c: 266:     unsigned char MOT1Direction, MOT2Direction;;motors.c: 269:     if(x2
      +                           > maxX || y2 > maxY){
  5993  000A44  0EE9               	movlw	233
  5994  000A46  5C1A               	subwf	moveToPoint@x2^0,w,c
  5995  000A48  0E03               	movlw	3
  5996  000A4A  581B               	subwfb	(moveToPoint@x2+1)^0,w,c
  5997  000A4C  B0D8               	btfsc	status,0,c
  5998  000A4E  EF2B  F005         	goto	u3141
  5999  000A52  EF2E  F005         	goto	u3140
  6000  000A56                     u3141:
  6001  000A56  FFFF               	dw	65535	; assembler added errata NOP
  6002  000A58  EF3B  F005         	goto	l3837
  6003  000A5C                     u3140:
  6004  000A5C  FFFF               	dw	65535	; assembler added errata NOP
  6005  000A5E  0EE9               	movlw	233
  6006  000A60  5C1C               	subwf	moveToPoint@y2^0,w,c
  6007  000A62  0E03               	movlw	3
  6008  000A64  581D               	subwfb	(moveToPoint@y2+1)^0,w,c
  6009  000A66  A0D8               	btfss	status,0,c
  6010  000A68  EF38  F005         	goto	u3151
  6011  000A6C  EF3B  F005         	goto	u3150
  6012  000A70                     u3151:
  6013  000A70  FFFF               	dw	65535	; assembler added errata NOP
  6014  000A72  EF3F  F005         	goto	l3841
  6015  000A76                     u3150:
  6016  000A76                     l3837:
  6017  000A76  FFFF               	dw	65535	; assembler added errata NOP
  6018                           
  6019                           ;motors.c: 270:         return(5);
  6020  000A78  0E05               	movlw	5
  6021  000A7A  EFB1  F006         	goto	l143
  6022  000A7E                     l3841:
  6023  000A7E  FFFF               	dw	65535	; assembler added errata NOP
  6024                           
  6025                           ;motors.c: 274:     if((x2 - x1) > 0){
  6026  000A80  5016               	movf	moveToPoint@x1^0,w,c
  6027  000A82  5C1A               	subwf	moveToPoint@x2^0,w,c
  6028  000A84  6E1E               	movwf	??_moveToPoint^0,c
  6029  000A86  5017               	movf	(moveToPoint@x1+1)^0,w,c
  6030  000A88  581B               	subwfb	(moveToPoint@x2+1)^0,w,c
  6031  000A8A  6E1F               	movwf	(??_moveToPoint+1)^0,c
  6032  000A8C  BE1F               	btfsc	(??_moveToPoint+1)^0,7,c
  6033  000A8E  EF51  F005         	goto	u3161
  6034  000A92  501F               	movf	(??_moveToPoint+1)^0,w,c
  6035  000A94  E109               	bnz	u3160
  6036  000A96  041E               	decf	??_moveToPoint^0,w,c
  6037  000A98  A0D8               	btfss	status,0,c
  6038  000A9A  EF51  F005         	goto	u3161
  6039  000A9E  EF54  F005         	goto	u3160
  6040  000AA2                     u3161:
  6041  000AA2  FFFF               	dw	65535	; assembler added errata NOP
  6042  000AA4  EF5E  F005         	goto	l3847
  6043  000AA8                     u3160:
  6044  000AA8  FFFF               	dw	65535	; assembler added errata NOP
  6045  000AAA                     
  6046                           ;motors.c: 275:         setDirection(1, 0);
  6047  000AAA  0E00               	movlw	0
  6048  000AAC  6E12               	movwf	setDirection@motor^0,c
  6049  000AAE  0E01               	movlw	1
  6050  000AB0  ECED  F010         	call	_setDirection
  6051  000AB4                     
  6052                           ;motors.c: 276:         MOT1Direction = 1;
  6053  000AB4  0E01               	movlw	1
  6054  000AB6  6E21               	movwf	moveToPoint@MOT1Direction^0,c
  6055                           
  6056                           ;motors.c: 277:     }else{
  6057  000AB8  EF66  F005         	goto	l3851
  6058  000ABC                     l3847:
  6059  000ABC  FFFF               	dw	65535	; assembler added errata NOP
  6060                           
  6061                           ;motors.c: 278:         setDirection(0, 0);
  6062  000ABE  0E00               	movlw	0
  6063  000AC0  6E12               	movwf	setDirection@motor^0,c
  6064  000AC2  0E00               	movlw	0
  6065  000AC4  ECED  F010         	call	_setDirection
  6066  000AC8                     
  6067                           ;motors.c: 279:         MOT1Direction = 0;
  6068  000AC8  0E00               	movlw	0
  6069  000ACA  6E21               	movwf	moveToPoint@MOT1Direction^0,c
  6070  000ACC                     l3851:
  6071  000ACC  FFFF               	dw	65535	; assembler added errata NOP
  6072                           
  6073                           ;motors.c: 282:     if((y2 - y1) > 0){
  6074  000ACE  5018               	movf	moveToPoint@y1^0,w,c
  6075  000AD0  5C1C               	subwf	moveToPoint@y2^0,w,c
  6076  000AD2  6E1E               	movwf	??_moveToPoint^0,c
  6077  000AD4  5019               	movf	(moveToPoint@y1+1)^0,w,c
  6078  000AD6  581D               	subwfb	(moveToPoint@y2+1)^0,w,c
  6079  000AD8  6E1F               	movwf	(??_moveToPoint+1)^0,c
  6080  000ADA  BE1F               	btfsc	(??_moveToPoint+1)^0,7,c
  6081  000ADC  EF78  F005         	goto	u3171
  6082  000AE0  501F               	movf	(??_moveToPoint+1)^0,w,c
  6083  000AE2  E109               	bnz	u3170
  6084  000AE4  041E               	decf	??_moveToPoint^0,w,c
  6085  000AE6  A0D8               	btfss	status,0,c
  6086  000AE8  EF78  F005         	goto	u3171
  6087  000AEC  EF7B  F005         	goto	u3170
  6088  000AF0                     u3171:
  6089  000AF0  FFFF               	dw	65535	; assembler added errata NOP
  6090  000AF2  EF85  F005         	goto	l3857
  6091  000AF6                     u3170:
  6092  000AF6  FFFF               	dw	65535	; assembler added errata NOP
  6093  000AF8                     
  6094                           ;motors.c: 283:         setDirection(1, 1);
  6095  000AF8  0E01               	movlw	1
  6096  000AFA  6E12               	movwf	setDirection@motor^0,c
  6097  000AFC  0E01               	movlw	1
  6098  000AFE  ECED  F010         	call	_setDirection
  6099  000B02                     
  6100                           ;motors.c: 284:         MOT2Direction = 1;
  6101  000B02  0E01               	movlw	1
  6102  000B04  6E22               	movwf	moveToPoint@MOT2Direction^0,c
  6103                           
  6104                           ;motors.c: 285:     }else{
  6105  000B06  EF8D  F005         	goto	l3861
  6106  000B0A                     l3857:
  6107  000B0A  FFFF               	dw	65535	; assembler added errata NOP
  6108                           
  6109                           ;motors.c: 286:         setDirection(0, 1);
  6110  000B0C  0E01               	movlw	1
  6111  000B0E  6E12               	movwf	setDirection@motor^0,c
  6112  000B10  0E00               	movlw	0
  6113  000B12  ECED  F010         	call	_setDirection
  6114  000B16                     
  6115                           ;motors.c: 287:         MOT2Direction = 0;
  6116  000B16  0E00               	movlw	0
  6117  000B18  6E22               	movwf	moveToPoint@MOT2Direction^0,c
  6118  000B1A                     l3861:
  6119  000B1A  FFFF               	dw	65535	; assembler added errata NOP
  6120                           
  6121                           ;motors.c: 290:     unsigned char keepMovingX = 1;
  6122  000B1C  0E01               	movlw	1
  6123  000B1E  6E23               	movwf	moveToPoint@keepMovingX^0,c
  6124  000B20                     
  6125                           ;motors.c: 291:     unsigned char keepMovingY = 1;
  6126  000B20  0E01               	movlw	1
  6127  000B22  6E20               	movwf	moveToPoint@keepMovingY^0,c
  6128  000B24                     
  6129                           ;motors.c: 294:     T2CONbits.TMR2ON = 1;
  6130  000B24  84CA               	bsf	202,2,c	;volatile
  6131  000B26                     
  6132                           ;motors.c: 296:     tm0Error = 0;
  6133  000B26  0E00               	movlw	0
  6134  000B28  6E5C               	movwf	(_tm0Error+1)^0,c
  6135  000B2A  0E00               	movlw	0
  6136  000B2C  6E5B               	movwf	_tm0Error^0,c
  6137  000B2E                     
  6138                           ;motors.c: 297:     tm0Limit = 250;
  6139  000B2E  0EFA               	movlw	250
  6140  000B30  6E68               	movwf	_tm0Limit^0,c
  6141  000B32                     
  6142                           ;motors.c: 298:     T0CONbits.TMR0ON = 1;
  6143  000B32  8ED5               	bsf	213,7,c	;volatile
  6144                           
  6145                           ;motors.c: 300:     while(keepMovingX || keepMovingY){
  6146  000B34  EF91  F006         	goto	l3923
  6147  000B38                     l3873:
  6148  000B38  FFFF               	dw	65535	; assembler added errata NOP
  6149                           
  6150                           ;motors.c: 303:         if(tm0Error){
  6151  000B3A  505B               	movf	_tm0Error^0,w,c
  6152  000B3C  105C               	iorwf	(_tm0Error+1)^0,w,c
  6153  000B3E  B4D8               	btfsc	status,2,c
  6154  000B40  EFA4  F005         	goto	u3181
  6155  000B44  EFA7  F005         	goto	u3180
  6156  000B48                     u3181:
  6157  000B48  FFFF               	dw	65535	; assembler added errata NOP
  6158  000B4A  EFB0  F005         	goto	l3879
  6159  000B4E                     u3180:
  6160  000B4E  FFFF               	dw	65535	; assembler added errata NOP
  6161  000B50                     
  6162                           ;motors.c: 305:             LATAbits.LATA2 = 0;
  6163  000B50  9489               	bcf	137,2,c	;volatile
  6164                           
  6165                           ;motors.c: 306:             LATBbits.LATB4 = 0;
  6166  000B52  988A               	bcf	138,4,c	;volatile
  6167  000B54                     
  6168                           ;motors.c: 307:             tm0Error = 4;
  6169  000B54  0E00               	movlw	0
  6170  000B56  6E5C               	movwf	(_tm0Error+1)^0,c
  6171  000B58  0E04               	movlw	4
  6172  000B5A  6E5B               	movwf	_tm0Error^0,c
  6173                           
  6174                           ;motors.c: 308:             break;
  6175  000B5C  EFA5  F006         	goto	l151
  6176  000B60                     l3879:
  6177  000B60  FFFF               	dw	65535	; assembler added errata NOP
  6178                           
  6179                           ;motors.c: 316:         if(MOT1Direction == 1){
  6180  000B62  0421               	decf	moveToPoint@MOT1Direction^0,w,c
  6181  000B64  A4D8               	btfss	status,2,c
  6182  000B66  EFB7  F005         	goto	u3191
  6183  000B6A  EFBA  F005         	goto	u3190
  6184  000B6E                     u3191:
  6185  000B6E  FFFF               	dw	65535	; assembler added errata NOP
  6186  000B70  EFE1  F005         	goto	l3889
  6187  000B74                     u3190:
  6188  000B74  FFFF               	dw	65535	; assembler added errata NOP
  6189  000B76                     
  6190                           ;motors.c: 317:             if(x1 + stepCounter() >= x2){
  6191  000B76  ECF9  F012         	call	_stepCounter	;wreg free
  6192  000B7A  5016               	movf	moveToPoint@x1^0,w,c
  6193  000B7C  2612               	addwf	?_stepCounter^0,f,c
  6194  000B7E  5017               	movf	(moveToPoint@x1+1)^0,w,c
  6195  000B80  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6196  000B82  501A               	movf	moveToPoint@x2^0,w,c
  6197  000B84  5C12               	subwf	?_stepCounter^0,w,c
  6198  000B86  501B               	movf	(moveToPoint@x2+1)^0,w,c
  6199  000B88  5813               	subwfb	(?_stepCounter+1)^0,w,c
  6200  000B8A  A0D8               	btfss	status,0,c
  6201  000B8C  EFCA  F005         	goto	u3201
  6202  000B90  EFCD  F005         	goto	u3200
  6203  000B94                     u3201:
  6204  000B94  FFFF               	dw	65535	; assembler added errata NOP
  6205  000B96  EFD3  F005         	goto	l3885
  6206  000B9A                     u3200:
  6207  000B9A  FFFF               	dw	65535	; assembler added errata NOP
  6208  000B9C                     l3883:
  6209  000B9C  FFFF               	dw	65535	; assembler added errata NOP
  6210                           
  6211                           ;motors.c: 319:                 keepMovingX = 0;
  6212  000B9E  0E00               	movlw	0
  6213  000BA0  6E23               	movwf	moveToPoint@keepMovingX^0,c
  6214                           
  6215                           ;motors.c: 320:             }else if(!keepMovingX){
  6216  000BA2  EF11  F006         	goto	l3899
  6217  000BA6                     l3885:
  6218  000BA6  FFFF               	dw	65535	; assembler added errata NOP
  6219  000BA8  5023               	movf	moveToPoint@keepMovingX^0,w,c
  6220  000BAA  A4D8               	btfss	status,2,c
  6221  000BAC  EFDA  F005         	goto	u3211
  6222  000BB0  EFDD  F005         	goto	u3210
  6223  000BB4                     u3211:
  6224  000BB4  FFFF               	dw	65535	; assembler added errata NOP
  6225  000BB6  EF11  F006         	goto	l3899
  6226  000BBA                     u3210:
  6227  000BBA  FFFF               	dw	65535	; assembler added errata NOP
  6228  000BBC                     
  6229                           ;motors.c: 322:                 LATAbits.LATA2 = 1;
  6230  000BBC  8489               	bsf	137,2,c	;volatile
  6231  000BBE  EF11  F006         	goto	l3899
  6232  000BC2                     l3889:
  6233  000BC2  FFFF               	dw	65535	; assembler added errata NOP
  6234  000BC4  5021               	movf	moveToPoint@MOT1Direction^0,w,c
  6235  000BC6  A4D8               	btfss	status,2,c
  6236  000BC8  EFE8  F005         	goto	u3221
  6237  000BCC  EFEB  F005         	goto	u3220
  6238  000BD0                     u3221:
  6239  000BD0  FFFF               	dw	65535	; assembler added errata NOP
  6240  000BD2  EF11  F006         	goto	l3899
  6241  000BD6                     u3220:
  6242  000BD6  FFFF               	dw	65535	; assembler added errata NOP
  6243  000BD8                     
  6244                           ;motors.c: 325:             if(x1 - stepCounter() <= x2){
  6245  000BD8  ECF9  F012         	call	_stepCounter	;wreg free
  6246  000BDC  C016  F01E         	movff	moveToPoint@x1,??_moveToPoint
  6247  000BE0  C017  F01F         	movff	moveToPoint@x1+1,??_moveToPoint+1
  6248  000BE4  5012               	movf	?_stepCounter^0,w,c
  6249  000BE6  5E1E               	subwf	??_moveToPoint^0,f,c
  6250  000BE8  5013               	movf	(?_stepCounter+1)^0,w,c
  6251  000BEA  5A1F               	subwfb	(??_moveToPoint+1)^0,f,c
  6252  000BEC  501E               	movf	??_moveToPoint^0,w,c
  6253  000BEE  5C1A               	subwf	moveToPoint@x2^0,w,c
  6254  000BF0  501F               	movf	(??_moveToPoint+1)^0,w,c
  6255  000BF2  581B               	subwfb	(moveToPoint@x2+1)^0,w,c
  6256  000BF4  A0D8               	btfss	status,0,c
  6257  000BF6  EFFF  F005         	goto	u3231
  6258  000BFA  EF02  F006         	goto	u3230
  6259  000BFE                     u3231:
  6260  000BFE  FFFF               	dw	65535	; assembler added errata NOP
  6261  000C00  EF05  F006         	goto	l3895
  6262  000C04                     u3230:
  6263  000C04  FFFF               	dw	65535	; assembler added errata NOP
  6264  000C06  EFCE  F005         	goto	l3883
  6265  000C0A                     l3895:
  6266  000C0A  FFFF               	dw	65535	; assembler added errata NOP
  6267  000C0C  5023               	movf	moveToPoint@keepMovingX^0,w,c
  6268  000C0E  A4D8               	btfss	status,2,c
  6269  000C10  EF0C  F006         	goto	u3241
  6270  000C14  EF0F  F006         	goto	u3240
  6271  000C18                     u3241:
  6272  000C18  FFFF               	dw	65535	; assembler added errata NOP
  6273  000C1A  EF11  F006         	goto	l3899
  6274  000C1E                     u3240:
  6275  000C1E  FFFF               	dw	65535	; assembler added errata NOP
  6276  000C20                     
  6277                           ;motors.c: 330:                 LATAbits.LATA2 = 1;
  6278  000C20  8489               	bsf	137,2,c	;volatile
  6279  000C22                     l3899:
  6280  000C22  FFFF               	dw	65535	; assembler added errata NOP
  6281                           
  6282                           ;motors.c: 334:         if(MOT2Direction == 1){
  6283  000C24  0422               	decf	moveToPoint@MOT2Direction^0,w,c
  6284  000C26  A4D8               	btfss	status,2,c
  6285  000C28  EF18  F006         	goto	u3251
  6286  000C2C  EF1B  F006         	goto	u3250
  6287  000C30                     u3251:
  6288  000C30  FFFF               	dw	65535	; assembler added errata NOP
  6289  000C32  EF42  F006         	goto	l3909
  6290  000C36                     u3250:
  6291  000C36  FFFF               	dw	65535	; assembler added errata NOP
  6292  000C38                     
  6293                           ;motors.c: 336:             if(y1 + stepCounter() >= y2){
  6294  000C38  ECF9  F012         	call	_stepCounter	;wreg free
  6295  000C3C  5018               	movf	moveToPoint@y1^0,w,c
  6296  000C3E  2612               	addwf	?_stepCounter^0,f,c
  6297  000C40  5019               	movf	(moveToPoint@y1+1)^0,w,c
  6298  000C42  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6299  000C44  501C               	movf	moveToPoint@y2^0,w,c
  6300  000C46  5C12               	subwf	?_stepCounter^0,w,c
  6301  000C48  501D               	movf	(moveToPoint@y2+1)^0,w,c
  6302  000C4A  5813               	subwfb	(?_stepCounter+1)^0,w,c
  6303  000C4C  A0D8               	btfss	status,0,c
  6304  000C4E  EF2B  F006         	goto	u3261
  6305  000C52  EF2E  F006         	goto	u3260
  6306  000C56                     u3261:
  6307  000C56  FFFF               	dw	65535	; assembler added errata NOP
  6308  000C58  EF34  F006         	goto	l3905
  6309  000C5C                     u3260:
  6310  000C5C  FFFF               	dw	65535	; assembler added errata NOP
  6311  000C5E                     l3903:
  6312  000C5E  FFFF               	dw	65535	; assembler added errata NOP
  6313                           
  6314                           ;motors.c: 338:                 keepMovingY = 0;
  6315  000C60  0E00               	movlw	0
  6316  000C62  6E20               	movwf	moveToPoint@keepMovingY^0,c
  6317                           
  6318                           ;motors.c: 339:             }else if(!keepMovingX){
  6319  000C64  EF74  F006         	goto	l3919
  6320  000C68                     l3905:
  6321  000C68  FFFF               	dw	65535	; assembler added errata NOP
  6322  000C6A  5023               	movf	moveToPoint@keepMovingX^0,w,c
  6323  000C6C  A4D8               	btfss	status,2,c
  6324  000C6E  EF3B  F006         	goto	u3271
  6325  000C72  EF3E  F006         	goto	u3270
  6326  000C76                     u3271:
  6327  000C76  FFFF               	dw	65535	; assembler added errata NOP
  6328  000C78  EF74  F006         	goto	l165
  6329  000C7C                     u3270:
  6330  000C7C  FFFF               	dw	65535	; assembler added errata NOP
  6331  000C7E                     
  6332                           ;motors.c: 341:                 LATBbits.LATB4 = 1;
  6333  000C7E  888A               	bsf	138,4,c	;volatile
  6334  000C80  EF74  F006         	goto	l3919
  6335  000C84                     l3909:
  6336  000C84  FFFF               	dw	65535	; assembler added errata NOP
  6337  000C86  5022               	movf	moveToPoint@MOT2Direction^0,w,c
  6338  000C88  A4D8               	btfss	status,2,c
  6339  000C8A  EF49  F006         	goto	u3281
  6340  000C8E  EF4C  F006         	goto	u3280
  6341  000C92                     u3281:
  6342  000C92  FFFF               	dw	65535	; assembler added errata NOP
  6343  000C94  EF74  F006         	goto	l3919
  6344  000C98                     u3280:
  6345  000C98  FFFF               	dw	65535	; assembler added errata NOP
  6346  000C9A                     
  6347                           ;motors.c: 345:             if(y1 - stepCounter() <= y2){
  6348  000C9A  ECF9  F012         	call	_stepCounter	;wreg free
  6349  000C9E  C018  F01E         	movff	moveToPoint@y1,??_moveToPoint
  6350  000CA2  C019  F01F         	movff	moveToPoint@y1+1,??_moveToPoint+1
  6351  000CA6  5012               	movf	?_stepCounter^0,w,c
  6352  000CA8  5E1E               	subwf	??_moveToPoint^0,f,c
  6353  000CAA  5013               	movf	(?_stepCounter+1)^0,w,c
  6354  000CAC  5A1F               	subwfb	(??_moveToPoint+1)^0,f,c
  6355  000CAE  501E               	movf	??_moveToPoint^0,w,c
  6356  000CB0  5C1C               	subwf	moveToPoint@y2^0,w,c
  6357  000CB2  501F               	movf	(??_moveToPoint+1)^0,w,c
  6358  000CB4  581D               	subwfb	(moveToPoint@y2+1)^0,w,c
  6359  000CB6  A0D8               	btfss	status,0,c
  6360  000CB8  EF60  F006         	goto	u3291
  6361  000CBC  EF63  F006         	goto	u3290
  6362  000CC0                     u3291:
  6363  000CC0  FFFF               	dw	65535	; assembler added errata NOP
  6364  000CC2  EF66  F006         	goto	l3915
  6365  000CC6                     u3290:
  6366  000CC6  FFFF               	dw	65535	; assembler added errata NOP
  6367  000CC8  EF2F  F006         	goto	l3903
  6368  000CCC                     l3915:
  6369  000CCC  FFFF               	dw	65535	; assembler added errata NOP
  6370  000CCE  5023               	movf	moveToPoint@keepMovingX^0,w,c
  6371  000CD0  A4D8               	btfss	status,2,c
  6372  000CD2  EF6D  F006         	goto	u3301
  6373  000CD6  EF70  F006         	goto	u3300
  6374  000CDA                     u3301:
  6375  000CDA  FFFF               	dw	65535	; assembler added errata NOP
  6376  000CDC  EF74  F006         	goto	l3919
  6377  000CE0                     u3300:
  6378  000CE0  FFFF               	dw	65535	; assembler added errata NOP
  6379  000CE2                     
  6380                           ;motors.c: 350:                 LATBbits.LATB4 = 1;
  6381  000CE2  888A               	bsf	138,4,c	;volatile
  6382  000CE4  EF74  F006         	goto	l3919
  6383  000CE8                     l165:
  6384  000CE8                     l3919:
  6385  000CE8  FFFF               	dw	65535	; assembler added errata NOP
  6386  000CEA  ECAF  F012         	call	_stepMade	;wreg free
  6387  000CEE  5012               	movf	?_stepMade^0,w,c
  6388  000CF0  1013               	iorwf	(?_stepMade+1)^0,w,c
  6389  000CF2  B4D8               	btfsc	status,2,c
  6390  000CF4  EF7E  F006         	goto	u3311
  6391  000CF8  EF81  F006         	goto	u3310
  6392  000CFC                     u3311:
  6393  000CFC  FFFF               	dw	65535	; assembler added errata NOP
  6394  000CFE  EF74  F006         	goto	l3919
  6395  000D02                     u3310:
  6396  000D02  FFFF               	dw	65535	; assembler added errata NOP
  6397  000D04                     
  6398                           ;motors.c: 358:         LATAbits.LATA2 = 0;
  6399  000D04  9489               	bcf	137,2,c	;volatile
  6400                           
  6401                           ;motors.c: 359:         LATBbits.LATB4 = 0;
  6402  000D06  988A               	bcf	138,4,c	;volatile
  6403  000D08                     l3921:
  6404  000D08  FFFF               	dw	65535	; assembler added errata NOP
  6405  000D0A  ECAF  F012         	call	_stepMade	;wreg free
  6406  000D0E  5012               	movf	?_stepMade^0,w,c
  6407  000D10  1013               	iorwf	(?_stepMade+1)^0,w,c
  6408  000D12  B4D8               	btfsc	status,2,c
  6409  000D14  EF8E  F006         	goto	u3321
  6410  000D18  EF91  F006         	goto	u3320
  6411  000D1C                     u3321:
  6412  000D1C  FFFF               	dw	65535	; assembler added errata NOP
  6413  000D1E  EF84  F006         	goto	l3921
  6414  000D22                     u3320:
  6415  000D22                     l3923:
  6416  000D22  FFFF               	dw	65535	; assembler added errata NOP
  6417                           
  6418                           ;motors.c: 300:     while(keepMovingX || keepMovingY){
  6419  000D24  5023               	movf	moveToPoint@keepMovingX^0,w,c
  6420  000D26  A4D8               	btfss	status,2,c
  6421  000D28  EF98  F006         	goto	u3331
  6422  000D2C  EF9B  F006         	goto	u3330
  6423  000D30                     u3331:
  6424  000D30  FFFF               	dw	65535	; assembler added errata NOP
  6425  000D32  EF9C  F005         	goto	l3873
  6426  000D36                     u3330:
  6427  000D36  FFFF               	dw	65535	; assembler added errata NOP
  6428  000D38  5020               	movf	moveToPoint@keepMovingY^0,w,c
  6429  000D3A  A4D8               	btfss	status,2,c
  6430  000D3C  EFA2  F006         	goto	u3341
  6431  000D40  EFA5  F006         	goto	u3340
  6432  000D44                     u3341:
  6433  000D44  FFFF               	dw	65535	; assembler added errata NOP
  6434  000D46  EF9C  F005         	goto	l3873
  6435  000D4A                     u3340:
  6436  000D4A                     l151:
  6437  000D4A  FFFF               	dw	65535	; assembler added errata NOP
  6438                           
  6439                           ;motors.c: 366:     T0CONbits.TMR0ON = 0;
  6440  000D4C  9ED5               	bcf	213,7,c	;volatile
  6441                           
  6442                           ;motors.c: 367:     T2CONbits.TMR2ON = 0;
  6443  000D4E  94CA               	bcf	202,2,c	;volatile
  6444  000D50                     
  6445                           ;motors.c: 369:     TMR0 = 0;
  6446  000D50  0E00               	movlw	0
  6447  000D52  6ED7               	movwf	215,c	;volatile
  6448  000D54  0E00               	movlw	0
  6449  000D56  6ED6               	movwf	214,c	;volatile
  6450                           
  6451                           ;motors.c: 370:     TMR2 = 0;
  6452  000D58  0E00               	movlw	0
  6453  000D5A  6ECC               	movwf	204,c	;volatile
  6454  000D5C                     
  6455                           ;motors.c: 373:     resetStep();
  6456  000D5C  EC13  F013         	call	_resetStep	;wreg free
  6457  000D60                     
  6458                           ;motors.c: 375:     return(tm0Error);
  6459  000D60  505B               	movf	_tm0Error^0,w,c
  6460  000D62                     l143:
  6461  000D62  FFFF               	dw	65535	; assembler added errata NOP
  6462  000D64  0012               	return		;funcret
  6463  000D66  FFFF               	dw	65535	; errata NOP
  6464  000D68                     __end_of_moveToPoint:
  6465                           	callstack 0
  6466                           
  6467 ;; *************** function _stepCounter *****************
  6468 ;; Defined at:
  6469 ;;		line 72 in file "pwm.c"
  6470 ;; Parameters:    Size  Location     Type
  6471 ;;		None
  6472 ;; Auto vars:     Size  Location     Type
  6473 ;;		None
  6474 ;; Return value:  Size  Location     Type
  6475 ;;                  2   17[COMRAM] unsigned int 
  6476 ;; Registers used:
  6477 ;;		None
  6478 ;; Tracked objects:
  6479 ;;		On entry : 0/0
  6480 ;;		On exit  : 0/0
  6481 ;;		Unchanged: 0/0
  6482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6483 ;;      Params:         2       0       0       0       0       0       0
  6484 ;;      Locals:         0       0       0       0       0       0       0
  6485 ;;      Temps:          0       0       0       0       0       0       0
  6486 ;;      Totals:         2       0       0       0       0       0       0
  6487 ;;Total ram usage:        2 bytes
  6488 ;; Hardware stack levels used:    1
  6489 ;; Hardware stack levels required when called:    4
  6490 ;; This function calls:
  6491 ;;		Nothing
  6492 ;; This function is called by:
  6493 ;;		_moveToPoint
  6494 ;; This function uses a non-reentrant model
  6495 ;;
  6496                           
  6497                           	psect	text37
  6498  0025F2                     __ptext37:
  6499                           	callstack 0
  6500  0025F2                     _stepCounter:
  6501                           	callstack 0
  6502  0025F2  FFFF               	dw	65535	; assembler added errata NOP
  6503  0025F4                     
  6504                           ;pwm.c: 73:     return pwmStep;
  6505  0025F4  C067  F012         	movff	_pwmStep,?_stepCounter	;volatile
  6506  0025F8  6A13               	clrf	(?_stepCounter+1)^0,c
  6507  0025FA  0012               	return		;funcret
  6508  0025FC  FFFF               	dw	65535	; errata NOP
  6509  0025FE                     __end_of_stepCounter:
  6510                           	callstack 0
  6511                           
  6512 ;; *************** function _liftArm *****************
  6513 ;; Defined at:
  6514 ;;		line 521 in file "motors.c"
  6515 ;; Parameters:    Size  Location     Type
  6516 ;;		None
  6517 ;; Auto vars:     Size  Location     Type
  6518 ;;		None
  6519 ;; Return value:  Size  Location     Type
  6520 ;;                  1    wreg      unsigned char 
  6521 ;; Registers used:
  6522 ;;		wreg, status,2, status,0, cstack
  6523 ;; Tracked objects:
  6524 ;;		On entry : 0/0
  6525 ;;		On exit  : 0/0
  6526 ;;		Unchanged: 0/0
  6527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6528 ;;      Params:         0       0       0       0       0       0       0
  6529 ;;      Locals:         0       0       0       0       0       0       0
  6530 ;;      Temps:          0       0       0       0       0       0       0
  6531 ;;      Totals:         0       0       0       0       0       0       0
  6532 ;;Total ram usage:        0 bytes
  6533 ;; Hardware stack levels used:    1
  6534 ;; Hardware stack levels required when called:    5
  6535 ;; This function calls:
  6536 ;;		_resetStep
  6537 ;;		_setDirection
  6538 ;;		_stepMade
  6539 ;; This function is called by:
  6540 ;;		_executeData
  6541 ;; This function uses a non-reentrant model
  6542 ;;
  6543                           
  6544                           	psect	text38
  6545  001FBC                     __ptext38:
  6546                           	callstack 0
  6547  001FBC                     _liftArm:
  6548                           	callstack 0
  6549  001FBC  FFFF               	dw	65535	; assembler added errata NOP
  6550  001FBE                     
  6551                           ;motors.c: 524:     setDirection(0, 2);
  6552  001FBE  0E02               	movlw	2
  6553  001FC0  6E12               	movwf	setDirection@motor^0,c
  6554  001FC2  0E00               	movlw	0
  6555  001FC4  ECED  F010         	call	_setDirection
  6556  001FC8                     
  6557                           ;motors.c: 526:     T2CONbits.TMR2ON = 1;
  6558  001FC8  84CA               	bsf	202,2,c	;volatile
  6559  001FCA                     
  6560                           ;motors.c: 528:     tm0Error = 0;
  6561  001FCA  0E00               	movlw	0
  6562  001FCC  6E5C               	movwf	(_tm0Error+1)^0,c
  6563  001FCE  0E00               	movlw	0
  6564  001FD0  6E5B               	movwf	_tm0Error^0,c
  6565  001FD2                     
  6566                           ;motors.c: 529:     tm0Limit = 250;
  6567  001FD2  0EFA               	movlw	250
  6568  001FD4  6E68               	movwf	_tm0Limit^0,c
  6569  001FD6                     
  6570                           ;motors.c: 530:     T0CONbits.TMR0ON = 1;
  6571  001FD6  8ED5               	bsf	213,7,c	;volatile
  6572                           
  6573                           ;motors.c: 534:     while(!PORTEbits.RE2){
  6574  001FD8  EF1F  F010         	goto	l206
  6575  001FDC                     l4029:
  6576  001FDC  FFFF               	dw	65535	; assembler added errata NOP
  6577                           
  6578                           ;motors.c: 537:         if(tm0Error){
  6579  001FDE  505B               	movf	_tm0Error^0,w,c
  6580  001FE0  105C               	iorwf	(_tm0Error+1)^0,w,c
  6581  001FE2  B4D8               	btfsc	status,2,c
  6582  001FE4  EFF6  F00F         	goto	u3471
  6583  001FE8  EFF9  F00F         	goto	u3470
  6584  001FEC                     u3471:
  6585  001FEC  FFFF               	dw	65535	; assembler added errata NOP
  6586  001FEE  EF01  F010         	goto	l208
  6587  001FF2                     u3470:
  6588  001FF2  FFFF               	dw	65535	; assembler added errata NOP
  6589  001FF4                     
  6590                           ;motors.c: 539:             LATCbits.LATC2 = 0;
  6591  001FF4  948B               	bcf	139,2,c	;volatile
  6592  001FF6                     
  6593                           ;motors.c: 540:             tm0Error = 6;
  6594  001FF6  0E00               	movlw	0
  6595  001FF8  6E5C               	movwf	(_tm0Error+1)^0,c
  6596  001FFA  0E06               	movlw	6
  6597  001FFC  6E5B               	movwf	_tm0Error^0,c
  6598                           
  6599                           ;motors.c: 541:             break;
  6600  001FFE  EF28  F010         	goto	l209
  6601  002002                     l208:
  6602  002002  FFFF               	dw	65535	; assembler added errata NOP
  6603                           
  6604                           ;motors.c: 546:         LATCbits.LATC2 = 1;
  6605  002004  848B               	bsf	139,2,c	;volatile
  6606  002006                     l4035:
  6607  002006  FFFF               	dw	65535	; assembler added errata NOP
  6608  002008  ECAF  F012         	call	_stepMade	;wreg free
  6609  00200C  5012               	movf	?_stepMade^0,w,c
  6610  00200E  1013               	iorwf	(?_stepMade+1)^0,w,c
  6611  002010  B4D8               	btfsc	status,2,c
  6612  002012  EF0D  F010         	goto	u3481
  6613  002016  EF10  F010         	goto	u3480
  6614  00201A                     u3481:
  6615  00201A  FFFF               	dw	65535	; assembler added errata NOP
  6616  00201C  EF03  F010         	goto	l4035
  6617  002020                     u3480:
  6618  002020  FFFF               	dw	65535	; assembler added errata NOP
  6619  002022                     
  6620                           ;motors.c: 552:         LATCbits.LATC2 = 0;
  6621  002022  948B               	bcf	139,2,c	;volatile
  6622  002024                     l4037:
  6623  002024  FFFF               	dw	65535	; assembler added errata NOP
  6624  002026  ECAF  F012         	call	_stepMade	;wreg free
  6625  00202A  5012               	movf	?_stepMade^0,w,c
  6626  00202C  1013               	iorwf	(?_stepMade+1)^0,w,c
  6627  00202E  B4D8               	btfsc	status,2,c
  6628  002030  EF1C  F010         	goto	u3491
  6629  002034  EF1F  F010         	goto	u3490
  6630  002038                     u3491:
  6631  002038  FFFF               	dw	65535	; assembler added errata NOP
  6632  00203A  EF12  F010         	goto	l4037
  6633  00203E                     u3490:
  6634  00203E                     l206:
  6635  00203E  FFFF               	dw	65535	; assembler added errata NOP
  6636                           
  6637                           ;motors.c: 534:     while(!PORTEbits.RE2){
  6638  002040  A484               	btfss	132,2,c	;volatile
  6639  002042  EF25  F010         	goto	u3501
  6640  002046  EF28  F010         	goto	u3500
  6641  00204A                     u3501:
  6642  00204A  FFFF               	dw	65535	; assembler added errata NOP
  6643  00204C  EFEE  F00F         	goto	l4029
  6644  002050                     u3500:
  6645  002050                     l209:
  6646  002050  FFFF               	dw	65535	; assembler added errata NOP
  6647                           
  6648                           ;motors.c: 559:     T0CONbits.TMR0ON = 0;
  6649  002052  9ED5               	bcf	213,7,c	;volatile
  6650                           
  6651                           ;motors.c: 560:     T2CONbits.TMR2ON = 0;
  6652  002054  94CA               	bcf	202,2,c	;volatile
  6653  002056                     
  6654                           ;motors.c: 562:     TMR0 = 0;
  6655  002056  0E00               	movlw	0
  6656  002058  6ED7               	movwf	215,c	;volatile
  6657  00205A  0E00               	movlw	0
  6658  00205C  6ED6               	movwf	214,c	;volatile
  6659                           
  6660                           ;motors.c: 563:     TMR2 = 0;
  6661  00205E  0E00               	movlw	0
  6662  002060  6ECC               	movwf	204,c	;volatile
  6663  002062                     
  6664                           ;motors.c: 566:     resetStep();
  6665  002062  EC13  F013         	call	_resetStep	;wreg free
  6666  002066                     
  6667                           ;motors.c: 568:     return(tm0Error);
  6668  002066  505B               	movf	_tm0Error^0,w,c
  6669  002068  0012               	return		;funcret
  6670  00206A  FFFF               	dw	65535	; errata NOP
  6671  00206C                     __end_of_liftArm:
  6672                           	callstack 0
  6673                           
  6674 ;; *************** function _stepMade *****************
  6675 ;; Defined at:
  6676 ;;		line 61 in file "pwm.c"
  6677 ;; Parameters:    Size  Location     Type
  6678 ;;		None
  6679 ;; Auto vars:     Size  Location     Type
  6680 ;;  temp            1   19[COMRAM] unsigned char 
  6681 ;; Return value:  Size  Location     Type
  6682 ;;                  2   17[COMRAM] unsigned int 
  6683 ;; Registers used:
  6684 ;;		wreg, status,2
  6685 ;; Tracked objects:
  6686 ;;		On entry : 0/0
  6687 ;;		On exit  : 0/0
  6688 ;;		Unchanged: 0/0
  6689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6690 ;;      Params:         2       0       0       0       0       0       0
  6691 ;;      Locals:         1       0       0       0       0       0       0
  6692 ;;      Temps:          0       0       0       0       0       0       0
  6693 ;;      Totals:         3       0       0       0       0       0       0
  6694 ;;Total ram usage:        3 bytes
  6695 ;; Hardware stack levels used:    1
  6696 ;; Hardware stack levels required when called:    4
  6697 ;; This function calls:
  6698 ;;		Nothing
  6699 ;; This function is called by:
  6700 ;;		_resetPosition
  6701 ;;		_moveToPoint
  6702 ;;		_touchObject
  6703 ;;		_touchTherm
  6704 ;;		_liftArm
  6705 ;;		_rotateObj
  6706 ;;		_pickObject
  6707 ;;		_releaseObj
  6708 ;; This function uses a non-reentrant model
  6709 ;;
  6710                           
  6711                           	psect	text39
  6712  00255E                     __ptext39:
  6713                           	callstack 0
  6714  00255E                     _stepMade:
  6715                           	callstack 0
  6716  00255E  FFFF               	dw	65535	; assembler added errata NOP
  6717  002560                     
  6718                           ;pwm.c: 62:     unsigned char temp = stepToggle;
  6719  002560  C066  F014         	movff	_stepToggle,stepMade@temp	;volatile
  6720  002564                     
  6721                           ;pwm.c: 64:     stepToggle = 0;
  6722  002564  0E00               	movlw	0
  6723  002566  6E66               	movwf	_stepToggle^0,c	;volatile
  6724  002568                     
  6725                           ;pwm.c: 66:     return temp;
  6726  002568  C014  F012         	movff	stepMade@temp,?_stepMade
  6727  00256C  6A13               	clrf	(?_stepMade+1)^0,c
  6728  00256E  0012               	return		;funcret
  6729  002570  FFFF               	dw	65535	; errata NOP
  6730  002572                     __end_of_stepMade:
  6731                           	callstack 0
  6732                           
  6733 ;; *************** function _setDirection *****************
  6734 ;; Defined at:
  6735 ;;		line 115 in file "motors.c"
  6736 ;; Parameters:    Size  Location     Type
  6737 ;;  direction       1    wreg     unsigned char 
  6738 ;;  motor           1   17[COMRAM] unsigned char 
  6739 ;; Auto vars:     Size  Location     Type
  6740 ;;  direction       1   20[COMRAM] unsigned char 
  6741 ;; Return value:  Size  Location     Type
  6742 ;;                  1    wreg      void 
  6743 ;; Registers used:
  6744 ;;		wreg, status,2, status,0
  6745 ;; Tracked objects:
  6746 ;;		On entry : 0/0
  6747 ;;		On exit  : 0/0
  6748 ;;		Unchanged: 0/0
  6749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6750 ;;      Params:         1       0       0       0       0       0       0
  6751 ;;      Locals:         1       0       0       0       0       0       0
  6752 ;;      Temps:          2       0       0       0       0       0       0
  6753 ;;      Totals:         4       0       0       0       0       0       0
  6754 ;;Total ram usage:        4 bytes
  6755 ;; Hardware stack levels used:    1
  6756 ;; Hardware stack levels required when called:    4
  6757 ;; This function calls:
  6758 ;;		Nothing
  6759 ;; This function is called by:
  6760 ;;		_resetPosition
  6761 ;;		_moveToPoint
  6762 ;;		_touchObject
  6763 ;;		_touchTherm
  6764 ;;		_liftArm
  6765 ;; This function uses a non-reentrant model
  6766 ;;
  6767                           
  6768                           	psect	text40
  6769  0021DA                     __ptext40:
  6770                           	callstack 0
  6771  0021DA                     _setDirection:
  6772                           	callstack 0
  6773  0021DA  FFFF               	dw	65535	; assembler added errata NOP
  6774                           
  6775                           ;incstack = 0
  6776                           ;setDirection@direction stored from wreg
  6777  0021DC  6E15               	movwf	setDirection@direction^0,c
  6778  0021DE                     
  6779                           ;motors.c: 116:     switch(motor){
  6780  0021DE  EF09  F011         	goto	l3519
  6781  0021E2                     l3511:
  6782  0021E2  FFFF               	dw	65535	; assembler added errata NOP
  6783                           
  6784                           ;motors.c: 118:             LATAbits.LATA1 = direction;
  6785  0021E4  B015               	btfsc	setDirection@direction^0,0,c
  6786  0021E6  D002               	bra	u2635
  6787  0021E8  9289               	bcf	137,1,c	;volatile
  6788  0021EA  D001               	bra	u2636
  6789  0021EC                     u2635:
  6790  0021EC  8289               	bsf	137,1,c	;volatile
  6791  0021EE                     u2636:
  6792                           
  6793                           ;motors.c: 119:             break;
  6794  0021EE  EF24  F011         	goto	l103
  6795  0021F2                     l3513:
  6796  0021F2  FFFF               	dw	65535	; assembler added errata NOP
  6797                           
  6798                           ;motors.c: 121:             LATBbits.LATB3 = direction;
  6799  0021F4  B015               	btfsc	setDirection@direction^0,0,c
  6800  0021F6  D002               	bra	u2645
  6801  0021F8  968A               	bcf	138,3,c	;volatile
  6802  0021FA  D001               	bra	u2646
  6803  0021FC                     u2645:
  6804  0021FC  868A               	bsf	138,3,c	;volatile
  6805  0021FE                     u2646:
  6806                           
  6807                           ;motors.c: 122:             break;
  6808  0021FE  EF24  F011         	goto	l103
  6809  002202                     l3515:
  6810  002202  FFFF               	dw	65535	; assembler added errata NOP
  6811                           
  6812                           ;motors.c: 124:             LATCbits.LATC1 = direction;
  6813  002204  B015               	btfsc	setDirection@direction^0,0,c
  6814  002206  D002               	bra	u2655
  6815  002208  928B               	bcf	139,1,c	;volatile
  6816  00220A  D001               	bra	u2656
  6817  00220C                     u2655:
  6818  00220C  828B               	bsf	139,1,c	;volatile
  6819  00220E                     u2656:
  6820                           
  6821                           ;motors.c: 125:             break;
  6822  00220E  EF24  F011         	goto	l103
  6823  002212                     l3519:
  6824  002212  FFFF               	dw	65535	; assembler added errata NOP
  6825  002214  5012               	movf	setDirection@motor^0,w,c
  6826  002216  6E13               	movwf	??_setDirection^0,c
  6827  002218  6A14               	clrf	(??_setDirection+1)^0,c
  6828                           
  6829                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6830                           ; Switch size 1, requested type "simple"
  6831                           ; Number of cases is 1, Range of values is 0 to 0
  6832                           ; switch strategies available:
  6833                           ; Name         Instructions Cycles
  6834                           ; simple_byte            4     3 (average)
  6835                           ;	Chosen strategy is simple_byte
  6836  00221A  5014               	movf	(??_setDirection+1)^0,w,c
  6837  00221C  0A00               	xorlw	0	; case 0
  6838  00221E  B4D8               	btfsc	status,2,c
  6839  002220  EF14  F011         	goto	l4663
  6840  002224  EF24  F011         	goto	l103
  6841  002228                     l4663:
  6842  002228  FFFF               	dw	65535	; assembler added errata NOP
  6843                           
  6844                           ; Switch size 1, requested type "simple"
  6845                           ; Number of cases is 3, Range of values is 0 to 2
  6846                           ; switch strategies available:
  6847                           ; Name         Instructions Cycles
  6848                           ; simple_byte           10     6 (average)
  6849                           ;	Chosen strategy is simple_byte
  6850  00222A  5013               	movf	??_setDirection^0,w,c
  6851  00222C  0A00               	xorlw	0	; case 0
  6852  00222E  B4D8               	btfsc	status,2,c
  6853  002230  EFF1  F010         	goto	l3511
  6854  002234  0A01               	xorlw	1	; case 1
  6855  002236  B4D8               	btfsc	status,2,c
  6856  002238  EFF9  F010         	goto	l3513
  6857  00223C  0A03               	xorlw	3	; case 2
  6858  00223E  B4D8               	btfsc	status,2,c
  6859  002240  EF01  F011         	goto	l3515
  6860  002244  EF24  F011         	goto	l103
  6861  002248                     l103:
  6862  002248  FFFF               	dw	65535	; assembler added errata NOP
  6863  00224A  0012               	return		;funcret
  6864  00224C  FFFF               	dw	65535	; errata NOP
  6865  00224E                     __end_of_setDirection:
  6866                           	callstack 0
  6867                           
  6868 ;; *************** function _resetStep *****************
  6869 ;; Defined at:
  6870 ;;		line 79 in file "pwm.c"
  6871 ;; Parameters:    Size  Location     Type
  6872 ;;		None
  6873 ;; Auto vars:     Size  Location     Type
  6874 ;;		None
  6875 ;; Return value:  Size  Location     Type
  6876 ;;                  1    wreg      void 
  6877 ;; Registers used:
  6878 ;;		wreg, status,2
  6879 ;; Tracked objects:
  6880 ;;		On entry : 0/0
  6881 ;;		On exit  : 0/0
  6882 ;;		Unchanged: 0/0
  6883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6884 ;;      Params:         0       0       0       0       0       0       0
  6885 ;;      Locals:         0       0       0       0       0       0       0
  6886 ;;      Temps:          0       0       0       0       0       0       0
  6887 ;;      Totals:         0       0       0       0       0       0       0
  6888 ;;Total ram usage:        0 bytes
  6889 ;; Hardware stack levels used:    1
  6890 ;; Hardware stack levels required when called:    4
  6891 ;; This function calls:
  6892 ;;		Nothing
  6893 ;; This function is called by:
  6894 ;;		_resetPosition
  6895 ;;		_moveToPoint
  6896 ;;		_touchObject
  6897 ;;		_touchTherm
  6898 ;;		_liftArm
  6899 ;; This function uses a non-reentrant model
  6900 ;;
  6901                           
  6902                           	psect	text41
  6903  002626                     __ptext41:
  6904                           	callstack 0
  6905  002626                     _resetStep:
  6906                           	callstack 0
  6907  002626  FFFF               	dw	65535	; assembler added errata NOP
  6908  002628                     
  6909                           ;pwm.c: 80:     pwmStep = 0;
  6910  002628  0E00               	movlw	0
  6911  00262A  6E67               	movwf	_pwmStep^0,c	;volatile
  6912  00262C  0012               	return		;funcret
  6913  00262E  FFFF               	dw	65535	; errata NOP
  6914  002630                     __end_of_resetStep:
  6915                           	callstack 0
  6916                           
  6917 ;; *************** function _getData *****************
  6918 ;; Defined at:
  6919 ;;		line 205 in file "usart.c"
  6920 ;; Parameters:    Size  Location     Type
  6921 ;;		None
  6922 ;; Auto vars:     Size  Location     Type
  6923 ;;		None
  6924 ;; Return value:  Size  Location     Type
  6925 ;;                  2   17[COMRAM] PTR struct .
  6926 ;; Registers used:
  6927 ;;		wreg, status,2, status,0
  6928 ;; Tracked objects:
  6929 ;;		On entry : 0/0
  6930 ;;		On exit  : 0/0
  6931 ;;		Unchanged: 0/0
  6932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6933 ;;      Params:         2       0       0       0       0       0       0
  6934 ;;      Locals:         0       0       0       0       0       0       0
  6935 ;;      Temps:          0       0       0       0       0       0       0
  6936 ;;      Totals:         2       0       0       0       0       0       0
  6937 ;;Total ram usage:        2 bytes
  6938 ;; Hardware stack levels used:    1
  6939 ;; Hardware stack levels required when called:    4
  6940 ;; This function calls:
  6941 ;;		Nothing
  6942 ;; This function is called by:
  6943 ;;		_executeData
  6944 ;; This function uses a non-reentrant model
  6945 ;;
  6946                           
  6947                           	psect	text42
  6948  0025A2                     __ptext42:
  6949                           	callstack 0
  6950  0025A2                     _getData:
  6951                           	callstack 0
  6952  0025A2  FFFF               	dw	65535	; assembler added errata NOP
  6953  0025A4                     
  6954                           ;usart.c: 206:     return(&dataSequence[0]);
  6955  0025A4  0EDB               	movlw	low _dataSequence
  6956  0025A6  6E12               	movwf	?_getData^0,c
  6957  0025A8  0E00               	movlw	high _dataSequence
  6958  0025AA  6E13               	movwf	(?_getData+1)^0,c
  6959  0025AC  0012               	return		;funcret
  6960  0025AE  FFFF               	dw	65535	; errata NOP
  6961  0025B0                     __end_of_getData:
  6962                           	callstack 0
  6963                           
  6964 ;; *************** function _clearTM0 *****************
  6965 ;; Defined at:
  6966 ;;		line 28 in file "motors.c"
  6967 ;; Parameters:    Size  Location     Type
  6968 ;;		None
  6969 ;; Auto vars:     Size  Location     Type
  6970 ;;		None
  6971 ;; Return value:  Size  Location     Type
  6972 ;;                  1    wreg      void 
  6973 ;; Registers used:
  6974 ;;		wreg, status,2
  6975 ;; Tracked objects:
  6976 ;;		On entry : 0/0
  6977 ;;		On exit  : 0/0
  6978 ;;		Unchanged: 0/0
  6979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6980 ;;      Params:         0       0       0       0       0       0       0
  6981 ;;      Locals:         0       0       0       0       0       0       0
  6982 ;;      Temps:          0       0       0       0       0       0       0
  6983 ;;      Totals:         0       0       0       0       0       0       0
  6984 ;;Total ram usage:        0 bytes
  6985 ;; Hardware stack levels used:    1
  6986 ;; Hardware stack levels required when called:    4
  6987 ;; This function calls:
  6988 ;;		Nothing
  6989 ;; This function is called by:
  6990 ;;		_main
  6991 ;; This function uses a non-reentrant model
  6992 ;;
  6993                           
  6994                           	psect	text43
  6995  0025B0                     __ptext43:
  6996                           	callstack 0
  6997  0025B0                     _clearTM0:
  6998                           	callstack 0
  6999  0025B0  FFFF               	dw	65535	; assembler added errata NOP
  7000  0025B2                     
  7001                           ;motors.c: 29:     tm0Error = 0;
  7002  0025B2  0E00               	movlw	0
  7003  0025B4  6E5C               	movwf	(_tm0Error+1)^0,c
  7004  0025B6  0E00               	movlw	0
  7005  0025B8  6E5B               	movwf	_tm0Error^0,c
  7006  0025BA  0012               	return		;funcret
  7007  0025BC  FFFF               	dw	65535	; errata NOP
  7008  0025BE                     __end_of_clearTM0:
  7009                           	callstack 0
  7010                           
  7011 ;; *************** function _isr *****************
  7012 ;; Defined at:
  7013 ;;		line 17 in file "interrupt.c"
  7014 ;; Parameters:    Size  Location     Type
  7015 ;;		None
  7016 ;; Auto vars:     Size  Location     Type
  7017 ;;  temp            1   16[COMRAM] unsigned char 
  7018 ;; Return value:  Size  Location     Type
  7019 ;;                  1    wreg      void 
  7020 ;; Registers used:
  7021 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7022 ;; Tracked objects:
  7023 ;;		On entry : 0/0
  7024 ;;		On exit  : 0/0
  7025 ;;		Unchanged: 0/0
  7026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7027 ;;      Params:         0       0       0       0       0       0       0
  7028 ;;      Locals:         1       0       0       0       0       0       0
  7029 ;;      Temps:          6       0       0       0       0       0       0
  7030 ;;      Totals:         7       0       0       0       0       0       0
  7031 ;;Total ram usage:        7 bytes
  7032 ;; Hardware stack levels used:    1
  7033 ;; Hardware stack levels required when called:    3
  7034 ;; This function calls:
  7035 ;;		_abortAll
  7036 ;;		_fatalError
  7037 ;;		_increaseStep
  7038 ;;		_retPeriod
  7039 ;;		_setThermRel
  7040 ;;		_setTouchRel
  7041 ;;		_toggleStep
  7042 ;;		_whatsTM0Limit
  7043 ;;		_writeTM0
  7044 ;;		i2_storeData
  7045 ;; This function is called by:
  7046 ;;		Interrupt level 2
  7047 ;; This function uses a non-reentrant model
  7048 ;;
  7049                           
  7050                           	psect	intcode
  7051  000008                     __pintcode:
  7052                           	callstack 0
  7053  000008                     _isr:
  7054                           	callstack 0
  7055  000008  FFFF               	dw	65535	; assembler added errata NOP
  7056                           
  7057                           ;incstack = 0
  7058  00000A  826E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7059  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  7060  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  7061  000014  CFF3 F00F          	movff	prodl,??_isr+4
  7062  000018  CFF4 F010          	movff	prodh,??_isr+5
  7063  00001C                     
  7064                           ;interrupt.c: 18:     static unsigned int single_cycle = 0;;interrupt.c: 19:     static 
      +                          unsigned char tm0Count = 0;;interrupt.c: 20:     static unsigned char completeStep = 0;;
      +                          interrupt.c: 23:     if(INTCONbits.T0IF){
  7065  00001C  A4F2               	btfss	242,2,c	;volatile
  7066  00001E  EF13  F000         	goto	i2u251_41
  7067  000022  EF16  F000         	goto	i2u251_40
  7068  000026                     i2u251_41:
  7069  000026  FFFF               	dw	65535	; assembler added errata NOP
  7070  000028  EF2C  F000         	goto	i2l3415
  7071  00002C                     i2u251_40:
  7072  00002C  FFFF               	dw	65535	; assembler added errata NOP
  7073  00002E                     
  7074                           ;interrupt.c: 24:         INTCONbits.T0IF = 0;
  7075  00002E  94F2               	bcf	242,2,c	;volatile
  7076  000030                     
  7077                           ;interrupt.c: 27:         tm0Count++;
  7078  000030  2A63               	incf	isr@tm0Count^0,f,c
  7079  000032                     
  7080                           ;interrupt.c: 29:         if(tm0Count >= whatsTM0Limit()){
  7081  000032  EC37  F013         	call	_whatsTM0Limit	;wreg free
  7082  000036  6E0B               	movwf	??_isr^0,c
  7083  000038  500B               	movf	??_isr^0,w,c
  7084  00003A  5C63               	subwf	isr@tm0Count^0,w,c
  7085  00003C  A0D8               	btfss	status,0,c
  7086  00003E  EF23  F000         	goto	i2u252_41
  7087  000042  EF26  F000         	goto	i2u252_40
  7088  000046                     i2u252_41:
  7089  000046  FFFF               	dw	65535	; assembler added errata NOP
  7090  000048  EF2C  F000         	goto	i2l3415
  7091  00004C                     i2u252_40:
  7092  00004C  FFFF               	dw	65535	; assembler added errata NOP
  7093  00004E                     
  7094                           ;interrupt.c: 30:             T0CONbits.TMR0ON = 0;
  7095  00004E  9ED5               	bcf	213,7,c	;volatile
  7096  000050                     
  7097                           ;interrupt.c: 31:             tm0Count = 0;
  7098  000050  0E00               	movlw	0
  7099  000052  6E63               	movwf	isr@tm0Count^0,c
  7100  000054                     
  7101                           ;interrupt.c: 32:             writeTM0();
  7102  000054  ECDF  F012         	call	_writeTM0	;wreg free
  7103  000058                     i2l3415:
  7104  000058  FFFF               	dw	65535	; assembler added errata NOP
  7105                           
  7106                           ;interrupt.c: 37:     if(PIR1bits.TMR1IF){
  7107  00005A  A09E               	btfss	158,0,c	;volatile
  7108  00005C  EF32  F000         	goto	i2u253_41
  7109  000060  EF35  F000         	goto	i2u253_40
  7110  000064                     i2u253_41:
  7111  000064  FFFF               	dw	65535	; assembler added errata NOP
  7112  000066  EF45  F000         	goto	i2l3423
  7113  00006A                     i2u253_40:
  7114  00006A  FFFF               	dw	65535	; assembler added errata NOP
  7115  00006C                     
  7116                           ;interrupt.c: 38:         PIR1bits.TMR1IF = 0;
  7117  00006C  909E               	bcf	158,0,c	;volatile
  7118  00006E                     
  7119                           ;interrupt.c: 39:         if(fatalError()){
  7120  00006E  EC3F  F013         	call	_fatalError	;wreg free
  7121  000072  0900               	iorlw	0
  7122  000074  B4D8               	btfsc	status,2,c
  7123  000076  EF3F  F000         	goto	i2u254_41
  7124  00007A  EF42  F000         	goto	i2u254_40
  7125  00007E                     i2u254_41:
  7126  00007E  FFFF               	dw	65535	; assembler added errata NOP
  7127  000080  EF45  F000         	goto	i2l3423
  7128  000084                     i2u254_40:
  7129  000084  FFFF               	dw	65535	; assembler added errata NOP
  7130  000086                     
  7131                           ;interrupt.c: 40:             abortAll();
  7132  000086  EC2A  F012         	call	_abortAll	;wreg free
  7133  00008A                     i2l3423:
  7134  00008A  FFFF               	dw	65535	; assembler added errata NOP
  7135                           
  7136                           ;interrupt.c: 45:     if(PIR1bits.TMR2IF){
  7137  00008C  A29E               	btfss	158,1,c	;volatile
  7138  00008E  EF4B  F000         	goto	i2u255_41
  7139  000092  EF4E  F000         	goto	i2u255_40
  7140  000096                     i2u255_41:
  7141  000096  FFFF               	dw	65535	; assembler added errata NOP
  7142  000098  EF7C  F000         	goto	i2l3443
  7143  00009C                     i2u255_40:
  7144  00009C  FFFF               	dw	65535	; assembler added errata NOP
  7145  00009E                     
  7146                           ;interrupt.c: 46:         PIR1bits.TMR2IF = 0;
  7147  00009E  929E               	bcf	158,1,c	;volatile
  7148  0000A0                     
  7149                           ;interrupt.c: 47:         single_cycle++;
  7150  0000A0  4A51               	infsnz	isr@single_cycle^0,f,c
  7151  0000A2  2A52               	incf	(isr@single_cycle+1)^0,f,c
  7152  0000A4                     
  7153                           ;interrupt.c: 50:         if(single_cycle > retPeriod()){
  7154  0000A4  ECE6  F012         	call	_retPeriod	;wreg free
  7155  0000A8  5051               	movf	isr@single_cycle^0,w,c
  7156  0000AA  5C01               	subwf	?_retPeriod^0,w,c
  7157  0000AC  5052               	movf	(isr@single_cycle+1)^0,w,c
  7158  0000AE  5802               	subwfb	(?_retPeriod+1)^0,w,c
  7159  0000B0  B0D8               	btfsc	status,0,c
  7160  0000B2  EF5D  F000         	goto	i2u256_41
  7161  0000B6  EF60  F000         	goto	i2u256_40
  7162  0000BA                     i2u256_41:
  7163  0000BA  FFFF               	dw	65535	; assembler added errata NOP
  7164  0000BC  EF7C  F000         	goto	i2l3443
  7165  0000C0                     i2u256_40:
  7166  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  7167  0000C2                     
  7168                           ;interrupt.c: 51:             completeStep++;
  7169  0000C2  2A62               	incf	isr@completeStep^0,f,c
  7170  0000C4                     
  7171                           ;interrupt.c: 54:             if(completeStep != 0 && !(completeStep % 2)){
  7172  0000C4  5062               	movf	isr@completeStep^0,w,c
  7173  0000C6  B4D8               	btfsc	status,2,c
  7174  0000C8  EF68  F000         	goto	i2u257_41
  7175  0000CC  EF6B  F000         	goto	i2u257_40
  7176  0000D0                     i2u257_41:
  7177  0000D0  FFFF               	dw	65535	; assembler added errata NOP
  7178  0000D2  EF79  F000         	goto	i2l3441
  7179  0000D6                     i2u257_40:
  7180  0000D6  FFFF               	dw	65535	; assembler added errata NOP
  7181  0000D8  B062               	btfsc	isr@completeStep^0,0,c
  7182  0000DA  EF71  F000         	goto	i2u258_41
  7183  0000DE  EF74  F000         	goto	i2u258_40
  7184  0000E2                     i2u258_41:
  7185  0000E2  FFFF               	dw	65535	; assembler added errata NOP
  7186  0000E4  EF79  F000         	goto	i2l3441
  7187  0000E8                     i2u258_40:
  7188  0000E8  FFFF               	dw	65535	; assembler added errata NOP
  7189  0000EA                     
  7190                           ;interrupt.c: 56:                 completeStep = 0;
  7191  0000EA  0E00               	movlw	0
  7192  0000EC  6E62               	movwf	isr@completeStep^0,c
  7193  0000EE                     
  7194                           ;interrupt.c: 59:                 increaseStep();
  7195  0000EE  EC3B  F013         	call	_increaseStep	;wreg free
  7196  0000F2                     i2l3441:
  7197  0000F2  FFFF               	dw	65535	; assembler added errata NOP
  7198                           
  7199                           ;interrupt.c: 64:             toggleStep();
  7200  0000F4  EC18  F013         	call	_toggleStep	;wreg free
  7201  0000F8                     i2l3443:
  7202  0000F8  FFFF               	dw	65535	; assembler added errata NOP
  7203                           
  7204                           ;interrupt.c: 69:     if(PIR1bits.ADIF){
  7205  0000FA  AC9E               	btfss	158,6,c	;volatile
  7206  0000FC  EF82  F000         	goto	i2u259_41
  7207  000100  EF85  F000         	goto	i2u259_40
  7208  000104                     i2u259_41:
  7209  000104  FFFF               	dw	65535	; assembler added errata NOP
  7210  000106  EFB2  F000         	goto	i2l3455
  7211  00010A                     i2u259_40:
  7212  00010A  FFFF               	dw	65535	; assembler added errata NOP
  7213  00010C                     
  7214                           ;interrupt.c: 70:         PIR1bits.ADIF = 0;
  7215  00010C  9C9E               	bcf	158,6,c	;volatile
  7216                           
  7217                           ;interrupt.c: 73:         ADC_res = ADRESL;
  7218  00010E  CFC3 F053          	movff	4035,_ADC_res	;volatile
  7219  000112  6A54               	clrf	(_ADC_res+1)^0,c
  7220  000114                     
  7221                           ;interrupt.c: 74:         ADC_res |= (ADRESH << 8);
  7222  000114  50C4               	movf	196,w,c	;volatile
  7223  000116  6E0C               	movwf	(??_isr+1)^0,c
  7224  000118  6A0B               	clrf	??_isr^0,c
  7225  00011A  500B               	movf	??_isr^0,w,c
  7226  00011C  1253               	iorwf	_ADC_res^0,f,c
  7227  00011E  500C               	movf	(??_isr+1)^0,w,c
  7228  000120  1254               	iorwf	(_ADC_res+1)^0,f,c
  7229                           
  7230                           ;interrupt.c: 77:         if(ADC_res > therm_pressure){
  7231  000122  0453               	decf	_ADC_res^0,w,c
  7232  000124  0E04               	movlw	4
  7233  000126  5854               	subwfb	(_ADC_res+1)^0,w,c
  7234  000128  A0D8               	btfss	status,0,c
  7235  00012A  EF99  F000         	goto	i2u260_41
  7236  00012E  EF9C  F000         	goto	i2u260_40
  7237  000132                     i2u260_41:
  7238  000132  FFFF               	dw	65535	; assembler added errata NOP
  7239  000134  EFA3  F000         	goto	i2l3451
  7240  000138                     i2u260_40:
  7241  000138  FFFF               	dw	65535	; assembler added errata NOP
  7242  00013A                     
  7243                           ;interrupt.c: 79:             setTouchRel();
  7244  00013A  EC1D  F013         	call	_setTouchRel	;wreg free
  7245                           
  7246                           ;interrupt.c: 80:             setThermRel();
  7247  00013E  EC22  F013         	call	_setThermRel	;wreg free
  7248                           
  7249                           ;interrupt.c: 81:         }else if(ADC_res > touch_pressure){
  7250  000142  EFB2  F000         	goto	i2l3455
  7251  000146                     i2l3451:
  7252  000146  FFFF               	dw	65535	; assembler added errata NOP
  7253  000148  0453               	decf	_ADC_res^0,w,c
  7254  00014A  0E02               	movlw	2
  7255  00014C  5854               	subwfb	(_ADC_res+1)^0,w,c
  7256  00014E  A0D8               	btfss	status,0,c
  7257  000150  EFAC  F000         	goto	i2u261_41
  7258  000154  EFAF  F000         	goto	i2u261_40
  7259  000158                     i2u261_41:
  7260  000158  FFFF               	dw	65535	; assembler added errata NOP
  7261  00015A  EFB2  F000         	goto	i2l3455
  7262  00015E                     i2u261_40:
  7263  00015E  FFFF               	dw	65535	; assembler added errata NOP
  7264  000160                     
  7265                           ;interrupt.c: 83:             setTouchRel();
  7266  000160  EC1D  F013         	call	_setTouchRel	;wreg free
  7267  000164                     i2l3455:
  7268  000164  FFFF               	dw	65535	; assembler added errata NOP
  7269                           
  7270                           ;interrupt.c: 88:     if(PIR1bits.RC1IF){
  7271  000166  AA9E               	btfss	158,5,c	;volatile
  7272  000168  EFB8  F000         	goto	i2u262_41
  7273  00016C  EFBB  F000         	goto	i2u262_40
  7274  000170                     i2u262_41:
  7275  000170  FFFF               	dw	65535	; assembler added errata NOP
  7276  000172  EFC2  F000         	goto	i2l493
  7277  000176                     i2u262_40:
  7278  000176  FFFF               	dw	65535	; assembler added errata NOP
  7279  000178                     
  7280                           ;interrupt.c: 89:         PIR1bits.RC1IF = 0;
  7281  000178  9A9E               	bcf	158,5,c	;volatile
  7282                           
  7283                           ;interrupt.c: 92:         unsigned char temp = RCREG1;
  7284  00017A  CFAE F011          	movff	4014,isr@temp	;volatile
  7285  00017E                     
  7286                           ;interrupt.c: 94:         storeData(temp);
  7287  00017E  5011               	movf	isr@temp^0,w,c
  7288  000180  ECA2  F00A         	call	i2_storeData
  7289  000184                     i2l493:
  7290  000184  FFFF               	dw	65535	; assembler added errata NOP
  7291  000186  C010  FFF4         	movff	??_isr+5,prodh
  7292  00018A  C00F  FFF3         	movff	??_isr+4,prodl
  7293  00018E  C00E  FFDA         	movff	??_isr+3,fsr2h
  7294  000192  C00D  FFD9         	movff	??_isr+2,fsr2l
  7295  000196  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7296  000198  0011               	retfie		f
  7297  00019A  FFFF               	dw	65535	; errata NOP
  7298  00019C                     __end_of_isr:
  7299                           	callstack 0
  7300                           
  7301 ;; *************** function i2_storeData *****************
  7302 ;; Defined at:
  7303 ;;		line 131 in file "usart.c"
  7304 ;; Parameters:    Size  Location     Type
  7305 ;;  data            1    wreg     unsigned char 
  7306 ;; Auto vars:     Size  Location     Type
  7307 ;;  data            1    9[COMRAM] unsigned char 
  7308 ;; Return value:  Size  Location     Type
  7309 ;;                  1    wreg      void 
  7310 ;; Registers used:
  7311 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7312 ;; Tracked objects:
  7313 ;;		On entry : 0/0
  7314 ;;		On exit  : 0/0
  7315 ;;		Unchanged: 0/0
  7316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7317 ;;      Params:         0       0       0       0       0       0       0
  7318 ;;      Locals:         1       0       0       0       0       0       0
  7319 ;;      Temps:          2       0       0       0       0       0       0
  7320 ;;      Totals:         3       0       0       0       0       0       0
  7321 ;;Total ram usage:        3 bytes
  7322 ;; Hardware stack levels used:    1
  7323 ;; Hardware stack levels required when called:    2
  7324 ;; This function calls:
  7325 ;;		i2_printError
  7326 ;; This function is called by:
  7327 ;;		_isr
  7328 ;; This function uses a non-reentrant model
  7329 ;;
  7330                           
  7331                           	psect	text45
  7332  001544                     __ptext45:
  7333                           	callstack 0
  7334  001544                     i2_storeData:
  7335                           	callstack 0
  7336  001544  FFFF               	dw	65535	; assembler added errata NOP
  7337                           
  7338                           ;incstack = 0
  7339                           ;i2storeData@data stored from wreg
  7340  001546  6E0A               	movwf	i2storeData@data^0,c
  7341  001548                     
  7342                           ;usart.c: 133:     static unsigned char counter = 0;;usart.c: 134:     static unsigned c
      +                          har mexLength = 5;;usart.c: 135:     static unsigned char command;;usart.c: 136:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 140:     receivedMex[counter] = data;
  7343  001548  0E45               	movlw	low storeData@receivedMex
  7344  00154A  245E               	addwf	storeData@counter^0,w,c
  7345  00154C  6ED9               	movwf	fsr2l,c
  7346  00154E  6ADA               	clrf	fsr2h,c
  7347  001550  0E00               	movlw	high storeData@receivedMex
  7348  001552  22DA               	addwfc	fsr2h,f,c
  7349  001554  C00A  FFDF         	movff	i2storeData@data,indf2
  7350  001558                     
  7351                           ;usart.c: 142:     counter++;
  7352  001558  2A5E               	incf	storeData@counter^0,f,c
  7353                           
  7354                           ;usart.c: 145:     switch(receivedMex[0]){
  7355  00155A  EFBE  F00A         	goto	i2l3317
  7356  00155E                     i2l3309:
  7357  00155E  FFFF               	dw	65535	; assembler added errata NOP
  7358                           
  7359                           ;usart.c: 147:             mexLength = 5;
  7360  001560  0E05               	movlw	5
  7361  001562  6E6D               	movwf	storeData@mexLength^0,c
  7362                           
  7363                           ;usart.c: 148:             break;
  7364  001564  EFD9  F00A         	goto	i2l3319
  7365  001568                     i2l3311:
  7366  001568  FFFF               	dw	65535	; assembler added errata NOP
  7367                           
  7368                           ;usart.c: 150:             mexLength = 9;
  7369  00156A  0E09               	movlw	9
  7370  00156C  6E6D               	movwf	storeData@mexLength^0,c
  7371                           
  7372                           ;usart.c: 151:             break;
  7373  00156E  EFD9  F00A         	goto	i2l3319
  7374  001572                     i2l3313:
  7375  001572  FFFF               	dw	65535	; assembler added errata NOP
  7376                           
  7377                           ;usart.c: 153:             mexLength = 1;
  7378  001574  0E01               	movlw	1
  7379  001576  6E6D               	movwf	storeData@mexLength^0,c
  7380                           
  7381                           ;usart.c: 154:             break;
  7382  001578  EFD9  F00A         	goto	i2l3319
  7383  00157C                     i2l3317:
  7384  00157C  FFFF               	dw	65535	; assembler added errata NOP
  7385  00157E  5045               	movf	storeData@receivedMex^0,w,c
  7386  001580  6E08               	movwf	??i2_storeData^0,c
  7387  001582  6A09               	clrf	(??i2_storeData+1)^0,c
  7388                           
  7389                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7390                           ; Switch size 1, requested type "simple"
  7391                           ; Number of cases is 1, Range of values is 0 to 0
  7392                           ; switch strategies available:
  7393                           ; Name         Instructions Cycles
  7394                           ; simple_byte            4     3 (average)
  7395                           ;	Chosen strategy is simple_byte
  7396  001584  5009               	movf	(??i2_storeData+1)^0,w,c
  7397  001586  0A00               	xorlw	0	; case 0
  7398  001588  B4D8               	btfsc	status,2,c
  7399  00158A  EFC9  F00A         	goto	i2l4665
  7400  00158E  EFD9  F00A         	goto	i2l3319
  7401  001592                     i2l4665:
  7402  001592  FFFF               	dw	65535	; assembler added errata NOP
  7403                           
  7404                           ; Switch size 1, requested type "simple"
  7405                           ; Number of cases is 3, Range of values is 0 to 2
  7406                           ; switch strategies available:
  7407                           ; Name         Instructions Cycles
  7408                           ; simple_byte           10     6 (average)
  7409                           ;	Chosen strategy is simple_byte
  7410  001594  5008               	movf	??i2_storeData^0,w,c
  7411  001596  0A00               	xorlw	0	; case 0
  7412  001598  B4D8               	btfsc	status,2,c
  7413  00159A  EFAF  F00A         	goto	i2l3309
  7414  00159E  0A01               	xorlw	1	; case 1
  7415  0015A0  B4D8               	btfsc	status,2,c
  7416  0015A2  EFB4  F00A         	goto	i2l3311
  7417  0015A6  0A03               	xorlw	3	; case 2
  7418  0015A8  B4D8               	btfsc	status,2,c
  7419  0015AA  EFB9  F00A         	goto	i2l3313
  7420  0015AE  EFD9  F00A         	goto	i2l3319
  7421  0015B2                     i2l3319:
  7422  0015B2  FFFF               	dw	65535	; assembler added errata NOP
  7423                           
  7424                           ;usart.c: 161:     if(counter >= mexLength){
  7425  0015B4  506D               	movf	storeData@mexLength^0,w,c
  7426  0015B6  5C5E               	subwf	storeData@counter^0,w,c
  7427  0015B8  A0D8               	btfss	status,0,c
  7428  0015BA  EFE1  F00A         	goto	i2u247_41
  7429  0015BE  EFE4  F00A         	goto	i2u247_40
  7430  0015C2                     i2u247_41:
  7431  0015C2  FFFF               	dw	65535	; assembler added errata NOP
  7432  0015C4  EF50  F00B         	goto	i2l592
  7433  0015C8                     i2u247_40:
  7434  0015C8  FFFF               	dw	65535	; assembler added errata NOP
  7435  0015CA                     
  7436                           ;usart.c: 162:         counter = 0;
  7437  0015CA  0E00               	movlw	0
  7438  0015CC  6E5E               	movwf	storeData@counter^0,c
  7439                           
  7440                           ;usart.c: 166:         switch(receivedMex[0]){
  7441  0015CE  EF35  F00B         	goto	i2l3335
  7442  0015D2                     i2l3323:
  7443  0015D2  FFFF               	dw	65535	; assembler added errata NOP
  7444                           
  7445                           ;usart.c: 168:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  7446  0015D4  5061               	movf	_dataCounter^0,w,c
  7447  0015D6  0D04               	mullw	4
  7448  0015D8  0EDB               	movlw	low _dataSequence
  7449  0015DA  24F3               	addwf	243,w,c
  7450  0015DC  6ED9               	movwf	fsr2l,c
  7451  0015DE  0E00               	movlw	high _dataSequence
  7452  0015E0  20F4               	addwfc	prodh,w,c
  7453  0015E2  6EDA               	movwf	fsr2h,c
  7454  0015E4  C046  FFDF         	movff	storeData@receivedMex+1,indf2
  7455                           
  7456                           ;usart.c: 169:                 dataSequence[dataCounter].posX = receivedMex[2];
  7457  0015E8  5061               	movf	_dataCounter^0,w,c
  7458  0015EA  0D04               	mullw	4
  7459  0015EC  0EDC               	movlw	low (_dataSequence+1)
  7460  0015EE  24F3               	addwf	243,w,c
  7461  0015F0  6ED9               	movwf	fsr2l,c
  7462  0015F2  0E00               	movlw	high (_dataSequence+1)
  7463  0015F4  20F4               	addwfc	prodh,w,c
  7464  0015F6  6EDA               	movwf	fsr2h,c
  7465  0015F8  C047  FFDF         	movff	storeData@receivedMex+2,indf2
  7466                           
  7467                           ;usart.c: 170:                 dataSequence[dataCounter].posY = receivedMex[3];
  7468  0015FC  5061               	movf	_dataCounter^0,w,c
  7469  0015FE  0D04               	mullw	4
  7470  001600  0EDD               	movlw	low (_dataSequence+2)
  7471  001602  24F3               	addwf	243,w,c
  7472  001604  6ED9               	movwf	fsr2l,c
  7473  001606  0E00               	movlw	high (_dataSequence+2)
  7474  001608  20F4               	addwfc	prodh,w,c
  7475  00160A  6EDA               	movwf	fsr2h,c
  7476  00160C  C048  FFDF         	movff	storeData@receivedMex+3,indf2
  7477                           
  7478                           ;usart.c: 171:                 dataSequence[dataCounter].rotation = receivedMex[4];
  7479  001610  5061               	movf	_dataCounter^0,w,c
  7480  001612  0D04               	mullw	4
  7481  001614  0EDE               	movlw	low (_dataSequence+3)
  7482  001616  24F3               	addwf	243,w,c
  7483  001618  6ED9               	movwf	fsr2l,c
  7484  00161A  0E00               	movlw	high (_dataSequence+3)
  7485  00161C  20F4               	addwfc	prodh,w,c
  7486  00161E  6EDA               	movwf	fsr2h,c
  7487  001620  C049  FFDF         	movff	storeData@receivedMex+4,indf2
  7488  001624                     
  7489                           ;usart.c: 173:                 dataCounter++;
  7490  001624  2A61               	incf	_dataCounter^0,f,c
  7491                           
  7492                           ;usart.c: 174:                 break;
  7493  001626  EF50  F00B         	goto	i2l592
  7494  00162A                     i2l589:
  7495  00162A  FFFF               	dw	65535	; assembler added errata NOP
  7496                           
  7497                           ;usart.c: 177:                 newSequenceData.L = receivedMex[1];
  7498  00162C  C046  F0EF         	movff	storeData@receivedMex+1,_newSequenceData
  7499                           
  7500                           ;usart.c: 178:                 newSequenceData.W = receivedMex[2];
  7501  001630  C047  F0F0         	movff	storeData@receivedMex+2,_newSequenceData+1
  7502                           
  7503                           ;usart.c: 179:                 newSequenceData.init_posX = receivedMex[3];
  7504  001634  C048  F0F1         	movff	storeData@receivedMex+3,_newSequenceData+2
  7505                           
  7506                           ;usart.c: 180:                 newSequenceData.init_posY = receivedMex[4];
  7507  001638  C049  F0F2         	movff	storeData@receivedMex+4,_newSequenceData+3
  7508                           
  7509                           ;usart.c: 181:                 newSequenceData.init_rot = receivedMex[5];
  7510  00163C  C04A  F0F3         	movff	storeData@receivedMex+5,_newSequenceData+4
  7511                           
  7512                           ;usart.c: 182:                 newSequenceData.end_posX = receivedMex[6];
  7513  001640  C04B  F0F4         	movff	storeData@receivedMex+6,_newSequenceData+5
  7514                           
  7515                           ;usart.c: 183:                 newSequenceData.end_posY = receivedMex[7];
  7516  001644  C04C  F0F5         	movff	storeData@receivedMex+7,_newSequenceData+6
  7517                           
  7518                           ;usart.c: 184:                 newSequenceData.end_rot = receivedMex[8];
  7519  001648  C04D  F0F6         	movff	storeData@receivedMex+8,_newSequenceData+7
  7520  00164C                     
  7521                           ;usart.c: 186:                 _newSequence = 1;
  7522  00164C  0E01               	movlw	1
  7523  00164E  6E5F               	movwf	__newSequence^0,c
  7524                           
  7525                           ;usart.c: 187:                 break;
  7526  001650  EF50  F00B         	goto	i2l592
  7527  001654                     i2l3329:
  7528  001654  FFFF               	dw	65535	; assembler added errata NOP
  7529                           
  7530                           ;usart.c: 190:                 _fatalError = 1;
  7531  001656  0E01               	movlw	1
  7532  001658  6E60               	movwf	__fatalError^0,c
  7533                           
  7534                           ;usart.c: 191:                 break;
  7535  00165A  EF50  F00B         	goto	i2l592
  7536  00165E                     i2l3331:
  7537  00165E  FFFF               	dw	65535	; assembler added errata NOP
  7538                           
  7539                           ;usart.c: 194:                 printError(8);
  7540  001660  0E08               	movlw	8
  7541  001662  EC1A  F00D         	call	i2_printError
  7542                           
  7543                           ;usart.c: 195:                 break;
  7544  001666  EF50  F00B         	goto	i2l592
  7545  00166A                     i2l3335:
  7546  00166A  FFFF               	dw	65535	; assembler added errata NOP
  7547  00166C  5045               	movf	storeData@receivedMex^0,w,c
  7548  00166E  6E08               	movwf	??i2_storeData^0,c
  7549  001670  6A09               	clrf	(??i2_storeData+1)^0,c
  7550                           
  7551                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7552                           ; Switch size 1, requested type "simple"
  7553                           ; Number of cases is 1, Range of values is 0 to 0
  7554                           ; switch strategies available:
  7555                           ; Name         Instructions Cycles
  7556                           ; simple_byte            4     3 (average)
  7557                           ;	Chosen strategy is simple_byte
  7558  001672  5009               	movf	(??i2_storeData+1)^0,w,c
  7559  001674  0A00               	xorlw	0	; case 0
  7560  001676  B4D8               	btfsc	status,2,c
  7561  001678  EF40  F00B         	goto	i2l4667
  7562  00167C  EF2F  F00B         	goto	i2l3331
  7563  001680                     i2l4667:
  7564  001680  FFFF               	dw	65535	; assembler added errata NOP
  7565                           
  7566                           ; Switch size 1, requested type "simple"
  7567                           ; Number of cases is 3, Range of values is 0 to 2
  7568                           ; switch strategies available:
  7569                           ; Name         Instructions Cycles
  7570                           ; simple_byte           10     6 (average)
  7571                           ;	Chosen strategy is simple_byte
  7572  001682  5008               	movf	??i2_storeData^0,w,c
  7573  001684  0A00               	xorlw	0	; case 0
  7574  001686  B4D8               	btfsc	status,2,c
  7575  001688  EFE9  F00A         	goto	i2l3323
  7576  00168C  0A01               	xorlw	1	; case 1
  7577  00168E  B4D8               	btfsc	status,2,c
  7578  001690  EF15  F00B         	goto	i2l589
  7579  001694  0A03               	xorlw	3	; case 2
  7580  001696  B4D8               	btfsc	status,2,c
  7581  001698  EF2A  F00B         	goto	i2l3329
  7582  00169C  EF2F  F00B         	goto	i2l3331
  7583  0016A0                     i2l592:
  7584  0016A0  FFFF               	dw	65535	; assembler added errata NOP
  7585  0016A2  0012               	return		;funcret
  7586  0016A4  FFFF               	dw	65535	; errata NOP
  7587  0016A6                     __end_ofi2_storeData:
  7588                           	callstack 0
  7589                           
  7590 ;; *************** function _writeTM0 *****************
  7591 ;; Defined at:
  7592 ;;		line 21 in file "motors.c"
  7593 ;; Parameters:    Size  Location     Type
  7594 ;;		None
  7595 ;; Auto vars:     Size  Location     Type
  7596 ;;		None
  7597 ;; Return value:  Size  Location     Type
  7598 ;;                  1    wreg      void 
  7599 ;; Registers used:
  7600 ;;		wreg, status,2
  7601 ;; Tracked objects:
  7602 ;;		On entry : 0/0
  7603 ;;		On exit  : 0/0
  7604 ;;		Unchanged: 0/0
  7605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7606 ;;      Params:         0       0       0       0       0       0       0
  7607 ;;      Locals:         0       0       0       0       0       0       0
  7608 ;;      Temps:          0       0       0       0       0       0       0
  7609 ;;      Totals:         0       0       0       0       0       0       0
  7610 ;;Total ram usage:        0 bytes
  7611 ;; Hardware stack levels used:    1
  7612 ;; This function calls:
  7613 ;;		Nothing
  7614 ;; This function is called by:
  7615 ;;		_isr
  7616 ;; This function uses a non-reentrant model
  7617 ;;
  7618                           
  7619                           	psect	text46
  7620  0025BE                     __ptext46:
  7621                           	callstack 0
  7622  0025BE                     _writeTM0:
  7623                           	callstack 0
  7624  0025BE  FFFF               	dw	65535	; assembler added errata NOP
  7625  0025C0                     
  7626                           ;motors.c: 22:     tm0Error = 1;
  7627  0025C0  0E00               	movlw	0
  7628  0025C2  6E5C               	movwf	(_tm0Error+1)^0,c
  7629  0025C4  0E01               	movlw	1
  7630  0025C6  6E5B               	movwf	_tm0Error^0,c
  7631  0025C8  0012               	return		;funcret
  7632  0025CA  FFFF               	dw	65535	; errata NOP
  7633  0025CC                     __end_of_writeTM0:
  7634                           	callstack 0
  7635                           
  7636 ;; *************** function _whatsTM0Limit *****************
  7637 ;; Defined at:
  7638 ;;		line 35 in file "motors.c"
  7639 ;; Parameters:    Size  Location     Type
  7640 ;;		None
  7641 ;; Auto vars:     Size  Location     Type
  7642 ;;		None
  7643 ;; Return value:  Size  Location     Type
  7644 ;;                  1    wreg      unsigned char 
  7645 ;; Registers used:
  7646 ;;		wreg, status,2
  7647 ;; Tracked objects:
  7648 ;;		On entry : 0/0
  7649 ;;		On exit  : 0/0
  7650 ;;		Unchanged: 0/0
  7651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7652 ;;      Params:         0       0       0       0       0       0       0
  7653 ;;      Locals:         0       0       0       0       0       0       0
  7654 ;;      Temps:          0       0       0       0       0       0       0
  7655 ;;      Totals:         0       0       0       0       0       0       0
  7656 ;;Total ram usage:        0 bytes
  7657 ;; Hardware stack levels used:    1
  7658 ;; This function calls:
  7659 ;;		Nothing
  7660 ;; This function is called by:
  7661 ;;		_isr
  7662 ;; This function uses a non-reentrant model
  7663 ;;
  7664                           
  7665                           	psect	text47
  7666  00266E                     __ptext47:
  7667                           	callstack 0
  7668  00266E                     _whatsTM0Limit:
  7669                           	callstack 0
  7670  00266E  FFFF               	dw	65535	; assembler added errata NOP
  7671  002670                     
  7672                           ;motors.c: 36:     return(tm0Limit);
  7673  002670  5068               	movf	_tm0Limit^0,w,c
  7674  002672  0012               	return		;funcret
  7675  002674  FFFF               	dw	65535	; errata NOP
  7676  002676                     __end_of_whatsTM0Limit:
  7677                           	callstack 0
  7678                           
  7679 ;; *************** function _toggleStep *****************
  7680 ;; Defined at:
  7681 ;;		line 94 in file "pwm.c"
  7682 ;; Parameters:    Size  Location     Type
  7683 ;;		None
  7684 ;; Auto vars:     Size  Location     Type
  7685 ;;		None
  7686 ;; Return value:  Size  Location     Type
  7687 ;;                  1    wreg      void 
  7688 ;; Registers used:
  7689 ;;		wreg, status,2
  7690 ;; Tracked objects:
  7691 ;;		On entry : 0/0
  7692 ;;		On exit  : 0/0
  7693 ;;		Unchanged: 0/0
  7694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7695 ;;      Params:         0       0       0       0       0       0       0
  7696 ;;      Locals:         0       0       0       0       0       0       0
  7697 ;;      Temps:          0       0       0       0       0       0       0
  7698 ;;      Totals:         0       0       0       0       0       0       0
  7699 ;;Total ram usage:        0 bytes
  7700 ;; Hardware stack levels used:    1
  7701 ;; This function calls:
  7702 ;;		Nothing
  7703 ;; This function is called by:
  7704 ;;		_isr
  7705 ;; This function uses a non-reentrant model
  7706 ;;
  7707                           
  7708                           	psect	text48
  7709  002630                     __ptext48:
  7710                           	callstack 0
  7711  002630                     _toggleStep:
  7712                           	callstack 0
  7713  002630  FFFF               	dw	65535	; assembler added errata NOP
  7714  002632                     
  7715                           ;pwm.c: 95:     stepToggle = 1;
  7716  002632  0E01               	movlw	1
  7717  002634  6E66               	movwf	_stepToggle^0,c	;volatile
  7718  002636  0012               	return		;funcret
  7719  002638  FFFF               	dw	65535	; errata NOP
  7720  00263A                     __end_of_toggleStep:
  7721                           	callstack 0
  7722                           
  7723 ;; *************** function _setTouchRel *****************
  7724 ;; Defined at:
  7725 ;;		line 86 in file "adc.c"
  7726 ;; Parameters:    Size  Location     Type
  7727 ;;		None
  7728 ;; Auto vars:     Size  Location     Type
  7729 ;;		None
  7730 ;; Return value:  Size  Location     Type
  7731 ;;                  1    wreg      void 
  7732 ;; Registers used:
  7733 ;;		wreg, status,2
  7734 ;; Tracked objects:
  7735 ;;		On entry : 0/0
  7736 ;;		On exit  : 0/0
  7737 ;;		Unchanged: 0/0
  7738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7739 ;;      Params:         0       0       0       0       0       0       0
  7740 ;;      Locals:         0       0       0       0       0       0       0
  7741 ;;      Temps:          0       0       0       0       0       0       0
  7742 ;;      Totals:         0       0       0       0       0       0       0
  7743 ;;Total ram usage:        0 bytes
  7744 ;; Hardware stack levels used:    1
  7745 ;; This function calls:
  7746 ;;		Nothing
  7747 ;; This function is called by:
  7748 ;;		_isr
  7749 ;; This function uses a non-reentrant model
  7750 ;;
  7751                           
  7752                           	psect	text49
  7753  00263A                     __ptext49:
  7754                           	callstack 0
  7755  00263A                     _setTouchRel:
  7756                           	callstack 0
  7757  00263A  FFFF               	dw	65535	; assembler added errata NOP
  7758  00263C                     
  7759                           ;adc.c: 87:     touch_rel = 1;
  7760  00263C  0E01               	movlw	1
  7761  00263E  6E65               	movwf	_touch_rel^0,c	;volatile
  7762  002640  0012               	return		;funcret
  7763  002642  FFFF               	dw	65535	; errata NOP
  7764  002644                     __end_of_setTouchRel:
  7765                           	callstack 0
  7766                           
  7767 ;; *************** function _setThermRel *****************
  7768 ;; Defined at:
  7769 ;;		line 79 in file "adc.c"
  7770 ;; Parameters:    Size  Location     Type
  7771 ;;		None
  7772 ;; Auto vars:     Size  Location     Type
  7773 ;;		None
  7774 ;; Return value:  Size  Location     Type
  7775 ;;                  1    wreg      void 
  7776 ;; Registers used:
  7777 ;;		wreg, status,2
  7778 ;; Tracked objects:
  7779 ;;		On entry : 0/0
  7780 ;;		On exit  : 0/0
  7781 ;;		Unchanged: 0/0
  7782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7783 ;;      Params:         0       0       0       0       0       0       0
  7784 ;;      Locals:         0       0       0       0       0       0       0
  7785 ;;      Temps:          0       0       0       0       0       0       0
  7786 ;;      Totals:         0       0       0       0       0       0       0
  7787 ;;Total ram usage:        0 bytes
  7788 ;; Hardware stack levels used:    1
  7789 ;; This function calls:
  7790 ;;		Nothing
  7791 ;; This function is called by:
  7792 ;;		_isr
  7793 ;; This function uses a non-reentrant model
  7794 ;;
  7795                           
  7796                           	psect	text50
  7797  002644                     __ptext50:
  7798                           	callstack 0
  7799  002644                     _setThermRel:
  7800                           	callstack 0
  7801  002644  FFFF               	dw	65535	; assembler added errata NOP
  7802  002646                     
  7803                           ;adc.c: 80:     therm_rel = 1;
  7804  002646  0E01               	movlw	1
  7805  002648  6E64               	movwf	_therm_rel^0,c	;volatile
  7806  00264A  0012               	return		;funcret
  7807  00264C  FFFF               	dw	65535	; errata NOP
  7808  00264E                     __end_of_setThermRel:
  7809                           	callstack 0
  7810                           
  7811 ;; *************** function _retPeriod *****************
  7812 ;; Defined at:
  7813 ;;		line 102 in file "pwm.c"
  7814 ;; Parameters:    Size  Location     Type
  7815 ;;		None
  7816 ;; Auto vars:     Size  Location     Type
  7817 ;;		None
  7818 ;; Return value:  Size  Location     Type
  7819 ;;                  2    0[COMRAM] unsigned int 
  7820 ;; Registers used:
  7821 ;;		None
  7822 ;; Tracked objects:
  7823 ;;		On entry : 0/0
  7824 ;;		On exit  : 0/0
  7825 ;;		Unchanged: 0/0
  7826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7827 ;;      Params:         2       0       0       0       0       0       0
  7828 ;;      Locals:         0       0       0       0       0       0       0
  7829 ;;      Temps:          0       0       0       0       0       0       0
  7830 ;;      Totals:         2       0       0       0       0       0       0
  7831 ;;Total ram usage:        2 bytes
  7832 ;; Hardware stack levels used:    1
  7833 ;; This function calls:
  7834 ;;		Nothing
  7835 ;; This function is called by:
  7836 ;;		_isr
  7837 ;; This function uses a non-reentrant model
  7838 ;;
  7839                           
  7840                           	psect	text51
  7841  0025CC                     __ptext51:
  7842                           	callstack 0
  7843  0025CC                     _retPeriod:
  7844                           	callstack 0
  7845  0025CC  FFFF               	dw	65535	; assembler added errata NOP
  7846  0025CE                     
  7847                           ;pwm.c: 103:     return pwmPeriod;
  7848  0025CE  C055  F001         	movff	_pwmPeriod,?_retPeriod
  7849  0025D2  C056  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  7850  0025D6  0012               	return		;funcret
  7851  0025D8  FFFF               	dw	65535	; errata NOP
  7852  0025DA                     __end_of_retPeriod:
  7853                           	callstack 0
  7854                           
  7855 ;; *************** function _increaseStep *****************
  7856 ;; Defined at:
  7857 ;;		line 86 in file "pwm.c"
  7858 ;; Parameters:    Size  Location     Type
  7859 ;;		None
  7860 ;; Auto vars:     Size  Location     Type
  7861 ;;		None
  7862 ;; Return value:  Size  Location     Type
  7863 ;;                  1    wreg      void 
  7864 ;; Registers used:
  7865 ;;		status,2, status,0
  7866 ;; Tracked objects:
  7867 ;;		On entry : 0/0
  7868 ;;		On exit  : 0/0
  7869 ;;		Unchanged: 0/0
  7870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7871 ;;      Params:         0       0       0       0       0       0       0
  7872 ;;      Locals:         0       0       0       0       0       0       0
  7873 ;;      Temps:          0       0       0       0       0       0       0
  7874 ;;      Totals:         0       0       0       0       0       0       0
  7875 ;;Total ram usage:        0 bytes
  7876 ;; Hardware stack levels used:    1
  7877 ;; This function calls:
  7878 ;;		Nothing
  7879 ;; This function is called by:
  7880 ;;		_isr
  7881 ;; This function uses a non-reentrant model
  7882 ;;
  7883                           
  7884                           	psect	text52
  7885  002676                     __ptext52:
  7886                           	callstack 0
  7887  002676                     _increaseStep:
  7888                           	callstack 0
  7889  002676  FFFF               	dw	65535	; assembler added errata NOP
  7890  002678                     
  7891                           ;pwm.c: 87:     pwmStep++;
  7892  002678  2A67               	incf	_pwmStep^0,f,c	;volatile
  7893  00267A  0012               	return		;funcret
  7894  00267C  FFFF               	dw	65535	; errata NOP
  7895  00267E                     __end_of_increaseStep:
  7896                           	callstack 0
  7897                           
  7898 ;; *************** function _fatalError *****************
  7899 ;; Defined at:
  7900 ;;		line 100 in file "usart.c"
  7901 ;; Parameters:    Size  Location     Type
  7902 ;;		None
  7903 ;; Auto vars:     Size  Location     Type
  7904 ;;		None
  7905 ;; Return value:  Size  Location     Type
  7906 ;;                  1    wreg      unsigned char 
  7907 ;; Registers used:
  7908 ;;		wreg, status,2
  7909 ;; Tracked objects:
  7910 ;;		On entry : 0/0
  7911 ;;		On exit  : 0/0
  7912 ;;		Unchanged: 0/0
  7913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7914 ;;      Params:         0       0       0       0       0       0       0
  7915 ;;      Locals:         0       0       0       0       0       0       0
  7916 ;;      Temps:          0       0       0       0       0       0       0
  7917 ;;      Totals:         0       0       0       0       0       0       0
  7918 ;;Total ram usage:        0 bytes
  7919 ;; Hardware stack levels used:    1
  7920 ;; This function calls:
  7921 ;;		Nothing
  7922 ;; This function is called by:
  7923 ;;		_isr
  7924 ;; This function uses a non-reentrant model
  7925 ;;
  7926                           
  7927                           	psect	text53
  7928  00267E                     __ptext53:
  7929                           	callstack 0
  7930  00267E                     _fatalError:
  7931                           	callstack 0
  7932  00267E  FFFF               	dw	65535	; assembler added errata NOP
  7933  002680                     
  7934                           ;usart.c: 101:     return _fatalError;
  7935  002680  5060               	movf	__fatalError^0,w,c
  7936  002682  0012               	return		;funcret
  7937  002684  FFFF               	dw	65535	; errata NOP
  7938  002686                     __end_of_fatalError:
  7939                           	callstack 0
  7940                           
  7941 ;; *************** function _abortAll *****************
  7942 ;; Defined at:
  7943 ;;		line 629 in file "motors.c"
  7944 ;; Parameters:    Size  Location     Type
  7945 ;;		None
  7946 ;; Auto vars:     Size  Location     Type
  7947 ;;		None
  7948 ;; Return value:  Size  Location     Type
  7949 ;;                  1    wreg      void 
  7950 ;; Registers used:
  7951 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7952 ;; Tracked objects:
  7953 ;;		On entry : 0/0
  7954 ;;		On exit  : 0/0
  7955 ;;		Unchanged: 0/0
  7956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7957 ;;      Params:         0       0       0       0       0       0       0
  7958 ;;      Locals:         0       0       0       0       0       0       0
  7959 ;;      Temps:          0       0       0       0       0       0       0
  7960 ;;      Totals:         0       0       0       0       0       0       0
  7961 ;;Total ram usage:        0 bytes
  7962 ;; Hardware stack levels used:    1
  7963 ;; Hardware stack levels required when called:    2
  7964 ;; This function calls:
  7965 ;;		i2_enableMotor
  7966 ;;		i2_printError
  7967 ;; This function is called by:
  7968 ;;		_isr
  7969 ;; This function uses a non-reentrant model
  7970 ;;
  7971                           
  7972                           	psect	text54
  7973  002454                     __ptext54:
  7974                           	callstack 0
  7975  002454                     _abortAll:
  7976                           	callstack 0
  7977  002454  FFFF               	dw	65535	; assembler added errata NOP
  7978  002456                     
  7979                           ;motors.c: 631:     enableMotor(1, 0);
  7980  002456  0E00               	movlw	0
  7981  002458  6E01               	movwf	i2enableMotor@motor^0,c
  7982  00245A  0E01               	movlw	1
  7983  00245C  EC27  F011         	call	i2_enableMotor
  7984                           
  7985                           ;motors.c: 632:     enableMotor(1, 1);
  7986  002460  0E01               	movlw	1
  7987  002462  6E01               	movwf	i2enableMotor@motor^0,c
  7988  002464  0E01               	movlw	1
  7989  002466  EC27  F011         	call	i2_enableMotor
  7990                           
  7991                           ;motors.c: 633:     enableMotor(1, 2);
  7992  00246A  0E02               	movlw	2
  7993  00246C  6E01               	movwf	i2enableMotor@motor^0,c
  7994  00246E  0E01               	movlw	1
  7995  002470  EC27  F011         	call	i2_enableMotor
  7996  002474                     
  7997                           ;motors.c: 635:     printError(7);
  7998  002474  0E07               	movlw	7
  7999  002476  EC1A  F00D         	call	i2_printError
  8000  00247A                     i2l244:
  8001  00247A  FFFF               	dw	65535	; assembler added errata NOP
  8002  00247C  EF3D  F012         	goto	i2l244
  8003  002480  0012               	return		;funcret
  8004  002482  FFFF               	dw	65535	; errata NOP
  8005  002484                     __end_of_abortAll:
  8006                           	callstack 0
  8007                           
  8008 ;; *************** function i2_printError *****************
  8009 ;; Defined at:
  8010 ;;		line 53 in file "usart.c"
  8011 ;; Parameters:    Size  Location     Type
  8012 ;;  errCode         1    wreg     unsigned char 
  8013 ;; Auto vars:     Size  Location     Type
  8014 ;;  errCode         1    6[COMRAM] unsigned char 
  8015 ;; Return value:  Size  Location     Type
  8016 ;;                  1    wreg      void 
  8017 ;; Registers used:
  8018 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8019 ;; Tracked objects:
  8020 ;;		On entry : 0/0
  8021 ;;		On exit  : 0/0
  8022 ;;		Unchanged: 0/0
  8023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8024 ;;      Params:         0       0       0       0       0       0       0
  8025 ;;      Locals:         1       0       0       0       0       0       0
  8026 ;;      Temps:          2       0       0       0       0       0       0
  8027 ;;      Totals:         3       0       0       0       0       0       0
  8028 ;;Total ram usage:        3 bytes
  8029 ;; Hardware stack levels used:    1
  8030 ;; Hardware stack levels required when called:    1
  8031 ;; This function calls:
  8032 ;;		i2_uartTx
  8033 ;; This function is called by:
  8034 ;;		_abortAll
  8035 ;;		i2_storeData
  8036 ;; This function uses a non-reentrant model
  8037 ;;
  8038                           
  8039                           	psect	text55
  8040  001A34                     __ptext55:
  8041                           	callstack 0
  8042  001A34                     i2_printError:
  8043                           	callstack 0
  8044  001A34  FFFF               	dw	65535	; assembler added errata NOP
  8045                           
  8046                           ;incstack = 0
  8047                           ;i2printError@errCode stored from wreg
  8048  001A36  6E07               	movwf	i2printError@errCode^0,c
  8049  001A38                     
  8050                           ;usart.c: 55:     switch(errCode){
  8051  001A38  EF76  F00D         	goto	i2l3047
  8052  001A3C                     i2l3029:
  8053  001A3C  FFFF               	dw	65535	; assembler added errata NOP
  8054                           
  8055                           ;usart.c: 57:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  8056  001A3E  0EA5               	movlw	low _errString_Feed
  8057  001A40  6E01               	movwf	i2uartTx@ptr^0,c
  8058  001A42  0E00               	movlw	high _errString_Feed
  8059  001A44  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8060  001A46  0E1E               	movlw	30
  8061  001A48  6E03               	movwf	i2uartTx@length^0,c
  8062  001A4A  ECE6  F011         	call	i2_uartTx	;wreg free
  8063                           
  8064                           ;usart.c: 58:             break;
  8065  001A4E  EFA5  F00D         	goto	i2l548
  8066  001A52                     i2l3031:
  8067  001A52  FFFF               	dw	65535	; assembler added errata NOP
  8068                           
  8069                           ;usart.c: 60:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  8070  001A54  0E5E               	movlw	low _errString_ZEND
  8071  001A56  6E01               	movwf	i2uartTx@ptr^0,c
  8072  001A58  0E01               	movlw	high _errString_ZEND
  8073  001A5A  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8074  001A5C  0E29               	movlw	41
  8075  001A5E  6E03               	movwf	i2uartTx@length^0,c
  8076  001A60  ECE6  F011         	call	i2_uartTx	;wreg free
  8077                           
  8078                           ;usart.c: 61:             break;
  8079  001A64  EFA5  F00D         	goto	i2l548
  8080  001A68                     i2l3033:
  8081  001A68  FFFF               	dw	65535	; assembler added errata NOP
  8082                           
  8083                           ;usart.c: 63:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  8084  001A6A  0E87               	movlw	low _errString_Reset
  8085  001A6C  6E01               	movwf	i2uartTx@ptr^0,c
  8086  001A6E  0E01               	movlw	high _errString_Reset
  8087  001A70  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8088  001A72  0E28               	movlw	40
  8089  001A74  6E03               	movwf	i2uartTx@length^0,c
  8090  001A76  ECE6  F011         	call	i2_uartTx	;wreg free
  8091                           
  8092                           ;usart.c: 64:             break;
  8093  001A7A  EFA5  F00D         	goto	i2l548
  8094  001A7E                     i2l3035:
  8095  001A7E  FFFF               	dw	65535	; assembler added errata NOP
  8096                           
  8097                           ;usart.c: 66:             uartTx(&errString_Point[0], sizeof(errString_Point));
  8098  001A80  0E35               	movlw	low _errString_Point
  8099  001A82  6E01               	movwf	i2uartTx@ptr^0,c
  8100  001A84  0E01               	movlw	high _errString_Point
  8101  001A86  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8102  001A88  0E29               	movlw	41
  8103  001A8A  6E03               	movwf	i2uartTx@length^0,c
  8104  001A8C  ECE6  F011         	call	i2_uartTx	;wreg free
  8105                           
  8106                           ;usart.c: 67:             break;
  8107  001A90  EFA5  F00D         	goto	i2l548
  8108  001A94                     i2l3037:
  8109  001A94  FFFF               	dw	65535	; assembler added errata NOP
  8110                           
  8111                           ;usart.c: 69:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  8112  001A96  0E84               	movlw	low _errString_Bound
  8113  001A98  6E01               	movwf	i2uartTx@ptr^0,c
  8114  001A9A  0E00               	movlw	high _errString_Bound
  8115  001A9C  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8116  001A9E  0E21               	movlw	33
  8117  001AA0  6E03               	movwf	i2uartTx@length^0,c
  8118  001AA2  ECE6  F011         	call	i2_uartTx	;wreg free
  8119                           
  8120                           ;usart.c: 70:             break;
  8121  001AA6  EFA5  F00D         	goto	i2l548
  8122  001AAA                     i2l3039:
  8123  001AAA  FFFF               	dw	65535	; assembler added errata NOP
  8124                           
  8125                           ;usart.c: 72:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  8126  001AAC  0E00               	movlw	low _errString_PointZ
  8127  001AAE  6E01               	movwf	i2uartTx@ptr^0,c
  8128  001AB0  0E01               	movlw	high _errString_PointZ
  8129  001AB2  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8130  001AB4  0E35               	movlw	53
  8131  001AB6  6E03               	movwf	i2uartTx@length^0,c
  8132  001AB8  ECE6  F011         	call	i2_uartTx	;wreg free
  8133                           
  8134                           ;usart.c: 73:             break;
  8135  001ABC  EFA5  F00D         	goto	i2l548
  8136  001AC0                     i2l3041:
  8137  001AC0  FFFF               	dw	65535	; assembler added errata NOP
  8138                           
  8139                           ;usart.c: 75:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  8140  001AC2  0EAF               	movlw	low _errString_Fatal
  8141  001AC4  6E01               	movwf	i2uartTx@ptr^0,c
  8142  001AC6  0E01               	movlw	high _errString_Fatal
  8143  001AC8  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8144  001ACA  0E27               	movlw	39
  8145  001ACC  6E03               	movwf	i2uartTx@length^0,c
  8146  001ACE  ECE6  F011         	call	i2_uartTx	;wreg free
  8147                           
  8148                           ;usart.c: 76:             break;
  8149  001AD2  EFA5  F00D         	goto	i2l548
  8150  001AD6                     i2l3043:
  8151  001AD6  FFFF               	dw	65535	; assembler added errata NOP
  8152                           
  8153                           ;usart.c: 78:             uartTx(&errString_Command[0], sizeof(errString_Command));
  8154  001AD8  0EC3               	movlw	low _errString_Command
  8155  001ADA  6E01               	movwf	i2uartTx@ptr^0,c
  8156  001ADC  0E00               	movlw	high _errString_Command
  8157  001ADE  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8158  001AE0  0E18               	movlw	24
  8159  001AE2  6E03               	movwf	i2uartTx@length^0,c
  8160  001AE4  ECE6  F011         	call	i2_uartTx	;wreg free
  8161                           
  8162                           ;usart.c: 79:             break;
  8163  001AE8  EFA5  F00D         	goto	i2l548
  8164  001AEC                     i2l3047:
  8165  001AEC  FFFF               	dw	65535	; assembler added errata NOP
  8166  001AEE  5007               	movf	i2printError@errCode^0,w,c
  8167  001AF0  6E05               	movwf	??i2_printError^0,c
  8168  001AF2  6A06               	clrf	(??i2_printError+1)^0,c
  8169                           
  8170                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8171                           ; Switch size 1, requested type "simple"
  8172                           ; Number of cases is 1, Range of values is 0 to 0
  8173                           ; switch strategies available:
  8174                           ; Name         Instructions Cycles
  8175                           ; simple_byte            4     3 (average)
  8176                           ;	Chosen strategy is simple_byte
  8177  001AF4  5006               	movf	(??i2_printError+1)^0,w,c
  8178  001AF6  0A00               	xorlw	0	; case 0
  8179  001AF8  B4D8               	btfsc	status,2,c
  8180  001AFA  EF81  F00D         	goto	i2l4669
  8181  001AFE  EFA5  F00D         	goto	i2l548
  8182  001B02                     i2l4669:
  8183  001B02  FFFF               	dw	65535	; assembler added errata NOP
  8184                           
  8185                           ; Switch size 1, requested type "simple"
  8186                           ; Number of cases is 8, Range of values is 1 to 8
  8187                           ; switch strategies available:
  8188                           ; Name         Instructions Cycles
  8189                           ; simple_byte           25    13 (average)
  8190                           ;	Chosen strategy is simple_byte
  8191  001B04  5005               	movf	??i2_printError^0,w,c
  8192  001B06  0A01               	xorlw	1	; case 1
  8193  001B08  B4D8               	btfsc	status,2,c
  8194  001B0A  EF1E  F00D         	goto	i2l3029
  8195  001B0E  0A03               	xorlw	3	; case 2
  8196  001B10  B4D8               	btfsc	status,2,c
  8197  001B12  EF29  F00D         	goto	i2l3031
  8198  001B16  0A01               	xorlw	1	; case 3
  8199  001B18  B4D8               	btfsc	status,2,c
  8200  001B1A  EF34  F00D         	goto	i2l3033
  8201  001B1E  0A07               	xorlw	7	; case 4
  8202  001B20  B4D8               	btfsc	status,2,c
  8203  001B22  EF3F  F00D         	goto	i2l3035
  8204  001B26  0A01               	xorlw	1	; case 5
  8205  001B28  B4D8               	btfsc	status,2,c
  8206  001B2A  EF4A  F00D         	goto	i2l3037
  8207  001B2E  0A03               	xorlw	3	; case 6
  8208  001B30  B4D8               	btfsc	status,2,c
  8209  001B32  EF55  F00D         	goto	i2l3039
  8210  001B36  0A01               	xorlw	1	; case 7
  8211  001B38  B4D8               	btfsc	status,2,c
  8212  001B3A  EF60  F00D         	goto	i2l3041
  8213  001B3E  0A0F               	xorlw	15	; case 8
  8214  001B40  B4D8               	btfsc	status,2,c
  8215  001B42  EF6B  F00D         	goto	i2l3043
  8216  001B46  EFA5  F00D         	goto	i2l548
  8217  001B4A                     i2l548:
  8218  001B4A  FFFF               	dw	65535	; assembler added errata NOP
  8219  001B4C  0012               	return		;funcret
  8220  001B4E  FFFF               	dw	65535	; errata NOP
  8221  001B50                     __end_ofi2_printError:
  8222                           	callstack 0
  8223                           
  8224 ;; *************** function i2_uartTx *****************
  8225 ;; Defined at:
  8226 ;;		line 221 in file "usart.c"
  8227 ;; Parameters:    Size  Location     Type
  8228 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  8229 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  8230 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  8231 ;;  length          1    2[COMRAM] unsigned char 
  8232 ;; Auto vars:     Size  Location     Type
  8233 ;;  i               1    3[COMRAM] unsigned char 
  8234 ;; Return value:  Size  Location     Type
  8235 ;;                  1    wreg      void 
  8236 ;; Registers used:
  8237 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8238 ;; Tracked objects:
  8239 ;;		On entry : 0/0
  8240 ;;		On exit  : 0/0
  8241 ;;		Unchanged: 0/0
  8242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8243 ;;      Params:         3       0       0       0       0       0       0
  8244 ;;      Locals:         1       0       0       0       0       0       0
  8245 ;;      Temps:          0       0       0       0       0       0       0
  8246 ;;      Totals:         4       0       0       0       0       0       0
  8247 ;;Total ram usage:        4 bytes
  8248 ;; Hardware stack levels used:    1
  8249 ;; This function calls:
  8250 ;;		Nothing
  8251 ;; This function is called by:
  8252 ;;		i2_printError
  8253 ;; This function uses a non-reentrant model
  8254 ;;
  8255                           
  8256                           	psect	text56
  8257  0023CC                     __ptext56:
  8258                           	callstack 0
  8259  0023CC                     i2_uartTx:
  8260                           	callstack 0
  8261  0023CC  FFFF               	dw	65535	; assembler added errata NOP
  8262  0023CE                     
  8263                           ;usart.c: 221: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 222: {;usa
      +                          rt.c: 224:     for(char i = 1; i < length; i++){
  8264  0023CE  0E01               	movlw	1
  8265  0023D0  6E04               	movwf	i2uartTx@i^0,c
  8266  0023D2  EFFF  F011         	goto	i2l2687
  8267  0023D6                     i2l2683:
  8268  0023D6  FFFF               	dw	65535	; assembler added errata NOP
  8269                           
  8270                           ;usart.c: 226:         TXREG = *ptr;
  8271  0023D8  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  8272  0023DC  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  8273  0023E0  50DF               	movf	indf2,w,c
  8274  0023E2  6EAD               	movwf	173,c	;volatile
  8275  0023E4                     i2l603:
  8276  0023E4  FFFF               	dw	65535	; assembler added errata NOP
  8277  0023E6  A2AC               	btfss	172,1,c	;volatile
  8278  0023E8  EFF8  F011         	goto	i2u177_41
  8279  0023EC  EFFB  F011         	goto	i2u177_40
  8280  0023F0                     i2u177_41:
  8281  0023F0  FFFF               	dw	65535	; assembler added errata NOP
  8282  0023F2  EFF2  F011         	goto	i2l603
  8283  0023F6                     i2u177_40:
  8284  0023F6  FFFF               	dw	65535	; assembler added errata NOP
  8285  0023F8                     
  8286                           ;usart.c: 230:         ptr++;
  8287  0023F8  4A01               	infsnz	i2uartTx@ptr^0,f,c
  8288  0023FA  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  8289                           
  8290                           ;usart.c: 231:     }
  8291  0023FC  2A04               	incf	i2uartTx@i^0,f,c
  8292  0023FE                     i2l2687:
  8293  0023FE  FFFF               	dw	65535	; assembler added errata NOP
  8294  002400  5003               	movf	i2uartTx@length^0,w,c
  8295  002402  5C04               	subwf	i2uartTx@i^0,w,c
  8296  002404  A0D8               	btfss	status,0,c
  8297  002406  EF07  F012         	goto	i2u178_41
  8298  00240A  EF0A  F012         	goto	i2u178_40
  8299  00240E                     i2u178_41:
  8300  00240E  FFFF               	dw	65535	; assembler added errata NOP
  8301  002410  EFEB  F011         	goto	i2l2683
  8302  002414                     i2u178_40:
  8303  002414  FFFF               	dw	65535	; assembler added errata NOP
  8304  002416  0012               	return		;funcret
  8305  002418  FFFF               	dw	65535	; errata NOP
  8306  00241A                     __end_ofi2_uartTx:
  8307                           	callstack 0
  8308                           
  8309 ;; *************** function i2_enableMotor *****************
  8310 ;; Defined at:
  8311 ;;		line 94 in file "motors.c"
  8312 ;; Parameters:    Size  Location     Type
  8313 ;;  enable          1    wreg     unsigned char 
  8314 ;;  motor           1    0[COMRAM] unsigned char 
  8315 ;; Auto vars:     Size  Location     Type
  8316 ;;  enable          1    3[COMRAM] unsigned char 
  8317 ;; Return value:  Size  Location     Type
  8318 ;;                  1    wreg      void 
  8319 ;; Registers used:
  8320 ;;		wreg, status,2, status,0
  8321 ;; Tracked objects:
  8322 ;;		On entry : 0/0
  8323 ;;		On exit  : 0/0
  8324 ;;		Unchanged: 0/0
  8325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8326 ;;      Params:         1       0       0       0       0       0       0
  8327 ;;      Locals:         1       0       0       0       0       0       0
  8328 ;;      Temps:          2       0       0       0       0       0       0
  8329 ;;      Totals:         4       0       0       0       0       0       0
  8330 ;;Total ram usage:        4 bytes
  8331 ;; Hardware stack levels used:    1
  8332 ;; This function calls:
  8333 ;;		Nothing
  8334 ;; This function is called by:
  8335 ;;		_abortAll
  8336 ;; This function uses a non-reentrant model
  8337 ;;
  8338                           
  8339                           	psect	text57
  8340  00224E                     __ptext57:
  8341                           	callstack 0
  8342  00224E                     i2_enableMotor:
  8343                           	callstack 0
  8344  00224E  FFFF               	dw	65535	; assembler added errata NOP
  8345                           
  8346                           ;incstack = 0
  8347                           ;i2enableMotor@enable stored from wreg
  8348  002250  6E04               	movwf	i2enableMotor@enable^0,c
  8349  002252                     
  8350                           ;motors.c: 95:     switch(motor){
  8351  002252  EF43  F011         	goto	i2l3021
  8352  002256                     i2l3013:
  8353  002256  FFFF               	dw	65535	; assembler added errata NOP
  8354                           
  8355                           ;motors.c: 97:             LATAbits.LATA3 = enable;
  8356  002258  B004               	btfsc	i2enableMotor@enable^0,0,c
  8357  00225A  D002               	bra	i2u226_45
  8358  00225C  9689               	bcf	137,3,c	;volatile
  8359  00225E  D001               	bra	i2u226_46
  8360  002260                     i2u226_45:
  8361  002260  8689               	bsf	137,3,c	;volatile
  8362  002262                     i2u226_46:
  8363                           
  8364                           ;motors.c: 98:             break;
  8365  002262  EF5E  F011         	goto	i2l94
  8366  002266                     i2l3015:
  8367  002266  FFFF               	dw	65535	; assembler added errata NOP
  8368                           
  8369                           ;motors.c: 100:             LATBbits.LATB5 = enable;
  8370  002268  B004               	btfsc	i2enableMotor@enable^0,0,c
  8371  00226A  D002               	bra	i2u227_45
  8372  00226C  9A8A               	bcf	138,5,c	;volatile
  8373  00226E  D001               	bra	i2u227_46
  8374  002270                     i2u227_45:
  8375  002270  8A8A               	bsf	138,5,c	;volatile
  8376  002272                     i2u227_46:
  8377                           
  8378                           ;motors.c: 101:             break;
  8379  002272  EF5E  F011         	goto	i2l94
  8380  002276                     i2l3017:
  8381  002276  FFFF               	dw	65535	; assembler added errata NOP
  8382                           
  8383                           ;motors.c: 103:             LATCbits.LATC3 = enable;
  8384  002278  B004               	btfsc	i2enableMotor@enable^0,0,c
  8385  00227A  D002               	bra	i2u228_45
  8386  00227C  968B               	bcf	139,3,c	;volatile
  8387  00227E  D001               	bra	i2u228_46
  8388  002280                     i2u228_45:
  8389  002280  868B               	bsf	139,3,c	;volatile
  8390  002282                     i2u228_46:
  8391                           
  8392                           ;motors.c: 104:             break;
  8393  002282  EF5E  F011         	goto	i2l94
  8394  002286                     i2l3021:
  8395  002286  FFFF               	dw	65535	; assembler added errata NOP
  8396  002288  5001               	movf	i2enableMotor@motor^0,w,c
  8397  00228A  6E02               	movwf	??i2_enableMotor^0,c
  8398  00228C  6A03               	clrf	(??i2_enableMotor+1)^0,c
  8399                           
  8400                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8401                           ; Switch size 1, requested type "simple"
  8402                           ; Number of cases is 1, Range of values is 0 to 0
  8403                           ; switch strategies available:
  8404                           ; Name         Instructions Cycles
  8405                           ; simple_byte            4     3 (average)
  8406                           ;	Chosen strategy is simple_byte
  8407  00228E  5003               	movf	(??i2_enableMotor+1)^0,w,c
  8408  002290  0A00               	xorlw	0	; case 0
  8409  002292  B4D8               	btfsc	status,2,c
  8410  002294  EF4E  F011         	goto	i2l4671
  8411  002298  EF5E  F011         	goto	i2l94
  8412  00229C                     i2l4671:
  8413  00229C  FFFF               	dw	65535	; assembler added errata NOP
  8414                           
  8415                           ; Switch size 1, requested type "simple"
  8416                           ; Number of cases is 3, Range of values is 0 to 2
  8417                           ; switch strategies available:
  8418                           ; Name         Instructions Cycles
  8419                           ; simple_byte           10     6 (average)
  8420                           ;	Chosen strategy is simple_byte
  8421  00229E  5002               	movf	??i2_enableMotor^0,w,c
  8422  0022A0  0A00               	xorlw	0	; case 0
  8423  0022A2  B4D8               	btfsc	status,2,c
  8424  0022A4  EF2B  F011         	goto	i2l3013
  8425  0022A8  0A01               	xorlw	1	; case 1
  8426  0022AA  B4D8               	btfsc	status,2,c
  8427  0022AC  EF33  F011         	goto	i2l3015
  8428  0022B0  0A03               	xorlw	3	; case 2
  8429  0022B2  B4D8               	btfsc	status,2,c
  8430  0022B4  EF3B  F011         	goto	i2l3017
  8431  0022B8  EF5E  F011         	goto	i2l94
  8432  0022BC                     i2l94:
  8433  0022BC  FFFF               	dw	65535	; assembler added errata NOP
  8434  0022BE  0012               	return		;funcret
  8435  0022C0  FFFF               	dw	65535	; errata NOP
  8436  0022C2                     __end_ofi2_enableMotor:
  8437                           	callstack 0
  8438                           
  8439                           	psect	rparam
  8440  0000                     
  8441                           	psect	temp
  8442  00006E                     btemp:
  8443                           	callstack 0
  8444  00006E                     	ds	1
  8445  0000                     int$flags	set	btemp
  8446  0000                     wtemp8	set	btemp+1
  8447  0000                     ttemp5	set	btemp+1
  8448  0000                     ttemp6	set	btemp+4
  8449  0000                     ttemp7	set	btemp+8
  8450                           
  8451                           	psect	idloc
  8452                           
  8453                           ;Config register IDLOC0 @ 0x200000
  8454                           ;	unspecified, using default values
  8455  200000                     	org	2097152
  8456  200000  FF                 	db	255
  8457                           
  8458                           ;Config register IDLOC1 @ 0x200001
  8459                           ;	unspecified, using default values
  8460  200001                     	org	2097153
  8461  200001  FF                 	db	255
  8462                           
  8463                           ;Config register IDLOC2 @ 0x200002
  8464                           ;	unspecified, using default values
  8465  200002                     	org	2097154
  8466  200002  FF                 	db	255
  8467                           
  8468                           ;Config register IDLOC3 @ 0x200003
  8469                           ;	unspecified, using default values
  8470  200003                     	org	2097155
  8471  200003  FF                 	db	255
  8472                           
  8473                           ;Config register IDLOC4 @ 0x200004
  8474                           ;	unspecified, using default values
  8475  200004                     	org	2097156
  8476  200004  FF                 	db	255
  8477                           
  8478                           ;Config register IDLOC5 @ 0x200005
  8479                           ;	unspecified, using default values
  8480  200005                     	org	2097157
  8481  200005  FF                 	db	255
  8482                           
  8483                           ;Config register IDLOC6 @ 0x200006
  8484                           ;	unspecified, using default values
  8485  200006                     	org	2097158
  8486  200006  FF                 	db	255
  8487                           
  8488                           ;Config register IDLOC7 @ 0x200007
  8489                           ;	unspecified, using default values
  8490  200007                     	org	2097159
  8491  200007  FF                 	db	255
  8492                           
  8493                           	psect	config
  8494                           
  8495                           ; Padding undefined space
  8496  300000                     	org	3145728
  8497  300000  FF                 	db	255
  8498                           
  8499                           ;Config register CONFIG1H @ 0x300001
  8500                           ;	Oscillator Selection bits
  8501                           ;	OSC = XT, XT oscillator
  8502                           ;	Oscillator System Clock Switch Enable bit
  8503                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  8504  300001                     	org	3145729
  8505  300001  21                 	db	33
  8506                           
  8507                           ;Config register CONFIG2L @ 0x300002
  8508                           ;	Power-up Timer Enable bit
  8509                           ;	PWRT = OFF, PWRT disabled
  8510                           ;	Brown-out Reset Enable bit
  8511                           ;	BOR = OFF, Brown-out Reset disabled
  8512                           ;	Brown-out Reset Voltage bits
  8513                           ;	BORV = 20, VBOR set to 2.0V
  8514  300002                     	org	3145730
  8515  300002  0D                 	db	13
  8516                           
  8517                           ;Config register CONFIG2H @ 0x300003
  8518                           ;	Watchdog Timer Enable bit
  8519                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8520                           ;	Watchdog Timer Postscale Select bits
  8521                           ;	WDTPS = 128, 1:128
  8522  300003                     	org	3145731
  8523  300003  0E                 	db	14
  8524                           
  8525                           ; Padding undefined space
  8526  300004                     	org	3145732
  8527  300004  FF                 	db	255
  8528                           
  8529                           ;Config register CONFIG3H @ 0x300005
  8530                           ;	CCP2 Mux bit
  8531                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  8532  300005                     	org	3145733
  8533  300005  00                 	db	0
  8534                           
  8535                           ;Config register CONFIG4L @ 0x300006
  8536                           ;	Stack Full/Underflow Reset Enable bit
  8537                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  8538                           ;	Low Voltage ICSP Enable bit
  8539                           ;	LVP = OFF, Low Voltage ICSP disabled
  8540                           ;	Background Debugger Enable bit
  8541                           ;	DEBUG = 0x1, unprogrammed default
  8542  300006                     	org	3145734
  8543  300006  80                 	db	128
  8544                           
  8545                           ; Padding undefined space
  8546  300007                     	org	3145735
  8547  300007  FF                 	db	255
  8548                           
  8549                           ;Config register CONFIG5L @ 0x300008
  8550                           ;	Code Protection bit
  8551                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  8552                           ;	Code Protection bit
  8553                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  8554                           ;	Code Protection bit
  8555                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  8556                           ;	Code Protection bit
  8557                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  8558  300008                     	org	3145736
  8559  300008  0F                 	db	15
  8560                           
  8561                           ;Config register CONFIG5H @ 0x300009
  8562                           ;	Boot Block Code Protection bit
  8563                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  8564                           ;	Data EEPROM Code Protection bit
  8565                           ;	CPD = OFF, Data EEPROM not code protected
  8566  300009                     	org	3145737
  8567  300009  C0                 	db	192
  8568                           
  8569                           ;Config register CONFIG6L @ 0x30000A
  8570                           ;	Write Protection bit
  8571                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  8572                           ;	Write Protection bit
  8573                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  8574                           ;	Write Protection bit
  8575                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  8576                           ;	Write Protection bit
  8577                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  8578  30000A                     	org	3145738
  8579  30000A  0F                 	db	15
  8580                           
  8581                           ;Config register CONFIG6H @ 0x30000B
  8582                           ;	Configuration Register Write Protection bit
  8583                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  8584                           ;	Boot Block Write Protection bit
  8585                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  8586                           ;	Data EEPROM Write Protection bit
  8587                           ;	WRTD = OFF, Data EEPROM not write protected
  8588  30000B                     	org	3145739
  8589  30000B  E0                 	db	224
  8590                           
  8591                           ;Config register CONFIG7L @ 0x30000C
  8592                           ;	Table Read Protection bit
  8593                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  8594                           ;	Table Read Protection bit
  8595                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  8596                           ;	Table Read Protection bit
  8597                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  8598                           ;	Table Read Protection bit
  8599                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  8600  30000C                     	org	3145740
  8601  30000C  0F                 	db	15
  8602                           
  8603                           ;Config register CONFIG7H @ 0x30000D
  8604                           ;	Boot Block Table Read Protection bit
  8605                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  8606  30000D                     	org	3145741
  8607  30000D  40                 	db	64
  8608                           tosu	equ	0xFFF
  8609                           tosh	equ	0xFFE
  8610                           tosl	equ	0xFFD
  8611                           stkptr	equ	0xFFC
  8612                           pclatu	equ	0xFFB
  8613                           pclath	equ	0xFFA
  8614                           pcl	equ	0xFF9
  8615                           tblptru	equ	0xFF8
  8616                           tblptrh	equ	0xFF7
  8617                           tblptrl	equ	0xFF6
  8618                           tablat	equ	0xFF5
  8619                           prodh	equ	0xFF4
  8620                           prodl	equ	0xFF3
  8621                           indf0	equ	0xFEF
  8622                           postinc0	equ	0xFEE
  8623                           postdec0	equ	0xFED
  8624                           preinc0	equ	0xFEC
  8625                           plusw0	equ	0xFEB
  8626                           fsr0h	equ	0xFEA
  8627                           fsr0l	equ	0xFE9
  8628                           wreg	equ	0xFE8
  8629                           indf1	equ	0xFE7
  8630                           postinc1	equ	0xFE6
  8631                           postdec1	equ	0xFE5
  8632                           preinc1	equ	0xFE4
  8633                           plusw1	equ	0xFE3
  8634                           fsr1h	equ	0xFE2
  8635                           fsr1l	equ	0xFE1
  8636                           bsr	equ	0xFE0
  8637                           indf2	equ	0xFDF
  8638                           postinc2	equ	0xFDE
  8639                           postdec2	equ	0xFDD
  8640                           preinc2	equ	0xFDC
  8641                           plusw2	equ	0xFDB
  8642                           fsr2h	equ	0xFDA
  8643                           fsr2l	equ	0xFD9
  8644                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    14
    Data        310
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     68     109
    BANK0           128      8     127
    BANK1           256      8     222
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 53
		 -> errString_Command(BANK0[24]), errString_Fatal(BANK1[39]), errString_PointZ(BANK1[53]), errString_Bound(BANK0[33]), 
		 -> errString_Point(BANK1[41]), errString_Reset(BANK1[40]), errString_ZEND(BANK1[41]), errString_Feed(BANK0[30]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 


Critical Paths under _main in COMRAM

    _main->_executeData
    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_enableMotor
    _resetPosition->_setDecay
    _resetPosition->_setDirection
    _resetPosition->_setStep
    _touchTherm->_setDirection
    _touchObject->_setDirection
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _releaseObj->_stepMade
    _pickObject->_stepMade
    _moveToPoint->_setDirection
    _liftArm->_setDirection

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    _abortAll->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _executeData->_rotateObj

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_executeData

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   16742
                                              3 BANK1      5     5      0
                           _clearTM0
                        _executeData
                     _getNewSequence
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                   _resetNewSequence
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim1Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim1Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    1604
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0    2702
                                             21 COMRAM     3     3      0
                        _enableMotor
                          _resetStep
                           _setDecay
                       _setDirection
                            _setStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _setStep                                              4     3      1     487
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _setDecay                                             4     3      1     394
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _enableMotor                                          4     3      1     559
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _resetNewSequence                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0   10321
                                             66 COMRAM     2     2      0
                                              0 BANK1      3     3      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0    1058
                          _resetStep
                         _resetTherm
                        _returnTherm
                       _setDirection
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0    1058
                          _resetStep
                         _resetTouch
                        _returnTouch
                       _setDirection
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            8     8      0    3163
                                              0 BANK0      8     8      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         14     6      8    3632
                                             21 COMRAM    14     6      8
                          _resetStep
                       _setDirection
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0    1058
                          _resetStep
                       _setDirection
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _setDirection                                         4     3      1    1024
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0    1225
                                             10 COMRAM     7     7      0
                           _abortAll
                         _fatalError
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _abortAll                                             0     0      0     673
                      i2_enableMotor
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (6) i2_enableMotor                                        4     3      1     166
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _executeData
     _getData
     _liftArm
       _resetStep
       _setDirection
       _stepMade
     _moveToPoint
       _resetStep
       _setDirection
       _stepCounter
       _stepMade
     _pickObject
       _stepMade
     _releaseObj
       _stepMade
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _stepMade
     _touchObject
       _resetStep
       _resetTouch
       _returnTouch
       _setDirection
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTherm
       _returnTherm
       _setDirection
       _startADC
       _stepMade
       _stopADC
   _getNewSequence
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetNewSequence
   _resetPosition
     _enableMotor
     _resetStep
     _setDecay
     _setDirection
     _setStep
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim1Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _abortAll
     i2_enableMotor
     i2_printError
       i2_uartTx
   _fatalError
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      8      DE       7       86.7%
BITBANK0            80      0       0       4        0.0%
BANK0               80      8      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     44      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1CA      15        0.0%
DATA                 0      0     1CA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Mon Mar 29 11:06:52 2021

                                        ___fldiv@aexp 0038  
                                        ___fldiv@bexp 0037  
                               __end_of_interruptInit 2454  
                                        ___fldiv@sign 0030  
                                                  l70 25BA  
                                                  l76 24FE  
                                                  l85 1FB6  
                                                  l94 21D4  
                                                 l103 2248  
                                                 l112 2160  
                                                 l202 1C3A  
                                                 l122 12E6  
                                                 l203 1C3E  
                                                 l123 1316  
                                                 l212 2022  
                                                 l133 136A  
                                                 l117 12B2  
                                                 l206 203E  
                                                 l126 131A  
                                                 l118 13C6  
                                                 l151 0D4A  
                                                 l143 0D62  
                                                 l127 134A  
                                                 l119 12E2  
                                                 l216 2068  
                                                 l208 2002  
                                                 l240 24A6  
                                                 l209 2050  
                                                 l241 24AC  
                                                 l137 13DE  
                                                 l234 24D2  
                                                 l235 24D8  
                                                 l227 1DE4  
                                                 l411 2618  
                                                 l172 0D04  
                                                 l180 1C8C  
                                                 l420 25E2  
                                                 l340 2450  
                                                 l165 0CE8  
                                                 l229 1E0C  
                                                 l414 266A  
                                                 l326 16F4  
                                                 l423 2622  
                                                 l327 16EE  
                                                 l184 1CAC  
                                                 l352 0FF2  
                                                 l408 2524  
                                                 l328 16F0  
                                                 l417 25EE  
                                                 l426 260E  
                                                 l194 1B9A  
                                                 l338 2430  
                                                 l339 2446  
                                                 l603 2396  
                                                 l188 1D2C  
                                                 l372 2590  
                                                 l381 25FA  
                                                 l189 1D30  
                                                 l198 1BBA  
                                                 l534 2542  
                                                 l551 2652  
                                                 l607 23C8  
                                                 l375 255A  
                                                 l384 262C  
                                                 l560 2662  
                                                 l369 2580  
                                                 l378 256E  
                                                 l554 265A  
                                                 l563 2604  
                                                 l548 1A2E  
                                                 l568 231E  
                                                 l592 153E  
                                                 l595 25AC  
                                                 l907 1912  
                                                 l589 14C8  
                                                 l598 259E  
                                                 _isr 0008  
                                         _touchObject 1C42  
                                                 prod 000FF3  
                                                 wreg 000FE8  
                                        ___fltol@exp1 0042  
                                         main@errCode 01DB  
                                                l1203 08AA  
                                                l1205 093A  
                                                l1206 0922  
                                                l1192 0A3C  
                                                l1272 1102  
                                                l1265 1056  
                                                l4001 1BF2  
                                                l1194 0854  
                                                l4011 1C1C  
                                                l4003 1C02  
                                                l1268 11E8  
                                                l4021 1FC8  
                                                l1197 080E  
                                                l4013 1C20  
                                                l4005 1C08  
                                                l4103 25A4  
                                                l4031 1FF4  
                                                l4023 1FCA  
                                                l1279 116E  
                                                l4015 1C32  
                                                l4007 1C0C  
                                                l4111 24E6  
                                                l4041 2062  
                                                l4033 1FF6  
                                                l4025 1FD2  
                                                l4009 1C0E  
                                                l4121 24F8  
                                                l4113 24EA  
                                                l4201 253E  
                                                l4107 25B2  
                                                l4043 2066  
                                                l4035 2006  
                                                l4027 1FD6  
                                                l4019 1FBE  
                                                l4051 1D9A  
                                                l4123 24FA  
                                                l4115 24EE  
                                                l4131 126C  
                                                l4203 2574  
                                                l4211 258C  
                                                l4037 2024  
                                                l4029 1FDC  
                                                l4061 1DEA  
                                                l4053 1DA0  
                                                l4301 0EBA  
                                                l4125 24FC  
                                                l4117 24F2  
                                                l4109 24DE  
                                                l4221 2660  
                                                l4141 1282  
                                                l4133 1270  
                                                l4205 257C  
                                                l4213 258E  
                                                l3511 21E2  
                                                l4039 2056  
                                                l4071 2486  
                                                l4055 1DC6  
                                                l4063 1DF0  
                                                l4047 1D3A  
                                                l4311 0F2A  
                                                l4303 0EC2  
                                                l4119 24F6  
                                                l4151 12D8  
                                                l4143 1288  
                                                l4135 1274  
                                                l4127 11F0  
                                                l4231 13F6  
                                                l4207 2586  
                                                l4215 2548  
                                                l3513 21F2  
                                                l4065 24B2  
                                                l4073 248A  
                                                l3601 0738  
                                                l4057 1DC8  
                                                l4049 1D8C  
                                                l4321 0FCE  
                                                l4313 0F3E  
                                                l4225 2596  
                                                l4161 134E  
                                                l4153 12FA  
                                                l4145 12A0  
                                                l4137 1276  
                                                l4129 1268  
                                                l4081 1936  
                                                l4233 13FC  
                                                l4241 141A  
                                                l4209 258A  
                                                l4217 254A  
                                                l4401 17C8  
                                                l3515 2202  
                                                l4067 24B6  
                                                l4075 24A8  
                                                l3611 0768  
                                                l3603 073E  
                                                l4059 1DE6  
                                                l4323 0FD6  
                                                l4315 0F7A  
                                                l4331 0FEE  
                                                l4307 0ECE  
                                                l4171 13CC  
                                                l4163 1370  
                                                l4155 130C  
                                                l4147 12A6  
                                                l4139 127E  
                                                l4091 19A4  
                                                l4083 194C  
                                                l4251 14EA  
                                                l4235 1406  
                                                l4243 1450  
                                                l4219 2552  
                                                l4403 17CE  
                                                l3533 2628  
                                                l3509 21DE  
                                                l3525 2560  
                                                l4069 24D4  
                                                l3621 07B8  
                                                l3701 1814  
                                                l3541 2668  
                                                l4325 0FDE  
                                                l4317 0F8C  
                                                l4309 0F14  
                                                l4181 242E  
                                                l4173 13D8  
                                                l4157 132E  
                                                l4149 12C6  
                                                l4165 138A  
                                                l4341 22C4  
                                                l4093 19BA  
                                                l4085 1962  
                                                l4077 191C  
                                                l4253 14F2  
                                                l4245 1468  
                                                l4237 1410  
                                                l4229 13E6  
                                                l4405 17D2  
                                                l3519 2212  
                                                l3527 2564  
                                                l3535 25F4  
                                                l3631 080C  
                                                l3623 07C8  
                                                l3615 077C  
                                                l3607 0752  
                                                l3711 186C  
                                                l3703 1844  
                                                l3543 261E  
                                                l4327 0FE2  
                                                l4319 0F9C  
                                                l4191 2514  
                                                l4183 2444  
                                                l4271 2658  
                                                l4175 13DC  
                                                l4167 13A0  
                                                l4159 1340  
                                                l4351 230A  
                                                l3551 2388  
                                                l4087 1978  
                                                l4079 1920  
                                                l4255 14FC  
                                                l4247 1470  
                                                l4407 17D6  
                                                l3529 2568  
                                                l3641 086A  
                                                l3633 081A  
                                                l3625 07D0  
                                                l3617 0798  
                                                l3609 0768  
                                                l3561 0630  
                                                l3721 189E  
                                                l3705 1846  
                                                l3537 2614  
                                                l3545 25DC  
                                                l4329 0FE6  
                                                l4281 0DB4  
                                                l4193 2516  
                                                l4185 2504  
                                                l3801 216A  
                                                l4169 13B4  
                                                l3553 23AA  
                                                l4089 198E  
                                                l4097 19D0  
                                                l4249 14C2  
                                                l4361 16B4  
                                                l4353 16A6  
                                                l3643 0884  
                                                l3651 08BC  
                                                l3635 083E  
                                                l3627 07E6  
                                                l3619 07A8  
                                                l3571 0670  
                                                l3563 0632  
                                                l3731 18DA  
                                                l3707 1856  
                                                l3539 25E8  
                                                l3547 260A  
                                                l4291 0E36  
                                                l4283 0DC4  
                                                l4275 0D6A  
                                                l4195 2520  
                                                l4187 250C  
                                                l4179 241C  
                                                l4339 2650  
                                                l3803 216E  
                                                l3811 219E  
                                                l4347 22C8  
                                                l3555 23B0  
                                                l4259 1508  
                                                l4371 16E8  
                                                l4363 16B8  
                                                l4355 16A6  
                                                l3901 0C38  
                                                l3653 08D0  
                                                l3645 088A  
                                                l3637 0840  
                                                l3629 07FA  
                                                l3581 06AA  
                                                l3565 0648  
                                                l3573 0678  
                                                l3557 0612  
                                                l3733 18F0  
                                                l3717 1888  
                                                l3709 185A  
                                                l3741 100E  
                                                l4293 0E70  
                                                l4285 0DD8  
                                                l4277 0D76  
                                                l4197 2522  
                                                l4189 2512  
                                                l4269 2600  
                                                l3805 217E  
                                                l3821 210A  
                                                l4349 2308  
                                                l3549 2380  
                                                l4381 1740  
                                                l4373 16F8  
                                                l4365 16BC  
                                                l4357 16AC  
                                                l3911 0C9A  
                                                l3903 0C5E  
                                                l3663 0950  
                                                l3671 099C  
                                                l3655 08D4  
                                                l3647 0896  
                                                l3639 0850  
                                                l3591 06EA  
                                                l3583 06AC  
                                                l3575 068A  
                                                l3567 065C  
                                                l3559 061E  
                                                l3735 1900  
                                                l3727 18B8  
                                                l3719 1894  
                                                l3751 1098  
                                                l3743 1020  
                                                l4295 0E80  
                                                l4287 0E12  
                                                l4279 0D7A  
                                                l3807 218E  
                                                l3823 211A  
                                                l4199 252A  
                                                l4391 1776  
                                                l4383 1742  
                                                l4375 1712  
                                                l4367 16C0  
                                                l4359 16B0  
                                                l3921 0D08  
                                                l3905 0C68  
                                                l3841 0A7E  
                                                l3833 0A44  
                                                l3681 0A14  
                                                l3673 09BC  
                                                l3665 095C  
                                                l3657 08E6  
                                                l3649 08A8  
                                                l3585 06C2  
                                                l3593 06F2  
                                                l3577 0692  
                                                l3569 066C  
                                                l3729 18C6  
                                                l3761 10F8  
                                                l3753 10A2  
                                                l3745 1068  
                                                l4297 0E94  
                                                l4289 0E22  
                                                l3817 20F6  
                                                l4393 17A0  
                                                l4385 1748  
                                                l4377 171E  
                                                l4369 16D4  
                                                l3931 0D60  
                                                l3915 0CCC  
                                                l3907 0C7E  
                                                l3923 0D22  
                                                l3851 0ACC  
                                                l3843 0AAA  
                                                l3835 0A5E  
                                                l3683 0A26  
                                                l3675 09D2  
                                                l3667 096E  
                                                l3659 0918  
                                                l3595 0704  
                                                l3587 06D6  
                                                l3579 0698  
                                                l3771 1184  
                                                l3763 113A  
                                                l3755 10B0  
                                                l3747 1084  
                                                l3739 0FFA  
                                                l4299 0EB6  
                                                l3819 20FA  
                                                l3827 212A  
                                                l4651 151E  
                                                l4395 17A2  
                                                l4387 174E  
                                                l4379 1730  
                                                l3925 0D38  
                                                l3917 0CE2  
                                                l3909 0C84  
                                                l3861 0B1A  
                                                l3853 0AF8  
                                                l3845 0AB4  
                                                l3837 0A76  
                                                l3685 0A2C  
                                                l3677 09F2  
                                                l3669 0998  
                                                l3597 0720  
                                                l3589 06E6  
                                                l3781 11D6  
                                                l3773 118A  
                                                l3765 1148  
                                                l3757 10E8  
                                                l3941 1C58  
                                                l4661 0EEC  
                                                l4653 19E6  
                                                l4389 1762  
                                                l4397 17A6  
                                                l4663 2228  
                                                l3927 0D50  
                                                l3919 0CE8  
                                                l3871 0B32  
                                                l3863 0B20  
                                                l3855 0B02  
                                                l3847 0ABC  
                                                l3687 0A30  
                                                l3679 0A0E  
                                                l3599 0730  
                                                l3695 17E4  
                                                l3775 11AE  
                                                l3767 115C  
                                                l3759 10EC  
                                                l3951 1C80  
                                                l3943 1C5C  
                                                l3935 1C44  
                                                l4655 1F96  
                                                l3791 1F50  
                                                l4399 17C0  
                                                l3929 0D5C  
                                                l3881 0B76  
                                                l3873 0B38  
                                                l3865 0B24  
                                                l3857 0B0A  
                                                l3849 0AC8  
                                                l3697 17FE  
                                                l3777 11C2  
                                                l3769 1182  
                                                l3953 1C90  
                                                l3961 1CF4  
                                                l3945 1C5E  
                                                l3937 1C4E  
                                                l4657 2140  
                                                l3785 1EEA  
                                                l4649 1430  
                                                l3891 0BD8  
                                                l3883 0B9C  
                                                l3875 0B50  
                                                l3867 0B26  
                                                l3859 0B16  
                                                l3779 11D4  
                                                l3971 1D12  
                                                l3963 1CFA  
                                                l3955 1CAE  
                                                l3947 1C66  
                                                l3939 1C50  
                                                l4659 21B4  
                                                l3787 1EEE  
                                                l3795 1F80  
                                                l3885 0BA6  
                                                l3877 0B54  
                                                l3869 0B2E  
                                                l3973 1D24  
                                                l3965 1CFE  
                                                l3949 1C7E  
                                                l3957 1CC8  
                                                l3981 1B5E  
                                                l3789 1F1C  
                                                l3895 0C0A  
                                                l3887 0BBC  
                                                l3879 0B60  
                                                l3967 1D00  
                                                l3959 1CE4  
                                                l3991 1B8C  
                                                l3983 1B66  
                                                l3897 0C20  
                                                l3889 0BC2  
                                                l3969 1D0E  
                                                l3993 1B8E  
                                                l3985 1B6A  
                                                l3977 1B52  
                                                l3899 0C22  
                                                l3995 1B9E  
                                                l3987 1B6C  
                                                l3979 1B5C  
                                                ?_isr 0001  
                                                l3997 1BBC  
                                                l3989 1B74  
                                                l3999 1BD6  
                                                u3000 1082  
                                                u3001 107C  
                                                u3010 10E2  
                                                u3011 10DC  
                                                u3020 1134  
                                                u3021 112E  
                                                u3030 115A  
                                                u3031 1154  
                                                u3200 0B9A  
                                                u3040 116E  
                                                _LATD 000F8C  
                                                u3201 0B94  
                                                u3041 1168  
                                                u3105 2198  
                                                u3210 0BBA  
                                                u3050 1180  
                                                u3106 219A  
                                                u3211 0BB4  
                                                u3051 117A  
                                                u3115 2104  
                                                u3300 0CE0  
                                                u3220 0BD6  
                                                u3140 0A5C  
                                                u3060 11C0  
                                                u3116 2106  
                                                u3301 0CDA  
                                                u3221 0BD0  
                                                u3141 0A56  
                                                u3061 11BA  
                                                u3125 2114  
                                                u3310 0D02  
                                                u3230 0C04  
                                                u3150 0A76  
                                                u3070 11D2  
                                                u3126 2116  
                                                u3311 0CFC  
                                                u3231 0BFE  
                                                u3151 0A70  
                                                u3071 11CC  
                                                u3135 2124  
                                                u3320 0D22  
                                                u3240 0C1E  
                                                u3160 0AA8  
                                                u3400 1D22  
                                                u3136 2126  
                                                u3321 0D1C  
                                                u3241 0C18  
                                                u3161 0AA2  
                                                u3401 1D1C  
                                                u3330 0D36  
                                                u3250 0C36  
                                                u3170 0AF6  
                                                u3410 1B8A  
                                                u3331 0D30  
                                                u3251 0C30  
                                                u3171 0AF0  
                                                u3411 1B84  
                                                u3500 2050  
                                                u3340 0D4A  
                                                u3260 0C5C  
                                                u3180 0B4E  
                                                u2700 065A  
                                                u3420 1BB8  
                                                u3501 204A  
                                                u3341 0D44  
                                                u3261 0C56  
                                                u3181 0B48  
                                                u2701 0654  
                                                u3421 1BB2  
                                                u3085 2178  
                                                u3270 0C7C  
                                                u3190 0B74  
                                                u2710 06A8  
                                                u3510 1DE2  
                                                u3350 1C7C  
                                                u3430 1BD6  
                                                u3086 217A  
                                                u3271 0C76  
                                                u3191 0B6E  
                                                u2711 06A2  
                                                u3511 1DDC  
                                                u3351 1C76  
                                                u3431 1BD0  
                                                u3095 2188  
                                                u3280 0C98  
                                                u2800 0882  
                                                u2720 06C0  
                                                u3520 1E0A  
                                                u3360 1CAA  
                                                u3440 1BF0  
                                                u3096 218A  
                                                u3600 132C  
                                                u3281 0C92  
                                                u2801 087C  
                                                u2721 06BA  
                                                u3521 1E04  
                                                u3361 1CA4  
                                                u3441 1BEA  
                                                u3601 1326  
                                                u3290 0CC6  
                                                u3530 24D0  
                                                u2810 08A6  
                                                u2730 06D4  
                                                u3370 1CC8  
                                                u3450 1C02  
                                                u3610 1340  
                                                u2635 21EC  
                                                u3291 0CC0  
                                                u3531 24CA  
                                                u2811 08A0  
                                                u2731 06CE  
                                                u3371 1CC2  
                                                u3451 1BFC  
                                                u3611 133A  
                                                u2636 21EE  
                                                u3540 24A4  
                                                u2900 0A24  
                                                u2820 08CE  
                                                u2740 071E  
                                                u3380 1CE2  
                                                u3460 1C30  
                                                u3700 0F28  
                                                u3620 1368  
                                                u2660 23A8  
                                                u2645 21FC  
                                                u3541 249E  
                                                u2901 0A1E  
                                                u2821 08C8  
                                                u2741 0718  
                                                u3381 1CDC  
                                                u3461 1C2A  
                                                u3701 0F22  
                                                u3621 1362  
                                                u2661 23A2  
                                                u2646 21FE  
                                                u3470 1FF2  
                                                u2830 08E4  
                                                u2750 0766  
                                                u2910 17FC  
                                                u3390 1CF4  
                                                u3710 0FCC  
                                                u3630 138A  
                                                u3550 129E  
                                                u2670 23C6  
                                                u2655 220C  
                                                u3471 1FEC  
                                                u2831 08DE  
                                                u2751 0760  
                                                u2911 17F6  
                                                u3391 1CEE  
                                                u3711 0FC6  
                                                u3631 1384  
                                                u3551 1298  
                                                u2671 23C0  
                                                u2656 220E  
                                                u3480 2020  
                                                u2840 0916  
                                                u2760 07E4  
                                                u2680 062E  
                                                u2920 1838  
                                                u3640 139E  
                                                u3560 12C4  
                                                u3720 231C  
                                                u3481 201A  
                                                u2841 0910  
                                                u2761 07DE  
                                                u2681 0628  
                                                u3641 1398  
                                                u3561 12BE  
                                                u3721 2316  
                                                u3490 203E  
                                                u2850 0934  
                                                u2770 080A  
                                                u2690 0646  
                                                u2930 186A  
                                                u3650 13B2  
                                                u3570 12D8  
                                                u3730 16E6  
                                                u3491 2038  
                                                u2851 092E  
                                                u2771 0804  
                                                u2691 0640  
                                                u2931 1864  
                                                u3651 13AC  
                                                u3571 12D2  
                                                u3731 16E0  
                                                u2860 094E  
                                                u2780 083C  
                                                u2940 1882  
                                                u3660 13C6  
                                                u3580 12F8  
                                                u3740 1710  
                                                u2861 0948  
                                                u2781 0836  
                                                u2941 187C  
                                                u2925 182C  
                                                u3661 13C0  
                                                u3581 12F2  
                                                u3741 170A  
                                                u2870 096C  
                                                u2790 0868  
                                                u2950 18B2  
                                                u3670 242C  
                                                u3590 130C  
                                                u3750 17BE  
                                                u2871 0966  
                                                u2791 0862  
                                                u2951 18AC  
                                                u3671 2426  
                                                u3591 1306  
                                                u3751 17B8  
                                                u2880 09BA  
                                                u2960 18DA  
                                                u3680 2442  
                                                u2881 09B4  
                                                u2961 18D4  
                                                u3681 243C  
                                                u2890 09F0  
                                                u2970 18EE  
                                                u3690 1466  
                                         main@newData 01DC  
                                                u2891 09EA  
                                                u2971 18E8  
                                                u3691 1460  
                                                u2980 100C  
                                                u2981 1006  
                                                u2990 101E  
                                                u2991 1018  
                                                i2l73 2672  
                                                i2l67 25C8  
                                                i2l94 22BC  
                                                _TMR0 000FD6  
                                                _TMR2 000FCC  
                                 __end_ofi2_storeData 16A6  
                                                _main 16A6  
                                                _maxX 006B  
                                                _maxY 0069  
                                __end_ofi2_printError 1B50  
                                                fsr2h 000FDA  
                                                indf2 000FDF  
                                                fsr1l 000FE1  
                                                fsr2l 000FD9  
                                                btemp 006E  
                                                prodh 000FF4  
                                                prodl 000FF3  
                                                start 019C  
                                     ___fldiv@new_exp 0031  
                                        ___param_bank 000000  
                                     ??_whatsTM0Limit 0001  
                                               ??_isr 000B  
                                        ?_executeData 0001  
                                     executeData@data 01D7  
                                       ___fltol@sign1 0041  
                                               ?_main 0001  
                                     __end_of___fldiv 0A42  
                                     __end_of___fltol 1918  
                                               i2l244 247A  
                                               i2l245 247C  
                                               i2l432 2640  
                                               i2l603 23E4  
                                               i2l429 264A  
                                               i2l390 2636  
                                               i2l607 2416  
                                               i2l393 25D6  
                                               i2l387 267A  
                                               i2l548 1B4A  
                                               i2l557 2682  
                                               i2l493 0184  
                                               i2l592 16A0  
                                               i2l589 162A  
                                rotateObj@rotSequence 0080  
                                               _SPBRG 000FAF  
                                               _TRISA 000F92  
                                               _TRISB 000F93  
                                               _TRISC 000F94  
                                               _TRISD 000F95  
                                               _TXREG 000FAD  
                                     __end_of_getData 25B0  
                                     i2storeData@data 000A  
                                     __end_of_initADC 2528  
                                        ?_newSequence 0001  
                                     __end_of_liftArm 206C  
                                     __end_of_readSeq 265E  
                                        stepMade@temp 0014  
                                     __end_of_setStep 1FBC  
                                               tablat 000FF5  
                                      i2uartTx@length 0003  
                                     __end_of_stopADC 266E  
                                               ttemp5 006F  
                                               ttemp6 0072  
                                               ttemp7 0076  
                                               status 000FD8  
                                               wtemp8 006F  
                                    __end_ofi2_uartTx 241A  
                                       ?_increaseStep 0001  
                                     __initialization 206C  
                              __size_of_initPinMotors 0026  
                                        __end_of_main 17E2  
                            resetPosition@keepMovingX 0016  
                            resetPosition@keepMovingY 0017  
                            resetPosition@keepMovingZ 0018  
                                              ??_main 01D9  
                                       __activetblptr 000002  
                                         i2_storeData 1544  
                                __size_of_enableMotor 0074  
                                         isr@tm0Count 0063  
                                        ?_setThermRel 0001  
                                              _ADRESH 000FC4  
                                              _ADRESL 000FC3  
                                        ?_moveToPoint 0016  
                                              i2l3011 2252  
                                              i2l3013 2256  
                                              i2l3021 2286  
                                              i2l3015 2266  
                                              i2l3031 1A52  
                                              i2l3017 2276  
                                              i2l3041 1AC0  
                                              i2l3033 1A68  
                                              i2l3043 1AD6  
                                              i2l3035 1A7E  
                                              i2l3027 1A38  
                                              i2l3037 1A94  
                                              i2l3029 1A3C  
                                              i2l3125 2456  
                                              i2l3039 1AAA  
                                              i2l3047 1AEC  
                                              i2l3127 2474  
                                              i2l3303 25CE  
                                              i2l3311 1568  
                                              i2l2193 2646  
                                              i2l3321 15CA  
                                              i2l3313 1572  
                                              i2l3305 1548  
                                              i2l3401 001C  
                                              i2l2187 2678  
                                              i2l2195 263C  
                                              i2l3331 165E  
                                              i2l3323 15D2  
                                              i2l3307 1558  
                                              i2l3411 0050  
                                              i2l3403 002E  
                                              i2l2197 2680  
                                              i2l2189 2632  
                                              i2l3325 1624  
                                              i2l3309 155E  
                                              i2l3317 157C  
                                              i2l3421 0086  
                                              i2l3413 0054  
                                              i2l3405 0030  
                                              i2l3327 164C  
                                              i2l3335 166A  
                                              i2l3319 15B2  
                                              i2l3431 00C2  
                                              i2l3423 008A  
                                              i2l3407 0032  
                                              i2l3415 0058  
                                              i2l3329 1654  
                                              i2l3441 00F2  
                                              i2l3433 00C4  
                                              i2l3425 009E  
                                              i2l3417 006C  
                                              i2l3409 004E  
                                              i2l1931 25C0  
                                              i2l3451 0146  
                                              i2l3435 00D8  
                                              i2l3427 00A0  
                                              i2l3443 00F8  
                                              i2l3419 006E  
                                              i2l3453 0160  
                                              i2l3445 010C  
                                              i2l3437 00EA  
                                              i2l3429 00A4  
                                              i2l1935 2670  
                                              i2l3447 0114  
                                              i2l3455 0164  
                                              i2l3439 00EE  
                                              i2l2681 23CE  
                                              i2l3457 0178  
                                              i2l3449 013A  
                                              i2l2683 23D6  
                                              i2l3459 017E  
                                              i2l2685 23F8  
                                              i2l2687 23FE  
                                              i2l4671 229C  
                                              i2l4665 1592  
                                              i2l4667 1680  
                                              i2l4669 1B02  
                                              _RCREG1 000FAE  
                                        ?_setTouchRel 0001  
                                       setDecay@decay 0015  
                                    __end_of_abortAll 2484  
                                    __end_of___xxtofl 11EE  
                                       setDecay@motor 0012  
                                    __end_of_clearTM0 25BE  
                                    _errString_PointZ 0100  
                                      ??_increaseStep 0001  
                              __size_ofi2_enableMotor 0074  
                                           ??___fldiv 0028  
                                           ??___fltol 003D  
                                    __end_of_tim0Init 2584  
                                    __end_of_tim1Init 2594  
                                    __end_of_tim2Init 255E  
                                              clear_0 20D2  
                                              clear_1 20DE  
                                           ??_getData 0014  
                                              _uartTx 237E  
                                    __end_of_setDecay 2166  
                                           ??_initADC 0012  
                                           ??_liftArm 0016  
                                           ??_readSeq 0012  
                                        __pdataCOMRAM 0069  
                               __end_of_resetPosition 13E2  
                                        __mediumconst 0000  
                                           ??_setStep 0013  
                                              tblptrh 000FF7  
                                              tblptrl 000FF6  
                                              tblptru 000FF8  
                                        ?_returnTherm 0012  
                                    __end_of_startADC 261C  
                                    __end_of_stepMade 2572  
                                       _initPinMotors 24DC  
                                        ?_returnTouch 0012  
                                           ??_stopADC 0012  
                               __size_ofi2_printError 011C  
                                    __end_of_writeTM0 25CC  
                           __size_of_resetNewSequence 000A  
                                        ___xxtofl@arg 001C  
                                        ___xxtofl@exp 001B  
                                        ___xxtofl@val 0012  
                                          __accesstop 0080  
                             __end_of__initialization 20E4  
                                        _dataSequence 00DB  
                                       ___rparam_used 000001  
                                          ___fltol@f1 0039  
                                        ?_stepCounter 0012  
                                         i2uartTx@ptr 0001  
                                      __pcstackCOMRAM 0001  
                                        __newSequence 005F  
                                        __pidataBANK0 2322  
                                        __pidataBANK1 1E10  
                                     isr@single_cycle 0051  
                                __size_of_executeData 028E  
                                       ?_setDirection 0012  
                                        i2_printError 1A34  
                                        ?_touchObject 0001  
                                      _errString_ZEND 015E  
                                      _errString_Feed 00A5  
                                       i2_enableMotor 224E  
                                      ?_initPinMotors 0001  
                                           ?i2_uartTx 0001  
                                          __pbssBANK0 00DB  
                                __size_of_newSequence 0008  
                                          _feeder1Pos 060D  
                                          _feeder2Pos 060B  
                                          _feeder3Pos 0609  
                             __size_of_getNewSequence 000E  
                                          _fatalError 267E  
                                  __size_of_reduceSeq 0008  
                                  __size_of_retPeriod 000E  
                                      _touch_pressure 0607  
                                  __size_of_shiftData 0060  
                                  __size_of_resetStep 000A  
                                             _ADC_res 0053  
                                             ?_uartTx 0012  
                                      ??_setDirection 0013  
                                           ?_abortAll 0001  
                                      ?i2_enableMotor 0001  
                                           ?___xxtofl 0012  
                                __end_of_increaseStep 267E  
                                           ?_clearTM0 0001  
                                          ??i2_uartTx 0004  
                                  __size_of_rotateObj 00DC  
                                   _errString_Command 00C3  
                                  __size_of_usartInit 001E  
                              __size_of_interruptInit 003A  
                                __size_of_setThermRel 000A  
                                  __size_of_storeData 0162  
                                           ?_tim0Init 0001  
                                           ?_tim1Init 0001  
                                           ?_tim2Init 0012  
                                __size_of_moveToPoint 0326  
                                storeData@receivedMex 0045  
                                     _newSequenceData 00EF  
                                           ?_setDecay 0012  
                                __size_of_setTouchRel 000A  
                                         setStep@step 0015  
                                             __Hparam 0000  
                                             __Lparam 0000  
                              __end_of_touch_pressure 0609  
                                             ___fldiv 0610  
                                           ?_startADC 0001  
                                           ?_stepMade 0012  
                                             ___fltol 17E2  
                                        __psmallconst 0600  
                                             __pcinit 206C  
                               __end_of_whatsTM0Limit 2676  
                                             _getData 25A2  
                                             __ramtop 0600  
                                           ?_writeTM0 0001  
                                          _pickObject 24B0  
                                             __ptext0 16A6  
                                             __ptext1 2528  
                                             __ptext2 2546  
                                             __ptext3 2584  
                                             __ptext4 2572  
                                             __ptext5 13E2  
                                             __ptext6 1918  
                                             __ptext7 237E  
                                             __ptext8 22C2  
                                             __ptext9 11EE  
                                     __size_of_uartTx 004E  
                                           _T0CONbits 000FD5  
                                             _initADC 2502  
                                           _T1CONbits 000FCD  
                                     ??_initPinMotors 0012  
                                             _liftArm 1FBC  
                                           _T2CONbits 000FCA  
                                          ??_abortAll 0008  
                                             _readSeq 2656  
                                        __size_of_isr 0194  
                                          ??___xxtofl 0016  
                                        ?i2_storeData 0001  
                                          ??_clearTM0 0012  
                                             _setStep 1EE6  
                                             _pwmStep 0067  
                                             _stopADC 2666  
                                   __end_of_reduceSeq 2656  
                                   __end_of_retPeriod 25DA  
                                          _releaseObj 2484  
                                __size_of_returnTherm 000C  
                                end_of_initialization 20E4  
                                __size_of_returnTouch 000C  
                                    _resetNewSequence 25FE  
                                    rotateObj@totStep 00FB  
                                   __end_of_shiftData 2322  
                                             isr@temp 0011  
                                   __end_of_resetStep 2630  
                                          ??_tim0Init 0012  
                                       __Lmediumconst 0000  
                                          ??_tim1Init 0012  
                                          ??_tim2Init 0014  
                                    storeData@command 005D  
                                    storeData@counter 005E  
                                          ??_setDecay 0013  
                                    enableMotor@motor 0012  
                                          _resetTherm 2608  
                                          _resetTouch 261C  
                                             uartTx@i 0015  
                                         ?_fatalError 0001  
                                           _RCSTAbits 000FAB  
                                             postdec1 000FE5  
                                   __end_of_rotateObj 1E10  
                                             postinc0 000FEE  
                                             postinc1 000FE6  
                                             postinc2 000FDE  
                                          ??_startADC 0012  
                                          ??_stepMade 0014  
                                __size_of_stepCounter 000C  
                                       _interruptInit 241A  
                                   __end_of_usartInit 2546  
                                   __end_of_storeData 1544  
                          __end_ofrotateObj@stepAngle 0605  
                                          ??_writeTM0 0001  
                                     ??i2_enableMotor 0002  
                                           _PORTDbits 000F83  
                                          _printError 1918  
                                           _PORTEbits 000F84  
                                       ??_enableMotor 0013  
                                 i2printError@errCode 0007  
                                          _toggleStep 2630  
                                       ___xxtofl@sign 001A  
                                           _TRISCbits 000F94  
                                           _TRISDbits 000F95  
                                           _TRISEbits 000F96  
                                         ___fldiv@grs 0033  
                                         ___fldiv@rem 002C  
                                __size_of_touchObject 00F2  
                                          _stepToggle 0066  
                                          _touchTherm 1B50  
                                __end_of_setDirection 224E  
                                           _TXSTAbits 000FAC  
                                      _getNewSequence 2594  
                                      ?_interruptInit 0001  
                                       __pidataCOMRAM 2686  
                               __size_of_increaseStep 0008  
                                         ?_pickObject 0001  
                                         __fatalError 0060  
                                      __end_of_uartTx 23CC  
                                       moveToPoint@x1 0016  
                                       moveToPoint@x2 001A  
                                       moveToPoint@y1 0018  
                                       moveToPoint@y2 001C  
                                 start_initialization 206C  
                                           i2uartTx@i 0004  
                                         __end_of_isr 019C  
                                 __size_of_fatalError 0008  
                                 __end_of_enableMotor 21DA  
                                         ?_releaseObj 0001  
                                   __size_ofi2_uartTx 004E  
                              __end_of_getNewSequence 25A2  
                                     _errString_Fatal 01AF  
                                     _errString_Bound 0084  
                                         ?_resetTherm 0001  
                                     _errString_Reset 0187  
                                         ?_resetTouch 0001  
                                     _errString_Point 0135  
                                        _increaseStep 2676  
                              __size_of_resetPosition 01F4  
                                       ??_executeData 0043  
                                         __pdataBANK0 0080  
                                         __pdataBANK1 0100  
                                 i2enableMotor@enable 0004  
                                         _dataCounter 0061  
                                            ??_uartTx 0015  
                              moveToPoint@keepMovingX 0023  
                              moveToPoint@keepMovingY 0020  
                                         ?_printError 0001  
                                           ___fldiv@a 0024  
                                           ___fldiv@b 0020  
                                      _therm_pressure 0605  
                                         ?_toggleStep 0001  
                                         __pbssCOMRAM 0045  
                                       __pcstackBANK0 00F7  
                                       __pcstackBANK1 01D6  
                                       ??_newSequence 0012  
                                   __size_of_abortAll 0030  
                                   __size_of___xxtofl 01F8  
                                __size_ofi2_storeData 0162  
                                   __size_of_clearTM0 000E  
                                     ?_getNewSequence 0012  
                                         ?_touchTherm 0001  
                                 __size_of_pickObject 002C  
                                  executeData@errCode 01D6  
                                   __size_of_tim0Init 0012  
                                   __size_of_tim1Init 0010  
                                   __size_of_tim2Init 0018  
                                     ??_interruptInit 0012  
                                   __size_of_setDecay 0074  
                                           __pintcode 0008  
                                            ?___fldiv 0020  
                                            ?___fltol 0039  
                            __end_of_resetNewSequence 2608  
                                 __size_of_releaseObj 002C  
                                       storeData@data 001B  
                                            ?_getData 0012  
                                   __size_of_startADC 000A  
                                   __size_of_stepMade 0014  
                              __end_of_therm_pressure 0607  
                                            ?_initADC 0001  
                                         __smallconst 0600  
                                            ?_liftArm 0001  
                                         _enableMotor 2166  
                                            ?_readSeq 0001  
                                   __size_of_writeTM0 000E  
                                 __end_of_executeData 0FF6  
                                          shiftData@i 0014  
                                            ?_setStep 0012  
                                 __size_of_resetTherm 000A  
                                           _newFeeder 0057  
                                       _resetPosition 11EE  
                                 __size_of_resetTouch 000A  
                                       ??_setThermRel 0001  
                                            ?_stopADC 0001  
                               __size_of_setDirection 0074  
                                       ??_moveToPoint 001E  
                                       ??_setTouchRel 0001  
                                 __end_of_newSequence 2666  
                                           _reduceSeq 264E  
                                            _LATAbits 000F89  
                                            _LATBbits 000F8A  
                                           _retPeriod 25CC  
                                            _LATCbits 000F8B  
                                            _LATDbits 000F8C  
                                 __size_of_printError 011C  
                                            _IPR1bits 000F9F  
                                            _PIE1bits 000F9D  
                                           _shiftData 22C2  
                                            i2u226_45 2260  
                                            i2u226_46 2262  
                                            i2u251_40 002C  
                                            i2u251_41 0026  
                                            i2u227_45 2270  
                                            i2u227_46 2272  
                                            i2u260_40 0138  
                                            i2u252_40 004C  
                                            i2u260_41 0132  
                                            i2u252_41 0046  
                                           _resetStep 2626  
                                            i2u228_45 2280  
                                            i2u228_46 2282  
                                            i2u261_40 015E  
                                            i2u253_40 006A  
                                            i2u261_41 0158  
                                            i2u253_41 0064  
                                            i2u262_40 0176  
                                            i2u254_40 0084  
                                            i2u262_41 0170  
                                            i2u254_41 007E  
                                            i2u247_40 15C8  
                                            i2u255_40 009C  
                                            i2u247_41 15C2  
                                            i2u255_41 0096  
                                            i2u256_40 00C0  
                                            i2u256_41 00BA  
                                            i2u177_40 23F6  
                                            i2u257_40 00D6  
                                            i2u177_41 23F0  
                                            i2u257_41 00D0  
                                            _PIR1bits 000F9E  
                                            i2u178_40 2414  
                                            i2u258_40 00E8  
                                            i2u178_41 240E  
                                            i2u258_41 00E2  
                                            i2u259_40 010A  
                                            i2u259_41 0104  
                                 __size_of_toggleStep 000A  
                                        ??_fatalError 0001  
                                           _posVector 004E  
                                            _RCONbits 000FD0  
                                           _therm_rel 0064  
                                           _pwmPeriod 0055  
                                   setDirection@motor 0012  
                                           _rotateObj 1D34  
                                          _ADCON0bits 000FC2  
                                          _ADCON1bits 000FC1  
                                 __size_of_touchTherm 00F2  
                                        _setDirection 21DA  
                                           _usartInit 2528  
                                           _touch_rel 0065  
                                  __end_of_feeder1Pos 060F  
                                  __end_of_feeder2Pos 060D  
                                  __end_of_feeder3Pos 060B  
                                           _storeData 13E2  
                                      ?_resetPosition 0001  
                               __end_of_initPinMotors 2502  
                                       ??_returnTherm 0014  
                                       ??_returnTouch 0014  
                                            i2_uartTx 23CC  
                                           copy_data0 2080  
                                           copy_data1 20A0  
                                           copy_data2 20C0  
                                  __end_of_fatalError 2686  
                                  rotateObj@stepAngle 0601  
                                          ?_reduceSeq 0001  
                                          ?_retPeriod 0001  
                                        setStep@motor 0012  
                                          rotateObj@i 00FD  
                              __size_of_whatsTM0Limit 0008  
                                 __end_of_setThermRel 264E  
                                 __end_of_moveToPoint 0D68  
                                   printError@errCode 0018  
                                          ?_shiftData 0001  
                                       ??_stepCounter 0014  
                                            __Hrparam 0000  
                                          ?_resetStep 0001  
                                 __end_of_setTouchRel 2644  
                                            __Lrparam 0000  
                                  i2enableMotor@motor 0001  
                                    __size_of___fldiv 0432  
                                    __size_of___fltol 0136  
                                         _executeData 0D68  
                                        ??_pickObject 0015  
                                          ?_rotateObj 0001  
                            moveToPoint@MOT1Direction 0021  
                                       ?i2_printError 0001  
                                    __size_of_getData 000E  
                               __end_ofi2_enableMotor 22C2  
                            moveToPoint@MOT2Direction 0022  
                                       ??_touchObject 0016  
                                            _abortAll 2454  
                                          ?_usartInit 0001  
                                    __size_of_initADC 0026  
                                            ___xxtofl 0FF6  
                                    __size_of_liftArm 00B0  
                                          ?_storeData 0001  
                                            _clearTM0 25B0  
                                    __size_of_readSeq 0008  
                                  storeData@mexLength 006D  
                                            _tm0Error 005B  
                                            _tm0Limit 0068  
                                    __size_of_setStep 00D6  
                                         _newSequence 265E  
                                            __ptext10 1EE6  
                                            __ptext11 20F2  
                                            __ptext20 2594  
                                            __ptext12 2166  
                                            __ptext21 0D68  
                                            __ptext13 25FE  
                                            __ptext30 1D34  
                                            __ptext22 1B50  
                                            __ptext14 264E  
                                            __ptext31 0FF6  
                                            __ptext23 25DA  
                                            __ptext15 2656  
                                            __ptext40 21DA  
                                            __ptext32 17E2  
                                            __ptext24 2608  
                                            __ptext16 265E  
                                            __ptext41 2626  
                                            __ptext33 0610  
                                            __ptext25 1C42  
                                            __ptext17 241A  
                                            __ptext50 2644  
                                            __ptext42 25A2  
                                            __ptext34 2484  
                                            __ptext26 2666  
                                            __ptext18 24DC  
                                            __ptext51 25CC  
                                            __ptext43 25B0  
                                            __ptext35 24B0  
                                            __ptext27 2612  
                                            __ptext19 2502  
                                            __ptext52 2676  
                                            __ptext36 0A42  
                                            __ptext28 25E6  
                                            __ptext53 267E  
                                            __ptext45 1544  
                                            __ptext37 25F2  
                                            __ptext29 261C  
                                            __ptext54 2454  
                                            __ptext46 25BE  
                                            __ptext38 1FBC  
                                            __ptext55 1A34  
                                            __ptext47 266E  
                                            __ptext39 255E  
                                            __ptext56 23CC  
                                            __ptext48 2630  
                                            __ptext57 224E  
                                            __ptext49 263A  
                                        ??_releaseObj 0015  
                                    __size_of_stopADC 0008  
                                 __end_of_returnTherm 25E6  
                                 __end_of_returnTouch 25F2  
                                            _tim0Init 2572  
                                            _tim1Init 2584  
                                            _tim2Init 2546  
                                       __size_of_main 013C  
                                            _setDecay 20F2  
                                  __end_of_pickObject 24DC  
                                        ??_resetTherm 0012  
                                        ??_resetTouch 0012  
                                           uartTx@ptr 0012  
                                            _rotAngle 0059  
                                     isr@completeStep 0062  
                                            int$flags 006E  
                                            _startADC 2612  
                                            _stepMade 255E  
                                 __end_of_stepCounter 25FE  
                                   rotateObj@rotAngle 00FA  
                                      ??i2_printError 0005  
                                  __end_of_releaseObj 24B0  
                                            _writeTM0 25BE  
                                        ??_printError 0016  
                                       _whatsTM0Limit 266E  
                                     ??_resetPosition 0016  
                                  tim2Init@_pwmPeriod 0012  
                                          _INTCONbits 000FF2  
                                        ??_toggleStep 0001  
                                    ??_getNewSequence 0014  
                                  __end_of_resetTherm 2612  
                                  __end_of_resetTouch 2626  
                                         _setThermRel 2644  
                                        uartTx@length 0014  
                                         _moveToPoint 0A42  
                                 __end_of_touchObject 1D34  
                                            intlevel2 268C  
                                   enableMotor@enable 0015  
                                        ??_touchTherm 0016  
                                         _setTouchRel 263A  
                                         ??_reduceSeq 0012  
                                         ??_retPeriod 0003  
                                          _RCSTA1bits 000FAB  
                                  __end_of_printError 1A34  
                               setDirection@direction 0015  
                                         ??_shiftData 0012  
                                         ??_resetStep 0012  
                                  __end_of_toggleStep 263A  
                                   ?_resetNewSequence 0001  
                                      ?_whatsTM0Limit 0001  
                                         ??_rotateObj 00F7  
                                  ??_resetNewSequence 0012  
                                  __end_of_touchTherm 1C42  
                                        ?_enableMotor 0012  
                                         ??_usartInit 0012  
                                       ??i2_storeData 0008  
                                         ??_storeData 0019  
                                         _returnTherm 25DA  
                                         _returnTouch 25E6  
                                         _stepCounter 25F2  
