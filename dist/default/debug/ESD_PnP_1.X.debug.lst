

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Tue Apr 27 15:55:24 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    72                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    73                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    74                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    75  0000                     
    76                           ; Version 2.20
    77                           ; Generated 12/02/2020 GMT
    78                           ; 
    79                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    80                           ; All rights reserved.
    81                           ; 
    82                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    83                           ; 
    84                           ; Redistribution and use in source and binary forms, with or without modification, are
    85                           ; permitted provided that the following conditions are met:
    86                           ; 
    87                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    88                           ;        conditions and the following disclaimer.
    89                           ; 
    90                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    91                           ;        of conditions and the following disclaimer in the documentation and/or other
    92                           ;        materials provided with the distribution.
    93                           ; 
    94                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    95                           ;        software without specific prior written permission.
    96                           ; 
    97                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    98                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    99                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   100                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   101                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   102                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   103                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   104                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   105                           ; 
   106                           ; 
   107                           ; Code-generator required, PIC18F452 Definitions
   108                           ; 
   109                           ; SFR Addresses
   110  0000                     
   111                           	psect	idataCOMRAM
   112  002506                     __pidataCOMRAM:
   113                           	callstack 0
   114                           
   115                           ;initializer for _motCounter
   116  002506  0000               	dw	0
   117  002508  0001               	dw	1
   118  00250A  0000               	dw	0
   119  00250C  0001               	dw	1
   120  00250E  0000               	dw	0
   121  002510  0001               	dw	1
   122                           
   123                           ;initializer for _maxX
   124  002512  00C9               	dw	201
   125                           
   126                           ;initializer for storeData@mexLength
   127  002514  05                 	db	5
   128                           
   129                           	psect	idataBANK0
   130  002374                     __pidataBANK0:
   131                           	callstack 0
   132                           
   133                           ;initializer for rotateObj@rotSequence
   134  002374  24                 	db	36
   135  002375  0C                 	db	12
   136  002376  18                 	db	24
   137  002377  30                 	db	48
   138                           
   139                           ;initializer for _stepMot3
   140  002378  09                 	db	9
   141  002379  03                 	db	3
   142  00237A  06                 	db	6
   143  00237B  0C                 	db	12
   144                           
   145                           ;initializer for _stepMot2
   146  00237C  11                 	db	17
   147  00237D  05                 	db	5
   148  00237E  0C                 	db	12
   149  00237F  18                 	db	24
   150                           
   151                           ;initializer for _stepMot1
   152  002380  22                 	db	34
   153  002381  06                 	db	6
   154  002382  0C                 	db	12
   155  002383  28                 	db	40
   156                           
   157                           ;initializer for _maxY
   158  002384  00C9               	dw	201
   159                           
   160                           ;initializer for _errString_Feed
   161  002386  45                 	db	69
   162  002387  72                 	db	114
   163  002388  72                 	db	114
   164  002389  6F                 	db	111
   165  00238A  72                 	db	114
   166  00238B  2C                 	db	44
   167  00238C  20                 	db	32
   168  00238D  66                 	db	102
   169  00238E  65                 	db	101
   170  00238F  65                 	db	101
   171  002390  64                 	db	100
   172  002391  20                 	db	32
   173  002392  6C                 	db	108
   174  002393  69                 	db	105
   175  002394  6E                 	db	110
   176  002395  65                 	db	101
   177  002396  20                 	db	32
   178  002397  6E                 	db	110
   179  002398  6F                 	db	111
   180  002399  74                 	db	116
   181  00239A  20                 	db	32
   182  00239B  64                 	db	100
   183  00239C  65                 	db	101
   184  00239D  66                 	db	102
   185  00239E  69                 	db	105
   186  00239F  6E                 	db	110
   187  0023A0  65                 	db	101
   188  0023A1  64                 	db	100
   189  0023A2  0A                 	db	10
   190  0023A3  00                 	db	0
   191                           
   192                           ;initializer for _errString_Command
   193  0023A4  43                 	db	67
   194  0023A5  6F                 	db	111
   195  0023A6  6D                 	db	109
   196  0023A7  6D                 	db	109
   197  0023A8  61                 	db	97
   198  0023A9  6E                 	db	110
   199  0023AA  64                 	db	100
   200  0023AB  20                 	db	32
   201  0023AC  6E                 	db	110
   202  0023AD  6F                 	db	111
   203  0023AE  74                 	db	116
   204  0023AF  20                 	db	32
   205  0023B0  72                 	db	114
   206  0023B1  65                 	db	101
   207  0023B2  63                 	db	99
   208  0023B3  6F                 	db	111
   209  0023B4  67                 	db	103
   210  0023B5  6E                 	db	110
   211  0023B6  69                 	db	105
   212  0023B7  7A                 	db	122
   213  0023B8  65                 	db	101
   214  0023B9  64                 	db	100
   215  0023BA  0A                 	db	10
   216  0023BB  00                 	db	0
   217                           
   218                           	psect	idataBANK1
   219  001F5C                     __pidataBANK1:
   220                           	callstack 0
   221                           
   222                           ;initializer for _errString_PointZ
   223  001F5C  45                 	db	69
   224  001F5D  72                 	db	114
   225  001F5E  72                 	db	114
   226  001F5F  6F                 	db	111
   227  001F60  72                 	db	114
   228  001F61  2C                 	db	44
   229  001F62  20                 	db	32
   230  001F63  74                 	db	116
   231  001F64  69                 	db	105
   232  001F65  6D                 	db	109
   233  001F66  65                 	db	101
   234  001F67  20                 	db	32
   235  001F68  65                 	db	101
   236  001F69  78                 	db	120
   237  001F6A  63                 	db	99
   238  001F6B  65                 	db	101
   239  001F6C  65                 	db	101
   240  001F6D  64                 	db	100
   241  001F6E  65                 	db	101
   242  001F6F  64                 	db	100
   243  001F70  20                 	db	32
   244  001F71  74                 	db	116
   245  001F72  6F                 	db	111
   246  001F73  20                 	db	32
   247  001F74  72                 	db	114
   248  001F75  65                 	db	101
   249  001F76  61                 	db	97
   250  001F77  63                 	db	99
   251  001F78  68                 	db	104
   252  001F79  20                 	db	32
   253  001F7A  74                 	db	116
   254  001F7B  68                 	db	104
   255  001F7C  65                 	db	101
   256  001F7D  20                 	db	32
   257  001F7E  65                 	db	101
   258  001F7F  6E                 	db	110
   259  001F80  64                 	db	100
   260  001F81  20                 	db	32
   261  001F82  6F                 	db	111
   262  001F83  66                 	db	102
   263  001F84  20                 	db	32
   264  001F85  74                 	db	116
   265  001F86  68                 	db	104
   266  001F87  65                 	db	101
   267  001F88  20                 	db	32
   268  001F89  5A                 	db	90
   269  001F8A  20                 	db	32
   270  001F8B  41                 	db	65
   271  001F8C  78                 	db	120
   272  001F8D  69                 	db	105
   273  001F8E  73                 	db	115
   274  001F8F  0A                 	db	10
   275  001F90  00                 	db	0
   276                           
   277                           ;initializer for _errString_Point
   278  001F91  45                 	db	69
   279  001F92  72                 	db	114
   280  001F93  72                 	db	114
   281  001F94  6F                 	db	111
   282  001F95  72                 	db	114
   283  001F96  2C                 	db	44
   284  001F97  20                 	db	32
   285  001F98  74                 	db	116
   286  001F99  69                 	db	105
   287  001F9A  6D                 	db	109
   288  001F9B  65                 	db	101
   289  001F9C  20                 	db	32
   290  001F9D  65                 	db	101
   291  001F9E  78                 	db	120
   292  001F9F  63                 	db	99
   293  001FA0  65                 	db	101
   294  001FA1  65                 	db	101
   295  001FA2  64                 	db	100
   296  001FA3  65                 	db	101
   297  001FA4  64                 	db	100
   298  001FA5  20                 	db	32
   299  001FA6  74                 	db	116
   300  001FA7  6F                 	db	111
   301  001FA8  20                 	db	32
   302  001FA9  72                 	db	114
   303  001FAA  65                 	db	101
   304  001FAB  61                 	db	97
   305  001FAC  63                 	db	99
   306  001FAD  68                 	db	104
   307  001FAE  20                 	db	32
   308  001FAF  74                 	db	116
   309  001FB0  68                 	db	104
   310  001FB1  65                 	db	101
   311  001FB2  20                 	db	32
   312  001FB3  70                 	db	112
   313  001FB4  6F                 	db	111
   314  001FB5  69                 	db	105
   315  001FB6  6E                 	db	110
   316  001FB7  74                 	db	116
   317  001FB8  0A                 	db	10
   318  001FB9  00                 	db	0
   319                           
   320                           ;initializer for _errString_ZEND
   321  001FBA  45                 	db	69
   322  001FBB  72                 	db	114
   323  001FBC  72                 	db	114
   324  001FBD  6F                 	db	111
   325  001FBE  72                 	db	114
   326  001FBF  2C                 	db	44
   327  001FC0  20                 	db	32
   328  001FC1  6E                 	db	110
   329  001FC2  6F                 	db	111
   330  001FC3  20                 	db	32
   331  001FC4  6F                 	db	111
   332  001FC5  62                 	db	98
   333  001FC6  6A                 	db	106
   334  001FC7  65                 	db	101
   335  001FC8  63                 	db	99
   336  001FC9  74                 	db	116
   337  001FCA  20                 	db	32
   338  001FCB  72                 	db	114
   339  001FCC  65                 	db	101
   340  001FCD  6C                 	db	108
   341  001FCE  65                 	db	101
   342  001FCF  76                 	db	118
   343  001FD0  61                 	db	97
   344  001FD1  74                 	db	116
   345  001FD2  65                 	db	101
   346  001FD3  64                 	db	100
   347  001FD4  20                 	db	32
   348  001FD5  61                 	db	97
   349  001FD6  6C                 	db	108
   350  001FD7  6F                 	db	111
   351  001FD8  6E                 	db	110
   352  001FD9  67                 	db	103
   353  001FDA  20                 	db	32
   354  001FDB  5A                 	db	90
   355  001FDC  20                 	db	32
   356  001FDD  41                 	db	65
   357  001FDE  78                 	db	120
   358  001FDF  69                 	db	105
   359  001FE0  73                 	db	115
   360  001FE1  0A                 	db	10
   361  001FE2  00                 	db	0
   362                           
   363                           ;initializer for _errString_Reset
   364  001FE3  45                 	db	69
   365  001FE4  72                 	db	114
   366  001FE5  72                 	db	114
   367  001FE6  6F                 	db	111
   368  001FE7  72                 	db	114
   369  001FE8  2C                 	db	44
   370  001FE9  20                 	db	32
   371  001FEA  74                 	db	116
   372  001FEB  69                 	db	105
   373  001FEC  6D                 	db	109
   374  001FED  65                 	db	101
   375  001FEE  20                 	db	32
   376  001FEF  65                 	db	101
   377  001FF0  78                 	db	120
   378  001FF1  63                 	db	99
   379  001FF2  65                 	db	101
   380  001FF3  65                 	db	101
   381  001FF4  64                 	db	100
   382  001FF5  65                 	db	101
   383  001FF6  64                 	db	100
   384  001FF7  20                 	db	32
   385  001FF8  74                 	db	116
   386  001FF9  6F                 	db	111
   387  001FFA  20                 	db	32
   388  001FFB  72                 	db	114
   389  001FFC  65                 	db	101
   390  001FFD  73                 	db	115
   391  001FFE  65                 	db	101
   392  001FFF  74                 	db	116
   393  002000  20                 	db	32
   394  002001  70                 	db	112
   395  002002  6F                 	db	111
   396  002003  73                 	db	115
   397  002004  69                 	db	105
   398  002005  74                 	db	116
   399  002006  69                 	db	105
   400  002007  6F                 	db	111
   401  002008  6E                 	db	110
   402  002009  0A                 	db	10
   403  00200A  00                 	db	0
   404                           
   405                           ;initializer for _errString_Fatal
   406  00200B  46                 	db	70
   407  00200C  61                 	db	97
   408  00200D  74                 	db	116
   409  00200E  61                 	db	97
   410  00200F  6C                 	db	108
   411  002010  20                 	db	32
   412  002011  45                 	db	69
   413  002012  72                 	db	114
   414  002013  72                 	db	114
   415  002014  6F                 	db	111
   416  002015  72                 	db	114
   417  002016  2C                 	db	44
   418  002017  20                 	db	32
   419  002018  70                 	db	112
   420  002019  6C                 	db	108
   421  00201A  65                 	db	101
   422  00201B  61                 	db	97
   423  00201C  73                 	db	115
   424  00201D  65                 	db	101
   425  00201E  20                 	db	32
   426  00201F  72                 	db	114
   427  002020  65                 	db	101
   428  002021  73                 	db	115
   429  002022  65                 	db	101
   430  002023  74                 	db	116
   431  002024  20                 	db	32
   432  002025  74                 	db	116
   433  002026  68                 	db	104
   434  002027  65                 	db	101
   435  002028  20                 	db	32
   436  002029  64                 	db	100
   437  00202A  65                 	db	101
   438  00202B  76                 	db	118
   439  00202C  69                 	db	105
   440  00202D  63                 	db	99
   441  00202E  65                 	db	101
   442  00202F  21                 	db	33
   443  002030  0A                 	db	10
   444  002031  00                 	db	0
   445                           
   446                           ;initializer for _errString_Bound
   447  002032  45                 	db	69
   448  002033  72                 	db	114
   449  002034  72                 	db	114
   450  002035  6F                 	db	111
   451  002036  72                 	db	114
   452  002037  2C                 	db	44
   453  002038  20                 	db	32
   454  002039  70                 	db	112
   455  00203A  6F                 	db	111
   456  00203B  69                 	db	105
   457  00203C  6E                 	db	110
   458  00203D  74                 	db	116
   459  00203E  20                 	db	32
   460  00203F  6F                 	db	111
   461  002040  75                 	db	117
   462  002041  74                 	db	116
   463  002042  73                 	db	115
   464  002043  69                 	db	105
   465  002044  64                 	db	100
   466  002045  65                 	db	101
   467  002046  20                 	db	32
   468  002047  62                 	db	98
   469  002048  6F                 	db	111
   470  002049  75                 	db	117
   471  00204A  6E                 	db	110
   472  00204B  64                 	db	100
   473  00204C  61                 	db	97
   474  00204D  72                 	db	114
   475  00204E  69                 	db	105
   476  00204F  65                 	db	101
   477  002050  73                 	db	115
   478  002051  0A                 	db	10
   479  002052  00                 	db	0
   480                           
   481                           	psect	smallconst
   482  000600                     __psmallconst:
   483                           	callstack 0
   484  000600  00                 	db	0
   485  000601  FFAC               	dw	65452
   486  000603  3DB3               	dw	15795
   487  000605                     __end_ofrotateObj@stepAngle:
   488                           	callstack 0
   489  000605  0400               	dw	1024
   490  000607                     __end_of_therm_pressure:
   491                           	callstack 0
   492  000607  0200               	dw	512
   493  000609                     __end_of_touch_pressure:
   494                           	callstack 0
   495  000609                     _feeder3Pos:
   496                           	callstack 0
   497  000609  1E                 	db	30
   498  00060A  96                 	db	150
   499  00060B                     __end_of_feeder3Pos:
   500                           	callstack 0
   501  00060B                     _feeder2Pos:
   502                           	callstack 0
   503  00060B  1E                 	db	30
   504  00060C  64                 	db	100
   505  00060D                     __end_of_feeder2Pos:
   506                           	callstack 0
   507  00060D                     _feeder1Pos:
   508                           	callstack 0
   509  00060D  1E                 	db	30
   510  00060E  32                 	db	50
   511  00060F                     __end_of_feeder1Pos:
   512                           	callstack 0
   513  00060F  C8                 	db	200
   514  000610                     __end_of_maxFeedY:
   515                           	callstack 0
   516  000610  3C                 	db	60
   517  000611                     __end_of_maxFeedX:
   518                           	callstack 0
   519  0000                     _TMR0	set	4054
   520  0000                     _T1CONbits	set	4045
   521  0000                     _TXREG	set	4013
   522  0000                     _SPBRG	set	4015
   523  0000                     _TXSTAbits	set	4012
   524  0000                     _TRISCbits	set	3988
   525  0000                     _RCREG1	set	4014
   526  0000                     _ADRESH	set	4036
   527  0000                     _ADRESL	set	4035
   528  0000                     _PIR1bits	set	3998
   529  0000                     _RCONbits	set	4048
   530  0000                     _INTCONbits	set	4082
   531  0000                     _IPR1bits	set	3999
   532  0000                     _PIE1bits	set	3997
   533  0000                     _ADCON0bits	set	4034
   534  0000                     _RCSTAbits	set	4011
   535  0000                     _RCSTA1bits	set	4011
   536  0000                     _LATD	set	3980
   537  0000                     _PORTDbits	set	3971
   538  0000                     _TMR2	set	4044
   539  0000                     _LATC	set	3979
   540  0000                     _LATB	set	3978
   541  0000                     _LATA	set	3977
   542  0000                     _PORTEbits	set	3972
   543  0000                     _T0CONbits	set	4053
   544  0000                     _T2CONbits	set	4042
   545  0000                     _LATDbits	set	3980
   546  0000                     _LATCbits	set	3979
   547  0000                     _LATBbits	set	3978
   548  0000                     _LATAbits	set	3977
   549  0000                     _TRISDbits	set	3989
   550  0000                     _TRISEbits	set	3990
   551  0000                     _TRISD	set	3989
   552  0000                     _TRISC	set	3988
   553  0000                     _TRISB	set	3987
   554  0000                     _TRISA	set	3986
   555  0000                     _ADCON1bits	set	4033
   556  000611  00                 	db	0	; dummy byte at the end
   557  0000                     
   558                           ; #config settings
   559                           
   560                           	psect	cinit
   561  0021F2                     __pcinit:
   562                           	callstack 0
   563  0021F2                     start_initialization:
   564                           	callstack 0
   565  0021F2                     __initialization:
   566                           	callstack 0
   567                           
   568                           ; Initialize objects allocated to BANK1 (247 bytes)
   569                           ; load TBLPTR registers with __pidataBANK1
   570  0021F2  0E5C               	movlw	low __pidataBANK1
   571  0021F4  6EF6               	movwf	tblptrl,c
   572  0021F6  0E1F               	movlw	high __pidataBANK1
   573  0021F8  6EF7               	movwf	tblptrh,c
   574  0021FA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   575  0021FC  6EF8               	movwf	tblptru,c
   576  0021FE  EE01  F000         	lfsr	0,__pdataBANK1
   577  002202  EE10 F0F7          	lfsr	1,247
   578  002206                     copy_data0:
   579  002206  0009               	tblrd		*+
   580  002208  CFF5 FFEE          	movff	tablat,postinc0
   581  00220C  50E5               	movf	postdec1,w,c
   582  00220E  50E1               	movf	fsr1l,w,c
   583  002210  E1FA               	bnz	copy_data0
   584                           
   585                           ; Initialize objects allocated to BANK0 (72 bytes)
   586                           ; load TBLPTR registers with __pidataBANK0
   587  002212  0E74               	movlw	low __pidataBANK0
   588  002214  6EF6               	movwf	tblptrl,c
   589  002216  0E23               	movlw	high __pidataBANK0
   590  002218  6EF7               	movwf	tblptrh,c
   591  00221A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   592  00221C  6EF8               	movwf	tblptru,c
   593  00221E  EE00  F080         	lfsr	0,__pdataBANK0
   594  002222  EE10 F048          	lfsr	1,72
   595  002226                     copy_data1:
   596  002226  0009               	tblrd		*+
   597  002228  CFF5 FFEE          	movff	tablat,postinc0
   598  00222C  50E5               	movf	postdec1,w,c
   599  00222E  50E1               	movf	fsr1l,w,c
   600  002230  E1FA               	bnz	copy_data1
   601                           
   602                           ; Initialize objects allocated to COMRAM (15 bytes)
   603                           ; load TBLPTR registers with __pidataCOMRAM
   604  002232  0E06               	movlw	low __pidataCOMRAM
   605  002234  6EF6               	movwf	tblptrl,c
   606  002236  0E25               	movlw	high __pidataCOMRAM
   607  002238  6EF7               	movwf	tblptrh,c
   608  00223A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   609  00223C  6EF8               	movwf	tblptru,c
   610  00223E  EE00  F05E         	lfsr	0,__pdataCOMRAM
   611  002242  EE10 F00F          	lfsr	1,15
   612  002246                     copy_data2:
   613  002246  0009               	tblrd		*+
   614  002248  CFF5 FFEE          	movff	tablat,postinc0
   615  00224C  50E5               	movf	postdec1,w,c
   616  00224E  50E1               	movf	fsr1l,w,c
   617  002250  E1FA               	bnz	copy_data2
   618                           
   619                           ; Clear objects allocated to BANK0 (37 bytes)
   620  002252  EE00  F0C8         	lfsr	0,__pbssBANK0
   621  002256  0E25               	movlw	37
   622  002258                     clear_0:
   623  002258  6AEE               	clrf	postinc0,c
   624  00225A  06E8               	decf	wreg,f,c
   625  00225C  E1FD               	bnz	clear_0
   626                           
   627                           ; Clear objects allocated to COMRAM (27 bytes)
   628  00225E  EE00  F043         	lfsr	0,__pbssCOMRAM
   629  002262  0E1B               	movlw	27
   630  002264                     clear_1:
   631  002264  6AEE               	clrf	postinc0,c
   632  002266  06E8               	decf	wreg,f,c
   633  002268  E1FD               	bnz	clear_1
   634  00226A                     end_of_initialization:
   635                           	callstack 0
   636  00226A                     __end_of__initialization:
   637                           	callstack 0
   638  00226A  906D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   639  00226C  926D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   640  00226E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   641  002270  6EF8               	movwf	tblptru,c
   642  002272  0100               	movlb	0
   643  002274  EF84  F00A         	goto	_main	;jump to C main() function
   644                           
   645                           	psect	bssCOMRAM
   646  000043                     __pbssCOMRAM:
   647                           	callstack 0
   648  000043                     _posVector:
   649                           	callstack 0
   650  000043                     	ds	3
   651  000046                     _pwmPeriod:
   652                           	callstack 0
   653  000046                     	ds	2
   654  000048                     isr@single_cycle:
   655                           	callstack 0
   656  000048                     	ds	2
   657  00004A                     _ADC_res:
   658                           	callstack 0
   659  00004A                     	ds	2
   660  00004C                     _newFeeder:
   661                           	callstack 0
   662  00004C                     	ds	2
   663  00004E                     _rotAngle:
   664                           	callstack 0
   665  00004E                     	ds	2
   666  000050                     _tm0Error:
   667                           	callstack 0
   668  000050                     	ds	2
   669  000052                     _stepToggle:
   670                           	callstack 0
   671  000052                     	ds	1
   672  000053                     _pwmStep:
   673                           	callstack 0
   674  000053                     	ds	1
   675  000054                     	ds	1
   676  000055                     storeData@counter:
   677                           	callstack 0
   678  000055                     	ds	1
   679  000056                     __newSequence:
   680                           	callstack 0
   681  000056                     	ds	1
   682  000057                     __fatalError:
   683                           	callstack 0
   684  000057                     	ds	1
   685  000058                     _dataCounter:
   686                           	callstack 0
   687  000058                     	ds	1
   688  000059                     isr@completeStep:
   689                           	callstack 0
   690  000059                     	ds	1
   691  00005A                     isr@tm0Count:
   692                           	callstack 0
   693  00005A                     	ds	1
   694  00005B                     _therm_rel:
   695                           	callstack 0
   696  00005B                     	ds	1
   697  00005C                     _touch_rel:
   698                           	callstack 0
   699  00005C                     	ds	1
   700  00005D                     _tm0Limit:
   701                           	callstack 0
   702  00005D                     	ds	1
   703                           
   704                           	psect	dataCOMRAM
   705  00005E                     __pdataCOMRAM:
   706                           	callstack 0
   707  00005E                     _motCounter:
   708                           	callstack 0
   709  00005E                     	ds	12
   710  00006A                     	ds	2
   711  00006C                     storeData@mexLength:
   712                           	callstack 0
   713  00006C                     	ds	1
   714                           
   715                           	psect	bssBANK0
   716  0000C8                     __pbssBANK0:
   717                           	callstack 0
   718  0000C8                     storeData@receivedMex:
   719                           	callstack 0
   720  0000C8                     	ds	9
   721  0000D1                     _dataSequence:
   722                           	callstack 0
   723  0000D1                     	ds	20
   724  0000E5                     _newSequenceData:
   725                           	callstack 0
   726  0000E5                     	ds	8
   727                           
   728                           	psect	dataBANK0
   729  000080                     __pdataBANK0:
   730                           	callstack 0
   731  000080                     rotateObj@rotSequence:
   732                           	callstack 0
   733  000080                     	ds	4
   734  000084                     _stepMot3:
   735                           	callstack 0
   736  000084                     	ds	4
   737  000088                     _stepMot2:
   738                           	callstack 0
   739  000088                     	ds	4
   740  00008C                     _stepMot1:
   741                           	callstack 0
   742  00008C                     	ds	4
   743  000090                     	ds	2
   744  000092                     _errString_Feed:
   745                           	callstack 0
   746  000092                     	ds	30
   747  0000B0                     _errString_Command:
   748                           	callstack 0
   749  0000B0                     	ds	24
   750                           
   751                           	psect	dataBANK1
   752  000100                     __pdataBANK1:
   753                           	callstack 0
   754  000100                     _errString_PointZ:
   755                           	callstack 0
   756  000100                     	ds	53
   757  000135                     _errString_Point:
   758                           	callstack 0
   759  000135                     	ds	41
   760  00015E                     _errString_ZEND:
   761                           	callstack 0
   762  00015E                     	ds	41
   763  000187                     _errString_Reset:
   764                           	callstack 0
   765  000187                     	ds	40
   766  0001AF                     _errString_Fatal:
   767                           	callstack 0
   768  0001AF                     	ds	39
   769  0001D6                     _errString_Bound:
   770                           	callstack 0
   771  0001D6                     	ds	33
   772                           
   773                           	psect	cstackBANK0
   774  0000ED                     __pcstackBANK0:
   775                           	callstack 0
   776  0000ED                     ??_rotateObj:
   777                           
   778                           ; 1 bytes @ 0x0
   779  0000ED                     	ds	2
   780  0000EF                     rotateObj@rotAngle:
   781                           	callstack 0
   782                           
   783                           ; 1 bytes @ 0x2
   784  0000EF                     	ds	1
   785  0000F0                     rotateObj@totStep:
   786                           	callstack 0
   787                           
   788                           ; 2 bytes @ 0x3
   789  0000F0                     	ds	2
   790  0000F2                     rotateObj@i:
   791                           	callstack 0
   792                           
   793                           ; 2 bytes @ 0x5
   794  0000F2                     	ds	2
   795  0000F4                     ??_executeData:
   796                           
   797                           ; 1 bytes @ 0x7
   798  0000F4                     	ds	2
   799  0000F6                     executeData@data:
   800                           	callstack 0
   801                           
   802                           ; 2 bytes @ 0x9
   803  0000F6                     	ds	2
   804  0000F8                     executeData@errCode:
   805                           	callstack 0
   806                           
   807                           ; 1 bytes @ 0xB
   808  0000F8                     	ds	1
   809  0000F9                     ??_main:
   810                           
   811                           ; 1 bytes @ 0xC
   812  0000F9                     	ds	2
   813  0000FB                     main@errCode:
   814                           	callstack 0
   815                           
   816                           ; 1 bytes @ 0xE
   817  0000FB                     	ds	1
   818  0000FC                     main@newData:
   819                           	callstack 0
   820                           
   821                           ; 2 bytes @ 0xF
   822  0000FC                     	ds	2
   823                           
   824                           	psect	cstackCOMRAM
   825  000001                     __pcstackCOMRAM:
   826                           	callstack 0
   827  000001                     ?_retPeriod:
   828                           	callstack 0
   829  000001                     i2uartTx@ptr:
   830                           	callstack 0
   831                           
   832                           ; 2 bytes @ 0x0
   833  000001                     	ds	2
   834  000003                     i2uartTx@length:
   835                           	callstack 0
   836                           
   837                           ; 1 bytes @ 0x2
   838  000003                     	ds	1
   839  000004                     i2uartTx@i:
   840                           	callstack 0
   841                           
   842                           ; 1 bytes @ 0x3
   843  000004                     	ds	1
   844  000005                     ??i2_printError:
   845                           
   846                           ; 1 bytes @ 0x4
   847  000005                     	ds	2
   848  000007                     i2printError@errCode:
   849                           	callstack 0
   850                           
   851                           ; 1 bytes @ 0x6
   852  000007                     	ds	1
   853  000008                     ??i2_storeData:
   854                           
   855                           ; 1 bytes @ 0x7
   856  000008                     	ds	2
   857  00000A                     i2storeData@data:
   858                           	callstack 0
   859                           
   860                           ; 1 bytes @ 0x9
   861  00000A                     	ds	1
   862  00000B                     ??_isr:
   863                           
   864                           ; 1 bytes @ 0xA
   865  00000B                     	ds	6
   866  000011                     isr@temp:
   867                           	callstack 0
   868                           
   869                           ; 1 bytes @ 0x10
   870  000011                     	ds	1
   871  000012                     ??_shiftData:
   872  000012                     ?_stepMade:
   873                           	callstack 0
   874  000012                     ?_stepCounter:
   875                           	callstack 0
   876  000012                     ?_returnTouch:
   877                           	callstack 0
   878  000012                     ?_returnTherm:
   879                           	callstack 0
   880  000012                     ?_getNewSequence:
   881                           	callstack 0
   882  000012                     ?_getData:
   883                           	callstack 0
   884  000012                     ?___xxtofl:
   885                           	callstack 0
   886  000012                     uartTx@ptr:
   887                           	callstack 0
   888  000012                     tim2Init@_pwmPeriod:
   889                           	callstack 0
   890  000012                     ___xxtofl@val:
   891                           	callstack 0
   892                           
   893                           ; 4 bytes @ 0x11
   894  000012                     	ds	2
   895  000014                     shiftData@i:
   896                           	callstack 0
   897  000014                     uartTx@length:
   898                           	callstack 0
   899  000014                     stepMade@temp:
   900                           	callstack 0
   901                           
   902                           ; 1 bytes @ 0x13
   903  000014                     	ds	1
   904  000015                     resetPosition@keepMovingX:
   905                           	callstack 0
   906  000015                     uartTx@i:
   907                           	callstack 0
   908  000015                     moveToPoint@x1:
   909                           	callstack 0
   910                           
   911                           ; 2 bytes @ 0x14
   912  000015                     	ds	1
   913  000016                     ??_printError:
   914  000016                     ??___xxtofl:
   915  000016                     resetPosition@keepMovingY:
   916                           	callstack 0
   917                           
   918                           ; 1 bytes @ 0x15
   919  000016                     	ds	1
   920  000017                     resetPosition@keepMovingZ:
   921                           	callstack 0
   922  000017                     moveToPoint@y1:
   923                           	callstack 0
   924                           
   925                           ; 2 bytes @ 0x16
   926  000017                     	ds	1
   927  000018                     printError@errCode:
   928                           	callstack 0
   929                           
   930                           ; 1 bytes @ 0x17
   931  000018                     	ds	1
   932  000019                     ??_storeData:
   933  000019                     moveToPoint@x2:
   934                           	callstack 0
   935                           
   936                           ; 2 bytes @ 0x18
   937  000019                     	ds	1
   938  00001A                     ___xxtofl@sign:
   939                           	callstack 0
   940                           
   941                           ; 1 bytes @ 0x19
   942  00001A                     	ds	1
   943  00001B                     storeData@data:
   944                           	callstack 0
   945  00001B                     ___xxtofl@exp:
   946                           	callstack 0
   947  00001B                     moveToPoint@y2:
   948                           	callstack 0
   949                           
   950                           ; 2 bytes @ 0x1A
   951  00001B                     	ds	1
   952  00001C                     ___xxtofl@arg:
   953                           	callstack 0
   954                           
   955                           ; 4 bytes @ 0x1B
   956  00001C                     	ds	1
   957  00001D                     ??_moveToPoint:
   958                           
   959                           ; 1 bytes @ 0x1C
   960  00001D                     	ds	2
   961  00001F                     moveToPoint@MOT1Direction:
   962                           	callstack 0
   963                           
   964                           ; 1 bytes @ 0x1E
   965  00001F                     	ds	1
   966  000020                     ?___fldiv:
   967                           	callstack 0
   968  000020                     moveToPoint@MOT2Direction:
   969                           	callstack 0
   970  000020                     ___fldiv@b:
   971                           	callstack 0
   972                           
   973                           ; 4 bytes @ 0x1F
   974  000020                     	ds	1
   975  000021                     moveToPoint@keepMovingX:
   976                           	callstack 0
   977                           
   978                           ; 1 bytes @ 0x20
   979  000021                     	ds	1
   980  000022                     moveToPoint@keepMovingY:
   981                           	callstack 0
   982                           
   983                           ; 1 bytes @ 0x21
   984  000022                     	ds	2
   985  000024                     ___fldiv@a:
   986                           	callstack 0
   987                           
   988                           ; 4 bytes @ 0x23
   989  000024                     	ds	4
   990  000028                     ??___fldiv:
   991                           
   992                           ; 1 bytes @ 0x27
   993  000028                     	ds	4
   994  00002C                     ___fldiv@rem:
   995                           	callstack 0
   996                           
   997                           ; 4 bytes @ 0x2B
   998  00002C                     	ds	4
   999  000030                     ___fldiv@sign:
  1000                           	callstack 0
  1001                           
  1002                           ; 1 bytes @ 0x2F
  1003  000030                     	ds	1
  1004  000031                     ___fldiv@new_exp:
  1005                           	callstack 0
  1006                           
  1007                           ; 2 bytes @ 0x30
  1008  000031                     	ds	2
  1009  000033                     ___fldiv@grs:
  1010                           	callstack 0
  1011                           
  1012                           ; 4 bytes @ 0x32
  1013  000033                     	ds	4
  1014  000037                     ___fldiv@bexp:
  1015                           	callstack 0
  1016                           
  1017                           ; 1 bytes @ 0x36
  1018  000037                     	ds	1
  1019  000038                     ___fldiv@aexp:
  1020                           	callstack 0
  1021                           
  1022                           ; 1 bytes @ 0x37
  1023  000038                     	ds	1
  1024  000039                     ?___fltol:
  1025                           	callstack 0
  1026  000039                     ___fltol@f1:
  1027                           	callstack 0
  1028                           
  1029                           ; 4 bytes @ 0x38
  1030  000039                     	ds	4
  1031  00003D                     ??___fltol:
  1032                           
  1033                           ; 1 bytes @ 0x3C
  1034  00003D                     	ds	4
  1035  000041                     ___fltol@sign1:
  1036                           	callstack 0
  1037                           
  1038                           ; 1 bytes @ 0x40
  1039  000041                     	ds	1
  1040  000042                     ___fltol@exp1:
  1041                           	callstack 0
  1042                           
  1043                           ; 1 bytes @ 0x41
  1044  000042                     	ds	1
  1045                           
  1046 ;;
  1047 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1048 ;;
  1049 ;; *************** function _main *****************
  1050 ;; Defined at:
  1051 ;;		line 19 in file "main.c"
  1052 ;; Parameters:    Size  Location     Type
  1053 ;;		None
  1054 ;; Auto vars:     Size  Location     Type
  1055 ;;  newData         2   15[BANK0 ] PTR struct .
  1056 ;;		 -> newSequenceData(8), 
  1057 ;;  errCode         1   14[BANK0 ] unsigned char 
  1058 ;; Return value:  Size  Location     Type
  1059 ;;                  1    wreg      void 
  1060 ;; Registers used:
  1061 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1062 ;; Tracked objects:
  1063 ;;		On entry : 0/0
  1064 ;;		On exit  : 0/0
  1065 ;;		Unchanged: 0/0
  1066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1067 ;;      Params:         0       0       0       0       0       0       0
  1068 ;;      Locals:         0       3       0       0       0       0       0
  1069 ;;      Temps:          0       2       0       0       0       0       0
  1070 ;;      Totals:         0       5       0       0       0       0       0
  1071 ;;Total ram usage:        5 bytes
  1072 ;; Hardware stack levels required when called:    7
  1073 ;; This function calls:
  1074 ;;		_clearTM0
  1075 ;;		_executeData
  1076 ;;		_getNewSequence
  1077 ;;		_initADC
  1078 ;;		_initPinMotors
  1079 ;;		_interruptInit
  1080 ;;		_newSequence
  1081 ;;		_printError
  1082 ;;		_readSeq
  1083 ;;		_reduceSeq
  1084 ;;		_resetNewSequence
  1085 ;;		_resetPosition
  1086 ;;		_shiftData
  1087 ;;		_storeData
  1088 ;;		_tim0Init
  1089 ;;		_tim1Init
  1090 ;;		_tim2Init
  1091 ;;		_usartInit
  1092 ;; This function is called by:
  1093 ;;		Startup code after reset
  1094 ;; This function uses a non-reentrant model
  1095 ;;
  1096                           
  1097                           	psect	text0
  1098  001508                     __ptext0:
  1099                           	callstack 0
  1100  001508                     _main:
  1101                           	callstack 24
  1102  001508  FFFF               	dw	65535	; assembler added errata NOP
  1103                           
  1104                           ;main.c: 23:     interruptInit();
  1105  00150A  ECDE  F011         	call	_interruptInit	;wreg free
  1106  00150E                     
  1107                           ;main.c: 24:     initPinMotors();
  1108  00150E  EC28  F012         	call	_initPinMotors	;wreg free
  1109  001512                     
  1110                           ;main.c: 25:     initADC();
  1111  001512  EC3B  F012         	call	_initADC	;wreg free
  1112  001516                     
  1113                           ;main.c: 26:     usartInit();
  1114  001516  EC4E  F012         	call	_usartInit	;wreg free
  1115  00151A                     
  1116                           ;main.c: 27:     tim0Init();
  1117  00151A  EC71  F012         	call	_tim0Init	;wreg free
  1118  00151E                     
  1119                           ;main.c: 28:     tim1Init();
  1120  00151E  EC8B  F012         	call	_tim1Init	;wreg free
  1121  001522                     
  1122                           ;main.c: 29:     tim2Init(10);
  1123  001522  0E00               	movlw	0
  1124  001524  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1125  001526  0E0A               	movlw	10
  1126  001528  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1127  00152A  EC5D  F012         	call	_tim2Init	;wreg free
  1128  00152E                     
  1129                           ;main.c: 32:     errCode = resetPosition();
  1130  00152E  EC85  F008         	call	_resetPosition	;wreg free
  1131  001532  0100               	movlb	0	; () banked
  1132  001534  6FFB               	movwf	main@errCode& (0+255),b
  1133  001536                     
  1134                           ; BSR set to: 0
  1135                           ;main.c: 33:     if(errCode != 0){
  1136  001536  51FB               	movf	main@errCode& (0+255),w,b
  1137  001538  B4D8               	btfsc	status,2,c
  1138  00153A  EFA1  F00A         	goto	u3821
  1139  00153E  EFA4  F00A         	goto	u3820
  1140  001542                     u3821:
  1141  001542  FFFF               	dw	65535	; assembler added errata NOP
  1142  001544  EFAB  F00A         	goto	l333
  1143  001548                     u3820:
  1144  001548  FFFF               	dw	65535	; assembler added errata NOP
  1145  00154A                     
  1146                           ; BSR set to: 0
  1147                           ;main.c: 34:         printError(errCode);
  1148  00154A  51FB               	movf	main@errCode& (0+255),w,b
  1149  00154C  EC92  F00E         	call	_printError
  1150  001550                     l334:
  1151  001550  FFFF               	dw	65535	; assembler added errata NOP
  1152  001552  EFA8  F00A         	goto	l334
  1153  001556                     l333:
  1154  001556  FFFF               	dw	65535	; assembler added errata NOP
  1155                           
  1156                           ; BSR set to: 0
  1157                           ;main.c: 39:     RCSTA1bits.CREN = 1;
  1158  001558  88AB               	bsf	171,4,c	;volatile
  1159  00155A                     l4605:
  1160  00155A  FFFF               	dw	65535	; assembler added errata NOP
  1161                           
  1162                           ;main.c: 42:         if(newSequence()){
  1163  00155C  ECF7  F012         	call	_newSequence	;wreg free
  1164  001560  0900               	iorlw	0
  1165  001562  B4D8               	btfsc	status,2,c
  1166  001564  EFB6  F00A         	goto	u3831
  1167  001568  EFB9  F00A         	goto	u3830
  1168  00156C                     u3831:
  1169  00156C  FFFF               	dw	65535	; assembler added errata NOP
  1170  00156E  EF3B  F00B         	goto	l4633
  1171  001572                     u3830:
  1172  001572  FFFF               	dw	65535	; assembler added errata NOP
  1173  001574                     
  1174                           ;main.c: 43:             t_newSequence* newData = getNewSequence();
  1175  001574  EC92  F012         	call	_getNewSequence	;wreg free
  1176  001578  C012  F0FC         	movff	?_getNewSequence,main@newData
  1177  00157C  C013  F0FD         	movff	?_getNewSequence+1,main@newData+1
  1178  001580                     
  1179                           ;main.c: 45:             newFeeder[0] = newData ->init_posX;
  1180  001580  0100               	movlb	0	; () banked
  1181  001582  EE20 F002          	lfsr	2,2
  1182  001586  51FC               	movf	main@newData& (0+255),w,b
  1183  001588  26D9               	addwf	fsr2l,f,c
  1184  00158A  51FD               	movf	(main@newData+1)& (0+255),w,b
  1185  00158C  22DA               	addwfc	fsr2h,f,c
  1186  00158E  50DF               	movf	indf2,w,c
  1187  001590  6E4C               	movwf	_newFeeder^0,c
  1188  001592                     
  1189                           ; BSR set to: 0
  1190                           ;main.c: 46:             newFeeder[1] = newData ->init_posY;
  1191  001592  EE20 F003          	lfsr	2,3
  1192  001596  51FC               	movf	main@newData& (0+255),w,b
  1193  001598  26D9               	addwf	fsr2l,f,c
  1194  00159A  51FD               	movf	(main@newData+1)& (0+255),w,b
  1195  00159C  22DA               	addwfc	fsr2h,f,c
  1196  00159E  50DF               	movf	indf2,w,c
  1197  0015A0  6E4D               	movwf	(_newFeeder+1)^0,c
  1198  0015A2                     
  1199                           ; BSR set to: 0
  1200                           ;main.c: 50:             RCSTAbits.CREN = 0;
  1201  0015A2  98AB               	bcf	171,4,c	;volatile
  1202  0015A4                     
  1203                           ; BSR set to: 0
  1204                           ;main.c: 55:             if(newData ->end_posX > maxFeedX || newData ->end_posY > maxFee
      +                          dY){
  1205  0015A4  EE20 F005          	lfsr	2,5
  1206  0015A8  51FC               	movf	main@newData& (0+255),w,b
  1207  0015AA  26D9               	addwf	fsr2l,f,c
  1208  0015AC  51FD               	movf	(main@newData+1)& (0+255),w,b
  1209  0015AE  22DA               	addwfc	fsr2h,f,c
  1210  0015B0  0E3D               	movlw	61
  1211  0015B2  60DF               	cpfslt	indf2,c
  1212  0015B4  EFDE  F00A         	goto	u3841
  1213  0015B8  EFE1  F00A         	goto	u3840
  1214  0015BC                     u3841:
  1215  0015BC  FFFF               	dw	65535	; assembler added errata NOP
  1216  0015BE  EFF1  F00A         	goto	l4619
  1217  0015C2                     u3840:
  1218  0015C2  FFFF               	dw	65535	; assembler added errata NOP
  1219  0015C4                     
  1220                           ; BSR set to: 0
  1221  0015C4  EE20 F006          	lfsr	2,6
  1222  0015C8  51FC               	movf	main@newData& (0+255),w,b
  1223  0015CA  26D9               	addwf	fsr2l,f,c
  1224  0015CC  51FD               	movf	(main@newData+1)& (0+255),w,b
  1225  0015CE  22DA               	addwfc	fsr2h,f,c
  1226  0015D0  0EC8               	movlw	200
  1227  0015D2  64DF               	cpfsgt	indf2,c
  1228  0015D4  EFEE  F00A         	goto	u3851
  1229  0015D8  EFF1  F00A         	goto	u3850
  1230  0015DC                     u3851:
  1231  0015DC  FFFF               	dw	65535	; assembler added errata NOP
  1232  0015DE  EFF6  F00A         	goto	l4621
  1233  0015E2                     u3850:
  1234  0015E2                     l4619:
  1235  0015E2  FFFF               	dw	65535	; assembler added errata NOP
  1236                           
  1237                           ; BSR set to: 0
  1238                           ;main.c: 56:                 errCode = 5;
  1239  0015E4  0E05               	movlw	5
  1240  0015E6  6FFB               	movwf	main@errCode& (0+255),b
  1241                           
  1242                           ;main.c: 57:             }else{
  1243  0015E8  EF0A  F00B         	goto	l4623
  1244  0015EC                     l4621:
  1245  0015EC  FFFF               	dw	65535	; assembler added errata NOP
  1246                           
  1247                           ; BSR set to: 0
  1248                           ;main.c: 58:                 storeData(newData ->end_posX);
  1249  0015EE  EE20 F005          	lfsr	2,5
  1250  0015F2  51FC               	movf	main@newData& (0+255),w,b
  1251  0015F4  26D9               	addwf	fsr2l,f,c
  1252  0015F6  51FD               	movf	(main@newData+1)& (0+255),w,b
  1253  0015F8  22DA               	addwfc	fsr2h,f,c
  1254  0015FA  50DF               	movf	indf2,w,c
  1255  0015FC  EC59  F00B         	call	_storeData
  1256                           
  1257                           ;main.c: 59:                 storeData(newData ->end_posY);
  1258  001600  0100               	movlb	0	; () banked
  1259  001602  EE20 F006          	lfsr	2,6
  1260  001606  51FC               	movf	main@newData& (0+255),w,b
  1261  001608  26D9               	addwf	fsr2l,f,c
  1262  00160A  51FD               	movf	(main@newData+1)& (0+255),w,b
  1263  00160C  22DA               	addwfc	fsr2h,f,c
  1264  00160E  50DF               	movf	indf2,w,c
  1265  001610  EC59  F00B         	call	_storeData
  1266  001614                     l4623:
  1267  001614  FFFF               	dw	65535	; assembler added errata NOP
  1268                           
  1269                           ;main.c: 63:             if(errCode == 0){
  1270  001616  0100               	movlb	0	; () banked
  1271  001618  51FB               	movf	main@errCode& (0+255),w,b
  1272  00161A  A4D8               	btfss	status,2,c
  1273  00161C  EF12  F00B         	goto	u3861
  1274  001620  EF15  F00B         	goto	u3860
  1275  001624                     u3861:
  1276  001624  FFFF               	dw	65535	; assembler added errata NOP
  1277  001626  EF33  F00B         	goto	l4627
  1278  00162A                     u3860:
  1279  00162A  FFFF               	dw	65535	; assembler added errata NOP
  1280  00162C                     
  1281                           ; BSR set to: 0
  1282                           ;main.c: 65:                 storeData(0);
  1283  00162C  0E00               	movlw	0
  1284  00162E  EC59  F00B         	call	_storeData
  1285                           
  1286                           ;main.c: 66:                 storeData(0xFF);
  1287  001632  0EFF               	movlw	255
  1288  001634  EC59  F00B         	call	_storeData
  1289                           
  1290                           ;main.c: 67:                 storeData(newData ->end_rot - newData ->init_rot);
  1291  001638  0100               	movlb	0	; () banked
  1292  00163A  EE20 F004          	lfsr	2,4
  1293  00163E  51FC               	movf	main@newData& (0+255),w,b
  1294  001640  26D9               	addwf	fsr2l,f,c
  1295  001642  51FD               	movf	(main@newData+1)& (0+255),w,b
  1296  001644  22DA               	addwfc	fsr2h,f,c
  1297  001646  50DF               	movf	indf2,w,c
  1298  001648  6FF9               	movwf	??_main& (0+255),b
  1299  00164A  EE20 F007          	lfsr	2,7
  1300  00164E  51FC               	movf	main@newData& (0+255),w,b
  1301  001650  26D9               	addwf	fsr2l,f,c
  1302  001652  51FD               	movf	(main@newData+1)& (0+255),w,b
  1303  001654  22DA               	addwfc	fsr2h,f,c
  1304  001656  50DF               	movf	indf2,w,c
  1305  001658  6FFA               	movwf	(??_main+1)& (0+255),b
  1306  00165A  51F9               	movf	??_main& (0+255),w,b
  1307  00165C  5DFA               	subwf	(??_main+1)& (0+255),w,b
  1308  00165E  EC59  F00B         	call	_storeData
  1309                           
  1310                           ;main.c: 68:             }else{
  1311  001662  EF37  F00B         	goto	l4629
  1312  001666                     l4627:
  1313  001666  FFFF               	dw	65535	; assembler added errata NOP
  1314                           
  1315                           ; BSR set to: 0
  1316                           ;main.c: 69:                 printError(errCode);
  1317  001668  51FB               	movf	main@errCode& (0+255),w,b
  1318  00166A  EC92  F00E         	call	_printError
  1319  00166E                     l4629:
  1320  00166E  FFFF               	dw	65535	; assembler added errata NOP
  1321                           
  1322                           ;main.c: 73:             RCSTAbits.CREN = 1;
  1323  001670  88AB               	bsf	171,4,c	;volatile
  1324  001672                     
  1325                           ;main.c: 76:             resetNewSequence();
  1326  001672  ECC7  F012         	call	_resetNewSequence	;wreg free
  1327  001676                     l4633:
  1328  001676  FFFF               	dw	65535	; assembler added errata NOP
  1329                           
  1330                           ;main.c: 78:         if(readSeq()){
  1331  001678  ECF3  F012         	call	_readSeq	;wreg free
  1332  00167C  0900               	iorlw	0
  1333  00167E  B4D8               	btfsc	status,2,c
  1334  001680  EF44  F00B         	goto	u3871
  1335  001684  EF47  F00B         	goto	u3870
  1336  001688                     u3871:
  1337  001688  FFFF               	dw	65535	; assembler added errata NOP
  1338  00168A  EFAD  F00A         	goto	l4605
  1339  00168E                     u3870:
  1340  00168E  FFFF               	dw	65535	; assembler added errata NOP
  1341  001690                     
  1342                           ;main.c: 82:             errCode = executeData();
  1343  001690  EC05  F007         	call	_executeData	;wreg free
  1344  001694  0100               	movlb	0	; () banked
  1345  001696  6FFB               	movwf	main@errCode& (0+255),b
  1346  001698                     
  1347                           ; BSR set to: 0
  1348                           ;main.c: 84:             printError(errCode);
  1349  001698  51FB               	movf	main@errCode& (0+255),w,b
  1350  00169A  EC92  F00E         	call	_printError
  1351  00169E                     
  1352                           ;main.c: 87:             clearTM0();
  1353  00169E  ECA0  F012         	call	_clearTM0	;wreg free
  1354  0016A2                     
  1355                           ;main.c: 91:             reduceSeq();
  1356  0016A2  ECEF  F012         	call	_reduceSeq	;wreg free
  1357  0016A6                     
  1358                           ;main.c: 92:             shiftData();
  1359  0016A6  EC3C  F011         	call	_shiftData	;wreg free
  1360  0016AA  EFAD  F00A         	goto	l4605
  1361  0016AE  EFD2  F000         	goto	start
  1362  0016B2                     __end_of_main:
  1363                           	callstack 0
  1364                           
  1365 ;; *************** function _usartInit *****************
  1366 ;; Defined at:
  1367 ;;		line 92 in file "usart.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;		None
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;		None
  1372 ;; Return value:  Size  Location     Type
  1373 ;;                  1    wreg      void 
  1374 ;; Registers used:
  1375 ;;		wreg, status,2
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1381 ;;      Params:         0       0       0       0       0       0       0
  1382 ;;      Locals:         0       0       0       0       0       0       0
  1383 ;;      Temps:          0       0       0       0       0       0       0
  1384 ;;      Totals:         0       0       0       0       0       0       0
  1385 ;;Total ram usage:        0 bytes
  1386 ;; Hardware stack levels used:    1
  1387 ;; Hardware stack levels required when called:    4
  1388 ;; This function calls:
  1389 ;;		Nothing
  1390 ;; This function is called by:
  1391 ;;		_main
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           	psect	text1
  1396  00249C                     __ptext1:
  1397                           	callstack 0
  1398  00249C                     _usartInit:
  1399                           	callstack 0
  1400  00249C  FFFF               	dw	65535	; assembler added errata NOP
  1401  00249E                     
  1402                           ;usart.c: 94:     TRISCbits.TRISC6 = 0;
  1403  00249E  9C94               	bcf	148,6,c	;volatile
  1404                           
  1405                           ;usart.c: 95:     TRISCbits.TRISC7 = 1;
  1406  0024A0  8E94               	bsf	148,7,c	;volatile
  1407                           
  1408                           ;usart.c: 97:     TXSTAbits.TX9 = 0;
  1409  0024A2  9CAC               	bcf	172,6,c	;volatile
  1410                           
  1411                           ;usart.c: 98:     TXSTAbits.TXEN = 1;
  1412  0024A4  8AAC               	bsf	172,5,c	;volatile
  1413                           
  1414                           ;usart.c: 99:     TXSTAbits.SYNC = 0;
  1415  0024A6  98AC               	bcf	172,4,c	;volatile
  1416                           
  1417                           ;usart.c: 100:     TXSTAbits.BRGH = 0;
  1418  0024A8  94AC               	bcf	172,2,c	;volatile
  1419                           
  1420                           ;usart.c: 102:     RCSTAbits.SPEN = 1;
  1421  0024AA  8EAB               	bsf	171,7,c	;volatile
  1422                           
  1423                           ;usart.c: 103:     RCSTAbits.RX9 = 0;
  1424  0024AC  9CAB               	bcf	171,6,c	;volatile
  1425                           
  1426                           ;usart.c: 104:     RCSTAbits.CREN = 0;
  1427  0024AE  98AB               	bcf	171,4,c	;volatile
  1428                           
  1429                           ;usart.c: 105:     RCSTAbits.ADDEN = 0;
  1430  0024B0  96AB               	bcf	171,3,c	;volatile
  1431  0024B2                     
  1432                           ;usart.c: 108:     SPBRG = 25;
  1433  0024B2  0E19               	movlw	25
  1434  0024B4  6EAF               	movwf	175,c	;volatile
  1435  0024B6  0012               	return		;funcret
  1436  0024B8  FFFF               	dw	65535	; errata NOP
  1437  0024BA                     __end_of_usartInit:
  1438                           	callstack 0
  1439                           
  1440 ;; *************** function _tim2Init *****************
  1441 ;; Defined at:
  1442 ;;		line 46 in file "timer.c"
  1443 ;; Parameters:    Size  Location     Type
  1444 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1445 ;; Auto vars:     Size  Location     Type
  1446 ;;		None
  1447 ;; Return value:  Size  Location     Type
  1448 ;;                  1    wreg      void 
  1449 ;; Registers used:
  1450 ;;		wreg, status,2
  1451 ;; Tracked objects:
  1452 ;;		On entry : 0/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1456 ;;      Params:         2       0       0       0       0       0       0
  1457 ;;      Locals:         0       0       0       0       0       0       0
  1458 ;;      Temps:          0       0       0       0       0       0       0
  1459 ;;      Totals:         2       0       0       0       0       0       0
  1460 ;;Total ram usage:        2 bytes
  1461 ;; Hardware stack levels used:    1
  1462 ;; Hardware stack levels required when called:    4
  1463 ;; This function calls:
  1464 ;;		Nothing
  1465 ;; This function is called by:
  1466 ;;		_main
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           	psect	text2
  1471  0024BA                     __ptext2:
  1472                           	callstack 0
  1473  0024BA                     _tim2Init:
  1474                           	callstack 0
  1475  0024BA  FFFF               	dw	65535	; assembler added errata NOP
  1476  0024BC                     
  1477                           ;timer.c: 47:     T2CONbits.TMR2ON = 0;
  1478  0024BC  94CA               	bcf	202,2,c	;volatile
  1479  0024BE                     
  1480                           ;timer.c: 48:     T2CONbits.T2CKPS = 0x10;
  1481  0024BE  0EFC               	movlw	-4
  1482  0024C0  16CA               	andwf	202,f,c	;volatile
  1483  0024C2                     
  1484                           ;timer.c: 51:     pwmPeriod = _pwmPeriod;
  1485  0024C2  C012  F046         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1486  0024C6  C013  F047         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1487  0024CA  0012               	return		;funcret
  1488  0024CC  FFFF               	dw	65535	; errata NOP
  1489  0024CE                     __end_of_tim2Init:
  1490                           	callstack 0
  1491                           
  1492 ;; *************** function _tim1Init *****************
  1493 ;; Defined at:
  1494 ;;		line 33 in file "timer.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;		None
  1497 ;; Auto vars:     Size  Location     Type
  1498 ;;		None
  1499 ;; Return value:  Size  Location     Type
  1500 ;;                  1    wreg      void 
  1501 ;; Registers used:
  1502 ;;		wreg, status,2
  1503 ;; Tracked objects:
  1504 ;;		On entry : 0/0
  1505 ;;		On exit  : 0/0
  1506 ;;		Unchanged: 0/0
  1507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1508 ;;      Params:         0       0       0       0       0       0       0
  1509 ;;      Locals:         0       0       0       0       0       0       0
  1510 ;;      Temps:          0       0       0       0       0       0       0
  1511 ;;      Totals:         0       0       0       0       0       0       0
  1512 ;;Total ram usage:        0 bytes
  1513 ;; Hardware stack levels used:    1
  1514 ;; Hardware stack levels required when called:    4
  1515 ;; This function calls:
  1516 ;;		Nothing
  1517 ;; This function is called by:
  1518 ;;		_main
  1519 ;; This function uses a non-reentrant model
  1520 ;;
  1521                           
  1522                           	psect	text3
  1523  002516                     __ptext3:
  1524                           	callstack 0
  1525  002516                     _tim1Init:
  1526                           	callstack 0
  1527  002516  FFFF               	dw	65535	; assembler added errata NOP
  1528  002518                     
  1529                           ;timer.c: 34:     T1CONbits.T1CKPS = 0x03;
  1530  002518  0E30               	movlw	48
  1531  00251A  12CD               	iorwf	205,f,c	;volatile
  1532  00251C                     
  1533                           ;timer.c: 35:     T1CONbits.TMR1CS = 0;
  1534  00251C  92CD               	bcf	205,1,c	;volatile
  1535  00251E                     
  1536                           ;timer.c: 37:     T1CONbits.TMR1ON = 1;
  1537  00251E  80CD               	bsf	205,0,c	;volatile
  1538  002520  0012               	return		;funcret
  1539  002522  FFFF               	dw	65535	; errata NOP
  1540  002524                     __end_of_tim1Init:
  1541                           	callstack 0
  1542                           
  1543 ;; *************** function _tim0Init *****************
  1544 ;; Defined at:
  1545 ;;		line 21 in file "timer.c"
  1546 ;; Parameters:    Size  Location     Type
  1547 ;;		None
  1548 ;; Auto vars:     Size  Location     Type
  1549 ;;		None
  1550 ;; Return value:  Size  Location     Type
  1551 ;;                  1    wreg      void 
  1552 ;; Registers used:
  1553 ;;		wreg, status,2
  1554 ;; Tracked objects:
  1555 ;;		On entry : 0/0
  1556 ;;		On exit  : 0/0
  1557 ;;		Unchanged: 0/0
  1558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1559 ;;      Params:         0       0       0       0       0       0       0
  1560 ;;      Locals:         0       0       0       0       0       0       0
  1561 ;;      Temps:          0       0       0       0       0       0       0
  1562 ;;      Totals:         0       0       0       0       0       0       0
  1563 ;;Total ram usage:        0 bytes
  1564 ;; Hardware stack levels used:    1
  1565 ;; Hardware stack levels required when called:    4
  1566 ;; This function calls:
  1567 ;;		Nothing
  1568 ;; This function is called by:
  1569 ;;		_main
  1570 ;; This function uses a non-reentrant model
  1571 ;;
  1572                           
  1573                           	psect	text4
  1574  0024E2                     __ptext4:
  1575                           	callstack 0
  1576  0024E2                     _tim0Init:
  1577                           	callstack 0
  1578  0024E2  FFFF               	dw	65535	; assembler added errata NOP
  1579  0024E4                     
  1580                           ;timer.c: 22:     T0CONbits.TMR0ON = 0;
  1581  0024E4  9ED5               	bcf	213,7,c	;volatile
  1582                           
  1583                           ;timer.c: 23:     T0CONbits.T08BIT = 0;
  1584  0024E6  9CD5               	bcf	213,6,c	;volatile
  1585                           
  1586                           ;timer.c: 24:     T0CONbits.T0CS = 0;
  1587  0024E8  9AD5               	bcf	213,5,c	;volatile
  1588                           
  1589                           ;timer.c: 25:     T0CONbits.PSA = 1;
  1590  0024EA  86D5               	bsf	213,3,c	;volatile
  1591  0024EC                     
  1592                           ;timer.c: 26:     T0CONbits.T0PS = 0x07;
  1593  0024EC  0E07               	movlw	7
  1594  0024EE  12D5               	iorwf	213,f,c	;volatile
  1595  0024F0  0012               	return		;funcret
  1596  0024F2  FFFF               	dw	65535	; errata NOP
  1597  0024F4                     __end_of_tim0Init:
  1598                           	callstack 0
  1599                           
  1600 ;; *************** function _storeData *****************
  1601 ;; Defined at:
  1602 ;;		line 164 in file "usart.c"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;  data            1    wreg     unsigned char 
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;  data            1   26[COMRAM] unsigned char 
  1607 ;; Return value:  Size  Location     Type
  1608 ;;                  1    wreg      void 
  1609 ;; Registers used:
  1610 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1611 ;; Tracked objects:
  1612 ;;		On entry : 0/0
  1613 ;;		On exit  : 0/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1616 ;;      Params:         0       0       0       0       0       0       0
  1617 ;;      Locals:         1       0       0       0       0       0       0
  1618 ;;      Temps:          2       0       0       0       0       0       0
  1619 ;;      Totals:         3       0       0       0       0       0       0
  1620 ;;Total ram usage:        3 bytes
  1621 ;; Hardware stack levels used:    1
  1622 ;; Hardware stack levels required when called:    6
  1623 ;; This function calls:
  1624 ;;		_printError
  1625 ;; This function is called by:
  1626 ;;		_main
  1627 ;; This function uses a non-reentrant model
  1628 ;;
  1629                           
  1630                           	psect	text5
  1631  0016B2                     __ptext5:
  1632                           	callstack 0
  1633  0016B2                     _storeData:
  1634                           	callstack 0
  1635  0016B2  FFFF               	dw	65535	; assembler added errata NOP
  1636                           
  1637                           ;incstack = 0
  1638                           ;storeData@data stored from wreg
  1639  0016B4  6E1B               	movwf	storeData@data^0,c
  1640  0016B6                     
  1641                           ;usart.c: 166:     static unsigned char counter = 0;;usart.c: 167:     static unsigned c
      +                          har mexLength = 5;;usart.c: 168:     static unsigned char command;;usart.c: 169:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 173:     receivedMex[counter] = data;
  1642  0016B6  0EC8               	movlw	low storeData@receivedMex
  1643  0016B8  2455               	addwf	storeData@counter^0,w,c
  1644  0016BA  6ED9               	movwf	fsr2l,c
  1645  0016BC  6ADA               	clrf	fsr2h,c
  1646  0016BE  0E00               	movlw	high storeData@receivedMex
  1647  0016C0  22DA               	addwfc	fsr2h,f,c
  1648  0016C2  C01B  FFDF         	movff	storeData@data,indf2
  1649  0016C6                     
  1650                           ;usart.c: 175:     counter++;
  1651  0016C6  2A55               	incf	storeData@counter^0,f,c
  1652                           
  1653                           ;usart.c: 178:     switch(receivedMex[0]){
  1654  0016C8  EF75  F00B         	goto	l4429
  1655  0016CC                     l4421:
  1656  0016CC  FFFF               	dw	65535	; assembler added errata NOP
  1657                           
  1658                           ; BSR set to: 0
  1659                           ;usart.c: 180:             mexLength = 5;
  1660  0016CE  0E05               	movlw	5
  1661  0016D0  6E6C               	movwf	storeData@mexLength^0,c
  1662                           
  1663                           ;usart.c: 181:             break;
  1664  0016D2  EF91  F00B         	goto	l4431
  1665  0016D6                     l4423:
  1666  0016D6  FFFF               	dw	65535	; assembler added errata NOP
  1667                           
  1668                           ; BSR set to: 0
  1669                           ;usart.c: 183:             mexLength = 9;
  1670  0016D8  0E09               	movlw	9
  1671  0016DA  6E6C               	movwf	storeData@mexLength^0,c
  1672                           
  1673                           ;usart.c: 184:             break;
  1674  0016DC  EF91  F00B         	goto	l4431
  1675  0016E0                     l4425:
  1676  0016E0  FFFF               	dw	65535	; assembler added errata NOP
  1677                           
  1678                           ; BSR set to: 0
  1679                           ;usart.c: 186:             mexLength = 1;
  1680  0016E2  0E01               	movlw	1
  1681  0016E4  6E6C               	movwf	storeData@mexLength^0,c
  1682                           
  1683                           ;usart.c: 187:             break;
  1684  0016E6  EF91  F00B         	goto	l4431
  1685  0016EA                     l4429:
  1686  0016EA  FFFF               	dw	65535	; assembler added errata NOP
  1687  0016EC  0100               	movlb	0	; () banked
  1688  0016EE  51C8               	movf	storeData@receivedMex& (0+255),w,b
  1689  0016F0  6E19               	movwf	??_storeData^0,c
  1690  0016F2  6A1A               	clrf	(??_storeData+1)^0,c
  1691                           
  1692                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1693                           ; Switch size 1, requested type "simple"
  1694                           ; Number of cases is 1, Range of values is 0 to 0
  1695                           ; switch strategies available:
  1696                           ; Name         Instructions Cycles
  1697                           ; simple_byte            4     3 (average)
  1698                           ;	Chosen strategy is simple_byte
  1699  0016F4  501A               	movf	(??_storeData+1)^0,w,c
  1700  0016F6  0A00               	xorlw	0	; case 0
  1701  0016F8  B4D8               	btfsc	status,2,c
  1702  0016FA  EF81  F00B         	goto	l4825
  1703  0016FE  EF91  F00B         	goto	l4431
  1704  001702                     l4825:
  1705  001702  FFFF               	dw	65535	; assembler added errata NOP
  1706                           
  1707                           ; BSR set to: 0
  1708                           ; Switch size 1, requested type "simple"
  1709                           ; Number of cases is 3, Range of values is 0 to 2
  1710                           ; switch strategies available:
  1711                           ; Name         Instructions Cycles
  1712                           ; simple_byte           10     6 (average)
  1713                           ;	Chosen strategy is simple_byte
  1714  001704  5019               	movf	??_storeData^0,w,c
  1715  001706  0A00               	xorlw	0	; case 0
  1716  001708  B4D8               	btfsc	status,2,c
  1717  00170A  EF66  F00B         	goto	l4421
  1718  00170E  0A01               	xorlw	1	; case 1
  1719  001710  B4D8               	btfsc	status,2,c
  1720  001712  EF6B  F00B         	goto	l4423
  1721  001716  0A03               	xorlw	3	; case 2
  1722  001718  B4D8               	btfsc	status,2,c
  1723  00171A  EF70  F00B         	goto	l4425
  1724  00171E  EF91  F00B         	goto	l4431
  1725  001722                     l4431:
  1726  001722  FFFF               	dw	65535	; assembler added errata NOP
  1727                           
  1728                           ; BSR set to: 0
  1729                           ;usart.c: 194:     if(counter >= mexLength){
  1730  001724  506C               	movf	storeData@mexLength^0,w,c
  1731  001726  5C55               	subwf	storeData@counter^0,w,c
  1732  001728  A0D8               	btfss	status,0,c
  1733  00172A  EF99  F00B         	goto	u3741
  1734  00172E  EF9C  F00B         	goto	u3740
  1735  001732                     u3741:
  1736  001732  FFFF               	dw	65535	; assembler added errata NOP
  1737  001734  EF14  F00C         	goto	l588
  1738  001738                     u3740:
  1739  001738  FFFF               	dw	65535	; assembler added errata NOP
  1740  00173A                     
  1741                           ; BSR set to: 0
  1742                           ;usart.c: 195:         counter = 0;
  1743  00173A  0E00               	movlw	0
  1744  00173C  6E55               	movwf	storeData@counter^0,c
  1745                           
  1746                           ;usart.c: 198:         switch(receivedMex[0]){
  1747  00173E  EFF9  F00B         	goto	l4453
  1748  001742                     l4435:
  1749  001742  FFFF               	dw	65535	; assembler added errata NOP
  1750                           
  1751                           ; BSR set to: 0
  1752                           ;usart.c: 200:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  1753  001744  5058               	movf	_dataCounter^0,w,c
  1754  001746  0D04               	mullw	4
  1755  001748  0ED1               	movlw	low _dataSequence
  1756  00174A  24F3               	addwf	243,w,c
  1757  00174C  6ED9               	movwf	fsr2l,c
  1758  00174E  0E00               	movlw	high _dataSequence
  1759  001750  20F4               	addwfc	prodh,w,c
  1760  001752  6EDA               	movwf	fsr2h,c
  1761  001754  C0C9  FFDF         	movff	storeData@receivedMex+1,indf2
  1762                           
  1763                           ;usart.c: 201:                 dataSequence[dataCounter].posX = receivedMex[2] * 10;
  1764  001758  5058               	movf	_dataCounter^0,w,c
  1765  00175A  0D04               	mullw	4
  1766  00175C  0ED2               	movlw	low (_dataSequence+1)
  1767  00175E  24F3               	addwf	243,w,c
  1768  001760  6ED9               	movwf	fsr2l,c
  1769  001762  0E00               	movlw	high (_dataSequence+1)
  1770  001764  20F4               	addwfc	prodh,w,c
  1771  001766  6EDA               	movwf	fsr2h,c
  1772  001768  51CA               	movf	(storeData@receivedMex+2)& (0+255),w,b
  1773  00176A  0D0A               	mullw	10
  1774  00176C  CFF3 FFDF          	movff	prodl,indf2
  1775                           
  1776                           ;usart.c: 202:                 dataSequence[dataCounter].posY = receivedMex[3] * 10;
  1777  001770  5058               	movf	_dataCounter^0,w,c
  1778  001772  0D04               	mullw	4
  1779  001774  0ED3               	movlw	low (_dataSequence+2)
  1780  001776  24F3               	addwf	243,w,c
  1781  001778  6ED9               	movwf	fsr2l,c
  1782  00177A  0E00               	movlw	high (_dataSequence+2)
  1783  00177C  20F4               	addwfc	prodh,w,c
  1784  00177E  6EDA               	movwf	fsr2h,c
  1785  001780  51CB               	movf	(storeData@receivedMex+3)& (0+255),w,b
  1786  001782  0D0A               	mullw	10
  1787  001784  CFF3 FFDF          	movff	prodl,indf2
  1788                           
  1789                           ;usart.c: 203:                 dataSequence[dataCounter].rotation = receivedMex[4];
  1790  001788  5058               	movf	_dataCounter^0,w,c
  1791  00178A  0D04               	mullw	4
  1792  00178C  0ED4               	movlw	low (_dataSequence+3)
  1793  00178E  24F3               	addwf	243,w,c
  1794  001790  6ED9               	movwf	fsr2l,c
  1795  001792  0E00               	movlw	high (_dataSequence+3)
  1796  001794  20F4               	addwfc	prodh,w,c
  1797  001796  6EDA               	movwf	fsr2h,c
  1798  001798  C0CC  FFDF         	movff	storeData@receivedMex+4,indf2
  1799  00179C                     
  1800                           ; BSR set to: 0
  1801                           ;usart.c: 205:                 dataCounter++;
  1802  00179C  2A58               	incf	_dataCounter^0,f,c
  1803                           
  1804                           ;usart.c: 206:                 break;
  1805  00179E  EF14  F00C         	goto	l588
  1806  0017A2                     l585:
  1807  0017A2  FFFF               	dw	65535	; assembler added errata NOP
  1808                           
  1809                           ; BSR set to: 0
  1810                           ;usart.c: 209:                 newSequenceData.L = receivedMex[1];
  1811  0017A4  C0C9  F0E5         	movff	storeData@receivedMex+1,_newSequenceData
  1812                           
  1813                           ;usart.c: 210:                 newSequenceData.W = receivedMex[2];
  1814  0017A8  C0CA  F0E6         	movff	storeData@receivedMex+2,_newSequenceData+1
  1815  0017AC                     
  1816                           ; BSR set to: 0
  1817                           ;usart.c: 211:                 newSequenceData.init_posX = receivedMex[3] * 10;
  1818  0017AC  51CB               	movf	(storeData@receivedMex+3)& (0+255),w,b
  1819  0017AE  0D0A               	mullw	10
  1820  0017B0  CFF3 F0E7          	movff	prodl,_newSequenceData+2
  1821                           
  1822                           ;usart.c: 212:                 newSequenceData.init_posY = receivedMex[4] * 10;
  1823  0017B4  51CC               	movf	(storeData@receivedMex+4)& (0+255),w,b
  1824  0017B6  0D0A               	mullw	10
  1825  0017B8  CFF3 F0E8          	movff	prodl,_newSequenceData+3
  1826  0017BC                     
  1827                           ; BSR set to: 0
  1828                           ;usart.c: 213:                 newSequenceData.init_rot = receivedMex[5];
  1829  0017BC  C0CD  F0E9         	movff	storeData@receivedMex+5,_newSequenceData+4
  1830                           
  1831                           ;usart.c: 214:                 newSequenceData.end_posX = receivedMex[6] * 10;
  1832  0017C0  51CE               	movf	(storeData@receivedMex+6)& (0+255),w,b
  1833  0017C2  0D0A               	mullw	10
  1834  0017C4  CFF3 F0EA          	movff	prodl,_newSequenceData+5
  1835                           
  1836                           ;usart.c: 215:                 newSequenceData.end_posY = receivedMex[7] * 10;
  1837  0017C8  51CF               	movf	(storeData@receivedMex+7)& (0+255),w,b
  1838  0017CA  0D0A               	mullw	10
  1839  0017CC  CFF3 F0EB          	movff	prodl,_newSequenceData+6
  1840  0017D0                     
  1841                           ; BSR set to: 0
  1842                           ;usart.c: 216:                 newSequenceData.end_rot = receivedMex[8];
  1843  0017D0  C0D0  F0EC         	movff	storeData@receivedMex+8,_newSequenceData+7
  1844  0017D4                     
  1845                           ; BSR set to: 0
  1846                           ;usart.c: 218:                 _newSequence = 1;
  1847  0017D4  0E01               	movlw	1
  1848  0017D6  6E56               	movwf	__newSequence^0,c
  1849                           
  1850                           ;usart.c: 219:                 break;
  1851  0017D8  EF14  F00C         	goto	l588
  1852  0017DC                     l4447:
  1853  0017DC  FFFF               	dw	65535	; assembler added errata NOP
  1854                           
  1855                           ; BSR set to: 0
  1856                           ;usart.c: 222:                 _fatalError = 1;
  1857  0017DE  0E01               	movlw	1
  1858  0017E0  6E57               	movwf	__fatalError^0,c
  1859                           
  1860                           ;usart.c: 223:                 break;
  1861  0017E2  EF14  F00C         	goto	l588
  1862  0017E6                     l4449:
  1863  0017E6  FFFF               	dw	65535	; assembler added errata NOP
  1864                           
  1865                           ; BSR set to: 0
  1866                           ;usart.c: 226:                 printError(8);
  1867  0017E8  0E08               	movlw	8
  1868  0017EA  EC92  F00E         	call	_printError
  1869                           
  1870                           ;usart.c: 227:                 break;
  1871  0017EE  EF14  F00C         	goto	l588
  1872  0017F2                     l4453:
  1873  0017F2  FFFF               	dw	65535	; assembler added errata NOP
  1874                           
  1875                           ; BSR set to: 0
  1876  0017F4  51C8               	movf	storeData@receivedMex& (0+255),w,b
  1877  0017F6  6E19               	movwf	??_storeData^0,c
  1878  0017F8  6A1A               	clrf	(??_storeData+1)^0,c
  1879                           
  1880                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1881                           ; Switch size 1, requested type "simple"
  1882                           ; Number of cases is 1, Range of values is 0 to 0
  1883                           ; switch strategies available:
  1884                           ; Name         Instructions Cycles
  1885                           ; simple_byte            4     3 (average)
  1886                           ;	Chosen strategy is simple_byte
  1887  0017FA  501A               	movf	(??_storeData+1)^0,w,c
  1888  0017FC  0A00               	xorlw	0	; case 0
  1889  0017FE  B4D8               	btfsc	status,2,c
  1890  001800  EF04  F00C         	goto	l4827
  1891  001804  EFF3  F00B         	goto	l4449
  1892  001808                     l4827:
  1893  001808  FFFF               	dw	65535	; assembler added errata NOP
  1894                           
  1895                           ; BSR set to: 0
  1896                           ; Switch size 1, requested type "simple"
  1897                           ; Number of cases is 3, Range of values is 0 to 2
  1898                           ; switch strategies available:
  1899                           ; Name         Instructions Cycles
  1900                           ; simple_byte           10     6 (average)
  1901                           ;	Chosen strategy is simple_byte
  1902  00180A  5019               	movf	??_storeData^0,w,c
  1903  00180C  0A00               	xorlw	0	; case 0
  1904  00180E  B4D8               	btfsc	status,2,c
  1905  001810  EFA1  F00B         	goto	l4435
  1906  001814  0A01               	xorlw	1	; case 1
  1907  001816  B4D8               	btfsc	status,2,c
  1908  001818  EFD1  F00B         	goto	l585
  1909  00181C  0A03               	xorlw	3	; case 2
  1910  00181E  B4D8               	btfsc	status,2,c
  1911  001820  EFEE  F00B         	goto	l4447
  1912  001824  EFF3  F00B         	goto	l4449
  1913  001828                     l588:
  1914  001828  FFFF               	dw	65535	; assembler added errata NOP
  1915  00182A  0012               	return		;funcret
  1916  00182C  FFFF               	dw	65535	; errata NOP
  1917  00182E                     __end_of_storeData:
  1918                           	callstack 0
  1919                           
  1920 ;; *************** function _printError *****************
  1921 ;; Defined at:
  1922 ;;		line 111 in file "usart.c"
  1923 ;; Parameters:    Size  Location     Type
  1924 ;;  errCode         1    wreg     unsigned char 
  1925 ;; Auto vars:     Size  Location     Type
  1926 ;;  errCode         1   23[COMRAM] unsigned char 
  1927 ;; Return value:  Size  Location     Type
  1928 ;;                  1    wreg      void 
  1929 ;; Registers used:
  1930 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1931 ;; Tracked objects:
  1932 ;;		On entry : 0/0
  1933 ;;		On exit  : 0/0
  1934 ;;		Unchanged: 0/0
  1935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1936 ;;      Params:         0       0       0       0       0       0       0
  1937 ;;      Locals:         1       0       0       0       0       0       0
  1938 ;;      Temps:          2       0       0       0       0       0       0
  1939 ;;      Totals:         3       0       0       0       0       0       0
  1940 ;;Total ram usage:        3 bytes
  1941 ;; Hardware stack levels used:    1
  1942 ;; Hardware stack levels required when called:    5
  1943 ;; This function calls:
  1944 ;;		_uartTx
  1945 ;; This function is called by:
  1946 ;;		_main
  1947 ;;		_storeData
  1948 ;; This function uses a non-reentrant model
  1949 ;;
  1950                           
  1951                           	psect	text6
  1952  001D24                     __ptext6:
  1953                           	callstack 0
  1954  001D24                     _printError:
  1955                           	callstack 0
  1956  001D24  FFFF               	dw	65535	; assembler added errata NOP
  1957                           
  1958                           ;incstack = 0
  1959                           ;printError@errCode stored from wreg
  1960  001D26  6E18               	movwf	printError@errCode^0,c
  1961  001D28                     
  1962                           ;usart.c: 113:     switch(errCode){
  1963  001D28  EFEE  F00E         	goto	l4269
  1964  001D2C                     l4251:
  1965  001D2C  FFFF               	dw	65535	; assembler added errata NOP
  1966                           
  1967                           ;usart.c: 115:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  1968  001D2E  0E92               	movlw	low _errString_Feed
  1969  001D30  6E12               	movwf	uartTx@ptr^0,c
  1970  001D32  0E00               	movlw	high _errString_Feed
  1971  001D34  6E13               	movwf	(uartTx@ptr+1)^0,c
  1972  001D36  0E1E               	movlw	30
  1973  001D38  6E14               	movwf	uartTx@length^0,c
  1974  001D3A  EC6C  F011         	call	_uartTx	;wreg free
  1975                           
  1976                           ;usart.c: 116:             break;
  1977  001D3E  EF1D  F00F         	goto	l555
  1978  001D42                     l4253:
  1979  001D42  FFFF               	dw	65535	; assembler added errata NOP
  1980                           
  1981                           ;usart.c: 118:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  1982  001D44  0E5E               	movlw	low _errString_ZEND
  1983  001D46  6E12               	movwf	uartTx@ptr^0,c
  1984  001D48  0E01               	movlw	high _errString_ZEND
  1985  001D4A  6E13               	movwf	(uartTx@ptr+1)^0,c
  1986  001D4C  0E29               	movlw	41
  1987  001D4E  6E14               	movwf	uartTx@length^0,c
  1988  001D50  EC6C  F011         	call	_uartTx	;wreg free
  1989                           
  1990                           ;usart.c: 119:             break;
  1991  001D54  EF1D  F00F         	goto	l555
  1992  001D58                     l4255:
  1993  001D58  FFFF               	dw	65535	; assembler added errata NOP
  1994                           
  1995                           ;usart.c: 121:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  1996  001D5A  0E87               	movlw	low _errString_Reset
  1997  001D5C  6E12               	movwf	uartTx@ptr^0,c
  1998  001D5E  0E01               	movlw	high _errString_Reset
  1999  001D60  6E13               	movwf	(uartTx@ptr+1)^0,c
  2000  001D62  0E28               	movlw	40
  2001  001D64  6E14               	movwf	uartTx@length^0,c
  2002  001D66  EC6C  F011         	call	_uartTx	;wreg free
  2003                           
  2004                           ;usart.c: 122:             break;
  2005  001D6A  EF1D  F00F         	goto	l555
  2006  001D6E                     l4257:
  2007  001D6E  FFFF               	dw	65535	; assembler added errata NOP
  2008                           
  2009                           ;usart.c: 124:             uartTx(&errString_Point[0], sizeof(errString_Point));
  2010  001D70  0E35               	movlw	low _errString_Point
  2011  001D72  6E12               	movwf	uartTx@ptr^0,c
  2012  001D74  0E01               	movlw	high _errString_Point
  2013  001D76  6E13               	movwf	(uartTx@ptr+1)^0,c
  2014  001D78  0E29               	movlw	41
  2015  001D7A  6E14               	movwf	uartTx@length^0,c
  2016  001D7C  EC6C  F011         	call	_uartTx	;wreg free
  2017                           
  2018                           ;usart.c: 125:             break;
  2019  001D80  EF1D  F00F         	goto	l555
  2020  001D84                     l4259:
  2021  001D84  FFFF               	dw	65535	; assembler added errata NOP
  2022                           
  2023                           ;usart.c: 127:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  2024  001D86  0ED6               	movlw	low _errString_Bound
  2025  001D88  6E12               	movwf	uartTx@ptr^0,c
  2026  001D8A  0E01               	movlw	high _errString_Bound
  2027  001D8C  6E13               	movwf	(uartTx@ptr+1)^0,c
  2028  001D8E  0E21               	movlw	33
  2029  001D90  6E14               	movwf	uartTx@length^0,c
  2030  001D92  EC6C  F011         	call	_uartTx	;wreg free
  2031                           
  2032                           ;usart.c: 128:             break;
  2033  001D96  EF1D  F00F         	goto	l555
  2034  001D9A                     l4261:
  2035  001D9A  FFFF               	dw	65535	; assembler added errata NOP
  2036                           
  2037                           ;usart.c: 130:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  2038  001D9C  0E00               	movlw	low _errString_PointZ
  2039  001D9E  6E12               	movwf	uartTx@ptr^0,c
  2040  001DA0  0E01               	movlw	high _errString_PointZ
  2041  001DA2  6E13               	movwf	(uartTx@ptr+1)^0,c
  2042  001DA4  0E35               	movlw	53
  2043  001DA6  6E14               	movwf	uartTx@length^0,c
  2044  001DA8  EC6C  F011         	call	_uartTx	;wreg free
  2045                           
  2046                           ;usart.c: 131:             break;
  2047  001DAC  EF1D  F00F         	goto	l555
  2048  001DB0                     l4263:
  2049  001DB0  FFFF               	dw	65535	; assembler added errata NOP
  2050                           
  2051                           ;usart.c: 133:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  2052  001DB2  0EAF               	movlw	low _errString_Fatal
  2053  001DB4  6E12               	movwf	uartTx@ptr^0,c
  2054  001DB6  0E01               	movlw	high _errString_Fatal
  2055  001DB8  6E13               	movwf	(uartTx@ptr+1)^0,c
  2056  001DBA  0E27               	movlw	39
  2057  001DBC  6E14               	movwf	uartTx@length^0,c
  2058  001DBE  EC6C  F011         	call	_uartTx	;wreg free
  2059                           
  2060                           ;usart.c: 134:             break;
  2061  001DC2  EF1D  F00F         	goto	l555
  2062  001DC6                     l4265:
  2063  001DC6  FFFF               	dw	65535	; assembler added errata NOP
  2064                           
  2065                           ;usart.c: 136:             uartTx(&errString_Command[0], sizeof(errString_Command));
  2066  001DC8  0EB0               	movlw	low _errString_Command
  2067  001DCA  6E12               	movwf	uartTx@ptr^0,c
  2068  001DCC  0E00               	movlw	high _errString_Command
  2069  001DCE  6E13               	movwf	(uartTx@ptr+1)^0,c
  2070  001DD0  0E18               	movlw	24
  2071  001DD2  6E14               	movwf	uartTx@length^0,c
  2072  001DD4  EC6C  F011         	call	_uartTx	;wreg free
  2073                           
  2074                           ;usart.c: 137:             break;
  2075  001DD8  EF1D  F00F         	goto	l555
  2076  001DDC                     l4269:
  2077  001DDC  FFFF               	dw	65535	; assembler added errata NOP
  2078  001DDE  5018               	movf	printError@errCode^0,w,c
  2079  001DE0  6E16               	movwf	??_printError^0,c
  2080  001DE2  6A17               	clrf	(??_printError+1)^0,c
  2081                           
  2082                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2083                           ; Switch size 1, requested type "simple"
  2084                           ; Number of cases is 1, Range of values is 0 to 0
  2085                           ; switch strategies available:
  2086                           ; Name         Instructions Cycles
  2087                           ; simple_byte            4     3 (average)
  2088                           ;	Chosen strategy is simple_byte
  2089  001DE4  5017               	movf	(??_printError+1)^0,w,c
  2090  001DE6  0A00               	xorlw	0	; case 0
  2091  001DE8  B4D8               	btfsc	status,2,c
  2092  001DEA  EFF9  F00E         	goto	l4829
  2093  001DEE  EF1D  F00F         	goto	l555
  2094  001DF2                     l4829:
  2095  001DF2  FFFF               	dw	65535	; assembler added errata NOP
  2096                           
  2097                           ; Switch size 1, requested type "simple"
  2098                           ; Number of cases is 8, Range of values is 1 to 8
  2099                           ; switch strategies available:
  2100                           ; Name         Instructions Cycles
  2101                           ; simple_byte           25    13 (average)
  2102                           ;	Chosen strategy is simple_byte
  2103  001DF4  5016               	movf	??_printError^0,w,c
  2104  001DF6  0A01               	xorlw	1	; case 1
  2105  001DF8  B4D8               	btfsc	status,2,c
  2106  001DFA  EF96  F00E         	goto	l4251
  2107  001DFE  0A03               	xorlw	3	; case 2
  2108  001E00  B4D8               	btfsc	status,2,c
  2109  001E02  EFA1  F00E         	goto	l4253
  2110  001E06  0A01               	xorlw	1	; case 3
  2111  001E08  B4D8               	btfsc	status,2,c
  2112  001E0A  EFAC  F00E         	goto	l4255
  2113  001E0E  0A07               	xorlw	7	; case 4
  2114  001E10  B4D8               	btfsc	status,2,c
  2115  001E12  EFB7  F00E         	goto	l4257
  2116  001E16  0A01               	xorlw	1	; case 5
  2117  001E18  B4D8               	btfsc	status,2,c
  2118  001E1A  EFC2  F00E         	goto	l4259
  2119  001E1E  0A03               	xorlw	3	; case 6
  2120  001E20  B4D8               	btfsc	status,2,c
  2121  001E22  EFCD  F00E         	goto	l4261
  2122  001E26  0A01               	xorlw	1	; case 7
  2123  001E28  B4D8               	btfsc	status,2,c
  2124  001E2A  EFD8  F00E         	goto	l4263
  2125  001E2E  0A0F               	xorlw	15	; case 8
  2126  001E30  B4D8               	btfsc	status,2,c
  2127  001E32  EFE3  F00E         	goto	l4265
  2128  001E36  EF1D  F00F         	goto	l555
  2129  001E3A                     l555:
  2130  001E3A  FFFF               	dw	65535	; assembler added errata NOP
  2131  001E3C  0012               	return		;funcret
  2132  001E3E  FFFF               	dw	65535	; errata NOP
  2133  001E40                     __end_of_printError:
  2134                           	callstack 0
  2135                           
  2136 ;; *************** function _uartTx *****************
  2137 ;; Defined at:
  2138 ;;		line 148 in file "usart.c"
  2139 ;; Parameters:    Size  Location     Type
  2140 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  2141 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  2142 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  2143 ;;  length          1   19[COMRAM] unsigned char 
  2144 ;; Auto vars:     Size  Location     Type
  2145 ;;  i               1   20[COMRAM] unsigned char 
  2146 ;; Return value:  Size  Location     Type
  2147 ;;                  1    wreg      void 
  2148 ;; Registers used:
  2149 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2150 ;; Tracked objects:
  2151 ;;		On entry : 0/0
  2152 ;;		On exit  : 0/0
  2153 ;;		Unchanged: 0/0
  2154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2155 ;;      Params:         3       0       0       0       0       0       0
  2156 ;;      Locals:         1       0       0       0       0       0       0
  2157 ;;      Temps:          0       0       0       0       0       0       0
  2158 ;;      Totals:         4       0       0       0       0       0       0
  2159 ;;Total ram usage:        4 bytes
  2160 ;; Hardware stack levels used:    1
  2161 ;; Hardware stack levels required when called:    4
  2162 ;; This function calls:
  2163 ;;		Nothing
  2164 ;; This function is called by:
  2165 ;;		_printError
  2166 ;; This function uses a non-reentrant model
  2167 ;;
  2168                           
  2169                           	psect	text7
  2170  0022D8                     __ptext7:
  2171                           	callstack 0
  2172  0022D8                     _uartTx:
  2173                           	callstack 0
  2174  0022D8  FFFF               	dw	65535	; assembler added errata NOP
  2175  0022DA                     
  2176                           ;usart.c: 148: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 149: {;usa
      +                          rt.c: 151:     for(char i = 1; i < length; i++){
  2177  0022DA  0E01               	movlw	1
  2178  0022DC  6E15               	movwf	uartTx@i^0,c
  2179  0022DE  EF85  F011         	goto	l3755
  2180  0022E2                     l3751:
  2181  0022E2  FFFF               	dw	65535	; assembler added errata NOP
  2182                           
  2183                           ;usart.c: 153:         TXREG = *ptr;
  2184  0022E4  C012  FFD9         	movff	uartTx@ptr,fsr2l
  2185  0022E8  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  2186  0022EC  50DF               	movf	indf2,w,c
  2187  0022EE  6EAD               	movwf	173,c	;volatile
  2188  0022F0                     l560:
  2189  0022F0  FFFF               	dw	65535	; assembler added errata NOP
  2190  0022F2  A2AC               	btfss	172,1,c	;volatile
  2191  0022F4  EF7E  F011         	goto	u2721
  2192  0022F8  EF81  F011         	goto	u2720
  2193  0022FC                     u2721:
  2194  0022FC  FFFF               	dw	65535	; assembler added errata NOP
  2195  0022FE  EF78  F011         	goto	l560
  2196  002302                     u2720:
  2197  002302  FFFF               	dw	65535	; assembler added errata NOP
  2198  002304                     
  2199                           ;usart.c: 157:         ptr++;
  2200  002304  4A12               	infsnz	uartTx@ptr^0,f,c
  2201  002306  2A13               	incf	(uartTx@ptr+1)^0,f,c
  2202                           
  2203                           ;usart.c: 158:     }
  2204  002308  2A15               	incf	uartTx@i^0,f,c
  2205  00230A                     l3755:
  2206  00230A  FFFF               	dw	65535	; assembler added errata NOP
  2207  00230C  5014               	movf	uartTx@length^0,w,c
  2208  00230E  5C15               	subwf	uartTx@i^0,w,c
  2209  002310  A0D8               	btfss	status,0,c
  2210  002312  EF8D  F011         	goto	u2731
  2211  002316  EF90  F011         	goto	u2730
  2212  00231A                     u2731:
  2213  00231A  FFFF               	dw	65535	; assembler added errata NOP
  2214  00231C  EF71  F011         	goto	l3751
  2215  002320                     u2730:
  2216  002320  FFFF               	dw	65535	; assembler added errata NOP
  2217  002322  0012               	return		;funcret
  2218  002324  FFFF               	dw	65535	; errata NOP
  2219  002326                     __end_of_uartTx:
  2220                           	callstack 0
  2221                           
  2222 ;; *************** function _shiftData *****************
  2223 ;; Defined at:
  2224 ;;		line 81 in file "usart.c"
  2225 ;; Parameters:    Size  Location     Type
  2226 ;;		None
  2227 ;; Auto vars:     Size  Location     Type
  2228 ;;  i               1   19[COMRAM] unsigned char 
  2229 ;; Return value:  Size  Location     Type
  2230 ;;                  1    wreg      void 
  2231 ;; Registers used:
  2232 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2233 ;; Tracked objects:
  2234 ;;		On entry : 0/0
  2235 ;;		On exit  : 0/0
  2236 ;;		Unchanged: 0/0
  2237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2238 ;;      Params:         0       0       0       0       0       0       0
  2239 ;;      Locals:         1       0       0       0       0       0       0
  2240 ;;      Temps:          2       0       0       0       0       0       0
  2241 ;;      Totals:         3       0       0       0       0       0       0
  2242 ;;Total ram usage:        3 bytes
  2243 ;; Hardware stack levels used:    1
  2244 ;; Hardware stack levels required when called:    4
  2245 ;; This function calls:
  2246 ;;		Nothing
  2247 ;; This function is called by:
  2248 ;;		_main
  2249 ;; This function uses a non-reentrant model
  2250 ;;
  2251                           
  2252                           	psect	text8
  2253  002278                     __ptext8:
  2254                           	callstack 0
  2255  002278                     _shiftData:
  2256                           	callstack 0
  2257  002278  FFFF               	dw	65535	; assembler added errata NOP
  2258  00227A                     
  2259                           ;usart.c: 82:     char i;;usart.c: 84:     for(i = 0; i < 4; i++){
  2260  00227A  0E00               	movlw	0
  2261  00227C  6E14               	movwf	shiftData@i^0,c
  2262  00227E                     l4577:
  2263  00227E  FFFF               	dw	65535	; assembler added errata NOP
  2264                           
  2265                           ;usart.c: 85:         dataSequence[i] = dataSequence[i+1];
  2266  002280  5014               	movf	shiftData@i^0,w,c
  2267  002282  6E12               	movwf	??_shiftData^0,c
  2268  002284  6A13               	clrf	(??_shiftData+1)^0,c
  2269  002286  90D8               	bcf	status,0,c
  2270  002288  3612               	rlcf	??_shiftData^0,f,c
  2271  00228A  3613               	rlcf	(??_shiftData+1)^0,f,c
  2272  00228C  90D8               	bcf	status,0,c
  2273  00228E  3612               	rlcf	??_shiftData^0,f,c
  2274  002290  3613               	rlcf	(??_shiftData+1)^0,f,c
  2275  002292  0ED5               	movlw	low (_dataSequence+4)
  2276  002294  2412               	addwf	??_shiftData^0,w,c
  2277  002296  6ED9               	movwf	fsr2l,c
  2278  002298  0E00               	movlw	high (_dataSequence+4)
  2279  00229A  2013               	addwfc	(??_shiftData+1)^0,w,c
  2280  00229C  6EDA               	movwf	fsr2h,c
  2281  00229E  5014               	movf	shiftData@i^0,w,c
  2282  0022A0  0D04               	mullw	4
  2283  0022A2  0ED1               	movlw	low _dataSequence
  2284  0022A4  24F3               	addwf	243,w,c
  2285  0022A6  6EE1               	movwf	fsr1l,c
  2286  0022A8  0E00               	movlw	high _dataSequence
  2287  0022AA  20F4               	addwfc	prodh,w,c
  2288  0022AC  6EE2               	movwf	fsr1h,c
  2289  0022AE  CFDE FFE6          	movff	postinc2,postinc1
  2290  0022B2  CFDE FFE6          	movff	postinc2,postinc1
  2291  0022B6  CFDE FFE6          	movff	postinc2,postinc1
  2292  0022BA  CFDE FFE6          	movff	postinc2,postinc1
  2293  0022BE                     
  2294                           ;usart.c: 86:     }
  2295  0022BE  2A14               	incf	shiftData@i^0,f,c
  2296  0022C0  0E03               	movlw	3
  2297  0022C2  6414               	cpfsgt	shiftData@i^0,c
  2298  0022C4  EF66  F011         	goto	u3811
  2299  0022C8  EF69  F011         	goto	u3810
  2300  0022CC                     u3811:
  2301  0022CC  FFFF               	dw	65535	; assembler added errata NOP
  2302  0022CE  EF3F  F011         	goto	l4577
  2303  0022D2                     u3810:
  2304  0022D2  FFFF               	dw	65535	; assembler added errata NOP
  2305  0022D4  0012               	return		;funcret
  2306  0022D6  FFFF               	dw	65535	; errata NOP
  2307  0022D8                     __end_of_shiftData:
  2308                           	callstack 0
  2309                           
  2310 ;; *************** function _resetPosition *****************
  2311 ;; Defined at:
  2312 ;;		line 165 in file "motors.c"
  2313 ;; Parameters:    Size  Location     Type
  2314 ;;		None
  2315 ;; Auto vars:     Size  Location     Type
  2316 ;;  keepMovingZ     1   22[COMRAM] unsigned char 
  2317 ;;  keepMovingY     1   21[COMRAM] unsigned char 
  2318 ;;  keepMovingX     1   20[COMRAM] unsigned char 
  2319 ;; Return value:  Size  Location     Type
  2320 ;;                  1    wreg      unsigned char 
  2321 ;; Registers used:
  2322 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2323 ;; Tracked objects:
  2324 ;;		On entry : 0/0
  2325 ;;		On exit  : 0/0
  2326 ;;		Unchanged: 0/0
  2327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2328 ;;      Params:         0       0       0       0       0       0       0
  2329 ;;      Locals:         3       0       0       0       0       0       0
  2330 ;;      Temps:          0       0       0       0       0       0       0
  2331 ;;      Totals:         3       0       0       0       0       0       0
  2332 ;;Total ram usage:        3 bytes
  2333 ;; Hardware stack levels used:    1
  2334 ;; Hardware stack levels required when called:    5
  2335 ;; This function calls:
  2336 ;;		_resetStep
  2337 ;;		_stepMade
  2338 ;; This function is called by:
  2339 ;;		_main
  2340 ;; This function uses a non-reentrant model
  2341 ;;
  2342                           
  2343                           	psect	text9
  2344  00110A                     __ptext9:
  2345                           	callstack 0
  2346  00110A                     _resetPosition:
  2347                           	callstack 0
  2348  00110A  FFFF               	dw	65535	; assembler added errata NOP
  2349  00110C                     
  2350                           ;motors.c: 185:     motCounter[0][1] = -1;
  2351  00110C  6860               	setf	(_motCounter+2)^0,c
  2352  00110E  6861               	setf	(_motCounter+3)^0,c
  2353                           
  2354                           ;motors.c: 186:     motCounter[1][1] = -1;
  2355  001110  6864               	setf	(_motCounter+6)^0,c
  2356  001112  6865               	setf	(_motCounter+7)^0,c
  2357                           
  2358                           ;motors.c: 187:     motCounter[2][1] = -1;
  2359  001114  6868               	setf	(_motCounter+10)^0,c
  2360  001116  6869               	setf	(_motCounter+11)^0,c
  2361  001118                     
  2362                           ;motors.c: 192:     unsigned char keepMovingX = 1;
  2363  001118  0E01               	movlw	1
  2364  00111A  6E15               	movwf	resetPosition@keepMovingX^0,c
  2365                           
  2366                           ;motors.c: 193:     unsigned char keepMovingY = 1;
  2367  00111C  0E01               	movlw	1
  2368  00111E  6E16               	movwf	resetPosition@keepMovingY^0,c
  2369                           
  2370                           ;motors.c: 194:     unsigned char keepMovingZ = 1;
  2371  001120  0E01               	movlw	1
  2372  001122  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2373  001124                     
  2374                           ;motors.c: 197:     T2CONbits.TMR2ON = 1;
  2375  001124  84CA               	bsf	202,2,c	;volatile
  2376                           
  2377                           ;motors.c: 199:     tm0Error = 0;
  2378  001126  0E00               	movlw	0
  2379  001128  6E51               	movwf	(_tm0Error+1)^0,c
  2380  00112A  0E00               	movlw	0
  2381  00112C  6E50               	movwf	_tm0Error^0,c
  2382                           
  2383                           ;motors.c: 200:     tm0Limit = 100;
  2384  00112E  0E64               	movlw	100
  2385  001130  6E5D               	movwf	_tm0Limit^0,c
  2386  001132                     
  2387                           ;motors.c: 201:     T0CONbits.TMR0ON = 1;
  2388  001132  8ED5               	bsf	213,7,c	;volatile
  2389                           
  2390                           ;motors.c: 203:     while(keepMovingX || keepMovingY || keepMovingZ){
  2391  001134  EF5C  F009         	goto	l4355
  2392  001138                     l4307:
  2393  001138  FFFF               	dw	65535	; assembler added errata NOP
  2394                           
  2395                           ;motors.c: 205:         resetStep();
  2396  00113A  ECDB  F012         	call	_resetStep	;wreg free
  2397  00113E                     
  2398                           ;motors.c: 208:         if(tm0Error){
  2399  00113E  5050               	movf	_tm0Error^0,w,c
  2400  001140  1051               	iorwf	(_tm0Error+1)^0,w,c
  2401  001142  B4D8               	btfsc	status,2,c
  2402  001144  EFA6  F008         	goto	u3581
  2403  001148  EFA9  F008         	goto	u3580
  2404  00114C                     u3581:
  2405  00114C  FFFF               	dw	65535	; assembler added errata NOP
  2406  00114E  EFB0  F008         	goto	l131
  2407  001152                     u3580:
  2408  001152  FFFF               	dw	65535	; assembler added errata NOP
  2409  001154                     
  2410                           ;motors.c: 216:             tm0Error = 3;
  2411  001154  0E00               	movlw	0
  2412  001156  6E51               	movwf	(_tm0Error+1)^0,c
  2413  001158  0E03               	movlw	3
  2414  00115A  6E50               	movwf	_tm0Error^0,c
  2415                           
  2416                           ;motors.c: 217:             break;
  2417  00115C  EF7A  F009         	goto	l132
  2418  001160                     l131:
  2419  001160  FFFF               	dw	65535	; assembler added errata NOP
  2420                           
  2421                           ;motors.c: 224:         if(PORTEbits.RE0 || !keepMovingX){
  2422  001162  B084               	btfsc	132,0,c	;volatile
  2423  001164  EFB6  F008         	goto	u3591
  2424  001168  EFB9  F008         	goto	u3590
  2425  00116C                     u3591:
  2426  00116C  FFFF               	dw	65535	; assembler added errata NOP
  2427  00116E  EFC3  F008         	goto	l4315
  2428  001172                     u3590:
  2429  001172  FFFF               	dw	65535	; assembler added errata NOP
  2430  001174  5015               	movf	resetPosition@keepMovingX^0,w,c
  2431  001176  A4D8               	btfss	status,2,c
  2432  001178  EFC0  F008         	goto	u3601
  2433  00117C  EFC3  F008         	goto	u3600
  2434  001180                     u3601:
  2435  001180  FFFF               	dw	65535	; assembler added errata NOP
  2436  001182  EFC8  F008         	goto	l4317
  2437  001186                     u3600:
  2438  001186                     l4315:
  2439  001186  FFFF               	dw	65535	; assembler added errata NOP
  2440                           
  2441                           ;motors.c: 226:             keepMovingX = 0;
  2442  001188  0E00               	movlw	0
  2443  00118A  6E15               	movwf	resetPosition@keepMovingX^0,c
  2444                           
  2445                           ;motors.c: 227:         }else{
  2446  00118C  EFE5  F008         	goto	l4325
  2447  001190                     l4317:
  2448  001190  FFFF               	dw	65535	; assembler added errata NOP
  2449                           
  2450                           ;motors.c: 233:             motCounter[0][0] += motCounter[0][1];
  2451  001192  EE20  F060         	lfsr	2,_motCounter+2
  2452  001196  50DE               	movf	postinc2,w,c
  2453  001198  265E               	addwf	_motCounter^0,f,c
  2454  00119A  50DD               	movf	postdec2,w,c
  2455  00119C  225F               	addwfc	(_motCounter+1)^0,f,c
  2456  00119E                     
  2457                           ;motors.c: 234:             if(motCounter[0][0] < 0){
  2458  00119E  BE5F               	btfsc	(_motCounter+1)^0,7,c
  2459  0011A0  EFD7  F008         	goto	u3610
  2460  0011A4  EFD4  F008         	goto	u3611
  2461  0011A8                     u3611:
  2462  0011A8  FFFF               	dw	65535	; assembler added errata NOP
  2463  0011AA  EFDC  F008         	goto	l4323
  2464  0011AE                     u3610:
  2465  0011AE  FFFF               	dw	65535	; assembler added errata NOP
  2466  0011B0                     
  2467                           ;motors.c: 235:                 motCounter[0][0] = 3;
  2468  0011B0  0E00               	movlw	0
  2469  0011B2  6E5F               	movwf	(_motCounter+1)^0,c
  2470  0011B4  0E03               	movlw	3
  2471  0011B6  6E5E               	movwf	_motCounter^0,c
  2472  0011B8                     l4323:
  2473  0011B8  FFFF               	dw	65535	; assembler added errata NOP
  2474                           
  2475                           ;motors.c: 238:             LATA = stepMot1[motCounter[0][0]];
  2476  0011BA  0E8C               	movlw	low _stepMot1
  2477  0011BC  245E               	addwf	_motCounter^0,w,c
  2478  0011BE  6ED9               	movwf	fsr2l,c
  2479  0011C0  0E00               	movlw	high _stepMot1
  2480  0011C2  205F               	addwfc	(_motCounter+1)^0,w,c
  2481  0011C4  6EDA               	movwf	fsr2h,c
  2482  0011C6  50DF               	movf	indf2,w,c
  2483  0011C8  6E89               	movwf	137,c	;volatile
  2484  0011CA                     l4325:
  2485  0011CA  FFFF               	dw	65535	; assembler added errata NOP
  2486                           
  2487                           ;motors.c: 243:         if(PORTEbits.RE1 || !keepMovingY){
  2488  0011CC  B284               	btfsc	132,1,c	;volatile
  2489  0011CE  EFEB  F008         	goto	u3621
  2490  0011D2  EFEE  F008         	goto	u3620
  2491  0011D6                     u3621:
  2492  0011D6  FFFF               	dw	65535	; assembler added errata NOP
  2493  0011D8  EFF8  F008         	goto	l4329
  2494  0011DC                     u3620:
  2495  0011DC  FFFF               	dw	65535	; assembler added errata NOP
  2496  0011DE  5016               	movf	resetPosition@keepMovingY^0,w,c
  2497  0011E0  A4D8               	btfss	status,2,c
  2498  0011E2  EFF5  F008         	goto	u3631
  2499  0011E6  EFF8  F008         	goto	u3630
  2500  0011EA                     u3631:
  2501  0011EA  FFFF               	dw	65535	; assembler added errata NOP
  2502  0011EC  EFFD  F008         	goto	l4331
  2503  0011F0                     u3630:
  2504  0011F0                     l4329:
  2505  0011F0  FFFF               	dw	65535	; assembler added errata NOP
  2506                           
  2507                           ;motors.c: 245:             keepMovingY = 0;
  2508  0011F2  0E00               	movlw	0
  2509  0011F4  6E16               	movwf	resetPosition@keepMovingY^0,c
  2510                           
  2511                           ;motors.c: 246:         }else{
  2512  0011F6  EF1A  F009         	goto	l4339
  2513  0011FA                     l4331:
  2514  0011FA  FFFF               	dw	65535	; assembler added errata NOP
  2515                           
  2516                           ;motors.c: 252:             motCounter[1][0] += motCounter[1][1];
  2517  0011FC  EE20  F064         	lfsr	2,_motCounter+6
  2518  001200  50DE               	movf	postinc2,w,c
  2519  001202  2662               	addwf	(_motCounter+4)^0,f,c
  2520  001204  50DD               	movf	postdec2,w,c
  2521  001206  2263               	addwfc	(_motCounter+5)^0,f,c
  2522  001208                     
  2523                           ;motors.c: 253:             if(motCounter[1][0] < 0){
  2524  001208  BE63               	btfsc	(_motCounter+5)^0,7,c
  2525  00120A  EF0C  F009         	goto	u3640
  2526  00120E  EF09  F009         	goto	u3641
  2527  001212                     u3641:
  2528  001212  FFFF               	dw	65535	; assembler added errata NOP
  2529  001214  EF11  F009         	goto	l4337
  2530  001218                     u3640:
  2531  001218  FFFF               	dw	65535	; assembler added errata NOP
  2532  00121A                     
  2533                           ;motors.c: 254:                 motCounter[1][0] = 3;
  2534  00121A  0E00               	movlw	0
  2535  00121C  6E63               	movwf	(_motCounter+5)^0,c
  2536  00121E  0E03               	movlw	3
  2537  001220  6E62               	movwf	(_motCounter+4)^0,c
  2538  001222                     l4337:
  2539  001222  FFFF               	dw	65535	; assembler added errata NOP
  2540                           
  2541                           ;motors.c: 257:             LATB = stepMot2[motCounter[1][0]];
  2542  001224  0E88               	movlw	low _stepMot2
  2543  001226  2462               	addwf	(_motCounter+4)^0,w,c
  2544  001228  6ED9               	movwf	fsr2l,c
  2545  00122A  0E00               	movlw	high _stepMot2
  2546  00122C  2063               	addwfc	(_motCounter+5)^0,w,c
  2547  00122E  6EDA               	movwf	fsr2h,c
  2548  001230  50DF               	movf	indf2,w,c
  2549  001232  6E8A               	movwf	138,c	;volatile
  2550  001234                     l4339:
  2551  001234  FFFF               	dw	65535	; assembler added errata NOP
  2552                           
  2553                           ;motors.c: 262:         if(PORTEbits.RE2 || !keepMovingZ){
  2554  001236  B484               	btfsc	132,2,c	;volatile
  2555  001238  EF20  F009         	goto	u3651
  2556  00123C  EF23  F009         	goto	u3650
  2557  001240                     u3651:
  2558  001240  FFFF               	dw	65535	; assembler added errata NOP
  2559  001242  EF2D  F009         	goto	l4343
  2560  001246                     u3650:
  2561  001246  FFFF               	dw	65535	; assembler added errata NOP
  2562  001248  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2563  00124A  A4D8               	btfss	status,2,c
  2564  00124C  EF2A  F009         	goto	u3661
  2565  001250  EF2D  F009         	goto	u3660
  2566  001254                     u3661:
  2567  001254  FFFF               	dw	65535	; assembler added errata NOP
  2568  001256  EF32  F009         	goto	l4345
  2569  00125A                     u3660:
  2570  00125A                     l4343:
  2571  00125A  FFFF               	dw	65535	; assembler added errata NOP
  2572                           
  2573                           ;motors.c: 264:             keepMovingZ = 0;
  2574  00125C  0E00               	movlw	0
  2575  00125E  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2576                           
  2577                           ;motors.c: 265:         }else{
  2578  001260  EF4F  F009         	goto	l4353
  2579  001264                     l4345:
  2580  001264  FFFF               	dw	65535	; assembler added errata NOP
  2581                           
  2582                           ;motors.c: 271:             motCounter[2][0] += motCounter[2][1];
  2583  001266  EE20  F068         	lfsr	2,_motCounter+10
  2584  00126A  50DE               	movf	postinc2,w,c
  2585  00126C  2666               	addwf	(_motCounter+8)^0,f,c
  2586  00126E  50DD               	movf	postdec2,w,c
  2587  001270  2267               	addwfc	(_motCounter+9)^0,f,c
  2588  001272                     
  2589                           ;motors.c: 272:             if(motCounter[2][0] < 0){
  2590  001272  BE67               	btfsc	(_motCounter+9)^0,7,c
  2591  001274  EF41  F009         	goto	u3670
  2592  001278  EF3E  F009         	goto	u3671
  2593  00127C                     u3671:
  2594  00127C  FFFF               	dw	65535	; assembler added errata NOP
  2595  00127E  EF46  F009         	goto	l4351
  2596  001282                     u3670:
  2597  001282  FFFF               	dw	65535	; assembler added errata NOP
  2598  001284                     
  2599                           ;motors.c: 273:                 motCounter[2][0] = 3;
  2600  001284  0E00               	movlw	0
  2601  001286  6E67               	movwf	(_motCounter+9)^0,c
  2602  001288  0E03               	movlw	3
  2603  00128A  6E66               	movwf	(_motCounter+8)^0,c
  2604  00128C                     l4351:
  2605  00128C  FFFF               	dw	65535	; assembler added errata NOP
  2606                           
  2607                           ;motors.c: 276:             LATC = stepMot3[motCounter[2][0]];
  2608  00128E  0E84               	movlw	low _stepMot3
  2609  001290  2466               	addwf	(_motCounter+8)^0,w,c
  2610  001292  6ED9               	movwf	fsr2l,c
  2611  001294  0E00               	movlw	high _stepMot3
  2612  001296  2067               	addwfc	(_motCounter+9)^0,w,c
  2613  001298  6EDA               	movwf	fsr2h,c
  2614  00129A  50DF               	movf	indf2,w,c
  2615  00129C  6E8B               	movwf	139,c	;volatile
  2616  00129E                     l4353:
  2617  00129E  FFFF               	dw	65535	; assembler added errata NOP
  2618  0012A0  EC67  F012         	call	_stepMade	;wreg free
  2619  0012A4  5012               	movf	?_stepMade^0,w,c
  2620  0012A6  1013               	iorwf	(?_stepMade+1)^0,w,c
  2621  0012A8  B4D8               	btfsc	status,2,c
  2622  0012AA  EF59  F009         	goto	u3681
  2623  0012AE  EF5C  F009         	goto	u3680
  2624  0012B2                     u3681:
  2625  0012B2  FFFF               	dw	65535	; assembler added errata NOP
  2626  0012B4  EF4F  F009         	goto	l4353
  2627  0012B8                     u3680:
  2628  0012B8                     l4355:
  2629  0012B8  FFFF               	dw	65535	; assembler added errata NOP
  2630                           
  2631                           ;motors.c: 203:     while(keepMovingX || keepMovingY || keepMovingZ){
  2632  0012BA  5015               	movf	resetPosition@keepMovingX^0,w,c
  2633  0012BC  A4D8               	btfss	status,2,c
  2634  0012BE  EF63  F009         	goto	u3691
  2635  0012C2  EF66  F009         	goto	u3690
  2636  0012C6                     u3691:
  2637  0012C6  FFFF               	dw	65535	; assembler added errata NOP
  2638  0012C8  EF9C  F008         	goto	l4307
  2639  0012CC                     u3690:
  2640  0012CC  FFFF               	dw	65535	; assembler added errata NOP
  2641  0012CE  5016               	movf	resetPosition@keepMovingY^0,w,c
  2642  0012D0  A4D8               	btfss	status,2,c
  2643  0012D2  EF6D  F009         	goto	u3701
  2644  0012D6  EF70  F009         	goto	u3700
  2645  0012DA                     u3701:
  2646  0012DA  FFFF               	dw	65535	; assembler added errata NOP
  2647  0012DC  EF9C  F008         	goto	l4307
  2648  0012E0                     u3700:
  2649  0012E0  FFFF               	dw	65535	; assembler added errata NOP
  2650  0012E2  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2651  0012E4  A4D8               	btfss	status,2,c
  2652  0012E6  EF77  F009         	goto	u3711
  2653  0012EA  EF7A  F009         	goto	u3710
  2654  0012EE                     u3711:
  2655  0012EE  FFFF               	dw	65535	; assembler added errata NOP
  2656  0012F0  EF9C  F008         	goto	l4307
  2657  0012F4                     u3710:
  2658  0012F4                     l132:
  2659  0012F4  FFFF               	dw	65535	; assembler added errata NOP
  2660                           
  2661                           ;motors.c: 296:     T0CONbits.TMR0ON = 0;
  2662  0012F6  9ED5               	bcf	213,7,c	;volatile
  2663                           
  2664                           ;motors.c: 297:     T2CONbits.TMR2ON = 0;
  2665  0012F8  94CA               	bcf	202,2,c	;volatile
  2666  0012FA                     
  2667                           ;motors.c: 299:     TMR0 = 0;
  2668  0012FA  0E00               	movlw	0
  2669  0012FC  6ED7               	movwf	215,c	;volatile
  2670  0012FE  0E00               	movlw	0
  2671  001300  6ED6               	movwf	214,c	;volatile
  2672                           
  2673                           ;motors.c: 300:     TMR2 = 0;
  2674  001302  0E00               	movlw	0
  2675  001304  6ECC               	movwf	204,c	;volatile
  2676  001306                     
  2677                           ;motors.c: 303:     resetStep();
  2678  001306  ECDB  F012         	call	_resetStep	;wreg free
  2679  00130A                     
  2680                           ;motors.c: 306:     return(tm0Error);
  2681  00130A  5050               	movf	_tm0Error^0,w,c
  2682  00130C  0012               	return		;funcret
  2683  00130E  FFFF               	dw	65535	; errata NOP
  2684  001310                     __end_of_resetPosition:
  2685                           	callstack 0
  2686                           
  2687 ;; *************** function _resetNewSequence *****************
  2688 ;; Defined at:
  2689 ;;		line 73 in file "usart.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;		None
  2692 ;; Auto vars:     Size  Location     Type
  2693 ;;		None
  2694 ;; Return value:  Size  Location     Type
  2695 ;;                  1    wreg      void 
  2696 ;; Registers used:
  2697 ;;		wreg, status,2
  2698 ;; Tracked objects:
  2699 ;;		On entry : 0/0
  2700 ;;		On exit  : 0/0
  2701 ;;		Unchanged: 0/0
  2702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2703 ;;      Params:         0       0       0       0       0       0       0
  2704 ;;      Locals:         0       0       0       0       0       0       0
  2705 ;;      Temps:          0       0       0       0       0       0       0
  2706 ;;      Totals:         0       0       0       0       0       0       0
  2707 ;;Total ram usage:        0 bytes
  2708 ;; Hardware stack levels used:    1
  2709 ;; Hardware stack levels required when called:    4
  2710 ;; This function calls:
  2711 ;;		Nothing
  2712 ;; This function is called by:
  2713 ;;		_main
  2714 ;; This function uses a non-reentrant model
  2715 ;;
  2716                           
  2717                           	psect	text10
  2718  00258E                     __ptext10:
  2719                           	callstack 0
  2720  00258E                     _resetNewSequence:
  2721                           	callstack 0
  2722  00258E  FFFF               	dw	65535	; assembler added errata NOP
  2723  002590                     
  2724                           ;usart.c: 74:     _newSequence = 0;
  2725  002590  0E00               	movlw	0
  2726  002592  6E56               	movwf	__newSequence^0,c
  2727  002594  0012               	return		;funcret
  2728  002596  FFFF               	dw	65535	; errata NOP
  2729  002598                     __end_of_resetNewSequence:
  2730                           	callstack 0
  2731                           
  2732 ;; *************** function _reduceSeq *****************
  2733 ;; Defined at:
  2734 ;;		line 50 in file "usart.c"
  2735 ;; Parameters:    Size  Location     Type
  2736 ;;		None
  2737 ;; Auto vars:     Size  Location     Type
  2738 ;;		None
  2739 ;; Return value:  Size  Location     Type
  2740 ;;                  1    wreg      void 
  2741 ;; Registers used:
  2742 ;;		status,2, status,0
  2743 ;; Tracked objects:
  2744 ;;		On entry : 0/0
  2745 ;;		On exit  : 0/0
  2746 ;;		Unchanged: 0/0
  2747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2748 ;;      Params:         0       0       0       0       0       0       0
  2749 ;;      Locals:         0       0       0       0       0       0       0
  2750 ;;      Temps:          0       0       0       0       0       0       0
  2751 ;;      Totals:         0       0       0       0       0       0       0
  2752 ;;Total ram usage:        0 bytes
  2753 ;; Hardware stack levels used:    1
  2754 ;; Hardware stack levels required when called:    4
  2755 ;; This function calls:
  2756 ;;		Nothing
  2757 ;; This function is called by:
  2758 ;;		_main
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762                           	psect	text11
  2763  0025DE                     __ptext11:
  2764                           	callstack 0
  2765  0025DE                     _reduceSeq:
  2766                           	callstack 0
  2767  0025DE  FFFF               	dw	65535	; assembler added errata NOP
  2768  0025E0                     
  2769                           ;usart.c: 51:     dataCounter--;
  2770  0025E0  0658               	decf	_dataCounter^0,f,c
  2771  0025E2  0012               	return		;funcret
  2772  0025E4  FFFF               	dw	65535	; errata NOP
  2773  0025E6                     __end_of_reduceSeq:
  2774                           	callstack 0
  2775                           
  2776 ;; *************** function _readSeq *****************
  2777 ;; Defined at:
  2778 ;;		line 57 in file "usart.c"
  2779 ;; Parameters:    Size  Location     Type
  2780 ;;		None
  2781 ;; Auto vars:     Size  Location     Type
  2782 ;;		None
  2783 ;; Return value:  Size  Location     Type
  2784 ;;                  1    wreg      unsigned char 
  2785 ;; Registers used:
  2786 ;;		wreg, status,2
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2792 ;;      Params:         0       0       0       0       0       0       0
  2793 ;;      Locals:         0       0       0       0       0       0       0
  2794 ;;      Temps:          0       0       0       0       0       0       0
  2795 ;;      Totals:         0       0       0       0       0       0       0
  2796 ;;Total ram usage:        0 bytes
  2797 ;; Hardware stack levels used:    1
  2798 ;; Hardware stack levels required when called:    4
  2799 ;; This function calls:
  2800 ;;		Nothing
  2801 ;; This function is called by:
  2802 ;;		_main
  2803 ;; This function uses a non-reentrant model
  2804 ;;
  2805                           
  2806                           	psect	text12
  2807  0025E6                     __ptext12:
  2808                           	callstack 0
  2809  0025E6                     _readSeq:
  2810                           	callstack 0
  2811  0025E6  FFFF               	dw	65535	; assembler added errata NOP
  2812  0025E8                     
  2813                           ;usart.c: 58:     return dataCounter;
  2814  0025E8  5058               	movf	_dataCounter^0,w,c
  2815  0025EA  0012               	return		;funcret
  2816  0025EC  FFFF               	dw	65535	; errata NOP
  2817  0025EE                     __end_of_readSeq:
  2818                           	callstack 0
  2819                           
  2820 ;; *************** function _newSequence *****************
  2821 ;; Defined at:
  2822 ;;		line 65 in file "usart.c"
  2823 ;; Parameters:    Size  Location     Type
  2824 ;;		None
  2825 ;; Auto vars:     Size  Location     Type
  2826 ;;		None
  2827 ;; Return value:  Size  Location     Type
  2828 ;;                  1    wreg      unsigned char 
  2829 ;; Registers used:
  2830 ;;		wreg, status,2
  2831 ;; Tracked objects:
  2832 ;;		On entry : 0/0
  2833 ;;		On exit  : 0/0
  2834 ;;		Unchanged: 0/0
  2835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2836 ;;      Params:         0       0       0       0       0       0       0
  2837 ;;      Locals:         0       0       0       0       0       0       0
  2838 ;;      Temps:          0       0       0       0       0       0       0
  2839 ;;      Totals:         0       0       0       0       0       0       0
  2840 ;;Total ram usage:        0 bytes
  2841 ;; Hardware stack levels used:    1
  2842 ;; Hardware stack levels required when called:    4
  2843 ;; This function calls:
  2844 ;;		Nothing
  2845 ;; This function is called by:
  2846 ;;		_main
  2847 ;; This function uses a non-reentrant model
  2848 ;;
  2849                           
  2850                           	psect	text13
  2851  0025EE                     __ptext13:
  2852                           	callstack 0
  2853  0025EE                     _newSequence:
  2854                           	callstack 0
  2855  0025EE  FFFF               	dw	65535	; assembler added errata NOP
  2856  0025F0                     
  2857                           ;usart.c: 66:     return _newSequence;
  2858  0025F0  5056               	movf	__newSequence^0,w,c
  2859  0025F2  0012               	return		;funcret
  2860  0025F4  FFFF               	dw	65535	; errata NOP
  2861  0025F6                     __end_of_newSequence:
  2862                           	callstack 0
  2863                           
  2864 ;; *************** function _interruptInit *****************
  2865 ;; Defined at:
  2866 ;;		line 21 in file "interrupt.c"
  2867 ;; Parameters:    Size  Location     Type
  2868 ;;		None
  2869 ;; Auto vars:     Size  Location     Type
  2870 ;;		None
  2871 ;; Return value:  Size  Location     Type
  2872 ;;                  1    wreg      void 
  2873 ;; Registers used:
  2874 ;;		None
  2875 ;; Tracked objects:
  2876 ;;		On entry : 0/0
  2877 ;;		On exit  : 0/0
  2878 ;;		Unchanged: 0/0
  2879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2880 ;;      Params:         0       0       0       0       0       0       0
  2881 ;;      Locals:         0       0       0       0       0       0       0
  2882 ;;      Temps:          0       0       0       0       0       0       0
  2883 ;;      Totals:         0       0       0       0       0       0       0
  2884 ;;Total ram usage:        0 bytes
  2885 ;; Hardware stack levels used:    1
  2886 ;; Hardware stack levels required when called:    4
  2887 ;; This function calls:
  2888 ;;		Nothing
  2889 ;; This function is called by:
  2890 ;;		_main
  2891 ;; This function uses a non-reentrant model
  2892 ;;
  2893                           
  2894                           	psect	text14
  2895  0023BC                     __ptext14:
  2896                           	callstack 0
  2897  0023BC                     _interruptInit:
  2898                           	callstack 0
  2899  0023BC  FFFF               	dw	65535	; assembler added errata NOP
  2900  0023BE                     
  2901                           ;interrupt.c: 23:     if(!INTCONbits.GIE){
  2902  0023BE  BEF2               	btfsc	242,7,c	;volatile
  2903  0023C0  EFE4  F011         	goto	u3721
  2904  0023C4  EFE7  F011         	goto	u3720
  2905  0023C8                     u3721:
  2906  0023C8  FFFF               	dw	65535	; assembler added errata NOP
  2907  0023CA  EFE9  F011         	goto	l449
  2908  0023CE                     u3720:
  2909  0023CE  FFFF               	dw	65535	; assembler added errata NOP
  2910  0023D0                     
  2911                           ;interrupt.c: 24:         INTCONbits.GIE = 1;
  2912  0023D0  8EF2               	bsf	242,7,c	;volatile
  2913  0023D2                     l449:
  2914  0023D2  FFFF               	dw	65535	; assembler added errata NOP
  2915                           
  2916                           ;interrupt.c: 26:     if(!INTCONbits.PEIE){
  2917  0023D4  BCF2               	btfsc	242,6,c	;volatile
  2918  0023D6  EFEF  F011         	goto	u3731
  2919  0023DA  EFF2  F011         	goto	u3730
  2920  0023DE                     u3731:
  2921  0023DE  FFFF               	dw	65535	; assembler added errata NOP
  2922  0023E0  EFF4  F011         	goto	l450
  2923  0023E4                     u3730:
  2924  0023E4  FFFF               	dw	65535	; assembler added errata NOP
  2925  0023E6                     
  2926                           ;interrupt.c: 27:         INTCONbits.PEIE = 1;
  2927  0023E6  8CF2               	bsf	242,6,c	;volatile
  2928  0023E8                     l450:
  2929  0023E8  FFFF               	dw	65535	; assembler added errata NOP
  2930                           
  2931                           ;interrupt.c: 31:     RCONbits.IPEN = 1;
  2932  0023EA  8ED0               	bsf	208,7,c	;volatile
  2933                           
  2934                           ;interrupt.c: 32:     INTCONbits.T0IE = 1;
  2935  0023EC  8AF2               	bsf	242,5,c	;volatile
  2936                           
  2937                           ;interrupt.c: 33:     PIE1bits.TMR1IE = 1;
  2938  0023EE  809D               	bsf	157,0,c	;volatile
  2939                           
  2940                           ;interrupt.c: 34:     PIE1bits.TMR2IE = 1;
  2941  0023F0  829D               	bsf	157,1,c	;volatile
  2942                           
  2943                           ;interrupt.c: 35:     PIE1bits.RC1IE = 1;
  2944  0023F2  8A9D               	bsf	157,5,c	;volatile
  2945  0023F4  0012               	return		;funcret
  2946  0023F6  FFFF               	dw	65535	; errata NOP
  2947  0023F8                     __end_of_interruptInit:
  2948                           	callstack 0
  2949                           
  2950 ;; *************** function _initPinMotors *****************
  2951 ;; Defined at:
  2952 ;;		line 49 in file "motors.c"
  2953 ;; Parameters:    Size  Location     Type
  2954 ;;		None
  2955 ;; Auto vars:     Size  Location     Type
  2956 ;;		None
  2957 ;; Return value:  Size  Location     Type
  2958 ;;                  1    wreg      void 
  2959 ;; Registers used:
  2960 ;;		wreg, status,2, status,0
  2961 ;; Tracked objects:
  2962 ;;		On entry : 0/0
  2963 ;;		On exit  : 0/0
  2964 ;;		Unchanged: 0/0
  2965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2966 ;;      Params:         0       0       0       0       0       0       0
  2967 ;;      Locals:         0       0       0       0       0       0       0
  2968 ;;      Temps:          0       0       0       0       0       0       0
  2969 ;;      Totals:         0       0       0       0       0       0       0
  2970 ;;Total ram usage:        0 bytes
  2971 ;; Hardware stack levels used:    1
  2972 ;; Hardware stack levels required when called:    4
  2973 ;; This function calls:
  2974 ;;		Nothing
  2975 ;; This function is called by:
  2976 ;;		_main
  2977 ;; This function uses a non-reentrant model
  2978 ;;
  2979                           
  2980                           	psect	text15
  2981  002450                     __ptext15:
  2982                           	callstack 0
  2983  002450                     _initPinMotors:
  2984                           	callstack 0
  2985  002450  FFFF               	dw	65535	; assembler added errata NOP
  2986  002452                     
  2987                           ;motors.c: 51:     ADCON1bits.PCFG = 0x06;
  2988  002452  50C1               	movf	193,w,c	;volatile
  2989  002454  0BF0               	andlw	-16
  2990  002456  0906               	iorlw	6
  2991  002458  6EC1               	movwf	193,c	;volatile
  2992  00245A                     
  2993                           ;motors.c: 52:     TRISA &= 0b11010001;
  2994  00245A  0ED1               	movlw	209
  2995  00245C  1692               	andwf	146,f,c	;volatile
  2996  00245E                     
  2997                           ;motors.c: 54:     TRISB &= 0b00000010;
  2998  00245E  0E02               	movlw	2
  2999  002460  1693               	andwf	147,f,c	;volatile
  3000  002462                     
  3001                           ;motors.c: 55:     TRISC &= 0b11000000;
  3002  002462  0EC0               	movlw	192
  3003  002464  1694               	andwf	148,f,c	;volatile
  3004  002466                     
  3005                           ;motors.c: 56:     TRISD &= 0b11000000;
  3006  002466  0EC0               	movlw	192
  3007  002468  1695               	andwf	149,f,c	;volatile
  3008  00246A                     
  3009                           ;motors.c: 59:     TRISEbits.TRISE0 = 1;
  3010  00246A  8096               	bsf	150,0,c	;volatile
  3011  00246C                     
  3012                           ;motors.c: 60:     TRISEbits.TRISE1 = 1;
  3013  00246C  8296               	bsf	150,1,c	;volatile
  3014  00246E                     
  3015                           ;motors.c: 61:     TRISEbits.TRISE2 = 1;
  3016  00246E  8496               	bsf	150,2,c	;volatile
  3017  002470                     
  3018                           ;motors.c: 64:     TRISDbits.TRISD7 = 1;
  3019  002470  8E95               	bsf	149,7,c	;volatile
  3020  002472  0012               	return		;funcret
  3021  002474  FFFF               	dw	65535	; errata NOP
  3022  002476                     __end_of_initPinMotors:
  3023                           	callstack 0
  3024                           
  3025 ;; *************** function _initADC *****************
  3026 ;; Defined at:
  3027 ;;		line 18 in file "adc.c"
  3028 ;; Parameters:    Size  Location     Type
  3029 ;;		None
  3030 ;; Auto vars:     Size  Location     Type
  3031 ;;		None
  3032 ;; Return value:  Size  Location     Type
  3033 ;;                  1    wreg      void 
  3034 ;; Registers used:
  3035 ;;		wreg, status,2
  3036 ;; Tracked objects:
  3037 ;;		On entry : 0/0
  3038 ;;		On exit  : 0/0
  3039 ;;		Unchanged: 0/0
  3040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3041 ;;      Params:         0       0       0       0       0       0       0
  3042 ;;      Locals:         0       0       0       0       0       0       0
  3043 ;;      Temps:          0       0       0       0       0       0       0
  3044 ;;      Totals:         0       0       0       0       0       0       0
  3045 ;;Total ram usage:        0 bytes
  3046 ;; Hardware stack levels used:    1
  3047 ;; Hardware stack levels required when called:    4
  3048 ;; This function calls:
  3049 ;;		Nothing
  3050 ;; This function is called by:
  3051 ;;		_main
  3052 ;; This function uses a non-reentrant model
  3053 ;;
  3054                           
  3055                           	psect	text16
  3056  002476                     __ptext16:
  3057                           	callstack 0
  3058  002476                     _initADC:
  3059                           	callstack 0
  3060  002476  FFFF               	dw	65535	; assembler added errata NOP
  3061  002478                     
  3062                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  3063  002478  50C2               	movf	194,w,c	;volatile
  3064  00247A  0B3F               	andlw	-193
  3065  00247C  0940               	iorlw	64
  3066  00247E  6EC2               	movwf	194,c	;volatile
  3067  002480                     
  3068                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  3069  002480  8CC1               	bsf	193,6,c	;volatile
  3070                           
  3071                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  3072  002482  0EC7               	movlw	-57
  3073  002484  16C2               	andwf	194,f,c	;volatile
  3074  002486                     
  3075                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  3076  002486  94C2               	bcf	194,2,c	;volatile
  3077  002488                     
  3078                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  3079  002488  90C2               	bcf	194,0,c	;volatile
  3080  00248A                     
  3081                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  3082  00248A  9EC1               	bcf	193,7,c	;volatile
  3083                           
  3084                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  3085  00248C  50C1               	movf	193,w,c	;volatile
  3086  00248E  0BF0               	andlw	-16
  3087  002490  090E               	iorlw	14
  3088  002492  6EC1               	movwf	193,c	;volatile
  3089  002494                     
  3090                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  3091  002494  8C9D               	bsf	157,6,c	;volatile
  3092  002496                     
  3093                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  3094  002496  8C9F               	bsf	159,6,c	;volatile
  3095  002498  0012               	return		;funcret
  3096  00249A  FFFF               	dw	65535	; errata NOP
  3097  00249C                     __end_of_initADC:
  3098                           	callstack 0
  3099                           
  3100 ;; *************** function _getNewSequence *****************
  3101 ;; Defined at:
  3102 ;;		line 43 in file "usart.c"
  3103 ;; Parameters:    Size  Location     Type
  3104 ;;		None
  3105 ;; Auto vars:     Size  Location     Type
  3106 ;;		None
  3107 ;; Return value:  Size  Location     Type
  3108 ;;                  2   17[COMRAM] PTR struct .
  3109 ;; Registers used:
  3110 ;;		wreg, status,2, status,0
  3111 ;; Tracked objects:
  3112 ;;		On entry : 0/0
  3113 ;;		On exit  : 0/0
  3114 ;;		Unchanged: 0/0
  3115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3116 ;;      Params:         2       0       0       0       0       0       0
  3117 ;;      Locals:         0       0       0       0       0       0       0
  3118 ;;      Temps:          0       0       0       0       0       0       0
  3119 ;;      Totals:         2       0       0       0       0       0       0
  3120 ;;Total ram usage:        2 bytes
  3121 ;; Hardware stack levels used:    1
  3122 ;; Hardware stack levels required when called:    4
  3123 ;; This function calls:
  3124 ;;		Nothing
  3125 ;; This function is called by:
  3126 ;;		_main
  3127 ;; This function uses a non-reentrant model
  3128 ;;
  3129                           
  3130                           	psect	text17
  3131  002524                     __ptext17:
  3132                           	callstack 0
  3133  002524                     _getNewSequence:
  3134                           	callstack 0
  3135  002524  FFFF               	dw	65535	; assembler added errata NOP
  3136  002526                     
  3137                           ;usart.c: 44:     return(&newSequenceData);
  3138  002526  0EE5               	movlw	low _newSequenceData
  3139  002528  6E12               	movwf	?_getNewSequence^0,c
  3140  00252A  0E00               	movlw	high _newSequenceData
  3141  00252C  6E13               	movwf	(?_getNewSequence+1)^0,c
  3142  00252E  0012               	return		;funcret
  3143  002530  FFFF               	dw	65535	; errata NOP
  3144  002532                     __end_of_getNewSequence:
  3145                           	callstack 0
  3146                           
  3147 ;; *************** function _executeData *****************
  3148 ;; Defined at:
  3149 ;;		line 105 in file "main.c"
  3150 ;; Parameters:    Size  Location     Type
  3151 ;;		None
  3152 ;; Auto vars:     Size  Location     Type
  3153 ;;  data            2    9[BANK0 ] PTR struct .
  3154 ;;		 -> dataSequence(20), 
  3155 ;;  errCode         1   11[BANK0 ] unsigned char 
  3156 ;; Return value:  Size  Location     Type
  3157 ;;                  1    wreg      unsigned char 
  3158 ;; Registers used:
  3159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3160 ;; Tracked objects:
  3161 ;;		On entry : 0/0
  3162 ;;		On exit  : 0/0
  3163 ;;		Unchanged: 0/0
  3164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3165 ;;      Params:         0       0       0       0       0       0       0
  3166 ;;      Locals:         0       3       0       0       0       0       0
  3167 ;;      Temps:          0       2       0       0       0       0       0
  3168 ;;      Totals:         0       5       0       0       0       0       0
  3169 ;;Total ram usage:        5 bytes
  3170 ;; Hardware stack levels used:    1
  3171 ;; Hardware stack levels required when called:    6
  3172 ;; This function calls:
  3173 ;;		_getData
  3174 ;;		_liftArm
  3175 ;;		_moveToPoint
  3176 ;;		_pickObject
  3177 ;;		_releaseObj
  3178 ;;		_rotateObj
  3179 ;;		_touchObject
  3180 ;;		_touchTherm
  3181 ;; This function is called by:
  3182 ;;		_main
  3183 ;; This function uses a non-reentrant model
  3184 ;;
  3185                           
  3186                           	psect	text18
  3187  000E0A                     __ptext18:
  3188                           	callstack 0
  3189  000E0A                     _executeData:
  3190                           	callstack 0
  3191  000E0A  FFFF               	dw	65535	; assembler added errata NOP
  3192  000E0C                     
  3193                           ;main.c: 106:     t_sequence *data = getData();
  3194  000E0C  EC99  F012         	call	_getData	;wreg free
  3195  000E10  C012  F0F6         	movff	?_getData,executeData@data
  3196  000E14  C013  F0F7         	movff	?_getData+1,executeData@data+1
  3197  000E18                     
  3198                           ;main.c: 112:     switch(data->feederLine){
  3199  000E18  EFB7  F007         	goto	l4505
  3200  000E1C                     l4477:
  3201  000E1C  FFFF               	dw	65535	; assembler added errata NOP
  3202                           
  3203                           ; BSR set to: 0
  3204                           ;main.c: 115:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0
      +                          ], feeder1Pos[1]);
  3205  000E1E  C043  F015         	movff	_posVector,moveToPoint@x1
  3206  000E22  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3207  000E24  C044  F017         	movff	_posVector+1,moveToPoint@y1
  3208  000E28  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3209  000E2A  0E0D               	movlw	low _feeder1Pos
  3210  000E2C  6EF6               	movwf	tblptrl,c
  3211  000E2E                     	if	1	;There is more than 1 active tblptr byte
  3212  000E2E  0E06               	movlw	high _feeder1Pos
  3213  000E30  6EF7               	movwf	tblptrh,c
  3214  000E32                     	endif
  3215  000E32                     	if	0	;There are less than 3 active tblptr bytes
  3216  000E32                     	endif
  3217  000E32  0008               	tblrd		*
  3218  000E34  FFFF               	dw	65535	; errata NOP
  3219  000E36  50F5               	movf	tablat,w,c
  3220  000E38  6E19               	movwf	moveToPoint@x2^0,c
  3221  000E3A  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3222  000E3C  0E0E               	movlw	low (_feeder1Pos+1)
  3223  000E3E  6EF6               	movwf	tblptrl,c
  3224  000E40  0E06               	movlw	high (_feeder1Pos+1)
  3225  000E42  6EF7               	movwf	tblptrh,c
  3226  000E44                     	if	0	;tblptru may be non-zero
  3227  000E44                     	endif
  3228  000E44                     	if	0	;tblptru may be non-zero
  3229  000E44                     	endif
  3230  000E44  0008               	tblrd		*
  3231  000E46  FFFF               	dw	65535	; errata NOP
  3232  000E48  50F5               	movf	tablat,w,c
  3233  000E4A  6E1B               	movwf	moveToPoint@y2^0,c
  3234  000E4C  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3235  000E4E  EC22  F005         	call	_moveToPoint	;wreg free
  3236  000E52  0100               	movlb	0	; () banked
  3237  000E54  6FF8               	movwf	executeData@errCode& (0+255),b
  3238  000E56                     
  3239                           ; BSR set to: 0
  3240                           ;main.c: 117:             posVector[0] = feeder1Pos[0];
  3241  000E56  0E0D               	movlw	low _feeder1Pos
  3242  000E58  6EF6               	movwf	tblptrl,c
  3243  000E5A                     	if	1	;There is more than 1 active tblptr byte
  3244  000E5A  0E06               	movlw	high _feeder1Pos
  3245  000E5C  6EF7               	movwf	tblptrh,c
  3246  000E5E                     	endif
  3247  000E5E                     	if	0	;There are less than 3 active tblptr bytes
  3248  000E5E                     	endif
  3249  000E5E  0008               	tblrd		*
  3250  000E60  FFFF               	dw	65535	; errata NOP
  3251  000E62  CFF5 F043          	movff	tablat,_posVector
  3252  000E66                     
  3253                           ; BSR set to: 0
  3254                           ;main.c: 118:             posVector[1] = feeder1Pos[1];
  3255  000E66  0E0E               	movlw	low (_feeder1Pos+1)
  3256  000E68  6EF6               	movwf	tblptrl,c
  3257  000E6A  0E06               	movlw	high (_feeder1Pos+1)
  3258  000E6C  6EF7               	movwf	tblptrh,c
  3259  000E6E                     	if	0	;tblptru may be non-zero
  3260  000E6E                     	endif
  3261  000E6E                     	if	0	;tblptru may be non-zero
  3262  000E6E                     	endif
  3263  000E6E  0008               	tblrd		*
  3264  000E70  FFFF               	dw	65535	; errata NOP
  3265  000E72  CFF5 F044          	movff	tablat,_posVector+1
  3266                           
  3267                           ;main.c: 119:             break;
  3268  000E76  EFDB  F007         	goto	l4507
  3269  000E7A                     l4483:
  3270  000E7A  FFFF               	dw	65535	; assembler added errata NOP
  3271                           
  3272                           ; BSR set to: 0
  3273                           ;main.c: 121:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3274  000E7C  C043  F015         	movff	_posVector,moveToPoint@x1
  3275  000E80  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3276  000E82  C044  F017         	movff	_posVector+1,moveToPoint@y1
  3277  000E86  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3278  000E88  0E0B               	movlw	low _feeder2Pos
  3279  000E8A  6EF6               	movwf	tblptrl,c
  3280  000E8C                     	if	1	;There is more than 1 active tblptr byte
  3281  000E8C  0E06               	movlw	high _feeder2Pos
  3282  000E8E  6EF7               	movwf	tblptrh,c
  3283  000E90                     	endif
  3284  000E90                     	if	0	;There are less than 3 active tblptr bytes
  3285  000E90                     	endif
  3286  000E90  0008               	tblrd		*
  3287  000E92  FFFF               	dw	65535	; errata NOP
  3288  000E94  50F5               	movf	tablat,w,c
  3289  000E96  6E19               	movwf	moveToPoint@x2^0,c
  3290  000E98  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3291  000E9A  0E0C               	movlw	low (_feeder2Pos+1)
  3292  000E9C  6EF6               	movwf	tblptrl,c
  3293  000E9E  0E06               	movlw	high (_feeder2Pos+1)
  3294  000EA0  6EF7               	movwf	tblptrh,c
  3295  000EA2                     	if	0	;tblptru may be non-zero
  3296  000EA2                     	endif
  3297  000EA2                     	if	0	;tblptru may be non-zero
  3298  000EA2                     	endif
  3299  000EA2  0008               	tblrd		*
  3300  000EA4  FFFF               	dw	65535	; errata NOP
  3301  000EA6  50F5               	movf	tablat,w,c
  3302  000EA8  6E1B               	movwf	moveToPoint@y2^0,c
  3303  000EAA  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3304  000EAC  EC22  F005         	call	_moveToPoint	;wreg free
  3305  000EB0  0100               	movlb	0	; () banked
  3306  000EB2  6FF8               	movwf	executeData@errCode& (0+255),b
  3307  000EB4                     
  3308                           ; BSR set to: 0
  3309                           ;main.c: 122:             posVector[0] = feeder2Pos[0];
  3310  000EB4  0E0B               	movlw	low _feeder2Pos
  3311  000EB6  6EF6               	movwf	tblptrl,c
  3312  000EB8                     	if	1	;There is more than 1 active tblptr byte
  3313  000EB8  0E06               	movlw	high _feeder2Pos
  3314  000EBA  6EF7               	movwf	tblptrh,c
  3315  000EBC                     	endif
  3316  000EBC                     	if	0	;There are less than 3 active tblptr bytes
  3317  000EBC                     	endif
  3318  000EBC  0008               	tblrd		*
  3319  000EBE  FFFF               	dw	65535	; errata NOP
  3320  000EC0  CFF5 F043          	movff	tablat,_posVector
  3321  000EC4                     
  3322                           ; BSR set to: 0
  3323                           ;main.c: 123:             posVector[1] = feeder2Pos[1];
  3324  000EC4  0E0C               	movlw	low (_feeder2Pos+1)
  3325  000EC6  6EF6               	movwf	tblptrl,c
  3326  000EC8  0E06               	movlw	high (_feeder2Pos+1)
  3327  000ECA  6EF7               	movwf	tblptrh,c
  3328  000ECC                     	if	0	;tblptru may be non-zero
  3329  000ECC                     	endif
  3330  000ECC                     	if	0	;tblptru may be non-zero
  3331  000ECC                     	endif
  3332  000ECC  0008               	tblrd		*
  3333  000ECE  FFFF               	dw	65535	; errata NOP
  3334  000ED0  CFF5 F044          	movff	tablat,_posVector+1
  3335                           
  3336                           ;main.c: 124:             break;
  3337  000ED4  EFDB  F007         	goto	l4507
  3338  000ED8                     l4489:
  3339  000ED8  FFFF               	dw	65535	; assembler added errata NOP
  3340                           
  3341                           ; BSR set to: 0
  3342                           ;main.c: 126:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3343  000EDA  C043  F015         	movff	_posVector,moveToPoint@x1
  3344  000EDE  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3345  000EE0  C044  F017         	movff	_posVector+1,moveToPoint@y1
  3346  000EE4  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3347  000EE6  0E09               	movlw	low _feeder3Pos
  3348  000EE8  6EF6               	movwf	tblptrl,c
  3349  000EEA                     	if	1	;There is more than 1 active tblptr byte
  3350  000EEA  0E06               	movlw	high _feeder3Pos
  3351  000EEC  6EF7               	movwf	tblptrh,c
  3352  000EEE                     	endif
  3353  000EEE                     	if	0	;There are less than 3 active tblptr bytes
  3354  000EEE                     	endif
  3355  000EEE  0008               	tblrd		*
  3356  000EF0  FFFF               	dw	65535	; errata NOP
  3357  000EF2  50F5               	movf	tablat,w,c
  3358  000EF4  6E19               	movwf	moveToPoint@x2^0,c
  3359  000EF6  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3360  000EF8  0E0A               	movlw	low (_feeder3Pos+1)
  3361  000EFA  6EF6               	movwf	tblptrl,c
  3362  000EFC  0E06               	movlw	high (_feeder3Pos+1)
  3363  000EFE  6EF7               	movwf	tblptrh,c
  3364  000F00                     	if	0	;tblptru may be non-zero
  3365  000F00                     	endif
  3366  000F00                     	if	0	;tblptru may be non-zero
  3367  000F00                     	endif
  3368  000F00  0008               	tblrd		*
  3369  000F02  FFFF               	dw	65535	; errata NOP
  3370  000F04  50F5               	movf	tablat,w,c
  3371  000F06  6E1B               	movwf	moveToPoint@y2^0,c
  3372  000F08  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3373  000F0A  EC22  F005         	call	_moveToPoint	;wreg free
  3374  000F0E  0100               	movlb	0	; () banked
  3375  000F10  6FF8               	movwf	executeData@errCode& (0+255),b
  3376  000F12                     
  3377                           ; BSR set to: 0
  3378                           ;main.c: 127:             posVector[0] = feeder3Pos[0];
  3379  000F12  0E09               	movlw	low _feeder3Pos
  3380  000F14  6EF6               	movwf	tblptrl,c
  3381  000F16                     	if	1	;There is more than 1 active tblptr byte
  3382  000F16  0E06               	movlw	high _feeder3Pos
  3383  000F18  6EF7               	movwf	tblptrh,c
  3384  000F1A                     	endif
  3385  000F1A                     	if	0	;There are less than 3 active tblptr bytes
  3386  000F1A                     	endif
  3387  000F1A  0008               	tblrd		*
  3388  000F1C  FFFF               	dw	65535	; errata NOP
  3389  000F1E  CFF5 F043          	movff	tablat,_posVector
  3390  000F22                     
  3391                           ; BSR set to: 0
  3392                           ;main.c: 128:             posVector[1] = feeder3Pos[1];
  3393  000F22  0E0A               	movlw	low (_feeder3Pos+1)
  3394  000F24  6EF6               	movwf	tblptrl,c
  3395  000F26  0E06               	movlw	high (_feeder3Pos+1)
  3396  000F28  6EF7               	movwf	tblptrh,c
  3397  000F2A                     	if	0	;tblptru may be non-zero
  3398  000F2A                     	endif
  3399  000F2A                     	if	0	;tblptru may be non-zero
  3400  000F2A                     	endif
  3401  000F2A  0008               	tblrd		*
  3402  000F2C  FFFF               	dw	65535	; errata NOP
  3403  000F2E  CFF5 F044          	movff	tablat,_posVector+1
  3404                           
  3405                           ;main.c: 129:             break;
  3406  000F32  EFDB  F007         	goto	l4507
  3407  000F36                     l4495:
  3408  000F36  FFFF               	dw	65535	; assembler added errata NOP
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;main.c: 133:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3412  000F38  C043  F015         	movff	_posVector,moveToPoint@x1
  3413  000F3C  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3414  000F3E  C044  F017         	movff	_posVector+1,moveToPoint@y1
  3415  000F42  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3416  000F44  C04C  F019         	movff	_newFeeder,moveToPoint@x2
  3417  000F48  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3418  000F4A  C04D  F01B         	movff	_newFeeder+1,moveToPoint@y2
  3419  000F4E  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3420  000F50  EC22  F005         	call	_moveToPoint	;wreg free
  3421  000F54  0100               	movlb	0	; () banked
  3422  000F56  6FF8               	movwf	executeData@errCode& (0+255),b
  3423  000F58                     
  3424                           ; BSR set to: 0
  3425                           ;main.c: 134:             posVector[0] = newFeeder[0];
  3426  000F58  C04C  F043         	movff	_newFeeder,_posVector
  3427  000F5C                     
  3428                           ; BSR set to: 0
  3429                           ;main.c: 135:             posVector[1] = newFeeder[1];
  3430  000F5C  C04D  F044         	movff	_newFeeder+1,_posVector+1
  3431                           
  3432                           ;main.c: 136:             break;
  3433  000F60  EFDB  F007         	goto	l4507
  3434  000F64                     l4501:
  3435  000F64  FFFF               	dw	65535	; assembler added errata NOP
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;main.c: 140:             errCode = 1;
  3439  000F66  0E01               	movlw	1
  3440  000F68  6FF8               	movwf	executeData@errCode& (0+255),b
  3441                           
  3442                           ;main.c: 141:             break;
  3443  000F6A  EFDB  F007         	goto	l4507
  3444  000F6E                     l4505:
  3445  000F6E  FFFF               	dw	65535	; assembler added errata NOP
  3446  000F70  C0F6  FFD9         	movff	executeData@data,fsr2l
  3447  000F74  C0F7  FFDA         	movff	executeData@data+1,fsr2h
  3448  000F78  50DF               	movf	indf2,w,c
  3449  000F7A  0100               	movlb	0	; () banked
  3450  000F7C  6FF4               	movwf	??_executeData& (0+255),b
  3451  000F7E  6BF5               	clrf	(??_executeData+1)& (0+255),b
  3452                           
  3453                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3454                           ; Switch size 1, requested type "simple"
  3455                           ; Number of cases is 1, Range of values is 0 to 0
  3456                           ; switch strategies available:
  3457                           ; Name         Instructions Cycles
  3458                           ; simple_byte            4     3 (average)
  3459                           ;	Chosen strategy is simple_byte
  3460  000F80  51F5               	movf	(??_executeData+1)& (0+255),w,b
  3461  000F82  0A00               	xorlw	0	; case 0
  3462  000F84  B4D8               	btfsc	status,2,c
  3463  000F86  EFC7  F007         	goto	l4831
  3464  000F8A  EFB2  F007         	goto	l4501
  3465  000F8E                     l4831:
  3466  000F8E  FFFF               	dw	65535	; assembler added errata NOP
  3467                           
  3468                           ; BSR set to: 0
  3469                           ; Switch size 1, requested type "simple"
  3470                           ; Number of cases is 4, Range of values is 0 to 255
  3471                           ; switch strategies available:
  3472                           ; Name         Instructions Cycles
  3473                           ; simple_byte           13     7 (average)
  3474                           ;	Chosen strategy is simple_byte
  3475  000F90  51F4               	movf	??_executeData& (0+255),w,b
  3476  000F92  0A00               	xorlw	0	; case 0
  3477  000F94  B4D8               	btfsc	status,2,c
  3478  000F96  EF0E  F007         	goto	l4477
  3479  000F9A  0A01               	xorlw	1	; case 1
  3480  000F9C  B4D8               	btfsc	status,2,c
  3481  000F9E  EF3D  F007         	goto	l4483
  3482  000FA2  0A03               	xorlw	3	; case 2
  3483  000FA4  B4D8               	btfsc	status,2,c
  3484  000FA6  EF6C  F007         	goto	l4489
  3485  000FAA  0AFD               	xorlw	253	; case 255
  3486  000FAC  B4D8               	btfsc	status,2,c
  3487  000FAE  EF9B  F007         	goto	l4495
  3488  000FB2  EFB2  F007         	goto	l4501
  3489  000FB6                     l4507:
  3490  000FB6  FFFF               	dw	65535	; assembler added errata NOP
  3491                           
  3492                           ; BSR set to: 0
  3493                           ;main.c: 145:     if(!errCode){
  3494  000FB8  51F8               	movf	executeData@errCode& (0+255),w,b
  3495  000FBA  A4D8               	btfss	status,2,c
  3496  000FBC  EFE2  F007         	goto	u3751
  3497  000FC0  EFE5  F007         	goto	u3750
  3498  000FC4                     u3751:
  3499  000FC4  FFFF               	dw	65535	; assembler added errata NOP
  3500  000FC6  EFF3  F007         	goto	l4513
  3501  000FCA                     u3750:
  3502  000FCA  FFFF               	dw	65535	; assembler added errata NOP
  3503  000FCC                     
  3504                           ; BSR set to: 0
  3505                           ;main.c: 148:         errCode = touchObject();
  3506  000FCC  EC70  F00D         	call	_touchObject	;wreg free
  3507  000FD0  0100               	movlb	0	; () banked
  3508  000FD2  6FF8               	movwf	executeData@errCode& (0+255),b
  3509  000FD4                     
  3510                           ; BSR set to: 0
  3511                           ;main.c: 149:         if(errCode != 0){
  3512  000FD4  51F8               	movf	executeData@errCode& (0+255),w,b
  3513  000FD6  B4D8               	btfsc	status,2,c
  3514  000FD8  EFF0  F007         	goto	u3761
  3515  000FDC  EFF3  F007         	goto	u3760
  3516  000FE0                     u3761:
  3517  000FE0  FFFF               	dw	65535	; assembler added errata NOP
  3518  000FE2  EFF7  F007         	goto	l4517
  3519  000FE6                     u3760:
  3520  000FE6                     l4513:
  3521  000FE6  FFFF               	dw	65535	; assembler added errata NOP
  3522                           
  3523                           ; BSR set to: 0
  3524                           ;main.c: 150:             return(errCode);
  3525  000FE8  51F8               	movf	executeData@errCode& (0+255),w,b
  3526  000FEA  EF82  F008         	goto	l360
  3527  000FEE                     l4517:
  3528  000FEE  FFFF               	dw	65535	; assembler added errata NOP
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;main.c: 153:         pickObject();
  3532  000FF0  EC12  F012         	call	_pickObject	;wreg free
  3533  000FF4                     
  3534                           ;main.c: 156:         errCode = liftArm();
  3535  000FF4  EC97  F010         	call	_liftArm	;wreg free
  3536  000FF8  0100               	movlb	0	; () banked
  3537  000FFA  6FF8               	movwf	executeData@errCode& (0+255),b
  3538  000FFC                     
  3539                           ; BSR set to: 0
  3540                           ;main.c: 157:         if(errCode != 0){
  3541  000FFC  51F8               	movf	executeData@errCode& (0+255),w,b
  3542  000FFE  B4D8               	btfsc	status,2,c
  3543  001000  EF04  F008         	goto	u3771
  3544  001004  EF07  F008         	goto	u3770
  3545  001008                     u3771:
  3546  001008  FFFF               	dw	65535	; assembler added errata NOP
  3547  00100A  EF0A  F008         	goto	l4527
  3548  00100E                     u3770:
  3549  00100E  FFFF               	dw	65535	; assembler added errata NOP
  3550  001010  EFF3  F007         	goto	l4513
  3551  001014                     l4527:
  3552  001014  FFFF               	dw	65535	; assembler added errata NOP
  3553                           
  3554                           ; BSR set to: 0
  3555                           ;main.c: 162:         errCode = moveToPoint(posVector[0], posVector[1], data->posX, data
      +                          ->posY);
  3556  001016  C043  F015         	movff	_posVector,moveToPoint@x1
  3557  00101A  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3558  00101C  C044  F017         	movff	_posVector+1,moveToPoint@y1
  3559  001020  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3560  001022  EE20 F001          	lfsr	2,1
  3561  001026  51F6               	movf	executeData@data& (0+255),w,b
  3562  001028  26D9               	addwf	fsr2l,f,c
  3563  00102A  51F7               	movf	(executeData@data+1)& (0+255),w,b
  3564  00102C  22DA               	addwfc	fsr2h,f,c
  3565  00102E  50DF               	movf	indf2,w,c
  3566  001030  6FF4               	movwf	??_executeData& (0+255),b
  3567  001032  51F4               	movf	??_executeData& (0+255),w,b
  3568  001034  6E19               	movwf	moveToPoint@x2^0,c
  3569  001036  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3570  001038  EE20 F002          	lfsr	2,2
  3571  00103C  51F6               	movf	executeData@data& (0+255),w,b
  3572  00103E  26D9               	addwf	fsr2l,f,c
  3573  001040  51F7               	movf	(executeData@data+1)& (0+255),w,b
  3574  001042  22DA               	addwfc	fsr2h,f,c
  3575  001044  50DF               	movf	indf2,w,c
  3576  001046  6FF5               	movwf	(??_executeData+1)& (0+255),b
  3577  001048  51F5               	movf	(??_executeData+1)& (0+255),w,b
  3578  00104A  6E1B               	movwf	moveToPoint@y2^0,c
  3579  00104C  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3580  00104E  EC22  F005         	call	_moveToPoint	;wreg free
  3581  001052  0100               	movlb	0	; () banked
  3582  001054  6FF8               	movwf	executeData@errCode& (0+255),b
  3583  001056                     
  3584                           ; BSR set to: 0
  3585                           ;main.c: 163:         if(errCode != 0){
  3586  001056  51F8               	movf	executeData@errCode& (0+255),w,b
  3587  001058  B4D8               	btfsc	status,2,c
  3588  00105A  EF31  F008         	goto	u3781
  3589  00105E  EF34  F008         	goto	u3780
  3590  001062                     u3781:
  3591  001062  FFFF               	dw	65535	; assembler added errata NOP
  3592  001064  EF37  F008         	goto	l4535
  3593  001068                     u3780:
  3594  001068  FFFF               	dw	65535	; assembler added errata NOP
  3595  00106A  EFF3  F007         	goto	l4513
  3596  00106E                     l4535:
  3597  00106E  FFFF               	dw	65535	; assembler added errata NOP
  3598                           
  3599                           ; BSR set to: 0
  3600                           ;main.c: 166:         posVector[0] = data->posX;
  3601  001070  EE20 F001          	lfsr	2,1
  3602  001074  51F6               	movf	executeData@data& (0+255),w,b
  3603  001076  26D9               	addwf	fsr2l,f,c
  3604  001078  51F7               	movf	(executeData@data+1)& (0+255),w,b
  3605  00107A  22DA               	addwfc	fsr2h,f,c
  3606  00107C  50DF               	movf	indf2,w,c
  3607  00107E  6E43               	movwf	_posVector^0,c
  3608                           
  3609                           ;main.c: 167:         posVector[1] = data->posY;
  3610  001080  EE20 F002          	lfsr	2,2
  3611  001084  51F6               	movf	executeData@data& (0+255),w,b
  3612  001086  26D9               	addwf	fsr2l,f,c
  3613  001088  51F7               	movf	(executeData@data+1)& (0+255),w,b
  3614  00108A  22DA               	addwfc	fsr2h,f,c
  3615  00108C  50DF               	movf	indf2,w,c
  3616  00108E  6E44               	movwf	(_posVector+1)^0,c
  3617                           
  3618                           ;main.c: 170:         rotAngle = data->rotation - rotAngle;
  3619  001090  EE20 F003          	lfsr	2,3
  3620  001094  51F6               	movf	executeData@data& (0+255),w,b
  3621  001096  26D9               	addwf	fsr2l,f,c
  3622  001098  51F7               	movf	(executeData@data+1)& (0+255),w,b
  3623  00109A  22DA               	addwfc	fsr2h,f,c
  3624  00109C  50DF               	movf	indf2,w,c
  3625  00109E  6FF4               	movwf	??_executeData& (0+255),b
  3626  0010A0  504E               	movf	_rotAngle^0,w,c
  3627  0010A2  5DF4               	subwf	??_executeData& (0+255),w,b
  3628  0010A4  6E4E               	movwf	_rotAngle^0,c
  3629  0010A6  504F               	movf	(_rotAngle+1)^0,w,c
  3630  0010A8  A0D8               	btfss	status,0,c
  3631  0010AA  284F               	incf	(_rotAngle+1)^0,w,c
  3632  0010AC  6A4F               	clrf	(_rotAngle+1)^0,c
  3633  0010AE  5E4F               	subwf	(_rotAngle+1)^0,f,c
  3634  0010B0                     
  3635                           ; BSR set to: 0
  3636                           ;main.c: 172:         if(rotAngle < 0){
  3637  0010B0  BE4F               	btfsc	(_rotAngle+1)^0,7,c
  3638  0010B2  EF60  F008         	goto	u3790
  3639  0010B6  EF5D  F008         	goto	u3791
  3640  0010BA                     u3791:
  3641  0010BA  FFFF               	dw	65535	; assembler added errata NOP
  3642  0010BC  EF65  F008         	goto	l4541
  3643  0010C0                     u3790:
  3644  0010C0  FFFF               	dw	65535	; assembler added errata NOP
  3645  0010C2                     
  3646                           ; BSR set to: 0
  3647                           ;main.c: 173:             rotAngle += 360;
  3648  0010C2  0E68               	movlw	104
  3649  0010C4  264E               	addwf	_rotAngle^0,f,c
  3650  0010C6  0E01               	movlw	1
  3651  0010C8  224F               	addwfc	(_rotAngle+1)^0,f,c
  3652  0010CA                     l4541:
  3653  0010CA  FFFF               	dw	65535	; assembler added errata NOP
  3654                           
  3655                           ; BSR set to: 0
  3656                           ;main.c: 175:         rotateObj(rotAngle);
  3657  0010CC  504E               	movf	_rotAngle^0,w,c
  3658  0010CE  EC2A  F010         	call	_rotateObj
  3659  0010D2                     
  3660                           ;main.c: 178:         errCode = touchTherm();
  3661  0010D2  EC02  F00E         	call	_touchTherm	;wreg free
  3662  0010D6  0100               	movlb	0	; () banked
  3663  0010D8  6FF8               	movwf	executeData@errCode& (0+255),b
  3664  0010DA                     
  3665                           ; BSR set to: 0
  3666                           ;main.c: 179:         if(errCode != 0){
  3667  0010DA  51F8               	movf	executeData@errCode& (0+255),w,b
  3668  0010DC  B4D8               	btfsc	status,2,c
  3669  0010DE  EF73  F008         	goto	u3801
  3670  0010E2  EF76  F008         	goto	u3800
  3671  0010E6                     u3801:
  3672  0010E6  FFFF               	dw	65535	; assembler added errata NOP
  3673  0010E8  EF79  F008         	goto	l4551
  3674  0010EC                     u3800:
  3675  0010EC  FFFF               	dw	65535	; assembler added errata NOP
  3676  0010EE  EFF3  F007         	goto	l4513
  3677  0010F2                     l4551:
  3678  0010F2  FFFF               	dw	65535	; assembler added errata NOP
  3679                           
  3680                           ; BSR set to: 0
  3681                           ;main.c: 183:         releaseObj();
  3682  0010F4  ECFC  F011         	call	_releaseObj	;wreg free
  3683  0010F8                     
  3684                           ;main.c: 186:         errCode = liftArm();
  3685  0010F8  EC97  F010         	call	_liftArm	;wreg free
  3686  0010FC  0100               	movlb	0	; () banked
  3687  0010FE  6FF8               	movwf	executeData@errCode& (0+255),b
  3688  001100  EFF3  F007         	goto	l4513
  3689  001104                     l360:
  3690  001104  FFFF               	dw	65535	; assembler added errata NOP
  3691                           
  3692                           ; BSR set to: 0
  3693  001106  0012               	return		;funcret
  3694  001108  FFFF               	dw	65535	; errata NOP
  3695  00110A                     __end_of_executeData:
  3696                           	callstack 0
  3697                           
  3698 ;; *************** function _touchTherm *****************
  3699 ;; Defined at:
  3700 ;;		line 594 in file "motors.c"
  3701 ;; Parameters:    Size  Location     Type
  3702 ;;		None
  3703 ;; Auto vars:     Size  Location     Type
  3704 ;;		None
  3705 ;; Return value:  Size  Location     Type
  3706 ;;                  1    wreg      unsigned char 
  3707 ;; Registers used:
  3708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3709 ;; Tracked objects:
  3710 ;;		On entry : 0/0
  3711 ;;		On exit  : 0/0
  3712 ;;		Unchanged: 0/0
  3713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3714 ;;      Params:         0       0       0       0       0       0       0
  3715 ;;      Locals:         0       0       0       0       0       0       0
  3716 ;;      Temps:          0       0       0       0       0       0       0
  3717 ;;      Totals:         0       0       0       0       0       0       0
  3718 ;;Total ram usage:        0 bytes
  3719 ;; Hardware stack levels used:    1
  3720 ;; Hardware stack levels required when called:    5
  3721 ;; This function calls:
  3722 ;;		_resetStep
  3723 ;;		_resetTherm
  3724 ;;		_returnTherm
  3725 ;;		_startADC
  3726 ;;		_stepMade
  3727 ;;		_stopADC
  3728 ;; This function is called by:
  3729 ;;		_executeData
  3730 ;; This function uses a non-reentrant model
  3731 ;;
  3732                           
  3733                           	psect	text19
  3734  001C04                     __ptext19:
  3735                           	callstack 0
  3736  001C04                     _touchTherm:
  3737                           	callstack 0
  3738  001C04  FFFF               	dw	65535	; assembler added errata NOP
  3739  001C06                     
  3740                           ;motors.c: 600:     motCounter[2][1] = 1;
  3741  001C06  0E00               	movlw	0
  3742  001C08  6E69               	movwf	(_motCounter+11)^0,c
  3743  001C0A  0E01               	movlw	1
  3744  001C0C  6E68               	movwf	(_motCounter+10)^0,c
  3745  001C0E                     
  3746                           ;motors.c: 603:     T2CONbits.TMR2ON = 1;
  3747  001C0E  84CA               	bsf	202,2,c	;volatile
  3748                           
  3749                           ;motors.c: 605:     tm0Error = 0;
  3750  001C10  0E00               	movlw	0
  3751  001C12  6E51               	movwf	(_tm0Error+1)^0,c
  3752  001C14  0E00               	movlw	0
  3753  001C16  6E50               	movwf	_tm0Error^0,c
  3754                           
  3755                           ;motors.c: 606:     tm0Limit = 50;
  3756  001C18  0E32               	movlw	50
  3757  001C1A  6E5D               	movwf	_tm0Limit^0,c
  3758  001C1C                     
  3759                           ;motors.c: 607:     T0CONbits.TMR0ON = 1;
  3760  001C1C  8ED5               	bsf	213,7,c	;volatile
  3761  001C1E                     l4145:
  3762  001C1E  FFFF               	dw	65535	; assembler added errata NOP
  3763                           
  3764                           ;motors.c: 610:     startADC();
  3765  001C20  ECCC  F012         	call	_startADC	;wreg free
  3766                           
  3767                           ;motors.c: 613:     while(!returnTherm() || PORTDbits.RD7){
  3768  001C24  EF5C  F00E         	goto	l4165
  3769  001C28                     l4147:
  3770  001C28  FFFF               	dw	65535	; assembler added errata NOP
  3771                           
  3772                           ;motors.c: 615:         resetStep();
  3773  001C2A  ECDB  F012         	call	_resetStep	;wreg free
  3774  001C2E                     
  3775                           ;motors.c: 618:         if(tm0Error){
  3776  001C2E  5050               	movf	_tm0Error^0,w,c
  3777  001C30  1051               	iorwf	(_tm0Error+1)^0,w,c
  3778  001C32  B4D8               	btfsc	status,2,c
  3779  001C34  EF1E  F00E         	goto	u3441
  3780  001C38  EF21  F00E         	goto	u3440
  3781  001C3C                     u3441:
  3782  001C3C  FFFF               	dw	65535	; assembler added errata NOP
  3783  001C3E  EF28  F00E         	goto	l4153
  3784  001C42                     u3440:
  3785  001C42  FFFF               	dw	65535	; assembler added errata NOP
  3786  001C44                     
  3787                           ;motors.c: 623:             tm0Error = 6;
  3788  001C44  0E00               	movlw	0
  3789  001C46  6E51               	movwf	(_tm0Error+1)^0,c
  3790  001C48  0E06               	movlw	6
  3791  001C4A  6E50               	movwf	_tm0Error^0,c
  3792                           
  3793                           ;motors.c: 624:             break;
  3794  001C4C  EF72  F00E         	goto	l4169
  3795  001C50                     l4153:
  3796  001C50  FFFF               	dw	65535	; assembler added errata NOP
  3797                           
  3798                           ;motors.c: 632:             motCounter[2][0] += motCounter[2][1];
  3799  001C52  EE20  F068         	lfsr	2,_motCounter+10
  3800  001C56  50DE               	movf	postinc2,w,c
  3801  001C58  2666               	addwf	(_motCounter+8)^0,f,c
  3802  001C5A  50DD               	movf	postdec2,w,c
  3803  001C5C  2267               	addwfc	(_motCounter+9)^0,f,c
  3804  001C5E                     
  3805                           ;motors.c: 633:             if(motCounter[2][0] > 3){
  3806  001C5E  BE67               	btfsc	(_motCounter+9)^0,7,c
  3807  001C60  EF3B  F00E         	goto	u3451
  3808  001C64  5067               	movf	(_motCounter+9)^0,w,c
  3809  001C66  E10A               	bnz	u3450
  3810  001C68  0E04               	movlw	4
  3811  001C6A  5C66               	subwf	(_motCounter+8)^0,w,c
  3812  001C6C  A0D8               	btfss	status,0,c
  3813  001C6E  EF3B  F00E         	goto	u3451
  3814  001C72  EF3E  F00E         	goto	u3450
  3815  001C76                     u3451:
  3816  001C76  FFFF               	dw	65535	; assembler added errata NOP
  3817  001C78  EF43  F00E         	goto	l4159
  3818  001C7C                     u3450:
  3819  001C7C  FFFF               	dw	65535	; assembler added errata NOP
  3820  001C7E                     
  3821                           ;motors.c: 634:                 motCounter[2][0] = 0;
  3822  001C7E  0E00               	movlw	0
  3823  001C80  6E67               	movwf	(_motCounter+9)^0,c
  3824  001C82  0E00               	movlw	0
  3825  001C84  6E66               	movwf	(_motCounter+8)^0,c
  3826  001C86                     l4159:
  3827  001C86  FFFF               	dw	65535	; assembler added errata NOP
  3828                           
  3829                           ;motors.c: 637:             LATC = stepMot3[motCounter[2][0]];
  3830  001C88  0E84               	movlw	low _stepMot3
  3831  001C8A  2466               	addwf	(_motCounter+8)^0,w,c
  3832  001C8C  6ED9               	movwf	fsr2l,c
  3833  001C8E  0E00               	movlw	high _stepMot3
  3834  001C90  2067               	addwfc	(_motCounter+9)^0,w,c
  3835  001C92  6EDA               	movwf	fsr2h,c
  3836  001C94  50DF               	movf	indf2,w,c
  3837  001C96  6E8B               	movwf	139,c	;volatile
  3838  001C98                     l4161:
  3839  001C98  FFFF               	dw	65535	; assembler added errata NOP
  3840  001C9A  EC67  F012         	call	_stepMade	;wreg free
  3841  001C9E  5012               	movf	?_stepMade^0,w,c
  3842  001CA0  1013               	iorwf	(?_stepMade+1)^0,w,c
  3843  001CA2  B4D8               	btfsc	status,2,c
  3844  001CA4  EF56  F00E         	goto	u3461
  3845  001CA8  EF59  F00E         	goto	u3460
  3846  001CAC                     u3461:
  3847  001CAC  FFFF               	dw	65535	; assembler added errata NOP
  3848  001CAE  EF4C  F00E         	goto	l4161
  3849  001CB2                     u3460:
  3850  001CB2  FFFF               	dw	65535	; assembler added errata NOP
  3851  001CB4  EF0F  F00E         	goto	l4145
  3852  001CB8                     l4165:
  3853  001CB8  FFFF               	dw	65535	; assembler added errata NOP
  3854                           
  3855                           ;motors.c: 613:     while(!returnTherm() || PORTDbits.RD7){
  3856  001CBA  ECB5  F012         	call	_returnTherm	;wreg free
  3857  001CBE  5012               	movf	?_returnTherm^0,w,c
  3858  001CC0  1013               	iorwf	(?_returnTherm+1)^0,w,c
  3859  001CC2  B4D8               	btfsc	status,2,c
  3860  001CC4  EF66  F00E         	goto	u3471
  3861  001CC8  EF69  F00E         	goto	u3470
  3862  001CCC                     u3471:
  3863  001CCC  FFFF               	dw	65535	; assembler added errata NOP
  3864  001CCE  EF14  F00E         	goto	l4147
  3865  001CD2                     u3470:
  3866  001CD2  FFFF               	dw	65535	; assembler added errata NOP
  3867  001CD4  BE83               	btfsc	131,7,c	;volatile
  3868  001CD6  EF6F  F00E         	goto	u3481
  3869  001CDA  EF72  F00E         	goto	u3480
  3870  001CDE                     u3481:
  3871  001CDE  FFFF               	dw	65535	; assembler added errata NOP
  3872  001CE0  EF14  F00E         	goto	l4147
  3873  001CE4                     u3480:
  3874  001CE4                     l4169:
  3875  001CE4  FFFF               	dw	65535	; assembler added errata NOP
  3876                           
  3877                           ;motors.c: 658:     stopADC();
  3878  001CE6  ECFB  F012         	call	_stopADC	;wreg free
  3879  001CEA                     
  3880                           ;motors.c: 661:     resetTherm();
  3881  001CEA  ECD6  F012         	call	_resetTherm	;wreg free
  3882  001CEE                     
  3883                           ;motors.c: 664:     T0CONbits.TMR0ON = 0;
  3884  001CEE  9ED5               	bcf	213,7,c	;volatile
  3885  001CF0                     
  3886                           ;motors.c: 665:     T2CONbits.TMR2ON = 0;
  3887  001CF0  94CA               	bcf	202,2,c	;volatile
  3888                           
  3889                           ;motors.c: 667:     TMR0 = 0;
  3890  001CF2  0E00               	movlw	0
  3891  001CF4  6ED7               	movwf	215,c	;volatile
  3892  001CF6  0E00               	movlw	0
  3893  001CF8  6ED6               	movwf	214,c	;volatile
  3894                           
  3895                           ;motors.c: 668:     TMR2 = 0;
  3896  001CFA  0E00               	movlw	0
  3897  001CFC  6ECC               	movwf	204,c	;volatile
  3898  001CFE                     
  3899                           ;motors.c: 671:     resetStep();
  3900  001CFE  ECDB  F012         	call	_resetStep	;wreg free
  3901  001D02                     
  3902                           ;motors.c: 674:     if(PORTDbits.RD7){
  3903  001D02  AE83               	btfss	131,7,c	;volatile
  3904  001D04  EF86  F00E         	goto	u3491
  3905  001D08  EF89  F00E         	goto	u3490
  3906  001D0C                     u3491:
  3907  001D0C  FFFF               	dw	65535	; assembler added errata NOP
  3908  001D0E  EF8E  F00E         	goto	l213
  3909  001D12                     u3490:
  3910  001D12  FFFF               	dw	65535	; assembler added errata NOP
  3911  001D14                     
  3912                           ;motors.c: 675:         tm0Error = 2;
  3913  001D14  0E00               	movlw	0
  3914  001D16  6E51               	movwf	(_tm0Error+1)^0,c
  3915  001D18  0E02               	movlw	2
  3916  001D1A  6E50               	movwf	_tm0Error^0,c
  3917  001D1C                     l213:
  3918  001D1C  FFFF               	dw	65535	; assembler added errata NOP
  3919                           
  3920                           ;motors.c: 678:     return(tm0Error);
  3921  001D1E  5050               	movf	_tm0Error^0,w,c
  3922  001D20  0012               	return		;funcret
  3923  001D22  FFFF               	dw	65535	; errata NOP
  3924  001D24                     __end_of_touchTherm:
  3925                           	callstack 0
  3926                           
  3927 ;; *************** function _returnTherm *****************
  3928 ;; Defined at:
  3929 ;;		line 58 in file "adc.c"
  3930 ;; Parameters:    Size  Location     Type
  3931 ;;		None
  3932 ;; Auto vars:     Size  Location     Type
  3933 ;;		None
  3934 ;; Return value:  Size  Location     Type
  3935 ;;                  2   17[COMRAM] unsigned int 
  3936 ;; Registers used:
  3937 ;;		None
  3938 ;; Tracked objects:
  3939 ;;		On entry : 0/0
  3940 ;;		On exit  : 0/0
  3941 ;;		Unchanged: 0/0
  3942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3943 ;;      Params:         2       0       0       0       0       0       0
  3944 ;;      Locals:         0       0       0       0       0       0       0
  3945 ;;      Temps:          0       0       0       0       0       0       0
  3946 ;;      Totals:         2       0       0       0       0       0       0
  3947 ;;Total ram usage:        2 bytes
  3948 ;; Hardware stack levels used:    1
  3949 ;; Hardware stack levels required when called:    4
  3950 ;; This function calls:
  3951 ;;		Nothing
  3952 ;; This function is called by:
  3953 ;;		_touchTherm
  3954 ;; This function uses a non-reentrant model
  3955 ;;
  3956                           
  3957                           	psect	text20
  3958  00256A                     __ptext20:
  3959                           	callstack 0
  3960  00256A                     _returnTherm:
  3961                           	callstack 0
  3962  00256A  FFFF               	dw	65535	; assembler added errata NOP
  3963  00256C                     
  3964                           ;adc.c: 59:     return therm_rel;
  3965  00256C  C05B  F012         	movff	_therm_rel,?_returnTherm	;volatile
  3966  002570  6A13               	clrf	(?_returnTherm+1)^0,c
  3967  002572  0012               	return		;funcret
  3968  002574  FFFF               	dw	65535	; errata NOP
  3969  002576                     __end_of_returnTherm:
  3970                           	callstack 0
  3971                           
  3972 ;; *************** function _touchObject *****************
  3973 ;; Defined at:
  3974 ;;		line 499 in file "motors.c"
  3975 ;; Parameters:    Size  Location     Type
  3976 ;;		None
  3977 ;; Auto vars:     Size  Location     Type
  3978 ;;		None
  3979 ;; Return value:  Size  Location     Type
  3980 ;;                  1    wreg      unsigned char 
  3981 ;; Registers used:
  3982 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3983 ;; Tracked objects:
  3984 ;;		On entry : 0/0
  3985 ;;		On exit  : 0/0
  3986 ;;		Unchanged: 0/0
  3987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3988 ;;      Params:         0       0       0       0       0       0       0
  3989 ;;      Locals:         0       0       0       0       0       0       0
  3990 ;;      Temps:          0       0       0       0       0       0       0
  3991 ;;      Totals:         0       0       0       0       0       0       0
  3992 ;;Total ram usage:        0 bytes
  3993 ;; Hardware stack levels used:    1
  3994 ;; Hardware stack levels required when called:    5
  3995 ;; This function calls:
  3996 ;;		_resetStep
  3997 ;;		_resetTherm
  3998 ;;		_resetTouch
  3999 ;;		_returnTouch
  4000 ;;		_startADC
  4001 ;;		_stepMade
  4002 ;;		_stopADC
  4003 ;; This function is called by:
  4004 ;;		_executeData
  4005 ;; This function uses a non-reentrant model
  4006 ;;
  4007                           
  4008                           	psect	text21
  4009  001AE0                     __ptext21:
  4010                           	callstack 0
  4011  001AE0                     _touchObject:
  4012                           	callstack 0
  4013  001AE0  FFFF               	dw	65535	; assembler added errata NOP
  4014  001AE2                     
  4015                           ;motors.c: 505:     motCounter[2][1] = 1;
  4016  001AE2  0E00               	movlw	0
  4017  001AE4  6E69               	movwf	(_motCounter+11)^0,c
  4018  001AE6  0E01               	movlw	1
  4019  001AE8  6E68               	movwf	(_motCounter+10)^0,c
  4020  001AEA                     
  4021                           ;motors.c: 508:     T2CONbits.TMR2ON = 1;
  4022  001AEA  84CA               	bsf	202,2,c	;volatile
  4023                           
  4024                           ;motors.c: 510:     tm0Error = 0;
  4025  001AEC  0E00               	movlw	0
  4026  001AEE  6E51               	movwf	(_tm0Error+1)^0,c
  4027  001AF0  0E00               	movlw	0
  4028  001AF2  6E50               	movwf	_tm0Error^0,c
  4029                           
  4030                           ;motors.c: 511:     tm0Limit = 50;
  4031  001AF4  0E32               	movlw	50
  4032  001AF6  6E5D               	movwf	_tm0Limit^0,c
  4033  001AF8                     
  4034                           ;motors.c: 512:     T0CONbits.TMR0ON = 1;
  4035  001AF8  8ED5               	bsf	213,7,c	;volatile
  4036  001AFA                     l4097:
  4037  001AFA  FFFF               	dw	65535	; assembler added errata NOP
  4038                           
  4039                           ;motors.c: 515:     startADC();
  4040  001AFC  ECCC  F012         	call	_startADC	;wreg free
  4041                           
  4042                           ;motors.c: 518:     while(!returnTouch() || PORTDbits.RD7){
  4043  001B00  EFCA  F00D         	goto	l4117
  4044  001B04                     l4099:
  4045  001B04  FFFF               	dw	65535	; assembler added errata NOP
  4046                           
  4047                           ;motors.c: 520:         resetStep();
  4048  001B06  ECDB  F012         	call	_resetStep	;wreg free
  4049  001B0A                     
  4050                           ;motors.c: 523:         if(tm0Error){
  4051  001B0A  5050               	movf	_tm0Error^0,w,c
  4052  001B0C  1051               	iorwf	(_tm0Error+1)^0,w,c
  4053  001B0E  B4D8               	btfsc	status,2,c
  4054  001B10  EF8C  F00D         	goto	u3381
  4055  001B14  EF8F  F00D         	goto	u3380
  4056  001B18                     u3381:
  4057  001B18  FFFF               	dw	65535	; assembler added errata NOP
  4058  001B1A  EF96  F00D         	goto	l4105
  4059  001B1E                     u3380:
  4060  001B1E  FFFF               	dw	65535	; assembler added errata NOP
  4061  001B20                     
  4062                           ;motors.c: 528:             tm0Error = 6;
  4063  001B20  0E00               	movlw	0
  4064  001B22  6E51               	movwf	(_tm0Error+1)^0,c
  4065  001B24  0E06               	movlw	6
  4066  001B26  6E50               	movwf	_tm0Error^0,c
  4067                           
  4068                           ;motors.c: 529:             break;
  4069  001B28  EFE0  F00D         	goto	l4121
  4070  001B2C                     l4105:
  4071  001B2C  FFFF               	dw	65535	; assembler added errata NOP
  4072                           
  4073                           ;motors.c: 537:             motCounter[2][0] += motCounter[2][1];
  4074  001B2E  EE20  F068         	lfsr	2,_motCounter+10
  4075  001B32  50DE               	movf	postinc2,w,c
  4076  001B34  2666               	addwf	(_motCounter+8)^0,f,c
  4077  001B36  50DD               	movf	postdec2,w,c
  4078  001B38  2267               	addwfc	(_motCounter+9)^0,f,c
  4079  001B3A                     
  4080                           ;motors.c: 538:             if(motCounter[2][0] > 3){
  4081  001B3A  BE67               	btfsc	(_motCounter+9)^0,7,c
  4082  001B3C  EFA9  F00D         	goto	u3391
  4083  001B40  5067               	movf	(_motCounter+9)^0,w,c
  4084  001B42  E10A               	bnz	u3390
  4085  001B44  0E04               	movlw	4
  4086  001B46  5C66               	subwf	(_motCounter+8)^0,w,c
  4087  001B48  A0D8               	btfss	status,0,c
  4088  001B4A  EFA9  F00D         	goto	u3391
  4089  001B4E  EFAC  F00D         	goto	u3390
  4090  001B52                     u3391:
  4091  001B52  FFFF               	dw	65535	; assembler added errata NOP
  4092  001B54  EFB1  F00D         	goto	l4111
  4093  001B58                     u3390:
  4094  001B58  FFFF               	dw	65535	; assembler added errata NOP
  4095  001B5A                     
  4096                           ;motors.c: 539:                 motCounter[2][0] = 0;
  4097  001B5A  0E00               	movlw	0
  4098  001B5C  6E67               	movwf	(_motCounter+9)^0,c
  4099  001B5E  0E00               	movlw	0
  4100  001B60  6E66               	movwf	(_motCounter+8)^0,c
  4101  001B62                     l4111:
  4102  001B62  FFFF               	dw	65535	; assembler added errata NOP
  4103                           
  4104                           ;motors.c: 542:             LATC = stepMot3[motCounter[2][0]];
  4105  001B64  0E84               	movlw	low _stepMot3
  4106  001B66  2466               	addwf	(_motCounter+8)^0,w,c
  4107  001B68  6ED9               	movwf	fsr2l,c
  4108  001B6A  0E00               	movlw	high _stepMot3
  4109  001B6C  2067               	addwfc	(_motCounter+9)^0,w,c
  4110  001B6E  6EDA               	movwf	fsr2h,c
  4111  001B70  50DF               	movf	indf2,w,c
  4112  001B72  6E8B               	movwf	139,c	;volatile
  4113  001B74                     l4113:
  4114  001B74  FFFF               	dw	65535	; assembler added errata NOP
  4115  001B76  EC67  F012         	call	_stepMade	;wreg free
  4116  001B7A  5012               	movf	?_stepMade^0,w,c
  4117  001B7C  1013               	iorwf	(?_stepMade+1)^0,w,c
  4118  001B7E  B4D8               	btfsc	status,2,c
  4119  001B80  EFC4  F00D         	goto	u3401
  4120  001B84  EFC7  F00D         	goto	u3400
  4121  001B88                     u3401:
  4122  001B88  FFFF               	dw	65535	; assembler added errata NOP
  4123  001B8A  EFBA  F00D         	goto	l4113
  4124  001B8E                     u3400:
  4125  001B8E  FFFF               	dw	65535	; assembler added errata NOP
  4126  001B90  EF7D  F00D         	goto	l4097
  4127  001B94                     l4117:
  4128  001B94  FFFF               	dw	65535	; assembler added errata NOP
  4129                           
  4130                           ;motors.c: 518:     while(!returnTouch() || PORTDbits.RD7){
  4131  001B96  ECBB  F012         	call	_returnTouch	;wreg free
  4132  001B9A  5012               	movf	?_returnTouch^0,w,c
  4133  001B9C  1013               	iorwf	(?_returnTouch+1)^0,w,c
  4134  001B9E  B4D8               	btfsc	status,2,c
  4135  001BA0  EFD4  F00D         	goto	u3411
  4136  001BA4  EFD7  F00D         	goto	u3410
  4137  001BA8                     u3411:
  4138  001BA8  FFFF               	dw	65535	; assembler added errata NOP
  4139  001BAA  EF82  F00D         	goto	l4099
  4140  001BAE                     u3410:
  4141  001BAE  FFFF               	dw	65535	; assembler added errata NOP
  4142  001BB0  BE83               	btfsc	131,7,c	;volatile
  4143  001BB2  EFDD  F00D         	goto	u3421
  4144  001BB6  EFE0  F00D         	goto	u3420
  4145  001BBA                     u3421:
  4146  001BBA  FFFF               	dw	65535	; assembler added errata NOP
  4147  001BBC  EF82  F00D         	goto	l4099
  4148  001BC0                     u3420:
  4149  001BC0                     l4121:
  4150  001BC0  FFFF               	dw	65535	; assembler added errata NOP
  4151                           
  4152                           ;motors.c: 561:     stopADC();
  4153  001BC2  ECFB  F012         	call	_stopADC	;wreg free
  4154  001BC6                     
  4155                           ;motors.c: 564:     resetTouch();
  4156  001BC6  ECD1  F012         	call	_resetTouch	;wreg free
  4157  001BCA                     
  4158                           ;motors.c: 567:     T0CONbits.TMR0ON = 0;
  4159  001BCA  9ED5               	bcf	213,7,c	;volatile
  4160  001BCC                     
  4161                           ;motors.c: 568:     T2CONbits.TMR2ON = 0;
  4162  001BCC  94CA               	bcf	202,2,c	;volatile
  4163                           
  4164                           ;motors.c: 570:     TMR0 = 0;
  4165  001BCE  0E00               	movlw	0
  4166  001BD0  6ED7               	movwf	215,c	;volatile
  4167  001BD2  0E00               	movlw	0
  4168  001BD4  6ED6               	movwf	214,c	;volatile
  4169                           
  4170                           ;motors.c: 571:     TMR2 = 0;
  4171  001BD6  0E00               	movlw	0
  4172  001BD8  6ECC               	movwf	204,c	;volatile
  4173  001BDA                     
  4174                           ;motors.c: 574:     resetStep();
  4175  001BDA  ECDB  F012         	call	_resetStep	;wreg free
  4176  001BDE                     
  4177                           ;motors.c: 575:     resetTherm();
  4178  001BDE  ECD6  F012         	call	_resetTherm	;wreg free
  4179  001BE2                     
  4180                           ;motors.c: 578:     if(PORTDbits.RD7){
  4181  001BE2  AE83               	btfss	131,7,c	;volatile
  4182  001BE4  EFF6  F00D         	goto	u3431
  4183  001BE8  EFF9  F00D         	goto	u3430
  4184  001BEC                     u3431:
  4185  001BEC  FFFF               	dw	65535	; assembler added errata NOP
  4186  001BEE  EFFE  F00D         	goto	l201
  4187  001BF2                     u3430:
  4188  001BF2  FFFF               	dw	65535	; assembler added errata NOP
  4189  001BF4                     
  4190                           ;motors.c: 579:         tm0Error = 2;
  4191  001BF4  0E00               	movlw	0
  4192  001BF6  6E51               	movwf	(_tm0Error+1)^0,c
  4193  001BF8  0E02               	movlw	2
  4194  001BFA  6E50               	movwf	_tm0Error^0,c
  4195  001BFC                     l201:
  4196  001BFC  FFFF               	dw	65535	; assembler added errata NOP
  4197                           
  4198                           ;motors.c: 582:     return(tm0Error);
  4199  001BFE  5050               	movf	_tm0Error^0,w,c
  4200  001C00  0012               	return		;funcret
  4201  001C02  FFFF               	dw	65535	; errata NOP
  4202  001C04                     __end_of_touchObject:
  4203                           	callstack 0
  4204                           
  4205 ;; *************** function _stopADC *****************
  4206 ;; Defined at:
  4207 ;;		line 44 in file "adc.c"
  4208 ;; Parameters:    Size  Location     Type
  4209 ;;		None
  4210 ;; Auto vars:     Size  Location     Type
  4211 ;;		None
  4212 ;; Return value:  Size  Location     Type
  4213 ;;                  1    wreg      void 
  4214 ;; Registers used:
  4215 ;;		None
  4216 ;; Tracked objects:
  4217 ;;		On entry : 0/0
  4218 ;;		On exit  : 0/0
  4219 ;;		Unchanged: 0/0
  4220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4221 ;;      Params:         0       0       0       0       0       0       0
  4222 ;;      Locals:         0       0       0       0       0       0       0
  4223 ;;      Temps:          0       0       0       0       0       0       0
  4224 ;;      Totals:         0       0       0       0       0       0       0
  4225 ;;Total ram usage:        0 bytes
  4226 ;; Hardware stack levels used:    1
  4227 ;; Hardware stack levels required when called:    4
  4228 ;; This function calls:
  4229 ;;		Nothing
  4230 ;; This function is called by:
  4231 ;;		_touchObject
  4232 ;;		_touchTherm
  4233 ;; This function uses a non-reentrant model
  4234 ;;
  4235                           
  4236                           	psect	text22
  4237  0025F6                     __ptext22:
  4238                           	callstack 0
  4239  0025F6                     _stopADC:
  4240                           	callstack 0
  4241  0025F6  FFFF               	dw	65535	; assembler added errata NOP
  4242  0025F8                     
  4243                           ;adc.c: 45:     ADCON0bits.ADON = 0;
  4244  0025F8  90C2               	bcf	194,0,c	;volatile
  4245  0025FA  0012               	return		;funcret
  4246  0025FC  FFFF               	dw	65535	; errata NOP
  4247  0025FE                     __end_of_stopADC:
  4248                           	callstack 0
  4249                           
  4250 ;; *************** function _startADC *****************
  4251 ;; Defined at:
  4252 ;;		line 36 in file "adc.c"
  4253 ;; Parameters:    Size  Location     Type
  4254 ;;		None
  4255 ;; Auto vars:     Size  Location     Type
  4256 ;;		None
  4257 ;; Return value:  Size  Location     Type
  4258 ;;                  1    wreg      void 
  4259 ;; Registers used:
  4260 ;;		None
  4261 ;; Tracked objects:
  4262 ;;		On entry : 0/0
  4263 ;;		On exit  : 0/0
  4264 ;;		Unchanged: 0/0
  4265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4266 ;;      Params:         0       0       0       0       0       0       0
  4267 ;;      Locals:         0       0       0       0       0       0       0
  4268 ;;      Temps:          0       0       0       0       0       0       0
  4269 ;;      Totals:         0       0       0       0       0       0       0
  4270 ;;Total ram usage:        0 bytes
  4271 ;; Hardware stack levels used:    1
  4272 ;; Hardware stack levels required when called:    4
  4273 ;; This function calls:
  4274 ;;		Nothing
  4275 ;; This function is called by:
  4276 ;;		_touchObject
  4277 ;;		_touchTherm
  4278 ;; This function uses a non-reentrant model
  4279 ;;
  4280                           
  4281                           	psect	text23
  4282  002598                     __ptext23:
  4283                           	callstack 0
  4284  002598                     _startADC:
  4285                           	callstack 0
  4286  002598  FFFF               	dw	65535	; assembler added errata NOP
  4287  00259A                     
  4288                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  4289  00259A  80C2               	bsf	194,0,c	;volatile
  4290                           
  4291                           ;adc.c: 38:     ADCON0bits.GODONE = 1;
  4292  00259C  84C2               	bsf	194,2,c	;volatile
  4293  00259E  0012               	return		;funcret
  4294  0025A0  FFFF               	dw	65535	; errata NOP
  4295  0025A2                     __end_of_startADC:
  4296                           	callstack 0
  4297                           
  4298 ;; *************** function _returnTouch *****************
  4299 ;; Defined at:
  4300 ;;		line 51 in file "adc.c"
  4301 ;; Parameters:    Size  Location     Type
  4302 ;;		None
  4303 ;; Auto vars:     Size  Location     Type
  4304 ;;		None
  4305 ;; Return value:  Size  Location     Type
  4306 ;;                  2   17[COMRAM] unsigned int 
  4307 ;; Registers used:
  4308 ;;		None
  4309 ;; Tracked objects:
  4310 ;;		On entry : 0/0
  4311 ;;		On exit  : 0/0
  4312 ;;		Unchanged: 0/0
  4313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4314 ;;      Params:         2       0       0       0       0       0       0
  4315 ;;      Locals:         0       0       0       0       0       0       0
  4316 ;;      Temps:          0       0       0       0       0       0       0
  4317 ;;      Totals:         2       0       0       0       0       0       0
  4318 ;;Total ram usage:        2 bytes
  4319 ;; Hardware stack levels used:    1
  4320 ;; Hardware stack levels required when called:    4
  4321 ;; This function calls:
  4322 ;;		Nothing
  4323 ;; This function is called by:
  4324 ;;		_touchObject
  4325 ;; This function uses a non-reentrant model
  4326 ;;
  4327                           
  4328                           	psect	text24
  4329  002576                     __ptext24:
  4330                           	callstack 0
  4331  002576                     _returnTouch:
  4332                           	callstack 0
  4333  002576  FFFF               	dw	65535	; assembler added errata NOP
  4334  002578                     
  4335                           ;adc.c: 52:     return touch_rel;
  4336  002578  C05C  F012         	movff	_touch_rel,?_returnTouch	;volatile
  4337  00257C  6A13               	clrf	(?_returnTouch+1)^0,c
  4338  00257E  0012               	return		;funcret
  4339  002580  FFFF               	dw	65535	; errata NOP
  4340  002582                     __end_of_returnTouch:
  4341                           	callstack 0
  4342                           
  4343 ;; *************** function _resetTouch *****************
  4344 ;; Defined at:
  4345 ;;		line 65 in file "adc.c"
  4346 ;; Parameters:    Size  Location     Type
  4347 ;;		None
  4348 ;; Auto vars:     Size  Location     Type
  4349 ;;		None
  4350 ;; Return value:  Size  Location     Type
  4351 ;;                  1    wreg      void 
  4352 ;; Registers used:
  4353 ;;		wreg, status,2
  4354 ;; Tracked objects:
  4355 ;;		On entry : 0/0
  4356 ;;		On exit  : 0/0
  4357 ;;		Unchanged: 0/0
  4358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4359 ;;      Params:         0       0       0       0       0       0       0
  4360 ;;      Locals:         0       0       0       0       0       0       0
  4361 ;;      Temps:          0       0       0       0       0       0       0
  4362 ;;      Totals:         0       0       0       0       0       0       0
  4363 ;;Total ram usage:        0 bytes
  4364 ;; Hardware stack levels used:    1
  4365 ;; Hardware stack levels required when called:    4
  4366 ;; This function calls:
  4367 ;;		Nothing
  4368 ;; This function is called by:
  4369 ;;		_touchObject
  4370 ;; This function uses a non-reentrant model
  4371 ;;
  4372                           
  4373                           	psect	text25
  4374  0025A2                     __ptext25:
  4375                           	callstack 0
  4376  0025A2                     _resetTouch:
  4377                           	callstack 0
  4378  0025A2  FFFF               	dw	65535	; assembler added errata NOP
  4379  0025A4                     
  4380                           ;adc.c: 66:     touch_rel = 0;
  4381  0025A4  0E00               	movlw	0
  4382  0025A6  6E5C               	movwf	_touch_rel^0,c	;volatile
  4383  0025A8  0012               	return		;funcret
  4384  0025AA  FFFF               	dw	65535	; errata NOP
  4385  0025AC                     __end_of_resetTouch:
  4386                           	callstack 0
  4387                           
  4388 ;; *************** function _resetTherm *****************
  4389 ;; Defined at:
  4390 ;;		line 72 in file "adc.c"
  4391 ;; Parameters:    Size  Location     Type
  4392 ;;		None
  4393 ;; Auto vars:     Size  Location     Type
  4394 ;;		None
  4395 ;; Return value:  Size  Location     Type
  4396 ;;                  1    wreg      void 
  4397 ;; Registers used:
  4398 ;;		wreg, status,2
  4399 ;; Tracked objects:
  4400 ;;		On entry : 0/0
  4401 ;;		On exit  : 0/0
  4402 ;;		Unchanged: 0/0
  4403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4404 ;;      Params:         0       0       0       0       0       0       0
  4405 ;;      Locals:         0       0       0       0       0       0       0
  4406 ;;      Temps:          0       0       0       0       0       0       0
  4407 ;;      Totals:         0       0       0       0       0       0       0
  4408 ;;Total ram usage:        0 bytes
  4409 ;; Hardware stack levels used:    1
  4410 ;; Hardware stack levels required when called:    4
  4411 ;; This function calls:
  4412 ;;		Nothing
  4413 ;; This function is called by:
  4414 ;;		_touchObject
  4415 ;;		_touchTherm
  4416 ;; This function uses a non-reentrant model
  4417 ;;
  4418                           
  4419                           	psect	text26
  4420  0025AC                     __ptext26:
  4421                           	callstack 0
  4422  0025AC                     _resetTherm:
  4423                           	callstack 0
  4424  0025AC  FFFF               	dw	65535	; assembler added errata NOP
  4425  0025AE                     
  4426                           ;adc.c: 73:     therm_rel = 0;
  4427  0025AE  0E00               	movlw	0
  4428  0025B0  6E5B               	movwf	_therm_rel^0,c	;volatile
  4429  0025B2  0012               	return		;funcret
  4430  0025B4  FFFF               	dw	65535	; errata NOP
  4431  0025B6                     __end_of_resetTherm:
  4432                           	callstack 0
  4433                           
  4434 ;; *************** function _rotateObj *****************
  4435 ;; Defined at:
  4436 ;;		line 760 in file "motors.c"
  4437 ;; Parameters:    Size  Location     Type
  4438 ;;  rotAngle        1    wreg     unsigned char 
  4439 ;; Auto vars:     Size  Location     Type
  4440 ;;  rotAngle        1    2[BANK0 ] unsigned char 
  4441 ;;  i               2    5[BANK0 ] unsigned int 
  4442 ;;  totStep         2    3[BANK0 ] int 
  4443 ;; Return value:  Size  Location     Type
  4444 ;;                  1    wreg      void 
  4445 ;; Registers used:
  4446 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4447 ;; Tracked objects:
  4448 ;;		On entry : 0/0
  4449 ;;		On exit  : 0/0
  4450 ;;		Unchanged: 0/0
  4451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4452 ;;      Params:         0       0       0       0       0       0       0
  4453 ;;      Locals:         0       5       0       0       0       0       0
  4454 ;;      Temps:          0       2       0       0       0       0       0
  4455 ;;      Totals:         0       7       0       0       0       0       0
  4456 ;;Total ram usage:        7 bytes
  4457 ;; Hardware stack levels used:    1
  4458 ;; Hardware stack levels required when called:    5
  4459 ;; This function calls:
  4460 ;;		___fldiv
  4461 ;;		___fltol
  4462 ;;		___xxtofl
  4463 ;;		_resetStep
  4464 ;;		_stepMade
  4465 ;; This function is called by:
  4466 ;;		_executeData
  4467 ;; This function uses a non-reentrant model
  4468 ;;
  4469                           
  4470                           	psect	text27
  4471  002054                     __ptext27:
  4472                           	callstack 0
  4473  002054                     _rotateObj:
  4474                           	callstack 0
  4475  002054  FFFF               	dw	65535	; assembler added errata NOP
  4476                           
  4477                           ;incstack = 0
  4478                           ;rotateObj@rotAngle stored from wreg
  4479  002056  0100               	movlb	0	; () banked
  4480  002058  6FEF               	movwf	rotateObj@rotAngle& (0+255),b
  4481  00205A                     
  4482                           ;motors.c: 761:     static const float stepAngle = 0.08789;;motors.c: 762:     static ch
      +                          ar rotSequence[] = {0b100100, 0b001100, 0b011000, 0b110000};;motors.c: 763:     unsigned
      +                           int i;;motors.c: 764:     int totStep = rotAngle/stepAngle;
  4483  00205A  0EAC               	movlw	172
  4484  00205C  6E24               	movwf	___fldiv@a^0,c
  4485  00205E  0EFF               	movlw	255
  4486  002060  6E25               	movwf	(___fldiv@a+1)^0,c
  4487  002062  0EB3               	movlw	179
  4488  002064  6E26               	movwf	(___fldiv@a+2)^0,c
  4489  002066  0E3D               	movlw	61
  4490  002068  6E27               	movwf	(___fldiv@a+3)^0,c
  4491  00206A  0100               	movlb	0	; () banked
  4492  00206C  51EF               	movf	rotateObj@rotAngle& (0+255),w,b
  4493  00206E  6E12               	movwf	___xxtofl@val^0,c
  4494  002070  6A13               	clrf	(___xxtofl@val+1)^0,c
  4495  002072  6A14               	clrf	(___xxtofl@val+2)^0,c
  4496  002074  6A15               	clrf	(___xxtofl@val+3)^0,c
  4497  002076  0E01               	movlw	1
  4498  002078  EC88  F009         	call	___xxtofl
  4499  00207C  C012  F020         	movff	?___xxtofl,___fldiv@b
  4500  002080  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4501  002084  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4502  002088  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4503  00208C  EC09  F003         	call	___fldiv	;wreg free
  4504  002090  C020  F039         	movff	?___fldiv,___fltol@f1
  4505  002094  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4506  002098  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4507  00209C  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4508  0020A0  ECD5  F00C         	call	___fltol	;wreg free
  4509  0020A4  C039  F0F0         	movff	?___fltol,rotateObj@totStep
  4510  0020A8  C03A  F0F1         	movff	?___fltol+1,rotateObj@totStep+1
  4511  0020AC                     
  4512                           ;motors.c: 767:     for(i = 0; i < totStep; i++){
  4513  0020AC  0E00               	movlw	0
  4514  0020AE  0100               	movlb	0	; () banked
  4515  0020B0  6FF3               	movwf	(rotateObj@i+1)& (0+255),b
  4516  0020B2  0E00               	movlw	0
  4517  0020B4  6FF2               	movwf	rotateObj@i& (0+255),b
  4518  0020B6  EF83  F010         	goto	l4231
  4519  0020BA                     l4219:
  4520  0020BA  FFFF               	dw	65535	; assembler added errata NOP
  4521                           
  4522                           ; BSR set to: 0
  4523                           ;motors.c: 769:         LATD &= 0xC3;
  4524  0020BC  0EC3               	movlw	195
  4525  0020BE  168C               	andwf	140,f,c	;volatile
  4526  0020C0                     
  4527                           ; BSR set to: 0
  4528                           ;motors.c: 771:         LATD |= rotSequence[i%4];
  4529  0020C0  0E03               	movlw	3
  4530  0020C2  15F2               	andwf	rotateObj@i& (0+255),w,b
  4531  0020C4  6FED               	movwf	??_rotateObj& (0+255),b
  4532  0020C6  0E00               	movlw	0
  4533  0020C8  15F3               	andwf	(rotateObj@i+1)& (0+255),w,b
  4534  0020CA  6FEE               	movwf	(??_rotateObj+1)& (0+255),b
  4535  0020CC  0E80               	movlw	low rotateObj@rotSequence
  4536  0020CE  25ED               	addwf	??_rotateObj& (0+255),w,b
  4537  0020D0  6ED9               	movwf	fsr2l,c
  4538  0020D2  0E00               	movlw	high rotateObj@rotSequence
  4539  0020D4  21EE               	addwfc	(??_rotateObj+1)& (0+255),w,b
  4540  0020D6  6EDA               	movwf	fsr2h,c
  4541  0020D8  50DF               	movf	indf2,w,c
  4542  0020DA  128C               	iorwf	140,f,c	;volatile
  4543  0020DC                     
  4544                           ; BSR set to: 0
  4545                           ;motors.c: 774:         T2CONbits.TMR2ON = 1;
  4546  0020DC  84CA               	bsf	202,2,c	;volatile
  4547  0020DE                     l4225:
  4548  0020DE  FFFF               	dw	65535	; assembler added errata NOP
  4549  0020E0  EC67  F012         	call	_stepMade	;wreg free
  4550  0020E4  5012               	movf	?_stepMade^0,w,c
  4551  0020E6  1013               	iorwf	(?_stepMade+1)^0,w,c
  4552  0020E8  B4D8               	btfsc	status,2,c
  4553  0020EA  EF79  F010         	goto	u3541
  4554  0020EE  EF7C  F010         	goto	u3540
  4555  0020F2                     u3541:
  4556  0020F2  FFFF               	dw	65535	; assembler added errata NOP
  4557  0020F4  EF6F  F010         	goto	l4225
  4558  0020F8                     u3540:
  4559  0020F8  FFFF               	dw	65535	; assembler added errata NOP
  4560  0020FA                     
  4561                           ;motors.c: 776:         T2CONbits.TMR2ON = 0;
  4562  0020FA  94CA               	bcf	202,2,c	;volatile
  4563  0020FC                     
  4564                           ;motors.c: 777:         TMR2 = 0;
  4565  0020FC  0E00               	movlw	0
  4566  0020FE  6ECC               	movwf	204,c	;volatile
  4567  002100                     
  4568                           ;motors.c: 778:     }
  4569  002100  0100               	movlb	0	; () banked
  4570  002102  4BF2               	infsnz	rotateObj@i& (0+255),f,b
  4571  002104  2BF3               	incf	(rotateObj@i+1)& (0+255),f,b
  4572  002106                     l4231:
  4573  002106  FFFF               	dw	65535	; assembler added errata NOP
  4574                           
  4575                           ; BSR set to: 0
  4576  002108  51F0               	movf	rotateObj@totStep& (0+255),w,b
  4577  00210A  5DF2               	subwf	rotateObj@i& (0+255),w,b
  4578  00210C  51F1               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4579  00210E  59F3               	subwfb	(rotateObj@i+1)& (0+255),w,b
  4580  002110  A0D8               	btfss	status,0,c
  4581  002112  EF8D  F010         	goto	u3551
  4582  002116  EF90  F010         	goto	u3550
  4583  00211A                     u3551:
  4584  00211A  FFFF               	dw	65535	; assembler added errata NOP
  4585  00211C  EF5D  F010         	goto	l4219
  4586  002120                     u3550:
  4587  002120  FFFF               	dw	65535	; assembler added errata NOP
  4588  002122                     
  4589                           ; BSR set to: 0
  4590                           ;motors.c: 781:     TMR2 = 0;
  4591  002122  0E00               	movlw	0
  4592  002124  6ECC               	movwf	204,c	;volatile
  4593  002126                     
  4594                           ; BSR set to: 0
  4595                           ;motors.c: 784:     resetStep();
  4596  002126  ECDB  F012         	call	_resetStep	;wreg free
  4597  00212A  0012               	return		;funcret
  4598  00212C  FFFF               	dw	65535	; errata NOP
  4599  00212E                     __end_of_rotateObj:
  4600                           	callstack 0
  4601                           
  4602 ;; *************** function ___xxtofl *****************
  4603 ;; Defined at:
  4604 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4605 ;; Parameters:    Size  Location     Type
  4606 ;;  sign            1    wreg     unsigned char 
  4607 ;;  val             4   17[COMRAM] long 
  4608 ;; Auto vars:     Size  Location     Type
  4609 ;;  sign            1   25[COMRAM] unsigned char 
  4610 ;;  arg             4   27[COMRAM] unsigned long 
  4611 ;;  exp             1   26[COMRAM] unsigned char 
  4612 ;; Return value:  Size  Location     Type
  4613 ;;                  4   17[COMRAM] unsigned char 
  4614 ;; Registers used:
  4615 ;;		wreg, status,2, status,0
  4616 ;; Tracked objects:
  4617 ;;		On entry : 0/0
  4618 ;;		On exit  : 0/0
  4619 ;;		Unchanged: 0/0
  4620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4621 ;;      Params:         4       0       0       0       0       0       0
  4622 ;;      Locals:         6       0       0       0       0       0       0
  4623 ;;      Temps:          4       0       0       0       0       0       0
  4624 ;;      Totals:        14       0       0       0       0       0       0
  4625 ;;Total ram usage:       14 bytes
  4626 ;; Hardware stack levels used:    1
  4627 ;; Hardware stack levels required when called:    4
  4628 ;; This function calls:
  4629 ;;		Nothing
  4630 ;; This function is called by:
  4631 ;;		_rotateObj
  4632 ;; This function uses a non-reentrant model
  4633 ;;
  4634                           
  4635                           	psect	text28
  4636  001310                     __ptext28:
  4637                           	callstack 0
  4638  001310                     ___xxtofl:
  4639                           	callstack 0
  4640  001310  FFFF               	dw	65535	; assembler added errata NOP
  4641                           
  4642                           ;incstack = 0
  4643                           ;___xxtofl@sign stored from wreg
  4644  001312  6E1A               	movwf	___xxtofl@sign^0,c
  4645  001314  501A               	movf	___xxtofl@sign^0,w,c
  4646  001316  B4D8               	btfsc	status,2,c
  4647  001318  EF90  F009         	goto	u3041
  4648  00131C  EF93  F009         	goto	u3040
  4649  001320                     u3041:
  4650  001320  FFFF               	dw	65535	; assembler added errata NOP
  4651  001322  EFB8  F009         	goto	l1285
  4652  001326                     u3040:
  4653  001326  FFFF               	dw	65535	; assembler added errata NOP
  4654  001328  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4655  00132A  EF9C  F009         	goto	u3050
  4656  00132E  EF99  F009         	goto	u3051
  4657  001332                     u3051:
  4658  001332  FFFF               	dw	65535	; assembler added errata NOP
  4659  001334  EFB8  F009         	goto	l1285
  4660  001338                     u3050:
  4661  001338  FFFF               	dw	65535	; assembler added errata NOP
  4662  00133A  C012  F016         	movff	___xxtofl@val,??___xxtofl
  4663  00133E  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  4664  001342  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  4665  001346  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  4666  00134A  1E16               	comf	??___xxtofl^0,f,c
  4667  00134C  1E17               	comf	(??___xxtofl+1)^0,f,c
  4668  00134E  1E18               	comf	(??___xxtofl+2)^0,f,c
  4669  001350  1E19               	comf	(??___xxtofl+3)^0,f,c
  4670  001352  2A16               	incf	??___xxtofl^0,f,c
  4671  001354  0E00               	movlw	0
  4672  001356  2217               	addwfc	(??___xxtofl+1)^0,f,c
  4673  001358  2218               	addwfc	(??___xxtofl+2)^0,f,c
  4674  00135A  2219               	addwfc	(??___xxtofl+3)^0,f,c
  4675  00135C  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  4676  001360  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4677  001364  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4678  001368  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4679  00136C  EFC1  F009         	goto	l3945
  4680  001370                     l1285:
  4681  001370  FFFF               	dw	65535	; assembler added errata NOP
  4682  001372  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  4683  001376  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4684  00137A  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4685  00137E  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4686  001382                     l3945:
  4687  001382  FFFF               	dw	65535	; assembler added errata NOP
  4688  001384  5012               	movf	___xxtofl@val^0,w,c
  4689  001386  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  4690  001388  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  4691  00138A  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  4692  00138C  A4D8               	btfss	status,2,c
  4693  00138E  EFCB  F009         	goto	u3061
  4694  001392  EFCE  F009         	goto	u3060
  4695  001396                     u3061:
  4696  001396  FFFF               	dw	65535	; assembler added errata NOP
  4697  001398  EFD9  F009         	goto	l3951
  4698  00139C                     u3060:
  4699  00139C  FFFF               	dw	65535	; assembler added errata NOP
  4700  00139E  0E00               	movlw	0
  4701  0013A0  6E12               	movwf	?___xxtofl^0,c
  4702  0013A2  0E00               	movlw	0
  4703  0013A4  6E13               	movwf	(?___xxtofl+1)^0,c
  4704  0013A6  0E00               	movlw	0
  4705  0013A8  6E14               	movwf	(?___xxtofl+2)^0,c
  4706  0013AA  0E00               	movlw	0
  4707  0013AC  6E15               	movwf	(?___xxtofl+3)^0,c
  4708  0013AE  EF81  F00A         	goto	l1288
  4709  0013B2                     l3951:
  4710  0013B2  FFFF               	dw	65535	; assembler added errata NOP
  4711  0013B4  0E96               	movlw	150
  4712  0013B6  6E1B               	movwf	___xxtofl@exp^0,c
  4713  0013B8  EFE5  F009         	goto	l3955
  4714  0013BC                     l3953:
  4715  0013BC  FFFF               	dw	65535	; assembler added errata NOP
  4716  0013BE  2A1B               	incf	___xxtofl@exp^0,f,c
  4717  0013C0  90D8               	bcf	status,0,c
  4718  0013C2  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4719  0013C4  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4720  0013C6  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4721  0013C8  321C               	rrcf	___xxtofl@arg^0,f,c
  4722  0013CA                     l3955:
  4723  0013CA  FFFF               	dw	65535	; assembler added errata NOP
  4724  0013CC  0E00               	movlw	0
  4725  0013CE  141C               	andwf	___xxtofl@arg^0,w,c
  4726  0013D0  6E16               	movwf	??___xxtofl^0,c
  4727  0013D2  0E00               	movlw	0
  4728  0013D4  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4729  0013D6  6E17               	movwf	(??___xxtofl+1)^0,c
  4730  0013D8  0E00               	movlw	0
  4731  0013DA  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4732  0013DC  6E18               	movwf	(??___xxtofl+2)^0,c
  4733  0013DE  0EFE               	movlw	254
  4734  0013E0  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4735  0013E2  6E19               	movwf	(??___xxtofl+3)^0,c
  4736  0013E4  5016               	movf	??___xxtofl^0,w,c
  4737  0013E6  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4738  0013E8  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4739  0013EA  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4740  0013EC  A4D8               	btfss	status,2,c
  4741  0013EE  EFFB  F009         	goto	u3071
  4742  0013F2  EFFE  F009         	goto	u3070
  4743  0013F6                     u3071:
  4744  0013F6  FFFF               	dw	65535	; assembler added errata NOP
  4745  0013F8  EFDE  F009         	goto	l3953
  4746  0013FC                     u3070:
  4747  0013FC  FFFF               	dw	65535	; assembler added errata NOP
  4748  0013FE  EF0E  F00A         	goto	l1292
  4749  001402                     l3957:
  4750  001402  FFFF               	dw	65535	; assembler added errata NOP
  4751  001404  2A1B               	incf	___xxtofl@exp^0,f,c
  4752  001406  0E01               	movlw	1
  4753  001408  261C               	addwf	___xxtofl@arg^0,f,c
  4754  00140A  0E00               	movlw	0
  4755  00140C  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4756  00140E  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4757  001410  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4758  001412  90D8               	bcf	status,0,c
  4759  001414  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4760  001416  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4761  001418  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4762  00141A  321C               	rrcf	___xxtofl@arg^0,f,c
  4763  00141C                     l1292:
  4764  00141C  FFFF               	dw	65535	; assembler added errata NOP
  4765  00141E  0E00               	movlw	0
  4766  001420  141C               	andwf	___xxtofl@arg^0,w,c
  4767  001422  6E16               	movwf	??___xxtofl^0,c
  4768  001424  0E00               	movlw	0
  4769  001426  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4770  001428  6E17               	movwf	(??___xxtofl+1)^0,c
  4771  00142A  0E00               	movlw	0
  4772  00142C  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4773  00142E  6E18               	movwf	(??___xxtofl+2)^0,c
  4774  001430  0EFF               	movlw	255
  4775  001432  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4776  001434  6E19               	movwf	(??___xxtofl+3)^0,c
  4777  001436  5016               	movf	??___xxtofl^0,w,c
  4778  001438  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4779  00143A  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4780  00143C  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4781  00143E  A4D8               	btfss	status,2,c
  4782  001440  EF24  F00A         	goto	u3081
  4783  001444  EF27  F00A         	goto	u3080
  4784  001448                     u3081:
  4785  001448  FFFF               	dw	65535	; assembler added errata NOP
  4786  00144A  EF01  F00A         	goto	l3957
  4787  00144E                     u3080:
  4788  00144E  FFFF               	dw	65535	; assembler added errata NOP
  4789  001450  EF31  F00A         	goto	l3965
  4790  001454                     l3963:
  4791  001454  FFFF               	dw	65535	; assembler added errata NOP
  4792  001456  061B               	decf	___xxtofl@exp^0,f,c
  4793  001458  90D8               	bcf	status,0,c
  4794  00145A  361C               	rlcf	___xxtofl@arg^0,f,c
  4795  00145C  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4796  00145E  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4797  001460  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4798  001462                     l3965:
  4799  001462  FFFF               	dw	65535	; assembler added errata NOP
  4800  001464  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4801  001466  EF37  F00A         	goto	u3091
  4802  00146A  EF3A  F00A         	goto	u3090
  4803  00146E                     u3091:
  4804  00146E  FFFF               	dw	65535	; assembler added errata NOP
  4805  001470  EF44  F00A         	goto	l1299
  4806  001474                     u3090:
  4807  001474  FFFF               	dw	65535	; assembler added errata NOP
  4808  001476  0E02               	movlw	2
  4809  001478  601B               	cpfslt	___xxtofl@exp^0,c
  4810  00147A  EF41  F00A         	goto	u3101
  4811  00147E  EF44  F00A         	goto	u3100
  4812  001482                     u3101:
  4813  001482  FFFF               	dw	65535	; assembler added errata NOP
  4814  001484  EF2A  F00A         	goto	l3963
  4815  001488                     u3100:
  4816  001488                     l1299:
  4817  001488  FFFF               	dw	65535	; assembler added errata NOP
  4818  00148A  B01B               	btfsc	___xxtofl@exp^0,0,c
  4819  00148C  EF4A  F00A         	goto	u3111
  4820  001490  EF4D  F00A         	goto	u3110
  4821  001494                     u3111:
  4822  001494  FFFF               	dw	65535	; assembler added errata NOP
  4823  001496  EF4F  F00A         	goto	l3971
  4824  00149A                     u3110:
  4825  00149A  FFFF               	dw	65535	; assembler added errata NOP
  4826  00149C  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  4827  00149E                     l3971:
  4828  00149E  FFFF               	dw	65535	; assembler added errata NOP
  4829  0014A0  90D8               	bcf	status,0,c
  4830  0014A2  321B               	rrcf	___xxtofl@exp^0,f,c
  4831  0014A4  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  4832  0014A8  6A17               	clrf	(??___xxtofl+1)^0,c
  4833  0014AA  6A18               	clrf	(??___xxtofl+2)^0,c
  4834  0014AC  6A19               	clrf	(??___xxtofl+3)^0,c
  4835  0014AE  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  4836  0014B2  6A18               	clrf	(??___xxtofl+2)^0,c
  4837  0014B4  6A17               	clrf	(??___xxtofl+1)^0,c
  4838  0014B6  6A16               	clrf	??___xxtofl^0,c
  4839  0014B8  5016               	movf	??___xxtofl^0,w,c
  4840  0014BA  121C               	iorwf	___xxtofl@arg^0,f,c
  4841  0014BC  5017               	movf	(??___xxtofl+1)^0,w,c
  4842  0014BE  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4843  0014C0  5018               	movf	(??___xxtofl+2)^0,w,c
  4844  0014C2  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4845  0014C4  5019               	movf	(??___xxtofl+3)^0,w,c
  4846  0014C6  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4847  0014C8  501A               	movf	___xxtofl@sign^0,w,c
  4848  0014CA  B4D8               	btfsc	status,2,c
  4849  0014CC  EF6A  F00A         	goto	u3121
  4850  0014D0  EF6D  F00A         	goto	u3120
  4851  0014D4                     u3121:
  4852  0014D4  FFFF               	dw	65535	; assembler added errata NOP
  4853  0014D6  EF78  F00A         	goto	l3981
  4854  0014DA                     u3120:
  4855  0014DA  FFFF               	dw	65535	; assembler added errata NOP
  4856  0014DC  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4857  0014DE  EF76  F00A         	goto	u3130
  4858  0014E2  EF73  F00A         	goto	u3131
  4859  0014E6                     u3131:
  4860  0014E6  FFFF               	dw	65535	; assembler added errata NOP
  4861  0014E8  EF78  F00A         	goto	l3981
  4862  0014EC                     u3130:
  4863  0014EC  FFFF               	dw	65535	; assembler added errata NOP
  4864  0014EE  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  4865  0014F0                     l3981:
  4866  0014F0  FFFF               	dw	65535	; assembler added errata NOP
  4867  0014F2  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  4868  0014F6  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  4869  0014FA  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  4870  0014FE  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  4871  001502                     l1288:
  4872  001502  FFFF               	dw	65535	; assembler added errata NOP
  4873  001504  0012               	return		;funcret
  4874  001506  FFFF               	dw	65535	; errata NOP
  4875  001508                     __end_of___xxtofl:
  4876                           	callstack 0
  4877                           
  4878 ;; *************** function ___fltol *****************
  4879 ;; Defined at:
  4880 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  4881 ;; Parameters:    Size  Location     Type
  4882 ;;  f1              4   56[COMRAM] unsigned char 
  4883 ;; Auto vars:     Size  Location     Type
  4884 ;;  exp1            1   65[COMRAM] unsigned char 
  4885 ;;  sign1           1   64[COMRAM] unsigned char 
  4886 ;; Return value:  Size  Location     Type
  4887 ;;                  4   56[COMRAM] long 
  4888 ;; Registers used:
  4889 ;;		wreg, status,2, status,0
  4890 ;; Tracked objects:
  4891 ;;		On entry : 0/0
  4892 ;;		On exit  : 0/0
  4893 ;;		Unchanged: 0/0
  4894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4895 ;;      Params:         4       0       0       0       0       0       0
  4896 ;;      Locals:         2       0       0       0       0       0       0
  4897 ;;      Temps:          4       0       0       0       0       0       0
  4898 ;;      Totals:        10       0       0       0       0       0       0
  4899 ;;Total ram usage:       10 bytes
  4900 ;; Hardware stack levels used:    1
  4901 ;; Hardware stack levels required when called:    4
  4902 ;; This function calls:
  4903 ;;		Nothing
  4904 ;; This function is called by:
  4905 ;;		_rotateObj
  4906 ;; This function uses a non-reentrant model
  4907 ;;
  4908                           
  4909                           	psect	text29
  4910  0019AA                     __ptext29:
  4911                           	callstack 0
  4912  0019AA                     ___fltol:
  4913                           	callstack 0
  4914  0019AA  FFFF               	dw	65535	; assembler added errata NOP
  4915  0019AC  343B               	rlcf	(___fltol@f1+2)^0,w,c
  4916  0019AE  343C               	rlcf	(___fltol@f1+3)^0,w,c
  4917  0019B0  6E42               	movwf	___fltol@exp1^0,c
  4918  0019B2  5042               	movf	___fltol@exp1^0,w,c
  4919  0019B4  A4D8               	btfss	status,2,c
  4920  0019B6  EFDF  F00C         	goto	u2971
  4921  0019BA  EFE2  F00C         	goto	u2970
  4922  0019BE                     u2971:
  4923  0019BE  FFFF               	dw	65535	; assembler added errata NOP
  4924  0019C0  EFEE  F00C         	goto	l3901
  4925  0019C4                     u2970:
  4926  0019C4  FFFF               	dw	65535	; assembler added errata NOP
  4927  0019C6                     l3897:
  4928  0019C6  FFFF               	dw	65535	; assembler added errata NOP
  4929  0019C8  0E00               	movlw	0
  4930  0019CA  6E39               	movwf	?___fltol^0,c
  4931  0019CC  0E00               	movlw	0
  4932  0019CE  6E3A               	movwf	(?___fltol+1)^0,c
  4933  0019D0  0E00               	movlw	0
  4934  0019D2  6E3B               	movwf	(?___fltol+2)^0,c
  4935  0019D4  0E00               	movlw	0
  4936  0019D6  6E3C               	movwf	(?___fltol+3)^0,c
  4937  0019D8  EF6D  F00D         	goto	l927
  4938  0019DC                     l3901:
  4939  0019DC  FFFF               	dw	65535	; assembler added errata NOP
  4940  0019DE  C039  F03D         	movff	___fltol@f1,??___fltol
  4941  0019E2  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  4942  0019E6  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  4943  0019EA  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  4944  0019EE  0E20               	movlw	32
  4945  0019F0  EF00  F00D         	goto	u2980
  4946  0019F4                     u2985:
  4947  0019F4  FFFF               	dw	65535	; assembler added errata NOP
  4948  0019F6  90D8               	bcf	status,0,c
  4949  0019F8  3240               	rrcf	(??___fltol+3)^0,f,c
  4950  0019FA  323F               	rrcf	(??___fltol+2)^0,f,c
  4951  0019FC  323E               	rrcf	(??___fltol+1)^0,f,c
  4952  0019FE  323D               	rrcf	??___fltol^0,f,c
  4953  001A00                     u2980:
  4954  001A00  FFFF               	dw	65535	; assembler added errata NOP
  4955  001A02  2EE8               	decfsz	wreg,f,c
  4956  001A04  EFFA  F00C         	goto	u2985
  4957  001A08  503D               	movf	??___fltol^0,w,c
  4958  001A0A  6E41               	movwf	___fltol@sign1^0,c
  4959  001A0C  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  4960  001A0E  0EFF               	movlw	255
  4961  001A10  1639               	andwf	___fltol@f1^0,f,c
  4962  001A12  0EFF               	movlw	255
  4963  001A14  163A               	andwf	(___fltol@f1+1)^0,f,c
  4964  001A16  0EFF               	movlw	255
  4965  001A18  163B               	andwf	(___fltol@f1+2)^0,f,c
  4966  001A1A  0E00               	movlw	0
  4967  001A1C  163C               	andwf	(___fltol@f1+3)^0,f,c
  4968  001A1E  0E96               	movlw	150
  4969  001A20  5E42               	subwf	___fltol@exp1^0,f,c
  4970  001A22  BE42               	btfsc	___fltol@exp1^0,7,c
  4971  001A24  EF19  F00D         	goto	u2990
  4972  001A28  EF16  F00D         	goto	u2991
  4973  001A2C                     u2991:
  4974  001A2C  FFFF               	dw	65535	; assembler added errata NOP
  4975  001A2E  EF33  F00D         	goto	l3921
  4976  001A32                     u2990:
  4977  001A32  FFFF               	dw	65535	; assembler added errata NOP
  4978  001A34  5042               	movf	___fltol@exp1^0,w,c
  4979  001A36  0A80               	xorlw	128
  4980  001A38  0F97               	addlw	151
  4981  001A3A  B0D8               	btfsc	status,0,c
  4982  001A3C  EF22  F00D         	goto	u3001
  4983  001A40  EF25  F00D         	goto	u3000
  4984  001A44                     u3001:
  4985  001A44  FFFF               	dw	65535	; assembler added errata NOP
  4986  001A46  EF28  F00D         	goto	l3917
  4987  001A4A                     u3000:
  4988  001A4A  FFFF               	dw	65535	; assembler added errata NOP
  4989  001A4C  EFE3  F00C         	goto	l3897
  4990  001A50                     l3917:
  4991  001A50  FFFF               	dw	65535	; assembler added errata NOP
  4992  001A52  90D8               	bcf	status,0,c
  4993  001A54  323C               	rrcf	(___fltol@f1+3)^0,f,c
  4994  001A56  323B               	rrcf	(___fltol@f1+2)^0,f,c
  4995  001A58  323A               	rrcf	(___fltol@f1+1)^0,f,c
  4996  001A5A  3239               	rrcf	___fltol@f1^0,f,c
  4997  001A5C  3E42               	incfsz	___fltol@exp1^0,f,c
  4998  001A5E  EF28  F00D         	goto	l3917
  4999  001A62  EF51  F00D         	goto	l3931
  5000  001A66                     l3921:
  5001  001A66  FFFF               	dw	65535	; assembler added errata NOP
  5002  001A68  0E1F               	movlw	31
  5003  001A6A  6442               	cpfsgt	___fltol@exp1^0,c
  5004  001A6C  EF3A  F00D         	goto	u3011
  5005  001A70  EF3D  F00D         	goto	u3010
  5006  001A74                     u3011:
  5007  001A74  FFFF               	dw	65535	; assembler added errata NOP
  5008  001A76  EF47  F00D         	goto	l3929
  5009  001A7A                     u3010:
  5010  001A7A  FFFF               	dw	65535	; assembler added errata NOP
  5011  001A7C  EFE3  F00C         	goto	l3897
  5012  001A80                     l3927:
  5013  001A80  FFFF               	dw	65535	; assembler added errata NOP
  5014  001A82  90D8               	bcf	status,0,c
  5015  001A84  3639               	rlcf	___fltol@f1^0,f,c
  5016  001A86  363A               	rlcf	(___fltol@f1+1)^0,f,c
  5017  001A88  363B               	rlcf	(___fltol@f1+2)^0,f,c
  5018  001A8A  363C               	rlcf	(___fltol@f1+3)^0,f,c
  5019  001A8C  0642               	decf	___fltol@exp1^0,f,c
  5020  001A8E                     l3929:
  5021  001A8E  FFFF               	dw	65535	; assembler added errata NOP
  5022  001A90  5042               	movf	___fltol@exp1^0,w,c
  5023  001A92  A4D8               	btfss	status,2,c
  5024  001A94  EF4E  F00D         	goto	u3021
  5025  001A98  EF51  F00D         	goto	u3020
  5026  001A9C                     u3021:
  5027  001A9C  FFFF               	dw	65535	; assembler added errata NOP
  5028  001A9E  EF40  F00D         	goto	l3927
  5029  001AA2                     u3020:
  5030  001AA2                     l3931:
  5031  001AA2  FFFF               	dw	65535	; assembler added errata NOP
  5032  001AA4  5041               	movf	___fltol@sign1^0,w,c
  5033  001AA6  B4D8               	btfsc	status,2,c
  5034  001AA8  EF58  F00D         	goto	u3031
  5035  001AAC  EF5B  F00D         	goto	u3030
  5036  001AB0                     u3031:
  5037  001AB0  FFFF               	dw	65535	; assembler added errata NOP
  5038  001AB2  EF64  F00D         	goto	l3935
  5039  001AB6                     u3030:
  5040  001AB6  FFFF               	dw	65535	; assembler added errata NOP
  5041  001AB8  1E3C               	comf	(___fltol@f1+3)^0,f,c
  5042  001ABA  1E3B               	comf	(___fltol@f1+2)^0,f,c
  5043  001ABC  1E3A               	comf	(___fltol@f1+1)^0,f,c
  5044  001ABE  6C39               	negf	___fltol@f1^0,c
  5045  001AC0  0E00               	movlw	0
  5046  001AC2  223A               	addwfc	(___fltol@f1+1)^0,f,c
  5047  001AC4  223B               	addwfc	(___fltol@f1+2)^0,f,c
  5048  001AC6  223C               	addwfc	(___fltol@f1+3)^0,f,c
  5049  001AC8                     l3935:
  5050  001AC8  FFFF               	dw	65535	; assembler added errata NOP
  5051  001ACA  C039  F039         	movff	___fltol@f1,?___fltol
  5052  001ACE  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  5053  001AD2  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  5054  001AD6  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  5055  001ADA                     l927:
  5056  001ADA  FFFF               	dw	65535	; assembler added errata NOP
  5057  001ADC  0012               	return		;funcret
  5058  001ADE  FFFF               	dw	65535	; errata NOP
  5059  001AE0                     __end_of___fltol:
  5060                           	callstack 0
  5061                           
  5062 ;; *************** function ___fldiv *****************
  5063 ;; Defined at:
  5064 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  5065 ;; Parameters:    Size  Location     Type
  5066 ;;  b               4   31[COMRAM] long 
  5067 ;;  a               4   35[COMRAM] long 
  5068 ;; Auto vars:     Size  Location     Type
  5069 ;;  grs             4   50[COMRAM] unsigned long 
  5070 ;;  rem             4   43[COMRAM] unsigned long 
  5071 ;;  new_exp         2   48[COMRAM] short 
  5072 ;;  aexp            1   55[COMRAM] unsigned char 
  5073 ;;  bexp            1   54[COMRAM] unsigned char 
  5074 ;;  sign            1   47[COMRAM] unsigned char 
  5075 ;; Return value:  Size  Location     Type
  5076 ;;                  4   31[COMRAM] unsigned char 
  5077 ;; Registers used:
  5078 ;;		wreg, status,2, status,0
  5079 ;; Tracked objects:
  5080 ;;		On entry : 0/0
  5081 ;;		On exit  : 0/0
  5082 ;;		Unchanged: 0/0
  5083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5084 ;;      Params:         8       0       0       0       0       0       0
  5085 ;;      Locals:        13       0       0       0       0       0       0
  5086 ;;      Temps:          4       0       0       0       0       0       0
  5087 ;;      Totals:        25       0       0       0       0       0       0
  5088 ;;Total ram usage:       25 bytes
  5089 ;; Hardware stack levels used:    1
  5090 ;; Hardware stack levels required when called:    4
  5091 ;; This function calls:
  5092 ;;		Nothing
  5093 ;; This function is called by:
  5094 ;;		_rotateObj
  5095 ;; This function uses a non-reentrant model
  5096 ;;
  5097                           
  5098                           	psect	text30
  5099  000612                     __ptext30:
  5100                           	callstack 0
  5101  000612                     ___fldiv:
  5102                           	callstack 0
  5103  000612  FFFF               	dw	65535	; assembler added errata NOP
  5104  000614  5023               	movf	(___fldiv@b+3)^0,w,c
  5105  000616  0B80               	andlw	128
  5106  000618  6E30               	movwf	___fldiv@sign^0,c
  5107  00061A  5023               	movf	(___fldiv@b+3)^0,w,c
  5108  00061C  2423               	addwf	(___fldiv@b+3)^0,w,c
  5109  00061E  6E37               	movwf	___fldiv@bexp^0,c
  5110  000620  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5111  000622  EF15  F003         	goto	u2741
  5112  000626  EF18  F003         	goto	u2740
  5113  00062A                     u2741:
  5114  00062A  FFFF               	dw	65535	; assembler added errata NOP
  5115  00062C  EF1A  F003         	goto	l3763
  5116  000630                     u2740:
  5117  000630  FFFF               	dw	65535	; assembler added errata NOP
  5118  000632  8037               	bsf	___fldiv@bexp^0,0,c
  5119  000634                     l3763:
  5120  000634  FFFF               	dw	65535	; assembler added errata NOP
  5121  000636  5037               	movf	___fldiv@bexp^0,w,c
  5122  000638  B4D8               	btfsc	status,2,c
  5123  00063A  EF21  F003         	goto	u2751
  5124  00063E  EF24  F003         	goto	u2750
  5125  000642                     u2751:
  5126  000642  FFFF               	dw	65535	; assembler added errata NOP
  5127  000644  EF3D  F003         	goto	l3773
  5128  000648                     u2750:
  5129  000648  FFFF               	dw	65535	; assembler added errata NOP
  5130  00064A  2837               	incf	___fldiv@bexp^0,w,c
  5131  00064C  A4D8               	btfss	status,2,c
  5132  00064E  EF2B  F003         	goto	u2761
  5133  000652  EF2E  F003         	goto	u2760
  5134  000656                     u2761:
  5135  000656  FFFF               	dw	65535	; assembler added errata NOP
  5136  000658  EF37  F003         	goto	l3769
  5137  00065C                     u2760:
  5138  00065C  FFFF               	dw	65535	; assembler added errata NOP
  5139  00065E  0E00               	movlw	0
  5140  000660  6E20               	movwf	___fldiv@b^0,c
  5141  000662  0E00               	movlw	0
  5142  000664  6E21               	movwf	(___fldiv@b+1)^0,c
  5143  000666  0E00               	movlw	0
  5144  000668  6E22               	movwf	(___fldiv@b+2)^0,c
  5145  00066A  0E00               	movlw	0
  5146  00066C  6E23               	movwf	(___fldiv@b+3)^0,c
  5147  00066E                     l3769:
  5148  00066E  FFFF               	dw	65535	; assembler added errata NOP
  5149  000670  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5150  000672  0E00               	movlw	0
  5151  000674  6E23               	movwf	(___fldiv@b+3)^0,c
  5152  000676  EF46  F003         	goto	l3775
  5153  00067A                     l3773:
  5154  00067A  FFFF               	dw	65535	; assembler added errata NOP
  5155  00067C  0E00               	movlw	0
  5156  00067E  6E20               	movwf	___fldiv@b^0,c
  5157  000680  0E00               	movlw	0
  5158  000682  6E21               	movwf	(___fldiv@b+1)^0,c
  5159  000684  0E00               	movlw	0
  5160  000686  6E22               	movwf	(___fldiv@b+2)^0,c
  5161  000688  0E00               	movlw	0
  5162  00068A  6E23               	movwf	(___fldiv@b+3)^0,c
  5163  00068C                     l3775:
  5164  00068C  FFFF               	dw	65535	; assembler added errata NOP
  5165  00068E  5027               	movf	(___fldiv@a+3)^0,w,c
  5166  000690  0B80               	andlw	128
  5167  000692  1A30               	xorwf	___fldiv@sign^0,f,c
  5168  000694  5027               	movf	(___fldiv@a+3)^0,w,c
  5169  000696  2427               	addwf	(___fldiv@a+3)^0,w,c
  5170  000698  6E38               	movwf	___fldiv@aexp^0,c
  5171  00069A  AE26               	btfss	(___fldiv@a+2)^0,7,c
  5172  00069C  EF52  F003         	goto	u2771
  5173  0006A0  EF55  F003         	goto	u2770
  5174  0006A4                     u2771:
  5175  0006A4  FFFF               	dw	65535	; assembler added errata NOP
  5176  0006A6  EF57  F003         	goto	l3783
  5177  0006AA                     u2770:
  5178  0006AA  FFFF               	dw	65535	; assembler added errata NOP
  5179  0006AC  8038               	bsf	___fldiv@aexp^0,0,c
  5180  0006AE                     l3783:
  5181  0006AE  FFFF               	dw	65535	; assembler added errata NOP
  5182  0006B0  5038               	movf	___fldiv@aexp^0,w,c
  5183  0006B2  B4D8               	btfsc	status,2,c
  5184  0006B4  EF5E  F003         	goto	u2781
  5185  0006B8  EF61  F003         	goto	u2780
  5186  0006BC                     u2781:
  5187  0006BC  FFFF               	dw	65535	; assembler added errata NOP
  5188  0006BE  EF7A  F003         	goto	l3793
  5189  0006C2                     u2780:
  5190  0006C2  FFFF               	dw	65535	; assembler added errata NOP
  5191  0006C4  2838               	incf	___fldiv@aexp^0,w,c
  5192  0006C6  A4D8               	btfss	status,2,c
  5193  0006C8  EF68  F003         	goto	u2791
  5194  0006CC  EF6B  F003         	goto	u2790
  5195  0006D0                     u2791:
  5196  0006D0  FFFF               	dw	65535	; assembler added errata NOP
  5197  0006D2  EF74  F003         	goto	l3789
  5198  0006D6                     u2790:
  5199  0006D6  FFFF               	dw	65535	; assembler added errata NOP
  5200  0006D8  0E00               	movlw	0
  5201  0006DA  6E24               	movwf	___fldiv@a^0,c
  5202  0006DC  0E00               	movlw	0
  5203  0006DE  6E25               	movwf	(___fldiv@a+1)^0,c
  5204  0006E0  0E00               	movlw	0
  5205  0006E2  6E26               	movwf	(___fldiv@a+2)^0,c
  5206  0006E4  0E00               	movlw	0
  5207  0006E6  6E27               	movwf	(___fldiv@a+3)^0,c
  5208  0006E8                     l3789:
  5209  0006E8  FFFF               	dw	65535	; assembler added errata NOP
  5210  0006EA  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5211  0006EC  0E00               	movlw	0
  5212  0006EE  6E27               	movwf	(___fldiv@a+3)^0,c
  5213  0006F0  EF83  F003         	goto	l3795
  5214  0006F4                     l3793:
  5215  0006F4  FFFF               	dw	65535	; assembler added errata NOP
  5216  0006F6  0E00               	movlw	0
  5217  0006F8  6E24               	movwf	___fldiv@a^0,c
  5218  0006FA  0E00               	movlw	0
  5219  0006FC  6E25               	movwf	(___fldiv@a+1)^0,c
  5220  0006FE  0E00               	movlw	0
  5221  000700  6E26               	movwf	(___fldiv@a+2)^0,c
  5222  000702  0E00               	movlw	0
  5223  000704  6E27               	movwf	(___fldiv@a+3)^0,c
  5224  000706                     l3795:
  5225  000706  FFFF               	dw	65535	; assembler added errata NOP
  5226  000708  5024               	movf	___fldiv@a^0,w,c
  5227  00070A  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5228  00070C  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5229  00070E  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5230  000710  A4D8               	btfss	status,2,c
  5231  000712  EF8D  F003         	goto	u2801
  5232  000716  EF90  F003         	goto	u2800
  5233  00071A                     u2801:
  5234  00071A  FFFF               	dw	65535	; assembler added errata NOP
  5235  00071C  EFAA  F003         	goto	l3807
  5236  000720                     u2800:
  5237  000720  FFFF               	dw	65535	; assembler added errata NOP
  5238  000722  0E00               	movlw	0
  5239  000724  6E20               	movwf	___fldiv@b^0,c
  5240  000726  0E00               	movlw	0
  5241  000728  6E21               	movwf	(___fldiv@b+1)^0,c
  5242  00072A  0E00               	movlw	0
  5243  00072C  6E22               	movwf	(___fldiv@b+2)^0,c
  5244  00072E  0E00               	movlw	0
  5245  000730  6E23               	movwf	(___fldiv@b+3)^0,c
  5246  000732  0E80               	movlw	128
  5247  000734  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5248  000736  0E7F               	movlw	127
  5249  000738  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5250  00073A                     l3801:
  5251  00073A  FFFF               	dw	65535	; assembler added errata NOP
  5252  00073C  5030               	movf	___fldiv@sign^0,w,c
  5253  00073E  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5254  000740  C020  F020         	movff	___fldiv@b,?___fldiv
  5255  000744  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5256  000748  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5257  00074C  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5258  000750  EF1F  F005         	goto	l1212
  5259  000754                     l3807:
  5260  000754  FFFF               	dw	65535	; assembler added errata NOP
  5261  000756  5037               	movf	___fldiv@bexp^0,w,c
  5262  000758  A4D8               	btfss	status,2,c
  5263  00075A  EFB1  F003         	goto	u2811
  5264  00075E  EFB4  F003         	goto	u2810
  5265  000762                     u2811:
  5266  000762  FFFF               	dw	65535	; assembler added errata NOP
  5267  000764  EFBF  F003         	goto	l3815
  5268  000768                     u2810:
  5269  000768  FFFF               	dw	65535	; assembler added errata NOP
  5270  00076A  0E00               	movlw	0
  5271  00076C  6E20               	movwf	?___fldiv^0,c
  5272  00076E  0E00               	movlw	0
  5273  000770  6E21               	movwf	(?___fldiv+1)^0,c
  5274  000772  0E00               	movlw	0
  5275  000774  6E22               	movwf	(?___fldiv+2)^0,c
  5276  000776  0E00               	movlw	0
  5277  000778  6E23               	movwf	(?___fldiv+3)^0,c
  5278  00077A  EF1F  F005         	goto	l1212
  5279  00077E                     l3815:
  5280  00077E  FFFF               	dw	65535	; assembler added errata NOP
  5281  000780  5038               	movf	___fldiv@aexp^0,w,c
  5282  000782  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5283  000786  6A29               	clrf	(??___fldiv+1)^0,c
  5284  000788  5E28               	subwf	??___fldiv^0,f,c
  5285  00078A  0E00               	movlw	0
  5286  00078C  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5287  00078E  0E7F               	movlw	127
  5288  000790  2428               	addwf	??___fldiv^0,w,c
  5289  000792  6E31               	movwf	___fldiv@new_exp^0,c
  5290  000794  0E00               	movlw	0
  5291  000796  2029               	addwfc	(??___fldiv+1)^0,w,c
  5292  000798  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5293  00079A  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5294  00079E  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5295  0007A2  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5296  0007A6  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5297  0007AA  0E00               	movlw	0
  5298  0007AC  6E20               	movwf	___fldiv@b^0,c
  5299  0007AE  0E00               	movlw	0
  5300  0007B0  6E21               	movwf	(___fldiv@b+1)^0,c
  5301  0007B2  0E00               	movlw	0
  5302  0007B4  6E22               	movwf	(___fldiv@b+2)^0,c
  5303  0007B6  0E00               	movlw	0
  5304  0007B8  6E23               	movwf	(___fldiv@b+3)^0,c
  5305  0007BA  0E00               	movlw	0
  5306  0007BC  6E33               	movwf	___fldiv@grs^0,c
  5307  0007BE  0E00               	movlw	0
  5308  0007C0  6E34               	movwf	(___fldiv@grs+1)^0,c
  5309  0007C2  0E00               	movlw	0
  5310  0007C4  6E35               	movwf	(___fldiv@grs+2)^0,c
  5311  0007C6  0E00               	movlw	0
  5312  0007C8  6E36               	movwf	(___fldiv@grs+3)^0,c
  5313  0007CA  0E00               	movlw	0
  5314  0007CC  6E38               	movwf	___fldiv@aexp^0,c
  5315  0007CE  EF2B  F004         	goto	l1214
  5316  0007D2                     l3825:
  5317  0007D2  FFFF               	dw	65535	; assembler added errata NOP
  5318  0007D4  5038               	movf	___fldiv@aexp^0,w,c
  5319  0007D6  B4D8               	btfsc	status,2,c
  5320  0007D8  EFF0  F003         	goto	u2821
  5321  0007DC  EFF3  F003         	goto	u2820
  5322  0007E0                     u2821:
  5323  0007E0  FFFF               	dw	65535	; assembler added errata NOP
  5324  0007E2  EF0E  F004         	goto	l3833
  5325  0007E6                     u2820:
  5326  0007E6  FFFF               	dw	65535	; assembler added errata NOP
  5327  0007E8  90D8               	bcf	status,0,c
  5328  0007EA  362C               	rlcf	___fldiv@rem^0,f,c
  5329  0007EC  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5330  0007EE  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5331  0007F0  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5332  0007F2  90D8               	bcf	status,0,c
  5333  0007F4  3620               	rlcf	___fldiv@b^0,f,c
  5334  0007F6  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5335  0007F8  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5336  0007FA  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5337  0007FC  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5338  0007FE  EF03  F004         	goto	u2831
  5339  000802  EF06  F004         	goto	u2830
  5340  000806                     u2831:
  5341  000806  FFFF               	dw	65535	; assembler added errata NOP
  5342  000808  EF08  F004         	goto	l1217
  5343  00080C                     u2830:
  5344  00080C  FFFF               	dw	65535	; assembler added errata NOP
  5345  00080E  8020               	bsf	___fldiv@b^0,0,c
  5346  000810                     l1217:
  5347  000810  FFFF               	dw	65535	; assembler added errata NOP
  5348  000812  90D8               	bcf	status,0,c
  5349  000814  3633               	rlcf	___fldiv@grs^0,f,c
  5350  000816  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5351  000818  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5352  00081A  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5353  00081C                     l3833:
  5354  00081C  FFFF               	dw	65535	; assembler added errata NOP
  5355  00081E  5024               	movf	___fldiv@a^0,w,c
  5356  000820  5C2C               	subwf	___fldiv@rem^0,w,c
  5357  000822  5025               	movf	(___fldiv@a+1)^0,w,c
  5358  000824  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5359  000826  5026               	movf	(___fldiv@a+2)^0,w,c
  5360  000828  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5361  00082A  5027               	movf	(___fldiv@a+3)^0,w,c
  5362  00082C  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5363  00082E  A0D8               	btfss	status,0,c
  5364  000830  EF1C  F004         	goto	u2841
  5365  000834  EF1F  F004         	goto	u2840
  5366  000838                     u2841:
  5367  000838  FFFF               	dw	65535	; assembler added errata NOP
  5368  00083A  EF29  F004         	goto	l3839
  5369  00083E                     u2840:
  5370  00083E  FFFF               	dw	65535	; assembler added errata NOP
  5371  000840  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5372  000842  5024               	movf	___fldiv@a^0,w,c
  5373  000844  5E2C               	subwf	___fldiv@rem^0,f,c
  5374  000846  5025               	movf	(___fldiv@a+1)^0,w,c
  5375  000848  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5376  00084A  5026               	movf	(___fldiv@a+2)^0,w,c
  5377  00084C  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5378  00084E  5027               	movf	(___fldiv@a+3)^0,w,c
  5379  000850  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5380  000852                     l3839:
  5381  000852  FFFF               	dw	65535	; assembler added errata NOP
  5382  000854  2A38               	incf	___fldiv@aexp^0,f,c
  5383  000856                     l1214:
  5384  000856  FFFF               	dw	65535	; assembler added errata NOP
  5385  000858  0E19               	movlw	25
  5386  00085A  6438               	cpfsgt	___fldiv@aexp^0,c
  5387  00085C  EF32  F004         	goto	u2851
  5388  000860  EF35  F004         	goto	u2850
  5389  000864                     u2851:
  5390  000864  FFFF               	dw	65535	; assembler added errata NOP
  5391  000866  EFE9  F003         	goto	l3825
  5392  00086A                     u2850:
  5393  00086A  FFFF               	dw	65535	; assembler added errata NOP
  5394  00086C  502C               	movf	___fldiv@rem^0,w,c
  5395  00086E  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5396  000870  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5397  000872  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5398  000874  B4D8               	btfsc	status,2,c
  5399  000876  EF3F  F004         	goto	u2861
  5400  00087A  EF42  F004         	goto	u2860
  5401  00087E                     u2861:
  5402  00087E  FFFF               	dw	65535	; assembler added errata NOP
  5403  000880  EF5F  F004         	goto	l3851
  5404  000884                     u2860:
  5405  000884  FFFF               	dw	65535	; assembler added errata NOP
  5406  000886  8033               	bsf	___fldiv@grs^0,0,c
  5407  000888  EF5F  F004         	goto	l3851
  5408  00088C                     l3845:
  5409  00088C  FFFF               	dw	65535	; assembler added errata NOP
  5410  00088E  90D8               	bcf	status,0,c
  5411  000890  3620               	rlcf	___fldiv@b^0,f,c
  5412  000892  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5413  000894  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5414  000896  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5415  000898  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5416  00089A  EF51  F004         	goto	u2871
  5417  00089E  EF54  F004         	goto	u2870
  5418  0008A2                     u2871:
  5419  0008A2  FFFF               	dw	65535	; assembler added errata NOP
  5420  0008A4  EF56  F004         	goto	l1223
  5421  0008A8                     u2870:
  5422  0008A8  FFFF               	dw	65535	; assembler added errata NOP
  5423  0008AA  8020               	bsf	___fldiv@b^0,0,c
  5424  0008AC                     l1223:
  5425  0008AC  FFFF               	dw	65535	; assembler added errata NOP
  5426  0008AE  90D8               	bcf	status,0,c
  5427  0008B0  3633               	rlcf	___fldiv@grs^0,f,c
  5428  0008B2  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5429  0008B4  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5430  0008B6  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5431  0008B8  0631               	decf	___fldiv@new_exp^0,f,c
  5432  0008BA  A0D8               	btfss	status,0,c
  5433  0008BC  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5434  0008BE                     l3851:
  5435  0008BE  FFFF               	dw	65535	; assembler added errata NOP
  5436  0008C0  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5437  0008C2  EF65  F004         	goto	u2881
  5438  0008C6  EF68  F004         	goto	u2880
  5439  0008CA                     u2881:
  5440  0008CA  FFFF               	dw	65535	; assembler added errata NOP
  5441  0008CC  EF46  F004         	goto	l3845
  5442  0008D0                     u2880:
  5443  0008D0  FFFF               	dw	65535	; assembler added errata NOP
  5444  0008D2  0E00               	movlw	0
  5445  0008D4  6E38               	movwf	___fldiv@aexp^0,c
  5446  0008D6  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5447  0008D8  EF70  F004         	goto	u2891
  5448  0008DC  EF73  F004         	goto	u2890
  5449  0008E0                     u2891:
  5450  0008E0  FFFF               	dw	65535	; assembler added errata NOP
  5451  0008E2  EF9E  F004         	goto	l1225
  5452  0008E6                     u2890:
  5453  0008E6  FFFF               	dw	65535	; assembler added errata NOP
  5454  0008E8  0EFF               	movlw	255
  5455  0008EA  1433               	andwf	___fldiv@grs^0,w,c
  5456  0008EC  6E28               	movwf	??___fldiv^0,c
  5457  0008EE  0EFF               	movlw	255
  5458  0008F0  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5459  0008F2  6E29               	movwf	(??___fldiv+1)^0,c
  5460  0008F4  0EFF               	movlw	255
  5461  0008F6  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5462  0008F8  6E2A               	movwf	(??___fldiv+2)^0,c
  5463  0008FA  0E7F               	movlw	127
  5464  0008FC  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5465  0008FE  6E2B               	movwf	(??___fldiv+3)^0,c
  5466  000900  5028               	movf	??___fldiv^0,w,c
  5467  000902  1029               	iorwf	(??___fldiv+1)^0,w,c
  5468  000904  102A               	iorwf	(??___fldiv+2)^0,w,c
  5469  000906  102B               	iorwf	(??___fldiv+3)^0,w,c
  5470  000908  B4D8               	btfsc	status,2,c
  5471  00090A  EF89  F004         	goto	u2901
  5472  00090E  EF8C  F004         	goto	u2900
  5473  000912                     u2901:
  5474  000912  FFFF               	dw	65535	; assembler added errata NOP
  5475  000914  EF92  F004         	goto	l1226
  5476  000918                     u2900:
  5477  000918  FFFF               	dw	65535	; assembler added errata NOP
  5478  00091A                     l3859:
  5479  00091A  FFFF               	dw	65535	; assembler added errata NOP
  5480  00091C  0E01               	movlw	1
  5481  00091E  6E38               	movwf	___fldiv@aexp^0,c
  5482  000920  EF9E  F004         	goto	l1225
  5483  000924                     l1226:
  5484  000924  FFFF               	dw	65535	; assembler added errata NOP
  5485  000926  A020               	btfss	___fldiv@b^0,0,c
  5486  000928  EF98  F004         	goto	u2911
  5487  00092C  EF9B  F004         	goto	u2910
  5488  000930                     u2911:
  5489  000930  FFFF               	dw	65535	; assembler added errata NOP
  5490  000932  EF9E  F004         	goto	l1225
  5491  000936                     u2910:
  5492  000936  FFFF               	dw	65535	; assembler added errata NOP
  5493  000938  EF8D  F004         	goto	l3859
  5494  00093C                     l1225:
  5495  00093C  FFFF               	dw	65535	; assembler added errata NOP
  5496  00093E  5038               	movf	___fldiv@aexp^0,w,c
  5497  000940  B4D8               	btfsc	status,2,c
  5498  000942  EFA5  F004         	goto	u2921
  5499  000946  EFA8  F004         	goto	u2920
  5500  00094A                     u2921:
  5501  00094A  FFFF               	dw	65535	; assembler added errata NOP
  5502  00094C  EFCF  F004         	goto	l3871
  5503  000950                     u2920:
  5504  000950  FFFF               	dw	65535	; assembler added errata NOP
  5505  000952  0E01               	movlw	1
  5506  000954  2620               	addwf	___fldiv@b^0,f,c
  5507  000956  0E00               	movlw	0
  5508  000958  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5509  00095A  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5510  00095C  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5511  00095E  A023               	btfss	(___fldiv@b+3)^0,0,c
  5512  000960  EFB4  F004         	goto	u2931
  5513  000964  EFB7  F004         	goto	u2930
  5514  000968                     u2931:
  5515  000968  FFFF               	dw	65535	; assembler added errata NOP
  5516  00096A  EFCF  F004         	goto	l3871
  5517  00096E                     u2930:
  5518  00096E  FFFF               	dw	65535	; assembler added errata NOP
  5519  000970  C020  F028         	movff	___fldiv@b,??___fldiv
  5520  000974  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5521  000978  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5522  00097C  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5523  000980  342B               	rlcf	(??___fldiv+3)^0,w,c
  5524  000982  322B               	rrcf	(??___fldiv+3)^0,f,c
  5525  000984  322A               	rrcf	(??___fldiv+2)^0,f,c
  5526  000986  3229               	rrcf	(??___fldiv+1)^0,f,c
  5527  000988  3228               	rrcf	??___fldiv^0,f,c
  5528  00098A  C028  F020         	movff	??___fldiv,___fldiv@b
  5529  00098E  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5530  000992  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5531  000996  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5532  00099A  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5533  00099C  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5534  00099E                     l3871:
  5535  00099E  FFFF               	dw	65535	; assembler added errata NOP
  5536  0009A0  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5537  0009A2  EFDB  F004         	goto	u2941
  5538  0009A6  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5539  0009A8  E109               	bnz	u2940
  5540  0009AA  2831               	incf	___fldiv@new_exp^0,w,c
  5541  0009AC  A0D8               	btfss	status,0,c
  5542  0009AE  EFDB  F004         	goto	u2941
  5543  0009B2  EFDE  F004         	goto	u2940
  5544  0009B6                     u2941:
  5545  0009B6  FFFF               	dw	65535	; assembler added errata NOP
  5546  0009B8  EFEA  F004         	goto	l3875
  5547  0009BC                     u2940:
  5548  0009BC  FFFF               	dw	65535	; assembler added errata NOP
  5549  0009BE  0E00               	movlw	0
  5550  0009C0  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5551  0009C2  6831               	setf	___fldiv@new_exp^0,c
  5552  0009C4  0E00               	movlw	0
  5553  0009C6  6E20               	movwf	___fldiv@b^0,c
  5554  0009C8  0E00               	movlw	0
  5555  0009CA  6E21               	movwf	(___fldiv@b+1)^0,c
  5556  0009CC  0E00               	movlw	0
  5557  0009CE  6E22               	movwf	(___fldiv@b+2)^0,c
  5558  0009D0  0E00               	movlw	0
  5559  0009D2  6E23               	movwf	(___fldiv@b+3)^0,c
  5560  0009D4                     l3875:
  5561  0009D4  FFFF               	dw	65535	; assembler added errata NOP
  5562  0009D6  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5563  0009D8  EFF9  F004         	goto	u2950
  5564  0009DC  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5565  0009DE  E106               	bnz	u2951
  5566  0009E0  0431               	decf	___fldiv@new_exp^0,w,c
  5567  0009E2  B0D8               	btfsc	status,0,c
  5568  0009E4  EFF6  F004         	goto	u2951
  5569  0009E8  EFF9  F004         	goto	u2950
  5570  0009EC                     u2951:
  5571  0009EC  FFFF               	dw	65535	; assembler added errata NOP
  5572  0009EE  EF08  F005         	goto	l3879
  5573  0009F2                     u2950:
  5574  0009F2  FFFF               	dw	65535	; assembler added errata NOP
  5575  0009F4  0E00               	movlw	0
  5576  0009F6  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5577  0009F8  0E00               	movlw	0
  5578  0009FA  6E31               	movwf	___fldiv@new_exp^0,c
  5579  0009FC  0E00               	movlw	0
  5580  0009FE  6E20               	movwf	___fldiv@b^0,c
  5581  000A00  0E00               	movlw	0
  5582  000A02  6E21               	movwf	(___fldiv@b+1)^0,c
  5583  000A04  0E00               	movlw	0
  5584  000A06  6E22               	movwf	(___fldiv@b+2)^0,c
  5585  000A08  0E00               	movlw	0
  5586  000A0A  6E23               	movwf	(___fldiv@b+3)^0,c
  5587  000A0C  0E00               	movlw	0
  5588  000A0E  6E30               	movwf	___fldiv@sign^0,c
  5589  000A10                     l3879:
  5590  000A10  FFFF               	dw	65535	; assembler added errata NOP
  5591  000A12  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5592  000A16  A037               	btfss	___fldiv@bexp^0,0,c
  5593  000A18  EF10  F005         	goto	u2961
  5594  000A1C  EF13  F005         	goto	u2960
  5595  000A20                     u2961:
  5596  000A20  FFFF               	dw	65535	; assembler added errata NOP
  5597  000A22  EF17  F005         	goto	l3885
  5598  000A26                     u2960:
  5599  000A26  FFFF               	dw	65535	; assembler added errata NOP
  5600  000A28  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5601  000A2A  EF19  F005         	goto	l3887
  5602  000A2E                     l3885:
  5603  000A2E  FFFF               	dw	65535	; assembler added errata NOP
  5604  000A30  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5605  000A32                     l3887:
  5606  000A32  FFFF               	dw	65535	; assembler added errata NOP
  5607  000A34  90D8               	bcf	status,0,c
  5608  000A36  3037               	rrcf	___fldiv@bexp^0,w,c
  5609  000A38  6E23               	movwf	(___fldiv@b+3)^0,c
  5610  000A3A  EF9D  F003         	goto	l3801
  5611  000A3E                     l1212:
  5612  000A3E  FFFF               	dw	65535	; assembler added errata NOP
  5613  000A40  0012               	return		;funcret
  5614  000A42  FFFF               	dw	65535	; errata NOP
  5615  000A44                     __end_of___fldiv:
  5616                           	callstack 0
  5617                           
  5618 ;; *************** function _releaseObj *****************
  5619 ;; Defined at:
  5620 ;;		line 803 in file "motors.c"
  5621 ;; Parameters:    Size  Location     Type
  5622 ;;		None
  5623 ;; Auto vars:     Size  Location     Type
  5624 ;;		None
  5625 ;; Return value:  Size  Location     Type
  5626 ;;                  1    wreg      void 
  5627 ;; Registers used:
  5628 ;;		wreg, status,2, status,0, cstack
  5629 ;; Tracked objects:
  5630 ;;		On entry : 0/0
  5631 ;;		On exit  : 0/0
  5632 ;;		Unchanged: 0/0
  5633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5634 ;;      Params:         0       0       0       0       0       0       0
  5635 ;;      Locals:         0       0       0       0       0       0       0
  5636 ;;      Temps:          0       0       0       0       0       0       0
  5637 ;;      Totals:         0       0       0       0       0       0       0
  5638 ;;Total ram usage:        0 bytes
  5639 ;; Hardware stack levels used:    1
  5640 ;; Hardware stack levels required when called:    5
  5641 ;; This function calls:
  5642 ;;		_stepMade
  5643 ;; This function is called by:
  5644 ;;		_executeData
  5645 ;; This function uses a non-reentrant model
  5646 ;;
  5647                           
  5648                           	psect	text31
  5649  0023F8                     __ptext31:
  5650                           	callstack 0
  5651  0023F8                     _releaseObj:
  5652                           	callstack 0
  5653  0023F8  FFFF               	dw	65535	; assembler added errata NOP
  5654  0023FA                     
  5655                           ;motors.c: 804:     LATDbits.LATD1 = 0;
  5656  0023FA  928C               	bcf	140,1,c	;volatile
  5657                           
  5658                           ;motors.c: 807:     T2CONbits.TMR2ON = 1;
  5659  0023FC  84CA               	bsf	202,2,c	;volatile
  5660  0023FE                     l4245:
  5661  0023FE  FFFF               	dw	65535	; assembler added errata NOP
  5662  002400  EC67  F012         	call	_stepMade	;wreg free
  5663  002404  5012               	movf	?_stepMade^0,w,c
  5664  002406  1013               	iorwf	(?_stepMade+1)^0,w,c
  5665  002408  B4D8               	btfsc	status,2,c
  5666  00240A  EF09  F012         	goto	u3571
  5667  00240E  EF0C  F012         	goto	u3570
  5668  002412                     u3571:
  5669  002412  FFFF               	dw	65535	; assembler added errata NOP
  5670  002414  EFFF  F011         	goto	l4245
  5671  002418                     u3570:
  5672  002418  FFFF               	dw	65535	; assembler added errata NOP
  5673  00241A                     
  5674                           ;motors.c: 809:     T2CONbits.TMR2ON = 0;
  5675  00241A  94CA               	bcf	202,2,c	;volatile
  5676  00241C                     
  5677                           ;motors.c: 810:     TMR2 = 0;
  5678  00241C  0E00               	movlw	0
  5679  00241E  6ECC               	movwf	204,c	;volatile
  5680  002420  0012               	return		;funcret
  5681  002422  FFFF               	dw	65535	; errata NOP
  5682  002424                     __end_of_releaseObj:
  5683                           	callstack 0
  5684                           
  5685 ;; *************** function _pickObject *****************
  5686 ;; Defined at:
  5687 ;;		line 790 in file "motors.c"
  5688 ;; Parameters:    Size  Location     Type
  5689 ;;		None
  5690 ;; Auto vars:     Size  Location     Type
  5691 ;;		None
  5692 ;; Return value:  Size  Location     Type
  5693 ;;                  1    wreg      void 
  5694 ;; Registers used:
  5695 ;;		wreg, status,2, status,0, cstack
  5696 ;; Tracked objects:
  5697 ;;		On entry : 0/0
  5698 ;;		On exit  : 0/0
  5699 ;;		Unchanged: 0/0
  5700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5701 ;;      Params:         0       0       0       0       0       0       0
  5702 ;;      Locals:         0       0       0       0       0       0       0
  5703 ;;      Temps:          0       0       0       0       0       0       0
  5704 ;;      Totals:         0       0       0       0       0       0       0
  5705 ;;Total ram usage:        0 bytes
  5706 ;; Hardware stack levels used:    1
  5707 ;; Hardware stack levels required when called:    5
  5708 ;; This function calls:
  5709 ;;		_stepMade
  5710 ;; This function is called by:
  5711 ;;		_executeData
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715                           	psect	text32
  5716  002424                     __ptext32:
  5717                           	callstack 0
  5718  002424                     _pickObject:
  5719                           	callstack 0
  5720  002424  FFFF               	dw	65535	; assembler added errata NOP
  5721  002426                     
  5722                           ;motors.c: 791:     LATDbits.LATD1 = 1;
  5723  002426  828C               	bsf	140,1,c	;volatile
  5724                           
  5725                           ;motors.c: 794:     T2CONbits.TMR2ON = 1;
  5726  002428  84CA               	bsf	202,2,c	;volatile
  5727  00242A                     l4239:
  5728  00242A  FFFF               	dw	65535	; assembler added errata NOP
  5729  00242C  EC67  F012         	call	_stepMade	;wreg free
  5730  002430  5012               	movf	?_stepMade^0,w,c
  5731  002432  1013               	iorwf	(?_stepMade+1)^0,w,c
  5732  002434  B4D8               	btfsc	status,2,c
  5733  002436  EF1F  F012         	goto	u3561
  5734  00243A  EF22  F012         	goto	u3560
  5735  00243E                     u3561:
  5736  00243E  FFFF               	dw	65535	; assembler added errata NOP
  5737  002440  EF15  F012         	goto	l4239
  5738  002444                     u3560:
  5739  002444  FFFF               	dw	65535	; assembler added errata NOP
  5740  002446                     
  5741                           ;motors.c: 796:     T2CONbits.TMR2ON = 0;
  5742  002446  94CA               	bcf	202,2,c	;volatile
  5743  002448                     
  5744                           ;motors.c: 797:     TMR2 = 0;
  5745  002448  0E00               	movlw	0
  5746  00244A  6ECC               	movwf	204,c	;volatile
  5747  00244C  0012               	return		;funcret
  5748  00244E  FFFF               	dw	65535	; errata NOP
  5749  002450                     __end_of_pickObject:
  5750                           	callstack 0
  5751                           
  5752 ;; *************** function _moveToPoint *****************
  5753 ;; Defined at:
  5754 ;;		line 315 in file "motors.c"
  5755 ;; Parameters:    Size  Location     Type
  5756 ;;  x1              2   20[COMRAM] int 
  5757 ;;  y1              2   22[COMRAM] int 
  5758 ;;  x2              2   24[COMRAM] int 
  5759 ;;  y2              2   26[COMRAM] int 
  5760 ;; Auto vars:     Size  Location     Type
  5761 ;;  keepMovingY     1   33[COMRAM] unsigned char 
  5762 ;;  keepMovingX     1   32[COMRAM] unsigned char 
  5763 ;;  MOT2Directio    1   31[COMRAM] unsigned char 
  5764 ;;  MOT1Directio    1   30[COMRAM] unsigned char 
  5765 ;; Return value:  Size  Location     Type
  5766 ;;                  1    wreg      unsigned char 
  5767 ;; Registers used:
  5768 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5769 ;; Tracked objects:
  5770 ;;		On entry : 0/0
  5771 ;;		On exit  : 0/0
  5772 ;;		Unchanged: 0/0
  5773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5774 ;;      Params:         8       0       0       0       0       0       0
  5775 ;;      Locals:         4       0       0       0       0       0       0
  5776 ;;      Temps:          2       0       0       0       0       0       0
  5777 ;;      Totals:        14       0       0       0       0       0       0
  5778 ;;Total ram usage:       14 bytes
  5779 ;; Hardware stack levels used:    1
  5780 ;; Hardware stack levels required when called:    5
  5781 ;; This function calls:
  5782 ;;		_resetStep
  5783 ;;		_stepCounter
  5784 ;;		_stepMade
  5785 ;; This function is called by:
  5786 ;;		_executeData
  5787 ;; This function uses a non-reentrant model
  5788 ;;
  5789                           
  5790                           	psect	text33
  5791  000A44                     __ptext33:
  5792                           	callstack 0
  5793  000A44                     _moveToPoint:
  5794                           	callstack 0
  5795  000A44  FFFF               	dw	65535	; assembler added errata NOP
  5796  000A46                     
  5797                           ;motors.c: 317:     unsigned char MOT1Direction, MOT2Direction;;motors.c: 320:     if(x2
      +                           > maxX || y2 > maxY){
  5798  000A46  501A               	movf	(moveToPoint@x2+1)^0,w,c
  5799  000A48  E107               	bnz	u3141
  5800  000A4A  0ECA               	movlw	202
  5801  000A4C  5C19               	subwf	moveToPoint@x2^0,w,c
  5802  000A4E  B0D8               	btfsc	status,0,c
  5803  000A50  EF2C  F005         	goto	u3141
  5804  000A54  EF2F  F005         	goto	u3140
  5805  000A58                     u3141:
  5806  000A58  FFFF               	dw	65535	; assembler added errata NOP
  5807  000A5A  EF3C  F005         	goto	l3989
  5808  000A5E                     u3140:
  5809  000A5E  FFFF               	dw	65535	; assembler added errata NOP
  5810  000A60  501C               	movf	(moveToPoint@y2+1)^0,w,c
  5811  000A62  E10A               	bnz	u3150
  5812  000A64  0ECA               	movlw	202
  5813  000A66  5C1B               	subwf	moveToPoint@y2^0,w,c
  5814  000A68  A0D8               	btfss	status,0,c
  5815  000A6A  EF39  F005         	goto	u3151
  5816  000A6E  EF3C  F005         	goto	u3150
  5817  000A72                     u3151:
  5818  000A72  FFFF               	dw	65535	; assembler added errata NOP
  5819  000A74  EF40  F005         	goto	l3993
  5820  000A78                     u3150:
  5821  000A78                     l3989:
  5822  000A78  FFFF               	dw	65535	; assembler added errata NOP
  5823                           
  5824                           ;motors.c: 321:         return(5);
  5825  000A7A  0E05               	movlw	5
  5826  000A7C  EF02  F007         	goto	l157
  5827  000A80                     l3993:
  5828  000A80  FFFF               	dw	65535	; assembler added errata NOP
  5829                           
  5830                           ;motors.c: 342:     if((x2 - x1) > 0){
  5831  000A82  5015               	movf	moveToPoint@x1^0,w,c
  5832  000A84  5C19               	subwf	moveToPoint@x2^0,w,c
  5833  000A86  6E1D               	movwf	??_moveToPoint^0,c
  5834  000A88  5016               	movf	(moveToPoint@x1+1)^0,w,c
  5835  000A8A  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  5836  000A8C  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5837  000A8E  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5838  000A90  EF52  F005         	goto	u3161
  5839  000A94  501E               	movf	(??_moveToPoint+1)^0,w,c
  5840  000A96  E109               	bnz	u3160
  5841  000A98  041D               	decf	??_moveToPoint^0,w,c
  5842  000A9A  A0D8               	btfss	status,0,c
  5843  000A9C  EF52  F005         	goto	u3161
  5844  000AA0  EF55  F005         	goto	u3160
  5845  000AA4                     u3161:
  5846  000AA4  FFFF               	dw	65535	; assembler added errata NOP
  5847  000AA6  EF5E  F005         	goto	l158
  5848  000AAA                     u3160:
  5849  000AAA  FFFF               	dw	65535	; assembler added errata NOP
  5850  000AAC                     
  5851                           ;motors.c: 343:         motCounter[0][1] = 1;
  5852  000AAC  0E00               	movlw	0
  5853  000AAE  6E61               	movwf	(_motCounter+3)^0,c
  5854  000AB0  0E01               	movlw	1
  5855  000AB2  6E60               	movwf	(_motCounter+2)^0,c
  5856                           
  5857                           ;motors.c: 344:         MOT1Direction = 1;
  5858  000AB4  0E01               	movlw	1
  5859  000AB6  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  5860                           
  5861                           ;motors.c: 345:     }else{
  5862  000AB8  EF63  F005         	goto	l3999
  5863  000ABC                     l158:
  5864  000ABC  FFFF               	dw	65535	; assembler added errata NOP
  5865                           
  5866                           ;motors.c: 346:         motCounter[0][1] = -1;
  5867  000ABE  6860               	setf	(_motCounter+2)^0,c
  5868  000AC0  6861               	setf	(_motCounter+3)^0,c
  5869  000AC2                     
  5870                           ;motors.c: 347:         MOT1Direction = 0;
  5871  000AC2  0E00               	movlw	0
  5872  000AC4  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  5873  000AC6                     l3999:
  5874  000AC6  FFFF               	dw	65535	; assembler added errata NOP
  5875                           
  5876                           ;motors.c: 350:     if((y2 - y1) > 0){
  5877  000AC8  5017               	movf	moveToPoint@y1^0,w,c
  5878  000ACA  5C1B               	subwf	moveToPoint@y2^0,w,c
  5879  000ACC  6E1D               	movwf	??_moveToPoint^0,c
  5880  000ACE  5018               	movf	(moveToPoint@y1+1)^0,w,c
  5881  000AD0  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  5882  000AD2  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5883  000AD4  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5884  000AD6  EF75  F005         	goto	u3171
  5885  000ADA  501E               	movf	(??_moveToPoint+1)^0,w,c
  5886  000ADC  E109               	bnz	u3170
  5887  000ADE  041D               	decf	??_moveToPoint^0,w,c
  5888  000AE0  A0D8               	btfss	status,0,c
  5889  000AE2  EF75  F005         	goto	u3171
  5890  000AE6  EF78  F005         	goto	u3170
  5891  000AEA                     u3171:
  5892  000AEA  FFFF               	dw	65535	; assembler added errata NOP
  5893  000AEC  EF81  F005         	goto	l160
  5894  000AF0                     u3170:
  5895  000AF0  FFFF               	dw	65535	; assembler added errata NOP
  5896  000AF2                     
  5897                           ;motors.c: 351:         motCounter[1][1] = 1;
  5898  000AF2  0E00               	movlw	0
  5899  000AF4  6E65               	movwf	(_motCounter+7)^0,c
  5900  000AF6  0E01               	movlw	1
  5901  000AF8  6E64               	movwf	(_motCounter+6)^0,c
  5902                           
  5903                           ;motors.c: 352:         MOT2Direction = 1;
  5904  000AFA  0E01               	movlw	1
  5905  000AFC  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  5906                           
  5907                           ;motors.c: 353:     }else{
  5908  000AFE  EF86  F005         	goto	l161
  5909  000B02                     l160:
  5910  000B02  FFFF               	dw	65535	; assembler added errata NOP
  5911                           
  5912                           ;motors.c: 354:         motCounter[2][1] = -1;
  5913  000B04  6868               	setf	(_motCounter+10)^0,c
  5914  000B06  6869               	setf	(_motCounter+11)^0,c
  5915  000B08                     
  5916                           ;motors.c: 355:         MOT2Direction = 0;
  5917  000B08  0E00               	movlw	0
  5918  000B0A  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  5919  000B0C                     l161:
  5920  000B0C  FFFF               	dw	65535	; assembler added errata NOP
  5921                           
  5922                           ;motors.c: 360:     unsigned char keepMovingX = 1;
  5923  000B0E  0E01               	movlw	1
  5924  000B10  6E21               	movwf	moveToPoint@keepMovingX^0,c
  5925                           
  5926                           ;motors.c: 361:     unsigned char keepMovingY = 1;
  5927  000B12  0E01               	movlw	1
  5928  000B14  6E22               	movwf	moveToPoint@keepMovingY^0,c
  5929  000B16                     
  5930                           ;motors.c: 364:     T2CONbits.TMR2ON = 1;
  5931  000B16  84CA               	bsf	202,2,c	;volatile
  5932                           
  5933                           ;motors.c: 366:     tm0Error = 0;
  5934  000B18  0E00               	movlw	0
  5935  000B1A  6E51               	movwf	(_tm0Error+1)^0,c
  5936  000B1C  0E00               	movlw	0
  5937  000B1E  6E50               	movwf	_tm0Error^0,c
  5938                           
  5939                           ;motors.c: 367:     tm0Limit = 100;
  5940  000B20  0E64               	movlw	100
  5941  000B22  6E5D               	movwf	_tm0Limit^0,c
  5942  000B24                     
  5943                           ;motors.c: 368:     T0CONbits.TMR0ON = 1;
  5944  000B24  8ED5               	bsf	213,7,c	;volatile
  5945                           
  5946                           ;motors.c: 370:     while(keepMovingX || keepMovingY){
  5947  000B26  EFE2  F006         	goto	l4079
  5948  000B2A                     l4009:
  5949  000B2A  FFFF               	dw	65535	; assembler added errata NOP
  5950                           
  5951                           ;motors.c: 373:         if(tm0Error){
  5952  000B2C  5050               	movf	_tm0Error^0,w,c
  5953  000B2E  1051               	iorwf	(_tm0Error+1)^0,w,c
  5954  000B30  B4D8               	btfsc	status,2,c
  5955  000B32  EF9D  F005         	goto	u3181
  5956  000B36  EFA0  F005         	goto	u3180
  5957  000B3A                     u3181:
  5958  000B3A  FFFF               	dw	65535	; assembler added errata NOP
  5959  000B3C  EFA7  F005         	goto	l4013
  5960  000B40                     u3180:
  5961  000B40  FFFF               	dw	65535	; assembler added errata NOP
  5962  000B42                     
  5963                           ;motors.c: 379:             tm0Error = 4;
  5964  000B42  0E00               	movlw	0
  5965  000B44  6E51               	movwf	(_tm0Error+1)^0,c
  5966  000B46  0E04               	movlw	4
  5967  000B48  6E50               	movwf	_tm0Error^0,c
  5968                           
  5969                           ;motors.c: 380:             break;
  5970  000B4A  EFF6  F006         	goto	l165
  5971  000B4E                     l4013:
  5972  000B4E  FFFF               	dw	65535	; assembler added errata NOP
  5973                           
  5974                           ;motors.c: 388:         if(MOT1Direction == 1){
  5975  000B50  041F               	decf	moveToPoint@MOT1Direction^0,w,c
  5976  000B52  A4D8               	btfss	status,2,c
  5977  000B54  EFAE  F005         	goto	u3191
  5978  000B58  EFB1  F005         	goto	u3190
  5979  000B5C                     u3191:
  5980  000B5C  FFFF               	dw	65535	; assembler added errata NOP
  5981  000B5E  EFFA  F005         	goto	l4029
  5982  000B62                     u3190:
  5983  000B62  FFFF               	dw	65535	; assembler added errata NOP
  5984  000B64                     
  5985                           ;motors.c: 389:             if(x1 + stepCounter() >= x2){
  5986  000B64  ECC1  F012         	call	_stepCounter	;wreg free
  5987  000B68  5015               	movf	moveToPoint@x1^0,w,c
  5988  000B6A  2612               	addwf	?_stepCounter^0,f,c
  5989  000B6C  5016               	movf	(moveToPoint@x1+1)^0,w,c
  5990  000B6E  2213               	addwfc	(?_stepCounter+1)^0,f,c
  5991  000B70  5019               	movf	moveToPoint@x2^0,w,c
  5992  000B72  5C12               	subwf	?_stepCounter^0,w,c
  5993  000B74  501A               	movf	(moveToPoint@x2+1)^0,w,c
  5994  000B76  5813               	subwfb	(?_stepCounter+1)^0,w,c
  5995  000B78  A0D8               	btfss	status,0,c
  5996  000B7A  EFC1  F005         	goto	u3201
  5997  000B7E  EFC4  F005         	goto	u3200
  5998  000B82                     u3201:
  5999  000B82  FFFF               	dw	65535	; assembler added errata NOP
  6000  000B84  EFCA  F005         	goto	l4019
  6001  000B88                     u3200:
  6002  000B88  FFFF               	dw	65535	; assembler added errata NOP
  6003  000B8A                     l4017:
  6004  000B8A  FFFF               	dw	65535	; assembler added errata NOP
  6005                           
  6006                           ;motors.c: 391:                 keepMovingX = 0;
  6007  000B8C  0E00               	movlw	0
  6008  000B8E  6E21               	movwf	moveToPoint@keepMovingX^0,c
  6009                           
  6010                           ;motors.c: 392:             }else if(keepMovingX){
  6011  000B90  EF3E  F006         	goto	l4045
  6012  000B94                     l4019:
  6013  000B94  FFFF               	dw	65535	; assembler added errata NOP
  6014  000B96  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6015  000B98  B4D8               	btfsc	status,2,c
  6016  000B9A  EFD1  F005         	goto	u3211
  6017  000B9E  EFD4  F005         	goto	u3210
  6018  000BA2                     u3211:
  6019  000BA2  FFFF               	dw	65535	; assembler added errata NOP
  6020  000BA4  EF3E  F006         	goto	l4045
  6021  000BA8                     u3210:
  6022  000BA8  FFFF               	dw	65535	; assembler added errata NOP
  6023  000BAA                     
  6024                           ;motors.c: 398:             motCounter[0][0] += motCounter[0][1];
  6025  000BAA  EE20  F060         	lfsr	2,_motCounter+2
  6026  000BAE  50DE               	movf	postinc2,w,c
  6027  000BB0  265E               	addwf	_motCounter^0,f,c
  6028  000BB2  50DD               	movf	postdec2,w,c
  6029  000BB4  225F               	addwfc	(_motCounter+1)^0,f,c
  6030  000BB6                     
  6031                           ;motors.c: 399:             if(motCounter[0][0] > 3){
  6032  000BB6  BE5F               	btfsc	(_motCounter+1)^0,7,c
  6033  000BB8  EFE7  F005         	goto	u3221
  6034  000BBC  505F               	movf	(_motCounter+1)^0,w,c
  6035  000BBE  E10A               	bnz	u3220
  6036  000BC0  0E04               	movlw	4
  6037  000BC2  5C5E               	subwf	_motCounter^0,w,c
  6038  000BC4  A0D8               	btfss	status,0,c
  6039  000BC6  EFE7  F005         	goto	u3221
  6040  000BCA  EFEA  F005         	goto	u3220
  6041  000BCE                     u3221:
  6042  000BCE  FFFF               	dw	65535	; assembler added errata NOP
  6043  000BD0  EFEF  F005         	goto	l4027
  6044  000BD4                     u3220:
  6045  000BD4  FFFF               	dw	65535	; assembler added errata NOP
  6046  000BD6                     
  6047                           ;motors.c: 400:                 motCounter[0][0] = 0;
  6048  000BD6  0E00               	movlw	0
  6049  000BD8  6E5F               	movwf	(_motCounter+1)^0,c
  6050  000BDA  0E00               	movlw	0
  6051  000BDC  6E5E               	movwf	_motCounter^0,c
  6052  000BDE                     l4027:
  6053  000BDE  FFFF               	dw	65535	; assembler added errata NOP
  6054                           
  6055                           ;motors.c: 403:             LATA = stepMot1[motCounter[0][0]];
  6056  000BE0  0E8C               	movlw	low _stepMot1
  6057  000BE2  245E               	addwf	_motCounter^0,w,c
  6058  000BE4  6ED9               	movwf	fsr2l,c
  6059  000BE6  0E00               	movlw	high _stepMot1
  6060  000BE8  205F               	addwfc	(_motCounter+1)^0,w,c
  6061  000BEA  6EDA               	movwf	fsr2h,c
  6062  000BEC  50DF               	movf	indf2,w,c
  6063  000BEE  6E89               	movwf	137,c	;volatile
  6064  000BF0  EF3E  F006         	goto	l4045
  6065  000BF4                     l4029:
  6066  000BF4  FFFF               	dw	65535	; assembler added errata NOP
  6067  000BF6  501F               	movf	moveToPoint@MOT1Direction^0,w,c
  6068  000BF8  A4D8               	btfss	status,2,c
  6069  000BFA  EF01  F006         	goto	u3231
  6070  000BFE  EF04  F006         	goto	u3230
  6071  000C02                     u3231:
  6072  000C02  FFFF               	dw	65535	; assembler added errata NOP
  6073  000C04  EF3E  F006         	goto	l4045
  6074  000C08                     u3230:
  6075  000C08  FFFF               	dw	65535	; assembler added errata NOP
  6076  000C0A                     
  6077                           ;motors.c: 407:             if(x1 - stepCounter() <= x2){
  6078  000C0A  ECC1  F012         	call	_stepCounter	;wreg free
  6079  000C0E  C015  F01D         	movff	moveToPoint@x1,??_moveToPoint
  6080  000C12  C016  F01E         	movff	moveToPoint@x1+1,??_moveToPoint+1
  6081  000C16  5012               	movf	?_stepCounter^0,w,c
  6082  000C18  5E1D               	subwf	??_moveToPoint^0,f,c
  6083  000C1A  5013               	movf	(?_stepCounter+1)^0,w,c
  6084  000C1C  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6085  000C1E  501D               	movf	??_moveToPoint^0,w,c
  6086  000C20  5C19               	subwf	moveToPoint@x2^0,w,c
  6087  000C22  501E               	movf	(??_moveToPoint+1)^0,w,c
  6088  000C24  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  6089  000C26  A0D8               	btfss	status,0,c
  6090  000C28  EF18  F006         	goto	u3241
  6091  000C2C  EF1B  F006         	goto	u3240
  6092  000C30                     u3241:
  6093  000C30  FFFF               	dw	65535	; assembler added errata NOP
  6094  000C32  EF1E  F006         	goto	l4035
  6095  000C36                     u3240:
  6096  000C36  FFFF               	dw	65535	; assembler added errata NOP
  6097  000C38  EFC5  F005         	goto	l4017
  6098  000C3C                     l4035:
  6099  000C3C  FFFF               	dw	65535	; assembler added errata NOP
  6100  000C3E  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6101  000C40  B4D8               	btfsc	status,2,c
  6102  000C42  EF25  F006         	goto	u3251
  6103  000C46  EF28  F006         	goto	u3250
  6104  000C4A                     u3251:
  6105  000C4A  FFFF               	dw	65535	; assembler added errata NOP
  6106  000C4C  EF3E  F006         	goto	l4045
  6107  000C50                     u3250:
  6108  000C50  FFFF               	dw	65535	; assembler added errata NOP
  6109  000C52                     
  6110                           ;motors.c: 416:             motCounter[0][0] += motCounter[0][1];
  6111  000C52  EE20  F060         	lfsr	2,_motCounter+2
  6112  000C56  50DE               	movf	postinc2,w,c
  6113  000C58  265E               	addwf	_motCounter^0,f,c
  6114  000C5A  50DD               	movf	postdec2,w,c
  6115  000C5C  225F               	addwfc	(_motCounter+1)^0,f,c
  6116  000C5E                     
  6117                           ;motors.c: 417:             if(motCounter[0][0] < 0){
  6118  000C5E  BE5F               	btfsc	(_motCounter+1)^0,7,c
  6119  000C60  EF37  F006         	goto	u3260
  6120  000C64  EF34  F006         	goto	u3261
  6121  000C68                     u3261:
  6122  000C68  FFFF               	dw	65535	; assembler added errata NOP
  6123  000C6A  EFEF  F005         	goto	l4027
  6124  000C6E                     u3260:
  6125  000C6E  FFFF               	dw	65535	; assembler added errata NOP
  6126  000C70                     
  6127                           ;motors.c: 418:                 motCounter[0][0] = 3;
  6128  000C70  0E00               	movlw	0
  6129  000C72  6E5F               	movwf	(_motCounter+1)^0,c
  6130  000C74  0E03               	movlw	3
  6131  000C76  6E5E               	movwf	_motCounter^0,c
  6132  000C78  EFEF  F005         	goto	l4027
  6133  000C7C                     l4045:
  6134  000C7C  FFFF               	dw	65535	; assembler added errata NOP
  6135                           
  6136                           ;motors.c: 426:         if(MOT2Direction == 1){
  6137  000C7E  0420               	decf	moveToPoint@MOT2Direction^0,w,c
  6138  000C80  A4D8               	btfss	status,2,c
  6139  000C82  EF45  F006         	goto	u3271
  6140  000C86  EF48  F006         	goto	u3270
  6141  000C8A                     u3271:
  6142  000C8A  FFFF               	dw	65535	; assembler added errata NOP
  6143  000C8C  EF91  F006         	goto	l4061
  6144  000C90                     u3270:
  6145  000C90  FFFF               	dw	65535	; assembler added errata NOP
  6146  000C92                     
  6147                           ;motors.c: 428:             if(y1 + stepCounter() >= y2){
  6148  000C92  ECC1  F012         	call	_stepCounter	;wreg free
  6149  000C96  5017               	movf	moveToPoint@y1^0,w,c
  6150  000C98  2612               	addwf	?_stepCounter^0,f,c
  6151  000C9A  5018               	movf	(moveToPoint@y1+1)^0,w,c
  6152  000C9C  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6153  000C9E  501B               	movf	moveToPoint@y2^0,w,c
  6154  000CA0  5C12               	subwf	?_stepCounter^0,w,c
  6155  000CA2  501C               	movf	(moveToPoint@y2+1)^0,w,c
  6156  000CA4  5813               	subwfb	(?_stepCounter+1)^0,w,c
  6157  000CA6  A0D8               	btfss	status,0,c
  6158  000CA8  EF58  F006         	goto	u3281
  6159  000CAC  EF5B  F006         	goto	u3280
  6160  000CB0                     u3281:
  6161  000CB0  FFFF               	dw	65535	; assembler added errata NOP
  6162  000CB2  EF61  F006         	goto	l4051
  6163  000CB6                     u3280:
  6164  000CB6  FFFF               	dw	65535	; assembler added errata NOP
  6165  000CB8                     l4049:
  6166  000CB8  FFFF               	dw	65535	; assembler added errata NOP
  6167                           
  6168                           ;motors.c: 430:                 keepMovingY = 0;
  6169  000CBA  0E00               	movlw	0
  6170  000CBC  6E22               	movwf	moveToPoint@keepMovingY^0,c
  6171                           
  6172                           ;motors.c: 431:             }else if(keepMovingY){
  6173  000CBE  EFD5  F006         	goto	l4077
  6174  000CC2                     l4051:
  6175  000CC2  FFFF               	dw	65535	; assembler added errata NOP
  6176  000CC4  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6177  000CC6  B4D8               	btfsc	status,2,c
  6178  000CC8  EF68  F006         	goto	u3291
  6179  000CCC  EF6B  F006         	goto	u3290
  6180  000CD0                     u3291:
  6181  000CD0  FFFF               	dw	65535	; assembler added errata NOP
  6182  000CD2  EFD5  F006         	goto	l182
  6183  000CD6                     u3290:
  6184  000CD6  FFFF               	dw	65535	; assembler added errata NOP
  6185  000CD8                     
  6186                           ;motors.c: 437:             motCounter[1][0] += motCounter[1][1];
  6187  000CD8  EE20  F064         	lfsr	2,_motCounter+6
  6188  000CDC  50DE               	movf	postinc2,w,c
  6189  000CDE  2662               	addwf	(_motCounter+4)^0,f,c
  6190  000CE0  50DD               	movf	postdec2,w,c
  6191  000CE2  2263               	addwfc	(_motCounter+5)^0,f,c
  6192  000CE4                     
  6193                           ;motors.c: 438:             if(motCounter[1][0] > 3){
  6194  000CE4  BE63               	btfsc	(_motCounter+5)^0,7,c
  6195  000CE6  EF7E  F006         	goto	u3301
  6196  000CEA  5063               	movf	(_motCounter+5)^0,w,c
  6197  000CEC  E10A               	bnz	u3300
  6198  000CEE  0E04               	movlw	4
  6199  000CF0  5C62               	subwf	(_motCounter+4)^0,w,c
  6200  000CF2  A0D8               	btfss	status,0,c
  6201  000CF4  EF7E  F006         	goto	u3301
  6202  000CF8  EF81  F006         	goto	u3300
  6203  000CFC                     u3301:
  6204  000CFC  FFFF               	dw	65535	; assembler added errata NOP
  6205  000CFE  EF86  F006         	goto	l4059
  6206  000D02                     u3300:
  6207  000D02  FFFF               	dw	65535	; assembler added errata NOP
  6208  000D04                     
  6209                           ;motors.c: 439:                 motCounter[1][0] = 0;
  6210  000D04  0E00               	movlw	0
  6211  000D06  6E63               	movwf	(_motCounter+5)^0,c
  6212  000D08  0E00               	movlw	0
  6213  000D0A  6E62               	movwf	(_motCounter+4)^0,c
  6214  000D0C                     l4059:
  6215  000D0C  FFFF               	dw	65535	; assembler added errata NOP
  6216                           
  6217                           ;motors.c: 442:             LATB = stepMot2[motCounter[1][0]];
  6218  000D0E  0E88               	movlw	low _stepMot2
  6219  000D10  2462               	addwf	(_motCounter+4)^0,w,c
  6220  000D12  6ED9               	movwf	fsr2l,c
  6221  000D14  0E00               	movlw	high _stepMot2
  6222  000D16  2063               	addwfc	(_motCounter+5)^0,w,c
  6223  000D18  6EDA               	movwf	fsr2h,c
  6224  000D1A  50DF               	movf	indf2,w,c
  6225  000D1C  6E8A               	movwf	138,c	;volatile
  6226  000D1E  EFD5  F006         	goto	l4077
  6227  000D22                     l4061:
  6228  000D22  FFFF               	dw	65535	; assembler added errata NOP
  6229  000D24  5020               	movf	moveToPoint@MOT2Direction^0,w,c
  6230  000D26  A4D8               	btfss	status,2,c
  6231  000D28  EF98  F006         	goto	u3311
  6232  000D2C  EF9B  F006         	goto	u3310
  6233  000D30                     u3311:
  6234  000D30  FFFF               	dw	65535	; assembler added errata NOP
  6235  000D32  EFD5  F006         	goto	l4077
  6236  000D36                     u3310:
  6237  000D36  FFFF               	dw	65535	; assembler added errata NOP
  6238  000D38                     
  6239                           ;motors.c: 447:             if(y1 - stepCounter() <= y2){
  6240  000D38  ECC1  F012         	call	_stepCounter	;wreg free
  6241  000D3C  C017  F01D         	movff	moveToPoint@y1,??_moveToPoint
  6242  000D40  C018  F01E         	movff	moveToPoint@y1+1,??_moveToPoint+1
  6243  000D44  5012               	movf	?_stepCounter^0,w,c
  6244  000D46  5E1D               	subwf	??_moveToPoint^0,f,c
  6245  000D48  5013               	movf	(?_stepCounter+1)^0,w,c
  6246  000D4A  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6247  000D4C  501D               	movf	??_moveToPoint^0,w,c
  6248  000D4E  5C1B               	subwf	moveToPoint@y2^0,w,c
  6249  000D50  501E               	movf	(??_moveToPoint+1)^0,w,c
  6250  000D52  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  6251  000D54  A0D8               	btfss	status,0,c
  6252  000D56  EFAF  F006         	goto	u3321
  6253  000D5A  EFB2  F006         	goto	u3320
  6254  000D5E                     u3321:
  6255  000D5E  FFFF               	dw	65535	; assembler added errata NOP
  6256  000D60  EFB5  F006         	goto	l4067
  6257  000D64                     u3320:
  6258  000D64  FFFF               	dw	65535	; assembler added errata NOP
  6259  000D66  EF5C  F006         	goto	l4049
  6260  000D6A                     l4067:
  6261  000D6A  FFFF               	dw	65535	; assembler added errata NOP
  6262  000D6C  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6263  000D6E  B4D8               	btfsc	status,2,c
  6264  000D70  EFBC  F006         	goto	u3331
  6265  000D74  EFBF  F006         	goto	u3330
  6266  000D78                     u3331:
  6267  000D78  FFFF               	dw	65535	; assembler added errata NOP
  6268  000D7A  EFD5  F006         	goto	l4077
  6269  000D7E                     u3330:
  6270  000D7E  FFFF               	dw	65535	; assembler added errata NOP
  6271  000D80                     
  6272                           ;motors.c: 456:             motCounter[1][0] += motCounter[1][1];
  6273  000D80  EE20  F064         	lfsr	2,_motCounter+6
  6274  000D84  50DE               	movf	postinc2,w,c
  6275  000D86  2662               	addwf	(_motCounter+4)^0,f,c
  6276  000D88  50DD               	movf	postdec2,w,c
  6277  000D8A  2263               	addwfc	(_motCounter+5)^0,f,c
  6278  000D8C                     
  6279                           ;motors.c: 457:             if(motCounter[1][0] < 0){
  6280  000D8C  BE63               	btfsc	(_motCounter+5)^0,7,c
  6281  000D8E  EFCE  F006         	goto	u3340
  6282  000D92  EFCB  F006         	goto	u3341
  6283  000D96                     u3341:
  6284  000D96  FFFF               	dw	65535	; assembler added errata NOP
  6285  000D98  EF86  F006         	goto	l4059
  6286  000D9C                     u3340:
  6287  000D9C  FFFF               	dw	65535	; assembler added errata NOP
  6288  000D9E                     
  6289                           ;motors.c: 458:                 motCounter[1][0] = 3;
  6290  000D9E  0E00               	movlw	0
  6291  000DA0  6E63               	movwf	(_motCounter+5)^0,c
  6292  000DA2  0E03               	movlw	3
  6293  000DA4  6E62               	movwf	(_motCounter+4)^0,c
  6294  000DA6  EF86  F006         	goto	l4059
  6295  000DAA                     l182:
  6296  000DAA                     l4077:
  6297  000DAA  FFFF               	dw	65535	; assembler added errata NOP
  6298  000DAC  EC67  F012         	call	_stepMade	;wreg free
  6299  000DB0  5012               	movf	?_stepMade^0,w,c
  6300  000DB2  1013               	iorwf	(?_stepMade+1)^0,w,c
  6301  000DB4  B4D8               	btfsc	status,2,c
  6302  000DB6  EFDF  F006         	goto	u3351
  6303  000DBA  EFE2  F006         	goto	u3350
  6304  000DBE                     u3351:
  6305  000DBE  FFFF               	dw	65535	; assembler added errata NOP
  6306  000DC0  EFD5  F006         	goto	l4077
  6307  000DC4                     u3350:
  6308  000DC4                     l4079:
  6309  000DC4  FFFF               	dw	65535	; assembler added errata NOP
  6310                           
  6311                           ;motors.c: 370:     while(keepMovingX || keepMovingY){
  6312  000DC6  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6313  000DC8  A4D8               	btfss	status,2,c
  6314  000DCA  EFE9  F006         	goto	u3361
  6315  000DCE  EFEC  F006         	goto	u3360
  6316  000DD2                     u3361:
  6317  000DD2  FFFF               	dw	65535	; assembler added errata NOP
  6318  000DD4  EF95  F005         	goto	l4009
  6319  000DD8                     u3360:
  6320  000DD8  FFFF               	dw	65535	; assembler added errata NOP
  6321  000DDA  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6322  000DDC  A4D8               	btfss	status,2,c
  6323  000DDE  EFF3  F006         	goto	u3371
  6324  000DE2  EFF6  F006         	goto	u3370
  6325  000DE6                     u3371:
  6326  000DE6  FFFF               	dw	65535	; assembler added errata NOP
  6327  000DE8  EF95  F005         	goto	l4009
  6328  000DEC                     u3370:
  6329  000DEC                     l165:
  6330  000DEC  FFFF               	dw	65535	; assembler added errata NOP
  6331                           
  6332                           ;motors.c: 481:     T0CONbits.TMR0ON = 0;
  6333  000DEE  9ED5               	bcf	213,7,c	;volatile
  6334                           
  6335                           ;motors.c: 482:     T2CONbits.TMR2ON = 0;
  6336  000DF0  94CA               	bcf	202,2,c	;volatile
  6337  000DF2                     
  6338                           ;motors.c: 484:     TMR0 = 0;
  6339  000DF2  0E00               	movlw	0
  6340  000DF4  6ED7               	movwf	215,c	;volatile
  6341  000DF6  0E00               	movlw	0
  6342  000DF8  6ED6               	movwf	214,c	;volatile
  6343                           
  6344                           ;motors.c: 485:     TMR2 = 0;
  6345  000DFA  0E00               	movlw	0
  6346  000DFC  6ECC               	movwf	204,c	;volatile
  6347  000DFE                     
  6348                           ;motors.c: 488:     resetStep();
  6349  000DFE  ECDB  F012         	call	_resetStep	;wreg free
  6350  000E02                     
  6351                           ;motors.c: 490:     return(tm0Error);
  6352  000E02  5050               	movf	_tm0Error^0,w,c
  6353  000E04                     l157:
  6354  000E04  FFFF               	dw	65535	; assembler added errata NOP
  6355  000E06  0012               	return		;funcret
  6356  000E08  FFFF               	dw	65535	; errata NOP
  6357  000E0A                     __end_of_moveToPoint:
  6358                           	callstack 0
  6359                           
  6360 ;; *************** function _stepCounter *****************
  6361 ;; Defined at:
  6362 ;;		line 70 in file "timer.c"
  6363 ;; Parameters:    Size  Location     Type
  6364 ;;		None
  6365 ;; Auto vars:     Size  Location     Type
  6366 ;;		None
  6367 ;; Return value:  Size  Location     Type
  6368 ;;                  2   17[COMRAM] unsigned int 
  6369 ;; Registers used:
  6370 ;;		None
  6371 ;; Tracked objects:
  6372 ;;		On entry : 0/0
  6373 ;;		On exit  : 0/0
  6374 ;;		Unchanged: 0/0
  6375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6376 ;;      Params:         2       0       0       0       0       0       0
  6377 ;;      Locals:         0       0       0       0       0       0       0
  6378 ;;      Temps:          0       0       0       0       0       0       0
  6379 ;;      Totals:         2       0       0       0       0       0       0
  6380 ;;Total ram usage:        2 bytes
  6381 ;; Hardware stack levels used:    1
  6382 ;; Hardware stack levels required when called:    4
  6383 ;; This function calls:
  6384 ;;		Nothing
  6385 ;; This function is called by:
  6386 ;;		_moveToPoint
  6387 ;; This function uses a non-reentrant model
  6388 ;;
  6389                           
  6390                           	psect	text34
  6391  002582                     __ptext34:
  6392                           	callstack 0
  6393  002582                     _stepCounter:
  6394                           	callstack 0
  6395  002582  FFFF               	dw	65535	; assembler added errata NOP
  6396  002584                     
  6397                           ;timer.c: 71:     return pwmStep;
  6398  002584  C053  F012         	movff	_pwmStep,?_stepCounter	;volatile
  6399  002588  6A13               	clrf	(?_stepCounter+1)^0,c
  6400  00258A  0012               	return		;funcret
  6401  00258C  FFFF               	dw	65535	; errata NOP
  6402  00258E                     __end_of_stepCounter:
  6403                           	callstack 0
  6404                           
  6405 ;; *************** function _liftArm *****************
  6406 ;; Defined at:
  6407 ;;		line 685 in file "motors.c"
  6408 ;; Parameters:    Size  Location     Type
  6409 ;;		None
  6410 ;; Auto vars:     Size  Location     Type
  6411 ;;		None
  6412 ;; Return value:  Size  Location     Type
  6413 ;;                  1    wreg      unsigned char 
  6414 ;; Registers used:
  6415 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6416 ;; Tracked objects:
  6417 ;;		On entry : 0/0
  6418 ;;		On exit  : 0/0
  6419 ;;		Unchanged: 0/0
  6420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6421 ;;      Params:         0       0       0       0       0       0       0
  6422 ;;      Locals:         0       0       0       0       0       0       0
  6423 ;;      Temps:          0       0       0       0       0       0       0
  6424 ;;      Totals:         0       0       0       0       0       0       0
  6425 ;;Total ram usage:        0 bytes
  6426 ;; Hardware stack levels used:    1
  6427 ;; Hardware stack levels required when called:    5
  6428 ;; This function calls:
  6429 ;;		_resetStep
  6430 ;;		_stepMade
  6431 ;; This function is called by:
  6432 ;;		_executeData
  6433 ;; This function uses a non-reentrant model
  6434 ;;
  6435                           
  6436                           	psect	text35
  6437  00212E                     __ptext35:
  6438                           	callstack 0
  6439  00212E                     _liftArm:
  6440                           	callstack 0
  6441  00212E  FFFF               	dw	65535	; assembler added errata NOP
  6442  002130                     
  6443                           ;motors.c: 691:     motCounter[2][1] = -1;
  6444  002130  6868               	setf	(_motCounter+10)^0,c
  6445  002132  6869               	setf	(_motCounter+11)^0,c
  6446                           
  6447                           ;motors.c: 694:     T2CONbits.TMR2ON = 1;
  6448  002134  84CA               	bsf	202,2,c	;volatile
  6449  002136                     
  6450                           ;motors.c: 696:     tm0Error = 0;
  6451  002136  0E00               	movlw	0
  6452  002138  6E51               	movwf	(_tm0Error+1)^0,c
  6453  00213A  0E00               	movlw	0
  6454  00213C  6E50               	movwf	_tm0Error^0,c
  6455                           
  6456                           ;motors.c: 697:     tm0Limit = 50;
  6457  00213E  0E32               	movlw	50
  6458  002140  6E5D               	movwf	_tm0Limit^0,c
  6459  002142                     
  6460                           ;motors.c: 698:     T0CONbits.TMR0ON = 1;
  6461  002142  8ED5               	bsf	213,7,c	;volatile
  6462                           
  6463                           ;motors.c: 702:     while(!PORTEbits.RE2){
  6464  002144  EFE2  F010         	goto	l217
  6465  002148                     l4191:
  6466  002148  FFFF               	dw	65535	; assembler added errata NOP
  6467                           
  6468                           ;motors.c: 704:         resetStep();
  6469  00214A  ECDB  F012         	call	_resetStep	;wreg free
  6470  00214E                     
  6471                           ;motors.c: 707:         if(tm0Error){
  6472  00214E  5050               	movf	_tm0Error^0,w,c
  6473  002150  1051               	iorwf	(_tm0Error+1)^0,w,c
  6474  002152  B4D8               	btfsc	status,2,c
  6475  002154  EFAE  F010         	goto	u3501
  6476  002158  EFB1  F010         	goto	u3500
  6477  00215C                     u3501:
  6478  00215C  FFFF               	dw	65535	; assembler added errata NOP
  6479  00215E  EFB8  F010         	goto	l4197
  6480  002162                     u3500:
  6481  002162  FFFF               	dw	65535	; assembler added errata NOP
  6482  002164                     
  6483                           ;motors.c: 712:             tm0Error = 6;
  6484  002164  0E00               	movlw	0
  6485  002166  6E51               	movwf	(_tm0Error+1)^0,c
  6486  002168  0E06               	movlw	6
  6487  00216A  6E50               	movwf	_tm0Error^0,c
  6488                           
  6489                           ;motors.c: 713:             break;
  6490  00216C  EFEB  F010         	goto	l220
  6491  002170                     l4197:
  6492  002170  FFFF               	dw	65535	; assembler added errata NOP
  6493                           
  6494                           ;motors.c: 722:             motCounter[2][0] += motCounter[2][1];
  6495  002172  EE20  F068         	lfsr	2,_motCounter+10
  6496  002176  50DE               	movf	postinc2,w,c
  6497  002178  2666               	addwf	(_motCounter+8)^0,f,c
  6498  00217A  50DD               	movf	postdec2,w,c
  6499  00217C  2267               	addwfc	(_motCounter+9)^0,f,c
  6500  00217E                     
  6501                           ;motors.c: 723:             if(motCounter[2][0] < 0){
  6502  00217E  BE67               	btfsc	(_motCounter+9)^0,7,c
  6503  002180  EFC7  F010         	goto	u3510
  6504  002184  EFC4  F010         	goto	u3511
  6505  002188                     u3511:
  6506  002188  FFFF               	dw	65535	; assembler added errata NOP
  6507  00218A  EFCC  F010         	goto	l4203
  6508  00218E                     u3510:
  6509  00218E  FFFF               	dw	65535	; assembler added errata NOP
  6510  002190                     
  6511                           ;motors.c: 724:                 motCounter[2][0] = 3;
  6512  002190  0E00               	movlw	0
  6513  002192  6E67               	movwf	(_motCounter+9)^0,c
  6514  002194  0E03               	movlw	3
  6515  002196  6E66               	movwf	(_motCounter+8)^0,c
  6516  002198                     l4203:
  6517  002198  FFFF               	dw	65535	; assembler added errata NOP
  6518                           
  6519                           ;motors.c: 727:             LATC = stepMot3[motCounter[2][0]];
  6520  00219A  0E84               	movlw	low _stepMot3
  6521  00219C  2466               	addwf	(_motCounter+8)^0,w,c
  6522  00219E  6ED9               	movwf	fsr2l,c
  6523  0021A0  0E00               	movlw	high _stepMot3
  6524  0021A2  2067               	addwfc	(_motCounter+9)^0,w,c
  6525  0021A4  6EDA               	movwf	fsr2h,c
  6526  0021A6  50DF               	movf	indf2,w,c
  6527  0021A8  6E8B               	movwf	139,c	;volatile
  6528  0021AA                     l4205:
  6529  0021AA  FFFF               	dw	65535	; assembler added errata NOP
  6530  0021AC  EC67  F012         	call	_stepMade	;wreg free
  6531  0021B0  5012               	movf	?_stepMade^0,w,c
  6532  0021B2  1013               	iorwf	(?_stepMade+1)^0,w,c
  6533  0021B4  B4D8               	btfsc	status,2,c
  6534  0021B6  EFDF  F010         	goto	u3521
  6535  0021BA  EFE2  F010         	goto	u3520
  6536  0021BE                     u3521:
  6537  0021BE  FFFF               	dw	65535	; assembler added errata NOP
  6538  0021C0  EFD5  F010         	goto	l4205
  6539  0021C4                     u3520:
  6540  0021C4                     l217:
  6541  0021C4  FFFF               	dw	65535	; assembler added errata NOP
  6542                           
  6543                           ;motors.c: 702:     while(!PORTEbits.RE2){
  6544  0021C6  A484               	btfss	132,2,c	;volatile
  6545  0021C8  EFE8  F010         	goto	u3531
  6546  0021CC  EFEB  F010         	goto	u3530
  6547  0021D0                     u3531:
  6548  0021D0  FFFF               	dw	65535	; assembler added errata NOP
  6549  0021D2  EFA4  F010         	goto	l4191
  6550  0021D6                     u3530:
  6551  0021D6                     l220:
  6552  0021D6  FFFF               	dw	65535	; assembler added errata NOP
  6553                           
  6554                           ;motors.c: 744:     T0CONbits.TMR0ON = 0;
  6555  0021D8  9ED5               	bcf	213,7,c	;volatile
  6556                           
  6557                           ;motors.c: 745:     T2CONbits.TMR2ON = 0;
  6558  0021DA  94CA               	bcf	202,2,c	;volatile
  6559  0021DC                     
  6560                           ;motors.c: 747:     TMR0 = 0;
  6561  0021DC  0E00               	movlw	0
  6562  0021DE  6ED7               	movwf	215,c	;volatile
  6563  0021E0  0E00               	movlw	0
  6564  0021E2  6ED6               	movwf	214,c	;volatile
  6565                           
  6566                           ;motors.c: 748:     TMR2 = 0;
  6567  0021E4  0E00               	movlw	0
  6568  0021E6  6ECC               	movwf	204,c	;volatile
  6569  0021E8                     
  6570                           ;motors.c: 751:     resetStep();
  6571  0021E8  ECDB  F012         	call	_resetStep	;wreg free
  6572  0021EC                     
  6573                           ;motors.c: 753:     return(tm0Error);
  6574  0021EC  5050               	movf	_tm0Error^0,w,c
  6575  0021EE  0012               	return		;funcret
  6576  0021F0  FFFF               	dw	65535	; errata NOP
  6577  0021F2                     __end_of_liftArm:
  6578                           	callstack 0
  6579                           
  6580 ;; *************** function _stepMade *****************
  6581 ;; Defined at:
  6582 ;;		line 59 in file "timer.c"
  6583 ;; Parameters:    Size  Location     Type
  6584 ;;		None
  6585 ;; Auto vars:     Size  Location     Type
  6586 ;;  temp            1   19[COMRAM] unsigned char 
  6587 ;; Return value:  Size  Location     Type
  6588 ;;                  2   17[COMRAM] unsigned int 
  6589 ;; Registers used:
  6590 ;;		wreg, status,2
  6591 ;; Tracked objects:
  6592 ;;		On entry : 0/0
  6593 ;;		On exit  : 0/0
  6594 ;;		Unchanged: 0/0
  6595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6596 ;;      Params:         2       0       0       0       0       0       0
  6597 ;;      Locals:         1       0       0       0       0       0       0
  6598 ;;      Temps:          0       0       0       0       0       0       0
  6599 ;;      Totals:         3       0       0       0       0       0       0
  6600 ;;Total ram usage:        3 bytes
  6601 ;; Hardware stack levels used:    1
  6602 ;; Hardware stack levels required when called:    4
  6603 ;; This function calls:
  6604 ;;		Nothing
  6605 ;; This function is called by:
  6606 ;;		_resetPosition
  6607 ;;		_moveToPoint
  6608 ;;		_touchObject
  6609 ;;		_touchTherm
  6610 ;;		_liftArm
  6611 ;;		_rotateObj
  6612 ;;		_pickObject
  6613 ;;		_releaseObj
  6614 ;; This function uses a non-reentrant model
  6615 ;;
  6616                           
  6617                           	psect	text36
  6618  0024CE                     __ptext36:
  6619                           	callstack 0
  6620  0024CE                     _stepMade:
  6621                           	callstack 0
  6622  0024CE  FFFF               	dw	65535	; assembler added errata NOP
  6623  0024D0                     
  6624                           ;timer.c: 60:     unsigned char temp = stepToggle;
  6625  0024D0  C052  F014         	movff	_stepToggle,stepMade@temp	;volatile
  6626  0024D4                     
  6627                           ;timer.c: 62:     stepToggle = 0;
  6628  0024D4  0E00               	movlw	0
  6629  0024D6  6E52               	movwf	_stepToggle^0,c	;volatile
  6630  0024D8                     
  6631                           ;timer.c: 64:     return temp;
  6632  0024D8  C014  F012         	movff	stepMade@temp,?_stepMade
  6633  0024DC  6A13               	clrf	(?_stepMade+1)^0,c
  6634  0024DE  0012               	return		;funcret
  6635  0024E0  FFFF               	dw	65535	; errata NOP
  6636  0024E2                     __end_of_stepMade:
  6637                           	callstack 0
  6638                           
  6639 ;; *************** function _resetStep *****************
  6640 ;; Defined at:
  6641 ;;		line 77 in file "timer.c"
  6642 ;; Parameters:    Size  Location     Type
  6643 ;;		None
  6644 ;; Auto vars:     Size  Location     Type
  6645 ;;		None
  6646 ;; Return value:  Size  Location     Type
  6647 ;;                  1    wreg      void 
  6648 ;; Registers used:
  6649 ;;		wreg, status,2
  6650 ;; Tracked objects:
  6651 ;;		On entry : 0/0
  6652 ;;		On exit  : 0/0
  6653 ;;		Unchanged: 0/0
  6654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6655 ;;      Params:         0       0       0       0       0       0       0
  6656 ;;      Locals:         0       0       0       0       0       0       0
  6657 ;;      Temps:          0       0       0       0       0       0       0
  6658 ;;      Totals:         0       0       0       0       0       0       0
  6659 ;;Total ram usage:        0 bytes
  6660 ;; Hardware stack levels used:    1
  6661 ;; Hardware stack levels required when called:    4
  6662 ;; This function calls:
  6663 ;;		Nothing
  6664 ;; This function is called by:
  6665 ;;		_resetPosition
  6666 ;;		_moveToPoint
  6667 ;;		_touchObject
  6668 ;;		_touchTherm
  6669 ;;		_liftArm
  6670 ;;		_rotateObj
  6671 ;; This function uses a non-reentrant model
  6672 ;;
  6673                           
  6674                           	psect	text37
  6675  0025B6                     __ptext37:
  6676                           	callstack 0
  6677  0025B6                     _resetStep:
  6678                           	callstack 0
  6679  0025B6  FFFF               	dw	65535	; assembler added errata NOP
  6680  0025B8                     
  6681                           ;timer.c: 78:     pwmStep = 0;
  6682  0025B8  0E00               	movlw	0
  6683  0025BA  6E53               	movwf	_pwmStep^0,c	;volatile
  6684  0025BC  0012               	return		;funcret
  6685  0025BE  FFFF               	dw	65535	; errata NOP
  6686  0025C0                     __end_of_resetStep:
  6687                           	callstack 0
  6688                           
  6689 ;; *************** function _getData *****************
  6690 ;; Defined at:
  6691 ;;		line 35 in file "usart.c"
  6692 ;; Parameters:    Size  Location     Type
  6693 ;;		None
  6694 ;; Auto vars:     Size  Location     Type
  6695 ;;		None
  6696 ;; Return value:  Size  Location     Type
  6697 ;;                  2   17[COMRAM] PTR struct .
  6698 ;; Registers used:
  6699 ;;		wreg, status,2, status,0
  6700 ;; Tracked objects:
  6701 ;;		On entry : 0/0
  6702 ;;		On exit  : 0/0
  6703 ;;		Unchanged: 0/0
  6704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6705 ;;      Params:         2       0       0       0       0       0       0
  6706 ;;      Locals:         0       0       0       0       0       0       0
  6707 ;;      Temps:          0       0       0       0       0       0       0
  6708 ;;      Totals:         2       0       0       0       0       0       0
  6709 ;;Total ram usage:        2 bytes
  6710 ;; Hardware stack levels used:    1
  6711 ;; Hardware stack levels required when called:    4
  6712 ;; This function calls:
  6713 ;;		Nothing
  6714 ;; This function is called by:
  6715 ;;		_executeData
  6716 ;; This function uses a non-reentrant model
  6717 ;;
  6718                           
  6719                           	psect	text38
  6720  002532                     __ptext38:
  6721                           	callstack 0
  6722  002532                     _getData:
  6723                           	callstack 0
  6724  002532  FFFF               	dw	65535	; assembler added errata NOP
  6725  002534                     
  6726                           ;usart.c: 36:     return(&dataSequence[0]);
  6727  002534  0ED1               	movlw	low _dataSequence
  6728  002536  6E12               	movwf	?_getData^0,c
  6729  002538  0E00               	movlw	high _dataSequence
  6730  00253A  6E13               	movwf	(?_getData+1)^0,c
  6731  00253C  0012               	return		;funcret
  6732  00253E  FFFF               	dw	65535	; errata NOP
  6733  002540                     __end_of_getData:
  6734                           	callstack 0
  6735                           
  6736 ;; *************** function _clearTM0 *****************
  6737 ;; Defined at:
  6738 ;;		line 35 in file "motors.c"
  6739 ;; Parameters:    Size  Location     Type
  6740 ;;		None
  6741 ;; Auto vars:     Size  Location     Type
  6742 ;;		None
  6743 ;; Return value:  Size  Location     Type
  6744 ;;                  1    wreg      void 
  6745 ;; Registers used:
  6746 ;;		wreg, status,2
  6747 ;; Tracked objects:
  6748 ;;		On entry : 0/0
  6749 ;;		On exit  : 0/0
  6750 ;;		Unchanged: 0/0
  6751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6752 ;;      Params:         0       0       0       0       0       0       0
  6753 ;;      Locals:         0       0       0       0       0       0       0
  6754 ;;      Temps:          0       0       0       0       0       0       0
  6755 ;;      Totals:         0       0       0       0       0       0       0
  6756 ;;Total ram usage:        0 bytes
  6757 ;; Hardware stack levels used:    1
  6758 ;; Hardware stack levels required when called:    4
  6759 ;; This function calls:
  6760 ;;		Nothing
  6761 ;; This function is called by:
  6762 ;;		_main
  6763 ;; This function uses a non-reentrant model
  6764 ;;
  6765                           
  6766                           	psect	text39
  6767  002540                     __ptext39:
  6768                           	callstack 0
  6769  002540                     _clearTM0:
  6770                           	callstack 0
  6771  002540  FFFF               	dw	65535	; assembler added errata NOP
  6772  002542                     
  6773                           ;motors.c: 36:     tm0Error = 0;
  6774  002542  0E00               	movlw	0
  6775  002544  6E51               	movwf	(_tm0Error+1)^0,c
  6776  002546  0E00               	movlw	0
  6777  002548  6E50               	movwf	_tm0Error^0,c
  6778  00254A  0012               	return		;funcret
  6779  00254C  FFFF               	dw	65535	; errata NOP
  6780  00254E                     __end_of_clearTM0:
  6781                           	callstack 0
  6782                           
  6783 ;; *************** function _isr *****************
  6784 ;; Defined at:
  6785 ;;		line 38 in file "interrupt.c"
  6786 ;; Parameters:    Size  Location     Type
  6787 ;;		None
  6788 ;; Auto vars:     Size  Location     Type
  6789 ;;  temp            1   16[COMRAM] unsigned char 
  6790 ;; Return value:  Size  Location     Type
  6791 ;;                  1    wreg      void 
  6792 ;; Registers used:
  6793 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6794 ;; Tracked objects:
  6795 ;;		On entry : 0/0
  6796 ;;		On exit  : 0/0
  6797 ;;		Unchanged: 0/0
  6798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6799 ;;      Params:         0       0       0       0       0       0       0
  6800 ;;      Locals:         1       0       0       0       0       0       0
  6801 ;;      Temps:          6       0       0       0       0       0       0
  6802 ;;      Totals:         7       0       0       0       0       0       0
  6803 ;;Total ram usage:        7 bytes
  6804 ;; Hardware stack levels used:    1
  6805 ;; Hardware stack levels required when called:    3
  6806 ;; This function calls:
  6807 ;;		_abortAll
  6808 ;;		_fatalError
  6809 ;;		_increaseStep
  6810 ;;		_retPeriod
  6811 ;;		_setThermRel
  6812 ;;		_setTouchRel
  6813 ;;		_toggleStep
  6814 ;;		_whatsTM0Limit
  6815 ;;		_writeTM0
  6816 ;;		i2_storeData
  6817 ;; This function is called by:
  6818 ;;		Interrupt level 2
  6819 ;; This function uses a non-reentrant model
  6820 ;;
  6821                           
  6822                           	psect	intcode
  6823  000008                     __pintcode:
  6824                           	callstack 0
  6825  000008                     _isr:
  6826                           	callstack 0
  6827  000008  FFFF               	dw	65535	; assembler added errata NOP
  6828                           
  6829                           ;incstack = 0
  6830  00000A  826D               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6831  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  6832  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  6833  000014  CFF3 F00F          	movff	prodl,??_isr+4
  6834  000018  CFF4 F010          	movff	prodh,??_isr+5
  6835  00001C                     
  6836                           ;interrupt.c: 39:     static unsigned int single_cycle = 0;;interrupt.c: 40:     static 
      +                          unsigned char tm0Count = 0;;interrupt.c: 41:     static unsigned char completeStep = 0;;
      +                          interrupt.c: 44:     if(INTCONbits.T0IF){
  6837  00001C  A4F2               	btfss	242,2,c	;volatile
  6838  00001E  EF13  F000         	goto	i2u260_41
  6839  000022  EF16  F000         	goto	i2u260_40
  6840  000026                     i2u260_41:
  6841  000026  FFFF               	dw	65535	; assembler added errata NOP
  6842  000028  EF2C  F000         	goto	i2l3497
  6843  00002C                     i2u260_40:
  6844  00002C  FFFF               	dw	65535	; assembler added errata NOP
  6845  00002E                     
  6846                           ;interrupt.c: 45:         INTCONbits.T0IF = 0;
  6847  00002E  94F2               	bcf	242,2,c	;volatile
  6848  000030                     
  6849                           ;interrupt.c: 48:         tm0Count++;
  6850  000030  2A5A               	incf	isr@tm0Count^0,f,c
  6851  000032                     
  6852                           ;interrupt.c: 50:         if(tm0Count >= whatsTM0Limit()){
  6853  000032  ECFF  F012         	call	_whatsTM0Limit	;wreg free
  6854  000036  6E0B               	movwf	??_isr^0,c
  6855  000038  500B               	movf	??_isr^0,w,c
  6856  00003A  5C5A               	subwf	isr@tm0Count^0,w,c
  6857  00003C  A0D8               	btfss	status,0,c
  6858  00003E  EF23  F000         	goto	i2u261_41
  6859  000042  EF26  F000         	goto	i2u261_40
  6860  000046                     i2u261_41:
  6861  000046  FFFF               	dw	65535	; assembler added errata NOP
  6862  000048  EF2C  F000         	goto	i2l3497
  6863  00004C                     i2u261_40:
  6864  00004C  FFFF               	dw	65535	; assembler added errata NOP
  6865  00004E                     
  6866                           ;interrupt.c: 51:             T0CONbits.TMR0ON = 0;
  6867  00004E  9ED5               	bcf	213,7,c	;volatile
  6868  000050                     
  6869                           ;interrupt.c: 52:             tm0Count = 0;
  6870  000050  0E00               	movlw	0
  6871  000052  6E5A               	movwf	isr@tm0Count^0,c
  6872  000054                     
  6873                           ;interrupt.c: 53:             writeTM0();
  6874  000054  ECA7  F012         	call	_writeTM0	;wreg free
  6875  000058                     i2l3497:
  6876  000058  FFFF               	dw	65535	; assembler added errata NOP
  6877                           
  6878                           ;interrupt.c: 58:     if(PIR1bits.TMR1IF){
  6879  00005A  A09E               	btfss	158,0,c	;volatile
  6880  00005C  EF32  F000         	goto	i2u262_41
  6881  000060  EF35  F000         	goto	i2u262_40
  6882  000064                     i2u262_41:
  6883  000064  FFFF               	dw	65535	; assembler added errata NOP
  6884  000066  EF45  F000         	goto	i2l3505
  6885  00006A                     i2u262_40:
  6886  00006A  FFFF               	dw	65535	; assembler added errata NOP
  6887  00006C                     
  6888                           ;interrupt.c: 59:         PIR1bits.TMR1IF = 0;
  6889  00006C  909E               	bcf	158,0,c	;volatile
  6890  00006E                     
  6891                           ;interrupt.c: 60:         if(fatalError()){
  6892  00006E  EC07  F013         	call	_fatalError	;wreg free
  6893  000072  0900               	iorlw	0
  6894  000074  B4D8               	btfsc	status,2,c
  6895  000076  EF3F  F000         	goto	i2u263_41
  6896  00007A  EF42  F000         	goto	i2u263_40
  6897  00007E                     i2u263_41:
  6898  00007E  FFFF               	dw	65535	; assembler added errata NOP
  6899  000080  EF45  F000         	goto	i2l3505
  6900  000084                     i2u263_40:
  6901  000084  FFFF               	dw	65535	; assembler added errata NOP
  6902  000086                     
  6903                           ;interrupt.c: 61:             abortAll();
  6904  000086  EC7A  F012         	call	_abortAll	;wreg free
  6905  00008A                     i2l3505:
  6906  00008A  FFFF               	dw	65535	; assembler added errata NOP
  6907                           
  6908                           ;interrupt.c: 66:     if(PIR1bits.TMR2IF){
  6909  00008C  A29E               	btfss	158,1,c	;volatile
  6910  00008E  EF4B  F000         	goto	i2u264_41
  6911  000092  EF4E  F000         	goto	i2u264_40
  6912  000096                     i2u264_41:
  6913  000096  FFFF               	dw	65535	; assembler added errata NOP
  6914  000098  EF80  F000         	goto	i2l3527
  6915  00009C                     i2u264_40:
  6916  00009C  FFFF               	dw	65535	; assembler added errata NOP
  6917  00009E                     
  6918                           ;interrupt.c: 67:         PIR1bits.TMR2IF = 0;
  6919  00009E  929E               	bcf	158,1,c	;volatile
  6920  0000A0                     
  6921                           ;interrupt.c: 68:         single_cycle++;
  6922  0000A0  4A48               	infsnz	isr@single_cycle^0,f,c
  6923  0000A2  2A49               	incf	(isr@single_cycle+1)^0,f,c
  6924  0000A4                     
  6925                           ;interrupt.c: 71:         if(single_cycle > retPeriod()){
  6926  0000A4  ECAE  F012         	call	_retPeriod	;wreg free
  6927  0000A8  5048               	movf	isr@single_cycle^0,w,c
  6928  0000AA  5C01               	subwf	?_retPeriod^0,w,c
  6929  0000AC  5049               	movf	(isr@single_cycle+1)^0,w,c
  6930  0000AE  5802               	subwfb	(?_retPeriod+1)^0,w,c
  6931  0000B0  B0D8               	btfsc	status,0,c
  6932  0000B2  EF5D  F000         	goto	i2u265_41
  6933  0000B6  EF60  F000         	goto	i2u265_40
  6934  0000BA                     i2u265_41:
  6935  0000BA  FFFF               	dw	65535	; assembler added errata NOP
  6936  0000BC  EF80  F000         	goto	i2l3527
  6937  0000C0                     i2u265_40:
  6938  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  6939  0000C2                     
  6940                           ;interrupt.c: 72:             single_cycle = 0;
  6941  0000C2  0E00               	movlw	0
  6942  0000C4  6E49               	movwf	(isr@single_cycle+1)^0,c
  6943  0000C6  0E00               	movlw	0
  6944  0000C8  6E48               	movwf	isr@single_cycle^0,c
  6945  0000CA                     
  6946                           ;interrupt.c: 73:             completeStep++;
  6947  0000CA  2A59               	incf	isr@completeStep^0,f,c
  6948  0000CC                     
  6949                           ;interrupt.c: 76:             if(completeStep != 0 && !(completeStep % 2)){
  6950  0000CC  5059               	movf	isr@completeStep^0,w,c
  6951  0000CE  B4D8               	btfsc	status,2,c
  6952  0000D0  EF6C  F000         	goto	i2u266_41
  6953  0000D4  EF6F  F000         	goto	i2u266_40
  6954  0000D8                     i2u266_41:
  6955  0000D8  FFFF               	dw	65535	; assembler added errata NOP
  6956  0000DA  EF7D  F000         	goto	i2l3525
  6957  0000DE                     i2u266_40:
  6958  0000DE  FFFF               	dw	65535	; assembler added errata NOP
  6959  0000E0  B059               	btfsc	isr@completeStep^0,0,c
  6960  0000E2  EF75  F000         	goto	i2u267_41
  6961  0000E6  EF78  F000         	goto	i2u267_40
  6962  0000EA                     i2u267_41:
  6963  0000EA  FFFF               	dw	65535	; assembler added errata NOP
  6964  0000EC  EF7D  F000         	goto	i2l3525
  6965  0000F0                     i2u267_40:
  6966  0000F0  FFFF               	dw	65535	; assembler added errata NOP
  6967  0000F2                     
  6968                           ;interrupt.c: 78:                 completeStep = 0;
  6969  0000F2  0E00               	movlw	0
  6970  0000F4  6E59               	movwf	isr@completeStep^0,c
  6971  0000F6                     
  6972                           ;interrupt.c: 81:                 increaseStep();
  6973  0000F6  EC03  F013         	call	_increaseStep	;wreg free
  6974  0000FA                     i2l3525:
  6975  0000FA  FFFF               	dw	65535	; assembler added errata NOP
  6976                           
  6977                           ;interrupt.c: 86:             toggleStep();
  6978  0000FC  ECE0  F012         	call	_toggleStep	;wreg free
  6979  000100                     i2l3527:
  6980  000100  FFFF               	dw	65535	; assembler added errata NOP
  6981                           
  6982                           ;interrupt.c: 91:     if(PIR1bits.ADIF){
  6983  000102  AC9E               	btfss	158,6,c	;volatile
  6984  000104  EF86  F000         	goto	i2u268_41
  6985  000108  EF89  F000         	goto	i2u268_40
  6986  00010C                     i2u268_41:
  6987  00010C  FFFF               	dw	65535	; assembler added errata NOP
  6988  00010E  EFB6  F000         	goto	i2l3539
  6989  000112                     i2u268_40:
  6990  000112  FFFF               	dw	65535	; assembler added errata NOP
  6991  000114                     
  6992                           ;interrupt.c: 92:         PIR1bits.ADIF = 0;
  6993  000114  9C9E               	bcf	158,6,c	;volatile
  6994                           
  6995                           ;interrupt.c: 95:         ADC_res = ADRESL;
  6996  000116  CFC3 F04A          	movff	4035,_ADC_res	;volatile
  6997  00011A  6A4B               	clrf	(_ADC_res+1)^0,c
  6998  00011C                     
  6999                           ;interrupt.c: 96:         ADC_res |= (ADRESH << 8);
  7000  00011C  50C4               	movf	196,w,c	;volatile
  7001  00011E  6E0C               	movwf	(??_isr+1)^0,c
  7002  000120  6A0B               	clrf	??_isr^0,c
  7003  000122  500B               	movf	??_isr^0,w,c
  7004  000124  124A               	iorwf	_ADC_res^0,f,c
  7005  000126  500C               	movf	(??_isr+1)^0,w,c
  7006  000128  124B               	iorwf	(_ADC_res+1)^0,f,c
  7007                           
  7008                           ;interrupt.c: 99:         if(ADC_res > therm_pressure){
  7009  00012A  044A               	decf	_ADC_res^0,w,c
  7010  00012C  0E04               	movlw	4
  7011  00012E  584B               	subwfb	(_ADC_res+1)^0,w,c
  7012  000130  A0D8               	btfss	status,0,c
  7013  000132  EF9D  F000         	goto	i2u269_41
  7014  000136  EFA0  F000         	goto	i2u269_40
  7015  00013A                     i2u269_41:
  7016  00013A  FFFF               	dw	65535	; assembler added errata NOP
  7017  00013C  EFA7  F000         	goto	i2l3535
  7018  000140                     i2u269_40:
  7019  000140  FFFF               	dw	65535	; assembler added errata NOP
  7020  000142                     
  7021                           ;interrupt.c: 101:             setTouchRel();
  7022  000142  ECE5  F012         	call	_setTouchRel	;wreg free
  7023                           
  7024                           ;interrupt.c: 102:             setThermRel();
  7025  000146  ECEA  F012         	call	_setThermRel	;wreg free
  7026                           
  7027                           ;interrupt.c: 103:         }else if(ADC_res > touch_pressure){
  7028  00014A  EFB6  F000         	goto	i2l3539
  7029  00014E                     i2l3535:
  7030  00014E  FFFF               	dw	65535	; assembler added errata NOP
  7031  000150  044A               	decf	_ADC_res^0,w,c
  7032  000152  0E02               	movlw	2
  7033  000154  584B               	subwfb	(_ADC_res+1)^0,w,c
  7034  000156  A0D8               	btfss	status,0,c
  7035  000158  EFB0  F000         	goto	i2u270_41
  7036  00015C  EFB3  F000         	goto	i2u270_40
  7037  000160                     i2u270_41:
  7038  000160  FFFF               	dw	65535	; assembler added errata NOP
  7039  000162  EFB6  F000         	goto	i2l3539
  7040  000166                     i2u270_40:
  7041  000166  FFFF               	dw	65535	; assembler added errata NOP
  7042  000168                     
  7043                           ;interrupt.c: 105:             setTouchRel();
  7044  000168  ECE5  F012         	call	_setTouchRel	;wreg free
  7045  00016C                     i2l3539:
  7046  00016C  FFFF               	dw	65535	; assembler added errata NOP
  7047                           
  7048                           ;interrupt.c: 110:     if(PIR1bits.RC1IF){
  7049  00016E  AA9E               	btfss	158,5,c	;volatile
  7050  000170  EFBC  F000         	goto	i2u271_41
  7051  000174  EFBF  F000         	goto	i2u271_40
  7052  000178                     i2u271_41:
  7053  000178  FFFF               	dw	65535	; assembler added errata NOP
  7054  00017A  EFC6  F000         	goto	i2l474
  7055  00017E                     i2u271_40:
  7056  00017E  FFFF               	dw	65535	; assembler added errata NOP
  7057  000180                     
  7058                           ;interrupt.c: 111:         PIR1bits.RC1IF = 0;
  7059  000180  9A9E               	bcf	158,5,c	;volatile
  7060                           
  7061                           ;interrupt.c: 114:         unsigned char temp = RCREG1;
  7062  000182  CFAE F011          	movff	4014,isr@temp	;volatile
  7063  000186                     
  7064                           ;interrupt.c: 116:         storeData(temp);
  7065  000186  5011               	movf	isr@temp^0,w,c
  7066  000188  EC17  F00C         	call	i2_storeData
  7067  00018C                     i2l474:
  7068  00018C  FFFF               	dw	65535	; assembler added errata NOP
  7069  00018E  C010  FFF4         	movff	??_isr+5,prodh
  7070  000192  C00F  FFF3         	movff	??_isr+4,prodl
  7071  000196  C00E  FFDA         	movff	??_isr+3,fsr2h
  7072  00019A  C00D  FFD9         	movff	??_isr+2,fsr2l
  7073  00019E  926D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7074  0001A0  0011               	retfie		f
  7075  0001A2  FFFF               	dw	65535	; errata NOP
  7076  0001A4                     __end_of_isr:
  7077                           	callstack 0
  7078                           
  7079 ;; *************** function i2_storeData *****************
  7080 ;; Defined at:
  7081 ;;		line 164 in file "usart.c"
  7082 ;; Parameters:    Size  Location     Type
  7083 ;;  data            1    wreg     unsigned char 
  7084 ;; Auto vars:     Size  Location     Type
  7085 ;;  data            1    9[COMRAM] unsigned char 
  7086 ;; Return value:  Size  Location     Type
  7087 ;;                  1    wreg      void 
  7088 ;; Registers used:
  7089 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7090 ;; Tracked objects:
  7091 ;;		On entry : 0/0
  7092 ;;		On exit  : 0/0
  7093 ;;		Unchanged: 0/0
  7094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7095 ;;      Params:         0       0       0       0       0       0       0
  7096 ;;      Locals:         1       0       0       0       0       0       0
  7097 ;;      Temps:          2       0       0       0       0       0       0
  7098 ;;      Totals:         3       0       0       0       0       0       0
  7099 ;;Total ram usage:        3 bytes
  7100 ;; Hardware stack levels used:    1
  7101 ;; Hardware stack levels required when called:    2
  7102 ;; This function calls:
  7103 ;;		i2_printError
  7104 ;; This function is called by:
  7105 ;;		_isr
  7106 ;; This function uses a non-reentrant model
  7107 ;;
  7108                           
  7109                           	psect	text41
  7110  00182E                     __ptext41:
  7111                           	callstack 0
  7112  00182E                     i2_storeData:
  7113                           	callstack 0
  7114  00182E  FFFF               	dw	65535	; assembler added errata NOP
  7115                           
  7116                           ;incstack = 0
  7117                           ;i2storeData@data stored from wreg
  7118  001830  6E0A               	movwf	i2storeData@data^0,c
  7119  001832                     
  7120                           ;usart.c: 166:     static unsigned char counter = 0;;usart.c: 167:     static unsigned c
      +                          har mexLength = 5;;usart.c: 168:     static unsigned char command;;usart.c: 169:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 173:     receivedMex[counter] = data;
  7121  001832  0EC8               	movlw	low storeData@receivedMex
  7122  001834  2455               	addwf	storeData@counter^0,w,c
  7123  001836  6ED9               	movwf	fsr2l,c
  7124  001838  6ADA               	clrf	fsr2h,c
  7125  00183A  0E00               	movlw	high storeData@receivedMex
  7126  00183C  22DA               	addwfc	fsr2h,f,c
  7127  00183E  C00A  FFDF         	movff	i2storeData@data,indf2
  7128  001842                     
  7129                           ;usart.c: 175:     counter++;
  7130  001842  2A55               	incf	storeData@counter^0,f,c
  7131                           
  7132                           ;usart.c: 178:     switch(receivedMex[0]){
  7133  001844  EF33  F00C         	goto	i2l3383
  7134  001848                     i2l3375:
  7135  001848  FFFF               	dw	65535	; assembler added errata NOP
  7136                           
  7137                           ; BSR set to: 0
  7138                           ;usart.c: 180:             mexLength = 5;
  7139  00184A  0E05               	movlw	5
  7140  00184C  6E6C               	movwf	storeData@mexLength^0,c
  7141                           
  7142                           ;usart.c: 181:             break;
  7143  00184E  EF4F  F00C         	goto	i2l3385
  7144  001852                     i2l3377:
  7145  001852  FFFF               	dw	65535	; assembler added errata NOP
  7146                           
  7147                           ; BSR set to: 0
  7148                           ;usart.c: 183:             mexLength = 9;
  7149  001854  0E09               	movlw	9
  7150  001856  6E6C               	movwf	storeData@mexLength^0,c
  7151                           
  7152                           ;usart.c: 184:             break;
  7153  001858  EF4F  F00C         	goto	i2l3385
  7154  00185C                     i2l3379:
  7155  00185C  FFFF               	dw	65535	; assembler added errata NOP
  7156                           
  7157                           ; BSR set to: 0
  7158                           ;usart.c: 186:             mexLength = 1;
  7159  00185E  0E01               	movlw	1
  7160  001860  6E6C               	movwf	storeData@mexLength^0,c
  7161                           
  7162                           ;usart.c: 187:             break;
  7163  001862  EF4F  F00C         	goto	i2l3385
  7164  001866                     i2l3383:
  7165  001866  FFFF               	dw	65535	; assembler added errata NOP
  7166  001868  0100               	movlb	0	; () banked
  7167  00186A  51C8               	movf	storeData@receivedMex& (0+255),w,b
  7168  00186C  6E08               	movwf	??i2_storeData^0,c
  7169  00186E  6A09               	clrf	(??i2_storeData+1)^0,c
  7170                           
  7171                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7172                           ; Switch size 1, requested type "simple"
  7173                           ; Number of cases is 1, Range of values is 0 to 0
  7174                           ; switch strategies available:
  7175                           ; Name         Instructions Cycles
  7176                           ; simple_byte            4     3 (average)
  7177                           ;	Chosen strategy is simple_byte
  7178  001870  5009               	movf	(??i2_storeData+1)^0,w,c
  7179  001872  0A00               	xorlw	0	; case 0
  7180  001874  B4D8               	btfsc	status,2,c
  7181  001876  EF3F  F00C         	goto	i2l4833
  7182  00187A  EF4F  F00C         	goto	i2l3385
  7183  00187E                     i2l4833:
  7184  00187E  FFFF               	dw	65535	; assembler added errata NOP
  7185                           
  7186                           ; BSR set to: 0
  7187                           ; Switch size 1, requested type "simple"
  7188                           ; Number of cases is 3, Range of values is 0 to 2
  7189                           ; switch strategies available:
  7190                           ; Name         Instructions Cycles
  7191                           ; simple_byte           10     6 (average)
  7192                           ;	Chosen strategy is simple_byte
  7193  001880  5008               	movf	??i2_storeData^0,w,c
  7194  001882  0A00               	xorlw	0	; case 0
  7195  001884  B4D8               	btfsc	status,2,c
  7196  001886  EF24  F00C         	goto	i2l3375
  7197  00188A  0A01               	xorlw	1	; case 1
  7198  00188C  B4D8               	btfsc	status,2,c
  7199  00188E  EF29  F00C         	goto	i2l3377
  7200  001892  0A03               	xorlw	3	; case 2
  7201  001894  B4D8               	btfsc	status,2,c
  7202  001896  EF2E  F00C         	goto	i2l3379
  7203  00189A  EF4F  F00C         	goto	i2l3385
  7204  00189E                     i2l3385:
  7205  00189E  FFFF               	dw	65535	; assembler added errata NOP
  7206                           
  7207                           ; BSR set to: 0
  7208                           ;usart.c: 194:     if(counter >= mexLength){
  7209  0018A0  506C               	movf	storeData@mexLength^0,w,c
  7210  0018A2  5C55               	subwf	storeData@counter^0,w,c
  7211  0018A4  A0D8               	btfss	status,0,c
  7212  0018A6  EF57  F00C         	goto	i2u253_41
  7213  0018AA  EF5A  F00C         	goto	i2u253_40
  7214  0018AE                     i2u253_41:
  7215  0018AE  FFFF               	dw	65535	; assembler added errata NOP
  7216  0018B0  EFD2  F00C         	goto	i2l588
  7217  0018B4                     i2u253_40:
  7218  0018B4  FFFF               	dw	65535	; assembler added errata NOP
  7219  0018B6                     
  7220                           ; BSR set to: 0
  7221                           ;usart.c: 195:         counter = 0;
  7222  0018B6  0E00               	movlw	0
  7223  0018B8  6E55               	movwf	storeData@counter^0,c
  7224                           
  7225                           ;usart.c: 198:         switch(receivedMex[0]){
  7226  0018BA  EFB7  F00C         	goto	i2l3407
  7227  0018BE                     i2l3389:
  7228  0018BE  FFFF               	dw	65535	; assembler added errata NOP
  7229                           
  7230                           ; BSR set to: 0
  7231                           ;usart.c: 200:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  7232  0018C0  5058               	movf	_dataCounter^0,w,c
  7233  0018C2  0D04               	mullw	4
  7234  0018C4  0ED1               	movlw	low _dataSequence
  7235  0018C6  24F3               	addwf	243,w,c
  7236  0018C8  6ED9               	movwf	fsr2l,c
  7237  0018CA  0E00               	movlw	high _dataSequence
  7238  0018CC  20F4               	addwfc	prodh,w,c
  7239  0018CE  6EDA               	movwf	fsr2h,c
  7240  0018D0  C0C9  FFDF         	movff	storeData@receivedMex+1,indf2
  7241                           
  7242                           ;usart.c: 201:                 dataSequence[dataCounter].posX = receivedMex[2] * 10;
  7243  0018D4  5058               	movf	_dataCounter^0,w,c
  7244  0018D6  0D04               	mullw	4
  7245  0018D8  0ED2               	movlw	low (_dataSequence+1)
  7246  0018DA  24F3               	addwf	243,w,c
  7247  0018DC  6ED9               	movwf	fsr2l,c
  7248  0018DE  0E00               	movlw	high (_dataSequence+1)
  7249  0018E0  20F4               	addwfc	prodh,w,c
  7250  0018E2  6EDA               	movwf	fsr2h,c
  7251  0018E4  51CA               	movf	(storeData@receivedMex+2)& (0+255),w,b
  7252  0018E6  0D0A               	mullw	10
  7253  0018E8  CFF3 FFDF          	movff	prodl,indf2
  7254                           
  7255                           ;usart.c: 202:                 dataSequence[dataCounter].posY = receivedMex[3] * 10;
  7256  0018EC  5058               	movf	_dataCounter^0,w,c
  7257  0018EE  0D04               	mullw	4
  7258  0018F0  0ED3               	movlw	low (_dataSequence+2)
  7259  0018F2  24F3               	addwf	243,w,c
  7260  0018F4  6ED9               	movwf	fsr2l,c
  7261  0018F6  0E00               	movlw	high (_dataSequence+2)
  7262  0018F8  20F4               	addwfc	prodh,w,c
  7263  0018FA  6EDA               	movwf	fsr2h,c
  7264  0018FC  51CB               	movf	(storeData@receivedMex+3)& (0+255),w,b
  7265  0018FE  0D0A               	mullw	10
  7266  001900  CFF3 FFDF          	movff	prodl,indf2
  7267                           
  7268                           ;usart.c: 203:                 dataSequence[dataCounter].rotation = receivedMex[4];
  7269  001904  5058               	movf	_dataCounter^0,w,c
  7270  001906  0D04               	mullw	4
  7271  001908  0ED4               	movlw	low (_dataSequence+3)
  7272  00190A  24F3               	addwf	243,w,c
  7273  00190C  6ED9               	movwf	fsr2l,c
  7274  00190E  0E00               	movlw	high (_dataSequence+3)
  7275  001910  20F4               	addwfc	prodh,w,c
  7276  001912  6EDA               	movwf	fsr2h,c
  7277  001914  C0CC  FFDF         	movff	storeData@receivedMex+4,indf2
  7278  001918                     
  7279                           ; BSR set to: 0
  7280                           ;usart.c: 205:                 dataCounter++;
  7281  001918  2A58               	incf	_dataCounter^0,f,c
  7282                           
  7283                           ;usart.c: 206:                 break;
  7284  00191A  EFD2  F00C         	goto	i2l588
  7285  00191E                     i2l585:
  7286  00191E  FFFF               	dw	65535	; assembler added errata NOP
  7287                           
  7288                           ; BSR set to: 0
  7289                           ;usart.c: 209:                 newSequenceData.L = receivedMex[1];
  7290  001920  C0C9  F0E5         	movff	storeData@receivedMex+1,_newSequenceData
  7291                           
  7292                           ;usart.c: 210:                 newSequenceData.W = receivedMex[2];
  7293  001924  C0CA  F0E6         	movff	storeData@receivedMex+2,_newSequenceData+1
  7294  001928                     
  7295                           ; BSR set to: 0
  7296                           ;usart.c: 211:                 newSequenceData.init_posX = receivedMex[3] * 10;
  7297  001928  51CB               	movf	(storeData@receivedMex+3)& (0+255),w,b
  7298  00192A  0D0A               	mullw	10
  7299  00192C  CFF3 F0E7          	movff	prodl,_newSequenceData+2
  7300                           
  7301                           ;usart.c: 212:                 newSequenceData.init_posY = receivedMex[4] * 10;
  7302  001930  51CC               	movf	(storeData@receivedMex+4)& (0+255),w,b
  7303  001932  0D0A               	mullw	10
  7304  001934  CFF3 F0E8          	movff	prodl,_newSequenceData+3
  7305  001938                     
  7306                           ; BSR set to: 0
  7307                           ;usart.c: 213:                 newSequenceData.init_rot = receivedMex[5];
  7308  001938  C0CD  F0E9         	movff	storeData@receivedMex+5,_newSequenceData+4
  7309                           
  7310                           ;usart.c: 214:                 newSequenceData.end_posX = receivedMex[6] * 10;
  7311  00193C  51CE               	movf	(storeData@receivedMex+6)& (0+255),w,b
  7312  00193E  0D0A               	mullw	10
  7313  001940  CFF3 F0EA          	movff	prodl,_newSequenceData+5
  7314                           
  7315                           ;usart.c: 215:                 newSequenceData.end_posY = receivedMex[7] * 10;
  7316  001944  51CF               	movf	(storeData@receivedMex+7)& (0+255),w,b
  7317  001946  0D0A               	mullw	10
  7318  001948  CFF3 F0EB          	movff	prodl,_newSequenceData+6
  7319  00194C                     
  7320                           ; BSR set to: 0
  7321                           ;usart.c: 216:                 newSequenceData.end_rot = receivedMex[8];
  7322  00194C  C0D0  F0EC         	movff	storeData@receivedMex+8,_newSequenceData+7
  7323  001950                     
  7324                           ; BSR set to: 0
  7325                           ;usart.c: 218:                 _newSequence = 1;
  7326  001950  0E01               	movlw	1
  7327  001952  6E56               	movwf	__newSequence^0,c
  7328                           
  7329                           ;usart.c: 219:                 break;
  7330  001954  EFD2  F00C         	goto	i2l588
  7331  001958                     i2l3401:
  7332  001958  FFFF               	dw	65535	; assembler added errata NOP
  7333                           
  7334                           ; BSR set to: 0
  7335                           ;usart.c: 222:                 _fatalError = 1;
  7336  00195A  0E01               	movlw	1
  7337  00195C  6E57               	movwf	__fatalError^0,c
  7338                           
  7339                           ;usart.c: 223:                 break;
  7340  00195E  EFD2  F00C         	goto	i2l588
  7341  001962                     i2l3403:
  7342  001962  FFFF               	dw	65535	; assembler added errata NOP
  7343                           
  7344                           ; BSR set to: 0
  7345                           ;usart.c: 226:                 printError(8);
  7346  001964  0E08               	movlw	8
  7347  001966  EC20  F00F         	call	i2_printError
  7348                           
  7349                           ;usart.c: 227:                 break;
  7350  00196A  EFD2  F00C         	goto	i2l588
  7351  00196E                     i2l3407:
  7352  00196E  FFFF               	dw	65535	; assembler added errata NOP
  7353                           
  7354                           ; BSR set to: 0
  7355  001970  51C8               	movf	storeData@receivedMex& (0+255),w,b
  7356  001972  6E08               	movwf	??i2_storeData^0,c
  7357  001974  6A09               	clrf	(??i2_storeData+1)^0,c
  7358                           
  7359                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7360                           ; Switch size 1, requested type "simple"
  7361                           ; Number of cases is 1, Range of values is 0 to 0
  7362                           ; switch strategies available:
  7363                           ; Name         Instructions Cycles
  7364                           ; simple_byte            4     3 (average)
  7365                           ;	Chosen strategy is simple_byte
  7366  001976  5009               	movf	(??i2_storeData+1)^0,w,c
  7367  001978  0A00               	xorlw	0	; case 0
  7368  00197A  B4D8               	btfsc	status,2,c
  7369  00197C  EFC2  F00C         	goto	i2l4835
  7370  001980  EFB1  F00C         	goto	i2l3403
  7371  001984                     i2l4835:
  7372  001984  FFFF               	dw	65535	; assembler added errata NOP
  7373                           
  7374                           ; BSR set to: 0
  7375                           ; Switch size 1, requested type "simple"
  7376                           ; Number of cases is 3, Range of values is 0 to 2
  7377                           ; switch strategies available:
  7378                           ; Name         Instructions Cycles
  7379                           ; simple_byte           10     6 (average)
  7380                           ;	Chosen strategy is simple_byte
  7381  001986  5008               	movf	??i2_storeData^0,w,c
  7382  001988  0A00               	xorlw	0	; case 0
  7383  00198A  B4D8               	btfsc	status,2,c
  7384  00198C  EF5F  F00C         	goto	i2l3389
  7385  001990  0A01               	xorlw	1	; case 1
  7386  001992  B4D8               	btfsc	status,2,c
  7387  001994  EF8F  F00C         	goto	i2l585
  7388  001998  0A03               	xorlw	3	; case 2
  7389  00199A  B4D8               	btfsc	status,2,c
  7390  00199C  EFAC  F00C         	goto	i2l3401
  7391  0019A0  EFB1  F00C         	goto	i2l3403
  7392  0019A4                     i2l588:
  7393  0019A4  FFFF               	dw	65535	; assembler added errata NOP
  7394  0019A6  0012               	return		;funcret
  7395  0019A8  FFFF               	dw	65535	; errata NOP
  7396  0019AA                     __end_ofi2_storeData:
  7397                           	callstack 0
  7398                           
  7399 ;; *************** function _writeTM0 *****************
  7400 ;; Defined at:
  7401 ;;		line 28 in file "motors.c"
  7402 ;; Parameters:    Size  Location     Type
  7403 ;;		None
  7404 ;; Auto vars:     Size  Location     Type
  7405 ;;		None
  7406 ;; Return value:  Size  Location     Type
  7407 ;;                  1    wreg      void 
  7408 ;; Registers used:
  7409 ;;		wreg, status,2
  7410 ;; Tracked objects:
  7411 ;;		On entry : 0/0
  7412 ;;		On exit  : 0/0
  7413 ;;		Unchanged: 0/0
  7414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7415 ;;      Params:         0       0       0       0       0       0       0
  7416 ;;      Locals:         0       0       0       0       0       0       0
  7417 ;;      Temps:          0       0       0       0       0       0       0
  7418 ;;      Totals:         0       0       0       0       0       0       0
  7419 ;;Total ram usage:        0 bytes
  7420 ;; Hardware stack levels used:    1
  7421 ;; This function calls:
  7422 ;;		Nothing
  7423 ;; This function is called by:
  7424 ;;		_isr
  7425 ;; This function uses a non-reentrant model
  7426 ;;
  7427                           
  7428                           	psect	text42
  7429  00254E                     __ptext42:
  7430                           	callstack 0
  7431  00254E                     _writeTM0:
  7432                           	callstack 0
  7433  00254E  FFFF               	dw	65535	; assembler added errata NOP
  7434  002550                     
  7435                           ;motors.c: 29:     tm0Error = 1;
  7436  002550  0E00               	movlw	0
  7437  002552  6E51               	movwf	(_tm0Error+1)^0,c
  7438  002554  0E01               	movlw	1
  7439  002556  6E50               	movwf	_tm0Error^0,c
  7440  002558  0012               	return		;funcret
  7441  00255A  FFFF               	dw	65535	; errata NOP
  7442  00255C                     __end_of_writeTM0:
  7443                           	callstack 0
  7444                           
  7445 ;; *************** function _whatsTM0Limit *****************
  7446 ;; Defined at:
  7447 ;;		line 42 in file "motors.c"
  7448 ;; Parameters:    Size  Location     Type
  7449 ;;		None
  7450 ;; Auto vars:     Size  Location     Type
  7451 ;;		None
  7452 ;; Return value:  Size  Location     Type
  7453 ;;                  1    wreg      unsigned char 
  7454 ;; Registers used:
  7455 ;;		wreg, status,2
  7456 ;; Tracked objects:
  7457 ;;		On entry : 0/0
  7458 ;;		On exit  : 0/0
  7459 ;;		Unchanged: 0/0
  7460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7461 ;;      Params:         0       0       0       0       0       0       0
  7462 ;;      Locals:         0       0       0       0       0       0       0
  7463 ;;      Temps:          0       0       0       0       0       0       0
  7464 ;;      Totals:         0       0       0       0       0       0       0
  7465 ;;Total ram usage:        0 bytes
  7466 ;; Hardware stack levels used:    1
  7467 ;; This function calls:
  7468 ;;		Nothing
  7469 ;; This function is called by:
  7470 ;;		_isr
  7471 ;; This function uses a non-reentrant model
  7472 ;;
  7473                           
  7474                           	psect	text43
  7475  0025FE                     __ptext43:
  7476                           	callstack 0
  7477  0025FE                     _whatsTM0Limit:
  7478                           	callstack 0
  7479  0025FE  FFFF               	dw	65535	; assembler added errata NOP
  7480  002600                     
  7481                           ;motors.c: 43:     return(tm0Limit);
  7482  002600  505D               	movf	_tm0Limit^0,w,c
  7483  002602  0012               	return		;funcret
  7484  002604  FFFF               	dw	65535	; errata NOP
  7485  002606                     __end_of_whatsTM0Limit:
  7486                           	callstack 0
  7487                           
  7488 ;; *************** function _toggleStep *****************
  7489 ;; Defined at:
  7490 ;;		line 92 in file "timer.c"
  7491 ;; Parameters:    Size  Location     Type
  7492 ;;		None
  7493 ;; Auto vars:     Size  Location     Type
  7494 ;;		None
  7495 ;; Return value:  Size  Location     Type
  7496 ;;                  1    wreg      void 
  7497 ;; Registers used:
  7498 ;;		wreg, status,2
  7499 ;; Tracked objects:
  7500 ;;		On entry : 0/0
  7501 ;;		On exit  : 0/0
  7502 ;;		Unchanged: 0/0
  7503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7504 ;;      Params:         0       0       0       0       0       0       0
  7505 ;;      Locals:         0       0       0       0       0       0       0
  7506 ;;      Temps:          0       0       0       0       0       0       0
  7507 ;;      Totals:         0       0       0       0       0       0       0
  7508 ;;Total ram usage:        0 bytes
  7509 ;; Hardware stack levels used:    1
  7510 ;; This function calls:
  7511 ;;		Nothing
  7512 ;; This function is called by:
  7513 ;;		_isr
  7514 ;; This function uses a non-reentrant model
  7515 ;;
  7516                           
  7517                           	psect	text44
  7518  0025C0                     __ptext44:
  7519                           	callstack 0
  7520  0025C0                     _toggleStep:
  7521                           	callstack 0
  7522  0025C0  FFFF               	dw	65535	; assembler added errata NOP
  7523  0025C2                     
  7524                           ;timer.c: 93:     stepToggle = 1;
  7525  0025C2  0E01               	movlw	1
  7526  0025C4  6E52               	movwf	_stepToggle^0,c	;volatile
  7527  0025C6  0012               	return		;funcret
  7528  0025C8  FFFF               	dw	65535	; errata NOP
  7529  0025CA                     __end_of_toggleStep:
  7530                           	callstack 0
  7531                           
  7532 ;; *************** function _setTouchRel *****************
  7533 ;; Defined at:
  7534 ;;		line 86 in file "adc.c"
  7535 ;; Parameters:    Size  Location     Type
  7536 ;;		None
  7537 ;; Auto vars:     Size  Location     Type
  7538 ;;		None
  7539 ;; Return value:  Size  Location     Type
  7540 ;;                  1    wreg      void 
  7541 ;; Registers used:
  7542 ;;		wreg, status,2
  7543 ;; Tracked objects:
  7544 ;;		On entry : 0/0
  7545 ;;		On exit  : 0/0
  7546 ;;		Unchanged: 0/0
  7547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7548 ;;      Params:         0       0       0       0       0       0       0
  7549 ;;      Locals:         0       0       0       0       0       0       0
  7550 ;;      Temps:          0       0       0       0       0       0       0
  7551 ;;      Totals:         0       0       0       0       0       0       0
  7552 ;;Total ram usage:        0 bytes
  7553 ;; Hardware stack levels used:    1
  7554 ;; This function calls:
  7555 ;;		Nothing
  7556 ;; This function is called by:
  7557 ;;		_isr
  7558 ;; This function uses a non-reentrant model
  7559 ;;
  7560                           
  7561                           	psect	text45
  7562  0025CA                     __ptext45:
  7563                           	callstack 0
  7564  0025CA                     _setTouchRel:
  7565                           	callstack 0
  7566  0025CA  FFFF               	dw	65535	; assembler added errata NOP
  7567  0025CC                     
  7568                           ;adc.c: 87:     touch_rel = 1;
  7569  0025CC  0E01               	movlw	1
  7570  0025CE  6E5C               	movwf	_touch_rel^0,c	;volatile
  7571  0025D0  0012               	return		;funcret
  7572  0025D2  FFFF               	dw	65535	; errata NOP
  7573  0025D4                     __end_of_setTouchRel:
  7574                           	callstack 0
  7575                           
  7576 ;; *************** function _setThermRel *****************
  7577 ;; Defined at:
  7578 ;;		line 79 in file "adc.c"
  7579 ;; Parameters:    Size  Location     Type
  7580 ;;		None
  7581 ;; Auto vars:     Size  Location     Type
  7582 ;;		None
  7583 ;; Return value:  Size  Location     Type
  7584 ;;                  1    wreg      void 
  7585 ;; Registers used:
  7586 ;;		wreg, status,2
  7587 ;; Tracked objects:
  7588 ;;		On entry : 0/0
  7589 ;;		On exit  : 0/0
  7590 ;;		Unchanged: 0/0
  7591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7592 ;;      Params:         0       0       0       0       0       0       0
  7593 ;;      Locals:         0       0       0       0       0       0       0
  7594 ;;      Temps:          0       0       0       0       0       0       0
  7595 ;;      Totals:         0       0       0       0       0       0       0
  7596 ;;Total ram usage:        0 bytes
  7597 ;; Hardware stack levels used:    1
  7598 ;; This function calls:
  7599 ;;		Nothing
  7600 ;; This function is called by:
  7601 ;;		_isr
  7602 ;; This function uses a non-reentrant model
  7603 ;;
  7604                           
  7605                           	psect	text46
  7606  0025D4                     __ptext46:
  7607                           	callstack 0
  7608  0025D4                     _setThermRel:
  7609                           	callstack 0
  7610  0025D4  FFFF               	dw	65535	; assembler added errata NOP
  7611  0025D6                     
  7612                           ;adc.c: 80:     therm_rel = 1;
  7613  0025D6  0E01               	movlw	1
  7614  0025D8  6E5B               	movwf	_therm_rel^0,c	;volatile
  7615  0025DA  0012               	return		;funcret
  7616  0025DC  FFFF               	dw	65535	; errata NOP
  7617  0025DE                     __end_of_setThermRel:
  7618                           	callstack 0
  7619                           
  7620 ;; *************** function _retPeriod *****************
  7621 ;; Defined at:
  7622 ;;		line 100 in file "timer.c"
  7623 ;; Parameters:    Size  Location     Type
  7624 ;;		None
  7625 ;; Auto vars:     Size  Location     Type
  7626 ;;		None
  7627 ;; Return value:  Size  Location     Type
  7628 ;;                  2    0[COMRAM] unsigned int 
  7629 ;; Registers used:
  7630 ;;		None
  7631 ;; Tracked objects:
  7632 ;;		On entry : 0/0
  7633 ;;		On exit  : 0/0
  7634 ;;		Unchanged: 0/0
  7635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7636 ;;      Params:         2       0       0       0       0       0       0
  7637 ;;      Locals:         0       0       0       0       0       0       0
  7638 ;;      Temps:          0       0       0       0       0       0       0
  7639 ;;      Totals:         2       0       0       0       0       0       0
  7640 ;;Total ram usage:        2 bytes
  7641 ;; Hardware stack levels used:    1
  7642 ;; This function calls:
  7643 ;;		Nothing
  7644 ;; This function is called by:
  7645 ;;		_isr
  7646 ;; This function uses a non-reentrant model
  7647 ;;
  7648                           
  7649                           	psect	text47
  7650  00255C                     __ptext47:
  7651                           	callstack 0
  7652  00255C                     _retPeriod:
  7653                           	callstack 0
  7654  00255C  FFFF               	dw	65535	; assembler added errata NOP
  7655  00255E                     
  7656                           ;timer.c: 101:     return pwmPeriod;
  7657  00255E  C046  F001         	movff	_pwmPeriod,?_retPeriod
  7658  002562  C047  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  7659  002566  0012               	return		;funcret
  7660  002568  FFFF               	dw	65535	; errata NOP
  7661  00256A                     __end_of_retPeriod:
  7662                           	callstack 0
  7663                           
  7664 ;; *************** function _increaseStep *****************
  7665 ;; Defined at:
  7666 ;;		line 84 in file "timer.c"
  7667 ;; Parameters:    Size  Location     Type
  7668 ;;		None
  7669 ;; Auto vars:     Size  Location     Type
  7670 ;;		None
  7671 ;; Return value:  Size  Location     Type
  7672 ;;                  1    wreg      void 
  7673 ;; Registers used:
  7674 ;;		status,2, status,0
  7675 ;; Tracked objects:
  7676 ;;		On entry : 0/0
  7677 ;;		On exit  : 0/0
  7678 ;;		Unchanged: 0/0
  7679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7680 ;;      Params:         0       0       0       0       0       0       0
  7681 ;;      Locals:         0       0       0       0       0       0       0
  7682 ;;      Temps:          0       0       0       0       0       0       0
  7683 ;;      Totals:         0       0       0       0       0       0       0
  7684 ;;Total ram usage:        0 bytes
  7685 ;; Hardware stack levels used:    1
  7686 ;; This function calls:
  7687 ;;		Nothing
  7688 ;; This function is called by:
  7689 ;;		_isr
  7690 ;; This function uses a non-reentrant model
  7691 ;;
  7692                           
  7693                           	psect	text48
  7694  002606                     __ptext48:
  7695                           	callstack 0
  7696  002606                     _increaseStep:
  7697                           	callstack 0
  7698  002606  FFFF               	dw	65535	; assembler added errata NOP
  7699  002608                     
  7700                           ;timer.c: 85:     pwmStep++;
  7701  002608  2A53               	incf	_pwmStep^0,f,c	;volatile
  7702  00260A  0012               	return		;funcret
  7703  00260C  FFFF               	dw	65535	; errata NOP
  7704  00260E                     __end_of_increaseStep:
  7705                           	callstack 0
  7706                           
  7707 ;; *************** function _fatalError *****************
  7708 ;; Defined at:
  7709 ;;		line 61 in file "usart.c"
  7710 ;; Parameters:    Size  Location     Type
  7711 ;;		None
  7712 ;; Auto vars:     Size  Location     Type
  7713 ;;		None
  7714 ;; Return value:  Size  Location     Type
  7715 ;;                  1    wreg      unsigned char 
  7716 ;; Registers used:
  7717 ;;		wreg, status,2
  7718 ;; Tracked objects:
  7719 ;;		On entry : 0/0
  7720 ;;		On exit  : 0/0
  7721 ;;		Unchanged: 0/0
  7722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7723 ;;      Params:         0       0       0       0       0       0       0
  7724 ;;      Locals:         0       0       0       0       0       0       0
  7725 ;;      Temps:          0       0       0       0       0       0       0
  7726 ;;      Totals:         0       0       0       0       0       0       0
  7727 ;;Total ram usage:        0 bytes
  7728 ;; Hardware stack levels used:    1
  7729 ;; This function calls:
  7730 ;;		Nothing
  7731 ;; This function is called by:
  7732 ;;		_isr
  7733 ;; This function uses a non-reentrant model
  7734 ;;
  7735                           
  7736                           	psect	text49
  7737  00260E                     __ptext49:
  7738                           	callstack 0
  7739  00260E                     _fatalError:
  7740                           	callstack 0
  7741  00260E  FFFF               	dw	65535	; assembler added errata NOP
  7742  002610                     
  7743                           ;usart.c: 62:     return _fatalError;
  7744  002610  5057               	movf	__fatalError^0,w,c
  7745  002612  0012               	return		;funcret
  7746  002614  FFFF               	dw	65535	; errata NOP
  7747  002616                     __end_of_fatalError:
  7748                           	callstack 0
  7749                           
  7750 ;; *************** function _abortAll *****************
  7751 ;; Defined at:
  7752 ;;		line 817 in file "motors.c"
  7753 ;; Parameters:    Size  Location     Type
  7754 ;;		None
  7755 ;; Auto vars:     Size  Location     Type
  7756 ;;		None
  7757 ;; Return value:  Size  Location     Type
  7758 ;;                  1    wreg      void 
  7759 ;; Registers used:
  7760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7761 ;; Tracked objects:
  7762 ;;		On entry : 0/0
  7763 ;;		On exit  : 0/0
  7764 ;;		Unchanged: 0/0
  7765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7766 ;;      Params:         0       0       0       0       0       0       0
  7767 ;;      Locals:         0       0       0       0       0       0       0
  7768 ;;      Temps:          0       0       0       0       0       0       0
  7769 ;;      Totals:         0       0       0       0       0       0       0
  7770 ;;Total ram usage:        0 bytes
  7771 ;; Hardware stack levels used:    1
  7772 ;; Hardware stack levels required when called:    2
  7773 ;; This function calls:
  7774 ;;		i2_printError
  7775 ;; This function is called by:
  7776 ;;		_isr
  7777 ;; This function uses a non-reentrant model
  7778 ;;
  7779                           
  7780                           	psect	text50
  7781  0024F4                     __ptext50:
  7782                           	callstack 0
  7783  0024F4                     _abortAll:
  7784                           	callstack 0
  7785  0024F4  FFFF               	dw	65535	; assembler added errata NOP
  7786  0024F6                     
  7787                           ;motors.c: 825:     printError(7);
  7788  0024F6  0E07               	movlw	7
  7789  0024F8  EC20  F00F         	call	i2_printError
  7790  0024FC                     i2l253:
  7791  0024FC  FFFF               	dw	65535	; assembler added errata NOP
  7792  0024FE  EF7E  F012         	goto	i2l253
  7793  002502  0012               	return		;funcret
  7794  002504  FFFF               	dw	65535	; errata NOP
  7795  002506                     __end_of_abortAll:
  7796                           	callstack 0
  7797                           
  7798 ;; *************** function i2_printError *****************
  7799 ;; Defined at:
  7800 ;;		line 111 in file "usart.c"
  7801 ;; Parameters:    Size  Location     Type
  7802 ;;  errCode         1    wreg     unsigned char 
  7803 ;; Auto vars:     Size  Location     Type
  7804 ;;  errCode         1    6[COMRAM] unsigned char 
  7805 ;; Return value:  Size  Location     Type
  7806 ;;                  1    wreg      void 
  7807 ;; Registers used:
  7808 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7809 ;; Tracked objects:
  7810 ;;		On entry : 0/0
  7811 ;;		On exit  : 0/0
  7812 ;;		Unchanged: 0/0
  7813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7814 ;;      Params:         0       0       0       0       0       0       0
  7815 ;;      Locals:         1       0       0       0       0       0       0
  7816 ;;      Temps:          2       0       0       0       0       0       0
  7817 ;;      Totals:         3       0       0       0       0       0       0
  7818 ;;Total ram usage:        3 bytes
  7819 ;; Hardware stack levels used:    1
  7820 ;; Hardware stack levels required when called:    1
  7821 ;; This function calls:
  7822 ;;		i2_uartTx
  7823 ;; This function is called by:
  7824 ;;		_abortAll
  7825 ;;		i2_storeData
  7826 ;; This function uses a non-reentrant model
  7827 ;;
  7828                           
  7829                           	psect	text51
  7830  001E40                     __ptext51:
  7831                           	callstack 0
  7832  001E40                     i2_printError:
  7833                           	callstack 0
  7834  001E40  FFFF               	dw	65535	; assembler added errata NOP
  7835                           
  7836                           ;incstack = 0
  7837                           ;i2printError@errCode stored from wreg
  7838  001E42  6E07               	movwf	i2printError@errCode^0,c
  7839  001E44                     
  7840                           ;usart.c: 113:     switch(errCode){
  7841  001E44  EF7C  F00F         	goto	i2l3057
  7842  001E48                     i2l3039:
  7843  001E48  FFFF               	dw	65535	; assembler added errata NOP
  7844                           
  7845                           ;usart.c: 115:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  7846  001E4A  0E92               	movlw	low _errString_Feed
  7847  001E4C  6E01               	movwf	i2uartTx@ptr^0,c
  7848  001E4E  0E00               	movlw	high _errString_Feed
  7849  001E50  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7850  001E52  0E1E               	movlw	30
  7851  001E54  6E03               	movwf	i2uartTx@length^0,c
  7852  001E56  EC93  F011         	call	i2_uartTx	;wreg free
  7853                           
  7854                           ;usart.c: 116:             break;
  7855  001E5A  EFAB  F00F         	goto	i2l555
  7856  001E5E                     i2l3041:
  7857  001E5E  FFFF               	dw	65535	; assembler added errata NOP
  7858                           
  7859                           ;usart.c: 118:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  7860  001E60  0E5E               	movlw	low _errString_ZEND
  7861  001E62  6E01               	movwf	i2uartTx@ptr^0,c
  7862  001E64  0E01               	movlw	high _errString_ZEND
  7863  001E66  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7864  001E68  0E29               	movlw	41
  7865  001E6A  6E03               	movwf	i2uartTx@length^0,c
  7866  001E6C  EC93  F011         	call	i2_uartTx	;wreg free
  7867                           
  7868                           ;usart.c: 119:             break;
  7869  001E70  EFAB  F00F         	goto	i2l555
  7870  001E74                     i2l3043:
  7871  001E74  FFFF               	dw	65535	; assembler added errata NOP
  7872                           
  7873                           ;usart.c: 121:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  7874  001E76  0E87               	movlw	low _errString_Reset
  7875  001E78  6E01               	movwf	i2uartTx@ptr^0,c
  7876  001E7A  0E01               	movlw	high _errString_Reset
  7877  001E7C  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7878  001E7E  0E28               	movlw	40
  7879  001E80  6E03               	movwf	i2uartTx@length^0,c
  7880  001E82  EC93  F011         	call	i2_uartTx	;wreg free
  7881                           
  7882                           ;usart.c: 122:             break;
  7883  001E86  EFAB  F00F         	goto	i2l555
  7884  001E8A                     i2l3045:
  7885  001E8A  FFFF               	dw	65535	; assembler added errata NOP
  7886                           
  7887                           ;usart.c: 124:             uartTx(&errString_Point[0], sizeof(errString_Point));
  7888  001E8C  0E35               	movlw	low _errString_Point
  7889  001E8E  6E01               	movwf	i2uartTx@ptr^0,c
  7890  001E90  0E01               	movlw	high _errString_Point
  7891  001E92  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7892  001E94  0E29               	movlw	41
  7893  001E96  6E03               	movwf	i2uartTx@length^0,c
  7894  001E98  EC93  F011         	call	i2_uartTx	;wreg free
  7895                           
  7896                           ;usart.c: 125:             break;
  7897  001E9C  EFAB  F00F         	goto	i2l555
  7898  001EA0                     i2l3047:
  7899  001EA0  FFFF               	dw	65535	; assembler added errata NOP
  7900                           
  7901                           ;usart.c: 127:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  7902  001EA2  0ED6               	movlw	low _errString_Bound
  7903  001EA4  6E01               	movwf	i2uartTx@ptr^0,c
  7904  001EA6  0E01               	movlw	high _errString_Bound
  7905  001EA8  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7906  001EAA  0E21               	movlw	33
  7907  001EAC  6E03               	movwf	i2uartTx@length^0,c
  7908  001EAE  EC93  F011         	call	i2_uartTx	;wreg free
  7909                           
  7910                           ;usart.c: 128:             break;
  7911  001EB2  EFAB  F00F         	goto	i2l555
  7912  001EB6                     i2l3049:
  7913  001EB6  FFFF               	dw	65535	; assembler added errata NOP
  7914                           
  7915                           ;usart.c: 130:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  7916  001EB8  0E00               	movlw	low _errString_PointZ
  7917  001EBA  6E01               	movwf	i2uartTx@ptr^0,c
  7918  001EBC  0E01               	movlw	high _errString_PointZ
  7919  001EBE  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7920  001EC0  0E35               	movlw	53
  7921  001EC2  6E03               	movwf	i2uartTx@length^0,c
  7922  001EC4  EC93  F011         	call	i2_uartTx	;wreg free
  7923                           
  7924                           ;usart.c: 131:             break;
  7925  001EC8  EFAB  F00F         	goto	i2l555
  7926  001ECC                     i2l3051:
  7927  001ECC  FFFF               	dw	65535	; assembler added errata NOP
  7928                           
  7929                           ;usart.c: 133:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  7930  001ECE  0EAF               	movlw	low _errString_Fatal
  7931  001ED0  6E01               	movwf	i2uartTx@ptr^0,c
  7932  001ED2  0E01               	movlw	high _errString_Fatal
  7933  001ED4  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7934  001ED6  0E27               	movlw	39
  7935  001ED8  6E03               	movwf	i2uartTx@length^0,c
  7936  001EDA  EC93  F011         	call	i2_uartTx	;wreg free
  7937                           
  7938                           ;usart.c: 134:             break;
  7939  001EDE  EFAB  F00F         	goto	i2l555
  7940  001EE2                     i2l3053:
  7941  001EE2  FFFF               	dw	65535	; assembler added errata NOP
  7942                           
  7943                           ;usart.c: 136:             uartTx(&errString_Command[0], sizeof(errString_Command));
  7944  001EE4  0EB0               	movlw	low _errString_Command
  7945  001EE6  6E01               	movwf	i2uartTx@ptr^0,c
  7946  001EE8  0E00               	movlw	high _errString_Command
  7947  001EEA  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7948  001EEC  0E18               	movlw	24
  7949  001EEE  6E03               	movwf	i2uartTx@length^0,c
  7950  001EF0  EC93  F011         	call	i2_uartTx	;wreg free
  7951                           
  7952                           ;usart.c: 137:             break;
  7953  001EF4  EFAB  F00F         	goto	i2l555
  7954  001EF8                     i2l3057:
  7955  001EF8  FFFF               	dw	65535	; assembler added errata NOP
  7956  001EFA  5007               	movf	i2printError@errCode^0,w,c
  7957  001EFC  6E05               	movwf	??i2_printError^0,c
  7958  001EFE  6A06               	clrf	(??i2_printError+1)^0,c
  7959                           
  7960                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7961                           ; Switch size 1, requested type "simple"
  7962                           ; Number of cases is 1, Range of values is 0 to 0
  7963                           ; switch strategies available:
  7964                           ; Name         Instructions Cycles
  7965                           ; simple_byte            4     3 (average)
  7966                           ;	Chosen strategy is simple_byte
  7967  001F00  5006               	movf	(??i2_printError+1)^0,w,c
  7968  001F02  0A00               	xorlw	0	; case 0
  7969  001F04  B4D8               	btfsc	status,2,c
  7970  001F06  EF87  F00F         	goto	i2l4837
  7971  001F0A  EFAB  F00F         	goto	i2l555
  7972  001F0E                     i2l4837:
  7973  001F0E  FFFF               	dw	65535	; assembler added errata NOP
  7974                           
  7975                           ; Switch size 1, requested type "simple"
  7976                           ; Number of cases is 8, Range of values is 1 to 8
  7977                           ; switch strategies available:
  7978                           ; Name         Instructions Cycles
  7979                           ; simple_byte           25    13 (average)
  7980                           ;	Chosen strategy is simple_byte
  7981  001F10  5005               	movf	??i2_printError^0,w,c
  7982  001F12  0A01               	xorlw	1	; case 1
  7983  001F14  B4D8               	btfsc	status,2,c
  7984  001F16  EF24  F00F         	goto	i2l3039
  7985  001F1A  0A03               	xorlw	3	; case 2
  7986  001F1C  B4D8               	btfsc	status,2,c
  7987  001F1E  EF2F  F00F         	goto	i2l3041
  7988  001F22  0A01               	xorlw	1	; case 3
  7989  001F24  B4D8               	btfsc	status,2,c
  7990  001F26  EF3A  F00F         	goto	i2l3043
  7991  001F2A  0A07               	xorlw	7	; case 4
  7992  001F2C  B4D8               	btfsc	status,2,c
  7993  001F2E  EF45  F00F         	goto	i2l3045
  7994  001F32  0A01               	xorlw	1	; case 5
  7995  001F34  B4D8               	btfsc	status,2,c
  7996  001F36  EF50  F00F         	goto	i2l3047
  7997  001F3A  0A03               	xorlw	3	; case 6
  7998  001F3C  B4D8               	btfsc	status,2,c
  7999  001F3E  EF5B  F00F         	goto	i2l3049
  8000  001F42  0A01               	xorlw	1	; case 7
  8001  001F44  B4D8               	btfsc	status,2,c
  8002  001F46  EF66  F00F         	goto	i2l3051
  8003  001F4A  0A0F               	xorlw	15	; case 8
  8004  001F4C  B4D8               	btfsc	status,2,c
  8005  001F4E  EF71  F00F         	goto	i2l3053
  8006  001F52  EFAB  F00F         	goto	i2l555
  8007  001F56                     i2l555:
  8008  001F56  FFFF               	dw	65535	; assembler added errata NOP
  8009  001F58  0012               	return		;funcret
  8010  001F5A  FFFF               	dw	65535	; errata NOP
  8011  001F5C                     __end_ofi2_printError:
  8012                           	callstack 0
  8013                           
  8014 ;; *************** function i2_uartTx *****************
  8015 ;; Defined at:
  8016 ;;		line 148 in file "usart.c"
  8017 ;; Parameters:    Size  Location     Type
  8018 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  8019 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  8020 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  8021 ;;  length          1    2[COMRAM] unsigned char 
  8022 ;; Auto vars:     Size  Location     Type
  8023 ;;  i               1    3[COMRAM] unsigned char 
  8024 ;; Return value:  Size  Location     Type
  8025 ;;                  1    wreg      void 
  8026 ;; Registers used:
  8027 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8028 ;; Tracked objects:
  8029 ;;		On entry : 0/0
  8030 ;;		On exit  : 0/0
  8031 ;;		Unchanged: 0/0
  8032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8033 ;;      Params:         3       0       0       0       0       0       0
  8034 ;;      Locals:         1       0       0       0       0       0       0
  8035 ;;      Temps:          0       0       0       0       0       0       0
  8036 ;;      Totals:         4       0       0       0       0       0       0
  8037 ;;Total ram usage:        4 bytes
  8038 ;; Hardware stack levels used:    1
  8039 ;; This function calls:
  8040 ;;		Nothing
  8041 ;; This function is called by:
  8042 ;;		i2_printError
  8043 ;; This function uses a non-reentrant model
  8044 ;;
  8045                           
  8046                           	psect	text52
  8047  002326                     __ptext52:
  8048                           	callstack 0
  8049  002326                     i2_uartTx:
  8050                           	callstack 0
  8051  002326  FFFF               	dw	65535	; assembler added errata NOP
  8052  002328                     
  8053                           ;usart.c: 148: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 149: {;usa
      +                          rt.c: 151:     for(char i = 1; i < length; i++){
  8054  002328  0E01               	movlw	1
  8055  00232A  6E04               	movwf	i2uartTx@i^0,c
  8056  00232C  EFAC  F011         	goto	i2l2741
  8057  002330                     i2l2737:
  8058  002330  FFFF               	dw	65535	; assembler added errata NOP
  8059                           
  8060                           ;usart.c: 153:         TXREG = *ptr;
  8061  002332  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  8062  002336  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  8063  00233A  50DF               	movf	indf2,w,c
  8064  00233C  6EAD               	movwf	173,c	;volatile
  8065  00233E                     i2l560:
  8066  00233E  FFFF               	dw	65535	; assembler added errata NOP
  8067  002340  A2AC               	btfss	172,1,c	;volatile
  8068  002342  EFA5  F011         	goto	i2u183_41
  8069  002346  EFA8  F011         	goto	i2u183_40
  8070  00234A                     i2u183_41:
  8071  00234A  FFFF               	dw	65535	; assembler added errata NOP
  8072  00234C  EF9F  F011         	goto	i2l560
  8073  002350                     i2u183_40:
  8074  002350  FFFF               	dw	65535	; assembler added errata NOP
  8075  002352                     
  8076                           ;usart.c: 157:         ptr++;
  8077  002352  4A01               	infsnz	i2uartTx@ptr^0,f,c
  8078  002354  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  8079                           
  8080                           ;usart.c: 158:     }
  8081  002356  2A04               	incf	i2uartTx@i^0,f,c
  8082  002358                     i2l2741:
  8083  002358  FFFF               	dw	65535	; assembler added errata NOP
  8084  00235A  5003               	movf	i2uartTx@length^0,w,c
  8085  00235C  5C04               	subwf	i2uartTx@i^0,w,c
  8086  00235E  A0D8               	btfss	status,0,c
  8087  002360  EFB4  F011         	goto	i2u184_41
  8088  002364  EFB7  F011         	goto	i2u184_40
  8089  002368                     i2u184_41:
  8090  002368  FFFF               	dw	65535	; assembler added errata NOP
  8091  00236A  EF98  F011         	goto	i2l2737
  8092  00236E                     i2u184_40:
  8093  00236E  FFFF               	dw	65535	; assembler added errata NOP
  8094  002370  0012               	return		;funcret
  8095  002372  FFFF               	dw	65535	; errata NOP
  8096  002374                     __end_ofi2_uartTx:
  8097                           	callstack 0
  8098                           
  8099                           	psect	rparam
  8100  0000                     
  8101                           	psect	temp
  8102  00006D                     btemp:
  8103                           	callstack 0
  8104  00006D                     	ds	1
  8105  0000                     int$flags	set	btemp
  8106  0000                     wtemp8	set	btemp+1
  8107  0000                     ttemp5	set	btemp+1
  8108  0000                     ttemp6	set	btemp+4
  8109  0000                     ttemp7	set	btemp+8
  8110                           
  8111                           	psect	idloc
  8112                           
  8113                           ;Config register IDLOC0 @ 0x200000
  8114                           ;	unspecified, using default values
  8115  200000                     	org	2097152
  8116  200000  FF                 	db	255
  8117                           
  8118                           ;Config register IDLOC1 @ 0x200001
  8119                           ;	unspecified, using default values
  8120  200001                     	org	2097153
  8121  200001  FF                 	db	255
  8122                           
  8123                           ;Config register IDLOC2 @ 0x200002
  8124                           ;	unspecified, using default values
  8125  200002                     	org	2097154
  8126  200002  FF                 	db	255
  8127                           
  8128                           ;Config register IDLOC3 @ 0x200003
  8129                           ;	unspecified, using default values
  8130  200003                     	org	2097155
  8131  200003  FF                 	db	255
  8132                           
  8133                           ;Config register IDLOC4 @ 0x200004
  8134                           ;	unspecified, using default values
  8135  200004                     	org	2097156
  8136  200004  FF                 	db	255
  8137                           
  8138                           ;Config register IDLOC5 @ 0x200005
  8139                           ;	unspecified, using default values
  8140  200005                     	org	2097157
  8141  200005  FF                 	db	255
  8142                           
  8143                           ;Config register IDLOC6 @ 0x200006
  8144                           ;	unspecified, using default values
  8145  200006                     	org	2097158
  8146  200006  FF                 	db	255
  8147                           
  8148                           ;Config register IDLOC7 @ 0x200007
  8149                           ;	unspecified, using default values
  8150  200007                     	org	2097159
  8151  200007  FF                 	db	255
  8152                           
  8153                           	psect	config
  8154                           
  8155                           ; Padding undefined space
  8156  300000                     	org	3145728
  8157  300000  FF                 	db	255
  8158                           
  8159                           ;Config register CONFIG1H @ 0x300001
  8160                           ;	Oscillator Selection bits
  8161                           ;	OSC = XT, XT oscillator
  8162                           ;	Oscillator System Clock Switch Enable bit
  8163                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  8164  300001                     	org	3145729
  8165  300001  21                 	db	33
  8166                           
  8167                           ;Config register CONFIG2L @ 0x300002
  8168                           ;	Power-up Timer Enable bit
  8169                           ;	PWRT = OFF, PWRT disabled
  8170                           ;	Brown-out Reset Enable bit
  8171                           ;	BOR = OFF, Brown-out Reset disabled
  8172                           ;	Brown-out Reset Voltage bits
  8173                           ;	BORV = 20, VBOR set to 2.0V
  8174  300002                     	org	3145730
  8175  300002  0D                 	db	13
  8176                           
  8177                           ;Config register CONFIG2H @ 0x300003
  8178                           ;	Watchdog Timer Enable bit
  8179                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8180                           ;	Watchdog Timer Postscale Select bits
  8181                           ;	WDTPS = 128, 1:128
  8182  300003                     	org	3145731
  8183  300003  0E                 	db	14
  8184                           
  8185                           ; Padding undefined space
  8186  300004                     	org	3145732
  8187  300004  FF                 	db	255
  8188                           
  8189                           ;Config register CONFIG3H @ 0x300005
  8190                           ;	CCP2 Mux bit
  8191                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  8192  300005                     	org	3145733
  8193  300005  00                 	db	0
  8194                           
  8195                           ;Config register CONFIG4L @ 0x300006
  8196                           ;	Stack Full/Underflow Reset Enable bit
  8197                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  8198                           ;	Low Voltage ICSP Enable bit
  8199                           ;	LVP = OFF, Low Voltage ICSP disabled
  8200                           ;	Background Debugger Enable bit
  8201                           ;	DEBUG = 0x1, unprogrammed default
  8202  300006                     	org	3145734
  8203  300006  80                 	db	128
  8204                           
  8205                           ; Padding undefined space
  8206  300007                     	org	3145735
  8207  300007  FF                 	db	255
  8208                           
  8209                           ;Config register CONFIG5L @ 0x300008
  8210                           ;	Code Protection bit
  8211                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  8212                           ;	Code Protection bit
  8213                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  8214                           ;	Code Protection bit
  8215                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  8216                           ;	Code Protection bit
  8217                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  8218  300008                     	org	3145736
  8219  300008  0F                 	db	15
  8220                           
  8221                           ;Config register CONFIG5H @ 0x300009
  8222                           ;	Boot Block Code Protection bit
  8223                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  8224                           ;	Data EEPROM Code Protection bit
  8225                           ;	CPD = OFF, Data EEPROM not code protected
  8226  300009                     	org	3145737
  8227  300009  C0                 	db	192
  8228                           
  8229                           ;Config register CONFIG6L @ 0x30000A
  8230                           ;	Write Protection bit
  8231                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  8232                           ;	Write Protection bit
  8233                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  8234                           ;	Write Protection bit
  8235                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  8236                           ;	Write Protection bit
  8237                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  8238  30000A                     	org	3145738
  8239  30000A  0F                 	db	15
  8240                           
  8241                           ;Config register CONFIG6H @ 0x30000B
  8242                           ;	Configuration Register Write Protection bit
  8243                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  8244                           ;	Boot Block Write Protection bit
  8245                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  8246                           ;	Data EEPROM Write Protection bit
  8247                           ;	WRTD = OFF, Data EEPROM not write protected
  8248  30000B                     	org	3145739
  8249  30000B  E0                 	db	224
  8250                           
  8251                           ;Config register CONFIG7L @ 0x30000C
  8252                           ;	Table Read Protection bit
  8253                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  8254                           ;	Table Read Protection bit
  8255                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  8256                           ;	Table Read Protection bit
  8257                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  8258                           ;	Table Read Protection bit
  8259                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  8260  30000C                     	org	3145740
  8261  30000C  0F                 	db	15
  8262                           
  8263                           ;Config register CONFIG7H @ 0x30000D
  8264                           ;	Boot Block Table Read Protection bit
  8265                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  8266  30000D                     	org	3145741
  8267  30000D  40                 	db	64
  8268                           tosu	equ	0xFFF
  8269                           tosh	equ	0xFFE
  8270                           tosl	equ	0xFFD
  8271                           stkptr	equ	0xFFC
  8272                           pclatu	equ	0xFFB
  8273                           pclath	equ	0xFFA
  8274                           pcl	equ	0xFF9
  8275                           tblptru	equ	0xFF8
  8276                           tblptrh	equ	0xFF7
  8277                           tblptrl	equ	0xFF6
  8278                           tablat	equ	0xFF5
  8279                           prodh	equ	0xFF4
  8280                           prodl	equ	0xFF3
  8281                           indf0	equ	0xFEF
  8282                           postinc0	equ	0xFEE
  8283                           postdec0	equ	0xFED
  8284                           preinc0	equ	0xFEC
  8285                           plusw0	equ	0xFEB
  8286                           fsr0h	equ	0xFEA
  8287                           fsr0l	equ	0xFE9
  8288                           wreg	equ	0xFE8
  8289                           indf1	equ	0xFE7
  8290                           postinc1	equ	0xFE6
  8291                           postdec1	equ	0xFE5
  8292                           preinc1	equ	0xFE4
  8293                           plusw1	equ	0xFE3
  8294                           fsr1h	equ	0xFE2
  8295                           fsr1l	equ	0xFE1
  8296                           bsr	equ	0xFE0
  8297                           indf2	equ	0xFDF
  8298                           postinc2	equ	0xFDE
  8299                           postdec2	equ	0xFDD
  8300                           preinc2	equ	0xFDC
  8301                           plusw2	equ	0xFDB
  8302                           fsr2h	equ	0xFDA
  8303                           fsr2l	equ	0xFD9
  8304                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    16
    Data        334
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     66     108
    BANK0           128     17     126
    BANK1           256      0     247
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 53
		 -> errString_Command(BANK0[24]), errString_Fatal(BANK1[39]), errString_PointZ(BANK1[53]), errString_Bound(BANK1[33]), 
		 -> errString_Point(BANK1[41]), errString_Reset(BANK1[40]), errString_ZEND(BANK1[41]), errString_Feed(BANK0[30]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 


Critical Paths under _main in COMRAM

    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_stepMade
    _touchTherm->_stepMade
    _touchObject->_stepMade
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _releaseObj->_stepMade
    _pickObject->_stepMade
    _moveToPoint->_stepMade
    _liftArm->_stepMade

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    _abortAll->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _main->_executeData
    _executeData->_rotateObj

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   10619
                                             12 BANK0      5     5      0
                           _clearTM0
                        _executeData
                     _getNewSequence
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                   _resetNewSequence
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim1Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim1Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    1604
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0     238
                                             20 COMRAM     3     3      0
                          _resetStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (1) _resetNewSequence                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0    6535
                                              7 BANK0      5     5      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0      34
                          _resetStep
                         _resetTherm
                        _returnTherm
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0      34
                          _resetStep
                         _resetTherm
                         _resetTouch
                        _returnTouch
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            7     7      0    3163
                                              0 BANK0      7     7      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
                          _resetStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         14     6      8    2608
                                             20 COMRAM    14     6      8
                          _resetStep
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0      34
                          _resetStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0    1059
                                             10 COMRAM     7     7      0
                           _abortAll
                         _fatalError
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _abortAll                                             0     0      0     507
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _executeData
     _getData
     _liftArm
       _resetStep
       _stepMade
     _moveToPoint
       _resetStep
       _stepCounter
       _stepMade
     _pickObject
       _stepMade
     _releaseObj
       _stepMade
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _resetStep
       _stepMade
     _touchObject
       _resetStep
       _resetTherm
       _resetTouch
       _returnTouch
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTherm
       _returnTherm
       _startADC
       _stepMade
       _stopADC
   _getNewSequence
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetNewSequence
   _resetPosition
     _resetStep
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim1Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _abortAll
     i2_printError
       i2_uartTx
   _fatalError
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F7       7       96.5%
BITBANK0            80      0       0       4        0.0%
BANK0               80     11      7E       5       98.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     42      6C       1       85.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1E1      15        0.0%
DATA                 0      0     1E1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Tue Apr 27 15:55:24 2021

                                        ___fldiv@aexp 0038  
                                        ___fldiv@bexp 0037  
                               __end_of_interruptInit 23F8  
                                        ___fldiv@sign 0030  
                                                  l90 2472  
                                                  l84 254A  
                                                 l201 1BFC  
                                                 l202 1C00  
                                                 l131 1160  
                                                 l220 21D6  
                                                 l132 12F4  
                                                 l213 1D1C  
                                                 l214 1D20  
                                                 l151 130C  
                                                 l160 0B02  
                                                 l225 21EE  
                                                 l217 21C4  
                                                 l161 0B0C  
                                                 l250 2420  
                                                 l243 2446  
                                                 l244 244C  
                                                 l236 20FA  
                                                 l165 0DEC  
                                                 l157 0E04  
                                                 l333 1556  
                                                 l182 0DAA  
                                                 l158 0ABC  
                                                 l238 212A  
                                                 l334 1550  
                                                 l335 1552  
                                                 l360 1104  
                                                 l249 241A  
                                                 l521 25E2  
                                                 l450 23E8  
                                                 l530 25F2  
                                                 l515 253C  
                                                 l451 23F4  
                                                 l603 24F0  
                                                 l612 24DE  
                                                 l380 2498  
                                                 l524 25EA  
                                                 l533 2594  
                                                 l541 24B6  
                                                 l518 252E  
                                                 l606 2520  
                                                 l615 258A  
                                                 l383 259E  
                                                 l392 2572  
                                                 l560 22F0  
                                                 l449 23D2  
                                                 l609 24CA  
                                                 l618 25BC  
                                                 l386 25FA  
                                                 l538 22D4  
                                                 l395 25A8  
                                                 l555 1E3A  
                                                 l564 2322  
                                                 l389 257E  
                                                 l398 25B2  
                                                 l585 17A2  
                                                 l588 1828  
                                                 l927 1ADA  
                                                 _isr 0008  
                                         _touchObject 1AE0  
                                                 prod 000FF3  
                                                 wreg 000FE8  
                                        ___fltol@exp1 0042  
                                         main@errCode 00FB  
                                                l1212 0A3E  
                                                l1214 0856  
                                                l1223 08AC  
                                                l1225 093C  
                                                l1217 0810  
                                                l1226 0924  
                                                l4001 0AF2  
                                                l4011 0B42  
                                                l4003 0B08  
                                                l1292 141C  
                                                l4021 0BAA  
                                                l4013 0B4E  
                                                l4005 0B16  
                                                l1285 1370  
                                                l4101 1B0A  
                                                l4031 0C0A  
                                                l4023 0BB6  
                                                l4015 0B64  
                                                l4007 0B24  
                                                l4111 1B62  
                                                l4103 1B20  
                                                l1288 1502  
                                                l4201 2190  
                                                l4041 0C70  
                                                l4025 0BD6  
                                                l4017 0B8A  
                                                l4009 0B2A  
                                                l4113 1B74  
                                                l4121 1BC0  
                                                l4105 1B2C  
                                                l4211 21EC  
                                                l4203 2198  
                                                l4051 0CC2  
                                                l4035 0C3C  
                                                l4027 0BDE  
                                                l4019 0B94  
                                                l1299 1488  
                                                l4131 1BDE  
                                                l4123 1BC6  
                                                l4107 1B3A  
                                                l4205 21AA  
                                                l4053 0CD8  
                                                l4061 0D22  
                                                l4037 0C52  
                                                l4045 0C7C  
                                                l4029 0BF4  
                                                l4221 20C0  
                                                l4133 1BE2  
                                                l4125 1BCA  
                                                l4109 1B5A  
                                                l4117 1B94  
                                                l4141 1C0E  
                                                l4301 1118  
                                                l4207 21DC  
                                                l4071 0D8C  
                                                l4063 0D38  
                                                l4055 0CE4  
                                                l4047 0C92  
                                                l4039 0C5E  
                                                l4223 20DC  
                                                l4231 2106  
                                                l4215 205A  
                                                l4135 1BF4  
                                                l4127 1BCC  
                                                l4119 1BB0  
                                                l4151 1C44  
                                                l4143 1C1C  
                                                l4311 1154  
                                                l4303 1124  
                                                l4209 21E8  
                                                l4081 0DDA  
                                                l4073 0D9E  
                                                l4057 0D04  
                                                l4049 0CB8  
                                                l4241 2448  
                                                l4233 2122  
                                                l4225 20DE  
                                                l4217 20AC  
                                                l4129 1BDA  
                                                l4161 1C98  
                                                l4153 1C50  
                                                l4145 1C1E  
                                                l4321 11B0  
                                                l4313 1174  
                                                l4305 1132  
                                                l4401 251E  
                                                l4083 0DF2  
                                                l4067 0D6A  
                                                l4059 0D0C  
                                                l4243 23FA  
                                                l4235 2126  
                                                l4227 20FC  
                                                l4219 20BA  
                                                l4091 1AE2  
                                                l4171 1CEA  
                                                l4155 1C5E  
                                                l4147 1C28  
                                                l4139 1C06  
                                                l4331 11FA  
                                                l4323 11B8  
                                                l4315 1186  
                                                l4307 1138  
                                                l4251 1D2C  
                                                l4403 24BC  
                                                l4085 0DFE  
                                                l4069 0D80  
                                                l4077 0DAA  
                                                l4237 2426  
                                                l4245 23FE  
                                                l4229 2100  
                                                l4093 1AEA  
                                                l4181 1D14  
                                                l4173 1CEE  
                                                l4157 1C7E  
                                                l4149 1C2E  
                                                l4165 1CB8  
                                                l4501 0F64  
                                                l4413 2526  
                                                l4341 1248  
                                                l4333 1208  
                                                l4325 11CA  
                                                l4317 1190  
                                                l4309 113E  
                                                l4261 1D9A  
                                                l4253 1D42  
                                                l4421 16CC  
                                                l4405 24BE  
                                                l4191 2148  
                                                l4087 0E02  
                                                l4079 0DC4  
                                                l4239 242A  
                                                l4247 241C  
                                                l4095 1AF8  
                                                l4175 1CF0  
                                                l4167 1CD4  
                                                l4159 1C86  
                                                l4511 0FD4  
                                                l4351 128C  
                                                l4343 125A  
                                                l4335 121A  
                                                l4327 11DE  
                                                l4319 119E  
                                                l4263 1DB0  
                                                l4255 1D58  
                                                l4423 16D6  
                                                l4431 1722  
                                                l4407 24C2  
                                                l4193 214E  
                                                l4185 2130  
                                                l3801 073A  
                                                l4097 1AFA  
                                                l4177 1CFE  
                                                l4169 1CE4  
                                                l4521 0FFC  
                                                l4513 0FE6  
                                                l4505 0F6E  
                                                l4281 2452  
                                                l4409 25F0  
                                                l4361 12FA  
                                                l4353 129E  
                                                l4345 1264  
                                                l4337 1222  
                                                l4329 11F0  
                                                l4265 1DC6  
                                                l4257 1D6E  
                                                l4249 1D28  
                                                l4441 17BC  
                                                l4433 173A  
                                                l4425 16E0  
                                                l4417 16B6  
                                                l4601 1536  
                                                l4275 2534  
                                                l3731 24D8  
                                                l4195 2164  
                                                l4187 2136  
                                                l3811 076A  
                                                l3803 0740  
                                                l4099 1B04  
                                                l4179 1D02  
                                                l4507 0FB6  
                                                l4291 246A  
                                                l4283 245A  
                                                l4371 23D0  
                                                l4363 1306  
                                                l4347 1272  
                                                l4339 1234  
                                                l4355 12B8  
                                                l4259 1D84  
                                                l4443 17D0  
                                                l4435 1742  
                                                l4419 16C6  
                                                l4611 1592  
                                                l4603 154A  
                                                l3725 25B8  
                                                l4197 2170  
                                                l4189 2142  
                                                l3821 07BA  
                                                l3901 19DC  
                                                l3741 25F8  
                                                l4541 10CA  
                                                l4517 0FEE  
                                                l4509 0FCC  
                                                l4381 2488  
                                                l4293 246C  
                                                l4285 245E  
                                                l4373 23E6  
                                                l4365 130A  
                                                l4357 12CE  
                                                l4349 1284  
                                                l4269 1DDC  
                                                l4445 17D4  
                                                l4437 179C  
                                                l4453 17F2  
                                                l4429 16EA  
                                                l4621 15EC  
                                                l4613 15A2  
                                                l4605 155A  
                                                l4279 2542  
                                                l3727 24D0  
                                                l4199 217E  
                                                l3735 2584  
                                                l3831 080E  
                                                l3823 07CA  
                                                l3815 077E  
                                                l3807 0754  
                                                l3911 1A34  
                                                l3903 1A0C  
                                                l3743 25A4  
                                                l4551 10F2  
                                                l4543 10D2  
                                                l4535 106E  
                                                l4527 1014  
                                                l4519 0FF4  
                                                l4383 248A  
                                                l4375 2478  
                                                l4295 246E  
                                                l4287 2462  
                                                l4359 12E2  
                                                l3751 22E2  
                                                l4447 17DC  
                                                l4439 17AC  
                                                l4391 24B2  
                                                l4631 1672  
                                                l4623 1614  
                                                l4615 15A4  
                                                l4607 1574  
                                                l3729 24D4  
                                                l3841 086C  
                                                l3833 081C  
                                                l3825 07D2  
                                                l3817 079A  
                                                l3809 076A  
                                                l3761 0632  
                                                l3921 1A66  
                                                l3905 1A0E  
                                                l3745 25AE  
                                                l3737 259A  
                                                l4553 10F8  
                                                l4545 10DA  
                                                l4537 10B0  
                                                l4529 1056  
                                                l4481 0E66  
                                                l4473 0E0C  
                                                l4385 2494  
                                                l4377 2480  
                                                l4297 2470  
                                                l4289 2466  
                                                l4369 23BE  
                                                l3753 2304  
                                                l4449 17E6  
                                                l4393 24E4  
                                                l4641 16A2  
                                                l4625 162C  
                                                l4617 15C4  
                                                l4609 1580  
                                                l4633 1676  
                                                l3843 0886  
                                                l3851 08BE  
                                                l3835 0840  
                                                l3827 07E8  
                                                l3819 07AA  
                                                l3771 0672  
                                                l3763 0634  
                                                l3931 1AA2  
                                                l3907 1A1E  
                                                l3739 2578  
                                                l3747 256C  
                                                l4539 10C2  
                                                l4491 0F12  
                                                l4483 0E7A  
                                                l4475 0E18  
                                                l4387 2496  
                                                l4379 2486  
                                                l4467 2590  
                                                l4299 110C  
                                                l4571 227A  
                                                l3755 230A  
                                                l4395 24EC  
                                                l4643 16A6  
                                                l4635 1690  
                                                l4627 1666  
                                                l4619 15E2  
                                                l3853 08D2  
                                                l3845 088C  
                                                l3837 0842  
                                                l3829 07FC  
                                                l3781 06AC  
                                                l3765 064A  
                                                l3773 067A  
                                                l3757 0614  
                                                l3933 1AB8  
                                                l3917 1A50  
                                                l3909 1A22  
                                                l3941 1328  
                                                l4493 0F22  
                                                l4485 0EB4  
                                                l4477 0E1C  
                                                l4469 25E8  
                                                l4581 22C0  
                                                l3749 22DA  
                                                l4397 2518  
                                                l4389 249E  
                                                l4637 1698  
                                                l4629 166E  
                                                l3863 0952  
                                                l3871 099E  
                                                l3855 08D6  
                                                l3847 0898  
                                                l3839 0852  
                                                l3791 06EC  
                                                l3783 06AE  
                                                l3775 068C  
                                                l3767 065E  
                                                l3759 0620  
                                                l3935 1AC8  
                                                l3927 1A80  
                                                l3919 1A5C  
                                                l3951 13B2  
                                                l3943 133A  
                                                l4831 0F8E  
                                                l4495 0F36  
                                                l4487 0EC4  
                                                l4479 0E56  
                                                l4399 251C  
                                                l4639 169E  
                                                l4591 1516  
                                                l4583 1508  
                                                l3881 0A16  
                                                l3873 09BE  
                                                l3865 095E  
                                                l3857 08E8  
                                                l3849 08AA  
                                                l3785 06C4  
                                                l3793 06F4  
                                                l3777 0694  
                                                l3769 066E  
                                                l3929 1A8E  
                                                l3961 1412  
                                                l3953 13BC  
                                                l3945 1382  
                                                l4497 0F58  
                                                l4489 0ED8  
                                                l4569 25E0  
                                                l4577 227E  
                                                l4825 1702  
                                                l4593 151A  
                                                l4585 1508  
                                                l3883 0A28  
                                                l3875 09D4  
                                                l3867 0970  
                                                l3859 091A  
                                                l3795 0706  
                                                l3787 06D8  
                                                l3779 069A  
                                                l3971 149E  
                                                l3963 1454  
                                                l3955 13CA  
                                                l3947 139E  
                                                l3939 1314  
                                                l4499 0F5C  
                                                l4579 22BE  
                                                l4827 1808  
                                                l4595 151E  
                                                l4587 150E  
                                                l3885 0A2E  
                                                l3877 09F4  
                                                l3869 099A  
                                                l3797 0722  
                                                l3789 06E8  
                                                l3981 14F0  
                                                l3973 14A4  
                                                l3965 1462  
                                                l3957 1402  
                                                l4829 1DF2  
                                                l4597 1522  
                                                l4589 1512  
                                                l3887 0A32  
                                                l3879 0A10  
                                                l3799 0732  
                                                l3895 19AC  
                                                l3975 14C8  
                                                l3967 1476  
                                                l3959 1406  
                                                l4599 152E  
                                                l3993 0A80  
                                                l3985 0A46  
                                                l3897 19C6  
                                                l3977 14DC  
                                                l3969 149C  
                                                l3995 0AAC  
                                                l3987 0A60  
                                                l3979 14EE  
                                                ?_isr 0001  
                                                l3997 0AC2  
                                                l3989 0A78  
                                                l3999 0AC6  
                                                u3000 1A4A  
                                                u3001 1A44  
                                                u3010 1A7A  
                                                u3011 1A74  
                                                u3020 1AA2  
                                                u3100 1488  
                                                u3021 1A9C  
                                                u3101 1482  
                                                _LATA 000F89  
                                                u3030 1AB6  
                                                u3110 149A  
                                                _LATB 000F8A  
                                                u3031 1AB0  
                                                u3111 1494  
                                                _LATC 000F8B  
                                                u3200 0B88  
                                                u3120 14DA  
                                                u3040 1326  
                                                _LATD 000F8C  
                                                u3201 0B82  
                                                u3121 14D4  
                                                u3041 1320  
                                                u3210 0BA8  
                                                u3130 14EC  
                                                u3050 1338  
                                                u3211 0BA2  
                                                u3131 14E6  
                                                u3051 1332  
                                                u3300 0D02  
                                                u3220 0BD4  
                                                u3140 0A5E  
                                                u3060 139C  
                                                u3301 0CFC  
                                                u3221 0BCE  
                                                u3141 0A58  
                                                u3061 1396  
                                                u3310 0D36  
                                                u3230 0C08  
                                                u3150 0A78  
                                                u3070 13FC  
                                                u3311 0D30  
                                                u3231 0C02  
                                                u3151 0A72  
                                                u3071 13F6  
                                                u3320 0D64  
                                                u3240 0C36  
                                                u3160 0AAA  
                                                u3080 144E  
                                                u3400 1B8E  
                                                u3321 0D5E  
                                                u3241 0C30  
                                                u3161 0AA4  
                                                u3081 1448  
                                                u3401 1B88  
                                                u3330 0D7E  
                                                u3250 0C50  
                                                u3170 0AF0  
                                                u3090 1474  
                                                u3410 1BAE  
                                                u3331 0D78  
                                                u3251 0C4A  
                                                u3171 0AEA  
                                                u3091 146E  
                                                u3411 1BA8  
                                                u3500 2162  
                                                u3340 0D9C  
                                                u3260 0C6E  
                                                u3180 0B40  
                                                u3420 1BC0  
                                                u3501 215C  
                                                u3341 0D96  
                                                u3261 0C68  
                                                u3181 0B3A  
                                                u3421 1BBA  
                                                u3510 218E  
                                                u3350 0DC4  
                                                u3270 0C90  
                                                u3190 0B62  
                                                u3430 1BF2  
                                                u3511 2188  
                                                u3351 0DBE  
                                                u3271 0C8A  
                                                u3191 0B5C  
                                                u3431 1BEC  
                                                u3520 21C4  
                                                u3360 0DD8  
                                                u3280 0CB6  
                                                u2800 0720  
                                                u3440 1C42  
                                                u3600 1186  
                                                u2720 2302  
                                                u3521 21BE  
                                                u3361 0DD2  
                                                u3281 0CB0  
                                                u2801 071A  
                                                u3441 1C3C  
                                                u3601 1180  
                                                u2721 22FC  
                                                u3530 21D6  
                                                u3370 0DEC  
                                                u3290 0CD6  
                                                u2810 0768  
                                                u3450 1C7C  
                                                u3610 11AE  
                                                u2730 2320  
                                                u3531 21D0  
                                                u3371 0DE6  
                                                u3291 0CD0  
                                                u2811 0762  
                                                u3451 1C76  
                                                u3611 11A8  
                                                u2731 231A  
                                                u2900 0918  
                                                u2820 07E6  
                                                u2740 0630  
                                                u3540 20F8  
                                                u3380 1B1E  
                                                u3460 1CB2  
                                                u3700 12E0  
                                                u3620 11DC  
                                                u2901 0912  
                                                u2821 07E0  
                                                u2741 062A  
                                                u3541 20F2  
                                                u3381 1B18  
                                                u3461 1CAC  
                                                u3701 12DA  
                                                u3621 11D6  
                                                u2910 0936  
                                                u2830 080C  
                                                u2750 0648  
                                                u3550 2120  
                                                u3390 1B58  
                                                u3470 1CD2  
                                                u3710 12F4  
                                                u3630 11F0  
                                                u2911 0930  
                                                u2831 0806  
                                                u2751 0642  
                                                u3551 211A  
                                                u3391 1B52  
                                                u3471 1CCC  
                                                u3711 12EE  
                                                u3631 11EA  
                                                u3560 2444  
                                                u2920 0950  
                                                u2840 083E  
                                                u2760 065C  
                                                u3480 1CE4  
                                                u3800 10EC  
                                                u3720 23CE  
                                                u3640 1218  
                                                u3561 243E  
                                                u2921 094A  
                                                u2841 0838  
                                                u2761 0656  
                                                u3481 1CDE  
                                                u3801 10E6  
                                                u3721 23C8  
                                                u3641 1212  
                                                u3570 2418  
                                                u2930 096E  
                                                u2850 086A  
                                                u2770 06AA  
                                                u3490 1D12  
                                                u3730 23E4  
                                                u3650 1246  
                                                u3810 22D2  
                                                u3571 2412  
                                                u2931 0968  
                                                u2851 0864  
                                                u2771 06A4  
                                                u3491 1D0C  
                                                u3731 23DE  
                                                u3651 1240  
                                                u3811 22CC  
                                                u2940 09BC  
                                                u2860 0884  
                                                u2780 06C2  
                                                u3660 125A  
                                                u3580 1152  
                                                u3740 1738  
                                                u3820 1548  
                                                u2941 09B6  
                                                u2861 087E  
                                                u2781 06BC  
                                                u3661 1254  
                                                u3581 114C  
                                                u3741 1732  
                                                u3821 1542  
                                                u2950 09F2  
                                                u2870 08A8  
                                                u2790 06D6  
                                                u3750 0FCA  
                                                u3670 1282  
                                                u3590 1172  
                                                u3830 1572  
                                                u2951 09EC  
                                                u2871 08A2  
                                                u2791 06D0  
                                                u3751 0FC4  
                                                u3671 127C  
                                                u3591 116C  
                                                u3831 156C  
                                                u2960 0A26  
                                                u2880 08D0  
                                                u3760 0FE6  
                                                u3680 12B8  
                                                u3840 15C2  
                                                u2961 0A20  
                                                u2881 08CA  
                                                u3761 0FE0  
                                                u3681 12B2  
                                                u3841 15BC  
                                                u2890 08E6  
                                                u2970 19C4  
                                                u3770 100E  
                                                u3690 12CC  
                                                u3850 15E2  
                                         main@newData 00FC  
                                                u2891 08E0  
                                                u2971 19BE  
                                                u3771 1008  
                                                u3691 12C6  
                                                u3851 15DC  
                                                u2980 1A00  
                                                u3780 1068  
                                                u3860 162A  
                                                u3781 1062  
                                                u3861 1624  
                                                u2990 1A32  
                                                u3790 10C0  
                                                u3870 168E  
                                                u2991 1A2C  
                                                u3791 10BA  
                                                u3871 1688  
                                                u2985 19F4  
                                                i2l81 2558  
                                                i2l87 2602  
                                                _TMR0 000FD6  
                                                _TMR2 000FCC  
                                 __end_ofi2_storeData 19AA  
                                                _main 1508  
                                                _maxX 006A  
                                                _maxY 0090  
                                __end_ofi2_printError 1F5C  
                                                fsr2h 000FDA  
                                                indf2 000FDF  
                                                fsr1l 000FE1  
                                                fsr2l 000FD9  
                                                btemp 006D  
                                                prodh 000FF4  
                                                prodl 000FF3  
                                                start 01A4  
                                     ___fldiv@new_exp 0031  
                                        ___param_bank 000000  
                                     ??_whatsTM0Limit 0001  
                                               ??_isr 000B  
                                        ?_executeData 0001  
                                     executeData@data 00F6  
                                       ___fltol@sign1 0041  
                                               ?_main 0001  
                                     __end_of___fldiv 0A44  
                                     __end_of___fltol 1AE0  
                                               i2l401 25DA  
                                               i2l404 25D0  
                                               i2l253 24FC  
                                               i2l254 24FE  
                                               i2l621 260A  
                                               i2l527 2612  
                                               i2l560 233E  
                                               i2l624 25C6  
                                               i2l474 018C  
                                               i2l555 1F56  
                                               i2l627 2566  
                                               i2l564 2370  
                                               i2l585 191E  
                                               i2l588 19A4  
                                rotateObj@rotSequence 0080  
                                               _SPBRG 000FAF  
                                               _TRISA 000F92  
                                               _TRISB 000F93  
                                               _TRISC 000F94  
                                               _TRISD 000F95  
                                               _TXREG 000FAD  
                                     __end_of_getData 2540  
                                     i2storeData@data 000A  
                                     __end_of_initADC 249C  
                                        ?_newSequence 0001  
                                     __end_of_liftArm 21F2  
                                     __end_of_readSeq 25EE  
                                        stepMade@temp 0014  
                                               tablat 000FF5  
                                      i2uartTx@length 0003  
                                     __end_of_stopADC 25FE  
                                               ttemp5 006E  
                                               ttemp6 0071  
                                               ttemp7 0075  
                                               status 000FD8  
                                               wtemp8 006E  
                                    __end_ofi2_uartTx 2374  
                                       ?_increaseStep 0001  
                                     __initialization 21F2  
                              __size_of_initPinMotors 0026  
                                        __end_of_main 16B2  
                            resetPosition@keepMovingX 0015  
                            resetPosition@keepMovingY 0016  
                            resetPosition@keepMovingZ 0017  
                                              ??_main 00F9  
                                       __activetblptr 000002  
                                         i2_storeData 182E  
                                         isr@tm0Count 005A  
                                        ?_setThermRel 0001  
                                              _ADRESH 000FC4  
                                              _ADRESL 000FC3  
                                        ?_moveToPoint 0015  
                                              i2l2201 25CC  
                                              i2l2203 2610  
                                              i2l2211 25C2  
                                              i2l3041 1E5E  
                                              i2l2209 2608  
                                              i2l3051 1ECC  
                                              i2l3043 1E74  
                                              i2l3053 1EE2  
                                              i2l3045 1E8A  
                                              i2l3037 1E44  
                                              i2l3047 1EA0  
                                              i2l3039 1E48  
                                              i2l3049 1EB6  
                                              i2l3057 1EF8  
                                              i2l3153 24F6  
                                              i2l3401 1958  
                                              i2l3403 1962  
                                              i2l3501 006E  
                                              i2l2199 25D6  
                                              i2l3407 196E  
                                              i2l3511 00A4  
                                              i2l3503 0086  
                                              i2l3521 00F2  
                                              i2l3513 00C2  
                                              i2l3505 008A  
                                              i2l3371 1832  
                                              i2l3531 011C  
                                              i2l3523 00F6  
                                              i2l3515 00CA  
                                              i2l3507 009E  
                                              i2l2741 2358  
                                              i2l3373 1842  
                                              i2l3541 0180  
                                              i2l3533 0142  
                                              i2l3525 00FA  
                                              i2l3517 00CC  
                                              i2l3509 00A0  
                                              i2l2735 2328  
                                              i2l3391 1918  
                                              i2l3375 1848  
                                              i2l3383 1866  
                                              i2l3543 0186  
                                              i2l3535 014E  
                                              i2l3519 00E0  
                                              i2l3527 0100  
                                              i2l2737 2330  
                                              i2l3369 255E  
                                              i2l3393 1928  
                                              i2l3377 1852  
                                              i2l3385 189E  
                                              i2l3537 0168  
                                              i2l3529 0114  
                                              i2l2739 2352  
                                              i2l1891 2550  
                                              i2l3395 1938  
                                              i2l3387 18B6  
                                              i2l3379 185C  
                                              i2l3539 016C  
                                              i2l3491 004E  
                                              i2l3483 001C  
                                              i2l3397 194C  
                                              i2l3389 18BE  
                                              i2l3493 0050  
                                              i2l3485 002E  
                                              i2l1895 2600  
                                              i2l3399 1950  
                                              i2l3495 0054  
                                              i2l3487 0030  
                                              i2l3489 0032  
                                              i2l3497 0058  
                                              i2l3499 006C  
                                              i2l4833 187E  
                                              i2l4835 1984  
                                              i2l4837 1F0E  
                                              _RCREG1 000FAE  
                                        ?_setTouchRel 0001  
                                    __end_of_abortAll 2506  
                                    __end_of___xxtofl 1508  
                                    __end_of_clearTM0 254E  
                                    _errString_PointZ 0100  
                                      ??_increaseStep 0001  
                                    __end_of_maxFeedX 0611  
                                    __end_of_maxFeedY 0610  
                                           ??___fldiv 0028  
                                           ??___fltol 003D  
                                    __end_of_tim0Init 24F4  
                                    __end_of_tim1Init 2524  
                                    __end_of_tim2Init 24CE  
                                              clear_0 2258  
                                              clear_1 2264  
                                           ??_getData 0014  
                                              _uartTx 22D8  
                                           ??_initADC 0012  
                                           ??_liftArm 0015  
                                           ??_readSeq 0012  
                                        __pdataCOMRAM 005E  
                               __end_of_resetPosition 1310  
                                        __mediumconst 0000  
                                              tblptrh 000FF7  
                                              tblptrl 000FF6  
                                              tblptru 000FF8  
                                        ?_returnTherm 0012  
                                    __end_of_startADC 25A2  
                                    __end_of_stepMade 24E2  
                                       _initPinMotors 2450  
                                        ?_returnTouch 0012  
                                           ??_stopADC 0012  
                               __size_ofi2_printError 011C  
                                    __end_of_writeTM0 255C  
                           __size_of_resetNewSequence 000A  
                                        ___xxtofl@arg 001C  
                                        ___xxtofl@exp 001B  
                                        ___xxtofl@val 0012  
                                          __accesstop 0080  
                             __end_of__initialization 226A  
                                        _dataSequence 00D1  
                                       ___rparam_used 000001  
                                          ___fltol@f1 0039  
                                        ?_stepCounter 0012  
                                         i2uartTx@ptr 0001  
                                      __pcstackCOMRAM 0001  
                                        __newSequence 0056  
                                        __pidataBANK0 2374  
                                        __pidataBANK1 1F5C  
                                     isr@single_cycle 0048  
                                __size_of_executeData 0300  
                                        i2_printError 1E40  
                                        ?_touchObject 0001  
                                      _errString_ZEND 015E  
                                      _errString_Feed 0092  
                                      ?_initPinMotors 0001  
                                           ?i2_uartTx 0001  
                                          __pbssBANK0 00C8  
                                __size_of_newSequence 0008  
                                          _feeder1Pos 060D  
                                          _feeder2Pos 060B  
                                          _feeder3Pos 0609  
                             __size_of_getNewSequence 000E  
                                          _fatalError 260E  
                                  __size_of_reduceSeq 0008  
                                  __size_of_retPeriod 000E  
                                      _touch_pressure 0607  
                                  __size_of_shiftData 0060  
                                  __size_of_resetStep 000A  
                                             _ADC_res 004A  
                                             ?_uartTx 0012  
                                           ?_abortAll 0001  
                                           ?___xxtofl 0012  
                                __end_of_increaseStep 260E  
                                           ?_clearTM0 0001  
                                          ??i2_uartTx 0004  
                                  __size_of_rotateObj 00DA  
                                   _errString_Command 00B0  
                                  __size_of_usartInit 001E  
                              __size_of_interruptInit 003C  
                                __size_of_setThermRel 000A  
                                  __size_of_storeData 017C  
                                           ?_tim0Init 0001  
                                           ?_tim1Init 0001  
                                           ?_tim2Init 0012  
                                __size_of_moveToPoint 03C6  
                                storeData@receivedMex 00C8  
                                     _newSequenceData 00E5  
                                __size_of_setTouchRel 000A  
                                             __Hparam 0000  
                                             __Lparam 0000  
                              __end_of_touch_pressure 0609  
                                             ___fldiv 0612  
                                           ?_startADC 0001  
                                           ?_stepMade 0012  
                                             ___fltol 19AA  
                                        __psmallconst 0600  
                                             __pcinit 21F2  
                               __end_of_whatsTM0Limit 2606  
                                             _getData 2532  
                                             __ramtop 0600  
                                           ?_writeTM0 0001  
                                          _pickObject 2424  
                                             __ptext0 1508  
                                             __ptext1 249C  
                                             __ptext2 24BA  
                                             __ptext3 2516  
                                             __ptext4 24E2  
                                             __ptext5 16B2  
                                             __ptext6 1D24  
                                             __ptext7 22D8  
                                             __ptext8 2278  
                                             __ptext9 110A  
                                     __size_of_uartTx 004E  
                                           _T0CONbits 000FD5  
                                             _initADC 2476  
                                           _T1CONbits 000FCD  
                                     ??_initPinMotors 0012  
                                             _liftArm 212E  
                                           _T2CONbits 000FCA  
                                          ??_abortAll 0008  
                                             _readSeq 25E6  
                                        __size_of_isr 019C  
                                          ??___xxtofl 0016  
                                        ?i2_storeData 0001  
                                          ??_clearTM0 0012  
                                          _motCounter 005E  
                                             _pwmStep 0053  
                                             _stopADC 25F6  
                                   __end_of_reduceSeq 25E6  
                                   __end_of_retPeriod 256A  
                                          _releaseObj 23F8  
                                __size_of_returnTherm 000C  
                                end_of_initialization 226A  
                                __size_of_returnTouch 000C  
                                    _resetNewSequence 258E  
                                    rotateObj@totStep 00F0  
                                   __end_of_shiftData 22D8  
                                             isr@temp 0011  
                                   __end_of_resetStep 25C0  
                                          ??_tim0Init 0012  
                                       __Lmediumconst 0000  
                                          ??_tim1Init 0012  
                                          ??_tim2Init 0014  
                                    storeData@command 0054  
                                    storeData@counter 0055  
                                          _resetTherm 25AC  
                                          _resetTouch 25A2  
                                             uartTx@i 0015  
                                         ?_fatalError 0001  
                                           _RCSTAbits 000FAB  
                                             postdec1 000FE5  
                                             postdec2 000FDD  
                                   __end_of_rotateObj 212E  
                                             postinc0 000FEE  
                                             postinc1 000FE6  
                                             postinc2 000FDE  
                                          ??_startADC 0012  
                                          ??_stepMade 0014  
                                __size_of_stepCounter 000C  
                                       _interruptInit 23BC  
                                   __end_of_usartInit 24BA  
                                   __end_of_storeData 182E  
                          __end_ofrotateObj@stepAngle 0605  
                                          ??_writeTM0 0001  
                                           _PORTDbits 000F83  
                                          _printError 1D24  
                                           _PORTEbits 000F84  
                                 i2printError@errCode 0007  
                                          _toggleStep 25C0  
                                       ___xxtofl@sign 001A  
                                           _TRISCbits 000F94  
                                           _TRISDbits 000F95  
                                           _TRISEbits 000F96  
                                         ___fldiv@grs 0033  
                                         ___fldiv@rem 002C  
                                __size_of_touchObject 0124  
                                          _stepToggle 0052  
                                          _touchTherm 1C04  
                                           _TXSTAbits 000FAC  
                                      _getNewSequence 2524  
                                      ?_interruptInit 0001  
                                       __pidataCOMRAM 2506  
                               __size_of_increaseStep 0008  
                                         ?_pickObject 0001  
                                         __fatalError 0057  
                                      __end_of_uartTx 2326  
                                       moveToPoint@x1 0015  
                                       moveToPoint@x2 0019  
                                       moveToPoint@y1 0017  
                                       moveToPoint@y2 001B  
                                 start_initialization 21F2  
                                           i2uartTx@i 0004  
                                         __end_of_isr 01A4  
                                 __size_of_fatalError 0008  
                                         ?_releaseObj 0001  
                                   __size_ofi2_uartTx 004E  
                              __end_of_getNewSequence 2532  
                                     _errString_Fatal 01AF  
                                     _errString_Bound 01D6  
                                         ?_resetTherm 0001  
                                     _errString_Reset 0187  
                                         ?_resetTouch 0001  
                                     _errString_Point 0135  
                                        _increaseStep 2606  
                              __size_of_resetPosition 0206  
                                       ??_executeData 00F4  
                                         __pdataBANK0 0080  
                                         __pdataBANK1 0100  
                                         _dataCounter 0058  
                                            ??_uartTx 0015  
                              moveToPoint@keepMovingX 0021  
                              moveToPoint@keepMovingY 0022  
                                         ?_printError 0001  
                                           ___fldiv@a 0024  
                                           ___fldiv@b 0020  
                                      _therm_pressure 0605  
                                         ?_toggleStep 0001  
                                         __pbssCOMRAM 0043  
                                       __pcstackBANK0 00ED  
                                       ??_newSequence 0012  
                                   __size_of_abortAll 0012  
                                   __size_of___xxtofl 01F8  
                                __size_ofi2_storeData 017C  
                                   __size_of_clearTM0 000E  
                                     ?_getNewSequence 0012  
                                         ?_touchTherm 0001  
                                 __size_of_pickObject 002C  
                                  executeData@errCode 00F8  
                                   __size_of_tim0Init 0012  
                                   __size_of_tim1Init 000E  
                                   __size_of_tim2Init 0014  
                                     ??_interruptInit 0012  
                                           __pintcode 0008  
                                            ?___fldiv 0020  
                                            ?___fltol 0039  
                            __end_of_resetNewSequence 2598  
                                 __size_of_releaseObj 002C  
                                       storeData@data 001B  
                                            ?_getData 0012  
                                   __size_of_startADC 000A  
                                   __size_of_stepMade 0014  
                              __end_of_therm_pressure 0607  
                                            ?_initADC 0001  
                                         __smallconst 0600  
                                            ?_liftArm 0001  
                                            ?_readSeq 0001  
                                   __size_of_writeTM0 000E  
                                 __end_of_executeData 110A  
                                          shiftData@i 0014  
                                 __size_of_resetTherm 000A  
                                           _newFeeder 004C  
                                       _resetPosition 110A  
                                 __size_of_resetTouch 000A  
                                       ??_setThermRel 0001  
                                            ?_stopADC 0001  
                                       ??_moveToPoint 001D  
                                       ??_setTouchRel 0001  
                                 __end_of_newSequence 25F6  
                                           _reduceSeq 25DE  
                                            _LATAbits 000F89  
                                            _LATBbits 000F8A  
                                           _retPeriod 255C  
                                            _LATCbits 000F8B  
                                            _LATDbits 000F8C  
                                 __size_of_printError 011C  
                                            _IPR1bits 000F9F  
                                            _PIE1bits 000F9D  
                                           _shiftData 2278  
                                            i2u260_40 002C  
                                            i2u260_41 0026  
                                           _resetStep 25B6  
                                            i2u253_40 18B4  
                                            i2u261_40 004C  
                                            i2u253_41 18AE  
                                            i2u261_41 0046  
                                            i2u270_40 0166  
                                            i2u262_40 006A  
                                            i2u270_41 0160  
                                            i2u262_41 0064  
                                            i2u183_40 2350  
                                            i2u271_40 017E  
                                            i2u263_40 0084  
                                            i2u183_41 234A  
                                            i2u271_41 0178  
                                            i2u263_41 007E  
                                            i2u184_40 236E  
                                            i2u264_40 009C  
                                            i2u184_41 2368  
                                            i2u264_41 0096  
                                            i2u265_40 00C0  
                                            i2u265_41 00BA  
                                            _PIR1bits 000F9E  
                                            i2u266_40 00DE  
                                            i2u266_41 00D8  
                                            i2u267_40 00F0  
                                            i2u267_41 00EA  
                                            i2u268_40 0112  
                                            i2u268_41 010C  
                                            i2u269_40 0140  
                                            i2u269_41 013A  
                                 __size_of_toggleStep 000A  
                                        ??_fatalError 0001  
                                           _posVector 0043  
                                            _RCONbits 000FD0  
                                           _therm_rel 005B  
                                           _pwmPeriod 0046  
                                           _rotateObj 2054  
                                          _ADCON0bits 000FC2  
                                          _ADCON1bits 000FC1  
                                 __size_of_touchTherm 0120  
                                           _usartInit 249C  
                                           _touch_rel 005C  
                                  __end_of_feeder1Pos 060F  
                                  __end_of_feeder2Pos 060D  
                                  __end_of_feeder3Pos 060B  
                                           _storeData 16B2  
                                      ?_resetPosition 0001  
                               __end_of_initPinMotors 2476  
                                       ??_returnTherm 0014  
                                       ??_returnTouch 0014  
                                            i2_uartTx 2326  
                                           copy_data0 2206  
                                           copy_data1 2226  
                                           copy_data2 2246  
                                  __end_of_fatalError 2616  
                                  rotateObj@stepAngle 0601  
                                          ?_reduceSeq 0001  
                                          ?_retPeriod 0001  
                                          rotateObj@i 00F2  
                              __size_of_whatsTM0Limit 0008  
                                 __end_of_setThermRel 25DE  
                                 __end_of_moveToPoint 0E0A  
                                   printError@errCode 0018  
                                          ?_shiftData 0001  
                                       ??_stepCounter 0014  
                                            __Hrparam 0000  
                                          ?_resetStep 0001  
                                 __end_of_setTouchRel 25D4  
                                            __Lrparam 0000  
                                    __size_of___fldiv 0432  
                                    __size_of___fltol 0136  
                                         _executeData 0E0A  
                                        ??_pickObject 0015  
                                          ?_rotateObj 0001  
                            moveToPoint@MOT1Direction 001F  
                                       ?i2_printError 0001  
                                    __size_of_getData 000E  
                            moveToPoint@MOT2Direction 0020  
                                       ??_touchObject 0015  
                                            _abortAll 24F4  
                                          ?_usartInit 0001  
                                    __size_of_initADC 0026  
                                            ___xxtofl 1310  
                                    __size_of_liftArm 00C4  
                                          ?_storeData 0001  
                                            _clearTM0 2540  
                                    __size_of_readSeq 0008  
                                  storeData@mexLength 006C  
                                            _tm0Error 0050  
                                            _tm0Limit 005D  
                                         _newSequence 25EE  
                                            __ptext10 258E  
                                            __ptext11 25DE  
                                            __ptext20 256A  
                                            __ptext12 25E6  
                                            __ptext21 1AE0  
                                            __ptext13 25EE  
                                            __ptext30 0612  
                                            __ptext22 25F6  
                                            __ptext14 23BC  
                                            __ptext31 23F8  
                                            __ptext23 2598  
                                            __ptext15 2450  
                                            __ptext32 2424  
                                            __ptext24 2576  
                                            __ptext16 2476  
                                            __ptext41 182E  
                                            __ptext33 0A44  
                                            __ptext25 25A2  
                                            __ptext17 2524  
                                            __ptext50 24F4  
                                            __ptext42 254E  
                                            __ptext34 2582  
                                            __ptext26 25AC  
                                            __ptext18 0E0A  
                                            __ptext51 1E40  
                                            __ptext43 25FE  
                                            __ptext35 212E  
                                            __ptext27 2054  
                                            __ptext19 1C04  
                                            __ptext52 2326  
                                            __ptext44 25C0  
                                            __ptext36 24CE  
                                            __ptext28 1310  
                                            __ptext45 25CA  
                                            __ptext37 25B6  
                                            __ptext29 19AA  
                                            __ptext46 25D4  
                                            __ptext38 2532  
                                            __ptext47 255C  
                                            __ptext39 2540  
                                            __ptext48 2606  
                                            __ptext49 260E  
                                        ??_releaseObj 0015  
                                    __size_of_stopADC 0008  
                                            _maxFeedX 0610  
                                            _maxFeedY 060F  
                                 __end_of_returnTherm 2576  
                                 __end_of_returnTouch 2582  
                                            _tim0Init 24E2  
                                            _tim1Init 2516  
                                            _tim2Init 24BA  
                                       __size_of_main 01AA  
                                  __end_of_pickObject 2450  
                                        ??_resetTherm 0012  
                                        ??_resetTouch 0012  
                                           uartTx@ptr 0012  
                                            _rotAngle 004E  
                                     isr@completeStep 0059  
                                            int$flags 006D  
                                            _startADC 2598  
                                            _stepMade 24CE  
                                            _stepMot1 008C  
                                            _stepMot2 0088  
                                            _stepMot3 0084  
                                 __end_of_stepCounter 258E  
                                   rotateObj@rotAngle 00EF  
                                      ??i2_printError 0005  
                                  __end_of_releaseObj 2424  
                                            _writeTM0 254E  
                                        ??_printError 0016  
                                       _whatsTM0Limit 25FE  
                                     ??_resetPosition 0015  
                                  tim2Init@_pwmPeriod 0012  
                                          _INTCONbits 000FF2  
                                        ??_toggleStep 0001  
                                    ??_getNewSequence 0014  
                                  __end_of_resetTherm 25B6  
                                  __end_of_resetTouch 25AC  
                                         _setThermRel 25D4  
                                        uartTx@length 0014  
                                         _moveToPoint 0A44  
                                 __end_of_touchObject 1C04  
                                            intlevel2 2616  
                                        ??_touchTherm 0015  
                                         _setTouchRel 25CA  
                                         ??_reduceSeq 0012  
                                         ??_retPeriod 0003  
                                          _RCSTA1bits 000FAB  
                                  __end_of_printError 1E40  
                                         ??_shiftData 0012  
                                         ??_resetStep 0012  
                                  __end_of_toggleStep 25CA  
                                   ?_resetNewSequence 0001  
                                      ?_whatsTM0Limit 0001  
                                         ??_rotateObj 00ED  
                                  ??_resetNewSequence 0012  
                                  __end_of_touchTherm 1D24  
                                         ??_usartInit 0012  
                                       ??i2_storeData 0008  
                                         ??_storeData 0019  
                                         _returnTherm 256A  
                                         _returnTouch 2576  
                                         _stepCounter 2582  
