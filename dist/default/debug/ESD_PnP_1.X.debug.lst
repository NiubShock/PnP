

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Sat May 01 07:26:24 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    76                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    77  0000                     
    78                           ; Version 2.20
    79                           ; Generated 12/02/2020 GMT
    80                           ; 
    81                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    82                           ; All rights reserved.
    83                           ; 
    84                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    85                           ; 
    86                           ; Redistribution and use in source and binary forms, with or without modification, are
    87                           ; permitted provided that the following conditions are met:
    88                           ; 
    89                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    90                           ;        conditions and the following disclaimer.
    91                           ; 
    92                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    93                           ;        of conditions and the following disclaimer in the documentation and/or other
    94                           ;        materials provided with the distribution.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC18F452 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     
   113                           	psect	idataCOMRAM
   114  0026C2                     __pidataCOMRAM:
   115                           	callstack 0
   116                           
   117                           ;initializer for _motCounter
   118  0026C2  00                 	db	0
   119  0026C3  01                 	db	1
   120  0026C4  00                 	db	0
   121  0026C5  01                 	db	1
   122  0026C6  00                 	db	0
   123  0026C7  01                 	db	1
   124                           
   125                           ;initializer for _maxY
   126  0026C8  0065               	dw	101
   127                           
   128                           ;initializer for _maxX
   129  0026CA  0065               	dw	101
   130                           
   131                           ;initializer for storeData@mexLength
   132  0026CC  05                 	db	5
   133                           
   134                           	psect	idataBANK0
   135  0024A0                     __pidataBANK0:
   136                           	callstack 0
   137                           
   138                           ;initializer for rotateObj@rotSequence
   139  0024A0  24                 	db	36
   140  0024A1  0C                 	db	12
   141  0024A2  18                 	db	24
   142  0024A3  30                 	db	48
   143                           
   144                           ;initializer for _stepMot3
   145  0024A4  09                 	db	9
   146  0024A5  03                 	db	3
   147  0024A6  06                 	db	6
   148  0024A7  0C                 	db	12
   149                           
   150                           ;initializer for _stepMot2
   151  0024A8  11                 	db	17
   152  0024A9  05                 	db	5
   153  0024AA  0C                 	db	12
   154  0024AB  18                 	db	24
   155                           
   156                           ;initializer for _stepMot1
   157  0024AC  22                 	db	34
   158  0024AD  06                 	db	6
   159  0024AE  0C                 	db	12
   160  0024AF  28                 	db	40
   161                           
   162                           ;initializer for _errString_Feed
   163  0024B0  45                 	db	69
   164  0024B1  72                 	db	114
   165  0024B2  72                 	db	114
   166  0024B3  6F                 	db	111
   167  0024B4  72                 	db	114
   168  0024B5  2C                 	db	44
   169  0024B6  20                 	db	32
   170  0024B7  66                 	db	102
   171  0024B8  65                 	db	101
   172  0024B9  65                 	db	101
   173  0024BA  64                 	db	100
   174  0024BB  20                 	db	32
   175  0024BC  6C                 	db	108
   176  0024BD  69                 	db	105
   177  0024BE  6E                 	db	110
   178  0024BF  65                 	db	101
   179  0024C0  20                 	db	32
   180  0024C1  6E                 	db	110
   181  0024C2  6F                 	db	111
   182  0024C3  74                 	db	116
   183  0024C4  20                 	db	32
   184  0024C5  64                 	db	100
   185  0024C6  65                 	db	101
   186  0024C7  66                 	db	102
   187  0024C8  69                 	db	105
   188  0024C9  6E                 	db	110
   189  0024CA  65                 	db	101
   190  0024CB  64                 	db	100
   191  0024CC  0A                 	db	10
   192  0024CD  00                 	db	0
   193                           
   194                           ;initializer for _errString_Command
   195  0024CE  43                 	db	67
   196  0024CF  6F                 	db	111
   197  0024D0  6D                 	db	109
   198  0024D1  6D                 	db	109
   199  0024D2  61                 	db	97
   200  0024D3  6E                 	db	110
   201  0024D4  64                 	db	100
   202  0024D5  20                 	db	32
   203  0024D6  6E                 	db	110
   204  0024D7  6F                 	db	111
   205  0024D8  74                 	db	116
   206  0024D9  20                 	db	32
   207  0024DA  72                 	db	114
   208  0024DB  65                 	db	101
   209  0024DC  63                 	db	99
   210  0024DD  6F                 	db	111
   211  0024DE  67                 	db	103
   212  0024DF  6E                 	db	110
   213  0024E0  69                 	db	105
   214  0024E1  7A                 	db	122
   215  0024E2  65                 	db	101
   216  0024E3  64                 	db	100
   217  0024E4  0A                 	db	10
   218  0024E5  00                 	db	0
   219                           
   220                           	psect	idataBANK1
   221  002168                     __pidataBANK1:
   222                           	callstack 0
   223                           
   224                           ;initializer for _errString_PointZ
   225  002168  45                 	db	69
   226  002169  72                 	db	114
   227  00216A  72                 	db	114
   228  00216B  6F                 	db	111
   229  00216C  72                 	db	114
   230  00216D  2C                 	db	44
   231  00216E  20                 	db	32
   232  00216F  74                 	db	116
   233  002170  69                 	db	105
   234  002171  6D                 	db	109
   235  002172  65                 	db	101
   236  002173  20                 	db	32
   237  002174  65                 	db	101
   238  002175  78                 	db	120
   239  002176  63                 	db	99
   240  002177  65                 	db	101
   241  002178  65                 	db	101
   242  002179  64                 	db	100
   243  00217A  65                 	db	101
   244  00217B  64                 	db	100
   245  00217C  20                 	db	32
   246  00217D  74                 	db	116
   247  00217E  6F                 	db	111
   248  00217F  20                 	db	32
   249  002180  72                 	db	114
   250  002181  65                 	db	101
   251  002182  61                 	db	97
   252  002183  63                 	db	99
   253  002184  68                 	db	104
   254  002185  20                 	db	32
   255  002186  74                 	db	116
   256  002187  68                 	db	104
   257  002188  65                 	db	101
   258  002189  20                 	db	32
   259  00218A  65                 	db	101
   260  00218B  6E                 	db	110
   261  00218C  64                 	db	100
   262  00218D  20                 	db	32
   263  00218E  6F                 	db	111
   264  00218F  66                 	db	102
   265  002190  20                 	db	32
   266  002191  74                 	db	116
   267  002192  68                 	db	104
   268  002193  65                 	db	101
   269  002194  20                 	db	32
   270  002195  5A                 	db	90
   271  002196  20                 	db	32
   272  002197  41                 	db	65
   273  002198  78                 	db	120
   274  002199  69                 	db	105
   275  00219A  73                 	db	115
   276  00219B  0A                 	db	10
   277  00219C  00                 	db	0
   278                           
   279                           ;initializer for _errString_Point
   280  00219D  45                 	db	69
   281  00219E  72                 	db	114
   282  00219F  72                 	db	114
   283  0021A0  6F                 	db	111
   284  0021A1  72                 	db	114
   285  0021A2  2C                 	db	44
   286  0021A3  20                 	db	32
   287  0021A4  74                 	db	116
   288  0021A5  69                 	db	105
   289  0021A6  6D                 	db	109
   290  0021A7  65                 	db	101
   291  0021A8  20                 	db	32
   292  0021A9  65                 	db	101
   293  0021AA  78                 	db	120
   294  0021AB  63                 	db	99
   295  0021AC  65                 	db	101
   296  0021AD  65                 	db	101
   297  0021AE  64                 	db	100
   298  0021AF  65                 	db	101
   299  0021B0  64                 	db	100
   300  0021B1  20                 	db	32
   301  0021B2  74                 	db	116
   302  0021B3  6F                 	db	111
   303  0021B4  20                 	db	32
   304  0021B5  72                 	db	114
   305  0021B6  65                 	db	101
   306  0021B7  61                 	db	97
   307  0021B8  63                 	db	99
   308  0021B9  68                 	db	104
   309  0021BA  20                 	db	32
   310  0021BB  74                 	db	116
   311  0021BC  68                 	db	104
   312  0021BD  65                 	db	101
   313  0021BE  20                 	db	32
   314  0021BF  70                 	db	112
   315  0021C0  6F                 	db	111
   316  0021C1  69                 	db	105
   317  0021C2  6E                 	db	110
   318  0021C3  74                 	db	116
   319  0021C4  0A                 	db	10
   320  0021C5  00                 	db	0
   321                           
   322                           ;initializer for _errString_ZEND
   323  0021C6  45                 	db	69
   324  0021C7  72                 	db	114
   325  0021C8  72                 	db	114
   326  0021C9  6F                 	db	111
   327  0021CA  72                 	db	114
   328  0021CB  2C                 	db	44
   329  0021CC  20                 	db	32
   330  0021CD  6E                 	db	110
   331  0021CE  6F                 	db	111
   332  0021CF  20                 	db	32
   333  0021D0  6F                 	db	111
   334  0021D1  62                 	db	98
   335  0021D2  6A                 	db	106
   336  0021D3  65                 	db	101
   337  0021D4  63                 	db	99
   338  0021D5  74                 	db	116
   339  0021D6  20                 	db	32
   340  0021D7  72                 	db	114
   341  0021D8  65                 	db	101
   342  0021D9  6C                 	db	108
   343  0021DA  65                 	db	101
   344  0021DB  76                 	db	118
   345  0021DC  61                 	db	97
   346  0021DD  74                 	db	116
   347  0021DE  65                 	db	101
   348  0021DF  64                 	db	100
   349  0021E0  20                 	db	32
   350  0021E1  61                 	db	97
   351  0021E2  6C                 	db	108
   352  0021E3  6F                 	db	111
   353  0021E4  6E                 	db	110
   354  0021E5  67                 	db	103
   355  0021E6  20                 	db	32
   356  0021E7  5A                 	db	90
   357  0021E8  20                 	db	32
   358  0021E9  41                 	db	65
   359  0021EA  78                 	db	120
   360  0021EB  69                 	db	105
   361  0021EC  73                 	db	115
   362  0021ED  0A                 	db	10
   363  0021EE  00                 	db	0
   364                           
   365                           ;initializer for _errString_Reset
   366  0021EF  45                 	db	69
   367  0021F0  72                 	db	114
   368  0021F1  72                 	db	114
   369  0021F2  6F                 	db	111
   370  0021F3  72                 	db	114
   371  0021F4  2C                 	db	44
   372  0021F5  20                 	db	32
   373  0021F6  74                 	db	116
   374  0021F7  69                 	db	105
   375  0021F8  6D                 	db	109
   376  0021F9  65                 	db	101
   377  0021FA  20                 	db	32
   378  0021FB  65                 	db	101
   379  0021FC  78                 	db	120
   380  0021FD  63                 	db	99
   381  0021FE  65                 	db	101
   382  0021FF  65                 	db	101
   383  002200  64                 	db	100
   384  002201  65                 	db	101
   385  002202  64                 	db	100
   386  002203  20                 	db	32
   387  002204  74                 	db	116
   388  002205  6F                 	db	111
   389  002206  20                 	db	32
   390  002207  72                 	db	114
   391  002208  65                 	db	101
   392  002209  73                 	db	115
   393  00220A  65                 	db	101
   394  00220B  74                 	db	116
   395  00220C  20                 	db	32
   396  00220D  70                 	db	112
   397  00220E  6F                 	db	111
   398  00220F  73                 	db	115
   399  002210  69                 	db	105
   400  002211  74                 	db	116
   401  002212  69                 	db	105
   402  002213  6F                 	db	111
   403  002214  6E                 	db	110
   404  002215  0A                 	db	10
   405  002216  00                 	db	0
   406                           
   407                           ;initializer for _errString_Fatal
   408  002217  46                 	db	70
   409  002218  61                 	db	97
   410  002219  74                 	db	116
   411  00221A  61                 	db	97
   412  00221B  6C                 	db	108
   413  00221C  20                 	db	32
   414  00221D  45                 	db	69
   415  00221E  72                 	db	114
   416  00221F  72                 	db	114
   417  002220  6F                 	db	111
   418  002221  72                 	db	114
   419  002222  2C                 	db	44
   420  002223  20                 	db	32
   421  002224  70                 	db	112
   422  002225  6C                 	db	108
   423  002226  65                 	db	101
   424  002227  61                 	db	97
   425  002228  73                 	db	115
   426  002229  65                 	db	101
   427  00222A  20                 	db	32
   428  00222B  72                 	db	114
   429  00222C  65                 	db	101
   430  00222D  73                 	db	115
   431  00222E  65                 	db	101
   432  00222F  74                 	db	116
   433  002230  20                 	db	32
   434  002231  74                 	db	116
   435  002232  68                 	db	104
   436  002233  65                 	db	101
   437  002234  20                 	db	32
   438  002235  64                 	db	100
   439  002236  65                 	db	101
   440  002237  76                 	db	118
   441  002238  69                 	db	105
   442  002239  63                 	db	99
   443  00223A  65                 	db	101
   444  00223B  21                 	db	33
   445  00223C  0A                 	db	10
   446  00223D  00                 	db	0
   447                           
   448                           ;initializer for _errString_Bound
   449  00223E  45                 	db	69
   450  00223F  72                 	db	114
   451  002240  72                 	db	114
   452  002241  6F                 	db	111
   453  002242  72                 	db	114
   454  002243  2C                 	db	44
   455  002244  20                 	db	32
   456  002245  70                 	db	112
   457  002246  6F                 	db	111
   458  002247  69                 	db	105
   459  002248  6E                 	db	110
   460  002249  74                 	db	116
   461  00224A  20                 	db	32
   462  00224B  6F                 	db	111
   463  00224C  75                 	db	117
   464  00224D  74                 	db	116
   465  00224E  73                 	db	115
   466  00224F  69                 	db	105
   467  002250  64                 	db	100
   468  002251  65                 	db	101
   469  002252  20                 	db	32
   470  002253  62                 	db	98
   471  002254  6F                 	db	111
   472  002255  75                 	db	117
   473  002256  6E                 	db	110
   474  002257  64                 	db	100
   475  002258  61                 	db	97
   476  002259  72                 	db	114
   477  00225A  69                 	db	105
   478  00225B  65                 	db	101
   479  00225C  73                 	db	115
   480  00225D  0A                 	db	10
   481  00225E  00                 	db	0
   482                           
   483                           	psect	smallconst
   484  000600                     __psmallconst:
   485                           	callstack 0
   486  000600  00                 	db	0
   487  000601  0000               	dw	0
   488  000603  4000               	dw	16384
   489  000605                     __end_ofrotateObj@stepAngle:
   490                           	callstack 0
   491  000605  0400               	dw	1024
   492  000607                     __end_of_therm_pressure:
   493                           	callstack 0
   494  000607  0200               	dw	512
   495  000609                     __end_of_touch_pressure:
   496                           	callstack 0
   497  000609                     _feeder3Pos:
   498                           	callstack 0
   499  000609  0F                 	db	15
   500  00060A  50                 	db	80
   501  00060B                     __end_of_feeder3Pos:
   502                           	callstack 0
   503  00060B                     _feeder2Pos:
   504                           	callstack 0
   505  00060B  0F                 	db	15
   506  00060C  32                 	db	50
   507  00060D                     __end_of_feeder2Pos:
   508                           	callstack 0
   509  00060D                     _feeder1Pos:
   510                           	callstack 0
   511  00060D  0F                 	db	15
   512  00060E  14                 	db	20
   513  00060F                     __end_of_feeder1Pos:
   514                           	callstack 0
   515  00060F  64                 	db	100
   516  000610                     __end_of_maxFeedY:
   517                           	callstack 0
   518  000610  1E                 	db	30
   519  000611                     __end_of_maxFeedX:
   520                           	callstack 0
   521  0000                     _TMR0	set	4054
   522  0000                     _T1CONbits	set	4045
   523  0000                     _TXREG	set	4013
   524  0000                     _SPBRG	set	4015
   525  0000                     _TXSTAbits	set	4012
   526  0000                     _TRISCbits	set	3988
   527  0000                     _RCREG1	set	4014
   528  0000                     _ADRESH	set	4036
   529  0000                     _ADRESL	set	4035
   530  0000                     _PIR1bits	set	3998
   531  0000                     _RCONbits	set	4048
   532  0000                     _INTCONbits	set	4082
   533  0000                     _IPR1bits	set	3999
   534  0000                     _PIE1bits	set	3997
   535  0000                     _ADCON0bits	set	4034
   536  0000                     _RCSTAbits	set	4011
   537  0000                     _RCSTA1bits	set	4011
   538  0000                     _LATD	set	3980
   539  0000                     _PORTDbits	set	3971
   540  0000                     _TMR2	set	4044
   541  0000                     _LATC	set	3979
   542  0000                     _LATB	set	3978
   543  0000                     _LATA	set	3977
   544  0000                     _PORTEbits	set	3972
   545  0000                     _T0CONbits	set	4053
   546  0000                     _T2CONbits	set	4042
   547  0000                     _LATDbits	set	3980
   548  0000                     _LATCbits	set	3979
   549  0000                     _LATBbits	set	3978
   550  0000                     _LATAbits	set	3977
   551  0000                     _TRISDbits	set	3989
   552  0000                     _TRISEbits	set	3990
   553  0000                     _TRISD	set	3989
   554  0000                     _TRISC	set	3988
   555  0000                     _TRISB	set	3987
   556  0000                     _TRISA	set	3986
   557  0000                     _ADCON1bits	set	4033
   558  000611  00                 	db	0	; dummy byte at the end
   559  0000                     
   560                           ; #config settings
   561                           
   562                           	psect	cinit
   563  00231E                     __pcinit:
   564                           	callstack 0
   565  00231E                     start_initialization:
   566                           	callstack 0
   567  00231E                     __initialization:
   568                           	callstack 0
   569                           
   570                           ; Initialize objects allocated to BANK1 (247 bytes)
   571                           ; load TBLPTR registers with __pidataBANK1
   572  00231E  0E68               	movlw	low __pidataBANK1
   573  002320  6EF6               	movwf	tblptrl,c
   574  002322  0E21               	movlw	high __pidataBANK1
   575  002324  6EF7               	movwf	tblptrh,c
   576  002326  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   577  002328  6EF8               	movwf	tblptru,c
   578  00232A  EE01  F000         	lfsr	0,__pdataBANK1
   579  00232E  EE10 F0F7          	lfsr	1,247
   580  002332                     copy_data0:
   581  002332  0009               	tblrd		*+
   582  002334  CFF5 FFEE          	movff	tablat,postinc0
   583  002338  50E5               	movf	postdec1,w,c
   584  00233A  50E1               	movf	fsr1l,w,c
   585  00233C  E1FA               	bnz	copy_data0
   586                           
   587                           ; Initialize objects allocated to BANK0 (70 bytes)
   588                           ; load TBLPTR registers with __pidataBANK0
   589  00233E  0EA0               	movlw	low __pidataBANK0
   590  002340  6EF6               	movwf	tblptrl,c
   591  002342  0E24               	movlw	high __pidataBANK0
   592  002344  6EF7               	movwf	tblptrh,c
   593  002346  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   594  002348  6EF8               	movwf	tblptru,c
   595  00234A  EE00  F080         	lfsr	0,__pdataBANK0
   596  00234E  EE10 F046          	lfsr	1,70
   597  002352                     copy_data1:
   598  002352  0009               	tblrd		*+
   599  002354  CFF5 FFEE          	movff	tablat,postinc0
   600  002358  50E5               	movf	postdec1,w,c
   601  00235A  50E1               	movf	fsr1l,w,c
   602  00235C  E1FA               	bnz	copy_data1
   603                           
   604                           ; Initialize objects allocated to COMRAM (11 bytes)
   605                           ; load TBLPTR registers with __pidataCOMRAM
   606  00235E  0EC2               	movlw	low __pidataCOMRAM
   607  002360  6EF6               	movwf	tblptrl,c
   608  002362  0E26               	movlw	high __pidataCOMRAM
   609  002364  6EF7               	movwf	tblptrh,c
   610  002366  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   611  002368  6EF8               	movwf	tblptru,c
   612  00236A  EE00  F063         	lfsr	0,__pdataCOMRAM
   613  00236E  EE10 F00B          	lfsr	1,11
   614  002372                     copy_data2:
   615  002372  0009               	tblrd		*+
   616  002374  CFF5 FFEE          	movff	tablat,postinc0
   617  002378  50E5               	movf	postdec1,w,c
   618  00237A  50E1               	movf	fsr1l,w,c
   619  00237C  E1FA               	bnz	copy_data2
   620                           
   621                           ; Clear objects allocated to BANK0 (32 bytes)
   622  00237E  EE00  F0C6         	lfsr	0,__pbssBANK0
   623  002382  0E20               	movlw	32
   624  002384                     clear_0:
   625  002384  6AEE               	clrf	postinc0,c
   626  002386  06E8               	decf	wreg,f,c
   627  002388  E1FD               	bnz	clear_0
   628                           
   629                           ; Clear objects allocated to COMRAM (32 bytes)
   630  00238A  EE00  F043         	lfsr	0,__pbssCOMRAM
   631  00238E  0E20               	movlw	32
   632  002390                     clear_1:
   633  002390  6AEE               	clrf	postinc0,c
   634  002392  06E8               	decf	wreg,f,c
   635  002394  E1FD               	bnz	clear_1
   636  002396                     end_of_initialization:
   637                           	callstack 0
   638  002396                     __end_of__initialization:
   639                           	callstack 0
   640  002396  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   641  002398  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   642  00239A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   643  00239C  6EF8               	movwf	tblptru,c
   644  00239E  0100               	movlb	0
   645  0023A0  EF99  F00C         	goto	_main	;jump to C main() function
   646                           
   647                           	psect	bssCOMRAM
   648  000043                     __pbssCOMRAM:
   649                           	callstack 0
   650  000043                     storeData@receivedMex:
   651                           	callstack 0
   652  000043                     	ds	9
   653  00004C                     _posVector:
   654                           	callstack 0
   655  00004C                     	ds	3
   656  00004F                     _ADC_res:
   657                           	callstack 0
   658  00004F                     	ds	2
   659  000051                     _newFeeder:
   660                           	callstack 0
   661  000051                     	ds	2
   662  000053                     _rotAngle:
   663                           	callstack 0
   664  000053                     	ds	2
   665  000055                     _tm0Error:
   666                           	callstack 0
   667  000055                     	ds	2
   668  000057                     _stepToggle:
   669                           	callstack 0
   670  000057                     	ds	1
   671  000058                     _pwmStep:
   672                           	callstack 0
   673  000058                     	ds	1
   674  000059                     	ds	1
   675  00005A                     storeData@counter:
   676                           	callstack 0
   677  00005A                     	ds	1
   678  00005B                     __newSequence:
   679                           	callstack 0
   680  00005B                     	ds	1
   681  00005C                     __fatalError:
   682                           	callstack 0
   683  00005C                     	ds	1
   684  00005D                     _dataCounter:
   685                           	callstack 0
   686  00005D                     	ds	1
   687  00005E                     _completeStep:
   688                           	callstack 0
   689  00005E                     	ds	1
   690  00005F                     _tm0Count:
   691                           	callstack 0
   692  00005F                     	ds	1
   693  000060                     _therm_rel:
   694                           	callstack 0
   695  000060                     	ds	1
   696  000061                     _touch_rel:
   697                           	callstack 0
   698  000061                     	ds	1
   699  000062                     _tm0Limit:
   700                           	callstack 0
   701  000062                     	ds	1
   702                           
   703                           	psect	dataCOMRAM
   704  000063                     __pdataCOMRAM:
   705                           	callstack 0
   706  000063                     _motCounter:
   707                           	callstack 0
   708  000063                     	ds	6
   709  000069                     _maxY:
   710                           	callstack 0
   711  000069                     	ds	2
   712  00006B                     _maxX:
   713                           	callstack 0
   714  00006B                     	ds	2
   715  00006D                     storeData@mexLength:
   716                           	callstack 0
   717  00006D                     	ds	1
   718                           
   719                           	psect	bssBANK0
   720  0000C6                     __pbssBANK0:
   721                           	callstack 0
   722  0000C6                     _pwmPeriod:
   723                           	callstack 0
   724  0000C6                     	ds	2
   725  0000C8                     _single_cycle:
   726                           	callstack 0
   727  0000C8                     	ds	2
   728  0000CA                     _dataSequence:
   729                           	callstack 0
   730  0000CA                     	ds	20
   731  0000DE                     _newSequenceData:
   732                           	callstack 0
   733  0000DE                     	ds	8
   734                           
   735                           	psect	dataBANK0
   736  000080                     __pdataBANK0:
   737                           	callstack 0
   738  000080                     rotateObj@rotSequence:
   739                           	callstack 0
   740  000080                     	ds	4
   741  000084                     _stepMot3:
   742                           	callstack 0
   743  000084                     	ds	4
   744  000088                     _stepMot2:
   745                           	callstack 0
   746  000088                     	ds	4
   747  00008C                     _stepMot1:
   748                           	callstack 0
   749  00008C                     	ds	4
   750  000090                     _errString_Feed:
   751                           	callstack 0
   752  000090                     	ds	30
   753  0000AE                     _errString_Command:
   754                           	callstack 0
   755  0000AE                     	ds	24
   756                           
   757                           	psect	dataBANK1
   758  000100                     __pdataBANK1:
   759                           	callstack 0
   760  000100                     _errString_PointZ:
   761                           	callstack 0
   762  000100                     	ds	53
   763  000135                     _errString_Point:
   764                           	callstack 0
   765  000135                     	ds	41
   766  00015E                     _errString_ZEND:
   767                           	callstack 0
   768  00015E                     	ds	41
   769  000187                     _errString_Reset:
   770                           	callstack 0
   771  000187                     	ds	40
   772  0001AF                     _errString_Fatal:
   773                           	callstack 0
   774  0001AF                     	ds	39
   775  0001D6                     _errString_Bound:
   776                           	callstack 0
   777  0001D6                     	ds	33
   778                           
   779                           	psect	cstackBANK0
   780  0000E6                     __pcstackBANK0:
   781                           	callstack 0
   782  0000E6                     rotateObj@rotAngle:
   783                           	callstack 0
   784                           
   785                           ; 1 bytes @ 0x0
   786  0000E6                     	ds	1
   787  0000E7                     rotateObj@totStep:
   788                           	callstack 0
   789                           
   790                           ; 2 bytes @ 0x1
   791  0000E7                     	ds	2
   792  0000E9                     rotateObj@i:
   793                           	callstack 0
   794                           
   795                           ; 2 bytes @ 0x3
   796  0000E9                     	ds	2
   797  0000EB                     rotateObj@c:
   798                           	callstack 0
   799                           
   800                           ; 2 bytes @ 0x5
   801  0000EB                     	ds	2
   802  0000ED                     ??_executeData:
   803                           
   804                           ; 1 bytes @ 0x7
   805  0000ED                     	ds	2
   806  0000EF                     executeData@data:
   807                           	callstack 0
   808                           
   809                           ; 2 bytes @ 0x9
   810  0000EF                     	ds	2
   811  0000F1                     executeData@errCode:
   812                           	callstack 0
   813                           
   814                           ; 1 bytes @ 0xB
   815  0000F1                     	ds	1
   816  0000F2                     ??_main:
   817                           
   818                           ; 1 bytes @ 0xC
   819  0000F2                     	ds	2
   820  0000F4                     main@errCode:
   821                           	callstack 0
   822                           
   823                           ; 1 bytes @ 0xE
   824  0000F4                     	ds	1
   825  0000F5                     main@newData:
   826                           	callstack 0
   827                           
   828                           ; 2 bytes @ 0xF
   829  0000F5                     	ds	2
   830                           
   831                           	psect	cstackCOMRAM
   832  000001                     __pcstackCOMRAM:
   833                           	callstack 0
   834  000001                     ?_retPeriod:
   835                           	callstack 0
   836  000001                     i2uartTx@ptr:
   837                           	callstack 0
   838                           
   839                           ; 2 bytes @ 0x0
   840  000001                     	ds	2
   841  000003                     i2uartTx@length:
   842                           	callstack 0
   843                           
   844                           ; 1 bytes @ 0x2
   845  000003                     	ds	1
   846  000004                     i2uartTx@i:
   847                           	callstack 0
   848                           
   849                           ; 1 bytes @ 0x3
   850  000004                     	ds	1
   851  000005                     ??i2_printError:
   852                           
   853                           ; 1 bytes @ 0x4
   854  000005                     	ds	2
   855  000007                     i2printError@errCode:
   856                           	callstack 0
   857                           
   858                           ; 1 bytes @ 0x6
   859  000007                     	ds	1
   860  000008                     ??i2_storeData:
   861                           
   862                           ; 1 bytes @ 0x7
   863  000008                     	ds	2
   864  00000A                     i2storeData@data:
   865                           	callstack 0
   866                           
   867                           ; 1 bytes @ 0x9
   868  00000A                     	ds	1
   869  00000B                     ??_isr:
   870                           
   871                           ; 1 bytes @ 0xA
   872  00000B                     	ds	6
   873  000011                     isr@temp:
   874                           	callstack 0
   875                           
   876                           ; 1 bytes @ 0x10
   877  000011                     	ds	1
   878  000012                     ??_shiftData:
   879  000012                     ?_stepMade:
   880                           	callstack 0
   881  000012                     ?_stepCounter:
   882                           	callstack 0
   883  000012                     ?_returnTouch:
   884                           	callstack 0
   885  000012                     ?_returnTherm:
   886                           	callstack 0
   887  000012                     ?_getNewSequence:
   888                           	callstack 0
   889  000012                     ?_getData:
   890                           	callstack 0
   891  000012                     ?___xxtofl:
   892                           	callstack 0
   893  000012                     uartTx@ptr:
   894                           	callstack 0
   895  000012                     tim2Init@_pwmPeriod:
   896                           	callstack 0
   897  000012                     ___xxtofl@val:
   898                           	callstack 0
   899                           
   900                           ; 4 bytes @ 0x11
   901  000012                     	ds	2
   902  000014                     shiftData@i:
   903                           	callstack 0
   904  000014                     uartTx@length:
   905                           	callstack 0
   906  000014                     stepMade@temp:
   907                           	callstack 0
   908                           
   909                           ; 1 bytes @ 0x13
   910  000014                     	ds	1
   911  000015                     resetPosition@keepMovingX:
   912                           	callstack 0
   913  000015                     uartTx@i:
   914                           	callstack 0
   915  000015                     moveToPoint@x1:
   916                           	callstack 0
   917                           
   918                           ; 2 bytes @ 0x14
   919  000015                     	ds	1
   920  000016                     ??_printError:
   921  000016                     ??___xxtofl:
   922  000016                     resetPosition@keepMovingY:
   923                           	callstack 0
   924                           
   925                           ; 1 bytes @ 0x15
   926  000016                     	ds	1
   927  000017                     resetPosition@keepMovingZ:
   928                           	callstack 0
   929  000017                     moveToPoint@y1:
   930                           	callstack 0
   931                           
   932                           ; 2 bytes @ 0x16
   933  000017                     	ds	1
   934  000018                     printError@errCode:
   935                           	callstack 0
   936                           
   937                           ; 1 bytes @ 0x17
   938  000018                     	ds	1
   939  000019                     ??_storeData:
   940  000019                     moveToPoint@x2:
   941                           	callstack 0
   942                           
   943                           ; 2 bytes @ 0x18
   944  000019                     	ds	1
   945  00001A                     ___xxtofl@sign:
   946                           	callstack 0
   947                           
   948                           ; 1 bytes @ 0x19
   949  00001A                     	ds	1
   950  00001B                     storeData@data:
   951                           	callstack 0
   952  00001B                     ___xxtofl@exp:
   953                           	callstack 0
   954  00001B                     moveToPoint@y2:
   955                           	callstack 0
   956                           
   957                           ; 2 bytes @ 0x1A
   958  00001B                     	ds	1
   959  00001C                     ___xxtofl@arg:
   960                           	callstack 0
   961                           
   962                           ; 4 bytes @ 0x1B
   963  00001C                     	ds	1
   964  00001D                     ??_moveToPoint:
   965                           
   966                           ; 1 bytes @ 0x1C
   967  00001D                     	ds	2
   968  00001F                     moveToPoint@MOT1Direction:
   969                           	callstack 0
   970                           
   971                           ; 1 bytes @ 0x1E
   972  00001F                     	ds	1
   973  000020                     ?___fldiv:
   974                           	callstack 0
   975  000020                     moveToPoint@MOT2Direction:
   976                           	callstack 0
   977  000020                     ___fldiv@b:
   978                           	callstack 0
   979                           
   980                           ; 4 bytes @ 0x1F
   981  000020                     	ds	1
   982  000021                     moveToPoint@keepMovingX:
   983                           	callstack 0
   984                           
   985                           ; 1 bytes @ 0x20
   986  000021                     	ds	1
   987  000022                     moveToPoint@keepMovingY:
   988                           	callstack 0
   989                           
   990                           ; 1 bytes @ 0x21
   991  000022                     	ds	2
   992  000024                     ___fldiv@a:
   993                           	callstack 0
   994                           
   995                           ; 4 bytes @ 0x23
   996  000024                     	ds	4
   997  000028                     ??___fldiv:
   998                           
   999                           ; 1 bytes @ 0x27
  1000  000028                     	ds	4
  1001  00002C                     ___fldiv@rem:
  1002                           	callstack 0
  1003                           
  1004                           ; 4 bytes @ 0x2B
  1005  00002C                     	ds	4
  1006  000030                     ___fldiv@sign:
  1007                           	callstack 0
  1008                           
  1009                           ; 1 bytes @ 0x2F
  1010  000030                     	ds	1
  1011  000031                     ___fldiv@new_exp:
  1012                           	callstack 0
  1013                           
  1014                           ; 2 bytes @ 0x30
  1015  000031                     	ds	2
  1016  000033                     ___fldiv@grs:
  1017                           	callstack 0
  1018                           
  1019                           ; 4 bytes @ 0x32
  1020  000033                     	ds	4
  1021  000037                     ___fldiv@bexp:
  1022                           	callstack 0
  1023                           
  1024                           ; 1 bytes @ 0x36
  1025  000037                     	ds	1
  1026  000038                     ___fldiv@aexp:
  1027                           	callstack 0
  1028                           
  1029                           ; 1 bytes @ 0x37
  1030  000038                     	ds	1
  1031  000039                     ?___fltol:
  1032                           	callstack 0
  1033  000039                     ___fltol@f1:
  1034                           	callstack 0
  1035                           
  1036                           ; 4 bytes @ 0x38
  1037  000039                     	ds	4
  1038  00003D                     ??___fltol:
  1039                           
  1040                           ; 1 bytes @ 0x3C
  1041  00003D                     	ds	4
  1042  000041                     ___fltol@sign1:
  1043                           	callstack 0
  1044                           
  1045                           ; 1 bytes @ 0x40
  1046  000041                     	ds	1
  1047  000042                     ___fltol@exp1:
  1048                           	callstack 0
  1049                           
  1050                           ; 1 bytes @ 0x41
  1051  000042                     	ds	1
  1052  000043                     
  1053                           ; 1 bytes @ 0x42
  1054 ;;
  1055 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1056 ;;
  1057 ;; *************** function _main *****************
  1058 ;; Defined at:
  1059 ;;		line 19 in file "main.c"
  1060 ;; Parameters:    Size  Location     Type
  1061 ;;		None
  1062 ;; Auto vars:     Size  Location     Type
  1063 ;;  newData         2   15[BANK0 ] PTR struct .
  1064 ;;		 -> newSequenceData(8), 
  1065 ;;  errCode         1   14[BANK0 ] unsigned char 
  1066 ;; Return value:  Size  Location     Type
  1067 ;;                  1    wreg      void 
  1068 ;; Registers used:
  1069 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1070 ;; Tracked objects:
  1071 ;;		On entry : 0/0
  1072 ;;		On exit  : 0/0
  1073 ;;		Unchanged: 0/0
  1074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1075 ;;      Params:         0       0       0       0       0       0       0
  1076 ;;      Locals:         0       3       0       0       0       0       0
  1077 ;;      Temps:          0       2       0       0       0       0       0
  1078 ;;      Totals:         0       5       0       0       0       0       0
  1079 ;;Total ram usage:        5 bytes
  1080 ;; Hardware stack levels required when called:    7
  1081 ;; This function calls:
  1082 ;;		_clearTM0
  1083 ;;		_executeData
  1084 ;;		_getNewSequence
  1085 ;;		_initADC
  1086 ;;		_initPinMotors
  1087 ;;		_interruptInit
  1088 ;;		_newSequence
  1089 ;;		_printError
  1090 ;;		_readSeq
  1091 ;;		_reduceSeq
  1092 ;;		_resetNewSequence
  1093 ;;		_resetPosition
  1094 ;;		_shiftData
  1095 ;;		_storeData
  1096 ;;		_tim0Init
  1097 ;;		_tim1Init
  1098 ;;		_tim2Init
  1099 ;;		_usartInit
  1100 ;; This function is called by:
  1101 ;;		Startup code after reset
  1102 ;; This function uses a non-reentrant model
  1103 ;;
  1104                           
  1105                           	psect	text0
  1106  001932                     __ptext0:
  1107                           	callstack 0
  1108  001932                     _main:
  1109                           	callstack 24
  1110  001932  FFFF               	dw	65535	; assembler added errata NOP
  1111                           
  1112                           ;main.c: 23:     interruptInit();
  1113  001934  EC73  F012         	call	_interruptInit	;wreg free
  1114  001938                     
  1115                           ;main.c: 24:     initPinMotors();
  1116  001938  ECC1  F012         	call	_initPinMotors	;wreg free
  1117  00193C                     
  1118                           ;main.c: 25:     initADC();
  1119  00193C  ECD4  F012         	call	_initADC	;wreg free
  1120  001940                     
  1121                           ;main.c: 26:     usartInit();
  1122  001940  ECE7  F012         	call	_usartInit	;wreg free
  1123  001944                     
  1124                           ;main.c: 27:     tim0Init();
  1125  001944  EC13  F013         	call	_tim0Init	;wreg free
  1126  001948                     
  1127                           ;main.c: 28:     tim1Init();
  1128  001948  EC25  F013         	call	_tim1Init	;wreg free
  1129  00194C                     
  1130                           ;main.c: 29:     tim2Init(10);
  1131  00194C  0E00               	movlw	0
  1132  00194E  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1133  001950  0E0A               	movlw	10
  1134  001952  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1135  001954  EC0A  F013         	call	_tim2Init	;wreg free
  1136  001958                     
  1137                           ;main.c: 32:     errCode = resetPosition();
  1138  001958  ECA7  F00B         	call	_resetPosition	;wreg free
  1139  00195C  0100               	movlb	0	; () banked
  1140  00195E  6FF4               	movwf	main@errCode& (0+255),b
  1141  001960                     
  1142                           ; BSR set to: 0
  1143                           ;main.c: 33:     if(errCode != 0){
  1144  001960  51F4               	movf	main@errCode& (0+255),w,b
  1145  001962  B4D8               	btfsc	status,2,c
  1146  001964  EFB6  F00C         	goto	u4091
  1147  001968  EFB9  F00C         	goto	u4090
  1148  00196C                     u4091:
  1149  00196C  FFFF               	dw	65535	; assembler added errata NOP
  1150  00196E  EFC0  F00C         	goto	l331
  1151  001972                     u4090:
  1152  001972  FFFF               	dw	65535	; assembler added errata NOP
  1153  001974                     
  1154                           ; BSR set to: 0
  1155                           ;main.c: 34:         printError(errCode);
  1156  001974  51F4               	movf	main@errCode& (0+255),w,b
  1157  001976  EC09  F00E         	call	_printError
  1158  00197A                     l332:
  1159  00197A  FFFF               	dw	65535	; assembler added errata NOP
  1160  00197C  EFBD  F00C         	goto	l332
  1161  001980                     l331:
  1162  001980  FFFF               	dw	65535	; assembler added errata NOP
  1163                           
  1164                           ; BSR set to: 0
  1165                           ;main.c: 39:     RCSTA1bits.CREN = 1;
  1166  001982  88AB               	bsf	171,4,c	;volatile
  1167  001984                     l4645:
  1168  001984  FFFF               	dw	65535	; assembler added errata NOP
  1169                           
  1170                           ;main.c: 42:         if(newSequence()){
  1171  001986  EC9C  F013         	call	_newSequence	;wreg free
  1172  00198A  0900               	iorlw	0
  1173  00198C  B4D8               	btfsc	status,2,c
  1174  00198E  EFCB  F00C         	goto	u4101
  1175  001992  EFCE  F00C         	goto	u4100
  1176  001996                     u4101:
  1177  001996  FFFF               	dw	65535	; assembler added errata NOP
  1178  001998  EF50  F00D         	goto	l4673
  1179  00199C                     u4100:
  1180  00199C  FFFF               	dw	65535	; assembler added errata NOP
  1181  00199E                     
  1182                           ;main.c: 43:             t_newSequence* newData = getNewSequence();
  1183  00199E  EC2C  F013         	call	_getNewSequence	;wreg free
  1184  0019A2  C012  F0F5         	movff	?_getNewSequence,main@newData
  1185  0019A6  C013  F0F6         	movff	?_getNewSequence+1,main@newData+1
  1186  0019AA                     
  1187                           ;main.c: 45:             newFeeder[0] = newData ->init_posX;
  1188  0019AA  0100               	movlb	0	; () banked
  1189  0019AC  EE20 F002          	lfsr	2,2
  1190  0019B0  51F5               	movf	main@newData& (0+255),w,b
  1191  0019B2  26D9               	addwf	fsr2l,f,c
  1192  0019B4  51F6               	movf	(main@newData+1)& (0+255),w,b
  1193  0019B6  22DA               	addwfc	fsr2h,f,c
  1194  0019B8  50DF               	movf	indf2,w,c
  1195  0019BA  6E51               	movwf	_newFeeder^0,c
  1196  0019BC                     
  1197                           ; BSR set to: 0
  1198                           ;main.c: 46:             newFeeder[1] = newData ->init_posY;
  1199  0019BC  EE20 F003          	lfsr	2,3
  1200  0019C0  51F5               	movf	main@newData& (0+255),w,b
  1201  0019C2  26D9               	addwf	fsr2l,f,c
  1202  0019C4  51F6               	movf	(main@newData+1)& (0+255),w,b
  1203  0019C6  22DA               	addwfc	fsr2h,f,c
  1204  0019C8  50DF               	movf	indf2,w,c
  1205  0019CA  6E52               	movwf	(_newFeeder+1)^0,c
  1206  0019CC                     
  1207                           ; BSR set to: 0
  1208                           ;main.c: 50:             RCSTAbits.CREN = 0;
  1209  0019CC  98AB               	bcf	171,4,c	;volatile
  1210  0019CE                     
  1211                           ; BSR set to: 0
  1212                           ;main.c: 55:             if(newData ->end_posX > maxFeedX || newData ->end_posY > maxFee
      +                          dY){
  1213  0019CE  EE20 F005          	lfsr	2,5
  1214  0019D2  51F5               	movf	main@newData& (0+255),w,b
  1215  0019D4  26D9               	addwf	fsr2l,f,c
  1216  0019D6  51F6               	movf	(main@newData+1)& (0+255),w,b
  1217  0019D8  22DA               	addwfc	fsr2h,f,c
  1218  0019DA  0E1F               	movlw	31
  1219  0019DC  60DF               	cpfslt	indf2,c
  1220  0019DE  EFF3  F00C         	goto	u4111
  1221  0019E2  EFF6  F00C         	goto	u4110
  1222  0019E6                     u4111:
  1223  0019E6  FFFF               	dw	65535	; assembler added errata NOP
  1224  0019E8  EF06  F00D         	goto	l4659
  1225  0019EC                     u4110:
  1226  0019EC  FFFF               	dw	65535	; assembler added errata NOP
  1227  0019EE                     
  1228                           ; BSR set to: 0
  1229  0019EE  EE20 F006          	lfsr	2,6
  1230  0019F2  51F5               	movf	main@newData& (0+255),w,b
  1231  0019F4  26D9               	addwf	fsr2l,f,c
  1232  0019F6  51F6               	movf	(main@newData+1)& (0+255),w,b
  1233  0019F8  22DA               	addwfc	fsr2h,f,c
  1234  0019FA  0E64               	movlw	100
  1235  0019FC  64DF               	cpfsgt	indf2,c
  1236  0019FE  EF03  F00D         	goto	u4121
  1237  001A02  EF06  F00D         	goto	u4120
  1238  001A06                     u4121:
  1239  001A06  FFFF               	dw	65535	; assembler added errata NOP
  1240  001A08  EF0B  F00D         	goto	l4661
  1241  001A0C                     u4120:
  1242  001A0C                     l4659:
  1243  001A0C  FFFF               	dw	65535	; assembler added errata NOP
  1244                           
  1245                           ; BSR set to: 0
  1246                           ;main.c: 56:                 errCode = 5;
  1247  001A0E  0E05               	movlw	5
  1248  001A10  6FF4               	movwf	main@errCode& (0+255),b
  1249                           
  1250                           ;main.c: 57:             }else{
  1251  001A12  EF1F  F00D         	goto	l4663
  1252  001A16                     l4661:
  1253  001A16  FFFF               	dw	65535	; assembler added errata NOP
  1254                           
  1255                           ; BSR set to: 0
  1256                           ;main.c: 58:                 storeData(newData ->end_posX);
  1257  001A18  EE20 F005          	lfsr	2,5
  1258  001A1C  51F5               	movf	main@newData& (0+255),w,b
  1259  001A1E  26D9               	addwf	fsr2l,f,c
  1260  001A20  51F6               	movf	(main@newData+1)& (0+255),w,b
  1261  001A22  22DA               	addwfc	fsr2h,f,c
  1262  001A24  50DF               	movf	indf2,w,c
  1263  001A26  EC3F  F008         	call	_storeData
  1264                           
  1265                           ;main.c: 59:                 storeData(newData ->end_posY);
  1266  001A2A  0100               	movlb	0	; () banked
  1267  001A2C  EE20 F006          	lfsr	2,6
  1268  001A30  51F5               	movf	main@newData& (0+255),w,b
  1269  001A32  26D9               	addwf	fsr2l,f,c
  1270  001A34  51F6               	movf	(main@newData+1)& (0+255),w,b
  1271  001A36  22DA               	addwfc	fsr2h,f,c
  1272  001A38  50DF               	movf	indf2,w,c
  1273  001A3A  EC3F  F008         	call	_storeData
  1274  001A3E                     l4663:
  1275  001A3E  FFFF               	dw	65535	; assembler added errata NOP
  1276                           
  1277                           ;main.c: 63:             if(errCode == 0){
  1278  001A40  0100               	movlb	0	; () banked
  1279  001A42  51F4               	movf	main@errCode& (0+255),w,b
  1280  001A44  A4D8               	btfss	status,2,c
  1281  001A46  EF27  F00D         	goto	u4131
  1282  001A4A  EF2A  F00D         	goto	u4130
  1283  001A4E                     u4131:
  1284  001A4E  FFFF               	dw	65535	; assembler added errata NOP
  1285  001A50  EF48  F00D         	goto	l4667
  1286  001A54                     u4130:
  1287  001A54  FFFF               	dw	65535	; assembler added errata NOP
  1288  001A56                     
  1289                           ; BSR set to: 0
  1290                           ;main.c: 65:                 storeData(0);
  1291  001A56  0E00               	movlw	0
  1292  001A58  EC3F  F008         	call	_storeData
  1293                           
  1294                           ;main.c: 66:                 storeData(0xFF);
  1295  001A5C  0EFF               	movlw	255
  1296  001A5E  EC3F  F008         	call	_storeData
  1297                           
  1298                           ;main.c: 67:                 storeData(newData ->end_rot - newData ->init_rot);
  1299  001A62  0100               	movlb	0	; () banked
  1300  001A64  EE20 F004          	lfsr	2,4
  1301  001A68  51F5               	movf	main@newData& (0+255),w,b
  1302  001A6A  26D9               	addwf	fsr2l,f,c
  1303  001A6C  51F6               	movf	(main@newData+1)& (0+255),w,b
  1304  001A6E  22DA               	addwfc	fsr2h,f,c
  1305  001A70  50DF               	movf	indf2,w,c
  1306  001A72  6FF2               	movwf	??_main& (0+255),b
  1307  001A74  EE20 F007          	lfsr	2,7
  1308  001A78  51F5               	movf	main@newData& (0+255),w,b
  1309  001A7A  26D9               	addwf	fsr2l,f,c
  1310  001A7C  51F6               	movf	(main@newData+1)& (0+255),w,b
  1311  001A7E  22DA               	addwfc	fsr2h,f,c
  1312  001A80  50DF               	movf	indf2,w,c
  1313  001A82  6FF3               	movwf	(??_main+1)& (0+255),b
  1314  001A84  51F2               	movf	??_main& (0+255),w,b
  1315  001A86  5DF3               	subwf	(??_main+1)& (0+255),w,b
  1316  001A88  EC3F  F008         	call	_storeData
  1317                           
  1318                           ;main.c: 68:             }else{
  1319  001A8C  EF4C  F00D         	goto	l4669
  1320  001A90                     l4667:
  1321  001A90  FFFF               	dw	65535	; assembler added errata NOP
  1322                           
  1323                           ; BSR set to: 0
  1324                           ;main.c: 69:                 printError(errCode);
  1325  001A92  51F4               	movf	main@errCode& (0+255),w,b
  1326  001A94  EC09  F00E         	call	_printError
  1327  001A98                     l4669:
  1328  001A98  FFFF               	dw	65535	; assembler added errata NOP
  1329                           
  1330                           ;main.c: 73:             RCSTAbits.CREN = 1;
  1331  001A9A  88AB               	bsf	171,4,c	;volatile
  1332  001A9C                     
  1333                           ;main.c: 76:             resetNewSequence();
  1334  001A9C  EC67  F013         	call	_resetNewSequence	;wreg free
  1335  001AA0                     l4673:
  1336  001AA0  FFFF               	dw	65535	; assembler added errata NOP
  1337                           
  1338                           ;main.c: 78:         if(readSeq()){
  1339  001AA2  EC98  F013         	call	_readSeq	;wreg free
  1340  001AA6  0900               	iorlw	0
  1341  001AA8  B4D8               	btfsc	status,2,c
  1342  001AAA  EF59  F00D         	goto	u4141
  1343  001AAE  EF5C  F00D         	goto	u4140
  1344  001AB2                     u4141:
  1345  001AB2  FFFF               	dw	65535	; assembler added errata NOP
  1346  001AB4  EFC2  F00C         	goto	l4645
  1347  001AB8                     u4140:
  1348  001AB8  FFFF               	dw	65535	; assembler added errata NOP
  1349  001ABA                     
  1350                           ;main.c: 82:             errCode = executeData();
  1351  001ABA  ECC4  F006         	call	_executeData	;wreg free
  1352  001ABE  0100               	movlb	0	; () banked
  1353  001AC0  6FF4               	movwf	main@errCode& (0+255),b
  1354  001AC2                     
  1355                           ; BSR set to: 0
  1356                           ;main.c: 84:             printError(errCode);
  1357  001AC2  51F4               	movf	main@errCode& (0+255),w,b
  1358  001AC4  EC09  F00E         	call	_printError
  1359  001AC8                     
  1360                           ;main.c: 87:             clearTM0();
  1361  001AC8  EC3A  F013         	call	_clearTM0	;wreg free
  1362  001ACC                     
  1363                           ;main.c: 91:             reduceSeq();
  1364  001ACC  EC94  F013         	call	_reduceSeq	;wreg free
  1365  001AD0                     
  1366                           ;main.c: 92:             shiftData();
  1367  001AD0  ECD2  F011         	call	_shiftData	;wreg free
  1368  001AD4  EFC2  F00C         	goto	l4645
  1369  001AD8  EFD4  F000         	goto	start
  1370  001ADC                     __end_of_main:
  1371                           	callstack 0
  1372                           
  1373 ;; *************** function _usartInit *****************
  1374 ;; Defined at:
  1375 ;;		line 95 in file "usart.c"
  1376 ;; Parameters:    Size  Location     Type
  1377 ;;		None
  1378 ;; Auto vars:     Size  Location     Type
  1379 ;;		None
  1380 ;; Return value:  Size  Location     Type
  1381 ;;                  1    wreg      void 
  1382 ;; Registers used:
  1383 ;;		wreg, status,2
  1384 ;; Tracked objects:
  1385 ;;		On entry : 0/0
  1386 ;;		On exit  : 0/0
  1387 ;;		Unchanged: 0/0
  1388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1389 ;;      Params:         0       0       0       0       0       0       0
  1390 ;;      Locals:         0       0       0       0       0       0       0
  1391 ;;      Temps:          0       0       0       0       0       0       0
  1392 ;;      Totals:         0       0       0       0       0       0       0
  1393 ;;Total ram usage:        0 bytes
  1394 ;; Hardware stack levels used:    1
  1395 ;; Hardware stack levels required when called:    4
  1396 ;; This function calls:
  1397 ;;		Nothing
  1398 ;; This function is called by:
  1399 ;;		_main
  1400 ;; This function uses a non-reentrant model
  1401 ;;
  1402                           
  1403                           	psect	text1
  1404  0025CE                     __ptext1:
  1405                           	callstack 0
  1406  0025CE                     _usartInit:
  1407                           	callstack 0
  1408  0025CE  FFFF               	dw	65535	; assembler added errata NOP
  1409  0025D0                     
  1410                           ;usart.c: 97:     TRISCbits.TRISC6 = 0;
  1411  0025D0  9C94               	bcf	148,6,c	;volatile
  1412                           
  1413                           ;usart.c: 98:     TRISCbits.TRISC7 = 1;
  1414  0025D2  8E94               	bsf	148,7,c	;volatile
  1415                           
  1416                           ;usart.c: 100:     TXSTAbits.TX9 = 0;
  1417  0025D4  9CAC               	bcf	172,6,c	;volatile
  1418                           
  1419                           ;usart.c: 101:     TXSTAbits.TXEN = 1;
  1420  0025D6  8AAC               	bsf	172,5,c	;volatile
  1421                           
  1422                           ;usart.c: 102:     TXSTAbits.SYNC = 0;
  1423  0025D8  98AC               	bcf	172,4,c	;volatile
  1424                           
  1425                           ;usart.c: 103:     TXSTAbits.BRGH = 0;
  1426  0025DA  94AC               	bcf	172,2,c	;volatile
  1427                           
  1428                           ;usart.c: 105:     RCSTAbits.SPEN = 1;
  1429  0025DC  8EAB               	bsf	171,7,c	;volatile
  1430                           
  1431                           ;usart.c: 106:     RCSTAbits.RX9 = 0;
  1432  0025DE  9CAB               	bcf	171,6,c	;volatile
  1433                           
  1434                           ;usart.c: 107:     RCSTAbits.CREN = 0;
  1435  0025E0  98AB               	bcf	171,4,c	;volatile
  1436                           
  1437                           ;usart.c: 108:     RCSTAbits.ADDEN = 0;
  1438  0025E2  96AB               	bcf	171,3,c	;volatile
  1439  0025E4                     
  1440                           ;usart.c: 111:     SPBRG = 25;
  1441  0025E4  0E19               	movlw	25
  1442  0025E6  6EAF               	movwf	175,c	;volatile
  1443  0025E8  0012               	return		;funcret
  1444  0025EA  FFFF               	dw	65535	; errata NOP
  1445  0025EC                     __end_of_usartInit:
  1446                           	callstack 0
  1447                           
  1448 ;; *************** function _tim2Init *****************
  1449 ;; Defined at:
  1450 ;;		line 46 in file "timer.c"
  1451 ;; Parameters:    Size  Location     Type
  1452 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1453 ;; Auto vars:     Size  Location     Type
  1454 ;;		None
  1455 ;; Return value:  Size  Location     Type
  1456 ;;                  1    wreg      void 
  1457 ;; Registers used:
  1458 ;;		None
  1459 ;; Tracked objects:
  1460 ;;		On entry : 0/0
  1461 ;;		On exit  : 0/0
  1462 ;;		Unchanged: 0/0
  1463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1464 ;;      Params:         2       0       0       0       0       0       0
  1465 ;;      Locals:         0       0       0       0       0       0       0
  1466 ;;      Temps:          0       0       0       0       0       0       0
  1467 ;;      Totals:         2       0       0       0       0       0       0
  1468 ;;Total ram usage:        2 bytes
  1469 ;; Hardware stack levels used:    1
  1470 ;; Hardware stack levels required when called:    4
  1471 ;; This function calls:
  1472 ;;		Nothing
  1473 ;; This function is called by:
  1474 ;;		_main
  1475 ;; This function uses a non-reentrant model
  1476 ;;
  1477                           
  1478                           	psect	text2
  1479  002614                     __ptext2:
  1480                           	callstack 0
  1481  002614                     _tim2Init:
  1482                           	callstack 0
  1483  002614  FFFF               	dw	65535	; assembler added errata NOP
  1484  002616                     
  1485                           ;timer.c: 47:     T2CONbits.TMR2ON = 0;
  1486  002616  94CA               	bcf	202,2,c	;volatile
  1487                           
  1488                           ;timer.c: 48:     T2CONbits.T2CKPS1 = 1;
  1489  002618  82CA               	bsf	202,1,c	;volatile
  1490                           
  1491                           ;timer.c: 52:     pwmPeriod = _pwmPeriod;
  1492  00261A  C012  F0C6         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1493  00261E  C013  F0C7         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1494  002622  0012               	return		;funcret
  1495  002624  FFFF               	dw	65535	; errata NOP
  1496  002626                     __end_of_tim2Init:
  1497                           	callstack 0
  1498                           
  1499 ;; *************** function _tim1Init *****************
  1500 ;; Defined at:
  1501 ;;		line 33 in file "timer.c"
  1502 ;; Parameters:    Size  Location     Type
  1503 ;;		None
  1504 ;; Auto vars:     Size  Location     Type
  1505 ;;		None
  1506 ;; Return value:  Size  Location     Type
  1507 ;;                  1    wreg      void 
  1508 ;; Registers used:
  1509 ;;		wreg, status,2
  1510 ;; Tracked objects:
  1511 ;;		On entry : 0/0
  1512 ;;		On exit  : 0/0
  1513 ;;		Unchanged: 0/0
  1514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1515 ;;      Params:         0       0       0       0       0       0       0
  1516 ;;      Locals:         0       0       0       0       0       0       0
  1517 ;;      Temps:          0       0       0       0       0       0       0
  1518 ;;      Totals:         0       0       0       0       0       0       0
  1519 ;;Total ram usage:        0 bytes
  1520 ;; Hardware stack levels used:    1
  1521 ;; Hardware stack levels required when called:    4
  1522 ;; This function calls:
  1523 ;;		Nothing
  1524 ;; This function is called by:
  1525 ;;		_main
  1526 ;; This function uses a non-reentrant model
  1527 ;;
  1528                           
  1529                           	psect	text3
  1530  00264A                     __ptext3:
  1531                           	callstack 0
  1532  00264A                     _tim1Init:
  1533                           	callstack 0
  1534  00264A  FFFF               	dw	65535	; assembler added errata NOP
  1535  00264C                     
  1536                           ;timer.c: 34:     T1CONbits.T1CKPS = 0x03;
  1537  00264C  0E30               	movlw	48
  1538  00264E  12CD               	iorwf	205,f,c	;volatile
  1539  002650                     
  1540                           ;timer.c: 35:     T1CONbits.TMR1CS = 0;
  1541  002650  92CD               	bcf	205,1,c	;volatile
  1542  002652                     
  1543                           ;timer.c: 37:     T1CONbits.TMR1ON = 1;
  1544  002652  80CD               	bsf	205,0,c	;volatile
  1545  002654  0012               	return		;funcret
  1546  002656  FFFF               	dw	65535	; errata NOP
  1547  002658                     __end_of_tim1Init:
  1548                           	callstack 0
  1549                           
  1550 ;; *************** function _tim0Init *****************
  1551 ;; Defined at:
  1552 ;;		line 21 in file "timer.c"
  1553 ;; Parameters:    Size  Location     Type
  1554 ;;		None
  1555 ;; Auto vars:     Size  Location     Type
  1556 ;;		None
  1557 ;; Return value:  Size  Location     Type
  1558 ;;                  1    wreg      void 
  1559 ;; Registers used:
  1560 ;;		wreg, status,2
  1561 ;; Tracked objects:
  1562 ;;		On entry : 0/0
  1563 ;;		On exit  : 0/0
  1564 ;;		Unchanged: 0/0
  1565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1566 ;;      Params:         0       0       0       0       0       0       0
  1567 ;;      Locals:         0       0       0       0       0       0       0
  1568 ;;      Temps:          0       0       0       0       0       0       0
  1569 ;;      Totals:         0       0       0       0       0       0       0
  1570 ;;Total ram usage:        0 bytes
  1571 ;; Hardware stack levels used:    1
  1572 ;; Hardware stack levels required when called:    4
  1573 ;; This function calls:
  1574 ;;		Nothing
  1575 ;; This function is called by:
  1576 ;;		_main
  1577 ;; This function uses a non-reentrant model
  1578 ;;
  1579                           
  1580                           	psect	text4
  1581  002626                     __ptext4:
  1582                           	callstack 0
  1583  002626                     _tim0Init:
  1584                           	callstack 0
  1585  002626  FFFF               	dw	65535	; assembler added errata NOP
  1586  002628                     
  1587                           ;timer.c: 22:     T0CONbits.TMR0ON = 0;
  1588  002628  9ED5               	bcf	213,7,c	;volatile
  1589                           
  1590                           ;timer.c: 23:     T0CONbits.T08BIT = 0;
  1591  00262A  9CD5               	bcf	213,6,c	;volatile
  1592                           
  1593                           ;timer.c: 24:     T0CONbits.T0CS = 0;
  1594  00262C  9AD5               	bcf	213,5,c	;volatile
  1595                           
  1596                           ;timer.c: 25:     T0CONbits.PSA = 1;
  1597  00262E  86D5               	bsf	213,3,c	;volatile
  1598  002630                     
  1599                           ;timer.c: 26:     T0CONbits.T0PS = 0x07;
  1600  002630  0E07               	movlw	7
  1601  002632  12D5               	iorwf	213,f,c	;volatile
  1602  002634  0012               	return		;funcret
  1603  002636  FFFF               	dw	65535	; errata NOP
  1604  002638                     __end_of_tim0Init:
  1605                           	callstack 0
  1606                           
  1607 ;; *************** function _storeData *****************
  1608 ;; Defined at:
  1609 ;;		line 167 in file "usart.c"
  1610 ;; Parameters:    Size  Location     Type
  1611 ;;  data            1    wreg     unsigned char 
  1612 ;; Auto vars:     Size  Location     Type
  1613 ;;  data            1   26[COMRAM] unsigned char 
  1614 ;; Return value:  Size  Location     Type
  1615 ;;                  1    wreg      void 
  1616 ;; Registers used:
  1617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1618 ;; Tracked objects:
  1619 ;;		On entry : 0/0
  1620 ;;		On exit  : 0/0
  1621 ;;		Unchanged: 0/0
  1622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1623 ;;      Params:         0       0       0       0       0       0       0
  1624 ;;      Locals:         1       0       0       0       0       0       0
  1625 ;;      Temps:          2       0       0       0       0       0       0
  1626 ;;      Totals:         3       0       0       0       0       0       0
  1627 ;;Total ram usage:        3 bytes
  1628 ;; Hardware stack levels used:    1
  1629 ;; Hardware stack levels required when called:    6
  1630 ;; This function calls:
  1631 ;;		_printError
  1632 ;; This function is called by:
  1633 ;;		_main
  1634 ;; This function uses a non-reentrant model
  1635 ;;
  1636                           
  1637                           	psect	text5
  1638  00107E                     __ptext5:
  1639                           	callstack 0
  1640  00107E                     _storeData:
  1641                           	callstack 0
  1642  00107E  FFFF               	dw	65535	; assembler added errata NOP
  1643                           
  1644                           ;incstack = 0
  1645                           ;storeData@data stored from wreg
  1646  001080  6E1B               	movwf	storeData@data^0,c
  1647  001082                     
  1648                           ;usart.c: 169:     static unsigned char counter = 0;;usart.c: 170:     static unsigned c
      +                          har mexLength = 5;;usart.c: 171:     static unsigned char command;;usart.c: 172:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 176:     receivedMex[counter] = data;
  1649  001082  0E43               	movlw	low storeData@receivedMex
  1650  001084  245A               	addwf	storeData@counter^0,w,c
  1651  001086  6ED9               	movwf	fsr2l,c
  1652  001088  6ADA               	clrf	fsr2h,c
  1653  00108A  0E00               	movlw	high storeData@receivedMex
  1654  00108C  22DA               	addwfc	fsr2h,f,c
  1655  00108E  C01B  FFDF         	movff	storeData@data,indf2
  1656  001092                     
  1657                           ;usart.c: 178:     counter++;
  1658  001092  2A5A               	incf	storeData@counter^0,f,c
  1659                           
  1660                           ;usart.c: 181:     switch(receivedMex[0]){
  1661  001094  EF5B  F008         	goto	l4459
  1662  001098                     l4451:
  1663  001098  FFFF               	dw	65535	; assembler added errata NOP
  1664                           
  1665                           ;usart.c: 183:             mexLength = 5;
  1666  00109A  0E05               	movlw	5
  1667  00109C  6E6D               	movwf	storeData@mexLength^0,c
  1668                           
  1669                           ;usart.c: 184:             break;
  1670  00109E  EF76  F008         	goto	l4461
  1671  0010A2                     l4453:
  1672  0010A2  FFFF               	dw	65535	; assembler added errata NOP
  1673                           
  1674                           ;usart.c: 186:             mexLength = 9;
  1675  0010A4  0E09               	movlw	9
  1676  0010A6  6E6D               	movwf	storeData@mexLength^0,c
  1677                           
  1678                           ;usart.c: 187:             break;
  1679  0010A8  EF76  F008         	goto	l4461
  1680  0010AC                     l4455:
  1681  0010AC  FFFF               	dw	65535	; assembler added errata NOP
  1682                           
  1683                           ;usart.c: 189:             mexLength = 1;
  1684  0010AE  0E01               	movlw	1
  1685  0010B0  6E6D               	movwf	storeData@mexLength^0,c
  1686                           
  1687                           ;usart.c: 190:             break;
  1688  0010B2  EF76  F008         	goto	l4461
  1689  0010B6                     l4459:
  1690  0010B6  FFFF               	dw	65535	; assembler added errata NOP
  1691  0010B8  5043               	movf	storeData@receivedMex^0,w,c
  1692  0010BA  6E19               	movwf	??_storeData^0,c
  1693  0010BC  6A1A               	clrf	(??_storeData+1)^0,c
  1694                           
  1695                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1696                           ; Switch size 1, requested type "simple"
  1697                           ; Number of cases is 1, Range of values is 0 to 0
  1698                           ; switch strategies available:
  1699                           ; Name         Instructions Cycles
  1700                           ; simple_byte            4     3 (average)
  1701                           ;	Chosen strategy is simple_byte
  1702  0010BE  501A               	movf	(??_storeData+1)^0,w,c
  1703  0010C0  0A00               	xorlw	0	; case 0
  1704  0010C2  B4D8               	btfsc	status,2,c
  1705  0010C4  EF66  F008         	goto	l4825
  1706  0010C8  EF76  F008         	goto	l4461
  1707  0010CC                     l4825:
  1708  0010CC  FFFF               	dw	65535	; assembler added errata NOP
  1709                           
  1710                           ; Switch size 1, requested type "simple"
  1711                           ; Number of cases is 3, Range of values is 0 to 2
  1712                           ; switch strategies available:
  1713                           ; Name         Instructions Cycles
  1714                           ; simple_byte           10     6 (average)
  1715                           ;	Chosen strategy is simple_byte
  1716  0010CE  5019               	movf	??_storeData^0,w,c
  1717  0010D0  0A00               	xorlw	0	; case 0
  1718  0010D2  B4D8               	btfsc	status,2,c
  1719  0010D4  EF4C  F008         	goto	l4451
  1720  0010D8  0A01               	xorlw	1	; case 1
  1721  0010DA  B4D8               	btfsc	status,2,c
  1722  0010DC  EF51  F008         	goto	l4453
  1723  0010E0  0A03               	xorlw	3	; case 2
  1724  0010E2  B4D8               	btfsc	status,2,c
  1725  0010E4  EF56  F008         	goto	l4455
  1726  0010E8  EF76  F008         	goto	l4461
  1727  0010EC                     l4461:
  1728  0010EC  FFFF               	dw	65535	; assembler added errata NOP
  1729                           
  1730                           ;usart.c: 197:     if(counter >= mexLength){
  1731  0010EE  506D               	movf	storeData@mexLength^0,w,c
  1732  0010F0  5C5A               	subwf	storeData@counter^0,w,c
  1733  0010F2  A0D8               	btfss	status,0,c
  1734  0010F4  EF7E  F008         	goto	u3951
  1735  0010F8  EF81  F008         	goto	u3950
  1736  0010FC                     u3951:
  1737  0010FC  FFFF               	dw	65535	; assembler added errata NOP
  1738  0010FE  EF72  F009         	goto	l604
  1739  001102                     u3950:
  1740  001102  FFFF               	dw	65535	; assembler added errata NOP
  1741  001104                     
  1742                           ;usart.c: 198:         counter = 0;
  1743  001104  0E00               	movlw	0
  1744  001106  6E5A               	movwf	storeData@counter^0,c
  1745                           
  1746                           ;usart.c: 201:         switch(receivedMex[0]){
  1747  001108  EF57  F009         	goto	l4497
  1748  00110C                     l4465:
  1749  00110C  FFFF               	dw	65535	; assembler added errata NOP
  1750                           
  1751                           ;usart.c: 203:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  1752  00110E  505D               	movf	_dataCounter^0,w,c
  1753  001110  0D04               	mullw	4
  1754  001112  0ECA               	movlw	low _dataSequence
  1755  001114  24F3               	addwf	243,w,c
  1756  001116  6ED9               	movwf	fsr2l,c
  1757  001118  0E00               	movlw	high _dataSequence
  1758  00111A  20F4               	addwfc	prodh,w,c
  1759  00111C  6EDA               	movwf	fsr2h,c
  1760  00111E  C044  FFDF         	movff	storeData@receivedMex+1,indf2
  1761                           
  1762                           ;usart.c: 204:                 dataSequence[dataCounter].posX = receivedMex[2] * 5;
  1763  001122  505D               	movf	_dataCounter^0,w,c
  1764  001124  0D04               	mullw	4
  1765  001126  0ECB               	movlw	low (_dataSequence+1)
  1766  001128  24F3               	addwf	243,w,c
  1767  00112A  6ED9               	movwf	fsr2l,c
  1768  00112C  0E00               	movlw	high (_dataSequence+1)
  1769  00112E  20F4               	addwfc	prodh,w,c
  1770  001130  6EDA               	movwf	fsr2h,c
  1771  001132  5045               	movf	(storeData@receivedMex+2)^0,w,c
  1772  001134  0D05               	mullw	5
  1773  001136  CFF3 FFDF          	movff	prodl,indf2
  1774                           
  1775                           ;usart.c: 205:                 dataSequence[dataCounter].posY = receivedMex[3] * 5;
  1776  00113A  505D               	movf	_dataCounter^0,w,c
  1777  00113C  0D04               	mullw	4
  1778  00113E  0ECC               	movlw	low (_dataSequence+2)
  1779  001140  24F3               	addwf	243,w,c
  1780  001142  6ED9               	movwf	fsr2l,c
  1781  001144  0E00               	movlw	high (_dataSequence+2)
  1782  001146  20F4               	addwfc	prodh,w,c
  1783  001148  6EDA               	movwf	fsr2h,c
  1784  00114A  5046               	movf	(storeData@receivedMex+3)^0,w,c
  1785  00114C  0D05               	mullw	5
  1786  00114E  CFF3 FFDF          	movff	prodl,indf2
  1787                           
  1788                           ;usart.c: 206:                 dataSequence[dataCounter].rotation = receivedMex[4];
  1789  001152  505D               	movf	_dataCounter^0,w,c
  1790  001154  0D04               	mullw	4
  1791  001156  0ECD               	movlw	low (_dataSequence+3)
  1792  001158  24F3               	addwf	243,w,c
  1793  00115A  6ED9               	movwf	fsr2l,c
  1794  00115C  0E00               	movlw	high (_dataSequence+3)
  1795  00115E  20F4               	addwfc	prodh,w,c
  1796  001160  6EDA               	movwf	fsr2h,c
  1797  001162  C047  FFDF         	movff	storeData@receivedMex+4,indf2
  1798                           
  1799                           ;usart.c: 209:                 if(dataSequence[dataCounter].posX > maxX ||
  1800  001166  505D               	movf	_dataCounter^0,w,c
  1801  001168  0D04               	mullw	4
  1802  00116A  0ECB               	movlw	low (_dataSequence+1)
  1803  00116C  24F3               	addwf	243,w,c
  1804  00116E  6ED9               	movwf	fsr2l,c
  1805  001170  0E00               	movlw	high (_dataSequence+1)
  1806  001172  20F4               	addwfc	prodh,w,c
  1807  001174  6EDA               	movwf	fsr2h,c
  1808  001176  50DF               	movf	indf2,w,c
  1809  001178  6E19               	movwf	??_storeData^0,c
  1810  00117A  6A1A               	clrf	(??_storeData+1)^0,c
  1811  00117C  5019               	movf	??_storeData^0,w,c
  1812  00117E  5C6B               	subwf	_maxX^0,w,c
  1813  001180  501A               	movf	(??_storeData+1)^0,w,c
  1814  001182  586C               	subwfb	(_maxX+1)^0,w,c
  1815  001184  A0D8               	btfss	status,0,c
  1816  001186  EFC7  F008         	goto	u3961
  1817  00118A  EFCA  F008         	goto	u3960
  1818  00118E                     u3961:
  1819  00118E  FFFF               	dw	65535	; assembler added errata NOP
  1820  001190  EFE1  F008         	goto	l4469
  1821  001194                     u3960:
  1822  001194  FFFF               	dw	65535	; assembler added errata NOP
  1823  001196  505D               	movf	_dataCounter^0,w,c
  1824  001198  0D04               	mullw	4
  1825  00119A  0ECC               	movlw	low (_dataSequence+2)
  1826  00119C  24F3               	addwf	243,w,c
  1827  00119E  6ED9               	movwf	fsr2l,c
  1828  0011A0  0E00               	movlw	high (_dataSequence+2)
  1829  0011A2  20F4               	addwfc	prodh,w,c
  1830  0011A4  6EDA               	movwf	fsr2h,c
  1831  0011A6  50DF               	movf	indf2,w,c
  1832  0011A8  6E19               	movwf	??_storeData^0,c
  1833  0011AA  5019               	movf	??_storeData^0,w,c
  1834  0011AC  5C69               	subwf	_maxY^0,w,c
  1835  0011AE  0E00               	movlw	0
  1836  0011B0  586A               	subwfb	(_maxY+1)^0,w,c
  1837  0011B2  B0D8               	btfsc	status,0,c
  1838  0011B4  EFDE  F008         	goto	u3971
  1839  0011B8  EFE1  F008         	goto	u3970
  1840  0011BC                     u3971:
  1841  0011BC  FFFF               	dw	65535	; assembler added errata NOP
  1842  0011BE  EFE7  F008         	goto	l4471
  1843  0011C2                     u3970:
  1844  0011C2                     l4469:
  1845  0011C2  FFFF               	dw	65535	; assembler added errata NOP
  1846                           
  1847                           ;usart.c: 210:                         dataSequence[dataCounter].posY > maxY){;usart.c: 
      +                          211:                     printError(5);
  1848  0011C4  0E05               	movlw	5
  1849  0011C6  EC09  F00E         	call	_printError
  1850                           
  1851                           ;usart.c: 212:                 }else{
  1852  0011CA  EF72  F009         	goto	l604
  1853  0011CE                     l4471:
  1854  0011CE  FFFF               	dw	65535	; assembler added errata NOP
  1855                           
  1856                           ;usart.c: 213:                     dataCounter++;
  1857  0011D0  2A5D               	incf	_dataCounter^0,f,c
  1858  0011D2  EF72  F009         	goto	l604
  1859  0011D6                     l597:
  1860  0011D6  FFFF               	dw	65535	; assembler added errata NOP
  1861                           
  1862                           ;usart.c: 218:                 newSequenceData.L = receivedMex[1];
  1863  0011D8  C044  F0DE         	movff	storeData@receivedMex+1,_newSequenceData
  1864                           
  1865                           ;usart.c: 219:                 newSequenceData.W = receivedMex[2];
  1866  0011DC  C045  F0DF         	movff	storeData@receivedMex+2,_newSequenceData+1
  1867  0011E0                     
  1868                           ;usart.c: 220:                 newSequenceData.init_posX = receivedMex[3] * 5;
  1869  0011E0  5046               	movf	(storeData@receivedMex+3)^0,w,c
  1870  0011E2  0D05               	mullw	5
  1871  0011E4  CFF3 F0E0          	movff	prodl,_newSequenceData+2
  1872                           
  1873                           ;usart.c: 221:                 newSequenceData.init_posY = receivedMex[4] * 5;
  1874  0011E8  5047               	movf	(storeData@receivedMex+4)^0,w,c
  1875  0011EA  0D05               	mullw	5
  1876  0011EC  CFF3 F0E1          	movff	prodl,_newSequenceData+3
  1877  0011F0                     
  1878                           ;usart.c: 222:                 newSequenceData.init_rot = receivedMex[5];
  1879  0011F0  C048  F0E2         	movff	storeData@receivedMex+5,_newSequenceData+4
  1880                           
  1881                           ;usart.c: 223:                 newSequenceData.end_posX = receivedMex[6] * 5;
  1882  0011F4  5049               	movf	(storeData@receivedMex+6)^0,w,c
  1883  0011F6  0D05               	mullw	5
  1884  0011F8  CFF3 F0E3          	movff	prodl,_newSequenceData+5
  1885                           
  1886                           ;usart.c: 224:                 newSequenceData.end_posY = receivedMex[7] * 5;
  1887  0011FC  504A               	movf	(storeData@receivedMex+7)^0,w,c
  1888  0011FE  0D05               	mullw	5
  1889  001200  CFF3 F0E4          	movff	prodl,_newSequenceData+6
  1890  001204                     
  1891                           ;usart.c: 225:                 newSequenceData.end_rot = receivedMex[8];
  1892  001204  C04B  F0E5         	movff	storeData@receivedMex+8,_newSequenceData+7
  1893  001208                     
  1894                           ;usart.c: 228:                 if(newSequenceData.init_posX > maxX ||
  1895  001208  0100               	movlb	0	; () banked
  1896  00120A  51E0               	movf	(_newSequenceData+2)& (0+255),w,b
  1897  00120C  6E19               	movwf	??_storeData^0,c
  1898  00120E  6A1A               	clrf	(??_storeData+1)^0,c
  1899  001210  5019               	movf	??_storeData^0,w,c
  1900  001212  5C6B               	subwf	_maxX^0,w,c
  1901  001214  501A               	movf	(??_storeData+1)^0,w,c
  1902  001216  586C               	subwfb	(_maxX+1)^0,w,c
  1903  001218  A0D8               	btfss	status,0,c
  1904  00121A  EF11  F009         	goto	u3981
  1905  00121E  EF14  F009         	goto	u3980
  1906  001222                     u3981:
  1907  001222  FFFF               	dw	65535	; assembler added errata NOP
  1908  001224  EF41  F009         	goto	l4487
  1909  001228                     u3980:
  1910  001228  FFFF               	dw	65535	; assembler added errata NOP
  1911  00122A                     
  1912                           ; BSR set to: 0
  1913  00122A  51E3               	movf	(_newSequenceData+5)& (0+255),w,b
  1914  00122C  6E19               	movwf	??_storeData^0,c
  1915  00122E  6A1A               	clrf	(??_storeData+1)^0,c
  1916  001230  5019               	movf	??_storeData^0,w,c
  1917  001232  5C6B               	subwf	_maxX^0,w,c
  1918  001234  501A               	movf	(??_storeData+1)^0,w,c
  1919  001236  586C               	subwfb	(_maxX+1)^0,w,c
  1920  001238  A0D8               	btfss	status,0,c
  1921  00123A  EF21  F009         	goto	u3991
  1922  00123E  EF24  F009         	goto	u3990
  1923  001242                     u3991:
  1924  001242  FFFF               	dw	65535	; assembler added errata NOP
  1925  001244  EF41  F009         	goto	l4487
  1926  001248                     u3990:
  1927  001248  FFFF               	dw	65535	; assembler added errata NOP
  1928  00124A                     
  1929                           ; BSR set to: 0
  1930  00124A  51E1               	movf	(_newSequenceData+3)& (0+255),w,b
  1931  00124C  6E19               	movwf	??_storeData^0,c
  1932  00124E  6A1A               	clrf	(??_storeData+1)^0,c
  1933  001250  5019               	movf	??_storeData^0,w,c
  1934  001252  5C69               	subwf	_maxY^0,w,c
  1935  001254  501A               	movf	(??_storeData+1)^0,w,c
  1936  001256  586A               	subwfb	(_maxY+1)^0,w,c
  1937  001258  A0D8               	btfss	status,0,c
  1938  00125A  EF31  F009         	goto	u4001
  1939  00125E  EF34  F009         	goto	u4000
  1940  001262                     u4001:
  1941  001262  FFFF               	dw	65535	; assembler added errata NOP
  1942  001264  EF41  F009         	goto	l4487
  1943  001268                     u4000:
  1944  001268  FFFF               	dw	65535	; assembler added errata NOP
  1945  00126A                     
  1946                           ; BSR set to: 0
  1947  00126A  51E4               	movf	(_newSequenceData+6)& (0+255),w,b
  1948  00126C  5C69               	subwf	_maxY^0,w,c
  1949  00126E  0E00               	movlw	0
  1950  001270  586A               	subwfb	(_maxY+1)^0,w,c
  1951  001272  B0D8               	btfsc	status,0,c
  1952  001274  EF3E  F009         	goto	u4011
  1953  001278  EF41  F009         	goto	u4010
  1954  00127C                     u4011:
  1955  00127C  FFFF               	dw	65535	; assembler added errata NOP
  1956  00127E  EF47  F009         	goto	l4489
  1957  001282                     u4010:
  1958  001282                     l4487:
  1959  001282  FFFF               	dw	65535	; assembler added errata NOP
  1960                           
  1961                           ; BSR set to: 0
  1962                           ;usart.c: 231:                         newSequenceData.end_posY > maxY){;usart.c: 232:  
      +                                             printError(5);
  1963  001284  0E05               	movlw	5
  1964  001286  EC09  F00E         	call	_printError
  1965                           
  1966                           ;usart.c: 233:                 }else{
  1967  00128A  EF72  F009         	goto	l604
  1968  00128E                     l4489:
  1969  00128E  FFFF               	dw	65535	; assembler added errata NOP
  1970                           
  1971                           ; BSR set to: 0
  1972                           ;usart.c: 234:                     _newSequence = 1;
  1973  001290  0E01               	movlw	1
  1974  001292  6E5B               	movwf	__newSequence^0,c
  1975  001294  EF72  F009         	goto	l604
  1976  001298                     l4491:
  1977  001298  FFFF               	dw	65535	; assembler added errata NOP
  1978                           
  1979                           ;usart.c: 239:                 _fatalError = 1;
  1980  00129A  0E01               	movlw	1
  1981  00129C  6E5C               	movwf	__fatalError^0,c
  1982                           
  1983                           ;usart.c: 240:                 break;
  1984  00129E  EF72  F009         	goto	l604
  1985  0012A2                     l4493:
  1986  0012A2  FFFF               	dw	65535	; assembler added errata NOP
  1987                           
  1988                           ;usart.c: 243:                 printError(8);
  1989  0012A4  0E08               	movlw	8
  1990  0012A6  EC09  F00E         	call	_printError
  1991                           
  1992                           ;usart.c: 244:                 break;
  1993  0012AA  EF72  F009         	goto	l604
  1994  0012AE                     l4497:
  1995  0012AE  FFFF               	dw	65535	; assembler added errata NOP
  1996  0012B0  5043               	movf	storeData@receivedMex^0,w,c
  1997  0012B2  6E19               	movwf	??_storeData^0,c
  1998  0012B4  6A1A               	clrf	(??_storeData+1)^0,c
  1999                           
  2000                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2001                           ; Switch size 1, requested type "simple"
  2002                           ; Number of cases is 1, Range of values is 0 to 0
  2003                           ; switch strategies available:
  2004                           ; Name         Instructions Cycles
  2005                           ; simple_byte            4     3 (average)
  2006                           ;	Chosen strategy is simple_byte
  2007  0012B6  501A               	movf	(??_storeData+1)^0,w,c
  2008  0012B8  0A00               	xorlw	0	; case 0
  2009  0012BA  B4D8               	btfsc	status,2,c
  2010  0012BC  EF62  F009         	goto	l4827
  2011  0012C0  EF51  F009         	goto	l4493
  2012  0012C4                     l4827:
  2013  0012C4  FFFF               	dw	65535	; assembler added errata NOP
  2014                           
  2015                           ; Switch size 1, requested type "simple"
  2016                           ; Number of cases is 3, Range of values is 0 to 2
  2017                           ; switch strategies available:
  2018                           ; Name         Instructions Cycles
  2019                           ; simple_byte           10     6 (average)
  2020                           ;	Chosen strategy is simple_byte
  2021  0012C6  5019               	movf	??_storeData^0,w,c
  2022  0012C8  0A00               	xorlw	0	; case 0
  2023  0012CA  B4D8               	btfsc	status,2,c
  2024  0012CC  EF86  F008         	goto	l4465
  2025  0012D0  0A01               	xorlw	1	; case 1
  2026  0012D2  B4D8               	btfsc	status,2,c
  2027  0012D4  EFEB  F008         	goto	l597
  2028  0012D8  0A03               	xorlw	3	; case 2
  2029  0012DA  B4D8               	btfsc	status,2,c
  2030  0012DC  EF4C  F009         	goto	l4491
  2031  0012E0  EF51  F009         	goto	l4493
  2032  0012E4                     l604:
  2033  0012E4  FFFF               	dw	65535	; assembler added errata NOP
  2034  0012E6  0012               	return		;funcret
  2035  0012E8  FFFF               	dw	65535	; errata NOP
  2036  0012EA                     __end_of_storeData:
  2037                           	callstack 0
  2038                           
  2039 ;; *************** function _printError *****************
  2040 ;; Defined at:
  2041 ;;		line 114 in file "usart.c"
  2042 ;; Parameters:    Size  Location     Type
  2043 ;;  errCode         1    wreg     unsigned char 
  2044 ;; Auto vars:     Size  Location     Type
  2045 ;;  errCode         1   23[COMRAM] unsigned char 
  2046 ;; Return value:  Size  Location     Type
  2047 ;;                  1    wreg      void 
  2048 ;; Registers used:
  2049 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2050 ;; Tracked objects:
  2051 ;;		On entry : 0/0
  2052 ;;		On exit  : 0/0
  2053 ;;		Unchanged: 0/0
  2054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2055 ;;      Params:         0       0       0       0       0       0       0
  2056 ;;      Locals:         1       0       0       0       0       0       0
  2057 ;;      Temps:          2       0       0       0       0       0       0
  2058 ;;      Totals:         3       0       0       0       0       0       0
  2059 ;;Total ram usage:        3 bytes
  2060 ;; Hardware stack levels used:    1
  2061 ;; Hardware stack levels required when called:    5
  2062 ;; This function calls:
  2063 ;;		_uartTx
  2064 ;; This function is called by:
  2065 ;;		_main
  2066 ;;		_storeData
  2067 ;; This function uses a non-reentrant model
  2068 ;;
  2069                           
  2070                           	psect	text6
  2071  001C12                     __ptext6:
  2072                           	callstack 0
  2073  001C12                     _printError:
  2074                           	callstack 0
  2075  001C12  FFFF               	dw	65535	; assembler added errata NOP
  2076                           
  2077                           ;incstack = 0
  2078                           ;printError@errCode stored from wreg
  2079  001C14  6E18               	movwf	printError@errCode^0,c
  2080  001C16                     
  2081                           ;usart.c: 116:     switch(errCode){
  2082  001C16  EF65  F00E         	goto	l4307
  2083  001C1A                     l4289:
  2084  001C1A  FFFF               	dw	65535	; assembler added errata NOP
  2085                           
  2086                           ;usart.c: 118:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  2087  001C1C  0E90               	movlw	low _errString_Feed
  2088  001C1E  6E12               	movwf	uartTx@ptr^0,c
  2089  001C20  0E00               	movlw	high _errString_Feed
  2090  001C22  6E13               	movwf	(uartTx@ptr+1)^0,c
  2091  001C24  0E1E               	movlw	30
  2092  001C26  6E14               	movwf	uartTx@length^0,c
  2093  001C28  EC02  F012         	call	_uartTx	;wreg free
  2094                           
  2095                           ;usart.c: 119:             break;
  2096  001C2C  EF94  F00E         	goto	l563
  2097  001C30                     l4291:
  2098  001C30  FFFF               	dw	65535	; assembler added errata NOP
  2099                           
  2100                           ;usart.c: 121:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  2101  001C32  0E5E               	movlw	low _errString_ZEND
  2102  001C34  6E12               	movwf	uartTx@ptr^0,c
  2103  001C36  0E01               	movlw	high _errString_ZEND
  2104  001C38  6E13               	movwf	(uartTx@ptr+1)^0,c
  2105  001C3A  0E29               	movlw	41
  2106  001C3C  6E14               	movwf	uartTx@length^0,c
  2107  001C3E  EC02  F012         	call	_uartTx	;wreg free
  2108                           
  2109                           ;usart.c: 122:             break;
  2110  001C42  EF94  F00E         	goto	l563
  2111  001C46                     l4293:
  2112  001C46  FFFF               	dw	65535	; assembler added errata NOP
  2113                           
  2114                           ;usart.c: 124:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  2115  001C48  0E87               	movlw	low _errString_Reset
  2116  001C4A  6E12               	movwf	uartTx@ptr^0,c
  2117  001C4C  0E01               	movlw	high _errString_Reset
  2118  001C4E  6E13               	movwf	(uartTx@ptr+1)^0,c
  2119  001C50  0E28               	movlw	40
  2120  001C52  6E14               	movwf	uartTx@length^0,c
  2121  001C54  EC02  F012         	call	_uartTx	;wreg free
  2122                           
  2123                           ;usart.c: 125:             break;
  2124  001C58  EF94  F00E         	goto	l563
  2125  001C5C                     l4295:
  2126  001C5C  FFFF               	dw	65535	; assembler added errata NOP
  2127                           
  2128                           ;usart.c: 127:             uartTx(&errString_Point[0], sizeof(errString_Point));
  2129  001C5E  0E35               	movlw	low _errString_Point
  2130  001C60  6E12               	movwf	uartTx@ptr^0,c
  2131  001C62  0E01               	movlw	high _errString_Point
  2132  001C64  6E13               	movwf	(uartTx@ptr+1)^0,c
  2133  001C66  0E29               	movlw	41
  2134  001C68  6E14               	movwf	uartTx@length^0,c
  2135  001C6A  EC02  F012         	call	_uartTx	;wreg free
  2136                           
  2137                           ;usart.c: 128:             break;
  2138  001C6E  EF94  F00E         	goto	l563
  2139  001C72                     l4297:
  2140  001C72  FFFF               	dw	65535	; assembler added errata NOP
  2141                           
  2142                           ;usart.c: 130:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  2143  001C74  0ED6               	movlw	low _errString_Bound
  2144  001C76  6E12               	movwf	uartTx@ptr^0,c
  2145  001C78  0E01               	movlw	high _errString_Bound
  2146  001C7A  6E13               	movwf	(uartTx@ptr+1)^0,c
  2147  001C7C  0E21               	movlw	33
  2148  001C7E  6E14               	movwf	uartTx@length^0,c
  2149  001C80  EC02  F012         	call	_uartTx	;wreg free
  2150                           
  2151                           ;usart.c: 131:             break;
  2152  001C84  EF94  F00E         	goto	l563
  2153  001C88                     l4299:
  2154  001C88  FFFF               	dw	65535	; assembler added errata NOP
  2155                           
  2156                           ;usart.c: 133:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  2157  001C8A  0E00               	movlw	low _errString_PointZ
  2158  001C8C  6E12               	movwf	uartTx@ptr^0,c
  2159  001C8E  0E01               	movlw	high _errString_PointZ
  2160  001C90  6E13               	movwf	(uartTx@ptr+1)^0,c
  2161  001C92  0E35               	movlw	53
  2162  001C94  6E14               	movwf	uartTx@length^0,c
  2163  001C96  EC02  F012         	call	_uartTx	;wreg free
  2164                           
  2165                           ;usart.c: 134:             break;
  2166  001C9A  EF94  F00E         	goto	l563
  2167  001C9E                     l4301:
  2168  001C9E  FFFF               	dw	65535	; assembler added errata NOP
  2169                           
  2170                           ;usart.c: 136:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  2171  001CA0  0EAF               	movlw	low _errString_Fatal
  2172  001CA2  6E12               	movwf	uartTx@ptr^0,c
  2173  001CA4  0E01               	movlw	high _errString_Fatal
  2174  001CA6  6E13               	movwf	(uartTx@ptr+1)^0,c
  2175  001CA8  0E27               	movlw	39
  2176  001CAA  6E14               	movwf	uartTx@length^0,c
  2177  001CAC  EC02  F012         	call	_uartTx	;wreg free
  2178                           
  2179                           ;usart.c: 137:             break;
  2180  001CB0  EF94  F00E         	goto	l563
  2181  001CB4                     l4303:
  2182  001CB4  FFFF               	dw	65535	; assembler added errata NOP
  2183                           
  2184                           ;usart.c: 139:             uartTx(&errString_Command[0], sizeof(errString_Command));
  2185  001CB6  0EAE               	movlw	low _errString_Command
  2186  001CB8  6E12               	movwf	uartTx@ptr^0,c
  2187  001CBA  0E00               	movlw	high _errString_Command
  2188  001CBC  6E13               	movwf	(uartTx@ptr+1)^0,c
  2189  001CBE  0E18               	movlw	24
  2190  001CC0  6E14               	movwf	uartTx@length^0,c
  2191  001CC2  EC02  F012         	call	_uartTx	;wreg free
  2192                           
  2193                           ;usart.c: 140:             break;
  2194  001CC6  EF94  F00E         	goto	l563
  2195  001CCA                     l4307:
  2196  001CCA  FFFF               	dw	65535	; assembler added errata NOP
  2197  001CCC  5018               	movf	printError@errCode^0,w,c
  2198  001CCE  6E16               	movwf	??_printError^0,c
  2199  001CD0  6A17               	clrf	(??_printError+1)^0,c
  2200                           
  2201                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2202                           ; Switch size 1, requested type "simple"
  2203                           ; Number of cases is 1, Range of values is 0 to 0
  2204                           ; switch strategies available:
  2205                           ; Name         Instructions Cycles
  2206                           ; simple_byte            4     3 (average)
  2207                           ;	Chosen strategy is simple_byte
  2208  001CD2  5017               	movf	(??_printError+1)^0,w,c
  2209  001CD4  0A00               	xorlw	0	; case 0
  2210  001CD6  B4D8               	btfsc	status,2,c
  2211  001CD8  EF70  F00E         	goto	l4829
  2212  001CDC  EF94  F00E         	goto	l563
  2213  001CE0                     l4829:
  2214  001CE0  FFFF               	dw	65535	; assembler added errata NOP
  2215                           
  2216                           ; Switch size 1, requested type "simple"
  2217                           ; Number of cases is 8, Range of values is 1 to 8
  2218                           ; switch strategies available:
  2219                           ; Name         Instructions Cycles
  2220                           ; simple_byte           25    13 (average)
  2221                           ;	Chosen strategy is simple_byte
  2222  001CE2  5016               	movf	??_printError^0,w,c
  2223  001CE4  0A01               	xorlw	1	; case 1
  2224  001CE6  B4D8               	btfsc	status,2,c
  2225  001CE8  EF0D  F00E         	goto	l4289
  2226  001CEC  0A03               	xorlw	3	; case 2
  2227  001CEE  B4D8               	btfsc	status,2,c
  2228  001CF0  EF18  F00E         	goto	l4291
  2229  001CF4  0A01               	xorlw	1	; case 3
  2230  001CF6  B4D8               	btfsc	status,2,c
  2231  001CF8  EF23  F00E         	goto	l4293
  2232  001CFC  0A07               	xorlw	7	; case 4
  2233  001CFE  B4D8               	btfsc	status,2,c
  2234  001D00  EF2E  F00E         	goto	l4295
  2235  001D04  0A01               	xorlw	1	; case 5
  2236  001D06  B4D8               	btfsc	status,2,c
  2237  001D08  EF39  F00E         	goto	l4297
  2238  001D0C  0A03               	xorlw	3	; case 6
  2239  001D0E  B4D8               	btfsc	status,2,c
  2240  001D10  EF44  F00E         	goto	l4299
  2241  001D14  0A01               	xorlw	1	; case 7
  2242  001D16  B4D8               	btfsc	status,2,c
  2243  001D18  EF4F  F00E         	goto	l4301
  2244  001D1C  0A0F               	xorlw	15	; case 8
  2245  001D1E  B4D8               	btfsc	status,2,c
  2246  001D20  EF5A  F00E         	goto	l4303
  2247  001D24  EF94  F00E         	goto	l563
  2248  001D28                     l563:
  2249  001D28  FFFF               	dw	65535	; assembler added errata NOP
  2250  001D2A  0012               	return		;funcret
  2251  001D2C  FFFF               	dw	65535	; errata NOP
  2252  001D2E                     __end_of_printError:
  2253                           	callstack 0
  2254                           
  2255 ;; *************** function _uartTx *****************
  2256 ;; Defined at:
  2257 ;;		line 151 in file "usart.c"
  2258 ;; Parameters:    Size  Location     Type
  2259 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  2260 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  2261 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  2262 ;;  length          1   19[COMRAM] unsigned char 
  2263 ;; Auto vars:     Size  Location     Type
  2264 ;;  i               1   20[COMRAM] unsigned char 
  2265 ;; Return value:  Size  Location     Type
  2266 ;;                  1    wreg      void 
  2267 ;; Registers used:
  2268 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2269 ;; Tracked objects:
  2270 ;;		On entry : 0/0
  2271 ;;		On exit  : 0/0
  2272 ;;		Unchanged: 0/0
  2273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2274 ;;      Params:         3       0       0       0       0       0       0
  2275 ;;      Locals:         1       0       0       0       0       0       0
  2276 ;;      Temps:          0       0       0       0       0       0       0
  2277 ;;      Totals:         4       0       0       0       0       0       0
  2278 ;;Total ram usage:        4 bytes
  2279 ;; Hardware stack levels used:    1
  2280 ;; Hardware stack levels required when called:    4
  2281 ;; This function calls:
  2282 ;;		Nothing
  2283 ;; This function is called by:
  2284 ;;		_printError
  2285 ;; This function uses a non-reentrant model
  2286 ;;
  2287                           
  2288                           	psect	text7
  2289  002404                     __ptext7:
  2290                           	callstack 0
  2291  002404                     _uartTx:
  2292                           	callstack 0
  2293  002404  FFFF               	dw	65535	; assembler added errata NOP
  2294  002406                     
  2295                           ;usart.c: 151: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 152: {;usa
      +                          rt.c: 154:     for(char i = 1; i < length; i++){
  2296  002406  0E01               	movlw	1
  2297  002408  6E15               	movwf	uartTx@i^0,c
  2298  00240A  EF1B  F012         	goto	l3793
  2299  00240E                     l3789:
  2300  00240E  FFFF               	dw	65535	; assembler added errata NOP
  2301                           
  2302                           ;usart.c: 156:         TXREG = *ptr;
  2303  002410  C012  FFD9         	movff	uartTx@ptr,fsr2l
  2304  002414  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  2305  002418  50DF               	movf	indf2,w,c
  2306  00241A  6EAD               	movwf	173,c	;volatile
  2307  00241C                     l568:
  2308  00241C  FFFF               	dw	65535	; assembler added errata NOP
  2309  00241E  A2AC               	btfss	172,1,c	;volatile
  2310  002420  EF14  F012         	goto	u2941
  2311  002424  EF17  F012         	goto	u2940
  2312  002428                     u2941:
  2313  002428  FFFF               	dw	65535	; assembler added errata NOP
  2314  00242A  EF0E  F012         	goto	l568
  2315  00242E                     u2940:
  2316  00242E  FFFF               	dw	65535	; assembler added errata NOP
  2317  002430                     
  2318                           ;usart.c: 160:         ptr++;
  2319  002430  4A12               	infsnz	uartTx@ptr^0,f,c
  2320  002432  2A13               	incf	(uartTx@ptr+1)^0,f,c
  2321                           
  2322                           ;usart.c: 161:     }
  2323  002434  2A15               	incf	uartTx@i^0,f,c
  2324  002436                     l3793:
  2325  002436  FFFF               	dw	65535	; assembler added errata NOP
  2326  002438  5014               	movf	uartTx@length^0,w,c
  2327  00243A  5C15               	subwf	uartTx@i^0,w,c
  2328  00243C  A0D8               	btfss	status,0,c
  2329  00243E  EF23  F012         	goto	u2951
  2330  002442  EF26  F012         	goto	u2950
  2331  002446                     u2951:
  2332  002446  FFFF               	dw	65535	; assembler added errata NOP
  2333  002448  EF07  F012         	goto	l3789
  2334  00244C                     u2950:
  2335  00244C  FFFF               	dw	65535	; assembler added errata NOP
  2336  00244E  0012               	return		;funcret
  2337  002450  FFFF               	dw	65535	; errata NOP
  2338  002452                     __end_of_uartTx:
  2339                           	callstack 0
  2340                           
  2341 ;; *************** function _shiftData *****************
  2342 ;; Defined at:
  2343 ;;		line 84 in file "usart.c"
  2344 ;; Parameters:    Size  Location     Type
  2345 ;;		None
  2346 ;; Auto vars:     Size  Location     Type
  2347 ;;  i               1   19[COMRAM] unsigned char 
  2348 ;; Return value:  Size  Location     Type
  2349 ;;                  1    wreg      void 
  2350 ;; Registers used:
  2351 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2352 ;; Tracked objects:
  2353 ;;		On entry : 0/0
  2354 ;;		On exit  : 0/0
  2355 ;;		Unchanged: 0/0
  2356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2357 ;;      Params:         0       0       0       0       0       0       0
  2358 ;;      Locals:         1       0       0       0       0       0       0
  2359 ;;      Temps:          2       0       0       0       0       0       0
  2360 ;;      Totals:         3       0       0       0       0       0       0
  2361 ;;Total ram usage:        3 bytes
  2362 ;; Hardware stack levels used:    1
  2363 ;; Hardware stack levels required when called:    4
  2364 ;; This function calls:
  2365 ;;		Nothing
  2366 ;; This function is called by:
  2367 ;;		_main
  2368 ;; This function uses a non-reentrant model
  2369 ;;
  2370                           
  2371                           	psect	text8
  2372  0023A4                     __ptext8:
  2373                           	callstack 0
  2374  0023A4                     _shiftData:
  2375                           	callstack 0
  2376  0023A4  FFFF               	dw	65535	; assembler added errata NOP
  2377  0023A6                     
  2378                           ;usart.c: 85:     char i;;usart.c: 87:     for(i = 0; i < 4; i++){
  2379  0023A6  0E00               	movlw	0
  2380  0023A8  6E14               	movwf	shiftData@i^0,c
  2381  0023AA                     l4617:
  2382  0023AA  FFFF               	dw	65535	; assembler added errata NOP
  2383                           
  2384                           ;usart.c: 88:         dataSequence[i] = dataSequence[i+1];
  2385  0023AC  5014               	movf	shiftData@i^0,w,c
  2386  0023AE  6E12               	movwf	??_shiftData^0,c
  2387  0023B0  6A13               	clrf	(??_shiftData+1)^0,c
  2388  0023B2  90D8               	bcf	status,0,c
  2389  0023B4  3612               	rlcf	??_shiftData^0,f,c
  2390  0023B6  3613               	rlcf	(??_shiftData+1)^0,f,c
  2391  0023B8  90D8               	bcf	status,0,c
  2392  0023BA  3612               	rlcf	??_shiftData^0,f,c
  2393  0023BC  3613               	rlcf	(??_shiftData+1)^0,f,c
  2394  0023BE  0ECE               	movlw	low (_dataSequence+4)
  2395  0023C0  2412               	addwf	??_shiftData^0,w,c
  2396  0023C2  6ED9               	movwf	fsr2l,c
  2397  0023C4  0E00               	movlw	high (_dataSequence+4)
  2398  0023C6  2013               	addwfc	(??_shiftData+1)^0,w,c
  2399  0023C8  6EDA               	movwf	fsr2h,c
  2400  0023CA  5014               	movf	shiftData@i^0,w,c
  2401  0023CC  0D04               	mullw	4
  2402  0023CE  0ECA               	movlw	low _dataSequence
  2403  0023D0  24F3               	addwf	243,w,c
  2404  0023D2  6EE1               	movwf	fsr1l,c
  2405  0023D4  0E00               	movlw	high _dataSequence
  2406  0023D6  20F4               	addwfc	prodh,w,c
  2407  0023D8  6EE2               	movwf	fsr1h,c
  2408  0023DA  CFDE FFE6          	movff	postinc2,postinc1
  2409  0023DE  CFDE FFE6          	movff	postinc2,postinc1
  2410  0023E2  CFDE FFE6          	movff	postinc2,postinc1
  2411  0023E6  CFDE FFE6          	movff	postinc2,postinc1
  2412  0023EA                     
  2413                           ;usart.c: 89:     }
  2414  0023EA  2A14               	incf	shiftData@i^0,f,c
  2415  0023EC  0E03               	movlw	3
  2416  0023EE  6414               	cpfsgt	shiftData@i^0,c
  2417  0023F0  EFFC  F011         	goto	u4081
  2418  0023F4  EFFF  F011         	goto	u4080
  2419  0023F8                     u4081:
  2420  0023F8  FFFF               	dw	65535	; assembler added errata NOP
  2421  0023FA  EFD5  F011         	goto	l4617
  2422  0023FE                     u4080:
  2423  0023FE  FFFF               	dw	65535	; assembler added errata NOP
  2424  002400  0012               	return		;funcret
  2425  002402  FFFF               	dw	65535	; errata NOP
  2426  002404                     __end_of_shiftData:
  2427                           	callstack 0
  2428                           
  2429 ;; *************** function _resetPosition *****************
  2430 ;; Defined at:
  2431 ;;		line 162 in file "motors.c"
  2432 ;; Parameters:    Size  Location     Type
  2433 ;;		None
  2434 ;; Auto vars:     Size  Location     Type
  2435 ;;  keepMovingZ     1   22[COMRAM] unsigned char 
  2436 ;;  keepMovingY     1   21[COMRAM] unsigned char 
  2437 ;;  keepMovingX     1   20[COMRAM] unsigned char 
  2438 ;; Return value:  Size  Location     Type
  2439 ;;                  1    wreg      unsigned char 
  2440 ;; Registers used:
  2441 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2442 ;; Tracked objects:
  2443 ;;		On entry : 0/0
  2444 ;;		On exit  : 0/0
  2445 ;;		Unchanged: 0/0
  2446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2447 ;;      Params:         0       0       0       0       0       0       0
  2448 ;;      Locals:         3       0       0       0       0       0       0
  2449 ;;      Temps:          0       0       0       0       0       0       0
  2450 ;;      Totals:         3       0       0       0       0       0       0
  2451 ;;Total ram usage:        3 bytes
  2452 ;; Hardware stack levels used:    1
  2453 ;; Hardware stack levels required when called:    5
  2454 ;; This function calls:
  2455 ;;		_resetStep
  2456 ;;		_resetTM0_Temp
  2457 ;;		_resetTM2_Temp
  2458 ;;		_stepMade
  2459 ;; This function is called by:
  2460 ;;		_main
  2461 ;; This function uses a non-reentrant model
  2462 ;;
  2463                           
  2464                           	psect	text9
  2465  00174E                     __ptext9:
  2466                           	callstack 0
  2467  00174E                     _resetPosition:
  2468                           	callstack 0
  2469  00174E  FFFF               	dw	65535	; assembler added errata NOP
  2470  001750                     
  2471                           ;motors.c: 182:     motCounter[0][1] = -1;
  2472  001750  6864               	setf	(_motCounter+1)^0,c
  2473                           
  2474                           ;motors.c: 183:     motCounter[1][1] = -1;
  2475  001752  6866               	setf	(_motCounter+3)^0,c
  2476                           
  2477                           ;motors.c: 184:     motCounter[2][1] = -1;
  2478  001754  6868               	setf	(_motCounter+5)^0,c
  2479  001756                     
  2480                           ;motors.c: 189:     unsigned char keepMovingX = 1;
  2481  001756  0E01               	movlw	1
  2482  001758  6E15               	movwf	resetPosition@keepMovingX^0,c
  2483                           
  2484                           ;motors.c: 190:     unsigned char keepMovingY = 1;
  2485  00175A  0E01               	movlw	1
  2486  00175C  6E16               	movwf	resetPosition@keepMovingY^0,c
  2487                           
  2488                           ;motors.c: 191:     unsigned char keepMovingZ = 1;
  2489  00175E  0E01               	movlw	1
  2490  001760  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2491  001762                     
  2492                           ;motors.c: 194:     T2CONbits.TMR2ON = 1;
  2493  001762  84CA               	bsf	202,2,c	;volatile
  2494                           
  2495                           ;motors.c: 196:     tm0Error = 0;
  2496  001764  0E00               	movlw	0
  2497  001766  6E56               	movwf	(_tm0Error+1)^0,c
  2498  001768  0E00               	movlw	0
  2499  00176A  6E55               	movwf	_tm0Error^0,c
  2500                           
  2501                           ;motors.c: 197:     tm0Limit = 200;
  2502  00176C  0EC8               	movlw	200
  2503  00176E  6E62               	movwf	_tm0Limit^0,c
  2504  001770                     
  2505                           ;motors.c: 198:     T0CONbits.TMR0ON = 1;
  2506  001770  8ED5               	bsf	213,7,c	;volatile
  2507                           
  2508                           ;motors.c: 200:     while(keepMovingX || keepMovingY || keepMovingZ){
  2509  001772  EF69  F00C         	goto	l4387
  2510  001776                     l4345:
  2511  001776  FFFF               	dw	65535	; assembler added errata NOP
  2512                           
  2513                           ;motors.c: 202:         resetStep();
  2514  001778  EC80  F013         	call	_resetStep	;wreg free
  2515  00177C                     
  2516                           ;motors.c: 205:         if(tm0Error){
  2517  00177C  5055               	movf	_tm0Error^0,w,c
  2518  00177E  1056               	iorwf	(_tm0Error+1)^0,w,c
  2519  001780  B4D8               	btfsc	status,2,c
  2520  001782  EFC5  F00B         	goto	u3791
  2521  001786  EFC8  F00B         	goto	u3790
  2522  00178A                     u3791:
  2523  00178A  FFFF               	dw	65535	; assembler added errata NOP
  2524  00178C  EFCF  F00B         	goto	l131
  2525  001790                     u3790:
  2526  001790  FFFF               	dw	65535	; assembler added errata NOP
  2527  001792                     
  2528                           ;motors.c: 213:             tm0Error = 3;
  2529  001792  0E00               	movlw	0
  2530  001794  6E56               	movwf	(_tm0Error+1)^0,c
  2531  001796  0E03               	movlw	3
  2532  001798  6E55               	movwf	_tm0Error^0,c
  2533                           
  2534                           ;motors.c: 214:             break;
  2535  00179A  EF87  F00C         	goto	l132
  2536  00179E                     l131:
  2537  00179E  FFFF               	dw	65535	; assembler added errata NOP
  2538                           
  2539                           ;motors.c: 221:         if(PORTEbits.RE0 || !keepMovingX){
  2540  0017A0  B084               	btfsc	132,0,c	;volatile
  2541  0017A2  EFD5  F00B         	goto	u3801
  2542  0017A6  EFD8  F00B         	goto	u3800
  2543  0017AA                     u3801:
  2544  0017AA  FFFF               	dw	65535	; assembler added errata NOP
  2545  0017AC  EFE2  F00B         	goto	l4353
  2546  0017B0                     u3800:
  2547  0017B0  FFFF               	dw	65535	; assembler added errata NOP
  2548  0017B2  5015               	movf	resetPosition@keepMovingX^0,w,c
  2549  0017B4  A4D8               	btfss	status,2,c
  2550  0017B6  EFDF  F00B         	goto	u3811
  2551  0017BA  EFE2  F00B         	goto	u3810
  2552  0017BE                     u3811:
  2553  0017BE  FFFF               	dw	65535	; assembler added errata NOP
  2554  0017C0  EFE7  F00B         	goto	l4355
  2555  0017C4                     u3810:
  2556  0017C4                     l4353:
  2557  0017C4  FFFF               	dw	65535	; assembler added errata NOP
  2558                           
  2559                           ;motors.c: 223:             keepMovingX = 0;
  2560  0017C6  0E00               	movlw	0
  2561  0017C8  6E15               	movwf	resetPosition@keepMovingX^0,c
  2562                           
  2563                           ;motors.c: 224:         }else{
  2564  0017CA  EFFE  F00B         	goto	l4361
  2565  0017CE                     l4355:
  2566  0017CE  FFFF               	dw	65535	; assembler added errata NOP
  2567                           
  2568                           ;motors.c: 230:             motCounter[0][0] += motCounter[0][1];
  2569  0017D0  5064               	movf	(_motCounter+1)^0,w,c
  2570  0017D2  2663               	addwf	_motCounter^0,f,c
  2571                           
  2572                           ;motors.c: 231:             if(motCounter[0][0] < 0){
  2573  0017D4  BE63               	btfsc	_motCounter^0,7,c
  2574  0017D6  EFF2  F00B         	goto	u3820
  2575  0017DA  EFEF  F00B         	goto	u3821
  2576  0017DE                     u3821:
  2577  0017DE  FFFF               	dw	65535	; assembler added errata NOP
  2578  0017E0  EFF5  F00B         	goto	l4359
  2579  0017E4                     u3820:
  2580  0017E4  FFFF               	dw	65535	; assembler added errata NOP
  2581  0017E6                     
  2582                           ;motors.c: 232:                 motCounter[0][0] = 3;
  2583  0017E6  0E03               	movlw	3
  2584  0017E8  6E63               	movwf	_motCounter^0,c
  2585  0017EA                     l4359:
  2586  0017EA  FFFF               	dw	65535	; assembler added errata NOP
  2587                           
  2588                           ;motors.c: 235:             LATA = stepMot1[motCounter[0][0]];
  2589  0017EC  0E8C               	movlw	low _stepMot1
  2590  0017EE  2463               	addwf	_motCounter^0,w,c
  2591  0017F0  6ED9               	movwf	fsr2l,c
  2592  0017F2  6ADA               	clrf	fsr2h,c
  2593  0017F4  0E00               	movlw	high _stepMot1
  2594  0017F6  22DA               	addwfc	fsr2h,f,c
  2595  0017F8  50DF               	movf	indf2,w,c
  2596  0017FA  6E89               	movwf	137,c	;volatile
  2597  0017FC                     l4361:
  2598  0017FC  FFFF               	dw	65535	; assembler added errata NOP
  2599                           
  2600                           ;motors.c: 240:         if(PORTEbits.RE1 || !keepMovingY){
  2601  0017FE  B284               	btfsc	132,1,c	;volatile
  2602  001800  EF04  F00C         	goto	u3831
  2603  001804  EF07  F00C         	goto	u3830
  2604  001808                     u3831:
  2605  001808  FFFF               	dw	65535	; assembler added errata NOP
  2606  00180A  EF11  F00C         	goto	l4365
  2607  00180E                     u3830:
  2608  00180E  FFFF               	dw	65535	; assembler added errata NOP
  2609  001810  5016               	movf	resetPosition@keepMovingY^0,w,c
  2610  001812  A4D8               	btfss	status,2,c
  2611  001814  EF0E  F00C         	goto	u3841
  2612  001818  EF11  F00C         	goto	u3840
  2613  00181C                     u3841:
  2614  00181C  FFFF               	dw	65535	; assembler added errata NOP
  2615  00181E  EF16  F00C         	goto	l4367
  2616  001822                     u3840:
  2617  001822                     l4365:
  2618  001822  FFFF               	dw	65535	; assembler added errata NOP
  2619                           
  2620                           ;motors.c: 242:             keepMovingY = 0;
  2621  001824  0E00               	movlw	0
  2622  001826  6E16               	movwf	resetPosition@keepMovingY^0,c
  2623                           
  2624                           ;motors.c: 243:         }else{
  2625  001828  EF2D  F00C         	goto	l4373
  2626  00182C                     l4367:
  2627  00182C  FFFF               	dw	65535	; assembler added errata NOP
  2628                           
  2629                           ;motors.c: 249:             motCounter[1][0] += motCounter[1][1];
  2630  00182E  5066               	movf	(_motCounter+3)^0,w,c
  2631  001830  2665               	addwf	(_motCounter+2)^0,f,c
  2632                           
  2633                           ;motors.c: 250:             if(motCounter[1][0] < 0){
  2634  001832  BE65               	btfsc	(_motCounter+2)^0,7,c
  2635  001834  EF21  F00C         	goto	u3850
  2636  001838  EF1E  F00C         	goto	u3851
  2637  00183C                     u3851:
  2638  00183C  FFFF               	dw	65535	; assembler added errata NOP
  2639  00183E  EF24  F00C         	goto	l4371
  2640  001842                     u3850:
  2641  001842  FFFF               	dw	65535	; assembler added errata NOP
  2642  001844                     
  2643                           ;motors.c: 251:                 motCounter[1][0] = 3;
  2644  001844  0E03               	movlw	3
  2645  001846  6E65               	movwf	(_motCounter+2)^0,c
  2646  001848                     l4371:
  2647  001848  FFFF               	dw	65535	; assembler added errata NOP
  2648                           
  2649                           ;motors.c: 254:             LATB = stepMot2[motCounter[1][0]];
  2650  00184A  0E88               	movlw	low _stepMot2
  2651  00184C  2465               	addwf	(_motCounter+2)^0,w,c
  2652  00184E  6ED9               	movwf	fsr2l,c
  2653  001850  6ADA               	clrf	fsr2h,c
  2654  001852  0E00               	movlw	high _stepMot2
  2655  001854  22DA               	addwfc	fsr2h,f,c
  2656  001856  50DF               	movf	indf2,w,c
  2657  001858  6E8A               	movwf	138,c	;volatile
  2658  00185A                     l4373:
  2659  00185A  FFFF               	dw	65535	; assembler added errata NOP
  2660                           
  2661                           ;motors.c: 259:         if(PORTEbits.RE2 || !keepMovingZ){
  2662  00185C  B484               	btfsc	132,2,c	;volatile
  2663  00185E  EF33  F00C         	goto	u3861
  2664  001862  EF36  F00C         	goto	u3860
  2665  001866                     u3861:
  2666  001866  FFFF               	dw	65535	; assembler added errata NOP
  2667  001868  EF40  F00C         	goto	l4377
  2668  00186C                     u3860:
  2669  00186C  FFFF               	dw	65535	; assembler added errata NOP
  2670  00186E  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2671  001870  A4D8               	btfss	status,2,c
  2672  001872  EF3D  F00C         	goto	u3871
  2673  001876  EF40  F00C         	goto	u3870
  2674  00187A                     u3871:
  2675  00187A  FFFF               	dw	65535	; assembler added errata NOP
  2676  00187C  EF45  F00C         	goto	l4379
  2677  001880                     u3870:
  2678  001880                     l4377:
  2679  001880  FFFF               	dw	65535	; assembler added errata NOP
  2680                           
  2681                           ;motors.c: 261:             keepMovingZ = 0;
  2682  001882  0E00               	movlw	0
  2683  001884  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2684                           
  2685                           ;motors.c: 262:         }else{
  2686  001886  EF5C  F00C         	goto	l4385
  2687  00188A                     l4379:
  2688  00188A  FFFF               	dw	65535	; assembler added errata NOP
  2689                           
  2690                           ;motors.c: 268:             motCounter[2][0] += motCounter[2][1];
  2691  00188C  5068               	movf	(_motCounter+5)^0,w,c
  2692  00188E  2667               	addwf	(_motCounter+4)^0,f,c
  2693                           
  2694                           ;motors.c: 269:             if(motCounter[2][0] < 0){
  2695  001890  BE67               	btfsc	(_motCounter+4)^0,7,c
  2696  001892  EF50  F00C         	goto	u3880
  2697  001896  EF4D  F00C         	goto	u3881
  2698  00189A                     u3881:
  2699  00189A  FFFF               	dw	65535	; assembler added errata NOP
  2700  00189C  EF53  F00C         	goto	l4383
  2701  0018A0                     u3880:
  2702  0018A0  FFFF               	dw	65535	; assembler added errata NOP
  2703  0018A2                     
  2704                           ;motors.c: 270:                 motCounter[2][0] = 3;
  2705  0018A2  0E03               	movlw	3
  2706  0018A4  6E67               	movwf	(_motCounter+4)^0,c
  2707  0018A6                     l4383:
  2708  0018A6  FFFF               	dw	65535	; assembler added errata NOP
  2709                           
  2710                           ;motors.c: 273:             LATC = stepMot3[motCounter[2][0]];
  2711  0018A8  0E84               	movlw	low _stepMot3
  2712  0018AA  2467               	addwf	(_motCounter+4)^0,w,c
  2713  0018AC  6ED9               	movwf	fsr2l,c
  2714  0018AE  6ADA               	clrf	fsr2h,c
  2715  0018B0  0E00               	movlw	high _stepMot3
  2716  0018B2  22DA               	addwfc	fsr2h,f,c
  2717  0018B4  50DF               	movf	indf2,w,c
  2718  0018B6  6E8B               	movwf	139,c	;volatile
  2719  0018B8                     l4385:
  2720  0018B8  FFFF               	dw	65535	; assembler added errata NOP
  2721  0018BA  ECF6  F012         	call	_stepMade	;wreg free
  2722  0018BE  5012               	movf	?_stepMade^0,w,c
  2723  0018C0  1013               	iorwf	(?_stepMade+1)^0,w,c
  2724  0018C2  B4D8               	btfsc	status,2,c
  2725  0018C4  EF66  F00C         	goto	u3891
  2726  0018C8  EF69  F00C         	goto	u3890
  2727  0018CC                     u3891:
  2728  0018CC  FFFF               	dw	65535	; assembler added errata NOP
  2729  0018CE  EF5C  F00C         	goto	l4385
  2730  0018D2                     u3890:
  2731  0018D2                     l4387:
  2732  0018D2  FFFF               	dw	65535	; assembler added errata NOP
  2733                           
  2734                           ;motors.c: 200:     while(keepMovingX || keepMovingY || keepMovingZ){
  2735  0018D4  5015               	movf	resetPosition@keepMovingX^0,w,c
  2736  0018D6  A4D8               	btfss	status,2,c
  2737  0018D8  EF70  F00C         	goto	u3901
  2738  0018DC  EF73  F00C         	goto	u3900
  2739  0018E0                     u3901:
  2740  0018E0  FFFF               	dw	65535	; assembler added errata NOP
  2741  0018E2  EFBB  F00B         	goto	l4345
  2742  0018E6                     u3900:
  2743  0018E6  FFFF               	dw	65535	; assembler added errata NOP
  2744  0018E8  5016               	movf	resetPosition@keepMovingY^0,w,c
  2745  0018EA  A4D8               	btfss	status,2,c
  2746  0018EC  EF7A  F00C         	goto	u3911
  2747  0018F0  EF7D  F00C         	goto	u3910
  2748  0018F4                     u3911:
  2749  0018F4  FFFF               	dw	65535	; assembler added errata NOP
  2750  0018F6  EFBB  F00B         	goto	l4345
  2751  0018FA                     u3910:
  2752  0018FA  FFFF               	dw	65535	; assembler added errata NOP
  2753  0018FC  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2754  0018FE  A4D8               	btfss	status,2,c
  2755  001900  EF84  F00C         	goto	u3921
  2756  001904  EF87  F00C         	goto	u3920
  2757  001908                     u3921:
  2758  001908  FFFF               	dw	65535	; assembler added errata NOP
  2759  00190A  EFBB  F00B         	goto	l4345
  2760  00190E                     u3920:
  2761  00190E                     l132:
  2762  00190E  FFFF               	dw	65535	; assembler added errata NOP
  2763                           
  2764                           ;motors.c: 293:     T0CONbits.TMR0ON = 0;
  2765  001910  9ED5               	bcf	213,7,c	;volatile
  2766                           
  2767                           ;motors.c: 294:     T2CONbits.TMR2ON = 0;
  2768  001912  94CA               	bcf	202,2,c	;volatile
  2769  001914                     
  2770                           ;motors.c: 296:     resetTM0_Temp();
  2771  001914  EC7B  F013         	call	_resetTM0_Temp	;wreg free
  2772                           
  2773                           ;motors.c: 297:     resetTM2_Temp();
  2774  001918  EC00  F013         	call	_resetTM2_Temp	;wreg free
  2775  00191C                     
  2776                           ;motors.c: 299:     TMR0 = 0;
  2777  00191C  0E00               	movlw	0
  2778  00191E  6ED7               	movwf	215,c	;volatile
  2779  001920  0E00               	movlw	0
  2780  001922  6ED6               	movwf	214,c	;volatile
  2781  001924                     
  2782                           ;motors.c: 300:     TMR2 = 0;
  2783  001924  0E00               	movlw	0
  2784  001926  6ECC               	movwf	204,c	;volatile
  2785                           
  2786                           ;motors.c: 303:     resetStep();
  2787  001928  EC80  F013         	call	_resetStep	;wreg free
  2788  00192C                     
  2789                           ;motors.c: 306:     return(tm0Error);
  2790  00192C  5055               	movf	_tm0Error^0,w,c
  2791  00192E  0012               	return		;funcret
  2792  001930  FFFF               	dw	65535	; errata NOP
  2793  001932                     __end_of_resetPosition:
  2794                           	callstack 0
  2795                           
  2796 ;; *************** function _resetNewSequence *****************
  2797 ;; Defined at:
  2798 ;;		line 76 in file "usart.c"
  2799 ;; Parameters:    Size  Location     Type
  2800 ;;		None
  2801 ;; Auto vars:     Size  Location     Type
  2802 ;;		None
  2803 ;; Return value:  Size  Location     Type
  2804 ;;                  1    wreg      void 
  2805 ;; Registers used:
  2806 ;;		wreg, status,2
  2807 ;; Tracked objects:
  2808 ;;		On entry : 0/0
  2809 ;;		On exit  : 0/0
  2810 ;;		Unchanged: 0/0
  2811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2812 ;;      Params:         0       0       0       0       0       0       0
  2813 ;;      Locals:         0       0       0       0       0       0       0
  2814 ;;      Temps:          0       0       0       0       0       0       0
  2815 ;;      Totals:         0       0       0       0       0       0       0
  2816 ;;Total ram usage:        0 bytes
  2817 ;; Hardware stack levels used:    1
  2818 ;; Hardware stack levels required when called:    4
  2819 ;; This function calls:
  2820 ;;		Nothing
  2821 ;; This function is called by:
  2822 ;;		_main
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           	psect	text10
  2827  0026CE                     __ptext10:
  2828                           	callstack 0
  2829  0026CE                     _resetNewSequence:
  2830                           	callstack 0
  2831  0026CE  FFFF               	dw	65535	; assembler added errata NOP
  2832  0026D0                     
  2833                           ;usart.c: 77:     _newSequence = 0;
  2834  0026D0  0E00               	movlw	0
  2835  0026D2  6E5B               	movwf	__newSequence^0,c
  2836  0026D4  0012               	return		;funcret
  2837  0026D6  FFFF               	dw	65535	; errata NOP
  2838  0026D8                     __end_of_resetNewSequence:
  2839                           	callstack 0
  2840                           
  2841 ;; *************** function _reduceSeq *****************
  2842 ;; Defined at:
  2843 ;;		line 53 in file "usart.c"
  2844 ;; Parameters:    Size  Location     Type
  2845 ;;		None
  2846 ;; Auto vars:     Size  Location     Type
  2847 ;;		None
  2848 ;; Return value:  Size  Location     Type
  2849 ;;                  1    wreg      void 
  2850 ;; Registers used:
  2851 ;;		status,2, status,0
  2852 ;; Tracked objects:
  2853 ;;		On entry : 0/0
  2854 ;;		On exit  : 0/0
  2855 ;;		Unchanged: 0/0
  2856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2857 ;;      Params:         0       0       0       0       0       0       0
  2858 ;;      Locals:         0       0       0       0       0       0       0
  2859 ;;      Temps:          0       0       0       0       0       0       0
  2860 ;;      Totals:         0       0       0       0       0       0       0
  2861 ;;Total ram usage:        0 bytes
  2862 ;; Hardware stack levels used:    1
  2863 ;; Hardware stack levels required when called:    4
  2864 ;; This function calls:
  2865 ;;		Nothing
  2866 ;; This function is called by:
  2867 ;;		_main
  2868 ;; This function uses a non-reentrant model
  2869 ;;
  2870                           
  2871                           	psect	text11
  2872  002728                     __ptext11:
  2873                           	callstack 0
  2874  002728                     _reduceSeq:
  2875                           	callstack 0
  2876  002728  FFFF               	dw	65535	; assembler added errata NOP
  2877  00272A                     
  2878                           ;usart.c: 54:     dataCounter--;
  2879  00272A  065D               	decf	_dataCounter^0,f,c
  2880  00272C  0012               	return		;funcret
  2881  00272E  FFFF               	dw	65535	; errata NOP
  2882  002730                     __end_of_reduceSeq:
  2883                           	callstack 0
  2884                           
  2885 ;; *************** function _readSeq *****************
  2886 ;; Defined at:
  2887 ;;		line 60 in file "usart.c"
  2888 ;; Parameters:    Size  Location     Type
  2889 ;;		None
  2890 ;; Auto vars:     Size  Location     Type
  2891 ;;		None
  2892 ;; Return value:  Size  Location     Type
  2893 ;;                  1    wreg      unsigned char 
  2894 ;; Registers used:
  2895 ;;		wreg, status,2
  2896 ;; Tracked objects:
  2897 ;;		On entry : 0/0
  2898 ;;		On exit  : 0/0
  2899 ;;		Unchanged: 0/0
  2900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2901 ;;      Params:         0       0       0       0       0       0       0
  2902 ;;      Locals:         0       0       0       0       0       0       0
  2903 ;;      Temps:          0       0       0       0       0       0       0
  2904 ;;      Totals:         0       0       0       0       0       0       0
  2905 ;;Total ram usage:        0 bytes
  2906 ;; Hardware stack levels used:    1
  2907 ;; Hardware stack levels required when called:    4
  2908 ;; This function calls:
  2909 ;;		Nothing
  2910 ;; This function is called by:
  2911 ;;		_main
  2912 ;; This function uses a non-reentrant model
  2913 ;;
  2914                           
  2915                           	psect	text12
  2916  002730                     __ptext12:
  2917                           	callstack 0
  2918  002730                     _readSeq:
  2919                           	callstack 0
  2920  002730  FFFF               	dw	65535	; assembler added errata NOP
  2921  002732                     
  2922                           ;usart.c: 61:     return dataCounter;
  2923  002732  505D               	movf	_dataCounter^0,w,c
  2924  002734  0012               	return		;funcret
  2925  002736  FFFF               	dw	65535	; errata NOP
  2926  002738                     __end_of_readSeq:
  2927                           	callstack 0
  2928                           
  2929 ;; *************** function _newSequence *****************
  2930 ;; Defined at:
  2931 ;;		line 68 in file "usart.c"
  2932 ;; Parameters:    Size  Location     Type
  2933 ;;		None
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;		None
  2936 ;; Return value:  Size  Location     Type
  2937 ;;                  1    wreg      unsigned char 
  2938 ;; Registers used:
  2939 ;;		wreg, status,2
  2940 ;; Tracked objects:
  2941 ;;		On entry : 0/0
  2942 ;;		On exit  : 0/0
  2943 ;;		Unchanged: 0/0
  2944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2945 ;;      Params:         0       0       0       0       0       0       0
  2946 ;;      Locals:         0       0       0       0       0       0       0
  2947 ;;      Temps:          0       0       0       0       0       0       0
  2948 ;;      Totals:         0       0       0       0       0       0       0
  2949 ;;Total ram usage:        0 bytes
  2950 ;; Hardware stack levels used:    1
  2951 ;; Hardware stack levels required when called:    4
  2952 ;; This function calls:
  2953 ;;		Nothing
  2954 ;; This function is called by:
  2955 ;;		_main
  2956 ;; This function uses a non-reentrant model
  2957 ;;
  2958                           
  2959                           	psect	text13
  2960  002738                     __ptext13:
  2961                           	callstack 0
  2962  002738                     _newSequence:
  2963                           	callstack 0
  2964  002738  FFFF               	dw	65535	; assembler added errata NOP
  2965  00273A                     
  2966                           ;usart.c: 69:     return _newSequence;
  2967  00273A  505B               	movf	__newSequence^0,w,c
  2968  00273C  0012               	return		;funcret
  2969  00273E  FFFF               	dw	65535	; errata NOP
  2970  002740                     __end_of_newSequence:
  2971                           	callstack 0
  2972                           
  2973 ;; *************** function _interruptInit *****************
  2974 ;; Defined at:
  2975 ;;		line 35 in file "interrupt.c"
  2976 ;; Parameters:    Size  Location     Type
  2977 ;;		None
  2978 ;; Auto vars:     Size  Location     Type
  2979 ;;		None
  2980 ;; Return value:  Size  Location     Type
  2981 ;;                  1    wreg      void 
  2982 ;; Registers used:
  2983 ;;		None
  2984 ;; Tracked objects:
  2985 ;;		On entry : 0/0
  2986 ;;		On exit  : 0/0
  2987 ;;		Unchanged: 0/0
  2988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2989 ;;      Params:         0       0       0       0       0       0       0
  2990 ;;      Locals:         0       0       0       0       0       0       0
  2991 ;;      Temps:          0       0       0       0       0       0       0
  2992 ;;      Totals:         0       0       0       0       0       0       0
  2993 ;;Total ram usage:        0 bytes
  2994 ;; Hardware stack levels used:    1
  2995 ;; Hardware stack levels required when called:    4
  2996 ;; This function calls:
  2997 ;;		Nothing
  2998 ;; This function is called by:
  2999 ;;		_main
  3000 ;; This function uses a non-reentrant model
  3001 ;;
  3002                           
  3003                           	psect	text14
  3004  0024E6                     __ptext14:
  3005                           	callstack 0
  3006  0024E6                     _interruptInit:
  3007                           	callstack 0
  3008  0024E6  FFFF               	dw	65535	; assembler added errata NOP
  3009  0024E8                     
  3010                           ;interrupt.c: 37:     if(!INTCONbits.GIE){
  3011  0024E8  BEF2               	btfsc	242,7,c	;volatile
  3012  0024EA  EF79  F012         	goto	u3931
  3013  0024EE  EF7C  F012         	goto	u3930
  3014  0024F2                     u3931:
  3015  0024F2  FFFF               	dw	65535	; assembler added errata NOP
  3016  0024F4  EF7E  F012         	goto	l459
  3017  0024F8                     u3930:
  3018  0024F8  FFFF               	dw	65535	; assembler added errata NOP
  3019  0024FA                     
  3020                           ;interrupt.c: 38:         INTCONbits.GIE = 1;
  3021  0024FA  8EF2               	bsf	242,7,c	;volatile
  3022  0024FC                     l459:
  3023  0024FC  FFFF               	dw	65535	; assembler added errata NOP
  3024                           
  3025                           ;interrupt.c: 40:     if(!INTCONbits.PEIE){
  3026  0024FE  BCF2               	btfsc	242,6,c	;volatile
  3027  002500  EF84  F012         	goto	u3941
  3028  002504  EF87  F012         	goto	u3940
  3029  002508                     u3941:
  3030  002508  FFFF               	dw	65535	; assembler added errata NOP
  3031  00250A  EF89  F012         	goto	l460
  3032  00250E                     u3940:
  3033  00250E  FFFF               	dw	65535	; assembler added errata NOP
  3034  002510                     
  3035                           ;interrupt.c: 41:         INTCONbits.PEIE = 1;
  3036  002510  8CF2               	bsf	242,6,c	;volatile
  3037  002512                     l460:
  3038  002512  FFFF               	dw	65535	; assembler added errata NOP
  3039                           
  3040                           ;interrupt.c: 45:     RCONbits.IPEN = 1;
  3041  002514  8ED0               	bsf	208,7,c	;volatile
  3042                           
  3043                           ;interrupt.c: 46:     INTCONbits.T0IE = 1;
  3044  002516  8AF2               	bsf	242,5,c	;volatile
  3045                           
  3046                           ;interrupt.c: 47:     PIE1bits.TMR1IE = 1;
  3047  002518  809D               	bsf	157,0,c	;volatile
  3048                           
  3049                           ;interrupt.c: 48:     PIE1bits.TMR2IE = 1;
  3050  00251A  829D               	bsf	157,1,c	;volatile
  3051                           
  3052                           ;interrupt.c: 49:     PIE1bits.RC1IE = 1;
  3053  00251C  8A9D               	bsf	157,5,c	;volatile
  3054  00251E  0012               	return		;funcret
  3055  002520  FFFF               	dw	65535	; errata NOP
  3056  002522                     __end_of_interruptInit:
  3057                           	callstack 0
  3058                           
  3059 ;; *************** function _initPinMotors *****************
  3060 ;; Defined at:
  3061 ;;		line 46 in file "motors.c"
  3062 ;; Parameters:    Size  Location     Type
  3063 ;;		None
  3064 ;; Auto vars:     Size  Location     Type
  3065 ;;		None
  3066 ;; Return value:  Size  Location     Type
  3067 ;;                  1    wreg      void 
  3068 ;; Registers used:
  3069 ;;		wreg, status,2, status,0
  3070 ;; Tracked objects:
  3071 ;;		On entry : 0/0
  3072 ;;		On exit  : 0/0
  3073 ;;		Unchanged: 0/0
  3074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3075 ;;      Params:         0       0       0       0       0       0       0
  3076 ;;      Locals:         0       0       0       0       0       0       0
  3077 ;;      Temps:          0       0       0       0       0       0       0
  3078 ;;      Totals:         0       0       0       0       0       0       0
  3079 ;;Total ram usage:        0 bytes
  3080 ;; Hardware stack levels used:    1
  3081 ;; Hardware stack levels required when called:    4
  3082 ;; This function calls:
  3083 ;;		Nothing
  3084 ;; This function is called by:
  3085 ;;		_main
  3086 ;; This function uses a non-reentrant model
  3087 ;;
  3088                           
  3089                           	psect	text15
  3090  002582                     __ptext15:
  3091                           	callstack 0
  3092  002582                     _initPinMotors:
  3093                           	callstack 0
  3094  002582  FFFF               	dw	65535	; assembler added errata NOP
  3095  002584                     
  3096                           ;motors.c: 48:     ADCON1bits.PCFG = 0x06;
  3097  002584  50C1               	movf	193,w,c	;volatile
  3098  002586  0BF0               	andlw	-16
  3099  002588  0906               	iorlw	6
  3100  00258A  6EC1               	movwf	193,c	;volatile
  3101  00258C                     
  3102                           ;motors.c: 49:     TRISA &= 0b11010001;
  3103  00258C  0ED1               	movlw	209
  3104  00258E  1692               	andwf	146,f,c	;volatile
  3105  002590                     
  3106                           ;motors.c: 51:     TRISB &= 0b00000010;
  3107  002590  0E02               	movlw	2
  3108  002592  1693               	andwf	147,f,c	;volatile
  3109  002594                     
  3110                           ;motors.c: 52:     TRISC &= 0b11000000;
  3111  002594  0EC0               	movlw	192
  3112  002596  1694               	andwf	148,f,c	;volatile
  3113  002598                     
  3114                           ;motors.c: 53:     TRISD &= 0b11000000;
  3115  002598  0EC0               	movlw	192
  3116  00259A  1695               	andwf	149,f,c	;volatile
  3117  00259C                     
  3118                           ;motors.c: 56:     TRISEbits.TRISE0 = 1;
  3119  00259C  8096               	bsf	150,0,c	;volatile
  3120  00259E                     
  3121                           ;motors.c: 57:     TRISEbits.TRISE1 = 1;
  3122  00259E  8296               	bsf	150,1,c	;volatile
  3123  0025A0                     
  3124                           ;motors.c: 58:     TRISEbits.TRISE2 = 1;
  3125  0025A0  8496               	bsf	150,2,c	;volatile
  3126  0025A2                     
  3127                           ;motors.c: 61:     TRISDbits.TRISD7 = 1;
  3128  0025A2  8E95               	bsf	149,7,c	;volatile
  3129  0025A4  0012               	return		;funcret
  3130  0025A6  FFFF               	dw	65535	; errata NOP
  3131  0025A8                     __end_of_initPinMotors:
  3132                           	callstack 0
  3133                           
  3134 ;; *************** function _initADC *****************
  3135 ;; Defined at:
  3136 ;;		line 18 in file "adc.c"
  3137 ;; Parameters:    Size  Location     Type
  3138 ;;		None
  3139 ;; Auto vars:     Size  Location     Type
  3140 ;;		None
  3141 ;; Return value:  Size  Location     Type
  3142 ;;                  1    wreg      void 
  3143 ;; Registers used:
  3144 ;;		wreg, status,2
  3145 ;; Tracked objects:
  3146 ;;		On entry : 0/0
  3147 ;;		On exit  : 0/0
  3148 ;;		Unchanged: 0/0
  3149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3150 ;;      Params:         0       0       0       0       0       0       0
  3151 ;;      Locals:         0       0       0       0       0       0       0
  3152 ;;      Temps:          0       0       0       0       0       0       0
  3153 ;;      Totals:         0       0       0       0       0       0       0
  3154 ;;Total ram usage:        0 bytes
  3155 ;; Hardware stack levels used:    1
  3156 ;; Hardware stack levels required when called:    4
  3157 ;; This function calls:
  3158 ;;		Nothing
  3159 ;; This function is called by:
  3160 ;;		_main
  3161 ;; This function uses a non-reentrant model
  3162 ;;
  3163                           
  3164                           	psect	text16
  3165  0025A8                     __ptext16:
  3166                           	callstack 0
  3167  0025A8                     _initADC:
  3168                           	callstack 0
  3169  0025A8  FFFF               	dw	65535	; assembler added errata NOP
  3170  0025AA                     
  3171                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  3172  0025AA  50C2               	movf	194,w,c	;volatile
  3173  0025AC  0B3F               	andlw	-193
  3174  0025AE  0940               	iorlw	64
  3175  0025B0  6EC2               	movwf	194,c	;volatile
  3176  0025B2                     
  3177                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  3178  0025B2  8CC1               	bsf	193,6,c	;volatile
  3179                           
  3180                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  3181  0025B4  0EC7               	movlw	-57
  3182  0025B6  16C2               	andwf	194,f,c	;volatile
  3183  0025B8                     
  3184                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  3185  0025B8  94C2               	bcf	194,2,c	;volatile
  3186  0025BA                     
  3187                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  3188  0025BA  90C2               	bcf	194,0,c	;volatile
  3189  0025BC                     
  3190                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  3191  0025BC  9EC1               	bcf	193,7,c	;volatile
  3192                           
  3193                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  3194  0025BE  50C1               	movf	193,w,c	;volatile
  3195  0025C0  0BF0               	andlw	-16
  3196  0025C2  090E               	iorlw	14
  3197  0025C4  6EC1               	movwf	193,c	;volatile
  3198  0025C6                     
  3199                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  3200  0025C6  8C9D               	bsf	157,6,c	;volatile
  3201  0025C8                     
  3202                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  3203  0025C8  8C9F               	bsf	159,6,c	;volatile
  3204  0025CA  0012               	return		;funcret
  3205  0025CC  FFFF               	dw	65535	; errata NOP
  3206  0025CE                     __end_of_initADC:
  3207                           	callstack 0
  3208                           
  3209 ;; *************** function _getNewSequence *****************
  3210 ;; Defined at:
  3211 ;;		line 46 in file "usart.c"
  3212 ;; Parameters:    Size  Location     Type
  3213 ;;		None
  3214 ;; Auto vars:     Size  Location     Type
  3215 ;;		None
  3216 ;; Return value:  Size  Location     Type
  3217 ;;                  2   17[COMRAM] PTR struct .
  3218 ;; Registers used:
  3219 ;;		wreg, status,2, status,0
  3220 ;; Tracked objects:
  3221 ;;		On entry : 0/0
  3222 ;;		On exit  : 0/0
  3223 ;;		Unchanged: 0/0
  3224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3225 ;;      Params:         2       0       0       0       0       0       0
  3226 ;;      Locals:         0       0       0       0       0       0       0
  3227 ;;      Temps:          0       0       0       0       0       0       0
  3228 ;;      Totals:         2       0       0       0       0       0       0
  3229 ;;Total ram usage:        2 bytes
  3230 ;; Hardware stack levels used:    1
  3231 ;; Hardware stack levels required when called:    4
  3232 ;; This function calls:
  3233 ;;		Nothing
  3234 ;; This function is called by:
  3235 ;;		_main
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239                           	psect	text17
  3240  002658                     __ptext17:
  3241                           	callstack 0
  3242  002658                     _getNewSequence:
  3243                           	callstack 0
  3244  002658  FFFF               	dw	65535	; assembler added errata NOP
  3245  00265A                     
  3246                           ;usart.c: 47:     return(&newSequenceData);
  3247  00265A  0EDE               	movlw	low _newSequenceData
  3248  00265C  6E12               	movwf	?_getNewSequence^0,c
  3249  00265E  0E00               	movlw	high _newSequenceData
  3250  002660  6E13               	movwf	(?_getNewSequence+1)^0,c
  3251  002662  0012               	return		;funcret
  3252  002664  FFFF               	dw	65535	; errata NOP
  3253  002666                     __end_of_getNewSequence:
  3254                           	callstack 0
  3255                           
  3256 ;; *************** function _executeData *****************
  3257 ;; Defined at:
  3258 ;;		line 105 in file "main.c"
  3259 ;; Parameters:    Size  Location     Type
  3260 ;;		None
  3261 ;; Auto vars:     Size  Location     Type
  3262 ;;  data            2    9[BANK0 ] PTR struct .
  3263 ;;		 -> dataSequence(20), 
  3264 ;;  errCode         1   11[BANK0 ] unsigned char 
  3265 ;; Return value:  Size  Location     Type
  3266 ;;                  1    wreg      unsigned char 
  3267 ;; Registers used:
  3268 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3269 ;; Tracked objects:
  3270 ;;		On entry : 0/0
  3271 ;;		On exit  : 0/0
  3272 ;;		Unchanged: 0/0
  3273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3274 ;;      Params:         0       0       0       0       0       0       0
  3275 ;;      Locals:         0       3       0       0       0       0       0
  3276 ;;      Temps:          0       2       0       0       0       0       0
  3277 ;;      Totals:         0       5       0       0       0       0       0
  3278 ;;Total ram usage:        5 bytes
  3279 ;; Hardware stack levels used:    1
  3280 ;; Hardware stack levels required when called:    6
  3281 ;; This function calls:
  3282 ;;		_getData
  3283 ;;		_liftArm
  3284 ;;		_moveToPoint
  3285 ;;		_pickObject
  3286 ;;		_releaseObj
  3287 ;;		_rotateObj
  3288 ;;		_touchObject
  3289 ;;		_touchTherm
  3290 ;; This function is called by:
  3291 ;;		_main
  3292 ;; This function uses a non-reentrant model
  3293 ;;
  3294                           
  3295                           	psect	text18
  3296  000D88                     __ptext18:
  3297                           	callstack 0
  3298  000D88                     _executeData:
  3299                           	callstack 0
  3300  000D88  FFFF               	dw	65535	; assembler added errata NOP
  3301  000D8A                     
  3302                           ;main.c: 106:     t_sequence *data = getData();
  3303  000D8A  EC33  F013         	call	_getData	;wreg free
  3304  000D8E  C012  F0EF         	movff	?_getData,executeData@data
  3305  000D92  C013  F0F0         	movff	?_getData+1,executeData@data+1
  3306  000D96                     
  3307                           ;main.c: 112:     switch(data->feederLine){
  3308  000D96  EF76  F007         	goto	l4545
  3309  000D9A                     l4517:
  3310  000D9A  FFFF               	dw	65535	; assembler added errata NOP
  3311                           
  3312                           ; BSR set to: 0
  3313                           ;main.c: 115:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0
      +                          ], feeder1Pos[1]);
  3314  000D9C  C04C  F015         	movff	_posVector,moveToPoint@x1
  3315  000DA0  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3316  000DA2  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3317  000DA6  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3318  000DA8  0E0D               	movlw	low _feeder1Pos
  3319  000DAA  6EF6               	movwf	tblptrl,c
  3320  000DAC                     	if	1	;There is more than 1 active tblptr byte
  3321  000DAC  0E06               	movlw	high _feeder1Pos
  3322  000DAE  6EF7               	movwf	tblptrh,c
  3323  000DB0                     	endif
  3324  000DB0                     	if	0	;There are less than 3 active tblptr bytes
  3325  000DB0                     	endif
  3326  000DB0  0008               	tblrd		*
  3327  000DB2  FFFF               	dw	65535	; errata NOP
  3328  000DB4  50F5               	movf	tablat,w,c
  3329  000DB6  6E19               	movwf	moveToPoint@x2^0,c
  3330  000DB8  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3331  000DBA  0E0E               	movlw	low (_feeder1Pos+1)
  3332  000DBC  6EF6               	movwf	tblptrl,c
  3333  000DBE  0E06               	movlw	high (_feeder1Pos+1)
  3334  000DC0  6EF7               	movwf	tblptrh,c
  3335  000DC2                     	if	0	;tblptru may be non-zero
  3336  000DC2                     	endif
  3337  000DC2                     	if	0	;tblptru may be non-zero
  3338  000DC2                     	endif
  3339  000DC2  0008               	tblrd		*
  3340  000DC4  FFFF               	dw	65535	; errata NOP
  3341  000DC6  50F5               	movf	tablat,w,c
  3342  000DC8  6E1B               	movwf	moveToPoint@y2^0,c
  3343  000DCA  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3344  000DCC  EC22  F005         	call	_moveToPoint	;wreg free
  3345  000DD0  0100               	movlb	0	; () banked
  3346  000DD2  6FF1               	movwf	executeData@errCode& (0+255),b
  3347  000DD4                     
  3348                           ; BSR set to: 0
  3349                           ;main.c: 117:             posVector[0] = feeder1Pos[0];
  3350  000DD4  0E0D               	movlw	low _feeder1Pos
  3351  000DD6  6EF6               	movwf	tblptrl,c
  3352  000DD8                     	if	1	;There is more than 1 active tblptr byte
  3353  000DD8  0E06               	movlw	high _feeder1Pos
  3354  000DDA  6EF7               	movwf	tblptrh,c
  3355  000DDC                     	endif
  3356  000DDC                     	if	0	;There are less than 3 active tblptr bytes
  3357  000DDC                     	endif
  3358  000DDC  0008               	tblrd		*
  3359  000DDE  FFFF               	dw	65535	; errata NOP
  3360  000DE0  CFF5 F04C          	movff	tablat,_posVector
  3361  000DE4                     
  3362                           ; BSR set to: 0
  3363                           ;main.c: 118:             posVector[1] = feeder1Pos[1];
  3364  000DE4  0E0E               	movlw	low (_feeder1Pos+1)
  3365  000DE6  6EF6               	movwf	tblptrl,c
  3366  000DE8  0E06               	movlw	high (_feeder1Pos+1)
  3367  000DEA  6EF7               	movwf	tblptrh,c
  3368  000DEC                     	if	0	;tblptru may be non-zero
  3369  000DEC                     	endif
  3370  000DEC                     	if	0	;tblptru may be non-zero
  3371  000DEC                     	endif
  3372  000DEC  0008               	tblrd		*
  3373  000DEE  FFFF               	dw	65535	; errata NOP
  3374  000DF0  CFF5 F04D          	movff	tablat,_posVector+1
  3375                           
  3376                           ;main.c: 119:             break;
  3377  000DF4  EF9A  F007         	goto	l4547
  3378  000DF8                     l4523:
  3379  000DF8  FFFF               	dw	65535	; assembler added errata NOP
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;main.c: 121:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3383  000DFA  C04C  F015         	movff	_posVector,moveToPoint@x1
  3384  000DFE  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3385  000E00  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3386  000E04  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3387  000E06  0E0B               	movlw	low _feeder2Pos
  3388  000E08  6EF6               	movwf	tblptrl,c
  3389  000E0A                     	if	1	;There is more than 1 active tblptr byte
  3390  000E0A  0E06               	movlw	high _feeder2Pos
  3391  000E0C  6EF7               	movwf	tblptrh,c
  3392  000E0E                     	endif
  3393  000E0E                     	if	0	;There are less than 3 active tblptr bytes
  3394  000E0E                     	endif
  3395  000E0E  0008               	tblrd		*
  3396  000E10  FFFF               	dw	65535	; errata NOP
  3397  000E12  50F5               	movf	tablat,w,c
  3398  000E14  6E19               	movwf	moveToPoint@x2^0,c
  3399  000E16  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3400  000E18  0E0C               	movlw	low (_feeder2Pos+1)
  3401  000E1A  6EF6               	movwf	tblptrl,c
  3402  000E1C  0E06               	movlw	high (_feeder2Pos+1)
  3403  000E1E  6EF7               	movwf	tblptrh,c
  3404  000E20                     	if	0	;tblptru may be non-zero
  3405  000E20                     	endif
  3406  000E20                     	if	0	;tblptru may be non-zero
  3407  000E20                     	endif
  3408  000E20  0008               	tblrd		*
  3409  000E22  FFFF               	dw	65535	; errata NOP
  3410  000E24  50F5               	movf	tablat,w,c
  3411  000E26  6E1B               	movwf	moveToPoint@y2^0,c
  3412  000E28  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3413  000E2A  EC22  F005         	call	_moveToPoint	;wreg free
  3414  000E2E  0100               	movlb	0	; () banked
  3415  000E30  6FF1               	movwf	executeData@errCode& (0+255),b
  3416  000E32                     
  3417                           ; BSR set to: 0
  3418                           ;main.c: 122:             posVector[0] = feeder2Pos[0];
  3419  000E32  0E0B               	movlw	low _feeder2Pos
  3420  000E34  6EF6               	movwf	tblptrl,c
  3421  000E36                     	if	1	;There is more than 1 active tblptr byte
  3422  000E36  0E06               	movlw	high _feeder2Pos
  3423  000E38  6EF7               	movwf	tblptrh,c
  3424  000E3A                     	endif
  3425  000E3A                     	if	0	;There are less than 3 active tblptr bytes
  3426  000E3A                     	endif
  3427  000E3A  0008               	tblrd		*
  3428  000E3C  FFFF               	dw	65535	; errata NOP
  3429  000E3E  CFF5 F04C          	movff	tablat,_posVector
  3430  000E42                     
  3431                           ; BSR set to: 0
  3432                           ;main.c: 123:             posVector[1] = feeder2Pos[1];
  3433  000E42  0E0C               	movlw	low (_feeder2Pos+1)
  3434  000E44  6EF6               	movwf	tblptrl,c
  3435  000E46  0E06               	movlw	high (_feeder2Pos+1)
  3436  000E48  6EF7               	movwf	tblptrh,c
  3437  000E4A                     	if	0	;tblptru may be non-zero
  3438  000E4A                     	endif
  3439  000E4A                     	if	0	;tblptru may be non-zero
  3440  000E4A                     	endif
  3441  000E4A  0008               	tblrd		*
  3442  000E4C  FFFF               	dw	65535	; errata NOP
  3443  000E4E  CFF5 F04D          	movff	tablat,_posVector+1
  3444                           
  3445                           ;main.c: 124:             break;
  3446  000E52  EF9A  F007         	goto	l4547
  3447  000E56                     l4529:
  3448  000E56  FFFF               	dw	65535	; assembler added errata NOP
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;main.c: 126:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3452  000E58  C04C  F015         	movff	_posVector,moveToPoint@x1
  3453  000E5C  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3454  000E5E  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3455  000E62  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3456  000E64  0E09               	movlw	low _feeder3Pos
  3457  000E66  6EF6               	movwf	tblptrl,c
  3458  000E68                     	if	1	;There is more than 1 active tblptr byte
  3459  000E68  0E06               	movlw	high _feeder3Pos
  3460  000E6A  6EF7               	movwf	tblptrh,c
  3461  000E6C                     	endif
  3462  000E6C                     	if	0	;There are less than 3 active tblptr bytes
  3463  000E6C                     	endif
  3464  000E6C  0008               	tblrd		*
  3465  000E6E  FFFF               	dw	65535	; errata NOP
  3466  000E70  50F5               	movf	tablat,w,c
  3467  000E72  6E19               	movwf	moveToPoint@x2^0,c
  3468  000E74  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3469  000E76  0E0A               	movlw	low (_feeder3Pos+1)
  3470  000E78  6EF6               	movwf	tblptrl,c
  3471  000E7A  0E06               	movlw	high (_feeder3Pos+1)
  3472  000E7C  6EF7               	movwf	tblptrh,c
  3473  000E7E                     	if	0	;tblptru may be non-zero
  3474  000E7E                     	endif
  3475  000E7E                     	if	0	;tblptru may be non-zero
  3476  000E7E                     	endif
  3477  000E7E  0008               	tblrd		*
  3478  000E80  FFFF               	dw	65535	; errata NOP
  3479  000E82  50F5               	movf	tablat,w,c
  3480  000E84  6E1B               	movwf	moveToPoint@y2^0,c
  3481  000E86  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3482  000E88  EC22  F005         	call	_moveToPoint	;wreg free
  3483  000E8C  0100               	movlb	0	; () banked
  3484  000E8E  6FF1               	movwf	executeData@errCode& (0+255),b
  3485  000E90                     
  3486                           ; BSR set to: 0
  3487                           ;main.c: 127:             posVector[0] = feeder3Pos[0];
  3488  000E90  0E09               	movlw	low _feeder3Pos
  3489  000E92  6EF6               	movwf	tblptrl,c
  3490  000E94                     	if	1	;There is more than 1 active tblptr byte
  3491  000E94  0E06               	movlw	high _feeder3Pos
  3492  000E96  6EF7               	movwf	tblptrh,c
  3493  000E98                     	endif
  3494  000E98                     	if	0	;There are less than 3 active tblptr bytes
  3495  000E98                     	endif
  3496  000E98  0008               	tblrd		*
  3497  000E9A  FFFF               	dw	65535	; errata NOP
  3498  000E9C  CFF5 F04C          	movff	tablat,_posVector
  3499  000EA0                     
  3500                           ; BSR set to: 0
  3501                           ;main.c: 128:             posVector[1] = feeder3Pos[1];
  3502  000EA0  0E0A               	movlw	low (_feeder3Pos+1)
  3503  000EA2  6EF6               	movwf	tblptrl,c
  3504  000EA4  0E06               	movlw	high (_feeder3Pos+1)
  3505  000EA6  6EF7               	movwf	tblptrh,c
  3506  000EA8                     	if	0	;tblptru may be non-zero
  3507  000EA8                     	endif
  3508  000EA8                     	if	0	;tblptru may be non-zero
  3509  000EA8                     	endif
  3510  000EA8  0008               	tblrd		*
  3511  000EAA  FFFF               	dw	65535	; errata NOP
  3512  000EAC  CFF5 F04D          	movff	tablat,_posVector+1
  3513                           
  3514                           ;main.c: 129:             break;
  3515  000EB0  EF9A  F007         	goto	l4547
  3516  000EB4                     l4535:
  3517  000EB4  FFFF               	dw	65535	; assembler added errata NOP
  3518                           
  3519                           ; BSR set to: 0
  3520                           ;main.c: 133:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3521  000EB6  C04C  F015         	movff	_posVector,moveToPoint@x1
  3522  000EBA  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3523  000EBC  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3524  000EC0  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3525  000EC2  C051  F019         	movff	_newFeeder,moveToPoint@x2
  3526  000EC6  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3527  000EC8  C052  F01B         	movff	_newFeeder+1,moveToPoint@y2
  3528  000ECC  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3529  000ECE  EC22  F005         	call	_moveToPoint	;wreg free
  3530  000ED2  0100               	movlb	0	; () banked
  3531  000ED4  6FF1               	movwf	executeData@errCode& (0+255),b
  3532  000ED6                     
  3533                           ; BSR set to: 0
  3534                           ;main.c: 134:             posVector[0] = newFeeder[0];
  3535  000ED6  C051  F04C         	movff	_newFeeder,_posVector
  3536  000EDA                     
  3537                           ; BSR set to: 0
  3538                           ;main.c: 135:             posVector[1] = newFeeder[1];
  3539  000EDA  C052  F04D         	movff	_newFeeder+1,_posVector+1
  3540                           
  3541                           ;main.c: 136:             break;
  3542  000EDE  EF9A  F007         	goto	l4547
  3543  000EE2                     l4541:
  3544  000EE2  FFFF               	dw	65535	; assembler added errata NOP
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;main.c: 140:             errCode = 1;
  3548  000EE4  0E01               	movlw	1
  3549  000EE6  6FF1               	movwf	executeData@errCode& (0+255),b
  3550                           
  3551                           ;main.c: 141:             break;
  3552  000EE8  EF9A  F007         	goto	l4547
  3553  000EEC                     l4545:
  3554  000EEC  FFFF               	dw	65535	; assembler added errata NOP
  3555  000EEE  C0EF  FFD9         	movff	executeData@data,fsr2l
  3556  000EF2  C0F0  FFDA         	movff	executeData@data+1,fsr2h
  3557  000EF6  50DF               	movf	indf2,w,c
  3558  000EF8  0100               	movlb	0	; () banked
  3559  000EFA  6FED               	movwf	??_executeData& (0+255),b
  3560  000EFC  6BEE               	clrf	(??_executeData+1)& (0+255),b
  3561                           
  3562                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3563                           ; Switch size 1, requested type "simple"
  3564                           ; Number of cases is 1, Range of values is 0 to 0
  3565                           ; switch strategies available:
  3566                           ; Name         Instructions Cycles
  3567                           ; simple_byte            4     3 (average)
  3568                           ;	Chosen strategy is simple_byte
  3569  000EFE  51EE               	movf	(??_executeData+1)& (0+255),w,b
  3570  000F00  0A00               	xorlw	0	; case 0
  3571  000F02  B4D8               	btfsc	status,2,c
  3572  000F04  EF86  F007         	goto	l4831
  3573  000F08  EF71  F007         	goto	l4541
  3574  000F0C                     l4831:
  3575  000F0C  FFFF               	dw	65535	; assembler added errata NOP
  3576                           
  3577                           ; BSR set to: 0
  3578                           ; Switch size 1, requested type "simple"
  3579                           ; Number of cases is 4, Range of values is 0 to 255
  3580                           ; switch strategies available:
  3581                           ; Name         Instructions Cycles
  3582                           ; simple_byte           13     7 (average)
  3583                           ;	Chosen strategy is simple_byte
  3584  000F0E  51ED               	movf	??_executeData& (0+255),w,b
  3585  000F10  0A00               	xorlw	0	; case 0
  3586  000F12  B4D8               	btfsc	status,2,c
  3587  000F14  EFCD  F006         	goto	l4517
  3588  000F18  0A01               	xorlw	1	; case 1
  3589  000F1A  B4D8               	btfsc	status,2,c
  3590  000F1C  EFFC  F006         	goto	l4523
  3591  000F20  0A03               	xorlw	3	; case 2
  3592  000F22  B4D8               	btfsc	status,2,c
  3593  000F24  EF2B  F007         	goto	l4529
  3594  000F28  0AFD               	xorlw	253	; case 255
  3595  000F2A  B4D8               	btfsc	status,2,c
  3596  000F2C  EF5A  F007         	goto	l4535
  3597  000F30  EF71  F007         	goto	l4541
  3598  000F34                     l4547:
  3599  000F34  FFFF               	dw	65535	; assembler added errata NOP
  3600                           
  3601                           ; BSR set to: 0
  3602                           ;main.c: 145:     if(!errCode){
  3603  000F36  51F1               	movf	executeData@errCode& (0+255),w,b
  3604  000F38  A4D8               	btfss	status,2,c
  3605  000F3A  EFA1  F007         	goto	u4021
  3606  000F3E  EFA4  F007         	goto	u4020
  3607  000F42                     u4021:
  3608  000F42  FFFF               	dw	65535	; assembler added errata NOP
  3609  000F44  EFB2  F007         	goto	l4553
  3610  000F48                     u4020:
  3611  000F48  FFFF               	dw	65535	; assembler added errata NOP
  3612  000F4A                     
  3613                           ; BSR set to: 0
  3614                           ;main.c: 148:         errCode = touchObject();
  3615  000F4A  ECAE  F00F         	call	_touchObject	;wreg free
  3616  000F4E  0100               	movlb	0	; () banked
  3617  000F50  6FF1               	movwf	executeData@errCode& (0+255),b
  3618  000F52                     
  3619                           ; BSR set to: 0
  3620                           ;main.c: 149:         if(errCode != 0){
  3621  000F52  51F1               	movf	executeData@errCode& (0+255),w,b
  3622  000F54  B4D8               	btfsc	status,2,c
  3623  000F56  EFAF  F007         	goto	u4031
  3624  000F5A  EFB2  F007         	goto	u4030
  3625  000F5E                     u4031:
  3626  000F5E  FFFF               	dw	65535	; assembler added errata NOP
  3627  000F60  EFB6  F007         	goto	l4557
  3628  000F64                     u4030:
  3629  000F64                     l4553:
  3630  000F64  FFFF               	dw	65535	; assembler added errata NOP
  3631                           
  3632                           ; BSR set to: 0
  3633                           ;main.c: 150:             return(errCode);
  3634  000F66  51F1               	movf	executeData@errCode& (0+255),w,b
  3635  000F68  EF3C  F008         	goto	l358
  3636  000F6C                     l4557:
  3637  000F6C  FFFF               	dw	65535	; assembler added errata NOP
  3638                           
  3639                           ; BSR set to: 0
  3640                           ;main.c: 153:         pickObject();
  3641  000F6E  ECA9  F012         	call	_pickObject	;wreg free
  3642  000F72                     
  3643                           ;main.c: 156:         errCode = liftArm();
  3644  000F72  EC30  F011         	call	_liftArm	;wreg free
  3645  000F76  0100               	movlb	0	; () banked
  3646  000F78  6FF1               	movwf	executeData@errCode& (0+255),b
  3647  000F7A                     
  3648                           ; BSR set to: 0
  3649                           ;main.c: 157:         if(errCode != 0){
  3650  000F7A  51F1               	movf	executeData@errCode& (0+255),w,b
  3651  000F7C  B4D8               	btfsc	status,2,c
  3652  000F7E  EFC3  F007         	goto	u4041
  3653  000F82  EFC6  F007         	goto	u4040
  3654  000F86                     u4041:
  3655  000F86  FFFF               	dw	65535	; assembler added errata NOP
  3656  000F88  EFC9  F007         	goto	l4567
  3657  000F8C                     u4040:
  3658  000F8C  FFFF               	dw	65535	; assembler added errata NOP
  3659  000F8E  EFB2  F007         	goto	l4553
  3660  000F92                     l4567:
  3661  000F92  FFFF               	dw	65535	; assembler added errata NOP
  3662                           
  3663                           ; BSR set to: 0
  3664                           ;main.c: 162:         errCode = moveToPoint(posVector[0], posVector[1], data->posX, data
      +                          ->posY);
  3665  000F94  C04C  F015         	movff	_posVector,moveToPoint@x1
  3666  000F98  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3667  000F9A  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3668  000F9E  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3669  000FA0  EE20 F001          	lfsr	2,1
  3670  000FA4  51EF               	movf	executeData@data& (0+255),w,b
  3671  000FA6  26D9               	addwf	fsr2l,f,c
  3672  000FA8  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3673  000FAA  22DA               	addwfc	fsr2h,f,c
  3674  000FAC  50DF               	movf	indf2,w,c
  3675  000FAE  6FED               	movwf	??_executeData& (0+255),b
  3676  000FB0  51ED               	movf	??_executeData& (0+255),w,b
  3677  000FB2  6E19               	movwf	moveToPoint@x2^0,c
  3678  000FB4  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3679  000FB6  EE20 F002          	lfsr	2,2
  3680  000FBA  51EF               	movf	executeData@data& (0+255),w,b
  3681  000FBC  26D9               	addwf	fsr2l,f,c
  3682  000FBE  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3683  000FC0  22DA               	addwfc	fsr2h,f,c
  3684  000FC2  50DF               	movf	indf2,w,c
  3685  000FC4  6FEE               	movwf	(??_executeData+1)& (0+255),b
  3686  000FC6  51EE               	movf	(??_executeData+1)& (0+255),w,b
  3687  000FC8  6E1B               	movwf	moveToPoint@y2^0,c
  3688  000FCA  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3689  000FCC  EC22  F005         	call	_moveToPoint	;wreg free
  3690  000FD0  0100               	movlb	0	; () banked
  3691  000FD2  6FF1               	movwf	executeData@errCode& (0+255),b
  3692  000FD4                     
  3693                           ; BSR set to: 0
  3694                           ;main.c: 163:         if(errCode != 0){
  3695  000FD4  51F1               	movf	executeData@errCode& (0+255),w,b
  3696  000FD6  B4D8               	btfsc	status,2,c
  3697  000FD8  EFF0  F007         	goto	u4051
  3698  000FDC  EFF3  F007         	goto	u4050
  3699  000FE0                     u4051:
  3700  000FE0  FFFF               	dw	65535	; assembler added errata NOP
  3701  000FE2  EFF6  F007         	goto	l4575
  3702  000FE6                     u4050:
  3703  000FE6  FFFF               	dw	65535	; assembler added errata NOP
  3704  000FE8  EFB2  F007         	goto	l4553
  3705  000FEC                     l4575:
  3706  000FEC  FFFF               	dw	65535	; assembler added errata NOP
  3707                           
  3708                           ; BSR set to: 0
  3709                           ;main.c: 166:         posVector[0] = data->posX;
  3710  000FEE  EE20 F001          	lfsr	2,1
  3711  000FF2  51EF               	movf	executeData@data& (0+255),w,b
  3712  000FF4  26D9               	addwf	fsr2l,f,c
  3713  000FF6  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3714  000FF8  22DA               	addwfc	fsr2h,f,c
  3715  000FFA  50DF               	movf	indf2,w,c
  3716  000FFC  6E4C               	movwf	_posVector^0,c
  3717                           
  3718                           ;main.c: 167:         posVector[1] = data->posY;
  3719  000FFE  EE20 F002          	lfsr	2,2
  3720  001002  51EF               	movf	executeData@data& (0+255),w,b
  3721  001004  26D9               	addwf	fsr2l,f,c
  3722  001006  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3723  001008  22DA               	addwfc	fsr2h,f,c
  3724  00100A  50DF               	movf	indf2,w,c
  3725  00100C  6E4D               	movwf	(_posVector+1)^0,c
  3726                           
  3727                           ;main.c: 170:         rotAngle = data->rotation;
  3728  00100E  EE20 F003          	lfsr	2,3
  3729  001012  51EF               	movf	executeData@data& (0+255),w,b
  3730  001014  26D9               	addwf	fsr2l,f,c
  3731  001016  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3732  001018  22DA               	addwfc	fsr2h,f,c
  3733  00101A  50DF               	movf	indf2,w,c
  3734  00101C  6FED               	movwf	??_executeData& (0+255),b
  3735  00101E  51ED               	movf	??_executeData& (0+255),w,b
  3736  001020  6E53               	movwf	_rotAngle^0,c
  3737  001022  6A54               	clrf	(_rotAngle+1)^0,c
  3738  001024                     
  3739                           ; BSR set to: 0
  3740                           ;main.c: 172:         if(rotAngle < 0){
  3741  001024  BE54               	btfsc	(_rotAngle+1)^0,7,c
  3742  001026  EF1A  F008         	goto	u4060
  3743  00102A  EF17  F008         	goto	u4061
  3744  00102E                     u4061:
  3745  00102E  FFFF               	dw	65535	; assembler added errata NOP
  3746  001030  EF1F  F008         	goto	l4581
  3747  001034                     u4060:
  3748  001034  FFFF               	dw	65535	; assembler added errata NOP
  3749  001036                     
  3750                           ; BSR set to: 0
  3751                           ;main.c: 173:             rotAngle += 360;
  3752  001036  0E68               	movlw	104
  3753  001038  2653               	addwf	_rotAngle^0,f,c
  3754  00103A  0E01               	movlw	1
  3755  00103C  2254               	addwfc	(_rotAngle+1)^0,f,c
  3756  00103E                     l4581:
  3757  00103E  FFFF               	dw	65535	; assembler added errata NOP
  3758                           
  3759                           ; BSR set to: 0
  3760                           ;main.c: 175:         rotateObj(rotAngle);
  3761  001040  5053               	movf	_rotAngle^0,w,c
  3762  001042  EC37  F010         	call	_rotateObj
  3763  001046                     
  3764                           ;main.c: 178:         errCode = touchTherm();
  3765  001046  EC25  F00F         	call	_touchTherm	;wreg free
  3766  00104A  0100               	movlb	0	; () banked
  3767  00104C  6FF1               	movwf	executeData@errCode& (0+255),b
  3768  00104E                     
  3769                           ; BSR set to: 0
  3770                           ;main.c: 179:         if(errCode != 0){
  3771  00104E  51F1               	movf	executeData@errCode& (0+255),w,b
  3772  001050  B4D8               	btfsc	status,2,c
  3773  001052  EF2D  F008         	goto	u4071
  3774  001056  EF30  F008         	goto	u4070
  3775  00105A                     u4071:
  3776  00105A  FFFF               	dw	65535	; assembler added errata NOP
  3777  00105C  EF33  F008         	goto	l4591
  3778  001060                     u4070:
  3779  001060  FFFF               	dw	65535	; assembler added errata NOP
  3780  001062  EFB2  F007         	goto	l4553
  3781  001066                     l4591:
  3782  001066  FFFF               	dw	65535	; assembler added errata NOP
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;main.c: 183:         releaseObj();
  3786  001068  EC91  F012         	call	_releaseObj	;wreg free
  3787  00106C                     
  3788                           ;main.c: 186:         errCode = liftArm();
  3789  00106C  EC30  F011         	call	_liftArm	;wreg free
  3790  001070  0100               	movlb	0	; () banked
  3791  001072  6FF1               	movwf	executeData@errCode& (0+255),b
  3792  001074  EFB2  F007         	goto	l4553
  3793  001078                     l358:
  3794  001078  FFFF               	dw	65535	; assembler added errata NOP
  3795                           
  3796                           ; BSR set to: 0
  3797  00107A  0012               	return		;funcret
  3798  00107C  FFFF               	dw	65535	; errata NOP
  3799  00107E                     __end_of_executeData:
  3800                           	callstack 0
  3801                           
  3802 ;; *************** function _touchTherm *****************
  3803 ;; Defined at:
  3804 ;;		line 595 in file "motors.c"
  3805 ;; Parameters:    Size  Location     Type
  3806 ;;		None
  3807 ;; Auto vars:     Size  Location     Type
  3808 ;;		None
  3809 ;; Return value:  Size  Location     Type
  3810 ;;                  1    wreg      unsigned char 
  3811 ;; Registers used:
  3812 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3813 ;; Tracked objects:
  3814 ;;		On entry : 0/0
  3815 ;;		On exit  : 0/0
  3816 ;;		Unchanged: 0/0
  3817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3818 ;;      Params:         0       0       0       0       0       0       0
  3819 ;;      Locals:         0       0       0       0       0       0       0
  3820 ;;      Temps:          0       0       0       0       0       0       0
  3821 ;;      Totals:         0       0       0       0       0       0       0
  3822 ;;Total ram usage:        0 bytes
  3823 ;; Hardware stack levels used:    1
  3824 ;; Hardware stack levels required when called:    5
  3825 ;; This function calls:
  3826 ;;		_resetStep
  3827 ;;		_resetTM0_Temp
  3828 ;;		_resetTM2_Temp
  3829 ;;		_resetTherm
  3830 ;;		_resetTouch
  3831 ;;		_returnTherm
  3832 ;;		_startADC
  3833 ;;		_stepMade
  3834 ;;		_stopADC
  3835 ;; This function is called by:
  3836 ;;		_executeData
  3837 ;; This function uses a non-reentrant model
  3838 ;;
  3839                           
  3840                           	psect	text19
  3841  001E4A                     __ptext19:
  3842                           	callstack 0
  3843  001E4A                     _touchTherm:
  3844                           	callstack 0
  3845  001E4A  FFFF               	dw	65535	; assembler added errata NOP
  3846  001E4C                     
  3847                           ;motors.c: 601:     motCounter[2][1] = 1;
  3848  001E4C  0E01               	movlw	1
  3849  001E4E  6E68               	movwf	(_motCounter+5)^0,c
  3850  001E50                     
  3851                           ;motors.c: 604:     T2CONbits.TMR2ON = 1;
  3852  001E50  84CA               	bsf	202,2,c	;volatile
  3853                           
  3854                           ;motors.c: 606:     tm0Error = 0;
  3855  001E52  0E00               	movlw	0
  3856  001E54  6E56               	movwf	(_tm0Error+1)^0,c
  3857  001E56  0E00               	movlw	0
  3858  001E58  6E55               	movwf	_tm0Error^0,c
  3859                           
  3860                           ;motors.c: 607:     tm0Limit = 200;
  3861  001E5A  0EC8               	movlw	200
  3862  001E5C  6E62               	movwf	_tm0Limit^0,c
  3863  001E5E                     
  3864                           ;motors.c: 608:     T0CONbits.TMR0ON = 1;
  3865  001E5E  8ED5               	bsf	213,7,c	;volatile
  3866  001E60                     
  3867                           ;motors.c: 611:     startADC();
  3868  001E60  EC6C  F013         	call	_startADC	;wreg free
  3869                           
  3870                           ;motors.c: 614:     resetTouch();
  3871  001E64  EC71  F013         	call	_resetTouch	;wreg free
  3872                           
  3873                           ;motors.c: 615:     resetTherm();
  3874  001E68  EC76  F013         	call	_resetTherm	;wreg free
  3875                           
  3876                           ;motors.c: 618:     while(!returnTherm() || PORTDbits.RD7){
  3877  001E6C  EF76  F00F         	goto	l4189
  3878  001E70                     l4173:
  3879  001E70  FFFF               	dw	65535	; assembler added errata NOP
  3880                           
  3881                           ;motors.c: 620:         resetStep();
  3882  001E72  EC80  F013         	call	_resetStep	;wreg free
  3883  001E76                     
  3884                           ;motors.c: 623:         if(tm0Error){
  3885  001E76  5055               	movf	_tm0Error^0,w,c
  3886  001E78  1056               	iorwf	(_tm0Error+1)^0,w,c
  3887  001E7A  B4D8               	btfsc	status,2,c
  3888  001E7C  EF42  F00F         	goto	u3641
  3889  001E80  EF45  F00F         	goto	u3640
  3890  001E84                     u3641:
  3891  001E84  FFFF               	dw	65535	; assembler added errata NOP
  3892  001E86  EF4C  F00F         	goto	l4179
  3893  001E8A                     u3640:
  3894  001E8A  FFFF               	dw	65535	; assembler added errata NOP
  3895  001E8C                     
  3896                           ;motors.c: 628:             tm0Error = 6;
  3897  001E8C  0E00               	movlw	0
  3898  001E8E  6E56               	movwf	(_tm0Error+1)^0,c
  3899  001E90  0E06               	movlw	6
  3900  001E92  6E55               	movwf	_tm0Error^0,c
  3901                           
  3902                           ;motors.c: 629:             break;
  3903  001E94  EF8C  F00F         	goto	l4193
  3904  001E98                     l4179:
  3905  001E98  FFFF               	dw	65535	; assembler added errata NOP
  3906                           
  3907                           ;motors.c: 637:             motCounter[2][0] += motCounter[2][1];
  3908  001E9A  5068               	movf	(_motCounter+5)^0,w,c
  3909  001E9C  2667               	addwf	(_motCounter+4)^0,f,c
  3910                           
  3911                           ;motors.c: 638:             if(motCounter[2][0] > 3){
  3912  001E9E  5067               	movf	(_motCounter+4)^0,w,c
  3913  001EA0  0A80               	xorlw	128
  3914  001EA2  0F7C               	addlw	-132
  3915  001EA4  A0D8               	btfss	status,0,c
  3916  001EA6  EF57  F00F         	goto	u3651
  3917  001EAA  EF5A  F00F         	goto	u3650
  3918  001EAE                     u3651:
  3919  001EAE  FFFF               	dw	65535	; assembler added errata NOP
  3920  001EB0  EF5D  F00F         	goto	l4183
  3921  001EB4                     u3650:
  3922  001EB4  FFFF               	dw	65535	; assembler added errata NOP
  3923  001EB6                     
  3924                           ;motors.c: 639:                 motCounter[2][0] = 0;
  3925  001EB6  0E00               	movlw	0
  3926  001EB8  6E67               	movwf	(_motCounter+4)^0,c
  3927  001EBA                     l4183:
  3928  001EBA  FFFF               	dw	65535	; assembler added errata NOP
  3929                           
  3930                           ;motors.c: 642:             LATC = stepMot3[motCounter[2][0]];
  3931  001EBC  0E84               	movlw	low _stepMot3
  3932  001EBE  2467               	addwf	(_motCounter+4)^0,w,c
  3933  001EC0  6ED9               	movwf	fsr2l,c
  3934  001EC2  6ADA               	clrf	fsr2h,c
  3935  001EC4  0E00               	movlw	high _stepMot3
  3936  001EC6  22DA               	addwfc	fsr2h,f,c
  3937  001EC8  50DF               	movf	indf2,w,c
  3938  001ECA  6E8B               	movwf	139,c	;volatile
  3939  001ECC                     l4185:
  3940  001ECC  FFFF               	dw	65535	; assembler added errata NOP
  3941  001ECE  ECF6  F012         	call	_stepMade	;wreg free
  3942  001ED2  5012               	movf	?_stepMade^0,w,c
  3943  001ED4  1013               	iorwf	(?_stepMade+1)^0,w,c
  3944  001ED6  B4D8               	btfsc	status,2,c
  3945  001ED8  EF70  F00F         	goto	u3661
  3946  001EDC  EF73  F00F         	goto	u3660
  3947  001EE0                     u3661:
  3948  001EE0  FFFF               	dw	65535	; assembler added errata NOP
  3949  001EE2  EF66  F00F         	goto	l4185
  3950  001EE6                     u3660:
  3951  001EE6  FFFF               	dw	65535	; assembler added errata NOP
  3952  001EE8                     
  3953                           ;motors.c: 657:         startADC();
  3954  001EE8  EC6C  F013         	call	_startADC	;wreg free
  3955  001EEC                     l4189:
  3956  001EEC  FFFF               	dw	65535	; assembler added errata NOP
  3957                           
  3958                           ;motors.c: 618:     while(!returnTherm() || PORTDbits.RD7){
  3959  001EEE  EC4F  F013         	call	_returnTherm	;wreg free
  3960  001EF2  5012               	movf	?_returnTherm^0,w,c
  3961  001EF4  1013               	iorwf	(?_returnTherm+1)^0,w,c
  3962  001EF6  B4D8               	btfsc	status,2,c
  3963  001EF8  EF80  F00F         	goto	u3671
  3964  001EFC  EF83  F00F         	goto	u3670
  3965  001F00                     u3671:
  3966  001F00  FFFF               	dw	65535	; assembler added errata NOP
  3967  001F02  EF38  F00F         	goto	l4173
  3968  001F06                     u3670:
  3969  001F06  FFFF               	dw	65535	; assembler added errata NOP
  3970  001F08  BE83               	btfsc	131,7,c	;volatile
  3971  001F0A  EF89  F00F         	goto	u3681
  3972  001F0E  EF8C  F00F         	goto	u3680
  3973  001F12                     u3681:
  3974  001F12  FFFF               	dw	65535	; assembler added errata NOP
  3975  001F14  EF38  F00F         	goto	l4173
  3976  001F18                     u3680:
  3977  001F18                     l4193:
  3978  001F18  FFFF               	dw	65535	; assembler added errata NOP
  3979                           
  3980                           ;motors.c: 663:     stopADC();
  3981  001F1A  ECA0  F013         	call	_stopADC	;wreg free
  3982  001F1E                     
  3983                           ;motors.c: 666:     T0CONbits.TMR0ON = 0;
  3984  001F1E  9ED5               	bcf	213,7,c	;volatile
  3985  001F20                     
  3986                           ;motors.c: 667:     T2CONbits.TMR2ON = 0;
  3987  001F20  94CA               	bcf	202,2,c	;volatile
  3988  001F22                     
  3989                           ;motors.c: 669:     resetTM0_Temp();
  3990  001F22  EC7B  F013         	call	_resetTM0_Temp	;wreg free
  3991  001F26                     
  3992                           ;motors.c: 670:     resetTM2_Temp();
  3993  001F26  EC00  F013         	call	_resetTM2_Temp	;wreg free
  3994  001F2A                     
  3995                           ;motors.c: 672:     TMR0 = 0;
  3996  001F2A  0E00               	movlw	0
  3997  001F2C  6ED7               	movwf	215,c	;volatile
  3998  001F2E  0E00               	movlw	0
  3999  001F30  6ED6               	movwf	214,c	;volatile
  4000  001F32                     
  4001                           ;motors.c: 673:     TMR2 = 0;
  4002  001F32  0E00               	movlw	0
  4003  001F34  6ECC               	movwf	204,c	;volatile
  4004  001F36                     
  4005                           ;motors.c: 676:     resetStep();
  4006  001F36  EC80  F013         	call	_resetStep	;wreg free
  4007  001F3A                     
  4008                           ;motors.c: 679:     if(PORTDbits.RD7){
  4009  001F3A  AE83               	btfss	131,7,c	;volatile
  4010  001F3C  EFA2  F00F         	goto	u3691
  4011  001F40  EFA5  F00F         	goto	u3690
  4012  001F44                     u3691:
  4013  001F44  FFFF               	dw	65535	; assembler added errata NOP
  4014  001F46  EFAA  F00F         	goto	l210
  4015  001F4A                     u3690:
  4016  001F4A  FFFF               	dw	65535	; assembler added errata NOP
  4017  001F4C                     
  4018                           ;motors.c: 680:         tm0Error = 2;
  4019  001F4C  0E00               	movlw	0
  4020  001F4E  6E56               	movwf	(_tm0Error+1)^0,c
  4021  001F50  0E02               	movlw	2
  4022  001F52  6E55               	movwf	_tm0Error^0,c
  4023  001F54                     l210:
  4024  001F54  FFFF               	dw	65535	; assembler added errata NOP
  4025                           
  4026                           ;motors.c: 683:     return(tm0Error);
  4027  001F56  5055               	movf	_tm0Error^0,w,c
  4028  001F58  0012               	return		;funcret
  4029  001F5A  FFFF               	dw	65535	; errata NOP
  4030  001F5C                     __end_of_touchTherm:
  4031                           	callstack 0
  4032                           
  4033 ;; *************** function _returnTherm *****************
  4034 ;; Defined at:
  4035 ;;		line 58 in file "adc.c"
  4036 ;; Parameters:    Size  Location     Type
  4037 ;;		None
  4038 ;; Auto vars:     Size  Location     Type
  4039 ;;		None
  4040 ;; Return value:  Size  Location     Type
  4041 ;;                  2   17[COMRAM] unsigned int 
  4042 ;; Registers used:
  4043 ;;		None
  4044 ;; Tracked objects:
  4045 ;;		On entry : 0/0
  4046 ;;		On exit  : 0/0
  4047 ;;		Unchanged: 0/0
  4048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4049 ;;      Params:         2       0       0       0       0       0       0
  4050 ;;      Locals:         0       0       0       0       0       0       0
  4051 ;;      Temps:          0       0       0       0       0       0       0
  4052 ;;      Totals:         2       0       0       0       0       0       0
  4053 ;;Total ram usage:        2 bytes
  4054 ;; Hardware stack levels used:    1
  4055 ;; Hardware stack levels required when called:    4
  4056 ;; This function calls:
  4057 ;;		Nothing
  4058 ;; This function is called by:
  4059 ;;		_touchTherm
  4060 ;; This function uses a non-reentrant model
  4061 ;;
  4062                           
  4063                           	psect	text20
  4064  00269E                     __ptext20:
  4065                           	callstack 0
  4066  00269E                     _returnTherm:
  4067                           	callstack 0
  4068  00269E  FFFF               	dw	65535	; assembler added errata NOP
  4069  0026A0                     
  4070                           ;adc.c: 59:     return therm_rel;
  4071  0026A0  C060  F012         	movff	_therm_rel,?_returnTherm	;volatile
  4072  0026A4  6A13               	clrf	(?_returnTherm+1)^0,c
  4073  0026A6  0012               	return		;funcret
  4074  0026A8  FFFF               	dw	65535	; errata NOP
  4075  0026AA                     __end_of_returnTherm:
  4076                           	callstack 0
  4077                           
  4078 ;; *************** function _touchObject *****************
  4079 ;; Defined at:
  4080 ;;		line 497 in file "motors.c"
  4081 ;; Parameters:    Size  Location     Type
  4082 ;;		None
  4083 ;; Auto vars:     Size  Location     Type
  4084 ;;		None
  4085 ;; Return value:  Size  Location     Type
  4086 ;;                  1    wreg      unsigned char 
  4087 ;; Registers used:
  4088 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4089 ;; Tracked objects:
  4090 ;;		On entry : 0/0
  4091 ;;		On exit  : 0/0
  4092 ;;		Unchanged: 0/0
  4093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4094 ;;      Params:         0       0       0       0       0       0       0
  4095 ;;      Locals:         0       0       0       0       0       0       0
  4096 ;;      Temps:          0       0       0       0       0       0       0
  4097 ;;      Totals:         0       0       0       0       0       0       0
  4098 ;;Total ram usage:        0 bytes
  4099 ;; Hardware stack levels used:    1
  4100 ;; Hardware stack levels required when called:    5
  4101 ;; This function calls:
  4102 ;;		_resetStep
  4103 ;;		_resetTM0_Temp
  4104 ;;		_resetTM2_Temp
  4105 ;;		_resetTherm
  4106 ;;		_resetTouch
  4107 ;;		_returnTouch
  4108 ;;		_startADC
  4109 ;;		_stepMade
  4110 ;;		_stopADC
  4111 ;; This function is called by:
  4112 ;;		_executeData
  4113 ;; This function uses a non-reentrant model
  4114 ;;
  4115                           
  4116                           	psect	text21
  4117  001F5C                     __ptext21:
  4118                           	callstack 0
  4119  001F5C                     _touchObject:
  4120                           	callstack 0
  4121  001F5C  FFFF               	dw	65535	; assembler added errata NOP
  4122  001F5E                     
  4123                           ;motors.c: 503:     motCounter[2][1] = 1;
  4124  001F5E  0E01               	movlw	1
  4125  001F60  6E68               	movwf	(_motCounter+5)^0,c
  4126  001F62                     
  4127                           ;motors.c: 506:     T2CONbits.TMR2ON = 1;
  4128  001F62  84CA               	bsf	202,2,c	;volatile
  4129                           
  4130                           ;motors.c: 508:     tm0Error = 0;
  4131  001F64  0E00               	movlw	0
  4132  001F66  6E56               	movwf	(_tm0Error+1)^0,c
  4133  001F68  0E00               	movlw	0
  4134  001F6A  6E55               	movwf	_tm0Error^0,c
  4135                           
  4136                           ;motors.c: 509:     tm0Limit = 200;
  4137  001F6C  0EC8               	movlw	200
  4138  001F6E  6E62               	movwf	_tm0Limit^0,c
  4139  001F70                     
  4140                           ;motors.c: 510:     T0CONbits.TMR0ON = 1;
  4141  001F70  8ED5               	bsf	213,7,c	;volatile
  4142  001F72                     
  4143                           ;motors.c: 513:     startADC();
  4144  001F72  EC6C  F013         	call	_startADC	;wreg free
  4145                           
  4146                           ;motors.c: 516:     resetTouch();
  4147  001F76  EC71  F013         	call	_resetTouch	;wreg free
  4148                           
  4149                           ;motors.c: 517:     resetTherm();
  4150  001F7A  EC76  F013         	call	_resetTherm	;wreg free
  4151                           
  4152                           ;motors.c: 520:     while(!returnTouch() || PORTDbits.RD7){
  4153  001F7E  EFFF  F00F         	goto	l4139
  4154  001F82                     l4123:
  4155  001F82  FFFF               	dw	65535	; assembler added errata NOP
  4156                           
  4157                           ;motors.c: 522:         resetStep();
  4158  001F84  EC80  F013         	call	_resetStep	;wreg free
  4159  001F88                     
  4160                           ;motors.c: 525:         if(tm0Error){
  4161  001F88  5055               	movf	_tm0Error^0,w,c
  4162  001F8A  1056               	iorwf	(_tm0Error+1)^0,w,c
  4163  001F8C  B4D8               	btfsc	status,2,c
  4164  001F8E  EFCB  F00F         	goto	u3581
  4165  001F92  EFCE  F00F         	goto	u3580
  4166  001F96                     u3581:
  4167  001F96  FFFF               	dw	65535	; assembler added errata NOP
  4168  001F98  EFD5  F00F         	goto	l4129
  4169  001F9C                     u3580:
  4170  001F9C  FFFF               	dw	65535	; assembler added errata NOP
  4171  001F9E                     
  4172                           ;motors.c: 530:             tm0Error = 6;
  4173  001F9E  0E00               	movlw	0
  4174  001FA0  6E56               	movwf	(_tm0Error+1)^0,c
  4175  001FA2  0E06               	movlw	6
  4176  001FA4  6E55               	movwf	_tm0Error^0,c
  4177                           
  4178                           ;motors.c: 531:             break;
  4179  001FA6  EF15  F010         	goto	l4143
  4180  001FAA                     l4129:
  4181  001FAA  FFFF               	dw	65535	; assembler added errata NOP
  4182                           
  4183                           ;motors.c: 539:             motCounter[2][0] += motCounter[2][1];
  4184  001FAC  5068               	movf	(_motCounter+5)^0,w,c
  4185  001FAE  2667               	addwf	(_motCounter+4)^0,f,c
  4186                           
  4187                           ;motors.c: 540:             if(motCounter[2][0] > 3){
  4188  001FB0  5067               	movf	(_motCounter+4)^0,w,c
  4189  001FB2  0A80               	xorlw	128
  4190  001FB4  0F7C               	addlw	-132
  4191  001FB6  A0D8               	btfss	status,0,c
  4192  001FB8  EFE0  F00F         	goto	u3591
  4193  001FBC  EFE3  F00F         	goto	u3590
  4194  001FC0                     u3591:
  4195  001FC0  FFFF               	dw	65535	; assembler added errata NOP
  4196  001FC2  EFE6  F00F         	goto	l4133
  4197  001FC6                     u3590:
  4198  001FC6  FFFF               	dw	65535	; assembler added errata NOP
  4199  001FC8                     
  4200                           ;motors.c: 541:                 motCounter[2][0] = 0;
  4201  001FC8  0E00               	movlw	0
  4202  001FCA  6E67               	movwf	(_motCounter+4)^0,c
  4203  001FCC                     l4133:
  4204  001FCC  FFFF               	dw	65535	; assembler added errata NOP
  4205                           
  4206                           ;motors.c: 544:             LATC = stepMot3[motCounter[2][0]];
  4207  001FCE  0E84               	movlw	low _stepMot3
  4208  001FD0  2467               	addwf	(_motCounter+4)^0,w,c
  4209  001FD2  6ED9               	movwf	fsr2l,c
  4210  001FD4  6ADA               	clrf	fsr2h,c
  4211  001FD6  0E00               	movlw	high _stepMot3
  4212  001FD8  22DA               	addwfc	fsr2h,f,c
  4213  001FDA  50DF               	movf	indf2,w,c
  4214  001FDC  6E8B               	movwf	139,c	;volatile
  4215  001FDE                     l4135:
  4216  001FDE  FFFF               	dw	65535	; assembler added errata NOP
  4217  001FE0  ECF6  F012         	call	_stepMade	;wreg free
  4218  001FE4  5012               	movf	?_stepMade^0,w,c
  4219  001FE6  1013               	iorwf	(?_stepMade+1)^0,w,c
  4220  001FE8  B4D8               	btfsc	status,2,c
  4221  001FEA  EFF9  F00F         	goto	u3601
  4222  001FEE  EFFC  F00F         	goto	u3600
  4223  001FF2                     u3601:
  4224  001FF2  FFFF               	dw	65535	; assembler added errata NOP
  4225  001FF4  EFEF  F00F         	goto	l4135
  4226  001FF8                     u3600:
  4227  001FF8  FFFF               	dw	65535	; assembler added errata NOP
  4228  001FFA                     
  4229                           ;motors.c: 558:         startADC();
  4230  001FFA  EC6C  F013         	call	_startADC	;wreg free
  4231  001FFE                     l4139:
  4232  001FFE  FFFF               	dw	65535	; assembler added errata NOP
  4233                           
  4234                           ;motors.c: 520:     while(!returnTouch() || PORTDbits.RD7){
  4235  002000  EC55  F013         	call	_returnTouch	;wreg free
  4236  002004  5012               	movf	?_returnTouch^0,w,c
  4237  002006  1013               	iorwf	(?_returnTouch+1)^0,w,c
  4238  002008  B4D8               	btfsc	status,2,c
  4239  00200A  EF09  F010         	goto	u3611
  4240  00200E  EF0C  F010         	goto	u3610
  4241  002012                     u3611:
  4242  002012  FFFF               	dw	65535	; assembler added errata NOP
  4243  002014  EFC1  F00F         	goto	l4123
  4244  002018                     u3610:
  4245  002018  FFFF               	dw	65535	; assembler added errata NOP
  4246  00201A  BE83               	btfsc	131,7,c	;volatile
  4247  00201C  EF12  F010         	goto	u3621
  4248  002020  EF15  F010         	goto	u3620
  4249  002024                     u3621:
  4250  002024  FFFF               	dw	65535	; assembler added errata NOP
  4251  002026  EFC1  F00F         	goto	l4123
  4252  00202A                     u3620:
  4253  00202A                     l4143:
  4254  00202A  FFFF               	dw	65535	; assembler added errata NOP
  4255                           
  4256                           ;motors.c: 563:     stopADC();
  4257  00202C  ECA0  F013         	call	_stopADC	;wreg free
  4258  002030                     
  4259                           ;motors.c: 566:     T0CONbits.TMR0ON = 0;
  4260  002030  9ED5               	bcf	213,7,c	;volatile
  4261  002032                     
  4262                           ;motors.c: 567:     T2CONbits.TMR2ON = 0;
  4263  002032  94CA               	bcf	202,2,c	;volatile
  4264  002034                     
  4265                           ;motors.c: 569:     resetTM0_Temp();
  4266  002034  EC7B  F013         	call	_resetTM0_Temp	;wreg free
  4267  002038                     
  4268                           ;motors.c: 570:     resetTM2_Temp();
  4269  002038  EC00  F013         	call	_resetTM2_Temp	;wreg free
  4270  00203C                     
  4271                           ;motors.c: 572:     TMR0 = 0;
  4272  00203C  0E00               	movlw	0
  4273  00203E  6ED7               	movwf	215,c	;volatile
  4274  002040  0E00               	movlw	0
  4275  002042  6ED6               	movwf	214,c	;volatile
  4276  002044                     
  4277                           ;motors.c: 573:     TMR2 = 0;
  4278  002044  0E00               	movlw	0
  4279  002046  6ECC               	movwf	204,c	;volatile
  4280  002048                     
  4281                           ;motors.c: 576:     resetStep();
  4282  002048  EC80  F013         	call	_resetStep	;wreg free
  4283  00204C                     
  4284                           ;motors.c: 579:     if(PORTDbits.RD7){
  4285  00204C  AE83               	btfss	131,7,c	;volatile
  4286  00204E  EF2B  F010         	goto	u3631
  4287  002052  EF2E  F010         	goto	u3630
  4288  002056                     u3631:
  4289  002056  FFFF               	dw	65535	; assembler added errata NOP
  4290  002058  EF33  F010         	goto	l198
  4291  00205C                     u3630:
  4292  00205C  FFFF               	dw	65535	; assembler added errata NOP
  4293  00205E                     
  4294                           ;motors.c: 580:         tm0Error = 2;
  4295  00205E  0E00               	movlw	0
  4296  002060  6E56               	movwf	(_tm0Error+1)^0,c
  4297  002062  0E02               	movlw	2
  4298  002064  6E55               	movwf	_tm0Error^0,c
  4299  002066                     l198:
  4300  002066  FFFF               	dw	65535	; assembler added errata NOP
  4301                           
  4302                           ;motors.c: 583:     return(tm0Error);
  4303  002068  5055               	movf	_tm0Error^0,w,c
  4304  00206A  0012               	return		;funcret
  4305  00206C  FFFF               	dw	65535	; errata NOP
  4306  00206E                     __end_of_touchObject:
  4307                           	callstack 0
  4308                           
  4309 ;; *************** function _stopADC *****************
  4310 ;; Defined at:
  4311 ;;		line 44 in file "adc.c"
  4312 ;; Parameters:    Size  Location     Type
  4313 ;;		None
  4314 ;; Auto vars:     Size  Location     Type
  4315 ;;		None
  4316 ;; Return value:  Size  Location     Type
  4317 ;;                  1    wreg      void 
  4318 ;; Registers used:
  4319 ;;		None
  4320 ;; Tracked objects:
  4321 ;;		On entry : 0/0
  4322 ;;		On exit  : 0/0
  4323 ;;		Unchanged: 0/0
  4324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4325 ;;      Params:         0       0       0       0       0       0       0
  4326 ;;      Locals:         0       0       0       0       0       0       0
  4327 ;;      Temps:          0       0       0       0       0       0       0
  4328 ;;      Totals:         0       0       0       0       0       0       0
  4329 ;;Total ram usage:        0 bytes
  4330 ;; Hardware stack levels used:    1
  4331 ;; Hardware stack levels required when called:    4
  4332 ;; This function calls:
  4333 ;;		Nothing
  4334 ;; This function is called by:
  4335 ;;		_touchObject
  4336 ;;		_touchTherm
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339                           
  4340                           	psect	text22
  4341  002740                     __ptext22:
  4342                           	callstack 0
  4343  002740                     _stopADC:
  4344                           	callstack 0
  4345  002740  FFFF               	dw	65535	; assembler added errata NOP
  4346  002742                     
  4347                           ;adc.c: 45:     ADCON0bits.ADON = 0;
  4348  002742  90C2               	bcf	194,0,c	;volatile
  4349  002744  0012               	return		;funcret
  4350  002746  FFFF               	dw	65535	; errata NOP
  4351  002748                     __end_of_stopADC:
  4352                           	callstack 0
  4353                           
  4354 ;; *************** function _startADC *****************
  4355 ;; Defined at:
  4356 ;;		line 36 in file "adc.c"
  4357 ;; Parameters:    Size  Location     Type
  4358 ;;		None
  4359 ;; Auto vars:     Size  Location     Type
  4360 ;;		None
  4361 ;; Return value:  Size  Location     Type
  4362 ;;                  1    wreg      void 
  4363 ;; Registers used:
  4364 ;;		None
  4365 ;; Tracked objects:
  4366 ;;		On entry : 0/0
  4367 ;;		On exit  : 0/0
  4368 ;;		Unchanged: 0/0
  4369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4370 ;;      Params:         0       0       0       0       0       0       0
  4371 ;;      Locals:         0       0       0       0       0       0       0
  4372 ;;      Temps:          0       0       0       0       0       0       0
  4373 ;;      Totals:         0       0       0       0       0       0       0
  4374 ;;Total ram usage:        0 bytes
  4375 ;; Hardware stack levels used:    1
  4376 ;; Hardware stack levels required when called:    4
  4377 ;; This function calls:
  4378 ;;		Nothing
  4379 ;; This function is called by:
  4380 ;;		_touchObject
  4381 ;;		_touchTherm
  4382 ;; This function uses a non-reentrant model
  4383 ;;
  4384                           
  4385                           	psect	text23
  4386  0026D8                     __ptext23:
  4387                           	callstack 0
  4388  0026D8                     _startADC:
  4389                           	callstack 0
  4390  0026D8  FFFF               	dw	65535	; assembler added errata NOP
  4391  0026DA                     
  4392                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  4393  0026DA  80C2               	bsf	194,0,c	;volatile
  4394                           
  4395                           ;adc.c: 38:     ADCON0bits.GODONE = 1;
  4396  0026DC  84C2               	bsf	194,2,c	;volatile
  4397  0026DE  0012               	return		;funcret
  4398  0026E0  FFFF               	dw	65535	; errata NOP
  4399  0026E2                     __end_of_startADC:
  4400                           	callstack 0
  4401                           
  4402 ;; *************** function _returnTouch *****************
  4403 ;; Defined at:
  4404 ;;		line 51 in file "adc.c"
  4405 ;; Parameters:    Size  Location     Type
  4406 ;;		None
  4407 ;; Auto vars:     Size  Location     Type
  4408 ;;		None
  4409 ;; Return value:  Size  Location     Type
  4410 ;;                  2   17[COMRAM] unsigned int 
  4411 ;; Registers used:
  4412 ;;		None
  4413 ;; Tracked objects:
  4414 ;;		On entry : 0/0
  4415 ;;		On exit  : 0/0
  4416 ;;		Unchanged: 0/0
  4417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4418 ;;      Params:         2       0       0       0       0       0       0
  4419 ;;      Locals:         0       0       0       0       0       0       0
  4420 ;;      Temps:          0       0       0       0       0       0       0
  4421 ;;      Totals:         2       0       0       0       0       0       0
  4422 ;;Total ram usage:        2 bytes
  4423 ;; Hardware stack levels used:    1
  4424 ;; Hardware stack levels required when called:    4
  4425 ;; This function calls:
  4426 ;;		Nothing
  4427 ;; This function is called by:
  4428 ;;		_touchObject
  4429 ;; This function uses a non-reentrant model
  4430 ;;
  4431                           
  4432                           	psect	text24
  4433  0026AA                     __ptext24:
  4434                           	callstack 0
  4435  0026AA                     _returnTouch:
  4436                           	callstack 0
  4437  0026AA  FFFF               	dw	65535	; assembler added errata NOP
  4438  0026AC                     
  4439                           ;adc.c: 52:     return touch_rel;
  4440  0026AC  C061  F012         	movff	_touch_rel,?_returnTouch	;volatile
  4441  0026B0  6A13               	clrf	(?_returnTouch+1)^0,c
  4442  0026B2  0012               	return		;funcret
  4443  0026B4  FFFF               	dw	65535	; errata NOP
  4444  0026B6                     __end_of_returnTouch:
  4445                           	callstack 0
  4446                           
  4447 ;; *************** function _resetTouch *****************
  4448 ;; Defined at:
  4449 ;;		line 65 in file "adc.c"
  4450 ;; Parameters:    Size  Location     Type
  4451 ;;		None
  4452 ;; Auto vars:     Size  Location     Type
  4453 ;;		None
  4454 ;; Return value:  Size  Location     Type
  4455 ;;                  1    wreg      void 
  4456 ;; Registers used:
  4457 ;;		wreg, status,2
  4458 ;; Tracked objects:
  4459 ;;		On entry : 0/0
  4460 ;;		On exit  : 0/0
  4461 ;;		Unchanged: 0/0
  4462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4463 ;;      Params:         0       0       0       0       0       0       0
  4464 ;;      Locals:         0       0       0       0       0       0       0
  4465 ;;      Temps:          0       0       0       0       0       0       0
  4466 ;;      Totals:         0       0       0       0       0       0       0
  4467 ;;Total ram usage:        0 bytes
  4468 ;; Hardware stack levels used:    1
  4469 ;; Hardware stack levels required when called:    4
  4470 ;; This function calls:
  4471 ;;		Nothing
  4472 ;; This function is called by:
  4473 ;;		_touchObject
  4474 ;;		_touchTherm
  4475 ;; This function uses a non-reentrant model
  4476 ;;
  4477                           
  4478                           	psect	text25
  4479  0026E2                     __ptext25:
  4480                           	callstack 0
  4481  0026E2                     _resetTouch:
  4482                           	callstack 0
  4483  0026E2  FFFF               	dw	65535	; assembler added errata NOP
  4484  0026E4                     
  4485                           ;adc.c: 66:     touch_rel = 0;
  4486  0026E4  0E00               	movlw	0
  4487  0026E6  6E61               	movwf	_touch_rel^0,c	;volatile
  4488  0026E8  0012               	return		;funcret
  4489  0026EA  FFFF               	dw	65535	; errata NOP
  4490  0026EC                     __end_of_resetTouch:
  4491                           	callstack 0
  4492                           
  4493 ;; *************** function _resetTherm *****************
  4494 ;; Defined at:
  4495 ;;		line 72 in file "adc.c"
  4496 ;; Parameters:    Size  Location     Type
  4497 ;;		None
  4498 ;; Auto vars:     Size  Location     Type
  4499 ;;		None
  4500 ;; Return value:  Size  Location     Type
  4501 ;;                  1    wreg      void 
  4502 ;; Registers used:
  4503 ;;		wreg, status,2
  4504 ;; Tracked objects:
  4505 ;;		On entry : 0/0
  4506 ;;		On exit  : 0/0
  4507 ;;		Unchanged: 0/0
  4508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4509 ;;      Params:         0       0       0       0       0       0       0
  4510 ;;      Locals:         0       0       0       0       0       0       0
  4511 ;;      Temps:          0       0       0       0       0       0       0
  4512 ;;      Totals:         0       0       0       0       0       0       0
  4513 ;;Total ram usage:        0 bytes
  4514 ;; Hardware stack levels used:    1
  4515 ;; Hardware stack levels required when called:    4
  4516 ;; This function calls:
  4517 ;;		Nothing
  4518 ;; This function is called by:
  4519 ;;		_touchObject
  4520 ;;		_touchTherm
  4521 ;; This function uses a non-reentrant model
  4522 ;;
  4523                           
  4524                           	psect	text26
  4525  0026EC                     __ptext26:
  4526                           	callstack 0
  4527  0026EC                     _resetTherm:
  4528                           	callstack 0
  4529  0026EC  FFFF               	dw	65535	; assembler added errata NOP
  4530  0026EE                     
  4531                           ;adc.c: 73:     therm_rel = 0;
  4532  0026EE  0E00               	movlw	0
  4533  0026F0  6E60               	movwf	_therm_rel^0,c	;volatile
  4534  0026F2  0012               	return		;funcret
  4535  0026F4  FFFF               	dw	65535	; errata NOP
  4536  0026F6                     __end_of_resetTherm:
  4537                           	callstack 0
  4538                           
  4539 ;; *************** function _rotateObj *****************
  4540 ;; Defined at:
  4541 ;;		line 768 in file "motors.c"
  4542 ;; Parameters:    Size  Location     Type
  4543 ;;  rotAngle        1    wreg     unsigned char 
  4544 ;; Auto vars:     Size  Location     Type
  4545 ;;  rotAngle        1    0[BANK0 ] unsigned char 
  4546 ;;  c               2    5[BANK0 ] unsigned int 
  4547 ;;  i               2    3[BANK0 ] unsigned int 
  4548 ;;  totStep         2    1[BANK0 ] int 
  4549 ;; Return value:  Size  Location     Type
  4550 ;;                  1    wreg      void 
  4551 ;; Registers used:
  4552 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4553 ;; Tracked objects:
  4554 ;;		On entry : 0/0
  4555 ;;		On exit  : 0/0
  4556 ;;		Unchanged: 0/0
  4557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4558 ;;      Params:         0       0       0       0       0       0       0
  4559 ;;      Locals:         0       7       0       0       0       0       0
  4560 ;;      Temps:          0       0       0       0       0       0       0
  4561 ;;      Totals:         0       7       0       0       0       0       0
  4562 ;;Total ram usage:        7 bytes
  4563 ;; Hardware stack levels used:    1
  4564 ;; Hardware stack levels required when called:    5
  4565 ;; This function calls:
  4566 ;;		___fldiv
  4567 ;;		___fltol
  4568 ;;		___xxtofl
  4569 ;;		_resetStep
  4570 ;;		_resetTM2_Temp
  4571 ;;		_stepMade
  4572 ;; This function is called by:
  4573 ;;		_executeData
  4574 ;; This function uses a non-reentrant model
  4575 ;;
  4576                           
  4577                           	psect	text27
  4578  00206E                     __ptext27:
  4579                           	callstack 0
  4580  00206E                     _rotateObj:
  4581                           	callstack 0
  4582  00206E  FFFF               	dw	65535	; assembler added errata NOP
  4583                           
  4584                           ;incstack = 0
  4585                           ;rotateObj@rotAngle stored from wreg
  4586  002070  0100               	movlb	0	; () banked
  4587  002072  6FE6               	movwf	rotateObj@rotAngle& (0+255),b
  4588  002074                     
  4589                           ;motors.c: 770:     static const float stepAngle = 2;;motors.c: 771:     static char rot
      +                          Sequence[] = {0b100100, 0b001100, 0b011000, 0b110000};;motors.c: 772:     unsigned int i
      +                          , c = 0;
  4590  002074  0E00               	movlw	0
  4591  002076  0100               	movlb	0	; () banked
  4592  002078  6FEC               	movwf	(rotateObj@c+1)& (0+255),b
  4593  00207A  0E00               	movlw	0
  4594  00207C  6FEB               	movwf	rotateObj@c& (0+255),b
  4595  00207E                     
  4596                           ; BSR set to: 0
  4597                           ;motors.c: 773:     int totStep = rotAngle/stepAngle;
  4598  00207E  0E00               	movlw	0
  4599  002080  6E24               	movwf	___fldiv@a^0,c
  4600  002082  0E00               	movlw	0
  4601  002084  6E25               	movwf	(___fldiv@a+1)^0,c
  4602  002086  0E00               	movlw	0
  4603  002088  6E26               	movwf	(___fldiv@a+2)^0,c
  4604  00208A  0E40               	movlw	64
  4605  00208C  6E27               	movwf	(___fldiv@a+3)^0,c
  4606  00208E  51E6               	movf	rotateObj@rotAngle& (0+255),w,b
  4607  002090  6E12               	movwf	___xxtofl@val^0,c
  4608  002092  6A13               	clrf	(___xxtofl@val+1)^0,c
  4609  002094  6A14               	clrf	(___xxtofl@val+2)^0,c
  4610  002096  6A15               	clrf	(___xxtofl@val+3)^0,c
  4611  002098  0E01               	movlw	1
  4612  00209A  ECAB  F00A         	call	___xxtofl
  4613  00209E  C012  F020         	movff	?___xxtofl,___fldiv@b
  4614  0020A2  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4615  0020A6  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4616  0020AA  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4617  0020AE  EC09  F003         	call	___fldiv	;wreg free
  4618  0020B2  C020  F039         	movff	?___fldiv,___fltol@f1
  4619  0020B6  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4620  0020BA  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4621  0020BE  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4622  0020C2  EC6E  F00D         	call	___fltol	;wreg free
  4623  0020C6  C039  F0E7         	movff	?___fltol,rotateObj@totStep
  4624  0020CA  C03A  F0E8         	movff	?___fltol+1,rotateObj@totStep+1
  4625  0020CE                     
  4626                           ;motors.c: 776:     for(i = 0; i < totStep; i++){
  4627  0020CE  0E00               	movlw	0
  4628  0020D0  0100               	movlb	0	; () banked
  4629  0020D2  6FEA               	movwf	(rotateObj@i+1)& (0+255),b
  4630  0020D4  0E00               	movlw	0
  4631  0020D6  6FE9               	movwf	rotateObj@i& (0+255),b
  4632  0020D8  EFA0  F010         	goto	l4267
  4633  0020DC                     l4251:
  4634  0020DC  FFFF               	dw	65535	; assembler added errata NOP
  4635                           
  4636                           ; BSR set to: 0
  4637                           ;motors.c: 780:         LATD = rotSequence[c];
  4638  0020DE  0E80               	movlw	low rotateObj@rotSequence
  4639  0020E0  25EB               	addwf	rotateObj@c& (0+255),w,b
  4640  0020E2  6ED9               	movwf	fsr2l,c
  4641  0020E4  0E00               	movlw	high rotateObj@rotSequence
  4642  0020E6  21EC               	addwfc	(rotateObj@c+1)& (0+255),w,b
  4643  0020E8  6EDA               	movwf	fsr2h,c
  4644  0020EA  50DF               	movf	indf2,w,c
  4645  0020EC  6E8C               	movwf	140,c	;volatile
  4646  0020EE                     
  4647                           ; BSR set to: 0
  4648                           ;motors.c: 782:         c++;
  4649  0020EE  4BEB               	infsnz	rotateObj@c& (0+255),f,b
  4650  0020F0  2BEC               	incf	(rotateObj@c+1)& (0+255),f,b
  4651  0020F2                     
  4652                           ; BSR set to: 0
  4653                           ;motors.c: 783:         if (c >= 4) {c = 0;}
  4654  0020F2  51EC               	movf	(rotateObj@c+1)& (0+255),w,b
  4655  0020F4  E10A               	bnz	u3740
  4656  0020F6  0E04               	movlw	4
  4657  0020F8  5DEB               	subwf	rotateObj@c& (0+255),w,b
  4658  0020FA  A0D8               	btfss	status,0,c
  4659  0020FC  EF82  F010         	goto	u3741
  4660  002100  EF85  F010         	goto	u3740
  4661  002104                     u3741:
  4662  002104  FFFF               	dw	65535	; assembler added errata NOP
  4663  002106  EF8A  F010         	goto	l4259
  4664  00210A                     u3740:
  4665  00210A  FFFF               	dw	65535	; assembler added errata NOP
  4666  00210C                     
  4667                           ; BSR set to: 0
  4668  00210C  0E00               	movlw	0
  4669  00210E  6FEC               	movwf	(rotateObj@c+1)& (0+255),b
  4670  002110  0E00               	movlw	0
  4671  002112  6FEB               	movwf	rotateObj@c& (0+255),b
  4672  002114                     l4259:
  4673  002114  FFFF               	dw	65535	; assembler added errata NOP
  4674                           
  4675                           ; BSR set to: 0
  4676                           ;motors.c: 786:         T2CONbits.TMR2ON = 1;
  4677  002116  84CA               	bsf	202,2,c	;volatile
  4678  002118                     l4261:
  4679  002118  FFFF               	dw	65535	; assembler added errata NOP
  4680  00211A  ECF6  F012         	call	_stepMade	;wreg free
  4681  00211E  5012               	movf	?_stepMade^0,w,c
  4682  002120  1013               	iorwf	(?_stepMade+1)^0,w,c
  4683  002122  B4D8               	btfsc	status,2,c
  4684  002124  EF96  F010         	goto	u3751
  4685  002128  EF99  F010         	goto	u3750
  4686  00212C                     u3751:
  4687  00212C  FFFF               	dw	65535	; assembler added errata NOP
  4688  00212E  EF8C  F010         	goto	l4261
  4689  002132                     u3750:
  4690  002132  FFFF               	dw	65535	; assembler added errata NOP
  4691  002134                     
  4692                           ;motors.c: 788:         T2CONbits.TMR2ON = 0;
  4693  002134  94CA               	bcf	202,2,c	;volatile
  4694  002136                     
  4695                           ;motors.c: 789:         TMR2 = 0;
  4696  002136  0E00               	movlw	0
  4697  002138  6ECC               	movwf	204,c	;volatile
  4698  00213A                     
  4699                           ;motors.c: 790:     }
  4700  00213A  0100               	movlb	0	; () banked
  4701  00213C  4BE9               	infsnz	rotateObj@i& (0+255),f,b
  4702  00213E  2BEA               	incf	(rotateObj@i+1)& (0+255),f,b
  4703  002140                     l4267:
  4704  002140  FFFF               	dw	65535	; assembler added errata NOP
  4705                           
  4706                           ; BSR set to: 0
  4707  002142  51E7               	movf	rotateObj@totStep& (0+255),w,b
  4708  002144  5DE9               	subwf	rotateObj@i& (0+255),w,b
  4709  002146  51E8               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4710  002148  59EA               	subwfb	(rotateObj@i+1)& (0+255),w,b
  4711  00214A  A0D8               	btfss	status,0,c
  4712  00214C  EFAA  F010         	goto	u3761
  4713  002150  EFAD  F010         	goto	u3760
  4714  002154                     u3761:
  4715  002154  FFFF               	dw	65535	; assembler added errata NOP
  4716  002156  EF6E  F010         	goto	l4251
  4717  00215A                     u3760:
  4718  00215A  FFFF               	dw	65535	; assembler added errata NOP
  4719  00215C                     
  4720                           ; BSR set to: 0
  4721                           ;motors.c: 793:     resetTM2_Temp();
  4722  00215C  EC00  F013         	call	_resetTM2_Temp	;wreg free
  4723                           
  4724                           ;motors.c: 796:     resetStep();
  4725  002160  EC80  F013         	call	_resetStep	;wreg free
  4726  002164  0012               	return		;funcret
  4727  002166  FFFF               	dw	65535	; errata NOP
  4728  002168                     __end_of_rotateObj:
  4729                           	callstack 0
  4730                           
  4731 ;; *************** function ___xxtofl *****************
  4732 ;; Defined at:
  4733 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4734 ;; Parameters:    Size  Location     Type
  4735 ;;  sign            1    wreg     unsigned char 
  4736 ;;  val             4   17[COMRAM] long 
  4737 ;; Auto vars:     Size  Location     Type
  4738 ;;  sign            1   25[COMRAM] unsigned char 
  4739 ;;  arg             4   27[COMRAM] unsigned long 
  4740 ;;  exp             1   26[COMRAM] unsigned char 
  4741 ;; Return value:  Size  Location     Type
  4742 ;;                  4   17[COMRAM] unsigned char 
  4743 ;; Registers used:
  4744 ;;		wreg, status,2, status,0
  4745 ;; Tracked objects:
  4746 ;;		On entry : 0/0
  4747 ;;		On exit  : 0/0
  4748 ;;		Unchanged: 0/0
  4749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4750 ;;      Params:         4       0       0       0       0       0       0
  4751 ;;      Locals:         6       0       0       0       0       0       0
  4752 ;;      Temps:          4       0       0       0       0       0       0
  4753 ;;      Totals:        14       0       0       0       0       0       0
  4754 ;;Total ram usage:       14 bytes
  4755 ;; Hardware stack levels used:    1
  4756 ;; Hardware stack levels required when called:    4
  4757 ;; This function calls:
  4758 ;;		Nothing
  4759 ;; This function is called by:
  4760 ;;		_rotateObj
  4761 ;; This function uses a non-reentrant model
  4762 ;;
  4763                           
  4764                           	psect	text28
  4765  001556                     __ptext28:
  4766                           	callstack 0
  4767  001556                     ___xxtofl:
  4768                           	callstack 0
  4769  001556  FFFF               	dw	65535	; assembler added errata NOP
  4770                           
  4771                           ;incstack = 0
  4772                           ;___xxtofl@sign stored from wreg
  4773  001558  6E1A               	movwf	___xxtofl@sign^0,c
  4774  00155A  501A               	movf	___xxtofl@sign^0,w,c
  4775  00155C  B4D8               	btfsc	status,2,c
  4776  00155E  EFB3  F00A         	goto	u3261
  4777  001562  EFB6  F00A         	goto	u3260
  4778  001566                     u3261:
  4779  001566  FFFF               	dw	65535	; assembler added errata NOP
  4780  001568  EFDB  F00A         	goto	l1301
  4781  00156C                     u3260:
  4782  00156C  FFFF               	dw	65535	; assembler added errata NOP
  4783  00156E  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4784  001570  EFBF  F00A         	goto	u3270
  4785  001574  EFBC  F00A         	goto	u3271
  4786  001578                     u3271:
  4787  001578  FFFF               	dw	65535	; assembler added errata NOP
  4788  00157A  EFDB  F00A         	goto	l1301
  4789  00157E                     u3270:
  4790  00157E  FFFF               	dw	65535	; assembler added errata NOP
  4791  001580  C012  F016         	movff	___xxtofl@val,??___xxtofl
  4792  001584  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  4793  001588  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  4794  00158C  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  4795  001590  1E16               	comf	??___xxtofl^0,f,c
  4796  001592  1E17               	comf	(??___xxtofl+1)^0,f,c
  4797  001594  1E18               	comf	(??___xxtofl+2)^0,f,c
  4798  001596  1E19               	comf	(??___xxtofl+3)^0,f,c
  4799  001598  2A16               	incf	??___xxtofl^0,f,c
  4800  00159A  0E00               	movlw	0
  4801  00159C  2217               	addwfc	(??___xxtofl+1)^0,f,c
  4802  00159E  2218               	addwfc	(??___xxtofl+2)^0,f,c
  4803  0015A0  2219               	addwfc	(??___xxtofl+3)^0,f,c
  4804  0015A2  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  4805  0015A6  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4806  0015AA  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4807  0015AE  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4808  0015B2  EFE4  F00A         	goto	l3983
  4809  0015B6                     l1301:
  4810  0015B6  FFFF               	dw	65535	; assembler added errata NOP
  4811  0015B8  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  4812  0015BC  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4813  0015C0  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4814  0015C4  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4815  0015C8                     l3983:
  4816  0015C8  FFFF               	dw	65535	; assembler added errata NOP
  4817  0015CA  5012               	movf	___xxtofl@val^0,w,c
  4818  0015CC  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  4819  0015CE  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  4820  0015D0  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  4821  0015D2  A4D8               	btfss	status,2,c
  4822  0015D4  EFEE  F00A         	goto	u3281
  4823  0015D8  EFF1  F00A         	goto	u3280
  4824  0015DC                     u3281:
  4825  0015DC  FFFF               	dw	65535	; assembler added errata NOP
  4826  0015DE  EFFC  F00A         	goto	l3989
  4827  0015E2                     u3280:
  4828  0015E2  FFFF               	dw	65535	; assembler added errata NOP
  4829  0015E4  0E00               	movlw	0
  4830  0015E6  6E12               	movwf	?___xxtofl^0,c
  4831  0015E8  0E00               	movlw	0
  4832  0015EA  6E13               	movwf	(?___xxtofl+1)^0,c
  4833  0015EC  0E00               	movlw	0
  4834  0015EE  6E14               	movwf	(?___xxtofl+2)^0,c
  4835  0015F0  0E00               	movlw	0
  4836  0015F2  6E15               	movwf	(?___xxtofl+3)^0,c
  4837  0015F4  EFA4  F00B         	goto	l1304
  4838  0015F8                     l3989:
  4839  0015F8  FFFF               	dw	65535	; assembler added errata NOP
  4840  0015FA  0E96               	movlw	150
  4841  0015FC  6E1B               	movwf	___xxtofl@exp^0,c
  4842  0015FE  EF08  F00B         	goto	l3993
  4843  001602                     l3991:
  4844  001602  FFFF               	dw	65535	; assembler added errata NOP
  4845  001604  2A1B               	incf	___xxtofl@exp^0,f,c
  4846  001606  90D8               	bcf	status,0,c
  4847  001608  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4848  00160A  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4849  00160C  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4850  00160E  321C               	rrcf	___xxtofl@arg^0,f,c
  4851  001610                     l3993:
  4852  001610  FFFF               	dw	65535	; assembler added errata NOP
  4853  001612  0E00               	movlw	0
  4854  001614  141C               	andwf	___xxtofl@arg^0,w,c
  4855  001616  6E16               	movwf	??___xxtofl^0,c
  4856  001618  0E00               	movlw	0
  4857  00161A  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4858  00161C  6E17               	movwf	(??___xxtofl+1)^0,c
  4859  00161E  0E00               	movlw	0
  4860  001620  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4861  001622  6E18               	movwf	(??___xxtofl+2)^0,c
  4862  001624  0EFE               	movlw	254
  4863  001626  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4864  001628  6E19               	movwf	(??___xxtofl+3)^0,c
  4865  00162A  5016               	movf	??___xxtofl^0,w,c
  4866  00162C  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4867  00162E  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4868  001630  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4869  001632  A4D8               	btfss	status,2,c
  4870  001634  EF1E  F00B         	goto	u3291
  4871  001638  EF21  F00B         	goto	u3290
  4872  00163C                     u3291:
  4873  00163C  FFFF               	dw	65535	; assembler added errata NOP
  4874  00163E  EF01  F00B         	goto	l3991
  4875  001642                     u3290:
  4876  001642  FFFF               	dw	65535	; assembler added errata NOP
  4877  001644  EF31  F00B         	goto	l1308
  4878  001648                     l3995:
  4879  001648  FFFF               	dw	65535	; assembler added errata NOP
  4880  00164A  2A1B               	incf	___xxtofl@exp^0,f,c
  4881  00164C  0E01               	movlw	1
  4882  00164E  261C               	addwf	___xxtofl@arg^0,f,c
  4883  001650  0E00               	movlw	0
  4884  001652  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4885  001654  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4886  001656  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4887  001658  90D8               	bcf	status,0,c
  4888  00165A  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4889  00165C  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4890  00165E  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4891  001660  321C               	rrcf	___xxtofl@arg^0,f,c
  4892  001662                     l1308:
  4893  001662  FFFF               	dw	65535	; assembler added errata NOP
  4894  001664  0E00               	movlw	0
  4895  001666  141C               	andwf	___xxtofl@arg^0,w,c
  4896  001668  6E16               	movwf	??___xxtofl^0,c
  4897  00166A  0E00               	movlw	0
  4898  00166C  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4899  00166E  6E17               	movwf	(??___xxtofl+1)^0,c
  4900  001670  0E00               	movlw	0
  4901  001672  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4902  001674  6E18               	movwf	(??___xxtofl+2)^0,c
  4903  001676  0EFF               	movlw	255
  4904  001678  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4905  00167A  6E19               	movwf	(??___xxtofl+3)^0,c
  4906  00167C  5016               	movf	??___xxtofl^0,w,c
  4907  00167E  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4908  001680  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4909  001682  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4910  001684  A4D8               	btfss	status,2,c
  4911  001686  EF47  F00B         	goto	u3301
  4912  00168A  EF4A  F00B         	goto	u3300
  4913  00168E                     u3301:
  4914  00168E  FFFF               	dw	65535	; assembler added errata NOP
  4915  001690  EF24  F00B         	goto	l3995
  4916  001694                     u3300:
  4917  001694  FFFF               	dw	65535	; assembler added errata NOP
  4918  001696  EF54  F00B         	goto	l4003
  4919  00169A                     l4001:
  4920  00169A  FFFF               	dw	65535	; assembler added errata NOP
  4921  00169C  061B               	decf	___xxtofl@exp^0,f,c
  4922  00169E  90D8               	bcf	status,0,c
  4923  0016A0  361C               	rlcf	___xxtofl@arg^0,f,c
  4924  0016A2  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4925  0016A4  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4926  0016A6  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4927  0016A8                     l4003:
  4928  0016A8  FFFF               	dw	65535	; assembler added errata NOP
  4929  0016AA  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4930  0016AC  EF5A  F00B         	goto	u3311
  4931  0016B0  EF5D  F00B         	goto	u3310
  4932  0016B4                     u3311:
  4933  0016B4  FFFF               	dw	65535	; assembler added errata NOP
  4934  0016B6  EF67  F00B         	goto	l1315
  4935  0016BA                     u3310:
  4936  0016BA  FFFF               	dw	65535	; assembler added errata NOP
  4937  0016BC  0E02               	movlw	2
  4938  0016BE  601B               	cpfslt	___xxtofl@exp^0,c
  4939  0016C0  EF64  F00B         	goto	u3321
  4940  0016C4  EF67  F00B         	goto	u3320
  4941  0016C8                     u3321:
  4942  0016C8  FFFF               	dw	65535	; assembler added errata NOP
  4943  0016CA  EF4D  F00B         	goto	l4001
  4944  0016CE                     u3320:
  4945  0016CE                     l1315:
  4946  0016CE  FFFF               	dw	65535	; assembler added errata NOP
  4947  0016D0  B01B               	btfsc	___xxtofl@exp^0,0,c
  4948  0016D2  EF6D  F00B         	goto	u3331
  4949  0016D6  EF70  F00B         	goto	u3330
  4950  0016DA                     u3331:
  4951  0016DA  FFFF               	dw	65535	; assembler added errata NOP
  4952  0016DC  EF72  F00B         	goto	l4009
  4953  0016E0                     u3330:
  4954  0016E0  FFFF               	dw	65535	; assembler added errata NOP
  4955  0016E2  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  4956  0016E4                     l4009:
  4957  0016E4  FFFF               	dw	65535	; assembler added errata NOP
  4958  0016E6  90D8               	bcf	status,0,c
  4959  0016E8  321B               	rrcf	___xxtofl@exp^0,f,c
  4960  0016EA  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  4961  0016EE  6A17               	clrf	(??___xxtofl+1)^0,c
  4962  0016F0  6A18               	clrf	(??___xxtofl+2)^0,c
  4963  0016F2  6A19               	clrf	(??___xxtofl+3)^0,c
  4964  0016F4  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  4965  0016F8  6A18               	clrf	(??___xxtofl+2)^0,c
  4966  0016FA  6A17               	clrf	(??___xxtofl+1)^0,c
  4967  0016FC  6A16               	clrf	??___xxtofl^0,c
  4968  0016FE  5016               	movf	??___xxtofl^0,w,c
  4969  001700  121C               	iorwf	___xxtofl@arg^0,f,c
  4970  001702  5017               	movf	(??___xxtofl+1)^0,w,c
  4971  001704  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4972  001706  5018               	movf	(??___xxtofl+2)^0,w,c
  4973  001708  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4974  00170A  5019               	movf	(??___xxtofl+3)^0,w,c
  4975  00170C  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4976  00170E  501A               	movf	___xxtofl@sign^0,w,c
  4977  001710  B4D8               	btfsc	status,2,c
  4978  001712  EF8D  F00B         	goto	u3341
  4979  001716  EF90  F00B         	goto	u3340
  4980  00171A                     u3341:
  4981  00171A  FFFF               	dw	65535	; assembler added errata NOP
  4982  00171C  EF9B  F00B         	goto	l4019
  4983  001720                     u3340:
  4984  001720  FFFF               	dw	65535	; assembler added errata NOP
  4985  001722  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4986  001724  EF99  F00B         	goto	u3350
  4987  001728  EF96  F00B         	goto	u3351
  4988  00172C                     u3351:
  4989  00172C  FFFF               	dw	65535	; assembler added errata NOP
  4990  00172E  EF9B  F00B         	goto	l4019
  4991  001732                     u3350:
  4992  001732  FFFF               	dw	65535	; assembler added errata NOP
  4993  001734  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  4994  001736                     l4019:
  4995  001736  FFFF               	dw	65535	; assembler added errata NOP
  4996  001738  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  4997  00173C  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  4998  001740  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  4999  001744  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  5000  001748                     l1304:
  5001  001748  FFFF               	dw	65535	; assembler added errata NOP
  5002  00174A  0012               	return		;funcret
  5003  00174C  FFFF               	dw	65535	; errata NOP
  5004  00174E                     __end_of___xxtofl:
  5005                           	callstack 0
  5006                           
  5007 ;; *************** function ___fltol *****************
  5008 ;; Defined at:
  5009 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  5010 ;; Parameters:    Size  Location     Type
  5011 ;;  f1              4   56[COMRAM] unsigned char 
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;  exp1            1   65[COMRAM] unsigned char 
  5014 ;;  sign1           1   64[COMRAM] unsigned char 
  5015 ;; Return value:  Size  Location     Type
  5016 ;;                  4   56[COMRAM] long 
  5017 ;; Registers used:
  5018 ;;		wreg, status,2, status,0
  5019 ;; Tracked objects:
  5020 ;;		On entry : 0/0
  5021 ;;		On exit  : 0/0
  5022 ;;		Unchanged: 0/0
  5023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5024 ;;      Params:         4       0       0       0       0       0       0
  5025 ;;      Locals:         2       0       0       0       0       0       0
  5026 ;;      Temps:          4       0       0       0       0       0       0
  5027 ;;      Totals:        10       0       0       0       0       0       0
  5028 ;;Total ram usage:       10 bytes
  5029 ;; Hardware stack levels used:    1
  5030 ;; Hardware stack levels required when called:    4
  5031 ;; This function calls:
  5032 ;;		Nothing
  5033 ;; This function is called by:
  5034 ;;		_rotateObj
  5035 ;; This function uses a non-reentrant model
  5036 ;;
  5037                           
  5038                           	psect	text29
  5039  001ADC                     __ptext29:
  5040                           	callstack 0
  5041  001ADC                     ___fltol:
  5042                           	callstack 0
  5043  001ADC  FFFF               	dw	65535	; assembler added errata NOP
  5044  001ADE  343B               	rlcf	(___fltol@f1+2)^0,w,c
  5045  001AE0  343C               	rlcf	(___fltol@f1+3)^0,w,c
  5046  001AE2  6E42               	movwf	___fltol@exp1^0,c
  5047  001AE4  5042               	movf	___fltol@exp1^0,w,c
  5048  001AE6  A4D8               	btfss	status,2,c
  5049  001AE8  EF78  F00D         	goto	u3191
  5050  001AEC  EF7B  F00D         	goto	u3190
  5051  001AF0                     u3191:
  5052  001AF0  FFFF               	dw	65535	; assembler added errata NOP
  5053  001AF2  EF87  F00D         	goto	l3939
  5054  001AF6                     u3190:
  5055  001AF6  FFFF               	dw	65535	; assembler added errata NOP
  5056  001AF8                     l3935:
  5057  001AF8  FFFF               	dw	65535	; assembler added errata NOP
  5058  001AFA  0E00               	movlw	0
  5059  001AFC  6E39               	movwf	?___fltol^0,c
  5060  001AFE  0E00               	movlw	0
  5061  001B00  6E3A               	movwf	(?___fltol+1)^0,c
  5062  001B02  0E00               	movlw	0
  5063  001B04  6E3B               	movwf	(?___fltol+2)^0,c
  5064  001B06  0E00               	movlw	0
  5065  001B08  6E3C               	movwf	(?___fltol+3)^0,c
  5066  001B0A  EF06  F00E         	goto	l943
  5067  001B0E                     l3939:
  5068  001B0E  FFFF               	dw	65535	; assembler added errata NOP
  5069  001B10  C039  F03D         	movff	___fltol@f1,??___fltol
  5070  001B14  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  5071  001B18  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  5072  001B1C  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  5073  001B20  0E20               	movlw	32
  5074  001B22  EF99  F00D         	goto	u3200
  5075  001B26                     u3205:
  5076  001B26  FFFF               	dw	65535	; assembler added errata NOP
  5077  001B28  90D8               	bcf	status,0,c
  5078  001B2A  3240               	rrcf	(??___fltol+3)^0,f,c
  5079  001B2C  323F               	rrcf	(??___fltol+2)^0,f,c
  5080  001B2E  323E               	rrcf	(??___fltol+1)^0,f,c
  5081  001B30  323D               	rrcf	??___fltol^0,f,c
  5082  001B32                     u3200:
  5083  001B32  FFFF               	dw	65535	; assembler added errata NOP
  5084  001B34  2EE8               	decfsz	wreg,f,c
  5085  001B36  EF93  F00D         	goto	u3205
  5086  001B3A  503D               	movf	??___fltol^0,w,c
  5087  001B3C  6E41               	movwf	___fltol@sign1^0,c
  5088  001B3E  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  5089  001B40  0EFF               	movlw	255
  5090  001B42  1639               	andwf	___fltol@f1^0,f,c
  5091  001B44  0EFF               	movlw	255
  5092  001B46  163A               	andwf	(___fltol@f1+1)^0,f,c
  5093  001B48  0EFF               	movlw	255
  5094  001B4A  163B               	andwf	(___fltol@f1+2)^0,f,c
  5095  001B4C  0E00               	movlw	0
  5096  001B4E  163C               	andwf	(___fltol@f1+3)^0,f,c
  5097  001B50  0E96               	movlw	150
  5098  001B52  5E42               	subwf	___fltol@exp1^0,f,c
  5099  001B54  BE42               	btfsc	___fltol@exp1^0,7,c
  5100  001B56  EFB2  F00D         	goto	u3210
  5101  001B5A  EFAF  F00D         	goto	u3211
  5102  001B5E                     u3211:
  5103  001B5E  FFFF               	dw	65535	; assembler added errata NOP
  5104  001B60  EFCC  F00D         	goto	l3959
  5105  001B64                     u3210:
  5106  001B64  FFFF               	dw	65535	; assembler added errata NOP
  5107  001B66  5042               	movf	___fltol@exp1^0,w,c
  5108  001B68  0A80               	xorlw	128
  5109  001B6A  0F97               	addlw	151
  5110  001B6C  B0D8               	btfsc	status,0,c
  5111  001B6E  EFBB  F00D         	goto	u3221
  5112  001B72  EFBE  F00D         	goto	u3220
  5113  001B76                     u3221:
  5114  001B76  FFFF               	dw	65535	; assembler added errata NOP
  5115  001B78  EFC1  F00D         	goto	l3955
  5116  001B7C                     u3220:
  5117  001B7C  FFFF               	dw	65535	; assembler added errata NOP
  5118  001B7E  EF7C  F00D         	goto	l3935
  5119  001B82                     l3955:
  5120  001B82  FFFF               	dw	65535	; assembler added errata NOP
  5121  001B84  90D8               	bcf	status,0,c
  5122  001B86  323C               	rrcf	(___fltol@f1+3)^0,f,c
  5123  001B88  323B               	rrcf	(___fltol@f1+2)^0,f,c
  5124  001B8A  323A               	rrcf	(___fltol@f1+1)^0,f,c
  5125  001B8C  3239               	rrcf	___fltol@f1^0,f,c
  5126  001B8E  3E42               	incfsz	___fltol@exp1^0,f,c
  5127  001B90  EFC1  F00D         	goto	l3955
  5128  001B94  EFEA  F00D         	goto	l3969
  5129  001B98                     l3959:
  5130  001B98  FFFF               	dw	65535	; assembler added errata NOP
  5131  001B9A  0E1F               	movlw	31
  5132  001B9C  6442               	cpfsgt	___fltol@exp1^0,c
  5133  001B9E  EFD3  F00D         	goto	u3231
  5134  001BA2  EFD6  F00D         	goto	u3230
  5135  001BA6                     u3231:
  5136  001BA6  FFFF               	dw	65535	; assembler added errata NOP
  5137  001BA8  EFE0  F00D         	goto	l3967
  5138  001BAC                     u3230:
  5139  001BAC  FFFF               	dw	65535	; assembler added errata NOP
  5140  001BAE  EF7C  F00D         	goto	l3935
  5141  001BB2                     l3965:
  5142  001BB2  FFFF               	dw	65535	; assembler added errata NOP
  5143  001BB4  90D8               	bcf	status,0,c
  5144  001BB6  3639               	rlcf	___fltol@f1^0,f,c
  5145  001BB8  363A               	rlcf	(___fltol@f1+1)^0,f,c
  5146  001BBA  363B               	rlcf	(___fltol@f1+2)^0,f,c
  5147  001BBC  363C               	rlcf	(___fltol@f1+3)^0,f,c
  5148  001BBE  0642               	decf	___fltol@exp1^0,f,c
  5149  001BC0                     l3967:
  5150  001BC0  FFFF               	dw	65535	; assembler added errata NOP
  5151  001BC2  5042               	movf	___fltol@exp1^0,w,c
  5152  001BC4  A4D8               	btfss	status,2,c
  5153  001BC6  EFE7  F00D         	goto	u3241
  5154  001BCA  EFEA  F00D         	goto	u3240
  5155  001BCE                     u3241:
  5156  001BCE  FFFF               	dw	65535	; assembler added errata NOP
  5157  001BD0  EFD9  F00D         	goto	l3965
  5158  001BD4                     u3240:
  5159  001BD4                     l3969:
  5160  001BD4  FFFF               	dw	65535	; assembler added errata NOP
  5161  001BD6  5041               	movf	___fltol@sign1^0,w,c
  5162  001BD8  B4D8               	btfsc	status,2,c
  5163  001BDA  EFF1  F00D         	goto	u3251
  5164  001BDE  EFF4  F00D         	goto	u3250
  5165  001BE2                     u3251:
  5166  001BE2  FFFF               	dw	65535	; assembler added errata NOP
  5167  001BE4  EFFD  F00D         	goto	l3973
  5168  001BE8                     u3250:
  5169  001BE8  FFFF               	dw	65535	; assembler added errata NOP
  5170  001BEA  1E3C               	comf	(___fltol@f1+3)^0,f,c
  5171  001BEC  1E3B               	comf	(___fltol@f1+2)^0,f,c
  5172  001BEE  1E3A               	comf	(___fltol@f1+1)^0,f,c
  5173  001BF0  6C39               	negf	___fltol@f1^0,c
  5174  001BF2  0E00               	movlw	0
  5175  001BF4  223A               	addwfc	(___fltol@f1+1)^0,f,c
  5176  001BF6  223B               	addwfc	(___fltol@f1+2)^0,f,c
  5177  001BF8  223C               	addwfc	(___fltol@f1+3)^0,f,c
  5178  001BFA                     l3973:
  5179  001BFA  FFFF               	dw	65535	; assembler added errata NOP
  5180  001BFC  C039  F039         	movff	___fltol@f1,?___fltol
  5181  001C00  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  5182  001C04  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  5183  001C08  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  5184  001C0C                     l943:
  5185  001C0C  FFFF               	dw	65535	; assembler added errata NOP
  5186  001C0E  0012               	return		;funcret
  5187  001C10  FFFF               	dw	65535	; errata NOP
  5188  001C12                     __end_of___fltol:
  5189                           	callstack 0
  5190                           
  5191 ;; *************** function ___fldiv *****************
  5192 ;; Defined at:
  5193 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  5194 ;; Parameters:    Size  Location     Type
  5195 ;;  b               4   31[COMRAM] long 
  5196 ;;  a               4   35[COMRAM] long 
  5197 ;; Auto vars:     Size  Location     Type
  5198 ;;  grs             4   50[COMRAM] unsigned long 
  5199 ;;  rem             4   43[COMRAM] unsigned long 
  5200 ;;  new_exp         2   48[COMRAM] short 
  5201 ;;  aexp            1   55[COMRAM] unsigned char 
  5202 ;;  bexp            1   54[COMRAM] unsigned char 
  5203 ;;  sign            1   47[COMRAM] unsigned char 
  5204 ;; Return value:  Size  Location     Type
  5205 ;;                  4   31[COMRAM] unsigned char 
  5206 ;; Registers used:
  5207 ;;		wreg, status,2, status,0
  5208 ;; Tracked objects:
  5209 ;;		On entry : 0/0
  5210 ;;		On exit  : 0/0
  5211 ;;		Unchanged: 0/0
  5212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5213 ;;      Params:         8       0       0       0       0       0       0
  5214 ;;      Locals:        13       0       0       0       0       0       0
  5215 ;;      Temps:          4       0       0       0       0       0       0
  5216 ;;      Totals:        25       0       0       0       0       0       0
  5217 ;;Total ram usage:       25 bytes
  5218 ;; Hardware stack levels used:    1
  5219 ;; Hardware stack levels required when called:    4
  5220 ;; This function calls:
  5221 ;;		Nothing
  5222 ;; This function is called by:
  5223 ;;		_rotateObj
  5224 ;; This function uses a non-reentrant model
  5225 ;;
  5226                           
  5227                           	psect	text30
  5228  000612                     __ptext30:
  5229                           	callstack 0
  5230  000612                     ___fldiv:
  5231                           	callstack 0
  5232  000612  FFFF               	dw	65535	; assembler added errata NOP
  5233  000614  5023               	movf	(___fldiv@b+3)^0,w,c
  5234  000616  0B80               	andlw	128
  5235  000618  6E30               	movwf	___fldiv@sign^0,c
  5236  00061A  5023               	movf	(___fldiv@b+3)^0,w,c
  5237  00061C  2423               	addwf	(___fldiv@b+3)^0,w,c
  5238  00061E  6E37               	movwf	___fldiv@bexp^0,c
  5239  000620  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5240  000622  EF15  F003         	goto	u2961
  5241  000626  EF18  F003         	goto	u2960
  5242  00062A                     u2961:
  5243  00062A  FFFF               	dw	65535	; assembler added errata NOP
  5244  00062C  EF1A  F003         	goto	l3801
  5245  000630                     u2960:
  5246  000630  FFFF               	dw	65535	; assembler added errata NOP
  5247  000632  8037               	bsf	___fldiv@bexp^0,0,c
  5248  000634                     l3801:
  5249  000634  FFFF               	dw	65535	; assembler added errata NOP
  5250  000636  5037               	movf	___fldiv@bexp^0,w,c
  5251  000638  B4D8               	btfsc	status,2,c
  5252  00063A  EF21  F003         	goto	u2971
  5253  00063E  EF24  F003         	goto	u2970
  5254  000642                     u2971:
  5255  000642  FFFF               	dw	65535	; assembler added errata NOP
  5256  000644  EF3D  F003         	goto	l3811
  5257  000648                     u2970:
  5258  000648  FFFF               	dw	65535	; assembler added errata NOP
  5259  00064A  2837               	incf	___fldiv@bexp^0,w,c
  5260  00064C  A4D8               	btfss	status,2,c
  5261  00064E  EF2B  F003         	goto	u2981
  5262  000652  EF2E  F003         	goto	u2980
  5263  000656                     u2981:
  5264  000656  FFFF               	dw	65535	; assembler added errata NOP
  5265  000658  EF37  F003         	goto	l3807
  5266  00065C                     u2980:
  5267  00065C  FFFF               	dw	65535	; assembler added errata NOP
  5268  00065E  0E00               	movlw	0
  5269  000660  6E20               	movwf	___fldiv@b^0,c
  5270  000662  0E00               	movlw	0
  5271  000664  6E21               	movwf	(___fldiv@b+1)^0,c
  5272  000666  0E00               	movlw	0
  5273  000668  6E22               	movwf	(___fldiv@b+2)^0,c
  5274  00066A  0E00               	movlw	0
  5275  00066C  6E23               	movwf	(___fldiv@b+3)^0,c
  5276  00066E                     l3807:
  5277  00066E  FFFF               	dw	65535	; assembler added errata NOP
  5278  000670  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5279  000672  0E00               	movlw	0
  5280  000674  6E23               	movwf	(___fldiv@b+3)^0,c
  5281  000676  EF46  F003         	goto	l3813
  5282  00067A                     l3811:
  5283  00067A  FFFF               	dw	65535	; assembler added errata NOP
  5284  00067C  0E00               	movlw	0
  5285  00067E  6E20               	movwf	___fldiv@b^0,c
  5286  000680  0E00               	movlw	0
  5287  000682  6E21               	movwf	(___fldiv@b+1)^0,c
  5288  000684  0E00               	movlw	0
  5289  000686  6E22               	movwf	(___fldiv@b+2)^0,c
  5290  000688  0E00               	movlw	0
  5291  00068A  6E23               	movwf	(___fldiv@b+3)^0,c
  5292  00068C                     l3813:
  5293  00068C  FFFF               	dw	65535	; assembler added errata NOP
  5294  00068E  5027               	movf	(___fldiv@a+3)^0,w,c
  5295  000690  0B80               	andlw	128
  5296  000692  1A30               	xorwf	___fldiv@sign^0,f,c
  5297  000694  5027               	movf	(___fldiv@a+3)^0,w,c
  5298  000696  2427               	addwf	(___fldiv@a+3)^0,w,c
  5299  000698  6E38               	movwf	___fldiv@aexp^0,c
  5300  00069A  AE26               	btfss	(___fldiv@a+2)^0,7,c
  5301  00069C  EF52  F003         	goto	u2991
  5302  0006A0  EF55  F003         	goto	u2990
  5303  0006A4                     u2991:
  5304  0006A4  FFFF               	dw	65535	; assembler added errata NOP
  5305  0006A6  EF57  F003         	goto	l3821
  5306  0006AA                     u2990:
  5307  0006AA  FFFF               	dw	65535	; assembler added errata NOP
  5308  0006AC  8038               	bsf	___fldiv@aexp^0,0,c
  5309  0006AE                     l3821:
  5310  0006AE  FFFF               	dw	65535	; assembler added errata NOP
  5311  0006B0  5038               	movf	___fldiv@aexp^0,w,c
  5312  0006B2  B4D8               	btfsc	status,2,c
  5313  0006B4  EF5E  F003         	goto	u3001
  5314  0006B8  EF61  F003         	goto	u3000
  5315  0006BC                     u3001:
  5316  0006BC  FFFF               	dw	65535	; assembler added errata NOP
  5317  0006BE  EF7A  F003         	goto	l3831
  5318  0006C2                     u3000:
  5319  0006C2  FFFF               	dw	65535	; assembler added errata NOP
  5320  0006C4  2838               	incf	___fldiv@aexp^0,w,c
  5321  0006C6  A4D8               	btfss	status,2,c
  5322  0006C8  EF68  F003         	goto	u3011
  5323  0006CC  EF6B  F003         	goto	u3010
  5324  0006D0                     u3011:
  5325  0006D0  FFFF               	dw	65535	; assembler added errata NOP
  5326  0006D2  EF74  F003         	goto	l3827
  5327  0006D6                     u3010:
  5328  0006D6  FFFF               	dw	65535	; assembler added errata NOP
  5329  0006D8  0E00               	movlw	0
  5330  0006DA  6E24               	movwf	___fldiv@a^0,c
  5331  0006DC  0E00               	movlw	0
  5332  0006DE  6E25               	movwf	(___fldiv@a+1)^0,c
  5333  0006E0  0E00               	movlw	0
  5334  0006E2  6E26               	movwf	(___fldiv@a+2)^0,c
  5335  0006E4  0E00               	movlw	0
  5336  0006E6  6E27               	movwf	(___fldiv@a+3)^0,c
  5337  0006E8                     l3827:
  5338  0006E8  FFFF               	dw	65535	; assembler added errata NOP
  5339  0006EA  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5340  0006EC  0E00               	movlw	0
  5341  0006EE  6E27               	movwf	(___fldiv@a+3)^0,c
  5342  0006F0  EF83  F003         	goto	l3833
  5343  0006F4                     l3831:
  5344  0006F4  FFFF               	dw	65535	; assembler added errata NOP
  5345  0006F6  0E00               	movlw	0
  5346  0006F8  6E24               	movwf	___fldiv@a^0,c
  5347  0006FA  0E00               	movlw	0
  5348  0006FC  6E25               	movwf	(___fldiv@a+1)^0,c
  5349  0006FE  0E00               	movlw	0
  5350  000700  6E26               	movwf	(___fldiv@a+2)^0,c
  5351  000702  0E00               	movlw	0
  5352  000704  6E27               	movwf	(___fldiv@a+3)^0,c
  5353  000706                     l3833:
  5354  000706  FFFF               	dw	65535	; assembler added errata NOP
  5355  000708  5024               	movf	___fldiv@a^0,w,c
  5356  00070A  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5357  00070C  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5358  00070E  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5359  000710  A4D8               	btfss	status,2,c
  5360  000712  EF8D  F003         	goto	u3021
  5361  000716  EF90  F003         	goto	u3020
  5362  00071A                     u3021:
  5363  00071A  FFFF               	dw	65535	; assembler added errata NOP
  5364  00071C  EFAA  F003         	goto	l3845
  5365  000720                     u3020:
  5366  000720  FFFF               	dw	65535	; assembler added errata NOP
  5367  000722  0E00               	movlw	0
  5368  000724  6E20               	movwf	___fldiv@b^0,c
  5369  000726  0E00               	movlw	0
  5370  000728  6E21               	movwf	(___fldiv@b+1)^0,c
  5371  00072A  0E00               	movlw	0
  5372  00072C  6E22               	movwf	(___fldiv@b+2)^0,c
  5373  00072E  0E00               	movlw	0
  5374  000730  6E23               	movwf	(___fldiv@b+3)^0,c
  5375  000732  0E80               	movlw	128
  5376  000734  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5377  000736  0E7F               	movlw	127
  5378  000738  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5379  00073A                     l3839:
  5380  00073A  FFFF               	dw	65535	; assembler added errata NOP
  5381  00073C  5030               	movf	___fldiv@sign^0,w,c
  5382  00073E  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5383  000740  C020  F020         	movff	___fldiv@b,?___fldiv
  5384  000744  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5385  000748  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5386  00074C  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5387  000750  EF1F  F005         	goto	l1228
  5388  000754                     l3845:
  5389  000754  FFFF               	dw	65535	; assembler added errata NOP
  5390  000756  5037               	movf	___fldiv@bexp^0,w,c
  5391  000758  A4D8               	btfss	status,2,c
  5392  00075A  EFB1  F003         	goto	u3031
  5393  00075E  EFB4  F003         	goto	u3030
  5394  000762                     u3031:
  5395  000762  FFFF               	dw	65535	; assembler added errata NOP
  5396  000764  EFBF  F003         	goto	l3853
  5397  000768                     u3030:
  5398  000768  FFFF               	dw	65535	; assembler added errata NOP
  5399  00076A  0E00               	movlw	0
  5400  00076C  6E20               	movwf	?___fldiv^0,c
  5401  00076E  0E00               	movlw	0
  5402  000770  6E21               	movwf	(?___fldiv+1)^0,c
  5403  000772  0E00               	movlw	0
  5404  000774  6E22               	movwf	(?___fldiv+2)^0,c
  5405  000776  0E00               	movlw	0
  5406  000778  6E23               	movwf	(?___fldiv+3)^0,c
  5407  00077A  EF1F  F005         	goto	l1228
  5408  00077E                     l3853:
  5409  00077E  FFFF               	dw	65535	; assembler added errata NOP
  5410  000780  5038               	movf	___fldiv@aexp^0,w,c
  5411  000782  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5412  000786  6A29               	clrf	(??___fldiv+1)^0,c
  5413  000788  5E28               	subwf	??___fldiv^0,f,c
  5414  00078A  0E00               	movlw	0
  5415  00078C  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5416  00078E  0E7F               	movlw	127
  5417  000790  2428               	addwf	??___fldiv^0,w,c
  5418  000792  6E31               	movwf	___fldiv@new_exp^0,c
  5419  000794  0E00               	movlw	0
  5420  000796  2029               	addwfc	(??___fldiv+1)^0,w,c
  5421  000798  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5422  00079A  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5423  00079E  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5424  0007A2  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5425  0007A6  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5426  0007AA  0E00               	movlw	0
  5427  0007AC  6E20               	movwf	___fldiv@b^0,c
  5428  0007AE  0E00               	movlw	0
  5429  0007B0  6E21               	movwf	(___fldiv@b+1)^0,c
  5430  0007B2  0E00               	movlw	0
  5431  0007B4  6E22               	movwf	(___fldiv@b+2)^0,c
  5432  0007B6  0E00               	movlw	0
  5433  0007B8  6E23               	movwf	(___fldiv@b+3)^0,c
  5434  0007BA  0E00               	movlw	0
  5435  0007BC  6E33               	movwf	___fldiv@grs^0,c
  5436  0007BE  0E00               	movlw	0
  5437  0007C0  6E34               	movwf	(___fldiv@grs+1)^0,c
  5438  0007C2  0E00               	movlw	0
  5439  0007C4  6E35               	movwf	(___fldiv@grs+2)^0,c
  5440  0007C6  0E00               	movlw	0
  5441  0007C8  6E36               	movwf	(___fldiv@grs+3)^0,c
  5442  0007CA  0E00               	movlw	0
  5443  0007CC  6E38               	movwf	___fldiv@aexp^0,c
  5444  0007CE  EF2B  F004         	goto	l1230
  5445  0007D2                     l3863:
  5446  0007D2  FFFF               	dw	65535	; assembler added errata NOP
  5447  0007D4  5038               	movf	___fldiv@aexp^0,w,c
  5448  0007D6  B4D8               	btfsc	status,2,c
  5449  0007D8  EFF0  F003         	goto	u3041
  5450  0007DC  EFF3  F003         	goto	u3040
  5451  0007E0                     u3041:
  5452  0007E0  FFFF               	dw	65535	; assembler added errata NOP
  5453  0007E2  EF0E  F004         	goto	l3871
  5454  0007E6                     u3040:
  5455  0007E6  FFFF               	dw	65535	; assembler added errata NOP
  5456  0007E8  90D8               	bcf	status,0,c
  5457  0007EA  362C               	rlcf	___fldiv@rem^0,f,c
  5458  0007EC  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5459  0007EE  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5460  0007F0  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5461  0007F2  90D8               	bcf	status,0,c
  5462  0007F4  3620               	rlcf	___fldiv@b^0,f,c
  5463  0007F6  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5464  0007F8  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5465  0007FA  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5466  0007FC  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5467  0007FE  EF03  F004         	goto	u3051
  5468  000802  EF06  F004         	goto	u3050
  5469  000806                     u3051:
  5470  000806  FFFF               	dw	65535	; assembler added errata NOP
  5471  000808  EF08  F004         	goto	l1233
  5472  00080C                     u3050:
  5473  00080C  FFFF               	dw	65535	; assembler added errata NOP
  5474  00080E  8020               	bsf	___fldiv@b^0,0,c
  5475  000810                     l1233:
  5476  000810  FFFF               	dw	65535	; assembler added errata NOP
  5477  000812  90D8               	bcf	status,0,c
  5478  000814  3633               	rlcf	___fldiv@grs^0,f,c
  5479  000816  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5480  000818  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5481  00081A  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5482  00081C                     l3871:
  5483  00081C  FFFF               	dw	65535	; assembler added errata NOP
  5484  00081E  5024               	movf	___fldiv@a^0,w,c
  5485  000820  5C2C               	subwf	___fldiv@rem^0,w,c
  5486  000822  5025               	movf	(___fldiv@a+1)^0,w,c
  5487  000824  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5488  000826  5026               	movf	(___fldiv@a+2)^0,w,c
  5489  000828  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5490  00082A  5027               	movf	(___fldiv@a+3)^0,w,c
  5491  00082C  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5492  00082E  A0D8               	btfss	status,0,c
  5493  000830  EF1C  F004         	goto	u3061
  5494  000834  EF1F  F004         	goto	u3060
  5495  000838                     u3061:
  5496  000838  FFFF               	dw	65535	; assembler added errata NOP
  5497  00083A  EF29  F004         	goto	l3877
  5498  00083E                     u3060:
  5499  00083E  FFFF               	dw	65535	; assembler added errata NOP
  5500  000840  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5501  000842  5024               	movf	___fldiv@a^0,w,c
  5502  000844  5E2C               	subwf	___fldiv@rem^0,f,c
  5503  000846  5025               	movf	(___fldiv@a+1)^0,w,c
  5504  000848  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5505  00084A  5026               	movf	(___fldiv@a+2)^0,w,c
  5506  00084C  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5507  00084E  5027               	movf	(___fldiv@a+3)^0,w,c
  5508  000850  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5509  000852                     l3877:
  5510  000852  FFFF               	dw	65535	; assembler added errata NOP
  5511  000854  2A38               	incf	___fldiv@aexp^0,f,c
  5512  000856                     l1230:
  5513  000856  FFFF               	dw	65535	; assembler added errata NOP
  5514  000858  0E19               	movlw	25
  5515  00085A  6438               	cpfsgt	___fldiv@aexp^0,c
  5516  00085C  EF32  F004         	goto	u3071
  5517  000860  EF35  F004         	goto	u3070
  5518  000864                     u3071:
  5519  000864  FFFF               	dw	65535	; assembler added errata NOP
  5520  000866  EFE9  F003         	goto	l3863
  5521  00086A                     u3070:
  5522  00086A  FFFF               	dw	65535	; assembler added errata NOP
  5523  00086C  502C               	movf	___fldiv@rem^0,w,c
  5524  00086E  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5525  000870  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5526  000872  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5527  000874  B4D8               	btfsc	status,2,c
  5528  000876  EF3F  F004         	goto	u3081
  5529  00087A  EF42  F004         	goto	u3080
  5530  00087E                     u3081:
  5531  00087E  FFFF               	dw	65535	; assembler added errata NOP
  5532  000880  EF5F  F004         	goto	l3889
  5533  000884                     u3080:
  5534  000884  FFFF               	dw	65535	; assembler added errata NOP
  5535  000886  8033               	bsf	___fldiv@grs^0,0,c
  5536  000888  EF5F  F004         	goto	l3889
  5537  00088C                     l3883:
  5538  00088C  FFFF               	dw	65535	; assembler added errata NOP
  5539  00088E  90D8               	bcf	status,0,c
  5540  000890  3620               	rlcf	___fldiv@b^0,f,c
  5541  000892  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5542  000894  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5543  000896  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5544  000898  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5545  00089A  EF51  F004         	goto	u3091
  5546  00089E  EF54  F004         	goto	u3090
  5547  0008A2                     u3091:
  5548  0008A2  FFFF               	dw	65535	; assembler added errata NOP
  5549  0008A4  EF56  F004         	goto	l1239
  5550  0008A8                     u3090:
  5551  0008A8  FFFF               	dw	65535	; assembler added errata NOP
  5552  0008AA  8020               	bsf	___fldiv@b^0,0,c
  5553  0008AC                     l1239:
  5554  0008AC  FFFF               	dw	65535	; assembler added errata NOP
  5555  0008AE  90D8               	bcf	status,0,c
  5556  0008B0  3633               	rlcf	___fldiv@grs^0,f,c
  5557  0008B2  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5558  0008B4  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5559  0008B6  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5560  0008B8  0631               	decf	___fldiv@new_exp^0,f,c
  5561  0008BA  A0D8               	btfss	status,0,c
  5562  0008BC  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5563  0008BE                     l3889:
  5564  0008BE  FFFF               	dw	65535	; assembler added errata NOP
  5565  0008C0  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5566  0008C2  EF65  F004         	goto	u3101
  5567  0008C6  EF68  F004         	goto	u3100
  5568  0008CA                     u3101:
  5569  0008CA  FFFF               	dw	65535	; assembler added errata NOP
  5570  0008CC  EF46  F004         	goto	l3883
  5571  0008D0                     u3100:
  5572  0008D0  FFFF               	dw	65535	; assembler added errata NOP
  5573  0008D2  0E00               	movlw	0
  5574  0008D4  6E38               	movwf	___fldiv@aexp^0,c
  5575  0008D6  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5576  0008D8  EF70  F004         	goto	u3111
  5577  0008DC  EF73  F004         	goto	u3110
  5578  0008E0                     u3111:
  5579  0008E0  FFFF               	dw	65535	; assembler added errata NOP
  5580  0008E2  EF9E  F004         	goto	l1241
  5581  0008E6                     u3110:
  5582  0008E6  FFFF               	dw	65535	; assembler added errata NOP
  5583  0008E8  0EFF               	movlw	255
  5584  0008EA  1433               	andwf	___fldiv@grs^0,w,c
  5585  0008EC  6E28               	movwf	??___fldiv^0,c
  5586  0008EE  0EFF               	movlw	255
  5587  0008F0  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5588  0008F2  6E29               	movwf	(??___fldiv+1)^0,c
  5589  0008F4  0EFF               	movlw	255
  5590  0008F6  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5591  0008F8  6E2A               	movwf	(??___fldiv+2)^0,c
  5592  0008FA  0E7F               	movlw	127
  5593  0008FC  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5594  0008FE  6E2B               	movwf	(??___fldiv+3)^0,c
  5595  000900  5028               	movf	??___fldiv^0,w,c
  5596  000902  1029               	iorwf	(??___fldiv+1)^0,w,c
  5597  000904  102A               	iorwf	(??___fldiv+2)^0,w,c
  5598  000906  102B               	iorwf	(??___fldiv+3)^0,w,c
  5599  000908  B4D8               	btfsc	status,2,c
  5600  00090A  EF89  F004         	goto	u3121
  5601  00090E  EF8C  F004         	goto	u3120
  5602  000912                     u3121:
  5603  000912  FFFF               	dw	65535	; assembler added errata NOP
  5604  000914  EF92  F004         	goto	l1242
  5605  000918                     u3120:
  5606  000918  FFFF               	dw	65535	; assembler added errata NOP
  5607  00091A                     l3897:
  5608  00091A  FFFF               	dw	65535	; assembler added errata NOP
  5609  00091C  0E01               	movlw	1
  5610  00091E  6E38               	movwf	___fldiv@aexp^0,c
  5611  000920  EF9E  F004         	goto	l1241
  5612  000924                     l1242:
  5613  000924  FFFF               	dw	65535	; assembler added errata NOP
  5614  000926  A020               	btfss	___fldiv@b^0,0,c
  5615  000928  EF98  F004         	goto	u3131
  5616  00092C  EF9B  F004         	goto	u3130
  5617  000930                     u3131:
  5618  000930  FFFF               	dw	65535	; assembler added errata NOP
  5619  000932  EF9E  F004         	goto	l1241
  5620  000936                     u3130:
  5621  000936  FFFF               	dw	65535	; assembler added errata NOP
  5622  000938  EF8D  F004         	goto	l3897
  5623  00093C                     l1241:
  5624  00093C  FFFF               	dw	65535	; assembler added errata NOP
  5625  00093E  5038               	movf	___fldiv@aexp^0,w,c
  5626  000940  B4D8               	btfsc	status,2,c
  5627  000942  EFA5  F004         	goto	u3141
  5628  000946  EFA8  F004         	goto	u3140
  5629  00094A                     u3141:
  5630  00094A  FFFF               	dw	65535	; assembler added errata NOP
  5631  00094C  EFCF  F004         	goto	l3909
  5632  000950                     u3140:
  5633  000950  FFFF               	dw	65535	; assembler added errata NOP
  5634  000952  0E01               	movlw	1
  5635  000954  2620               	addwf	___fldiv@b^0,f,c
  5636  000956  0E00               	movlw	0
  5637  000958  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5638  00095A  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5639  00095C  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5640  00095E  A023               	btfss	(___fldiv@b+3)^0,0,c
  5641  000960  EFB4  F004         	goto	u3151
  5642  000964  EFB7  F004         	goto	u3150
  5643  000968                     u3151:
  5644  000968  FFFF               	dw	65535	; assembler added errata NOP
  5645  00096A  EFCF  F004         	goto	l3909
  5646  00096E                     u3150:
  5647  00096E  FFFF               	dw	65535	; assembler added errata NOP
  5648  000970  C020  F028         	movff	___fldiv@b,??___fldiv
  5649  000974  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5650  000978  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5651  00097C  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5652  000980  342B               	rlcf	(??___fldiv+3)^0,w,c
  5653  000982  322B               	rrcf	(??___fldiv+3)^0,f,c
  5654  000984  322A               	rrcf	(??___fldiv+2)^0,f,c
  5655  000986  3229               	rrcf	(??___fldiv+1)^0,f,c
  5656  000988  3228               	rrcf	??___fldiv^0,f,c
  5657  00098A  C028  F020         	movff	??___fldiv,___fldiv@b
  5658  00098E  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5659  000992  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5660  000996  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5661  00099A  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5662  00099C  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5663  00099E                     l3909:
  5664  00099E  FFFF               	dw	65535	; assembler added errata NOP
  5665  0009A0  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5666  0009A2  EFDB  F004         	goto	u3161
  5667  0009A6  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5668  0009A8  E109               	bnz	u3160
  5669  0009AA  2831               	incf	___fldiv@new_exp^0,w,c
  5670  0009AC  A0D8               	btfss	status,0,c
  5671  0009AE  EFDB  F004         	goto	u3161
  5672  0009B2  EFDE  F004         	goto	u3160
  5673  0009B6                     u3161:
  5674  0009B6  FFFF               	dw	65535	; assembler added errata NOP
  5675  0009B8  EFEA  F004         	goto	l3913
  5676  0009BC                     u3160:
  5677  0009BC  FFFF               	dw	65535	; assembler added errata NOP
  5678  0009BE  0E00               	movlw	0
  5679  0009C0  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5680  0009C2  6831               	setf	___fldiv@new_exp^0,c
  5681  0009C4  0E00               	movlw	0
  5682  0009C6  6E20               	movwf	___fldiv@b^0,c
  5683  0009C8  0E00               	movlw	0
  5684  0009CA  6E21               	movwf	(___fldiv@b+1)^0,c
  5685  0009CC  0E00               	movlw	0
  5686  0009CE  6E22               	movwf	(___fldiv@b+2)^0,c
  5687  0009D0  0E00               	movlw	0
  5688  0009D2  6E23               	movwf	(___fldiv@b+3)^0,c
  5689  0009D4                     l3913:
  5690  0009D4  FFFF               	dw	65535	; assembler added errata NOP
  5691  0009D6  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5692  0009D8  EFF9  F004         	goto	u3170
  5693  0009DC  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5694  0009DE  E106               	bnz	u3171
  5695  0009E0  0431               	decf	___fldiv@new_exp^0,w,c
  5696  0009E2  B0D8               	btfsc	status,0,c
  5697  0009E4  EFF6  F004         	goto	u3171
  5698  0009E8  EFF9  F004         	goto	u3170
  5699  0009EC                     u3171:
  5700  0009EC  FFFF               	dw	65535	; assembler added errata NOP
  5701  0009EE  EF08  F005         	goto	l3917
  5702  0009F2                     u3170:
  5703  0009F2  FFFF               	dw	65535	; assembler added errata NOP
  5704  0009F4  0E00               	movlw	0
  5705  0009F6  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5706  0009F8  0E00               	movlw	0
  5707  0009FA  6E31               	movwf	___fldiv@new_exp^0,c
  5708  0009FC  0E00               	movlw	0
  5709  0009FE  6E20               	movwf	___fldiv@b^0,c
  5710  000A00  0E00               	movlw	0
  5711  000A02  6E21               	movwf	(___fldiv@b+1)^0,c
  5712  000A04  0E00               	movlw	0
  5713  000A06  6E22               	movwf	(___fldiv@b+2)^0,c
  5714  000A08  0E00               	movlw	0
  5715  000A0A  6E23               	movwf	(___fldiv@b+3)^0,c
  5716  000A0C  0E00               	movlw	0
  5717  000A0E  6E30               	movwf	___fldiv@sign^0,c
  5718  000A10                     l3917:
  5719  000A10  FFFF               	dw	65535	; assembler added errata NOP
  5720  000A12  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5721  000A16  A037               	btfss	___fldiv@bexp^0,0,c
  5722  000A18  EF10  F005         	goto	u3181
  5723  000A1C  EF13  F005         	goto	u3180
  5724  000A20                     u3181:
  5725  000A20  FFFF               	dw	65535	; assembler added errata NOP
  5726  000A22  EF17  F005         	goto	l3923
  5727  000A26                     u3180:
  5728  000A26  FFFF               	dw	65535	; assembler added errata NOP
  5729  000A28  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5730  000A2A  EF19  F005         	goto	l3925
  5731  000A2E                     l3923:
  5732  000A2E  FFFF               	dw	65535	; assembler added errata NOP
  5733  000A30  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5734  000A32                     l3925:
  5735  000A32  FFFF               	dw	65535	; assembler added errata NOP
  5736  000A34  90D8               	bcf	status,0,c
  5737  000A36  3037               	rrcf	___fldiv@bexp^0,w,c
  5738  000A38  6E23               	movwf	(___fldiv@b+3)^0,c
  5739  000A3A  EF9D  F003         	goto	l3839
  5740  000A3E                     l1228:
  5741  000A3E  FFFF               	dw	65535	; assembler added errata NOP
  5742  000A40  0012               	return		;funcret
  5743  000A42  FFFF               	dw	65535	; errata NOP
  5744  000A44                     __end_of___fldiv:
  5745                           	callstack 0
  5746                           
  5747 ;; *************** function _releaseObj *****************
  5748 ;; Defined at:
  5749 ;;		line 819 in file "motors.c"
  5750 ;; Parameters:    Size  Location     Type
  5751 ;;		None
  5752 ;; Auto vars:     Size  Location     Type
  5753 ;;		None
  5754 ;; Return value:  Size  Location     Type
  5755 ;;                  1    wreg      void 
  5756 ;; Registers used:
  5757 ;;		wreg, status,2, status,0, cstack
  5758 ;; Tracked objects:
  5759 ;;		On entry : 0/0
  5760 ;;		On exit  : 0/0
  5761 ;;		Unchanged: 0/0
  5762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5763 ;;      Params:         0       0       0       0       0       0       0
  5764 ;;      Locals:         0       0       0       0       0       0       0
  5765 ;;      Temps:          0       0       0       0       0       0       0
  5766 ;;      Totals:         0       0       0       0       0       0       0
  5767 ;;Total ram usage:        0 bytes
  5768 ;; Hardware stack levels used:    1
  5769 ;; Hardware stack levels required when called:    5
  5770 ;; This function calls:
  5771 ;;		_resetTM2_Temp
  5772 ;;		_stepMade
  5773 ;; This function is called by:
  5774 ;;		_executeData
  5775 ;; This function uses a non-reentrant model
  5776 ;;
  5777                           
  5778                           	psect	text31
  5779  002522                     __ptext31:
  5780                           	callstack 0
  5781  002522                     _releaseObj:
  5782                           	callstack 0
  5783  002522  FFFF               	dw	65535	; assembler added errata NOP
  5784  002524                     
  5785                           ;motors.c: 820:     LATDbits.LATD1 = 0;
  5786  002524  928C               	bcf	140,1,c	;volatile
  5787                           
  5788                           ;motors.c: 823:     T2CONbits.TMR2ON = 1;
  5789  002526  84CA               	bsf	202,2,c	;volatile
  5790  002528                     l4281:
  5791  002528  FFFF               	dw	65535	; assembler added errata NOP
  5792  00252A  ECF6  F012         	call	_stepMade	;wreg free
  5793  00252E  5012               	movf	?_stepMade^0,w,c
  5794  002530  1013               	iorwf	(?_stepMade+1)^0,w,c
  5795  002532  B4D8               	btfsc	status,2,c
  5796  002534  EF9E  F012         	goto	u3781
  5797  002538  EFA1  F012         	goto	u3780
  5798  00253C                     u3781:
  5799  00253C  FFFF               	dw	65535	; assembler added errata NOP
  5800  00253E  EF94  F012         	goto	l4281
  5801  002542                     u3780:
  5802  002542  FFFF               	dw	65535	; assembler added errata NOP
  5803  002544                     
  5804                           ;motors.c: 825:     T2CONbits.TMR2ON = 0;
  5805  002544  94CA               	bcf	202,2,c	;volatile
  5806  002546                     
  5807                           ;motors.c: 826:     TMR2 = 0;
  5808  002546  0E00               	movlw	0
  5809  002548  6ECC               	movwf	204,c	;volatile
  5810  00254A                     
  5811                           ;motors.c: 829:     resetTM2_Temp();
  5812  00254A  EC00  F013         	call	_resetTM2_Temp	;wreg free
  5813  00254E  0012               	return		;funcret
  5814  002550  FFFF               	dw	65535	; errata NOP
  5815  002552                     __end_of_releaseObj:
  5816                           	callstack 0
  5817                           
  5818 ;; *************** function _pickObject *****************
  5819 ;; Defined at:
  5820 ;;		line 802 in file "motors.c"
  5821 ;; Parameters:    Size  Location     Type
  5822 ;;		None
  5823 ;; Auto vars:     Size  Location     Type
  5824 ;;		None
  5825 ;; Return value:  Size  Location     Type
  5826 ;;                  1    wreg      void 
  5827 ;; Registers used:
  5828 ;;		wreg, status,2, status,0, cstack
  5829 ;; Tracked objects:
  5830 ;;		On entry : 0/0
  5831 ;;		On exit  : 0/0
  5832 ;;		Unchanged: 0/0
  5833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5834 ;;      Params:         0       0       0       0       0       0       0
  5835 ;;      Locals:         0       0       0       0       0       0       0
  5836 ;;      Temps:          0       0       0       0       0       0       0
  5837 ;;      Totals:         0       0       0       0       0       0       0
  5838 ;;Total ram usage:        0 bytes
  5839 ;; Hardware stack levels used:    1
  5840 ;; Hardware stack levels required when called:    5
  5841 ;; This function calls:
  5842 ;;		_resetTM2_Temp
  5843 ;;		_stepMade
  5844 ;; This function is called by:
  5845 ;;		_executeData
  5846 ;; This function uses a non-reentrant model
  5847 ;;
  5848                           
  5849                           	psect	text32
  5850  002552                     __ptext32:
  5851                           	callstack 0
  5852  002552                     _pickObject:
  5853                           	callstack 0
  5854  002552  FFFF               	dw	65535	; assembler added errata NOP
  5855  002554                     
  5856                           ;motors.c: 803:     LATDbits.LATD1 = 1;
  5857  002554  828C               	bsf	140,1,c	;volatile
  5858                           
  5859                           ;motors.c: 806:     T2CONbits.TMR2ON = 1;
  5860  002556  84CA               	bsf	202,2,c	;volatile
  5861  002558                     l4273:
  5862  002558  FFFF               	dw	65535	; assembler added errata NOP
  5863  00255A  ECF6  F012         	call	_stepMade	;wreg free
  5864  00255E  5012               	movf	?_stepMade^0,w,c
  5865  002560  1013               	iorwf	(?_stepMade+1)^0,w,c
  5866  002562  B4D8               	btfsc	status,2,c
  5867  002564  EFB6  F012         	goto	u3771
  5868  002568  EFB9  F012         	goto	u3770
  5869  00256C                     u3771:
  5870  00256C  FFFF               	dw	65535	; assembler added errata NOP
  5871  00256E  EFAC  F012         	goto	l4273
  5872  002572                     u3770:
  5873  002572  FFFF               	dw	65535	; assembler added errata NOP
  5874  002574                     
  5875                           ;motors.c: 808:     T2CONbits.TMR2ON = 0;
  5876  002574  94CA               	bcf	202,2,c	;volatile
  5877  002576                     
  5878                           ;motors.c: 809:     TMR2 = 0;
  5879  002576  0E00               	movlw	0
  5880  002578  6ECC               	movwf	204,c	;volatile
  5881  00257A                     
  5882                           ;motors.c: 812:     resetTM2_Temp();
  5883  00257A  EC00  F013         	call	_resetTM2_Temp	;wreg free
  5884  00257E  0012               	return		;funcret
  5885  002580  FFFF               	dw	65535	; errata NOP
  5886  002582                     __end_of_pickObject:
  5887                           	callstack 0
  5888                           
  5889 ;; *************** function _moveToPoint *****************
  5890 ;; Defined at:
  5891 ;;		line 315 in file "motors.c"
  5892 ;; Parameters:    Size  Location     Type
  5893 ;;  x1              2   20[COMRAM] int 
  5894 ;;  y1              2   22[COMRAM] int 
  5895 ;;  x2              2   24[COMRAM] int 
  5896 ;;  y2              2   26[COMRAM] int 
  5897 ;; Auto vars:     Size  Location     Type
  5898 ;;  keepMovingY     1   33[COMRAM] unsigned char 
  5899 ;;  keepMovingX     1   32[COMRAM] unsigned char 
  5900 ;;  MOT2Directio    1   31[COMRAM] unsigned char 
  5901 ;;  MOT1Directio    1   30[COMRAM] unsigned char 
  5902 ;; Return value:  Size  Location     Type
  5903 ;;                  1    wreg      unsigned char 
  5904 ;; Registers used:
  5905 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5906 ;; Tracked objects:
  5907 ;;		On entry : 0/0
  5908 ;;		On exit  : 0/0
  5909 ;;		Unchanged: 0/0
  5910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5911 ;;      Params:         8       0       0       0       0       0       0
  5912 ;;      Locals:         4       0       0       0       0       0       0
  5913 ;;      Temps:          2       0       0       0       0       0       0
  5914 ;;      Totals:        14       0       0       0       0       0       0
  5915 ;;Total ram usage:       14 bytes
  5916 ;; Hardware stack levels used:    1
  5917 ;; Hardware stack levels required when called:    5
  5918 ;; This function calls:
  5919 ;;		_resetStep
  5920 ;;		_resetTM0_Temp
  5921 ;;		_resetTM2_Temp
  5922 ;;		_stepCounter
  5923 ;;		_stepMade
  5924 ;; This function is called by:
  5925 ;;		_executeData
  5926 ;; This function uses a non-reentrant model
  5927 ;;
  5928                           
  5929                           	psect	text33
  5930  000A44                     __ptext33:
  5931                           	callstack 0
  5932  000A44                     _moveToPoint:
  5933                           	callstack 0
  5934  000A44  FFFF               	dw	65535	; assembler added errata NOP
  5935  000A46                     
  5936                           ;motors.c: 317:     unsigned char MOT1Direction, MOT2Direction;;motors.c: 337:     if((x
      +                          2 - x1) > 0){
  5937  000A46  5015               	movf	moveToPoint@x1^0,w,c
  5938  000A48  5C19               	subwf	moveToPoint@x2^0,w,c
  5939  000A4A  6E1D               	movwf	??_moveToPoint^0,c
  5940  000A4C  5016               	movf	(moveToPoint@x1+1)^0,w,c
  5941  000A4E  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  5942  000A50  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5943  000A52  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5944  000A54  EF34  F005         	goto	u3361
  5945  000A58  501E               	movf	(??_moveToPoint+1)^0,w,c
  5946  000A5A  E109               	bnz	u3360
  5947  000A5C  041D               	decf	??_moveToPoint^0,w,c
  5948  000A5E  A0D8               	btfss	status,0,c
  5949  000A60  EF34  F005         	goto	u3361
  5950  000A64  EF37  F005         	goto	u3360
  5951  000A68                     u3361:
  5952  000A68  FFFF               	dw	65535	; assembler added errata NOP
  5953  000A6A  EF3E  F005         	goto	l154
  5954  000A6E                     u3360:
  5955  000A6E  FFFF               	dw	65535	; assembler added errata NOP
  5956  000A70                     
  5957                           ;motors.c: 338:         motCounter[0][1] = 1;
  5958  000A70  0E01               	movlw	1
  5959  000A72  6E64               	movwf	(_motCounter+1)^0,c
  5960                           
  5961                           ;motors.c: 339:         MOT1Direction = 1;
  5962  000A74  0E01               	movlw	1
  5963  000A76  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  5964                           
  5965                           ;motors.c: 340:     }else{
  5966  000A78  EF42  F005         	goto	l4029
  5967  000A7C                     l154:
  5968  000A7C  FFFF               	dw	65535	; assembler added errata NOP
  5969                           
  5970                           ;motors.c: 341:         motCounter[0][1] = -1;
  5971  000A7E  6864               	setf	(_motCounter+1)^0,c
  5972  000A80                     
  5973                           ;motors.c: 342:         MOT1Direction = 0;
  5974  000A80  0E00               	movlw	0
  5975  000A82  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  5976  000A84                     l4029:
  5977  000A84  FFFF               	dw	65535	; assembler added errata NOP
  5978                           
  5979                           ;motors.c: 345:     if((y2 - y1) > 0){
  5980  000A86  5017               	movf	moveToPoint@y1^0,w,c
  5981  000A88  5C1B               	subwf	moveToPoint@y2^0,w,c
  5982  000A8A  6E1D               	movwf	??_moveToPoint^0,c
  5983  000A8C  5018               	movf	(moveToPoint@y1+1)^0,w,c
  5984  000A8E  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  5985  000A90  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5986  000A92  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5987  000A94  EF54  F005         	goto	u3371
  5988  000A98  501E               	movf	(??_moveToPoint+1)^0,w,c
  5989  000A9A  E109               	bnz	u3370
  5990  000A9C  041D               	decf	??_moveToPoint^0,w,c
  5991  000A9E  A0D8               	btfss	status,0,c
  5992  000AA0  EF54  F005         	goto	u3371
  5993  000AA4  EF57  F005         	goto	u3370
  5994  000AA8                     u3371:
  5995  000AA8  FFFF               	dw	65535	; assembler added errata NOP
  5996  000AAA  EF5E  F005         	goto	l156
  5997  000AAE                     u3370:
  5998  000AAE  FFFF               	dw	65535	; assembler added errata NOP
  5999  000AB0                     
  6000                           ;motors.c: 346:         motCounter[1][1] = 1;
  6001  000AB0  0E01               	movlw	1
  6002  000AB2  6E66               	movwf	(_motCounter+3)^0,c
  6003                           
  6004                           ;motors.c: 347:         MOT2Direction = 1;
  6005  000AB4  0E01               	movlw	1
  6006  000AB6  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  6007                           
  6008                           ;motors.c: 348:     }else{
  6009  000AB8  EF62  F005         	goto	l157
  6010  000ABC                     l156:
  6011  000ABC  FFFF               	dw	65535	; assembler added errata NOP
  6012                           
  6013                           ;motors.c: 349:         motCounter[1][1] = -1;
  6014  000ABE  6866               	setf	(_motCounter+3)^0,c
  6015  000AC0                     
  6016                           ;motors.c: 350:         MOT2Direction = 0;
  6017  000AC0  0E00               	movlw	0
  6018  000AC2  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  6019  000AC4                     l157:
  6020  000AC4  FFFF               	dw	65535	; assembler added errata NOP
  6021                           
  6022                           ;motors.c: 355:     unsigned char keepMovingX = 1;
  6023  000AC6  0E01               	movlw	1
  6024  000AC8  6E21               	movwf	moveToPoint@keepMovingX^0,c
  6025                           
  6026                           ;motors.c: 356:     unsigned char keepMovingY = 1;
  6027  000ACA  0E01               	movlw	1
  6028  000ACC  6E22               	movwf	moveToPoint@keepMovingY^0,c
  6029  000ACE                     
  6030                           ;motors.c: 359:     T2CONbits.TMR2ON = 1;
  6031  000ACE  84CA               	bsf	202,2,c	;volatile
  6032                           
  6033                           ;motors.c: 361:     tm0Error = 0;
  6034  000AD0  0E00               	movlw	0
  6035  000AD2  6E56               	movwf	(_tm0Error+1)^0,c
  6036  000AD4  0E00               	movlw	0
  6037  000AD6  6E55               	movwf	_tm0Error^0,c
  6038                           
  6039                           ;motors.c: 362:     tm0Limit = 200;
  6040  000AD8  0EC8               	movlw	200
  6041  000ADA  6E62               	movwf	_tm0Limit^0,c
  6042  000ADC                     
  6043                           ;motors.c: 363:     T0CONbits.TMR0ON = 1;
  6044  000ADC  8ED5               	bsf	213,7,c	;volatile
  6045                           
  6046                           ;motors.c: 365:     while(keepMovingX || keepMovingY){
  6047  000ADE  EF9E  F006         	goto	l4101
  6048  000AE2                     l4039:
  6049  000AE2  FFFF               	dw	65535	; assembler added errata NOP
  6050                           
  6051                           ;motors.c: 368:         if(tm0Error){
  6052  000AE4  5055               	movf	_tm0Error^0,w,c
  6053  000AE6  1056               	iorwf	(_tm0Error+1)^0,w,c
  6054  000AE8  B4D8               	btfsc	status,2,c
  6055  000AEA  EF79  F005         	goto	u3381
  6056  000AEE  EF7C  F005         	goto	u3380
  6057  000AF2                     u3381:
  6058  000AF2  FFFF               	dw	65535	; assembler added errata NOP
  6059  000AF4  EF83  F005         	goto	l4043
  6060  000AF8                     u3380:
  6061  000AF8  FFFF               	dw	65535	; assembler added errata NOP
  6062  000AFA                     
  6063                           ;motors.c: 374:             tm0Error = 4;
  6064  000AFA  0E00               	movlw	0
  6065  000AFC  6E56               	movwf	(_tm0Error+1)^0,c
  6066  000AFE  0E04               	movlw	4
  6067  000B00  6E55               	movwf	_tm0Error^0,c
  6068                           
  6069                           ;motors.c: 375:             break;
  6070  000B02  EFB2  F006         	goto	l161
  6071  000B06                     l4043:
  6072  000B06  FFFF               	dw	65535	; assembler added errata NOP
  6073                           
  6074                           ;motors.c: 383:         if(MOT1Direction == 1){
  6075  000B08  041F               	decf	moveToPoint@MOT1Direction^0,w,c
  6076  000B0A  A4D8               	btfss	status,2,c
  6077  000B0C  EF8A  F005         	goto	u3391
  6078  000B10  EF8D  F005         	goto	u3390
  6079  000B14                     u3391:
  6080  000B14  FFFF               	dw	65535	; assembler added errata NOP
  6081  000B16  EFCC  F005         	goto	l4057
  6082  000B1A                     u3390:
  6083  000B1A  FFFF               	dw	65535	; assembler added errata NOP
  6084  000B1C                     
  6085                           ;motors.c: 384:             if(x1 + stepCounter() >= x2){
  6086  000B1C  EC5B  F013         	call	_stepCounter	;wreg free
  6087  000B20  5015               	movf	moveToPoint@x1^0,w,c
  6088  000B22  2612               	addwf	?_stepCounter^0,f,c
  6089  000B24  5016               	movf	(moveToPoint@x1+1)^0,w,c
  6090  000B26  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6091  000B28  5019               	movf	moveToPoint@x2^0,w,c
  6092  000B2A  5C12               	subwf	?_stepCounter^0,w,c
  6093  000B2C  501A               	movf	(moveToPoint@x2+1)^0,w,c
  6094  000B2E  5813               	subwfb	(?_stepCounter+1)^0,w,c
  6095  000B30  A0D8               	btfss	status,0,c
  6096  000B32  EF9D  F005         	goto	u3401
  6097  000B36  EFA0  F005         	goto	u3400
  6098  000B3A                     u3401:
  6099  000B3A  FFFF               	dw	65535	; assembler added errata NOP
  6100  000B3C  EFA6  F005         	goto	l4049
  6101  000B40                     u3400:
  6102  000B40  FFFF               	dw	65535	; assembler added errata NOP
  6103  000B42                     l4047:
  6104  000B42  FFFF               	dw	65535	; assembler added errata NOP
  6105                           
  6106                           ;motors.c: 386:                 keepMovingX = 0;
  6107  000B44  0E00               	movlw	0
  6108  000B46  6E21               	movwf	moveToPoint@keepMovingX^0,c
  6109                           
  6110                           ;motors.c: 387:             }else if(keepMovingX){
  6111  000B48  EF0A  F006         	goto	l4071
  6112  000B4C                     l4049:
  6113  000B4C  FFFF               	dw	65535	; assembler added errata NOP
  6114  000B4E  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6115  000B50  B4D8               	btfsc	status,2,c
  6116  000B52  EFAD  F005         	goto	u3411
  6117  000B56  EFB0  F005         	goto	u3410
  6118  000B5A                     u3411:
  6119  000B5A  FFFF               	dw	65535	; assembler added errata NOP
  6120  000B5C  EF0A  F006         	goto	l4071
  6121  000B60                     u3410:
  6122  000B60  FFFF               	dw	65535	; assembler added errata NOP
  6123  000B62                     
  6124                           ;motors.c: 393:             motCounter[0][0] += motCounter[0][1];
  6125  000B62  5064               	movf	(_motCounter+1)^0,w,c
  6126  000B64  2663               	addwf	_motCounter^0,f,c
  6127                           
  6128                           ;motors.c: 394:             if(motCounter[0][0] > 3){
  6129  000B66  5063               	movf	_motCounter^0,w,c
  6130  000B68  0A80               	xorlw	128
  6131  000B6A  0F7C               	addlw	-132
  6132  000B6C  A0D8               	btfss	status,0,c
  6133  000B6E  EFBB  F005         	goto	u3421
  6134  000B72  EFBE  F005         	goto	u3420
  6135  000B76                     u3421:
  6136  000B76  FFFF               	dw	65535	; assembler added errata NOP
  6137  000B78  EFC1  F005         	goto	l4055
  6138  000B7C                     u3420:
  6139  000B7C  FFFF               	dw	65535	; assembler added errata NOP
  6140  000B7E                     
  6141                           ;motors.c: 395:                 motCounter[0][0] = 0;
  6142  000B7E  0E00               	movlw	0
  6143  000B80  6E63               	movwf	_motCounter^0,c
  6144  000B82                     l4055:
  6145  000B82  FFFF               	dw	65535	; assembler added errata NOP
  6146                           
  6147                           ;motors.c: 398:             LATA = stepMot1[motCounter[0][0]];
  6148  000B84  0E8C               	movlw	low _stepMot1
  6149  000B86  2463               	addwf	_motCounter^0,w,c
  6150  000B88  6ED9               	movwf	fsr2l,c
  6151  000B8A  6ADA               	clrf	fsr2h,c
  6152  000B8C  0E00               	movlw	high _stepMot1
  6153  000B8E  22DA               	addwfc	fsr2h,f,c
  6154  000B90  50DF               	movf	indf2,w,c
  6155  000B92  6E89               	movwf	137,c	;volatile
  6156  000B94  EF0A  F006         	goto	l4071
  6157  000B98                     l4057:
  6158  000B98  FFFF               	dw	65535	; assembler added errata NOP
  6159  000B9A  501F               	movf	moveToPoint@MOT1Direction^0,w,c
  6160  000B9C  A4D8               	btfss	status,2,c
  6161  000B9E  EFD3  F005         	goto	u3431
  6162  000BA2  EFD6  F005         	goto	u3430
  6163  000BA6                     u3431:
  6164  000BA6  FFFF               	dw	65535	; assembler added errata NOP
  6165  000BA8  EF0A  F006         	goto	l4071
  6166  000BAC                     u3430:
  6167  000BAC  FFFF               	dw	65535	; assembler added errata NOP
  6168  000BAE                     
  6169                           ;motors.c: 402:             if(x1 - stepCounter() <= x2){
  6170  000BAE  EC5B  F013         	call	_stepCounter	;wreg free
  6171  000BB2  C015  F01D         	movff	moveToPoint@x1,??_moveToPoint
  6172  000BB6  C016  F01E         	movff	moveToPoint@x1+1,??_moveToPoint+1
  6173  000BBA  5012               	movf	?_stepCounter^0,w,c
  6174  000BBC  5E1D               	subwf	??_moveToPoint^0,f,c
  6175  000BBE  5013               	movf	(?_stepCounter+1)^0,w,c
  6176  000BC0  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6177  000BC2  501D               	movf	??_moveToPoint^0,w,c
  6178  000BC4  5C19               	subwf	moveToPoint@x2^0,w,c
  6179  000BC6  501E               	movf	(??_moveToPoint+1)^0,w,c
  6180  000BC8  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  6181  000BCA  A0D8               	btfss	status,0,c
  6182  000BCC  EFEA  F005         	goto	u3441
  6183  000BD0  EFED  F005         	goto	u3440
  6184  000BD4                     u3441:
  6185  000BD4  FFFF               	dw	65535	; assembler added errata NOP
  6186  000BD6  EFF0  F005         	goto	l4063
  6187  000BDA                     u3440:
  6188  000BDA  FFFF               	dw	65535	; assembler added errata NOP
  6189  000BDC  EFA1  F005         	goto	l4047
  6190  000BE0                     l4063:
  6191  000BE0  FFFF               	dw	65535	; assembler added errata NOP
  6192  000BE2  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6193  000BE4  B4D8               	btfsc	status,2,c
  6194  000BE6  EFF7  F005         	goto	u3451
  6195  000BEA  EFFA  F005         	goto	u3450
  6196  000BEE                     u3451:
  6197  000BEE  FFFF               	dw	65535	; assembler added errata NOP
  6198  000BF0  EF0A  F006         	goto	l4071
  6199  000BF4                     u3450:
  6200  000BF4  FFFF               	dw	65535	; assembler added errata NOP
  6201  000BF6                     
  6202                           ;motors.c: 411:             motCounter[0][0] += motCounter[0][1];
  6203  000BF6  5064               	movf	(_motCounter+1)^0,w,c
  6204  000BF8  2663               	addwf	_motCounter^0,f,c
  6205                           
  6206                           ;motors.c: 412:             if(motCounter[0][0] < 0){
  6207  000BFA  BE63               	btfsc	_motCounter^0,7,c
  6208  000BFC  EF05  F006         	goto	u3460
  6209  000C00  EF02  F006         	goto	u3461
  6210  000C04                     u3461:
  6211  000C04  FFFF               	dw	65535	; assembler added errata NOP
  6212  000C06  EFC1  F005         	goto	l4055
  6213  000C0A                     u3460:
  6214  000C0A  FFFF               	dw	65535	; assembler added errata NOP
  6215  000C0C                     
  6216                           ;motors.c: 413:                 motCounter[0][0] = 3;
  6217  000C0C  0E03               	movlw	3
  6218  000C0E  6E63               	movwf	_motCounter^0,c
  6219  000C10  EFC1  F005         	goto	l4055
  6220  000C14                     l4071:
  6221  000C14  FFFF               	dw	65535	; assembler added errata NOP
  6222                           
  6223                           ;motors.c: 421:         if(MOT2Direction == 1){
  6224  000C16  0420               	decf	moveToPoint@MOT2Direction^0,w,c
  6225  000C18  A4D8               	btfss	status,2,c
  6226  000C1A  EF11  F006         	goto	u3471
  6227  000C1E  EF14  F006         	goto	u3470
  6228  000C22                     u3471:
  6229  000C22  FFFF               	dw	65535	; assembler added errata NOP
  6230  000C24  EF53  F006         	goto	l4085
  6231  000C28                     u3470:
  6232  000C28  FFFF               	dw	65535	; assembler added errata NOP
  6233  000C2A                     
  6234                           ;motors.c: 423:             if(y1 + stepCounter() >= y2){
  6235  000C2A  EC5B  F013         	call	_stepCounter	;wreg free
  6236  000C2E  5017               	movf	moveToPoint@y1^0,w,c
  6237  000C30  2612               	addwf	?_stepCounter^0,f,c
  6238  000C32  5018               	movf	(moveToPoint@y1+1)^0,w,c
  6239  000C34  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6240  000C36  501B               	movf	moveToPoint@y2^0,w,c
  6241  000C38  5C12               	subwf	?_stepCounter^0,w,c
  6242  000C3A  501C               	movf	(moveToPoint@y2+1)^0,w,c
  6243  000C3C  5813               	subwfb	(?_stepCounter+1)^0,w,c
  6244  000C3E  A0D8               	btfss	status,0,c
  6245  000C40  EF24  F006         	goto	u3481
  6246  000C44  EF27  F006         	goto	u3480
  6247  000C48                     u3481:
  6248  000C48  FFFF               	dw	65535	; assembler added errata NOP
  6249  000C4A  EF2D  F006         	goto	l4077
  6250  000C4E                     u3480:
  6251  000C4E  FFFF               	dw	65535	; assembler added errata NOP
  6252  000C50                     l4075:
  6253  000C50  FFFF               	dw	65535	; assembler added errata NOP
  6254                           
  6255                           ;motors.c: 425:                 keepMovingY = 0;
  6256  000C52  0E00               	movlw	0
  6257  000C54  6E22               	movwf	moveToPoint@keepMovingY^0,c
  6258                           
  6259                           ;motors.c: 426:             }else if(keepMovingY){
  6260  000C56  EF91  F006         	goto	l4099
  6261  000C5A                     l4077:
  6262  000C5A  FFFF               	dw	65535	; assembler added errata NOP
  6263  000C5C  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6264  000C5E  B4D8               	btfsc	status,2,c
  6265  000C60  EF34  F006         	goto	u3491
  6266  000C64  EF37  F006         	goto	u3490
  6267  000C68                     u3491:
  6268  000C68  FFFF               	dw	65535	; assembler added errata NOP
  6269  000C6A  EF91  F006         	goto	l178
  6270  000C6E                     u3490:
  6271  000C6E  FFFF               	dw	65535	; assembler added errata NOP
  6272  000C70                     
  6273                           ;motors.c: 432:             motCounter[1][0] += motCounter[1][1];
  6274  000C70  5066               	movf	(_motCounter+3)^0,w,c
  6275  000C72  2665               	addwf	(_motCounter+2)^0,f,c
  6276                           
  6277                           ;motors.c: 433:             if(motCounter[1][0] > 3){
  6278  000C74  5065               	movf	(_motCounter+2)^0,w,c
  6279  000C76  0A80               	xorlw	128
  6280  000C78  0F7C               	addlw	-132
  6281  000C7A  A0D8               	btfss	status,0,c
  6282  000C7C  EF42  F006         	goto	u3501
  6283  000C80  EF45  F006         	goto	u3500
  6284  000C84                     u3501:
  6285  000C84  FFFF               	dw	65535	; assembler added errata NOP
  6286  000C86  EF48  F006         	goto	l4083
  6287  000C8A                     u3500:
  6288  000C8A  FFFF               	dw	65535	; assembler added errata NOP
  6289  000C8C                     
  6290                           ;motors.c: 434:                 motCounter[1][0] = 0;
  6291  000C8C  0E00               	movlw	0
  6292  000C8E  6E65               	movwf	(_motCounter+2)^0,c
  6293  000C90                     l4083:
  6294  000C90  FFFF               	dw	65535	; assembler added errata NOP
  6295                           
  6296                           ;motors.c: 437:             LATB = stepMot2[motCounter[1][0]];
  6297  000C92  0E88               	movlw	low _stepMot2
  6298  000C94  2465               	addwf	(_motCounter+2)^0,w,c
  6299  000C96  6ED9               	movwf	fsr2l,c
  6300  000C98  6ADA               	clrf	fsr2h,c
  6301  000C9A  0E00               	movlw	high _stepMot2
  6302  000C9C  22DA               	addwfc	fsr2h,f,c
  6303  000C9E  50DF               	movf	indf2,w,c
  6304  000CA0  6E8A               	movwf	138,c	;volatile
  6305  000CA2  EF91  F006         	goto	l4099
  6306  000CA6                     l4085:
  6307  000CA6  FFFF               	dw	65535	; assembler added errata NOP
  6308  000CA8  5020               	movf	moveToPoint@MOT2Direction^0,w,c
  6309  000CAA  A4D8               	btfss	status,2,c
  6310  000CAC  EF5A  F006         	goto	u3511
  6311  000CB0  EF5D  F006         	goto	u3510
  6312  000CB4                     u3511:
  6313  000CB4  FFFF               	dw	65535	; assembler added errata NOP
  6314  000CB6  EF91  F006         	goto	l4099
  6315  000CBA                     u3510:
  6316  000CBA  FFFF               	dw	65535	; assembler added errata NOP
  6317  000CBC                     
  6318                           ;motors.c: 442:             if(y1 - stepCounter() <= y2){
  6319  000CBC  EC5B  F013         	call	_stepCounter	;wreg free
  6320  000CC0  C017  F01D         	movff	moveToPoint@y1,??_moveToPoint
  6321  000CC4  C018  F01E         	movff	moveToPoint@y1+1,??_moveToPoint+1
  6322  000CC8  5012               	movf	?_stepCounter^0,w,c
  6323  000CCA  5E1D               	subwf	??_moveToPoint^0,f,c
  6324  000CCC  5013               	movf	(?_stepCounter+1)^0,w,c
  6325  000CCE  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6326  000CD0  501D               	movf	??_moveToPoint^0,w,c
  6327  000CD2  5C1B               	subwf	moveToPoint@y2^0,w,c
  6328  000CD4  501E               	movf	(??_moveToPoint+1)^0,w,c
  6329  000CD6  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  6330  000CD8  A0D8               	btfss	status,0,c
  6331  000CDA  EF71  F006         	goto	u3521
  6332  000CDE  EF74  F006         	goto	u3520
  6333  000CE2                     u3521:
  6334  000CE2  FFFF               	dw	65535	; assembler added errata NOP
  6335  000CE4  EF77  F006         	goto	l4091
  6336  000CE8                     u3520:
  6337  000CE8  FFFF               	dw	65535	; assembler added errata NOP
  6338  000CEA  EF28  F006         	goto	l4075
  6339  000CEE                     l4091:
  6340  000CEE  FFFF               	dw	65535	; assembler added errata NOP
  6341  000CF0  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6342  000CF2  B4D8               	btfsc	status,2,c
  6343  000CF4  EF7E  F006         	goto	u3531
  6344  000CF8  EF81  F006         	goto	u3530
  6345  000CFC                     u3531:
  6346  000CFC  FFFF               	dw	65535	; assembler added errata NOP
  6347  000CFE  EF91  F006         	goto	l4099
  6348  000D02                     u3530:
  6349  000D02  FFFF               	dw	65535	; assembler added errata NOP
  6350  000D04                     
  6351                           ;motors.c: 451:             motCounter[1][0] += motCounter[1][1];
  6352  000D04  5066               	movf	(_motCounter+3)^0,w,c
  6353  000D06  2665               	addwf	(_motCounter+2)^0,f,c
  6354                           
  6355                           ;motors.c: 452:             if(motCounter[1][0] < 0){
  6356  000D08  BE65               	btfsc	(_motCounter+2)^0,7,c
  6357  000D0A  EF8C  F006         	goto	u3540
  6358  000D0E  EF89  F006         	goto	u3541
  6359  000D12                     u3541:
  6360  000D12  FFFF               	dw	65535	; assembler added errata NOP
  6361  000D14  EF48  F006         	goto	l4083
  6362  000D18                     u3540:
  6363  000D18  FFFF               	dw	65535	; assembler added errata NOP
  6364  000D1A                     
  6365                           ;motors.c: 453:                 motCounter[1][0] = 3;
  6366  000D1A  0E03               	movlw	3
  6367  000D1C  6E65               	movwf	(_motCounter+2)^0,c
  6368  000D1E  EF48  F006         	goto	l4083
  6369  000D22                     l178:
  6370  000D22                     l4099:
  6371  000D22  FFFF               	dw	65535	; assembler added errata NOP
  6372  000D24  ECF6  F012         	call	_stepMade	;wreg free
  6373  000D28  5012               	movf	?_stepMade^0,w,c
  6374  000D2A  1013               	iorwf	(?_stepMade+1)^0,w,c
  6375  000D2C  B4D8               	btfsc	status,2,c
  6376  000D2E  EF9B  F006         	goto	u3551
  6377  000D32  EF9E  F006         	goto	u3550
  6378  000D36                     u3551:
  6379  000D36  FFFF               	dw	65535	; assembler added errata NOP
  6380  000D38  EF91  F006         	goto	l4099
  6381  000D3C                     u3550:
  6382  000D3C                     l4101:
  6383  000D3C  FFFF               	dw	65535	; assembler added errata NOP
  6384                           
  6385                           ;motors.c: 365:     while(keepMovingX || keepMovingY){
  6386  000D3E  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6387  000D40  A4D8               	btfss	status,2,c
  6388  000D42  EFA5  F006         	goto	u3561
  6389  000D46  EFA8  F006         	goto	u3560
  6390  000D4A                     u3561:
  6391  000D4A  FFFF               	dw	65535	; assembler added errata NOP
  6392  000D4C  EF71  F005         	goto	l4039
  6393  000D50                     u3560:
  6394  000D50  FFFF               	dw	65535	; assembler added errata NOP
  6395  000D52  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6396  000D54  A4D8               	btfss	status,2,c
  6397  000D56  EFAF  F006         	goto	u3571
  6398  000D5A  EFB2  F006         	goto	u3570
  6399  000D5E                     u3571:
  6400  000D5E  FFFF               	dw	65535	; assembler added errata NOP
  6401  000D60  EF71  F005         	goto	l4039
  6402  000D64                     u3570:
  6403  000D64                     l161:
  6404  000D64  FFFF               	dw	65535	; assembler added errata NOP
  6405                           
  6406                           ;motors.c: 476:     T0CONbits.TMR0ON = 0;
  6407  000D66  9ED5               	bcf	213,7,c	;volatile
  6408                           
  6409                           ;motors.c: 477:     T2CONbits.TMR2ON = 0;
  6410  000D68  94CA               	bcf	202,2,c	;volatile
  6411  000D6A                     
  6412                           ;motors.c: 479:     resetTM0_Temp();
  6413  000D6A  EC7B  F013         	call	_resetTM0_Temp	;wreg free
  6414                           
  6415                           ;motors.c: 480:     resetTM2_Temp();
  6416  000D6E  EC00  F013         	call	_resetTM2_Temp	;wreg free
  6417  000D72                     
  6418                           ;motors.c: 482:     TMR0 = 0;
  6419  000D72  0E00               	movlw	0
  6420  000D74  6ED7               	movwf	215,c	;volatile
  6421  000D76  0E00               	movlw	0
  6422  000D78  6ED6               	movwf	214,c	;volatile
  6423  000D7A                     
  6424                           ;motors.c: 483:     TMR2 = 0;
  6425  000D7A  0E00               	movlw	0
  6426  000D7C  6ECC               	movwf	204,c	;volatile
  6427                           
  6428                           ;motors.c: 486:     resetStep();
  6429  000D7E  EC80  F013         	call	_resetStep	;wreg free
  6430  000D82                     
  6431                           ;motors.c: 488:     return(tm0Error);
  6432  000D82  5055               	movf	_tm0Error^0,w,c
  6433  000D84  0012               	return		;funcret
  6434  000D86  FFFF               	dw	65535	; errata NOP
  6435  000D88                     __end_of_moveToPoint:
  6436                           	callstack 0
  6437                           
  6438 ;; *************** function _stepCounter *****************
  6439 ;; Defined at:
  6440 ;;		line 71 in file "timer.c"
  6441 ;; Parameters:    Size  Location     Type
  6442 ;;		None
  6443 ;; Auto vars:     Size  Location     Type
  6444 ;;		None
  6445 ;; Return value:  Size  Location     Type
  6446 ;;                  2   17[COMRAM] unsigned int 
  6447 ;; Registers used:
  6448 ;;		None
  6449 ;; Tracked objects:
  6450 ;;		On entry : 0/0
  6451 ;;		On exit  : 0/0
  6452 ;;		Unchanged: 0/0
  6453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6454 ;;      Params:         2       0       0       0       0       0       0
  6455 ;;      Locals:         0       0       0       0       0       0       0
  6456 ;;      Temps:          0       0       0       0       0       0       0
  6457 ;;      Totals:         2       0       0       0       0       0       0
  6458 ;;Total ram usage:        2 bytes
  6459 ;; Hardware stack levels used:    1
  6460 ;; Hardware stack levels required when called:    4
  6461 ;; This function calls:
  6462 ;;		Nothing
  6463 ;; This function is called by:
  6464 ;;		_moveToPoint
  6465 ;; This function uses a non-reentrant model
  6466 ;;
  6467                           
  6468                           	psect	text34
  6469  0026B6                     __ptext34:
  6470                           	callstack 0
  6471  0026B6                     _stepCounter:
  6472                           	callstack 0
  6473  0026B6  FFFF               	dw	65535	; assembler added errata NOP
  6474  0026B8                     
  6475                           ;timer.c: 72:     return pwmStep;
  6476  0026B8  C058  F012         	movff	_pwmStep,?_stepCounter	;volatile
  6477  0026BC  6A13               	clrf	(?_stepCounter+1)^0,c
  6478  0026BE  0012               	return		;funcret
  6479  0026C0  FFFF               	dw	65535	; errata NOP
  6480  0026C2                     __end_of_stepCounter:
  6481                           	callstack 0
  6482                           
  6483 ;; *************** function _liftArm *****************
  6484 ;; Defined at:
  6485 ;;		line 690 in file "motors.c"
  6486 ;; Parameters:    Size  Location     Type
  6487 ;;		None
  6488 ;; Auto vars:     Size  Location     Type
  6489 ;;		None
  6490 ;; Return value:  Size  Location     Type
  6491 ;;                  1    wreg      unsigned char 
  6492 ;; Registers used:
  6493 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6494 ;; Tracked objects:
  6495 ;;		On entry : 0/0
  6496 ;;		On exit  : 0/0
  6497 ;;		Unchanged: 0/0
  6498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6499 ;;      Params:         0       0       0       0       0       0       0
  6500 ;;      Locals:         0       0       0       0       0       0       0
  6501 ;;      Temps:          0       0       0       0       0       0       0
  6502 ;;      Totals:         0       0       0       0       0       0       0
  6503 ;;Total ram usage:        0 bytes
  6504 ;; Hardware stack levels used:    1
  6505 ;; Hardware stack levels required when called:    5
  6506 ;; This function calls:
  6507 ;;		_resetStep
  6508 ;;		_resetTM0_Temp
  6509 ;;		_resetTM2_Temp
  6510 ;;		_stepMade
  6511 ;; This function is called by:
  6512 ;;		_executeData
  6513 ;; This function uses a non-reentrant model
  6514 ;;
  6515                           
  6516                           	psect	text35
  6517  002260                     __ptext35:
  6518                           	callstack 0
  6519  002260                     _liftArm:
  6520                           	callstack 0
  6521  002260  FFFF               	dw	65535	; assembler added errata NOP
  6522  002262                     
  6523                           ;motors.c: 696:     motCounter[2][1] = -1;
  6524  002262  6868               	setf	(_motCounter+5)^0,c
  6525                           
  6526                           ;motors.c: 699:     T2CONbits.TMR2ON = 1;
  6527  002264  84CA               	bsf	202,2,c	;volatile
  6528  002266                     
  6529                           ;motors.c: 701:     tm0Error = 0;
  6530  002266  0E00               	movlw	0
  6531  002268  6E56               	movwf	(_tm0Error+1)^0,c
  6532  00226A  0E00               	movlw	0
  6533  00226C  6E55               	movwf	_tm0Error^0,c
  6534                           
  6535                           ;motors.c: 702:     tm0Limit = 200;
  6536  00226E  0EC8               	movlw	200
  6537  002270  6E62               	movwf	_tm0Limit^0,c
  6538  002272                     
  6539                           ;motors.c: 703:     T0CONbits.TMR0ON = 1;
  6540  002272  8ED5               	bsf	213,7,c	;volatile
  6541                           
  6542                           ;motors.c: 707:     while(!PORTEbits.RE2){
  6543  002274  EF74  F011         	goto	l214
  6544  002278                     l4221:
  6545  002278  FFFF               	dw	65535	; assembler added errata NOP
  6546                           
  6547                           ;motors.c: 709:         resetStep();
  6548  00227A  EC80  F013         	call	_resetStep	;wreg free
  6549  00227E                     
  6550                           ;motors.c: 712:         if(tm0Error){
  6551  00227E  5055               	movf	_tm0Error^0,w,c
  6552  002280  1056               	iorwf	(_tm0Error+1)^0,w,c
  6553  002282  B4D8               	btfsc	status,2,c
  6554  002284  EF46  F011         	goto	u3701
  6555  002288  EF49  F011         	goto	u3700
  6556  00228C                     u3701:
  6557  00228C  FFFF               	dw	65535	; assembler added errata NOP
  6558  00228E  EF50  F011         	goto	l4227
  6559  002292                     u3700:
  6560  002292  FFFF               	dw	65535	; assembler added errata NOP
  6561  002294                     
  6562                           ;motors.c: 717:             tm0Error = 6;
  6563  002294  0E00               	movlw	0
  6564  002296  6E56               	movwf	(_tm0Error+1)^0,c
  6565  002298  0E06               	movlw	6
  6566  00229A  6E55               	movwf	_tm0Error^0,c
  6567                           
  6568                           ;motors.c: 718:             break;
  6569  00229C  EF7D  F011         	goto	l217
  6570  0022A0                     l4227:
  6571  0022A0  FFFF               	dw	65535	; assembler added errata NOP
  6572                           
  6573                           ;motors.c: 727:             motCounter[2][0] += motCounter[2][1];
  6574  0022A2  5068               	movf	(_motCounter+5)^0,w,c
  6575  0022A4  2667               	addwf	(_motCounter+4)^0,f,c
  6576                           
  6577                           ;motors.c: 728:             if(motCounter[2][0] < 0){
  6578  0022A6  BE67               	btfsc	(_motCounter+4)^0,7,c
  6579  0022A8  EF5B  F011         	goto	u3710
  6580  0022AC  EF58  F011         	goto	u3711
  6581  0022B0                     u3711:
  6582  0022B0  FFFF               	dw	65535	; assembler added errata NOP
  6583  0022B2  EF5E  F011         	goto	l4231
  6584  0022B6                     u3710:
  6585  0022B6  FFFF               	dw	65535	; assembler added errata NOP
  6586  0022B8                     
  6587                           ;motors.c: 729:                 motCounter[2][0] = 3;
  6588  0022B8  0E03               	movlw	3
  6589  0022BA  6E67               	movwf	(_motCounter+4)^0,c
  6590  0022BC                     l4231:
  6591  0022BC  FFFF               	dw	65535	; assembler added errata NOP
  6592                           
  6593                           ;motors.c: 732:             LATC = stepMot3[motCounter[2][0]];
  6594  0022BE  0E84               	movlw	low _stepMot3
  6595  0022C0  2467               	addwf	(_motCounter+4)^0,w,c
  6596  0022C2  6ED9               	movwf	fsr2l,c
  6597  0022C4  6ADA               	clrf	fsr2h,c
  6598  0022C6  0E00               	movlw	high _stepMot3
  6599  0022C8  22DA               	addwfc	fsr2h,f,c
  6600  0022CA  50DF               	movf	indf2,w,c
  6601  0022CC  6E8B               	movwf	139,c	;volatile
  6602  0022CE                     l4233:
  6603  0022CE  FFFF               	dw	65535	; assembler added errata NOP
  6604  0022D0  ECF6  F012         	call	_stepMade	;wreg free
  6605  0022D4  5012               	movf	?_stepMade^0,w,c
  6606  0022D6  1013               	iorwf	(?_stepMade+1)^0,w,c
  6607  0022D8  B4D8               	btfsc	status,2,c
  6608  0022DA  EF71  F011         	goto	u3721
  6609  0022DE  EF74  F011         	goto	u3720
  6610  0022E2                     u3721:
  6611  0022E2  FFFF               	dw	65535	; assembler added errata NOP
  6612  0022E4  EF67  F011         	goto	l4233
  6613  0022E8                     u3720:
  6614  0022E8                     l214:
  6615  0022E8  FFFF               	dw	65535	; assembler added errata NOP
  6616                           
  6617                           ;motors.c: 707:     while(!PORTEbits.RE2){
  6618  0022EA  A484               	btfss	132,2,c	;volatile
  6619  0022EC  EF7A  F011         	goto	u3731
  6620  0022F0  EF7D  F011         	goto	u3730
  6621  0022F4                     u3731:
  6622  0022F4  FFFF               	dw	65535	; assembler added errata NOP
  6623  0022F6  EF3C  F011         	goto	l4221
  6624  0022FA                     u3730:
  6625  0022FA                     l217:
  6626  0022FA  FFFF               	dw	65535	; assembler added errata NOP
  6627                           
  6628                           ;motors.c: 749:     T0CONbits.TMR0ON = 0;
  6629  0022FC  9ED5               	bcf	213,7,c	;volatile
  6630                           
  6631                           ;motors.c: 750:     T2CONbits.TMR2ON = 0;
  6632  0022FE  94CA               	bcf	202,2,c	;volatile
  6633  002300                     
  6634                           ;motors.c: 752:     resetTM0_Temp();
  6635  002300  EC7B  F013         	call	_resetTM0_Temp	;wreg free
  6636                           
  6637                           ;motors.c: 753:     resetTM2_Temp();
  6638  002304  EC00  F013         	call	_resetTM2_Temp	;wreg free
  6639  002308                     
  6640                           ;motors.c: 755:     TMR0 = 0;
  6641  002308  0E00               	movlw	0
  6642  00230A  6ED7               	movwf	215,c	;volatile
  6643  00230C  0E00               	movlw	0
  6644  00230E  6ED6               	movwf	214,c	;volatile
  6645  002310                     
  6646                           ;motors.c: 756:     TMR2 = 0;
  6647  002310  0E00               	movlw	0
  6648  002312  6ECC               	movwf	204,c	;volatile
  6649                           
  6650                           ;motors.c: 759:     resetStep();
  6651  002314  EC80  F013         	call	_resetStep	;wreg free
  6652  002318                     
  6653                           ;motors.c: 761:     return(tm0Error);
  6654  002318  5055               	movf	_tm0Error^0,w,c
  6655  00231A  0012               	return		;funcret
  6656  00231C  FFFF               	dw	65535	; errata NOP
  6657  00231E                     __end_of_liftArm:
  6658                           	callstack 0
  6659                           
  6660 ;; *************** function _stepMade *****************
  6661 ;; Defined at:
  6662 ;;		line 60 in file "timer.c"
  6663 ;; Parameters:    Size  Location     Type
  6664 ;;		None
  6665 ;; Auto vars:     Size  Location     Type
  6666 ;;  temp            1   19[COMRAM] unsigned char 
  6667 ;; Return value:  Size  Location     Type
  6668 ;;                  2   17[COMRAM] unsigned int 
  6669 ;; Registers used:
  6670 ;;		wreg, status,2
  6671 ;; Tracked objects:
  6672 ;;		On entry : 0/0
  6673 ;;		On exit  : 0/0
  6674 ;;		Unchanged: 0/0
  6675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6676 ;;      Params:         2       0       0       0       0       0       0
  6677 ;;      Locals:         1       0       0       0       0       0       0
  6678 ;;      Temps:          0       0       0       0       0       0       0
  6679 ;;      Totals:         3       0       0       0       0       0       0
  6680 ;;Total ram usage:        3 bytes
  6681 ;; Hardware stack levels used:    1
  6682 ;; Hardware stack levels required when called:    4
  6683 ;; This function calls:
  6684 ;;		Nothing
  6685 ;; This function is called by:
  6686 ;;		_resetPosition
  6687 ;;		_moveToPoint
  6688 ;;		_touchObject
  6689 ;;		_touchTherm
  6690 ;;		_liftArm
  6691 ;;		_rotateObj
  6692 ;;		_pickObject
  6693 ;;		_releaseObj
  6694 ;; This function uses a non-reentrant model
  6695 ;;
  6696                           
  6697                           	psect	text36
  6698  0025EC                     __ptext36:
  6699                           	callstack 0
  6700  0025EC                     _stepMade:
  6701                           	callstack 0
  6702  0025EC  FFFF               	dw	65535	; assembler added errata NOP
  6703  0025EE                     
  6704                           ;timer.c: 61:     unsigned char temp = stepToggle;
  6705  0025EE  C057  F014         	movff	_stepToggle,stepMade@temp	;volatile
  6706  0025F2                     
  6707                           ;timer.c: 63:     stepToggle = 0;
  6708  0025F2  0E00               	movlw	0
  6709  0025F4  6E57               	movwf	_stepToggle^0,c	;volatile
  6710  0025F6                     
  6711                           ;timer.c: 65:     return temp;
  6712  0025F6  C014  F012         	movff	stepMade@temp,?_stepMade
  6713  0025FA  6A13               	clrf	(?_stepMade+1)^0,c
  6714  0025FC  0012               	return		;funcret
  6715  0025FE  FFFF               	dw	65535	; errata NOP
  6716  002600                     __end_of_stepMade:
  6717                           	callstack 0
  6718                           
  6719 ;; *************** function _resetTM2_Temp *****************
  6720 ;; Defined at:
  6721 ;;		line 26 in file "interrupt.c"
  6722 ;; Parameters:    Size  Location     Type
  6723 ;;		None
  6724 ;; Auto vars:     Size  Location     Type
  6725 ;;		None
  6726 ;; Return value:  Size  Location     Type
  6727 ;;                  1    wreg      void 
  6728 ;; Registers used:
  6729 ;;		wreg, status,2
  6730 ;; Tracked objects:
  6731 ;;		On entry : 0/0
  6732 ;;		On exit  : 0/0
  6733 ;;		Unchanged: 0/0
  6734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6735 ;;      Params:         0       0       0       0       0       0       0
  6736 ;;      Locals:         0       0       0       0       0       0       0
  6737 ;;      Temps:          0       0       0       0       0       0       0
  6738 ;;      Totals:         0       0       0       0       0       0       0
  6739 ;;Total ram usage:        0 bytes
  6740 ;; Hardware stack levels used:    1
  6741 ;; Hardware stack levels required when called:    4
  6742 ;; This function calls:
  6743 ;;		Nothing
  6744 ;; This function is called by:
  6745 ;;		_resetPosition
  6746 ;;		_moveToPoint
  6747 ;;		_touchObject
  6748 ;;		_touchTherm
  6749 ;;		_liftArm
  6750 ;;		_rotateObj
  6751 ;;		_pickObject
  6752 ;;		_releaseObj
  6753 ;; This function uses a non-reentrant model
  6754 ;;
  6755                           
  6756                           	psect	text37
  6757  002600                     __ptext37:
  6758                           	callstack 0
  6759  002600                     _resetTM2_Temp:
  6760                           	callstack 0
  6761  002600  FFFF               	dw	65535	; assembler added errata NOP
  6762  002602                     
  6763                           ;interrupt.c: 27:     single_cycle = 0;
  6764  002602  0E00               	movlw	0
  6765  002604  0100               	movlb	0	; () banked
  6766  002606  6FC9               	movwf	(_single_cycle+1)& (0+255),b
  6767  002608  0E00               	movlw	0
  6768  00260A  6FC8               	movwf	_single_cycle& (0+255),b
  6769                           
  6770                           ;interrupt.c: 28:     completeStep = 0;
  6771  00260C  0E00               	movlw	0
  6772  00260E  6E5E               	movwf	_completeStep^0,c
  6773  002610                     
  6774                           ; BSR set to: 0
  6775  002610  0012               	return		;funcret
  6776  002612  FFFF               	dw	65535	; errata NOP
  6777  002614                     __end_of_resetTM2_Temp:
  6778                           	callstack 0
  6779                           
  6780 ;; *************** function _resetTM0_Temp *****************
  6781 ;; Defined at:
  6782 ;;		line 22 in file "interrupt.c"
  6783 ;; Parameters:    Size  Location     Type
  6784 ;;		None
  6785 ;; Auto vars:     Size  Location     Type
  6786 ;;		None
  6787 ;; Return value:  Size  Location     Type
  6788 ;;                  1    wreg      void 
  6789 ;; Registers used:
  6790 ;;		wreg, status,2
  6791 ;; Tracked objects:
  6792 ;;		On entry : 0/0
  6793 ;;		On exit  : 0/0
  6794 ;;		Unchanged: 0/0
  6795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6796 ;;      Params:         0       0       0       0       0       0       0
  6797 ;;      Locals:         0       0       0       0       0       0       0
  6798 ;;      Temps:          0       0       0       0       0       0       0
  6799 ;;      Totals:         0       0       0       0       0       0       0
  6800 ;;Total ram usage:        0 bytes
  6801 ;; Hardware stack levels used:    1
  6802 ;; Hardware stack levels required when called:    4
  6803 ;; This function calls:
  6804 ;;		Nothing
  6805 ;; This function is called by:
  6806 ;;		_resetPosition
  6807 ;;		_moveToPoint
  6808 ;;		_touchObject
  6809 ;;		_touchTherm
  6810 ;;		_liftArm
  6811 ;; This function uses a non-reentrant model
  6812 ;;
  6813                           
  6814                           	psect	text38
  6815  0026F6                     __ptext38:
  6816                           	callstack 0
  6817  0026F6                     _resetTM0_Temp:
  6818                           	callstack 0
  6819  0026F6  FFFF               	dw	65535	; assembler added errata NOP
  6820  0026F8                     
  6821                           ;interrupt.c: 23:     tm0Count = 0;
  6822  0026F8  0E00               	movlw	0
  6823  0026FA  6E5F               	movwf	_tm0Count^0,c
  6824  0026FC  0012               	return		;funcret
  6825  0026FE  FFFF               	dw	65535	; errata NOP
  6826  002700                     __end_of_resetTM0_Temp:
  6827                           	callstack 0
  6828                           
  6829 ;; *************** function _resetStep *****************
  6830 ;; Defined at:
  6831 ;;		line 78 in file "timer.c"
  6832 ;; Parameters:    Size  Location     Type
  6833 ;;		None
  6834 ;; Auto vars:     Size  Location     Type
  6835 ;;		None
  6836 ;; Return value:  Size  Location     Type
  6837 ;;                  1    wreg      void 
  6838 ;; Registers used:
  6839 ;;		wreg, status,2
  6840 ;; Tracked objects:
  6841 ;;		On entry : 0/0
  6842 ;;		On exit  : 0/0
  6843 ;;		Unchanged: 0/0
  6844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6845 ;;      Params:         0       0       0       0       0       0       0
  6846 ;;      Locals:         0       0       0       0       0       0       0
  6847 ;;      Temps:          0       0       0       0       0       0       0
  6848 ;;      Totals:         0       0       0       0       0       0       0
  6849 ;;Total ram usage:        0 bytes
  6850 ;; Hardware stack levels used:    1
  6851 ;; Hardware stack levels required when called:    4
  6852 ;; This function calls:
  6853 ;;		Nothing
  6854 ;; This function is called by:
  6855 ;;		_resetPosition
  6856 ;;		_moveToPoint
  6857 ;;		_touchObject
  6858 ;;		_touchTherm
  6859 ;;		_liftArm
  6860 ;;		_rotateObj
  6861 ;; This function uses a non-reentrant model
  6862 ;;
  6863                           
  6864                           	psect	text39
  6865  002700                     __ptext39:
  6866                           	callstack 0
  6867  002700                     _resetStep:
  6868                           	callstack 0
  6869  002700  FFFF               	dw	65535	; assembler added errata NOP
  6870  002702                     
  6871                           ;timer.c: 79:     pwmStep = 0;
  6872  002702  0E00               	movlw	0
  6873  002704  6E58               	movwf	_pwmStep^0,c	;volatile
  6874  002706  0012               	return		;funcret
  6875  002708  FFFF               	dw	65535	; errata NOP
  6876  00270A                     __end_of_resetStep:
  6877                           	callstack 0
  6878                           
  6879 ;; *************** function _getData *****************
  6880 ;; Defined at:
  6881 ;;		line 38 in file "usart.c"
  6882 ;; Parameters:    Size  Location     Type
  6883 ;;		None
  6884 ;; Auto vars:     Size  Location     Type
  6885 ;;		None
  6886 ;; Return value:  Size  Location     Type
  6887 ;;                  2   17[COMRAM] PTR struct .
  6888 ;; Registers used:
  6889 ;;		wreg, status,2, status,0
  6890 ;; Tracked objects:
  6891 ;;		On entry : 0/0
  6892 ;;		On exit  : 0/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6895 ;;      Params:         2       0       0       0       0       0       0
  6896 ;;      Locals:         0       0       0       0       0       0       0
  6897 ;;      Temps:          0       0       0       0       0       0       0
  6898 ;;      Totals:         2       0       0       0       0       0       0
  6899 ;;Total ram usage:        2 bytes
  6900 ;; Hardware stack levels used:    1
  6901 ;; Hardware stack levels required when called:    4
  6902 ;; This function calls:
  6903 ;;		Nothing
  6904 ;; This function is called by:
  6905 ;;		_executeData
  6906 ;; This function uses a non-reentrant model
  6907 ;;
  6908                           
  6909                           	psect	text40
  6910  002666                     __ptext40:
  6911                           	callstack 0
  6912  002666                     _getData:
  6913                           	callstack 0
  6914  002666  FFFF               	dw	65535	; assembler added errata NOP
  6915  002668                     
  6916                           ;usart.c: 39:     return(&dataSequence[0]);
  6917  002668  0ECA               	movlw	low _dataSequence
  6918  00266A  6E12               	movwf	?_getData^0,c
  6919  00266C  0E00               	movlw	high _dataSequence
  6920  00266E  6E13               	movwf	(?_getData+1)^0,c
  6921  002670  0012               	return		;funcret
  6922  002672  FFFF               	dw	65535	; errata NOP
  6923  002674                     __end_of_getData:
  6924                           	callstack 0
  6925                           
  6926 ;; *************** function _clearTM0 *****************
  6927 ;; Defined at:
  6928 ;;		line 32 in file "motors.c"
  6929 ;; Parameters:    Size  Location     Type
  6930 ;;		None
  6931 ;; Auto vars:     Size  Location     Type
  6932 ;;		None
  6933 ;; Return value:  Size  Location     Type
  6934 ;;                  1    wreg      void 
  6935 ;; Registers used:
  6936 ;;		wreg, status,2
  6937 ;; Tracked objects:
  6938 ;;		On entry : 0/0
  6939 ;;		On exit  : 0/0
  6940 ;;		Unchanged: 0/0
  6941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6942 ;;      Params:         0       0       0       0       0       0       0
  6943 ;;      Locals:         0       0       0       0       0       0       0
  6944 ;;      Temps:          0       0       0       0       0       0       0
  6945 ;;      Totals:         0       0       0       0       0       0       0
  6946 ;;Total ram usage:        0 bytes
  6947 ;; Hardware stack levels used:    1
  6948 ;; Hardware stack levels required when called:    4
  6949 ;; This function calls:
  6950 ;;		Nothing
  6951 ;; This function is called by:
  6952 ;;		_main
  6953 ;; This function uses a non-reentrant model
  6954 ;;
  6955                           
  6956                           	psect	text41
  6957  002674                     __ptext41:
  6958                           	callstack 0
  6959  002674                     _clearTM0:
  6960                           	callstack 0
  6961  002674  FFFF               	dw	65535	; assembler added errata NOP
  6962  002676                     
  6963                           ;motors.c: 33:     tm0Error = 0;
  6964  002676  0E00               	movlw	0
  6965  002678  6E56               	movwf	(_tm0Error+1)^0,c
  6966  00267A  0E00               	movlw	0
  6967  00267C  6E55               	movwf	_tm0Error^0,c
  6968  00267E  0012               	return		;funcret
  6969  002680  FFFF               	dw	65535	; errata NOP
  6970  002682                     __end_of_clearTM0:
  6971                           	callstack 0
  6972                           
  6973 ;; *************** function _isr *****************
  6974 ;; Defined at:
  6975 ;;		line 52 in file "interrupt.c"
  6976 ;; Parameters:    Size  Location     Type
  6977 ;;		None
  6978 ;; Auto vars:     Size  Location     Type
  6979 ;;  temp            1   16[COMRAM] unsigned char 
  6980 ;; Return value:  Size  Location     Type
  6981 ;;                  1    wreg      void 
  6982 ;; Registers used:
  6983 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6984 ;; Tracked objects:
  6985 ;;		On entry : 0/0
  6986 ;;		On exit  : 0/0
  6987 ;;		Unchanged: 0/0
  6988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6989 ;;      Params:         0       0       0       0       0       0       0
  6990 ;;      Locals:         1       0       0       0       0       0       0
  6991 ;;      Temps:          6       0       0       0       0       0       0
  6992 ;;      Totals:         7       0       0       0       0       0       0
  6993 ;;Total ram usage:        7 bytes
  6994 ;; Hardware stack levels used:    1
  6995 ;; Hardware stack levels required when called:    3
  6996 ;; This function calls:
  6997 ;;		_abortAll
  6998 ;;		_fatalError
  6999 ;;		_increaseStep
  7000 ;;		_retPeriod
  7001 ;;		_setThermRel
  7002 ;;		_setTouchRel
  7003 ;;		_toggleStep
  7004 ;;		_whatsTM0Limit
  7005 ;;		_writeTM0
  7006 ;;		i2_storeData
  7007 ;; This function is called by:
  7008 ;;		Interrupt level 2
  7009 ;; This function uses a non-reentrant model
  7010 ;;
  7011                           
  7012                           	psect	intcode
  7013  000008                     __pintcode:
  7014                           	callstack 0
  7015  000008                     _isr:
  7016                           	callstack 0
  7017  000008  FFFF               	dw	65535	; assembler added errata NOP
  7018                           
  7019                           ;incstack = 0
  7020  00000A  826E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7021  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  7022  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  7023  000014  CFF3 F00F          	movff	prodl,??_isr+4
  7024  000018  CFF4 F010          	movff	prodh,??_isr+5
  7025  00001C                     
  7026                           ;interrupt.c: 56:     if(INTCONbits.T0IF){
  7027  00001C  A4F2               	btfss	242,2,c	;volatile
  7028  00001E  EF13  F000         	goto	i2u282_41
  7029  000022  EF16  F000         	goto	i2u282_40
  7030  000026                     i2u282_41:
  7031  000026  FFFF               	dw	65535	; assembler added errata NOP
  7032  000028  EF2C  F000         	goto	i2l3571
  7033  00002C                     i2u282_40:
  7034  00002C  FFFF               	dw	65535	; assembler added errata NOP
  7035  00002E                     
  7036                           ;interrupt.c: 57:         INTCONbits.T0IF = 0;
  7037  00002E  94F2               	bcf	242,2,c	;volatile
  7038  000030                     
  7039                           ;interrupt.c: 60:         tm0Count++;
  7040  000030  2A5F               	incf	_tm0Count^0,f,c
  7041  000032                     
  7042                           ;interrupt.c: 62:         if(tm0Count >= whatsTM0Limit()){
  7043  000032  ECA4  F013         	call	_whatsTM0Limit	;wreg free
  7044  000036  6E0B               	movwf	??_isr^0,c
  7045  000038  500B               	movf	??_isr^0,w,c
  7046  00003A  5C5F               	subwf	_tm0Count^0,w,c
  7047  00003C  A0D8               	btfss	status,0,c
  7048  00003E  EF23  F000         	goto	i2u283_41
  7049  000042  EF26  F000         	goto	i2u283_40
  7050  000046                     i2u283_41:
  7051  000046  FFFF               	dw	65535	; assembler added errata NOP
  7052  000048  EF2C  F000         	goto	i2l3571
  7053  00004C                     i2u283_40:
  7054  00004C  FFFF               	dw	65535	; assembler added errata NOP
  7055  00004E                     
  7056                           ;interrupt.c: 63:             T0CONbits.TMR0ON = 0;
  7057  00004E  9ED5               	bcf	213,7,c	;volatile
  7058  000050                     
  7059                           ;interrupt.c: 64:             tm0Count = 0;
  7060  000050  0E00               	movlw	0
  7061  000052  6E5F               	movwf	_tm0Count^0,c
  7062  000054                     
  7063                           ;interrupt.c: 65:             writeTM0();
  7064  000054  EC41  F013         	call	_writeTM0	;wreg free
  7065  000058                     i2l3571:
  7066  000058  FFFF               	dw	65535	; assembler added errata NOP
  7067                           
  7068                           ;interrupt.c: 70:     if(PIR1bits.TMR1IF){
  7069  00005A  A09E               	btfss	158,0,c	;volatile
  7070  00005C  EF32  F000         	goto	i2u284_41
  7071  000060  EF35  F000         	goto	i2u284_40
  7072  000064                     i2u284_41:
  7073  000064  FFFF               	dw	65535	; assembler added errata NOP
  7074  000066  EF45  F000         	goto	i2l3579
  7075  00006A                     i2u284_40:
  7076  00006A  FFFF               	dw	65535	; assembler added errata NOP
  7077  00006C                     
  7078                           ;interrupt.c: 71:         PIR1bits.TMR1IF = 0;
  7079  00006C  909E               	bcf	158,0,c	;volatile
  7080  00006E                     
  7081                           ;interrupt.c: 72:         if(fatalError()){
  7082  00006E  ECAC  F013         	call	_fatalError	;wreg free
  7083  000072  0900               	iorlw	0
  7084  000074  B4D8               	btfsc	status,2,c
  7085  000076  EF3F  F000         	goto	i2u285_41
  7086  00007A  EF42  F000         	goto	i2u285_40
  7087  00007E                     i2u285_41:
  7088  00007E  FFFF               	dw	65535	; assembler added errata NOP
  7089  000080  EF45  F000         	goto	i2l3579
  7090  000084                     i2u285_40:
  7091  000084  FFFF               	dw	65535	; assembler added errata NOP
  7092  000086                     
  7093                           ;interrupt.c: 73:             abortAll();
  7094  000086  EC1C  F013         	call	_abortAll	;wreg free
  7095  00008A                     i2l3579:
  7096  00008A  FFFF               	dw	65535	; assembler added errata NOP
  7097                           
  7098                           ;interrupt.c: 78:     if(PIR1bits.TMR2IF){
  7099  00008C  A29E               	btfss	158,1,c	;volatile
  7100  00008E  EF4B  F000         	goto	i2u286_41
  7101  000092  EF4E  F000         	goto	i2u286_40
  7102  000096                     i2u286_41:
  7103  000096  FFFF               	dw	65535	; assembler added errata NOP
  7104  000098  EF82  F000         	goto	i2l3601
  7105  00009C                     i2u286_40:
  7106  00009C  FFFF               	dw	65535	; assembler added errata NOP
  7107  00009E                     
  7108                           ;interrupt.c: 79:         PIR1bits.TMR2IF = 0;
  7109  00009E  929E               	bcf	158,1,c	;volatile
  7110  0000A0                     
  7111                           ;interrupt.c: 80:         single_cycle++;
  7112  0000A0  0100               	movlb	0	; () banked
  7113  0000A2  4BC8               	infsnz	_single_cycle& (0+255),f,b
  7114  0000A4  2BC9               	incf	(_single_cycle+1)& (0+255),f,b
  7115  0000A6                     
  7116                           ; BSR set to: 0
  7117                           ;interrupt.c: 83:         if(single_cycle > retPeriod()){
  7118  0000A6  EC48  F013         	call	_retPeriod	;wreg free
  7119  0000AA  0100               	movlb	0	; () banked
  7120  0000AC  51C8               	movf	_single_cycle& (0+255),w,b
  7121  0000AE  5C01               	subwf	?_retPeriod^0,w,c
  7122  0000B0  51C9               	movf	(_single_cycle+1)& (0+255),w,b
  7123  0000B2  5802               	subwfb	(?_retPeriod+1)^0,w,c
  7124  0000B4  B0D8               	btfsc	status,0,c
  7125  0000B6  EF5F  F000         	goto	i2u287_41
  7126  0000BA  EF62  F000         	goto	i2u287_40
  7127  0000BE                     i2u287_41:
  7128  0000BE  FFFF               	dw	65535	; assembler added errata NOP
  7129  0000C0  EF82  F000         	goto	i2l3601
  7130  0000C4                     i2u287_40:
  7131  0000C4  FFFF               	dw	65535	; assembler added errata NOP
  7132  0000C6                     
  7133                           ; BSR set to: 0
  7134                           ;interrupt.c: 84:             single_cycle = 0;
  7135  0000C6  0E00               	movlw	0
  7136  0000C8  6FC9               	movwf	(_single_cycle+1)& (0+255),b
  7137  0000CA  0E00               	movlw	0
  7138  0000CC  6FC8               	movwf	_single_cycle& (0+255),b
  7139  0000CE                     
  7140                           ; BSR set to: 0
  7141                           ;interrupt.c: 85:             completeStep++;
  7142  0000CE  2A5E               	incf	_completeStep^0,f,c
  7143  0000D0                     
  7144                           ; BSR set to: 0
  7145                           ;interrupt.c: 88:             if(completeStep != 0 && !(completeStep % 2)){
  7146  0000D0  505E               	movf	_completeStep^0,w,c
  7147  0000D2  B4D8               	btfsc	status,2,c
  7148  0000D4  EF6E  F000         	goto	i2u288_41
  7149  0000D8  EF71  F000         	goto	i2u288_40
  7150  0000DC                     i2u288_41:
  7151  0000DC  FFFF               	dw	65535	; assembler added errata NOP
  7152  0000DE  EF7F  F000         	goto	i2l3599
  7153  0000E2                     i2u288_40:
  7154  0000E2  FFFF               	dw	65535	; assembler added errata NOP
  7155  0000E4                     
  7156                           ; BSR set to: 0
  7157  0000E4  B05E               	btfsc	_completeStep^0,0,c
  7158  0000E6  EF77  F000         	goto	i2u289_41
  7159  0000EA  EF7A  F000         	goto	i2u289_40
  7160  0000EE                     i2u289_41:
  7161  0000EE  FFFF               	dw	65535	; assembler added errata NOP
  7162  0000F0  EF7F  F000         	goto	i2l3599
  7163  0000F4                     i2u289_40:
  7164  0000F4  FFFF               	dw	65535	; assembler added errata NOP
  7165  0000F6                     
  7166                           ; BSR set to: 0
  7167                           ;interrupt.c: 90:                 completeStep = 0;
  7168  0000F6  0E00               	movlw	0
  7169  0000F8  6E5E               	movwf	_completeStep^0,c
  7170  0000FA                     
  7171                           ; BSR set to: 0
  7172                           ;interrupt.c: 93:                 increaseStep();
  7173  0000FA  ECA8  F013         	call	_increaseStep	;wreg free
  7174  0000FE                     i2l3599:
  7175  0000FE  FFFF               	dw	65535	; assembler added errata NOP
  7176                           
  7177                           ;interrupt.c: 98:             toggleStep();
  7178  000100  EC85  F013         	call	_toggleStep	;wreg free
  7179  000104                     i2l3601:
  7180  000104  FFFF               	dw	65535	; assembler added errata NOP
  7181                           
  7182                           ;interrupt.c: 103:     if(PIR1bits.ADIF){
  7183  000106  AC9E               	btfss	158,6,c	;volatile
  7184  000108  EF88  F000         	goto	i2u290_41
  7185  00010C  EF8B  F000         	goto	i2u290_40
  7186  000110                     i2u290_41:
  7187  000110  FFFF               	dw	65535	; assembler added errata NOP
  7188  000112  EFB8  F000         	goto	i2l3613
  7189  000116                     i2u290_40:
  7190  000116  FFFF               	dw	65535	; assembler added errata NOP
  7191  000118                     
  7192                           ;interrupt.c: 104:         PIR1bits.ADIF = 0;
  7193  000118  9C9E               	bcf	158,6,c	;volatile
  7194                           
  7195                           ;interrupt.c: 107:         ADC_res = ADRESL;
  7196  00011A  CFC3 F04F          	movff	4035,_ADC_res	;volatile
  7197  00011E  6A50               	clrf	(_ADC_res+1)^0,c
  7198  000120                     
  7199                           ;interrupt.c: 108:         ADC_res |= (ADRESH << 8);
  7200  000120  50C4               	movf	196,w,c	;volatile
  7201  000122  6E0C               	movwf	(??_isr+1)^0,c
  7202  000124  6A0B               	clrf	??_isr^0,c
  7203  000126  500B               	movf	??_isr^0,w,c
  7204  000128  124F               	iorwf	_ADC_res^0,f,c
  7205  00012A  500C               	movf	(??_isr+1)^0,w,c
  7206  00012C  1250               	iorwf	(_ADC_res+1)^0,f,c
  7207                           
  7208                           ;interrupt.c: 111:         if(ADC_res > therm_pressure){
  7209  00012E  044F               	decf	_ADC_res^0,w,c
  7210  000130  0E04               	movlw	4
  7211  000132  5850               	subwfb	(_ADC_res+1)^0,w,c
  7212  000134  A0D8               	btfss	status,0,c
  7213  000136  EF9F  F000         	goto	i2u291_41
  7214  00013A  EFA2  F000         	goto	i2u291_40
  7215  00013E                     i2u291_41:
  7216  00013E  FFFF               	dw	65535	; assembler added errata NOP
  7217  000140  EFA9  F000         	goto	i2l3609
  7218  000144                     i2u291_40:
  7219  000144  FFFF               	dw	65535	; assembler added errata NOP
  7220  000146                     
  7221                           ;interrupt.c: 113:             setTouchRel();
  7222  000146  EC8A  F013         	call	_setTouchRel	;wreg free
  7223                           
  7224                           ;interrupt.c: 114:             setThermRel();
  7225  00014A  EC8F  F013         	call	_setThermRel	;wreg free
  7226                           
  7227                           ;interrupt.c: 115:         }else if(ADC_res > touch_pressure){
  7228  00014E  EFB8  F000         	goto	i2l3613
  7229  000152                     i2l3609:
  7230  000152  FFFF               	dw	65535	; assembler added errata NOP
  7231  000154  044F               	decf	_ADC_res^0,w,c
  7232  000156  0E02               	movlw	2
  7233  000158  5850               	subwfb	(_ADC_res+1)^0,w,c
  7234  00015A  A0D8               	btfss	status,0,c
  7235  00015C  EFB2  F000         	goto	i2u292_41
  7236  000160  EFB5  F000         	goto	i2u292_40
  7237  000164                     i2u292_41:
  7238  000164  FFFF               	dw	65535	; assembler added errata NOP
  7239  000166  EFB8  F000         	goto	i2l3613
  7240  00016A                     i2u292_40:
  7241  00016A  FFFF               	dw	65535	; assembler added errata NOP
  7242  00016C                     
  7243                           ;interrupt.c: 117:             setTouchRel();
  7244  00016C  EC8A  F013         	call	_setTouchRel	;wreg free
  7245  000170                     i2l3613:
  7246  000170  FFFF               	dw	65535	; assembler added errata NOP
  7247                           
  7248                           ;interrupt.c: 122:     if(PIR1bits.RC1IF){
  7249  000172  AA9E               	btfss	158,5,c	;volatile
  7250  000174  EFBE  F000         	goto	i2u293_41
  7251  000178  EFC1  F000         	goto	i2u293_40
  7252  00017C                     i2u293_41:
  7253  00017C  FFFF               	dw	65535	; assembler added errata NOP
  7254  00017E  EFC8  F000         	goto	i2l478
  7255  000182                     i2u293_40:
  7256  000182  FFFF               	dw	65535	; assembler added errata NOP
  7257  000184                     
  7258                           ;interrupt.c: 123:         PIR1bits.RC1IF = 0;
  7259  000184  9A9E               	bcf	158,5,c	;volatile
  7260                           
  7261                           ;interrupt.c: 126:         unsigned char temp = RCREG1;
  7262  000186  CFAE F011          	movff	4014,isr@temp	;volatile
  7263  00018A                     
  7264                           ;interrupt.c: 128:         storeData(temp);
  7265  00018A  5011               	movf	isr@temp^0,w,c
  7266  00018C  EC75  F009         	call	i2_storeData
  7267  000190                     i2l478:
  7268  000190  FFFF               	dw	65535	; assembler added errata NOP
  7269  000192  C010  FFF4         	movff	??_isr+5,prodh
  7270  000196  C00F  FFF3         	movff	??_isr+4,prodl
  7271  00019A  C00E  FFDA         	movff	??_isr+3,fsr2h
  7272  00019E  C00D  FFD9         	movff	??_isr+2,fsr2l
  7273  0001A2  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7274  0001A4  0011               	retfie		f
  7275  0001A6  FFFF               	dw	65535	; errata NOP
  7276  0001A8                     __end_of_isr:
  7277                           	callstack 0
  7278                           
  7279 ;; *************** function i2_storeData *****************
  7280 ;; Defined at:
  7281 ;;		line 167 in file "usart.c"
  7282 ;; Parameters:    Size  Location     Type
  7283 ;;  data            1    wreg     unsigned char 
  7284 ;; Auto vars:     Size  Location     Type
  7285 ;;  data            1    9[COMRAM] unsigned char 
  7286 ;; Return value:  Size  Location     Type
  7287 ;;                  1    wreg      void 
  7288 ;; Registers used:
  7289 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7290 ;; Tracked objects:
  7291 ;;		On entry : 0/0
  7292 ;;		On exit  : 0/0
  7293 ;;		Unchanged: 0/0
  7294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7295 ;;      Params:         0       0       0       0       0       0       0
  7296 ;;      Locals:         1       0       0       0       0       0       0
  7297 ;;      Temps:          2       0       0       0       0       0       0
  7298 ;;      Totals:         3       0       0       0       0       0       0
  7299 ;;Total ram usage:        3 bytes
  7300 ;; Hardware stack levels used:    1
  7301 ;; Hardware stack levels required when called:    2
  7302 ;; This function calls:
  7303 ;;		i2_printError
  7304 ;; This function is called by:
  7305 ;;		_isr
  7306 ;; This function uses a non-reentrant model
  7307 ;;
  7308                           
  7309                           	psect	text43
  7310  0012EA                     __ptext43:
  7311                           	callstack 0
  7312  0012EA                     i2_storeData:
  7313                           	callstack 0
  7314  0012EA  FFFF               	dw	65535	; assembler added errata NOP
  7315                           
  7316                           ;incstack = 0
  7317                           ;i2storeData@data stored from wreg
  7318  0012EC  6E0A               	movwf	i2storeData@data^0,c
  7319  0012EE                     
  7320                           ;usart.c: 169:     static unsigned char counter = 0;;usart.c: 170:     static unsigned c
      +                          har mexLength = 5;;usart.c: 171:     static unsigned char command;;usart.c: 172:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 176:     receivedMex[counter] = data;
  7321  0012EE  0E43               	movlw	low storeData@receivedMex
  7322  0012F0  245A               	addwf	storeData@counter^0,w,c
  7323  0012F2  6ED9               	movwf	fsr2l,c
  7324  0012F4  6ADA               	clrf	fsr2h,c
  7325  0012F6  0E00               	movlw	high storeData@receivedMex
  7326  0012F8  22DA               	addwfc	fsr2h,f,c
  7327  0012FA  C00A  FFDF         	movff	i2storeData@data,indf2
  7328  0012FE                     
  7329                           ;usart.c: 178:     counter++;
  7330  0012FE  2A5A               	incf	storeData@counter^0,f,c
  7331                           
  7332                           ;usart.c: 181:     switch(receivedMex[0]){
  7333  001300  EF91  F009         	goto	i2l3447
  7334  001304                     i2l3439:
  7335  001304  FFFF               	dw	65535	; assembler added errata NOP
  7336                           
  7337                           ;usart.c: 183:             mexLength = 5;
  7338  001306  0E05               	movlw	5
  7339  001308  6E6D               	movwf	storeData@mexLength^0,c
  7340                           
  7341                           ;usart.c: 184:             break;
  7342  00130A  EFAC  F009         	goto	i2l3449
  7343  00130E                     i2l3441:
  7344  00130E  FFFF               	dw	65535	; assembler added errata NOP
  7345                           
  7346                           ;usart.c: 186:             mexLength = 9;
  7347  001310  0E09               	movlw	9
  7348  001312  6E6D               	movwf	storeData@mexLength^0,c
  7349                           
  7350                           ;usart.c: 187:             break;
  7351  001314  EFAC  F009         	goto	i2l3449
  7352  001318                     i2l3443:
  7353  001318  FFFF               	dw	65535	; assembler added errata NOP
  7354                           
  7355                           ;usart.c: 189:             mexLength = 1;
  7356  00131A  0E01               	movlw	1
  7357  00131C  6E6D               	movwf	storeData@mexLength^0,c
  7358                           
  7359                           ;usart.c: 190:             break;
  7360  00131E  EFAC  F009         	goto	i2l3449
  7361  001322                     i2l3447:
  7362  001322  FFFF               	dw	65535	; assembler added errata NOP
  7363  001324  5043               	movf	storeData@receivedMex^0,w,c
  7364  001326  6E08               	movwf	??i2_storeData^0,c
  7365  001328  6A09               	clrf	(??i2_storeData+1)^0,c
  7366                           
  7367                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7368                           ; Switch size 1, requested type "simple"
  7369                           ; Number of cases is 1, Range of values is 0 to 0
  7370                           ; switch strategies available:
  7371                           ; Name         Instructions Cycles
  7372                           ; simple_byte            4     3 (average)
  7373                           ;	Chosen strategy is simple_byte
  7374  00132A  5009               	movf	(??i2_storeData+1)^0,w,c
  7375  00132C  0A00               	xorlw	0	; case 0
  7376  00132E  B4D8               	btfsc	status,2,c
  7377  001330  EF9C  F009         	goto	i2l4833
  7378  001334  EFAC  F009         	goto	i2l3449
  7379  001338                     i2l4833:
  7380  001338  FFFF               	dw	65535	; assembler added errata NOP
  7381                           
  7382                           ; Switch size 1, requested type "simple"
  7383                           ; Number of cases is 3, Range of values is 0 to 2
  7384                           ; switch strategies available:
  7385                           ; Name         Instructions Cycles
  7386                           ; simple_byte           10     6 (average)
  7387                           ;	Chosen strategy is simple_byte
  7388  00133A  5008               	movf	??i2_storeData^0,w,c
  7389  00133C  0A00               	xorlw	0	; case 0
  7390  00133E  B4D8               	btfsc	status,2,c
  7391  001340  EF82  F009         	goto	i2l3439
  7392  001344  0A01               	xorlw	1	; case 1
  7393  001346  B4D8               	btfsc	status,2,c
  7394  001348  EF87  F009         	goto	i2l3441
  7395  00134C  0A03               	xorlw	3	; case 2
  7396  00134E  B4D8               	btfsc	status,2,c
  7397  001350  EF8C  F009         	goto	i2l3443
  7398  001354  EFAC  F009         	goto	i2l3449
  7399  001358                     i2l3449:
  7400  001358  FFFF               	dw	65535	; assembler added errata NOP
  7401                           
  7402                           ;usart.c: 197:     if(counter >= mexLength){
  7403  00135A  506D               	movf	storeData@mexLength^0,w,c
  7404  00135C  5C5A               	subwf	storeData@counter^0,w,c
  7405  00135E  A0D8               	btfss	status,0,c
  7406  001360  EFB4  F009         	goto	i2u269_41
  7407  001364  EFB7  F009         	goto	i2u269_40
  7408  001368                     i2u269_41:
  7409  001368  FFFF               	dw	65535	; assembler added errata NOP
  7410  00136A  EFA8  F00A         	goto	i2l604
  7411  00136E                     i2u269_40:
  7412  00136E  FFFF               	dw	65535	; assembler added errata NOP
  7413  001370                     
  7414                           ;usart.c: 198:         counter = 0;
  7415  001370  0E00               	movlw	0
  7416  001372  6E5A               	movwf	storeData@counter^0,c
  7417                           
  7418                           ;usart.c: 201:         switch(receivedMex[0]){
  7419  001374  EF8D  F00A         	goto	i2l3485
  7420  001378                     i2l3453:
  7421  001378  FFFF               	dw	65535	; assembler added errata NOP
  7422                           
  7423                           ;usart.c: 203:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  7424  00137A  505D               	movf	_dataCounter^0,w,c
  7425  00137C  0D04               	mullw	4
  7426  00137E  0ECA               	movlw	low _dataSequence
  7427  001380  24F3               	addwf	243,w,c
  7428  001382  6ED9               	movwf	fsr2l,c
  7429  001384  0E00               	movlw	high _dataSequence
  7430  001386  20F4               	addwfc	prodh,w,c
  7431  001388  6EDA               	movwf	fsr2h,c
  7432  00138A  C044  FFDF         	movff	storeData@receivedMex+1,indf2
  7433                           
  7434                           ;usart.c: 204:                 dataSequence[dataCounter].posX = receivedMex[2] * 5;
  7435  00138E  505D               	movf	_dataCounter^0,w,c
  7436  001390  0D04               	mullw	4
  7437  001392  0ECB               	movlw	low (_dataSequence+1)
  7438  001394  24F3               	addwf	243,w,c
  7439  001396  6ED9               	movwf	fsr2l,c
  7440  001398  0E00               	movlw	high (_dataSequence+1)
  7441  00139A  20F4               	addwfc	prodh,w,c
  7442  00139C  6EDA               	movwf	fsr2h,c
  7443  00139E  5045               	movf	(storeData@receivedMex+2)^0,w,c
  7444  0013A0  0D05               	mullw	5
  7445  0013A2  CFF3 FFDF          	movff	prodl,indf2
  7446                           
  7447                           ;usart.c: 205:                 dataSequence[dataCounter].posY = receivedMex[3] * 5;
  7448  0013A6  505D               	movf	_dataCounter^0,w,c
  7449  0013A8  0D04               	mullw	4
  7450  0013AA  0ECC               	movlw	low (_dataSequence+2)
  7451  0013AC  24F3               	addwf	243,w,c
  7452  0013AE  6ED9               	movwf	fsr2l,c
  7453  0013B0  0E00               	movlw	high (_dataSequence+2)
  7454  0013B2  20F4               	addwfc	prodh,w,c
  7455  0013B4  6EDA               	movwf	fsr2h,c
  7456  0013B6  5046               	movf	(storeData@receivedMex+3)^0,w,c
  7457  0013B8  0D05               	mullw	5
  7458  0013BA  CFF3 FFDF          	movff	prodl,indf2
  7459                           
  7460                           ;usart.c: 206:                 dataSequence[dataCounter].rotation = receivedMex[4];
  7461  0013BE  505D               	movf	_dataCounter^0,w,c
  7462  0013C0  0D04               	mullw	4
  7463  0013C2  0ECD               	movlw	low (_dataSequence+3)
  7464  0013C4  24F3               	addwf	243,w,c
  7465  0013C6  6ED9               	movwf	fsr2l,c
  7466  0013C8  0E00               	movlw	high (_dataSequence+3)
  7467  0013CA  20F4               	addwfc	prodh,w,c
  7468  0013CC  6EDA               	movwf	fsr2h,c
  7469  0013CE  C047  FFDF         	movff	storeData@receivedMex+4,indf2
  7470                           
  7471                           ;usart.c: 209:                 if(dataSequence[dataCounter].posX > maxX ||
  7472  0013D2  505D               	movf	_dataCounter^0,w,c
  7473  0013D4  0D04               	mullw	4
  7474  0013D6  0ECB               	movlw	low (_dataSequence+1)
  7475  0013D8  24F3               	addwf	243,w,c
  7476  0013DA  6ED9               	movwf	fsr2l,c
  7477  0013DC  0E00               	movlw	high (_dataSequence+1)
  7478  0013DE  20F4               	addwfc	prodh,w,c
  7479  0013E0  6EDA               	movwf	fsr2h,c
  7480  0013E2  50DF               	movf	indf2,w,c
  7481  0013E4  6E08               	movwf	??i2_storeData^0,c
  7482  0013E6  6A09               	clrf	(??i2_storeData+1)^0,c
  7483  0013E8  5008               	movf	??i2_storeData^0,w,c
  7484  0013EA  5C6B               	subwf	_maxX^0,w,c
  7485  0013EC  5009               	movf	(??i2_storeData+1)^0,w,c
  7486  0013EE  586C               	subwfb	(_maxX+1)^0,w,c
  7487  0013F0  A0D8               	btfss	status,0,c
  7488  0013F2  EFFD  F009         	goto	i2u270_41
  7489  0013F6  EF00  F00A         	goto	i2u270_40
  7490  0013FA                     i2u270_41:
  7491  0013FA  FFFF               	dw	65535	; assembler added errata NOP
  7492  0013FC  EF17  F00A         	goto	i2l3457
  7493  001400                     i2u270_40:
  7494  001400  FFFF               	dw	65535	; assembler added errata NOP
  7495  001402  505D               	movf	_dataCounter^0,w,c
  7496  001404  0D04               	mullw	4
  7497  001406  0ECC               	movlw	low (_dataSequence+2)
  7498  001408  24F3               	addwf	243,w,c
  7499  00140A  6ED9               	movwf	fsr2l,c
  7500  00140C  0E00               	movlw	high (_dataSequence+2)
  7501  00140E  20F4               	addwfc	prodh,w,c
  7502  001410  6EDA               	movwf	fsr2h,c
  7503  001412  50DF               	movf	indf2,w,c
  7504  001414  6E08               	movwf	??i2_storeData^0,c
  7505  001416  5008               	movf	??i2_storeData^0,w,c
  7506  001418  5C69               	subwf	_maxY^0,w,c
  7507  00141A  0E00               	movlw	0
  7508  00141C  586A               	subwfb	(_maxY+1)^0,w,c
  7509  00141E  B0D8               	btfsc	status,0,c
  7510  001420  EF14  F00A         	goto	i2u271_41
  7511  001424  EF17  F00A         	goto	i2u271_40
  7512  001428                     i2u271_41:
  7513  001428  FFFF               	dw	65535	; assembler added errata NOP
  7514  00142A  EF1D  F00A         	goto	i2l3459
  7515  00142E                     i2u271_40:
  7516  00142E                     i2l3457:
  7517  00142E  FFFF               	dw	65535	; assembler added errata NOP
  7518                           
  7519                           ;usart.c: 210:                         dataSequence[dataCounter].posY > maxY){;usart.c: 
      +                          211:                     printError(5);
  7520  001430  0E05               	movlw	5
  7521  001432  EC97  F00E         	call	i2_printError
  7522                           
  7523                           ;usart.c: 212:                 }else{
  7524  001436  EFA8  F00A         	goto	i2l604
  7525  00143A                     i2l3459:
  7526  00143A  FFFF               	dw	65535	; assembler added errata NOP
  7527                           
  7528                           ;usart.c: 213:                     dataCounter++;
  7529  00143C  2A5D               	incf	_dataCounter^0,f,c
  7530  00143E  EFA8  F00A         	goto	i2l604
  7531  001442                     i2l597:
  7532  001442  FFFF               	dw	65535	; assembler added errata NOP
  7533                           
  7534                           ;usart.c: 218:                 newSequenceData.L = receivedMex[1];
  7535  001444  C044  F0DE         	movff	storeData@receivedMex+1,_newSequenceData
  7536                           
  7537                           ;usart.c: 219:                 newSequenceData.W = receivedMex[2];
  7538  001448  C045  F0DF         	movff	storeData@receivedMex+2,_newSequenceData+1
  7539  00144C                     
  7540                           ;usart.c: 220:                 newSequenceData.init_posX = receivedMex[3] * 5;
  7541  00144C  5046               	movf	(storeData@receivedMex+3)^0,w,c
  7542  00144E  0D05               	mullw	5
  7543  001450  CFF3 F0E0          	movff	prodl,_newSequenceData+2
  7544                           
  7545                           ;usart.c: 221:                 newSequenceData.init_posY = receivedMex[4] * 5;
  7546  001454  5047               	movf	(storeData@receivedMex+4)^0,w,c
  7547  001456  0D05               	mullw	5
  7548  001458  CFF3 F0E1          	movff	prodl,_newSequenceData+3
  7549  00145C                     
  7550                           ;usart.c: 222:                 newSequenceData.init_rot = receivedMex[5];
  7551  00145C  C048  F0E2         	movff	storeData@receivedMex+5,_newSequenceData+4
  7552                           
  7553                           ;usart.c: 223:                 newSequenceData.end_posX = receivedMex[6] * 5;
  7554  001460  5049               	movf	(storeData@receivedMex+6)^0,w,c
  7555  001462  0D05               	mullw	5
  7556  001464  CFF3 F0E3          	movff	prodl,_newSequenceData+5
  7557                           
  7558                           ;usart.c: 224:                 newSequenceData.end_posY = receivedMex[7] * 5;
  7559  001468  504A               	movf	(storeData@receivedMex+7)^0,w,c
  7560  00146A  0D05               	mullw	5
  7561  00146C  CFF3 F0E4          	movff	prodl,_newSequenceData+6
  7562  001470                     
  7563                           ;usart.c: 225:                 newSequenceData.end_rot = receivedMex[8];
  7564  001470  C04B  F0E5         	movff	storeData@receivedMex+8,_newSequenceData+7
  7565  001474                     
  7566                           ;usart.c: 228:                 if(newSequenceData.init_posX > maxX ||
  7567  001474  0100               	movlb	0	; () banked
  7568  001476  51E0               	movf	(_newSequenceData+2)& (0+255),w,b
  7569  001478  6E08               	movwf	??i2_storeData^0,c
  7570  00147A  6A09               	clrf	(??i2_storeData+1)^0,c
  7571  00147C  5008               	movf	??i2_storeData^0,w,c
  7572  00147E  5C6B               	subwf	_maxX^0,w,c
  7573  001480  5009               	movf	(??i2_storeData+1)^0,w,c
  7574  001482  586C               	subwfb	(_maxX+1)^0,w,c
  7575  001484  A0D8               	btfss	status,0,c
  7576  001486  EF47  F00A         	goto	i2u272_41
  7577  00148A  EF4A  F00A         	goto	i2u272_40
  7578  00148E                     i2u272_41:
  7579  00148E  FFFF               	dw	65535	; assembler added errata NOP
  7580  001490  EF77  F00A         	goto	i2l3475
  7581  001494                     i2u272_40:
  7582  001494  FFFF               	dw	65535	; assembler added errata NOP
  7583  001496                     
  7584                           ; BSR set to: 0
  7585  001496  51E3               	movf	(_newSequenceData+5)& (0+255),w,b
  7586  001498  6E08               	movwf	??i2_storeData^0,c
  7587  00149A  6A09               	clrf	(??i2_storeData+1)^0,c
  7588  00149C  5008               	movf	??i2_storeData^0,w,c
  7589  00149E  5C6B               	subwf	_maxX^0,w,c
  7590  0014A0  5009               	movf	(??i2_storeData+1)^0,w,c
  7591  0014A2  586C               	subwfb	(_maxX+1)^0,w,c
  7592  0014A4  A0D8               	btfss	status,0,c
  7593  0014A6  EF57  F00A         	goto	i2u273_41
  7594  0014AA  EF5A  F00A         	goto	i2u273_40
  7595  0014AE                     i2u273_41:
  7596  0014AE  FFFF               	dw	65535	; assembler added errata NOP
  7597  0014B0  EF77  F00A         	goto	i2l3475
  7598  0014B4                     i2u273_40:
  7599  0014B4  FFFF               	dw	65535	; assembler added errata NOP
  7600  0014B6                     
  7601                           ; BSR set to: 0
  7602  0014B6  51E1               	movf	(_newSequenceData+3)& (0+255),w,b
  7603  0014B8  6E08               	movwf	??i2_storeData^0,c
  7604  0014BA  6A09               	clrf	(??i2_storeData+1)^0,c
  7605  0014BC  5008               	movf	??i2_storeData^0,w,c
  7606  0014BE  5C69               	subwf	_maxY^0,w,c
  7607  0014C0  5009               	movf	(??i2_storeData+1)^0,w,c
  7608  0014C2  586A               	subwfb	(_maxY+1)^0,w,c
  7609  0014C4  A0D8               	btfss	status,0,c
  7610  0014C6  EF67  F00A         	goto	i2u274_41
  7611  0014CA  EF6A  F00A         	goto	i2u274_40
  7612  0014CE                     i2u274_41:
  7613  0014CE  FFFF               	dw	65535	; assembler added errata NOP
  7614  0014D0  EF77  F00A         	goto	i2l3475
  7615  0014D4                     i2u274_40:
  7616  0014D4  FFFF               	dw	65535	; assembler added errata NOP
  7617  0014D6                     
  7618                           ; BSR set to: 0
  7619  0014D6  51E4               	movf	(_newSequenceData+6)& (0+255),w,b
  7620  0014D8  5C69               	subwf	_maxY^0,w,c
  7621  0014DA  0E00               	movlw	0
  7622  0014DC  586A               	subwfb	(_maxY+1)^0,w,c
  7623  0014DE  B0D8               	btfsc	status,0,c
  7624  0014E0  EF74  F00A         	goto	i2u275_41
  7625  0014E4  EF77  F00A         	goto	i2u275_40
  7626  0014E8                     i2u275_41:
  7627  0014E8  FFFF               	dw	65535	; assembler added errata NOP
  7628  0014EA  EF7D  F00A         	goto	i2l3477
  7629  0014EE                     i2u275_40:
  7630  0014EE                     i2l3475:
  7631  0014EE  FFFF               	dw	65535	; assembler added errata NOP
  7632                           
  7633                           ; BSR set to: 0
  7634                           ;usart.c: 231:                         newSequenceData.end_posY > maxY){;usart.c: 232:  
      +                                             printError(5);
  7635  0014F0  0E05               	movlw	5
  7636  0014F2  EC97  F00E         	call	i2_printError
  7637                           
  7638                           ;usart.c: 233:                 }else{
  7639  0014F6  EFA8  F00A         	goto	i2l604
  7640  0014FA                     i2l3477:
  7641  0014FA  FFFF               	dw	65535	; assembler added errata NOP
  7642                           
  7643                           ; BSR set to: 0
  7644                           ;usart.c: 234:                     _newSequence = 1;
  7645  0014FC  0E01               	movlw	1
  7646  0014FE  6E5B               	movwf	__newSequence^0,c
  7647  001500  EFA8  F00A         	goto	i2l604
  7648  001504                     i2l3479:
  7649  001504  FFFF               	dw	65535	; assembler added errata NOP
  7650                           
  7651                           ;usart.c: 239:                 _fatalError = 1;
  7652  001506  0E01               	movlw	1
  7653  001508  6E5C               	movwf	__fatalError^0,c
  7654                           
  7655                           ;usart.c: 240:                 break;
  7656  00150A  EFA8  F00A         	goto	i2l604
  7657  00150E                     i2l3481:
  7658  00150E  FFFF               	dw	65535	; assembler added errata NOP
  7659                           
  7660                           ;usart.c: 243:                 printError(8);
  7661  001510  0E08               	movlw	8
  7662  001512  EC97  F00E         	call	i2_printError
  7663                           
  7664                           ;usart.c: 244:                 break;
  7665  001516  EFA8  F00A         	goto	i2l604
  7666  00151A                     i2l3485:
  7667  00151A  FFFF               	dw	65535	; assembler added errata NOP
  7668  00151C  5043               	movf	storeData@receivedMex^0,w,c
  7669  00151E  6E08               	movwf	??i2_storeData^0,c
  7670  001520  6A09               	clrf	(??i2_storeData+1)^0,c
  7671                           
  7672                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7673                           ; Switch size 1, requested type "simple"
  7674                           ; Number of cases is 1, Range of values is 0 to 0
  7675                           ; switch strategies available:
  7676                           ; Name         Instructions Cycles
  7677                           ; simple_byte            4     3 (average)
  7678                           ;	Chosen strategy is simple_byte
  7679  001522  5009               	movf	(??i2_storeData+1)^0,w,c
  7680  001524  0A00               	xorlw	0	; case 0
  7681  001526  B4D8               	btfsc	status,2,c
  7682  001528  EF98  F00A         	goto	i2l4835
  7683  00152C  EF87  F00A         	goto	i2l3481
  7684  001530                     i2l4835:
  7685  001530  FFFF               	dw	65535	; assembler added errata NOP
  7686                           
  7687                           ; Switch size 1, requested type "simple"
  7688                           ; Number of cases is 3, Range of values is 0 to 2
  7689                           ; switch strategies available:
  7690                           ; Name         Instructions Cycles
  7691                           ; simple_byte           10     6 (average)
  7692                           ;	Chosen strategy is simple_byte
  7693  001532  5008               	movf	??i2_storeData^0,w,c
  7694  001534  0A00               	xorlw	0	; case 0
  7695  001536  B4D8               	btfsc	status,2,c
  7696  001538  EFBC  F009         	goto	i2l3453
  7697  00153C  0A01               	xorlw	1	; case 1
  7698  00153E  B4D8               	btfsc	status,2,c
  7699  001540  EF21  F00A         	goto	i2l597
  7700  001544  0A03               	xorlw	3	; case 2
  7701  001546  B4D8               	btfsc	status,2,c
  7702  001548  EF82  F00A         	goto	i2l3479
  7703  00154C  EF87  F00A         	goto	i2l3481
  7704  001550                     i2l604:
  7705  001550  FFFF               	dw	65535	; assembler added errata NOP
  7706  001552  0012               	return		;funcret
  7707  001554  FFFF               	dw	65535	; errata NOP
  7708  001556                     __end_ofi2_storeData:
  7709                           	callstack 0
  7710                           
  7711 ;; *************** function _writeTM0 *****************
  7712 ;; Defined at:
  7713 ;;		line 25 in file "motors.c"
  7714 ;; Parameters:    Size  Location     Type
  7715 ;;		None
  7716 ;; Auto vars:     Size  Location     Type
  7717 ;;		None
  7718 ;; Return value:  Size  Location     Type
  7719 ;;                  1    wreg      void 
  7720 ;; Registers used:
  7721 ;;		wreg, status,2
  7722 ;; Tracked objects:
  7723 ;;		On entry : 0/0
  7724 ;;		On exit  : 0/0
  7725 ;;		Unchanged: 0/0
  7726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7727 ;;      Params:         0       0       0       0       0       0       0
  7728 ;;      Locals:         0       0       0       0       0       0       0
  7729 ;;      Temps:          0       0       0       0       0       0       0
  7730 ;;      Totals:         0       0       0       0       0       0       0
  7731 ;;Total ram usage:        0 bytes
  7732 ;; Hardware stack levels used:    1
  7733 ;; This function calls:
  7734 ;;		Nothing
  7735 ;; This function is called by:
  7736 ;;		_isr
  7737 ;; This function uses a non-reentrant model
  7738 ;;
  7739                           
  7740                           	psect	text44
  7741  002682                     __ptext44:
  7742                           	callstack 0
  7743  002682                     _writeTM0:
  7744                           	callstack 0
  7745  002682  FFFF               	dw	65535	; assembler added errata NOP
  7746  002684                     
  7747                           ;motors.c: 26:     tm0Error = 1;
  7748  002684  0E00               	movlw	0
  7749  002686  6E56               	movwf	(_tm0Error+1)^0,c
  7750  002688  0E01               	movlw	1
  7751  00268A  6E55               	movwf	_tm0Error^0,c
  7752  00268C  0012               	return		;funcret
  7753  00268E  FFFF               	dw	65535	; errata NOP
  7754  002690                     __end_of_writeTM0:
  7755                           	callstack 0
  7756                           
  7757 ;; *************** function _whatsTM0Limit *****************
  7758 ;; Defined at:
  7759 ;;		line 39 in file "motors.c"
  7760 ;; Parameters:    Size  Location     Type
  7761 ;;		None
  7762 ;; Auto vars:     Size  Location     Type
  7763 ;;		None
  7764 ;; Return value:  Size  Location     Type
  7765 ;;                  1    wreg      unsigned char 
  7766 ;; Registers used:
  7767 ;;		wreg, status,2
  7768 ;; Tracked objects:
  7769 ;;		On entry : 0/0
  7770 ;;		On exit  : 0/0
  7771 ;;		Unchanged: 0/0
  7772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7773 ;;      Params:         0       0       0       0       0       0       0
  7774 ;;      Locals:         0       0       0       0       0       0       0
  7775 ;;      Temps:          0       0       0       0       0       0       0
  7776 ;;      Totals:         0       0       0       0       0       0       0
  7777 ;;Total ram usage:        0 bytes
  7778 ;; Hardware stack levels used:    1
  7779 ;; This function calls:
  7780 ;;		Nothing
  7781 ;; This function is called by:
  7782 ;;		_isr
  7783 ;; This function uses a non-reentrant model
  7784 ;;
  7785                           
  7786                           	psect	text45
  7787  002748                     __ptext45:
  7788                           	callstack 0
  7789  002748                     _whatsTM0Limit:
  7790                           	callstack 0
  7791  002748  FFFF               	dw	65535	; assembler added errata NOP
  7792  00274A                     
  7793                           ;motors.c: 40:     return(tm0Limit);
  7794  00274A  5062               	movf	_tm0Limit^0,w,c
  7795  00274C  0012               	return		;funcret
  7796  00274E  FFFF               	dw	65535	; errata NOP
  7797  002750                     __end_of_whatsTM0Limit:
  7798                           	callstack 0
  7799                           
  7800 ;; *************** function _toggleStep *****************
  7801 ;; Defined at:
  7802 ;;		line 93 in file "timer.c"
  7803 ;; Parameters:    Size  Location     Type
  7804 ;;		None
  7805 ;; Auto vars:     Size  Location     Type
  7806 ;;		None
  7807 ;; Return value:  Size  Location     Type
  7808 ;;                  1    wreg      void 
  7809 ;; Registers used:
  7810 ;;		wreg, status,2
  7811 ;; Tracked objects:
  7812 ;;		On entry : 0/0
  7813 ;;		On exit  : 0/0
  7814 ;;		Unchanged: 0/0
  7815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7816 ;;      Params:         0       0       0       0       0       0       0
  7817 ;;      Locals:         0       0       0       0       0       0       0
  7818 ;;      Temps:          0       0       0       0       0       0       0
  7819 ;;      Totals:         0       0       0       0       0       0       0
  7820 ;;Total ram usage:        0 bytes
  7821 ;; Hardware stack levels used:    1
  7822 ;; This function calls:
  7823 ;;		Nothing
  7824 ;; This function is called by:
  7825 ;;		_isr
  7826 ;; This function uses a non-reentrant model
  7827 ;;
  7828                           
  7829                           	psect	text46
  7830  00270A                     __ptext46:
  7831                           	callstack 0
  7832  00270A                     _toggleStep:
  7833                           	callstack 0
  7834  00270A  FFFF               	dw	65535	; assembler added errata NOP
  7835  00270C                     
  7836                           ;timer.c: 94:     stepToggle = 1;
  7837  00270C  0E01               	movlw	1
  7838  00270E  6E57               	movwf	_stepToggle^0,c	;volatile
  7839  002710  0012               	return		;funcret
  7840  002712  FFFF               	dw	65535	; errata NOP
  7841  002714                     __end_of_toggleStep:
  7842                           	callstack 0
  7843                           
  7844 ;; *************** function _setTouchRel *****************
  7845 ;; Defined at:
  7846 ;;		line 86 in file "adc.c"
  7847 ;; Parameters:    Size  Location     Type
  7848 ;;		None
  7849 ;; Auto vars:     Size  Location     Type
  7850 ;;		None
  7851 ;; Return value:  Size  Location     Type
  7852 ;;                  1    wreg      void 
  7853 ;; Registers used:
  7854 ;;		wreg, status,2
  7855 ;; Tracked objects:
  7856 ;;		On entry : 0/0
  7857 ;;		On exit  : 0/0
  7858 ;;		Unchanged: 0/0
  7859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7860 ;;      Params:         0       0       0       0       0       0       0
  7861 ;;      Locals:         0       0       0       0       0       0       0
  7862 ;;      Temps:          0       0       0       0       0       0       0
  7863 ;;      Totals:         0       0       0       0       0       0       0
  7864 ;;Total ram usage:        0 bytes
  7865 ;; Hardware stack levels used:    1
  7866 ;; This function calls:
  7867 ;;		Nothing
  7868 ;; This function is called by:
  7869 ;;		_isr
  7870 ;; This function uses a non-reentrant model
  7871 ;;
  7872                           
  7873                           	psect	text47
  7874  002714                     __ptext47:
  7875                           	callstack 0
  7876  002714                     _setTouchRel:
  7877                           	callstack 0
  7878  002714  FFFF               	dw	65535	; assembler added errata NOP
  7879  002716                     
  7880                           ;adc.c: 87:     touch_rel = 1;
  7881  002716  0E01               	movlw	1
  7882  002718  6E61               	movwf	_touch_rel^0,c	;volatile
  7883  00271A  0012               	return		;funcret
  7884  00271C  FFFF               	dw	65535	; errata NOP
  7885  00271E                     __end_of_setTouchRel:
  7886                           	callstack 0
  7887                           
  7888 ;; *************** function _setThermRel *****************
  7889 ;; Defined at:
  7890 ;;		line 79 in file "adc.c"
  7891 ;; Parameters:    Size  Location     Type
  7892 ;;		None
  7893 ;; Auto vars:     Size  Location     Type
  7894 ;;		None
  7895 ;; Return value:  Size  Location     Type
  7896 ;;                  1    wreg      void 
  7897 ;; Registers used:
  7898 ;;		wreg, status,2
  7899 ;; Tracked objects:
  7900 ;;		On entry : 0/0
  7901 ;;		On exit  : 0/0
  7902 ;;		Unchanged: 0/0
  7903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7904 ;;      Params:         0       0       0       0       0       0       0
  7905 ;;      Locals:         0       0       0       0       0       0       0
  7906 ;;      Temps:          0       0       0       0       0       0       0
  7907 ;;      Totals:         0       0       0       0       0       0       0
  7908 ;;Total ram usage:        0 bytes
  7909 ;; Hardware stack levels used:    1
  7910 ;; This function calls:
  7911 ;;		Nothing
  7912 ;; This function is called by:
  7913 ;;		_isr
  7914 ;; This function uses a non-reentrant model
  7915 ;;
  7916                           
  7917                           	psect	text48
  7918  00271E                     __ptext48:
  7919                           	callstack 0
  7920  00271E                     _setThermRel:
  7921                           	callstack 0
  7922  00271E  FFFF               	dw	65535	; assembler added errata NOP
  7923  002720                     
  7924                           ;adc.c: 80:     therm_rel = 1;
  7925  002720  0E01               	movlw	1
  7926  002722  6E60               	movwf	_therm_rel^0,c	;volatile
  7927  002724  0012               	return		;funcret
  7928  002726  FFFF               	dw	65535	; errata NOP
  7929  002728                     __end_of_setThermRel:
  7930                           	callstack 0
  7931                           
  7932 ;; *************** function _retPeriod *****************
  7933 ;; Defined at:
  7934 ;;		line 101 in file "timer.c"
  7935 ;; Parameters:    Size  Location     Type
  7936 ;;		None
  7937 ;; Auto vars:     Size  Location     Type
  7938 ;;		None
  7939 ;; Return value:  Size  Location     Type
  7940 ;;                  2    0[COMRAM] unsigned int 
  7941 ;; Registers used:
  7942 ;;		None
  7943 ;; Tracked objects:
  7944 ;;		On entry : 0/0
  7945 ;;		On exit  : 0/0
  7946 ;;		Unchanged: 0/0
  7947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7948 ;;      Params:         2       0       0       0       0       0       0
  7949 ;;      Locals:         0       0       0       0       0       0       0
  7950 ;;      Temps:          0       0       0       0       0       0       0
  7951 ;;      Totals:         2       0       0       0       0       0       0
  7952 ;;Total ram usage:        2 bytes
  7953 ;; Hardware stack levels used:    1
  7954 ;; This function calls:
  7955 ;;		Nothing
  7956 ;; This function is called by:
  7957 ;;		_isr
  7958 ;; This function uses a non-reentrant model
  7959 ;;
  7960                           
  7961                           	psect	text49
  7962  002690                     __ptext49:
  7963                           	callstack 0
  7964  002690                     _retPeriod:
  7965                           	callstack 0
  7966  002690  FFFF               	dw	65535	; assembler added errata NOP
  7967  002692                     
  7968                           ;timer.c: 102:     return pwmPeriod;
  7969  002692  C0C6  F001         	movff	_pwmPeriod,?_retPeriod
  7970  002696  C0C7  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  7971  00269A  0012               	return		;funcret
  7972  00269C  FFFF               	dw	65535	; errata NOP
  7973  00269E                     __end_of_retPeriod:
  7974                           	callstack 0
  7975                           
  7976 ;; *************** function _increaseStep *****************
  7977 ;; Defined at:
  7978 ;;		line 85 in file "timer.c"
  7979 ;; Parameters:    Size  Location     Type
  7980 ;;		None
  7981 ;; Auto vars:     Size  Location     Type
  7982 ;;		None
  7983 ;; Return value:  Size  Location     Type
  7984 ;;                  1    wreg      void 
  7985 ;; Registers used:
  7986 ;;		status,2, status,0
  7987 ;; Tracked objects:
  7988 ;;		On entry : 0/0
  7989 ;;		On exit  : 0/0
  7990 ;;		Unchanged: 0/0
  7991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7992 ;;      Params:         0       0       0       0       0       0       0
  7993 ;;      Locals:         0       0       0       0       0       0       0
  7994 ;;      Temps:          0       0       0       0       0       0       0
  7995 ;;      Totals:         0       0       0       0       0       0       0
  7996 ;;Total ram usage:        0 bytes
  7997 ;; Hardware stack levels used:    1
  7998 ;; This function calls:
  7999 ;;		Nothing
  8000 ;; This function is called by:
  8001 ;;		_isr
  8002 ;; This function uses a non-reentrant model
  8003 ;;
  8004                           
  8005                           	psect	text50
  8006  002750                     __ptext50:
  8007                           	callstack 0
  8008  002750                     _increaseStep:
  8009                           	callstack 0
  8010  002750  FFFF               	dw	65535	; assembler added errata NOP
  8011  002752                     
  8012                           ;timer.c: 86:     pwmStep++;
  8013  002752  2A58               	incf	_pwmStep^0,f,c	;volatile
  8014  002754  0012               	return		;funcret
  8015  002756  FFFF               	dw	65535	; errata NOP
  8016  002758                     __end_of_increaseStep:
  8017                           	callstack 0
  8018                           
  8019 ;; *************** function _fatalError *****************
  8020 ;; Defined at:
  8021 ;;		line 64 in file "usart.c"
  8022 ;; Parameters:    Size  Location     Type
  8023 ;;		None
  8024 ;; Auto vars:     Size  Location     Type
  8025 ;;		None
  8026 ;; Return value:  Size  Location     Type
  8027 ;;                  1    wreg      unsigned char 
  8028 ;; Registers used:
  8029 ;;		wreg, status,2
  8030 ;; Tracked objects:
  8031 ;;		On entry : 0/0
  8032 ;;		On exit  : 0/0
  8033 ;;		Unchanged: 0/0
  8034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8035 ;;      Params:         0       0       0       0       0       0       0
  8036 ;;      Locals:         0       0       0       0       0       0       0
  8037 ;;      Temps:          0       0       0       0       0       0       0
  8038 ;;      Totals:         0       0       0       0       0       0       0
  8039 ;;Total ram usage:        0 bytes
  8040 ;; Hardware stack levels used:    1
  8041 ;; This function calls:
  8042 ;;		Nothing
  8043 ;; This function is called by:
  8044 ;;		_isr
  8045 ;; This function uses a non-reentrant model
  8046 ;;
  8047                           
  8048                           	psect	text51
  8049  002758                     __ptext51:
  8050                           	callstack 0
  8051  002758                     _fatalError:
  8052                           	callstack 0
  8053  002758  FFFF               	dw	65535	; assembler added errata NOP
  8054  00275A                     
  8055                           ;usart.c: 65:     return _fatalError;
  8056  00275A  505C               	movf	__fatalError^0,w,c
  8057  00275C  0012               	return		;funcret
  8058  00275E  FFFF               	dw	65535	; errata NOP
  8059  002760                     __end_of_fatalError:
  8060                           	callstack 0
  8061                           
  8062 ;; *************** function _abortAll *****************
  8063 ;; Defined at:
  8064 ;;		line 836 in file "motors.c"
  8065 ;; Parameters:    Size  Location     Type
  8066 ;;		None
  8067 ;; Auto vars:     Size  Location     Type
  8068 ;;		None
  8069 ;; Return value:  Size  Location     Type
  8070 ;;                  1    wreg      void 
  8071 ;; Registers used:
  8072 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8073 ;; Tracked objects:
  8074 ;;		On entry : 0/0
  8075 ;;		On exit  : 0/0
  8076 ;;		Unchanged: 0/0
  8077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8078 ;;      Params:         0       0       0       0       0       0       0
  8079 ;;      Locals:         0       0       0       0       0       0       0
  8080 ;;      Temps:          0       0       0       0       0       0       0
  8081 ;;      Totals:         0       0       0       0       0       0       0
  8082 ;;Total ram usage:        0 bytes
  8083 ;; Hardware stack levels used:    1
  8084 ;; Hardware stack levels required when called:    2
  8085 ;; This function calls:
  8086 ;;		i2_printError
  8087 ;; This function is called by:
  8088 ;;		_isr
  8089 ;; This function uses a non-reentrant model
  8090 ;;
  8091                           
  8092                           	psect	text52
  8093  002638                     __ptext52:
  8094                           	callstack 0
  8095  002638                     _abortAll:
  8096                           	callstack 0
  8097  002638  FFFF               	dw	65535	; assembler added errata NOP
  8098  00263A                     
  8099                           ;motors.c: 844:     printError(7);
  8100  00263A  0E07               	movlw	7
  8101  00263C  EC97  F00E         	call	i2_printError
  8102  002640                     i2l251:
  8103  002640  FFFF               	dw	65535	; assembler added errata NOP
  8104  002642  EF20  F013         	goto	i2l251
  8105  002646  0012               	return		;funcret
  8106  002648  FFFF               	dw	65535	; errata NOP
  8107  00264A                     __end_of_abortAll:
  8108                           	callstack 0
  8109                           
  8110 ;; *************** function i2_printError *****************
  8111 ;; Defined at:
  8112 ;;		line 114 in file "usart.c"
  8113 ;; Parameters:    Size  Location     Type
  8114 ;;  errCode         1    wreg     unsigned char 
  8115 ;; Auto vars:     Size  Location     Type
  8116 ;;  errCode         1    6[COMRAM] unsigned char 
  8117 ;; Return value:  Size  Location     Type
  8118 ;;                  1    wreg      void 
  8119 ;; Registers used:
  8120 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8121 ;; Tracked objects:
  8122 ;;		On entry : 0/0
  8123 ;;		On exit  : 0/0
  8124 ;;		Unchanged: 0/0
  8125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8126 ;;      Params:         0       0       0       0       0       0       0
  8127 ;;      Locals:         1       0       0       0       0       0       0
  8128 ;;      Temps:          2       0       0       0       0       0       0
  8129 ;;      Totals:         3       0       0       0       0       0       0
  8130 ;;Total ram usage:        3 bytes
  8131 ;; Hardware stack levels used:    1
  8132 ;; Hardware stack levels required when called:    1
  8133 ;; This function calls:
  8134 ;;		i2_uartTx
  8135 ;; This function is called by:
  8136 ;;		_abortAll
  8137 ;;		i2_storeData
  8138 ;; This function uses a non-reentrant model
  8139 ;;
  8140                           
  8141                           	psect	text53
  8142  001D2E                     __ptext53:
  8143                           	callstack 0
  8144  001D2E                     i2_printError:
  8145                           	callstack 0
  8146  001D2E  FFFF               	dw	65535	; assembler added errata NOP
  8147                           
  8148                           ;incstack = 0
  8149                           ;i2printError@errCode stored from wreg
  8150  001D30  6E07               	movwf	i2printError@errCode^0,c
  8151  001D32                     
  8152                           ;usart.c: 116:     switch(errCode){
  8153  001D32  EFF3  F00E         	goto	i2l3101
  8154  001D36                     i2l3083:
  8155  001D36  FFFF               	dw	65535	; assembler added errata NOP
  8156                           
  8157                           ;usart.c: 118:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  8158  001D38  0E90               	movlw	low _errString_Feed
  8159  001D3A  6E01               	movwf	i2uartTx@ptr^0,c
  8160  001D3C  0E00               	movlw	high _errString_Feed
  8161  001D3E  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8162  001D40  0E1E               	movlw	30
  8163  001D42  6E03               	movwf	i2uartTx@length^0,c
  8164  001D44  EC29  F012         	call	i2_uartTx	;wreg free
  8165                           
  8166                           ;usart.c: 119:             break;
  8167  001D48  EF22  F00F         	goto	i2l563
  8168  001D4C                     i2l3085:
  8169  001D4C  FFFF               	dw	65535	; assembler added errata NOP
  8170                           
  8171                           ;usart.c: 121:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  8172  001D4E  0E5E               	movlw	low _errString_ZEND
  8173  001D50  6E01               	movwf	i2uartTx@ptr^0,c
  8174  001D52  0E01               	movlw	high _errString_ZEND
  8175  001D54  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8176  001D56  0E29               	movlw	41
  8177  001D58  6E03               	movwf	i2uartTx@length^0,c
  8178  001D5A  EC29  F012         	call	i2_uartTx	;wreg free
  8179                           
  8180                           ;usart.c: 122:             break;
  8181  001D5E  EF22  F00F         	goto	i2l563
  8182  001D62                     i2l3087:
  8183  001D62  FFFF               	dw	65535	; assembler added errata NOP
  8184                           
  8185                           ;usart.c: 124:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  8186  001D64  0E87               	movlw	low _errString_Reset
  8187  001D66  6E01               	movwf	i2uartTx@ptr^0,c
  8188  001D68  0E01               	movlw	high _errString_Reset
  8189  001D6A  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8190  001D6C  0E28               	movlw	40
  8191  001D6E  6E03               	movwf	i2uartTx@length^0,c
  8192  001D70  EC29  F012         	call	i2_uartTx	;wreg free
  8193                           
  8194                           ;usart.c: 125:             break;
  8195  001D74  EF22  F00F         	goto	i2l563
  8196  001D78                     i2l3089:
  8197  001D78  FFFF               	dw	65535	; assembler added errata NOP
  8198                           
  8199                           ;usart.c: 127:             uartTx(&errString_Point[0], sizeof(errString_Point));
  8200  001D7A  0E35               	movlw	low _errString_Point
  8201  001D7C  6E01               	movwf	i2uartTx@ptr^0,c
  8202  001D7E  0E01               	movlw	high _errString_Point
  8203  001D80  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8204  001D82  0E29               	movlw	41
  8205  001D84  6E03               	movwf	i2uartTx@length^0,c
  8206  001D86  EC29  F012         	call	i2_uartTx	;wreg free
  8207                           
  8208                           ;usart.c: 128:             break;
  8209  001D8A  EF22  F00F         	goto	i2l563
  8210  001D8E                     i2l3091:
  8211  001D8E  FFFF               	dw	65535	; assembler added errata NOP
  8212                           
  8213                           ;usart.c: 130:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  8214  001D90  0ED6               	movlw	low _errString_Bound
  8215  001D92  6E01               	movwf	i2uartTx@ptr^0,c
  8216  001D94  0E01               	movlw	high _errString_Bound
  8217  001D96  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8218  001D98  0E21               	movlw	33
  8219  001D9A  6E03               	movwf	i2uartTx@length^0,c
  8220  001D9C  EC29  F012         	call	i2_uartTx	;wreg free
  8221                           
  8222                           ;usart.c: 131:             break;
  8223  001DA0  EF22  F00F         	goto	i2l563
  8224  001DA4                     i2l3093:
  8225  001DA4  FFFF               	dw	65535	; assembler added errata NOP
  8226                           
  8227                           ;usart.c: 133:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  8228  001DA6  0E00               	movlw	low _errString_PointZ
  8229  001DA8  6E01               	movwf	i2uartTx@ptr^0,c
  8230  001DAA  0E01               	movlw	high _errString_PointZ
  8231  001DAC  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8232  001DAE  0E35               	movlw	53
  8233  001DB0  6E03               	movwf	i2uartTx@length^0,c
  8234  001DB2  EC29  F012         	call	i2_uartTx	;wreg free
  8235                           
  8236                           ;usart.c: 134:             break;
  8237  001DB6  EF22  F00F         	goto	i2l563
  8238  001DBA                     i2l3095:
  8239  001DBA  FFFF               	dw	65535	; assembler added errata NOP
  8240                           
  8241                           ;usart.c: 136:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  8242  001DBC  0EAF               	movlw	low _errString_Fatal
  8243  001DBE  6E01               	movwf	i2uartTx@ptr^0,c
  8244  001DC0  0E01               	movlw	high _errString_Fatal
  8245  001DC2  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8246  001DC4  0E27               	movlw	39
  8247  001DC6  6E03               	movwf	i2uartTx@length^0,c
  8248  001DC8  EC29  F012         	call	i2_uartTx	;wreg free
  8249                           
  8250                           ;usart.c: 137:             break;
  8251  001DCC  EF22  F00F         	goto	i2l563
  8252  001DD0                     i2l3097:
  8253  001DD0  FFFF               	dw	65535	; assembler added errata NOP
  8254                           
  8255                           ;usart.c: 139:             uartTx(&errString_Command[0], sizeof(errString_Command));
  8256  001DD2  0EAE               	movlw	low _errString_Command
  8257  001DD4  6E01               	movwf	i2uartTx@ptr^0,c
  8258  001DD6  0E00               	movlw	high _errString_Command
  8259  001DD8  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8260  001DDA  0E18               	movlw	24
  8261  001DDC  6E03               	movwf	i2uartTx@length^0,c
  8262  001DDE  EC29  F012         	call	i2_uartTx	;wreg free
  8263                           
  8264                           ;usart.c: 140:             break;
  8265  001DE2  EF22  F00F         	goto	i2l563
  8266  001DE6                     i2l3101:
  8267  001DE6  FFFF               	dw	65535	; assembler added errata NOP
  8268  001DE8  5007               	movf	i2printError@errCode^0,w,c
  8269  001DEA  6E05               	movwf	??i2_printError^0,c
  8270  001DEC  6A06               	clrf	(??i2_printError+1)^0,c
  8271                           
  8272                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8273                           ; Switch size 1, requested type "simple"
  8274                           ; Number of cases is 1, Range of values is 0 to 0
  8275                           ; switch strategies available:
  8276                           ; Name         Instructions Cycles
  8277                           ; simple_byte            4     3 (average)
  8278                           ;	Chosen strategy is simple_byte
  8279  001DEE  5006               	movf	(??i2_printError+1)^0,w,c
  8280  001DF0  0A00               	xorlw	0	; case 0
  8281  001DF2  B4D8               	btfsc	status,2,c
  8282  001DF4  EFFE  F00E         	goto	i2l4837
  8283  001DF8  EF22  F00F         	goto	i2l563
  8284  001DFC                     i2l4837:
  8285  001DFC  FFFF               	dw	65535	; assembler added errata NOP
  8286                           
  8287                           ; Switch size 1, requested type "simple"
  8288                           ; Number of cases is 8, Range of values is 1 to 8
  8289                           ; switch strategies available:
  8290                           ; Name         Instructions Cycles
  8291                           ; simple_byte           25    13 (average)
  8292                           ;	Chosen strategy is simple_byte
  8293  001DFE  5005               	movf	??i2_printError^0,w,c
  8294  001E00  0A01               	xorlw	1	; case 1
  8295  001E02  B4D8               	btfsc	status,2,c
  8296  001E04  EF9B  F00E         	goto	i2l3083
  8297  001E08  0A03               	xorlw	3	; case 2
  8298  001E0A  B4D8               	btfsc	status,2,c
  8299  001E0C  EFA6  F00E         	goto	i2l3085
  8300  001E10  0A01               	xorlw	1	; case 3
  8301  001E12  B4D8               	btfsc	status,2,c
  8302  001E14  EFB1  F00E         	goto	i2l3087
  8303  001E18  0A07               	xorlw	7	; case 4
  8304  001E1A  B4D8               	btfsc	status,2,c
  8305  001E1C  EFBC  F00E         	goto	i2l3089
  8306  001E20  0A01               	xorlw	1	; case 5
  8307  001E22  B4D8               	btfsc	status,2,c
  8308  001E24  EFC7  F00E         	goto	i2l3091
  8309  001E28  0A03               	xorlw	3	; case 6
  8310  001E2A  B4D8               	btfsc	status,2,c
  8311  001E2C  EFD2  F00E         	goto	i2l3093
  8312  001E30  0A01               	xorlw	1	; case 7
  8313  001E32  B4D8               	btfsc	status,2,c
  8314  001E34  EFDD  F00E         	goto	i2l3095
  8315  001E38  0A0F               	xorlw	15	; case 8
  8316  001E3A  B4D8               	btfsc	status,2,c
  8317  001E3C  EFE8  F00E         	goto	i2l3097
  8318  001E40  EF22  F00F         	goto	i2l563
  8319  001E44                     i2l563:
  8320  001E44  FFFF               	dw	65535	; assembler added errata NOP
  8321  001E46  0012               	return		;funcret
  8322  001E48  FFFF               	dw	65535	; errata NOP
  8323  001E4A                     __end_ofi2_printError:
  8324                           	callstack 0
  8325                           
  8326 ;; *************** function i2_uartTx *****************
  8327 ;; Defined at:
  8328 ;;		line 151 in file "usart.c"
  8329 ;; Parameters:    Size  Location     Type
  8330 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  8331 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  8332 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  8333 ;;  length          1    2[COMRAM] unsigned char 
  8334 ;; Auto vars:     Size  Location     Type
  8335 ;;  i               1    3[COMRAM] unsigned char 
  8336 ;; Return value:  Size  Location     Type
  8337 ;;                  1    wreg      void 
  8338 ;; Registers used:
  8339 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8340 ;; Tracked objects:
  8341 ;;		On entry : 0/0
  8342 ;;		On exit  : 0/0
  8343 ;;		Unchanged: 0/0
  8344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8345 ;;      Params:         3       0       0       0       0       0       0
  8346 ;;      Locals:         1       0       0       0       0       0       0
  8347 ;;      Temps:          0       0       0       0       0       0       0
  8348 ;;      Totals:         4       0       0       0       0       0       0
  8349 ;;Total ram usage:        4 bytes
  8350 ;; Hardware stack levels used:    1
  8351 ;; This function calls:
  8352 ;;		Nothing
  8353 ;; This function is called by:
  8354 ;;		i2_printError
  8355 ;; This function uses a non-reentrant model
  8356 ;;
  8357                           
  8358                           	psect	text54
  8359  002452                     __ptext54:
  8360                           	callstack 0
  8361  002452                     i2_uartTx:
  8362                           	callstack 0
  8363  002452  FFFF               	dw	65535	; assembler added errata NOP
  8364  002454                     
  8365                           ;usart.c: 151: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 152: {;usa
      +                          rt.c: 154:     for(char i = 1; i < length; i++){
  8366  002454  0E01               	movlw	1
  8367  002456  6E04               	movwf	i2uartTx@i^0,c
  8368  002458  EF42  F012         	goto	i2l2785
  8369  00245C                     i2l2781:
  8370  00245C  FFFF               	dw	65535	; assembler added errata NOP
  8371                           
  8372                           ;usart.c: 156:         TXREG = *ptr;
  8373  00245E  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  8374  002462  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  8375  002466  50DF               	movf	indf2,w,c
  8376  002468  6EAD               	movwf	173,c	;volatile
  8377  00246A                     i2l568:
  8378  00246A  FFFF               	dw	65535	; assembler added errata NOP
  8379  00246C  A2AC               	btfss	172,1,c	;volatile
  8380  00246E  EF3B  F012         	goto	i2u194_41
  8381  002472  EF3E  F012         	goto	i2u194_40
  8382  002476                     i2u194_41:
  8383  002476  FFFF               	dw	65535	; assembler added errata NOP
  8384  002478  EF35  F012         	goto	i2l568
  8385  00247C                     i2u194_40:
  8386  00247C  FFFF               	dw	65535	; assembler added errata NOP
  8387  00247E                     
  8388                           ;usart.c: 160:         ptr++;
  8389  00247E  4A01               	infsnz	i2uartTx@ptr^0,f,c
  8390  002480  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  8391                           
  8392                           ;usart.c: 161:     }
  8393  002482  2A04               	incf	i2uartTx@i^0,f,c
  8394  002484                     i2l2785:
  8395  002484  FFFF               	dw	65535	; assembler added errata NOP
  8396  002486  5003               	movf	i2uartTx@length^0,w,c
  8397  002488  5C04               	subwf	i2uartTx@i^0,w,c
  8398  00248A  A0D8               	btfss	status,0,c
  8399  00248C  EF4A  F012         	goto	i2u195_41
  8400  002490  EF4D  F012         	goto	i2u195_40
  8401  002494                     i2u195_41:
  8402  002494  FFFF               	dw	65535	; assembler added errata NOP
  8403  002496  EF2E  F012         	goto	i2l2781
  8404  00249A                     i2u195_40:
  8405  00249A  FFFF               	dw	65535	; assembler added errata NOP
  8406  00249C  0012               	return		;funcret
  8407  00249E  FFFF               	dw	65535	; errata NOP
  8408  0024A0                     __end_ofi2_uartTx:
  8409                           	callstack 0
  8410                           
  8411                           	psect	rparam
  8412  0000                     
  8413                           	psect	temp
  8414  00006E                     btemp:
  8415                           	callstack 0
  8416  00006E                     	ds	1
  8417  0000                     int$flags	set	btemp
  8418  0000                     wtemp8	set	btemp+1
  8419  0000                     ttemp5	set	btemp+1
  8420  0000                     ttemp6	set	btemp+4
  8421  0000                     ttemp7	set	btemp+8
  8422                           
  8423                           	psect	idloc
  8424                           
  8425                           ;Config register IDLOC0 @ 0x200000
  8426                           ;	unspecified, using default values
  8427  200000                     	org	2097152
  8428  200000  FF                 	db	255
  8429                           
  8430                           ;Config register IDLOC1 @ 0x200001
  8431                           ;	unspecified, using default values
  8432  200001                     	org	2097153
  8433  200001  FF                 	db	255
  8434                           
  8435                           ;Config register IDLOC2 @ 0x200002
  8436                           ;	unspecified, using default values
  8437  200002                     	org	2097154
  8438  200002  FF                 	db	255
  8439                           
  8440                           ;Config register IDLOC3 @ 0x200003
  8441                           ;	unspecified, using default values
  8442  200003                     	org	2097155
  8443  200003  FF                 	db	255
  8444                           
  8445                           ;Config register IDLOC4 @ 0x200004
  8446                           ;	unspecified, using default values
  8447  200004                     	org	2097156
  8448  200004  FF                 	db	255
  8449                           
  8450                           ;Config register IDLOC5 @ 0x200005
  8451                           ;	unspecified, using default values
  8452  200005                     	org	2097157
  8453  200005  FF                 	db	255
  8454                           
  8455                           ;Config register IDLOC6 @ 0x200006
  8456                           ;	unspecified, using default values
  8457  200006                     	org	2097158
  8458  200006  FF                 	db	255
  8459                           
  8460                           ;Config register IDLOC7 @ 0x200007
  8461                           ;	unspecified, using default values
  8462  200007                     	org	2097159
  8463  200007  FF                 	db	255
  8464                           
  8465                           	psect	config
  8466                           
  8467                           ; Padding undefined space
  8468  300000                     	org	3145728
  8469  300000  FF                 	db	255
  8470                           
  8471                           ;Config register CONFIG1H @ 0x300001
  8472                           ;	Oscillator Selection bits
  8473                           ;	OSC = XT, XT oscillator
  8474                           ;	Oscillator System Clock Switch Enable bit
  8475                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  8476  300001                     	org	3145729
  8477  300001  21                 	db	33
  8478                           
  8479                           ;Config register CONFIG2L @ 0x300002
  8480                           ;	Power-up Timer Enable bit
  8481                           ;	PWRT = OFF, PWRT disabled
  8482                           ;	Brown-out Reset Enable bit
  8483                           ;	BOR = OFF, Brown-out Reset disabled
  8484                           ;	Brown-out Reset Voltage bits
  8485                           ;	BORV = 20, VBOR set to 2.0V
  8486  300002                     	org	3145730
  8487  300002  0D                 	db	13
  8488                           
  8489                           ;Config register CONFIG2H @ 0x300003
  8490                           ;	Watchdog Timer Enable bit
  8491                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8492                           ;	Watchdog Timer Postscale Select bits
  8493                           ;	WDTPS = 128, 1:128
  8494  300003                     	org	3145731
  8495  300003  0E                 	db	14
  8496                           
  8497                           ; Padding undefined space
  8498  300004                     	org	3145732
  8499  300004  FF                 	db	255
  8500                           
  8501                           ;Config register CONFIG3H @ 0x300005
  8502                           ;	CCP2 Mux bit
  8503                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  8504  300005                     	org	3145733
  8505  300005  00                 	db	0
  8506                           
  8507                           ;Config register CONFIG4L @ 0x300006
  8508                           ;	Stack Full/Underflow Reset Enable bit
  8509                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  8510                           ;	Low Voltage ICSP Enable bit
  8511                           ;	LVP = OFF, Low Voltage ICSP disabled
  8512                           ;	Background Debugger Enable bit
  8513                           ;	DEBUG = 0x1, unprogrammed default
  8514  300006                     	org	3145734
  8515  300006  80                 	db	128
  8516                           
  8517                           ; Padding undefined space
  8518  300007                     	org	3145735
  8519  300007  FF                 	db	255
  8520                           
  8521                           ;Config register CONFIG5L @ 0x300008
  8522                           ;	Code Protection bit
  8523                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  8524                           ;	Code Protection bit
  8525                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  8526                           ;	Code Protection bit
  8527                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  8528                           ;	Code Protection bit
  8529                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  8530  300008                     	org	3145736
  8531  300008  0F                 	db	15
  8532                           
  8533                           ;Config register CONFIG5H @ 0x300009
  8534                           ;	Boot Block Code Protection bit
  8535                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  8536                           ;	Data EEPROM Code Protection bit
  8537                           ;	CPD = OFF, Data EEPROM not code protected
  8538  300009                     	org	3145737
  8539  300009  C0                 	db	192
  8540                           
  8541                           ;Config register CONFIG6L @ 0x30000A
  8542                           ;	Write Protection bit
  8543                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  8544                           ;	Write Protection bit
  8545                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  8546                           ;	Write Protection bit
  8547                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  8548                           ;	Write Protection bit
  8549                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  8550  30000A                     	org	3145738
  8551  30000A  0F                 	db	15
  8552                           
  8553                           ;Config register CONFIG6H @ 0x30000B
  8554                           ;	Configuration Register Write Protection bit
  8555                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  8556                           ;	Boot Block Write Protection bit
  8557                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  8558                           ;	Data EEPROM Write Protection bit
  8559                           ;	WRTD = OFF, Data EEPROM not write protected
  8560  30000B                     	org	3145739
  8561  30000B  E0                 	db	224
  8562                           
  8563                           ;Config register CONFIG7L @ 0x30000C
  8564                           ;	Table Read Protection bit
  8565                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  8566                           ;	Table Read Protection bit
  8567                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  8568                           ;	Table Read Protection bit
  8569                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  8570                           ;	Table Read Protection bit
  8571                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  8572  30000C                     	org	3145740
  8573  30000C  0F                 	db	15
  8574                           
  8575                           ;Config register CONFIG7H @ 0x30000D
  8576                           ;	Boot Block Table Read Protection bit
  8577                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  8578  30000D                     	org	3145741
  8579  30000D  40                 	db	64
  8580                           tosu	equ	0xFFF
  8581                           tosh	equ	0xFFE
  8582                           tosl	equ	0xFFD
  8583                           stkptr	equ	0xFFC
  8584                           pclatu	equ	0xFFB
  8585                           pclath	equ	0xFFA
  8586                           pcl	equ	0xFF9
  8587                           tblptru	equ	0xFF8
  8588                           tblptrh	equ	0xFF7
  8589                           tblptrl	equ	0xFF6
  8590                           tablat	equ	0xFF5
  8591                           prodh	equ	0xFF4
  8592                           prodl	equ	0xFF3
  8593                           indf0	equ	0xFEF
  8594                           postinc0	equ	0xFEE
  8595                           postdec0	equ	0xFED
  8596                           preinc0	equ	0xFEC
  8597                           plusw0	equ	0xFEB
  8598                           fsr0h	equ	0xFEA
  8599                           fsr0l	equ	0xFE9
  8600                           wreg	equ	0xFE8
  8601                           indf1	equ	0xFE7
  8602                           postinc1	equ	0xFE6
  8603                           postdec1	equ	0xFE5
  8604                           preinc1	equ	0xFE4
  8605                           plusw1	equ	0xFE3
  8606                           fsr1h	equ	0xFE2
  8607                           fsr1l	equ	0xFE1
  8608                           bsr	equ	0xFE0
  8609                           indf2	equ	0xFDF
  8610                           postinc2	equ	0xFDE
  8611                           postdec2	equ	0xFDD
  8612                           preinc2	equ	0xFDC
  8613                           plusw2	equ	0xFDB
  8614                           fsr2h	equ	0xFDA
  8615                           fsr2l	equ	0xFD9
  8616                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    16
    Data        328
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     66     109
    BANK0           128     17     119
    BANK1           256      0     247
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 53
		 -> errString_Command(BANK0[24]), errString_Fatal(BANK1[39]), errString_PointZ(BANK1[53]), errString_Bound(BANK1[33]), 
		 -> errString_Point(BANK1[41]), errString_Reset(BANK1[40]), errString_ZEND(BANK1[41]), errString_Feed(BANK0[30]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 


Critical Paths under _main in COMRAM

    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_stepMade
    _touchTherm->_stepMade
    _touchObject->_stepMade
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _releaseObj->_stepMade
    _pickObject->_stepMade
    _moveToPoint->_stepMade
    _liftArm->_stepMade

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    _abortAll->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _main->_executeData
    _executeData->_rotateObj

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   10597
                                             12 BANK0      5     5      0
                           _clearTM0
                        _executeData
                     _getNewSequence
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                   _resetNewSequence
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim1Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim1Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    1604
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0     238
                                             20 COMRAM     3     3      0
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (1) _resetNewSequence                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0    6513
                                              7 BANK0      5     5      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0      34
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                         _resetTherm
                         _resetTouch
                        _returnTherm
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0      34
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                         _resetTherm
                         _resetTouch
                        _returnTouch
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            7     7      0    3203
                                              0 BANK0      7     7      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
                          _resetStep
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0      34
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0      34
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         14     6      8    2546
                                             20 COMRAM    14     6      8
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0      34
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _resetTM2_Temp                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resetTM0_Temp                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0    1059
                                             10 COMRAM     7     7      0
                           _abortAll
                         _fatalError
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _abortAll                                             0     0      0     507
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _executeData
     _getData
     _liftArm
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _stepMade
     _moveToPoint
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _stepCounter
       _stepMade
     _pickObject
       _resetTM2_Temp
       _stepMade
     _releaseObj
       _resetTM2_Temp
       _stepMade
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _resetStep
       _resetTM2_Temp
       _stepMade
     _touchObject
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _resetTherm
       _resetTouch
       _returnTouch
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _resetTherm
       _resetTouch
       _returnTherm
       _startADC
       _stepMade
       _stopADC
   _getNewSequence
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetNewSequence
   _resetPosition
     _resetStep
     _resetTM0_Temp
     _resetTM2_Temp
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim1Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _abortAll
     i2_printError
       i2_uartTx
   _fatalError
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F7       7       96.5%
BITBANK0            80      0       0       4        0.0%
BANK0               80     11      77       5       93.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     42      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1DB      15        0.0%
DATA                 0      0     1DB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Sat May 01 07:26:24 2021

                                        ___fldiv@aexp 0038  
                                        ___fldiv@bexp 0037  
                               __end_of_interruptInit 2522  
                                        ___fldiv@sign 0030  
                                                  l90 25A4  
                                                  l84 267E  
                                                 l210 1F54  
                                                 l211 1F58  
                                                 l131 179E  
                                                 l132 190E  
                                                 l222 231A  
                                                 l214 22E8  
                                                 l151 192E  
                                                 l217 22FA  
                                                 l161 0D64  
                                                 l241 2574  
                                                 l154 0A7C  
                                                 l242 257E  
                                                 l234 2134  
                                                 l331 1980  
                                                 l156 0ABC  
                                                 l236 2164  
                                                 l332 197A  
                                                 l157 0AC4  
                                                 l333 197C  
                                                 l247 2544  
                                                 l248 254E  
                                                 l178 0D22  
                                                 l523 2670  
                                                 l187 0D84  
                                                 l460 2512  
                                                 l532 2734  
                                                 l604 12E4  
                                                 l453 26FC  
                                                 l381 26DE  
                                                 l461 251E  
                                                 l541 26D4  
                                                 l198 2066  
                                                 l390 26A6  
                                                 l358 1078  
                                                 l526 2662  
                                                 l622 2654  
                                                 l631 26BE  
                                                 l199 206A  
                                                 l456 2610  
                                                 l384 2744  
                                                 l393 26E8  
                                                 l529 272C  
                                                 l625 2622  
                                                 l634 2706  
                                                 l378 25CA  
                                                 l538 273C  
                                                 l546 2400  
                                                 l387 26B2  
                                                 l459 24FC  
                                                 l563 1D28  
                                                 l619 2634  
                                                 l628 25FC  
                                                 l396 26F2  
                                                 l572 244E  
                                                 l549 25E8  
                                                 l568 241C  
                                                 l597 11D6  
                                                 l943 1C0C  
                                                 _isr 0008  
                                         _touchObject 1F5C  
                                                 prod 000FF3  
                                                 wreg 000FE8  
                                        ___fltol@exp1 0042  
                                         main@errCode 00F4  
                                                l1301 15B6  
                                                l1230 0856  
                                                l1304 1748  
                                                l1241 093C  
                                                l1233 0810  
                                                l1242 0924  
                                                l1315 16CE  
                                                l1228 0A3E  
                                                l1308 1662  
                                                l1239 08AC  
                                                l4001 169A  
                                                l4011 16EA  
                                                l4003 16A8  
                                                l4101 0D3C  
                                                l4013 170E  
                                                l4005 16BC  
                                                l4111 0D82  
                                                l4103 0D52  
                                                l4031 0AB0  
                                                l4023 0A46  
                                                l4015 1722  
                                                l4007 16E2  
                                                l4105 0D6A  
                                                l4041 0AFA  
                                                l4033 0AC0  
                                                l4025 0A70  
                                                l4017 1734  
                                                l4009 16E4  
                                                l4121 1F72  
                                                l4201 1F26  
                                                l4107 0D72  
                                                l4051 0B62  
                                                l4043 0B06  
                                                l4035 0ACE  
                                                l4027 0A80  
                                                l4019 1736  
                                                l4131 1FC8  
                                                l4123 1F82  
                                                l4115 1F5E  
                                                l4211 1F4C  
                                                l4203 1F2A  
                                                l4221 2278  
                                                l4109 0D7A  
                                                l4053 0B7E  
                                                l4045 0B1C  
                                                l4037 0ADC  
                                                l4029 0A84  
                                                l4141 201A  
                                                l4133 1FCC  
                                                l4125 1F88  
                                                l4117 1F62  
                                                l4205 1F32  
                                                l4301 1C9E  
                                                l4231 22BC  
                                                l4223 227E  
                                                l4215 2262  
                                                l4063 0BE0  
                                                l4055 0B82  
                                                l4071 0C14  
                                                l4047 0B42  
                                                l4039 0AE2  
                                                l4151 2038  
                                                l4135 1FDE  
                                                l4143 202A  
                                                l4127 1F9E  
                                                l4119 1F70  
                                                l4207 1F36  
                                                l4303 1CB4  
                                                l4313 2668  
                                                l4241 2318  
                                                l4233 22CE  
                                                l4225 2294  
                                                l4217 2266  
                                                l4081 0C8C  
                                                l4073 0C2A  
                                                l4065 0BF6  
                                                l4049 0B4C  
                                                l4057 0B98  
                                                l4161 205E  
                                                l4153 203C  
                                                l4145 2030  
                                                l4137 1FFA  
                                                l4129 1FAA  
                                                l4209 1F3A  
                                                l4321 258C  
                                                l4235 2300  
                                                l4227 22A0  
                                                l4219 2272  
                                                l4091 0CEE  
                                                l4083 0C90  
                                                l4075 0C50  
                                                l4067 0C0C  
                                                l4059 0BAE  
                                                l4251 20DC  
                                                l4155 2044  
                                                l4147 2032  
                                                l4139 1FFE  
                                                l4171 1E60  
                                                l4411 25B2  
                                                l4331 259E  
                                                l4323 2590  
                                                l4403 24E8  
                                                l4307 1CCA  
                                                l4317 2676  
                                                l4237 2308  
                                                l4229 22B8  
                                                l4093 0D04  
                                                l4077 0C5A  
                                                l4085 0CA6  
                                                l4261 2118  
                                                l4253 20EE  
                                                l4245 2074  
                                                l4157 2048  
                                                l4149 2034  
                                                l4181 1EB6  
                                                l4173 1E70  
                                                l4165 1E4C  
                                                l4421 25C8  
                                                l4413 25B8  
                                                l4333 25A0  
                                                l4325 2594  
                                                l4405 24FA  
                                                l4341 1762  
                                                l4239 2310  
                                                l4095 0D1A  
                                                l4087 0CBC  
                                                l4079 0C70  
                                                l4271 2554  
                                                l4263 2136  
                                                l4255 20F2  
                                                l4247 207E  
                                                l4159 204C  
                                                l4191 1F08  
                                                l4183 1EBA  
                                                l4175 1E76  
                                                l4167 1E50  
                                                l4415 25BA  
                                                l4335 25A2  
                                                l4327 2598  
                                                l4319 2584  
                                                l4407 2510  
                                                l4351 17B2  
                                                l4343 1770  
                                                l4431 264C  
                                                l4423 25D0  
                                                l4273 2558  
                                                l4281 2528  
                                                l3801 0634  
                                                l4265 213A  
                                                l4257 210C  
                                                l4249 20CE  
                                                l4185 1ECC  
                                                l4193 1F18  
                                                l4177 1E8C  
                                                l4169 1E5E  
                                                l4521 0DE4  
                                                l4513 0D8A  
                                                l4417 25BC  
                                                l4409 25AA  
                                                l4329 259C  
                                                l4361 17FC  
                                                l4353 17C4  
                                                l4345 1776  
                                                l4337 1750  
                                                l4433 2650  
                                                l4425 25E4  
                                                l4099 0D22  
                                                l4275 2576  
                                                l4283 2546  
                                                l3803 064A  
                                                l3811 067A  
                                                l4259 2114  
                                                l4267 2140  
                                                l4195 1F1E  
                                                l4187 1EE8  
                                                l4179 1E98  
                                                l4531 0E90  
                                                l4523 0DF8  
                                                l4515 0D96  
                                                l4443 265A  
                                                l4419 25C6  
                                                l4507 26D0  
                                                l4371 1848  
                                                l4363 1810  
                                                l4355 17CE  
                                                l4347 177C  
                                                l4339 1756  
                                                l4611 23A6  
                                                l4291 1C30  
                                                l4451 1098  
                                                l4427 2628  
                                                l4435 2652  
                                                l4277 257A  
                                                l4285 254A  
                                                l3901 0952  
                                                l3821 06AE  
                                                l3813 068C  
                                                l3805 065E  
                                                l4269 215C  
                                                l4197 1F20  
                                                l4189 1EEC  
                                                l4541 0EE2  
                                                l4533 0EA0  
                                                l4525 0E32  
                                                l4517 0D9A  
                                                l4509 2732  
                                                l4381 18A2  
                                                l4373 185A  
                                                l4365 1822  
                                                l4357 17E6  
                                                l4349 1792  
                                                l4621 23EC  
                                                l4293 1C46  
                                                l4453 10A2  
                                                l4461 10EC  
                                                l4429 2630  
                                                l4437 2616  
                                                l4279 2524  
                                                l3911 09BE  
                                                l3903 095E  
                                                l3823 06C4  
                                                l3831 06F4  
                                                l3815 0694  
                                                l3807 066E  
                                                l4199 1F22  
                                                l4551 0F52  
                                                l4535 0EB4  
                                                l4527 0E42  
                                                l4519 0DD4  
                                                l4439 273A  
                                                l4391 18FC  
                                                l4383 18A6  
                                                l4375 186E  
                                                l4367 182C  
                                                l4359 17EA  
                                                l4295 1C5C  
                                                l4287 1C16  
                                                l4471 11CE  
                                                l4463 1104  
                                                l4455 10AC  
                                                l4447 1082  
                                                l4631 1940  
                                                l4623 1932  
                                                l3761 25EE  
                                                l3921 0A28  
                                                l3913 09D4  
                                                l3905 0970  
                                                l3841 0740  
                                                l3833 0706  
                                                l3825 06D8  
                                                l3817 069A  
                                                l3809 0672  
                                                l4561 0F7A  
                                                l4553 0F64  
                                                l4537 0ED6  
                                                l4529 0E56  
                                                l4545 0EEC  
                                                l4609 272A  
                                                l4393 1914  
                                                l4385 18B8  
                                                l4377 1880  
                                                l4369 1844  
                                                l4617 23AA  
                                                l4297 1C72  
                                                l4289 1C1A  
                                                l4481 122A  
                                                l4473 11E0  
                                                l4465 110C  
                                                l4449 1092  
                                                l4641 1960  
                                                l4633 1944  
                                                l4625 1932  
                                                l3771 2602  
                                                l3763 25F2  
                                                l3923 0A2E  
                                                l3915 09F4  
                                                l3907 099A  
                                                l3835 0722  
                                                l3827 06E8  
                                                l3819 06AC  
                                                l4539 0EDA  
                                                l4547 0F34  
                                                l4395 191C  
                                                l4379 188A  
                                                l4387 18D2  
                                                l4619 23EA  
                                                l4299 1C88  
                                                l4491 1298  
                                                l4483 124A  
                                                l4475 11F0  
                                                l4467 1196  
                                                l4459 10B6  
                                                l4651 19BC  
                                                l4643 1974  
                                                l4635 1948  
                                                l4627 1938  
                                                l3765 25F6  
                                                l3773 26B8  
                                                l3925 0A32  
                                                l3917 0A10  
                                                l3909 099E  
                                                l3861 07CA  
                                                l3853 077E  
                                                l3837 0732  
                                                l3845 0754  
                                                l3829 06EC  
                                                l3941 1B3E  
                                                l3933 1ADE  
                                                l3781 26AC  
                                                l4581 103E  
                                                l4557 0F6C  
                                                l4549 0F4A  
                                                l4397 1924  
                                                l4389 18E8  
                                                l4493 12A2  
                                                l4485 126A  
                                                l4477 1204  
                                                l4469 11C2  
                                                l4661 1A16  
                                                l4653 19CC  
                                                l4645 1984  
                                                l4637 194C  
                                                l4629 193C  
                                                l3759 2702  
                                                l3919 0A16  
                                                l3871 081C  
                                                l3863 07D2  
                                                l3855 079A  
                                                l3847 076A  
                                                l3839 073A  
                                                l3943 1B40  
                                                l3935 1AF8  
                                                l3775 26DA  
                                                l3783 2742  
                                                l4591 1066  
                                                l4583 1046  
                                                l4575 0FEC  
                                                l4567 0F92  
                                                l4559 0F72  
                                                l4831 0F0C  
                                                l4399 192C  
                                                l3791 2430  
                                                l4487 1282  
                                                l4479 1208  
                                                l4671 1A9C  
                                                l4663 1A3E  
                                                l4655 19CE  
                                                l4647 199E  
                                                l4639 1958  
                                                l3769 26F8  
                                                l3881 0886  
                                                l3873 0840  
                                                l3865 07E8  
                                                l3857 07AA  
                                                l3849 076A  
                                                l3945 1B50  
                                                l3777 26E4  
                                                l3785 26A0  
                                                l4593 106C  
                                                l4585 104E  
                                                l4577 1024  
                                                l4569 0FD4  
                                                l3793 2436  
                                                l4489 128E  
                                                l4497 12AE  
                                                l4825 10CC  
                                                l4681 1ACC  
                                                l4665 1A56  
                                                l4657 19EE  
                                                l4649 19AA  
                                                l4673 1AA0  
                                                l3891 08D2  
                                                l3883 088C  
                                                l3875 0842  
                                                l3867 07FC  
                                                l3859 07BA  
                                                l3795 0614  
                                                l3971 1BEA  
                                                l3955 1B82  
                                                l3947 1B54  
                                                l3939 1B0E  
                                                l3779 26EE  
                                                l4579 1036  
                                                l3787 2406  
                                                l4827 12C4  
                                                l4683 1AD0  
                                                l4675 1ABA  
                                                l4667 1A90  
                                                l4659 1A0C  
                                                l3893 08D6  
                                                l3885 0898  
                                                l3877 0852  
                                                l3869 080E  
                                                l3797 0620  
                                                l3973 1BFA  
                                                l3965 1BB2  
                                                l3957 1B8E  
                                                l3949 1B66  
                                                l3981 1580  
                                                l3789 240E  
                                                l4829 1CE0  
                                                l4677 1AC2  
                                                l4669 1A98  
                                                l3895 08E8  
                                                l3887 08AA  
                                                l3879 086C  
                                                l3799 0632  
                                                l3967 1BC0  
                                                l3959 1B98  
                                                l3991 1602  
                                                l3983 15C8  
                                                l4679 1AC8  
                                                l3897 091A  
                                                l3889 08BE  
                                                l3969 1BD4  
                                                l3993 1610  
                                                l3985 15E4  
                                                l3977 155A  
                                                l3995 1648  
                                                l3979 156E  
                                                ?_isr 0001  
                                                l3997 164C  
                                                l3989 15F8  
                                                l3999 1658  
                                                u3000 06C2  
                                                u3001 06BC  
                                                u3010 06D6  
                                                u3011 06D0  
                                                u3100 08D0  
                                                u3020 0720  
                                                u3101 08CA  
                                                u3021 071A  
                                                _LATA 000F89  
                                                u3110 08E6  
                                                u3030 0768  
                                                _LATB 000F8A  
                                                u3111 08E0  
                                                u3031 0762  
                                                _LATC 000F8B  
                                                u3120 0918  
                                                u3040 07E6  
                                                u3200 1B32  
                                                u4000 1268  
                                                _LATD 000F8C  
                                                u3121 0912  
                                                u3041 07E0  
                                                u4001 1262  
                                                u3130 0936  
                                                u3050 080C  
                                                u3210 1B64  
                                                u4010 1282  
                                                u3131 0930  
                                                u3051 0806  
                                                u3211 1B5E  
                                                u4011 127C  
                                                u3140 0950  
                                                u3060 083E  
                                                u3220 1B7C  
                                                u3300 1694  
                                                u4020 0F48  
                                                u4100 199C  
                                                u3141 094A  
                                                u3061 0838  
                                                u3221 1B76  
                                                u3205 1B26  
                                                u3301 168E  
                                                u4021 0F42  
                                                u4101 1996  
                                                u3150 096E  
                                                u3070 086A  
                                                u3230 1BAC  
                                                u3310 16BA  
                                                u4030 0F64  
                                                u4110 19EC  
                                                u3151 0968  
                                                u3071 0864  
                                                u3231 1BA6  
                                                u3311 16B4  
                                                u4031 0F5E  
                                                u4111 19E6  
                                                u3400 0B40  
                                                u3160 09BC  
                                                u3080 0884  
                                                u3240 1BD4  
                                                u3320 16CE  
                                                u4040 0F8C  
                                                u4120 1A0C  
                                                u3401 0B3A  
                                                u3161 09B6  
                                                u3081 087E  
                                                u3241 1BCE  
                                                u3321 16C8  
                                                u4041 0F86  
                                                u4121 1A06  
                                                u3410 0B60  
                                                u3170 09F2  
                                                u3090 08A8  
                                                u3250 1BE8  
                                                u3330 16E0  
                                                u4050 0FE6  
                                                u4130 1A54  
                                                u3411 0B5A  
                                                u3171 09EC  
                                                u3091 08A2  
                                                u3251 1BE2  
                                                u3331 16DA  
                                                u4051 0FE0  
                                                u4131 1A4E  
                                                u3500 0C8A  
                                                u3420 0B7C  
                                                u3180 0A26  
                                                u3340 1720  
                                                u3260 156C  
                                                u4060 1034  
                                                u4140 1AB8  
                                                u3501 0C84  
                                                u3421 0B76  
                                                u3181 0A20  
                                                u3341 171A  
                                                u3261 1566  
                                                u4061 102E  
                                                u4141 1AB2  
                                                u3510 0CBA  
                                                u3430 0BAC  
                                                u3190 1AF6  
                                                u3350 1732  
                                                u3270 157E  
                                                u4070 1060  
                                                u3511 0CB4  
                                                u3431 0BA6  
                                                u3191 1AF0  
                                                u3351 172C  
                                                u3271 1578  
                                                u4071 105A  
                                                u3520 0CE8  
                                                u3440 0BDA  
                                                u3360 0A6E  
                                                u3280 15E2  
                                                u3600 1FF8  
                                                u4080 23FE  
                                                u3521 0CE2  
                                                u3441 0BD4  
                                                u3361 0A68  
                                                u3281 15DC  
                                                u3601 1FF2  
                                                u4081 23F8  
                                                u3530 0D02  
                                                u3450 0BF4  
                                                u3370 0AAE  
                                                u3290 1642  
                                                u3610 2018  
                                                u4090 1972  
                                                u3531 0CFC  
                                                u3451 0BEE  
                                                u3371 0AA8  
                                                u3291 163C  
                                                u3611 2012  
                                                u4091 196C  
                                                u3700 2292  
                                                u3540 0D18  
                                                u3460 0C0A  
                                                u3380 0AF8  
                                                u3620 202A  
                                                u3701 228C  
                                                u3541 0D12  
                                                u3461 0C04  
                                                u3381 0AF2  
                                                u3621 2024  
                                                u3710 22B6  
                                                u3550 0D3C  
                                                u3470 0C28  
                                                u3390 0B1A  
                                                u3630 205C  
                                                u3711 22B0  
                                                u3551 0D36  
                                                u3471 0C22  
                                                u3391 0B14  
                                                u3631 2056  
                                                u3720 22E8  
                                                u3560 0D50  
                                                u3480 0C4E  
                                                u3640 1E8A  
                                                u3800 17B0  
                                                u3721 22E2  
                                                u3561 0D4A  
                                                u3481 0C48  
                                                u3641 1E84  
                                                u3801 17AA  
                                                u3730 22FA  
                                                u3570 0D64  
                                                u3490 0C6E  
                                                u3650 1EB4  
                                                u3810 17C4  
                                                u3731 22F4  
                                                u3571 0D5E  
                                                u3491 0C68  
                                                u3651 1EAE  
                                                u3811 17BE  
                                                u3740 210A  
                                                u3580 1F9C  
                                                u3660 1EE6  
                                                u3900 18E6  
                                                u3820 17E4  
                                                u2940 242E  
                                                u3741 2104  
                                                u3581 1F96  
                                                u3661 1EE0  
                                                u3901 18E0  
                                                u3821 17DE  
                                                u2941 2428  
                                                u3750 2132  
                                                u3590 1FC6  
                                                u3670 1F06  
                                                u3910 18FA  
                                                u3830 180E  
                                                u2950 244C  
                                                u3751 212C  
                                                u3591 1FC0  
                                                u3671 1F00  
                                                u3911 18F4  
                                                u3831 1808  
                                                u2951 2446  
                                                u2960 0630  
                                                u3760 215A  
                                                u3680 1F18  
                                                u3920 190E  
                                                u3840 1822  
                                                u2961 062A  
                                                u3761 2154  
                                                u3681 1F12  
                                                u3921 1908  
                                                u3841 181C  
                                                u3770 2572  
                                                u2970 0648  
                                                u3690 1F4A  
                                                u3930 24F8  
                                                u3850 1842  
                                         main@newData 00F5  
                                                u3771 256C  
                                                u2971 0642  
                                                u3691 1F44  
                                                u3931 24F2  
                                                u3851 183C  
                                                u3780 2542  
                                                u2980 065C  
                                                u3940 250E  
                                                u3860 186C  
                                                u3781 253C  
                                                u2981 0656  
                                                u3941 2508  
                                                u3861 1866  
                                                u2990 06AA  
                                                u3870 1880  
                                                u3790 1790  
                                                u3950 1102  
                                                u2991 06A4  
                                                u3871 187A  
                                                u3791 178A  
                                                u3951 10FC  
                                                u3880 18A0  
                                                u3960 1194  
                                                u3881 189A  
                                                u3961 118E  
                                                u3890 18D2  
                                                u3970 11C2  
                                                u3891 18CC  
                                                u3971 11BC  
                                                u3980 1228  
                                                u3981 1222  
                                                u3990 1248  
                                                u3991 1242  
                                                i2l81 268C  
                                                i2l87 274C  
                                                _TMR0 000FD6  
                                                _TMR2 000FCC  
                                 __end_ofi2_storeData 1556  
                                                _main 1932  
                                                _maxX 006B  
                                                _maxY 0069  
                                __end_ofi2_printError 1E4A  
                                                fsr2h 000FDA  
                                                indf2 000FDF  
                                                fsr1l 000FE1  
                                                fsr2l 000FD9  
                                                btemp 006E  
                                                prodh 000FF4  
                                                prodl 000FF3  
                                                start 01A8  
                                     ___fldiv@new_exp 0031  
                                        ___param_bank 000000  
                                     ??_whatsTM0Limit 0001  
                                               ??_isr 000B  
                                        ?_executeData 0001  
                                     executeData@data 00EF  
                                       ___fltol@sign1 0041  
                                               ?_main 0001  
                                     __end_of___fldiv 0A44  
                                     __end_of___fltol 1C12  
                                               i2l402 271A  
                                               i2l251 2640  
                                               i2l252 2642  
                                               i2l604 1550  
                                               i2l535 275C  
                                               i2l640 2710  
                                               i2l563 1E44  
                                               i2l643 269A  
                                               i2l572 249C  
                                               i2l637 2754  
                                               i2l478 0190  
                                               i2l399 2724  
                                               i2l568 246A  
                                               i2l597 1442  
                                rotateObj@rotSequence 0080  
                                               _SPBRG 000FAF  
                                               _TRISA 000F92  
                                               _TRISB 000F93  
                                               _TRISC 000F94  
                                               _TRISD 000F95  
                                               _TXREG 000FAD  
                                     __end_of_getData 2674  
                                     i2storeData@data 000A  
                                     __end_of_initADC 25CE  
                                        ?_newSequence 0001  
                                     __end_of_liftArm 231E  
                                     __end_of_readSeq 2738  
                                        stepMade@temp 0014  
                                               tablat 000FF5  
                                      i2uartTx@length 0003  
                                     __end_of_stopADC 2748  
                                               ttemp5 006F  
                                               ttemp6 0072  
                                               ttemp7 0076  
                                               status 000FD8  
                                               wtemp8 006F  
                                    __end_ofi2_uartTx 24A0  
                                       ?_increaseStep 0001  
                                     __initialization 231E  
                              __size_of_initPinMotors 0026  
                                        __end_of_main 1ADC  
                            resetPosition@keepMovingX 0015  
                            resetPosition@keepMovingY 0016  
                            resetPosition@keepMovingZ 0017  
                                              ??_main 00F2  
                                       __activetblptr 000002  
                               __end_of_resetTM0_Temp 2700  
                               __end_of_resetTM2_Temp 2614  
                                         i2_storeData 12EA  
                                        ?_setThermRel 0001  
                                              _ADRESH 000FC4  
                                              _ADRESL 000FC3  
                                        ?_moveToPoint 0015  
                                              i2l3101 1DE6  
                                              i2l3111 274A  
                                              i2l3107 2684  
                                              i2l3081 1D32  
                                              i2l3091 1D8E  
                                              i2l3083 1D36  
                                              i2l3093 1DA4  
                                              i2l3085 1D4C  
                                              i2l3421 2720  
                                              i2l3095 1DBA  
                                              i2l3087 1D62  
                                              i2l3431 2752  
                                              i2l3423 2716  
                                              i2l3097 1DD0  
                                              i2l3089 1D78  
                                              i2l3425 275A  
                                              i2l3433 270C  
                                              i2l3441 130E  
                                              i2l3601 0104  
                                              i2l3451 1370  
                                              i2l3443 1318  
                                              i2l3435 12EE  
                                              i2l3611 016C  
                                              i2l3603 0118  
                                              i2l3429 2692  
                                              i2l3461 144C  
                                              i2l3453 1378  
                                              i2l3437 12FE  
                                              i2l3605 0120  
                                              i2l3613 0170  
                                              i2l3199 263A  
                                              i2l3471 14B6  
                                              i2l3463 145C  
                                              i2l3455 1402  
                                              i2l3439 1304  
                                              i2l3447 1322  
                                              i2l3615 0184  
                                              i2l3607 0146  
                                              i2l3481 150E  
                                              i2l3473 14D6  
                                              i2l3465 1470  
                                              i2l3457 142E  
                                              i2l3449 1358  
                                              i2l3617 018A  
                                              i2l3609 0152  
                                              i2l3561 0030  
                                              i2l3475 14EE  
                                              i2l3467 1474  
                                              i2l3459 143A  
                                              i2l3563 0032  
                                              i2l3571 0058  
                                              i2l2781 245C  
                                              i2l3477 14FA  
                                              i2l3469 1496  
                                              i2l3485 151A  
                                              i2l3581 009E  
                                              i2l3573 006C  
                                              i2l3565 004E  
                                              i2l3557 001C  
                                              i2l2783 247E  
                                              i2l3479 1504  
                                              i2l3591 00D0  
                                              i2l3583 00A0  
                                              i2l3575 006E  
                                              i2l3567 0050  
                                              i2l3559 002E  
                                              i2l2785 2484  
                                              i2l3593 00E4  
                                              i2l3585 00A6  
                                              i2l3577 0086  
                                              i2l3569 0054  
                                              i2l2779 2454  
                                              i2l3595 00F6  
                                              i2l3587 00C6  
                                              i2l3579 008A  
                                              i2l3597 00FA  
                                              i2l3589 00CE  
                                              i2l3599 00FE  
                                              i2l4833 1338  
                                              i2l4835 1530  
                                              i2l4837 1DFC  
                                              _RCREG1 000FAE  
                                        ?_setTouchRel 0001  
                                    __end_of_abortAll 264A  
                                    __end_of___xxtofl 174E  
                                    __end_of_clearTM0 2682  
                                    _errString_PointZ 0100  
                                      ??_increaseStep 0001  
                                    __end_of_maxFeedX 0611  
                                    __end_of_maxFeedY 0610  
                                           ??___fldiv 0028  
                                           ??___fltol 003D  
                                    __end_of_tim0Init 2638  
                                    __end_of_tim1Init 2658  
                                    __end_of_tim2Init 2626  
                                              clear_0 2384  
                                              clear_1 2390  
                                           ??_getData 0014  
                                              _uartTx 2404  
                                           ??_initADC 0012  
                                           ??_liftArm 0015  
                                           ??_readSeq 0012  
                                        __pdataCOMRAM 0063  
                               __end_of_resetPosition 1932  
                                        __mediumconst 0000  
                                              tblptrh 000FF7  
                                              tblptrl 000FF6  
                                              tblptru 000FF8  
                                        ?_returnTherm 0012  
                                    __end_of_startADC 26E2  
                                    __end_of_stepMade 2600  
                                       _initPinMotors 2582  
                                        ?_returnTouch 0012  
                                           ??_stopADC 0012  
                               __size_ofi2_printError 011C  
                                    __end_of_writeTM0 2690  
                           __size_of_resetNewSequence 000A  
                                        ___xxtofl@arg 001C  
                                        ___xxtofl@exp 001B  
                                        ___xxtofl@val 0012  
                                          __accesstop 0080  
                             __end_of__initialization 2396  
                                        _dataSequence 00CA  
                                       ___rparam_used 000001  
                                          ___fltol@f1 0039  
                                        ?_stepCounter 0012  
                                         i2uartTx@ptr 0001  
                                      __pcstackCOMRAM 0001  
                                        __newSequence 005B  
                                        __pidataBANK0 24A0  
                                        __pidataBANK1 2168  
                                __size_of_executeData 02F6  
                                        i2_printError 1D2E  
                                        ?_touchObject 0001  
                                      _errString_ZEND 015E  
                                      _errString_Feed 0090  
                                      ?_initPinMotors 0001  
                                           ?i2_uartTx 0001  
                                          __pbssBANK0 00C6  
                                __size_of_newSequence 0008  
                                          _feeder1Pos 060D  
                                          _feeder2Pos 060B  
                                          _feeder3Pos 0609  
                             __size_of_getNewSequence 000E  
                                          _fatalError 2758  
                                  __size_of_reduceSeq 0008  
                                  __size_of_retPeriod 000E  
                                      _touch_pressure 0607  
                                  __size_of_shiftData 0060  
                                  __size_of_resetStep 000A  
                                             _ADC_res 004F  
                                             ?_uartTx 0012  
                                           ?_abortAll 0001  
                                           ?___xxtofl 0012  
                                __end_of_increaseStep 2758  
                                           ?_clearTM0 0001  
                                          ??i2_uartTx 0004  
                                  __size_of_rotateObj 00FA  
                                   _errString_Command 00AE  
                                  __size_of_usartInit 001E  
                              __size_of_interruptInit 003C  
                                __size_of_setThermRel 000A  
                                  __size_of_storeData 026C  
                                           ?_tim0Init 0001  
                                           ?_tim1Init 0001  
                                           ?_tim2Init 0012  
                                __size_of_moveToPoint 0344  
                                storeData@receivedMex 0043  
                                     _newSequenceData 00DE  
                                __size_of_setTouchRel 000A  
                                             __Hparam 0000  
                                             __Lparam 0000  
                              __end_of_touch_pressure 0609  
                                             ___fldiv 0612  
                                           ?_startADC 0001  
                                           ?_stepMade 0012  
                                             ___fltol 1ADC  
                                        __psmallconst 0600  
                                             __pcinit 231E  
                               __end_of_whatsTM0Limit 2750  
                                             _getData 2666  
                                             __ramtop 0600  
                                           ?_writeTM0 0001  
                                          _pickObject 2552  
                                             __ptext0 1932  
                                             __ptext1 25CE  
                                             __ptext2 2614  
                                             __ptext3 264A  
                                             __ptext4 2626  
                                             __ptext5 107E  
                                             __ptext6 1C12  
                                             __ptext7 2404  
                                             __ptext8 23A4  
                                             __ptext9 174E  
                                     __size_of_uartTx 004E  
                                           _T0CONbits 000FD5  
                                             _initADC 25A8  
                                           _T1CONbits 000FCD  
                                     ??_initPinMotors 0012  
                                             _liftArm 2260  
                                           _T2CONbits 000FCA  
                                          ??_abortAll 0008  
                                             _readSeq 2730  
                                        __size_of_isr 01A0  
                                          ??___xxtofl 0016  
                                        ?i2_storeData 0001  
                                          ??_clearTM0 0012  
                                          _motCounter 0063  
                                             _pwmStep 0058  
                                             _stopADC 2740  
                                   __end_of_reduceSeq 2730  
                                   __end_of_retPeriod 269E  
                                          _releaseObj 2522  
                                __size_of_returnTherm 000C  
                                end_of_initialization 2396  
                                __size_of_returnTouch 000C  
                                    _resetNewSequence 26CE  
                                    rotateObj@totStep 00E7  
                                   __end_of_shiftData 2404  
                                             isr@temp 0011  
                                   __end_of_resetStep 270A  
                                          ??_tim0Init 0012  
                                       __Lmediumconst 0000  
                                          ??_tim1Init 0012  
                                          ??_tim2Init 0014  
                                    storeData@command 0059  
                                    storeData@counter 005A  
                                          _resetTherm 26EC  
                                          _resetTouch 26E2  
                                             uartTx@i 0015  
                                         ?_fatalError 0001  
                                           _RCSTAbits 000FAB  
                                             postdec1 000FE5  
                                   __end_of_rotateObj 2168  
                                             postinc0 000FEE  
                                             postinc1 000FE6  
                                             postinc2 000FDE  
                                          ??_startADC 0012  
                                          ??_stepMade 0014  
                                __size_of_stepCounter 000C  
                                       _interruptInit 24E6  
                                   __end_of_usartInit 25EC  
                                   __end_of_storeData 12EA  
                          __end_ofrotateObj@stepAngle 0605  
                                          ??_writeTM0 0001  
                                           _PORTDbits 000F83  
                                          _printError 1C12  
                                           _PORTEbits 000F84  
                                 i2printError@errCode 0007  
                                          _toggleStep 270A  
                                       ___xxtofl@sign 001A  
                                           _TRISCbits 000F94  
                                           _TRISDbits 000F95  
                                           _TRISEbits 000F96  
                                         ___fldiv@grs 0033  
                                         ___fldiv@rem 002C  
                                __size_of_touchObject 0112  
                                          _stepToggle 0057  
                                        _completeStep 005E  
                                          _touchTherm 1E4A  
                                           _TXSTAbits 000FAC  
                                      _getNewSequence 2658  
                              __size_of_resetTM0_Temp 000A  
                              __size_of_resetTM2_Temp 0014  
                                      ?_interruptInit 0001  
                                       __pidataCOMRAM 26C2  
                               __size_of_increaseStep 0008  
                                         ?_pickObject 0001  
                                         __fatalError 005C  
                                      __end_of_uartTx 2452  
                                       moveToPoint@x1 0015  
                                       moveToPoint@x2 0019  
                                       moveToPoint@y1 0017  
                                       moveToPoint@y2 001B  
                                 start_initialization 231E  
                                           i2uartTx@i 0004  
                                         __end_of_isr 01A8  
                                 __size_of_fatalError 0008  
                                         ?_releaseObj 0001  
                                   __size_ofi2_uartTx 004E  
                              __end_of_getNewSequence 2666  
                                     _errString_Fatal 01AF  
                                     _errString_Bound 01D6  
                                         ?_resetTherm 0001  
                                     _errString_Reset 0187  
                                         ?_resetTouch 0001  
                                     _errString_Point 0135  
                                        _increaseStep 2750  
                              __size_of_resetPosition 01E4  
                                       ??_executeData 00ED  
                                         __pdataBANK0 0080  
                                         __pdataBANK1 0100  
                                         _dataCounter 005D  
                                            ??_uartTx 0015  
                              moveToPoint@keepMovingX 0021  
                              moveToPoint@keepMovingY 0022  
                                         ?_printError 0001  
                                           ___fldiv@a 0024  
                                           ___fldiv@b 0020  
                                      _therm_pressure 0605  
                                         ?_toggleStep 0001  
                                         __pbssCOMRAM 0043  
                                       _resetTM0_Temp 26F6  
                                       _resetTM2_Temp 2600  
                                       __pcstackBANK0 00E6  
                                       ??_newSequence 0012  
                                   __size_of_abortAll 0012  
                                   __size_of___xxtofl 01F8  
                                __size_ofi2_storeData 026C  
                                   __size_of_clearTM0 000E  
                                     ?_getNewSequence 0012  
                                         ?_touchTherm 0001  
                                 __size_of_pickObject 0030  
                                  executeData@errCode 00F1  
                                   __size_of_tim0Init 0012  
                                   __size_of_tim1Init 000E  
                                   __size_of_tim2Init 0012  
                                     ??_interruptInit 0012  
                                           __pintcode 0008  
                                            ?___fldiv 0020  
                                            ?___fltol 0039  
                            __end_of_resetNewSequence 26D8  
                                 __size_of_releaseObj 0030  
                                       storeData@data 001B  
                                            ?_getData 0012  
                                   __size_of_startADC 000A  
                                   __size_of_stepMade 0014  
                              __end_of_therm_pressure 0607  
                                            ?_initADC 0001  
                                         __smallconst 0600  
                                            ?_liftArm 0001  
                                            ?_readSeq 0001  
                                      ?_resetTM0_Temp 0001  
                                   __size_of_writeTM0 000E  
                                      ?_resetTM2_Temp 0001  
                                 __end_of_executeData 107E  
                                          shiftData@i 0014  
                                 __size_of_resetTherm 000A  
                                           _newFeeder 0051  
                                       _resetPosition 174E  
                                 __size_of_resetTouch 000A  
                                       ??_setThermRel 0001  
                                            ?_stopADC 0001  
                                       ??_moveToPoint 001D  
                                       ??_setTouchRel 0001  
                                 __end_of_newSequence 2740  
                                           _reduceSeq 2728  
                                            _LATAbits 000F89  
                                            _LATBbits 000F8A  
                                           _retPeriod 2690  
                                            _LATCbits 000F8B  
                                            _LATDbits 000F8C  
                                 __size_of_printError 011C  
                                            _IPR1bits 000F9F  
                                            _PIE1bits 000F9D  
                                           _shiftData 23A4  
                                           _resetStep 2700  
                                            i2u270_40 1400  
                                            i2u270_41 13FA  
                                            i2u271_40 142E  
                                            i2u271_41 1428  
                                            i2u272_40 1494  
                                            i2u272_41 148E  
                                            i2u273_40 14B4  
                                            i2u273_41 14AE  
                                            _PIR1bits 000F9E  
                                            i2u194_40 247C  
                                            i2u274_40 14D4  
                                            i2u290_40 0116  
                                            i2u282_40 002C  
                                            i2u194_41 2476  
                                            i2u274_41 14CE  
                                            i2u290_41 0110  
                                            i2u282_41 0026  
                                            i2u195_40 249A  
                                            i2u275_40 14EE  
                                            i2u291_40 0144  
                                            i2u283_40 004C  
                                            i2u195_41 2494  
                                            i2u275_41 14E8  
                                            i2u291_41 013E  
                                            i2u283_41 0046  
                                            i2u292_40 016A  
                                            i2u284_40 006A  
                                            i2u292_41 0164  
                                            i2u284_41 0064  
                                            i2u269_40 136E  
                                            i2u293_40 0182  
                                            i2u285_40 0084  
                                            i2u269_41 1368  
                                            i2u293_41 017C  
                                            i2u285_41 007E  
                                            i2u286_40 009C  
                                            i2u286_41 0096  
                                            i2u287_40 00C4  
                                            i2u287_41 00BE  
                                            i2u288_40 00E2  
                                            i2u288_41 00DC  
                                            i2u289_40 00F4  
                                            i2u289_41 00EE  
                                 __size_of_toggleStep 000A  
                                        ??_fatalError 0001  
                                           _posVector 004C  
                                            _RCONbits 000FD0  
                                           _therm_rel 0060  
                                           _pwmPeriod 00C6  
                                           _rotateObj 206E  
                                          _ADCON0bits 000FC2  
                                          _ADCON1bits 000FC1  
                                 __size_of_touchTherm 0112  
                                           _usartInit 25CE  
                                           _touch_rel 0061  
                                  __end_of_feeder1Pos 060F  
                                  __end_of_feeder2Pos 060D  
                                  __end_of_feeder3Pos 060B  
                                           _storeData 107E  
                                      ?_resetPosition 0001  
                               __end_of_initPinMotors 25A8  
                                       ??_returnTherm 0014  
                                       ??_returnTouch 0014  
                                            i2_uartTx 2452  
                                           copy_data0 2332  
                                           copy_data1 2352  
                                           copy_data2 2372  
                                  __end_of_fatalError 2760  
                                  rotateObj@stepAngle 0601  
                                          ?_reduceSeq 0001  
                                          ?_retPeriod 0001  
                                          rotateObj@c 00EB  
                                          rotateObj@i 00E9  
                              __size_of_whatsTM0Limit 0008  
                                 __end_of_setThermRel 2728  
                                 __end_of_moveToPoint 0D88  
                                   printError@errCode 0018  
                                          ?_shiftData 0001  
                                       ??_stepCounter 0014  
                                            __Hrparam 0000  
                                          ?_resetStep 0001  
                                 __end_of_setTouchRel 271E  
                                            __Lrparam 0000  
                                    __size_of___fldiv 0432  
                                    __size_of___fltol 0136  
                                         _executeData 0D88  
                                        ??_pickObject 0015  
                                          ?_rotateObj 0001  
                            moveToPoint@MOT1Direction 001F  
                                     ??_resetTM0_Temp 0012  
                                       ?i2_printError 0001  
                                     ??_resetTM2_Temp 0012  
                                    __size_of_getData 000E  
                            moveToPoint@MOT2Direction 0020  
                                       ??_touchObject 0015  
                                            _abortAll 2638  
                                          ?_usartInit 0001  
                                    __size_of_initADC 0026  
                                            ___xxtofl 1556  
                                    __size_of_liftArm 00BE  
                                          ?_storeData 0001  
                                            _clearTM0 2674  
                                    __size_of_readSeq 0008  
                                  storeData@mexLength 006D  
                                            _tm0Count 005F  
                                            _tm0Error 0055  
                                            _tm0Limit 0062  
                                         _newSequence 2738  
                                            __ptext10 26CE  
                                            __ptext11 2728  
                                            __ptext20 269E  
                                            __ptext12 2730  
                                            __ptext21 1F5C  
                                            __ptext13 2738  
                                            __ptext30 0612  
                                            __ptext22 2740  
                                            __ptext14 24E6  
                                            __ptext31 2522  
                                            __ptext23 26D8  
                                            __ptext15 2582  
                                            __ptext40 2666  
                                            __ptext32 2552  
                                            __ptext24 26AA  
                                            __ptext16 25A8  
                                            __ptext41 2674  
                                            __ptext33 0A44  
                                            __ptext25 26E2  
                                            __ptext17 2658  
                                            __ptext50 2750  
                                            __ptext34 26B6  
                                            __ptext26 26EC  
                                            __ptext18 0D88  
                                            __ptext51 2758  
                                            __ptext43 12EA  
                                            __ptext35 2260  
                                            __ptext27 206E  
                                            __ptext19 1E4A  
                                            __ptext52 2638  
                                            __ptext44 2682  
                                            __ptext36 25EC  
                                            __ptext28 1556  
                                            __ptext53 1D2E  
                                            __ptext45 2748  
                                            __ptext37 2600  
                                            __ptext29 1ADC  
                                            __ptext54 2452  
                                            __ptext46 270A  
                                            __ptext38 26F6  
                                            __ptext47 2714  
                                            __ptext39 2700  
                                            __ptext48 271E  
                                            __ptext49 2690  
                                        ??_releaseObj 0015  
                                    __size_of_stopADC 0008  
                                            _maxFeedX 0610  
                                            _maxFeedY 060F  
                                 __end_of_returnTherm 26AA  
                                 __end_of_returnTouch 26B6  
                                            _tim0Init 2626  
                                            _tim1Init 264A  
                                            _tim2Init 2614  
                                       __size_of_main 01AA  
                                  __end_of_pickObject 2582  
                                        ??_resetTherm 0012  
                                        ??_resetTouch 0012  
                                           uartTx@ptr 0012  
                                            _rotAngle 0053  
                                            int$flags 006E  
                                            _startADC 26D8  
                                            _stepMade 25EC  
                                            _stepMot1 008C  
                                            _stepMot2 0088  
                                            _stepMot3 0084  
                                 __end_of_stepCounter 26C2  
                                   rotateObj@rotAngle 00E6  
                                      ??i2_printError 0005  
                                  __end_of_releaseObj 2552  
                                            _writeTM0 2682  
                                        ??_printError 0016  
                                       _whatsTM0Limit 2748  
                                     ??_resetPosition 0015  
                                  tim2Init@_pwmPeriod 0012  
                                          _INTCONbits 000FF2  
                                        ??_toggleStep 0001  
                                    ??_getNewSequence 0014  
                                  __end_of_resetTherm 26F6  
                                  __end_of_resetTouch 26EC  
                                         _setThermRel 271E  
                                        uartTx@length 0014  
                                        _single_cycle 00C8  
                                         _moveToPoint 0A44  
                                 __end_of_touchObject 206E  
                                            intlevel2 2760  
                                        ??_touchTherm 0015  
                                         _setTouchRel 2714  
                                         ??_reduceSeq 0012  
                                         ??_retPeriod 0003  
                                          _RCSTA1bits 000FAB  
                                  __end_of_printError 1D2E  
                                         ??_shiftData 0012  
                                         ??_resetStep 0012  
                                  __end_of_toggleStep 2714  
                                   ?_resetNewSequence 0001  
                                      ?_whatsTM0Limit 0001  
                                         ??_rotateObj 0043  
                                  ??_resetNewSequence 0012  
                                  __end_of_touchTherm 1F5C  
                                         ??_usartInit 0012  
                                       ??i2_storeData 0008  
                                         ??_storeData 0019  
                                         _returnTherm 269E  
                                         _returnTouch 26AA  
                                         _stepCounter 26B6  
