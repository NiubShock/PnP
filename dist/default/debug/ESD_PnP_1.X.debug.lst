

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Sat Feb 06 11:54:29 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    74                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    75                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    76                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    77                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    78  0000                     
    79                           ; Version 2.20
    80                           ; Generated 12/02/2020 GMT
    81                           ; 
    82                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC18F452 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     
   114                           	psect	idataCOMRAM
   115  002588                     __pidataCOMRAM:
   116                           	callstack 0
   117                           
   118                           ;initializer for _maxY
   119  002588  03E8               	dw	1000
   120                           
   121                           ;initializer for _maxX
   122  00258A  03E8               	dw	1000
   123                           
   124                           ;initializer for storeData@mexLength
   125  00258C  05                 	db	5
   126                           
   127                           	psect	idataBANK0
   128  00227C                     __pidataBANK0:
   129                           	callstack 0
   130                           
   131                           ;initializer for rotateObj@rotSequence
   132  00227C  09                 	db	9
   133  00227D  03                 	db	3
   134  00227E  06                 	db	6
   135  00227F  0C                 	db	12
   136                           
   137                           ;initializer for _errString_Bound
   138  002280  45                 	db	69
   139  002281  72                 	db	114
   140  002282  72                 	db	114
   141  002283  6F                 	db	111
   142  002284  72                 	db	114
   143  002285  2C                 	db	44
   144  002286  20                 	db	32
   145  002287  70                 	db	112
   146  002288  6F                 	db	111
   147  002289  69                 	db	105
   148  00228A  6E                 	db	110
   149  00228B  74                 	db	116
   150  00228C  20                 	db	32
   151  00228D  6F                 	db	111
   152  00228E  75                 	db	117
   153  00228F  74                 	db	116
   154  002290  73                 	db	115
   155  002291  69                 	db	105
   156  002292  64                 	db	100
   157  002293  65                 	db	101
   158  002294  20                 	db	32
   159  002295  62                 	db	98
   160  002296  6F                 	db	111
   161  002297  75                 	db	117
   162  002298  6E                 	db	110
   163  002299  64                 	db	100
   164  00229A  61                 	db	97
   165  00229B  72                 	db	114
   166  00229C  69                 	db	105
   167  00229D  65                 	db	101
   168  00229E  73                 	db	115
   169  00229F  00                 	db	0
   170                           
   171                           ;initializer for _errString_Feed
   172  0022A0  45                 	db	69
   173  0022A1  72                 	db	114
   174  0022A2  72                 	db	114
   175  0022A3  6F                 	db	111
   176  0022A4  72                 	db	114
   177  0022A5  2C                 	db	44
   178  0022A6  20                 	db	32
   179  0022A7  66                 	db	102
   180  0022A8  65                 	db	101
   181  0022A9  65                 	db	101
   182  0022AA  64                 	db	100
   183  0022AB  20                 	db	32
   184  0022AC  6C                 	db	108
   185  0022AD  69                 	db	105
   186  0022AE  6E                 	db	110
   187  0022AF  65                 	db	101
   188  0022B0  20                 	db	32
   189  0022B1  6E                 	db	110
   190  0022B2  6F                 	db	111
   191  0022B3  74                 	db	116
   192  0022B4  20                 	db	32
   193  0022B5  64                 	db	100
   194  0022B6  65                 	db	101
   195  0022B7  66                 	db	102
   196  0022B8  69                 	db	105
   197  0022B9  6E                 	db	110
   198  0022BA  65                 	db	101
   199  0022BB  64                 	db	100
   200  0022BC  00                 	db	0
   201                           
   202                           ;initializer for _errString_Command
   203  0022BD  43                 	db	67
   204  0022BE  6F                 	db	111
   205  0022BF  6D                 	db	109
   206  0022C0  6D                 	db	109
   207  0022C1  61                 	db	97
   208  0022C2  6E                 	db	110
   209  0022C3  64                 	db	100
   210  0022C4  20                 	db	32
   211  0022C5  6E                 	db	110
   212  0022C6  6F                 	db	111
   213  0022C7  74                 	db	116
   214  0022C8  20                 	db	32
   215  0022C9  72                 	db	114
   216  0022CA  65                 	db	101
   217  0022CB  63                 	db	99
   218  0022CC  6F                 	db	111
   219  0022CD  67                 	db	103
   220  0022CE  6E                 	db	110
   221  0022CF  69                 	db	105
   222  0022D0  7A                 	db	122
   223  0022D1  65                 	db	101
   224  0022D2  64                 	db	100
   225  0022D3  00                 	db	0
   226                           
   227                           	psect	idataBANK1
   228  001EB8                     __pidataBANK1:
   229                           	callstack 0
   230                           
   231                           ;initializer for _errString_PointZ
   232  001EB8  45                 	db	69
   233  001EB9  72                 	db	114
   234  001EBA  72                 	db	114
   235  001EBB  6F                 	db	111
   236  001EBC  72                 	db	114
   237  001EBD  2C                 	db	44
   238  001EBE  20                 	db	32
   239  001EBF  74                 	db	116
   240  001EC0  69                 	db	105
   241  001EC1  6D                 	db	109
   242  001EC2  65                 	db	101
   243  001EC3  20                 	db	32
   244  001EC4  65                 	db	101
   245  001EC5  78                 	db	120
   246  001EC6  63                 	db	99
   247  001EC7  65                 	db	101
   248  001EC8  65                 	db	101
   249  001EC9  64                 	db	100
   250  001ECA  65                 	db	101
   251  001ECB  64                 	db	100
   252  001ECC  20                 	db	32
   253  001ECD  74                 	db	116
   254  001ECE  6F                 	db	111
   255  001ECF  20                 	db	32
   256  001ED0  72                 	db	114
   257  001ED1  65                 	db	101
   258  001ED2  61                 	db	97
   259  001ED3  63                 	db	99
   260  001ED4  68                 	db	104
   261  001ED5  20                 	db	32
   262  001ED6  74                 	db	116
   263  001ED7  68                 	db	104
   264  001ED8  65                 	db	101
   265  001ED9  20                 	db	32
   266  001EDA  65                 	db	101
   267  001EDB  6E                 	db	110
   268  001EDC  64                 	db	100
   269  001EDD  20                 	db	32
   270  001EDE  6F                 	db	111
   271  001EDF  66                 	db	102
   272  001EE0  20                 	db	32
   273  001EE1  74                 	db	116
   274  001EE2  68                 	db	104
   275  001EE3  65                 	db	101
   276  001EE4  20                 	db	32
   277  001EE5  5A                 	db	90
   278  001EE6  20                 	db	32
   279  001EE7  41                 	db	65
   280  001EE8  78                 	db	120
   281  001EE9  69                 	db	105
   282  001EEA  73                 	db	115
   283  001EEB  00                 	db	0
   284                           
   285                           ;initializer for _errString_Point
   286  001EEC  45                 	db	69
   287  001EED  72                 	db	114
   288  001EEE  72                 	db	114
   289  001EEF  6F                 	db	111
   290  001EF0  72                 	db	114
   291  001EF1  2C                 	db	44
   292  001EF2  20                 	db	32
   293  001EF3  74                 	db	116
   294  001EF4  69                 	db	105
   295  001EF5  6D                 	db	109
   296  001EF6  65                 	db	101
   297  001EF7  20                 	db	32
   298  001EF8  65                 	db	101
   299  001EF9  78                 	db	120
   300  001EFA  63                 	db	99
   301  001EFB  65                 	db	101
   302  001EFC  65                 	db	101
   303  001EFD  64                 	db	100
   304  001EFE  65                 	db	101
   305  001EFF  64                 	db	100
   306  001F00  20                 	db	32
   307  001F01  74                 	db	116
   308  001F02  6F                 	db	111
   309  001F03  20                 	db	32
   310  001F04  72                 	db	114
   311  001F05  65                 	db	101
   312  001F06  61                 	db	97
   313  001F07  63                 	db	99
   314  001F08  68                 	db	104
   315  001F09  20                 	db	32
   316  001F0A  74                 	db	116
   317  001F0B  68                 	db	104
   318  001F0C  65                 	db	101
   319  001F0D  20                 	db	32
   320  001F0E  70                 	db	112
   321  001F0F  6F                 	db	111
   322  001F10  69                 	db	105
   323  001F11  6E                 	db	110
   324  001F12  74                 	db	116
   325  001F13  00                 	db	0
   326                           
   327                           ;initializer for _errString_ZEND
   328  001F14  45                 	db	69
   329  001F15  72                 	db	114
   330  001F16  72                 	db	114
   331  001F17  6F                 	db	111
   332  001F18  72                 	db	114
   333  001F19  2C                 	db	44
   334  001F1A  20                 	db	32
   335  001F1B  6E                 	db	110
   336  001F1C  6F                 	db	111
   337  001F1D  20                 	db	32
   338  001F1E  6F                 	db	111
   339  001F1F  62                 	db	98
   340  001F20  6A                 	db	106
   341  001F21  65                 	db	101
   342  001F22  63                 	db	99
   343  001F23  74                 	db	116
   344  001F24  20                 	db	32
   345  001F25  72                 	db	114
   346  001F26  65                 	db	101
   347  001F27  6C                 	db	108
   348  001F28  65                 	db	101
   349  001F29  76                 	db	118
   350  001F2A  61                 	db	97
   351  001F2B  74                 	db	116
   352  001F2C  65                 	db	101
   353  001F2D  64                 	db	100
   354  001F2E  20                 	db	32
   355  001F2F  61                 	db	97
   356  001F30  6C                 	db	108
   357  001F31  6F                 	db	111
   358  001F32  6E                 	db	110
   359  001F33  67                 	db	103
   360  001F34  20                 	db	32
   361  001F35  5A                 	db	90
   362  001F36  20                 	db	32
   363  001F37  41                 	db	65
   364  001F38  78                 	db	120
   365  001F39  69                 	db	105
   366  001F3A  73                 	db	115
   367  001F3B  00                 	db	0
   368                           
   369                           ;initializer for _errString_Reset
   370  001F3C  45                 	db	69
   371  001F3D  72                 	db	114
   372  001F3E  72                 	db	114
   373  001F3F  6F                 	db	111
   374  001F40  72                 	db	114
   375  001F41  2C                 	db	44
   376  001F42  20                 	db	32
   377  001F43  74                 	db	116
   378  001F44  69                 	db	105
   379  001F45  6D                 	db	109
   380  001F46  65                 	db	101
   381  001F47  20                 	db	32
   382  001F48  65                 	db	101
   383  001F49  78                 	db	120
   384  001F4A  63                 	db	99
   385  001F4B  65                 	db	101
   386  001F4C  65                 	db	101
   387  001F4D  64                 	db	100
   388  001F4E  65                 	db	101
   389  001F4F  64                 	db	100
   390  001F50  20                 	db	32
   391  001F51  74                 	db	116
   392  001F52  6F                 	db	111
   393  001F53  20                 	db	32
   394  001F54  72                 	db	114
   395  001F55  65                 	db	101
   396  001F56  73                 	db	115
   397  001F57  65                 	db	101
   398  001F58  74                 	db	116
   399  001F59  20                 	db	32
   400  001F5A  70                 	db	112
   401  001F5B  6F                 	db	111
   402  001F5C  73                 	db	115
   403  001F5D  69                 	db	105
   404  001F5E  74                 	db	116
   405  001F5F  69                 	db	105
   406  001F60  6F                 	db	111
   407  001F61  6E                 	db	110
   408  001F62  00                 	db	0
   409                           
   410                           ;initializer for _errString_Fatal
   411  001F63  46                 	db	70
   412  001F64  61                 	db	97
   413  001F65  74                 	db	116
   414  001F66  61                 	db	97
   415  001F67  6C                 	db	108
   416  001F68  20                 	db	32
   417  001F69  45                 	db	69
   418  001F6A  72                 	db	114
   419  001F6B  72                 	db	114
   420  001F6C  6F                 	db	111
   421  001F6D  72                 	db	114
   422  001F6E  2C                 	db	44
   423  001F6F  20                 	db	32
   424  001F70  70                 	db	112
   425  001F71  6C                 	db	108
   426  001F72  65                 	db	101
   427  001F73  61                 	db	97
   428  001F74  73                 	db	115
   429  001F75  65                 	db	101
   430  001F76  20                 	db	32
   431  001F77  72                 	db	114
   432  001F78  65                 	db	101
   433  001F79  73                 	db	115
   434  001F7A  65                 	db	101
   435  001F7B  74                 	db	116
   436  001F7C  20                 	db	32
   437  001F7D  74                 	db	116
   438  001F7E  68                 	db	104
   439  001F7F  65                 	db	101
   440  001F80  20                 	db	32
   441  001F81  64                 	db	100
   442  001F82  65                 	db	101
   443  001F83  76                 	db	118
   444  001F84  69                 	db	105
   445  001F85  63                 	db	99
   446  001F86  65                 	db	101
   447  001F87  21                 	db	33
   448  001F88  00                 	db	0
   449                           
   450                           	psect	smallconst
   451  000600                     __psmallconst:
   452                           	callstack 0
   453  000600  00                 	db	0
   454  000601  FFAC               	dw	65452
   455  000603  3DB3               	dw	15795
   456  000605                     __end_ofrotateObj@stepAngle:
   457                           	callstack 0
   458  000605  0400               	dw	1024
   459  000607                     __end_of_therm_pressure:
   460                           	callstack 0
   461  000607  0200               	dw	512
   462  000609                     __end_of_touch_pressure:
   463                           	callstack 0
   464  000609                     _feeder3Pos:
   465                           	callstack 0
   466  000609  19                 	db	25
   467  00060A  19                 	db	25
   468  00060B                     __end_of_feeder3Pos:
   469                           	callstack 0
   470  00060B                     _feeder2Pos:
   471                           	callstack 0
   472  00060B  0F                 	db	15
   473  00060C  0F                 	db	15
   474  00060D                     __end_of_feeder2Pos:
   475                           	callstack 0
   476  00060D                     _feeder1Pos:
   477                           	callstack 0
   478  00060D  05                 	db	5
   479  00060E  05                 	db	5
   480  00060F                     __end_of_feeder1Pos:
   481                           	callstack 0
   482  0000                     _TMR0	set	4054
   483  0000                     _TXREG	set	4013
   484  0000                     _SPBRG	set	4015
   485  0000                     _TXSTAbits	set	4012
   486  0000                     _TRISCbits	set	3988
   487  0000                     _RCREG1	set	4014
   488  0000                     _ADRESH	set	4036
   489  0000                     _ADRESL	set	4035
   490  0000                     _PIR1bits	set	3998
   491  0000                     _IPR1bits	set	3999
   492  0000                     _ADCON0bits	set	4034
   493  0000                     _PIE1bits	set	3997
   494  0000                     _RCONbits	set	4048
   495  0000                     _INTCONbits	set	4082
   496  0000                     _RCSTAbits	set	4011
   497  0000                     _RCSTA1bits	set	4011
   498  0000                     _LATD	set	3980
   499  0000                     _PORTDbits	set	3971
   500  0000                     _TMR2	set	4044
   501  0000                     _PORTEbits	set	3972
   502  0000                     _T0CONbits	set	4053
   503  0000                     _T2CONbits	set	4042
   504  0000                     _LATDbits	set	3980
   505  0000                     _LATCbits	set	3979
   506  0000                     _LATBbits	set	3978
   507  0000                     _LATAbits	set	3977
   508  0000                     _TRISDbits	set	3989
   509  0000                     _TRISEbits	set	3990
   510  0000                     _TRISD	set	3989
   511  0000                     _TRISC	set	3988
   512  0000                     _TRISB	set	3987
   513  0000                     _TRISA	set	3986
   514  0000                     _ADCON1bits	set	4033
   515  00060F  00                 	db	0	; dummy byte at the end
   516  0000                     
   517                           ; #config settings
   518                           
   519                           	psect	cinit
   520  00203A                     __pcinit:
   521                           	callstack 0
   522  00203A                     start_initialization:
   523                           	callstack 0
   524  00203A                     __initialization:
   525                           	callstack 0
   526                           
   527                           ; Initialize objects allocated to BANK1 (209 bytes)
   528                           ; load TBLPTR registers with __pidataBANK1
   529  00203A  0EB8               	movlw	low __pidataBANK1
   530  00203C  6EF6               	movwf	tblptrl,c
   531  00203E  0E1E               	movlw	high __pidataBANK1
   532  002040  6EF7               	movwf	tblptrh,c
   533  002042  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   534  002044  6EF8               	movwf	tblptru,c
   535  002046  EE01  F000         	lfsr	0,__pdataBANK1
   536  00204A  EE10 F0D1          	lfsr	1,209
   537  00204E                     copy_data0:
   538  00204E  0009               	tblrd		*+
   539  002050  CFF5 FFEE          	movff	tablat,postinc0
   540  002054  50E5               	movf	postdec1,w,c
   541  002056  50E1               	movf	fsr1l,w,c
   542  002058  E1FA               	bnz	copy_data0
   543                           
   544                           ; Initialize objects allocated to BANK0 (88 bytes)
   545                           ; load TBLPTR registers with __pidataBANK0
   546  00205A  0E7C               	movlw	low __pidataBANK0
   547  00205C  6EF6               	movwf	tblptrl,c
   548  00205E  0E22               	movlw	high __pidataBANK0
   549  002060  6EF7               	movwf	tblptrh,c
   550  002062  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   551  002064  6EF8               	movwf	tblptru,c
   552  002066  EE00  F080         	lfsr	0,__pdataBANK0
   553  00206A  EE10 F058          	lfsr	1,88
   554  00206E                     copy_data1:
   555  00206E  0009               	tblrd		*+
   556  002070  CFF5 FFEE          	movff	tablat,postinc0
   557  002074  50E5               	movf	postdec1,w,c
   558  002076  50E1               	movf	fsr1l,w,c
   559  002078  E1FA               	bnz	copy_data1
   560                           
   561                           ; Initialize objects allocated to COMRAM (5 bytes)
   562                           ; load TBLPTR registers with __pidataCOMRAM
   563  00207A  0E88               	movlw	low __pidataCOMRAM
   564  00207C  6EF6               	movwf	tblptrl,c
   565  00207E  0E25               	movlw	high __pidataCOMRAM
   566  002080  6EF7               	movwf	tblptrh,c
   567  002082  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   568  002084  6EF8               	movwf	tblptru,c
   569  002086  EE00  F069         	lfsr	0,__pdataCOMRAM
   570  00208A  EE10 F005          	lfsr	1,5
   571  00208E                     copy_data2:
   572  00208E  0009               	tblrd		*+
   573  002090  CFF5 FFEE          	movff	tablat,postinc0
   574  002094  50E5               	movf	postdec1,w,c
   575  002096  50E1               	movf	fsr1l,w,c
   576  002098  E1FA               	bnz	copy_data2
   577                           
   578                           ; Clear objects allocated to BANK0 (28 bytes)
   579  00209A  EE00  F0D8         	lfsr	0,__pbssBANK0
   580  00209E  0E1C               	movlw	28
   581  0020A0                     clear_0:
   582  0020A0  6AEE               	clrf	postinc0,c
   583  0020A2  06E8               	decf	wreg,f,c
   584  0020A4  E1FD               	bnz	clear_0
   585                           
   586                           ; Clear objects allocated to COMRAM (36 bytes)
   587  0020A6  EE00  F045         	lfsr	0,__pbssCOMRAM
   588  0020AA  0E24               	movlw	36
   589  0020AC                     clear_1:
   590  0020AC  6AEE               	clrf	postinc0,c
   591  0020AE  06E8               	decf	wreg,f,c
   592  0020B0  E1FD               	bnz	clear_1
   593  0020B2                     end_of_initialization:
   594                           	callstack 0
   595  0020B2                     __end_of__initialization:
   596                           	callstack 0
   597  0020B2  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   598  0020B4  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   599  0020B6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   600  0020B8  6EF8               	movwf	tblptru,c
   601  0020BA  0100               	movlb	0
   602  0020BC  EFBF  F009         	goto	_main	;jump to C main() function
   603                           
   604                           	psect	bssCOMRAM
   605  000045                     __pbssCOMRAM:
   606                           	callstack 0
   607  000045                     storeData@receivedMex:
   608                           	callstack 0
   609  000045                     	ds	9
   610  00004E                     _posVector:
   611                           	callstack 0
   612  00004E                     	ds	3
   613  000051                     isr@single_cycle:
   614                           	callstack 0
   615  000051                     	ds	2
   616  000053                     _ADC_res:
   617                           	callstack 0
   618  000053                     	ds	2
   619  000055                     _pwmPeriod:
   620                           	callstack 0
   621  000055                     	ds	2
   622  000057                     _newFeeder:
   623                           	callstack 0
   624  000057                     	ds	2
   625  000059                     _rotAngle:
   626                           	callstack 0
   627  000059                     	ds	2
   628  00005B                     _tm0Error:
   629                           	callstack 0
   630  00005B                     	ds	2
   631  00005D                     	ds	1
   632  00005E                     storeData@counter:
   633                           	callstack 0
   634  00005E                     	ds	1
   635  00005F                     __newSequence:
   636                           	callstack 0
   637  00005F                     	ds	1
   638  000060                     __fatalError:
   639                           	callstack 0
   640  000060                     	ds	1
   641  000061                     _dataCounter:
   642                           	callstack 0
   643  000061                     	ds	1
   644  000062                     isr@completeStep:
   645                           	callstack 0
   646  000062                     	ds	1
   647  000063                     isr@tm0Count:
   648                           	callstack 0
   649  000063                     	ds	1
   650  000064                     _therm_rel:
   651                           	callstack 0
   652  000064                     	ds	1
   653  000065                     _touch_rel:
   654                           	callstack 0
   655  000065                     	ds	1
   656  000066                     _stepToggle:
   657                           	callstack 0
   658  000066                     	ds	1
   659  000067                     _pwmStep:
   660                           	callstack 0
   661  000067                     	ds	1
   662  000068                     _tm0Limit:
   663                           	callstack 0
   664  000068                     	ds	1
   665                           
   666                           	psect	dataCOMRAM
   667  000069                     __pdataCOMRAM:
   668                           	callstack 0
   669  000069                     	ds	2
   670  00006B                     	ds	2
   671  00006D                     storeData@mexLength:
   672                           	callstack 0
   673  00006D                     	ds	1
   674                           
   675                           	psect	bssBANK0
   676  0000D8                     __pbssBANK0:
   677                           	callstack 0
   678  0000D8                     _dataSequence:
   679                           	callstack 0
   680  0000D8                     	ds	20
   681  0000EC                     _newSequenceData:
   682                           	callstack 0
   683  0000EC                     	ds	8
   684                           
   685                           	psect	dataBANK0
   686  000080                     __pdataBANK0:
   687                           	callstack 0
   688  000080                     rotateObj@rotSequence:
   689                           	callstack 0
   690  000080                     	ds	4
   691  000084                     _errString_Bound:
   692                           	callstack 0
   693  000084                     	ds	32
   694  0000A4                     _errString_Feed:
   695                           	callstack 0
   696  0000A4                     	ds	29
   697  0000C1                     _errString_Command:
   698                           	callstack 0
   699  0000C1                     	ds	23
   700                           
   701                           	psect	dataBANK1
   702  000100                     __pdataBANK1:
   703                           	callstack 0
   704  000100                     _errString_PointZ:
   705                           	callstack 0
   706  000100                     	ds	52
   707  000134                     _errString_Point:
   708                           	callstack 0
   709  000134                     	ds	40
   710  00015C                     _errString_ZEND:
   711                           	callstack 0
   712  00015C                     	ds	40
   713  000184                     _errString_Reset:
   714                           	callstack 0
   715  000184                     	ds	39
   716  0001AB                     _errString_Fatal:
   717                           	callstack 0
   718  0001AB                     	ds	38
   719                           
   720                           	psect	cstackBANK1
   721  0001D1                     __pcstackBANK1:
   722                           	callstack 0
   723  0001D1                     ??_main:
   724                           
   725                           ; 1 bytes @ 0x0
   726  0001D1                     	ds	2
   727  0001D3                     main@errCode:
   728                           	callstack 0
   729                           
   730                           ; 1 bytes @ 0x2
   731  0001D3                     	ds	1
   732  0001D4                     main@newData:
   733                           	callstack 0
   734                           
   735                           ; 2 bytes @ 0x3
   736  0001D4                     	ds	2
   737                           
   738                           	psect	cstackBANK0
   739  0000F4                     __pcstackBANK0:
   740                           	callstack 0
   741  0000F4                     ??_rotateObj:
   742                           
   743                           ; 1 bytes @ 0x0
   744  0000F4                     	ds	3
   745  0000F7                     rotateObj@rotAngle:
   746                           	callstack 0
   747                           
   748                           ; 1 bytes @ 0x3
   749  0000F7                     	ds	1
   750  0000F8                     rotateObj@totStep:
   751                           	callstack 0
   752                           
   753                           ; 2 bytes @ 0x4
   754  0000F8                     	ds	2
   755  0000FA                     rotateObj@i:
   756                           	callstack 0
   757                           
   758                           ; 2 bytes @ 0x6
   759  0000FA                     	ds	2
   760  0000FC                     executeData@errCode:
   761                           	callstack 0
   762                           
   763                           ; 1 bytes @ 0x8
   764  0000FC                     	ds	1
   765  0000FD                     executeData@data:
   766                           	callstack 0
   767                           
   768                           ; 2 bytes @ 0x9
   769  0000FD                     	ds	2
   770                           
   771                           	psect	cstackCOMRAM
   772  000001                     __pcstackCOMRAM:
   773                           	callstack 0
   774  000001                     ?_retPeriod:
   775                           	callstack 0
   776  000001                     i2uartTx@ptr:
   777                           	callstack 0
   778                           
   779                           ; 2 bytes @ 0x0
   780  000001                     	ds	2
   781  000003                     i2uartTx@length:
   782                           	callstack 0
   783                           
   784                           ; 1 bytes @ 0x2
   785  000003                     	ds	1
   786  000004                     i2uartTx@i:
   787                           	callstack 0
   788                           
   789                           ; 1 bytes @ 0x3
   790  000004                     	ds	1
   791  000005                     ??i2_printError:
   792                           
   793                           ; 1 bytes @ 0x4
   794  000005                     	ds	2
   795  000007                     i2printError@errCode:
   796                           	callstack 0
   797                           
   798                           ; 1 bytes @ 0x6
   799  000007                     	ds	1
   800  000008                     ??i2_storeData:
   801                           
   802                           ; 1 bytes @ 0x7
   803  000008                     	ds	2
   804  00000A                     i2storeData@data:
   805                           	callstack 0
   806                           
   807                           ; 1 bytes @ 0x9
   808  00000A                     	ds	1
   809  00000B                     ??_isr:
   810                           
   811                           ; 1 bytes @ 0xA
   812  00000B                     	ds	6
   813  000011                     isr@temp:
   814                           	callstack 0
   815                           
   816                           ; 1 bytes @ 0x10
   817  000011                     	ds	1
   818  000012                     ??_shiftData:
   819  000012                     ?_stepMade:
   820                           	callstack 0
   821  000012                     ?_stepCounter:
   822                           	callstack 0
   823  000012                     ?_returnTouch:
   824                           	callstack 0
   825  000012                     ?_returnTherm:
   826                           	callstack 0
   827  000012                     ?_getNewSequence:
   828                           	callstack 0
   829  000012                     ?_getData:
   830                           	callstack 0
   831  000012                     ?___xxtofl:
   832                           	callstack 0
   833  000012                     setStep@motor:
   834                           	callstack 0
   835  000012                     enableMotor@motor:
   836                           	callstack 0
   837  000012                     setDirection@motor:
   838                           	callstack 0
   839  000012                     setDecay@motor:
   840                           	callstack 0
   841  000012                     tim2Init@_pwmPeriod:
   842                           	callstack 0
   843  000012                     uartTx@ptr:
   844                           	callstack 0
   845  000012                     ___xxtofl@val:
   846                           	callstack 0
   847                           
   848                           ; 4 bytes @ 0x11
   849  000012                     	ds	1
   850  000013                     ??_setStep:
   851  000013                     ??_enableMotor:
   852  000013                     ??_setDirection:
   853  000013                     ??_setDecay:
   854                           
   855                           ; 1 bytes @ 0x12
   856  000013                     	ds	1
   857  000014                     stepMade@temp:
   858                           	callstack 0
   859  000014                     shiftData@i:
   860                           	callstack 0
   861  000014                     uartTx@length:
   862                           	callstack 0
   863                           
   864                           ; 1 bytes @ 0x13
   865  000014                     	ds	1
   866  000015                     setStep@step:
   867                           	callstack 0
   868  000015                     enableMotor@enable:
   869                           	callstack 0
   870  000015                     setDirection@direction:
   871                           	callstack 0
   872  000015                     setDecay@decay:
   873                           	callstack 0
   874  000015                     uartTx@i:
   875                           	callstack 0
   876                           
   877                           ; 1 bytes @ 0x14
   878  000015                     	ds	1
   879  000016                     ??_printError:
   880  000016                     ??___xxtofl:
   881  000016                     resetPosition@keepMovingX:
   882                           	callstack 0
   883  000016                     moveToPoint@x1:
   884                           	callstack 0
   885                           
   886                           ; 2 bytes @ 0x15
   887  000016                     	ds	1
   888  000017                     resetPosition@keepMovingY:
   889                           	callstack 0
   890                           
   891                           ; 1 bytes @ 0x16
   892  000017                     	ds	1
   893  000018                     resetPosition@keepMovingZ:
   894                           	callstack 0
   895  000018                     printError@errCode:
   896                           	callstack 0
   897  000018                     moveToPoint@y1:
   898                           	callstack 0
   899                           
   900                           ; 2 bytes @ 0x17
   901  000018                     	ds	1
   902  000019                     ??_storeData:
   903                           
   904                           ; 1 bytes @ 0x18
   905  000019                     	ds	1
   906  00001A                     ___xxtofl@sign:
   907                           	callstack 0
   908  00001A                     moveToPoint@x2:
   909                           	callstack 0
   910                           
   911                           ; 2 bytes @ 0x19
   912  00001A                     	ds	1
   913  00001B                     storeData@data:
   914                           	callstack 0
   915  00001B                     ___xxtofl@exp:
   916                           	callstack 0
   917                           
   918                           ; 1 bytes @ 0x1A
   919  00001B                     	ds	1
   920  00001C                     moveToPoint@y2:
   921                           	callstack 0
   922  00001C                     ___xxtofl@arg:
   923                           	callstack 0
   924                           
   925                           ; 4 bytes @ 0x1B
   926  00001C                     	ds	2
   927  00001E                     ??_moveToPoint:
   928                           
   929                           ; 1 bytes @ 0x1D
   930  00001E                     	ds	2
   931  000020                     ?___fldiv:
   932                           	callstack 0
   933  000020                     moveToPoint@keepMovingX:
   934                           	callstack 0
   935  000020                     ___fldiv@b:
   936                           	callstack 0
   937                           
   938                           ; 4 bytes @ 0x1F
   939  000020                     	ds	1
   940  000021                     moveToPoint@keepMovingY:
   941                           	callstack 0
   942                           
   943                           ; 1 bytes @ 0x20
   944  000021                     	ds	1
   945  000022                     moveToPoint@MOT1Direction:
   946                           	callstack 0
   947                           
   948                           ; 1 bytes @ 0x21
   949  000022                     	ds	1
   950  000023                     moveToPoint@MOT2Direction:
   951                           	callstack 0
   952                           
   953                           ; 1 bytes @ 0x22
   954  000023                     	ds	1
   955  000024                     ___fldiv@a:
   956                           	callstack 0
   957                           
   958                           ; 4 bytes @ 0x23
   959  000024                     	ds	4
   960  000028                     ??___fldiv:
   961                           
   962                           ; 1 bytes @ 0x27
   963  000028                     	ds	4
   964  00002C                     ___fldiv@rem:
   965                           	callstack 0
   966                           
   967                           ; 4 bytes @ 0x2B
   968  00002C                     	ds	4
   969  000030                     ___fldiv@sign:
   970                           	callstack 0
   971                           
   972                           ; 1 bytes @ 0x2F
   973  000030                     	ds	1
   974  000031                     ___fldiv@new_exp:
   975                           	callstack 0
   976                           
   977                           ; 2 bytes @ 0x30
   978  000031                     	ds	2
   979  000033                     ___fldiv@grs:
   980                           	callstack 0
   981                           
   982                           ; 4 bytes @ 0x32
   983  000033                     	ds	4
   984  000037                     ___fldiv@bexp:
   985                           	callstack 0
   986                           
   987                           ; 1 bytes @ 0x36
   988  000037                     	ds	1
   989  000038                     ___fldiv@aexp:
   990                           	callstack 0
   991                           
   992                           ; 1 bytes @ 0x37
   993  000038                     	ds	1
   994  000039                     ?___fltol:
   995                           	callstack 0
   996  000039                     ___fltol@f1:
   997                           	callstack 0
   998                           
   999                           ; 4 bytes @ 0x38
  1000  000039                     	ds	4
  1001  00003D                     ??___fltol:
  1002                           
  1003                           ; 1 bytes @ 0x3C
  1004  00003D                     	ds	4
  1005  000041                     ___fltol@sign1:
  1006                           	callstack 0
  1007                           
  1008                           ; 1 bytes @ 0x40
  1009  000041                     	ds	1
  1010  000042                     ___fltol@exp1:
  1011                           	callstack 0
  1012                           
  1013                           ; 1 bytes @ 0x41
  1014  000042                     	ds	1
  1015  000043                     ??_executeData:
  1016                           
  1017                           ; 1 bytes @ 0x42
  1018  000043                     	ds	2
  1019                           
  1020 ;;
  1021 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1022 ;;
  1023 ;; *************** function _main *****************
  1024 ;; Defined at:
  1025 ;;		line 17 in file "main.c"
  1026 ;; Parameters:    Size  Location     Type
  1027 ;;		None
  1028 ;; Auto vars:     Size  Location     Type
  1029 ;;  newData         2    3[BANK1 ] PTR struct .
  1030 ;;		 -> newSequenceData(8), 
  1031 ;;  errCode         1    2[BANK1 ] unsigned char 
  1032 ;; Return value:  Size  Location     Type
  1033 ;;                  1    wreg      void 
  1034 ;; Registers used:
  1035 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1036 ;; Tracked objects:
  1037 ;;		On entry : 0/0
  1038 ;;		On exit  : 0/0
  1039 ;;		Unchanged: 0/0
  1040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1041 ;;      Params:         0       0       0       0       0       0       0
  1042 ;;      Locals:         0       0       3       0       0       0       0
  1043 ;;      Temps:          0       0       2       0       0       0       0
  1044 ;;      Totals:         0       0       5       0       0       0       0
  1045 ;;Total ram usage:        5 bytes
  1046 ;; Hardware stack levels required when called:    7
  1047 ;; This function calls:
  1048 ;;		_clearTM0
  1049 ;;		_enableMotor
  1050 ;;		_executeData
  1051 ;;		_fatalError
  1052 ;;		_getNewSequence
  1053 ;;		_initADC
  1054 ;;		_initPinMotors
  1055 ;;		_interruptInit
  1056 ;;		_newSequence
  1057 ;;		_printError
  1058 ;;		_readSeq
  1059 ;;		_reduceSeq
  1060 ;;		_resetNewSequence
  1061 ;;		_resetPosition
  1062 ;;		_shiftData
  1063 ;;		_storeData
  1064 ;;		_tim0Init
  1065 ;;		_tim2Init
  1066 ;;		_usartInit
  1067 ;; This function is called by:
  1068 ;;		Startup code after reset
  1069 ;; This function uses a non-reentrant model
  1070 ;;
  1071                           
  1072                           	psect	text0
  1073  00137E                     __ptext0:
  1074                           	callstack 0
  1075  00137E                     _main:
  1076                           	callstack 24
  1077  00137E  FFFF               	dw	65535	; assembler added errata NOP
  1078                           
  1079                           ;main.c: 21:     interruptInit();
  1080  001380  ECB8  F011         	call	_interruptInit	;wreg free
  1081  001384                     
  1082                           ;main.c: 22:     initPinMotors();
  1083  001384  ECD5  F011         	call	_initPinMotors	;wreg free
  1084  001388                     
  1085                           ;main.c: 23:     initADC();
  1086  001388  ECE8  F011         	call	_initADC	;wreg free
  1087  00138C                     
  1088                           ;main.c: 24:     usartInit();
  1089  00138C  EC1F  F012         	call	_usartInit	;wreg free
  1090  001390                     
  1091                           ;main.c: 25:     tim0Init();
  1092  001390  EC42  F012         	call	_tim0Init	;wreg free
  1093  001394                     
  1094                           ;main.c: 26:     tim2Init(10);
  1095  001394  0E00               	movlw	0
  1096  001396  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1097  001398  0E0A               	movlw	10
  1098  00139A  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1099  00139C  EC2E  F012         	call	_tim2Init	;wreg free
  1100  0013A0                     
  1101                           ;main.c: 29:     errCode = resetPosition();
  1102  0013A0  ECC5  F008         	call	_resetPosition	;wreg free
  1103  0013A4  0101               	movlb	1	; () banked
  1104  0013A6  6FD3               	movwf	main@errCode& (0+255),b
  1105  0013A8                     
  1106                           ; BSR set to: 1
  1107                           ;main.c: 30:     printError(errCode);
  1108  0013A8  51D3               	movf	main@errCode& (0+255),w,b
  1109  0013AA  EC79  F00C         	call	_printError
  1110  0013AE                     
  1111                           ;main.c: 33:     RCSTA1bits.CREN = 1;
  1112  0013AE  88AB               	bsf	171,4,c	;volatile
  1113  0013B0                     l4232:
  1114  0013B0  FFFF               	dw	65535	; assembler added errata NOP
  1115                           
  1116                           ;main.c: 36:         if(fatalError()){
  1117  0013B2  ECB4  F012         	call	_fatalError	;wreg free
  1118  0013B6  0900               	iorlw	0
  1119  0013B8  B4D8               	btfsc	status,2,c
  1120  0013BA  EFE1  F009         	goto	u3511
  1121  0013BE  EFE4  F009         	goto	u3510
  1122  0013C2                     u3511:
  1123  0013C2  FFFF               	dw	65535	; assembler added errata NOP
  1124  0013C4  EFFA  F009         	goto	l4238
  1125  0013C8                     u3510:
  1126  0013C8  FFFF               	dw	65535	; assembler added errata NOP
  1127  0013CA                     
  1128                           ;main.c: 38:             enableMotor(1, 0);
  1129  0013CA  0E00               	movlw	0
  1130  0013CC  6E12               	movwf	enableMotor@motor^0,c
  1131  0013CE  0E01               	movlw	1
  1132  0013D0  EC9A  F010         	call	_enableMotor
  1133                           
  1134                           ;main.c: 39:             enableMotor(1, 1);
  1135  0013D4  0E01               	movlw	1
  1136  0013D6  6E12               	movwf	enableMotor@motor^0,c
  1137  0013D8  0E01               	movlw	1
  1138  0013DA  EC9A  F010         	call	_enableMotor
  1139                           
  1140                           ;main.c: 40:             enableMotor(1, 2);
  1141  0013DE  0E02               	movlw	2
  1142  0013E0  6E12               	movwf	enableMotor@motor^0,c
  1143  0013E2  0E01               	movlw	1
  1144  0013E4  EC9A  F010         	call	_enableMotor
  1145  0013E8                     
  1146                           ;main.c: 42:             printError(7);
  1147  0013E8  0E07               	movlw	7
  1148  0013EA  EC79  F00C         	call	_printError
  1149  0013EE                     l318:
  1150  0013EE  FFFF               	dw	65535	; assembler added errata NOP
  1151  0013F0  EFF7  F009         	goto	l318
  1152  0013F4                     l4238:
  1153  0013F4  FFFF               	dw	65535	; assembler added errata NOP
  1154  0013F6  ECB0  F012         	call	_newSequence	;wreg free
  1155  0013FA  0900               	iorlw	0
  1156  0013FC  B4D8               	btfsc	status,2,c
  1157  0013FE  EF03  F00A         	goto	u3521
  1158  001402  EF06  F00A         	goto	u3520
  1159  001406                     u3521:
  1160  001406  FFFF               	dw	65535	; assembler added errata NOP
  1161  001408  EF61  F00A         	goto	l4272
  1162  00140C                     u3520:
  1163  00140C  FFFF               	dw	65535	; assembler added errata NOP
  1164  00140E                     
  1165                           ;main.c: 45:             t_newSequence* newData = getNewSequence();
  1166  00140E  EC4B  F012         	call	_getNewSequence	;wreg free
  1167  001412  C012  F1D4         	movff	?_getNewSequence,main@newData
  1168  001416  C013  F1D5         	movff	?_getNewSequence+1,main@newData+1
  1169  00141A                     
  1170                           ;main.c: 47:             newFeeder[0] = newData ->init_posX;
  1171  00141A  0101               	movlb	1	; () banked
  1172  00141C  EE20 F002          	lfsr	2,2
  1173  001420  51D4               	movf	main@newData& (0+255),w,b
  1174  001422  26D9               	addwf	fsr2l,f,c
  1175  001424  51D5               	movf	(main@newData+1)& (0+255),w,b
  1176  001426  22DA               	addwfc	fsr2h,f,c
  1177  001428  50DF               	movf	indf2,w,c
  1178  00142A  6E57               	movwf	_newFeeder^0,c
  1179  00142C                     
  1180                           ; BSR set to: 1
  1181                           ;main.c: 48:             newFeeder[1] = newData ->init_posY;
  1182  00142C  EE20 F003          	lfsr	2,3
  1183  001430  51D4               	movf	main@newData& (0+255),w,b
  1184  001432  26D9               	addwf	fsr2l,f,c
  1185  001434  51D5               	movf	(main@newData+1)& (0+255),w,b
  1186  001436  22DA               	addwfc	fsr2h,f,c
  1187  001438  50DF               	movf	indf2,w,c
  1188  00143A  6E58               	movwf	(_newFeeder+1)^0,c
  1189  00143C                     
  1190                           ; BSR set to: 1
  1191                           ;main.c: 52:             RCSTAbits.CREN = 0;
  1192  00143C  98AB               	bcf	171,4,c	;volatile
  1193  00143E                     
  1194                           ; BSR set to: 1
  1195                           ;main.c: 55:             storeData(0);
  1196  00143E  0E00               	movlw	0
  1197  001440  EC7C  F00A         	call	_storeData
  1198  001444                     
  1199                           ;main.c: 56:             storeData(0xFF);
  1200  001444  0EFF               	movlw	255
  1201  001446  EC7C  F00A         	call	_storeData
  1202  00144A                     
  1203                           ;main.c: 57:             storeData(newData ->end_posX);
  1204  00144A  0101               	movlb	1	; () banked
  1205  00144C  EE20 F005          	lfsr	2,5
  1206  001450  51D4               	movf	main@newData& (0+255),w,b
  1207  001452  26D9               	addwf	fsr2l,f,c
  1208  001454  51D5               	movf	(main@newData+1)& (0+255),w,b
  1209  001456  22DA               	addwfc	fsr2h,f,c
  1210  001458  50DF               	movf	indf2,w,c
  1211  00145A  EC7C  F00A         	call	_storeData
  1212  00145E                     
  1213                           ;main.c: 58:             storeData(newData ->end_posY);
  1214  00145E  0101               	movlb	1	; () banked
  1215  001460  EE20 F006          	lfsr	2,6
  1216  001464  51D4               	movf	main@newData& (0+255),w,b
  1217  001466  26D9               	addwf	fsr2l,f,c
  1218  001468  51D5               	movf	(main@newData+1)& (0+255),w,b
  1219  00146A  22DA               	addwfc	fsr2h,f,c
  1220  00146C  50DF               	movf	indf2,w,c
  1221  00146E  EC7C  F00A         	call	_storeData
  1222  001472                     
  1223                           ;main.c: 59:             storeData(newData ->end_rot - newData ->init_rot);
  1224  001472  0101               	movlb	1	; () banked
  1225  001474  EE20 F004          	lfsr	2,4
  1226  001478  51D4               	movf	main@newData& (0+255),w,b
  1227  00147A  26D9               	addwf	fsr2l,f,c
  1228  00147C  51D5               	movf	(main@newData+1)& (0+255),w,b
  1229  00147E  22DA               	addwfc	fsr2h,f,c
  1230  001480  50DF               	movf	indf2,w,c
  1231  001482  6FD1               	movwf	??_main& (0+255),b
  1232  001484  EE20 F007          	lfsr	2,7
  1233  001488  51D4               	movf	main@newData& (0+255),w,b
  1234  00148A  26D9               	addwf	fsr2l,f,c
  1235  00148C  51D5               	movf	(main@newData+1)& (0+255),w,b
  1236  00148E  22DA               	addwfc	fsr2h,f,c
  1237  001490  50DF               	movf	indf2,w,c
  1238  001492  6FD2               	movwf	(??_main+1)& (0+255),b
  1239  001494  51D1               	movf	??_main& (0+255),w,b
  1240  001496  5DD2               	subwf	(??_main+1)& (0+255),w,b
  1241  001498  EC7C  F00A         	call	_storeData
  1242  00149C                     
  1243                           ;main.c: 62:             RCSTAbits.CREN = 1;
  1244  00149C  88AB               	bsf	171,4,c	;volatile
  1245  00149E                     
  1246                           ;main.c: 65:             resetNewSequence();
  1247  00149E  EC80  F012         	call	_resetNewSequence	;wreg free
  1248  0014A2                     
  1249                           ;main.c: 67:             errCode = executeData();
  1250  0014A2  EC82  F006         	call	_executeData	;wreg free
  1251  0014A6  0101               	movlb	1	; () banked
  1252  0014A8  6FD3               	movwf	main@errCode& (0+255),b
  1253  0014AA                     
  1254                           ; BSR set to: 1
  1255                           ;main.c: 68:             printError(errCode);
  1256  0014AA  51D3               	movf	main@errCode& (0+255),w,b
  1257  0014AC  EC79  F00C         	call	_printError
  1258  0014B0                     l4266:
  1259  0014B0  FFFF               	dw	65535	; assembler added errata NOP
  1260                           
  1261                           ;main.c: 69:             clearTM0();
  1262  0014B2  EC59  F012         	call	_clearTM0	;wreg free
  1263  0014B6                     
  1264                           ;main.c: 73:             reduceSeq();
  1265  0014B6  ECA8  F012         	call	_reduceSeq	;wreg free
  1266  0014BA                     
  1267                           ;main.c: 74:             shiftData();
  1268  0014BA  EC0E  F011         	call	_shiftData	;wreg free
  1269                           
  1270                           ;main.c: 76:         }else if(readSeq()){
  1271  0014BE  EFD8  F009         	goto	l4232
  1272  0014C2                     l4272:
  1273  0014C2  FFFF               	dw	65535	; assembler added errata NOP
  1274  0014C4  ECAC  F012         	call	_readSeq	;wreg free
  1275  0014C8  0900               	iorlw	0
  1276  0014CA  B4D8               	btfsc	status,2,c
  1277  0014CC  EF6A  F00A         	goto	u3531
  1278  0014D0  EF6D  F00A         	goto	u3530
  1279  0014D4                     u3531:
  1280  0014D4  FFFF               	dw	65535	; assembler added errata NOP
  1281  0014D6  EF77  F00A         	goto	l321
  1282  0014DA                     u3530:
  1283  0014DA  FFFF               	dw	65535	; assembler added errata NOP
  1284  0014DC                     
  1285                           ;main.c: 79:             errCode = executeData();
  1286  0014DC  EC82  F006         	call	_executeData	;wreg free
  1287  0014E0  0101               	movlb	1	; () banked
  1288  0014E2  6FD3               	movwf	main@errCode& (0+255),b
  1289  0014E4                     
  1290                           ; BSR set to: 1
  1291                           ;main.c: 80:             printError(errCode);
  1292  0014E4  51D3               	movf	main@errCode& (0+255),w,b
  1293  0014E6  EC79  F00C         	call	_printError
  1294  0014EA  EF58  F00A         	goto	l4266
  1295  0014EE                     l321:
  1296  0014EE  FFFF               	dw	65535	; assembler added errata NOP
  1297  0014F0  EFD8  F009         	goto	l4232
  1298  0014F4  EFB5  F000         	goto	start
  1299  0014F8                     __end_of_main:
  1300                           	callstack 0
  1301                           
  1302 ;; *************** function _usartInit *****************
  1303 ;; Defined at:
  1304 ;;		line 34 in file "usart.c"
  1305 ;; Parameters:    Size  Location     Type
  1306 ;;		None
  1307 ;; Auto vars:     Size  Location     Type
  1308 ;;		None
  1309 ;; Return value:  Size  Location     Type
  1310 ;;                  1    wreg      void 
  1311 ;; Registers used:
  1312 ;;		wreg, status,2
  1313 ;; Tracked objects:
  1314 ;;		On entry : 0/0
  1315 ;;		On exit  : 0/0
  1316 ;;		Unchanged: 0/0
  1317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1318 ;;      Params:         0       0       0       0       0       0       0
  1319 ;;      Locals:         0       0       0       0       0       0       0
  1320 ;;      Temps:          0       0       0       0       0       0       0
  1321 ;;      Totals:         0       0       0       0       0       0       0
  1322 ;;Total ram usage:        0 bytes
  1323 ;; Hardware stack levels used:    1
  1324 ;; Hardware stack levels required when called:    4
  1325 ;; This function calls:
  1326 ;;		Nothing
  1327 ;; This function is called by:
  1328 ;;		_main
  1329 ;; This function uses a non-reentrant model
  1330 ;;
  1331                           
  1332                           	psect	text1
  1333  00243E                     __ptext1:
  1334                           	callstack 0
  1335  00243E                     _usartInit:
  1336                           	callstack 0
  1337  00243E  FFFF               	dw	65535	; assembler added errata NOP
  1338  002440                     
  1339                           ;usart.c: 36:     TRISCbits.TRISC6 = 0;
  1340  002440  9C94               	bcf	148,6,c	;volatile
  1341                           
  1342                           ;usart.c: 37:     TRISCbits.TRISC7 = 1;
  1343  002442  8E94               	bsf	148,7,c	;volatile
  1344                           
  1345                           ;usart.c: 39:     TXSTAbits.TX9 = 0;
  1346  002444  9CAC               	bcf	172,6,c	;volatile
  1347                           
  1348                           ;usart.c: 40:     TXSTAbits.TXEN = 1;
  1349  002446  8AAC               	bsf	172,5,c	;volatile
  1350                           
  1351                           ;usart.c: 41:     TXSTAbits.SYNC = 0;
  1352  002448  98AC               	bcf	172,4,c	;volatile
  1353                           
  1354                           ;usart.c: 42:     TXSTAbits.BRGH = 0;
  1355  00244A  94AC               	bcf	172,2,c	;volatile
  1356                           
  1357                           ;usart.c: 44:     RCSTAbits.SPEN = 1;
  1358  00244C  8EAB               	bsf	171,7,c	;volatile
  1359                           
  1360                           ;usart.c: 45:     RCSTAbits.RX9 = 0;
  1361  00244E  9CAB               	bcf	171,6,c	;volatile
  1362                           
  1363                           ;usart.c: 46:     RCSTAbits.CREN = 0;
  1364  002450  98AB               	bcf	171,4,c	;volatile
  1365                           
  1366                           ;usart.c: 47:     RCSTAbits.ADDEN = 0;
  1367  002452  96AB               	bcf	171,3,c	;volatile
  1368  002454                     
  1369                           ;usart.c: 50:     SPBRG = 25;
  1370  002454  0E19               	movlw	25
  1371  002456  6EAF               	movwf	175,c	;volatile
  1372  002458  0012               	return		;funcret
  1373  00245A  FFFF               	dw	65535	; errata NOP
  1374  00245C                     __end_of_usartInit:
  1375                           	callstack 0
  1376                           
  1377 ;; *************** function _tim2Init *****************
  1378 ;; Defined at:
  1379 ;;		line 34 in file "pwm.c"
  1380 ;; Parameters:    Size  Location     Type
  1381 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1382 ;; Auto vars:     Size  Location     Type
  1383 ;;		None
  1384 ;; Return value:  Size  Location     Type
  1385 ;;                  1    wreg      void 
  1386 ;; Registers used:
  1387 ;;		wreg, status,2
  1388 ;; Tracked objects:
  1389 ;;		On entry : 0/0
  1390 ;;		On exit  : 0/0
  1391 ;;		Unchanged: 0/0
  1392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1393 ;;      Params:         2       0       0       0       0       0       0
  1394 ;;      Locals:         0       0       0       0       0       0       0
  1395 ;;      Temps:          0       0       0       0       0       0       0
  1396 ;;      Totals:         2       0       0       0       0       0       0
  1397 ;;Total ram usage:        2 bytes
  1398 ;; Hardware stack levels used:    1
  1399 ;; Hardware stack levels required when called:    4
  1400 ;; This function calls:
  1401 ;;		Nothing
  1402 ;; This function is called by:
  1403 ;;		_main
  1404 ;; This function uses a non-reentrant model
  1405 ;;
  1406                           
  1407                           	psect	text2
  1408  00245C                     __ptext2:
  1409                           	callstack 0
  1410  00245C                     _tim2Init:
  1411                           	callstack 0
  1412  00245C  FFFF               	dw	65535	; assembler added errata NOP
  1413  00245E                     
  1414                           ;pwm.c: 35:     T2CONbits.TMR2ON = 0;
  1415  00245E  94CA               	bcf	202,2,c	;volatile
  1416  002460                     
  1417                           ;pwm.c: 36:     T2CONbits.T2CKPS = 0x03;
  1418  002460  0E03               	movlw	3
  1419  002462  12CA               	iorwf	202,f,c	;volatile
  1420  002464                     
  1421                           ;pwm.c: 39:     pwmPeriod = _pwmPeriod;
  1422  002464  C012  F055         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1423  002468  C013  F056         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1424  00246C  0012               	return		;funcret
  1425  00246E  FFFF               	dw	65535	; errata NOP
  1426  002470                     __end_of_tim2Init:
  1427                           	callstack 0
  1428                           
  1429 ;; *************** function _tim0Init *****************
  1430 ;; Defined at:
  1431 ;;		line 21 in file "pwm.c"
  1432 ;; Parameters:    Size  Location     Type
  1433 ;;		None
  1434 ;; Auto vars:     Size  Location     Type
  1435 ;;		None
  1436 ;; Return value:  Size  Location     Type
  1437 ;;                  1    wreg      void 
  1438 ;; Registers used:
  1439 ;;		wreg, status,2
  1440 ;; Tracked objects:
  1441 ;;		On entry : 0/0
  1442 ;;		On exit  : 0/0
  1443 ;;		Unchanged: 0/0
  1444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1445 ;;      Params:         0       0       0       0       0       0       0
  1446 ;;      Locals:         0       0       0       0       0       0       0
  1447 ;;      Temps:          0       0       0       0       0       0       0
  1448 ;;      Totals:         0       0       0       0       0       0       0
  1449 ;;Total ram usage:        0 bytes
  1450 ;; Hardware stack levels used:    1
  1451 ;; Hardware stack levels required when called:    4
  1452 ;; This function calls:
  1453 ;;		Nothing
  1454 ;; This function is called by:
  1455 ;;		_main
  1456 ;; This function uses a non-reentrant model
  1457 ;;
  1458                           
  1459                           	psect	text3
  1460  002484                     __ptext3:
  1461                           	callstack 0
  1462  002484                     _tim0Init:
  1463                           	callstack 0
  1464  002484  FFFF               	dw	65535	; assembler added errata NOP
  1465  002486                     
  1466                           ;pwm.c: 22:     T0CONbits.TMR0ON = 0;
  1467  002486  9ED5               	bcf	213,7,c	;volatile
  1468                           
  1469                           ;pwm.c: 23:     T0CONbits.T08BIT = 0;
  1470  002488  9CD5               	bcf	213,6,c	;volatile
  1471                           
  1472                           ;pwm.c: 24:     T0CONbits.T0CS = 0;
  1473  00248A  9AD5               	bcf	213,5,c	;volatile
  1474                           
  1475                           ;pwm.c: 25:     T0CONbits.PSA = 1;
  1476  00248C  86D5               	bsf	213,3,c	;volatile
  1477  00248E                     
  1478                           ;pwm.c: 26:     T0CONbits.T0PS = 0x07;
  1479  00248E  0E07               	movlw	7
  1480  002490  12D5               	iorwf	213,f,c	;volatile
  1481  002492  0012               	return		;funcret
  1482  002494  FFFF               	dw	65535	; errata NOP
  1483  002496                     __end_of_tim0Init:
  1484                           	callstack 0
  1485                           
  1486 ;; *************** function _storeData *****************
  1487 ;; Defined at:
  1488 ;;		line 131 in file "usart.c"
  1489 ;; Parameters:    Size  Location     Type
  1490 ;;  data            1    wreg     unsigned char 
  1491 ;; Auto vars:     Size  Location     Type
  1492 ;;  data            1   26[COMRAM] unsigned char 
  1493 ;; Return value:  Size  Location     Type
  1494 ;;                  1    wreg      void 
  1495 ;; Registers used:
  1496 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1497 ;; Tracked objects:
  1498 ;;		On entry : 0/0
  1499 ;;		On exit  : 0/0
  1500 ;;		Unchanged: 0/0
  1501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1502 ;;      Params:         0       0       0       0       0       0       0
  1503 ;;      Locals:         1       0       0       0       0       0       0
  1504 ;;      Temps:          2       0       0       0       0       0       0
  1505 ;;      Totals:         3       0       0       0       0       0       0
  1506 ;;Total ram usage:        3 bytes
  1507 ;; Hardware stack levels used:    1
  1508 ;; Hardware stack levels required when called:    6
  1509 ;; This function calls:
  1510 ;;		_printError
  1511 ;; This function is called by:
  1512 ;;		_main
  1513 ;; This function uses a non-reentrant model
  1514 ;;
  1515                           
  1516                           	psect	text4
  1517  0014F8                     __ptext4:
  1518                           	callstack 0
  1519  0014F8                     _storeData:
  1520                           	callstack 0
  1521  0014F8  FFFF               	dw	65535	; assembler added errata NOP
  1522                           
  1523                           ;incstack = 0
  1524                           ;storeData@data stored from wreg
  1525  0014FA  6E1B               	movwf	storeData@data^0,c
  1526  0014FC                     
  1527                           ;usart.c: 133:     static unsigned char counter = 0;;usart.c: 134:     static unsigned c
      +                          har mexLength = 5;;usart.c: 135:     static unsigned char command;;usart.c: 136:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 140:     receivedMex[counter] = data;
  1528  0014FC  0E45               	movlw	low storeData@receivedMex
  1529  0014FE  245E               	addwf	storeData@counter^0,w,c
  1530  001500  6ED9               	movwf	fsr2l,c
  1531  001502  6ADA               	clrf	fsr2h,c
  1532  001504  0E00               	movlw	high storeData@receivedMex
  1533  001506  22DA               	addwfc	fsr2h,f,c
  1534  001508  C01B  FFDF         	movff	storeData@data,indf2
  1535  00150C                     
  1536                           ;usart.c: 142:     counter++;
  1537  00150C  2A5E               	incf	storeData@counter^0,f,c
  1538                           
  1539                           ;usart.c: 145:     switch(receivedMex[0]){
  1540  00150E  EF98  F00A         	goto	l4100
  1541  001512                     l4092:
  1542  001512  FFFF               	dw	65535	; assembler added errata NOP
  1543                           
  1544                           ;usart.c: 147:             mexLength = 5;
  1545  001514  0E05               	movlw	5
  1546  001516  6E6D               	movwf	storeData@mexLength^0,c
  1547                           
  1548                           ;usart.c: 148:             break;
  1549  001518  EFB3  F00A         	goto	l4102
  1550  00151C                     l4094:
  1551  00151C  FFFF               	dw	65535	; assembler added errata NOP
  1552                           
  1553                           ;usart.c: 150:             mexLength = 9;
  1554  00151E  0E09               	movlw	9
  1555  001520  6E6D               	movwf	storeData@mexLength^0,c
  1556                           
  1557                           ;usart.c: 151:             break;
  1558  001522  EFB3  F00A         	goto	l4102
  1559  001526                     l4096:
  1560  001526  FFFF               	dw	65535	; assembler added errata NOP
  1561                           
  1562                           ;usart.c: 153:             mexLength = 1;
  1563  001528  0E01               	movlw	1
  1564  00152A  6E6D               	movwf	storeData@mexLength^0,c
  1565                           
  1566                           ;usart.c: 154:             break;
  1567  00152C  EFB3  F00A         	goto	l4102
  1568  001530                     l4100:
  1569  001530  FFFF               	dw	65535	; assembler added errata NOP
  1570  001532  5045               	movf	storeData@receivedMex^0,w,c
  1571  001534  6E19               	movwf	??_storeData^0,c
  1572  001536  6A1A               	clrf	(??_storeData+1)^0,c
  1573                           
  1574                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1575                           ; Switch size 1, requested type "simple"
  1576                           ; Number of cases is 1, Range of values is 0 to 0
  1577                           ; switch strategies available:
  1578                           ; Name         Instructions Cycles
  1579                           ; simple_byte            4     3 (average)
  1580                           ;	Chosen strategy is simple_byte
  1581  001538  501A               	movf	(??_storeData+1)^0,w,c
  1582  00153A  0A00               	xorlw	0	; case 0
  1583  00153C  B4D8               	btfsc	status,2,c
  1584  00153E  EFA3  F00A         	goto	l4504
  1585  001542  EFB3  F00A         	goto	l4102
  1586  001546                     l4504:
  1587  001546  FFFF               	dw	65535	; assembler added errata NOP
  1588                           
  1589                           ; Switch size 1, requested type "simple"
  1590                           ; Number of cases is 3, Range of values is 0 to 2
  1591                           ; switch strategies available:
  1592                           ; Name         Instructions Cycles
  1593                           ; simple_byte           10     6 (average)
  1594                           ;	Chosen strategy is simple_byte
  1595  001548  5019               	movf	??_storeData^0,w,c
  1596  00154A  0A00               	xorlw	0	; case 0
  1597  00154C  B4D8               	btfsc	status,2,c
  1598  00154E  EF89  F00A         	goto	l4092
  1599  001552  0A01               	xorlw	1	; case 1
  1600  001554  B4D8               	btfsc	status,2,c
  1601  001556  EF8E  F00A         	goto	l4094
  1602  00155A  0A03               	xorlw	3	; case 2
  1603  00155C  B4D8               	btfsc	status,2,c
  1604  00155E  EF93  F00A         	goto	l4096
  1605  001562  EFB3  F00A         	goto	l4102
  1606  001566                     l4102:
  1607  001566  FFFF               	dw	65535	; assembler added errata NOP
  1608                           
  1609                           ;usart.c: 161:     if(counter >= mexLength){
  1610  001568  506D               	movf	storeData@mexLength^0,w,c
  1611  00156A  5C5E               	subwf	storeData@counter^0,w,c
  1612  00156C  A0D8               	btfss	status,0,c
  1613  00156E  EFBB  F00A         	goto	u3471
  1614  001572  EFBE  F00A         	goto	u3470
  1615  001576                     u3471:
  1616  001576  FFFF               	dw	65535	; assembler added errata NOP
  1617  001578  EF2A  F00B         	goto	l571
  1618  00157C                     u3470:
  1619  00157C  FFFF               	dw	65535	; assembler added errata NOP
  1620  00157E                     
  1621                           ;usart.c: 162:         counter = 0;
  1622  00157E  0E00               	movlw	0
  1623  001580  6E5E               	movwf	storeData@counter^0,c
  1624                           
  1625                           ;usart.c: 166:         switch(receivedMex[0]){
  1626  001582  EF0F  F00B         	goto	l4118
  1627  001586                     l4106:
  1628  001586  FFFF               	dw	65535	; assembler added errata NOP
  1629                           
  1630                           ;usart.c: 168:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  1631  001588  5061               	movf	_dataCounter^0,w,c
  1632  00158A  0D04               	mullw	4
  1633  00158C  0ED8               	movlw	low _dataSequence
  1634  00158E  24F3               	addwf	243,w,c
  1635  001590  6ED9               	movwf	fsr2l,c
  1636  001592  0E00               	movlw	high _dataSequence
  1637  001594  20F4               	addwfc	prodh,w,c
  1638  001596  6EDA               	movwf	fsr2h,c
  1639  001598  C046  FFDF         	movff	storeData@receivedMex+1,indf2
  1640                           
  1641                           ;usart.c: 169:                 dataSequence[dataCounter].posX = receivedMex[2];
  1642  00159C  5061               	movf	_dataCounter^0,w,c
  1643  00159E  0D04               	mullw	4
  1644  0015A0  0ED9               	movlw	low (_dataSequence+1)
  1645  0015A2  24F3               	addwf	243,w,c
  1646  0015A4  6ED9               	movwf	fsr2l,c
  1647  0015A6  0E00               	movlw	high (_dataSequence+1)
  1648  0015A8  20F4               	addwfc	prodh,w,c
  1649  0015AA  6EDA               	movwf	fsr2h,c
  1650  0015AC  C047  FFDF         	movff	storeData@receivedMex+2,indf2
  1651                           
  1652                           ;usart.c: 170:                 dataSequence[dataCounter].posY = receivedMex[3];
  1653  0015B0  5061               	movf	_dataCounter^0,w,c
  1654  0015B2  0D04               	mullw	4
  1655  0015B4  0EDA               	movlw	low (_dataSequence+2)
  1656  0015B6  24F3               	addwf	243,w,c
  1657  0015B8  6ED9               	movwf	fsr2l,c
  1658  0015BA  0E00               	movlw	high (_dataSequence+2)
  1659  0015BC  20F4               	addwfc	prodh,w,c
  1660  0015BE  6EDA               	movwf	fsr2h,c
  1661  0015C0  C048  FFDF         	movff	storeData@receivedMex+3,indf2
  1662                           
  1663                           ;usart.c: 171:                 dataSequence[dataCounter].rotation = receivedMex[4];
  1664  0015C4  5061               	movf	_dataCounter^0,w,c
  1665  0015C6  0D04               	mullw	4
  1666  0015C8  0EDB               	movlw	low (_dataSequence+3)
  1667  0015CA  24F3               	addwf	243,w,c
  1668  0015CC  6ED9               	movwf	fsr2l,c
  1669  0015CE  0E00               	movlw	high (_dataSequence+3)
  1670  0015D0  20F4               	addwfc	prodh,w,c
  1671  0015D2  6EDA               	movwf	fsr2h,c
  1672  0015D4  C049  FFDF         	movff	storeData@receivedMex+4,indf2
  1673  0015D8                     
  1674                           ;usart.c: 173:                 dataCounter++;
  1675  0015D8  2A61               	incf	_dataCounter^0,f,c
  1676                           
  1677                           ;usart.c: 174:                 break;
  1678  0015DA  EF2A  F00B         	goto	l571
  1679  0015DE                     l568:
  1680  0015DE  FFFF               	dw	65535	; assembler added errata NOP
  1681                           
  1682                           ;usart.c: 177:                 newSequenceData.L = receivedMex[1];
  1683  0015E0  C046  F0EC         	movff	storeData@receivedMex+1,_newSequenceData
  1684                           
  1685                           ;usart.c: 178:                 newSequenceData.W = receivedMex[2];
  1686  0015E4  C047  F0ED         	movff	storeData@receivedMex+2,_newSequenceData+1
  1687                           
  1688                           ;usart.c: 179:                 newSequenceData.init_posX = receivedMex[3];
  1689  0015E8  C048  F0EE         	movff	storeData@receivedMex+3,_newSequenceData+2
  1690                           
  1691                           ;usart.c: 180:                 newSequenceData.init_posY = receivedMex[4];
  1692  0015EC  C049  F0EF         	movff	storeData@receivedMex+4,_newSequenceData+3
  1693                           
  1694                           ;usart.c: 181:                 newSequenceData.init_rot = receivedMex[5];
  1695  0015F0  C04A  F0F0         	movff	storeData@receivedMex+5,_newSequenceData+4
  1696                           
  1697                           ;usart.c: 182:                 newSequenceData.end_posX = receivedMex[6];
  1698  0015F4  C04B  F0F1         	movff	storeData@receivedMex+6,_newSequenceData+5
  1699                           
  1700                           ;usart.c: 183:                 newSequenceData.end_posY = receivedMex[7];
  1701  0015F8  C04C  F0F2         	movff	storeData@receivedMex+7,_newSequenceData+6
  1702                           
  1703                           ;usart.c: 184:                 newSequenceData.end_rot = receivedMex[8];
  1704  0015FC  C04D  F0F3         	movff	storeData@receivedMex+8,_newSequenceData+7
  1705  001600                     
  1706                           ;usart.c: 186:                 _newSequence = 1;
  1707  001600  0E01               	movlw	1
  1708  001602  6E5F               	movwf	__newSequence^0,c
  1709                           
  1710                           ;usart.c: 187:                 break;
  1711  001604  EF2A  F00B         	goto	l571
  1712  001608                     l4112:
  1713  001608  FFFF               	dw	65535	; assembler added errata NOP
  1714                           
  1715                           ;usart.c: 190:                 _fatalError = 1;
  1716  00160A  0E01               	movlw	1
  1717  00160C  6E60               	movwf	__fatalError^0,c
  1718                           
  1719                           ;usart.c: 191:                 break;
  1720  00160E  EF2A  F00B         	goto	l571
  1721  001612                     l4114:
  1722  001612  FFFF               	dw	65535	; assembler added errata NOP
  1723                           
  1724                           ;usart.c: 194:                 printError(8);
  1725  001614  0E08               	movlw	8
  1726  001616  EC79  F00C         	call	_printError
  1727                           
  1728                           ;usart.c: 195:                 break;
  1729  00161A  EF2A  F00B         	goto	l571
  1730  00161E                     l4118:
  1731  00161E  FFFF               	dw	65535	; assembler added errata NOP
  1732  001620  5045               	movf	storeData@receivedMex^0,w,c
  1733  001622  6E19               	movwf	??_storeData^0,c
  1734  001624  6A1A               	clrf	(??_storeData+1)^0,c
  1735                           
  1736                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1737                           ; Switch size 1, requested type "simple"
  1738                           ; Number of cases is 1, Range of values is 0 to 0
  1739                           ; switch strategies available:
  1740                           ; Name         Instructions Cycles
  1741                           ; simple_byte            4     3 (average)
  1742                           ;	Chosen strategy is simple_byte
  1743  001626  501A               	movf	(??_storeData+1)^0,w,c
  1744  001628  0A00               	xorlw	0	; case 0
  1745  00162A  B4D8               	btfsc	status,2,c
  1746  00162C  EF1A  F00B         	goto	l4506
  1747  001630  EF09  F00B         	goto	l4114
  1748  001634                     l4506:
  1749  001634  FFFF               	dw	65535	; assembler added errata NOP
  1750                           
  1751                           ; Switch size 1, requested type "simple"
  1752                           ; Number of cases is 3, Range of values is 0 to 2
  1753                           ; switch strategies available:
  1754                           ; Name         Instructions Cycles
  1755                           ; simple_byte           10     6 (average)
  1756                           ;	Chosen strategy is simple_byte
  1757  001636  5019               	movf	??_storeData^0,w,c
  1758  001638  0A00               	xorlw	0	; case 0
  1759  00163A  B4D8               	btfsc	status,2,c
  1760  00163C  EFC3  F00A         	goto	l4106
  1761  001640  0A01               	xorlw	1	; case 1
  1762  001642  B4D8               	btfsc	status,2,c
  1763  001644  EFEF  F00A         	goto	l568
  1764  001648  0A03               	xorlw	3	; case 2
  1765  00164A  B4D8               	btfsc	status,2,c
  1766  00164C  EF04  F00B         	goto	l4112
  1767  001650  EF09  F00B         	goto	l4114
  1768  001654                     l571:
  1769  001654  FFFF               	dw	65535	; assembler added errata NOP
  1770  001656  0012               	return		;funcret
  1771  001658  FFFF               	dw	65535	; errata NOP
  1772  00165A                     __end_of_storeData:
  1773                           	callstack 0
  1774                           
  1775 ;; *************** function _printError *****************
  1776 ;; Defined at:
  1777 ;;		line 53 in file "usart.c"
  1778 ;; Parameters:    Size  Location     Type
  1779 ;;  errCode         1    wreg     unsigned char 
  1780 ;; Auto vars:     Size  Location     Type
  1781 ;;  errCode         1   23[COMRAM] unsigned char 
  1782 ;; Return value:  Size  Location     Type
  1783 ;;                  1    wreg      void 
  1784 ;; Registers used:
  1785 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1786 ;; Tracked objects:
  1787 ;;		On entry : 0/0
  1788 ;;		On exit  : 0/0
  1789 ;;		Unchanged: 0/0
  1790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1791 ;;      Params:         0       0       0       0       0       0       0
  1792 ;;      Locals:         1       0       0       0       0       0       0
  1793 ;;      Temps:          2       0       0       0       0       0       0
  1794 ;;      Totals:         3       0       0       0       0       0       0
  1795 ;;Total ram usage:        3 bytes
  1796 ;; Hardware stack levels used:    1
  1797 ;; Hardware stack levels required when called:    5
  1798 ;; This function calls:
  1799 ;;		_uartTx
  1800 ;; This function is called by:
  1801 ;;		_main
  1802 ;;		_storeData
  1803 ;; This function uses a non-reentrant model
  1804 ;;
  1805                           
  1806                           	psect	text5
  1807  0018F2                     __ptext5:
  1808                           	callstack 0
  1809  0018F2                     _printError:
  1810                           	callstack 0
  1811  0018F2  FFFF               	dw	65535	; assembler added errata NOP
  1812                           
  1813                           ;incstack = 0
  1814                           ;printError@errCode stored from wreg
  1815  0018F4  6E18               	movwf	printError@errCode^0,c
  1816  0018F6                     
  1817                           ;usart.c: 55:     switch(errCode){
  1818  0018F6  EFD5  F00C         	goto	l3960
  1819  0018FA                     l3942:
  1820  0018FA  FFFF               	dw	65535	; assembler added errata NOP
  1821                           
  1822                           ;usart.c: 57:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  1823  0018FC  0EA4               	movlw	low _errString_Feed
  1824  0018FE  6E12               	movwf	uartTx@ptr^0,c
  1825  001900  0E00               	movlw	high _errString_Feed
  1826  001902  6E13               	movwf	(uartTx@ptr+1)^0,c
  1827  001904  0E1D               	movlw	29
  1828  001906  6E14               	movwf	uartTx@length^0,c
  1829  001908  EC6A  F011         	call	_uartTx	;wreg free
  1830                           
  1831                           ;usart.c: 58:             break;
  1832  00190C  EF04  F00D         	goto	l527
  1833  001910                     l3944:
  1834  001910  FFFF               	dw	65535	; assembler added errata NOP
  1835                           
  1836                           ;usart.c: 60:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  1837  001912  0E5C               	movlw	low _errString_ZEND
  1838  001914  6E12               	movwf	uartTx@ptr^0,c
  1839  001916  0E01               	movlw	high _errString_ZEND
  1840  001918  6E13               	movwf	(uartTx@ptr+1)^0,c
  1841  00191A  0E28               	movlw	40
  1842  00191C  6E14               	movwf	uartTx@length^0,c
  1843  00191E  EC6A  F011         	call	_uartTx	;wreg free
  1844                           
  1845                           ;usart.c: 61:             break;
  1846  001922  EF04  F00D         	goto	l527
  1847  001926                     l3946:
  1848  001926  FFFF               	dw	65535	; assembler added errata NOP
  1849                           
  1850                           ;usart.c: 63:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  1851  001928  0E84               	movlw	low _errString_Reset
  1852  00192A  6E12               	movwf	uartTx@ptr^0,c
  1853  00192C  0E01               	movlw	high _errString_Reset
  1854  00192E  6E13               	movwf	(uartTx@ptr+1)^0,c
  1855  001930  0E27               	movlw	39
  1856  001932  6E14               	movwf	uartTx@length^0,c
  1857  001934  EC6A  F011         	call	_uartTx	;wreg free
  1858                           
  1859                           ;usart.c: 64:             break;
  1860  001938  EF04  F00D         	goto	l527
  1861  00193C                     l3948:
  1862  00193C  FFFF               	dw	65535	; assembler added errata NOP
  1863                           
  1864                           ;usart.c: 66:             uartTx(&errString_Point[0], sizeof(errString_Point));
  1865  00193E  0E34               	movlw	low _errString_Point
  1866  001940  6E12               	movwf	uartTx@ptr^0,c
  1867  001942  0E01               	movlw	high _errString_Point
  1868  001944  6E13               	movwf	(uartTx@ptr+1)^0,c
  1869  001946  0E28               	movlw	40
  1870  001948  6E14               	movwf	uartTx@length^0,c
  1871  00194A  EC6A  F011         	call	_uartTx	;wreg free
  1872                           
  1873                           ;usart.c: 67:             break;
  1874  00194E  EF04  F00D         	goto	l527
  1875  001952                     l3950:
  1876  001952  FFFF               	dw	65535	; assembler added errata NOP
  1877                           
  1878                           ;usart.c: 69:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  1879  001954  0E84               	movlw	low _errString_Bound
  1880  001956  6E12               	movwf	uartTx@ptr^0,c
  1881  001958  0E00               	movlw	high _errString_Bound
  1882  00195A  6E13               	movwf	(uartTx@ptr+1)^0,c
  1883  00195C  0E20               	movlw	32
  1884  00195E  6E14               	movwf	uartTx@length^0,c
  1885  001960  EC6A  F011         	call	_uartTx	;wreg free
  1886                           
  1887                           ;usart.c: 70:             break;
  1888  001964  EF04  F00D         	goto	l527
  1889  001968                     l3952:
  1890  001968  FFFF               	dw	65535	; assembler added errata NOP
  1891                           
  1892                           ;usart.c: 72:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  1893  00196A  0E00               	movlw	low _errString_PointZ
  1894  00196C  6E12               	movwf	uartTx@ptr^0,c
  1895  00196E  0E01               	movlw	high _errString_PointZ
  1896  001970  6E13               	movwf	(uartTx@ptr+1)^0,c
  1897  001972  0E34               	movlw	52
  1898  001974  6E14               	movwf	uartTx@length^0,c
  1899  001976  EC6A  F011         	call	_uartTx	;wreg free
  1900                           
  1901                           ;usart.c: 73:             break;
  1902  00197A  EF04  F00D         	goto	l527
  1903  00197E                     l3954:
  1904  00197E  FFFF               	dw	65535	; assembler added errata NOP
  1905                           
  1906                           ;usart.c: 75:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  1907  001980  0EAB               	movlw	low _errString_Fatal
  1908  001982  6E12               	movwf	uartTx@ptr^0,c
  1909  001984  0E01               	movlw	high _errString_Fatal
  1910  001986  6E13               	movwf	(uartTx@ptr+1)^0,c
  1911  001988  0E26               	movlw	38
  1912  00198A  6E14               	movwf	uartTx@length^0,c
  1913  00198C  EC6A  F011         	call	_uartTx	;wreg free
  1914                           
  1915                           ;usart.c: 76:             break;
  1916  001990  EF04  F00D         	goto	l527
  1917  001994                     l3956:
  1918  001994  FFFF               	dw	65535	; assembler added errata NOP
  1919                           
  1920                           ;usart.c: 78:             uartTx(&errString_Command[0], sizeof(errString_Command));
  1921  001996  0EC1               	movlw	low _errString_Command
  1922  001998  6E12               	movwf	uartTx@ptr^0,c
  1923  00199A  0E00               	movlw	high _errString_Command
  1924  00199C  6E13               	movwf	(uartTx@ptr+1)^0,c
  1925  00199E  0E17               	movlw	23
  1926  0019A0  6E14               	movwf	uartTx@length^0,c
  1927  0019A2  EC6A  F011         	call	_uartTx	;wreg free
  1928                           
  1929                           ;usart.c: 79:             break;
  1930  0019A6  EF04  F00D         	goto	l527
  1931  0019AA                     l3960:
  1932  0019AA  FFFF               	dw	65535	; assembler added errata NOP
  1933  0019AC  5018               	movf	printError@errCode^0,w,c
  1934  0019AE  6E16               	movwf	??_printError^0,c
  1935  0019B0  6A17               	clrf	(??_printError+1)^0,c
  1936                           
  1937                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1938                           ; Switch size 1, requested type "simple"
  1939                           ; Number of cases is 1, Range of values is 0 to 0
  1940                           ; switch strategies available:
  1941                           ; Name         Instructions Cycles
  1942                           ; simple_byte            4     3 (average)
  1943                           ;	Chosen strategy is simple_byte
  1944  0019B2  5017               	movf	(??_printError+1)^0,w,c
  1945  0019B4  0A00               	xorlw	0	; case 0
  1946  0019B6  B4D8               	btfsc	status,2,c
  1947  0019B8  EFE0  F00C         	goto	l4508
  1948  0019BC  EF04  F00D         	goto	l527
  1949  0019C0                     l4508:
  1950  0019C0  FFFF               	dw	65535	; assembler added errata NOP
  1951                           
  1952                           ; Switch size 1, requested type "simple"
  1953                           ; Number of cases is 8, Range of values is 1 to 8
  1954                           ; switch strategies available:
  1955                           ; Name         Instructions Cycles
  1956                           ; simple_byte           25    13 (average)
  1957                           ;	Chosen strategy is simple_byte
  1958  0019C2  5016               	movf	??_printError^0,w,c
  1959  0019C4  0A01               	xorlw	1	; case 1
  1960  0019C6  B4D8               	btfsc	status,2,c
  1961  0019C8  EF7D  F00C         	goto	l3942
  1962  0019CC  0A03               	xorlw	3	; case 2
  1963  0019CE  B4D8               	btfsc	status,2,c
  1964  0019D0  EF88  F00C         	goto	l3944
  1965  0019D4  0A01               	xorlw	1	; case 3
  1966  0019D6  B4D8               	btfsc	status,2,c
  1967  0019D8  EF93  F00C         	goto	l3946
  1968  0019DC  0A07               	xorlw	7	; case 4
  1969  0019DE  B4D8               	btfsc	status,2,c
  1970  0019E0  EF9E  F00C         	goto	l3948
  1971  0019E4  0A01               	xorlw	1	; case 5
  1972  0019E6  B4D8               	btfsc	status,2,c
  1973  0019E8  EFA9  F00C         	goto	l3950
  1974  0019EC  0A03               	xorlw	3	; case 6
  1975  0019EE  B4D8               	btfsc	status,2,c
  1976  0019F0  EFB4  F00C         	goto	l3952
  1977  0019F4  0A01               	xorlw	1	; case 7
  1978  0019F6  B4D8               	btfsc	status,2,c
  1979  0019F8  EFBF  F00C         	goto	l3954
  1980  0019FC  0A0F               	xorlw	15	; case 8
  1981  0019FE  B4D8               	btfsc	status,2,c
  1982  001A00  EFCA  F00C         	goto	l3956
  1983  001A04  EF04  F00D         	goto	l527
  1984  001A08                     l527:
  1985  001A08  FFFF               	dw	65535	; assembler added errata NOP
  1986  001A0A  0012               	return		;funcret
  1987  001A0C  FFFF               	dw	65535	; errata NOP
  1988  001A0E                     __end_of_printError:
  1989                           	callstack 0
  1990                           
  1991 ;; *************** function _uartTx *****************
  1992 ;; Defined at:
  1993 ;;		line 221 in file "usart.c"
  1994 ;; Parameters:    Size  Location     Type
  1995 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  1996 ;;		 -> errString_Command(23), errString_Fatal(38), errString_PointZ(52), errString_Bound(32), 
  1997 ;;		 -> errString_Point(40), errString_Reset(39), errString_ZEND(40), errString_Feed(29), 
  1998 ;;  length          1   19[COMRAM] unsigned char 
  1999 ;; Auto vars:     Size  Location     Type
  2000 ;;  i               1   20[COMRAM] unsigned char 
  2001 ;; Return value:  Size  Location     Type
  2002 ;;                  1    wreg      void 
  2003 ;; Registers used:
  2004 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2005 ;; Tracked objects:
  2006 ;;		On entry : 0/0
  2007 ;;		On exit  : 0/0
  2008 ;;		Unchanged: 0/0
  2009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2010 ;;      Params:         3       0       0       0       0       0       0
  2011 ;;      Locals:         1       0       0       0       0       0       0
  2012 ;;      Temps:          0       0       0       0       0       0       0
  2013 ;;      Totals:         4       0       0       0       0       0       0
  2014 ;;Total ram usage:        4 bytes
  2015 ;; Hardware stack levels used:    1
  2016 ;; Hardware stack levels required when called:    4
  2017 ;; This function calls:
  2018 ;;		Nothing
  2019 ;; This function is called by:
  2020 ;;		_printError
  2021 ;; This function uses a non-reentrant model
  2022 ;;
  2023                           
  2024                           	psect	text6
  2025  0022D4                     __ptext6:
  2026                           	callstack 0
  2027  0022D4                     _uartTx:
  2028                           	callstack 0
  2029  0022D4  FFFF               	dw	65535	; assembler added errata NOP
  2030  0022D6                     
  2031                           ;usart.c: 221: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 222: {;usa
      +                          rt.c: 224:     for(char i = 1; i < length; i++){
  2032  0022D6  0E01               	movlw	1
  2033  0022D8  6E15               	movwf	uartTx@i^0,c
  2034  0022DA  EF83  F011         	goto	l3442
  2035  0022DE                     l3438:
  2036  0022DE  FFFF               	dw	65535	; assembler added errata NOP
  2037                           
  2038                           ;usart.c: 226:         TXREG = *ptr;
  2039  0022E0  C012  FFD9         	movff	uartTx@ptr,fsr2l
  2040  0022E4  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  2041  0022E8  50DF               	movf	indf2,w,c
  2042  0022EA  6EAD               	movwf	173,c	;volatile
  2043  0022EC                     l582:
  2044  0022EC  FFFF               	dw	65535	; assembler added errata NOP
  2045  0022EE  A2AC               	btfss	172,1,c	;volatile
  2046  0022F0  EF7C  F011         	goto	u2481
  2047  0022F4  EF7F  F011         	goto	u2480
  2048  0022F8                     u2481:
  2049  0022F8  FFFF               	dw	65535	; assembler added errata NOP
  2050  0022FA  EF76  F011         	goto	l582
  2051  0022FE                     u2480:
  2052  0022FE  FFFF               	dw	65535	; assembler added errata NOP
  2053  002300                     
  2054                           ;usart.c: 230:         ptr++;
  2055  002300  4A12               	infsnz	uartTx@ptr^0,f,c
  2056  002302  2A13               	incf	(uartTx@ptr+1)^0,f,c
  2057                           
  2058                           ;usart.c: 231:     }
  2059  002304  2A15               	incf	uartTx@i^0,f,c
  2060  002306                     l3442:
  2061  002306  FFFF               	dw	65535	; assembler added errata NOP
  2062  002308  5014               	movf	uartTx@length^0,w,c
  2063  00230A  5C15               	subwf	uartTx@i^0,w,c
  2064  00230C  A0D8               	btfss	status,0,c
  2065  00230E  EF8B  F011         	goto	u2491
  2066  002312  EF8E  F011         	goto	u2490
  2067  002316                     u2491:
  2068  002316  FFFF               	dw	65535	; assembler added errata NOP
  2069  002318  EF6F  F011         	goto	l3438
  2070  00231C                     u2490:
  2071  00231C  FFFF               	dw	65535	; assembler added errata NOP
  2072  00231E  0012               	return		;funcret
  2073  002320  FFFF               	dw	65535	; errata NOP
  2074  002322                     __end_of_uartTx:
  2075                           	callstack 0
  2076                           
  2077 ;; *************** function _shiftData *****************
  2078 ;; Defined at:
  2079 ;;		line 120 in file "usart.c"
  2080 ;; Parameters:    Size  Location     Type
  2081 ;;		None
  2082 ;; Auto vars:     Size  Location     Type
  2083 ;;  i               1   19[COMRAM] unsigned char 
  2084 ;; Return value:  Size  Location     Type
  2085 ;;                  1    wreg      void 
  2086 ;; Registers used:
  2087 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2088 ;; Tracked objects:
  2089 ;;		On entry : 0/0
  2090 ;;		On exit  : 0/0
  2091 ;;		Unchanged: 0/0
  2092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2093 ;;      Params:         0       0       0       0       0       0       0
  2094 ;;      Locals:         1       0       0       0       0       0       0
  2095 ;;      Temps:          2       0       0       0       0       0       0
  2096 ;;      Totals:         3       0       0       0       0       0       0
  2097 ;;Total ram usage:        3 bytes
  2098 ;; Hardware stack levels used:    1
  2099 ;; Hardware stack levels required when called:    4
  2100 ;; This function calls:
  2101 ;;		Nothing
  2102 ;; This function is called by:
  2103 ;;		_main
  2104 ;; This function uses a non-reentrant model
  2105 ;;
  2106                           
  2107                           	psect	text7
  2108  00221C                     __ptext7:
  2109                           	callstack 0
  2110  00221C                     _shiftData:
  2111                           	callstack 0
  2112  00221C  FFFF               	dw	65535	; assembler added errata NOP
  2113  00221E                     
  2114                           ;usart.c: 121:     char i;;usart.c: 123:     for(i = 0; i < 4; i++){
  2115  00221E  0E00               	movlw	0
  2116  002220  6E14               	movwf	shiftData@i^0,c
  2117  002222                     l4202:
  2118  002222  FFFF               	dw	65535	; assembler added errata NOP
  2119                           
  2120                           ;usart.c: 124:         dataSequence[i] = dataSequence[i+1];
  2121  002224  5014               	movf	shiftData@i^0,w,c
  2122  002226  6E12               	movwf	??_shiftData^0,c
  2123  002228  6A13               	clrf	(??_shiftData+1)^0,c
  2124  00222A  90D8               	bcf	status,0,c
  2125  00222C  3612               	rlcf	??_shiftData^0,f,c
  2126  00222E  3613               	rlcf	(??_shiftData+1)^0,f,c
  2127  002230  90D8               	bcf	status,0,c
  2128  002232  3612               	rlcf	??_shiftData^0,f,c
  2129  002234  3613               	rlcf	(??_shiftData+1)^0,f,c
  2130  002236  0EDC               	movlw	low (_dataSequence+4)
  2131  002238  2412               	addwf	??_shiftData^0,w,c
  2132  00223A  6ED9               	movwf	fsr2l,c
  2133  00223C  0E00               	movlw	high (_dataSequence+4)
  2134  00223E  2013               	addwfc	(??_shiftData+1)^0,w,c
  2135  002240  6EDA               	movwf	fsr2h,c
  2136  002242  5014               	movf	shiftData@i^0,w,c
  2137  002244  0D04               	mullw	4
  2138  002246  0ED8               	movlw	low _dataSequence
  2139  002248  24F3               	addwf	243,w,c
  2140  00224A  6EE1               	movwf	fsr1l,c
  2141  00224C  0E00               	movlw	high _dataSequence
  2142  00224E  20F4               	addwfc	prodh,w,c
  2143  002250  6EE2               	movwf	fsr1h,c
  2144  002252  CFDE FFE6          	movff	postinc2,postinc1
  2145  002256  CFDE FFE6          	movff	postinc2,postinc1
  2146  00225A  CFDE FFE6          	movff	postinc2,postinc1
  2147  00225E  CFDE FFE6          	movff	postinc2,postinc1
  2148  002262                     
  2149                           ;usart.c: 125:     }
  2150  002262  2A14               	incf	shiftData@i^0,f,c
  2151  002264  0E03               	movlw	3
  2152  002266  6414               	cpfsgt	shiftData@i^0,c
  2153  002268  EF38  F011         	goto	u3501
  2154  00226C  EF3B  F011         	goto	u3500
  2155  002270                     u3501:
  2156  002270  FFFF               	dw	65535	; assembler added errata NOP
  2157  002272  EF11  F011         	goto	l4202
  2158  002276                     u3500:
  2159  002276  FFFF               	dw	65535	; assembler added errata NOP
  2160  002278  0012               	return		;funcret
  2161  00227A  FFFF               	dw	65535	; errata NOP
  2162  00227C                     __end_of_shiftData:
  2163                           	callstack 0
  2164                           
  2165 ;; *************** function _resetPosition *****************
  2166 ;; Defined at:
  2167 ;;		line 158 in file "motors.c"
  2168 ;; Parameters:    Size  Location     Type
  2169 ;;		None
  2170 ;; Auto vars:     Size  Location     Type
  2171 ;;  keepMovingZ     1   23[COMRAM] unsigned char 
  2172 ;;  keepMovingY     1   22[COMRAM] unsigned char 
  2173 ;;  keepMovingX     1   21[COMRAM] unsigned char 
  2174 ;; Return value:  Size  Location     Type
  2175 ;;                  1    wreg      unsigned char 
  2176 ;; Registers used:
  2177 ;;		wreg, status,2, status,0, cstack
  2178 ;; Tracked objects:
  2179 ;;		On entry : 0/0
  2180 ;;		On exit  : 0/0
  2181 ;;		Unchanged: 0/0
  2182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2183 ;;      Params:         0       0       0       0       0       0       0
  2184 ;;      Locals:         3       0       0       0       0       0       0
  2185 ;;      Temps:          0       0       0       0       0       0       0
  2186 ;;      Totals:         3       0       0       0       0       0       0
  2187 ;;Total ram usage:        3 bytes
  2188 ;; Hardware stack levels used:    1
  2189 ;; Hardware stack levels required when called:    5
  2190 ;; This function calls:
  2191 ;;		_enableMotor
  2192 ;;		_resetStep
  2193 ;;		_setDecay
  2194 ;;		_setDirection
  2195 ;;		_setStep
  2196 ;;		_stepMade
  2197 ;; This function is called by:
  2198 ;;		_main
  2199 ;; This function uses a non-reentrant model
  2200 ;;
  2201                           
  2202                           	psect	text8
  2203  00118A                     __ptext8:
  2204                           	callstack 0
  2205  00118A                     _resetPosition:
  2206                           	callstack 0
  2207  00118A  FFFF               	dw	65535	; assembler added errata NOP
  2208  00118C                     
  2209                           ;motors.c: 160:     setStep(0, 0);
  2210  00118C  0E00               	movlw	0
  2211  00118E  6E12               	movwf	setStep@motor^0,c
  2212  001190  0E00               	movlw	0
  2213  001192  EC87  F00E         	call	_setStep
  2214                           
  2215                           ;motors.c: 161:     setStep(1, 0);
  2216  001196  0E00               	movlw	0
  2217  001198  6E12               	movwf	setStep@motor^0,c
  2218  00119A  0E01               	movlw	1
  2219  00119C  EC87  F00E         	call	_setStep
  2220                           
  2221                           ;motors.c: 162:     setStep(2, 0);
  2222  0011A0  0E00               	movlw	0
  2223  0011A2  6E12               	movwf	setStep@motor^0,c
  2224  0011A4  0E02               	movlw	2
  2225  0011A6  EC87  F00E         	call	_setStep
  2226                           
  2227                           ;motors.c: 164:     setDirection(0, 0);
  2228  0011AA  0E00               	movlw	0
  2229  0011AC  6E12               	movwf	setDirection@motor^0,c
  2230  0011AE  0E00               	movlw	0
  2231  0011B0  ECD4  F010         	call	_setDirection
  2232                           
  2233                           ;motors.c: 165:     setDirection(0, 1);
  2234  0011B4  0E01               	movlw	1
  2235  0011B6  6E12               	movwf	setDirection@motor^0,c
  2236  0011B8  0E00               	movlw	0
  2237  0011BA  ECD4  F010         	call	_setDirection
  2238                           
  2239                           ;motors.c: 166:     setDirection(0, 2);
  2240  0011BE  0E02               	movlw	2
  2241  0011C0  6E12               	movwf	setDirection@motor^0,c
  2242  0011C2  0E00               	movlw	0
  2243  0011C4  ECD4  F010         	call	_setDirection
  2244                           
  2245                           ;motors.c: 168:     setDecay(1, 0);
  2246  0011C8  0E00               	movlw	0
  2247  0011CA  6E12               	movwf	setDecay@motor^0,c
  2248  0011CC  0E01               	movlw	1
  2249  0011CE  EC60  F010         	call	_setDecay
  2250                           
  2251                           ;motors.c: 169:     setDecay(1, 1);
  2252  0011D2  0E01               	movlw	1
  2253  0011D4  6E12               	movwf	setDecay@motor^0,c
  2254  0011D6  0E01               	movlw	1
  2255  0011D8  EC60  F010         	call	_setDecay
  2256                           
  2257                           ;motors.c: 170:     setDecay(1, 2);
  2258  0011DC  0E02               	movlw	2
  2259  0011DE  6E12               	movwf	setDecay@motor^0,c
  2260  0011E0  0E01               	movlw	1
  2261  0011E2  EC60  F010         	call	_setDecay
  2262                           
  2263                           ;motors.c: 172:     enableMotor(0, 0);
  2264  0011E6  0E00               	movlw	0
  2265  0011E8  6E12               	movwf	enableMotor@motor^0,c
  2266  0011EA  0E00               	movlw	0
  2267  0011EC  EC9A  F010         	call	_enableMotor
  2268                           
  2269                           ;motors.c: 173:     enableMotor(0, 1);
  2270  0011F0  0E01               	movlw	1
  2271  0011F2  6E12               	movwf	enableMotor@motor^0,c
  2272  0011F4  0E00               	movlw	0
  2273  0011F6  EC9A  F010         	call	_enableMotor
  2274                           
  2275                           ;motors.c: 174:     enableMotor(0, 2);
  2276  0011FA  0E02               	movlw	2
  2277  0011FC  6E12               	movwf	enableMotor@motor^0,c
  2278  0011FE  0E00               	movlw	0
  2279  001200  EC9A  F010         	call	_enableMotor
  2280  001204                     
  2281                           ;motors.c: 178:     unsigned char keepMovingX = 1;
  2282  001204  0E01               	movlw	1
  2283  001206  6E16               	movwf	resetPosition@keepMovingX^0,c
  2284  001208                     
  2285                           ;motors.c: 179:     unsigned char keepMovingY = 1;
  2286  001208  0E01               	movlw	1
  2287  00120A  6E17               	movwf	resetPosition@keepMovingY^0,c
  2288  00120C                     
  2289                           ;motors.c: 180:     unsigned char keepMovingZ = 1;
  2290  00120C  0E01               	movlw	1
  2291  00120E  6E18               	movwf	resetPosition@keepMovingZ^0,c
  2292  001210                     
  2293                           ;motors.c: 183:     T2CONbits.TMR2ON = 1;
  2294  001210  84CA               	bsf	202,2,c	;volatile
  2295  001212                     
  2296                           ;motors.c: 185:     tm0Error = 0;
  2297  001212  0E00               	movlw	0
  2298  001214  6E5C               	movwf	(_tm0Error+1)^0,c
  2299  001216  0E00               	movlw	0
  2300  001218  6E5B               	movwf	_tm0Error^0,c
  2301  00121A                     
  2302                           ;motors.c: 186:     tm0Limit = 100;
  2303  00121A  0E64               	movlw	100
  2304  00121C  6E68               	movwf	_tm0Limit^0,c
  2305  00121E                     
  2306                           ;motors.c: 187:     T0CONbits.TMR0ON = 1;
  2307  00121E  8ED5               	bsf	213,7,c	;volatile
  2308                           
  2309                           ;motors.c: 189:     while(keepMovingX || keepMovingY || keepMovingZ){
  2310  001220  EF93  F009         	goto	l4028
  2311  001224                     l4006:
  2312  001224  FFFF               	dw	65535	; assembler added errata NOP
  2313                           
  2314                           ;motors.c: 192:         if(tm0Error){
  2315  001226  505B               	movf	_tm0Error^0,w,c
  2316  001228  105C               	iorwf	(_tm0Error+1)^0,w,c
  2317  00122A  B4D8               	btfsc	status,2,c
  2318  00122C  EF1A  F009         	goto	u3331
  2319  001230  EF1D  F009         	goto	u3330
  2320  001234                     u3331:
  2321  001234  FFFF               	dw	65535	; assembler added errata NOP
  2322  001236  EF27  F009         	goto	l115
  2323  00123A                     u3330:
  2324  00123A  FFFF               	dw	65535	; assembler added errata NOP
  2325  00123C                     
  2326                           ;motors.c: 194:             LATAbits.LATA2 = 0;
  2327  00123C  9489               	bcf	137,2,c	;volatile
  2328                           
  2329                           ;motors.c: 195:             LATBbits.LATB4 = 0;
  2330  00123E  988A               	bcf	138,4,c	;volatile
  2331                           
  2332                           ;motors.c: 196:             LATCbits.LATC2 = 0;
  2333  001240  948B               	bcf	139,2,c	;volatile
  2334  001242                     
  2335                           ;motors.c: 198:             tm0Error = 3;
  2336  001242  0E00               	movlw	0
  2337  001244  6E5C               	movwf	(_tm0Error+1)^0,c
  2338  001246  0E03               	movlw	3
  2339  001248  6E5B               	movwf	_tm0Error^0,c
  2340                           
  2341                           ;motors.c: 199:             break;
  2342  00124A  EFB1  F009         	goto	l116
  2343  00124E                     l115:
  2344  00124E  FFFF               	dw	65535	; assembler added errata NOP
  2345                           
  2346                           ;motors.c: 206:         if(PORTEbits.RE0 || !keepMovingX){
  2347  001250  B084               	btfsc	132,0,c	;volatile
  2348  001252  EF2D  F009         	goto	u3341
  2349  001256  EF30  F009         	goto	u3340
  2350  00125A                     u3341:
  2351  00125A  FFFF               	dw	65535	; assembler added errata NOP
  2352  00125C  EF3A  F009         	goto	l4014
  2353  001260                     u3340:
  2354  001260  FFFF               	dw	65535	; assembler added errata NOP
  2355  001262  5016               	movf	resetPosition@keepMovingX^0,w,c
  2356  001264  A4D8               	btfss	status,2,c
  2357  001266  EF37  F009         	goto	u3351
  2358  00126A  EF3A  F009         	goto	u3350
  2359  00126E                     u3351:
  2360  00126E  FFFF               	dw	65535	; assembler added errata NOP
  2361  001270  EF3F  F009         	goto	l117
  2362  001274                     u3350:
  2363  001274                     l4014:
  2364  001274  FFFF               	dw	65535	; assembler added errata NOP
  2365                           
  2366                           ;motors.c: 208:             keepMovingX = 0;
  2367  001276  0E00               	movlw	0
  2368  001278  6E16               	movwf	resetPosition@keepMovingX^0,c
  2369                           
  2370                           ;motors.c: 209:         }else{
  2371  00127A  EF41  F009         	goto	l120
  2372  00127E                     l117:
  2373  00127E  FFFF               	dw	65535	; assembler added errata NOP
  2374                           
  2375                           ;motors.c: 211:             LATAbits.LATA2 = 1;
  2376  001280  8489               	bsf	137,2,c	;volatile
  2377  001282                     l120:
  2378  001282  FFFF               	dw	65535	; assembler added errata NOP
  2379                           
  2380                           ;motors.c: 215:         if(PORTEbits.RE1 || !keepMovingY){
  2381  001284  B284               	btfsc	132,1,c	;volatile
  2382  001286  EF47  F009         	goto	u3361
  2383  00128A  EF4A  F009         	goto	u3360
  2384  00128E                     u3361:
  2385  00128E  FFFF               	dw	65535	; assembler added errata NOP
  2386  001290  EF54  F009         	goto	l4018
  2387  001294                     u3360:
  2388  001294  FFFF               	dw	65535	; assembler added errata NOP
  2389  001296  5017               	movf	resetPosition@keepMovingY^0,w,c
  2390  001298  A4D8               	btfss	status,2,c
  2391  00129A  EF51  F009         	goto	u3371
  2392  00129E  EF54  F009         	goto	u3370
  2393  0012A2                     u3371:
  2394  0012A2  FFFF               	dw	65535	; assembler added errata NOP
  2395  0012A4  EF59  F009         	goto	l121
  2396  0012A8                     u3370:
  2397  0012A8                     l4018:
  2398  0012A8  FFFF               	dw	65535	; assembler added errata NOP
  2399                           
  2400                           ;motors.c: 217:             keepMovingY = 0;
  2401  0012AA  0E00               	movlw	0
  2402  0012AC  6E17               	movwf	resetPosition@keepMovingY^0,c
  2403                           
  2404                           ;motors.c: 218:         }else{
  2405  0012AE  EF5B  F009         	goto	l124
  2406  0012B2                     l121:
  2407  0012B2  FFFF               	dw	65535	; assembler added errata NOP
  2408                           
  2409                           ;motors.c: 220:             LATBbits.LATB4 = 1;
  2410  0012B4  888A               	bsf	138,4,c	;volatile
  2411  0012B6                     l124:
  2412  0012B6  FFFF               	dw	65535	; assembler added errata NOP
  2413                           
  2414                           ;motors.c: 224:         if(PORTEbits.RE2 || !keepMovingZ){
  2415  0012B8  B484               	btfsc	132,2,c	;volatile
  2416  0012BA  EF61  F009         	goto	u3381
  2417  0012BE  EF64  F009         	goto	u3380
  2418  0012C2                     u3381:
  2419  0012C2  FFFF               	dw	65535	; assembler added errata NOP
  2420  0012C4  EF6E  F009         	goto	l4022
  2421  0012C8                     u3380:
  2422  0012C8  FFFF               	dw	65535	; assembler added errata NOP
  2423  0012CA  5018               	movf	resetPosition@keepMovingZ^0,w,c
  2424  0012CC  A4D8               	btfss	status,2,c
  2425  0012CE  EF6B  F009         	goto	u3391
  2426  0012D2  EF6E  F009         	goto	u3390
  2427  0012D6                     u3391:
  2428  0012D6  FFFF               	dw	65535	; assembler added errata NOP
  2429  0012D8  EF73  F009         	goto	l125
  2430  0012DC                     u3390:
  2431  0012DC                     l4022:
  2432  0012DC  FFFF               	dw	65535	; assembler added errata NOP
  2433                           
  2434                           ;motors.c: 226:             keepMovingZ = 0;
  2435  0012DE  0E00               	movlw	0
  2436  0012E0  6E18               	movwf	resetPosition@keepMovingZ^0,c
  2437                           
  2438                           ;motors.c: 227:         }else{
  2439  0012E2  EF75  F009         	goto	l4024
  2440  0012E6                     l125:
  2441  0012E6  FFFF               	dw	65535	; assembler added errata NOP
  2442                           
  2443                           ;motors.c: 229:             LATCbits.LATC2 = 1;
  2444  0012E8  848B               	bsf	139,2,c	;volatile
  2445  0012EA                     l4024:
  2446  0012EA  FFFF               	dw	65535	; assembler added errata NOP
  2447  0012EC  EC38  F012         	call	_stepMade	;wreg free
  2448  0012F0  5012               	movf	?_stepMade^0,w,c
  2449  0012F2  1013               	iorwf	(?_stepMade+1)^0,w,c
  2450  0012F4  B4D8               	btfsc	status,2,c
  2451  0012F6  EF7F  F009         	goto	u3401
  2452  0012FA  EF82  F009         	goto	u3400
  2453  0012FE                     u3401:
  2454  0012FE  FFFF               	dw	65535	; assembler added errata NOP
  2455  001300  EF75  F009         	goto	l4024
  2456  001304                     u3400:
  2457  001304  FFFF               	dw	65535	; assembler added errata NOP
  2458  001306                     
  2459                           ;motors.c: 236:         LATAbits.LATA2 = 0;
  2460  001306  9489               	bcf	137,2,c	;volatile
  2461                           
  2462                           ;motors.c: 237:         LATBbits.LATB4 = 0;
  2463  001308  988A               	bcf	138,4,c	;volatile
  2464                           
  2465                           ;motors.c: 238:         LATCbits.LATC2 = 0;
  2466  00130A  948B               	bcf	139,2,c	;volatile
  2467  00130C                     l4026:
  2468  00130C  FFFF               	dw	65535	; assembler added errata NOP
  2469  00130E  EC38  F012         	call	_stepMade	;wreg free
  2470  001312  5012               	movf	?_stepMade^0,w,c
  2471  001314  1013               	iorwf	(?_stepMade+1)^0,w,c
  2472  001316  B4D8               	btfsc	status,2,c
  2473  001318  EF90  F009         	goto	u3411
  2474  00131C  EF93  F009         	goto	u3410
  2475  001320                     u3411:
  2476  001320  FFFF               	dw	65535	; assembler added errata NOP
  2477  001322  EF86  F009         	goto	l4026
  2478  001326                     u3410:
  2479  001326                     l4028:
  2480  001326  FFFF               	dw	65535	; assembler added errata NOP
  2481                           
  2482                           ;motors.c: 189:     while(keepMovingX || keepMovingY || keepMovingZ){
  2483  001328  5016               	movf	resetPosition@keepMovingX^0,w,c
  2484  00132A  A4D8               	btfss	status,2,c
  2485  00132C  EF9A  F009         	goto	u3421
  2486  001330  EF9D  F009         	goto	u3420
  2487  001334                     u3421:
  2488  001334  FFFF               	dw	65535	; assembler added errata NOP
  2489  001336  EF12  F009         	goto	l4006
  2490  00133A                     u3420:
  2491  00133A  FFFF               	dw	65535	; assembler added errata NOP
  2492  00133C  5017               	movf	resetPosition@keepMovingY^0,w,c
  2493  00133E  A4D8               	btfss	status,2,c
  2494  001340  EFA4  F009         	goto	u3431
  2495  001344  EFA7  F009         	goto	u3430
  2496  001348                     u3431:
  2497  001348  FFFF               	dw	65535	; assembler added errata NOP
  2498  00134A  EF12  F009         	goto	l4006
  2499  00134E                     u3430:
  2500  00134E  FFFF               	dw	65535	; assembler added errata NOP
  2501  001350  5018               	movf	resetPosition@keepMovingZ^0,w,c
  2502  001352  A4D8               	btfss	status,2,c
  2503  001354  EFAE  F009         	goto	u3441
  2504  001358  EFB1  F009         	goto	u3440
  2505  00135C                     u3441:
  2506  00135C  FFFF               	dw	65535	; assembler added errata NOP
  2507  00135E  EF12  F009         	goto	l4006
  2508  001362                     u3440:
  2509  001362                     l116:
  2510  001362  FFFF               	dw	65535	; assembler added errata NOP
  2511                           
  2512                           ;motors.c: 245:     T0CONbits.TMR0ON = 0;
  2513  001364  9ED5               	bcf	213,7,c	;volatile
  2514                           
  2515                           ;motors.c: 246:     T2CONbits.TMR2ON = 0;
  2516  001366  94CA               	bcf	202,2,c	;volatile
  2517  001368                     
  2518                           ;motors.c: 248:     TMR0 = 0;
  2519  001368  0E00               	movlw	0
  2520  00136A  6ED7               	movwf	215,c	;volatile
  2521  00136C  0E00               	movlw	0
  2522  00136E  6ED6               	movwf	214,c	;volatile
  2523                           
  2524                           ;motors.c: 249:     TMR2 = 0;
  2525  001370  0E00               	movlw	0
  2526  001372  6ECC               	movwf	204,c	;volatile
  2527  001374                     
  2528                           ;motors.c: 252:     resetStep();
  2529  001374  EC94  F012         	call	_resetStep	;wreg free
  2530  001378                     
  2531                           ;motors.c: 255:     return(tm0Error);
  2532  001378  505B               	movf	_tm0Error^0,w,c
  2533  00137A  0012               	return		;funcret
  2534  00137C  FFFF               	dw	65535	; errata NOP
  2535  00137E                     __end_of_resetPosition:
  2536                           	callstack 0
  2537                           
  2538 ;; *************** function _setStep *****************
  2539 ;; Defined at:
  2540 ;;		line 67 in file "motors.c"
  2541 ;; Parameters:    Size  Location     Type
  2542 ;;  step            1    wreg     unsigned char 
  2543 ;;  motor           1   17[COMRAM] unsigned char 
  2544 ;; Auto vars:     Size  Location     Type
  2545 ;;  step            1   20[COMRAM] unsigned char 
  2546 ;; Return value:  Size  Location     Type
  2547 ;;                  1    wreg      void 
  2548 ;; Registers used:
  2549 ;;		wreg, status,2, status,0
  2550 ;; Tracked objects:
  2551 ;;		On entry : 0/0
  2552 ;;		On exit  : 0/0
  2553 ;;		Unchanged: 0/0
  2554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2555 ;;      Params:         1       0       0       0       0       0       0
  2556 ;;      Locals:         1       0       0       0       0       0       0
  2557 ;;      Temps:          2       0       0       0       0       0       0
  2558 ;;      Totals:         4       0       0       0       0       0       0
  2559 ;;Total ram usage:        4 bytes
  2560 ;; Hardware stack levels used:    1
  2561 ;; Hardware stack levels required when called:    4
  2562 ;; This function calls:
  2563 ;;		Nothing
  2564 ;; This function is called by:
  2565 ;;		_resetPosition
  2566 ;; This function uses a non-reentrant model
  2567 ;;
  2568                           
  2569                           	psect	text9
  2570  001D0E                     __ptext9:
  2571                           	callstack 0
  2572  001D0E                     _setStep:
  2573                           	callstack 0
  2574  001D0E  FFFF               	dw	65535	; assembler added errata NOP
  2575                           
  2576                           ;incstack = 0
  2577                           ;setStep@step stored from wreg
  2578  001D10  6E15               	movwf	setStep@step^0,c
  2579  001D12                     
  2580                           ;motors.c: 68:     switch(motor){
  2581  001D12  EFD4  F00E         	goto	l3682
  2582  001D16                     l3674:
  2583  001D16  FFFF               	dw	65535	; assembler added errata NOP
  2584                           
  2585                           ;motors.c: 71:             LATAbits.LATA5 = (step & 0x01);
  2586  001D18  C015  F013         	movff	setStep@step,??_setStep
  2587  001D1C  0E01               	movlw	1
  2588  001D1E  1613               	andwf	??_setStep^0,f,c
  2589  001D20  3A13               	swapf	??_setStep^0,f,c
  2590  001D22  4613               	rlncf	??_setStep^0,f,c
  2591  001D24  5089               	movf	137,w,c	;volatile
  2592  001D26  1813               	xorwf	??_setStep^0,w,c
  2593  001D28  0BDF               	andlw	-33
  2594  001D2A  1813               	xorwf	??_setStep^0,w,c
  2595  001D2C  6E89               	movwf	137,c	;volatile
  2596                           
  2597                           ;motors.c: 73:             LATBbits.LATB0 = (step & 0x02);
  2598  001D2E  C015  F013         	movff	setStep@step,??_setStep
  2599  001D32  0E02               	movlw	2
  2600  001D34  1613               	andwf	??_setStep^0,f,c
  2601  001D36  508A               	movf	138,w,c	;volatile
  2602  001D38  1813               	xorwf	??_setStep^0,w,c
  2603  001D3A  0BFE               	andlw	-2
  2604  001D3C  1813               	xorwf	??_setStep^0,w,c
  2605  001D3E  6E8A               	movwf	138,c	;volatile
  2606                           
  2607                           ;motors.c: 74:             break;
  2608  001D40  EFEF  F00E         	goto	l83
  2609  001D44                     l3676:
  2610  001D44  FFFF               	dw	65535	; assembler added errata NOP
  2611                           
  2612                           ;motors.c: 76:             LATBbits.LATB6 = (step & 0x01);
  2613  001D46  C015  F013         	movff	setStep@step,??_setStep
  2614  001D4A  0E01               	movlw	1
  2615  001D4C  1613               	andwf	??_setStep^0,f,c
  2616  001D4E  3A13               	swapf	??_setStep^0,f,c
  2617  001D50  4613               	rlncf	??_setStep^0,f,c
  2618  001D52  4613               	rlncf	??_setStep^0,f,c
  2619  001D54  508A               	movf	138,w,c	;volatile
  2620  001D56  1813               	xorwf	??_setStep^0,w,c
  2621  001D58  0BBF               	andlw	-65
  2622  001D5A  1813               	xorwf	??_setStep^0,w,c
  2623  001D5C  6E8A               	movwf	138,c	;volatile
  2624                           
  2625                           ;motors.c: 77:             LATBbits.LATB7 = (step & 0x02);
  2626  001D5E  C015  F013         	movff	setStep@step,??_setStep
  2627  001D62  0E02               	movlw	2
  2628  001D64  1613               	andwf	??_setStep^0,f,c
  2629  001D66  3213               	rrcf	??_setStep^0,f,c
  2630  001D68  3213               	rrcf	??_setStep^0,f,c
  2631  001D6A  508A               	movf	138,w,c	;volatile
  2632  001D6C  1813               	xorwf	??_setStep^0,w,c
  2633  001D6E  0B7F               	andlw	-129
  2634  001D70  1813               	xorwf	??_setStep^0,w,c
  2635  001D72  6E8A               	movwf	138,c	;volatile
  2636                           
  2637                           ;motors.c: 78:             break;
  2638  001D74  EFEF  F00E         	goto	l83
  2639  001D78                     l3678:
  2640  001D78  FFFF               	dw	65535	; assembler added errata NOP
  2641                           
  2642                           ;motors.c: 80:             LATCbits.LATC4 = (step & 0x01);
  2643  001D7A  C015  F013         	movff	setStep@step,??_setStep
  2644  001D7E  0E01               	movlw	1
  2645  001D80  1613               	andwf	??_setStep^0,f,c
  2646  001D82  3A13               	swapf	??_setStep^0,f,c
  2647  001D84  508B               	movf	139,w,c	;volatile
  2648  001D86  1813               	xorwf	??_setStep^0,w,c
  2649  001D88  0BEF               	andlw	-17
  2650  001D8A  1813               	xorwf	??_setStep^0,w,c
  2651  001D8C  6E8B               	movwf	139,c	;volatile
  2652                           
  2653                           ;motors.c: 81:             LATCbits.LATC5 = (step & 0x02);
  2654  001D8E  C015  F013         	movff	setStep@step,??_setStep
  2655  001D92  0E02               	movlw	2
  2656  001D94  1613               	andwf	??_setStep^0,f,c
  2657  001D96  3A13               	swapf	??_setStep^0,f,c
  2658  001D98  4613               	rlncf	??_setStep^0,f,c
  2659  001D9A  508B               	movf	139,w,c	;volatile
  2660  001D9C  1813               	xorwf	??_setStep^0,w,c
  2661  001D9E  0BDF               	andlw	-33
  2662  001DA0  1813               	xorwf	??_setStep^0,w,c
  2663  001DA2  6E8B               	movwf	139,c	;volatile
  2664                           
  2665                           ;motors.c: 82:             break;
  2666  001DA4  EFEF  F00E         	goto	l83
  2667  001DA8                     l3682:
  2668  001DA8  FFFF               	dw	65535	; assembler added errata NOP
  2669  001DAA  5012               	movf	setStep@motor^0,w,c
  2670  001DAC  6E13               	movwf	??_setStep^0,c
  2671  001DAE  6A14               	clrf	(??_setStep+1)^0,c
  2672                           
  2673                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2674                           ; Switch size 1, requested type "simple"
  2675                           ; Number of cases is 1, Range of values is 0 to 0
  2676                           ; switch strategies available:
  2677                           ; Name         Instructions Cycles
  2678                           ; simple_byte            4     3 (average)
  2679                           ;	Chosen strategy is simple_byte
  2680  001DB0  5014               	movf	(??_setStep+1)^0,w,c
  2681  001DB2  0A00               	xorlw	0	; case 0
  2682  001DB4  B4D8               	btfsc	status,2,c
  2683  001DB6  EFDF  F00E         	goto	l4510
  2684  001DBA  EFEF  F00E         	goto	l83
  2685  001DBE                     l4510:
  2686  001DBE  FFFF               	dw	65535	; assembler added errata NOP
  2687                           
  2688                           ; Switch size 1, requested type "simple"
  2689                           ; Number of cases is 3, Range of values is 0 to 2
  2690                           ; switch strategies available:
  2691                           ; Name         Instructions Cycles
  2692                           ; simple_byte           10     6 (average)
  2693                           ;	Chosen strategy is simple_byte
  2694  001DC0  5013               	movf	??_setStep^0,w,c
  2695  001DC2  0A00               	xorlw	0	; case 0
  2696  001DC4  B4D8               	btfsc	status,2,c
  2697  001DC6  EF8B  F00E         	goto	l3674
  2698  001DCA  0A01               	xorlw	1	; case 1
  2699  001DCC  B4D8               	btfsc	status,2,c
  2700  001DCE  EFA2  F00E         	goto	l3676
  2701  001DD2  0A03               	xorlw	3	; case 2
  2702  001DD4  B4D8               	btfsc	status,2,c
  2703  001DD6  EFBC  F00E         	goto	l3678
  2704  001DDA  EFEF  F00E         	goto	l83
  2705  001DDE                     l83:
  2706  001DDE  FFFF               	dw	65535	; assembler added errata NOP
  2707  001DE0  0012               	return		;funcret
  2708  001DE2  FFFF               	dw	65535	; errata NOP
  2709  001DE4                     __end_of_setStep:
  2710                           	callstack 0
  2711                           
  2712 ;; *************** function _setDecay *****************
  2713 ;; Defined at:
  2714 ;;		line 136 in file "motors.c"
  2715 ;; Parameters:    Size  Location     Type
  2716 ;;  decay           1    wreg     unsigned char 
  2717 ;;  motor           1   17[COMRAM] unsigned char 
  2718 ;; Auto vars:     Size  Location     Type
  2719 ;;  decay           1   20[COMRAM] unsigned char 
  2720 ;; Return value:  Size  Location     Type
  2721 ;;                  1    wreg      void 
  2722 ;; Registers used:
  2723 ;;		wreg, status,2, status,0
  2724 ;; Tracked objects:
  2725 ;;		On entry : 0/0
  2726 ;;		On exit  : 0/0
  2727 ;;		Unchanged: 0/0
  2728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2729 ;;      Params:         1       0       0       0       0       0       0
  2730 ;;      Locals:         1       0       0       0       0       0       0
  2731 ;;      Temps:          2       0       0       0       0       0       0
  2732 ;;      Totals:         4       0       0       0       0       0       0
  2733 ;;Total ram usage:        4 bytes
  2734 ;; Hardware stack levels used:    1
  2735 ;; Hardware stack levels required when called:    4
  2736 ;; This function calls:
  2737 ;;		Nothing
  2738 ;; This function is called by:
  2739 ;;		_resetPosition
  2740 ;; This function uses a non-reentrant model
  2741 ;;
  2742                           
  2743                           	psect	text10
  2744  0020C0                     __ptext10:
  2745                           	callstack 0
  2746  0020C0                     _setDecay:
  2747                           	callstack 0
  2748  0020C0  FFFF               	dw	65535	; assembler added errata NOP
  2749                           
  2750                           ;incstack = 0
  2751                           ;setDecay@decay stored from wreg
  2752  0020C2  6E15               	movwf	setDecay@decay^0,c
  2753  0020C4                     
  2754                           ;motors.c: 137:     switch(motor){
  2755  0020C4  EF7C  F010         	goto	l3714
  2756  0020C8                     l3706:
  2757  0020C8  FFFF               	dw	65535	; assembler added errata NOP
  2758                           
  2759                           ;motors.c: 139:             LATBbits.LATB2 = decay;
  2760  0020CA  B015               	btfsc	setDecay@decay^0,0,c
  2761  0020CC  D002               	bra	u2935
  2762  0020CE  948A               	bcf	138,2,c	;volatile
  2763  0020D0  D001               	bra	u2936
  2764  0020D2                     u2935:
  2765  0020D2  848A               	bsf	138,2,c	;volatile
  2766  0020D4                     u2936:
  2767                           
  2768                           ;motors.c: 140:             break;
  2769  0020D4  EF97  F010         	goto	l110
  2770  0020D8                     l3708:
  2771  0020D8  FFFF               	dw	65535	; assembler added errata NOP
  2772                           
  2773                           ;motors.c: 142:             LATCbits.LATC0 = decay;
  2774  0020DA  B015               	btfsc	setDecay@decay^0,0,c
  2775  0020DC  D002               	bra	u2945
  2776  0020DE  908B               	bcf	139,0,c	;volatile
  2777  0020E0  D001               	bra	u2946
  2778  0020E2                     u2945:
  2779  0020E2  808B               	bsf	139,0,c	;volatile
  2780  0020E4                     u2946:
  2781                           
  2782                           ;motors.c: 143:             break;
  2783  0020E4  EF97  F010         	goto	l110
  2784  0020E8                     l3710:
  2785  0020E8  FFFF               	dw	65535	; assembler added errata NOP
  2786                           
  2787                           ;motors.c: 145:             LATDbits.LATD0 = decay;
  2788  0020EA  B015               	btfsc	setDecay@decay^0,0,c
  2789  0020EC  D002               	bra	u2955
  2790  0020EE  908C               	bcf	140,0,c	;volatile
  2791  0020F0  D001               	bra	u2956
  2792  0020F2                     u2955:
  2793  0020F2  808C               	bsf	140,0,c	;volatile
  2794  0020F4                     u2956:
  2795                           
  2796                           ;motors.c: 146:             break;
  2797  0020F4  EF97  F010         	goto	l110
  2798  0020F8                     l3714:
  2799  0020F8  FFFF               	dw	65535	; assembler added errata NOP
  2800  0020FA  5012               	movf	setDecay@motor^0,w,c
  2801  0020FC  6E13               	movwf	??_setDecay^0,c
  2802  0020FE  6A14               	clrf	(??_setDecay+1)^0,c
  2803                           
  2804                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2805                           ; Switch size 1, requested type "simple"
  2806                           ; Number of cases is 1, Range of values is 0 to 0
  2807                           ; switch strategies available:
  2808                           ; Name         Instructions Cycles
  2809                           ; simple_byte            4     3 (average)
  2810                           ;	Chosen strategy is simple_byte
  2811  002100  5014               	movf	(??_setDecay+1)^0,w,c
  2812  002102  0A00               	xorlw	0	; case 0
  2813  002104  B4D8               	btfsc	status,2,c
  2814  002106  EF87  F010         	goto	l4512
  2815  00210A  EF97  F010         	goto	l110
  2816  00210E                     l4512:
  2817  00210E  FFFF               	dw	65535	; assembler added errata NOP
  2818                           
  2819                           ; Switch size 1, requested type "simple"
  2820                           ; Number of cases is 3, Range of values is 0 to 2
  2821                           ; switch strategies available:
  2822                           ; Name         Instructions Cycles
  2823                           ; simple_byte           10     6 (average)
  2824                           ;	Chosen strategy is simple_byte
  2825  002110  5013               	movf	??_setDecay^0,w,c
  2826  002112  0A00               	xorlw	0	; case 0
  2827  002114  B4D8               	btfsc	status,2,c
  2828  002116  EF64  F010         	goto	l3706
  2829  00211A  0A01               	xorlw	1	; case 1
  2830  00211C  B4D8               	btfsc	status,2,c
  2831  00211E  EF6C  F010         	goto	l3708
  2832  002122  0A03               	xorlw	3	; case 2
  2833  002124  B4D8               	btfsc	status,2,c
  2834  002126  EF74  F010         	goto	l3710
  2835  00212A  EF97  F010         	goto	l110
  2836  00212E                     l110:
  2837  00212E  FFFF               	dw	65535	; assembler added errata NOP
  2838  002130  0012               	return		;funcret
  2839  002132  FFFF               	dw	65535	; errata NOP
  2840  002134                     __end_of_setDecay:
  2841                           	callstack 0
  2842                           
  2843 ;; *************** function _enableMotor *****************
  2844 ;; Defined at:
  2845 ;;		line 94 in file "motors.c"
  2846 ;; Parameters:    Size  Location     Type
  2847 ;;  enable          1    wreg     unsigned char 
  2848 ;;  motor           1   17[COMRAM] unsigned char 
  2849 ;; Auto vars:     Size  Location     Type
  2850 ;;  enable          1   20[COMRAM] unsigned char 
  2851 ;; Return value:  Size  Location     Type
  2852 ;;                  1    wreg      void 
  2853 ;; Registers used:
  2854 ;;		wreg, status,2, status,0
  2855 ;; Tracked objects:
  2856 ;;		On entry : 0/0
  2857 ;;		On exit  : 0/0
  2858 ;;		Unchanged: 0/0
  2859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2860 ;;      Params:         1       0       0       0       0       0       0
  2861 ;;      Locals:         1       0       0       0       0       0       0
  2862 ;;      Temps:          2       0       0       0       0       0       0
  2863 ;;      Totals:         4       0       0       0       0       0       0
  2864 ;;Total ram usage:        4 bytes
  2865 ;; Hardware stack levels used:    1
  2866 ;; Hardware stack levels required when called:    4
  2867 ;; This function calls:
  2868 ;;		Nothing
  2869 ;; This function is called by:
  2870 ;;		_resetPosition
  2871 ;;		_main
  2872 ;; This function uses a non-reentrant model
  2873 ;;
  2874                           
  2875                           	psect	text11
  2876  002134                     __ptext11:
  2877                           	callstack 0
  2878  002134                     _enableMotor:
  2879                           	callstack 0
  2880  002134  FFFF               	dw	65535	; assembler added errata NOP
  2881                           
  2882                           ;incstack = 0
  2883                           ;enableMotor@enable stored from wreg
  2884  002136  6E15               	movwf	enableMotor@enable^0,c
  2885  002138                     
  2886                           ;motors.c: 95:     switch(motor){
  2887  002138  EFB6  F010         	goto	l3698
  2888  00213C                     l3690:
  2889  00213C  FFFF               	dw	65535	; assembler added errata NOP
  2890                           
  2891                           ;motors.c: 97:             LATAbits.LATA3 = enable;
  2892  00213E  B015               	btfsc	enableMotor@enable^0,0,c
  2893  002140  D002               	bra	u2905
  2894  002142  9689               	bcf	137,3,c	;volatile
  2895  002144  D001               	bra	u2906
  2896  002146                     u2905:
  2897  002146  8689               	bsf	137,3,c	;volatile
  2898  002148                     u2906:
  2899                           
  2900                           ;motors.c: 98:             break;
  2901  002148  EFD1  F010         	goto	l92
  2902  00214C                     l3692:
  2903  00214C  FFFF               	dw	65535	; assembler added errata NOP
  2904                           
  2905                           ;motors.c: 100:             LATBbits.LATB5 = enable;
  2906  00214E  B015               	btfsc	enableMotor@enable^0,0,c
  2907  002150  D002               	bra	u2915
  2908  002152  9A8A               	bcf	138,5,c	;volatile
  2909  002154  D001               	bra	u2916
  2910  002156                     u2915:
  2911  002156  8A8A               	bsf	138,5,c	;volatile
  2912  002158                     u2916:
  2913                           
  2914                           ;motors.c: 101:             break;
  2915  002158  EFD1  F010         	goto	l92
  2916  00215C                     l3694:
  2917  00215C  FFFF               	dw	65535	; assembler added errata NOP
  2918                           
  2919                           ;motors.c: 103:             LATCbits.LATC3 = enable;
  2920  00215E  B015               	btfsc	enableMotor@enable^0,0,c
  2921  002160  D002               	bra	u2925
  2922  002162  968B               	bcf	139,3,c	;volatile
  2923  002164  D001               	bra	u2926
  2924  002166                     u2925:
  2925  002166  868B               	bsf	139,3,c	;volatile
  2926  002168                     u2926:
  2927                           
  2928                           ;motors.c: 104:             break;
  2929  002168  EFD1  F010         	goto	l92
  2930  00216C                     l3698:
  2931  00216C  FFFF               	dw	65535	; assembler added errata NOP
  2932  00216E  5012               	movf	enableMotor@motor^0,w,c
  2933  002170  6E13               	movwf	??_enableMotor^0,c
  2934  002172  6A14               	clrf	(??_enableMotor+1)^0,c
  2935                           
  2936                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2937                           ; Switch size 1, requested type "simple"
  2938                           ; Number of cases is 1, Range of values is 0 to 0
  2939                           ; switch strategies available:
  2940                           ; Name         Instructions Cycles
  2941                           ; simple_byte            4     3 (average)
  2942                           ;	Chosen strategy is simple_byte
  2943  002174  5014               	movf	(??_enableMotor+1)^0,w,c
  2944  002176  0A00               	xorlw	0	; case 0
  2945  002178  B4D8               	btfsc	status,2,c
  2946  00217A  EFC1  F010         	goto	l4514
  2947  00217E  EFD1  F010         	goto	l92
  2948  002182                     l4514:
  2949  002182  FFFF               	dw	65535	; assembler added errata NOP
  2950                           
  2951                           ; Switch size 1, requested type "simple"
  2952                           ; Number of cases is 3, Range of values is 0 to 2
  2953                           ; switch strategies available:
  2954                           ; Name         Instructions Cycles
  2955                           ; simple_byte           10     6 (average)
  2956                           ;	Chosen strategy is simple_byte
  2957  002184  5013               	movf	??_enableMotor^0,w,c
  2958  002186  0A00               	xorlw	0	; case 0
  2959  002188  B4D8               	btfsc	status,2,c
  2960  00218A  EF9E  F010         	goto	l3690
  2961  00218E  0A01               	xorlw	1	; case 1
  2962  002190  B4D8               	btfsc	status,2,c
  2963  002192  EFA6  F010         	goto	l3692
  2964  002196  0A03               	xorlw	3	; case 2
  2965  002198  B4D8               	btfsc	status,2,c
  2966  00219A  EFAE  F010         	goto	l3694
  2967  00219E  EFD1  F010         	goto	l92
  2968  0021A2                     l92:
  2969  0021A2  FFFF               	dw	65535	; assembler added errata NOP
  2970  0021A4  0012               	return		;funcret
  2971  0021A6  FFFF               	dw	65535	; errata NOP
  2972  0021A8                     __end_of_enableMotor:
  2973                           	callstack 0
  2974                           
  2975 ;; *************** function _resetNewSequence *****************
  2976 ;; Defined at:
  2977 ;;		line 112 in file "usart.c"
  2978 ;; Parameters:    Size  Location     Type
  2979 ;;		None
  2980 ;; Auto vars:     Size  Location     Type
  2981 ;;		None
  2982 ;; Return value:  Size  Location     Type
  2983 ;;                  1    wreg      void 
  2984 ;; Registers used:
  2985 ;;		wreg, status,2
  2986 ;; Tracked objects:
  2987 ;;		On entry : 0/0
  2988 ;;		On exit  : 0/0
  2989 ;;		Unchanged: 0/0
  2990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2991 ;;      Params:         0       0       0       0       0       0       0
  2992 ;;      Locals:         0       0       0       0       0       0       0
  2993 ;;      Temps:          0       0       0       0       0       0       0
  2994 ;;      Totals:         0       0       0       0       0       0       0
  2995 ;;Total ram usage:        0 bytes
  2996 ;; Hardware stack levels used:    1
  2997 ;; Hardware stack levels required when called:    4
  2998 ;; This function calls:
  2999 ;;		Nothing
  3000 ;; This function is called by:
  3001 ;;		_main
  3002 ;; This function uses a non-reentrant model
  3003 ;;
  3004                           
  3005                           	psect	text12
  3006  002500                     __ptext12:
  3007                           	callstack 0
  3008  002500                     _resetNewSequence:
  3009                           	callstack 0
  3010  002500  FFFF               	dw	65535	; assembler added errata NOP
  3011  002502                     
  3012                           ;usart.c: 113:     _newSequence = 0;
  3013  002502  0E00               	movlw	0
  3014  002504  6E5F               	movwf	__newSequence^0,c
  3015  002506  0012               	return		;funcret
  3016  002508  FFFF               	dw	65535	; errata NOP
  3017  00250A                     __end_of_resetNewSequence:
  3018                           	callstack 0
  3019                           
  3020 ;; *************** function _reduceSeq *****************
  3021 ;; Defined at:
  3022 ;;		line 89 in file "usart.c"
  3023 ;; Parameters:    Size  Location     Type
  3024 ;;		None
  3025 ;; Auto vars:     Size  Location     Type
  3026 ;;		None
  3027 ;; Return value:  Size  Location     Type
  3028 ;;                  1    wreg      void 
  3029 ;; Registers used:
  3030 ;;		status,2, status,0
  3031 ;; Tracked objects:
  3032 ;;		On entry : 0/0
  3033 ;;		On exit  : 0/0
  3034 ;;		Unchanged: 0/0
  3035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3036 ;;      Params:         0       0       0       0       0       0       0
  3037 ;;      Locals:         0       0       0       0       0       0       0
  3038 ;;      Temps:          0       0       0       0       0       0       0
  3039 ;;      Totals:         0       0       0       0       0       0       0
  3040 ;;Total ram usage:        0 bytes
  3041 ;; Hardware stack levels used:    1
  3042 ;; Hardware stack levels required when called:    4
  3043 ;; This function calls:
  3044 ;;		Nothing
  3045 ;; This function is called by:
  3046 ;;		_main
  3047 ;; This function uses a non-reentrant model
  3048 ;;
  3049                           
  3050                           	psect	text13
  3051  002550                     __ptext13:
  3052                           	callstack 0
  3053  002550                     _reduceSeq:
  3054                           	callstack 0
  3055  002550  FFFF               	dw	65535	; assembler added errata NOP
  3056  002552                     
  3057                           ;usart.c: 90:     dataCounter--;
  3058  002552  0661               	decf	_dataCounter^0,f,c
  3059  002554  0012               	return		;funcret
  3060  002556  FFFF               	dw	65535	; errata NOP
  3061  002558                     __end_of_reduceSeq:
  3062                           	callstack 0
  3063                           
  3064 ;; *************** function _readSeq *****************
  3065 ;; Defined at:
  3066 ;;		line 96 in file "usart.c"
  3067 ;; Parameters:    Size  Location     Type
  3068 ;;		None
  3069 ;; Auto vars:     Size  Location     Type
  3070 ;;		None
  3071 ;; Return value:  Size  Location     Type
  3072 ;;                  1    wreg      unsigned char 
  3073 ;; Registers used:
  3074 ;;		wreg, status,2
  3075 ;; Tracked objects:
  3076 ;;		On entry : 0/0
  3077 ;;		On exit  : 0/0
  3078 ;;		Unchanged: 0/0
  3079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3080 ;;      Params:         0       0       0       0       0       0       0
  3081 ;;      Locals:         0       0       0       0       0       0       0
  3082 ;;      Temps:          0       0       0       0       0       0       0
  3083 ;;      Totals:         0       0       0       0       0       0       0
  3084 ;;Total ram usage:        0 bytes
  3085 ;; Hardware stack levels used:    1
  3086 ;; Hardware stack levels required when called:    4
  3087 ;; This function calls:
  3088 ;;		Nothing
  3089 ;; This function is called by:
  3090 ;;		_main
  3091 ;; This function uses a non-reentrant model
  3092 ;;
  3093                           
  3094                           	psect	text14
  3095  002558                     __ptext14:
  3096                           	callstack 0
  3097  002558                     _readSeq:
  3098                           	callstack 0
  3099  002558  FFFF               	dw	65535	; assembler added errata NOP
  3100  00255A                     
  3101                           ;usart.c: 97:     return dataCounter;
  3102  00255A  5061               	movf	_dataCounter^0,w,c
  3103  00255C  0012               	return		;funcret
  3104  00255E  FFFF               	dw	65535	; errata NOP
  3105  002560                     __end_of_readSeq:
  3106                           	callstack 0
  3107                           
  3108 ;; *************** function _newSequence *****************
  3109 ;; Defined at:
  3110 ;;		line 104 in file "usart.c"
  3111 ;; Parameters:    Size  Location     Type
  3112 ;;		None
  3113 ;; Auto vars:     Size  Location     Type
  3114 ;;		None
  3115 ;; Return value:  Size  Location     Type
  3116 ;;                  1    wreg      unsigned char 
  3117 ;; Registers used:
  3118 ;;		wreg, status,2
  3119 ;; Tracked objects:
  3120 ;;		On entry : 0/0
  3121 ;;		On exit  : 0/0
  3122 ;;		Unchanged: 0/0
  3123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3124 ;;      Params:         0       0       0       0       0       0       0
  3125 ;;      Locals:         0       0       0       0       0       0       0
  3126 ;;      Temps:          0       0       0       0       0       0       0
  3127 ;;      Totals:         0       0       0       0       0       0       0
  3128 ;;Total ram usage:        0 bytes
  3129 ;; Hardware stack levels used:    1
  3130 ;; Hardware stack levels required when called:    4
  3131 ;; This function calls:
  3132 ;;		Nothing
  3133 ;; This function is called by:
  3134 ;;		_main
  3135 ;; This function uses a non-reentrant model
  3136 ;;
  3137                           
  3138                           	psect	text15
  3139  002560                     __ptext15:
  3140                           	callstack 0
  3141  002560                     _newSequence:
  3142                           	callstack 0
  3143  002560  FFFF               	dw	65535	; assembler added errata NOP
  3144  002562                     
  3145                           ;usart.c: 105:     return _newSequence;
  3146  002562  505F               	movf	__newSequence^0,w,c
  3147  002564  0012               	return		;funcret
  3148  002566  FFFF               	dw	65535	; errata NOP
  3149  002568                     __end_of_newSequence:
  3150                           	callstack 0
  3151                           
  3152 ;; *************** function _interruptInit *****************
  3153 ;; Defined at:
  3154 ;;		line 99 in file "main.c"
  3155 ;; Parameters:    Size  Location     Type
  3156 ;;		None
  3157 ;; Auto vars:     Size  Location     Type
  3158 ;;		None
  3159 ;; Return value:  Size  Location     Type
  3160 ;;                  1    wreg      void 
  3161 ;; Registers used:
  3162 ;;		None
  3163 ;; Tracked objects:
  3164 ;;		On entry : 0/0
  3165 ;;		On exit  : 0/0
  3166 ;;		Unchanged: 0/0
  3167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3168 ;;      Params:         0       0       0       0       0       0       0
  3169 ;;      Locals:         0       0       0       0       0       0       0
  3170 ;;      Temps:          0       0       0       0       0       0       0
  3171 ;;      Totals:         0       0       0       0       0       0       0
  3172 ;;Total ram usage:        0 bytes
  3173 ;; Hardware stack levels used:    1
  3174 ;; Hardware stack levels required when called:    4
  3175 ;; This function calls:
  3176 ;;		Nothing
  3177 ;; This function is called by:
  3178 ;;		_main
  3179 ;; This function uses a non-reentrant model
  3180 ;;
  3181                           
  3182                           	psect	text16
  3183  002370                     __ptext16:
  3184                           	callstack 0
  3185  002370                     _interruptInit:
  3186                           	callstack 0
  3187  002370  FFFF               	dw	65535	; assembler added errata NOP
  3188  002372                     
  3189                           ;main.c: 101:     if(!INTCONbits.GIE){
  3190  002372  BEF2               	btfsc	242,7,c	;volatile
  3191  002374  EFBE  F011         	goto	u3451
  3192  002378  EFC1  F011         	goto	u3450
  3193  00237C                     u3451:
  3194  00237C  FFFF               	dw	65535	; assembler added errata NOP
  3195  00237E  EFC3  F011         	goto	l330
  3196  002382                     u3450:
  3197  002382  FFFF               	dw	65535	; assembler added errata NOP
  3198  002384                     
  3199                           ;main.c: 102:         INTCONbits.GIE = 1;
  3200  002384  8EF2               	bsf	242,7,c	;volatile
  3201  002386                     l330:
  3202  002386  FFFF               	dw	65535	; assembler added errata NOP
  3203                           
  3204                           ;main.c: 104:     if(!INTCONbits.PEIE){
  3205  002388  BCF2               	btfsc	242,6,c	;volatile
  3206  00238A  EFC9  F011         	goto	u3461
  3207  00238E  EFCC  F011         	goto	u3460
  3208  002392                     u3461:
  3209  002392  FFFF               	dw	65535	; assembler added errata NOP
  3210  002394  EFCE  F011         	goto	l331
  3211  002398                     u3460:
  3212  002398  FFFF               	dw	65535	; assembler added errata NOP
  3213  00239A                     
  3214                           ;main.c: 105:         INTCONbits.PEIE = 1;
  3215  00239A  8CF2               	bsf	242,6,c	;volatile
  3216  00239C                     l331:
  3217  00239C  FFFF               	dw	65535	; assembler added errata NOP
  3218                           
  3219                           ;main.c: 109:     RCONbits.IPEN = 1;
  3220  00239E  8ED0               	bsf	208,7,c	;volatile
  3221                           
  3222                           ;main.c: 110:     INTCONbits.T0IE = 1;
  3223  0023A0  8AF2               	bsf	242,5,c	;volatile
  3224                           
  3225                           ;main.c: 111:     PIE1bits.TMR2IE = 1;
  3226  0023A2  829D               	bsf	157,1,c	;volatile
  3227                           
  3228                           ;main.c: 112:     PIE1bits.RC1IE = 1;
  3229  0023A4  8A9D               	bsf	157,5,c	;volatile
  3230  0023A6  0012               	return		;funcret
  3231  0023A8  FFFF               	dw	65535	; errata NOP
  3232  0023AA                     __end_of_interruptInit:
  3233                           	callstack 0
  3234                           
  3235 ;; *************** function _initPinMotors *****************
  3236 ;; Defined at:
  3237 ;;		line 42 in file "motors.c"
  3238 ;; Parameters:    Size  Location     Type
  3239 ;;		None
  3240 ;; Auto vars:     Size  Location     Type
  3241 ;;		None
  3242 ;; Return value:  Size  Location     Type
  3243 ;;                  1    wreg      void 
  3244 ;; Registers used:
  3245 ;;		wreg, status,2, status,0
  3246 ;; Tracked objects:
  3247 ;;		On entry : 0/0
  3248 ;;		On exit  : 0/0
  3249 ;;		Unchanged: 0/0
  3250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3251 ;;      Params:         0       0       0       0       0       0       0
  3252 ;;      Locals:         0       0       0       0       0       0       0
  3253 ;;      Temps:          0       0       0       0       0       0       0
  3254 ;;      Totals:         0       0       0       0       0       0       0
  3255 ;;Total ram usage:        0 bytes
  3256 ;; Hardware stack levels used:    1
  3257 ;; Hardware stack levels required when called:    4
  3258 ;; This function calls:
  3259 ;;		Nothing
  3260 ;; This function is called by:
  3261 ;;		_main
  3262 ;; This function uses a non-reentrant model
  3263 ;;
  3264                           
  3265                           	psect	text17
  3266  0023AA                     __ptext17:
  3267                           	callstack 0
  3268  0023AA                     _initPinMotors:
  3269                           	callstack 0
  3270  0023AA  FFFF               	dw	65535	; assembler added errata NOP
  3271  0023AC                     
  3272                           ;motors.c: 44:     ADCON1bits.PCFG = 0x06;
  3273  0023AC  50C1               	movf	193,w,c	;volatile
  3274  0023AE  0BF0               	andlw	-16
  3275  0023B0  0906               	iorlw	6
  3276  0023B2  6EC1               	movwf	193,c	;volatile
  3277  0023B4                     
  3278                           ;motors.c: 45:     TRISA &= 0b11010001;
  3279  0023B4  0ED1               	movlw	209
  3280  0023B6  1692               	andwf	146,f,c	;volatile
  3281  0023B8                     
  3282                           ;motors.c: 47:     TRISB &= 0b00000010;
  3283  0023B8  0E02               	movlw	2
  3284  0023BA  1693               	andwf	147,f,c	;volatile
  3285  0023BC                     
  3286                           ;motors.c: 48:     TRISC &= 0b11000000;
  3287  0023BC  0EC0               	movlw	192
  3288  0023BE  1694               	andwf	148,f,c	;volatile
  3289  0023C0                     
  3290                           ;motors.c: 49:     TRISD &= 0b11000000;
  3291  0023C0  0EC0               	movlw	192
  3292  0023C2  1695               	andwf	149,f,c	;volatile
  3293  0023C4                     
  3294                           ;motors.c: 52:     TRISEbits.TRISE0 = 1;
  3295  0023C4  8096               	bsf	150,0,c	;volatile
  3296  0023C6                     
  3297                           ;motors.c: 53:     TRISEbits.TRISE1 = 1;
  3298  0023C6  8296               	bsf	150,1,c	;volatile
  3299  0023C8                     
  3300                           ;motors.c: 54:     TRISEbits.TRISE2 = 1;
  3301  0023C8  8496               	bsf	150,2,c	;volatile
  3302  0023CA                     
  3303                           ;motors.c: 57:     TRISDbits.TRISD7 = 1;
  3304  0023CA  8E95               	bsf	149,7,c	;volatile
  3305  0023CC  0012               	return		;funcret
  3306  0023CE  FFFF               	dw	65535	; errata NOP
  3307  0023D0                     __end_of_initPinMotors:
  3308                           	callstack 0
  3309                           
  3310 ;; *************** function _initADC *****************
  3311 ;; Defined at:
  3312 ;;		line 18 in file "adc.c"
  3313 ;; Parameters:    Size  Location     Type
  3314 ;;		None
  3315 ;; Auto vars:     Size  Location     Type
  3316 ;;		None
  3317 ;; Return value:  Size  Location     Type
  3318 ;;                  1    wreg      void 
  3319 ;; Registers used:
  3320 ;;		wreg, status,2
  3321 ;; Tracked objects:
  3322 ;;		On entry : 0/0
  3323 ;;		On exit  : 0/0
  3324 ;;		Unchanged: 0/0
  3325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3326 ;;      Params:         0       0       0       0       0       0       0
  3327 ;;      Locals:         0       0       0       0       0       0       0
  3328 ;;      Temps:          0       0       0       0       0       0       0
  3329 ;;      Totals:         0       0       0       0       0       0       0
  3330 ;;Total ram usage:        0 bytes
  3331 ;; Hardware stack levels used:    1
  3332 ;; Hardware stack levels required when called:    4
  3333 ;; This function calls:
  3334 ;;		Nothing
  3335 ;; This function is called by:
  3336 ;;		_main
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           	psect	text18
  3341  0023D0                     __ptext18:
  3342                           	callstack 0
  3343  0023D0                     _initADC:
  3344                           	callstack 0
  3345  0023D0  FFFF               	dw	65535	; assembler added errata NOP
  3346  0023D2                     
  3347                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  3348  0023D2  50C2               	movf	194,w,c	;volatile
  3349  0023D4  0B3F               	andlw	-193
  3350  0023D6  0940               	iorlw	64
  3351  0023D8  6EC2               	movwf	194,c	;volatile
  3352  0023DA                     
  3353                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  3354  0023DA  8CC1               	bsf	193,6,c	;volatile
  3355                           
  3356                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  3357  0023DC  0EC7               	movlw	-57
  3358  0023DE  16C2               	andwf	194,f,c	;volatile
  3359  0023E0                     
  3360                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  3361  0023E0  94C2               	bcf	194,2,c	;volatile
  3362  0023E2                     
  3363                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  3364  0023E2  90C2               	bcf	194,0,c	;volatile
  3365  0023E4                     
  3366                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  3367  0023E4  9EC1               	bcf	193,7,c	;volatile
  3368                           
  3369                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  3370  0023E6  50C1               	movf	193,w,c	;volatile
  3371  0023E8  0BF0               	andlw	-16
  3372  0023EA  090E               	iorlw	14
  3373  0023EC  6EC1               	movwf	193,c	;volatile
  3374  0023EE                     
  3375                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  3376  0023EE  8C9D               	bsf	157,6,c	;volatile
  3377  0023F0                     
  3378                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  3379  0023F0  8C9F               	bsf	159,6,c	;volatile
  3380  0023F2  0012               	return		;funcret
  3381  0023F4  FFFF               	dw	65535	; errata NOP
  3382  0023F6                     __end_of_initADC:
  3383                           	callstack 0
  3384                           
  3385 ;; *************** function _getNewSequence *****************
  3386 ;; Defined at:
  3387 ;;		line 213 in file "usart.c"
  3388 ;; Parameters:    Size  Location     Type
  3389 ;;		None
  3390 ;; Auto vars:     Size  Location     Type
  3391 ;;		None
  3392 ;; Return value:  Size  Location     Type
  3393 ;;                  2   17[COMRAM] PTR struct .
  3394 ;; Registers used:
  3395 ;;		wreg, status,2, status,0
  3396 ;; Tracked objects:
  3397 ;;		On entry : 0/0
  3398 ;;		On exit  : 0/0
  3399 ;;		Unchanged: 0/0
  3400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3401 ;;      Params:         2       0       0       0       0       0       0
  3402 ;;      Locals:         0       0       0       0       0       0       0
  3403 ;;      Temps:          0       0       0       0       0       0       0
  3404 ;;      Totals:         2       0       0       0       0       0       0
  3405 ;;Total ram usage:        2 bytes
  3406 ;; Hardware stack levels used:    1
  3407 ;; Hardware stack levels required when called:    4
  3408 ;; This function calls:
  3409 ;;		Nothing
  3410 ;; This function is called by:
  3411 ;;		_main
  3412 ;; This function uses a non-reentrant model
  3413 ;;
  3414                           
  3415                           	psect	text19
  3416  002496                     __ptext19:
  3417                           	callstack 0
  3418  002496                     _getNewSequence:
  3419                           	callstack 0
  3420  002496  FFFF               	dw	65535	; assembler added errata NOP
  3421  002498                     
  3422                           ;usart.c: 214:     return(&newSequenceData);
  3423  002498  0EEC               	movlw	low _newSequenceData
  3424  00249A  6E12               	movwf	?_getNewSequence^0,c
  3425  00249C  0E00               	movlw	high _newSequenceData
  3426  00249E  6E13               	movwf	(?_getNewSequence+1)^0,c
  3427  0024A0  0012               	return		;funcret
  3428  0024A2  FFFF               	dw	65535	; errata NOP
  3429  0024A4                     __end_of_getNewSequence:
  3430                           	callstack 0
  3431                           
  3432 ;; *************** function _fatalError *****************
  3433 ;; Defined at:
  3434 ;;		line 100 in file "usart.c"
  3435 ;; Parameters:    Size  Location     Type
  3436 ;;		None
  3437 ;; Auto vars:     Size  Location     Type
  3438 ;;		None
  3439 ;; Return value:  Size  Location     Type
  3440 ;;                  1    wreg      unsigned char 
  3441 ;; Registers used:
  3442 ;;		wreg, status,2
  3443 ;; Tracked objects:
  3444 ;;		On entry : 0/0
  3445 ;;		On exit  : 0/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3448 ;;      Params:         0       0       0       0       0       0       0
  3449 ;;      Locals:         0       0       0       0       0       0       0
  3450 ;;      Temps:          0       0       0       0       0       0       0
  3451 ;;      Totals:         0       0       0       0       0       0       0
  3452 ;;Total ram usage:        0 bytes
  3453 ;; Hardware stack levels used:    1
  3454 ;; Hardware stack levels required when called:    4
  3455 ;; This function calls:
  3456 ;;		Nothing
  3457 ;; This function is called by:
  3458 ;;		_main
  3459 ;; This function uses a non-reentrant model
  3460 ;;
  3461                           
  3462                           	psect	text20
  3463  002568                     __ptext20:
  3464                           	callstack 0
  3465  002568                     _fatalError:
  3466                           	callstack 0
  3467  002568  FFFF               	dw	65535	; assembler added errata NOP
  3468  00256A                     
  3469                           ;usart.c: 101:     return _fatalError;
  3470  00256A  5060               	movf	__fatalError^0,w,c
  3471  00256C  0012               	return		;funcret
  3472  00256E  FFFF               	dw	65535	; errata NOP
  3473  002570                     __end_of_fatalError:
  3474                           	callstack 0
  3475                           
  3476 ;; *************** function _executeData *****************
  3477 ;; Defined at:
  3478 ;;		line 122 in file "main.c"
  3479 ;; Parameters:    Size  Location     Type
  3480 ;;		None
  3481 ;; Auto vars:     Size  Location     Type
  3482 ;;  data            2    9[BANK0 ] PTR struct .
  3483 ;;		 -> dataSequence(20), 
  3484 ;;  errCode         1    8[BANK0 ] unsigned char 
  3485 ;; Return value:  Size  Location     Type
  3486 ;;                  1    wreg      unsigned char 
  3487 ;; Registers used:
  3488 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3489 ;; Tracked objects:
  3490 ;;		On entry : 0/0
  3491 ;;		On exit  : 0/0
  3492 ;;		Unchanged: 0/0
  3493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3494 ;;      Params:         0       0       0       0       0       0       0
  3495 ;;      Locals:         0       3       0       0       0       0       0
  3496 ;;      Temps:          2       0       0       0       0       0       0
  3497 ;;      Totals:         2       3       0       0       0       0       0
  3498 ;;Total ram usage:        5 bytes
  3499 ;; Hardware stack levels used:    1
  3500 ;; Hardware stack levels required when called:    6
  3501 ;; This function calls:
  3502 ;;		_getData
  3503 ;;		_liftArm
  3504 ;;		_moveToPoint
  3505 ;;		_pickObject
  3506 ;;		_releaseObj
  3507 ;;		_rotateObj
  3508 ;;		_touchObject
  3509 ;;		_touchTherm
  3510 ;; This function is called by:
  3511 ;;		_main
  3512 ;; This function uses a non-reentrant model
  3513 ;;
  3514                           
  3515                           	psect	text21
  3516  000D04                     __ptext21:
  3517                           	callstack 0
  3518  000D04                     _executeData:
  3519                           	callstack 0
  3520  000D04  FFFF               	dw	65535	; assembler added errata NOP
  3521  000D06                     
  3522                           ;main.c: 123:     t_sequence *data = getData();
  3523  000D06  EC52  F012         	call	_getData	;wreg free
  3524  000D0A  C012  F0FD         	movff	?_getData,executeData@data
  3525  000D0E  C013  F0FE         	movff	?_getData+1,executeData@data+1
  3526  000D12                     
  3527                           ;main.c: 129:     switch(data->feederLine){
  3528  000D12  EF35  F007         	goto	l4162
  3529  000D16                     l4134:
  3530  000D16  FFFF               	dw	65535	; assembler added errata NOP
  3531                           
  3532                           ;main.c: 132:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0
      +                          ], feeder1Pos[1]);
  3533  000D18  C04E  F016         	movff	_posVector,moveToPoint@x1
  3534  000D1C  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3535  000D1E  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3536  000D22  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3537  000D24  0E0D               	movlw	low _feeder1Pos
  3538  000D26  6EF6               	movwf	tblptrl,c
  3539  000D28                     	if	1	;There is more than 1 active tblptr byte
  3540  000D28  0E06               	movlw	high _feeder1Pos
  3541  000D2A  6EF7               	movwf	tblptrh,c
  3542  000D2C                     	endif
  3543  000D2C                     	if	0	;There are less than 3 active tblptr bytes
  3544  000D2C                     	endif
  3545  000D2C  0008               	tblrd		*
  3546  000D2E  FFFF               	dw	65535	; errata NOP
  3547  000D30  50F5               	movf	tablat,w,c
  3548  000D32  6E1A               	movwf	moveToPoint@x2^0,c
  3549  000D34  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3550  000D36  0E0E               	movlw	low (_feeder1Pos+1)
  3551  000D38  6EF6               	movwf	tblptrl,c
  3552  000D3A  0E06               	movlw	high (_feeder1Pos+1)
  3553  000D3C  6EF7               	movwf	tblptrh,c
  3554  000D3E                     	if	0	;tblptru may be non-zero
  3555  000D3E                     	endif
  3556  000D3E                     	if	0	;tblptru may be non-zero
  3557  000D3E                     	endif
  3558  000D3E  0008               	tblrd		*
  3559  000D40  FFFF               	dw	65535	; errata NOP
  3560  000D42  50F5               	movf	tablat,w,c
  3561  000D44  6E1C               	movwf	moveToPoint@y2^0,c
  3562  000D46  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3563  000D48  EC21  F005         	call	_moveToPoint	;wreg free
  3564  000D4C  0100               	movlb	0	; () banked
  3565  000D4E  6FFC               	movwf	executeData@errCode& (0+255),b
  3566  000D50                     
  3567                           ; BSR set to: 0
  3568                           ;main.c: 134:             posVector[0] = feeder1Pos[0];
  3569  000D50  0E0D               	movlw	low _feeder1Pos
  3570  000D52  6EF6               	movwf	tblptrl,c
  3571  000D54                     	if	1	;There is more than 1 active tblptr byte
  3572  000D54  0E06               	movlw	high _feeder1Pos
  3573  000D56  6EF7               	movwf	tblptrh,c
  3574  000D58                     	endif
  3575  000D58                     	if	0	;There are less than 3 active tblptr bytes
  3576  000D58                     	endif
  3577  000D58  0008               	tblrd		*
  3578  000D5A  FFFF               	dw	65535	; errata NOP
  3579  000D5C  CFF5 F04E          	movff	tablat,_posVector
  3580  000D60                     
  3581                           ; BSR set to: 0
  3582                           ;main.c: 135:             posVector[1] = feeder1Pos[1];
  3583  000D60  0E0E               	movlw	low (_feeder1Pos+1)
  3584  000D62  6EF6               	movwf	tblptrl,c
  3585  000D64  0E06               	movlw	high (_feeder1Pos+1)
  3586  000D66  6EF7               	movwf	tblptrh,c
  3587  000D68                     	if	0	;tblptru may be non-zero
  3588  000D68                     	endif
  3589  000D68                     	if	0	;tblptru may be non-zero
  3590  000D68                     	endif
  3591  000D68  0008               	tblrd		*
  3592  000D6A  FFFF               	dw	65535	; errata NOP
  3593  000D6C  CFF5 F04F          	movff	tablat,_posVector+1
  3594                           
  3595                           ;main.c: 136:             break;
  3596  000D70  EF58  F007         	goto	l4164
  3597  000D74                     l4140:
  3598  000D74  FFFF               	dw	65535	; assembler added errata NOP
  3599                           
  3600                           ;main.c: 138:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3601  000D76  C04E  F016         	movff	_posVector,moveToPoint@x1
  3602  000D7A  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3603  000D7C  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3604  000D80  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3605  000D82  0E0B               	movlw	low _feeder2Pos
  3606  000D84  6EF6               	movwf	tblptrl,c
  3607  000D86                     	if	1	;There is more than 1 active tblptr byte
  3608  000D86  0E06               	movlw	high _feeder2Pos
  3609  000D88  6EF7               	movwf	tblptrh,c
  3610  000D8A                     	endif
  3611  000D8A                     	if	0	;There are less than 3 active tblptr bytes
  3612  000D8A                     	endif
  3613  000D8A  0008               	tblrd		*
  3614  000D8C  FFFF               	dw	65535	; errata NOP
  3615  000D8E  50F5               	movf	tablat,w,c
  3616  000D90  6E1A               	movwf	moveToPoint@x2^0,c
  3617  000D92  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3618  000D94  0E0C               	movlw	low (_feeder2Pos+1)
  3619  000D96  6EF6               	movwf	tblptrl,c
  3620  000D98  0E06               	movlw	high (_feeder2Pos+1)
  3621  000D9A  6EF7               	movwf	tblptrh,c
  3622  000D9C                     	if	0	;tblptru may be non-zero
  3623  000D9C                     	endif
  3624  000D9C                     	if	0	;tblptru may be non-zero
  3625  000D9C                     	endif
  3626  000D9C  0008               	tblrd		*
  3627  000D9E  FFFF               	dw	65535	; errata NOP
  3628  000DA0  50F5               	movf	tablat,w,c
  3629  000DA2  6E1C               	movwf	moveToPoint@y2^0,c
  3630  000DA4  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3631  000DA6  EC21  F005         	call	_moveToPoint	;wreg free
  3632  000DAA  0100               	movlb	0	; () banked
  3633  000DAC  6FFC               	movwf	executeData@errCode& (0+255),b
  3634  000DAE                     
  3635                           ; BSR set to: 0
  3636                           ;main.c: 139:             posVector[0] = feeder2Pos[0];
  3637  000DAE  0E0B               	movlw	low _feeder2Pos
  3638  000DB0  6EF6               	movwf	tblptrl,c
  3639  000DB2                     	if	1	;There is more than 1 active tblptr byte
  3640  000DB2  0E06               	movlw	high _feeder2Pos
  3641  000DB4  6EF7               	movwf	tblptrh,c
  3642  000DB6                     	endif
  3643  000DB6                     	if	0	;There are less than 3 active tblptr bytes
  3644  000DB6                     	endif
  3645  000DB6  0008               	tblrd		*
  3646  000DB8  FFFF               	dw	65535	; errata NOP
  3647  000DBA  CFF5 F04E          	movff	tablat,_posVector
  3648  000DBE                     
  3649                           ; BSR set to: 0
  3650                           ;main.c: 140:             posVector[1] = feeder2Pos[1];
  3651  000DBE  0E0C               	movlw	low (_feeder2Pos+1)
  3652  000DC0  6EF6               	movwf	tblptrl,c
  3653  000DC2  0E06               	movlw	high (_feeder2Pos+1)
  3654  000DC4  6EF7               	movwf	tblptrh,c
  3655  000DC6                     	if	0	;tblptru may be non-zero
  3656  000DC6                     	endif
  3657  000DC6                     	if	0	;tblptru may be non-zero
  3658  000DC6                     	endif
  3659  000DC6  0008               	tblrd		*
  3660  000DC8  FFFF               	dw	65535	; errata NOP
  3661  000DCA  CFF5 F04F          	movff	tablat,_posVector+1
  3662                           
  3663                           ;main.c: 141:             break;
  3664  000DCE  EF58  F007         	goto	l4164
  3665  000DD2                     l4146:
  3666  000DD2  FFFF               	dw	65535	; assembler added errata NOP
  3667                           
  3668                           ;main.c: 143:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3669  000DD4  C04E  F016         	movff	_posVector,moveToPoint@x1
  3670  000DD8  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3671  000DDA  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3672  000DDE  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3673  000DE0  0E09               	movlw	low _feeder3Pos
  3674  000DE2  6EF6               	movwf	tblptrl,c
  3675  000DE4                     	if	1	;There is more than 1 active tblptr byte
  3676  000DE4  0E06               	movlw	high _feeder3Pos
  3677  000DE6  6EF7               	movwf	tblptrh,c
  3678  000DE8                     	endif
  3679  000DE8                     	if	0	;There are less than 3 active tblptr bytes
  3680  000DE8                     	endif
  3681  000DE8  0008               	tblrd		*
  3682  000DEA  FFFF               	dw	65535	; errata NOP
  3683  000DEC  50F5               	movf	tablat,w,c
  3684  000DEE  6E1A               	movwf	moveToPoint@x2^0,c
  3685  000DF0  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3686  000DF2  0E0A               	movlw	low (_feeder3Pos+1)
  3687  000DF4  6EF6               	movwf	tblptrl,c
  3688  000DF6  0E06               	movlw	high (_feeder3Pos+1)
  3689  000DF8  6EF7               	movwf	tblptrh,c
  3690  000DFA                     	if	0	;tblptru may be non-zero
  3691  000DFA                     	endif
  3692  000DFA                     	if	0	;tblptru may be non-zero
  3693  000DFA                     	endif
  3694  000DFA  0008               	tblrd		*
  3695  000DFC  FFFF               	dw	65535	; errata NOP
  3696  000DFE  50F5               	movf	tablat,w,c
  3697  000E00  6E1C               	movwf	moveToPoint@y2^0,c
  3698  000E02  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3699  000E04  EC21  F005         	call	_moveToPoint	;wreg free
  3700  000E08  0100               	movlb	0	; () banked
  3701  000E0A  6FFC               	movwf	executeData@errCode& (0+255),b
  3702  000E0C                     
  3703                           ; BSR set to: 0
  3704                           ;main.c: 144:             posVector[0] = feeder3Pos[0];
  3705  000E0C  0E09               	movlw	low _feeder3Pos
  3706  000E0E  6EF6               	movwf	tblptrl,c
  3707  000E10                     	if	1	;There is more than 1 active tblptr byte
  3708  000E10  0E06               	movlw	high _feeder3Pos
  3709  000E12  6EF7               	movwf	tblptrh,c
  3710  000E14                     	endif
  3711  000E14                     	if	0	;There are less than 3 active tblptr bytes
  3712  000E14                     	endif
  3713  000E14  0008               	tblrd		*
  3714  000E16  FFFF               	dw	65535	; errata NOP
  3715  000E18  CFF5 F04E          	movff	tablat,_posVector
  3716  000E1C                     
  3717                           ; BSR set to: 0
  3718                           ;main.c: 145:             posVector[1] = feeder3Pos[1];
  3719  000E1C  0E0A               	movlw	low (_feeder3Pos+1)
  3720  000E1E  6EF6               	movwf	tblptrl,c
  3721  000E20  0E06               	movlw	high (_feeder3Pos+1)
  3722  000E22  6EF7               	movwf	tblptrh,c
  3723  000E24                     	if	0	;tblptru may be non-zero
  3724  000E24                     	endif
  3725  000E24                     	if	0	;tblptru may be non-zero
  3726  000E24                     	endif
  3727  000E24  0008               	tblrd		*
  3728  000E26  FFFF               	dw	65535	; errata NOP
  3729  000E28  CFF5 F04F          	movff	tablat,_posVector+1
  3730                           
  3731                           ;main.c: 146:             break;
  3732  000E2C  EF58  F007         	goto	l4164
  3733  000E30                     l4152:
  3734  000E30  FFFF               	dw	65535	; assembler added errata NOP
  3735                           
  3736                           ;main.c: 150:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3737  000E32  C04E  F016         	movff	_posVector,moveToPoint@x1
  3738  000E36  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3739  000E38  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3740  000E3C  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3741  000E3E  C057  F01A         	movff	_newFeeder,moveToPoint@x2
  3742  000E42  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3743  000E44  C058  F01C         	movff	_newFeeder+1,moveToPoint@y2
  3744  000E48  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3745  000E4A  EC21  F005         	call	_moveToPoint	;wreg free
  3746  000E4E  0100               	movlb	0	; () banked
  3747  000E50  6FFC               	movwf	executeData@errCode& (0+255),b
  3748  000E52                     
  3749                           ; BSR set to: 0
  3750                           ;main.c: 151:             posVector[0] = newFeeder[0];
  3751  000E52  C057  F04E         	movff	_newFeeder,_posVector
  3752  000E56                     
  3753                           ; BSR set to: 0
  3754                           ;main.c: 152:             posVector[1] = newFeeder[1];
  3755  000E56  C058  F04F         	movff	_newFeeder+1,_posVector+1
  3756                           
  3757                           ;main.c: 153:             break;
  3758  000E5A  EF58  F007         	goto	l4164
  3759  000E5E                     l4158:
  3760  000E5E  FFFF               	dw	65535	; assembler added errata NOP
  3761                           
  3762                           ;main.c: 157:             errCode = 1;
  3763  000E60  0E01               	movlw	1
  3764  000E62  0100               	movlb	0	; () banked
  3765  000E64  6FFC               	movwf	executeData@errCode& (0+255),b
  3766                           
  3767                           ;main.c: 158:             break;
  3768  000E66  EF58  F007         	goto	l4164
  3769  000E6A                     l4162:
  3770  000E6A  FFFF               	dw	65535	; assembler added errata NOP
  3771  000E6C  C0FD  FFD9         	movff	executeData@data,fsr2l
  3772  000E70  C0FE  FFDA         	movff	executeData@data+1,fsr2h
  3773  000E74  50DF               	movf	indf2,w,c
  3774  000E76  6E43               	movwf	??_executeData^0,c
  3775  000E78  6A44               	clrf	(??_executeData+1)^0,c
  3776                           
  3777                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3778                           ; Switch size 1, requested type "simple"
  3779                           ; Number of cases is 1, Range of values is 0 to 0
  3780                           ; switch strategies available:
  3781                           ; Name         Instructions Cycles
  3782                           ; simple_byte            4     3 (average)
  3783                           ;	Chosen strategy is simple_byte
  3784  000E7A  5044               	movf	(??_executeData+1)^0,w,c
  3785  000E7C  0A00               	xorlw	0	; case 0
  3786  000E7E  B4D8               	btfsc	status,2,c
  3787  000E80  EF44  F007         	goto	l4516
  3788  000E84  EF2F  F007         	goto	l4158
  3789  000E88                     l4516:
  3790  000E88  FFFF               	dw	65535	; assembler added errata NOP
  3791                           
  3792                           ; Switch size 1, requested type "simple"
  3793                           ; Number of cases is 4, Range of values is 0 to 255
  3794                           ; switch strategies available:
  3795                           ; Name         Instructions Cycles
  3796                           ; simple_byte           13     7 (average)
  3797                           ;	Chosen strategy is simple_byte
  3798  000E8A  5043               	movf	??_executeData^0,w,c
  3799  000E8C  0A00               	xorlw	0	; case 0
  3800  000E8E  B4D8               	btfsc	status,2,c
  3801  000E90  EF8B  F006         	goto	l4134
  3802  000E94  0A01               	xorlw	1	; case 1
  3803  000E96  B4D8               	btfsc	status,2,c
  3804  000E98  EFBA  F006         	goto	l4140
  3805  000E9C  0A03               	xorlw	3	; case 2
  3806  000E9E  B4D8               	btfsc	status,2,c
  3807  000EA0  EFE9  F006         	goto	l4146
  3808  000EA4  0AFD               	xorlw	253	; case 255
  3809  000EA6  B4D8               	btfsc	status,2,c
  3810  000EA8  EF18  F007         	goto	l4152
  3811  000EAC  EF2F  F007         	goto	l4158
  3812  000EB0                     l4164:
  3813  000EB0  FFFF               	dw	65535	; assembler added errata NOP
  3814                           
  3815                           ; BSR set to: 0
  3816                           ;main.c: 162:     if(!errCode){
  3817  000EB2  51FC               	movf	executeData@errCode& (0+255),w,b
  3818  000EB4  A4D8               	btfss	status,2,c
  3819  000EB6  EF5F  F007         	goto	u3481
  3820  000EBA  EF62  F007         	goto	u3480
  3821  000EBE                     u3481:
  3822  000EBE  FFFF               	dw	65535	; assembler added errata NOP
  3823  000EC0  EFC5  F007         	goto	l4186
  3824  000EC4                     u3480:
  3825  000EC4  FFFF               	dw	65535	; assembler added errata NOP
  3826  000EC6                     
  3827                           ; BSR set to: 0
  3828                           ;main.c: 165:         errCode = touchObject();
  3829  000EC6  EC0E  F00E         	call	_touchObject	;wreg free
  3830  000ECA  0100               	movlb	0	; () banked
  3831  000ECC  6FFC               	movwf	executeData@errCode& (0+255),b
  3832                           
  3833                           ;main.c: 167:         pickObject();
  3834  000ECE  EC0D  F012         	call	_pickObject	;wreg free
  3835                           
  3836                           ;main.c: 170:         errCode = liftArm();
  3837  000ED2  ECC5  F00F         	call	_liftArm	;wreg free
  3838  000ED6  0100               	movlb	0	; () banked
  3839  000ED8  6FFC               	movwf	executeData@errCode& (0+255),b
  3840  000EDA                     
  3841                           ; BSR set to: 0
  3842  000EDA  C04E  F016         	movff	_posVector,moveToPoint@x1
  3843  000EDE  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3844  000EE0  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3845  000EE4  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3846  000EE6  EE20 F001          	lfsr	2,1
  3847  000EEA  51FD               	movf	executeData@data& (0+255),w,b
  3848  000EEC  26D9               	addwf	fsr2l,f,c
  3849  000EEE  51FE               	movf	(executeData@data+1)& (0+255),w,b
  3850  000EF0  22DA               	addwfc	fsr2h,f,c
  3851  000EF2  50DF               	movf	indf2,w,c
  3852  000EF4  6E43               	movwf	??_executeData^0,c
  3853  000EF6  5043               	movf	??_executeData^0,w,c
  3854  000EF8  6E1A               	movwf	moveToPoint@x2^0,c
  3855  000EFA  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3856  000EFC  EE20 F002          	lfsr	2,2
  3857  000F00  51FD               	movf	executeData@data& (0+255),w,b
  3858  000F02  26D9               	addwf	fsr2l,f,c
  3859  000F04  51FE               	movf	(executeData@data+1)& (0+255),w,b
  3860  000F06  22DA               	addwfc	fsr2h,f,c
  3861  000F08  50DF               	movf	indf2,w,c
  3862  000F0A  6E44               	movwf	(??_executeData+1)^0,c
  3863  000F0C  5044               	movf	(??_executeData+1)^0,w,c
  3864  000F0E  6E1C               	movwf	moveToPoint@y2^0,c
  3865  000F10  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3866  000F12  EC21  F005         	call	_moveToPoint	;wreg free
  3867  000F16                     
  3868                           ;main.c: 174:         posVector[0] = data->posX;
  3869  000F16  0100               	movlb	0	; () banked
  3870  000F18  EE20 F001          	lfsr	2,1
  3871  000F1C  51FD               	movf	executeData@data& (0+255),w,b
  3872  000F1E  26D9               	addwf	fsr2l,f,c
  3873  000F20  51FE               	movf	(executeData@data+1)& (0+255),w,b
  3874  000F22  22DA               	addwfc	fsr2h,f,c
  3875  000F24  50DF               	movf	indf2,w,c
  3876  000F26  6E4E               	movwf	_posVector^0,c
  3877  000F28                     
  3878                           ; BSR set to: 0
  3879                           ;main.c: 175:         posVector[1] = data->posY;
  3880  000F28  EE20 F002          	lfsr	2,2
  3881  000F2C  51FD               	movf	executeData@data& (0+255),w,b
  3882  000F2E  26D9               	addwf	fsr2l,f,c
  3883  000F30  51FE               	movf	(executeData@data+1)& (0+255),w,b
  3884  000F32  22DA               	addwfc	fsr2h,f,c
  3885  000F34  50DF               	movf	indf2,w,c
  3886  000F36  6E4F               	movwf	(_posVector+1)^0,c
  3887  000F38                     
  3888                           ; BSR set to: 0
  3889                           ;main.c: 178:         rotAngle = data->rotation - rotAngle;
  3890  000F38  EE20 F003          	lfsr	2,3
  3891  000F3C  51FD               	movf	executeData@data& (0+255),w,b
  3892  000F3E  26D9               	addwf	fsr2l,f,c
  3893  000F40  51FE               	movf	(executeData@data+1)& (0+255),w,b
  3894  000F42  22DA               	addwfc	fsr2h,f,c
  3895  000F44  50DF               	movf	indf2,w,c
  3896  000F46  6E43               	movwf	??_executeData^0,c
  3897  000F48  5059               	movf	_rotAngle^0,w,c
  3898  000F4A  5C43               	subwf	??_executeData^0,w,c
  3899  000F4C  6E59               	movwf	_rotAngle^0,c
  3900  000F4E  505A               	movf	(_rotAngle+1)^0,w,c
  3901  000F50  A0D8               	btfss	status,0,c
  3902  000F52  285A               	incf	(_rotAngle+1)^0,w,c
  3903  000F54  6A5A               	clrf	(_rotAngle+1)^0,c
  3904  000F56  5E5A               	subwf	(_rotAngle+1)^0,f,c
  3905                           
  3906                           ;main.c: 180:         if(rotAngle < 0){
  3907  000F58  BE5A               	btfsc	(_rotAngle+1)^0,7,c
  3908  000F5A  EFB4  F007         	goto	u3490
  3909  000F5E  EFB1  F007         	goto	u3491
  3910  000F62                     u3491:
  3911  000F62  FFFF               	dw	65535	; assembler added errata NOP
  3912  000F64  EFB9  F007         	goto	l4178
  3913  000F68                     u3490:
  3914  000F68  FFFF               	dw	65535	; assembler added errata NOP
  3915  000F6A                     
  3916                           ; BSR set to: 0
  3917                           ;main.c: 181:             rotAngle += 360;
  3918  000F6A  0E68               	movlw	104
  3919  000F6C  2659               	addwf	_rotAngle^0,f,c
  3920  000F6E  0E01               	movlw	1
  3921  000F70  225A               	addwfc	(_rotAngle+1)^0,f,c
  3922  000F72                     l4178:
  3923  000F72  FFFF               	dw	65535	; assembler added errata NOP
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;main.c: 183:         rotateObj(rotAngle);
  3927  000F74  5059               	movf	_rotAngle^0,w,c
  3928  000F76  ECF2  F00E         	call	_rotateObj
  3929  000F7A  EC95  F00D         	call	_touchTherm	;wreg free
  3930  000F7E                     
  3931                           ;main.c: 188:         releaseObj();
  3932  000F7E  ECFB  F011         	call	_releaseObj	;wreg free
  3933  000F82                     
  3934                           ;main.c: 191:         errCode = liftArm();
  3935  000F82  ECC5  F00F         	call	_liftArm	;wreg free
  3936  000F86  0100               	movlb	0	; () banked
  3937  000F88  6FFC               	movwf	executeData@errCode& (0+255),b
  3938  000F8A                     l4186:
  3939  000F8A  FFFF               	dw	65535	; assembler added errata NOP
  3940                           
  3941                           ; BSR set to: 0
  3942                           ;main.c: 194:     return(errCode);
  3943  000F8C  51FC               	movf	executeData@errCode& (0+255),w,b
  3944  000F8E                     
  3945                           ; BSR set to: 0
  3946  000F8E  0012               	return		;funcret
  3947  000F90  FFFF               	dw	65535	; errata NOP
  3948  000F92                     __end_of_executeData:
  3949                           	callstack 0
  3950                           
  3951 ;; *************** function _touchTherm *****************
  3952 ;; Defined at:
  3953 ;;		line 455 in file "motors.c"
  3954 ;; Parameters:    Size  Location     Type
  3955 ;;		None
  3956 ;; Auto vars:     Size  Location     Type
  3957 ;;		None
  3958 ;; Return value:  Size  Location     Type
  3959 ;;                  1    wreg      unsigned char 
  3960 ;; Registers used:
  3961 ;;		wreg, status,2, status,0, cstack
  3962 ;; Tracked objects:
  3963 ;;		On entry : 0/0
  3964 ;;		On exit  : 0/0
  3965 ;;		Unchanged: 0/0
  3966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3967 ;;      Params:         0       0       0       0       0       0       0
  3968 ;;      Locals:         0       0       0       0       0       0       0
  3969 ;;      Temps:          0       0       0       0       0       0       0
  3970 ;;      Totals:         0       0       0       0       0       0       0
  3971 ;;Total ram usage:        0 bytes
  3972 ;; Hardware stack levels used:    1
  3973 ;; Hardware stack levels required when called:    5
  3974 ;; This function calls:
  3975 ;;		_resetStep
  3976 ;;		_resetTherm
  3977 ;;		_returnTherm
  3978 ;;		_setDirection
  3979 ;;		_startADC
  3980 ;;		_stepMade
  3981 ;;		_stopADC
  3982 ;; This function is called by:
  3983 ;;		_executeData
  3984 ;; This function uses a non-reentrant model
  3985 ;;
  3986                           
  3987                           	psect	text22
  3988  001B2A                     __ptext22:
  3989                           	callstack 0
  3990  001B2A                     _touchTherm:
  3991                           	callstack 0
  3992  001B2A  FFFF               	dw	65535	; assembler added errata NOP
  3993  001B2C                     
  3994                           ;motors.c: 458:     setDirection(1, 2);
  3995  001B2C  0E02               	movlw	2
  3996  001B2E  6E12               	movwf	setDirection@motor^0,c
  3997  001B30  0E01               	movlw	1
  3998  001B32  ECD4  F010         	call	_setDirection
  3999  001B36                     
  4000                           ;motors.c: 460:     T2CONbits.TMR2ON = 1;
  4001  001B36  84CA               	bsf	202,2,c	;volatile
  4002  001B38                     
  4003                           ;motors.c: 462:     tm0Error = 0;
  4004  001B38  0E00               	movlw	0
  4005  001B3A  6E5C               	movwf	(_tm0Error+1)^0,c
  4006  001B3C  0E00               	movlw	0
  4007  001B3E  6E5B               	movwf	_tm0Error^0,c
  4008  001B40                     
  4009                           ;motors.c: 463:     tm0Limit = 100;
  4010  001B40  0E64               	movlw	100
  4011  001B42  6E68               	movwf	_tm0Limit^0,c
  4012  001B44                     
  4013                           ;motors.c: 464:     T0CONbits.TMR0ON = 1;
  4014  001B44  8ED5               	bsf	213,7,c	;volatile
  4015  001B46                     
  4016                           ;motors.c: 467:     startADC();
  4017  001B46  EC8A  F012         	call	_startADC	;wreg free
  4018                           
  4019                           ;motors.c: 470:     while(!returnTherm() || PORTDbits.RD7){
  4020  001B4A  EFD8  F00D         	goto	l3870
  4021  001B4E                     l3860:
  4022  001B4E  FFFF               	dw	65535	; assembler added errata NOP
  4023                           
  4024                           ;motors.c: 473:         if(tm0Error){
  4025  001B50  505B               	movf	_tm0Error^0,w,c
  4026  001B52  105C               	iorwf	(_tm0Error+1)^0,w,c
  4027  001B54  B4D8               	btfsc	status,2,c
  4028  001B56  EFAF  F00D         	goto	u3191
  4029  001B5A  EFB2  F00D         	goto	u3190
  4030  001B5E                     u3191:
  4031  001B5E  FFFF               	dw	65535	; assembler added errata NOP
  4032  001B60  EFBA  F00D         	goto	l188
  4033  001B64                     u3190:
  4034  001B64  FFFF               	dw	65535	; assembler added errata NOP
  4035  001B66                     
  4036                           ;motors.c: 475:             LATCbits.LATC2 = 0;
  4037  001B66  948B               	bcf	139,2,c	;volatile
  4038  001B68                     
  4039                           ;motors.c: 476:             tm0Error = 6;
  4040  001B68  0E00               	movlw	0
  4041  001B6A  6E5C               	movwf	(_tm0Error+1)^0,c
  4042  001B6C  0E06               	movlw	6
  4043  001B6E  6E5B               	movwf	_tm0Error^0,c
  4044                           
  4045                           ;motors.c: 477:             break;
  4046  001B70  EFEE  F00D         	goto	l3874
  4047  001B74                     l188:
  4048  001B74  FFFF               	dw	65535	; assembler added errata NOP
  4049                           
  4050                           ;motors.c: 481:         LATCbits.LATC2 = 1;
  4051  001B76  848B               	bsf	139,2,c	;volatile
  4052  001B78                     l3866:
  4053  001B78  FFFF               	dw	65535	; assembler added errata NOP
  4054  001B7A  EC38  F012         	call	_stepMade	;wreg free
  4055  001B7E  5012               	movf	?_stepMade^0,w,c
  4056  001B80  1013               	iorwf	(?_stepMade+1)^0,w,c
  4057  001B82  B4D8               	btfsc	status,2,c
  4058  001B84  EFC6  F00D         	goto	u3201
  4059  001B88  EFC9  F00D         	goto	u3200
  4060  001B8C                     u3201:
  4061  001B8C  FFFF               	dw	65535	; assembler added errata NOP
  4062  001B8E  EFBC  F00D         	goto	l3866
  4063  001B92                     u3200:
  4064  001B92  FFFF               	dw	65535	; assembler added errata NOP
  4065  001B94                     
  4066                           ;motors.c: 487:         LATCbits.LATC2 = 0;
  4067  001B94  948B               	bcf	139,2,c	;volatile
  4068  001B96                     l3868:
  4069  001B96  FFFF               	dw	65535	; assembler added errata NOP
  4070  001B98  EC38  F012         	call	_stepMade	;wreg free
  4071  001B9C  5012               	movf	?_stepMade^0,w,c
  4072  001B9E  1013               	iorwf	(?_stepMade+1)^0,w,c
  4073  001BA0  B4D8               	btfsc	status,2,c
  4074  001BA2  EFD5  F00D         	goto	u3211
  4075  001BA6  EFD8  F00D         	goto	u3210
  4076  001BAA                     u3211:
  4077  001BAA  FFFF               	dw	65535	; assembler added errata NOP
  4078  001BAC  EFCB  F00D         	goto	l3868
  4079  001BB0                     u3210:
  4080  001BB0                     l3870:
  4081  001BB0  FFFF               	dw	65535	; assembler added errata NOP
  4082                           
  4083                           ;motors.c: 470:     while(!returnTherm() || PORTDbits.RD7){
  4084  001BB2  EC6E  F012         	call	_returnTherm	;wreg free
  4085  001BB6  5012               	movf	?_returnTherm^0,w,c
  4086  001BB8  1013               	iorwf	(?_returnTherm+1)^0,w,c
  4087  001BBA  B4D8               	btfsc	status,2,c
  4088  001BBC  EFE2  F00D         	goto	u3221
  4089  001BC0  EFE5  F00D         	goto	u3220
  4090  001BC4                     u3221:
  4091  001BC4  FFFF               	dw	65535	; assembler added errata NOP
  4092  001BC6  EFA7  F00D         	goto	l3860
  4093  001BCA                     u3220:
  4094  001BCA  FFFF               	dw	65535	; assembler added errata NOP
  4095  001BCC  BE83               	btfsc	131,7,c	;volatile
  4096  001BCE  EFEB  F00D         	goto	u3231
  4097  001BD2  EFEE  F00D         	goto	u3230
  4098  001BD6                     u3231:
  4099  001BD6  FFFF               	dw	65535	; assembler added errata NOP
  4100  001BD8  EFA7  F00D         	goto	l3860
  4101  001BDC                     u3230:
  4102  001BDC                     l3874:
  4103  001BDC  FFFF               	dw	65535	; assembler added errata NOP
  4104                           
  4105                           ;motors.c: 494:     stopADC();
  4106  001BDE  ECB8  F012         	call	_stopADC	;wreg free
  4107  001BE2                     
  4108                           ;motors.c: 497:     resetTherm();
  4109  001BE2  EC85  F012         	call	_resetTherm	;wreg free
  4110  001BE6                     
  4111                           ;motors.c: 500:     T0CONbits.TMR0ON = 0;
  4112  001BE6  9ED5               	bcf	213,7,c	;volatile
  4113  001BE8                     
  4114                           ;motors.c: 501:     T2CONbits.TMR2ON = 0;
  4115  001BE8  94CA               	bcf	202,2,c	;volatile
  4116                           
  4117                           ;motors.c: 503:     TMR0 = 0;
  4118  001BEA  0E00               	movlw	0
  4119  001BEC  6ED7               	movwf	215,c	;volatile
  4120  001BEE  0E00               	movlw	0
  4121  001BF0  6ED6               	movwf	214,c	;volatile
  4122                           
  4123                           ;motors.c: 504:     TMR2 = 0;
  4124  001BF2  0E00               	movlw	0
  4125  001BF4  6ECC               	movwf	204,c	;volatile
  4126  001BF6                     
  4127                           ;motors.c: 507:     resetStep();
  4128  001BF6  EC94  F012         	call	_resetStep	;wreg free
  4129  001BFA                     
  4130                           ;motors.c: 510:     if(PORTDbits.RD7){
  4131  001BFA  AE83               	btfss	131,7,c	;volatile
  4132  001BFC  EF02  F00E         	goto	u3241
  4133  001C00  EF05  F00E         	goto	u3240
  4134  001C04                     u3241:
  4135  001C04  FFFF               	dw	65535	; assembler added errata NOP
  4136  001C06  EF0A  F00E         	goto	l196
  4137  001C0A                     u3240:
  4138  001C0A  FFFF               	dw	65535	; assembler added errata NOP
  4139  001C0C                     
  4140                           ;motors.c: 511:         tm0Error = 2;
  4141  001C0C  0E00               	movlw	0
  4142  001C0E  6E5C               	movwf	(_tm0Error+1)^0,c
  4143  001C10  0E02               	movlw	2
  4144  001C12  6E5B               	movwf	_tm0Error^0,c
  4145  001C14                     l196:
  4146  001C14  FFFF               	dw	65535	; assembler added errata NOP
  4147                           
  4148                           ;motors.c: 514:     return(tm0Error);
  4149  001C16  505B               	movf	_tm0Error^0,w,c
  4150  001C18  0012               	return		;funcret
  4151  001C1A  FFFF               	dw	65535	; errata NOP
  4152  001C1C                     __end_of_touchTherm:
  4153                           	callstack 0
  4154                           
  4155 ;; *************** function _returnTherm *****************
  4156 ;; Defined at:
  4157 ;;		line 58 in file "adc.c"
  4158 ;; Parameters:    Size  Location     Type
  4159 ;;		None
  4160 ;; Auto vars:     Size  Location     Type
  4161 ;;		None
  4162 ;; Return value:  Size  Location     Type
  4163 ;;                  2   17[COMRAM] unsigned int 
  4164 ;; Registers used:
  4165 ;;		None
  4166 ;; Tracked objects:
  4167 ;;		On entry : 0/0
  4168 ;;		On exit  : 0/0
  4169 ;;		Unchanged: 0/0
  4170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4171 ;;      Params:         2       0       0       0       0       0       0
  4172 ;;      Locals:         0       0       0       0       0       0       0
  4173 ;;      Temps:          0       0       0       0       0       0       0
  4174 ;;      Totals:         2       0       0       0       0       0       0
  4175 ;;Total ram usage:        2 bytes
  4176 ;; Hardware stack levels used:    1
  4177 ;; Hardware stack levels required when called:    4
  4178 ;; This function calls:
  4179 ;;		Nothing
  4180 ;; This function is called by:
  4181 ;;		_touchTherm
  4182 ;; This function uses a non-reentrant model
  4183 ;;
  4184                           
  4185                           	psect	text23
  4186  0024DC                     __ptext23:
  4187                           	callstack 0
  4188  0024DC                     _returnTherm:
  4189                           	callstack 0
  4190  0024DC  FFFF               	dw	65535	; assembler added errata NOP
  4191  0024DE                     
  4192                           ;adc.c: 59:     return therm_rel;
  4193  0024DE  C064  F012         	movff	_therm_rel,?_returnTherm	;volatile
  4194  0024E2  6A13               	clrf	(?_returnTherm+1)^0,c
  4195  0024E4  0012               	return		;funcret
  4196  0024E6  FFFF               	dw	65535	; errata NOP
  4197  0024E8                     __end_of_returnTherm:
  4198                           	callstack 0
  4199                           
  4200 ;; *************** function _resetTherm *****************
  4201 ;; Defined at:
  4202 ;;		line 72 in file "adc.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;		None
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;		None
  4207 ;; Return value:  Size  Location     Type
  4208 ;;                  1    wreg      void 
  4209 ;; Registers used:
  4210 ;;		wreg, status,2
  4211 ;; Tracked objects:
  4212 ;;		On entry : 0/0
  4213 ;;		On exit  : 0/0
  4214 ;;		Unchanged: 0/0
  4215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4216 ;;      Params:         0       0       0       0       0       0       0
  4217 ;;      Locals:         0       0       0       0       0       0       0
  4218 ;;      Temps:          0       0       0       0       0       0       0
  4219 ;;      Totals:         0       0       0       0       0       0       0
  4220 ;;Total ram usage:        0 bytes
  4221 ;; Hardware stack levels used:    1
  4222 ;; Hardware stack levels required when called:    4
  4223 ;; This function calls:
  4224 ;;		Nothing
  4225 ;; This function is called by:
  4226 ;;		_touchTherm
  4227 ;; This function uses a non-reentrant model
  4228 ;;
  4229                           
  4230                           	psect	text24
  4231  00250A                     __ptext24:
  4232                           	callstack 0
  4233  00250A                     _resetTherm:
  4234                           	callstack 0
  4235  00250A  FFFF               	dw	65535	; assembler added errata NOP
  4236  00250C                     
  4237                           ;adc.c: 73:     therm_rel = 0;
  4238  00250C  0E00               	movlw	0
  4239  00250E  6E64               	movwf	_therm_rel^0,c	;volatile
  4240  002510  0012               	return		;funcret
  4241  002512  FFFF               	dw	65535	; errata NOP
  4242  002514                     __end_of_resetTherm:
  4243                           	callstack 0
  4244                           
  4245 ;; *************** function _touchObject *****************
  4246 ;; Defined at:
  4247 ;;		line 384 in file "motors.c"
  4248 ;; Parameters:    Size  Location     Type
  4249 ;;		None
  4250 ;; Auto vars:     Size  Location     Type
  4251 ;;		None
  4252 ;; Return value:  Size  Location     Type
  4253 ;;                  1    wreg      unsigned char 
  4254 ;; Registers used:
  4255 ;;		wreg, status,2, status,0, cstack
  4256 ;; Tracked objects:
  4257 ;;		On entry : 0/0
  4258 ;;		On exit  : 0/0
  4259 ;;		Unchanged: 0/0
  4260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4261 ;;      Params:         0       0       0       0       0       0       0
  4262 ;;      Locals:         0       0       0       0       0       0       0
  4263 ;;      Temps:          0       0       0       0       0       0       0
  4264 ;;      Totals:         0       0       0       0       0       0       0
  4265 ;;Total ram usage:        0 bytes
  4266 ;; Hardware stack levels used:    1
  4267 ;; Hardware stack levels required when called:    5
  4268 ;; This function calls:
  4269 ;;		_resetStep
  4270 ;;		_resetTouch
  4271 ;;		_returnTouch
  4272 ;;		_setDirection
  4273 ;;		_startADC
  4274 ;;		_stepMade
  4275 ;;		_stopADC
  4276 ;; This function is called by:
  4277 ;;		_executeData
  4278 ;; This function uses a non-reentrant model
  4279 ;;
  4280                           
  4281                           	psect	text25
  4282  001C1C                     __ptext25:
  4283                           	callstack 0
  4284  001C1C                     _touchObject:
  4285                           	callstack 0
  4286  001C1C  FFFF               	dw	65535	; assembler added errata NOP
  4287  001C1E                     
  4288                           ;motors.c: 387:     setDirection(1, 2);
  4289  001C1E  0E02               	movlw	2
  4290  001C20  6E12               	movwf	setDirection@motor^0,c
  4291  001C22  0E01               	movlw	1
  4292  001C24  ECD4  F010         	call	_setDirection
  4293  001C28                     
  4294                           ;motors.c: 389:     T2CONbits.TMR2ON = 1;
  4295  001C28  84CA               	bsf	202,2,c	;volatile
  4296  001C2A                     
  4297                           ;motors.c: 391:     tm0Error = 0;
  4298  001C2A  0E00               	movlw	0
  4299  001C2C  6E5C               	movwf	(_tm0Error+1)^0,c
  4300  001C2E  0E00               	movlw	0
  4301  001C30  6E5B               	movwf	_tm0Error^0,c
  4302  001C32                     
  4303                           ;motors.c: 392:     tm0Limit = 100;
  4304  001C32  0E64               	movlw	100
  4305  001C34  6E68               	movwf	_tm0Limit^0,c
  4306  001C36                     
  4307                           ;motors.c: 393:     T0CONbits.TMR0ON = 1;
  4308  001C36  8ED5               	bsf	213,7,c	;volatile
  4309  001C38                     
  4310                           ;motors.c: 396:     startADC();
  4311  001C38  EC8A  F012         	call	_startADC	;wreg free
  4312                           
  4313                           ;motors.c: 399:     while(!returnTouch() || PORTDbits.RD7){
  4314  001C3C  EF51  F00E         	goto	l3828
  4315  001C40                     l3818:
  4316  001C40  FFFF               	dw	65535	; assembler added errata NOP
  4317                           
  4318                           ;motors.c: 402:         if(tm0Error){
  4319  001C42  505B               	movf	_tm0Error^0,w,c
  4320  001C44  105C               	iorwf	(_tm0Error+1)^0,w,c
  4321  001C46  B4D8               	btfsc	status,2,c
  4322  001C48  EF28  F00E         	goto	u3131
  4323  001C4C  EF2B  F00E         	goto	u3130
  4324  001C50                     u3131:
  4325  001C50  FFFF               	dw	65535	; assembler added errata NOP
  4326  001C52  EF33  F00E         	goto	l174
  4327  001C56                     u3130:
  4328  001C56  FFFF               	dw	65535	; assembler added errata NOP
  4329  001C58                     
  4330                           ;motors.c: 404:             LATCbits.LATC2 = 0;
  4331  001C58  948B               	bcf	139,2,c	;volatile
  4332  001C5A                     
  4333                           ;motors.c: 405:             tm0Error = 6;
  4334  001C5A  0E00               	movlw	0
  4335  001C5C  6E5C               	movwf	(_tm0Error+1)^0,c
  4336  001C5E  0E06               	movlw	6
  4337  001C60  6E5B               	movwf	_tm0Error^0,c
  4338                           
  4339                           ;motors.c: 406:             break;
  4340  001C62  EF67  F00E         	goto	l3832
  4341  001C66                     l174:
  4342  001C66  FFFF               	dw	65535	; assembler added errata NOP
  4343                           
  4344                           ;motors.c: 410:         LATCbits.LATC2 = 1;
  4345  001C68  848B               	bsf	139,2,c	;volatile
  4346  001C6A                     l3824:
  4347  001C6A  FFFF               	dw	65535	; assembler added errata NOP
  4348  001C6C  EC38  F012         	call	_stepMade	;wreg free
  4349  001C70  5012               	movf	?_stepMade^0,w,c
  4350  001C72  1013               	iorwf	(?_stepMade+1)^0,w,c
  4351  001C74  B4D8               	btfsc	status,2,c
  4352  001C76  EF3F  F00E         	goto	u3141
  4353  001C7A  EF42  F00E         	goto	u3140
  4354  001C7E                     u3141:
  4355  001C7E  FFFF               	dw	65535	; assembler added errata NOP
  4356  001C80  EF35  F00E         	goto	l3824
  4357  001C84                     u3140:
  4358  001C84  FFFF               	dw	65535	; assembler added errata NOP
  4359  001C86                     
  4360                           ;motors.c: 416:         LATCbits.LATC2 = 0;
  4361  001C86  948B               	bcf	139,2,c	;volatile
  4362  001C88                     l3826:
  4363  001C88  FFFF               	dw	65535	; assembler added errata NOP
  4364  001C8A  EC38  F012         	call	_stepMade	;wreg free
  4365  001C8E  5012               	movf	?_stepMade^0,w,c
  4366  001C90  1013               	iorwf	(?_stepMade+1)^0,w,c
  4367  001C92  B4D8               	btfsc	status,2,c
  4368  001C94  EF4E  F00E         	goto	u3151
  4369  001C98  EF51  F00E         	goto	u3150
  4370  001C9C                     u3151:
  4371  001C9C  FFFF               	dw	65535	; assembler added errata NOP
  4372  001C9E  EF44  F00E         	goto	l3826
  4373  001CA2                     u3150:
  4374  001CA2                     l3828:
  4375  001CA2  FFFF               	dw	65535	; assembler added errata NOP
  4376                           
  4377                           ;motors.c: 399:     while(!returnTouch() || PORTDbits.RD7){
  4378  001CA4  EC74  F012         	call	_returnTouch	;wreg free
  4379  001CA8  5012               	movf	?_returnTouch^0,w,c
  4380  001CAA  1013               	iorwf	(?_returnTouch+1)^0,w,c
  4381  001CAC  B4D8               	btfsc	status,2,c
  4382  001CAE  EF5B  F00E         	goto	u3161
  4383  001CB2  EF5E  F00E         	goto	u3160
  4384  001CB6                     u3161:
  4385  001CB6  FFFF               	dw	65535	; assembler added errata NOP
  4386  001CB8  EF20  F00E         	goto	l3818
  4387  001CBC                     u3160:
  4388  001CBC  FFFF               	dw	65535	; assembler added errata NOP
  4389  001CBE  BE83               	btfsc	131,7,c	;volatile
  4390  001CC0  EF64  F00E         	goto	u3171
  4391  001CC4  EF67  F00E         	goto	u3170
  4392  001CC8                     u3171:
  4393  001CC8  FFFF               	dw	65535	; assembler added errata NOP
  4394  001CCA  EF20  F00E         	goto	l3818
  4395  001CCE                     u3170:
  4396  001CCE                     l3832:
  4397  001CCE  FFFF               	dw	65535	; assembler added errata NOP
  4398                           
  4399                           ;motors.c: 423:     stopADC();
  4400  001CD0  ECB8  F012         	call	_stopADC	;wreg free
  4401  001CD4                     
  4402                           ;motors.c: 426:     resetTouch();
  4403  001CD4  EC8F  F012         	call	_resetTouch	;wreg free
  4404  001CD8                     
  4405                           ;motors.c: 429:     T0CONbits.TMR0ON = 0;
  4406  001CD8  9ED5               	bcf	213,7,c	;volatile
  4407  001CDA                     
  4408                           ;motors.c: 430:     T2CONbits.TMR2ON = 0;
  4409  001CDA  94CA               	bcf	202,2,c	;volatile
  4410                           
  4411                           ;motors.c: 432:     TMR0 = 0;
  4412  001CDC  0E00               	movlw	0
  4413  001CDE  6ED7               	movwf	215,c	;volatile
  4414  001CE0  0E00               	movlw	0
  4415  001CE2  6ED6               	movwf	214,c	;volatile
  4416                           
  4417                           ;motors.c: 433:     TMR2 = 0;
  4418  001CE4  0E00               	movlw	0
  4419  001CE6  6ECC               	movwf	204,c	;volatile
  4420  001CE8                     
  4421                           ;motors.c: 436:     resetStep();
  4422  001CE8  EC94  F012         	call	_resetStep	;wreg free
  4423  001CEC                     
  4424                           ;motors.c: 439:     if(PORTDbits.RD7){
  4425  001CEC  AE83               	btfss	131,7,c	;volatile
  4426  001CEE  EF7B  F00E         	goto	u3181
  4427  001CF2  EF7E  F00E         	goto	u3180
  4428  001CF6                     u3181:
  4429  001CF6  FFFF               	dw	65535	; assembler added errata NOP
  4430  001CF8  EF83  F00E         	goto	l182
  4431  001CFC                     u3180:
  4432  001CFC  FFFF               	dw	65535	; assembler added errata NOP
  4433  001CFE                     
  4434                           ;motors.c: 440:         tm0Error = 2;
  4435  001CFE  0E00               	movlw	0
  4436  001D00  6E5C               	movwf	(_tm0Error+1)^0,c
  4437  001D02  0E02               	movlw	2
  4438  001D04  6E5B               	movwf	_tm0Error^0,c
  4439  001D06                     l182:
  4440  001D06  FFFF               	dw	65535	; assembler added errata NOP
  4441                           
  4442                           ;motors.c: 443:     return(tm0Error);
  4443  001D08  505B               	movf	_tm0Error^0,w,c
  4444  001D0A  0012               	return		;funcret
  4445  001D0C  FFFF               	dw	65535	; errata NOP
  4446  001D0E                     __end_of_touchObject:
  4447                           	callstack 0
  4448                           
  4449 ;; *************** function _stopADC *****************
  4450 ;; Defined at:
  4451 ;;		line 44 in file "adc.c"
  4452 ;; Parameters:    Size  Location     Type
  4453 ;;		None
  4454 ;; Auto vars:     Size  Location     Type
  4455 ;;		None
  4456 ;; Return value:  Size  Location     Type
  4457 ;;                  1    wreg      void 
  4458 ;; Registers used:
  4459 ;;		None
  4460 ;; Tracked objects:
  4461 ;;		On entry : 0/0
  4462 ;;		On exit  : 0/0
  4463 ;;		Unchanged: 0/0
  4464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4465 ;;      Params:         0       0       0       0       0       0       0
  4466 ;;      Locals:         0       0       0       0       0       0       0
  4467 ;;      Temps:          0       0       0       0       0       0       0
  4468 ;;      Totals:         0       0       0       0       0       0       0
  4469 ;;Total ram usage:        0 bytes
  4470 ;; Hardware stack levels used:    1
  4471 ;; Hardware stack levels required when called:    4
  4472 ;; This function calls:
  4473 ;;		Nothing
  4474 ;; This function is called by:
  4475 ;;		_touchObject
  4476 ;;		_touchTherm
  4477 ;; This function uses a non-reentrant model
  4478 ;;
  4479                           
  4480                           	psect	text26
  4481  002570                     __ptext26:
  4482                           	callstack 0
  4483  002570                     _stopADC:
  4484                           	callstack 0
  4485  002570  FFFF               	dw	65535	; assembler added errata NOP
  4486  002572                     
  4487                           ;adc.c: 45:     ADCON0bits.ADON = 0;
  4488  002572  90C2               	bcf	194,0,c	;volatile
  4489  002574  0012               	return		;funcret
  4490  002576  FFFF               	dw	65535	; errata NOP
  4491  002578                     __end_of_stopADC:
  4492                           	callstack 0
  4493                           
  4494 ;; *************** function _startADC *****************
  4495 ;; Defined at:
  4496 ;;		line 36 in file "adc.c"
  4497 ;; Parameters:    Size  Location     Type
  4498 ;;		None
  4499 ;; Auto vars:     Size  Location     Type
  4500 ;;		None
  4501 ;; Return value:  Size  Location     Type
  4502 ;;                  1    wreg      void 
  4503 ;; Registers used:
  4504 ;;		None
  4505 ;; Tracked objects:
  4506 ;;		On entry : 0/0
  4507 ;;		On exit  : 0/0
  4508 ;;		Unchanged: 0/0
  4509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4510 ;;      Params:         0       0       0       0       0       0       0
  4511 ;;      Locals:         0       0       0       0       0       0       0
  4512 ;;      Temps:          0       0       0       0       0       0       0
  4513 ;;      Totals:         0       0       0       0       0       0       0
  4514 ;;Total ram usage:        0 bytes
  4515 ;; Hardware stack levels used:    1
  4516 ;; Hardware stack levels required when called:    4
  4517 ;; This function calls:
  4518 ;;		Nothing
  4519 ;; This function is called by:
  4520 ;;		_touchObject
  4521 ;;		_touchTherm
  4522 ;; This function uses a non-reentrant model
  4523 ;;
  4524                           
  4525                           	psect	text27
  4526  002514                     __ptext27:
  4527                           	callstack 0
  4528  002514                     _startADC:
  4529                           	callstack 0
  4530  002514  FFFF               	dw	65535	; assembler added errata NOP
  4531  002516                     
  4532                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  4533  002516  80C2               	bsf	194,0,c	;volatile
  4534                           
  4535                           ;adc.c: 38:     ADCON0bits.GODONE = 1;
  4536  002518  84C2               	bsf	194,2,c	;volatile
  4537  00251A  0012               	return		;funcret
  4538  00251C  FFFF               	dw	65535	; errata NOP
  4539  00251E                     __end_of_startADC:
  4540                           	callstack 0
  4541                           
  4542 ;; *************** function _returnTouch *****************
  4543 ;; Defined at:
  4544 ;;		line 51 in file "adc.c"
  4545 ;; Parameters:    Size  Location     Type
  4546 ;;		None
  4547 ;; Auto vars:     Size  Location     Type
  4548 ;;		None
  4549 ;; Return value:  Size  Location     Type
  4550 ;;                  2   17[COMRAM] unsigned int 
  4551 ;; Registers used:
  4552 ;;		None
  4553 ;; Tracked objects:
  4554 ;;		On entry : 0/0
  4555 ;;		On exit  : 0/0
  4556 ;;		Unchanged: 0/0
  4557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4558 ;;      Params:         2       0       0       0       0       0       0
  4559 ;;      Locals:         0       0       0       0       0       0       0
  4560 ;;      Temps:          0       0       0       0       0       0       0
  4561 ;;      Totals:         2       0       0       0       0       0       0
  4562 ;;Total ram usage:        2 bytes
  4563 ;; Hardware stack levels used:    1
  4564 ;; Hardware stack levels required when called:    4
  4565 ;; This function calls:
  4566 ;;		Nothing
  4567 ;; This function is called by:
  4568 ;;		_touchObject
  4569 ;; This function uses a non-reentrant model
  4570 ;;
  4571                           
  4572                           	psect	text28
  4573  0024E8                     __ptext28:
  4574                           	callstack 0
  4575  0024E8                     _returnTouch:
  4576                           	callstack 0
  4577  0024E8  FFFF               	dw	65535	; assembler added errata NOP
  4578  0024EA                     
  4579                           ;adc.c: 52:     return touch_rel;
  4580  0024EA  C065  F012         	movff	_touch_rel,?_returnTouch	;volatile
  4581  0024EE  6A13               	clrf	(?_returnTouch+1)^0,c
  4582  0024F0  0012               	return		;funcret
  4583  0024F2  FFFF               	dw	65535	; errata NOP
  4584  0024F4                     __end_of_returnTouch:
  4585                           	callstack 0
  4586                           
  4587 ;; *************** function _resetTouch *****************
  4588 ;; Defined at:
  4589 ;;		line 65 in file "adc.c"
  4590 ;; Parameters:    Size  Location     Type
  4591 ;;		None
  4592 ;; Auto vars:     Size  Location     Type
  4593 ;;		None
  4594 ;; Return value:  Size  Location     Type
  4595 ;;                  1    wreg      void 
  4596 ;; Registers used:
  4597 ;;		wreg, status,2
  4598 ;; Tracked objects:
  4599 ;;		On entry : 0/0
  4600 ;;		On exit  : 0/0
  4601 ;;		Unchanged: 0/0
  4602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4603 ;;      Params:         0       0       0       0       0       0       0
  4604 ;;      Locals:         0       0       0       0       0       0       0
  4605 ;;      Temps:          0       0       0       0       0       0       0
  4606 ;;      Totals:         0       0       0       0       0       0       0
  4607 ;;Total ram usage:        0 bytes
  4608 ;; Hardware stack levels used:    1
  4609 ;; Hardware stack levels required when called:    4
  4610 ;; This function calls:
  4611 ;;		Nothing
  4612 ;; This function is called by:
  4613 ;;		_touchObject
  4614 ;; This function uses a non-reentrant model
  4615 ;;
  4616                           
  4617                           	psect	text29
  4618  00251E                     __ptext29:
  4619                           	callstack 0
  4620  00251E                     _resetTouch:
  4621                           	callstack 0
  4622  00251E  FFFF               	dw	65535	; assembler added errata NOP
  4623  002520                     
  4624                           ;adc.c: 66:     touch_rel = 0;
  4625  002520  0E00               	movlw	0
  4626  002522  6E65               	movwf	_touch_rel^0,c	;volatile
  4627  002524  0012               	return		;funcret
  4628  002526  FFFF               	dw	65535	; errata NOP
  4629  002528                     __end_of_resetTouch:
  4630                           	callstack 0
  4631                           
  4632 ;; *************** function _rotateObj *****************
  4633 ;; Defined at:
  4634 ;;		line 575 in file "motors.c"
  4635 ;; Parameters:    Size  Location     Type
  4636 ;;  rotAngle        1    wreg     unsigned char 
  4637 ;; Auto vars:     Size  Location     Type
  4638 ;;  rotAngle        1    3[BANK0 ] unsigned char 
  4639 ;;  i               2    6[BANK0 ] unsigned int 
  4640 ;;  totStep         2    4[BANK0 ] int 
  4641 ;; Return value:  Size  Location     Type
  4642 ;;                  1    wreg      void 
  4643 ;; Registers used:
  4644 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4645 ;; Tracked objects:
  4646 ;;		On entry : 0/0
  4647 ;;		On exit  : 0/0
  4648 ;;		Unchanged: 0/0
  4649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4650 ;;      Params:         0       0       0       0       0       0       0
  4651 ;;      Locals:         0       5       0       0       0       0       0
  4652 ;;      Temps:          0       3       0       0       0       0       0
  4653 ;;      Totals:         0       8       0       0       0       0       0
  4654 ;;Total ram usage:        8 bytes
  4655 ;; Hardware stack levels used:    1
  4656 ;; Hardware stack levels required when called:    5
  4657 ;; This function calls:
  4658 ;;		___fldiv
  4659 ;;		___fltol
  4660 ;;		___xxtofl
  4661 ;;		_stepMade
  4662 ;; This function is called by:
  4663 ;;		_executeData
  4664 ;; This function uses a non-reentrant model
  4665 ;;
  4666                           
  4667                           	psect	text30
  4668  001DE4                     __ptext30:
  4669                           	callstack 0
  4670  001DE4                     _rotateObj:
  4671                           	callstack 0
  4672  001DE4  FFFF               	dw	65535	; assembler added errata NOP
  4673                           
  4674                           ;incstack = 0
  4675                           ;rotateObj@rotAngle stored from wreg
  4676  001DE6  0100               	movlb	0	; () banked
  4677  001DE8  6FF7               	movwf	rotateObj@rotAngle& (0+255),b
  4678  001DEA                     
  4679                           ;motors.c: 576:     static const float stepAngle = 0.08789;;motors.c: 577:     static ch
      +                          ar rotSequence[] = {0b1001, 0b0011, 0b0110, 0b1100};;motors.c: 578:     unsigned int i;;
      +                          motors.c: 579:     int totStep = rotAngle/stepAngle;
  4680  001DEA  0EAC               	movlw	172
  4681  001DEC  6E24               	movwf	___fldiv@a^0,c
  4682  001DEE  0EFF               	movlw	255
  4683  001DF0  6E25               	movwf	(___fldiv@a+1)^0,c
  4684  001DF2  0EB3               	movlw	179
  4685  001DF4  6E26               	movwf	(___fldiv@a+2)^0,c
  4686  001DF6  0E3D               	movlw	61
  4687  001DF8  6E27               	movwf	(___fldiv@a+3)^0,c
  4688  001DFA  0100               	movlb	0	; () banked
  4689  001DFC  51F7               	movf	rotateObj@rotAngle& (0+255),w,b
  4690  001DFE  6E12               	movwf	___xxtofl@val^0,c
  4691  001E00  6A13               	clrf	(___xxtofl@val+1)^0,c
  4692  001E02  6A14               	clrf	(___xxtofl@val+2)^0,c
  4693  001E04  6A15               	clrf	(___xxtofl@val+3)^0,c
  4694  001E06  0E01               	movlw	1
  4695  001E08  ECC9  F007         	call	___xxtofl
  4696  001E0C  C012  F020         	movff	?___xxtofl,___fldiv@b
  4697  001E10  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4698  001E14  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4699  001E18  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4700  001E1C  EC08  F003         	call	___fldiv	;wreg free
  4701  001E20  C020  F039         	movff	?___fldiv,___fltol@f1
  4702  001E24  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4703  001E28  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4704  001E2C  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4705  001E30  ECDE  F00B         	call	___fltol	;wreg free
  4706  001E34  C039  F0F8         	movff	?___fltol,rotateObj@totStep
  4707  001E38  C03A  F0F9         	movff	?___fltol+1,rotateObj@totStep+1
  4708  001E3C                     
  4709                           ;motors.c: 582:     for(i = 0; i < totStep; i++){
  4710  001E3C  0E00               	movlw	0
  4711  001E3E  0100               	movlb	0	; () banked
  4712  001E40  6FFB               	movwf	(rotateObj@i+1)& (0+255),b
  4713  001E42  0E00               	movlw	0
  4714  001E44  6FFA               	movwf	rotateObj@i& (0+255),b
  4715  001E46  EF4C  F00F         	goto	l3930
  4716  001E4A                     l3922:
  4717  001E4A  FFFF               	dw	65535	; assembler added errata NOP
  4718                           
  4719                           ; BSR set to: 0
  4720                           ;motors.c: 584:         LATD &= 0xC3;
  4721  001E4C  0EC3               	movlw	195
  4722  001E4E  168C               	andwf	140,f,c	;volatile
  4723  001E50                     
  4724                           ; BSR set to: 0
  4725                           ;motors.c: 586:         LATD |= rotSequence[i%4] << 2;
  4726  001E50  0E03               	movlw	3
  4727  001E52  15FA               	andwf	rotateObj@i& (0+255),w,b
  4728  001E54  6FF4               	movwf	??_rotateObj& (0+255),b
  4729  001E56  0E00               	movlw	0
  4730  001E58  15FB               	andwf	(rotateObj@i+1)& (0+255),w,b
  4731  001E5A  6FF5               	movwf	(??_rotateObj+1)& (0+255),b
  4732  001E5C  0E80               	movlw	low rotateObj@rotSequence
  4733  001E5E  25F4               	addwf	??_rotateObj& (0+255),w,b
  4734  001E60  6ED9               	movwf	fsr2l,c
  4735  001E62  0E00               	movlw	high rotateObj@rotSequence
  4736  001E64  21F5               	addwfc	(??_rotateObj+1)& (0+255),w,b
  4737  001E66  6EDA               	movwf	fsr2h,c
  4738  001E68  50DF               	movf	indf2,w,c
  4739  001E6A  6FF6               	movwf	(??_rotateObj+2)& (0+255),b
  4740  001E6C  90D8               	bcf	status,0,c
  4741  001E6E  37F6               	rlcf	(??_rotateObj+2)& (0+255),f,b
  4742  001E70  90D8               	bcf	status,0,c
  4743  001E72  35F6               	rlcf	(??_rotateObj+2)& (0+255),w,b
  4744  001E74  128C               	iorwf	140,f,c	;volatile
  4745  001E76                     l3926:
  4746  001E76  FFFF               	dw	65535	; assembler added errata NOP
  4747  001E78  EC38  F012         	call	_stepMade	;wreg free
  4748  001E7C  5012               	movf	?_stepMade^0,w,c
  4749  001E7E  1013               	iorwf	(?_stepMade+1)^0,w,c
  4750  001E80  B4D8               	btfsc	status,2,c
  4751  001E82  EF45  F00F         	goto	u3291
  4752  001E86  EF48  F00F         	goto	u3290
  4753  001E8A                     u3291:
  4754  001E8A  FFFF               	dw	65535	; assembler added errata NOP
  4755  001E8C  EF3B  F00F         	goto	l3926
  4756  001E90                     u3290:
  4757  001E90  FFFF               	dw	65535	; assembler added errata NOP
  4758  001E92                     
  4759                           ;motors.c: 591:     }
  4760  001E92  0100               	movlb	0	; () banked
  4761  001E94  4BFA               	infsnz	rotateObj@i& (0+255),f,b
  4762  001E96  2BFB               	incf	(rotateObj@i+1)& (0+255),f,b
  4763  001E98                     l3930:
  4764  001E98  FFFF               	dw	65535	; assembler added errata NOP
  4765                           
  4766                           ; BSR set to: 0
  4767  001E9A  51F8               	movf	rotateObj@totStep& (0+255),w,b
  4768  001E9C  5DFA               	subwf	rotateObj@i& (0+255),w,b
  4769  001E9E  51F9               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4770  001EA0  59FB               	subwfb	(rotateObj@i+1)& (0+255),w,b
  4771  001EA2  A0D8               	btfss	status,0,c
  4772  001EA4  EF56  F00F         	goto	u3301
  4773  001EA8  EF59  F00F         	goto	u3300
  4774  001EAC                     u3301:
  4775  001EAC  FFFF               	dw	65535	; assembler added errata NOP
  4776  001EAE  EF25  F00F         	goto	l3922
  4777  001EB2                     u3300:
  4778  001EB2  FFFF               	dw	65535	; assembler added errata NOP
  4779  001EB4                     
  4780                           ; BSR set to: 0
  4781  001EB4  0012               	return		;funcret
  4782  001EB6  FFFF               	dw	65535	; errata NOP
  4783  001EB8                     __end_of_rotateObj:
  4784                           	callstack 0
  4785                           
  4786 ;; *************** function ___xxtofl *****************
  4787 ;; Defined at:
  4788 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4789 ;; Parameters:    Size  Location     Type
  4790 ;;  sign            1    wreg     unsigned char 
  4791 ;;  val             4   17[COMRAM] long 
  4792 ;; Auto vars:     Size  Location     Type
  4793 ;;  sign            1   25[COMRAM] unsigned char 
  4794 ;;  arg             4   27[COMRAM] unsigned long 
  4795 ;;  exp             1   26[COMRAM] unsigned char 
  4796 ;; Return value:  Size  Location     Type
  4797 ;;                  4   17[COMRAM] unsigned char 
  4798 ;; Registers used:
  4799 ;;		wreg, status,2, status,0
  4800 ;; Tracked objects:
  4801 ;;		On entry : 0/0
  4802 ;;		On exit  : 0/0
  4803 ;;		Unchanged: 0/0
  4804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4805 ;;      Params:         4       0       0       0       0       0       0
  4806 ;;      Locals:         6       0       0       0       0       0       0
  4807 ;;      Temps:          4       0       0       0       0       0       0
  4808 ;;      Totals:        14       0       0       0       0       0       0
  4809 ;;Total ram usage:       14 bytes
  4810 ;; Hardware stack levels used:    1
  4811 ;; Hardware stack levels required when called:    4
  4812 ;; This function calls:
  4813 ;;		Nothing
  4814 ;; This function is called by:
  4815 ;;		_rotateObj
  4816 ;; This function uses a non-reentrant model
  4817 ;;
  4818                           
  4819                           	psect	text31
  4820  000F92                     __ptext31:
  4821                           	callstack 0
  4822  000F92                     ___xxtofl:
  4823                           	callstack 0
  4824  000F92  FFFF               	dw	65535	; assembler added errata NOP
  4825                           
  4826                           ; BSR set to: 0
  4827                           ;incstack = 0
  4828                           ;___xxtofl@sign stored from wreg
  4829  000F94  6E1A               	movwf	___xxtofl@sign^0,c
  4830  000F96  501A               	movf	___xxtofl@sign^0,w,c
  4831  000F98  B4D8               	btfsc	status,2,c
  4832  000F9A  EFD1  F007         	goto	u2801
  4833  000F9E  EFD4  F007         	goto	u2800
  4834  000FA2                     u2801:
  4835  000FA2  FFFF               	dw	65535	; assembler added errata NOP
  4836  000FA4  EFF9  F007         	goto	l1244
  4837  000FA8                     u2800:
  4838  000FA8  FFFF               	dw	65535	; assembler added errata NOP
  4839  000FAA  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4840  000FAC  EFDD  F007         	goto	u2810
  4841  000FB0  EFDA  F007         	goto	u2811
  4842  000FB4                     u2811:
  4843  000FB4  FFFF               	dw	65535	; assembler added errata NOP
  4844  000FB6  EFF9  F007         	goto	l1244
  4845  000FBA                     u2810:
  4846  000FBA  FFFF               	dw	65535	; assembler added errata NOP
  4847  000FBC  C012  F016         	movff	___xxtofl@val,??___xxtofl
  4848  000FC0  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  4849  000FC4  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  4850  000FC8  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  4851  000FCC  1E16               	comf	??___xxtofl^0,f,c
  4852  000FCE  1E17               	comf	(??___xxtofl+1)^0,f,c
  4853  000FD0  1E18               	comf	(??___xxtofl+2)^0,f,c
  4854  000FD2  1E19               	comf	(??___xxtofl+3)^0,f,c
  4855  000FD4  2A16               	incf	??___xxtofl^0,f,c
  4856  000FD6  0E00               	movlw	0
  4857  000FD8  2217               	addwfc	(??___xxtofl+1)^0,f,c
  4858  000FDA  2218               	addwfc	(??___xxtofl+2)^0,f,c
  4859  000FDC  2219               	addwfc	(??___xxtofl+3)^0,f,c
  4860  000FDE  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  4861  000FE2  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4862  000FE6  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4863  000FEA  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4864  000FEE  EF02  F008         	goto	l3632
  4865  000FF2                     l1244:
  4866  000FF2  FFFF               	dw	65535	; assembler added errata NOP
  4867  000FF4  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  4868  000FF8  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4869  000FFC  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4870  001000  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4871  001004                     l3632:
  4872  001004  FFFF               	dw	65535	; assembler added errata NOP
  4873  001006  5012               	movf	___xxtofl@val^0,w,c
  4874  001008  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  4875  00100A  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  4876  00100C  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  4877  00100E  A4D8               	btfss	status,2,c
  4878  001010  EF0C  F008         	goto	u2821
  4879  001014  EF0F  F008         	goto	u2820
  4880  001018                     u2821:
  4881  001018  FFFF               	dw	65535	; assembler added errata NOP
  4882  00101A  EF1A  F008         	goto	l3638
  4883  00101E                     u2820:
  4884  00101E  FFFF               	dw	65535	; assembler added errata NOP
  4885  001020  0E00               	movlw	0
  4886  001022  6E12               	movwf	?___xxtofl^0,c
  4887  001024  0E00               	movlw	0
  4888  001026  6E13               	movwf	(?___xxtofl+1)^0,c
  4889  001028  0E00               	movlw	0
  4890  00102A  6E14               	movwf	(?___xxtofl+2)^0,c
  4891  00102C  0E00               	movlw	0
  4892  00102E  6E15               	movwf	(?___xxtofl+3)^0,c
  4893  001030  EFC2  F008         	goto	l1247
  4894  001034                     l3638:
  4895  001034  FFFF               	dw	65535	; assembler added errata NOP
  4896  001036  0E96               	movlw	150
  4897  001038  6E1B               	movwf	___xxtofl@exp^0,c
  4898  00103A  EF26  F008         	goto	l3642
  4899  00103E                     l3640:
  4900  00103E  FFFF               	dw	65535	; assembler added errata NOP
  4901  001040  2A1B               	incf	___xxtofl@exp^0,f,c
  4902  001042  90D8               	bcf	status,0,c
  4903  001044  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4904  001046  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4905  001048  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4906  00104A  321C               	rrcf	___xxtofl@arg^0,f,c
  4907  00104C                     l3642:
  4908  00104C  FFFF               	dw	65535	; assembler added errata NOP
  4909  00104E  0E00               	movlw	0
  4910  001050  141C               	andwf	___xxtofl@arg^0,w,c
  4911  001052  6E16               	movwf	??___xxtofl^0,c
  4912  001054  0E00               	movlw	0
  4913  001056  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4914  001058  6E17               	movwf	(??___xxtofl+1)^0,c
  4915  00105A  0E00               	movlw	0
  4916  00105C  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4917  00105E  6E18               	movwf	(??___xxtofl+2)^0,c
  4918  001060  0EFE               	movlw	254
  4919  001062  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4920  001064  6E19               	movwf	(??___xxtofl+3)^0,c
  4921  001066  5016               	movf	??___xxtofl^0,w,c
  4922  001068  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4923  00106A  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4924  00106C  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4925  00106E  A4D8               	btfss	status,2,c
  4926  001070  EF3C  F008         	goto	u2831
  4927  001074  EF3F  F008         	goto	u2830
  4928  001078                     u2831:
  4929  001078  FFFF               	dw	65535	; assembler added errata NOP
  4930  00107A  EF1F  F008         	goto	l3640
  4931  00107E                     u2830:
  4932  00107E  FFFF               	dw	65535	; assembler added errata NOP
  4933  001080  EF4F  F008         	goto	l1251
  4934  001084                     l3644:
  4935  001084  FFFF               	dw	65535	; assembler added errata NOP
  4936  001086  2A1B               	incf	___xxtofl@exp^0,f,c
  4937  001088  0E01               	movlw	1
  4938  00108A  261C               	addwf	___xxtofl@arg^0,f,c
  4939  00108C  0E00               	movlw	0
  4940  00108E  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4941  001090  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4942  001092  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4943  001094  90D8               	bcf	status,0,c
  4944  001096  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4945  001098  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4946  00109A  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4947  00109C  321C               	rrcf	___xxtofl@arg^0,f,c
  4948  00109E                     l1251:
  4949  00109E  FFFF               	dw	65535	; assembler added errata NOP
  4950  0010A0  0E00               	movlw	0
  4951  0010A2  141C               	andwf	___xxtofl@arg^0,w,c
  4952  0010A4  6E16               	movwf	??___xxtofl^0,c
  4953  0010A6  0E00               	movlw	0
  4954  0010A8  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4955  0010AA  6E17               	movwf	(??___xxtofl+1)^0,c
  4956  0010AC  0E00               	movlw	0
  4957  0010AE  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4958  0010B0  6E18               	movwf	(??___xxtofl+2)^0,c
  4959  0010B2  0EFF               	movlw	255
  4960  0010B4  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4961  0010B6  6E19               	movwf	(??___xxtofl+3)^0,c
  4962  0010B8  5016               	movf	??___xxtofl^0,w,c
  4963  0010BA  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4964  0010BC  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4965  0010BE  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4966  0010C0  A4D8               	btfss	status,2,c
  4967  0010C2  EF65  F008         	goto	u2841
  4968  0010C6  EF68  F008         	goto	u2840
  4969  0010CA                     u2841:
  4970  0010CA  FFFF               	dw	65535	; assembler added errata NOP
  4971  0010CC  EF42  F008         	goto	l3644
  4972  0010D0                     u2840:
  4973  0010D0  FFFF               	dw	65535	; assembler added errata NOP
  4974  0010D2  EF72  F008         	goto	l3652
  4975  0010D6                     l3650:
  4976  0010D6  FFFF               	dw	65535	; assembler added errata NOP
  4977  0010D8  061B               	decf	___xxtofl@exp^0,f,c
  4978  0010DA  90D8               	bcf	status,0,c
  4979  0010DC  361C               	rlcf	___xxtofl@arg^0,f,c
  4980  0010DE  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4981  0010E0  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4982  0010E2  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4983  0010E4                     l3652:
  4984  0010E4  FFFF               	dw	65535	; assembler added errata NOP
  4985  0010E6  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4986  0010E8  EF78  F008         	goto	u2851
  4987  0010EC  EF7B  F008         	goto	u2850
  4988  0010F0                     u2851:
  4989  0010F0  FFFF               	dw	65535	; assembler added errata NOP
  4990  0010F2  EF85  F008         	goto	l1258
  4991  0010F6                     u2850:
  4992  0010F6  FFFF               	dw	65535	; assembler added errata NOP
  4993  0010F8  0E02               	movlw	2
  4994  0010FA  601B               	cpfslt	___xxtofl@exp^0,c
  4995  0010FC  EF82  F008         	goto	u2861
  4996  001100  EF85  F008         	goto	u2860
  4997  001104                     u2861:
  4998  001104  FFFF               	dw	65535	; assembler added errata NOP
  4999  001106  EF6B  F008         	goto	l3650
  5000  00110A                     u2860:
  5001  00110A                     l1258:
  5002  00110A  FFFF               	dw	65535	; assembler added errata NOP
  5003  00110C  B01B               	btfsc	___xxtofl@exp^0,0,c
  5004  00110E  EF8B  F008         	goto	u2871
  5005  001112  EF8E  F008         	goto	u2870
  5006  001116                     u2871:
  5007  001116  FFFF               	dw	65535	; assembler added errata NOP
  5008  001118  EF90  F008         	goto	l3658
  5009  00111C                     u2870:
  5010  00111C  FFFF               	dw	65535	; assembler added errata NOP
  5011  00111E  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  5012  001120                     l3658:
  5013  001120  FFFF               	dw	65535	; assembler added errata NOP
  5014  001122  90D8               	bcf	status,0,c
  5015  001124  321B               	rrcf	___xxtofl@exp^0,f,c
  5016  001126  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  5017  00112A  6A17               	clrf	(??___xxtofl+1)^0,c
  5018  00112C  6A18               	clrf	(??___xxtofl+2)^0,c
  5019  00112E  6A19               	clrf	(??___xxtofl+3)^0,c
  5020  001130  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  5021  001134  6A18               	clrf	(??___xxtofl+2)^0,c
  5022  001136  6A17               	clrf	(??___xxtofl+1)^0,c
  5023  001138  6A16               	clrf	??___xxtofl^0,c
  5024  00113A  5016               	movf	??___xxtofl^0,w,c
  5025  00113C  121C               	iorwf	___xxtofl@arg^0,f,c
  5026  00113E  5017               	movf	(??___xxtofl+1)^0,w,c
  5027  001140  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  5028  001142  5018               	movf	(??___xxtofl+2)^0,w,c
  5029  001144  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  5030  001146  5019               	movf	(??___xxtofl+3)^0,w,c
  5031  001148  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  5032  00114A  501A               	movf	___xxtofl@sign^0,w,c
  5033  00114C  B4D8               	btfsc	status,2,c
  5034  00114E  EFAB  F008         	goto	u2881
  5035  001152  EFAE  F008         	goto	u2880
  5036  001156                     u2881:
  5037  001156  FFFF               	dw	65535	; assembler added errata NOP
  5038  001158  EFB9  F008         	goto	l3668
  5039  00115C                     u2880:
  5040  00115C  FFFF               	dw	65535	; assembler added errata NOP
  5041  00115E  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  5042  001160  EFB7  F008         	goto	u2890
  5043  001164  EFB4  F008         	goto	u2891
  5044  001168                     u2891:
  5045  001168  FFFF               	dw	65535	; assembler added errata NOP
  5046  00116A  EFB9  F008         	goto	l3668
  5047  00116E                     u2890:
  5048  00116E  FFFF               	dw	65535	; assembler added errata NOP
  5049  001170  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  5050  001172                     l3668:
  5051  001172  FFFF               	dw	65535	; assembler added errata NOP
  5052  001174  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  5053  001178  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  5054  00117C  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  5055  001180  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  5056  001184                     l1247:
  5057  001184  FFFF               	dw	65535	; assembler added errata NOP
  5058  001186  0012               	return		;funcret
  5059  001188  FFFF               	dw	65535	; errata NOP
  5060  00118A                     __end_of___xxtofl:
  5061                           	callstack 0
  5062                           
  5063 ;; *************** function ___fltol *****************
  5064 ;; Defined at:
  5065 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  5066 ;; Parameters:    Size  Location     Type
  5067 ;;  f1              4   56[COMRAM] unsigned char 
  5068 ;; Auto vars:     Size  Location     Type
  5069 ;;  exp1            1   65[COMRAM] unsigned char 
  5070 ;;  sign1           1   64[COMRAM] unsigned char 
  5071 ;; Return value:  Size  Location     Type
  5072 ;;                  4   56[COMRAM] long 
  5073 ;; Registers used:
  5074 ;;		wreg, status,2, status,0
  5075 ;; Tracked objects:
  5076 ;;		On entry : 0/0
  5077 ;;		On exit  : 0/0
  5078 ;;		Unchanged: 0/0
  5079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5080 ;;      Params:         4       0       0       0       0       0       0
  5081 ;;      Locals:         2       0       0       0       0       0       0
  5082 ;;      Temps:          4       0       0       0       0       0       0
  5083 ;;      Totals:        10       0       0       0       0       0       0
  5084 ;;Total ram usage:       10 bytes
  5085 ;; Hardware stack levels used:    1
  5086 ;; Hardware stack levels required when called:    4
  5087 ;; This function calls:
  5088 ;;		Nothing
  5089 ;; This function is called by:
  5090 ;;		_rotateObj
  5091 ;; This function uses a non-reentrant model
  5092 ;;
  5093                           
  5094                           	psect	text32
  5095  0017BC                     __ptext32:
  5096                           	callstack 0
  5097  0017BC                     ___fltol:
  5098                           	callstack 0
  5099  0017BC  FFFF               	dw	65535	; assembler added errata NOP
  5100  0017BE  343B               	rlcf	(___fltol@f1+2)^0,w,c
  5101  0017C0  343C               	rlcf	(___fltol@f1+3)^0,w,c
  5102  0017C2  6E42               	movwf	___fltol@exp1^0,c
  5103  0017C4  5042               	movf	___fltol@exp1^0,w,c
  5104  0017C6  A4D8               	btfss	status,2,c
  5105  0017C8  EFE8  F00B         	goto	u2731
  5106  0017CC  EFEB  F00B         	goto	u2730
  5107  0017D0                     u2731:
  5108  0017D0  FFFF               	dw	65535	; assembler added errata NOP
  5109  0017D2  EFF7  F00B         	goto	l3588
  5110  0017D6                     u2730:
  5111  0017D6  FFFF               	dw	65535	; assembler added errata NOP
  5112  0017D8                     l3584:
  5113  0017D8  FFFF               	dw	65535	; assembler added errata NOP
  5114  0017DA  0E00               	movlw	0
  5115  0017DC  6E39               	movwf	?___fltol^0,c
  5116  0017DE  0E00               	movlw	0
  5117  0017E0  6E3A               	movwf	(?___fltol+1)^0,c
  5118  0017E2  0E00               	movlw	0
  5119  0017E4  6E3B               	movwf	(?___fltol+2)^0,c
  5120  0017E6  0E00               	movlw	0
  5121  0017E8  6E3C               	movwf	(?___fltol+3)^0,c
  5122  0017EA  EF76  F00C         	goto	l886
  5123  0017EE                     l3588:
  5124  0017EE  FFFF               	dw	65535	; assembler added errata NOP
  5125  0017F0  C039  F03D         	movff	___fltol@f1,??___fltol
  5126  0017F4  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  5127  0017F8  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  5128  0017FC  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  5129  001800  0E20               	movlw	32
  5130  001802  EF09  F00C         	goto	u2740
  5131  001806                     u2745:
  5132  001806  FFFF               	dw	65535	; assembler added errata NOP
  5133  001808  90D8               	bcf	status,0,c
  5134  00180A  3240               	rrcf	(??___fltol+3)^0,f,c
  5135  00180C  323F               	rrcf	(??___fltol+2)^0,f,c
  5136  00180E  323E               	rrcf	(??___fltol+1)^0,f,c
  5137  001810  323D               	rrcf	??___fltol^0,f,c
  5138  001812                     u2740:
  5139  001812  FFFF               	dw	65535	; assembler added errata NOP
  5140  001814  2EE8               	decfsz	wreg,f,c
  5141  001816  EF03  F00C         	goto	u2745
  5142  00181A  503D               	movf	??___fltol^0,w,c
  5143  00181C  6E41               	movwf	___fltol@sign1^0,c
  5144  00181E  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  5145  001820  0EFF               	movlw	255
  5146  001822  1639               	andwf	___fltol@f1^0,f,c
  5147  001824  0EFF               	movlw	255
  5148  001826  163A               	andwf	(___fltol@f1+1)^0,f,c
  5149  001828  0EFF               	movlw	255
  5150  00182A  163B               	andwf	(___fltol@f1+2)^0,f,c
  5151  00182C  0E00               	movlw	0
  5152  00182E  163C               	andwf	(___fltol@f1+3)^0,f,c
  5153  001830  0E96               	movlw	150
  5154  001832  5E42               	subwf	___fltol@exp1^0,f,c
  5155  001834  BE42               	btfsc	___fltol@exp1^0,7,c
  5156  001836  EF22  F00C         	goto	u2750
  5157  00183A  EF1F  F00C         	goto	u2751
  5158  00183E                     u2751:
  5159  00183E  FFFF               	dw	65535	; assembler added errata NOP
  5160  001840  EF3C  F00C         	goto	l3608
  5161  001844                     u2750:
  5162  001844  FFFF               	dw	65535	; assembler added errata NOP
  5163  001846  5042               	movf	___fltol@exp1^0,w,c
  5164  001848  0A80               	xorlw	128
  5165  00184A  0F97               	addlw	151
  5166  00184C  B0D8               	btfsc	status,0,c
  5167  00184E  EF2B  F00C         	goto	u2761
  5168  001852  EF2E  F00C         	goto	u2760
  5169  001856                     u2761:
  5170  001856  FFFF               	dw	65535	; assembler added errata NOP
  5171  001858  EF31  F00C         	goto	l3604
  5172  00185C                     u2760:
  5173  00185C  FFFF               	dw	65535	; assembler added errata NOP
  5174  00185E  EFEC  F00B         	goto	l3584
  5175  001862                     l3604:
  5176  001862  FFFF               	dw	65535	; assembler added errata NOP
  5177  001864  90D8               	bcf	status,0,c
  5178  001866  323C               	rrcf	(___fltol@f1+3)^0,f,c
  5179  001868  323B               	rrcf	(___fltol@f1+2)^0,f,c
  5180  00186A  323A               	rrcf	(___fltol@f1+1)^0,f,c
  5181  00186C  3239               	rrcf	___fltol@f1^0,f,c
  5182  00186E  3E42               	incfsz	___fltol@exp1^0,f,c
  5183  001870  EF31  F00C         	goto	l3604
  5184  001874  EF5A  F00C         	goto	l3618
  5185  001878                     l3608:
  5186  001878  FFFF               	dw	65535	; assembler added errata NOP
  5187  00187A  0E1F               	movlw	31
  5188  00187C  6442               	cpfsgt	___fltol@exp1^0,c
  5189  00187E  EF43  F00C         	goto	u2771
  5190  001882  EF46  F00C         	goto	u2770
  5191  001886                     u2771:
  5192  001886  FFFF               	dw	65535	; assembler added errata NOP
  5193  001888  EF50  F00C         	goto	l3616
  5194  00188C                     u2770:
  5195  00188C  FFFF               	dw	65535	; assembler added errata NOP
  5196  00188E  EFEC  F00B         	goto	l3584
  5197  001892                     l3614:
  5198  001892  FFFF               	dw	65535	; assembler added errata NOP
  5199  001894  90D8               	bcf	status,0,c
  5200  001896  3639               	rlcf	___fltol@f1^0,f,c
  5201  001898  363A               	rlcf	(___fltol@f1+1)^0,f,c
  5202  00189A  363B               	rlcf	(___fltol@f1+2)^0,f,c
  5203  00189C  363C               	rlcf	(___fltol@f1+3)^0,f,c
  5204  00189E  0642               	decf	___fltol@exp1^0,f,c
  5205  0018A0                     l3616:
  5206  0018A0  FFFF               	dw	65535	; assembler added errata NOP
  5207  0018A2  5042               	movf	___fltol@exp1^0,w,c
  5208  0018A4  A4D8               	btfss	status,2,c
  5209  0018A6  EF57  F00C         	goto	u2781
  5210  0018AA  EF5A  F00C         	goto	u2780
  5211  0018AE                     u2781:
  5212  0018AE  FFFF               	dw	65535	; assembler added errata NOP
  5213  0018B0  EF49  F00C         	goto	l3614
  5214  0018B4                     u2780:
  5215  0018B4                     l3618:
  5216  0018B4  FFFF               	dw	65535	; assembler added errata NOP
  5217  0018B6  5041               	movf	___fltol@sign1^0,w,c
  5218  0018B8  B4D8               	btfsc	status,2,c
  5219  0018BA  EF61  F00C         	goto	u2791
  5220  0018BE  EF64  F00C         	goto	u2790
  5221  0018C2                     u2791:
  5222  0018C2  FFFF               	dw	65535	; assembler added errata NOP
  5223  0018C4  EF6D  F00C         	goto	l3622
  5224  0018C8                     u2790:
  5225  0018C8  FFFF               	dw	65535	; assembler added errata NOP
  5226  0018CA  1E3C               	comf	(___fltol@f1+3)^0,f,c
  5227  0018CC  1E3B               	comf	(___fltol@f1+2)^0,f,c
  5228  0018CE  1E3A               	comf	(___fltol@f1+1)^0,f,c
  5229  0018D0  6C39               	negf	___fltol@f1^0,c
  5230  0018D2  0E00               	movlw	0
  5231  0018D4  223A               	addwfc	(___fltol@f1+1)^0,f,c
  5232  0018D6  223B               	addwfc	(___fltol@f1+2)^0,f,c
  5233  0018D8  223C               	addwfc	(___fltol@f1+3)^0,f,c
  5234  0018DA                     l3622:
  5235  0018DA  FFFF               	dw	65535	; assembler added errata NOP
  5236  0018DC  C039  F039         	movff	___fltol@f1,?___fltol
  5237  0018E0  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  5238  0018E4  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  5239  0018E8  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  5240  0018EC                     l886:
  5241  0018EC  FFFF               	dw	65535	; assembler added errata NOP
  5242  0018EE  0012               	return		;funcret
  5243  0018F0  FFFF               	dw	65535	; errata NOP
  5244  0018F2                     __end_of___fltol:
  5245                           	callstack 0
  5246                           
  5247 ;; *************** function ___fldiv *****************
  5248 ;; Defined at:
  5249 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  5250 ;; Parameters:    Size  Location     Type
  5251 ;;  b               4   31[COMRAM] long 
  5252 ;;  a               4   35[COMRAM] long 
  5253 ;; Auto vars:     Size  Location     Type
  5254 ;;  grs             4   50[COMRAM] unsigned long 
  5255 ;;  rem             4   43[COMRAM] unsigned long 
  5256 ;;  new_exp         2   48[COMRAM] short 
  5257 ;;  aexp            1   55[COMRAM] unsigned char 
  5258 ;;  bexp            1   54[COMRAM] unsigned char 
  5259 ;;  sign            1   47[COMRAM] unsigned char 
  5260 ;; Return value:  Size  Location     Type
  5261 ;;                  4   31[COMRAM] unsigned char 
  5262 ;; Registers used:
  5263 ;;		wreg, status,2, status,0
  5264 ;; Tracked objects:
  5265 ;;		On entry : 0/0
  5266 ;;		On exit  : 0/0
  5267 ;;		Unchanged: 0/0
  5268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5269 ;;      Params:         8       0       0       0       0       0       0
  5270 ;;      Locals:        13       0       0       0       0       0       0
  5271 ;;      Temps:          4       0       0       0       0       0       0
  5272 ;;      Totals:        25       0       0       0       0       0       0
  5273 ;;Total ram usage:       25 bytes
  5274 ;; Hardware stack levels used:    1
  5275 ;; Hardware stack levels required when called:    4
  5276 ;; This function calls:
  5277 ;;		Nothing
  5278 ;; This function is called by:
  5279 ;;		_rotateObj
  5280 ;; This function uses a non-reentrant model
  5281 ;;
  5282                           
  5283                           	psect	text33
  5284  000610                     __ptext33:
  5285                           	callstack 0
  5286  000610                     ___fldiv:
  5287                           	callstack 0
  5288  000610  FFFF               	dw	65535	; assembler added errata NOP
  5289  000612  5023               	movf	(___fldiv@b+3)^0,w,c
  5290  000614  0B80               	andlw	128
  5291  000616  6E30               	movwf	___fldiv@sign^0,c
  5292  000618  5023               	movf	(___fldiv@b+3)^0,w,c
  5293  00061A  2423               	addwf	(___fldiv@b+3)^0,w,c
  5294  00061C  6E37               	movwf	___fldiv@bexp^0,c
  5295  00061E  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5296  000620  EF14  F003         	goto	u2501
  5297  000624  EF17  F003         	goto	u2500
  5298  000628                     u2501:
  5299  000628  FFFF               	dw	65535	; assembler added errata NOP
  5300  00062A  EF19  F003         	goto	l3450
  5301  00062E                     u2500:
  5302  00062E  FFFF               	dw	65535	; assembler added errata NOP
  5303  000630  8037               	bsf	___fldiv@bexp^0,0,c
  5304  000632                     l3450:
  5305  000632  FFFF               	dw	65535	; assembler added errata NOP
  5306  000634  5037               	movf	___fldiv@bexp^0,w,c
  5307  000636  B4D8               	btfsc	status,2,c
  5308  000638  EF20  F003         	goto	u2511
  5309  00063C  EF23  F003         	goto	u2510
  5310  000640                     u2511:
  5311  000640  FFFF               	dw	65535	; assembler added errata NOP
  5312  000642  EF3C  F003         	goto	l3460
  5313  000646                     u2510:
  5314  000646  FFFF               	dw	65535	; assembler added errata NOP
  5315  000648  2837               	incf	___fldiv@bexp^0,w,c
  5316  00064A  A4D8               	btfss	status,2,c
  5317  00064C  EF2A  F003         	goto	u2521
  5318  000650  EF2D  F003         	goto	u2520
  5319  000654                     u2521:
  5320  000654  FFFF               	dw	65535	; assembler added errata NOP
  5321  000656  EF36  F003         	goto	l3456
  5322  00065A                     u2520:
  5323  00065A  FFFF               	dw	65535	; assembler added errata NOP
  5324  00065C  0E00               	movlw	0
  5325  00065E  6E20               	movwf	___fldiv@b^0,c
  5326  000660  0E00               	movlw	0
  5327  000662  6E21               	movwf	(___fldiv@b+1)^0,c
  5328  000664  0E00               	movlw	0
  5329  000666  6E22               	movwf	(___fldiv@b+2)^0,c
  5330  000668  0E00               	movlw	0
  5331  00066A  6E23               	movwf	(___fldiv@b+3)^0,c
  5332  00066C                     l3456:
  5333  00066C  FFFF               	dw	65535	; assembler added errata NOP
  5334  00066E  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5335  000670  0E00               	movlw	0
  5336  000672  6E23               	movwf	(___fldiv@b+3)^0,c
  5337  000674  EF45  F003         	goto	l3462
  5338  000678                     l3460:
  5339  000678  FFFF               	dw	65535	; assembler added errata NOP
  5340  00067A  0E00               	movlw	0
  5341  00067C  6E20               	movwf	___fldiv@b^0,c
  5342  00067E  0E00               	movlw	0
  5343  000680  6E21               	movwf	(___fldiv@b+1)^0,c
  5344  000682  0E00               	movlw	0
  5345  000684  6E22               	movwf	(___fldiv@b+2)^0,c
  5346  000686  0E00               	movlw	0
  5347  000688  6E23               	movwf	(___fldiv@b+3)^0,c
  5348  00068A                     l3462:
  5349  00068A  FFFF               	dw	65535	; assembler added errata NOP
  5350  00068C  5027               	movf	(___fldiv@a+3)^0,w,c
  5351  00068E  0B80               	andlw	128
  5352  000690  1A30               	xorwf	___fldiv@sign^0,f,c
  5353  000692  5027               	movf	(___fldiv@a+3)^0,w,c
  5354  000694  2427               	addwf	(___fldiv@a+3)^0,w,c
  5355  000696  6E38               	movwf	___fldiv@aexp^0,c
  5356  000698  AE26               	btfss	(___fldiv@a+2)^0,7,c
  5357  00069A  EF51  F003         	goto	u2531
  5358  00069E  EF54  F003         	goto	u2530
  5359  0006A2                     u2531:
  5360  0006A2  FFFF               	dw	65535	; assembler added errata NOP
  5361  0006A4  EF56  F003         	goto	l3470
  5362  0006A8                     u2530:
  5363  0006A8  FFFF               	dw	65535	; assembler added errata NOP
  5364  0006AA  8038               	bsf	___fldiv@aexp^0,0,c
  5365  0006AC                     l3470:
  5366  0006AC  FFFF               	dw	65535	; assembler added errata NOP
  5367  0006AE  5038               	movf	___fldiv@aexp^0,w,c
  5368  0006B0  B4D8               	btfsc	status,2,c
  5369  0006B2  EF5D  F003         	goto	u2541
  5370  0006B6  EF60  F003         	goto	u2540
  5371  0006BA                     u2541:
  5372  0006BA  FFFF               	dw	65535	; assembler added errata NOP
  5373  0006BC  EF79  F003         	goto	l3480
  5374  0006C0                     u2540:
  5375  0006C0  FFFF               	dw	65535	; assembler added errata NOP
  5376  0006C2  2838               	incf	___fldiv@aexp^0,w,c
  5377  0006C4  A4D8               	btfss	status,2,c
  5378  0006C6  EF67  F003         	goto	u2551
  5379  0006CA  EF6A  F003         	goto	u2550
  5380  0006CE                     u2551:
  5381  0006CE  FFFF               	dw	65535	; assembler added errata NOP
  5382  0006D0  EF73  F003         	goto	l3476
  5383  0006D4                     u2550:
  5384  0006D4  FFFF               	dw	65535	; assembler added errata NOP
  5385  0006D6  0E00               	movlw	0
  5386  0006D8  6E24               	movwf	___fldiv@a^0,c
  5387  0006DA  0E00               	movlw	0
  5388  0006DC  6E25               	movwf	(___fldiv@a+1)^0,c
  5389  0006DE  0E00               	movlw	0
  5390  0006E0  6E26               	movwf	(___fldiv@a+2)^0,c
  5391  0006E2  0E00               	movlw	0
  5392  0006E4  6E27               	movwf	(___fldiv@a+3)^0,c
  5393  0006E6                     l3476:
  5394  0006E6  FFFF               	dw	65535	; assembler added errata NOP
  5395  0006E8  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5396  0006EA  0E00               	movlw	0
  5397  0006EC  6E27               	movwf	(___fldiv@a+3)^0,c
  5398  0006EE  EF82  F003         	goto	l3482
  5399  0006F2                     l3480:
  5400  0006F2  FFFF               	dw	65535	; assembler added errata NOP
  5401  0006F4  0E00               	movlw	0
  5402  0006F6  6E24               	movwf	___fldiv@a^0,c
  5403  0006F8  0E00               	movlw	0
  5404  0006FA  6E25               	movwf	(___fldiv@a+1)^0,c
  5405  0006FC  0E00               	movlw	0
  5406  0006FE  6E26               	movwf	(___fldiv@a+2)^0,c
  5407  000700  0E00               	movlw	0
  5408  000702  6E27               	movwf	(___fldiv@a+3)^0,c
  5409  000704                     l3482:
  5410  000704  FFFF               	dw	65535	; assembler added errata NOP
  5411  000706  5024               	movf	___fldiv@a^0,w,c
  5412  000708  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5413  00070A  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5414  00070C  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5415  00070E  A4D8               	btfss	status,2,c
  5416  000710  EF8C  F003         	goto	u2561
  5417  000714  EF8F  F003         	goto	u2560
  5418  000718                     u2561:
  5419  000718  FFFF               	dw	65535	; assembler added errata NOP
  5420  00071A  EFA9  F003         	goto	l3494
  5421  00071E                     u2560:
  5422  00071E  FFFF               	dw	65535	; assembler added errata NOP
  5423  000720  0E00               	movlw	0
  5424  000722  6E20               	movwf	___fldiv@b^0,c
  5425  000724  0E00               	movlw	0
  5426  000726  6E21               	movwf	(___fldiv@b+1)^0,c
  5427  000728  0E00               	movlw	0
  5428  00072A  6E22               	movwf	(___fldiv@b+2)^0,c
  5429  00072C  0E00               	movlw	0
  5430  00072E  6E23               	movwf	(___fldiv@b+3)^0,c
  5431  000730  0E80               	movlw	128
  5432  000732  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5433  000734  0E7F               	movlw	127
  5434  000736  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5435  000738                     l3488:
  5436  000738  FFFF               	dw	65535	; assembler added errata NOP
  5437  00073A  5030               	movf	___fldiv@sign^0,w,c
  5438  00073C  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5439  00073E  C020  F020         	movff	___fldiv@b,?___fldiv
  5440  000742  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5441  000746  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5442  00074A  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5443  00074E  EF1E  F005         	goto	l1171
  5444  000752                     l3494:
  5445  000752  FFFF               	dw	65535	; assembler added errata NOP
  5446  000754  5037               	movf	___fldiv@bexp^0,w,c
  5447  000756  A4D8               	btfss	status,2,c
  5448  000758  EFB0  F003         	goto	u2571
  5449  00075C  EFB3  F003         	goto	u2570
  5450  000760                     u2571:
  5451  000760  FFFF               	dw	65535	; assembler added errata NOP
  5452  000762  EFBE  F003         	goto	l3502
  5453  000766                     u2570:
  5454  000766  FFFF               	dw	65535	; assembler added errata NOP
  5455  000768  0E00               	movlw	0
  5456  00076A  6E20               	movwf	?___fldiv^0,c
  5457  00076C  0E00               	movlw	0
  5458  00076E  6E21               	movwf	(?___fldiv+1)^0,c
  5459  000770  0E00               	movlw	0
  5460  000772  6E22               	movwf	(?___fldiv+2)^0,c
  5461  000774  0E00               	movlw	0
  5462  000776  6E23               	movwf	(?___fldiv+3)^0,c
  5463  000778  EF1E  F005         	goto	l1171
  5464  00077C                     l3502:
  5465  00077C  FFFF               	dw	65535	; assembler added errata NOP
  5466  00077E  5038               	movf	___fldiv@aexp^0,w,c
  5467  000780  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5468  000784  6A29               	clrf	(??___fldiv+1)^0,c
  5469  000786  5E28               	subwf	??___fldiv^0,f,c
  5470  000788  0E00               	movlw	0
  5471  00078A  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5472  00078C  0E7F               	movlw	127
  5473  00078E  2428               	addwf	??___fldiv^0,w,c
  5474  000790  6E31               	movwf	___fldiv@new_exp^0,c
  5475  000792  0E00               	movlw	0
  5476  000794  2029               	addwfc	(??___fldiv+1)^0,w,c
  5477  000796  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5478  000798  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5479  00079C  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5480  0007A0  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5481  0007A4  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5482  0007A8  0E00               	movlw	0
  5483  0007AA  6E20               	movwf	___fldiv@b^0,c
  5484  0007AC  0E00               	movlw	0
  5485  0007AE  6E21               	movwf	(___fldiv@b+1)^0,c
  5486  0007B0  0E00               	movlw	0
  5487  0007B2  6E22               	movwf	(___fldiv@b+2)^0,c
  5488  0007B4  0E00               	movlw	0
  5489  0007B6  6E23               	movwf	(___fldiv@b+3)^0,c
  5490  0007B8  0E00               	movlw	0
  5491  0007BA  6E33               	movwf	___fldiv@grs^0,c
  5492  0007BC  0E00               	movlw	0
  5493  0007BE  6E34               	movwf	(___fldiv@grs+1)^0,c
  5494  0007C0  0E00               	movlw	0
  5495  0007C2  6E35               	movwf	(___fldiv@grs+2)^0,c
  5496  0007C4  0E00               	movlw	0
  5497  0007C6  6E36               	movwf	(___fldiv@grs+3)^0,c
  5498  0007C8  0E00               	movlw	0
  5499  0007CA  6E38               	movwf	___fldiv@aexp^0,c
  5500  0007CC  EF2A  F004         	goto	l1173
  5501  0007D0                     l3512:
  5502  0007D0  FFFF               	dw	65535	; assembler added errata NOP
  5503  0007D2  5038               	movf	___fldiv@aexp^0,w,c
  5504  0007D4  B4D8               	btfsc	status,2,c
  5505  0007D6  EFEF  F003         	goto	u2581
  5506  0007DA  EFF2  F003         	goto	u2580
  5507  0007DE                     u2581:
  5508  0007DE  FFFF               	dw	65535	; assembler added errata NOP
  5509  0007E0  EF0D  F004         	goto	l3520
  5510  0007E4                     u2580:
  5511  0007E4  FFFF               	dw	65535	; assembler added errata NOP
  5512  0007E6  90D8               	bcf	status,0,c
  5513  0007E8  362C               	rlcf	___fldiv@rem^0,f,c
  5514  0007EA  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5515  0007EC  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5516  0007EE  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5517  0007F0  90D8               	bcf	status,0,c
  5518  0007F2  3620               	rlcf	___fldiv@b^0,f,c
  5519  0007F4  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5520  0007F6  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5521  0007F8  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5522  0007FA  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5523  0007FC  EF02  F004         	goto	u2591
  5524  000800  EF05  F004         	goto	u2590
  5525  000804                     u2591:
  5526  000804  FFFF               	dw	65535	; assembler added errata NOP
  5527  000806  EF07  F004         	goto	l1176
  5528  00080A                     u2590:
  5529  00080A  FFFF               	dw	65535	; assembler added errata NOP
  5530  00080C  8020               	bsf	___fldiv@b^0,0,c
  5531  00080E                     l1176:
  5532  00080E  FFFF               	dw	65535	; assembler added errata NOP
  5533  000810  90D8               	bcf	status,0,c
  5534  000812  3633               	rlcf	___fldiv@grs^0,f,c
  5535  000814  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5536  000816  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5537  000818  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5538  00081A                     l3520:
  5539  00081A  FFFF               	dw	65535	; assembler added errata NOP
  5540  00081C  5024               	movf	___fldiv@a^0,w,c
  5541  00081E  5C2C               	subwf	___fldiv@rem^0,w,c
  5542  000820  5025               	movf	(___fldiv@a+1)^0,w,c
  5543  000822  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5544  000824  5026               	movf	(___fldiv@a+2)^0,w,c
  5545  000826  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5546  000828  5027               	movf	(___fldiv@a+3)^0,w,c
  5547  00082A  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5548  00082C  A0D8               	btfss	status,0,c
  5549  00082E  EF1B  F004         	goto	u2601
  5550  000832  EF1E  F004         	goto	u2600
  5551  000836                     u2601:
  5552  000836  FFFF               	dw	65535	; assembler added errata NOP
  5553  000838  EF28  F004         	goto	l3526
  5554  00083C                     u2600:
  5555  00083C  FFFF               	dw	65535	; assembler added errata NOP
  5556  00083E  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5557  000840  5024               	movf	___fldiv@a^0,w,c
  5558  000842  5E2C               	subwf	___fldiv@rem^0,f,c
  5559  000844  5025               	movf	(___fldiv@a+1)^0,w,c
  5560  000846  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5561  000848  5026               	movf	(___fldiv@a+2)^0,w,c
  5562  00084A  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5563  00084C  5027               	movf	(___fldiv@a+3)^0,w,c
  5564  00084E  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5565  000850                     l3526:
  5566  000850  FFFF               	dw	65535	; assembler added errata NOP
  5567  000852  2A38               	incf	___fldiv@aexp^0,f,c
  5568  000854                     l1173:
  5569  000854  FFFF               	dw	65535	; assembler added errata NOP
  5570  000856  0E19               	movlw	25
  5571  000858  6438               	cpfsgt	___fldiv@aexp^0,c
  5572  00085A  EF31  F004         	goto	u2611
  5573  00085E  EF34  F004         	goto	u2610
  5574  000862                     u2611:
  5575  000862  FFFF               	dw	65535	; assembler added errata NOP
  5576  000864  EFE8  F003         	goto	l3512
  5577  000868                     u2610:
  5578  000868  FFFF               	dw	65535	; assembler added errata NOP
  5579  00086A  502C               	movf	___fldiv@rem^0,w,c
  5580  00086C  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5581  00086E  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5582  000870  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5583  000872  B4D8               	btfsc	status,2,c
  5584  000874  EF3E  F004         	goto	u2621
  5585  000878  EF41  F004         	goto	u2620
  5586  00087C                     u2621:
  5587  00087C  FFFF               	dw	65535	; assembler added errata NOP
  5588  00087E  EF5E  F004         	goto	l3538
  5589  000882                     u2620:
  5590  000882  FFFF               	dw	65535	; assembler added errata NOP
  5591  000884  8033               	bsf	___fldiv@grs^0,0,c
  5592  000886  EF5E  F004         	goto	l3538
  5593  00088A                     l3532:
  5594  00088A  FFFF               	dw	65535	; assembler added errata NOP
  5595  00088C  90D8               	bcf	status,0,c
  5596  00088E  3620               	rlcf	___fldiv@b^0,f,c
  5597  000890  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5598  000892  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5599  000894  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5600  000896  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5601  000898  EF50  F004         	goto	u2631
  5602  00089C  EF53  F004         	goto	u2630
  5603  0008A0                     u2631:
  5604  0008A0  FFFF               	dw	65535	; assembler added errata NOP
  5605  0008A2  EF55  F004         	goto	l1182
  5606  0008A6                     u2630:
  5607  0008A6  FFFF               	dw	65535	; assembler added errata NOP
  5608  0008A8  8020               	bsf	___fldiv@b^0,0,c
  5609  0008AA                     l1182:
  5610  0008AA  FFFF               	dw	65535	; assembler added errata NOP
  5611  0008AC  90D8               	bcf	status,0,c
  5612  0008AE  3633               	rlcf	___fldiv@grs^0,f,c
  5613  0008B0  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5614  0008B2  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5615  0008B4  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5616  0008B6  0631               	decf	___fldiv@new_exp^0,f,c
  5617  0008B8  A0D8               	btfss	status,0,c
  5618  0008BA  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5619  0008BC                     l3538:
  5620  0008BC  FFFF               	dw	65535	; assembler added errata NOP
  5621  0008BE  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5622  0008C0  EF64  F004         	goto	u2641
  5623  0008C4  EF67  F004         	goto	u2640
  5624  0008C8                     u2641:
  5625  0008C8  FFFF               	dw	65535	; assembler added errata NOP
  5626  0008CA  EF45  F004         	goto	l3532
  5627  0008CE                     u2640:
  5628  0008CE  FFFF               	dw	65535	; assembler added errata NOP
  5629  0008D0  0E00               	movlw	0
  5630  0008D2  6E38               	movwf	___fldiv@aexp^0,c
  5631  0008D4  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5632  0008D6  EF6F  F004         	goto	u2651
  5633  0008DA  EF72  F004         	goto	u2650
  5634  0008DE                     u2651:
  5635  0008DE  FFFF               	dw	65535	; assembler added errata NOP
  5636  0008E0  EF9D  F004         	goto	l1184
  5637  0008E4                     u2650:
  5638  0008E4  FFFF               	dw	65535	; assembler added errata NOP
  5639  0008E6  0EFF               	movlw	255
  5640  0008E8  1433               	andwf	___fldiv@grs^0,w,c
  5641  0008EA  6E28               	movwf	??___fldiv^0,c
  5642  0008EC  0EFF               	movlw	255
  5643  0008EE  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5644  0008F0  6E29               	movwf	(??___fldiv+1)^0,c
  5645  0008F2  0EFF               	movlw	255
  5646  0008F4  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5647  0008F6  6E2A               	movwf	(??___fldiv+2)^0,c
  5648  0008F8  0E7F               	movlw	127
  5649  0008FA  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5650  0008FC  6E2B               	movwf	(??___fldiv+3)^0,c
  5651  0008FE  5028               	movf	??___fldiv^0,w,c
  5652  000900  1029               	iorwf	(??___fldiv+1)^0,w,c
  5653  000902  102A               	iorwf	(??___fldiv+2)^0,w,c
  5654  000904  102B               	iorwf	(??___fldiv+3)^0,w,c
  5655  000906  B4D8               	btfsc	status,2,c
  5656  000908  EF88  F004         	goto	u2661
  5657  00090C  EF8B  F004         	goto	u2660
  5658  000910                     u2661:
  5659  000910  FFFF               	dw	65535	; assembler added errata NOP
  5660  000912  EF91  F004         	goto	l1185
  5661  000916                     u2660:
  5662  000916  FFFF               	dw	65535	; assembler added errata NOP
  5663  000918                     l3546:
  5664  000918  FFFF               	dw	65535	; assembler added errata NOP
  5665  00091A  0E01               	movlw	1
  5666  00091C  6E38               	movwf	___fldiv@aexp^0,c
  5667  00091E  EF9D  F004         	goto	l1184
  5668  000922                     l1185:
  5669  000922  FFFF               	dw	65535	; assembler added errata NOP
  5670  000924  A020               	btfss	___fldiv@b^0,0,c
  5671  000926  EF97  F004         	goto	u2671
  5672  00092A  EF9A  F004         	goto	u2670
  5673  00092E                     u2671:
  5674  00092E  FFFF               	dw	65535	; assembler added errata NOP
  5675  000930  EF9D  F004         	goto	l1184
  5676  000934                     u2670:
  5677  000934  FFFF               	dw	65535	; assembler added errata NOP
  5678  000936  EF8C  F004         	goto	l3546
  5679  00093A                     l1184:
  5680  00093A  FFFF               	dw	65535	; assembler added errata NOP
  5681  00093C  5038               	movf	___fldiv@aexp^0,w,c
  5682  00093E  B4D8               	btfsc	status,2,c
  5683  000940  EFA4  F004         	goto	u2681
  5684  000944  EFA7  F004         	goto	u2680
  5685  000948                     u2681:
  5686  000948  FFFF               	dw	65535	; assembler added errata NOP
  5687  00094A  EFCE  F004         	goto	l3558
  5688  00094E                     u2680:
  5689  00094E  FFFF               	dw	65535	; assembler added errata NOP
  5690  000950  0E01               	movlw	1
  5691  000952  2620               	addwf	___fldiv@b^0,f,c
  5692  000954  0E00               	movlw	0
  5693  000956  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5694  000958  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5695  00095A  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5696  00095C  A023               	btfss	(___fldiv@b+3)^0,0,c
  5697  00095E  EFB3  F004         	goto	u2691
  5698  000962  EFB6  F004         	goto	u2690
  5699  000966                     u2691:
  5700  000966  FFFF               	dw	65535	; assembler added errata NOP
  5701  000968  EFCE  F004         	goto	l3558
  5702  00096C                     u2690:
  5703  00096C  FFFF               	dw	65535	; assembler added errata NOP
  5704  00096E  C020  F028         	movff	___fldiv@b,??___fldiv
  5705  000972  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5706  000976  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5707  00097A  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5708  00097E  342B               	rlcf	(??___fldiv+3)^0,w,c
  5709  000980  322B               	rrcf	(??___fldiv+3)^0,f,c
  5710  000982  322A               	rrcf	(??___fldiv+2)^0,f,c
  5711  000984  3229               	rrcf	(??___fldiv+1)^0,f,c
  5712  000986  3228               	rrcf	??___fldiv^0,f,c
  5713  000988  C028  F020         	movff	??___fldiv,___fldiv@b
  5714  00098C  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5715  000990  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5716  000994  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5717  000998  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5718  00099A  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5719  00099C                     l3558:
  5720  00099C  FFFF               	dw	65535	; assembler added errata NOP
  5721  00099E  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5722  0009A0  EFDA  F004         	goto	u2701
  5723  0009A4  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5724  0009A6  E109               	bnz	u2700
  5725  0009A8  2831               	incf	___fldiv@new_exp^0,w,c
  5726  0009AA  A0D8               	btfss	status,0,c
  5727  0009AC  EFDA  F004         	goto	u2701
  5728  0009B0  EFDD  F004         	goto	u2700
  5729  0009B4                     u2701:
  5730  0009B4  FFFF               	dw	65535	; assembler added errata NOP
  5731  0009B6  EFE9  F004         	goto	l3562
  5732  0009BA                     u2700:
  5733  0009BA  FFFF               	dw	65535	; assembler added errata NOP
  5734  0009BC  0E00               	movlw	0
  5735  0009BE  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5736  0009C0  6831               	setf	___fldiv@new_exp^0,c
  5737  0009C2  0E00               	movlw	0
  5738  0009C4  6E20               	movwf	___fldiv@b^0,c
  5739  0009C6  0E00               	movlw	0
  5740  0009C8  6E21               	movwf	(___fldiv@b+1)^0,c
  5741  0009CA  0E00               	movlw	0
  5742  0009CC  6E22               	movwf	(___fldiv@b+2)^0,c
  5743  0009CE  0E00               	movlw	0
  5744  0009D0  6E23               	movwf	(___fldiv@b+3)^0,c
  5745  0009D2                     l3562:
  5746  0009D2  FFFF               	dw	65535	; assembler added errata NOP
  5747  0009D4  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5748  0009D6  EFF8  F004         	goto	u2710
  5749  0009DA  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5750  0009DC  E106               	bnz	u2711
  5751  0009DE  0431               	decf	___fldiv@new_exp^0,w,c
  5752  0009E0  B0D8               	btfsc	status,0,c
  5753  0009E2  EFF5  F004         	goto	u2711
  5754  0009E6  EFF8  F004         	goto	u2710
  5755  0009EA                     u2711:
  5756  0009EA  FFFF               	dw	65535	; assembler added errata NOP
  5757  0009EC  EF07  F005         	goto	l3566
  5758  0009F0                     u2710:
  5759  0009F0  FFFF               	dw	65535	; assembler added errata NOP
  5760  0009F2  0E00               	movlw	0
  5761  0009F4  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5762  0009F6  0E00               	movlw	0
  5763  0009F8  6E31               	movwf	___fldiv@new_exp^0,c
  5764  0009FA  0E00               	movlw	0
  5765  0009FC  6E20               	movwf	___fldiv@b^0,c
  5766  0009FE  0E00               	movlw	0
  5767  000A00  6E21               	movwf	(___fldiv@b+1)^0,c
  5768  000A02  0E00               	movlw	0
  5769  000A04  6E22               	movwf	(___fldiv@b+2)^0,c
  5770  000A06  0E00               	movlw	0
  5771  000A08  6E23               	movwf	(___fldiv@b+3)^0,c
  5772  000A0A  0E00               	movlw	0
  5773  000A0C  6E30               	movwf	___fldiv@sign^0,c
  5774  000A0E                     l3566:
  5775  000A0E  FFFF               	dw	65535	; assembler added errata NOP
  5776  000A10  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5777  000A14  A037               	btfss	___fldiv@bexp^0,0,c
  5778  000A16  EF0F  F005         	goto	u2721
  5779  000A1A  EF12  F005         	goto	u2720
  5780  000A1E                     u2721:
  5781  000A1E  FFFF               	dw	65535	; assembler added errata NOP
  5782  000A20  EF16  F005         	goto	l3572
  5783  000A24                     u2720:
  5784  000A24  FFFF               	dw	65535	; assembler added errata NOP
  5785  000A26  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5786  000A28  EF18  F005         	goto	l3574
  5787  000A2C                     l3572:
  5788  000A2C  FFFF               	dw	65535	; assembler added errata NOP
  5789  000A2E  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5790  000A30                     l3574:
  5791  000A30  FFFF               	dw	65535	; assembler added errata NOP
  5792  000A32  90D8               	bcf	status,0,c
  5793  000A34  3037               	rrcf	___fldiv@bexp^0,w,c
  5794  000A36  6E23               	movwf	(___fldiv@b+3)^0,c
  5795  000A38  EF9C  F003         	goto	l3488
  5796  000A3C                     l1171:
  5797  000A3C  FFFF               	dw	65535	; assembler added errata NOP
  5798  000A3E  0012               	return		;funcret
  5799  000A40  FFFF               	dw	65535	; errata NOP
  5800  000A42                     __end_of___fldiv:
  5801                           	callstack 0
  5802                           
  5803 ;; *************** function _releaseObj *****************
  5804 ;; Defined at:
  5805 ;;		line 608 in file "motors.c"
  5806 ;; Parameters:    Size  Location     Type
  5807 ;;		None
  5808 ;; Auto vars:     Size  Location     Type
  5809 ;;		None
  5810 ;; Return value:  Size  Location     Type
  5811 ;;                  1    wreg      void 
  5812 ;; Registers used:
  5813 ;;		wreg, status,2, status,0, cstack
  5814 ;; Tracked objects:
  5815 ;;		On entry : 0/0
  5816 ;;		On exit  : 0/0
  5817 ;;		Unchanged: 0/0
  5818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5819 ;;      Params:         0       0       0       0       0       0       0
  5820 ;;      Locals:         0       0       0       0       0       0       0
  5821 ;;      Temps:          0       0       0       0       0       0       0
  5822 ;;      Totals:         0       0       0       0       0       0       0
  5823 ;;Total ram usage:        0 bytes
  5824 ;; Hardware stack levels used:    1
  5825 ;; Hardware stack levels required when called:    5
  5826 ;; This function calls:
  5827 ;;		_stepMade
  5828 ;; This function is called by:
  5829 ;;		_executeData
  5830 ;; This function uses a non-reentrant model
  5831 ;;
  5832                           
  5833                           	psect	text34
  5834  0023F6                     __ptext34:
  5835                           	callstack 0
  5836  0023F6                     _releaseObj:
  5837                           	callstack 0
  5838  0023F6  FFFF               	dw	65535	; assembler added errata NOP
  5839  0023F8                     
  5840                           ;motors.c: 609:     LATDbits.LATD1 = 0;
  5841  0023F8  928C               	bcf	140,1,c	;volatile
  5842  0023FA                     l3938:
  5843  0023FA  FFFF               	dw	65535	; assembler added errata NOP
  5844  0023FC  EC38  F012         	call	_stepMade	;wreg free
  5845  002400  5012               	movf	?_stepMade^0,w,c
  5846  002402  1013               	iorwf	(?_stepMade+1)^0,w,c
  5847  002404  B4D8               	btfsc	status,2,c
  5848  002406  EF07  F012         	goto	u3321
  5849  00240A  EF0A  F012         	goto	u3320
  5850  00240E                     u3321:
  5851  00240E  FFFF               	dw	65535	; assembler added errata NOP
  5852  002410  EFFD  F011         	goto	l3938
  5853  002414                     u3320:
  5854  002414  FFFF               	dw	65535	; assembler added errata NOP
  5855  002416  0012               	return		;funcret
  5856  002418  FFFF               	dw	65535	; errata NOP
  5857  00241A                     __end_of_releaseObj:
  5858                           	callstack 0
  5859                           
  5860 ;; *************** function _pickObject *****************
  5861 ;; Defined at:
  5862 ;;		line 597 in file "motors.c"
  5863 ;; Parameters:    Size  Location     Type
  5864 ;;		None
  5865 ;; Auto vars:     Size  Location     Type
  5866 ;;		None
  5867 ;; Return value:  Size  Location     Type
  5868 ;;                  1    wreg      void 
  5869 ;; Registers used:
  5870 ;;		wreg, status,2, status,0, cstack
  5871 ;; Tracked objects:
  5872 ;;		On entry : 0/0
  5873 ;;		On exit  : 0/0
  5874 ;;		Unchanged: 0/0
  5875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5876 ;;      Params:         0       0       0       0       0       0       0
  5877 ;;      Locals:         0       0       0       0       0       0       0
  5878 ;;      Temps:          0       0       0       0       0       0       0
  5879 ;;      Totals:         0       0       0       0       0       0       0
  5880 ;;Total ram usage:        0 bytes
  5881 ;; Hardware stack levels used:    1
  5882 ;; Hardware stack levels required when called:    5
  5883 ;; This function calls:
  5884 ;;		_stepMade
  5885 ;; This function is called by:
  5886 ;;		_executeData
  5887 ;; This function uses a non-reentrant model
  5888 ;;
  5889                           
  5890                           	psect	text35
  5891  00241A                     __ptext35:
  5892                           	callstack 0
  5893  00241A                     _pickObject:
  5894                           	callstack 0
  5895  00241A  FFFF               	dw	65535	; assembler added errata NOP
  5896  00241C                     
  5897                           ;motors.c: 598:     LATDbits.LATD1 = 1;
  5898  00241C  828C               	bsf	140,1,c	;volatile
  5899  00241E                     l3934:
  5900  00241E  FFFF               	dw	65535	; assembler added errata NOP
  5901  002420  EC38  F012         	call	_stepMade	;wreg free
  5902  002424  5012               	movf	?_stepMade^0,w,c
  5903  002426  1013               	iorwf	(?_stepMade+1)^0,w,c
  5904  002428  B4D8               	btfsc	status,2,c
  5905  00242A  EF19  F012         	goto	u3311
  5906  00242E  EF1C  F012         	goto	u3310
  5907  002432                     u3311:
  5908  002432  FFFF               	dw	65535	; assembler added errata NOP
  5909  002434  EF0F  F012         	goto	l3934
  5910  002438                     u3310:
  5911  002438  FFFF               	dw	65535	; assembler added errata NOP
  5912  00243A  0012               	return		;funcret
  5913  00243C  FFFF               	dw	65535	; errata NOP
  5914  00243E                     __end_of_pickObject:
  5915                           	callstack 0
  5916                           
  5917 ;; *************** function _moveToPoint *****************
  5918 ;; Defined at:
  5919 ;;		line 264 in file "motors.c"
  5920 ;; Parameters:    Size  Location     Type
  5921 ;;  x1              2   21[COMRAM] unsigned int 
  5922 ;;  y1              2   23[COMRAM] unsigned int 
  5923 ;;  x2              2   25[COMRAM] unsigned int 
  5924 ;;  y2              2   27[COMRAM] unsigned int 
  5925 ;; Auto vars:     Size  Location     Type
  5926 ;;  MOT2Directio    1   34[COMRAM] unsigned char 
  5927 ;;  MOT1Directio    1   33[COMRAM] unsigned char 
  5928 ;;  keepMovingY     1   32[COMRAM] unsigned char 
  5929 ;;  keepMovingX     1   31[COMRAM] unsigned char 
  5930 ;; Return value:  Size  Location     Type
  5931 ;;                  1    wreg      unsigned char 
  5932 ;; Registers used:
  5933 ;;		wreg, status,2, status,0, cstack
  5934 ;; Tracked objects:
  5935 ;;		On entry : 0/0
  5936 ;;		On exit  : 0/0
  5937 ;;		Unchanged: 0/0
  5938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5939 ;;      Params:         8       0       0       0       0       0       0
  5940 ;;      Locals:         4       0       0       0       0       0       0
  5941 ;;      Temps:          2       0       0       0       0       0       0
  5942 ;;      Totals:        14       0       0       0       0       0       0
  5943 ;;Total ram usage:       14 bytes
  5944 ;; Hardware stack levels used:    1
  5945 ;; Hardware stack levels required when called:    5
  5946 ;; This function calls:
  5947 ;;		_resetStep
  5948 ;;		_setDirection
  5949 ;;		_stepCounter
  5950 ;;		_stepMade
  5951 ;; This function is called by:
  5952 ;;		_executeData
  5953 ;; This function uses a non-reentrant model
  5954 ;;
  5955                           
  5956                           	psect	text36
  5957  000A42                     __ptext36:
  5958                           	callstack 0
  5959  000A42                     _moveToPoint:
  5960                           	callstack 0
  5961  000A42  FFFF               	dw	65535	; assembler added errata NOP
  5962  000A44                     
  5963                           ;motors.c: 266:     unsigned char MOT1Direction, MOT2Direction;;motors.c: 269:     if(x2
      +                           > maxX || y2 > maxY){
  5964  000A44  0EE9               	movlw	233
  5965  000A46  5C1A               	subwf	moveToPoint@x2^0,w,c
  5966  000A48  0E03               	movlw	3
  5967  000A4A  581B               	subwfb	(moveToPoint@x2+1)^0,w,c
  5968  000A4C  B0D8               	btfsc	status,0,c
  5969  000A4E  EF2B  F005         	goto	u2961
  5970  000A52  EF2E  F005         	goto	u2960
  5971  000A56                     u2961:
  5972  000A56  FFFF               	dw	65535	; assembler added errata NOP
  5973  000A58  EF3B  F005         	goto	l3724
  5974  000A5C                     u2960:
  5975  000A5C  FFFF               	dw	65535	; assembler added errata NOP
  5976  000A5E  0EE9               	movlw	233
  5977  000A60  5C1C               	subwf	moveToPoint@y2^0,w,c
  5978  000A62  0E03               	movlw	3
  5979  000A64  581D               	subwfb	(moveToPoint@y2+1)^0,w,c
  5980  000A66  A0D8               	btfss	status,0,c
  5981  000A68  EF38  F005         	goto	u2971
  5982  000A6C  EF3B  F005         	goto	u2970
  5983  000A70                     u2971:
  5984  000A70  FFFF               	dw	65535	; assembler added errata NOP
  5985  000A72  EF3F  F005         	goto	l3728
  5986  000A76                     u2970:
  5987  000A76                     l3724:
  5988  000A76  FFFF               	dw	65535	; assembler added errata NOP
  5989                           
  5990                           ;motors.c: 270:         return(5);
  5991  000A78  0E05               	movlw	5
  5992  000A7A  EF7F  F006         	goto	l141
  5993  000A7E                     l3728:
  5994  000A7E  FFFF               	dw	65535	; assembler added errata NOP
  5995                           
  5996                           ;motors.c: 274:     if((x2 - x1) > 0){
  5997  000A80  5016               	movf	moveToPoint@x1^0,w,c
  5998  000A82  5C1A               	subwf	moveToPoint@x2^0,w,c
  5999  000A84  6E1E               	movwf	??_moveToPoint^0,c
  6000  000A86  5017               	movf	(moveToPoint@x1+1)^0,w,c
  6001  000A88  581B               	subwfb	(moveToPoint@x2+1)^0,w,c
  6002  000A8A  6E1F               	movwf	(??_moveToPoint+1)^0,c
  6003  000A8C  501E               	movf	??_moveToPoint^0,w,c
  6004  000A8E  101F               	iorwf	(??_moveToPoint+1)^0,w,c
  6005  000A90  B4D8               	btfsc	status,2,c
  6006  000A92  EF4D  F005         	goto	u2981
  6007  000A96  EF50  F005         	goto	u2980
  6008  000A9A                     u2981:
  6009  000A9A  FFFF               	dw	65535	; assembler added errata NOP
  6010  000A9C  EF5A  F005         	goto	l3734
  6011  000AA0                     u2980:
  6012  000AA0  FFFF               	dw	65535	; assembler added errata NOP
  6013  000AA2                     
  6014                           ;motors.c: 275:         setDirection(1, 0);
  6015  000AA2  0E00               	movlw	0
  6016  000AA4  6E12               	movwf	setDirection@motor^0,c
  6017  000AA6  0E01               	movlw	1
  6018  000AA8  ECD4  F010         	call	_setDirection
  6019  000AAC                     
  6020                           ;motors.c: 276:         MOT1Direction = 1;
  6021  000AAC  0E01               	movlw	1
  6022  000AAE  6E22               	movwf	moveToPoint@MOT1Direction^0,c
  6023                           
  6024                           ;motors.c: 277:     }else{
  6025  000AB0  EF62  F005         	goto	l3738
  6026  000AB4                     l3734:
  6027  000AB4  FFFF               	dw	65535	; assembler added errata NOP
  6028                           
  6029                           ;motors.c: 278:         setDirection(0, 0);
  6030  000AB6  0E00               	movlw	0
  6031  000AB8  6E12               	movwf	setDirection@motor^0,c
  6032  000ABA  0E00               	movlw	0
  6033  000ABC  ECD4  F010         	call	_setDirection
  6034  000AC0                     
  6035                           ;motors.c: 279:         MOT1Direction = 0;
  6036  000AC0  0E00               	movlw	0
  6037  000AC2  6E22               	movwf	moveToPoint@MOT1Direction^0,c
  6038  000AC4                     l3738:
  6039  000AC4  FFFF               	dw	65535	; assembler added errata NOP
  6040                           
  6041                           ;motors.c: 282:     if((y2 - y1) > 0){
  6042  000AC6  5018               	movf	moveToPoint@y1^0,w,c
  6043  000AC8  5C1C               	subwf	moveToPoint@y2^0,w,c
  6044  000ACA  6E1E               	movwf	??_moveToPoint^0,c
  6045  000ACC  5019               	movf	(moveToPoint@y1+1)^0,w,c
  6046  000ACE  581D               	subwfb	(moveToPoint@y2+1)^0,w,c
  6047  000AD0  6E1F               	movwf	(??_moveToPoint+1)^0,c
  6048  000AD2  501E               	movf	??_moveToPoint^0,w,c
  6049  000AD4  101F               	iorwf	(??_moveToPoint+1)^0,w,c
  6050  000AD6  B4D8               	btfsc	status,2,c
  6051  000AD8  EF70  F005         	goto	u2991
  6052  000ADC  EF73  F005         	goto	u2990
  6053  000AE0                     u2991:
  6054  000AE0  FFFF               	dw	65535	; assembler added errata NOP
  6055  000AE2  EF7D  F005         	goto	l3744
  6056  000AE6                     u2990:
  6057  000AE6  FFFF               	dw	65535	; assembler added errata NOP
  6058  000AE8                     
  6059                           ;motors.c: 283:         setDirection(1, 1);
  6060  000AE8  0E01               	movlw	1
  6061  000AEA  6E12               	movwf	setDirection@motor^0,c
  6062  000AEC  0E01               	movlw	1
  6063  000AEE  ECD4  F010         	call	_setDirection
  6064  000AF2                     
  6065                           ;motors.c: 284:         MOT2Direction = 1;
  6066  000AF2  0E01               	movlw	1
  6067  000AF4  6E23               	movwf	moveToPoint@MOT2Direction^0,c
  6068                           
  6069                           ;motors.c: 285:     }else{
  6070  000AF6  EF85  F005         	goto	l3748
  6071  000AFA                     l3744:
  6072  000AFA  FFFF               	dw	65535	; assembler added errata NOP
  6073                           
  6074                           ;motors.c: 286:         setDirection(0, 1);
  6075  000AFC  0E01               	movlw	1
  6076  000AFE  6E12               	movwf	setDirection@motor^0,c
  6077  000B00  0E00               	movlw	0
  6078  000B02  ECD4  F010         	call	_setDirection
  6079  000B06                     
  6080                           ;motors.c: 287:         MOT2Direction = 0;
  6081  000B06  0E00               	movlw	0
  6082  000B08  6E23               	movwf	moveToPoint@MOT2Direction^0,c
  6083  000B0A                     l3748:
  6084  000B0A  FFFF               	dw	65535	; assembler added errata NOP
  6085                           
  6086                           ;motors.c: 290:     unsigned char keepMovingX = 1;
  6087  000B0C  0E01               	movlw	1
  6088  000B0E  6E20               	movwf	moveToPoint@keepMovingX^0,c
  6089  000B10                     
  6090                           ;motors.c: 291:     unsigned char keepMovingY = 1;
  6091  000B10  0E01               	movlw	1
  6092  000B12  6E21               	movwf	moveToPoint@keepMovingY^0,c
  6093  000B14                     
  6094                           ;motors.c: 294:     T2CONbits.TMR2ON = 1;
  6095  000B14  84CA               	bsf	202,2,c	;volatile
  6096  000B16                     
  6097                           ;motors.c: 296:     tm0Error = 0;
  6098  000B16  0E00               	movlw	0
  6099  000B18  6E5C               	movwf	(_tm0Error+1)^0,c
  6100  000B1A  0E00               	movlw	0
  6101  000B1C  6E5B               	movwf	_tm0Error^0,c
  6102  000B1E                     
  6103                           ;motors.c: 297:     tm0Limit = 100;
  6104  000B1E  0E64               	movlw	100
  6105  000B20  6E68               	movwf	_tm0Limit^0,c
  6106  000B22                     
  6107                           ;motors.c: 298:     T0CONbits.TMR0ON = 1;
  6108  000B22  8ED5               	bsf	213,7,c	;volatile
  6109                           
  6110                           ;motors.c: 300:     while(keepMovingX || keepMovingY){
  6111  000B24  EF5F  F006         	goto	l3794
  6112  000B28                     l3760:
  6113  000B28  FFFF               	dw	65535	; assembler added errata NOP
  6114                           
  6115                           ;motors.c: 303:         if(tm0Error){
  6116  000B2A  505B               	movf	_tm0Error^0,w,c
  6117  000B2C  105C               	iorwf	(_tm0Error+1)^0,w,c
  6118  000B2E  B4D8               	btfsc	status,2,c
  6119  000B30  EF9C  F005         	goto	u3001
  6120  000B34  EF9F  F005         	goto	u3000
  6121  000B38                     u3001:
  6122  000B38  FFFF               	dw	65535	; assembler added errata NOP
  6123  000B3A  EFA8  F005         	goto	l3766
  6124  000B3E                     u3000:
  6125  000B3E  FFFF               	dw	65535	; assembler added errata NOP
  6126  000B40                     
  6127                           ;motors.c: 305:             LATAbits.LATA2 = 0;
  6128  000B40  9489               	bcf	137,2,c	;volatile
  6129                           
  6130                           ;motors.c: 306:             LATBbits.LATB4 = 0;
  6131  000B42  988A               	bcf	138,4,c	;volatile
  6132  000B44                     
  6133                           ;motors.c: 307:             tm0Error = 4;
  6134  000B44  0E00               	movlw	0
  6135  000B46  6E5C               	movwf	(_tm0Error+1)^0,c
  6136  000B48  0E04               	movlw	4
  6137  000B4A  6E5B               	movwf	_tm0Error^0,c
  6138                           
  6139                           ;motors.c: 308:             break;
  6140  000B4C  EF73  F006         	goto	l149
  6141  000B50                     l3766:
  6142  000B50  FFFF               	dw	65535	; assembler added errata NOP
  6143                           
  6144                           ;motors.c: 316:         if(MOT1Direction == 1){
  6145  000B52  0422               	decf	moveToPoint@MOT1Direction^0,w,c
  6146  000B54  A4D8               	btfss	status,2,c
  6147  000B56  EFAF  F005         	goto	u3011
  6148  000B5A  EFB2  F005         	goto	u3010
  6149  000B5E                     u3011:
  6150  000B5E  FFFF               	dw	65535	; assembler added errata NOP
  6151  000B60  EFD0  F005         	goto	l3772
  6152  000B64                     u3010:
  6153  000B64  FFFF               	dw	65535	; assembler added errata NOP
  6154  000B66                     
  6155                           ;motors.c: 317:             if(x1 + stepCounter() == x2){
  6156  000B66  EC7A  F012         	call	_stepCounter	;wreg free
  6157  000B6A  5016               	movf	moveToPoint@x1^0,w,c
  6158  000B6C  2612               	addwf	?_stepCounter^0,f,c
  6159  000B6E  5017               	movf	(moveToPoint@x1+1)^0,w,c
  6160  000B70  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6161  000B72  501A               	movf	moveToPoint@x2^0,w,c
  6162  000B74  1812               	xorwf	?_stepCounter^0,w,c
  6163  000B76  E107               	bnz	u3021
  6164  000B78  501B               	movf	(moveToPoint@x2+1)^0,w,c
  6165  000B7A  1813               	xorwf	(?_stepCounter+1)^0,w,c
  6166  000B7C  A4D8               	btfss	status,2,c
  6167  000B7E  EFC3  F005         	goto	u3021
  6168  000B82  EFC6  F005         	goto	u3020
  6169  000B86                     u3021:
  6170  000B86  FFFF               	dw	65535	; assembler added errata NOP
  6171  000B88  EFCC  F005         	goto	l151
  6172  000B8C                     u3020:
  6173  000B8C  FFFF               	dw	65535	; assembler added errata NOP
  6174  000B8E                     l3770:
  6175  000B8E  FFFF               	dw	65535	; assembler added errata NOP
  6176                           
  6177                           ;motors.c: 319:                 keepMovingX = 0;
  6178  000B90  0E00               	movlw	0
  6179  000B92  6E20               	movwf	moveToPoint@keepMovingX^0,c
  6180                           
  6181                           ;motors.c: 320:             }else{
  6182  000B94  EFF7  F005         	goto	l3778
  6183  000B98                     l151:
  6184  000B98  FFFF               	dw	65535	; assembler added errata NOP
  6185                           
  6186                           ;motors.c: 322:                 LATAbits.LATA2 = 1;
  6187  000B9A  8489               	bsf	137,2,c	;volatile
  6188  000B9C  EFF7  F005         	goto	l3778
  6189  000BA0                     l3772:
  6190  000BA0  FFFF               	dw	65535	; assembler added errata NOP
  6191  000BA2  5022               	movf	moveToPoint@MOT1Direction^0,w,c
  6192  000BA4  A4D8               	btfss	status,2,c
  6193  000BA6  EFD7  F005         	goto	u3031
  6194  000BAA  EFDA  F005         	goto	u3030
  6195  000BAE                     u3031:
  6196  000BAE  FFFF               	dw	65535	; assembler added errata NOP
  6197  000BB0  EFF7  F005         	goto	l3778
  6198  000BB4                     u3030:
  6199  000BB4  FFFF               	dw	65535	; assembler added errata NOP
  6200  000BB6                     
  6201                           ;motors.c: 325:             if(x1 - stepCounter() == x2){
  6202  000BB6  EC7A  F012         	call	_stepCounter	;wreg free
  6203  000BBA  C016  F01E         	movff	moveToPoint@x1,??_moveToPoint
  6204  000BBE  C017  F01F         	movff	moveToPoint@x1+1,??_moveToPoint+1
  6205  000BC2  5012               	movf	?_stepCounter^0,w,c
  6206  000BC4  5E1E               	subwf	??_moveToPoint^0,f,c
  6207  000BC6  5013               	movf	(?_stepCounter+1)^0,w,c
  6208  000BC8  5A1F               	subwfb	(??_moveToPoint+1)^0,f,c
  6209  000BCA  501A               	movf	moveToPoint@x2^0,w,c
  6210  000BCC  181E               	xorwf	??_moveToPoint^0,w,c
  6211  000BCE  E107               	bnz	u3041
  6212  000BD0  501B               	movf	(moveToPoint@x2+1)^0,w,c
  6213  000BD2  181F               	xorwf	(??_moveToPoint+1)^0,w,c
  6214  000BD4  A4D8               	btfss	status,2,c
  6215  000BD6  EFEF  F005         	goto	u3041
  6216  000BDA  EFF2  F005         	goto	u3040
  6217  000BDE                     u3041:
  6218  000BDE  FFFF               	dw	65535	; assembler added errata NOP
  6219  000BE0  EFF5  F005         	goto	l155
  6220  000BE4                     u3040:
  6221  000BE4  FFFF               	dw	65535	; assembler added errata NOP
  6222  000BE6  EFC7  F005         	goto	l3770
  6223  000BEA                     l155:
  6224  000BEA  FFFF               	dw	65535	; assembler added errata NOP
  6225                           
  6226                           ;motors.c: 330:                 LATAbits.LATA2 = 1;
  6227  000BEC  8489               	bsf	137,2,c	;volatile
  6228  000BEE                     l3778:
  6229  000BEE  FFFF               	dw	65535	; assembler added errata NOP
  6230                           
  6231                           ;motors.c: 334:         if(MOT2Direction == 1){
  6232  000BF0  0423               	decf	moveToPoint@MOT2Direction^0,w,c
  6233  000BF2  A4D8               	btfss	status,2,c
  6234  000BF4  EFFE  F005         	goto	u3051
  6235  000BF8  EF01  F006         	goto	u3050
  6236  000BFC                     u3051:
  6237  000BFC  FFFF               	dw	65535	; assembler added errata NOP
  6238  000BFE  EF1F  F006         	goto	l3784
  6239  000C02                     u3050:
  6240  000C02  FFFF               	dw	65535	; assembler added errata NOP
  6241  000C04                     
  6242                           ;motors.c: 336:             if(y1 + stepCounter() == y2){
  6243  000C04  EC7A  F012         	call	_stepCounter	;wreg free
  6244  000C08  5018               	movf	moveToPoint@y1^0,w,c
  6245  000C0A  2612               	addwf	?_stepCounter^0,f,c
  6246  000C0C  5019               	movf	(moveToPoint@y1+1)^0,w,c
  6247  000C0E  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6248  000C10  501C               	movf	moveToPoint@y2^0,w,c
  6249  000C12  1812               	xorwf	?_stepCounter^0,w,c
  6250  000C14  E107               	bnz	u3061
  6251  000C16  501D               	movf	(moveToPoint@y2+1)^0,w,c
  6252  000C18  1813               	xorwf	(?_stepCounter+1)^0,w,c
  6253  000C1A  A4D8               	btfss	status,2,c
  6254  000C1C  EF12  F006         	goto	u3061
  6255  000C20  EF15  F006         	goto	u3060
  6256  000C24                     u3061:
  6257  000C24  FFFF               	dw	65535	; assembler added errata NOP
  6258  000C26  EF1B  F006         	goto	l158
  6259  000C2A                     u3060:
  6260  000C2A  FFFF               	dw	65535	; assembler added errata NOP
  6261  000C2C                     l3782:
  6262  000C2C  FFFF               	dw	65535	; assembler added errata NOP
  6263                           
  6264                           ;motors.c: 338:                 keepMovingY = 0;
  6265  000C2E  0E00               	movlw	0
  6266  000C30  6E21               	movwf	moveToPoint@keepMovingY^0,c
  6267                           
  6268                           ;motors.c: 339:             }else{
  6269  000C32  EF42  F006         	goto	l3790
  6270  000C36                     l158:
  6271  000C36  FFFF               	dw	65535	; assembler added errata NOP
  6272                           
  6273                           ;motors.c: 341:                 LATBbits.LATB4 = 1;
  6274  000C38  888A               	bsf	138,4,c	;volatile
  6275  000C3A  EF42  F006         	goto	l3790
  6276  000C3E                     l3784:
  6277  000C3E  FFFF               	dw	65535	; assembler added errata NOP
  6278  000C40  5023               	movf	moveToPoint@MOT2Direction^0,w,c
  6279  000C42  A4D8               	btfss	status,2,c
  6280  000C44  EF26  F006         	goto	u3071
  6281  000C48  EF29  F006         	goto	u3070
  6282  000C4C                     u3071:
  6283  000C4C  FFFF               	dw	65535	; assembler added errata NOP
  6284  000C4E  EF42  F006         	goto	l3790
  6285  000C52                     u3070:
  6286  000C52  FFFF               	dw	65535	; assembler added errata NOP
  6287  000C54                     
  6288                           ;motors.c: 345:             if(y1 + stepCounter() == y2){
  6289  000C54  EC7A  F012         	call	_stepCounter	;wreg free
  6290  000C58  5018               	movf	moveToPoint@y1^0,w,c
  6291  000C5A  2612               	addwf	?_stepCounter^0,f,c
  6292  000C5C  5019               	movf	(moveToPoint@y1+1)^0,w,c
  6293  000C5E  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6294  000C60  501C               	movf	moveToPoint@y2^0,w,c
  6295  000C62  1812               	xorwf	?_stepCounter^0,w,c
  6296  000C64  E107               	bnz	u3081
  6297  000C66  501D               	movf	(moveToPoint@y2+1)^0,w,c
  6298  000C68  1813               	xorwf	(?_stepCounter+1)^0,w,c
  6299  000C6A  A4D8               	btfss	status,2,c
  6300  000C6C  EF3A  F006         	goto	u3081
  6301  000C70  EF3D  F006         	goto	u3080
  6302  000C74                     u3081:
  6303  000C74  FFFF               	dw	65535	; assembler added errata NOP
  6304  000C76  EF40  F006         	goto	l162
  6305  000C7A                     u3080:
  6306  000C7A  FFFF               	dw	65535	; assembler added errata NOP
  6307  000C7C  EF16  F006         	goto	l3782
  6308  000C80                     l162:
  6309  000C80  FFFF               	dw	65535	; assembler added errata NOP
  6310                           
  6311                           ;motors.c: 350:                 LATBbits.LATB4 = 1;
  6312  000C82  888A               	bsf	138,4,c	;volatile
  6313  000C84                     l3790:
  6314  000C84  FFFF               	dw	65535	; assembler added errata NOP
  6315  000C86  EC38  F012         	call	_stepMade	;wreg free
  6316  000C8A  5012               	movf	?_stepMade^0,w,c
  6317  000C8C  1013               	iorwf	(?_stepMade+1)^0,w,c
  6318  000C8E  B4D8               	btfsc	status,2,c
  6319  000C90  EF4C  F006         	goto	u3091
  6320  000C94  EF4F  F006         	goto	u3090
  6321  000C98                     u3091:
  6322  000C98  FFFF               	dw	65535	; assembler added errata NOP
  6323  000C9A  EF42  F006         	goto	l3790
  6324  000C9E                     u3090:
  6325  000C9E  FFFF               	dw	65535	; assembler added errata NOP
  6326  000CA0                     
  6327                           ;motors.c: 358:         LATAbits.LATA2 = 0;
  6328  000CA0  9489               	bcf	137,2,c	;volatile
  6329                           
  6330                           ;motors.c: 359:         LATBbits.LATB4 = 0;
  6331  000CA2  988A               	bcf	138,4,c	;volatile
  6332  000CA4                     l3792:
  6333  000CA4  FFFF               	dw	65535	; assembler added errata NOP
  6334  000CA6  EC38  F012         	call	_stepMade	;wreg free
  6335  000CAA  5012               	movf	?_stepMade^0,w,c
  6336  000CAC  1013               	iorwf	(?_stepMade+1)^0,w,c
  6337  000CAE  B4D8               	btfsc	status,2,c
  6338  000CB0  EF5C  F006         	goto	u3101
  6339  000CB4  EF5F  F006         	goto	u3100
  6340  000CB8                     u3101:
  6341  000CB8  FFFF               	dw	65535	; assembler added errata NOP
  6342  000CBA  EF52  F006         	goto	l3792
  6343  000CBE                     u3100:
  6344  000CBE                     l3794:
  6345  000CBE  FFFF               	dw	65535	; assembler added errata NOP
  6346                           
  6347                           ;motors.c: 300:     while(keepMovingX || keepMovingY){
  6348  000CC0  5020               	movf	moveToPoint@keepMovingX^0,w,c
  6349  000CC2  A4D8               	btfss	status,2,c
  6350  000CC4  EF66  F006         	goto	u3111
  6351  000CC8  EF69  F006         	goto	u3110
  6352  000CCC                     u3111:
  6353  000CCC  FFFF               	dw	65535	; assembler added errata NOP
  6354  000CCE  EF94  F005         	goto	l3760
  6355  000CD2                     u3110:
  6356  000CD2  FFFF               	dw	65535	; assembler added errata NOP
  6357  000CD4  5021               	movf	moveToPoint@keepMovingY^0,w,c
  6358  000CD6  A4D8               	btfss	status,2,c
  6359  000CD8  EF70  F006         	goto	u3121
  6360  000CDC  EF73  F006         	goto	u3120
  6361  000CE0                     u3121:
  6362  000CE0  FFFF               	dw	65535	; assembler added errata NOP
  6363  000CE2  EF94  F005         	goto	l3760
  6364  000CE6                     u3120:
  6365  000CE6                     l149:
  6366  000CE6  FFFF               	dw	65535	; assembler added errata NOP
  6367                           
  6368                           ;motors.c: 366:     T0CONbits.TMR0ON = 0;
  6369  000CE8  9ED5               	bcf	213,7,c	;volatile
  6370                           
  6371                           ;motors.c: 367:     T2CONbits.TMR2ON = 0;
  6372  000CEA  94CA               	bcf	202,2,c	;volatile
  6373  000CEC                     
  6374                           ;motors.c: 369:     TMR0 = 0;
  6375  000CEC  0E00               	movlw	0
  6376  000CEE  6ED7               	movwf	215,c	;volatile
  6377  000CF0  0E00               	movlw	0
  6378  000CF2  6ED6               	movwf	214,c	;volatile
  6379                           
  6380                           ;motors.c: 370:     TMR2 = 0;
  6381  000CF4  0E00               	movlw	0
  6382  000CF6  6ECC               	movwf	204,c	;volatile
  6383  000CF8                     
  6384                           ;motors.c: 373:     resetStep();
  6385  000CF8  EC94  F012         	call	_resetStep	;wreg free
  6386  000CFC                     
  6387                           ;motors.c: 375:     return(tm0Error);
  6388  000CFC  505B               	movf	_tm0Error^0,w,c
  6389  000CFE                     l141:
  6390  000CFE  FFFF               	dw	65535	; assembler added errata NOP
  6391  000D00  0012               	return		;funcret
  6392  000D02  FFFF               	dw	65535	; errata NOP
  6393  000D04                     __end_of_moveToPoint:
  6394                           	callstack 0
  6395                           
  6396 ;; *************** function _stepCounter *****************
  6397 ;; Defined at:
  6398 ;;		line 58 in file "pwm.c"
  6399 ;; Parameters:    Size  Location     Type
  6400 ;;		None
  6401 ;; Auto vars:     Size  Location     Type
  6402 ;;		None
  6403 ;; Return value:  Size  Location     Type
  6404 ;;                  2   17[COMRAM] unsigned int 
  6405 ;; Registers used:
  6406 ;;		None
  6407 ;; Tracked objects:
  6408 ;;		On entry : 0/0
  6409 ;;		On exit  : 0/0
  6410 ;;		Unchanged: 0/0
  6411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6412 ;;      Params:         2       0       0       0       0       0       0
  6413 ;;      Locals:         0       0       0       0       0       0       0
  6414 ;;      Temps:          0       0       0       0       0       0       0
  6415 ;;      Totals:         2       0       0       0       0       0       0
  6416 ;;Total ram usage:        2 bytes
  6417 ;; Hardware stack levels used:    1
  6418 ;; Hardware stack levels required when called:    4
  6419 ;; This function calls:
  6420 ;;		Nothing
  6421 ;; This function is called by:
  6422 ;;		_moveToPoint
  6423 ;; This function uses a non-reentrant model
  6424 ;;
  6425                           
  6426                           	psect	text37
  6427  0024F4                     __ptext37:
  6428                           	callstack 0
  6429  0024F4                     _stepCounter:
  6430                           	callstack 0
  6431  0024F4  FFFF               	dw	65535	; assembler added errata NOP
  6432  0024F6                     
  6433                           ;pwm.c: 59:     return pwmStep;
  6434  0024F6  C067  F012         	movff	_pwmStep,?_stepCounter	;volatile
  6435  0024FA  6A13               	clrf	(?_stepCounter+1)^0,c
  6436  0024FC  0012               	return		;funcret
  6437  0024FE  FFFF               	dw	65535	; errata NOP
  6438  002500                     __end_of_stepCounter:
  6439                           	callstack 0
  6440                           
  6441 ;; *************** function _liftArm *****************
  6442 ;; Defined at:
  6443 ;;		line 521 in file "motors.c"
  6444 ;; Parameters:    Size  Location     Type
  6445 ;;		None
  6446 ;; Auto vars:     Size  Location     Type
  6447 ;;		None
  6448 ;; Return value:  Size  Location     Type
  6449 ;;                  1    wreg      unsigned char 
  6450 ;; Registers used:
  6451 ;;		wreg, status,2, status,0, cstack
  6452 ;; Tracked objects:
  6453 ;;		On entry : 0/0
  6454 ;;		On exit  : 0/0
  6455 ;;		Unchanged: 0/0
  6456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6457 ;;      Params:         0       0       0       0       0       0       0
  6458 ;;      Locals:         0       0       0       0       0       0       0
  6459 ;;      Temps:          0       0       0       0       0       0       0
  6460 ;;      Totals:         0       0       0       0       0       0       0
  6461 ;;Total ram usage:        0 bytes
  6462 ;; Hardware stack levels used:    1
  6463 ;; Hardware stack levels required when called:    5
  6464 ;; This function calls:
  6465 ;;		_resetStep
  6466 ;;		_setDirection
  6467 ;;		_stepMade
  6468 ;; This function is called by:
  6469 ;;		_executeData
  6470 ;; This function uses a non-reentrant model
  6471 ;;
  6472                           
  6473                           	psect	text38
  6474  001F8A                     __ptext38:
  6475                           	callstack 0
  6476  001F8A                     _liftArm:
  6477                           	callstack 0
  6478  001F8A  FFFF               	dw	65535	; assembler added errata NOP
  6479  001F8C                     
  6480                           ;motors.c: 524:     setDirection(0, 2);
  6481  001F8C  0E02               	movlw	2
  6482  001F8E  6E12               	movwf	setDirection@motor^0,c
  6483  001F90  0E00               	movlw	0
  6484  001F92  ECD4  F010         	call	_setDirection
  6485  001F96                     
  6486                           ;motors.c: 526:     T2CONbits.TMR2ON = 1;
  6487  001F96  84CA               	bsf	202,2,c	;volatile
  6488  001F98                     
  6489                           ;motors.c: 528:     tm0Error = 0;
  6490  001F98  0E00               	movlw	0
  6491  001F9A  6E5C               	movwf	(_tm0Error+1)^0,c
  6492  001F9C  0E00               	movlw	0
  6493  001F9E  6E5B               	movwf	_tm0Error^0,c
  6494  001FA0                     
  6495                           ;motors.c: 529:     tm0Limit = 100;
  6496  001FA0  0E64               	movlw	100
  6497  001FA2  6E68               	movwf	_tm0Limit^0,c
  6498  001FA4                     
  6499                           ;motors.c: 530:     T0CONbits.TMR0ON = 1;
  6500  001FA4  8ED5               	bsf	213,7,c	;volatile
  6501                           
  6502                           ;motors.c: 534:     while(!PORTEbits.RE2){
  6503  001FA6  EF06  F010         	goto	l200
  6504  001FAA                     l3900:
  6505  001FAA  FFFF               	dw	65535	; assembler added errata NOP
  6506                           
  6507                           ;motors.c: 537:         if(tm0Error){
  6508  001FAC  505B               	movf	_tm0Error^0,w,c
  6509  001FAE  105C               	iorwf	(_tm0Error+1)^0,w,c
  6510  001FB0  B4D8               	btfsc	status,2,c
  6511  001FB2  EFDD  F00F         	goto	u3251
  6512  001FB6  EFE0  F00F         	goto	u3250
  6513  001FBA                     u3251:
  6514  001FBA  FFFF               	dw	65535	; assembler added errata NOP
  6515  001FBC  EFE8  F00F         	goto	l202
  6516  001FC0                     u3250:
  6517  001FC0  FFFF               	dw	65535	; assembler added errata NOP
  6518  001FC2                     
  6519                           ;motors.c: 539:             LATCbits.LATC2 = 0;
  6520  001FC2  948B               	bcf	139,2,c	;volatile
  6521  001FC4                     
  6522                           ;motors.c: 540:             tm0Error = 6;
  6523  001FC4  0E00               	movlw	0
  6524  001FC6  6E5C               	movwf	(_tm0Error+1)^0,c
  6525  001FC8  0E06               	movlw	6
  6526  001FCA  6E5B               	movwf	_tm0Error^0,c
  6527                           
  6528                           ;motors.c: 541:             break;
  6529  001FCC  EF0F  F010         	goto	l203
  6530  001FD0                     l202:
  6531  001FD0  FFFF               	dw	65535	; assembler added errata NOP
  6532                           
  6533                           ;motors.c: 546:         LATCbits.LATC2 = 1;
  6534  001FD2  848B               	bsf	139,2,c	;volatile
  6535  001FD4                     l3906:
  6536  001FD4  FFFF               	dw	65535	; assembler added errata NOP
  6537  001FD6  EC38  F012         	call	_stepMade	;wreg free
  6538  001FDA  5012               	movf	?_stepMade^0,w,c
  6539  001FDC  1013               	iorwf	(?_stepMade+1)^0,w,c
  6540  001FDE  B4D8               	btfsc	status,2,c
  6541  001FE0  EFF4  F00F         	goto	u3261
  6542  001FE4  EFF7  F00F         	goto	u3260
  6543  001FE8                     u3261:
  6544  001FE8  FFFF               	dw	65535	; assembler added errata NOP
  6545  001FEA  EFEA  F00F         	goto	l3906
  6546  001FEE                     u3260:
  6547  001FEE  FFFF               	dw	65535	; assembler added errata NOP
  6548  001FF0                     
  6549                           ;motors.c: 552:         LATCbits.LATC2 = 0;
  6550  001FF0  948B               	bcf	139,2,c	;volatile
  6551  001FF2                     l3908:
  6552  001FF2  FFFF               	dw	65535	; assembler added errata NOP
  6553  001FF4  EC38  F012         	call	_stepMade	;wreg free
  6554  001FF8  5012               	movf	?_stepMade^0,w,c
  6555  001FFA  1013               	iorwf	(?_stepMade+1)^0,w,c
  6556  001FFC  B4D8               	btfsc	status,2,c
  6557  001FFE  EF03  F010         	goto	u3271
  6558  002002  EF06  F010         	goto	u3270
  6559  002006                     u3271:
  6560  002006  FFFF               	dw	65535	; assembler added errata NOP
  6561  002008  EFF9  F00F         	goto	l3908
  6562  00200C                     u3270:
  6563  00200C                     l200:
  6564  00200C  FFFF               	dw	65535	; assembler added errata NOP
  6565                           
  6566                           ;motors.c: 534:     while(!PORTEbits.RE2){
  6567  00200E  A484               	btfss	132,2,c	;volatile
  6568  002010  EF0C  F010         	goto	u3281
  6569  002014  EF0F  F010         	goto	u3280
  6570  002018                     u3281:
  6571  002018  FFFF               	dw	65535	; assembler added errata NOP
  6572  00201A  EFD5  F00F         	goto	l3900
  6573  00201E                     u3280:
  6574  00201E                     l203:
  6575  00201E  FFFF               	dw	65535	; assembler added errata NOP
  6576                           
  6577                           ;motors.c: 559:     T0CONbits.TMR0ON = 0;
  6578  002020  9ED5               	bcf	213,7,c	;volatile
  6579                           
  6580                           ;motors.c: 560:     T2CONbits.TMR2ON = 0;
  6581  002022  94CA               	bcf	202,2,c	;volatile
  6582  002024                     
  6583                           ;motors.c: 562:     TMR0 = 0;
  6584  002024  0E00               	movlw	0
  6585  002026  6ED7               	movwf	215,c	;volatile
  6586  002028  0E00               	movlw	0
  6587  00202A  6ED6               	movwf	214,c	;volatile
  6588                           
  6589                           ;motors.c: 563:     TMR2 = 0;
  6590  00202C  0E00               	movlw	0
  6591  00202E  6ECC               	movwf	204,c	;volatile
  6592  002030                     
  6593                           ;motors.c: 566:     resetStep();
  6594  002030  EC94  F012         	call	_resetStep	;wreg free
  6595  002034                     
  6596                           ;motors.c: 568:     return(tm0Error);
  6597  002034  505B               	movf	_tm0Error^0,w,c
  6598  002036  0012               	return		;funcret
  6599  002038  FFFF               	dw	65535	; errata NOP
  6600  00203A                     __end_of_liftArm:
  6601                           	callstack 0
  6602                           
  6603 ;; *************** function _stepMade *****************
  6604 ;; Defined at:
  6605 ;;		line 47 in file "pwm.c"
  6606 ;; Parameters:    Size  Location     Type
  6607 ;;		None
  6608 ;; Auto vars:     Size  Location     Type
  6609 ;;  temp            1   19[COMRAM] unsigned char 
  6610 ;; Return value:  Size  Location     Type
  6611 ;;                  2   17[COMRAM] unsigned int 
  6612 ;; Registers used:
  6613 ;;		wreg, status,2
  6614 ;; Tracked objects:
  6615 ;;		On entry : 0/0
  6616 ;;		On exit  : 0/0
  6617 ;;		Unchanged: 0/0
  6618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6619 ;;      Params:         2       0       0       0       0       0       0
  6620 ;;      Locals:         1       0       0       0       0       0       0
  6621 ;;      Temps:          0       0       0       0       0       0       0
  6622 ;;      Totals:         3       0       0       0       0       0       0
  6623 ;;Total ram usage:        3 bytes
  6624 ;; Hardware stack levels used:    1
  6625 ;; Hardware stack levels required when called:    4
  6626 ;; This function calls:
  6627 ;;		Nothing
  6628 ;; This function is called by:
  6629 ;;		_resetPosition
  6630 ;;		_moveToPoint
  6631 ;;		_touchObject
  6632 ;;		_touchTherm
  6633 ;;		_liftArm
  6634 ;;		_rotateObj
  6635 ;;		_pickObject
  6636 ;;		_releaseObj
  6637 ;; This function uses a non-reentrant model
  6638 ;;
  6639                           
  6640                           	psect	text39
  6641  002470                     __ptext39:
  6642                           	callstack 0
  6643  002470                     _stepMade:
  6644                           	callstack 0
  6645  002470  FFFF               	dw	65535	; assembler added errata NOP
  6646  002472                     
  6647                           ;pwm.c: 48:     unsigned char temp = stepToggle;
  6648  002472  C066  F014         	movff	_stepToggle,stepMade@temp	;volatile
  6649  002476                     
  6650                           ;pwm.c: 50:     stepToggle = 0;
  6651  002476  0E00               	movlw	0
  6652  002478  6E66               	movwf	_stepToggle^0,c	;volatile
  6653  00247A                     
  6654                           ;pwm.c: 52:     return temp;
  6655  00247A  C014  F012         	movff	stepMade@temp,?_stepMade
  6656  00247E  6A13               	clrf	(?_stepMade+1)^0,c
  6657  002480  0012               	return		;funcret
  6658  002482  FFFF               	dw	65535	; errata NOP
  6659  002484                     __end_of_stepMade:
  6660                           	callstack 0
  6661                           
  6662 ;; *************** function _setDirection *****************
  6663 ;; Defined at:
  6664 ;;		line 115 in file "motors.c"
  6665 ;; Parameters:    Size  Location     Type
  6666 ;;  direction       1    wreg     unsigned char 
  6667 ;;  motor           1   17[COMRAM] unsigned char 
  6668 ;; Auto vars:     Size  Location     Type
  6669 ;;  direction       1   20[COMRAM] unsigned char 
  6670 ;; Return value:  Size  Location     Type
  6671 ;;                  1    wreg      void 
  6672 ;; Registers used:
  6673 ;;		wreg, status,2, status,0
  6674 ;; Tracked objects:
  6675 ;;		On entry : 0/0
  6676 ;;		On exit  : 0/0
  6677 ;;		Unchanged: 0/0
  6678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6679 ;;      Params:         1       0       0       0       0       0       0
  6680 ;;      Locals:         1       0       0       0       0       0       0
  6681 ;;      Temps:          2       0       0       0       0       0       0
  6682 ;;      Totals:         4       0       0       0       0       0       0
  6683 ;;Total ram usage:        4 bytes
  6684 ;; Hardware stack levels used:    1
  6685 ;; Hardware stack levels required when called:    4
  6686 ;; This function calls:
  6687 ;;		Nothing
  6688 ;; This function is called by:
  6689 ;;		_resetPosition
  6690 ;;		_moveToPoint
  6691 ;;		_touchObject
  6692 ;;		_touchTherm
  6693 ;;		_liftArm
  6694 ;; This function uses a non-reentrant model
  6695 ;;
  6696                           
  6697                           	psect	text40
  6698  0021A8                     __ptext40:
  6699                           	callstack 0
  6700  0021A8                     _setDirection:
  6701                           	callstack 0
  6702  0021A8  FFFF               	dw	65535	; assembler added errata NOP
  6703                           
  6704                           ;incstack = 0
  6705                           ;setDirection@direction stored from wreg
  6706  0021AA  6E15               	movwf	setDirection@direction^0,c
  6707  0021AC                     
  6708                           ;motors.c: 116:     switch(motor){
  6709  0021AC  EFF0  F010         	goto	l3406
  6710  0021B0                     l3398:
  6711  0021B0  FFFF               	dw	65535	; assembler added errata NOP
  6712                           
  6713                           ;motors.c: 118:             LATAbits.LATA1 = direction;
  6714  0021B2  B015               	btfsc	setDirection@direction^0,0,c
  6715  0021B4  D002               	bra	u2455
  6716  0021B6  9289               	bcf	137,1,c	;volatile
  6717  0021B8  D001               	bra	u2456
  6718  0021BA                     u2455:
  6719  0021BA  8289               	bsf	137,1,c	;volatile
  6720  0021BC                     u2456:
  6721                           
  6722                           ;motors.c: 119:             break;
  6723  0021BC  EF0B  F011         	goto	l101
  6724  0021C0                     l3400:
  6725  0021C0  FFFF               	dw	65535	; assembler added errata NOP
  6726                           
  6727                           ;motors.c: 121:             LATBbits.LATB3 = direction;
  6728  0021C2  B015               	btfsc	setDirection@direction^0,0,c
  6729  0021C4  D002               	bra	u2465
  6730  0021C6  968A               	bcf	138,3,c	;volatile
  6731  0021C8  D001               	bra	u2466
  6732  0021CA                     u2465:
  6733  0021CA  868A               	bsf	138,3,c	;volatile
  6734  0021CC                     u2466:
  6735                           
  6736                           ;motors.c: 122:             break;
  6737  0021CC  EF0B  F011         	goto	l101
  6738  0021D0                     l3402:
  6739  0021D0  FFFF               	dw	65535	; assembler added errata NOP
  6740                           
  6741                           ;motors.c: 124:             LATCbits.LATC1 = direction;
  6742  0021D2  B015               	btfsc	setDirection@direction^0,0,c
  6743  0021D4  D002               	bra	u2475
  6744  0021D6  928B               	bcf	139,1,c	;volatile
  6745  0021D8  D001               	bra	u2476
  6746  0021DA                     u2475:
  6747  0021DA  828B               	bsf	139,1,c	;volatile
  6748  0021DC                     u2476:
  6749                           
  6750                           ;motors.c: 125:             break;
  6751  0021DC  EF0B  F011         	goto	l101
  6752  0021E0                     l3406:
  6753  0021E0  FFFF               	dw	65535	; assembler added errata NOP
  6754  0021E2  5012               	movf	setDirection@motor^0,w,c
  6755  0021E4  6E13               	movwf	??_setDirection^0,c
  6756  0021E6  6A14               	clrf	(??_setDirection+1)^0,c
  6757                           
  6758                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6759                           ; Switch size 1, requested type "simple"
  6760                           ; Number of cases is 1, Range of values is 0 to 0
  6761                           ; switch strategies available:
  6762                           ; Name         Instructions Cycles
  6763                           ; simple_byte            4     3 (average)
  6764                           ;	Chosen strategy is simple_byte
  6765  0021E8  5014               	movf	(??_setDirection+1)^0,w,c
  6766  0021EA  0A00               	xorlw	0	; case 0
  6767  0021EC  B4D8               	btfsc	status,2,c
  6768  0021EE  EFFB  F010         	goto	l4518
  6769  0021F2  EF0B  F011         	goto	l101
  6770  0021F6                     l4518:
  6771  0021F6  FFFF               	dw	65535	; assembler added errata NOP
  6772                           
  6773                           ; Switch size 1, requested type "simple"
  6774                           ; Number of cases is 3, Range of values is 0 to 2
  6775                           ; switch strategies available:
  6776                           ; Name         Instructions Cycles
  6777                           ; simple_byte           10     6 (average)
  6778                           ;	Chosen strategy is simple_byte
  6779  0021F8  5013               	movf	??_setDirection^0,w,c
  6780  0021FA  0A00               	xorlw	0	; case 0
  6781  0021FC  B4D8               	btfsc	status,2,c
  6782  0021FE  EFD8  F010         	goto	l3398
  6783  002202  0A01               	xorlw	1	; case 1
  6784  002204  B4D8               	btfsc	status,2,c
  6785  002206  EFE0  F010         	goto	l3400
  6786  00220A  0A03               	xorlw	3	; case 2
  6787  00220C  B4D8               	btfsc	status,2,c
  6788  00220E  EFE8  F010         	goto	l3402
  6789  002212  EF0B  F011         	goto	l101
  6790  002216                     l101:
  6791  002216  FFFF               	dw	65535	; assembler added errata NOP
  6792  002218  0012               	return		;funcret
  6793  00221A  FFFF               	dw	65535	; errata NOP
  6794  00221C                     __end_of_setDirection:
  6795                           	callstack 0
  6796                           
  6797 ;; *************** function _resetStep *****************
  6798 ;; Defined at:
  6799 ;;		line 65 in file "pwm.c"
  6800 ;; Parameters:    Size  Location     Type
  6801 ;;		None
  6802 ;; Auto vars:     Size  Location     Type
  6803 ;;		None
  6804 ;; Return value:  Size  Location     Type
  6805 ;;                  1    wreg      void 
  6806 ;; Registers used:
  6807 ;;		wreg, status,2
  6808 ;; Tracked objects:
  6809 ;;		On entry : 0/0
  6810 ;;		On exit  : 0/0
  6811 ;;		Unchanged: 0/0
  6812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6813 ;;      Params:         0       0       0       0       0       0       0
  6814 ;;      Locals:         0       0       0       0       0       0       0
  6815 ;;      Temps:          0       0       0       0       0       0       0
  6816 ;;      Totals:         0       0       0       0       0       0       0
  6817 ;;Total ram usage:        0 bytes
  6818 ;; Hardware stack levels used:    1
  6819 ;; Hardware stack levels required when called:    4
  6820 ;; This function calls:
  6821 ;;		Nothing
  6822 ;; This function is called by:
  6823 ;;		_resetPosition
  6824 ;;		_moveToPoint
  6825 ;;		_touchObject
  6826 ;;		_touchTherm
  6827 ;;		_liftArm
  6828 ;; This function uses a non-reentrant model
  6829 ;;
  6830                           
  6831                           	psect	text41
  6832  002528                     __ptext41:
  6833                           	callstack 0
  6834  002528                     _resetStep:
  6835                           	callstack 0
  6836  002528  FFFF               	dw	65535	; assembler added errata NOP
  6837  00252A                     
  6838                           ;pwm.c: 66:     pwmStep = 0;
  6839  00252A  0E00               	movlw	0
  6840  00252C  6E67               	movwf	_pwmStep^0,c	;volatile
  6841  00252E  0012               	return		;funcret
  6842  002530  FFFF               	dw	65535	; errata NOP
  6843  002532                     __end_of_resetStep:
  6844                           	callstack 0
  6845                           
  6846 ;; *************** function _getData *****************
  6847 ;; Defined at:
  6848 ;;		line 205 in file "usart.c"
  6849 ;; Parameters:    Size  Location     Type
  6850 ;;		None
  6851 ;; Auto vars:     Size  Location     Type
  6852 ;;		None
  6853 ;; Return value:  Size  Location     Type
  6854 ;;                  2   17[COMRAM] PTR struct .
  6855 ;; Registers used:
  6856 ;;		wreg, status,2, status,0
  6857 ;; Tracked objects:
  6858 ;;		On entry : 0/0
  6859 ;;		On exit  : 0/0
  6860 ;;		Unchanged: 0/0
  6861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6862 ;;      Params:         2       0       0       0       0       0       0
  6863 ;;      Locals:         0       0       0       0       0       0       0
  6864 ;;      Temps:          0       0       0       0       0       0       0
  6865 ;;      Totals:         2       0       0       0       0       0       0
  6866 ;;Total ram usage:        2 bytes
  6867 ;; Hardware stack levels used:    1
  6868 ;; Hardware stack levels required when called:    4
  6869 ;; This function calls:
  6870 ;;		Nothing
  6871 ;; This function is called by:
  6872 ;;		_executeData
  6873 ;; This function uses a non-reentrant model
  6874 ;;
  6875                           
  6876                           	psect	text42
  6877  0024A4                     __ptext42:
  6878                           	callstack 0
  6879  0024A4                     _getData:
  6880                           	callstack 0
  6881  0024A4  FFFF               	dw	65535	; assembler added errata NOP
  6882  0024A6                     
  6883                           ;usart.c: 206:     return(&dataSequence[0]);
  6884  0024A6  0ED8               	movlw	low _dataSequence
  6885  0024A8  6E12               	movwf	?_getData^0,c
  6886  0024AA  0E00               	movlw	high _dataSequence
  6887  0024AC  6E13               	movwf	(?_getData+1)^0,c
  6888  0024AE  0012               	return		;funcret
  6889  0024B0  FFFF               	dw	65535	; errata NOP
  6890  0024B2                     __end_of_getData:
  6891                           	callstack 0
  6892                           
  6893 ;; *************** function _clearTM0 *****************
  6894 ;; Defined at:
  6895 ;;		line 28 in file "motors.c"
  6896 ;; Parameters:    Size  Location     Type
  6897 ;;		None
  6898 ;; Auto vars:     Size  Location     Type
  6899 ;;		None
  6900 ;; Return value:  Size  Location     Type
  6901 ;;                  1    wreg      void 
  6902 ;; Registers used:
  6903 ;;		wreg, status,2
  6904 ;; Tracked objects:
  6905 ;;		On entry : 0/0
  6906 ;;		On exit  : 0/0
  6907 ;;		Unchanged: 0/0
  6908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6909 ;;      Params:         0       0       0       0       0       0       0
  6910 ;;      Locals:         0       0       0       0       0       0       0
  6911 ;;      Temps:          0       0       0       0       0       0       0
  6912 ;;      Totals:         0       0       0       0       0       0       0
  6913 ;;Total ram usage:        0 bytes
  6914 ;; Hardware stack levels used:    1
  6915 ;; Hardware stack levels required when called:    4
  6916 ;; This function calls:
  6917 ;;		Nothing
  6918 ;; This function is called by:
  6919 ;;		_main
  6920 ;; This function uses a non-reentrant model
  6921 ;;
  6922                           
  6923                           	psect	text43
  6924  0024B2                     __ptext43:
  6925                           	callstack 0
  6926  0024B2                     _clearTM0:
  6927                           	callstack 0
  6928  0024B2  FFFF               	dw	65535	; assembler added errata NOP
  6929  0024B4                     
  6930                           ;motors.c: 29:     tm0Error = 0;
  6931  0024B4  0E00               	movlw	0
  6932  0024B6  6E5C               	movwf	(_tm0Error+1)^0,c
  6933  0024B8  0E00               	movlw	0
  6934  0024BA  6E5B               	movwf	_tm0Error^0,c
  6935  0024BC  0012               	return		;funcret
  6936  0024BE  FFFF               	dw	65535	; errata NOP
  6937  0024C0                     __end_of_clearTM0:
  6938                           	callstack 0
  6939                           
  6940 ;; *************** function _isr *****************
  6941 ;; Defined at:
  6942 ;;		line 17 in file "interrupt.c"
  6943 ;; Parameters:    Size  Location     Type
  6944 ;;		None
  6945 ;; Auto vars:     Size  Location     Type
  6946 ;;  temp            1   16[COMRAM] unsigned char 
  6947 ;; Return value:  Size  Location     Type
  6948 ;;                  1    wreg      void 
  6949 ;; Registers used:
  6950 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6951 ;; Tracked objects:
  6952 ;;		On entry : 0/0
  6953 ;;		On exit  : 0/0
  6954 ;;		Unchanged: 0/0
  6955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6956 ;;      Params:         0       0       0       0       0       0       0
  6957 ;;      Locals:         1       0       0       0       0       0       0
  6958 ;;      Temps:          6       0       0       0       0       0       0
  6959 ;;      Totals:         7       0       0       0       0       0       0
  6960 ;;Total ram usage:        7 bytes
  6961 ;; Hardware stack levels used:    1
  6962 ;; Hardware stack levels required when called:    3
  6963 ;; This function calls:
  6964 ;;		_increaseStep
  6965 ;;		_retPeriod
  6966 ;;		_setThermRel
  6967 ;;		_setTouchRel
  6968 ;;		_toggleStep
  6969 ;;		_whatsTM0Limit
  6970 ;;		_writeTM0
  6971 ;;		i2_storeData
  6972 ;; This function is called by:
  6973 ;;		Interrupt level 2
  6974 ;; This function uses a non-reentrant model
  6975 ;;
  6976                           
  6977                           	psect	intcode
  6978  000008                     __pintcode:
  6979                           	callstack 0
  6980  000008                     _isr:
  6981                           	callstack 0
  6982  000008  FFFF               	dw	65535	; assembler added errata NOP
  6983                           
  6984                           ;incstack = 0
  6985  00000A  826E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6986  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  6987  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  6988  000014  CFF3 F00F          	movff	prodl,??_isr+4
  6989  000018  CFF4 F010          	movff	prodh,??_isr+5
  6990  00001C                     
  6991                           ;interrupt.c: 18:     static unsigned int single_cycle = 0;;interrupt.c: 19:     static 
      +                          unsigned char tm0Count = 0;;interrupt.c: 20:     static unsigned char completeStep = 0;;
      +                          interrupt.c: 23:     if(INTCONbits.T0IF){
  6992  00001C  A4F2               	btfss	242,2,c	;volatile
  6993  00001E  EF13  F000         	goto	i2u235_41
  6994  000022  EF16  F000         	goto	i2u235_40
  6995  000026                     i2u235_41:
  6996  000026  FFFF               	dw	65535	; assembler added errata NOP
  6997  000028  EF2C  F000         	goto	i2l3314
  6998  00002C                     i2u235_40:
  6999  00002C  FFFF               	dw	65535	; assembler added errata NOP
  7000  00002E                     
  7001                           ;interrupt.c: 24:         INTCONbits.T0IF = 0;
  7002  00002E  94F2               	bcf	242,2,c	;volatile
  7003  000030                     
  7004                           ;interrupt.c: 27:         tm0Count++;
  7005  000030  2A63               	incf	isr@tm0Count^0,f,c
  7006  000032                     
  7007                           ;interrupt.c: 29:         if(tm0Count >= whatsTM0Limit()){
  7008  000032  ECBC  F012         	call	_whatsTM0Limit	;wreg free
  7009  000036  6E0B               	movwf	??_isr^0,c
  7010  000038  500B               	movf	??_isr^0,w,c
  7011  00003A  5C63               	subwf	isr@tm0Count^0,w,c
  7012  00003C  A0D8               	btfss	status,0,c
  7013  00003E  EF23  F000         	goto	i2u236_41
  7014  000042  EF26  F000         	goto	i2u236_40
  7015  000046                     i2u236_41:
  7016  000046  FFFF               	dw	65535	; assembler added errata NOP
  7017  000048  EF2C  F000         	goto	i2l3314
  7018  00004C                     i2u236_40:
  7019  00004C  FFFF               	dw	65535	; assembler added errata NOP
  7020  00004E                     
  7021                           ;interrupt.c: 30:             T0CONbits.TMR0ON = 0;
  7022  00004E  9ED5               	bcf	213,7,c	;volatile
  7023  000050                     
  7024                           ;interrupt.c: 31:             tm0Count = 0;
  7025  000050  0E00               	movlw	0
  7026  000052  6E63               	movwf	isr@tm0Count^0,c
  7027  000054                     
  7028                           ;interrupt.c: 32:             writeTM0();
  7029  000054  EC60  F012         	call	_writeTM0	;wreg free
  7030  000058                     i2l3314:
  7031  000058  FFFF               	dw	65535	; assembler added errata NOP
  7032                           
  7033                           ;interrupt.c: 37:     if(PIR1bits.TMR2IF){
  7034  00005A  A29E               	btfss	158,1,c	;volatile
  7035  00005C  EF32  F000         	goto	i2u237_41
  7036  000060  EF35  F000         	goto	i2u237_40
  7037  000064                     i2u237_41:
  7038  000064  FFFF               	dw	65535	; assembler added errata NOP
  7039  000066  EF63  F000         	goto	i2l3334
  7040  00006A                     i2u237_40:
  7041  00006A  FFFF               	dw	65535	; assembler added errata NOP
  7042  00006C                     
  7043                           ;interrupt.c: 38:         PIR1bits.TMR2IF = 0;
  7044  00006C  929E               	bcf	158,1,c	;volatile
  7045  00006E                     
  7046                           ;interrupt.c: 39:         single_cycle++;
  7047  00006E  4A51               	infsnz	isr@single_cycle^0,f,c
  7048  000070  2A52               	incf	(isr@single_cycle+1)^0,f,c
  7049  000072                     
  7050                           ;interrupt.c: 42:         if(single_cycle > retPeriod()){
  7051  000072  EC67  F012         	call	_retPeriod	;wreg free
  7052  000076  5051               	movf	isr@single_cycle^0,w,c
  7053  000078  5C01               	subwf	?_retPeriod^0,w,c
  7054  00007A  5052               	movf	(isr@single_cycle+1)^0,w,c
  7055  00007C  5802               	subwfb	(?_retPeriod+1)^0,w,c
  7056  00007E  B0D8               	btfsc	status,0,c
  7057  000080  EF44  F000         	goto	i2u238_41
  7058  000084  EF47  F000         	goto	i2u238_40
  7059  000088                     i2u238_41:
  7060  000088  FFFF               	dw	65535	; assembler added errata NOP
  7061  00008A  EF63  F000         	goto	i2l3334
  7062  00008E                     i2u238_40:
  7063  00008E  FFFF               	dw	65535	; assembler added errata NOP
  7064  000090                     
  7065                           ;interrupt.c: 43:             completeStep++;
  7066  000090  2A62               	incf	isr@completeStep^0,f,c
  7067  000092                     
  7068                           ;interrupt.c: 46:             if(completeStep != 0 && !(completeStep % 2)){
  7069  000092  5062               	movf	isr@completeStep^0,w,c
  7070  000094  B4D8               	btfsc	status,2,c
  7071  000096  EF4F  F000         	goto	i2u239_41
  7072  00009A  EF52  F000         	goto	i2u239_40
  7073  00009E                     i2u239_41:
  7074  00009E  FFFF               	dw	65535	; assembler added errata NOP
  7075  0000A0  EF60  F000         	goto	i2l3332
  7076  0000A4                     i2u239_40:
  7077  0000A4  FFFF               	dw	65535	; assembler added errata NOP
  7078  0000A6  B062               	btfsc	isr@completeStep^0,0,c
  7079  0000A8  EF58  F000         	goto	i2u240_41
  7080  0000AC  EF5B  F000         	goto	i2u240_40
  7081  0000B0                     i2u240_41:
  7082  0000B0  FFFF               	dw	65535	; assembler added errata NOP
  7083  0000B2  EF60  F000         	goto	i2l3332
  7084  0000B6                     i2u240_40:
  7085  0000B6  FFFF               	dw	65535	; assembler added errata NOP
  7086  0000B8                     
  7087                           ;interrupt.c: 48:                 completeStep = 0;
  7088  0000B8  0E00               	movlw	0
  7089  0000BA  6E62               	movwf	isr@completeStep^0,c
  7090  0000BC                     
  7091                           ;interrupt.c: 51:                 increaseStep();
  7092  0000BC  ECC0  F012         	call	_increaseStep	;wreg free
  7093  0000C0                     i2l3332:
  7094  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  7095                           
  7096                           ;interrupt.c: 56:             toggleStep();
  7097  0000C2  EC99  F012         	call	_toggleStep	;wreg free
  7098  0000C6                     i2l3334:
  7099  0000C6  FFFF               	dw	65535	; assembler added errata NOP
  7100                           
  7101                           ;interrupt.c: 61:     if(PIR1bits.ADIF){
  7102  0000C8  AC9E               	btfss	158,6,c	;volatile
  7103  0000CA  EF69  F000         	goto	i2u241_41
  7104  0000CE  EF6C  F000         	goto	i2u241_40
  7105  0000D2                     i2u241_41:
  7106  0000D2  FFFF               	dw	65535	; assembler added errata NOP
  7107  0000D4  EF99  F000         	goto	i2l3346
  7108  0000D8                     i2u241_40:
  7109  0000D8  FFFF               	dw	65535	; assembler added errata NOP
  7110  0000DA                     
  7111                           ;interrupt.c: 62:         PIR1bits.ADIF = 0;
  7112  0000DA  9C9E               	bcf	158,6,c	;volatile
  7113                           
  7114                           ;interrupt.c: 65:         ADC_res = ADRESL;
  7115  0000DC  CFC3 F053          	movff	4035,_ADC_res	;volatile
  7116  0000E0  6A54               	clrf	(_ADC_res+1)^0,c
  7117  0000E2                     
  7118                           ;interrupt.c: 66:         ADC_res |= (ADRESH << 8);
  7119  0000E2  50C4               	movf	196,w,c	;volatile
  7120  0000E4  6E0C               	movwf	(??_isr+1)^0,c
  7121  0000E6  6A0B               	clrf	??_isr^0,c
  7122  0000E8  500B               	movf	??_isr^0,w,c
  7123  0000EA  1253               	iorwf	_ADC_res^0,f,c
  7124  0000EC  500C               	movf	(??_isr+1)^0,w,c
  7125  0000EE  1254               	iorwf	(_ADC_res+1)^0,f,c
  7126                           
  7127                           ;interrupt.c: 69:         if(ADC_res > therm_pressure){
  7128  0000F0  0453               	decf	_ADC_res^0,w,c
  7129  0000F2  0E04               	movlw	4
  7130  0000F4  5854               	subwfb	(_ADC_res+1)^0,w,c
  7131  0000F6  A0D8               	btfss	status,0,c
  7132  0000F8  EF80  F000         	goto	i2u242_41
  7133  0000FC  EF83  F000         	goto	i2u242_40
  7134  000100                     i2u242_41:
  7135  000100  FFFF               	dw	65535	; assembler added errata NOP
  7136  000102  EF8A  F000         	goto	i2l3342
  7137  000106                     i2u242_40:
  7138  000106  FFFF               	dw	65535	; assembler added errata NOP
  7139  000108                     
  7140                           ;interrupt.c: 71:             setTouchRel();
  7141  000108  EC9E  F012         	call	_setTouchRel	;wreg free
  7142                           
  7143                           ;interrupt.c: 72:             setThermRel();
  7144  00010C  ECA3  F012         	call	_setThermRel	;wreg free
  7145                           
  7146                           ;interrupt.c: 73:         }else if(ADC_res > touch_pressure){
  7147  000110  EF99  F000         	goto	i2l3346
  7148  000114                     i2l3342:
  7149  000114  FFFF               	dw	65535	; assembler added errata NOP
  7150  000116  0453               	decf	_ADC_res^0,w,c
  7151  000118  0E02               	movlw	2
  7152  00011A  5854               	subwfb	(_ADC_res+1)^0,w,c
  7153  00011C  A0D8               	btfss	status,0,c
  7154  00011E  EF93  F000         	goto	i2u243_41
  7155  000122  EF96  F000         	goto	i2u243_40
  7156  000126                     i2u243_41:
  7157  000126  FFFF               	dw	65535	; assembler added errata NOP
  7158  000128  EF99  F000         	goto	i2l3346
  7159  00012C                     i2u243_40:
  7160  00012C  FFFF               	dw	65535	; assembler added errata NOP
  7161  00012E                     
  7162                           ;interrupt.c: 75:             setTouchRel();
  7163  00012E  EC9E  F012         	call	_setTouchRel	;wreg free
  7164  000132                     i2l3346:
  7165  000132  FFFF               	dw	65535	; assembler added errata NOP
  7166                           
  7167                           ;interrupt.c: 80:     if(PIR1bits.RC1IF){
  7168  000134  AA9E               	btfss	158,5,c	;volatile
  7169  000136  EF9F  F000         	goto	i2u244_41
  7170  00013A  EFA2  F000         	goto	i2u244_40
  7171  00013E                     i2u244_41:
  7172  00013E  FFFF               	dw	65535	; assembler added errata NOP
  7173  000140  EFA9  F000         	goto	i2l472
  7174  000144                     i2u244_40:
  7175  000144  FFFF               	dw	65535	; assembler added errata NOP
  7176  000146                     
  7177                           ;interrupt.c: 81:         PIR1bits.RC1IF = 0;
  7178  000146  9A9E               	bcf	158,5,c	;volatile
  7179                           
  7180                           ;interrupt.c: 84:         unsigned char temp = RCREG1;
  7181  000148  CFAE F011          	movff	4014,isr@temp	;volatile
  7182  00014C                     
  7183                           ;interrupt.c: 86:         storeData(temp);
  7184  00014C  5011               	movf	isr@temp^0,w,c
  7185  00014E  EC2D  F00B         	call	i2_storeData
  7186  000152                     i2l472:
  7187  000152  FFFF               	dw	65535	; assembler added errata NOP
  7188  000154  C010  FFF4         	movff	??_isr+5,prodh
  7189  000158  C00F  FFF3         	movff	??_isr+4,prodl
  7190  00015C  C00E  FFDA         	movff	??_isr+3,fsr2h
  7191  000160  C00D  FFD9         	movff	??_isr+2,fsr2l
  7192  000164  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7193  000166  0011               	retfie		f
  7194  000168  FFFF               	dw	65535	; errata NOP
  7195  00016A                     __end_of_isr:
  7196                           	callstack 0
  7197                           
  7198 ;; *************** function i2_storeData *****************
  7199 ;; Defined at:
  7200 ;;		line 131 in file "usart.c"
  7201 ;; Parameters:    Size  Location     Type
  7202 ;;  data            1    wreg     unsigned char 
  7203 ;; Auto vars:     Size  Location     Type
  7204 ;;  data            1    9[COMRAM] unsigned char 
  7205 ;; Return value:  Size  Location     Type
  7206 ;;                  1    wreg      void 
  7207 ;; Registers used:
  7208 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7209 ;; Tracked objects:
  7210 ;;		On entry : 0/0
  7211 ;;		On exit  : 0/0
  7212 ;;		Unchanged: 0/0
  7213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7214 ;;      Params:         0       0       0       0       0       0       0
  7215 ;;      Locals:         1       0       0       0       0       0       0
  7216 ;;      Temps:          2       0       0       0       0       0       0
  7217 ;;      Totals:         3       0       0       0       0       0       0
  7218 ;;Total ram usage:        3 bytes
  7219 ;; Hardware stack levels used:    1
  7220 ;; Hardware stack levels required when called:    2
  7221 ;; This function calls:
  7222 ;;		i2_printError
  7223 ;; This function is called by:
  7224 ;;		_isr
  7225 ;; This function uses a non-reentrant model
  7226 ;;
  7227                           
  7228                           	psect	text45
  7229  00165A                     __ptext45:
  7230                           	callstack 0
  7231  00165A                     i2_storeData:
  7232                           	callstack 0
  7233  00165A  FFFF               	dw	65535	; assembler added errata NOP
  7234                           
  7235                           ;incstack = 0
  7236                           ;i2storeData@data stored from wreg
  7237  00165C  6E0A               	movwf	i2storeData@data^0,c
  7238  00165E                     
  7239                           ;usart.c: 133:     static unsigned char counter = 0;;usart.c: 134:     static unsigned c
      +                          har mexLength = 5;;usart.c: 135:     static unsigned char command;;usart.c: 136:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 140:     receivedMex[counter] = data;
  7240  00165E  0E45               	movlw	low storeData@receivedMex
  7241  001660  245E               	addwf	storeData@counter^0,w,c
  7242  001662  6ED9               	movwf	fsr2l,c
  7243  001664  6ADA               	clrf	fsr2h,c
  7244  001666  0E00               	movlw	high storeData@receivedMex
  7245  001668  22DA               	addwfc	fsr2h,f,c
  7246  00166A  C00A  FFDF         	movff	i2storeData@data,indf2
  7247  00166E                     
  7248                           ;usart.c: 142:     counter++;
  7249  00166E  2A5E               	incf	storeData@counter^0,f,c
  7250                           
  7251                           ;usart.c: 145:     switch(receivedMex[0]){
  7252  001670  EF49  F00B         	goto	i2l3200
  7253  001674                     i2l3192:
  7254  001674  FFFF               	dw	65535	; assembler added errata NOP
  7255                           
  7256                           ;usart.c: 147:             mexLength = 5;
  7257  001676  0E05               	movlw	5
  7258  001678  6E6D               	movwf	storeData@mexLength^0,c
  7259                           
  7260                           ;usart.c: 148:             break;
  7261  00167A  EF64  F00B         	goto	i2l3202
  7262  00167E                     i2l3194:
  7263  00167E  FFFF               	dw	65535	; assembler added errata NOP
  7264                           
  7265                           ;usart.c: 150:             mexLength = 9;
  7266  001680  0E09               	movlw	9
  7267  001682  6E6D               	movwf	storeData@mexLength^0,c
  7268                           
  7269                           ;usart.c: 151:             break;
  7270  001684  EF64  F00B         	goto	i2l3202
  7271  001688                     i2l3196:
  7272  001688  FFFF               	dw	65535	; assembler added errata NOP
  7273                           
  7274                           ;usart.c: 153:             mexLength = 1;
  7275  00168A  0E01               	movlw	1
  7276  00168C  6E6D               	movwf	storeData@mexLength^0,c
  7277                           
  7278                           ;usart.c: 154:             break;
  7279  00168E  EF64  F00B         	goto	i2l3202
  7280  001692                     i2l3200:
  7281  001692  FFFF               	dw	65535	; assembler added errata NOP
  7282  001694  5045               	movf	storeData@receivedMex^0,w,c
  7283  001696  6E08               	movwf	??i2_storeData^0,c
  7284  001698  6A09               	clrf	(??i2_storeData+1)^0,c
  7285                           
  7286                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7287                           ; Switch size 1, requested type "simple"
  7288                           ; Number of cases is 1, Range of values is 0 to 0
  7289                           ; switch strategies available:
  7290                           ; Name         Instructions Cycles
  7291                           ; simple_byte            4     3 (average)
  7292                           ;	Chosen strategy is simple_byte
  7293  00169A  5009               	movf	(??i2_storeData+1)^0,w,c
  7294  00169C  0A00               	xorlw	0	; case 0
  7295  00169E  B4D8               	btfsc	status,2,c
  7296  0016A0  EF54  F00B         	goto	i2l4520
  7297  0016A4  EF64  F00B         	goto	i2l3202
  7298  0016A8                     i2l4520:
  7299  0016A8  FFFF               	dw	65535	; assembler added errata NOP
  7300                           
  7301                           ; Switch size 1, requested type "simple"
  7302                           ; Number of cases is 3, Range of values is 0 to 2
  7303                           ; switch strategies available:
  7304                           ; Name         Instructions Cycles
  7305                           ; simple_byte           10     6 (average)
  7306                           ;	Chosen strategy is simple_byte
  7307  0016AA  5008               	movf	??i2_storeData^0,w,c
  7308  0016AC  0A00               	xorlw	0	; case 0
  7309  0016AE  B4D8               	btfsc	status,2,c
  7310  0016B0  EF3A  F00B         	goto	i2l3192
  7311  0016B4  0A01               	xorlw	1	; case 1
  7312  0016B6  B4D8               	btfsc	status,2,c
  7313  0016B8  EF3F  F00B         	goto	i2l3194
  7314  0016BC  0A03               	xorlw	3	; case 2
  7315  0016BE  B4D8               	btfsc	status,2,c
  7316  0016C0  EF44  F00B         	goto	i2l3196
  7317  0016C4  EF64  F00B         	goto	i2l3202
  7318  0016C8                     i2l3202:
  7319  0016C8  FFFF               	dw	65535	; assembler added errata NOP
  7320                           
  7321                           ;usart.c: 161:     if(counter >= mexLength){
  7322  0016CA  506D               	movf	storeData@mexLength^0,w,c
  7323  0016CC  5C5E               	subwf	storeData@counter^0,w,c
  7324  0016CE  A0D8               	btfss	status,0,c
  7325  0016D0  EF6C  F00B         	goto	i2u231_41
  7326  0016D4  EF6F  F00B         	goto	i2u231_40
  7327  0016D8                     i2u231_41:
  7328  0016D8  FFFF               	dw	65535	; assembler added errata NOP
  7329  0016DA  EFDB  F00B         	goto	i2l571
  7330  0016DE                     i2u231_40:
  7331  0016DE  FFFF               	dw	65535	; assembler added errata NOP
  7332  0016E0                     
  7333                           ;usart.c: 162:         counter = 0;
  7334  0016E0  0E00               	movlw	0
  7335  0016E2  6E5E               	movwf	storeData@counter^0,c
  7336                           
  7337                           ;usart.c: 166:         switch(receivedMex[0]){
  7338  0016E4  EFC0  F00B         	goto	i2l3218
  7339  0016E8                     i2l3206:
  7340  0016E8  FFFF               	dw	65535	; assembler added errata NOP
  7341                           
  7342                           ;usart.c: 168:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  7343  0016EA  5061               	movf	_dataCounter^0,w,c
  7344  0016EC  0D04               	mullw	4
  7345  0016EE  0ED8               	movlw	low _dataSequence
  7346  0016F0  24F3               	addwf	243,w,c
  7347  0016F2  6ED9               	movwf	fsr2l,c
  7348  0016F4  0E00               	movlw	high _dataSequence
  7349  0016F6  20F4               	addwfc	prodh,w,c
  7350  0016F8  6EDA               	movwf	fsr2h,c
  7351  0016FA  C046  FFDF         	movff	storeData@receivedMex+1,indf2
  7352                           
  7353                           ;usart.c: 169:                 dataSequence[dataCounter].posX = receivedMex[2];
  7354  0016FE  5061               	movf	_dataCounter^0,w,c
  7355  001700  0D04               	mullw	4
  7356  001702  0ED9               	movlw	low (_dataSequence+1)
  7357  001704  24F3               	addwf	243,w,c
  7358  001706  6ED9               	movwf	fsr2l,c
  7359  001708  0E00               	movlw	high (_dataSequence+1)
  7360  00170A  20F4               	addwfc	prodh,w,c
  7361  00170C  6EDA               	movwf	fsr2h,c
  7362  00170E  C047  FFDF         	movff	storeData@receivedMex+2,indf2
  7363                           
  7364                           ;usart.c: 170:                 dataSequence[dataCounter].posY = receivedMex[3];
  7365  001712  5061               	movf	_dataCounter^0,w,c
  7366  001714  0D04               	mullw	4
  7367  001716  0EDA               	movlw	low (_dataSequence+2)
  7368  001718  24F3               	addwf	243,w,c
  7369  00171A  6ED9               	movwf	fsr2l,c
  7370  00171C  0E00               	movlw	high (_dataSequence+2)
  7371  00171E  20F4               	addwfc	prodh,w,c
  7372  001720  6EDA               	movwf	fsr2h,c
  7373  001722  C048  FFDF         	movff	storeData@receivedMex+3,indf2
  7374                           
  7375                           ;usart.c: 171:                 dataSequence[dataCounter].rotation = receivedMex[4];
  7376  001726  5061               	movf	_dataCounter^0,w,c
  7377  001728  0D04               	mullw	4
  7378  00172A  0EDB               	movlw	low (_dataSequence+3)
  7379  00172C  24F3               	addwf	243,w,c
  7380  00172E  6ED9               	movwf	fsr2l,c
  7381  001730  0E00               	movlw	high (_dataSequence+3)
  7382  001732  20F4               	addwfc	prodh,w,c
  7383  001734  6EDA               	movwf	fsr2h,c
  7384  001736  C049  FFDF         	movff	storeData@receivedMex+4,indf2
  7385  00173A                     
  7386                           ;usart.c: 173:                 dataCounter++;
  7387  00173A  2A61               	incf	_dataCounter^0,f,c
  7388                           
  7389                           ;usart.c: 174:                 break;
  7390  00173C  EFDB  F00B         	goto	i2l571
  7391  001740                     i2l568:
  7392  001740  FFFF               	dw	65535	; assembler added errata NOP
  7393                           
  7394                           ;usart.c: 177:                 newSequenceData.L = receivedMex[1];
  7395  001742  C046  F0EC         	movff	storeData@receivedMex+1,_newSequenceData
  7396                           
  7397                           ;usart.c: 178:                 newSequenceData.W = receivedMex[2];
  7398  001746  C047  F0ED         	movff	storeData@receivedMex+2,_newSequenceData+1
  7399                           
  7400                           ;usart.c: 179:                 newSequenceData.init_posX = receivedMex[3];
  7401  00174A  C048  F0EE         	movff	storeData@receivedMex+3,_newSequenceData+2
  7402                           
  7403                           ;usart.c: 180:                 newSequenceData.init_posY = receivedMex[4];
  7404  00174E  C049  F0EF         	movff	storeData@receivedMex+4,_newSequenceData+3
  7405                           
  7406                           ;usart.c: 181:                 newSequenceData.init_rot = receivedMex[5];
  7407  001752  C04A  F0F0         	movff	storeData@receivedMex+5,_newSequenceData+4
  7408                           
  7409                           ;usart.c: 182:                 newSequenceData.end_posX = receivedMex[6];
  7410  001756  C04B  F0F1         	movff	storeData@receivedMex+6,_newSequenceData+5
  7411                           
  7412                           ;usart.c: 183:                 newSequenceData.end_posY = receivedMex[7];
  7413  00175A  C04C  F0F2         	movff	storeData@receivedMex+7,_newSequenceData+6
  7414                           
  7415                           ;usart.c: 184:                 newSequenceData.end_rot = receivedMex[8];
  7416  00175E  C04D  F0F3         	movff	storeData@receivedMex+8,_newSequenceData+7
  7417  001762                     
  7418                           ;usart.c: 186:                 _newSequence = 1;
  7419  001762  0E01               	movlw	1
  7420  001764  6E5F               	movwf	__newSequence^0,c
  7421                           
  7422                           ;usart.c: 187:                 break;
  7423  001766  EFDB  F00B         	goto	i2l571
  7424  00176A                     i2l3212:
  7425  00176A  FFFF               	dw	65535	; assembler added errata NOP
  7426                           
  7427                           ;usart.c: 190:                 _fatalError = 1;
  7428  00176C  0E01               	movlw	1
  7429  00176E  6E60               	movwf	__fatalError^0,c
  7430                           
  7431                           ;usart.c: 191:                 break;
  7432  001770  EFDB  F00B         	goto	i2l571
  7433  001774                     i2l3214:
  7434  001774  FFFF               	dw	65535	; assembler added errata NOP
  7435                           
  7436                           ;usart.c: 194:                 printError(8);
  7437  001776  0E08               	movlw	8
  7438  001778  EC07  F00D         	call	i2_printError
  7439                           
  7440                           ;usart.c: 195:                 break;
  7441  00177C  EFDB  F00B         	goto	i2l571
  7442  001780                     i2l3218:
  7443  001780  FFFF               	dw	65535	; assembler added errata NOP
  7444  001782  5045               	movf	storeData@receivedMex^0,w,c
  7445  001784  6E08               	movwf	??i2_storeData^0,c
  7446  001786  6A09               	clrf	(??i2_storeData+1)^0,c
  7447                           
  7448                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7449                           ; Switch size 1, requested type "simple"
  7450                           ; Number of cases is 1, Range of values is 0 to 0
  7451                           ; switch strategies available:
  7452                           ; Name         Instructions Cycles
  7453                           ; simple_byte            4     3 (average)
  7454                           ;	Chosen strategy is simple_byte
  7455  001788  5009               	movf	(??i2_storeData+1)^0,w,c
  7456  00178A  0A00               	xorlw	0	; case 0
  7457  00178C  B4D8               	btfsc	status,2,c
  7458  00178E  EFCB  F00B         	goto	i2l4522
  7459  001792  EFBA  F00B         	goto	i2l3214
  7460  001796                     i2l4522:
  7461  001796  FFFF               	dw	65535	; assembler added errata NOP
  7462                           
  7463                           ; Switch size 1, requested type "simple"
  7464                           ; Number of cases is 3, Range of values is 0 to 2
  7465                           ; switch strategies available:
  7466                           ; Name         Instructions Cycles
  7467                           ; simple_byte           10     6 (average)
  7468                           ;	Chosen strategy is simple_byte
  7469  001798  5008               	movf	??i2_storeData^0,w,c
  7470  00179A  0A00               	xorlw	0	; case 0
  7471  00179C  B4D8               	btfsc	status,2,c
  7472  00179E  EF74  F00B         	goto	i2l3206
  7473  0017A2  0A01               	xorlw	1	; case 1
  7474  0017A4  B4D8               	btfsc	status,2,c
  7475  0017A6  EFA0  F00B         	goto	i2l568
  7476  0017AA  0A03               	xorlw	3	; case 2
  7477  0017AC  B4D8               	btfsc	status,2,c
  7478  0017AE  EFB5  F00B         	goto	i2l3212
  7479  0017B2  EFBA  F00B         	goto	i2l3214
  7480  0017B6                     i2l571:
  7481  0017B6  FFFF               	dw	65535	; assembler added errata NOP
  7482  0017B8  0012               	return		;funcret
  7483  0017BA  FFFF               	dw	65535	; errata NOP
  7484  0017BC                     __end_ofi2_storeData:
  7485                           	callstack 0
  7486                           
  7487 ;; *************** function i2_printError *****************
  7488 ;; Defined at:
  7489 ;;		line 53 in file "usart.c"
  7490 ;; Parameters:    Size  Location     Type
  7491 ;;  errCode         1    wreg     unsigned char 
  7492 ;; Auto vars:     Size  Location     Type
  7493 ;;  errCode         1    6[COMRAM] unsigned char 
  7494 ;; Return value:  Size  Location     Type
  7495 ;;                  1    wreg      void 
  7496 ;; Registers used:
  7497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7498 ;; Tracked objects:
  7499 ;;		On entry : 0/0
  7500 ;;		On exit  : 0/0
  7501 ;;		Unchanged: 0/0
  7502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7503 ;;      Params:         0       0       0       0       0       0       0
  7504 ;;      Locals:         1       0       0       0       0       0       0
  7505 ;;      Temps:          2       0       0       0       0       0       0
  7506 ;;      Totals:         3       0       0       0       0       0       0
  7507 ;;Total ram usage:        3 bytes
  7508 ;; Hardware stack levels used:    1
  7509 ;; Hardware stack levels required when called:    1
  7510 ;; This function calls:
  7511 ;;		i2_uartTx
  7512 ;; This function is called by:
  7513 ;;		i2_storeData
  7514 ;; This function uses a non-reentrant model
  7515 ;;
  7516                           
  7517                           	psect	text46
  7518  001A0E                     __ptext46:
  7519                           	callstack 0
  7520  001A0E                     i2_printError:
  7521                           	callstack 0
  7522  001A0E  FFFF               	dw	65535	; assembler added errata NOP
  7523                           
  7524                           ;incstack = 0
  7525                           ;i2printError@errCode stored from wreg
  7526  001A10  6E07               	movwf	i2printError@errCode^0,c
  7527  001A12                     
  7528                           ;usart.c: 55:     switch(errCode){
  7529  001A12  EF63  F00D         	goto	i2l2938
  7530  001A16                     i2l2920:
  7531  001A16  FFFF               	dw	65535	; assembler added errata NOP
  7532                           
  7533                           ;usart.c: 57:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  7534  001A18  0EA4               	movlw	low _errString_Feed
  7535  001A1A  6E01               	movwf	i2uartTx@ptr^0,c
  7536  001A1C  0E00               	movlw	high _errString_Feed
  7537  001A1E  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7538  001A20  0E1D               	movlw	29
  7539  001A22  6E03               	movwf	i2uartTx@length^0,c
  7540  001A24  EC91  F011         	call	i2_uartTx	;wreg free
  7541                           
  7542                           ;usart.c: 58:             break;
  7543  001A28  EF92  F00D         	goto	i2l527
  7544  001A2C                     i2l2922:
  7545  001A2C  FFFF               	dw	65535	; assembler added errata NOP
  7546                           
  7547                           ;usart.c: 60:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  7548  001A2E  0E5C               	movlw	low _errString_ZEND
  7549  001A30  6E01               	movwf	i2uartTx@ptr^0,c
  7550  001A32  0E01               	movlw	high _errString_ZEND
  7551  001A34  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7552  001A36  0E28               	movlw	40
  7553  001A38  6E03               	movwf	i2uartTx@length^0,c
  7554  001A3A  EC91  F011         	call	i2_uartTx	;wreg free
  7555                           
  7556                           ;usart.c: 61:             break;
  7557  001A3E  EF92  F00D         	goto	i2l527
  7558  001A42                     i2l2924:
  7559  001A42  FFFF               	dw	65535	; assembler added errata NOP
  7560                           
  7561                           ;usart.c: 63:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  7562  001A44  0E84               	movlw	low _errString_Reset
  7563  001A46  6E01               	movwf	i2uartTx@ptr^0,c
  7564  001A48  0E01               	movlw	high _errString_Reset
  7565  001A4A  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7566  001A4C  0E27               	movlw	39
  7567  001A4E  6E03               	movwf	i2uartTx@length^0,c
  7568  001A50  EC91  F011         	call	i2_uartTx	;wreg free
  7569                           
  7570                           ;usart.c: 64:             break;
  7571  001A54  EF92  F00D         	goto	i2l527
  7572  001A58                     i2l2926:
  7573  001A58  FFFF               	dw	65535	; assembler added errata NOP
  7574                           
  7575                           ;usart.c: 66:             uartTx(&errString_Point[0], sizeof(errString_Point));
  7576  001A5A  0E34               	movlw	low _errString_Point
  7577  001A5C  6E01               	movwf	i2uartTx@ptr^0,c
  7578  001A5E  0E01               	movlw	high _errString_Point
  7579  001A60  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7580  001A62  0E28               	movlw	40
  7581  001A64  6E03               	movwf	i2uartTx@length^0,c
  7582  001A66  EC91  F011         	call	i2_uartTx	;wreg free
  7583                           
  7584                           ;usart.c: 67:             break;
  7585  001A6A  EF92  F00D         	goto	i2l527
  7586  001A6E                     i2l2928:
  7587  001A6E  FFFF               	dw	65535	; assembler added errata NOP
  7588                           
  7589                           ;usart.c: 69:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  7590  001A70  0E84               	movlw	low _errString_Bound
  7591  001A72  6E01               	movwf	i2uartTx@ptr^0,c
  7592  001A74  0E00               	movlw	high _errString_Bound
  7593  001A76  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7594  001A78  0E20               	movlw	32
  7595  001A7A  6E03               	movwf	i2uartTx@length^0,c
  7596  001A7C  EC91  F011         	call	i2_uartTx	;wreg free
  7597                           
  7598                           ;usart.c: 70:             break;
  7599  001A80  EF92  F00D         	goto	i2l527
  7600  001A84                     i2l2930:
  7601  001A84  FFFF               	dw	65535	; assembler added errata NOP
  7602                           
  7603                           ;usart.c: 72:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  7604  001A86  0E00               	movlw	low _errString_PointZ
  7605  001A88  6E01               	movwf	i2uartTx@ptr^0,c
  7606  001A8A  0E01               	movlw	high _errString_PointZ
  7607  001A8C  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7608  001A8E  0E34               	movlw	52
  7609  001A90  6E03               	movwf	i2uartTx@length^0,c
  7610  001A92  EC91  F011         	call	i2_uartTx	;wreg free
  7611                           
  7612                           ;usart.c: 73:             break;
  7613  001A96  EF92  F00D         	goto	i2l527
  7614  001A9A                     i2l2932:
  7615  001A9A  FFFF               	dw	65535	; assembler added errata NOP
  7616                           
  7617                           ;usart.c: 75:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  7618  001A9C  0EAB               	movlw	low _errString_Fatal
  7619  001A9E  6E01               	movwf	i2uartTx@ptr^0,c
  7620  001AA0  0E01               	movlw	high _errString_Fatal
  7621  001AA2  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7622  001AA4  0E26               	movlw	38
  7623  001AA6  6E03               	movwf	i2uartTx@length^0,c
  7624  001AA8  EC91  F011         	call	i2_uartTx	;wreg free
  7625                           
  7626                           ;usart.c: 76:             break;
  7627  001AAC  EF92  F00D         	goto	i2l527
  7628  001AB0                     i2l2934:
  7629  001AB0  FFFF               	dw	65535	; assembler added errata NOP
  7630                           
  7631                           ;usart.c: 78:             uartTx(&errString_Command[0], sizeof(errString_Command));
  7632  001AB2  0EC1               	movlw	low _errString_Command
  7633  001AB4  6E01               	movwf	i2uartTx@ptr^0,c
  7634  001AB6  0E00               	movlw	high _errString_Command
  7635  001AB8  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7636  001ABA  0E17               	movlw	23
  7637  001ABC  6E03               	movwf	i2uartTx@length^0,c
  7638  001ABE  EC91  F011         	call	i2_uartTx	;wreg free
  7639                           
  7640                           ;usart.c: 79:             break;
  7641  001AC2  EF92  F00D         	goto	i2l527
  7642  001AC6                     i2l2938:
  7643  001AC6  FFFF               	dw	65535	; assembler added errata NOP
  7644  001AC8  5007               	movf	i2printError@errCode^0,w,c
  7645  001ACA  6E05               	movwf	??i2_printError^0,c
  7646  001ACC  6A06               	clrf	(??i2_printError+1)^0,c
  7647                           
  7648                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7649                           ; Switch size 1, requested type "simple"
  7650                           ; Number of cases is 1, Range of values is 0 to 0
  7651                           ; switch strategies available:
  7652                           ; Name         Instructions Cycles
  7653                           ; simple_byte            4     3 (average)
  7654                           ;	Chosen strategy is simple_byte
  7655  001ACE  5006               	movf	(??i2_printError+1)^0,w,c
  7656  001AD0  0A00               	xorlw	0	; case 0
  7657  001AD2  B4D8               	btfsc	status,2,c
  7658  001AD4  EF6E  F00D         	goto	i2l4524
  7659  001AD8  EF92  F00D         	goto	i2l527
  7660  001ADC                     i2l4524:
  7661  001ADC  FFFF               	dw	65535	; assembler added errata NOP
  7662                           
  7663                           ; Switch size 1, requested type "simple"
  7664                           ; Number of cases is 8, Range of values is 1 to 8
  7665                           ; switch strategies available:
  7666                           ; Name         Instructions Cycles
  7667                           ; simple_byte           25    13 (average)
  7668                           ;	Chosen strategy is simple_byte
  7669  001ADE  5005               	movf	??i2_printError^0,w,c
  7670  001AE0  0A01               	xorlw	1	; case 1
  7671  001AE2  B4D8               	btfsc	status,2,c
  7672  001AE4  EF0B  F00D         	goto	i2l2920
  7673  001AE8  0A03               	xorlw	3	; case 2
  7674  001AEA  B4D8               	btfsc	status,2,c
  7675  001AEC  EF16  F00D         	goto	i2l2922
  7676  001AF0  0A01               	xorlw	1	; case 3
  7677  001AF2  B4D8               	btfsc	status,2,c
  7678  001AF4  EF21  F00D         	goto	i2l2924
  7679  001AF8  0A07               	xorlw	7	; case 4
  7680  001AFA  B4D8               	btfsc	status,2,c
  7681  001AFC  EF2C  F00D         	goto	i2l2926
  7682  001B00  0A01               	xorlw	1	; case 5
  7683  001B02  B4D8               	btfsc	status,2,c
  7684  001B04  EF37  F00D         	goto	i2l2928
  7685  001B08  0A03               	xorlw	3	; case 6
  7686  001B0A  B4D8               	btfsc	status,2,c
  7687  001B0C  EF42  F00D         	goto	i2l2930
  7688  001B10  0A01               	xorlw	1	; case 7
  7689  001B12  B4D8               	btfsc	status,2,c
  7690  001B14  EF4D  F00D         	goto	i2l2932
  7691  001B18  0A0F               	xorlw	15	; case 8
  7692  001B1A  B4D8               	btfsc	status,2,c
  7693  001B1C  EF58  F00D         	goto	i2l2934
  7694  001B20  EF92  F00D         	goto	i2l527
  7695  001B24                     i2l527:
  7696  001B24  FFFF               	dw	65535	; assembler added errata NOP
  7697  001B26  0012               	return		;funcret
  7698  001B28  FFFF               	dw	65535	; errata NOP
  7699  001B2A                     __end_ofi2_printError:
  7700                           	callstack 0
  7701                           
  7702 ;; *************** function i2_uartTx *****************
  7703 ;; Defined at:
  7704 ;;		line 221 in file "usart.c"
  7705 ;; Parameters:    Size  Location     Type
  7706 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  7707 ;;		 -> errString_Command(23), errString_Fatal(38), errString_PointZ(52), errString_Bound(32), 
  7708 ;;		 -> errString_Point(40), errString_Reset(39), errString_ZEND(40), errString_Feed(29), 
  7709 ;;  length          1    2[COMRAM] unsigned char 
  7710 ;; Auto vars:     Size  Location     Type
  7711 ;;  i               1    3[COMRAM] unsigned char 
  7712 ;; Return value:  Size  Location     Type
  7713 ;;                  1    wreg      void 
  7714 ;; Registers used:
  7715 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7716 ;; Tracked objects:
  7717 ;;		On entry : 0/0
  7718 ;;		On exit  : 0/0
  7719 ;;		Unchanged: 0/0
  7720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7721 ;;      Params:         3       0       0       0       0       0       0
  7722 ;;      Locals:         1       0       0       0       0       0       0
  7723 ;;      Temps:          0       0       0       0       0       0       0
  7724 ;;      Totals:         4       0       0       0       0       0       0
  7725 ;;Total ram usage:        4 bytes
  7726 ;; Hardware stack levels used:    1
  7727 ;; This function calls:
  7728 ;;		Nothing
  7729 ;; This function is called by:
  7730 ;;		i2_printError
  7731 ;; This function uses a non-reentrant model
  7732 ;;
  7733                           
  7734                           	psect	text47
  7735  002322                     __ptext47:
  7736                           	callstack 0
  7737  002322                     i2_uartTx:
  7738                           	callstack 0
  7739  002322  FFFF               	dw	65535	; assembler added errata NOP
  7740  002324                     
  7741                           ;usart.c: 221: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 222: {;usa
      +                          rt.c: 224:     for(char i = 1; i < length; i++){
  7742  002324  0E01               	movlw	1
  7743  002326  6E04               	movwf	i2uartTx@i^0,c
  7744  002328  EFAA  F011         	goto	i2l2618
  7745  00232C                     i2l2614:
  7746  00232C  FFFF               	dw	65535	; assembler added errata NOP
  7747                           
  7748                           ;usart.c: 226:         TXREG = *ptr;
  7749  00232E  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  7750  002332  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  7751  002336  50DF               	movf	indf2,w,c
  7752  002338  6EAD               	movwf	173,c	;volatile
  7753  00233A                     i2l582:
  7754  00233A  FFFF               	dw	65535	; assembler added errata NOP
  7755  00233C  A2AC               	btfss	172,1,c	;volatile
  7756  00233E  EFA3  F011         	goto	i2u168_41
  7757  002342  EFA6  F011         	goto	i2u168_40
  7758  002346                     i2u168_41:
  7759  002346  FFFF               	dw	65535	; assembler added errata NOP
  7760  002348  EF9D  F011         	goto	i2l582
  7761  00234C                     i2u168_40:
  7762  00234C  FFFF               	dw	65535	; assembler added errata NOP
  7763  00234E                     
  7764                           ;usart.c: 230:         ptr++;
  7765  00234E  4A01               	infsnz	i2uartTx@ptr^0,f,c
  7766  002350  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  7767                           
  7768                           ;usart.c: 231:     }
  7769  002352  2A04               	incf	i2uartTx@i^0,f,c
  7770  002354                     i2l2618:
  7771  002354  FFFF               	dw	65535	; assembler added errata NOP
  7772  002356  5003               	movf	i2uartTx@length^0,w,c
  7773  002358  5C04               	subwf	i2uartTx@i^0,w,c
  7774  00235A  A0D8               	btfss	status,0,c
  7775  00235C  EFB2  F011         	goto	i2u169_41
  7776  002360  EFB5  F011         	goto	i2u169_40
  7777  002364                     i2u169_41:
  7778  002364  FFFF               	dw	65535	; assembler added errata NOP
  7779  002366  EF96  F011         	goto	i2l2614
  7780  00236A                     i2u169_40:
  7781  00236A  FFFF               	dw	65535	; assembler added errata NOP
  7782  00236C  0012               	return		;funcret
  7783  00236E  FFFF               	dw	65535	; errata NOP
  7784  002370                     __end_ofi2_uartTx:
  7785                           	callstack 0
  7786                           
  7787 ;; *************** function _writeTM0 *****************
  7788 ;; Defined at:
  7789 ;;		line 21 in file "motors.c"
  7790 ;; Parameters:    Size  Location     Type
  7791 ;;		None
  7792 ;; Auto vars:     Size  Location     Type
  7793 ;;		None
  7794 ;; Return value:  Size  Location     Type
  7795 ;;                  1    wreg      void 
  7796 ;; Registers used:
  7797 ;;		wreg, status,2
  7798 ;; Tracked objects:
  7799 ;;		On entry : 0/0
  7800 ;;		On exit  : 0/0
  7801 ;;		Unchanged: 0/0
  7802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7803 ;;      Params:         0       0       0       0       0       0       0
  7804 ;;      Locals:         0       0       0       0       0       0       0
  7805 ;;      Temps:          0       0       0       0       0       0       0
  7806 ;;      Totals:         0       0       0       0       0       0       0
  7807 ;;Total ram usage:        0 bytes
  7808 ;; Hardware stack levels used:    1
  7809 ;; This function calls:
  7810 ;;		Nothing
  7811 ;; This function is called by:
  7812 ;;		_isr
  7813 ;; This function uses a non-reentrant model
  7814 ;;
  7815                           
  7816                           	psect	text48
  7817  0024C0                     __ptext48:
  7818                           	callstack 0
  7819  0024C0                     _writeTM0:
  7820                           	callstack 0
  7821  0024C0  FFFF               	dw	65535	; assembler added errata NOP
  7822  0024C2                     
  7823                           ;motors.c: 22:     tm0Error = 1;
  7824  0024C2  0E00               	movlw	0
  7825  0024C4  6E5C               	movwf	(_tm0Error+1)^0,c
  7826  0024C6  0E01               	movlw	1
  7827  0024C8  6E5B               	movwf	_tm0Error^0,c
  7828  0024CA  0012               	return		;funcret
  7829  0024CC  FFFF               	dw	65535	; errata NOP
  7830  0024CE                     __end_of_writeTM0:
  7831                           	callstack 0
  7832                           
  7833 ;; *************** function _whatsTM0Limit *****************
  7834 ;; Defined at:
  7835 ;;		line 35 in file "motors.c"
  7836 ;; Parameters:    Size  Location     Type
  7837 ;;		None
  7838 ;; Auto vars:     Size  Location     Type
  7839 ;;		None
  7840 ;; Return value:  Size  Location     Type
  7841 ;;                  1    wreg      unsigned char 
  7842 ;; Registers used:
  7843 ;;		wreg, status,2
  7844 ;; Tracked objects:
  7845 ;;		On entry : 0/0
  7846 ;;		On exit  : 0/0
  7847 ;;		Unchanged: 0/0
  7848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7849 ;;      Params:         0       0       0       0       0       0       0
  7850 ;;      Locals:         0       0       0       0       0       0       0
  7851 ;;      Temps:          0       0       0       0       0       0       0
  7852 ;;      Totals:         0       0       0       0       0       0       0
  7853 ;;Total ram usage:        0 bytes
  7854 ;; Hardware stack levels used:    1
  7855 ;; This function calls:
  7856 ;;		Nothing
  7857 ;; This function is called by:
  7858 ;;		_isr
  7859 ;; This function uses a non-reentrant model
  7860 ;;
  7861                           
  7862                           	psect	text49
  7863  002578                     __ptext49:
  7864                           	callstack 0
  7865  002578                     _whatsTM0Limit:
  7866                           	callstack 0
  7867  002578  FFFF               	dw	65535	; assembler added errata NOP
  7868  00257A                     
  7869                           ;motors.c: 36:     return(tm0Limit);
  7870  00257A  5068               	movf	_tm0Limit^0,w,c
  7871  00257C  0012               	return		;funcret
  7872  00257E  FFFF               	dw	65535	; errata NOP
  7873  002580                     __end_of_whatsTM0Limit:
  7874                           	callstack 0
  7875                           
  7876 ;; *************** function _toggleStep *****************
  7877 ;; Defined at:
  7878 ;;		line 80 in file "pwm.c"
  7879 ;; Parameters:    Size  Location     Type
  7880 ;;		None
  7881 ;; Auto vars:     Size  Location     Type
  7882 ;;		None
  7883 ;; Return value:  Size  Location     Type
  7884 ;;                  1    wreg      void 
  7885 ;; Registers used:
  7886 ;;		wreg, status,2
  7887 ;; Tracked objects:
  7888 ;;		On entry : 0/0
  7889 ;;		On exit  : 0/0
  7890 ;;		Unchanged: 0/0
  7891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7892 ;;      Params:         0       0       0       0       0       0       0
  7893 ;;      Locals:         0       0       0       0       0       0       0
  7894 ;;      Temps:          0       0       0       0       0       0       0
  7895 ;;      Totals:         0       0       0       0       0       0       0
  7896 ;;Total ram usage:        0 bytes
  7897 ;; Hardware stack levels used:    1
  7898 ;; This function calls:
  7899 ;;		Nothing
  7900 ;; This function is called by:
  7901 ;;		_isr
  7902 ;; This function uses a non-reentrant model
  7903 ;;
  7904                           
  7905                           	psect	text50
  7906  002532                     __ptext50:
  7907                           	callstack 0
  7908  002532                     _toggleStep:
  7909                           	callstack 0
  7910  002532  FFFF               	dw	65535	; assembler added errata NOP
  7911  002534                     
  7912                           ;pwm.c: 81:     stepToggle = 1;
  7913  002534  0E01               	movlw	1
  7914  002536  6E66               	movwf	_stepToggle^0,c	;volatile
  7915  002538  0012               	return		;funcret
  7916  00253A  FFFF               	dw	65535	; errata NOP
  7917  00253C                     __end_of_toggleStep:
  7918                           	callstack 0
  7919                           
  7920 ;; *************** function _setTouchRel *****************
  7921 ;; Defined at:
  7922 ;;		line 86 in file "adc.c"
  7923 ;; Parameters:    Size  Location     Type
  7924 ;;		None
  7925 ;; Auto vars:     Size  Location     Type
  7926 ;;		None
  7927 ;; Return value:  Size  Location     Type
  7928 ;;                  1    wreg      void 
  7929 ;; Registers used:
  7930 ;;		wreg, status,2
  7931 ;; Tracked objects:
  7932 ;;		On entry : 0/0
  7933 ;;		On exit  : 0/0
  7934 ;;		Unchanged: 0/0
  7935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7936 ;;      Params:         0       0       0       0       0       0       0
  7937 ;;      Locals:         0       0       0       0       0       0       0
  7938 ;;      Temps:          0       0       0       0       0       0       0
  7939 ;;      Totals:         0       0       0       0       0       0       0
  7940 ;;Total ram usage:        0 bytes
  7941 ;; Hardware stack levels used:    1
  7942 ;; This function calls:
  7943 ;;		Nothing
  7944 ;; This function is called by:
  7945 ;;		_isr
  7946 ;; This function uses a non-reentrant model
  7947 ;;
  7948                           
  7949                           	psect	text51
  7950  00253C                     __ptext51:
  7951                           	callstack 0
  7952  00253C                     _setTouchRel:
  7953                           	callstack 0
  7954  00253C  FFFF               	dw	65535	; assembler added errata NOP
  7955  00253E                     
  7956                           ;adc.c: 87:     touch_rel = 1;
  7957  00253E  0E01               	movlw	1
  7958  002540  6E65               	movwf	_touch_rel^0,c	;volatile
  7959  002542  0012               	return		;funcret
  7960  002544  FFFF               	dw	65535	; errata NOP
  7961  002546                     __end_of_setTouchRel:
  7962                           	callstack 0
  7963                           
  7964 ;; *************** function _setThermRel *****************
  7965 ;; Defined at:
  7966 ;;		line 79 in file "adc.c"
  7967 ;; Parameters:    Size  Location     Type
  7968 ;;		None
  7969 ;; Auto vars:     Size  Location     Type
  7970 ;;		None
  7971 ;; Return value:  Size  Location     Type
  7972 ;;                  1    wreg      void 
  7973 ;; Registers used:
  7974 ;;		wreg, status,2
  7975 ;; Tracked objects:
  7976 ;;		On entry : 0/0
  7977 ;;		On exit  : 0/0
  7978 ;;		Unchanged: 0/0
  7979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7980 ;;      Params:         0       0       0       0       0       0       0
  7981 ;;      Locals:         0       0       0       0       0       0       0
  7982 ;;      Temps:          0       0       0       0       0       0       0
  7983 ;;      Totals:         0       0       0       0       0       0       0
  7984 ;;Total ram usage:        0 bytes
  7985 ;; Hardware stack levels used:    1
  7986 ;; This function calls:
  7987 ;;		Nothing
  7988 ;; This function is called by:
  7989 ;;		_isr
  7990 ;; This function uses a non-reentrant model
  7991 ;;
  7992                           
  7993                           	psect	text52
  7994  002546                     __ptext52:
  7995                           	callstack 0
  7996  002546                     _setThermRel:
  7997                           	callstack 0
  7998  002546  FFFF               	dw	65535	; assembler added errata NOP
  7999  002548                     
  8000                           ;adc.c: 80:     therm_rel = 1;
  8001  002548  0E01               	movlw	1
  8002  00254A  6E64               	movwf	_therm_rel^0,c	;volatile
  8003  00254C  0012               	return		;funcret
  8004  00254E  FFFF               	dw	65535	; errata NOP
  8005  002550                     __end_of_setThermRel:
  8006                           	callstack 0
  8007                           
  8008 ;; *************** function _retPeriod *****************
  8009 ;; Defined at:
  8010 ;;		line 88 in file "pwm.c"
  8011 ;; Parameters:    Size  Location     Type
  8012 ;;		None
  8013 ;; Auto vars:     Size  Location     Type
  8014 ;;		None
  8015 ;; Return value:  Size  Location     Type
  8016 ;;                  2    0[COMRAM] unsigned int 
  8017 ;; Registers used:
  8018 ;;		None
  8019 ;; Tracked objects:
  8020 ;;		On entry : 0/0
  8021 ;;		On exit  : 0/0
  8022 ;;		Unchanged: 0/0
  8023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8024 ;;      Params:         2       0       0       0       0       0       0
  8025 ;;      Locals:         0       0       0       0       0       0       0
  8026 ;;      Temps:          0       0       0       0       0       0       0
  8027 ;;      Totals:         2       0       0       0       0       0       0
  8028 ;;Total ram usage:        2 bytes
  8029 ;; Hardware stack levels used:    1
  8030 ;; This function calls:
  8031 ;;		Nothing
  8032 ;; This function is called by:
  8033 ;;		_isr
  8034 ;; This function uses a non-reentrant model
  8035 ;;
  8036                           
  8037                           	psect	text53
  8038  0024CE                     __ptext53:
  8039                           	callstack 0
  8040  0024CE                     _retPeriod:
  8041                           	callstack 0
  8042  0024CE  FFFF               	dw	65535	; assembler added errata NOP
  8043  0024D0                     
  8044                           ;pwm.c: 89:     return pwmPeriod;
  8045  0024D0  C055  F001         	movff	_pwmPeriod,?_retPeriod
  8046  0024D4  C056  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  8047  0024D8  0012               	return		;funcret
  8048  0024DA  FFFF               	dw	65535	; errata NOP
  8049  0024DC                     __end_of_retPeriod:
  8050                           	callstack 0
  8051                           
  8052 ;; *************** function _increaseStep *****************
  8053 ;; Defined at:
  8054 ;;		line 72 in file "pwm.c"
  8055 ;; Parameters:    Size  Location     Type
  8056 ;;		None
  8057 ;; Auto vars:     Size  Location     Type
  8058 ;;		None
  8059 ;; Return value:  Size  Location     Type
  8060 ;;                  1    wreg      void 
  8061 ;; Registers used:
  8062 ;;		status,2, status,0
  8063 ;; Tracked objects:
  8064 ;;		On entry : 0/0
  8065 ;;		On exit  : 0/0
  8066 ;;		Unchanged: 0/0
  8067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8068 ;;      Params:         0       0       0       0       0       0       0
  8069 ;;      Locals:         0       0       0       0       0       0       0
  8070 ;;      Temps:          0       0       0       0       0       0       0
  8071 ;;      Totals:         0       0       0       0       0       0       0
  8072 ;;Total ram usage:        0 bytes
  8073 ;; Hardware stack levels used:    1
  8074 ;; This function calls:
  8075 ;;		Nothing
  8076 ;; This function is called by:
  8077 ;;		_isr
  8078 ;; This function uses a non-reentrant model
  8079 ;;
  8080                           
  8081                           	psect	text54
  8082  002580                     __ptext54:
  8083                           	callstack 0
  8084  002580                     _increaseStep:
  8085                           	callstack 0
  8086  002580  FFFF               	dw	65535	; assembler added errata NOP
  8087  002582                     
  8088                           ;pwm.c: 73:     pwmStep++;
  8089  002582  2A67               	incf	_pwmStep^0,f,c	;volatile
  8090  002584  0012               	return		;funcret
  8091  002586  FFFF               	dw	65535	; errata NOP
  8092  002588                     __end_of_increaseStep:
  8093                           	callstack 0
  8094                           
  8095                           	psect	rparam
  8096  0000                     
  8097                           	psect	temp
  8098  00006E                     btemp:
  8099                           	callstack 0
  8100  00006E                     	ds	1
  8101  0000                     int$flags	set	btemp
  8102  0000                     wtemp8	set	btemp+1
  8103  0000                     ttemp5	set	btemp+1
  8104  0000                     ttemp6	set	btemp+4
  8105  0000                     ttemp7	set	btemp+8
  8106                           
  8107                           	psect	idloc
  8108                           
  8109                           ;Config register IDLOC0 @ 0x200000
  8110                           ;	unspecified, using default values
  8111  200000                     	org	2097152
  8112  200000  FF                 	db	255
  8113                           
  8114                           ;Config register IDLOC1 @ 0x200001
  8115                           ;	unspecified, using default values
  8116  200001                     	org	2097153
  8117  200001  FF                 	db	255
  8118                           
  8119                           ;Config register IDLOC2 @ 0x200002
  8120                           ;	unspecified, using default values
  8121  200002                     	org	2097154
  8122  200002  FF                 	db	255
  8123                           
  8124                           ;Config register IDLOC3 @ 0x200003
  8125                           ;	unspecified, using default values
  8126  200003                     	org	2097155
  8127  200003  FF                 	db	255
  8128                           
  8129                           ;Config register IDLOC4 @ 0x200004
  8130                           ;	unspecified, using default values
  8131  200004                     	org	2097156
  8132  200004  FF                 	db	255
  8133                           
  8134                           ;Config register IDLOC5 @ 0x200005
  8135                           ;	unspecified, using default values
  8136  200005                     	org	2097157
  8137  200005  FF                 	db	255
  8138                           
  8139                           ;Config register IDLOC6 @ 0x200006
  8140                           ;	unspecified, using default values
  8141  200006                     	org	2097158
  8142  200006  FF                 	db	255
  8143                           
  8144                           ;Config register IDLOC7 @ 0x200007
  8145                           ;	unspecified, using default values
  8146  200007                     	org	2097159
  8147  200007  FF                 	db	255
  8148                           
  8149                           	psect	config
  8150                           
  8151                           ; Padding undefined space
  8152  300000                     	org	3145728
  8153  300000  FF                 	db	255
  8154                           
  8155                           ;Config register CONFIG1H @ 0x300001
  8156                           ;	Oscillator Selection bits
  8157                           ;	OSC = XT, XT oscillator
  8158                           ;	Oscillator System Clock Switch Enable bit
  8159                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  8160  300001                     	org	3145729
  8161  300001  21                 	db	33
  8162                           
  8163                           ;Config register CONFIG2L @ 0x300002
  8164                           ;	Power-up Timer Enable bit
  8165                           ;	PWRT = OFF, PWRT disabled
  8166                           ;	Brown-out Reset Enable bit
  8167                           ;	BOR = OFF, Brown-out Reset disabled
  8168                           ;	Brown-out Reset Voltage bits
  8169                           ;	BORV = 20, VBOR set to 2.0V
  8170  300002                     	org	3145730
  8171  300002  0D                 	db	13
  8172                           
  8173                           ;Config register CONFIG2H @ 0x300003
  8174                           ;	Watchdog Timer Enable bit
  8175                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8176                           ;	Watchdog Timer Postscale Select bits
  8177                           ;	WDTPS = 128, 1:128
  8178  300003                     	org	3145731
  8179  300003  0E                 	db	14
  8180                           
  8181                           ; Padding undefined space
  8182  300004                     	org	3145732
  8183  300004  FF                 	db	255
  8184                           
  8185                           ;Config register CONFIG3H @ 0x300005
  8186                           ;	CCP2 Mux bit
  8187                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  8188  300005                     	org	3145733
  8189  300005  00                 	db	0
  8190                           
  8191                           ;Config register CONFIG4L @ 0x300006
  8192                           ;	Stack Full/Underflow Reset Enable bit
  8193                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  8194                           ;	Low Voltage ICSP Enable bit
  8195                           ;	LVP = OFF, Low Voltage ICSP disabled
  8196                           ;	Background Debugger Enable bit
  8197                           ;	DEBUG = 0x1, unprogrammed default
  8198  300006                     	org	3145734
  8199  300006  80                 	db	128
  8200                           
  8201                           ; Padding undefined space
  8202  300007                     	org	3145735
  8203  300007  FF                 	db	255
  8204                           
  8205                           ;Config register CONFIG5L @ 0x300008
  8206                           ;	Code Protection bit
  8207                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  8208                           ;	Code Protection bit
  8209                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  8210                           ;	Code Protection bit
  8211                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  8212                           ;	Code Protection bit
  8213                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  8214  300008                     	org	3145736
  8215  300008  0F                 	db	15
  8216                           
  8217                           ;Config register CONFIG5H @ 0x300009
  8218                           ;	Boot Block Code Protection bit
  8219                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  8220                           ;	Data EEPROM Code Protection bit
  8221                           ;	CPD = OFF, Data EEPROM not code protected
  8222  300009                     	org	3145737
  8223  300009  C0                 	db	192
  8224                           
  8225                           ;Config register CONFIG6L @ 0x30000A
  8226                           ;	Write Protection bit
  8227                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  8228                           ;	Write Protection bit
  8229                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  8230                           ;	Write Protection bit
  8231                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  8232                           ;	Write Protection bit
  8233                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  8234  30000A                     	org	3145738
  8235  30000A  0F                 	db	15
  8236                           
  8237                           ;Config register CONFIG6H @ 0x30000B
  8238                           ;	Configuration Register Write Protection bit
  8239                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  8240                           ;	Boot Block Write Protection bit
  8241                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  8242                           ;	Data EEPROM Write Protection bit
  8243                           ;	WRTD = OFF, Data EEPROM not write protected
  8244  30000B                     	org	3145739
  8245  30000B  E0                 	db	224
  8246                           
  8247                           ;Config register CONFIG7L @ 0x30000C
  8248                           ;	Table Read Protection bit
  8249                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  8250                           ;	Table Read Protection bit
  8251                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  8252                           ;	Table Read Protection bit
  8253                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  8254                           ;	Table Read Protection bit
  8255                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  8256  30000C                     	org	3145740
  8257  30000C  0F                 	db	15
  8258                           
  8259                           ;Config register CONFIG7H @ 0x30000D
  8260                           ;	Boot Block Table Read Protection bit
  8261                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  8262  30000D                     	org	3145741
  8263  30000D  40                 	db	64
  8264                           tosu	equ	0xFFF
  8265                           tosh	equ	0xFFE
  8266                           tosl	equ	0xFFD
  8267                           stkptr	equ	0xFFC
  8268                           pclatu	equ	0xFFB
  8269                           pclath	equ	0xFFA
  8270                           pcl	equ	0xFF9
  8271                           tblptru	equ	0xFF8
  8272                           tblptrh	equ	0xFF7
  8273                           tblptrl	equ	0xFF6
  8274                           tablat	equ	0xFF5
  8275                           prodh	equ	0xFF4
  8276                           prodl	equ	0xFF3
  8277                           indf0	equ	0xFEF
  8278                           postinc0	equ	0xFEE
  8279                           postdec0	equ	0xFED
  8280                           preinc0	equ	0xFEC
  8281                           plusw0	equ	0xFEB
  8282                           fsr0h	equ	0xFEA
  8283                           fsr0l	equ	0xFE9
  8284                           wreg	equ	0xFE8
  8285                           indf1	equ	0xFE7
  8286                           postinc1	equ	0xFE6
  8287                           postdec1	equ	0xFE5
  8288                           preinc1	equ	0xFE4
  8289                           plusw1	equ	0xFE3
  8290                           fsr1h	equ	0xFE2
  8291                           fsr1l	equ	0xFE1
  8292                           bsr	equ	0xFE0
  8293                           indf2	equ	0xFDF
  8294                           postinc2	equ	0xFDE
  8295                           postdec2	equ	0xFDD
  8296                           preinc2	equ	0xFDC
  8297                           plusw2	equ	0xFDB
  8298                           fsr2h	equ	0xFDA
  8299                           fsr2l	equ	0xFD9
  8300                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    14
    Data        302
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     68     109
    BANK0           128     11     127
    BANK1           256      5     214
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 52
		 -> errString_Command(BANK0[23]), errString_Fatal(BANK1[38]), errString_PointZ(BANK1[52]), errString_Bound(BANK0[32]), 
		 -> errString_Point(BANK1[40]), errString_Reset(BANK1[39]), errString_ZEND(BANK1[40]), errString_Feed(BANK0[29]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 


Critical Paths under _main in COMRAM

    _main->_executeData
    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_enableMotor
    _resetPosition->_setDecay
    _resetPosition->_setDirection
    _resetPosition->_setStep
    _touchTherm->_setDirection
    _touchObject->_setDirection
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _releaseObj->_stepMade
    _pickObject->_stepMade
    _moveToPoint->_setDirection
    _liftArm->_setDirection

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _main->_executeData
    _executeData->_rotateObj

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   17390
                                              0 BANK1      5     5      0
                           _clearTM0
                        _enableMotor
                        _executeData
                         _fatalError
                     _getNewSequence
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                   _resetNewSequence
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    1604
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0    2807
                                             21 COMRAM     3     3      0
                        _enableMotor
                          _resetStep
                           _setDecay
                       _setDirection
                            _setStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _setStep                                              4     3      1     487
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _setDecay                                             4     3      1     394
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _enableMotor                                          4     3      1     664
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _resetNewSequence                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0   10197
                                             66 COMRAM     2     2      0
                                              8 BANK0      3     3      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0    1058
                          _resetStep
                         _resetTherm
                        _returnTherm
                       _setDirection
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0    1058
                          _resetStep
                         _resetTouch
                        _returnTouch
                       _setDirection
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            8     8      0    3163
                                              0 BANK0      8     8      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         14     6      8    3508
                                             21 COMRAM    14     6      8
                          _resetStep
                       _setDirection
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0    1058
                          _resetStep
                       _setDirection
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _setDirection                                         4     3      1    1024
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0     552
                                             10 COMRAM     7     7      0
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _enableMotor
   _executeData
     _getData
     _liftArm
       _resetStep
       _setDirection
       _stepMade
     _moveToPoint
       _resetStep
       _setDirection
       _stepCounter
       _stepMade
     _pickObject
       _stepMade
     _releaseObj
       _stepMade
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _stepMade
     _touchObject
       _resetStep
       _resetTouch
       _returnTouch
       _setDirection
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTherm
       _returnTherm
       _setDirection
       _startADC
       _stepMade
       _stopADC
   _fatalError
   _getNewSequence
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetNewSequence
   _resetPosition
     _enableMotor
     _resetStep
     _setDecay
     _setDirection
     _setStep
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      5      D6       7       83.6%
BITBANK0            80      0       0       4        0.0%
BANK0               80      B      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     44      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C2      15        0.0%
DATA                 0      0     1C2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Sat Feb 06 11:54:29 2021

                                        ___fldiv@aexp 0038  
                                        ___fldiv@bexp 0037  
                               __end_of_interruptInit 23AA  
                                        ___fldiv@sign 0030  
                                                  l74 23CC  
                                                  l83 1DDE  
                                                  l68 24BC  
                                                  l92 21A2  
                                                 l101 2216  
                                                 l110 212E  
                                                 l200 200C  
                                                 l120 1282  
                                                 l121 12B2  
                                                 l210 2036  
                                                 l202 1FD0  
                                                 l203 201E  
                                                 l131 1306  
                                                 l115 124E  
                                                 l124 12B6  
                                                 l116 1362  
                                                 l141 0CFE  
                                                 l125 12E6  
                                                 l117 127E  
                                                 l206 1FF0  
                                                 l151 0B98  
                                                 l223 1EB4  
                                                 l135 137A  
                                                 l321 14EE  
                                                 l162 0C80  
                                                 l402 24F0  
                                                 l330 2386  
                                                 l155 0BEA  
                                                 l235 2416  
                                                 l411 2510  
                                                 l331 239C  
                                                 l332 23A6  
                                                 l149 0CE6  
                                                 l229 243A  
                                                 l405 24E4  
                                                 l166 0CA0  
                                                 l158 0C36  
                                                 l182 1D06  
                                                 l174 1C66  
                                                 l318 13EE  
                                                 l183 1D0A  
                                                 l319 13F0  
                                                 l408 2524  
                                                 l192 1B94  
                                                 l344 0F8E  
                                                 l360 246C  
                                                 l513 2458  
                                                 l178 1C86  
                                                 l530 2554  
                                                 l363 2480  
                                                 l196 1C14  
                                                 l188 1B74  
                                                 l197 1C18  
                                                 l533 255C  
                                                 l357 2492  
                                                 l366 24FC  
                                                 l542 2506  
                                                 l527 1A08  
                                                 l536 256C  
                                                 l369 252E  
                                                 l393 23F2  
                                                 l539 2564  
                                                 l547 2278  
                                                 l571 1654  
                                                 l396 251A  
                                                 l574 24AE  
                                                 l582 22EC  
                                                 l399 2574  
                                                 l568 15DE  
                                                 l577 24A0  
                                                 l586 231E  
                                                 l886 18EC  
                                                 _isr 0008  
                                         _touchObject 1C1C  
                                                 prod 000FF3  
                                                 wreg 000FE8  
                                        ___fltol@exp1 0042  
                                         main@errCode 01D3  
                                                l1171 0A3C  
                                                l1251 109E  
                                                l1244 0FF2  
                                                l1173 0854  
                                                l1182 08AA  
                                                l1247 1184  
                                                l1184 093A  
                                                l1176 080E  
                                                l4000 1212  
                                                l1185 0922  
                                                l1258 110A  
                                                l4010 1242  
                                                l4002 121A  
                                                l4020 12CA  
                                                l4012 1262  
                                                l4004 121E  
                                                l4100 1530  
                                                l4030 133C  
                                                l4022 12DC  
                                                l4014 1274  
                                                l4006 1224  
                                                l4110 1600  
                                                l4102 1566  
                                                l3400 21C0  
                                                l4032 1350  
                                                l4024 12EA  
                                                l4016 1296  
                                                l4008 123C  
                                                l4112 1608  
                                                l4104 157E  
                                                l3402 21D0  
                                                l4130 0D06  
                                                l4050 23DA  
                                                l4042 2372  
                                                l4034 1368  
                                                l4026 130C  
                                                l4018 12A8  
                                                l4202 2222  
                                                l4114 1612  
                                                l4106 1586  
                                                l3420 252A  
                                                l3412 2472  
                                                l4140 0D74  
                                                l4132 0D12  
                                                l4060 23F0  
                                                l4052 23E0  
                                                l4044 2384  
                                                l4036 1374  
                                                l4028 1326  
                                                l4204 2262  
                                                l4108 15D8  
                                                l4220 138C  
                                                l4212 137E  
                                                l3406 21E0  
                                                l3414 2476  
                                                l3422 24F6  
                                                l3510 07C8  
                                                l3502 077C  
                                                l3430 2520  
                                                l4150 0E1C  
                                                l4142 0DAE  
                                                l4134 0D16  
                                                l4054 23E2  
                                                l4046 239A  
                                                l4038 1378  
                                                l4206 2264  
                                                l4118 161E  
                                                l4070 245E  
                                                l4062 2440  
                                                l4230 13AE  
                                                l4222 1390  
                                                l4214 137E  
                                                l3416 247A  
                                                l3520 081A  
                                                l3512 07D0  
                                                l3504 0798  
                                                l3424 2516  
                                                l3432 24DE  
                                                l4152 0E30  
                                                l4144 0DBE  
                                                l4136 0D50  
                                                l4056 23E4  
                                                l4048 23D2  
                                                l4080 2562  
                                                l4208 255A  
                                                l4128 2502  
                                                l3440 2300  
                                                l4072 2460  
                                                l4064 2454  
                                                l4240 140E  
                                                l4232 13B0  
                                                l4224 1394  
                                                l4216 1384  
                                                l3530 0884  
                                                l3522 083E  
                                                l3514 07E6  
                                                l3506 07A8  
                                                l3450 0632  
                                                l3426 24EA  
                                                l3434 250C  
                                                l4170 0F16  
                                                l4154 0E52  
                                                l4146 0DD2  
                                                l4138 0D60  
                                                l4162 0E6A  
                                                l4058 23EE  
                                                l3442 2306  
                                                l4090 150C  
                                                l4066 2486  
                                                l4074 2464  
                                                l4250 1444  
                                                l4242 141A  
                                                l4234 13CA  
                                                l4226 13A0  
                                                l4218 1388  
                                                l3540 08D0  
                                                l3532 088A  
                                                l3524 0840  
                                                l3516 07FA  
                                                l3508 07B8  
                                                l3452 0648  
                                                l3460 0678  
                                                l3444 0612  
                                                l3620 18CA  
                                                l3604 1862  
                                                l3428 2572  
                                                l4180 0F7A  
                                                l4172 0F28  
                                                l4156 0E56  
                                                l4148 0E0C  
                                                l4164 0EB0  
                                                l4076 256A  
                                                l4084 2498  
                                                l3436 22D6  
                                                l4092 1512  
                                                l4068 248E  
                                                l4260 149E  
                                                l4252 144A  
                                                l4244 142C  
                                                l4236 13E8  
                                                l4228 13A8  
                                                l3550 0950  
                                                l3542 08D4  
                                                l3534 0896  
                                                l3526 0850  
                                                l3518 080C  
                                                l3470 06AC  
                                                l3462 068A  
                                                l3454 065C  
                                                l3446 061E  
                                                l3622 18DA  
                                                l3614 1892  
                                                l3606 186E  
                                                l3630 0FBC  
                                                l4182 0F7E  
                                                l4174 0F38  
                                                l4166 0EC6  
                                                l4158 0E5E  
                                                l3710 20E8  
                                                l4510 1DBE  
                                                l3438 22DE  
                                                l4094 151C  
                                                l4270 14BA  
                                                l4262 14A2  
                                                l4254 145E  
                                                l4246 143C  
                                                l4238 13F4  
                                                l3800 0CF8  
                                                l3720 0A44  
                                                l3560 09BC  
                                                l3552 095C  
                                                l3544 08E6  
                                                l3536 08A8  
                                                l3528 086A  
                                                l3472 06C2  
                                                l3480 06F2  
                                                l3464 0692  
                                                l3456 066C  
                                                l3448 0630  
                                                l3616 18A0  
                                                l3608 1878  
                                                l3640 103E  
                                                l3632 1004  
                                                l4184 0F82  
                                                l4176 0F6A  
                                                l4168 0EDA  
                                                l4512 210E  
                                                l3704 20C4  
                                                l4504 1546  
                                                l4096 1526  
                                                l4088 14FC  
                                                l4264 14AA  
                                                l4256 1472  
                                                l4248 143E  
                                                l4272 14C2  
                                                l3802 0CFC  
                                                l3730 0AA2  
                                                l3722 0A5E  
                                                l3570 0A26  
                                                l3562 09D2  
                                                l3554 096E  
                                                l3546 0918  
                                                l3538 08BC  
                                                l3490 073E  
                                                l3482 0704  
                                                l3474 06D6  
                                                l3466 0698  
                                                l3458 0670  
                                                l3618 18B4  
                                                l3650 10D6  
                                                l3642 104C  
                                                l3634 1020  
                                                l3626 0F96  
                                                l3810 1C2A  
                                                l4178 0F72  
                                                l4186 0F8A  
                                                l4194 2552  
                                                l4514 2182  
                                                l3706 20C8  
                                                l3714 20F8  
                                                l4506 1634  
                                                l4274 14DC  
                                                l4266 14B0  
                                                l4258 149C  
                                                l3396 21AC  
                                                l3900 1FAA  
                                                l3740 0AE8  
                                                l3732 0AAC  
                                                l3724 0A76  
                                                l3572 0A2C  
                                                l3564 09F2  
                                                l3556 0998  
                                                l3484 0720  
                                                l3476 06E6  
                                                l3468 06AA  
                                                l3660 1126  
                                                l3652 10E4  
                                                l3644 1084  
                                                l3628 0FAA  
                                                l3820 1C58  
                                                l3812 1C32  
                                                l4516 0E88  
                                                l3708 20D8  
                                                l4196 221E  
                                                l4508 19C0  
                                                l4276 14E4  
                                                l4268 14B6  
                                                l4518 21F6  
                                                l3398 21B0  
                                                l3910 2024  
                                                l3902 1FC2  
                                                l3750 0B10  
                                                l3742 0AF2  
                                                l3734 0AB4  
                                                l3574 0A30  
                                                l3566 0A0E  
                                                l3558 099C  
                                                l3486 0730  
                                                l3494 0752  
                                                l3478 06EA  
                                                l3590 181E  
                                                l3582 17BE  
                                                l3662 114A  
                                                l3654 10F8  
                                                l3646 1088  
                                                l3638 1034  
                                                l3830 1CBE  
                                                l3822 1C5A  
                                                l3814 1C36  
                                                l3806 1C1E  
                                                l3912 2030  
                                                l3904 1FC4  
                                                l3760 0B28  
                                                l3752 0B14  
                                                l3744 0AFA  
                                                l3736 0AC0  
                                                l3728 0A7E  
                                                l3568 0A14  
                                                l3496 0768  
                                                l3488 0738  
                                                l3592 1820  
                                                l3584 17D8  
                                                l3664 115E  
                                                l3656 111E  
                                                l3648 1094  
                                                l3920 1E3C  
                                                l3840 1CE8  
                                                l3824 1C6A  
                                                l3832 1CCE  
                                                l3816 1C38  
                                                l3808 1C28  
                                                l3672 1D12  
                                                l3914 2034  
                                                l3906 1FD4  
                                                l3770 0B8E  
                                                l3762 0B40  
                                                l3754 0B16  
                                                l3746 0B06  
                                                l3738 0AC4  
                                                l3498 0768  
                                                l3594 1830  
                                                l3666 1170  
                                                l3658 1120  
                                                l3922 1E4A  
                                                l3930 1E98  
                                                l3842 1CEC  
                                                l3834 1CD4  
                                                l3826 1C88  
                                                l3818 1C40  
                                                l3850 1B36  
                                                l3690 213C  
                                                l3674 1D16  
                                                l3682 1DA8  
                                                l3908 1FF2  
                                                l3780 0C04  
                                                l3772 0BA0  
                                                l3764 0B44  
                                                l3756 0B1E  
                                                l3748 0B0A  
                                                l3932 241C  
                                                l3596 1834  
                                                l3588 17EE  
                                                l3668 1172  
                                                l3924 1E50  
                                                l3844 1CFE  
                                                l3836 1CD8  
                                                l3828 1CA2  
                                                l3860 1B4E  
                                                l3852 1B38  
                                                l3692 214C  
                                                l3676 1D44  
                                                l3940 18F6  
                                                l3790 0C84  
                                                l3782 0C2C  
                                                l3774 0BB6  
                                                l3766 0B50  
                                                l3758 0B22  
                                                l3934 241E  
                                                l3598 1846  
                                                l3926 1E76  
                                                l3918 1DEA  
                                                l3838 1CDA  
                                                l3862 1B66  
                                                l3870 1BB0  
                                                l3854 1B40  
                                                l3694 215C  
                                                l3678 1D78  
                                                l3950 1952  
                                                l3942 18FA  
                                                l3792 0CA4  
                                                l3784 0C3E  
                                                l3768 0B66  
                                                l3936 23F8  
                                                l3928 1E92  
                                                l3880 1BE8  
                                                l3872 1BCC  
                                                l3864 1B68  
                                                l3856 1B44  
                                                l3848 1B2C  
                                                l3688 2138  
                                                l3952 1968  
                                                l3944 1910  
                                                l3960 19AA  
                                                l3970 24B4  
                                                l3890 1F8C  
                                                l3786 0C54  
                                                l3778 0BEE  
                                                l3794 0CBE  
                                                l3938 23FA  
                                                l3882 1BF6  
                                                l3866 1B78  
                                                l3874 1BDC  
                                                l3858 1B46  
                                                l3698 216C  
                                                l3954 197E  
                                                l3946 1926  
                                                l3892 1F96  
                                                l3796 0CD4  
                                                l3884 1BFA  
                                                l3876 1BE2  
                                                l3868 1B96  
                                                l3980 23C0  
                                                l3972 23AC  
                                                l3956 1994  
                                                l3948 193C  
                                                l3966 24A6  
                                                l3894 1F98  
                                                l3798 0CEC  
                                                l3886 1C0C  
                                                l3878 1BE6  
                                                l3982 23C4  
                                                l3974 23B4  
                                                l3990 118C  
                                                l3896 1FA0  
                                                l3984 23C6  
                                                l3976 23B8  
                                                l3992 1204  
                                                l3898 1FA4  
                                                l3986 23C8  
                                                l3978 23BC  
                                                l3994 1208  
                                                l3988 23CA  
                                                l3996 120C  
                                                ?_isr 0001  
                                                l3998 1210  
                                                u3000 0B3E  
                                                u3001 0B38  
                                                u3010 0B64  
                                                u3011 0B5E  
                                                u3100 0CBE  
                                                u3020 0B8C  
                                                u3101 0CB8  
                                                u3021 0B86  
                                                u3110 0CD2  
                                                u3030 0BB4  
                                                u3111 0CCC  
                                                u3031 0BAE  
                                                u3120 0CE6  
                                                u3040 0BE4  
                                                u3200 1B92  
                                                _LATD 000F8C  
                                                u3121 0CE0  
                                                u3041 0BDE  
                                                u3201 1B8C  
                                                u3050 0C02  
                                                u3130 1C56  
                                                u3210 1BB0  
                                                u3051 0BFC  
                                                u3131 1C50  
                                                u3211 1BAA  
                                                u3060 0C2A  
                                                u2500 062E  
                                                u3300 1EB2  
                                                u3140 1C84  
                                                u3220 1BCA  
                                                u3061 0C24  
                                                u2501 0628  
                                                u3301 1EAC  
                                                u3141 1C7E  
                                                u3221 1BC4  
                                                u3070 0C52  
                                                u3310 2438  
                                                u2510 0646  
                                                u3150 1CA2  
                                                u3230 1BDC  
                                                u3071 0C4C  
                                                u3311 2432  
                                                u2511 0640  
                                                u3151 1C9C  
                                                u3231 1BD6  
                                                u3080 0C7A  
                                                u3320 2414  
                                                u2600 083C  
                                                u2520 065A  
                                                u3160 1CBC  
                                                u3240 1C0A  
                                                u3400 1304  
                                                u3081 0C74  
                                                u3321 240E  
                                                u2601 0836  
                                                u2521 0654  
                                                u3161 1CB6  
                                                u3241 1C04  
                                                u3401 12FE  
                                                u3250 1FC0  
                                                u3090 0C9E  
                                                u2610 0868  
                                                u2530 06A8  
                                                u3170 1CCE  
                                                u3410 1326  
                                                u3330 123A  
                                                u3251 1FBA  
                                                u3091 0C98  
                                                u2611 0862  
                                                u2531 06A2  
                                                u3171 1CC8  
                                                u3411 1320  
                                                u3331 1234  
                                                u3260 1FEE  
                                                u2700 09BA  
                                                u2620 0882  
                                                u2540 06C0  
                                                u3180 1CFC  
                                                u3420 133A  
                                                u3340 1260  
                                                u3500 2276  
                                                u3261 1FE8  
                                                u2701 09B4  
                                                u2621 087C  
                                                u2541 06BA  
                                                u3181 1CF6  
                                                u3421 1334  
                                                u3341 125A  
                                                u3501 2270  
                                                u3270 200C  
                                                u2710 09F0  
                                                u2630 08A6  
                                                u2550 06D4  
                                                u3190 1B64  
                                                u3430 134E  
                                                u3350 1274  
                                                u3510 13C8  
                                                u2455 21BA  
                                                u3271 2006  
                                                u2711 09EA  
                                                u2631 08A0  
                                                u2551 06CE  
                                                u3191 1B5E  
                                                u3431 1348  
                                                u3351 126E  
                                                u3511 13C2  
                                                u2456 21BC  
                                                u3280 201E  
                                                u2720 0A24  
                                                u2640 08CE  
                                                u2560 071E  
                                                u2800 0FA8  
                                                u3440 1362  
                                                u3360 1294  
                                                u2480 22FE  
                                                u3520 140C  
                                                u2465 21CA  
                                                u3281 2018  
                                                u2721 0A1E  
                                                u2641 08C8  
                                                u2561 0718  
                                                u2801 0FA2  
                                                u3441 135C  
                                                u3361 128E  
                                                u2481 22F8  
                                                u3521 1406  
                                                u2466 21CC  
                                                u2650 08E4  
                                                u2570 0766  
                                                u2730 17D6  
                                                u2810 0FBA  
                                                u3290 1E90  
                                                u3450 2382  
                                                u3370 12A8  
                                                u2490 231C  
                                                u3530 14DA  
                                                u2475 21DA  
                                                u2651 08DE  
                                                u2571 0760  
                                                u2731 17D0  
                                                u2811 0FB4  
                                                u3291 1E8A  
                                                u3451 237C  
                                                u3371 12A2  
                                                u2491 2316  
                                                u3531 14D4  
                                                u2476 21DC  
                                                u2660 0916  
                                                u2580 07E4  
                                                u2740 1812  
                                                u2820 101E  
                                                u3460 2398  
                                                u3380 12C8  
                                                u2661 0910  
                                                u2581 07DE  
                                                u2821 1018  
                                                u3461 2392  
                                                u3381 12C2  
                                                u2670 0934  
                                                u2590 080A  
                                                u2750 1844  
                                                u2830 107E  
                                                u3390 12DC  
                                                u3470 157C  
                                                u2671 092E  
                                                u2591 0804  
                                                u2751 183E  
                                                u2831 1078  
                                                u3391 12D6  
                                                u3471 1576  
                                                u2680 094E  
                                                u2760 185C  
                                                u2840 10D0  
                                                u3480 0EC4  
                                                u2681 0948  
                                                u2761 1856  
                                                u2745 1806  
                                                u2841 10CA  
                                                u3481 0EBE  
                                                u2905 2146  
                                                u2690 096C  
                                                u2770 188C  
                                                u2850 10F6  
                                                u3490 0F68  
                                                u2906 2148  
                                                u2691 0966  
                                                u2771 1886  
                                                u2851 10F0  
                                                u3491 0F62  
                                                u2915 2156  
                                                u2780 18B4  
                                                u2860 110A  
                                                u2916 2158  
                                                u2781 18AE  
                                                u2861 1104  
                                                u2925 2166  
                                                u2790 18C8  
                                                u2870 111C  
                                                u2926 2168  
                                                u2791 18C2  
                                                u2871 1116  
                                                u2935 20D2  
                                                u2960 0A5C  
                                                u2880 115C  
                                                u2936 20D4  
                                                u2961 0A56  
                                                u2881 1156  
                                                u2945 20E2  
                                                u2970 0A76  
                                                u2890 116E  
                                                u2946 20E4  
                                         main@newData 01D4  
                                                u2971 0A70  
                                                u2891 1168  
                                                u2955 20F2  
                                                u2980 0AA0  
                                                u2956 20F4  
                                                u2981 0A9A  
                                                u2990 0AE6  
                                                u2991 0AE0  
                                                i2l71 257C  
                                                i2l65 24CA  
                                                _TMR0 000FD6  
                                                _TMR2 000FCC  
                                 __end_ofi2_storeData 17BC  
                                                _main 137E  
                                                _maxX 006B  
                                                _maxY 0069  
                                __end_ofi2_printError 1B2A  
                                                fsr2h 000FDA  
                                                indf2 000FDF  
                                                fsr1l 000FE1  
                                                fsr2l 000FD9  
                                                btemp 006E  
                                                prodh 000FF4  
                                                prodl 000FF3  
                                                start 016A  
                                     ___fldiv@new_exp 0031  
                                        ___param_bank 000000  
                                     ??_whatsTM0Limit 0001  
                                               ??_isr 000B  
                                        ?_executeData 0001  
                                     executeData@data 00FD  
                                       ___fltol@sign1 0041  
                                               ?_main 0001  
                                     __end_of___fldiv 0A42  
                                     __end_of___fltol 18F2  
                                               i2l414 254C  
                                               i2l417 2542  
                                               i2l372 2584  
                                               i2l375 2538  
                                               i2l527 1B24  
                                               i2l472 0152  
                                               i2l378 24D8  
                                               i2l571 17B6  
                                               i2l582 233A  
                                               i2l568 1740  
                                               i2l586 236C  
                                rotateObj@rotSequence 0080  
                                               _SPBRG 000FAF  
                                               _TRISA 000F92  
                                               _TRISB 000F93  
                                               _TRISC 000F94  
                                               _TRISD 000F95  
                                               _TXREG 000FAD  
                                     __end_of_getData 24B2  
                                     i2storeData@data 000A  
                                     __end_of_initADC 23F6  
                                        ?_newSequence 0001  
                                     __end_of_liftArm 203A  
                                     __end_of_readSeq 2560  
                                        stepMade@temp 0014  
                                     __end_of_setStep 1DE4  
                                               tablat 000FF5  
                                      i2uartTx@length 0003  
                                     __end_of_stopADC 2578  
                                               ttemp5 006F  
                                               ttemp6 0072  
                                               ttemp7 0076  
                                               status 000FD8  
                                               wtemp8 006F  
                                    __end_ofi2_uartTx 2370  
                                       ?_increaseStep 0001  
                                     __initialization 203A  
                              __size_of_initPinMotors 0026  
                                        __end_of_main 14F8  
                            resetPosition@keepMovingX 0016  
                            resetPosition@keepMovingY 0017  
                            resetPosition@keepMovingZ 0018  
                                              ??_main 01D1  
                                       __activetblptr 000002  
                                         i2_storeData 165A  
                                __size_of_enableMotor 0074  
                                         isr@tm0Count 0063  
                                        ?_setThermRel 0001  
                                              _ADRESH 000FC4  
                                              _ADRESL 000FC3  
                                        ?_moveToPoint 0016  
                                              i2l2120 2534  
                                              i2l2124 2548  
                                              i2l2118 2582  
                                              i2l2126 253E  
                                              i2l3200 1692  
                                              i2l3210 1762  
                                              i2l3202 16C8  
                                              i2l3212 176A  
                                              i2l3204 16E0  
                                              i2l3300 001C  
                                              i2l3214 1774  
                                              i2l3206 16E8  
                                              i2l3310 0050  
                                              i2l3302 002E  
                                              i2l3208 173A  
                                              i2l3320 0072  
                                              i2l3312 0054  
                                              i2l3304 0030  
                                              i2l3218 1780  
                                              i2l3330 00BC  
                                              i2l3322 0090  
                                              i2l3306 0032  
                                              i2l3314 0058  
                                              i2l2612 2324  
                                              i2l3340 0108  
                                              i2l3332 00C0  
                                              i2l3324 0092  
                                              i2l3316 006C  
                                              i2l3308 004E  
                                              i2l2614 232C  
                                              i2l3190 166E  
                                              i2l3350 014C  
                                              i2l3342 0114  
                                              i2l3326 00A6  
                                              i2l3318 006E  
                                              i2l3334 00C6  
                                              i2l2616 234E  
                                              i2l3192 1674  
                                              i2l3344 012E  
                                              i2l3336 00DA  
                                              i2l3328 00B8  
                                              i2l3186 24D0  
                                              i2l2618 2354  
                                              i2l3194 167E  
                                              i2l3338 00E2  
                                              i2l3346 0132  
                                              i2l3196 1688  
                                              i2l3188 165E  
                                              i2l3348 0146  
                                              i2l1870 24C2  
                                              i2l2920 1A16  
                                              i2l4520 16A8  
                                              i2l1874 257A  
                                              i2l2930 1A84  
                                              i2l2922 1A2C  
                                              i2l4522 1796  
                                              i2l4524 1ADC  
                                              i2l2932 1A9A  
                                              i2l2924 1A42  
                                              i2l2934 1AB0  
                                              i2l2926 1A58  
                                              i2l2918 1A12  
                                              i2l2928 1A6E  
                                              i2l2938 1AC6  
                                              _RCREG1 000FAE  
                                        ?_setTouchRel 0001  
                                       setDecay@decay 0015  
                                    __end_of___xxtofl 118A  
                                       setDecay@motor 0012  
                                    __end_of_clearTM0 24C0  
                                    _errString_PointZ 0100  
                                      ??_increaseStep 0001  
                                           ??___fldiv 0028  
                                           ??___fltol 003D  
                                    __end_of_tim0Init 2496  
                                    __end_of_tim2Init 2470  
                                              clear_0 20A0  
                                              clear_1 20AC  
                                           ??_getData 0014  
                                              _uartTx 22D4  
                                    __end_of_setDecay 2134  
                                           ??_initADC 0012  
                                           ??_liftArm 0016  
                                           ??_readSeq 0012  
                                        __pdataCOMRAM 0069  
                               __end_of_resetPosition 137E  
                                        __mediumconst 0000  
                                           ??_setStep 0013  
                                              tblptrh 000FF7  
                                              tblptrl 000FF6  
                                              tblptru 000FF8  
                                        ?_returnTherm 0012  
                                    __end_of_startADC 251E  
                                    __end_of_stepMade 2484  
                                       _initPinMotors 23AA  
                                        ?_returnTouch 0012  
                                           ??_stopADC 0012  
                               __size_ofi2_printError 011C  
                                    __end_of_writeTM0 24CE  
                           __size_of_resetNewSequence 000A  
                                        ___xxtofl@arg 001C  
                                        ___xxtofl@exp 001B  
                                        ___xxtofl@val 0012  
                                          __accesstop 0080  
                             __end_of__initialization 20B2  
                                        _dataSequence 00D8  
                                       ___rparam_used 000001  
                                          ___fltol@f1 0039  
                                        ?_stepCounter 0012  
                                         i2uartTx@ptr 0001  
                                      __pcstackCOMRAM 0001  
                                        __newSequence 005F  
                                        __pidataBANK0 227C  
                                        __pidataBANK1 1EB8  
                                     isr@single_cycle 0051  
                                __size_of_executeData 028E  
                                       ?_setDirection 0012  
                                        i2_printError 1A0E  
                                        ?_touchObject 0001  
                                      _errString_ZEND 015C  
                                      _errString_Feed 00A4  
                                      ?_initPinMotors 0001  
                                           ?i2_uartTx 0001  
                                          __pbssBANK0 00D8  
                                __size_of_newSequence 0008  
                                          _feeder1Pos 060D  
                                          _feeder2Pos 060B  
                                          _feeder3Pos 0609  
                             __size_of_getNewSequence 000E  
                                          _fatalError 2568  
                                  __size_of_reduceSeq 0008  
                                  __size_of_retPeriod 000E  
                                      _touch_pressure 0607  
                                  __size_of_shiftData 0060  
                                  __size_of_resetStep 000A  
                                             _ADC_res 0053  
                                             ?_uartTx 0012  
                                      ??_setDirection 0013  
                                           ?___xxtofl 0012  
                                __end_of_increaseStep 2588  
                                           ?_clearTM0 0001  
                                          ??i2_uartTx 0004  
                                  __size_of_rotateObj 00D4  
                                   _errString_Command 00C1  
                                  __size_of_usartInit 001E  
                              __size_of_interruptInit 003A  
                                __size_of_setThermRel 000A  
                                  __size_of_storeData 0162  
                                           ?_tim0Init 0001  
                                           ?_tim2Init 0012  
                                __size_of_moveToPoint 02C2  
                                storeData@receivedMex 0045  
                                     _newSequenceData 00EC  
                                           ?_setDecay 0012  
                                __size_of_setTouchRel 000A  
                                         setStep@step 0015  
                                             __Hparam 0000  
                                             __Lparam 0000  
                              __end_of_touch_pressure 0609  
                                             ___fldiv 0610  
                                           ?_startADC 0001  
                                           ?_stepMade 0012  
                                             ___fltol 17BC  
                                        __psmallconst 0600  
                                             __pcinit 203A  
                               __end_of_whatsTM0Limit 2580  
                                             _getData 24A4  
                                             __ramtop 0600  
                                           ?_writeTM0 0001  
                                          _pickObject 241A  
                                             __ptext0 137E  
                                             __ptext1 243E  
                                             __ptext2 245C  
                                             __ptext3 2484  
                                             __ptext4 14F8  
                                             __ptext5 18F2  
                                             __ptext6 22D4  
                                             __ptext7 221C  
                                             __ptext8 118A  
                                             __ptext9 1D0E  
                                     __size_of_uartTx 004E  
                                           _T0CONbits 000FD5  
                                             _initADC 23D0  
                                     ??_initPinMotors 0012  
                                             _liftArm 1F8A  
                                           _T2CONbits 000FCA  
                                             _readSeq 2558  
                                        __size_of_isr 0162  
                                          ??___xxtofl 0016  
                                        ?i2_storeData 0001  
                                          ??_clearTM0 0012  
                                             _setStep 1D0E  
                                             _pwmStep 0067  
                                             _stopADC 2570  
                                   __end_of_reduceSeq 2558  
                                   __end_of_retPeriod 24DC  
                                          _releaseObj 23F6  
                                __size_of_returnTherm 000C  
                                end_of_initialization 20B2  
                                __size_of_returnTouch 000C  
                                    _resetNewSequence 2500  
                                    rotateObj@totStep 00F8  
                                   __end_of_shiftData 227C  
                                             isr@temp 0011  
                                   __end_of_resetStep 2532  
                                          ??_tim0Init 0012  
                                       __Lmediumconst 0000  
                                          ??_tim2Init 0014  
                                    storeData@command 005D  
                                    storeData@counter 005E  
                                          ??_setDecay 0013  
                                    enableMotor@motor 0012  
                                          _resetTherm 250A  
                                          _resetTouch 251E  
                                             uartTx@i 0015  
                                         ?_fatalError 0001  
                                           _RCSTAbits 000FAB  
                                             postdec1 000FE5  
                                   __end_of_rotateObj 1EB8  
                                             postinc0 000FEE  
                                             postinc1 000FE6  
                                             postinc2 000FDE  
                                          ??_startADC 0012  
                                          ??_stepMade 0014  
                                __size_of_stepCounter 000C  
                                       _interruptInit 2370  
                                   __end_of_usartInit 245C  
                                   __end_of_storeData 165A  
                          __end_ofrotateObj@stepAngle 0605  
                                          ??_writeTM0 0001  
                                           _PORTDbits 000F83  
                                          _printError 18F2  
                                           _PORTEbits 000F84  
                                       ??_enableMotor 0013  
                                 i2printError@errCode 0007  
                                          _toggleStep 2532  
                                       ___xxtofl@sign 001A  
                                           _TRISCbits 000F94  
                                           _TRISDbits 000F95  
                                           _TRISEbits 000F96  
                                         ___fldiv@grs 0033  
                                         ___fldiv@rem 002C  
                                __size_of_touchObject 00F2  
                                          _stepToggle 0066  
                                          _touchTherm 1B2A  
                                __end_of_setDirection 221C  
                                           _TXSTAbits 000FAC  
                                      _getNewSequence 2496  
                                      ?_interruptInit 0001  
                                       __pidataCOMRAM 2588  
                               __size_of_increaseStep 0008  
                                         ?_pickObject 0001  
                                         __fatalError 0060  
                                      __end_of_uartTx 2322  
                                       moveToPoint@x1 0016  
                                       moveToPoint@x2 001A  
                                       moveToPoint@y1 0018  
                                       moveToPoint@y2 001C  
                                 start_initialization 203A  
                                           i2uartTx@i 0004  
                                         __end_of_isr 016A  
                                 __size_of_fatalError 0008  
                                 __end_of_enableMotor 21A8  
                                         ?_releaseObj 0001  
                                   __size_ofi2_uartTx 004E  
                              __end_of_getNewSequence 24A4  
                                     _errString_Fatal 01AB  
                                     _errString_Bound 0084  
                                         ?_resetTherm 0001  
                                     _errString_Reset 0184  
                                         ?_resetTouch 0001  
                                     _errString_Point 0134  
                                        _increaseStep 2580  
                              __size_of_resetPosition 01F4  
                                       ??_executeData 0043  
                                         __pdataBANK0 0080  
                                         __pdataBANK1 0100  
                                         _dataCounter 0061  
                                            ??_uartTx 0015  
                              moveToPoint@keepMovingX 0020  
                              moveToPoint@keepMovingY 0021  
                                         ?_printError 0001  
                                           ___fldiv@a 0024  
                                           ___fldiv@b 0020  
                                      _therm_pressure 0605  
                                         ?_toggleStep 0001  
                                         __pbssCOMRAM 0045  
                                       __pcstackBANK0 00F4  
                                       __pcstackBANK1 01D1  
                                       ??_newSequence 0012  
                                   __size_of___xxtofl 01F8  
                                __size_ofi2_storeData 0162  
                                   __size_of_clearTM0 000E  
                                     ?_getNewSequence 0012  
                                         ?_touchTherm 0001  
                                 __size_of_pickObject 0024  
                                  executeData@errCode 00FC  
                                   __size_of_tim0Init 0012  
                                   __size_of_tim2Init 0014  
                                     ??_interruptInit 0012  
                                   __size_of_setDecay 0074  
                                           __pintcode 0008  
                                            ?___fldiv 0020  
                                            ?___fltol 0039  
                            __end_of_resetNewSequence 250A  
                                 __size_of_releaseObj 0024  
                                       storeData@data 001B  
                                            ?_getData 0012  
                                   __size_of_startADC 000A  
                                   __size_of_stepMade 0014  
                              __end_of_therm_pressure 0607  
                                            ?_initADC 0001  
                                         __smallconst 0600  
                                            ?_liftArm 0001  
                                         _enableMotor 2134  
                                            ?_readSeq 0001  
                                   __size_of_writeTM0 000E  
                                 __end_of_executeData 0F92  
                                          shiftData@i 0014  
                                            ?_setStep 0012  
                                 __size_of_resetTherm 000A  
                                           _newFeeder 0057  
                                       _resetPosition 118A  
                                 __size_of_resetTouch 000A  
                                       ??_setThermRel 0001  
                                            ?_stopADC 0001  
                               __size_of_setDirection 0074  
                                       ??_moveToPoint 001E  
                                       ??_setTouchRel 0001  
                                 __end_of_newSequence 2568  
                                           _reduceSeq 2550  
                                            _LATAbits 000F89  
                                            _LATBbits 000F8A  
                                           _retPeriod 24CE  
                                            _LATCbits 000F8B  
                                            _LATDbits 000F8C  
                                 __size_of_printError 011C  
                                            _IPR1bits 000F9F  
                                            _PIE1bits 000F9D  
                                           _shiftData 221C  
                                            i2u231_40 16DE  
                                            i2u231_41 16D8  
                                            i2u240_40 00B6  
                                            i2u240_41 00B0  
                                            i2u241_40 00D8  
                                            i2u241_41 00D2  
                                            i2u242_40 0106  
                                            i2u242_41 0100  
                                            i2u243_40 012C  
                                            i2u235_40 002C  
                                            i2u243_41 0126  
                                            i2u235_41 0026  
                                            i2u244_40 0144  
                                            i2u236_40 004C  
                                            i2u244_41 013E  
                                            i2u236_41 0046  
                                           _resetStep 2528  
                                            i2u237_40 006A  
                                            i2u237_41 0064  
                                            i2u238_40 008E  
                                            i2u238_41 0088  
                                            i2u239_40 00A4  
                                            i2u239_41 009E  
                                            i2u168_40 234C  
                                            i2u168_41 2346  
                                            i2u169_40 236A  
                                            i2u169_41 2364  
                                            _PIR1bits 000F9E  
                                 __size_of_toggleStep 000A  
                                        ??_fatalError 0012  
                                           _posVector 004E  
                                            _RCONbits 000FD0  
                                           _therm_rel 0064  
                                           _pwmPeriod 0055  
                                   setDirection@motor 0012  
                                           _rotateObj 1DE4  
                                          _ADCON0bits 000FC2  
                                          _ADCON1bits 000FC1  
                                 __size_of_touchTherm 00F2  
                                        _setDirection 21A8  
                                           _usartInit 243E  
                                           _touch_rel 0065  
                                  __end_of_feeder1Pos 060F  
                                  __end_of_feeder2Pos 060D  
                                  __end_of_feeder3Pos 060B  
                                           _storeData 14F8  
                                      ?_resetPosition 0001  
                               __end_of_initPinMotors 23D0  
                                       ??_returnTherm 0014  
                                       ??_returnTouch 0014  
                                            i2_uartTx 2322  
                                           copy_data0 204E  
                                           copy_data1 206E  
                                           copy_data2 208E  
                                  __end_of_fatalError 2570  
                                  rotateObj@stepAngle 0601  
                                          ?_reduceSeq 0001  
                                          ?_retPeriod 0001  
                                        setStep@motor 0012  
                                          rotateObj@i 00FA  
                              __size_of_whatsTM0Limit 0008  
                                 __end_of_setThermRel 2550  
                                 __end_of_moveToPoint 0D04  
                                   printError@errCode 0018  
                                          ?_shiftData 0001  
                                       ??_stepCounter 0014  
                                            __Hrparam 0000  
                                          ?_resetStep 0001  
                                 __end_of_setTouchRel 2546  
                                            __Lrparam 0000  
                                    __size_of___fldiv 0432  
                                    __size_of___fltol 0136  
                                         _executeData 0D04  
                                        ??_pickObject 0015  
                                          ?_rotateObj 0001  
                            moveToPoint@MOT1Direction 0022  
                                       ?i2_printError 0001  
                                    __size_of_getData 000E  
                            moveToPoint@MOT2Direction 0023  
                                       ??_touchObject 0016  
                                          ?_usartInit 0001  
                                    __size_of_initADC 0026  
                                            ___xxtofl 0F92  
                                    __size_of_liftArm 00B0  
                                          ?_storeData 0001  
                                            _clearTM0 24B2  
                                    __size_of_readSeq 0008  
                                  storeData@mexLength 006D  
                                            _tm0Error 005B  
                                            _tm0Limit 0068  
                                    __size_of_setStep 00D6  
                                         _newSequence 2560  
                                            __ptext10 20C0  
                                            __ptext11 2134  
                                            __ptext20 2568  
                                            __ptext12 2500  
                                            __ptext21 0D04  
                                            __ptext13 2550  
                                            __ptext30 1DE4  
                                            __ptext22 1B2A  
                                            __ptext14 2558  
                                            __ptext31 0F92  
                                            __ptext23 24DC  
                                            __ptext15 2560  
                                            __ptext40 21A8  
                                            __ptext32 17BC  
                                            __ptext24 250A  
                                            __ptext16 2370  
                                            __ptext41 2528  
                                            __ptext33 0610  
                                            __ptext25 1C1C  
                                            __ptext17 23AA  
                                            __ptext50 2532  
                                            __ptext42 24A4  
                                            __ptext34 23F6  
                                            __ptext26 2570  
                                            __ptext18 23D0  
                                            __ptext51 253C  
                                            __ptext43 24B2  
                                            __ptext35 241A  
                                            __ptext27 2514  
                                            __ptext19 2496  
                                            __ptext52 2546  
                                            __ptext36 0A42  
                                            __ptext28 24E8  
                                            __ptext53 24CE  
                                            __ptext45 165A  
                                            __ptext37 24F4  
                                            __ptext29 251E  
                                            __ptext54 2580  
                                            __ptext46 1A0E  
                                            __ptext38 1F8A  
                                            __ptext47 2322  
                                            __ptext39 2470  
                                            __ptext48 24C0  
                                            __ptext49 2578  
                                        ??_releaseObj 0015  
                                    __size_of_stopADC 0008  
                                 __end_of_returnTherm 24E8  
                                 __end_of_returnTouch 24F4  
                                            _tim0Init 2484  
                                            _tim2Init 245C  
                                       __size_of_main 017A  
                                            _setDecay 20C0  
                                  __end_of_pickObject 243E  
                                        ??_resetTherm 0012  
                                        ??_resetTouch 0012  
                                           uartTx@ptr 0012  
                                            _rotAngle 0059  
                                     isr@completeStep 0062  
                                            int$flags 006E  
                                            _startADC 2514  
                                            _stepMade 2470  
                                 __end_of_stepCounter 2500  
                                   rotateObj@rotAngle 00F7  
                                      ??i2_printError 0005  
                                  __end_of_releaseObj 241A  
                                            _writeTM0 24C0  
                                        ??_printError 0016  
                                       _whatsTM0Limit 2578  
                                     ??_resetPosition 0016  
                                  tim2Init@_pwmPeriod 0012  
                                          _INTCONbits 000FF2  
                                        ??_toggleStep 0001  
                                    ??_getNewSequence 0014  
                                  __end_of_resetTherm 2514  
                                  __end_of_resetTouch 2528  
                                         _setThermRel 2546  
                                        uartTx@length 0014  
                                         _moveToPoint 0A42  
                                 __end_of_touchObject 1D0E  
                                            intlevel2 258E  
                                   enableMotor@enable 0015  
                                        ??_touchTherm 0016  
                                         _setTouchRel 253C  
                                         ??_reduceSeq 0012  
                                         ??_retPeriod 0003  
                                          _RCSTA1bits 000FAB  
                                  __end_of_printError 1A0E  
                               setDirection@direction 0015  
                                         ??_shiftData 0012  
                                         ??_resetStep 0012  
                                  __end_of_toggleStep 253C  
                                   ?_resetNewSequence 0001  
                                      ?_whatsTM0Limit 0001  
                                         ??_rotateObj 00F4  
                                  ??_resetNewSequence 0012  
                                  __end_of_touchTherm 1C1C  
                                        ?_enableMotor 0012  
                                         ??_usartInit 0012  
                                       ??i2_storeData 0008  
                                         ??_storeData 0019  
                                         _returnTherm 24DC  
                                         _returnTouch 24E8  
                                         _stepCounter 24F4  
