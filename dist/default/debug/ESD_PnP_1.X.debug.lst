

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Tue Apr 27 14:27:36 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    72                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    73                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    74                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    75  0000                     
    76                           ; Version 2.20
    77                           ; Generated 12/02/2020 GMT
    78                           ; 
    79                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    80                           ; All rights reserved.
    81                           ; 
    82                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    83                           ; 
    84                           ; Redistribution and use in source and binary forms, with or without modification, are
    85                           ; permitted provided that the following conditions are met:
    86                           ; 
    87                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    88                           ;        conditions and the following disclaimer.
    89                           ; 
    90                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    91                           ;        of conditions and the following disclaimer in the documentation and/or other
    92                           ;        materials provided with the distribution.
    93                           ; 
    94                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    95                           ;        software without specific prior written permission.
    96                           ; 
    97                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    98                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    99                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   100                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   101                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   102                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   103                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   104                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   105                           ; 
   106                           ; 
   107                           ; Code-generator required, PIC18F452 Definitions
   108                           ; 
   109                           ; SFR Addresses
   110  0000                     
   111                           	psect	idataCOMRAM
   112  00247C                     __pidataCOMRAM:
   113                           	callstack 0
   114                           
   115                           ;initializer for _motCounter
   116  00247C  0000               	dw	0
   117  00247E  0001               	dw	1
   118  002480  0000               	dw	0
   119  002482  0001               	dw	1
   120  002484  0000               	dw	0
   121  002486  0001               	dw	1
   122                           
   123                           ;initializer for _maxX
   124  002488  00C9               	dw	201
   125                           
   126                           ;initializer for storeData@mexLength
   127  00248A  05                 	db	5
   128                           
   129                           	psect	idataBANK0
   130  0022EA                     __pidataBANK0:
   131                           	callstack 0
   132                           
   133                           ;initializer for rotateObj@rotSequence
   134  0022EA  09                 	db	9
   135  0022EB  03                 	db	3
   136  0022EC  06                 	db	6
   137  0022ED  0C                 	db	12
   138                           
   139                           ;initializer for _stepMot3
   140  0022EE  09                 	db	9
   141  0022EF  03                 	db	3
   142  0022F0  06                 	db	6
   143  0022F1  0C                 	db	12
   144                           
   145                           ;initializer for _stepMot2
   146  0022F2  11                 	db	17
   147  0022F3  05                 	db	5
   148  0022F4  0C                 	db	12
   149  0022F5  18                 	db	24
   150                           
   151                           ;initializer for _stepMot1
   152  0022F6  22                 	db	34
   153  0022F7  06                 	db	6
   154  0022F8  0C                 	db	12
   155  0022F9  28                 	db	40
   156                           
   157                           ;initializer for _maxY
   158  0022FA  00C9               	dw	201
   159                           
   160                           ;initializer for _errString_Feed
   161  0022FC  45                 	db	69
   162  0022FD  72                 	db	114
   163  0022FE  72                 	db	114
   164  0022FF  6F                 	db	111
   165  002300  72                 	db	114
   166  002301  2C                 	db	44
   167  002302  20                 	db	32
   168  002303  66                 	db	102
   169  002304  65                 	db	101
   170  002305  65                 	db	101
   171  002306  64                 	db	100
   172  002307  20                 	db	32
   173  002308  6C                 	db	108
   174  002309  69                 	db	105
   175  00230A  6E                 	db	110
   176  00230B  65                 	db	101
   177  00230C  20                 	db	32
   178  00230D  6E                 	db	110
   179  00230E  6F                 	db	111
   180  00230F  74                 	db	116
   181  002310  20                 	db	32
   182  002311  64                 	db	100
   183  002312  65                 	db	101
   184  002313  66                 	db	102
   185  002314  69                 	db	105
   186  002315  6E                 	db	110
   187  002316  65                 	db	101
   188  002317  64                 	db	100
   189  002318  0A                 	db	10
   190  002319  00                 	db	0
   191                           
   192                           ;initializer for _errString_Command
   193  00231A  43                 	db	67
   194  00231B  6F                 	db	111
   195  00231C  6D                 	db	109
   196  00231D  6D                 	db	109
   197  00231E  61                 	db	97
   198  00231F  6E                 	db	110
   199  002320  64                 	db	100
   200  002321  20                 	db	32
   201  002322  6E                 	db	110
   202  002323  6F                 	db	111
   203  002324  74                 	db	116
   204  002325  20                 	db	32
   205  002326  72                 	db	114
   206  002327  65                 	db	101
   207  002328  63                 	db	99
   208  002329  6F                 	db	111
   209  00232A  67                 	db	103
   210  00232B  6E                 	db	110
   211  00232C  69                 	db	105
   212  00232D  7A                 	db	122
   213  00232E  65                 	db	101
   214  00232F  64                 	db	100
   215  002330  0A                 	db	10
   216  002331  00                 	db	0
   217                           
   218                           	psect	idataBANK1
   219  001ED4                     __pidataBANK1:
   220                           	callstack 0
   221                           
   222                           ;initializer for _errString_PointZ
   223  001ED4  45                 	db	69
   224  001ED5  72                 	db	114
   225  001ED6  72                 	db	114
   226  001ED7  6F                 	db	111
   227  001ED8  72                 	db	114
   228  001ED9  2C                 	db	44
   229  001EDA  20                 	db	32
   230  001EDB  74                 	db	116
   231  001EDC  69                 	db	105
   232  001EDD  6D                 	db	109
   233  001EDE  65                 	db	101
   234  001EDF  20                 	db	32
   235  001EE0  65                 	db	101
   236  001EE1  78                 	db	120
   237  001EE2  63                 	db	99
   238  001EE3  65                 	db	101
   239  001EE4  65                 	db	101
   240  001EE5  64                 	db	100
   241  001EE6  65                 	db	101
   242  001EE7  64                 	db	100
   243  001EE8  20                 	db	32
   244  001EE9  74                 	db	116
   245  001EEA  6F                 	db	111
   246  001EEB  20                 	db	32
   247  001EEC  72                 	db	114
   248  001EED  65                 	db	101
   249  001EEE  61                 	db	97
   250  001EEF  63                 	db	99
   251  001EF0  68                 	db	104
   252  001EF1  20                 	db	32
   253  001EF2  74                 	db	116
   254  001EF3  68                 	db	104
   255  001EF4  65                 	db	101
   256  001EF5  20                 	db	32
   257  001EF6  65                 	db	101
   258  001EF7  6E                 	db	110
   259  001EF8  64                 	db	100
   260  001EF9  20                 	db	32
   261  001EFA  6F                 	db	111
   262  001EFB  66                 	db	102
   263  001EFC  20                 	db	32
   264  001EFD  74                 	db	116
   265  001EFE  68                 	db	104
   266  001EFF  65                 	db	101
   267  001F00  20                 	db	32
   268  001F01  5A                 	db	90
   269  001F02  20                 	db	32
   270  001F03  41                 	db	65
   271  001F04  78                 	db	120
   272  001F05  69                 	db	105
   273  001F06  73                 	db	115
   274  001F07  0A                 	db	10
   275  001F08  00                 	db	0
   276                           
   277                           ;initializer for _errString_Point
   278  001F09  45                 	db	69
   279  001F0A  72                 	db	114
   280  001F0B  72                 	db	114
   281  001F0C  6F                 	db	111
   282  001F0D  72                 	db	114
   283  001F0E  2C                 	db	44
   284  001F0F  20                 	db	32
   285  001F10  74                 	db	116
   286  001F11  69                 	db	105
   287  001F12  6D                 	db	109
   288  001F13  65                 	db	101
   289  001F14  20                 	db	32
   290  001F15  65                 	db	101
   291  001F16  78                 	db	120
   292  001F17  63                 	db	99
   293  001F18  65                 	db	101
   294  001F19  65                 	db	101
   295  001F1A  64                 	db	100
   296  001F1B  65                 	db	101
   297  001F1C  64                 	db	100
   298  001F1D  20                 	db	32
   299  001F1E  74                 	db	116
   300  001F1F  6F                 	db	111
   301  001F20  20                 	db	32
   302  001F21  72                 	db	114
   303  001F22  65                 	db	101
   304  001F23  61                 	db	97
   305  001F24  63                 	db	99
   306  001F25  68                 	db	104
   307  001F26  20                 	db	32
   308  001F27  74                 	db	116
   309  001F28  68                 	db	104
   310  001F29  65                 	db	101
   311  001F2A  20                 	db	32
   312  001F2B  70                 	db	112
   313  001F2C  6F                 	db	111
   314  001F2D  69                 	db	105
   315  001F2E  6E                 	db	110
   316  001F2F  74                 	db	116
   317  001F30  0A                 	db	10
   318  001F31  00                 	db	0
   319                           
   320                           ;initializer for _errString_ZEND
   321  001F32  45                 	db	69
   322  001F33  72                 	db	114
   323  001F34  72                 	db	114
   324  001F35  6F                 	db	111
   325  001F36  72                 	db	114
   326  001F37  2C                 	db	44
   327  001F38  20                 	db	32
   328  001F39  6E                 	db	110
   329  001F3A  6F                 	db	111
   330  001F3B  20                 	db	32
   331  001F3C  6F                 	db	111
   332  001F3D  62                 	db	98
   333  001F3E  6A                 	db	106
   334  001F3F  65                 	db	101
   335  001F40  63                 	db	99
   336  001F41  74                 	db	116
   337  001F42  20                 	db	32
   338  001F43  72                 	db	114
   339  001F44  65                 	db	101
   340  001F45  6C                 	db	108
   341  001F46  65                 	db	101
   342  001F47  76                 	db	118
   343  001F48  61                 	db	97
   344  001F49  74                 	db	116
   345  001F4A  65                 	db	101
   346  001F4B  64                 	db	100
   347  001F4C  20                 	db	32
   348  001F4D  61                 	db	97
   349  001F4E  6C                 	db	108
   350  001F4F  6F                 	db	111
   351  001F50  6E                 	db	110
   352  001F51  67                 	db	103
   353  001F52  20                 	db	32
   354  001F53  5A                 	db	90
   355  001F54  20                 	db	32
   356  001F55  41                 	db	65
   357  001F56  78                 	db	120
   358  001F57  69                 	db	105
   359  001F58  73                 	db	115
   360  001F59  0A                 	db	10
   361  001F5A  00                 	db	0
   362                           
   363                           ;initializer for _errString_Reset
   364  001F5B  45                 	db	69
   365  001F5C  72                 	db	114
   366  001F5D  72                 	db	114
   367  001F5E  6F                 	db	111
   368  001F5F  72                 	db	114
   369  001F60  2C                 	db	44
   370  001F61  20                 	db	32
   371  001F62  74                 	db	116
   372  001F63  69                 	db	105
   373  001F64  6D                 	db	109
   374  001F65  65                 	db	101
   375  001F66  20                 	db	32
   376  001F67  65                 	db	101
   377  001F68  78                 	db	120
   378  001F69  63                 	db	99
   379  001F6A  65                 	db	101
   380  001F6B  65                 	db	101
   381  001F6C  64                 	db	100
   382  001F6D  65                 	db	101
   383  001F6E  64                 	db	100
   384  001F6F  20                 	db	32
   385  001F70  74                 	db	116
   386  001F71  6F                 	db	111
   387  001F72  20                 	db	32
   388  001F73  72                 	db	114
   389  001F74  65                 	db	101
   390  001F75  73                 	db	115
   391  001F76  65                 	db	101
   392  001F77  74                 	db	116
   393  001F78  20                 	db	32
   394  001F79  70                 	db	112
   395  001F7A  6F                 	db	111
   396  001F7B  73                 	db	115
   397  001F7C  69                 	db	105
   398  001F7D  74                 	db	116
   399  001F7E  69                 	db	105
   400  001F7F  6F                 	db	111
   401  001F80  6E                 	db	110
   402  001F81  0A                 	db	10
   403  001F82  00                 	db	0
   404                           
   405                           ;initializer for _errString_Fatal
   406  001F83  46                 	db	70
   407  001F84  61                 	db	97
   408  001F85  74                 	db	116
   409  001F86  61                 	db	97
   410  001F87  6C                 	db	108
   411  001F88  20                 	db	32
   412  001F89  45                 	db	69
   413  001F8A  72                 	db	114
   414  001F8B  72                 	db	114
   415  001F8C  6F                 	db	111
   416  001F8D  72                 	db	114
   417  001F8E  2C                 	db	44
   418  001F8F  20                 	db	32
   419  001F90  70                 	db	112
   420  001F91  6C                 	db	108
   421  001F92  65                 	db	101
   422  001F93  61                 	db	97
   423  001F94  73                 	db	115
   424  001F95  65                 	db	101
   425  001F96  20                 	db	32
   426  001F97  72                 	db	114
   427  001F98  65                 	db	101
   428  001F99  73                 	db	115
   429  001F9A  65                 	db	101
   430  001F9B  74                 	db	116
   431  001F9C  20                 	db	32
   432  001F9D  74                 	db	116
   433  001F9E  68                 	db	104
   434  001F9F  65                 	db	101
   435  001FA0  20                 	db	32
   436  001FA1  64                 	db	100
   437  001FA2  65                 	db	101
   438  001FA3  76                 	db	118
   439  001FA4  69                 	db	105
   440  001FA5  63                 	db	99
   441  001FA6  65                 	db	101
   442  001FA7  21                 	db	33
   443  001FA8  0A                 	db	10
   444  001FA9  00                 	db	0
   445                           
   446                           ;initializer for _errString_Bound
   447  001FAA  45                 	db	69
   448  001FAB  72                 	db	114
   449  001FAC  72                 	db	114
   450  001FAD  6F                 	db	111
   451  001FAE  72                 	db	114
   452  001FAF  2C                 	db	44
   453  001FB0  20                 	db	32
   454  001FB1  70                 	db	112
   455  001FB2  6F                 	db	111
   456  001FB3  69                 	db	105
   457  001FB4  6E                 	db	110
   458  001FB5  74                 	db	116
   459  001FB6  20                 	db	32
   460  001FB7  6F                 	db	111
   461  001FB8  75                 	db	117
   462  001FB9  74                 	db	116
   463  001FBA  73                 	db	115
   464  001FBB  69                 	db	105
   465  001FBC  64                 	db	100
   466  001FBD  65                 	db	101
   467  001FBE  20                 	db	32
   468  001FBF  62                 	db	98
   469  001FC0  6F                 	db	111
   470  001FC1  75                 	db	117
   471  001FC2  6E                 	db	110
   472  001FC3  64                 	db	100
   473  001FC4  61                 	db	97
   474  001FC5  72                 	db	114
   475  001FC6  69                 	db	105
   476  001FC7  65                 	db	101
   477  001FC8  73                 	db	115
   478  001FC9  0A                 	db	10
   479  001FCA  00                 	db	0
   480                           
   481                           	psect	smallconst
   482  000600                     __psmallconst:
   483                           	callstack 0
   484  000600  00                 	db	0
   485  000601  FFAC               	dw	65452
   486  000603  3DB3               	dw	15795
   487  000605                     __end_ofrotateObj@stepAngle:
   488                           	callstack 0
   489  000605  0400               	dw	1024
   490  000607                     __end_of_therm_pressure:
   491                           	callstack 0
   492  000607  0200               	dw	512
   493  000609                     __end_of_touch_pressure:
   494                           	callstack 0
   495  000609                     _feeder3Pos:
   496                           	callstack 0
   497  000609  1E                 	db	30
   498  00060A  96                 	db	150
   499  00060B                     __end_of_feeder3Pos:
   500                           	callstack 0
   501  00060B                     _feeder2Pos:
   502                           	callstack 0
   503  00060B  1E                 	db	30
   504  00060C  64                 	db	100
   505  00060D                     __end_of_feeder2Pos:
   506                           	callstack 0
   507  00060D                     _feeder1Pos:
   508                           	callstack 0
   509  00060D  1E                 	db	30
   510  00060E  32                 	db	50
   511  00060F                     __end_of_feeder1Pos:
   512                           	callstack 0
   513  00060F  C8                 	db	200
   514  000610                     __end_of_maxFeedY:
   515                           	callstack 0
   516  000610  3C                 	db	60
   517  000611                     __end_of_maxFeedX:
   518                           	callstack 0
   519  0000                     _TMR0	set	4054
   520  0000                     _T1CONbits	set	4045
   521  0000                     _TXREG	set	4013
   522  0000                     _SPBRG	set	4015
   523  0000                     _TXSTAbits	set	4012
   524  0000                     _TRISCbits	set	3988
   525  0000                     _RCREG1	set	4014
   526  0000                     _ADRESH	set	4036
   527  0000                     _ADRESL	set	4035
   528  0000                     _PIR1bits	set	3998
   529  0000                     _RCONbits	set	4048
   530  0000                     _INTCONbits	set	4082
   531  0000                     _IPR1bits	set	3999
   532  0000                     _PIE1bits	set	3997
   533  0000                     _ADCON0bits	set	4034
   534  0000                     _RCSTAbits	set	4011
   535  0000                     _RCSTA1bits	set	4011
   536  0000                     _LATD	set	3980
   537  0000                     _PORTDbits	set	3971
   538  0000                     _TMR2	set	4044
   539  0000                     _LATC	set	3979
   540  0000                     _LATB	set	3978
   541  0000                     _LATA	set	3977
   542  0000                     _PORTEbits	set	3972
   543  0000                     _T0CONbits	set	4053
   544  0000                     _T2CONbits	set	4042
   545  0000                     _LATDbits	set	3980
   546  0000                     _LATCbits	set	3979
   547  0000                     _LATBbits	set	3978
   548  0000                     _LATAbits	set	3977
   549  0000                     _TRISDbits	set	3989
   550  0000                     _TRISEbits	set	3990
   551  0000                     _TRISD	set	3989
   552  0000                     _TRISC	set	3988
   553  0000                     _TRISB	set	3987
   554  0000                     _TRISA	set	3986
   555  0000                     _ADCON1bits	set	4033
   556  000611  00                 	db	0	; dummy byte at the end
   557  0000                     
   558                           ; #config settings
   559                           
   560                           	psect	cinit
   561  002168                     __pcinit:
   562                           	callstack 0
   563  002168                     start_initialization:
   564                           	callstack 0
   565  002168                     __initialization:
   566                           	callstack 0
   567                           
   568                           ; Initialize objects allocated to BANK1 (247 bytes)
   569                           ; load TBLPTR registers with __pidataBANK1
   570  002168  0ED4               	movlw	low __pidataBANK1
   571  00216A  6EF6               	movwf	tblptrl,c
   572  00216C  0E1E               	movlw	high __pidataBANK1
   573  00216E  6EF7               	movwf	tblptrh,c
   574  002170  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   575  002172  6EF8               	movwf	tblptru,c
   576  002174  EE01  F000         	lfsr	0,__pdataBANK1
   577  002178  EE10 F0F7          	lfsr	1,247
   578  00217C                     copy_data0:
   579  00217C  0009               	tblrd		*+
   580  00217E  CFF5 FFEE          	movff	tablat,postinc0
   581  002182  50E5               	movf	postdec1,w,c
   582  002184  50E1               	movf	fsr1l,w,c
   583  002186  E1FA               	bnz	copy_data0
   584                           
   585                           ; Initialize objects allocated to BANK0 (72 bytes)
   586                           ; load TBLPTR registers with __pidataBANK0
   587  002188  0EEA               	movlw	low __pidataBANK0
   588  00218A  6EF6               	movwf	tblptrl,c
   589  00218C  0E22               	movlw	high __pidataBANK0
   590  00218E  6EF7               	movwf	tblptrh,c
   591  002190  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   592  002192  6EF8               	movwf	tblptru,c
   593  002194  EE00  F080         	lfsr	0,__pdataBANK0
   594  002198  EE10 F048          	lfsr	1,72
   595  00219C                     copy_data1:
   596  00219C  0009               	tblrd		*+
   597  00219E  CFF5 FFEE          	movff	tablat,postinc0
   598  0021A2  50E5               	movf	postdec1,w,c
   599  0021A4  50E1               	movf	fsr1l,w,c
   600  0021A6  E1FA               	bnz	copy_data1
   601                           
   602                           ; Initialize objects allocated to COMRAM (15 bytes)
   603                           ; load TBLPTR registers with __pidataCOMRAM
   604  0021A8  0E7C               	movlw	low __pidataCOMRAM
   605  0021AA  6EF6               	movwf	tblptrl,c
   606  0021AC  0E24               	movlw	high __pidataCOMRAM
   607  0021AE  6EF7               	movwf	tblptrh,c
   608  0021B0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   609  0021B2  6EF8               	movwf	tblptru,c
   610  0021B4  EE00  F05E         	lfsr	0,__pdataCOMRAM
   611  0021B8  EE10 F00F          	lfsr	1,15
   612  0021BC                     copy_data2:
   613  0021BC  0009               	tblrd		*+
   614  0021BE  CFF5 FFEE          	movff	tablat,postinc0
   615  0021C2  50E5               	movf	postdec1,w,c
   616  0021C4  50E1               	movf	fsr1l,w,c
   617  0021C6  E1FA               	bnz	copy_data2
   618                           
   619                           ; Clear objects allocated to BANK0 (37 bytes)
   620  0021C8  EE00  F0C8         	lfsr	0,__pbssBANK0
   621  0021CC  0E25               	movlw	37
   622  0021CE                     clear_0:
   623  0021CE  6AEE               	clrf	postinc0,c
   624  0021D0  06E8               	decf	wreg,f,c
   625  0021D2  E1FD               	bnz	clear_0
   626                           
   627                           ; Clear objects allocated to COMRAM (27 bytes)
   628  0021D4  EE00  F043         	lfsr	0,__pbssCOMRAM
   629  0021D8  0E1B               	movlw	27
   630  0021DA                     clear_1:
   631  0021DA  6AEE               	clrf	postinc0,c
   632  0021DC  06E8               	decf	wreg,f,c
   633  0021DE  E1FD               	bnz	clear_1
   634  0021E0                     end_of_initialization:
   635                           	callstack 0
   636  0021E0                     __end_of__initialization:
   637                           	callstack 0
   638  0021E0  906D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   639  0021E2  926D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   640  0021E4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   641  0021E6  6EF8               	movwf	tblptru,c
   642  0021E8  0100               	movlb	0
   643  0021EA  EF46  F00A         	goto	_main	;jump to C main() function
   644                           
   645                           	psect	bssCOMRAM
   646  000043                     __pbssCOMRAM:
   647                           	callstack 0
   648  000043                     _posVector:
   649                           	callstack 0
   650  000043                     	ds	3
   651  000046                     _pwmPeriod:
   652                           	callstack 0
   653  000046                     	ds	2
   654  000048                     isr@single_cycle:
   655                           	callstack 0
   656  000048                     	ds	2
   657  00004A                     _ADC_res:
   658                           	callstack 0
   659  00004A                     	ds	2
   660  00004C                     _newFeeder:
   661                           	callstack 0
   662  00004C                     	ds	2
   663  00004E                     _rotAngle:
   664                           	callstack 0
   665  00004E                     	ds	2
   666  000050                     _tm0Error:
   667                           	callstack 0
   668  000050                     	ds	2
   669  000052                     _stepToggle:
   670                           	callstack 0
   671  000052                     	ds	1
   672  000053                     _pwmStep:
   673                           	callstack 0
   674  000053                     	ds	1
   675  000054                     	ds	1
   676  000055                     storeData@counter:
   677                           	callstack 0
   678  000055                     	ds	1
   679  000056                     __newSequence:
   680                           	callstack 0
   681  000056                     	ds	1
   682  000057                     __fatalError:
   683                           	callstack 0
   684  000057                     	ds	1
   685  000058                     _dataCounter:
   686                           	callstack 0
   687  000058                     	ds	1
   688  000059                     isr@completeStep:
   689                           	callstack 0
   690  000059                     	ds	1
   691  00005A                     isr@tm0Count:
   692                           	callstack 0
   693  00005A                     	ds	1
   694  00005B                     _therm_rel:
   695                           	callstack 0
   696  00005B                     	ds	1
   697  00005C                     _touch_rel:
   698                           	callstack 0
   699  00005C                     	ds	1
   700  00005D                     _tm0Limit:
   701                           	callstack 0
   702  00005D                     	ds	1
   703                           
   704                           	psect	dataCOMRAM
   705  00005E                     __pdataCOMRAM:
   706                           	callstack 0
   707  00005E                     _motCounter:
   708                           	callstack 0
   709  00005E                     	ds	12
   710  00006A                     	ds	2
   711  00006C                     storeData@mexLength:
   712                           	callstack 0
   713  00006C                     	ds	1
   714                           
   715                           	psect	bssBANK0
   716  0000C8                     __pbssBANK0:
   717                           	callstack 0
   718  0000C8                     storeData@receivedMex:
   719                           	callstack 0
   720  0000C8                     	ds	9
   721  0000D1                     _dataSequence:
   722                           	callstack 0
   723  0000D1                     	ds	20
   724  0000E5                     _newSequenceData:
   725                           	callstack 0
   726  0000E5                     	ds	8
   727                           
   728                           	psect	dataBANK0
   729  000080                     __pdataBANK0:
   730                           	callstack 0
   731  000080                     rotateObj@rotSequence:
   732                           	callstack 0
   733  000080                     	ds	4
   734  000084                     _stepMot3:
   735                           	callstack 0
   736  000084                     	ds	4
   737  000088                     _stepMot2:
   738                           	callstack 0
   739  000088                     	ds	4
   740  00008C                     _stepMot1:
   741                           	callstack 0
   742  00008C                     	ds	4
   743  000090                     	ds	2
   744  000092                     _errString_Feed:
   745                           	callstack 0
   746  000092                     	ds	30
   747  0000B0                     _errString_Command:
   748                           	callstack 0
   749  0000B0                     	ds	24
   750                           
   751                           	psect	dataBANK1
   752  000100                     __pdataBANK1:
   753                           	callstack 0
   754  000100                     _errString_PointZ:
   755                           	callstack 0
   756  000100                     	ds	53
   757  000135                     _errString_Point:
   758                           	callstack 0
   759  000135                     	ds	41
   760  00015E                     _errString_ZEND:
   761                           	callstack 0
   762  00015E                     	ds	41
   763  000187                     _errString_Reset:
   764                           	callstack 0
   765  000187                     	ds	40
   766  0001AF                     _errString_Fatal:
   767                           	callstack 0
   768  0001AF                     	ds	39
   769  0001D6                     _errString_Bound:
   770                           	callstack 0
   771  0001D6                     	ds	33
   772                           
   773                           	psect	cstackBANK0
   774  0000ED                     __pcstackBANK0:
   775                           	callstack 0
   776  0000ED                     ??_rotateObj:
   777                           
   778                           ; 1 bytes @ 0x0
   779  0000ED                     	ds	3
   780  0000F0                     rotateObj@rotAngle:
   781                           	callstack 0
   782                           
   783                           ; 1 bytes @ 0x3
   784  0000F0                     	ds	1
   785  0000F1                     rotateObj@totStep:
   786                           	callstack 0
   787                           
   788                           ; 2 bytes @ 0x4
   789  0000F1                     	ds	2
   790  0000F3                     rotateObj@i:
   791                           	callstack 0
   792                           
   793                           ; 2 bytes @ 0x6
   794  0000F3                     	ds	2
   795  0000F5                     ??_executeData:
   796                           
   797                           ; 1 bytes @ 0x8
   798  0000F5                     	ds	2
   799  0000F7                     executeData@errCode:
   800                           	callstack 0
   801                           
   802                           ; 1 bytes @ 0xA
   803  0000F7                     	ds	1
   804  0000F8                     executeData@data:
   805                           	callstack 0
   806                           
   807                           ; 2 bytes @ 0xB
   808  0000F8                     	ds	2
   809  0000FA                     ??_main:
   810                           
   811                           ; 1 bytes @ 0xD
   812  0000FA                     	ds	2
   813  0000FC                     main@errCode:
   814                           	callstack 0
   815                           
   816                           ; 1 bytes @ 0xF
   817  0000FC                     	ds	1
   818  0000FD                     main@newData:
   819                           	callstack 0
   820                           
   821                           ; 2 bytes @ 0x10
   822  0000FD                     	ds	2
   823                           
   824                           	psect	cstackCOMRAM
   825  000001                     __pcstackCOMRAM:
   826                           	callstack 0
   827  000001                     ?_retPeriod:
   828                           	callstack 0
   829  000001                     i2uartTx@ptr:
   830                           	callstack 0
   831                           
   832                           ; 2 bytes @ 0x0
   833  000001                     	ds	2
   834  000003                     i2uartTx@length:
   835                           	callstack 0
   836                           
   837                           ; 1 bytes @ 0x2
   838  000003                     	ds	1
   839  000004                     i2uartTx@i:
   840                           	callstack 0
   841                           
   842                           ; 1 bytes @ 0x3
   843  000004                     	ds	1
   844  000005                     ??i2_printError:
   845                           
   846                           ; 1 bytes @ 0x4
   847  000005                     	ds	2
   848  000007                     i2printError@errCode:
   849                           	callstack 0
   850                           
   851                           ; 1 bytes @ 0x6
   852  000007                     	ds	1
   853  000008                     ??i2_storeData:
   854                           
   855                           ; 1 bytes @ 0x7
   856  000008                     	ds	2
   857  00000A                     i2storeData@data:
   858                           	callstack 0
   859                           
   860                           ; 1 bytes @ 0x9
   861  00000A                     	ds	1
   862  00000B                     ??_isr:
   863                           
   864                           ; 1 bytes @ 0xA
   865  00000B                     	ds	6
   866  000011                     isr@temp:
   867                           	callstack 0
   868                           
   869                           ; 1 bytes @ 0x10
   870  000011                     	ds	1
   871  000012                     ??_shiftData:
   872  000012                     ?_stepMade:
   873                           	callstack 0
   874  000012                     ?_stepCounter:
   875                           	callstack 0
   876  000012                     ?_returnTouch:
   877                           	callstack 0
   878  000012                     ?_returnTherm:
   879                           	callstack 0
   880  000012                     ?_getNewSequence:
   881                           	callstack 0
   882  000012                     ?_getData:
   883                           	callstack 0
   884  000012                     ?___xxtofl:
   885                           	callstack 0
   886  000012                     uartTx@ptr:
   887                           	callstack 0
   888  000012                     tim2Init@_pwmPeriod:
   889                           	callstack 0
   890  000012                     ___xxtofl@val:
   891                           	callstack 0
   892                           
   893                           ; 4 bytes @ 0x11
   894  000012                     	ds	2
   895  000014                     shiftData@i:
   896                           	callstack 0
   897  000014                     uartTx@length:
   898                           	callstack 0
   899  000014                     stepMade@temp:
   900                           	callstack 0
   901                           
   902                           ; 1 bytes @ 0x13
   903  000014                     	ds	1
   904  000015                     resetPosition@keepMovingX:
   905                           	callstack 0
   906  000015                     uartTx@i:
   907                           	callstack 0
   908  000015                     moveToPoint@x1:
   909                           	callstack 0
   910                           
   911                           ; 2 bytes @ 0x14
   912  000015                     	ds	1
   913  000016                     ??_printError:
   914  000016                     ??___xxtofl:
   915  000016                     resetPosition@keepMovingY:
   916                           	callstack 0
   917                           
   918                           ; 1 bytes @ 0x15
   919  000016                     	ds	1
   920  000017                     resetPosition@keepMovingZ:
   921                           	callstack 0
   922  000017                     moveToPoint@y1:
   923                           	callstack 0
   924                           
   925                           ; 2 bytes @ 0x16
   926  000017                     	ds	1
   927  000018                     printError@errCode:
   928                           	callstack 0
   929                           
   930                           ; 1 bytes @ 0x17
   931  000018                     	ds	1
   932  000019                     ??_storeData:
   933  000019                     moveToPoint@x2:
   934                           	callstack 0
   935                           
   936                           ; 2 bytes @ 0x18
   937  000019                     	ds	1
   938  00001A                     ___xxtofl@sign:
   939                           	callstack 0
   940                           
   941                           ; 1 bytes @ 0x19
   942  00001A                     	ds	1
   943  00001B                     storeData@data:
   944                           	callstack 0
   945  00001B                     ___xxtofl@exp:
   946                           	callstack 0
   947  00001B                     moveToPoint@y2:
   948                           	callstack 0
   949                           
   950                           ; 2 bytes @ 0x1A
   951  00001B                     	ds	1
   952  00001C                     ___xxtofl@arg:
   953                           	callstack 0
   954                           
   955                           ; 4 bytes @ 0x1B
   956  00001C                     	ds	1
   957  00001D                     ??_moveToPoint:
   958                           
   959                           ; 1 bytes @ 0x1C
   960  00001D                     	ds	2
   961  00001F                     moveToPoint@MOT1Direction:
   962                           	callstack 0
   963                           
   964                           ; 1 bytes @ 0x1E
   965  00001F                     	ds	1
   966  000020                     ?___fldiv:
   967                           	callstack 0
   968  000020                     moveToPoint@MOT2Direction:
   969                           	callstack 0
   970  000020                     ___fldiv@b:
   971                           	callstack 0
   972                           
   973                           ; 4 bytes @ 0x1F
   974  000020                     	ds	1
   975  000021                     moveToPoint@keepMovingX:
   976                           	callstack 0
   977                           
   978                           ; 1 bytes @ 0x20
   979  000021                     	ds	1
   980  000022                     moveToPoint@keepMovingY:
   981                           	callstack 0
   982                           
   983                           ; 1 bytes @ 0x21
   984  000022                     	ds	2
   985  000024                     ___fldiv@a:
   986                           	callstack 0
   987                           
   988                           ; 4 bytes @ 0x23
   989  000024                     	ds	4
   990  000028                     ??___fldiv:
   991                           
   992                           ; 1 bytes @ 0x27
   993  000028                     	ds	4
   994  00002C                     ___fldiv@rem:
   995                           	callstack 0
   996                           
   997                           ; 4 bytes @ 0x2B
   998  00002C                     	ds	4
   999  000030                     ___fldiv@sign:
  1000                           	callstack 0
  1001                           
  1002                           ; 1 bytes @ 0x2F
  1003  000030                     	ds	1
  1004  000031                     ___fldiv@new_exp:
  1005                           	callstack 0
  1006                           
  1007                           ; 2 bytes @ 0x30
  1008  000031                     	ds	2
  1009  000033                     ___fldiv@grs:
  1010                           	callstack 0
  1011                           
  1012                           ; 4 bytes @ 0x32
  1013  000033                     	ds	4
  1014  000037                     ___fldiv@bexp:
  1015                           	callstack 0
  1016                           
  1017                           ; 1 bytes @ 0x36
  1018  000037                     	ds	1
  1019  000038                     ___fldiv@aexp:
  1020                           	callstack 0
  1021                           
  1022                           ; 1 bytes @ 0x37
  1023  000038                     	ds	1
  1024  000039                     ?___fltol:
  1025                           	callstack 0
  1026  000039                     ___fltol@f1:
  1027                           	callstack 0
  1028                           
  1029                           ; 4 bytes @ 0x38
  1030  000039                     	ds	4
  1031  00003D                     ??___fltol:
  1032                           
  1033                           ; 1 bytes @ 0x3C
  1034  00003D                     	ds	4
  1035  000041                     ___fltol@sign1:
  1036                           	callstack 0
  1037                           
  1038                           ; 1 bytes @ 0x40
  1039  000041                     	ds	1
  1040  000042                     ___fltol@exp1:
  1041                           	callstack 0
  1042                           
  1043                           ; 1 bytes @ 0x41
  1044  000042                     	ds	1
  1045                           
  1046 ;;
  1047 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1048 ;;
  1049 ;; *************** function _main *****************
  1050 ;; Defined at:
  1051 ;;		line 19 in file "main.c"
  1052 ;; Parameters:    Size  Location     Type
  1053 ;;		None
  1054 ;; Auto vars:     Size  Location     Type
  1055 ;;  newData         2   16[BANK0 ] PTR struct .
  1056 ;;		 -> newSequenceData(8), 
  1057 ;;  errCode         1   15[BANK0 ] unsigned char 
  1058 ;; Return value:  Size  Location     Type
  1059 ;;                  1    wreg      void 
  1060 ;; Registers used:
  1061 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1062 ;; Tracked objects:
  1063 ;;		On entry : 0/0
  1064 ;;		On exit  : 0/0
  1065 ;;		Unchanged: 0/0
  1066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1067 ;;      Params:         0       0       0       0       0       0       0
  1068 ;;      Locals:         0       3       0       0       0       0       0
  1069 ;;      Temps:          0       2       0       0       0       0       0
  1070 ;;      Totals:         0       5       0       0       0       0       0
  1071 ;;Total ram usage:        5 bytes
  1072 ;; Hardware stack levels required when called:    7
  1073 ;; This function calls:
  1074 ;;		_clearTM0
  1075 ;;		_executeData
  1076 ;;		_getNewSequence
  1077 ;;		_initADC
  1078 ;;		_initPinMotors
  1079 ;;		_interruptInit
  1080 ;;		_newSequence
  1081 ;;		_printError
  1082 ;;		_readSeq
  1083 ;;		_reduceSeq
  1084 ;;		_resetNewSequence
  1085 ;;		_resetPosition
  1086 ;;		_shiftData
  1087 ;;		_storeData
  1088 ;;		_tim0Init
  1089 ;;		_tim1Init
  1090 ;;		_tim2Init
  1091 ;;		_usartInit
  1092 ;; This function is called by:
  1093 ;;		Startup code after reset
  1094 ;; This function uses a non-reentrant model
  1095 ;;
  1096                           
  1097                           	psect	text0
  1098  00148C                     __ptext0:
  1099                           	callstack 0
  1100  00148C                     _main:
  1101                           	callstack 24
  1102  00148C  FFFF               	dw	65535	; assembler added errata NOP
  1103                           
  1104                           ;main.c: 23:     interruptInit();
  1105  00148E  EC99  F011         	call	_interruptInit	;wreg free
  1106  001492                     
  1107                           ;main.c: 24:     initPinMotors();
  1108  001492  ECE3  F011         	call	_initPinMotors	;wreg free
  1109  001496                     
  1110                           ;main.c: 25:     initADC();
  1111  001496  ECF6  F011         	call	_initADC	;wreg free
  1112  00149A                     
  1113                           ;main.c: 26:     usartInit();
  1114  00149A  EC09  F012         	call	_usartInit	;wreg free
  1115  00149E                     
  1116                           ;main.c: 27:     tim0Init();
  1117  00149E  EC2C  F012         	call	_tim0Init	;wreg free
  1118  0014A2                     
  1119                           ;main.c: 28:     tim1Init();
  1120  0014A2  EC46  F012         	call	_tim1Init	;wreg free
  1121  0014A6                     
  1122                           ;main.c: 29:     tim2Init(100);
  1123  0014A6  0E00               	movlw	0
  1124  0014A8  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1125  0014AA  0E64               	movlw	100
  1126  0014AC  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1127  0014AE  EC18  F012         	call	_tim2Init	;wreg free
  1128  0014B2                     
  1129                           ;main.c: 32:     errCode = resetPosition();
  1130  0014B2  EC49  F008         	call	_resetPosition	;wreg free
  1131  0014B6  0100               	movlb	0	; () banked
  1132  0014B8  6FFC               	movwf	main@errCode& (0+255),b
  1133  0014BA                     
  1134                           ; BSR set to: 0
  1135                           ;main.c: 33:     if(errCode != 0){
  1136  0014BA  51FC               	movf	main@errCode& (0+255),w,b
  1137  0014BC  B4D8               	btfsc	status,2,c
  1138  0014BE  EF63  F00A         	goto	u3701
  1139  0014C2  EF66  F00A         	goto	u3700
  1140  0014C6                     u3701:
  1141  0014C6  FFFF               	dw	65535	; assembler added errata NOP
  1142  0014C8  EF6D  F00A         	goto	l333
  1143  0014CC                     u3700:
  1144  0014CC  FFFF               	dw	65535	; assembler added errata NOP
  1145  0014CE                     
  1146                           ; BSR set to: 0
  1147                           ;main.c: 34:         printError(errCode);
  1148  0014CE  51FC               	movf	main@errCode& (0+255),w,b
  1149  0014D0  EC32  F00D         	call	_printError
  1150  0014D4                     l334:
  1151  0014D4  FFFF               	dw	65535	; assembler added errata NOP
  1152  0014D6  EF6A  F00A         	goto	l334
  1153  0014DA                     l333:
  1154  0014DA  FFFF               	dw	65535	; assembler added errata NOP
  1155                           
  1156                           ; BSR set to: 0
  1157                           ;main.c: 39:     RCSTA1bits.CREN = 1;
  1158  0014DC  88AB               	bsf	171,4,c	;volatile
  1159  0014DE                     l4474:
  1160  0014DE  FFFF               	dw	65535	; assembler added errata NOP
  1161                           
  1162                           ;main.c: 42:         if(newSequence()){
  1163  0014E0  ECB2  F012         	call	_newSequence	;wreg free
  1164  0014E4  0900               	iorlw	0
  1165  0014E6  B4D8               	btfsc	status,2,c
  1166  0014E8  EF78  F00A         	goto	u3711
  1167  0014EC  EF7B  F00A         	goto	u3710
  1168  0014F0                     u3711:
  1169  0014F0  FFFF               	dw	65535	; assembler added errata NOP
  1170  0014F2  EFFD  F00A         	goto	l4502
  1171  0014F6                     u3710:
  1172  0014F6  FFFF               	dw	65535	; assembler added errata NOP
  1173  0014F8                     
  1174                           ;main.c: 43:             t_newSequence* newData = getNewSequence();
  1175  0014F8  EC4D  F012         	call	_getNewSequence	;wreg free
  1176  0014FC  C012  F0FD         	movff	?_getNewSequence,main@newData
  1177  001500  C013  F0FE         	movff	?_getNewSequence+1,main@newData+1
  1178  001504                     
  1179                           ;main.c: 45:             newFeeder[0] = newData ->init_posX;
  1180  001504  0100               	movlb	0	; () banked
  1181  001506  EE20 F002          	lfsr	2,2
  1182  00150A  51FD               	movf	main@newData& (0+255),w,b
  1183  00150C  26D9               	addwf	fsr2l,f,c
  1184  00150E  51FE               	movf	(main@newData+1)& (0+255),w,b
  1185  001510  22DA               	addwfc	fsr2h,f,c
  1186  001512  50DF               	movf	indf2,w,c
  1187  001514  6E4C               	movwf	_newFeeder^0,c
  1188  001516                     
  1189                           ; BSR set to: 0
  1190                           ;main.c: 46:             newFeeder[1] = newData ->init_posY;
  1191  001516  EE20 F003          	lfsr	2,3
  1192  00151A  51FD               	movf	main@newData& (0+255),w,b
  1193  00151C  26D9               	addwf	fsr2l,f,c
  1194  00151E  51FE               	movf	(main@newData+1)& (0+255),w,b
  1195  001520  22DA               	addwfc	fsr2h,f,c
  1196  001522  50DF               	movf	indf2,w,c
  1197  001524  6E4D               	movwf	(_newFeeder+1)^0,c
  1198  001526                     
  1199                           ; BSR set to: 0
  1200                           ;main.c: 50:             RCSTAbits.CREN = 0;
  1201  001526  98AB               	bcf	171,4,c	;volatile
  1202  001528                     
  1203                           ; BSR set to: 0
  1204                           ;main.c: 55:             if(newData ->end_posX > maxFeedX || newData ->end_posY > maxFee
      +                          dY){
  1205  001528  EE20 F005          	lfsr	2,5
  1206  00152C  51FD               	movf	main@newData& (0+255),w,b
  1207  00152E  26D9               	addwf	fsr2l,f,c
  1208  001530  51FE               	movf	(main@newData+1)& (0+255),w,b
  1209  001532  22DA               	addwfc	fsr2h,f,c
  1210  001534  0E3D               	movlw	61
  1211  001536  60DF               	cpfslt	indf2,c
  1212  001538  EFA0  F00A         	goto	u3721
  1213  00153C  EFA3  F00A         	goto	u3720
  1214  001540                     u3721:
  1215  001540  FFFF               	dw	65535	; assembler added errata NOP
  1216  001542  EFB3  F00A         	goto	l4488
  1217  001546                     u3720:
  1218  001546  FFFF               	dw	65535	; assembler added errata NOP
  1219  001548                     
  1220                           ; BSR set to: 0
  1221  001548  EE20 F006          	lfsr	2,6
  1222  00154C  51FD               	movf	main@newData& (0+255),w,b
  1223  00154E  26D9               	addwf	fsr2l,f,c
  1224  001550  51FE               	movf	(main@newData+1)& (0+255),w,b
  1225  001552  22DA               	addwfc	fsr2h,f,c
  1226  001554  0EC8               	movlw	200
  1227  001556  64DF               	cpfsgt	indf2,c
  1228  001558  EFB0  F00A         	goto	u3731
  1229  00155C  EFB3  F00A         	goto	u3730
  1230  001560                     u3731:
  1231  001560  FFFF               	dw	65535	; assembler added errata NOP
  1232  001562  EFB8  F00A         	goto	l4490
  1233  001566                     u3730:
  1234  001566                     l4488:
  1235  001566  FFFF               	dw	65535	; assembler added errata NOP
  1236                           
  1237                           ; BSR set to: 0
  1238                           ;main.c: 56:                 errCode = 5;
  1239  001568  0E05               	movlw	5
  1240  00156A  6FFC               	movwf	main@errCode& (0+255),b
  1241                           
  1242                           ;main.c: 57:             }else{
  1243  00156C  EFCC  F00A         	goto	l4492
  1244  001570                     l4490:
  1245  001570  FFFF               	dw	65535	; assembler added errata NOP
  1246                           
  1247                           ; BSR set to: 0
  1248                           ;main.c: 58:                 storeData(newData ->end_posX);
  1249  001572  EE20 F005          	lfsr	2,5
  1250  001576  51FD               	movf	main@newData& (0+255),w,b
  1251  001578  26D9               	addwf	fsr2l,f,c
  1252  00157A  51FE               	movf	(main@newData+1)& (0+255),w,b
  1253  00157C  22DA               	addwfc	fsr2h,f,c
  1254  00157E  50DF               	movf	indf2,w,c
  1255  001580  EC1B  F00B         	call	_storeData
  1256                           
  1257                           ;main.c: 59:                 storeData(newData ->end_posY);
  1258  001584  0100               	movlb	0	; () banked
  1259  001586  EE20 F006          	lfsr	2,6
  1260  00158A  51FD               	movf	main@newData& (0+255),w,b
  1261  00158C  26D9               	addwf	fsr2l,f,c
  1262  00158E  51FE               	movf	(main@newData+1)& (0+255),w,b
  1263  001590  22DA               	addwfc	fsr2h,f,c
  1264  001592  50DF               	movf	indf2,w,c
  1265  001594  EC1B  F00B         	call	_storeData
  1266  001598                     l4492:
  1267  001598  FFFF               	dw	65535	; assembler added errata NOP
  1268                           
  1269                           ;main.c: 63:             if(errCode == 0){
  1270  00159A  0100               	movlb	0	; () banked
  1271  00159C  51FC               	movf	main@errCode& (0+255),w,b
  1272  00159E  A4D8               	btfss	status,2,c
  1273  0015A0  EFD4  F00A         	goto	u3741
  1274  0015A4  EFD7  F00A         	goto	u3740
  1275  0015A8                     u3741:
  1276  0015A8  FFFF               	dw	65535	; assembler added errata NOP
  1277  0015AA  EFF5  F00A         	goto	l4496
  1278  0015AE                     u3740:
  1279  0015AE  FFFF               	dw	65535	; assembler added errata NOP
  1280  0015B0                     
  1281                           ; BSR set to: 0
  1282                           ;main.c: 65:                 storeData(0);
  1283  0015B0  0E00               	movlw	0
  1284  0015B2  EC1B  F00B         	call	_storeData
  1285                           
  1286                           ;main.c: 66:                 storeData(0xFF);
  1287  0015B6  0EFF               	movlw	255
  1288  0015B8  EC1B  F00B         	call	_storeData
  1289                           
  1290                           ;main.c: 67:                 storeData(newData ->end_rot - newData ->init_rot);
  1291  0015BC  0100               	movlb	0	; () banked
  1292  0015BE  EE20 F004          	lfsr	2,4
  1293  0015C2  51FD               	movf	main@newData& (0+255),w,b
  1294  0015C4  26D9               	addwf	fsr2l,f,c
  1295  0015C6  51FE               	movf	(main@newData+1)& (0+255),w,b
  1296  0015C8  22DA               	addwfc	fsr2h,f,c
  1297  0015CA  50DF               	movf	indf2,w,c
  1298  0015CC  6FFA               	movwf	??_main& (0+255),b
  1299  0015CE  EE20 F007          	lfsr	2,7
  1300  0015D2  51FD               	movf	main@newData& (0+255),w,b
  1301  0015D4  26D9               	addwf	fsr2l,f,c
  1302  0015D6  51FE               	movf	(main@newData+1)& (0+255),w,b
  1303  0015D8  22DA               	addwfc	fsr2h,f,c
  1304  0015DA  50DF               	movf	indf2,w,c
  1305  0015DC  6FFB               	movwf	(??_main+1)& (0+255),b
  1306  0015DE  51FA               	movf	??_main& (0+255),w,b
  1307  0015E0  5DFB               	subwf	(??_main+1)& (0+255),w,b
  1308  0015E2  EC1B  F00B         	call	_storeData
  1309                           
  1310                           ;main.c: 68:             }else{
  1311  0015E6  EFF9  F00A         	goto	l4498
  1312  0015EA                     l4496:
  1313  0015EA  FFFF               	dw	65535	; assembler added errata NOP
  1314                           
  1315                           ; BSR set to: 0
  1316                           ;main.c: 69:                 printError(errCode);
  1317  0015EC  51FC               	movf	main@errCode& (0+255),w,b
  1318  0015EE  EC32  F00D         	call	_printError
  1319  0015F2                     l4498:
  1320  0015F2  FFFF               	dw	65535	; assembler added errata NOP
  1321                           
  1322                           ;main.c: 73:             RCSTAbits.CREN = 1;
  1323  0015F4  88AB               	bsf	171,4,c	;volatile
  1324  0015F6                     
  1325                           ;main.c: 76:             resetNewSequence();
  1326  0015F6  EC82  F012         	call	_resetNewSequence	;wreg free
  1327  0015FA                     l4502:
  1328  0015FA  FFFF               	dw	65535	; assembler added errata NOP
  1329                           
  1330                           ;main.c: 78:         if(readSeq()){
  1331  0015FC  ECAE  F012         	call	_readSeq	;wreg free
  1332  001600  0900               	iorlw	0
  1333  001602  B4D8               	btfsc	status,2,c
  1334  001604  EF06  F00B         	goto	u3751
  1335  001608  EF09  F00B         	goto	u3750
  1336  00160C                     u3751:
  1337  00160C  FFFF               	dw	65535	; assembler added errata NOP
  1338  00160E  EF6F  F00A         	goto	l4474
  1339  001612                     u3750:
  1340  001612  FFFF               	dw	65535	; assembler added errata NOP
  1341  001614                     
  1342                           ;main.c: 82:             errCode = executeData();
  1343  001614  EC05  F007         	call	_executeData	;wreg free
  1344  001618  0100               	movlb	0	; () banked
  1345  00161A  6FFC               	movwf	main@errCode& (0+255),b
  1346  00161C                     
  1347                           ; BSR set to: 0
  1348                           ;main.c: 84:             printError(errCode);
  1349  00161C  51FC               	movf	main@errCode& (0+255),w,b
  1350  00161E  EC32  F00D         	call	_printError
  1351  001622                     
  1352                           ;main.c: 87:             clearTM0();
  1353  001622  EC5B  F012         	call	_clearTM0	;wreg free
  1354  001626                     
  1355                           ;main.c: 91:             reduceSeq();
  1356  001626  ECAA  F012         	call	_reduceSeq	;wreg free
  1357  00162A                     
  1358                           ;main.c: 92:             shiftData();
  1359  00162A  ECF7  F010         	call	_shiftData	;wreg free
  1360  00162E  EF6F  F00A         	goto	l4474
  1361  001632  EFD2  F000         	goto	start
  1362  001636                     __end_of_main:
  1363                           	callstack 0
  1364                           
  1365 ;; *************** function _usartInit *****************
  1366 ;; Defined at:
  1367 ;;		line 92 in file "usart.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;		None
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;		None
  1372 ;; Return value:  Size  Location     Type
  1373 ;;                  1    wreg      void 
  1374 ;; Registers used:
  1375 ;;		wreg, status,2
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1381 ;;      Params:         0       0       0       0       0       0       0
  1382 ;;      Locals:         0       0       0       0       0       0       0
  1383 ;;      Temps:          0       0       0       0       0       0       0
  1384 ;;      Totals:         0       0       0       0       0       0       0
  1385 ;;Total ram usage:        0 bytes
  1386 ;; Hardware stack levels used:    1
  1387 ;; Hardware stack levels required when called:    4
  1388 ;; This function calls:
  1389 ;;		Nothing
  1390 ;; This function is called by:
  1391 ;;		_main
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           	psect	text1
  1396  002412                     __ptext1:
  1397                           	callstack 0
  1398  002412                     _usartInit:
  1399                           	callstack 0
  1400  002412  FFFF               	dw	65535	; assembler added errata NOP
  1401  002414                     
  1402                           ;usart.c: 94:     TRISCbits.TRISC6 = 0;
  1403  002414  9C94               	bcf	148,6,c	;volatile
  1404                           
  1405                           ;usart.c: 95:     TRISCbits.TRISC7 = 1;
  1406  002416  8E94               	bsf	148,7,c	;volatile
  1407                           
  1408                           ;usart.c: 97:     TXSTAbits.TX9 = 0;
  1409  002418  9CAC               	bcf	172,6,c	;volatile
  1410                           
  1411                           ;usart.c: 98:     TXSTAbits.TXEN = 1;
  1412  00241A  8AAC               	bsf	172,5,c	;volatile
  1413                           
  1414                           ;usart.c: 99:     TXSTAbits.SYNC = 0;
  1415  00241C  98AC               	bcf	172,4,c	;volatile
  1416                           
  1417                           ;usart.c: 100:     TXSTAbits.BRGH = 0;
  1418  00241E  94AC               	bcf	172,2,c	;volatile
  1419                           
  1420                           ;usart.c: 102:     RCSTAbits.SPEN = 1;
  1421  002420  8EAB               	bsf	171,7,c	;volatile
  1422                           
  1423                           ;usart.c: 103:     RCSTAbits.RX9 = 0;
  1424  002422  9CAB               	bcf	171,6,c	;volatile
  1425                           
  1426                           ;usart.c: 104:     RCSTAbits.CREN = 0;
  1427  002424  98AB               	bcf	171,4,c	;volatile
  1428                           
  1429                           ;usart.c: 105:     RCSTAbits.ADDEN = 0;
  1430  002426  96AB               	bcf	171,3,c	;volatile
  1431  002428                     
  1432                           ;usart.c: 108:     SPBRG = 25;
  1433  002428  0E19               	movlw	25
  1434  00242A  6EAF               	movwf	175,c	;volatile
  1435  00242C  0012               	return		;funcret
  1436  00242E  FFFF               	dw	65535	; errata NOP
  1437  002430                     __end_of_usartInit:
  1438                           	callstack 0
  1439                           
  1440 ;; *************** function _tim2Init *****************
  1441 ;; Defined at:
  1442 ;;		line 46 in file "timer.c"
  1443 ;; Parameters:    Size  Location     Type
  1444 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1445 ;; Auto vars:     Size  Location     Type
  1446 ;;		None
  1447 ;; Return value:  Size  Location     Type
  1448 ;;                  1    wreg      void 
  1449 ;; Registers used:
  1450 ;;		wreg, status,2
  1451 ;; Tracked objects:
  1452 ;;		On entry : 0/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1456 ;;      Params:         2       0       0       0       0       0       0
  1457 ;;      Locals:         0       0       0       0       0       0       0
  1458 ;;      Temps:          0       0       0       0       0       0       0
  1459 ;;      Totals:         2       0       0       0       0       0       0
  1460 ;;Total ram usage:        2 bytes
  1461 ;; Hardware stack levels used:    1
  1462 ;; Hardware stack levels required when called:    4
  1463 ;; This function calls:
  1464 ;;		Nothing
  1465 ;; This function is called by:
  1466 ;;		_main
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           	psect	text2
  1471  002430                     __ptext2:
  1472                           	callstack 0
  1473  002430                     _tim2Init:
  1474                           	callstack 0
  1475  002430  FFFF               	dw	65535	; assembler added errata NOP
  1476  002432                     
  1477                           ;timer.c: 47:     T2CONbits.TMR2ON = 0;
  1478  002432  94CA               	bcf	202,2,c	;volatile
  1479  002434                     
  1480                           ;timer.c: 48:     T2CONbits.T2CKPS = 0x10;
  1481  002434  0EFC               	movlw	-4
  1482  002436  16CA               	andwf	202,f,c	;volatile
  1483  002438                     
  1484                           ;timer.c: 51:     pwmPeriod = _pwmPeriod;
  1485  002438  C012  F046         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1486  00243C  C013  F047         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1487  002440  0012               	return		;funcret
  1488  002442  FFFF               	dw	65535	; errata NOP
  1489  002444                     __end_of_tim2Init:
  1490                           	callstack 0
  1491                           
  1492 ;; *************** function _tim1Init *****************
  1493 ;; Defined at:
  1494 ;;		line 33 in file "timer.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;		None
  1497 ;; Auto vars:     Size  Location     Type
  1498 ;;		None
  1499 ;; Return value:  Size  Location     Type
  1500 ;;                  1    wreg      void 
  1501 ;; Registers used:
  1502 ;;		wreg, status,2
  1503 ;; Tracked objects:
  1504 ;;		On entry : 0/0
  1505 ;;		On exit  : 0/0
  1506 ;;		Unchanged: 0/0
  1507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1508 ;;      Params:         0       0       0       0       0       0       0
  1509 ;;      Locals:         0       0       0       0       0       0       0
  1510 ;;      Temps:          0       0       0       0       0       0       0
  1511 ;;      Totals:         0       0       0       0       0       0       0
  1512 ;;Total ram usage:        0 bytes
  1513 ;; Hardware stack levels used:    1
  1514 ;; Hardware stack levels required when called:    4
  1515 ;; This function calls:
  1516 ;;		Nothing
  1517 ;; This function is called by:
  1518 ;;		_main
  1519 ;; This function uses a non-reentrant model
  1520 ;;
  1521                           
  1522                           	psect	text3
  1523  00248C                     __ptext3:
  1524                           	callstack 0
  1525  00248C                     _tim1Init:
  1526                           	callstack 0
  1527  00248C  FFFF               	dw	65535	; assembler added errata NOP
  1528  00248E                     
  1529                           ;timer.c: 34:     T1CONbits.T1CKPS = 0x03;
  1530  00248E  0E30               	movlw	48
  1531  002490  12CD               	iorwf	205,f,c	;volatile
  1532  002492                     
  1533                           ;timer.c: 35:     T1CONbits.TMR1CS = 0;
  1534  002492  92CD               	bcf	205,1,c	;volatile
  1535  002494                     
  1536                           ;timer.c: 37:     T1CONbits.TMR1ON = 1;
  1537  002494  80CD               	bsf	205,0,c	;volatile
  1538  002496  0012               	return		;funcret
  1539  002498  FFFF               	dw	65535	; errata NOP
  1540  00249A                     __end_of_tim1Init:
  1541                           	callstack 0
  1542                           
  1543 ;; *************** function _tim0Init *****************
  1544 ;; Defined at:
  1545 ;;		line 21 in file "timer.c"
  1546 ;; Parameters:    Size  Location     Type
  1547 ;;		None
  1548 ;; Auto vars:     Size  Location     Type
  1549 ;;		None
  1550 ;; Return value:  Size  Location     Type
  1551 ;;                  1    wreg      void 
  1552 ;; Registers used:
  1553 ;;		wreg, status,2
  1554 ;; Tracked objects:
  1555 ;;		On entry : 0/0
  1556 ;;		On exit  : 0/0
  1557 ;;		Unchanged: 0/0
  1558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1559 ;;      Params:         0       0       0       0       0       0       0
  1560 ;;      Locals:         0       0       0       0       0       0       0
  1561 ;;      Temps:          0       0       0       0       0       0       0
  1562 ;;      Totals:         0       0       0       0       0       0       0
  1563 ;;Total ram usage:        0 bytes
  1564 ;; Hardware stack levels used:    1
  1565 ;; Hardware stack levels required when called:    4
  1566 ;; This function calls:
  1567 ;;		Nothing
  1568 ;; This function is called by:
  1569 ;;		_main
  1570 ;; This function uses a non-reentrant model
  1571 ;;
  1572                           
  1573                           	psect	text4
  1574  002458                     __ptext4:
  1575                           	callstack 0
  1576  002458                     _tim0Init:
  1577                           	callstack 0
  1578  002458  FFFF               	dw	65535	; assembler added errata NOP
  1579  00245A                     
  1580                           ;timer.c: 22:     T0CONbits.TMR0ON = 0;
  1581  00245A  9ED5               	bcf	213,7,c	;volatile
  1582                           
  1583                           ;timer.c: 23:     T0CONbits.T08BIT = 0;
  1584  00245C  9CD5               	bcf	213,6,c	;volatile
  1585                           
  1586                           ;timer.c: 24:     T0CONbits.T0CS = 0;
  1587  00245E  9AD5               	bcf	213,5,c	;volatile
  1588                           
  1589                           ;timer.c: 25:     T0CONbits.PSA = 1;
  1590  002460  86D5               	bsf	213,3,c	;volatile
  1591  002462                     
  1592                           ;timer.c: 26:     T0CONbits.T0PS = 0x07;
  1593  002462  0E07               	movlw	7
  1594  002464  12D5               	iorwf	213,f,c	;volatile
  1595  002466  0012               	return		;funcret
  1596  002468  FFFF               	dw	65535	; errata NOP
  1597  00246A                     __end_of_tim0Init:
  1598                           	callstack 0
  1599                           
  1600 ;; *************** function _storeData *****************
  1601 ;; Defined at:
  1602 ;;		line 164 in file "usart.c"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;  data            1    wreg     unsigned char 
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;  data            1   26[COMRAM] unsigned char 
  1607 ;; Return value:  Size  Location     Type
  1608 ;;                  1    wreg      void 
  1609 ;; Registers used:
  1610 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1611 ;; Tracked objects:
  1612 ;;		On entry : 0/0
  1613 ;;		On exit  : 0/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1616 ;;      Params:         0       0       0       0       0       0       0
  1617 ;;      Locals:         1       0       0       0       0       0       0
  1618 ;;      Temps:          2       0       0       0       0       0       0
  1619 ;;      Totals:         3       0       0       0       0       0       0
  1620 ;;Total ram usage:        3 bytes
  1621 ;; Hardware stack levels used:    1
  1622 ;; Hardware stack levels required when called:    6
  1623 ;; This function calls:
  1624 ;;		_printError
  1625 ;; This function is called by:
  1626 ;;		_main
  1627 ;; This function uses a non-reentrant model
  1628 ;;
  1629                           
  1630                           	psect	text5
  1631  001636                     __ptext5:
  1632                           	callstack 0
  1633  001636                     _storeData:
  1634                           	callstack 0
  1635  001636  FFFF               	dw	65535	; assembler added errata NOP
  1636                           
  1637                           ;incstack = 0
  1638                           ;storeData@data stored from wreg
  1639  001638  6E1B               	movwf	storeData@data^0,c
  1640  00163A                     
  1641                           ;usart.c: 166:     static unsigned char counter = 0;;usart.c: 167:     static unsigned c
      +                          har mexLength = 5;;usart.c: 168:     static unsigned char command;;usart.c: 169:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 173:     receivedMex[counter] = data;
  1642  00163A  0EC8               	movlw	low storeData@receivedMex
  1643  00163C  2455               	addwf	storeData@counter^0,w,c
  1644  00163E  6ED9               	movwf	fsr2l,c
  1645  001640  6ADA               	clrf	fsr2h,c
  1646  001642  0E00               	movlw	high storeData@receivedMex
  1647  001644  22DA               	addwfc	fsr2h,f,c
  1648  001646  C01B  FFDF         	movff	storeData@data,indf2
  1649  00164A                     
  1650                           ;usart.c: 175:     counter++;
  1651  00164A  2A55               	incf	storeData@counter^0,f,c
  1652                           
  1653                           ;usart.c: 178:     switch(receivedMex[0]){
  1654  00164C  EF37  F00B         	goto	l4326
  1655  001650                     l4318:
  1656  001650  FFFF               	dw	65535	; assembler added errata NOP
  1657                           
  1658                           ; BSR set to: 0
  1659                           ;usart.c: 180:             mexLength = 5;
  1660  001652  0E05               	movlw	5
  1661  001654  6E6C               	movwf	storeData@mexLength^0,c
  1662                           
  1663                           ;usart.c: 181:             break;
  1664  001656  EF53  F00B         	goto	l4328
  1665  00165A                     l4320:
  1666  00165A  FFFF               	dw	65535	; assembler added errata NOP
  1667                           
  1668                           ; BSR set to: 0
  1669                           ;usart.c: 183:             mexLength = 9;
  1670  00165C  0E09               	movlw	9
  1671  00165E  6E6C               	movwf	storeData@mexLength^0,c
  1672                           
  1673                           ;usart.c: 184:             break;
  1674  001660  EF53  F00B         	goto	l4328
  1675  001664                     l4322:
  1676  001664  FFFF               	dw	65535	; assembler added errata NOP
  1677                           
  1678                           ; BSR set to: 0
  1679                           ;usart.c: 186:             mexLength = 1;
  1680  001666  0E01               	movlw	1
  1681  001668  6E6C               	movwf	storeData@mexLength^0,c
  1682                           
  1683                           ;usart.c: 187:             break;
  1684  00166A  EF53  F00B         	goto	l4328
  1685  00166E                     l4326:
  1686  00166E  FFFF               	dw	65535	; assembler added errata NOP
  1687  001670  0100               	movlb	0	; () banked
  1688  001672  51C8               	movf	storeData@receivedMex& (0+255),w,b
  1689  001674  6E19               	movwf	??_storeData^0,c
  1690  001676  6A1A               	clrf	(??_storeData+1)^0,c
  1691                           
  1692                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1693                           ; Switch size 1, requested type "simple"
  1694                           ; Number of cases is 1, Range of values is 0 to 0
  1695                           ; switch strategies available:
  1696                           ; Name         Instructions Cycles
  1697                           ; simple_byte            4     3 (average)
  1698                           ;	Chosen strategy is simple_byte
  1699  001678  501A               	movf	(??_storeData+1)^0,w,c
  1700  00167A  0A00               	xorlw	0	; case 0
  1701  00167C  B4D8               	btfsc	status,2,c
  1702  00167E  EF43  F00B         	goto	l4694
  1703  001682  EF53  F00B         	goto	l4328
  1704  001686                     l4694:
  1705  001686  FFFF               	dw	65535	; assembler added errata NOP
  1706                           
  1707                           ; BSR set to: 0
  1708                           ; Switch size 1, requested type "simple"
  1709                           ; Number of cases is 3, Range of values is 0 to 2
  1710                           ; switch strategies available:
  1711                           ; Name         Instructions Cycles
  1712                           ; simple_byte           10     6 (average)
  1713                           ;	Chosen strategy is simple_byte
  1714  001688  5019               	movf	??_storeData^0,w,c
  1715  00168A  0A00               	xorlw	0	; case 0
  1716  00168C  B4D8               	btfsc	status,2,c
  1717  00168E  EF28  F00B         	goto	l4318
  1718  001692  0A01               	xorlw	1	; case 1
  1719  001694  B4D8               	btfsc	status,2,c
  1720  001696  EF2D  F00B         	goto	l4320
  1721  00169A  0A03               	xorlw	3	; case 2
  1722  00169C  B4D8               	btfsc	status,2,c
  1723  00169E  EF32  F00B         	goto	l4322
  1724  0016A2  EF53  F00B         	goto	l4328
  1725  0016A6                     l4328:
  1726  0016A6  FFFF               	dw	65535	; assembler added errata NOP
  1727                           
  1728                           ; BSR set to: 0
  1729                           ;usart.c: 194:     if(counter >= mexLength){
  1730  0016A8  506C               	movf	storeData@mexLength^0,w,c
  1731  0016AA  5C55               	subwf	storeData@counter^0,w,c
  1732  0016AC  A0D8               	btfss	status,0,c
  1733  0016AE  EF5B  F00B         	goto	u3661
  1734  0016B2  EF5E  F00B         	goto	u3660
  1735  0016B6                     u3661:
  1736  0016B6  FFFF               	dw	65535	; assembler added errata NOP
  1737  0016B8  EFD6  F00B         	goto	l583
  1738  0016BC                     u3660:
  1739  0016BC  FFFF               	dw	65535	; assembler added errata NOP
  1740  0016BE                     
  1741                           ; BSR set to: 0
  1742                           ;usart.c: 195:         counter = 0;
  1743  0016BE  0E00               	movlw	0
  1744  0016C0  6E55               	movwf	storeData@counter^0,c
  1745                           
  1746                           ;usart.c: 198:         switch(receivedMex[0]){
  1747  0016C2  EFBB  F00B         	goto	l4350
  1748  0016C6                     l4332:
  1749  0016C6  FFFF               	dw	65535	; assembler added errata NOP
  1750                           
  1751                           ; BSR set to: 0
  1752                           ;usart.c: 200:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  1753  0016C8  5058               	movf	_dataCounter^0,w,c
  1754  0016CA  0D04               	mullw	4
  1755  0016CC  0ED1               	movlw	low _dataSequence
  1756  0016CE  24F3               	addwf	243,w,c
  1757  0016D0  6ED9               	movwf	fsr2l,c
  1758  0016D2  0E00               	movlw	high _dataSequence
  1759  0016D4  20F4               	addwfc	prodh,w,c
  1760  0016D6  6EDA               	movwf	fsr2h,c
  1761  0016D8  C0C9  FFDF         	movff	storeData@receivedMex+1,indf2
  1762                           
  1763                           ;usart.c: 201:                 dataSequence[dataCounter].posX = receivedMex[2] * 10;
  1764  0016DC  5058               	movf	_dataCounter^0,w,c
  1765  0016DE  0D04               	mullw	4
  1766  0016E0  0ED2               	movlw	low (_dataSequence+1)
  1767  0016E2  24F3               	addwf	243,w,c
  1768  0016E4  6ED9               	movwf	fsr2l,c
  1769  0016E6  0E00               	movlw	high (_dataSequence+1)
  1770  0016E8  20F4               	addwfc	prodh,w,c
  1771  0016EA  6EDA               	movwf	fsr2h,c
  1772  0016EC  51CA               	movf	(storeData@receivedMex+2)& (0+255),w,b
  1773  0016EE  0D0A               	mullw	10
  1774  0016F0  CFF3 FFDF          	movff	prodl,indf2
  1775                           
  1776                           ;usart.c: 202:                 dataSequence[dataCounter].posY = receivedMex[3] * 10;
  1777  0016F4  5058               	movf	_dataCounter^0,w,c
  1778  0016F6  0D04               	mullw	4
  1779  0016F8  0ED3               	movlw	low (_dataSequence+2)
  1780  0016FA  24F3               	addwf	243,w,c
  1781  0016FC  6ED9               	movwf	fsr2l,c
  1782  0016FE  0E00               	movlw	high (_dataSequence+2)
  1783  001700  20F4               	addwfc	prodh,w,c
  1784  001702  6EDA               	movwf	fsr2h,c
  1785  001704  51CB               	movf	(storeData@receivedMex+3)& (0+255),w,b
  1786  001706  0D0A               	mullw	10
  1787  001708  CFF3 FFDF          	movff	prodl,indf2
  1788                           
  1789                           ;usart.c: 203:                 dataSequence[dataCounter].rotation = receivedMex[4];
  1790  00170C  5058               	movf	_dataCounter^0,w,c
  1791  00170E  0D04               	mullw	4
  1792  001710  0ED4               	movlw	low (_dataSequence+3)
  1793  001712  24F3               	addwf	243,w,c
  1794  001714  6ED9               	movwf	fsr2l,c
  1795  001716  0E00               	movlw	high (_dataSequence+3)
  1796  001718  20F4               	addwfc	prodh,w,c
  1797  00171A  6EDA               	movwf	fsr2h,c
  1798  00171C  C0CC  FFDF         	movff	storeData@receivedMex+4,indf2
  1799  001720                     
  1800                           ; BSR set to: 0
  1801                           ;usart.c: 205:                 dataCounter++;
  1802  001720  2A58               	incf	_dataCounter^0,f,c
  1803                           
  1804                           ;usart.c: 206:                 break;
  1805  001722  EFD6  F00B         	goto	l583
  1806  001726                     l580:
  1807  001726  FFFF               	dw	65535	; assembler added errata NOP
  1808                           
  1809                           ; BSR set to: 0
  1810                           ;usart.c: 209:                 newSequenceData.L = receivedMex[1];
  1811  001728  C0C9  F0E5         	movff	storeData@receivedMex+1,_newSequenceData
  1812                           
  1813                           ;usart.c: 210:                 newSequenceData.W = receivedMex[2];
  1814  00172C  C0CA  F0E6         	movff	storeData@receivedMex+2,_newSequenceData+1
  1815  001730                     
  1816                           ; BSR set to: 0
  1817                           ;usart.c: 211:                 newSequenceData.init_posX = receivedMex[3] * 10;
  1818  001730  51CB               	movf	(storeData@receivedMex+3)& (0+255),w,b
  1819  001732  0D0A               	mullw	10
  1820  001734  CFF3 F0E7          	movff	prodl,_newSequenceData+2
  1821                           
  1822                           ;usart.c: 212:                 newSequenceData.init_posY = receivedMex[4] * 10;
  1823  001738  51CC               	movf	(storeData@receivedMex+4)& (0+255),w,b
  1824  00173A  0D0A               	mullw	10
  1825  00173C  CFF3 F0E8          	movff	prodl,_newSequenceData+3
  1826  001740                     
  1827                           ; BSR set to: 0
  1828                           ;usart.c: 213:                 newSequenceData.init_rot = receivedMex[5];
  1829  001740  C0CD  F0E9         	movff	storeData@receivedMex+5,_newSequenceData+4
  1830                           
  1831                           ;usart.c: 214:                 newSequenceData.end_posX = receivedMex[6] * 10;
  1832  001744  51CE               	movf	(storeData@receivedMex+6)& (0+255),w,b
  1833  001746  0D0A               	mullw	10
  1834  001748  CFF3 F0EA          	movff	prodl,_newSequenceData+5
  1835                           
  1836                           ;usart.c: 215:                 newSequenceData.end_posY = receivedMex[7] * 10;
  1837  00174C  51CF               	movf	(storeData@receivedMex+7)& (0+255),w,b
  1838  00174E  0D0A               	mullw	10
  1839  001750  CFF3 F0EB          	movff	prodl,_newSequenceData+6
  1840  001754                     
  1841                           ; BSR set to: 0
  1842                           ;usart.c: 216:                 newSequenceData.end_rot = receivedMex[8];
  1843  001754  C0D0  F0EC         	movff	storeData@receivedMex+8,_newSequenceData+7
  1844  001758                     
  1845                           ; BSR set to: 0
  1846                           ;usart.c: 218:                 _newSequence = 1;
  1847  001758  0E01               	movlw	1
  1848  00175A  6E56               	movwf	__newSequence^0,c
  1849                           
  1850                           ;usart.c: 219:                 break;
  1851  00175C  EFD6  F00B         	goto	l583
  1852  001760                     l4344:
  1853  001760  FFFF               	dw	65535	; assembler added errata NOP
  1854                           
  1855                           ; BSR set to: 0
  1856                           ;usart.c: 222:                 _fatalError = 1;
  1857  001762  0E01               	movlw	1
  1858  001764  6E57               	movwf	__fatalError^0,c
  1859                           
  1860                           ;usart.c: 223:                 break;
  1861  001766  EFD6  F00B         	goto	l583
  1862  00176A                     l4346:
  1863  00176A  FFFF               	dw	65535	; assembler added errata NOP
  1864                           
  1865                           ; BSR set to: 0
  1866                           ;usart.c: 226:                 printError(8);
  1867  00176C  0E08               	movlw	8
  1868  00176E  EC32  F00D         	call	_printError
  1869                           
  1870                           ;usart.c: 227:                 break;
  1871  001772  EFD6  F00B         	goto	l583
  1872  001776                     l4350:
  1873  001776  FFFF               	dw	65535	; assembler added errata NOP
  1874                           
  1875                           ; BSR set to: 0
  1876  001778  51C8               	movf	storeData@receivedMex& (0+255),w,b
  1877  00177A  6E19               	movwf	??_storeData^0,c
  1878  00177C  6A1A               	clrf	(??_storeData+1)^0,c
  1879                           
  1880                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1881                           ; Switch size 1, requested type "simple"
  1882                           ; Number of cases is 1, Range of values is 0 to 0
  1883                           ; switch strategies available:
  1884                           ; Name         Instructions Cycles
  1885                           ; simple_byte            4     3 (average)
  1886                           ;	Chosen strategy is simple_byte
  1887  00177E  501A               	movf	(??_storeData+1)^0,w,c
  1888  001780  0A00               	xorlw	0	; case 0
  1889  001782  B4D8               	btfsc	status,2,c
  1890  001784  EFC6  F00B         	goto	l4696
  1891  001788  EFB5  F00B         	goto	l4346
  1892  00178C                     l4696:
  1893  00178C  FFFF               	dw	65535	; assembler added errata NOP
  1894                           
  1895                           ; BSR set to: 0
  1896                           ; Switch size 1, requested type "simple"
  1897                           ; Number of cases is 3, Range of values is 0 to 2
  1898                           ; switch strategies available:
  1899                           ; Name         Instructions Cycles
  1900                           ; simple_byte           10     6 (average)
  1901                           ;	Chosen strategy is simple_byte
  1902  00178E  5019               	movf	??_storeData^0,w,c
  1903  001790  0A00               	xorlw	0	; case 0
  1904  001792  B4D8               	btfsc	status,2,c
  1905  001794  EF63  F00B         	goto	l4332
  1906  001798  0A01               	xorlw	1	; case 1
  1907  00179A  B4D8               	btfsc	status,2,c
  1908  00179C  EF93  F00B         	goto	l580
  1909  0017A0  0A03               	xorlw	3	; case 2
  1910  0017A2  B4D8               	btfsc	status,2,c
  1911  0017A4  EFB0  F00B         	goto	l4344
  1912  0017A8  EFB5  F00B         	goto	l4346
  1913  0017AC                     l583:
  1914  0017AC  FFFF               	dw	65535	; assembler added errata NOP
  1915  0017AE  0012               	return		;funcret
  1916  0017B0  FFFF               	dw	65535	; errata NOP
  1917  0017B2                     __end_of_storeData:
  1918                           	callstack 0
  1919                           
  1920 ;; *************** function _printError *****************
  1921 ;; Defined at:
  1922 ;;		line 111 in file "usart.c"
  1923 ;; Parameters:    Size  Location     Type
  1924 ;;  errCode         1    wreg     unsigned char 
  1925 ;; Auto vars:     Size  Location     Type
  1926 ;;  errCode         1   23[COMRAM] unsigned char 
  1927 ;; Return value:  Size  Location     Type
  1928 ;;                  1    wreg      void 
  1929 ;; Registers used:
  1930 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1931 ;; Tracked objects:
  1932 ;;		On entry : 0/0
  1933 ;;		On exit  : 0/0
  1934 ;;		Unchanged: 0/0
  1935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1936 ;;      Params:         0       0       0       0       0       0       0
  1937 ;;      Locals:         1       0       0       0       0       0       0
  1938 ;;      Temps:          2       0       0       0       0       0       0
  1939 ;;      Totals:         3       0       0       0       0       0       0
  1940 ;;Total ram usage:        3 bytes
  1941 ;; Hardware stack levels used:    1
  1942 ;; Hardware stack levels required when called:    5
  1943 ;; This function calls:
  1944 ;;		_uartTx
  1945 ;; This function is called by:
  1946 ;;		_main
  1947 ;;		_storeData
  1948 ;; This function uses a non-reentrant model
  1949 ;;
  1950                           
  1951                           	psect	text6
  1952  001A64                     __ptext6:
  1953                           	callstack 0
  1954  001A64                     _printError:
  1955                           	callstack 0
  1956  001A64  FFFF               	dw	65535	; assembler added errata NOP
  1957                           
  1958                           ;incstack = 0
  1959                           ;printError@errCode stored from wreg
  1960  001A66  6E18               	movwf	printError@errCode^0,c
  1961  001A68                     
  1962                           ;usart.c: 113:     switch(errCode){
  1963  001A68  EF8E  F00D         	goto	l4168
  1964  001A6C                     l4150:
  1965  001A6C  FFFF               	dw	65535	; assembler added errata NOP
  1966                           
  1967                           ;usart.c: 115:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  1968  001A6E  0E92               	movlw	low _errString_Feed
  1969  001A70  6E12               	movwf	uartTx@ptr^0,c
  1970  001A72  0E00               	movlw	high _errString_Feed
  1971  001A74  6E13               	movwf	(uartTx@ptr+1)^0,c
  1972  001A76  0E1E               	movlw	30
  1973  001A78  6E14               	movwf	uartTx@length^0,c
  1974  001A7A  EC27  F011         	call	_uartTx	;wreg free
  1975                           
  1976                           ;usart.c: 116:             break;
  1977  001A7E  EFBD  F00D         	goto	l550
  1978  001A82                     l4152:
  1979  001A82  FFFF               	dw	65535	; assembler added errata NOP
  1980                           
  1981                           ;usart.c: 118:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  1982  001A84  0E5E               	movlw	low _errString_ZEND
  1983  001A86  6E12               	movwf	uartTx@ptr^0,c
  1984  001A88  0E01               	movlw	high _errString_ZEND
  1985  001A8A  6E13               	movwf	(uartTx@ptr+1)^0,c
  1986  001A8C  0E29               	movlw	41
  1987  001A8E  6E14               	movwf	uartTx@length^0,c
  1988  001A90  EC27  F011         	call	_uartTx	;wreg free
  1989                           
  1990                           ;usart.c: 119:             break;
  1991  001A94  EFBD  F00D         	goto	l550
  1992  001A98                     l4154:
  1993  001A98  FFFF               	dw	65535	; assembler added errata NOP
  1994                           
  1995                           ;usart.c: 121:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  1996  001A9A  0E87               	movlw	low _errString_Reset
  1997  001A9C  6E12               	movwf	uartTx@ptr^0,c
  1998  001A9E  0E01               	movlw	high _errString_Reset
  1999  001AA0  6E13               	movwf	(uartTx@ptr+1)^0,c
  2000  001AA2  0E28               	movlw	40
  2001  001AA4  6E14               	movwf	uartTx@length^0,c
  2002  001AA6  EC27  F011         	call	_uartTx	;wreg free
  2003                           
  2004                           ;usart.c: 122:             break;
  2005  001AAA  EFBD  F00D         	goto	l550
  2006  001AAE                     l4156:
  2007  001AAE  FFFF               	dw	65535	; assembler added errata NOP
  2008                           
  2009                           ;usart.c: 124:             uartTx(&errString_Point[0], sizeof(errString_Point));
  2010  001AB0  0E35               	movlw	low _errString_Point
  2011  001AB2  6E12               	movwf	uartTx@ptr^0,c
  2012  001AB4  0E01               	movlw	high _errString_Point
  2013  001AB6  6E13               	movwf	(uartTx@ptr+1)^0,c
  2014  001AB8  0E29               	movlw	41
  2015  001ABA  6E14               	movwf	uartTx@length^0,c
  2016  001ABC  EC27  F011         	call	_uartTx	;wreg free
  2017                           
  2018                           ;usart.c: 125:             break;
  2019  001AC0  EFBD  F00D         	goto	l550
  2020  001AC4                     l4158:
  2021  001AC4  FFFF               	dw	65535	; assembler added errata NOP
  2022                           
  2023                           ;usart.c: 127:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  2024  001AC6  0ED6               	movlw	low _errString_Bound
  2025  001AC8  6E12               	movwf	uartTx@ptr^0,c
  2026  001ACA  0E01               	movlw	high _errString_Bound
  2027  001ACC  6E13               	movwf	(uartTx@ptr+1)^0,c
  2028  001ACE  0E21               	movlw	33
  2029  001AD0  6E14               	movwf	uartTx@length^0,c
  2030  001AD2  EC27  F011         	call	_uartTx	;wreg free
  2031                           
  2032                           ;usart.c: 128:             break;
  2033  001AD6  EFBD  F00D         	goto	l550
  2034  001ADA                     l4160:
  2035  001ADA  FFFF               	dw	65535	; assembler added errata NOP
  2036                           
  2037                           ;usart.c: 130:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  2038  001ADC  0E00               	movlw	low _errString_PointZ
  2039  001ADE  6E12               	movwf	uartTx@ptr^0,c
  2040  001AE0  0E01               	movlw	high _errString_PointZ
  2041  001AE2  6E13               	movwf	(uartTx@ptr+1)^0,c
  2042  001AE4  0E35               	movlw	53
  2043  001AE6  6E14               	movwf	uartTx@length^0,c
  2044  001AE8  EC27  F011         	call	_uartTx	;wreg free
  2045                           
  2046                           ;usart.c: 131:             break;
  2047  001AEC  EFBD  F00D         	goto	l550
  2048  001AF0                     l4162:
  2049  001AF0  FFFF               	dw	65535	; assembler added errata NOP
  2050                           
  2051                           ;usart.c: 133:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  2052  001AF2  0EAF               	movlw	low _errString_Fatal
  2053  001AF4  6E12               	movwf	uartTx@ptr^0,c
  2054  001AF6  0E01               	movlw	high _errString_Fatal
  2055  001AF8  6E13               	movwf	(uartTx@ptr+1)^0,c
  2056  001AFA  0E27               	movlw	39
  2057  001AFC  6E14               	movwf	uartTx@length^0,c
  2058  001AFE  EC27  F011         	call	_uartTx	;wreg free
  2059                           
  2060                           ;usart.c: 134:             break;
  2061  001B02  EFBD  F00D         	goto	l550
  2062  001B06                     l4164:
  2063  001B06  FFFF               	dw	65535	; assembler added errata NOP
  2064                           
  2065                           ;usart.c: 136:             uartTx(&errString_Command[0], sizeof(errString_Command));
  2066  001B08  0EB0               	movlw	low _errString_Command
  2067  001B0A  6E12               	movwf	uartTx@ptr^0,c
  2068  001B0C  0E00               	movlw	high _errString_Command
  2069  001B0E  6E13               	movwf	(uartTx@ptr+1)^0,c
  2070  001B10  0E18               	movlw	24
  2071  001B12  6E14               	movwf	uartTx@length^0,c
  2072  001B14  EC27  F011         	call	_uartTx	;wreg free
  2073                           
  2074                           ;usart.c: 137:             break;
  2075  001B18  EFBD  F00D         	goto	l550
  2076  001B1C                     l4168:
  2077  001B1C  FFFF               	dw	65535	; assembler added errata NOP
  2078  001B1E  5018               	movf	printError@errCode^0,w,c
  2079  001B20  6E16               	movwf	??_printError^0,c
  2080  001B22  6A17               	clrf	(??_printError+1)^0,c
  2081                           
  2082                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2083                           ; Switch size 1, requested type "simple"
  2084                           ; Number of cases is 1, Range of values is 0 to 0
  2085                           ; switch strategies available:
  2086                           ; Name         Instructions Cycles
  2087                           ; simple_byte            4     3 (average)
  2088                           ;	Chosen strategy is simple_byte
  2089  001B24  5017               	movf	(??_printError+1)^0,w,c
  2090  001B26  0A00               	xorlw	0	; case 0
  2091  001B28  B4D8               	btfsc	status,2,c
  2092  001B2A  EF99  F00D         	goto	l4698
  2093  001B2E  EFBD  F00D         	goto	l550
  2094  001B32                     l4698:
  2095  001B32  FFFF               	dw	65535	; assembler added errata NOP
  2096                           
  2097                           ; Switch size 1, requested type "simple"
  2098                           ; Number of cases is 8, Range of values is 1 to 8
  2099                           ; switch strategies available:
  2100                           ; Name         Instructions Cycles
  2101                           ; simple_byte           25    13 (average)
  2102                           ;	Chosen strategy is simple_byte
  2103  001B34  5016               	movf	??_printError^0,w,c
  2104  001B36  0A01               	xorlw	1	; case 1
  2105  001B38  B4D8               	btfsc	status,2,c
  2106  001B3A  EF36  F00D         	goto	l4150
  2107  001B3E  0A03               	xorlw	3	; case 2
  2108  001B40  B4D8               	btfsc	status,2,c
  2109  001B42  EF41  F00D         	goto	l4152
  2110  001B46  0A01               	xorlw	1	; case 3
  2111  001B48  B4D8               	btfsc	status,2,c
  2112  001B4A  EF4C  F00D         	goto	l4154
  2113  001B4E  0A07               	xorlw	7	; case 4
  2114  001B50  B4D8               	btfsc	status,2,c
  2115  001B52  EF57  F00D         	goto	l4156
  2116  001B56  0A01               	xorlw	1	; case 5
  2117  001B58  B4D8               	btfsc	status,2,c
  2118  001B5A  EF62  F00D         	goto	l4158
  2119  001B5E  0A03               	xorlw	3	; case 6
  2120  001B60  B4D8               	btfsc	status,2,c
  2121  001B62  EF6D  F00D         	goto	l4160
  2122  001B66  0A01               	xorlw	1	; case 7
  2123  001B68  B4D8               	btfsc	status,2,c
  2124  001B6A  EF78  F00D         	goto	l4162
  2125  001B6E  0A0F               	xorlw	15	; case 8
  2126  001B70  B4D8               	btfsc	status,2,c
  2127  001B72  EF83  F00D         	goto	l4164
  2128  001B76  EFBD  F00D         	goto	l550
  2129  001B7A                     l550:
  2130  001B7A  FFFF               	dw	65535	; assembler added errata NOP
  2131  001B7C  0012               	return		;funcret
  2132  001B7E  FFFF               	dw	65535	; errata NOP
  2133  001B80                     __end_of_printError:
  2134                           	callstack 0
  2135                           
  2136 ;; *************** function _uartTx *****************
  2137 ;; Defined at:
  2138 ;;		line 148 in file "usart.c"
  2139 ;; Parameters:    Size  Location     Type
  2140 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  2141 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  2142 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  2143 ;;  length          1   19[COMRAM] unsigned char 
  2144 ;; Auto vars:     Size  Location     Type
  2145 ;;  i               1   20[COMRAM] unsigned char 
  2146 ;; Return value:  Size  Location     Type
  2147 ;;                  1    wreg      void 
  2148 ;; Registers used:
  2149 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2150 ;; Tracked objects:
  2151 ;;		On entry : 0/0
  2152 ;;		On exit  : 0/0
  2153 ;;		Unchanged: 0/0
  2154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2155 ;;      Params:         3       0       0       0       0       0       0
  2156 ;;      Locals:         1       0       0       0       0       0       0
  2157 ;;      Temps:          0       0       0       0       0       0       0
  2158 ;;      Totals:         4       0       0       0       0       0       0
  2159 ;;Total ram usage:        4 bytes
  2160 ;; Hardware stack levels used:    1
  2161 ;; Hardware stack levels required when called:    4
  2162 ;; This function calls:
  2163 ;;		Nothing
  2164 ;; This function is called by:
  2165 ;;		_printError
  2166 ;; This function uses a non-reentrant model
  2167 ;;
  2168                           
  2169                           	psect	text7
  2170  00224E                     __ptext7:
  2171                           	callstack 0
  2172  00224E                     _uartTx:
  2173                           	callstack 0
  2174  00224E  FFFF               	dw	65535	; assembler added errata NOP
  2175  002250                     
  2176                           ;usart.c: 148: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 149: {;usa
      +                          rt.c: 151:     for(char i = 1; i < length; i++){
  2177  002250  0E01               	movlw	1
  2178  002252  6E15               	movwf	uartTx@i^0,c
  2179  002254  EF40  F011         	goto	l3666
  2180  002258                     l3662:
  2181  002258  FFFF               	dw	65535	; assembler added errata NOP
  2182                           
  2183                           ;usart.c: 153:         TXREG = *ptr;
  2184  00225A  C012  FFD9         	movff	uartTx@ptr,fsr2l
  2185  00225E  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  2186  002262  50DF               	movf	indf2,w,c
  2187  002264  6EAD               	movwf	173,c	;volatile
  2188  002266                     l555:
  2189  002266  FFFF               	dw	65535	; assembler added errata NOP
  2190  002268  A2AC               	btfss	172,1,c	;volatile
  2191  00226A  EF39  F011         	goto	u2641
  2192  00226E  EF3C  F011         	goto	u2640
  2193  002272                     u2641:
  2194  002272  FFFF               	dw	65535	; assembler added errata NOP
  2195  002274  EF33  F011         	goto	l555
  2196  002278                     u2640:
  2197  002278  FFFF               	dw	65535	; assembler added errata NOP
  2198  00227A                     
  2199                           ;usart.c: 157:         ptr++;
  2200  00227A  4A12               	infsnz	uartTx@ptr^0,f,c
  2201  00227C  2A13               	incf	(uartTx@ptr+1)^0,f,c
  2202                           
  2203                           ;usart.c: 158:     }
  2204  00227E  2A15               	incf	uartTx@i^0,f,c
  2205  002280                     l3666:
  2206  002280  FFFF               	dw	65535	; assembler added errata NOP
  2207  002282  5014               	movf	uartTx@length^0,w,c
  2208  002284  5C15               	subwf	uartTx@i^0,w,c
  2209  002286  A0D8               	btfss	status,0,c
  2210  002288  EF48  F011         	goto	u2651
  2211  00228C  EF4B  F011         	goto	u2650
  2212  002290                     u2651:
  2213  002290  FFFF               	dw	65535	; assembler added errata NOP
  2214  002292  EF2C  F011         	goto	l3662
  2215  002296                     u2650:
  2216  002296  FFFF               	dw	65535	; assembler added errata NOP
  2217  002298  0012               	return		;funcret
  2218  00229A  FFFF               	dw	65535	; errata NOP
  2219  00229C                     __end_of_uartTx:
  2220                           	callstack 0
  2221                           
  2222 ;; *************** function _shiftData *****************
  2223 ;; Defined at:
  2224 ;;		line 81 in file "usart.c"
  2225 ;; Parameters:    Size  Location     Type
  2226 ;;		None
  2227 ;; Auto vars:     Size  Location     Type
  2228 ;;  i               1   19[COMRAM] unsigned char 
  2229 ;; Return value:  Size  Location     Type
  2230 ;;                  1    wreg      void 
  2231 ;; Registers used:
  2232 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2233 ;; Tracked objects:
  2234 ;;		On entry : 0/0
  2235 ;;		On exit  : 0/0
  2236 ;;		Unchanged: 0/0
  2237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2238 ;;      Params:         0       0       0       0       0       0       0
  2239 ;;      Locals:         1       0       0       0       0       0       0
  2240 ;;      Temps:          2       0       0       0       0       0       0
  2241 ;;      Totals:         3       0       0       0       0       0       0
  2242 ;;Total ram usage:        3 bytes
  2243 ;; Hardware stack levels used:    1
  2244 ;; Hardware stack levels required when called:    4
  2245 ;; This function calls:
  2246 ;;		Nothing
  2247 ;; This function is called by:
  2248 ;;		_main
  2249 ;; This function uses a non-reentrant model
  2250 ;;
  2251                           
  2252                           	psect	text8
  2253  0021EE                     __ptext8:
  2254                           	callstack 0
  2255  0021EE                     _shiftData:
  2256                           	callstack 0
  2257  0021EE  FFFF               	dw	65535	; assembler added errata NOP
  2258  0021F0                     
  2259                           ;usart.c: 82:     char i;;usart.c: 84:     for(i = 0; i < 4; i++){
  2260  0021F0  0E00               	movlw	0
  2261  0021F2  6E14               	movwf	shiftData@i^0,c
  2262  0021F4                     l4446:
  2263  0021F4  FFFF               	dw	65535	; assembler added errata NOP
  2264                           
  2265                           ;usart.c: 85:         dataSequence[i] = dataSequence[i+1];
  2266  0021F6  5014               	movf	shiftData@i^0,w,c
  2267  0021F8  6E12               	movwf	??_shiftData^0,c
  2268  0021FA  6A13               	clrf	(??_shiftData+1)^0,c
  2269  0021FC  90D8               	bcf	status,0,c
  2270  0021FE  3612               	rlcf	??_shiftData^0,f,c
  2271  002200  3613               	rlcf	(??_shiftData+1)^0,f,c
  2272  002202  90D8               	bcf	status,0,c
  2273  002204  3612               	rlcf	??_shiftData^0,f,c
  2274  002206  3613               	rlcf	(??_shiftData+1)^0,f,c
  2275  002208  0ED5               	movlw	low (_dataSequence+4)
  2276  00220A  2412               	addwf	??_shiftData^0,w,c
  2277  00220C  6ED9               	movwf	fsr2l,c
  2278  00220E  0E00               	movlw	high (_dataSequence+4)
  2279  002210  2013               	addwfc	(??_shiftData+1)^0,w,c
  2280  002212  6EDA               	movwf	fsr2h,c
  2281  002214  5014               	movf	shiftData@i^0,w,c
  2282  002216  0D04               	mullw	4
  2283  002218  0ED1               	movlw	low _dataSequence
  2284  00221A  24F3               	addwf	243,w,c
  2285  00221C  6EE1               	movwf	fsr1l,c
  2286  00221E  0E00               	movlw	high _dataSequence
  2287  002220  20F4               	addwfc	prodh,w,c
  2288  002222  6EE2               	movwf	fsr1h,c
  2289  002224  CFDE FFE6          	movff	postinc2,postinc1
  2290  002228  CFDE FFE6          	movff	postinc2,postinc1
  2291  00222C  CFDE FFE6          	movff	postinc2,postinc1
  2292  002230  CFDE FFE6          	movff	postinc2,postinc1
  2293  002234                     
  2294                           ;usart.c: 86:     }
  2295  002234  2A14               	incf	shiftData@i^0,f,c
  2296  002236  0E03               	movlw	3
  2297  002238  6414               	cpfsgt	shiftData@i^0,c
  2298  00223A  EF21  F011         	goto	u3691
  2299  00223E  EF24  F011         	goto	u3690
  2300  002242                     u3691:
  2301  002242  FFFF               	dw	65535	; assembler added errata NOP
  2302  002244  EFFA  F010         	goto	l4446
  2303  002248                     u3690:
  2304  002248  FFFF               	dw	65535	; assembler added errata NOP
  2305  00224A  0012               	return		;funcret
  2306  00224C  FFFF               	dw	65535	; errata NOP
  2307  00224E                     __end_of_shiftData:
  2308                           	callstack 0
  2309                           
  2310 ;; *************** function _resetPosition *****************
  2311 ;; Defined at:
  2312 ;;		line 165 in file "motors.c"
  2313 ;; Parameters:    Size  Location     Type
  2314 ;;		None
  2315 ;; Auto vars:     Size  Location     Type
  2316 ;;  keepMovingZ     1   22[COMRAM] unsigned char 
  2317 ;;  keepMovingY     1   21[COMRAM] unsigned char 
  2318 ;;  keepMovingX     1   20[COMRAM] unsigned char 
  2319 ;; Return value:  Size  Location     Type
  2320 ;;                  1    wreg      unsigned char 
  2321 ;; Registers used:
  2322 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2323 ;; Tracked objects:
  2324 ;;		On entry : 0/0
  2325 ;;		On exit  : 0/0
  2326 ;;		Unchanged: 0/0
  2327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2328 ;;      Params:         0       0       0       0       0       0       0
  2329 ;;      Locals:         3       0       0       0       0       0       0
  2330 ;;      Temps:          0       0       0       0       0       0       0
  2331 ;;      Totals:         3       0       0       0       0       0       0
  2332 ;;Total ram usage:        3 bytes
  2333 ;; Hardware stack levels used:    1
  2334 ;; Hardware stack levels required when called:    5
  2335 ;; This function calls:
  2336 ;;		_resetStep
  2337 ;;		_stepMade
  2338 ;; This function is called by:
  2339 ;;		_main
  2340 ;; This function uses a non-reentrant model
  2341 ;;
  2342                           
  2343                           	psect	text9
  2344  001092                     __ptext9:
  2345                           	callstack 0
  2346  001092                     _resetPosition:
  2347                           	callstack 0
  2348  001092  FFFF               	dw	65535	; assembler added errata NOP
  2349  001094                     
  2350                           ;motors.c: 185:     motCounter[0][1] = -1;
  2351  001094  6860               	setf	(_motCounter+2)^0,c
  2352  001096  6861               	setf	(_motCounter+3)^0,c
  2353                           
  2354                           ;motors.c: 186:     motCounter[1][1] = -1;
  2355  001098  6864               	setf	(_motCounter+6)^0,c
  2356  00109A  6865               	setf	(_motCounter+7)^0,c
  2357                           
  2358                           ;motors.c: 187:     motCounter[2][1] = -1;
  2359  00109C  6868               	setf	(_motCounter+10)^0,c
  2360  00109E  6869               	setf	(_motCounter+11)^0,c
  2361  0010A0                     
  2362                           ;motors.c: 192:     unsigned char keepMovingX = 1;
  2363  0010A0  0E01               	movlw	1
  2364  0010A2  6E15               	movwf	resetPosition@keepMovingX^0,c
  2365                           
  2366                           ;motors.c: 193:     unsigned char keepMovingY = 1;
  2367  0010A4  0E01               	movlw	1
  2368  0010A6  6E16               	movwf	resetPosition@keepMovingY^0,c
  2369                           
  2370                           ;motors.c: 194:     unsigned char keepMovingZ = 1;
  2371  0010A8  0E01               	movlw	1
  2372  0010AA  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2373  0010AC                     
  2374                           ;motors.c: 197:     T2CONbits.TMR2ON = 1;
  2375  0010AC  84CA               	bsf	202,2,c	;volatile
  2376                           
  2377                           ;motors.c: 199:     tm0Error = 0;
  2378  0010AE  0E00               	movlw	0
  2379  0010B0  6E51               	movwf	(_tm0Error+1)^0,c
  2380  0010B2  0E00               	movlw	0
  2381  0010B4  6E50               	movwf	_tm0Error^0,c
  2382                           
  2383                           ;motors.c: 200:     tm0Limit = 250;
  2384  0010B6  0EFA               	movlw	250
  2385  0010B8  6E5D               	movwf	_tm0Limit^0,c
  2386  0010BA                     
  2387                           ;motors.c: 201:     T0CONbits.TMR0ON = 1;
  2388  0010BA  8ED5               	bsf	213,7,c	;volatile
  2389                           
  2390                           ;motors.c: 203:     while(keepMovingX || keepMovingY || keepMovingZ){
  2391  0010BC  EF1E  F009         	goto	l4252
  2392  0010C0                     l4206:
  2393  0010C0  FFFF               	dw	65535	; assembler added errata NOP
  2394                           
  2395                           ;motors.c: 206:         if(tm0Error){
  2396  0010C2  5050               	movf	_tm0Error^0,w,c
  2397  0010C4  1051               	iorwf	(_tm0Error+1)^0,w,c
  2398  0010C6  B4D8               	btfsc	status,2,c
  2399  0010C8  EF68  F008         	goto	u3501
  2400  0010CC  EF6B  F008         	goto	u3500
  2401  0010D0                     u3501:
  2402  0010D0  FFFF               	dw	65535	; assembler added errata NOP
  2403  0010D2  EF72  F008         	goto	l131
  2404  0010D6                     u3500:
  2405  0010D6  FFFF               	dw	65535	; assembler added errata NOP
  2406  0010D8                     
  2407                           ;motors.c: 214:             tm0Error = 3;
  2408  0010D8  0E00               	movlw	0
  2409  0010DA  6E51               	movwf	(_tm0Error+1)^0,c
  2410  0010DC  0E03               	movlw	3
  2411  0010DE  6E50               	movwf	_tm0Error^0,c
  2412                           
  2413                           ;motors.c: 215:             break;
  2414  0010E0  EF3C  F009         	goto	l132
  2415  0010E4                     l131:
  2416  0010E4  FFFF               	dw	65535	; assembler added errata NOP
  2417                           
  2418                           ;motors.c: 222:         if(PORTEbits.RE0 || !keepMovingX){
  2419  0010E6  B084               	btfsc	132,0,c	;volatile
  2420  0010E8  EF78  F008         	goto	u3511
  2421  0010EC  EF7B  F008         	goto	u3510
  2422  0010F0                     u3511:
  2423  0010F0  FFFF               	dw	65535	; assembler added errata NOP
  2424  0010F2  EF85  F008         	goto	l4212
  2425  0010F6                     u3510:
  2426  0010F6  FFFF               	dw	65535	; assembler added errata NOP
  2427  0010F8  5015               	movf	resetPosition@keepMovingX^0,w,c
  2428  0010FA  A4D8               	btfss	status,2,c
  2429  0010FC  EF82  F008         	goto	u3521
  2430  001100  EF85  F008         	goto	u3520
  2431  001104                     u3521:
  2432  001104  FFFF               	dw	65535	; assembler added errata NOP
  2433  001106  EF8A  F008         	goto	l4214
  2434  00110A                     u3520:
  2435  00110A                     l4212:
  2436  00110A  FFFF               	dw	65535	; assembler added errata NOP
  2437                           
  2438                           ;motors.c: 224:             keepMovingX = 0;
  2439  00110C  0E00               	movlw	0
  2440  00110E  6E15               	movwf	resetPosition@keepMovingX^0,c
  2441                           
  2442                           ;motors.c: 225:         }else{
  2443  001110  EFA7  F008         	goto	l4222
  2444  001114                     l4214:
  2445  001114  FFFF               	dw	65535	; assembler added errata NOP
  2446                           
  2447                           ;motors.c: 231:             motCounter[0][0] += motCounter[0][1];
  2448  001116  EE20  F060         	lfsr	2,_motCounter+2
  2449  00111A  50DE               	movf	postinc2,w,c
  2450  00111C  265E               	addwf	_motCounter^0,f,c
  2451  00111E  50DD               	movf	postdec2,w,c
  2452  001120  225F               	addwfc	(_motCounter+1)^0,f,c
  2453  001122                     
  2454                           ;motors.c: 232:             if(motCounter[0][0] < 0){
  2455  001122  BE5F               	btfsc	(_motCounter+1)^0,7,c
  2456  001124  EF99  F008         	goto	u3530
  2457  001128  EF96  F008         	goto	u3531
  2458  00112C                     u3531:
  2459  00112C  FFFF               	dw	65535	; assembler added errata NOP
  2460  00112E  EF9E  F008         	goto	l4220
  2461  001132                     u3530:
  2462  001132  FFFF               	dw	65535	; assembler added errata NOP
  2463  001134                     
  2464                           ;motors.c: 233:                 motCounter[0][0] = 3;
  2465  001134  0E00               	movlw	0
  2466  001136  6E5F               	movwf	(_motCounter+1)^0,c
  2467  001138  0E03               	movlw	3
  2468  00113A  6E5E               	movwf	_motCounter^0,c
  2469  00113C                     l4220:
  2470  00113C  FFFF               	dw	65535	; assembler added errata NOP
  2471                           
  2472                           ;motors.c: 236:             LATA = stepMot1[motCounter[0][0]];
  2473  00113E  0E8C               	movlw	low _stepMot1
  2474  001140  245E               	addwf	_motCounter^0,w,c
  2475  001142  6ED9               	movwf	fsr2l,c
  2476  001144  0E00               	movlw	high _stepMot1
  2477  001146  205F               	addwfc	(_motCounter+1)^0,w,c
  2478  001148  6EDA               	movwf	fsr2h,c
  2479  00114A  50DF               	movf	indf2,w,c
  2480  00114C  6E89               	movwf	137,c	;volatile
  2481  00114E                     l4222:
  2482  00114E  FFFF               	dw	65535	; assembler added errata NOP
  2483                           
  2484                           ;motors.c: 241:         if(PORTEbits.RE1 || !keepMovingY){
  2485  001150  B284               	btfsc	132,1,c	;volatile
  2486  001152  EFAD  F008         	goto	u3541
  2487  001156  EFB0  F008         	goto	u3540
  2488  00115A                     u3541:
  2489  00115A  FFFF               	dw	65535	; assembler added errata NOP
  2490  00115C  EFBA  F008         	goto	l4226
  2491  001160                     u3540:
  2492  001160  FFFF               	dw	65535	; assembler added errata NOP
  2493  001162  5016               	movf	resetPosition@keepMovingY^0,w,c
  2494  001164  A4D8               	btfss	status,2,c
  2495  001166  EFB7  F008         	goto	u3551
  2496  00116A  EFBA  F008         	goto	u3550
  2497  00116E                     u3551:
  2498  00116E  FFFF               	dw	65535	; assembler added errata NOP
  2499  001170  EFBF  F008         	goto	l4228
  2500  001174                     u3550:
  2501  001174                     l4226:
  2502  001174  FFFF               	dw	65535	; assembler added errata NOP
  2503                           
  2504                           ;motors.c: 243:             keepMovingY = 0;
  2505  001176  0E00               	movlw	0
  2506  001178  6E16               	movwf	resetPosition@keepMovingY^0,c
  2507                           
  2508                           ;motors.c: 244:         }else{
  2509  00117A  EFDC  F008         	goto	l4236
  2510  00117E                     l4228:
  2511  00117E  FFFF               	dw	65535	; assembler added errata NOP
  2512                           
  2513                           ;motors.c: 250:             motCounter[1][0] += motCounter[1][1];
  2514  001180  EE20  F064         	lfsr	2,_motCounter+6
  2515  001184  50DE               	movf	postinc2,w,c
  2516  001186  2662               	addwf	(_motCounter+4)^0,f,c
  2517  001188  50DD               	movf	postdec2,w,c
  2518  00118A  2263               	addwfc	(_motCounter+5)^0,f,c
  2519  00118C                     
  2520                           ;motors.c: 251:             if(motCounter[1][0] < 0){
  2521  00118C  BE63               	btfsc	(_motCounter+5)^0,7,c
  2522  00118E  EFCE  F008         	goto	u3560
  2523  001192  EFCB  F008         	goto	u3561
  2524  001196                     u3561:
  2525  001196  FFFF               	dw	65535	; assembler added errata NOP
  2526  001198  EFD3  F008         	goto	l4234
  2527  00119C                     u3560:
  2528  00119C  FFFF               	dw	65535	; assembler added errata NOP
  2529  00119E                     
  2530                           ;motors.c: 252:                 motCounter[1][0] = 3;
  2531  00119E  0E00               	movlw	0
  2532  0011A0  6E63               	movwf	(_motCounter+5)^0,c
  2533  0011A2  0E03               	movlw	3
  2534  0011A4  6E62               	movwf	(_motCounter+4)^0,c
  2535  0011A6                     l4234:
  2536  0011A6  FFFF               	dw	65535	; assembler added errata NOP
  2537                           
  2538                           ;motors.c: 255:             LATB = stepMot2[motCounter[1][0]];
  2539  0011A8  0E88               	movlw	low _stepMot2
  2540  0011AA  2462               	addwf	(_motCounter+4)^0,w,c
  2541  0011AC  6ED9               	movwf	fsr2l,c
  2542  0011AE  0E00               	movlw	high _stepMot2
  2543  0011B0  2063               	addwfc	(_motCounter+5)^0,w,c
  2544  0011B2  6EDA               	movwf	fsr2h,c
  2545  0011B4  50DF               	movf	indf2,w,c
  2546  0011B6  6E8A               	movwf	138,c	;volatile
  2547  0011B8                     l4236:
  2548  0011B8  FFFF               	dw	65535	; assembler added errata NOP
  2549                           
  2550                           ;motors.c: 260:         if(PORTEbits.RE2 || !keepMovingZ){
  2551  0011BA  B484               	btfsc	132,2,c	;volatile
  2552  0011BC  EFE2  F008         	goto	u3571
  2553  0011C0  EFE5  F008         	goto	u3570
  2554  0011C4                     u3571:
  2555  0011C4  FFFF               	dw	65535	; assembler added errata NOP
  2556  0011C6  EFEF  F008         	goto	l4240
  2557  0011CA                     u3570:
  2558  0011CA  FFFF               	dw	65535	; assembler added errata NOP
  2559  0011CC  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2560  0011CE  A4D8               	btfss	status,2,c
  2561  0011D0  EFEC  F008         	goto	u3581
  2562  0011D4  EFEF  F008         	goto	u3580
  2563  0011D8                     u3581:
  2564  0011D8  FFFF               	dw	65535	; assembler added errata NOP
  2565  0011DA  EFF4  F008         	goto	l4242
  2566  0011DE                     u3580:
  2567  0011DE                     l4240:
  2568  0011DE  FFFF               	dw	65535	; assembler added errata NOP
  2569                           
  2570                           ;motors.c: 262:             keepMovingZ = 0;
  2571  0011E0  0E00               	movlw	0
  2572  0011E2  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2573                           
  2574                           ;motors.c: 263:         }else{
  2575  0011E4  EF11  F009         	goto	l4250
  2576  0011E8                     l4242:
  2577  0011E8  FFFF               	dw	65535	; assembler added errata NOP
  2578                           
  2579                           ;motors.c: 269:             motCounter[2][0] += motCounter[2][1];
  2580  0011EA  EE20  F068         	lfsr	2,_motCounter+10
  2581  0011EE  50DE               	movf	postinc2,w,c
  2582  0011F0  2666               	addwf	(_motCounter+8)^0,f,c
  2583  0011F2  50DD               	movf	postdec2,w,c
  2584  0011F4  2267               	addwfc	(_motCounter+9)^0,f,c
  2585  0011F6                     
  2586                           ;motors.c: 270:             if(motCounter[2][0] < 0){
  2587  0011F6  BE67               	btfsc	(_motCounter+9)^0,7,c
  2588  0011F8  EF03  F009         	goto	u3590
  2589  0011FC  EF00  F009         	goto	u3591
  2590  001200                     u3591:
  2591  001200  FFFF               	dw	65535	; assembler added errata NOP
  2592  001202  EF08  F009         	goto	l4248
  2593  001206                     u3590:
  2594  001206  FFFF               	dw	65535	; assembler added errata NOP
  2595  001208                     
  2596                           ;motors.c: 271:                 motCounter[2][0] = 3;
  2597  001208  0E00               	movlw	0
  2598  00120A  6E67               	movwf	(_motCounter+9)^0,c
  2599  00120C  0E03               	movlw	3
  2600  00120E  6E66               	movwf	(_motCounter+8)^0,c
  2601  001210                     l4248:
  2602  001210  FFFF               	dw	65535	; assembler added errata NOP
  2603                           
  2604                           ;motors.c: 274:             LATC = stepMot3[motCounter[2][0]];
  2605  001212  0E84               	movlw	low _stepMot3
  2606  001214  2466               	addwf	(_motCounter+8)^0,w,c
  2607  001216  6ED9               	movwf	fsr2l,c
  2608  001218  0E00               	movlw	high _stepMot3
  2609  00121A  2067               	addwfc	(_motCounter+9)^0,w,c
  2610  00121C  6EDA               	movwf	fsr2h,c
  2611  00121E  50DF               	movf	indf2,w,c
  2612  001220  6E8B               	movwf	139,c	;volatile
  2613  001222                     l4250:
  2614  001222  FFFF               	dw	65535	; assembler added errata NOP
  2615  001224  EC22  F012         	call	_stepMade	;wreg free
  2616  001228  5012               	movf	?_stepMade^0,w,c
  2617  00122A  1013               	iorwf	(?_stepMade+1)^0,w,c
  2618  00122C  B4D8               	btfsc	status,2,c
  2619  00122E  EF1B  F009         	goto	u3601
  2620  001232  EF1E  F009         	goto	u3600
  2621  001236                     u3601:
  2622  001236  FFFF               	dw	65535	; assembler added errata NOP
  2623  001238  EF11  F009         	goto	l4250
  2624  00123C                     u3600:
  2625  00123C                     l4252:
  2626  00123C  FFFF               	dw	65535	; assembler added errata NOP
  2627                           
  2628                           ;motors.c: 203:     while(keepMovingX || keepMovingY || keepMovingZ){
  2629  00123E  5015               	movf	resetPosition@keepMovingX^0,w,c
  2630  001240  A4D8               	btfss	status,2,c
  2631  001242  EF25  F009         	goto	u3611
  2632  001246  EF28  F009         	goto	u3610
  2633  00124A                     u3611:
  2634  00124A  FFFF               	dw	65535	; assembler added errata NOP
  2635  00124C  EF60  F008         	goto	l4206
  2636  001250                     u3610:
  2637  001250  FFFF               	dw	65535	; assembler added errata NOP
  2638  001252  5016               	movf	resetPosition@keepMovingY^0,w,c
  2639  001254  A4D8               	btfss	status,2,c
  2640  001256  EF2F  F009         	goto	u3621
  2641  00125A  EF32  F009         	goto	u3620
  2642  00125E                     u3621:
  2643  00125E  FFFF               	dw	65535	; assembler added errata NOP
  2644  001260  EF60  F008         	goto	l4206
  2645  001264                     u3620:
  2646  001264  FFFF               	dw	65535	; assembler added errata NOP
  2647  001266  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2648  001268  A4D8               	btfss	status,2,c
  2649  00126A  EF39  F009         	goto	u3631
  2650  00126E  EF3C  F009         	goto	u3630
  2651  001272                     u3631:
  2652  001272  FFFF               	dw	65535	; assembler added errata NOP
  2653  001274  EF60  F008         	goto	l4206
  2654  001278                     u3630:
  2655  001278                     l132:
  2656  001278  FFFF               	dw	65535	; assembler added errata NOP
  2657                           
  2658                           ;motors.c: 294:     T0CONbits.TMR0ON = 0;
  2659  00127A  9ED5               	bcf	213,7,c	;volatile
  2660                           
  2661                           ;motors.c: 295:     T2CONbits.TMR2ON = 0;
  2662  00127C  94CA               	bcf	202,2,c	;volatile
  2663  00127E                     
  2664                           ;motors.c: 297:     TMR0 = 0;
  2665  00127E  0E00               	movlw	0
  2666  001280  6ED7               	movwf	215,c	;volatile
  2667  001282  0E00               	movlw	0
  2668  001284  6ED6               	movwf	214,c	;volatile
  2669                           
  2670                           ;motors.c: 298:     TMR2 = 0;
  2671  001286  0E00               	movlw	0
  2672  001288  6ECC               	movwf	204,c	;volatile
  2673  00128A                     
  2674                           ;motors.c: 301:     resetStep();
  2675  00128A  EC96  F012         	call	_resetStep	;wreg free
  2676  00128E                     
  2677                           ;motors.c: 304:     return(tm0Error);
  2678  00128E  5050               	movf	_tm0Error^0,w,c
  2679  001290  0012               	return		;funcret
  2680  001292  FFFF               	dw	65535	; errata NOP
  2681  001294                     __end_of_resetPosition:
  2682                           	callstack 0
  2683                           
  2684 ;; *************** function _resetNewSequence *****************
  2685 ;; Defined at:
  2686 ;;		line 73 in file "usart.c"
  2687 ;; Parameters:    Size  Location     Type
  2688 ;;		None
  2689 ;; Auto vars:     Size  Location     Type
  2690 ;;		None
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  1    wreg      void 
  2693 ;; Registers used:
  2694 ;;		wreg, status,2
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2700 ;;      Params:         0       0       0       0       0       0       0
  2701 ;;      Locals:         0       0       0       0       0       0       0
  2702 ;;      Temps:          0       0       0       0       0       0       0
  2703 ;;      Totals:         0       0       0       0       0       0       0
  2704 ;;Total ram usage:        0 bytes
  2705 ;; Hardware stack levels used:    1
  2706 ;; Hardware stack levels required when called:    4
  2707 ;; This function calls:
  2708 ;;		Nothing
  2709 ;; This function is called by:
  2710 ;;		_main
  2711 ;; This function uses a non-reentrant model
  2712 ;;
  2713                           
  2714                           	psect	text10
  2715  002504                     __ptext10:
  2716                           	callstack 0
  2717  002504                     _resetNewSequence:
  2718                           	callstack 0
  2719  002504  FFFF               	dw	65535	; assembler added errata NOP
  2720  002506                     
  2721                           ;usart.c: 74:     _newSequence = 0;
  2722  002506  0E00               	movlw	0
  2723  002508  6E56               	movwf	__newSequence^0,c
  2724  00250A  0012               	return		;funcret
  2725  00250C  FFFF               	dw	65535	; errata NOP
  2726  00250E                     __end_of_resetNewSequence:
  2727                           	callstack 0
  2728                           
  2729 ;; *************** function _reduceSeq *****************
  2730 ;; Defined at:
  2731 ;;		line 50 in file "usart.c"
  2732 ;; Parameters:    Size  Location     Type
  2733 ;;		None
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;		None
  2736 ;; Return value:  Size  Location     Type
  2737 ;;                  1    wreg      void 
  2738 ;; Registers used:
  2739 ;;		status,2, status,0
  2740 ;; Tracked objects:
  2741 ;;		On entry : 0/0
  2742 ;;		On exit  : 0/0
  2743 ;;		Unchanged: 0/0
  2744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2745 ;;      Params:         0       0       0       0       0       0       0
  2746 ;;      Locals:         0       0       0       0       0       0       0
  2747 ;;      Temps:          0       0       0       0       0       0       0
  2748 ;;      Totals:         0       0       0       0       0       0       0
  2749 ;;Total ram usage:        0 bytes
  2750 ;; Hardware stack levels used:    1
  2751 ;; Hardware stack levels required when called:    4
  2752 ;; This function calls:
  2753 ;;		Nothing
  2754 ;; This function is called by:
  2755 ;;		_main
  2756 ;; This function uses a non-reentrant model
  2757 ;;
  2758                           
  2759                           	psect	text11
  2760  002554                     __ptext11:
  2761                           	callstack 0
  2762  002554                     _reduceSeq:
  2763                           	callstack 0
  2764  002554  FFFF               	dw	65535	; assembler added errata NOP
  2765  002556                     
  2766                           ;usart.c: 51:     dataCounter--;
  2767  002556  0658               	decf	_dataCounter^0,f,c
  2768  002558  0012               	return		;funcret
  2769  00255A  FFFF               	dw	65535	; errata NOP
  2770  00255C                     __end_of_reduceSeq:
  2771                           	callstack 0
  2772                           
  2773 ;; *************** function _readSeq *****************
  2774 ;; Defined at:
  2775 ;;		line 57 in file "usart.c"
  2776 ;; Parameters:    Size  Location     Type
  2777 ;;		None
  2778 ;; Auto vars:     Size  Location     Type
  2779 ;;		None
  2780 ;; Return value:  Size  Location     Type
  2781 ;;                  1    wreg      unsigned char 
  2782 ;; Registers used:
  2783 ;;		wreg, status,2
  2784 ;; Tracked objects:
  2785 ;;		On entry : 0/0
  2786 ;;		On exit  : 0/0
  2787 ;;		Unchanged: 0/0
  2788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2789 ;;      Params:         0       0       0       0       0       0       0
  2790 ;;      Locals:         0       0       0       0       0       0       0
  2791 ;;      Temps:          0       0       0       0       0       0       0
  2792 ;;      Totals:         0       0       0       0       0       0       0
  2793 ;;Total ram usage:        0 bytes
  2794 ;; Hardware stack levels used:    1
  2795 ;; Hardware stack levels required when called:    4
  2796 ;; This function calls:
  2797 ;;		Nothing
  2798 ;; This function is called by:
  2799 ;;		_main
  2800 ;; This function uses a non-reentrant model
  2801 ;;
  2802                           
  2803                           	psect	text12
  2804  00255C                     __ptext12:
  2805                           	callstack 0
  2806  00255C                     _readSeq:
  2807                           	callstack 0
  2808  00255C  FFFF               	dw	65535	; assembler added errata NOP
  2809  00255E                     
  2810                           ;usart.c: 58:     return dataCounter;
  2811  00255E  5058               	movf	_dataCounter^0,w,c
  2812  002560  0012               	return		;funcret
  2813  002562  FFFF               	dw	65535	; errata NOP
  2814  002564                     __end_of_readSeq:
  2815                           	callstack 0
  2816                           
  2817 ;; *************** function _newSequence *****************
  2818 ;; Defined at:
  2819 ;;		line 65 in file "usart.c"
  2820 ;; Parameters:    Size  Location     Type
  2821 ;;		None
  2822 ;; Auto vars:     Size  Location     Type
  2823 ;;		None
  2824 ;; Return value:  Size  Location     Type
  2825 ;;                  1    wreg      unsigned char 
  2826 ;; Registers used:
  2827 ;;		wreg, status,2
  2828 ;; Tracked objects:
  2829 ;;		On entry : 0/0
  2830 ;;		On exit  : 0/0
  2831 ;;		Unchanged: 0/0
  2832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2833 ;;      Params:         0       0       0       0       0       0       0
  2834 ;;      Locals:         0       0       0       0       0       0       0
  2835 ;;      Temps:          0       0       0       0       0       0       0
  2836 ;;      Totals:         0       0       0       0       0       0       0
  2837 ;;Total ram usage:        0 bytes
  2838 ;; Hardware stack levels used:    1
  2839 ;; Hardware stack levels required when called:    4
  2840 ;; This function calls:
  2841 ;;		Nothing
  2842 ;; This function is called by:
  2843 ;;		_main
  2844 ;; This function uses a non-reentrant model
  2845 ;;
  2846                           
  2847                           	psect	text13
  2848  002564                     __ptext13:
  2849                           	callstack 0
  2850  002564                     _newSequence:
  2851                           	callstack 0
  2852  002564  FFFF               	dw	65535	; assembler added errata NOP
  2853  002566                     
  2854                           ;usart.c: 66:     return _newSequence;
  2855  002566  5056               	movf	__newSequence^0,w,c
  2856  002568  0012               	return		;funcret
  2857  00256A  FFFF               	dw	65535	; errata NOP
  2858  00256C                     __end_of_newSequence:
  2859                           	callstack 0
  2860                           
  2861 ;; *************** function _interruptInit *****************
  2862 ;; Defined at:
  2863 ;;		line 21 in file "interrupt.c"
  2864 ;; Parameters:    Size  Location     Type
  2865 ;;		None
  2866 ;; Auto vars:     Size  Location     Type
  2867 ;;		None
  2868 ;; Return value:  Size  Location     Type
  2869 ;;                  1    wreg      void 
  2870 ;; Registers used:
  2871 ;;		None
  2872 ;; Tracked objects:
  2873 ;;		On entry : 0/0
  2874 ;;		On exit  : 0/0
  2875 ;;		Unchanged: 0/0
  2876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2877 ;;      Params:         0       0       0       0       0       0       0
  2878 ;;      Locals:         0       0       0       0       0       0       0
  2879 ;;      Temps:          0       0       0       0       0       0       0
  2880 ;;      Totals:         0       0       0       0       0       0       0
  2881 ;;Total ram usage:        0 bytes
  2882 ;; Hardware stack levels used:    1
  2883 ;; Hardware stack levels required when called:    4
  2884 ;; This function calls:
  2885 ;;		Nothing
  2886 ;; This function is called by:
  2887 ;;		_main
  2888 ;; This function uses a non-reentrant model
  2889 ;;
  2890                           
  2891                           	psect	text14
  2892  002332                     __ptext14:
  2893                           	callstack 0
  2894  002332                     _interruptInit:
  2895                           	callstack 0
  2896  002332  FFFF               	dw	65535	; assembler added errata NOP
  2897  002334                     
  2898                           ;interrupt.c: 23:     if(!INTCONbits.GIE){
  2899  002334  BEF2               	btfsc	242,7,c	;volatile
  2900  002336  EF9F  F011         	goto	u3641
  2901  00233A  EFA2  F011         	goto	u3640
  2902  00233E                     u3641:
  2903  00233E  FFFF               	dw	65535	; assembler added errata NOP
  2904  002340  EFA4  F011         	goto	l444
  2905  002344                     u3640:
  2906  002344  FFFF               	dw	65535	; assembler added errata NOP
  2907  002346                     
  2908                           ;interrupt.c: 24:         INTCONbits.GIE = 1;
  2909  002346  8EF2               	bsf	242,7,c	;volatile
  2910  002348                     l444:
  2911  002348  FFFF               	dw	65535	; assembler added errata NOP
  2912                           
  2913                           ;interrupt.c: 26:     if(!INTCONbits.PEIE){
  2914  00234A  BCF2               	btfsc	242,6,c	;volatile
  2915  00234C  EFAA  F011         	goto	u3651
  2916  002350  EFAD  F011         	goto	u3650
  2917  002354                     u3651:
  2918  002354  FFFF               	dw	65535	; assembler added errata NOP
  2919  002356  EFAF  F011         	goto	l445
  2920  00235A                     u3650:
  2921  00235A  FFFF               	dw	65535	; assembler added errata NOP
  2922  00235C                     
  2923                           ;interrupt.c: 27:         INTCONbits.PEIE = 1;
  2924  00235C  8CF2               	bsf	242,6,c	;volatile
  2925  00235E                     l445:
  2926  00235E  FFFF               	dw	65535	; assembler added errata NOP
  2927                           
  2928                           ;interrupt.c: 31:     RCONbits.IPEN = 1;
  2929  002360  8ED0               	bsf	208,7,c	;volatile
  2930                           
  2931                           ;interrupt.c: 32:     INTCONbits.T0IE = 1;
  2932  002362  8AF2               	bsf	242,5,c	;volatile
  2933                           
  2934                           ;interrupt.c: 33:     PIE1bits.TMR1IE = 1;
  2935  002364  809D               	bsf	157,0,c	;volatile
  2936                           
  2937                           ;interrupt.c: 34:     PIE1bits.TMR2IE = 1;
  2938  002366  829D               	bsf	157,1,c	;volatile
  2939                           
  2940                           ;interrupt.c: 35:     PIE1bits.RC1IE = 1;
  2941  002368  8A9D               	bsf	157,5,c	;volatile
  2942  00236A  0012               	return		;funcret
  2943  00236C  FFFF               	dw	65535	; errata NOP
  2944  00236E                     __end_of_interruptInit:
  2945                           	callstack 0
  2946                           
  2947 ;; *************** function _initPinMotors *****************
  2948 ;; Defined at:
  2949 ;;		line 49 in file "motors.c"
  2950 ;; Parameters:    Size  Location     Type
  2951 ;;		None
  2952 ;; Auto vars:     Size  Location     Type
  2953 ;;		None
  2954 ;; Return value:  Size  Location     Type
  2955 ;;                  1    wreg      void 
  2956 ;; Registers used:
  2957 ;;		wreg, status,2, status,0
  2958 ;; Tracked objects:
  2959 ;;		On entry : 0/0
  2960 ;;		On exit  : 0/0
  2961 ;;		Unchanged: 0/0
  2962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2963 ;;      Params:         0       0       0       0       0       0       0
  2964 ;;      Locals:         0       0       0       0       0       0       0
  2965 ;;      Temps:          0       0       0       0       0       0       0
  2966 ;;      Totals:         0       0       0       0       0       0       0
  2967 ;;Total ram usage:        0 bytes
  2968 ;; Hardware stack levels used:    1
  2969 ;; Hardware stack levels required when called:    4
  2970 ;; This function calls:
  2971 ;;		Nothing
  2972 ;; This function is called by:
  2973 ;;		_main
  2974 ;; This function uses a non-reentrant model
  2975 ;;
  2976                           
  2977                           	psect	text15
  2978  0023C6                     __ptext15:
  2979                           	callstack 0
  2980  0023C6                     _initPinMotors:
  2981                           	callstack 0
  2982  0023C6  FFFF               	dw	65535	; assembler added errata NOP
  2983  0023C8                     
  2984                           ;motors.c: 51:     ADCON1bits.PCFG = 0x06;
  2985  0023C8  50C1               	movf	193,w,c	;volatile
  2986  0023CA  0BF0               	andlw	-16
  2987  0023CC  0906               	iorlw	6
  2988  0023CE  6EC1               	movwf	193,c	;volatile
  2989  0023D0                     
  2990                           ;motors.c: 52:     TRISA &= 0b11010001;
  2991  0023D0  0ED1               	movlw	209
  2992  0023D2  1692               	andwf	146,f,c	;volatile
  2993  0023D4                     
  2994                           ;motors.c: 54:     TRISB &= 0b00000010;
  2995  0023D4  0E02               	movlw	2
  2996  0023D6  1693               	andwf	147,f,c	;volatile
  2997  0023D8                     
  2998                           ;motors.c: 55:     TRISC &= 0b11000000;
  2999  0023D8  0EC0               	movlw	192
  3000  0023DA  1694               	andwf	148,f,c	;volatile
  3001  0023DC                     
  3002                           ;motors.c: 56:     TRISD &= 0b11000000;
  3003  0023DC  0EC0               	movlw	192
  3004  0023DE  1695               	andwf	149,f,c	;volatile
  3005  0023E0                     
  3006                           ;motors.c: 59:     TRISEbits.TRISE0 = 1;
  3007  0023E0  8096               	bsf	150,0,c	;volatile
  3008  0023E2                     
  3009                           ;motors.c: 60:     TRISEbits.TRISE1 = 1;
  3010  0023E2  8296               	bsf	150,1,c	;volatile
  3011  0023E4                     
  3012                           ;motors.c: 61:     TRISEbits.TRISE2 = 1;
  3013  0023E4  8496               	bsf	150,2,c	;volatile
  3014  0023E6                     
  3015                           ;motors.c: 64:     TRISDbits.TRISD7 = 1;
  3016  0023E6  8E95               	bsf	149,7,c	;volatile
  3017  0023E8  0012               	return		;funcret
  3018  0023EA  FFFF               	dw	65535	; errata NOP
  3019  0023EC                     __end_of_initPinMotors:
  3020                           	callstack 0
  3021                           
  3022 ;; *************** function _initADC *****************
  3023 ;; Defined at:
  3024 ;;		line 18 in file "adc.c"
  3025 ;; Parameters:    Size  Location     Type
  3026 ;;		None
  3027 ;; Auto vars:     Size  Location     Type
  3028 ;;		None
  3029 ;; Return value:  Size  Location     Type
  3030 ;;                  1    wreg      void 
  3031 ;; Registers used:
  3032 ;;		wreg, status,2
  3033 ;; Tracked objects:
  3034 ;;		On entry : 0/0
  3035 ;;		On exit  : 0/0
  3036 ;;		Unchanged: 0/0
  3037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3038 ;;      Params:         0       0       0       0       0       0       0
  3039 ;;      Locals:         0       0       0       0       0       0       0
  3040 ;;      Temps:          0       0       0       0       0       0       0
  3041 ;;      Totals:         0       0       0       0       0       0       0
  3042 ;;Total ram usage:        0 bytes
  3043 ;; Hardware stack levels used:    1
  3044 ;; Hardware stack levels required when called:    4
  3045 ;; This function calls:
  3046 ;;		Nothing
  3047 ;; This function is called by:
  3048 ;;		_main
  3049 ;; This function uses a non-reentrant model
  3050 ;;
  3051                           
  3052                           	psect	text16
  3053  0023EC                     __ptext16:
  3054                           	callstack 0
  3055  0023EC                     _initADC:
  3056                           	callstack 0
  3057  0023EC  FFFF               	dw	65535	; assembler added errata NOP
  3058  0023EE                     
  3059                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  3060  0023EE  50C2               	movf	194,w,c	;volatile
  3061  0023F0  0B3F               	andlw	-193
  3062  0023F2  0940               	iorlw	64
  3063  0023F4  6EC2               	movwf	194,c	;volatile
  3064  0023F6                     
  3065                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  3066  0023F6  8CC1               	bsf	193,6,c	;volatile
  3067                           
  3068                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  3069  0023F8  0EC7               	movlw	-57
  3070  0023FA  16C2               	andwf	194,f,c	;volatile
  3071  0023FC                     
  3072                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  3073  0023FC  94C2               	bcf	194,2,c	;volatile
  3074  0023FE                     
  3075                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  3076  0023FE  90C2               	bcf	194,0,c	;volatile
  3077  002400                     
  3078                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  3079  002400  9EC1               	bcf	193,7,c	;volatile
  3080                           
  3081                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  3082  002402  50C1               	movf	193,w,c	;volatile
  3083  002404  0BF0               	andlw	-16
  3084  002406  090E               	iorlw	14
  3085  002408  6EC1               	movwf	193,c	;volatile
  3086  00240A                     
  3087                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  3088  00240A  8C9D               	bsf	157,6,c	;volatile
  3089  00240C                     
  3090                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  3091  00240C  8C9F               	bsf	159,6,c	;volatile
  3092  00240E  0012               	return		;funcret
  3093  002410  FFFF               	dw	65535	; errata NOP
  3094  002412                     __end_of_initADC:
  3095                           	callstack 0
  3096                           
  3097 ;; *************** function _getNewSequence *****************
  3098 ;; Defined at:
  3099 ;;		line 43 in file "usart.c"
  3100 ;; Parameters:    Size  Location     Type
  3101 ;;		None
  3102 ;; Auto vars:     Size  Location     Type
  3103 ;;		None
  3104 ;; Return value:  Size  Location     Type
  3105 ;;                  2   17[COMRAM] PTR struct .
  3106 ;; Registers used:
  3107 ;;		wreg, status,2, status,0
  3108 ;; Tracked objects:
  3109 ;;		On entry : 0/0
  3110 ;;		On exit  : 0/0
  3111 ;;		Unchanged: 0/0
  3112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3113 ;;      Params:         2       0       0       0       0       0       0
  3114 ;;      Locals:         0       0       0       0       0       0       0
  3115 ;;      Temps:          0       0       0       0       0       0       0
  3116 ;;      Totals:         2       0       0       0       0       0       0
  3117 ;;Total ram usage:        2 bytes
  3118 ;; Hardware stack levels used:    1
  3119 ;; Hardware stack levels required when called:    4
  3120 ;; This function calls:
  3121 ;;		Nothing
  3122 ;; This function is called by:
  3123 ;;		_main
  3124 ;; This function uses a non-reentrant model
  3125 ;;
  3126                           
  3127                           	psect	text17
  3128  00249A                     __ptext17:
  3129                           	callstack 0
  3130  00249A                     _getNewSequence:
  3131                           	callstack 0
  3132  00249A  FFFF               	dw	65535	; assembler added errata NOP
  3133  00249C                     
  3134                           ;usart.c: 44:     return(&newSequenceData);
  3135  00249C  0EE5               	movlw	low _newSequenceData
  3136  00249E  6E12               	movwf	?_getNewSequence^0,c
  3137  0024A0  0E00               	movlw	high _newSequenceData
  3138  0024A2  6E13               	movwf	(?_getNewSequence+1)^0,c
  3139  0024A4  0012               	return		;funcret
  3140  0024A6  FFFF               	dw	65535	; errata NOP
  3141  0024A8                     __end_of_getNewSequence:
  3142                           	callstack 0
  3143                           
  3144 ;; *************** function _executeData *****************
  3145 ;; Defined at:
  3146 ;;		line 105 in file "main.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;		None
  3149 ;; Auto vars:     Size  Location     Type
  3150 ;;  data            2   11[BANK0 ] PTR struct .
  3151 ;;		 -> dataSequence(20), 
  3152 ;;  errCode         1   10[BANK0 ] unsigned char 
  3153 ;; Return value:  Size  Location     Type
  3154 ;;                  1    wreg      unsigned char 
  3155 ;; Registers used:
  3156 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3157 ;; Tracked objects:
  3158 ;;		On entry : 0/0
  3159 ;;		On exit  : 0/0
  3160 ;;		Unchanged: 0/0
  3161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3162 ;;      Params:         0       0       0       0       0       0       0
  3163 ;;      Locals:         0       3       0       0       0       0       0
  3164 ;;      Temps:          0       2       0       0       0       0       0
  3165 ;;      Totals:         0       5       0       0       0       0       0
  3166 ;;Total ram usage:        5 bytes
  3167 ;; Hardware stack levels used:    1
  3168 ;; Hardware stack levels required when called:    6
  3169 ;; This function calls:
  3170 ;;		_getData
  3171 ;;		_liftArm
  3172 ;;		_moveToPoint
  3173 ;;		_pickObject
  3174 ;;		_releaseObj
  3175 ;;		_rotateObj
  3176 ;;		_touchObject
  3177 ;;		_touchTherm
  3178 ;; This function is called by:
  3179 ;;		_main
  3180 ;; This function uses a non-reentrant model
  3181 ;;
  3182                           
  3183                           	psect	text18
  3184  000E0A                     __ptext18:
  3185                           	callstack 0
  3186  000E0A                     _executeData:
  3187                           	callstack 0
  3188  000E0A  FFFF               	dw	65535	; assembler added errata NOP
  3189  000E0C                     
  3190                           ;main.c: 106:     t_sequence *data = getData();
  3191  000E0C  EC54  F012         	call	_getData	;wreg free
  3192  000E10  C012  F0F8         	movff	?_getData,executeData@data
  3193  000E14  C013  F0F9         	movff	?_getData+1,executeData@data+1
  3194  000E18                     
  3195                           ;main.c: 112:     switch(data->feederLine){
  3196  000E18  EFB7  F007         	goto	l4402
  3197  000E1C                     l4374:
  3198  000E1C  FFFF               	dw	65535	; assembler added errata NOP
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;main.c: 115:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0
      +                          ], feeder1Pos[1]);
  3202  000E1E  C043  F015         	movff	_posVector,moveToPoint@x1
  3203  000E22  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3204  000E24  C044  F017         	movff	_posVector+1,moveToPoint@y1
  3205  000E28  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3206  000E2A  0E0D               	movlw	low _feeder1Pos
  3207  000E2C  6EF6               	movwf	tblptrl,c
  3208  000E2E                     	if	1	;There is more than 1 active tblptr byte
  3209  000E2E  0E06               	movlw	high _feeder1Pos
  3210  000E30  6EF7               	movwf	tblptrh,c
  3211  000E32                     	endif
  3212  000E32                     	if	0	;There are less than 3 active tblptr bytes
  3213  000E32                     	endif
  3214  000E32  0008               	tblrd		*
  3215  000E34  FFFF               	dw	65535	; errata NOP
  3216  000E36  50F5               	movf	tablat,w,c
  3217  000E38  6E19               	movwf	moveToPoint@x2^0,c
  3218  000E3A  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3219  000E3C  0E0E               	movlw	low (_feeder1Pos+1)
  3220  000E3E  6EF6               	movwf	tblptrl,c
  3221  000E40  0E06               	movlw	high (_feeder1Pos+1)
  3222  000E42  6EF7               	movwf	tblptrh,c
  3223  000E44                     	if	0	;tblptru may be non-zero
  3224  000E44                     	endif
  3225  000E44                     	if	0	;tblptru may be non-zero
  3226  000E44                     	endif
  3227  000E44  0008               	tblrd		*
  3228  000E46  FFFF               	dw	65535	; errata NOP
  3229  000E48  50F5               	movf	tablat,w,c
  3230  000E4A  6E1B               	movwf	moveToPoint@y2^0,c
  3231  000E4C  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3232  000E4E  EC22  F005         	call	_moveToPoint	;wreg free
  3233  000E52  0100               	movlb	0	; () banked
  3234  000E54  6FF7               	movwf	executeData@errCode& (0+255),b
  3235  000E56                     
  3236                           ; BSR set to: 0
  3237                           ;main.c: 117:             posVector[0] = feeder1Pos[0];
  3238  000E56  0E0D               	movlw	low _feeder1Pos
  3239  000E58  6EF6               	movwf	tblptrl,c
  3240  000E5A                     	if	1	;There is more than 1 active tblptr byte
  3241  000E5A  0E06               	movlw	high _feeder1Pos
  3242  000E5C  6EF7               	movwf	tblptrh,c
  3243  000E5E                     	endif
  3244  000E5E                     	if	0	;There are less than 3 active tblptr bytes
  3245  000E5E                     	endif
  3246  000E5E  0008               	tblrd		*
  3247  000E60  FFFF               	dw	65535	; errata NOP
  3248  000E62  CFF5 F043          	movff	tablat,_posVector
  3249  000E66                     
  3250                           ; BSR set to: 0
  3251                           ;main.c: 118:             posVector[1] = feeder1Pos[1];
  3252  000E66  0E0E               	movlw	low (_feeder1Pos+1)
  3253  000E68  6EF6               	movwf	tblptrl,c
  3254  000E6A  0E06               	movlw	high (_feeder1Pos+1)
  3255  000E6C  6EF7               	movwf	tblptrh,c
  3256  000E6E                     	if	0	;tblptru may be non-zero
  3257  000E6E                     	endif
  3258  000E6E                     	if	0	;tblptru may be non-zero
  3259  000E6E                     	endif
  3260  000E6E  0008               	tblrd		*
  3261  000E70  FFFF               	dw	65535	; errata NOP
  3262  000E72  CFF5 F044          	movff	tablat,_posVector+1
  3263                           
  3264                           ;main.c: 119:             break;
  3265  000E76  EFDB  F007         	goto	l4404
  3266  000E7A                     l4380:
  3267  000E7A  FFFF               	dw	65535	; assembler added errata NOP
  3268                           
  3269                           ; BSR set to: 0
  3270                           ;main.c: 121:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3271  000E7C  C043  F015         	movff	_posVector,moveToPoint@x1
  3272  000E80  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3273  000E82  C044  F017         	movff	_posVector+1,moveToPoint@y1
  3274  000E86  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3275  000E88  0E0B               	movlw	low _feeder2Pos
  3276  000E8A  6EF6               	movwf	tblptrl,c
  3277  000E8C                     	if	1	;There is more than 1 active tblptr byte
  3278  000E8C  0E06               	movlw	high _feeder2Pos
  3279  000E8E  6EF7               	movwf	tblptrh,c
  3280  000E90                     	endif
  3281  000E90                     	if	0	;There are less than 3 active tblptr bytes
  3282  000E90                     	endif
  3283  000E90  0008               	tblrd		*
  3284  000E92  FFFF               	dw	65535	; errata NOP
  3285  000E94  50F5               	movf	tablat,w,c
  3286  000E96  6E19               	movwf	moveToPoint@x2^0,c
  3287  000E98  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3288  000E9A  0E0C               	movlw	low (_feeder2Pos+1)
  3289  000E9C  6EF6               	movwf	tblptrl,c
  3290  000E9E  0E06               	movlw	high (_feeder2Pos+1)
  3291  000EA0  6EF7               	movwf	tblptrh,c
  3292  000EA2                     	if	0	;tblptru may be non-zero
  3293  000EA2                     	endif
  3294  000EA2                     	if	0	;tblptru may be non-zero
  3295  000EA2                     	endif
  3296  000EA2  0008               	tblrd		*
  3297  000EA4  FFFF               	dw	65535	; errata NOP
  3298  000EA6  50F5               	movf	tablat,w,c
  3299  000EA8  6E1B               	movwf	moveToPoint@y2^0,c
  3300  000EAA  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3301  000EAC  EC22  F005         	call	_moveToPoint	;wreg free
  3302  000EB0  0100               	movlb	0	; () banked
  3303  000EB2  6FF7               	movwf	executeData@errCode& (0+255),b
  3304  000EB4                     
  3305                           ; BSR set to: 0
  3306                           ;main.c: 122:             posVector[0] = feeder2Pos[0];
  3307  000EB4  0E0B               	movlw	low _feeder2Pos
  3308  000EB6  6EF6               	movwf	tblptrl,c
  3309  000EB8                     	if	1	;There is more than 1 active tblptr byte
  3310  000EB8  0E06               	movlw	high _feeder2Pos
  3311  000EBA  6EF7               	movwf	tblptrh,c
  3312  000EBC                     	endif
  3313  000EBC                     	if	0	;There are less than 3 active tblptr bytes
  3314  000EBC                     	endif
  3315  000EBC  0008               	tblrd		*
  3316  000EBE  FFFF               	dw	65535	; errata NOP
  3317  000EC0  CFF5 F043          	movff	tablat,_posVector
  3318  000EC4                     
  3319                           ; BSR set to: 0
  3320                           ;main.c: 123:             posVector[1] = feeder2Pos[1];
  3321  000EC4  0E0C               	movlw	low (_feeder2Pos+1)
  3322  000EC6  6EF6               	movwf	tblptrl,c
  3323  000EC8  0E06               	movlw	high (_feeder2Pos+1)
  3324  000ECA  6EF7               	movwf	tblptrh,c
  3325  000ECC                     	if	0	;tblptru may be non-zero
  3326  000ECC                     	endif
  3327  000ECC                     	if	0	;tblptru may be non-zero
  3328  000ECC                     	endif
  3329  000ECC  0008               	tblrd		*
  3330  000ECE  FFFF               	dw	65535	; errata NOP
  3331  000ED0  CFF5 F044          	movff	tablat,_posVector+1
  3332                           
  3333                           ;main.c: 124:             break;
  3334  000ED4  EFDB  F007         	goto	l4404
  3335  000ED8                     l4386:
  3336  000ED8  FFFF               	dw	65535	; assembler added errata NOP
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;main.c: 126:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3340  000EDA  C043  F015         	movff	_posVector,moveToPoint@x1
  3341  000EDE  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3342  000EE0  C044  F017         	movff	_posVector+1,moveToPoint@y1
  3343  000EE4  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3344  000EE6  0E09               	movlw	low _feeder3Pos
  3345  000EE8  6EF6               	movwf	tblptrl,c
  3346  000EEA                     	if	1	;There is more than 1 active tblptr byte
  3347  000EEA  0E06               	movlw	high _feeder3Pos
  3348  000EEC  6EF7               	movwf	tblptrh,c
  3349  000EEE                     	endif
  3350  000EEE                     	if	0	;There are less than 3 active tblptr bytes
  3351  000EEE                     	endif
  3352  000EEE  0008               	tblrd		*
  3353  000EF0  FFFF               	dw	65535	; errata NOP
  3354  000EF2  50F5               	movf	tablat,w,c
  3355  000EF4  6E19               	movwf	moveToPoint@x2^0,c
  3356  000EF6  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3357  000EF8  0E0A               	movlw	low (_feeder3Pos+1)
  3358  000EFA  6EF6               	movwf	tblptrl,c
  3359  000EFC  0E06               	movlw	high (_feeder3Pos+1)
  3360  000EFE  6EF7               	movwf	tblptrh,c
  3361  000F00                     	if	0	;tblptru may be non-zero
  3362  000F00                     	endif
  3363  000F00                     	if	0	;tblptru may be non-zero
  3364  000F00                     	endif
  3365  000F00  0008               	tblrd		*
  3366  000F02  FFFF               	dw	65535	; errata NOP
  3367  000F04  50F5               	movf	tablat,w,c
  3368  000F06  6E1B               	movwf	moveToPoint@y2^0,c
  3369  000F08  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3370  000F0A  EC22  F005         	call	_moveToPoint	;wreg free
  3371  000F0E  0100               	movlb	0	; () banked
  3372  000F10  6FF7               	movwf	executeData@errCode& (0+255),b
  3373  000F12                     
  3374                           ; BSR set to: 0
  3375                           ;main.c: 127:             posVector[0] = feeder3Pos[0];
  3376  000F12  0E09               	movlw	low _feeder3Pos
  3377  000F14  6EF6               	movwf	tblptrl,c
  3378  000F16                     	if	1	;There is more than 1 active tblptr byte
  3379  000F16  0E06               	movlw	high _feeder3Pos
  3380  000F18  6EF7               	movwf	tblptrh,c
  3381  000F1A                     	endif
  3382  000F1A                     	if	0	;There are less than 3 active tblptr bytes
  3383  000F1A                     	endif
  3384  000F1A  0008               	tblrd		*
  3385  000F1C  FFFF               	dw	65535	; errata NOP
  3386  000F1E  CFF5 F043          	movff	tablat,_posVector
  3387  000F22                     
  3388                           ; BSR set to: 0
  3389                           ;main.c: 128:             posVector[1] = feeder3Pos[1];
  3390  000F22  0E0A               	movlw	low (_feeder3Pos+1)
  3391  000F24  6EF6               	movwf	tblptrl,c
  3392  000F26  0E06               	movlw	high (_feeder3Pos+1)
  3393  000F28  6EF7               	movwf	tblptrh,c
  3394  000F2A                     	if	0	;tblptru may be non-zero
  3395  000F2A                     	endif
  3396  000F2A                     	if	0	;tblptru may be non-zero
  3397  000F2A                     	endif
  3398  000F2A  0008               	tblrd		*
  3399  000F2C  FFFF               	dw	65535	; errata NOP
  3400  000F2E  CFF5 F044          	movff	tablat,_posVector+1
  3401                           
  3402                           ;main.c: 129:             break;
  3403  000F32  EFDB  F007         	goto	l4404
  3404  000F36                     l4392:
  3405  000F36  FFFF               	dw	65535	; assembler added errata NOP
  3406                           
  3407                           ; BSR set to: 0
  3408                           ;main.c: 133:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3409  000F38  C043  F015         	movff	_posVector,moveToPoint@x1
  3410  000F3C  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3411  000F3E  C044  F017         	movff	_posVector+1,moveToPoint@y1
  3412  000F42  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3413  000F44  C04C  F019         	movff	_newFeeder,moveToPoint@x2
  3414  000F48  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3415  000F4A  C04D  F01B         	movff	_newFeeder+1,moveToPoint@y2
  3416  000F4E  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3417  000F50  EC22  F005         	call	_moveToPoint	;wreg free
  3418  000F54  0100               	movlb	0	; () banked
  3419  000F56  6FF7               	movwf	executeData@errCode& (0+255),b
  3420  000F58                     
  3421                           ; BSR set to: 0
  3422                           ;main.c: 134:             posVector[0] = newFeeder[0];
  3423  000F58  C04C  F043         	movff	_newFeeder,_posVector
  3424  000F5C                     
  3425                           ; BSR set to: 0
  3426                           ;main.c: 135:             posVector[1] = newFeeder[1];
  3427  000F5C  C04D  F044         	movff	_newFeeder+1,_posVector+1
  3428                           
  3429                           ;main.c: 136:             break;
  3430  000F60  EFDB  F007         	goto	l4404
  3431  000F64                     l4398:
  3432  000F64  FFFF               	dw	65535	; assembler added errata NOP
  3433                           
  3434                           ; BSR set to: 0
  3435                           ;main.c: 140:             errCode = 1;
  3436  000F66  0E01               	movlw	1
  3437  000F68  6FF7               	movwf	executeData@errCode& (0+255),b
  3438                           
  3439                           ;main.c: 141:             break;
  3440  000F6A  EFDB  F007         	goto	l4404
  3441  000F6E                     l4402:
  3442  000F6E  FFFF               	dw	65535	; assembler added errata NOP
  3443  000F70  C0F8  FFD9         	movff	executeData@data,fsr2l
  3444  000F74  C0F9  FFDA         	movff	executeData@data+1,fsr2h
  3445  000F78  50DF               	movf	indf2,w,c
  3446  000F7A  0100               	movlb	0	; () banked
  3447  000F7C  6FF5               	movwf	??_executeData& (0+255),b
  3448  000F7E  6BF6               	clrf	(??_executeData+1)& (0+255),b
  3449                           
  3450                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3451                           ; Switch size 1, requested type "simple"
  3452                           ; Number of cases is 1, Range of values is 0 to 0
  3453                           ; switch strategies available:
  3454                           ; Name         Instructions Cycles
  3455                           ; simple_byte            4     3 (average)
  3456                           ;	Chosen strategy is simple_byte
  3457  000F80  51F6               	movf	(??_executeData+1)& (0+255),w,b
  3458  000F82  0A00               	xorlw	0	; case 0
  3459  000F84  B4D8               	btfsc	status,2,c
  3460  000F86  EFC7  F007         	goto	l4700
  3461  000F8A  EFB2  F007         	goto	l4398
  3462  000F8E                     l4700:
  3463  000F8E  FFFF               	dw	65535	; assembler added errata NOP
  3464                           
  3465                           ; BSR set to: 0
  3466                           ; Switch size 1, requested type "simple"
  3467                           ; Number of cases is 4, Range of values is 0 to 255
  3468                           ; switch strategies available:
  3469                           ; Name         Instructions Cycles
  3470                           ; simple_byte           13     7 (average)
  3471                           ;	Chosen strategy is simple_byte
  3472  000F90  51F5               	movf	??_executeData& (0+255),w,b
  3473  000F92  0A00               	xorlw	0	; case 0
  3474  000F94  B4D8               	btfsc	status,2,c
  3475  000F96  EF0E  F007         	goto	l4374
  3476  000F9A  0A01               	xorlw	1	; case 1
  3477  000F9C  B4D8               	btfsc	status,2,c
  3478  000F9E  EF3D  F007         	goto	l4380
  3479  000FA2  0A03               	xorlw	3	; case 2
  3480  000FA4  B4D8               	btfsc	status,2,c
  3481  000FA6  EF6C  F007         	goto	l4386
  3482  000FAA  0AFD               	xorlw	253	; case 255
  3483  000FAC  B4D8               	btfsc	status,2,c
  3484  000FAE  EF9B  F007         	goto	l4392
  3485  000FB2  EFB2  F007         	goto	l4398
  3486  000FB6                     l4404:
  3487  000FB6  FFFF               	dw	65535	; assembler added errata NOP
  3488                           
  3489                           ; BSR set to: 0
  3490                           ;main.c: 145:     if(!errCode){
  3491  000FB8  51F7               	movf	executeData@errCode& (0+255),w,b
  3492  000FBA  A4D8               	btfss	status,2,c
  3493  000FBC  EFE2  F007         	goto	u3671
  3494  000FC0  EFE5  F007         	goto	u3670
  3495  000FC4                     u3671:
  3496  000FC4  FFFF               	dw	65535	; assembler added errata NOP
  3497  000FC6  EF45  F008         	goto	l4430
  3498  000FCA                     u3670:
  3499  000FCA  FFFF               	dw	65535	; assembler added errata NOP
  3500  000FCC                     
  3501                           ; BSR set to: 0
  3502  000FCC  EC4E  F00E         	call	_touchObject	;wreg free
  3503  000FD0                     
  3504                           ;main.c: 150:         pickObject();
  3505  000FD0  ECCD  F011         	call	_pickObject	;wreg free
  3506  000FD4  EC54  F010         	call	_liftArm	;wreg free
  3507  000FD8  C043  F015         	movff	_posVector,moveToPoint@x1
  3508  000FDC  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3509  000FDE  C044  F017         	movff	_posVector+1,moveToPoint@y1
  3510  000FE2  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3511  000FE4  0100               	movlb	0	; () banked
  3512  000FE6  EE20 F001          	lfsr	2,1
  3513  000FEA  51F8               	movf	executeData@data& (0+255),w,b
  3514  000FEC  26D9               	addwf	fsr2l,f,c
  3515  000FEE  51F9               	movf	(executeData@data+1)& (0+255),w,b
  3516  000FF0  22DA               	addwfc	fsr2h,f,c
  3517  000FF2  50DF               	movf	indf2,w,c
  3518  000FF4  6FF5               	movwf	??_executeData& (0+255),b
  3519  000FF6  51F5               	movf	??_executeData& (0+255),w,b
  3520  000FF8  6E19               	movwf	moveToPoint@x2^0,c
  3521  000FFA  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3522  000FFC  EE20 F002          	lfsr	2,2
  3523  001000  51F8               	movf	executeData@data& (0+255),w,b
  3524  001002  26D9               	addwf	fsr2l,f,c
  3525  001004  51F9               	movf	(executeData@data+1)& (0+255),w,b
  3526  001006  22DA               	addwfc	fsr2h,f,c
  3527  001008  50DF               	movf	indf2,w,c
  3528  00100A  6FF6               	movwf	(??_executeData+1)& (0+255),b
  3529  00100C  51F6               	movf	(??_executeData+1)& (0+255),w,b
  3530  00100E  6E1B               	movwf	moveToPoint@y2^0,c
  3531  001010  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3532  001012  EC22  F005         	call	_moveToPoint	;wreg free
  3533  001016                     
  3534                           ;main.c: 157:         posVector[0] = data->posX;
  3535  001016  0100               	movlb	0	; () banked
  3536  001018  EE20 F001          	lfsr	2,1
  3537  00101C  51F8               	movf	executeData@data& (0+255),w,b
  3538  00101E  26D9               	addwf	fsr2l,f,c
  3539  001020  51F9               	movf	(executeData@data+1)& (0+255),w,b
  3540  001022  22DA               	addwfc	fsr2h,f,c
  3541  001024  50DF               	movf	indf2,w,c
  3542  001026  6E43               	movwf	_posVector^0,c
  3543  001028                     
  3544                           ; BSR set to: 0
  3545                           ;main.c: 158:         posVector[1] = data->posY;
  3546  001028  EE20 F002          	lfsr	2,2
  3547  00102C  51F8               	movf	executeData@data& (0+255),w,b
  3548  00102E  26D9               	addwf	fsr2l,f,c
  3549  001030  51F9               	movf	(executeData@data+1)& (0+255),w,b
  3550  001032  22DA               	addwfc	fsr2h,f,c
  3551  001034  50DF               	movf	indf2,w,c
  3552  001036  6E44               	movwf	(_posVector+1)^0,c
  3553  001038                     
  3554                           ; BSR set to: 0
  3555                           ;main.c: 161:         rotAngle = data->rotation - rotAngle;
  3556  001038  EE20 F003          	lfsr	2,3
  3557  00103C  51F8               	movf	executeData@data& (0+255),w,b
  3558  00103E  26D9               	addwf	fsr2l,f,c
  3559  001040  51F9               	movf	(executeData@data+1)& (0+255),w,b
  3560  001042  22DA               	addwfc	fsr2h,f,c
  3561  001044  50DF               	movf	indf2,w,c
  3562  001046  6FF5               	movwf	??_executeData& (0+255),b
  3563  001048  504E               	movf	_rotAngle^0,w,c
  3564  00104A  5DF5               	subwf	??_executeData& (0+255),w,b
  3565  00104C  6E4E               	movwf	_rotAngle^0,c
  3566  00104E  504F               	movf	(_rotAngle+1)^0,w,c
  3567  001050  A0D8               	btfss	status,0,c
  3568  001052  284F               	incf	(_rotAngle+1)^0,w,c
  3569  001054  6A4F               	clrf	(_rotAngle+1)^0,c
  3570  001056  5E4F               	subwf	(_rotAngle+1)^0,f,c
  3571                           
  3572                           ;main.c: 163:         if(rotAngle < 0){
  3573  001058  BE4F               	btfsc	(_rotAngle+1)^0,7,c
  3574  00105A  EF34  F008         	goto	u3680
  3575  00105E  EF31  F008         	goto	u3681
  3576  001062                     u3681:
  3577  001062  FFFF               	dw	65535	; assembler added errata NOP
  3578  001064  EF39  F008         	goto	l4422
  3579  001068                     u3680:
  3580  001068  FFFF               	dw	65535	; assembler added errata NOP
  3581  00106A                     
  3582                           ; BSR set to: 0
  3583                           ;main.c: 164:             rotAngle += 360;
  3584  00106A  0E68               	movlw	104
  3585  00106C  264E               	addwf	_rotAngle^0,f,c
  3586  00106E  0E01               	movlw	1
  3587  001070  224F               	addwfc	(_rotAngle+1)^0,f,c
  3588  001072                     l4422:
  3589  001072  FFFF               	dw	65535	; assembler added errata NOP
  3590                           
  3591                           ; BSR set to: 0
  3592                           ;main.c: 166:         rotateObj(rotAngle);
  3593  001074  504E               	movf	_rotAngle^0,w,c
  3594  001076  ECE6  F00F         	call	_rotateObj
  3595  00107A  ECC0  F00D         	call	_touchTherm	;wreg free
  3596  00107E                     
  3597                           ;main.c: 171:         releaseObj();
  3598  00107E  ECB7  F011         	call	_releaseObj	;wreg free
  3599  001082                     
  3600                           ;main.c: 174:         errCode = liftArm();
  3601  001082  EC54  F010         	call	_liftArm	;wreg free
  3602  001086  0100               	movlb	0	; () banked
  3603  001088  6FF7               	movwf	executeData@errCode& (0+255),b
  3604  00108A                     l4430:
  3605  00108A  FFFF               	dw	65535	; assembler added errata NOP
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;main.c: 177:     return(errCode);
  3609  00108C  51F7               	movf	executeData@errCode& (0+255),w,b
  3610  00108E                     
  3611                           ; BSR set to: 0
  3612  00108E  0012               	return		;funcret
  3613  001090  FFFF               	dw	65535	; errata NOP
  3614  001092                     __end_of_executeData:
  3615                           	callstack 0
  3616                           
  3617 ;; *************** function _touchTherm *****************
  3618 ;; Defined at:
  3619 ;;		line 589 in file "motors.c"
  3620 ;; Parameters:    Size  Location     Type
  3621 ;;		None
  3622 ;; Auto vars:     Size  Location     Type
  3623 ;;		None
  3624 ;; Return value:  Size  Location     Type
  3625 ;;                  1    wreg      unsigned char 
  3626 ;; Registers used:
  3627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3628 ;; Tracked objects:
  3629 ;;		On entry : 0/0
  3630 ;;		On exit  : 0/0
  3631 ;;		Unchanged: 0/0
  3632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3633 ;;      Params:         0       0       0       0       0       0       0
  3634 ;;      Locals:         0       0       0       0       0       0       0
  3635 ;;      Temps:          0       0       0       0       0       0       0
  3636 ;;      Totals:         0       0       0       0       0       0       0
  3637 ;;Total ram usage:        0 bytes
  3638 ;; Hardware stack levels used:    1
  3639 ;; Hardware stack levels required when called:    5
  3640 ;; This function calls:
  3641 ;;		_resetStep
  3642 ;;		_resetTherm
  3643 ;;		_returnTherm
  3644 ;;		_startADC
  3645 ;;		_stepMade
  3646 ;;		_stopADC
  3647 ;; This function is called by:
  3648 ;;		_executeData
  3649 ;; This function uses a non-reentrant model
  3650 ;;
  3651                           
  3652                           	psect	text19
  3653  001B80                     __ptext19:
  3654                           	callstack 0
  3655  001B80                     _touchTherm:
  3656                           	callstack 0
  3657  001B80  FFFF               	dw	65535	; assembler added errata NOP
  3658  001B82                     
  3659                           ;motors.c: 595:     motCounter[2][1] = 1;
  3660  001B82  0E00               	movlw	0
  3661  001B84  6E69               	movwf	(_motCounter+11)^0,c
  3662  001B86  0E01               	movlw	1
  3663  001B88  6E68               	movwf	(_motCounter+10)^0,c
  3664  001B8A                     
  3665                           ;motors.c: 598:     T2CONbits.TMR2ON = 1;
  3666  001B8A  84CA               	bsf	202,2,c	;volatile
  3667                           
  3668                           ;motors.c: 600:     tm0Error = 0;
  3669  001B8C  0E00               	movlw	0
  3670  001B8E  6E51               	movwf	(_tm0Error+1)^0,c
  3671  001B90  0E00               	movlw	0
  3672  001B92  6E50               	movwf	_tm0Error^0,c
  3673                           
  3674                           ;motors.c: 601:     tm0Limit = 250;
  3675  001B94  0EFA               	movlw	250
  3676  001B96  6E5D               	movwf	_tm0Limit^0,c
  3677  001B98                     
  3678                           ;motors.c: 602:     T0CONbits.TMR0ON = 1;
  3679  001B98  8ED5               	bsf	213,7,c	;volatile
  3680  001B9A                     l4052:
  3681  001B9A  FFFF               	dw	65535	; assembler added errata NOP
  3682                           
  3683                           ;motors.c: 605:     startADC();
  3684  001B9C  EC8C  F012         	call	_startADC	;wreg free
  3685                           
  3686                           ;motors.c: 608:     while(!returnTherm() || PORTDbits.RD7){
  3687  001BA0  EF18  F00E         	goto	l4070
  3688  001BA4                     l4054:
  3689  001BA4  FFFF               	dw	65535	; assembler added errata NOP
  3690                           
  3691                           ;motors.c: 611:         if(tm0Error){
  3692  001BA6  5050               	movf	_tm0Error^0,w,c
  3693  001BA8  1051               	iorwf	(_tm0Error+1)^0,w,c
  3694  001BAA  B4D8               	btfsc	status,2,c
  3695  001BAC  EFDA  F00D         	goto	u3361
  3696  001BB0  EFDD  F00D         	goto	u3360
  3697  001BB4                     u3361:
  3698  001BB4  FFFF               	dw	65535	; assembler added errata NOP
  3699  001BB6  EFE4  F00D         	goto	l4058
  3700  001BBA                     u3360:
  3701  001BBA  FFFF               	dw	65535	; assembler added errata NOP
  3702  001BBC                     
  3703                           ;motors.c: 616:             tm0Error = 6;
  3704  001BBC  0E00               	movlw	0
  3705  001BBE  6E51               	movwf	(_tm0Error+1)^0,c
  3706  001BC0  0E06               	movlw	6
  3707  001BC2  6E50               	movwf	_tm0Error^0,c
  3708                           
  3709                           ;motors.c: 617:             break;
  3710  001BC4  EF2E  F00E         	goto	l4074
  3711  001BC8                     l4058:
  3712  001BC8  FFFF               	dw	65535	; assembler added errata NOP
  3713                           
  3714                           ;motors.c: 625:             motCounter[2][0] += motCounter[2][1];
  3715  001BCA  EE20  F068         	lfsr	2,_motCounter+10
  3716  001BCE  50DE               	movf	postinc2,w,c
  3717  001BD0  2666               	addwf	(_motCounter+8)^0,f,c
  3718  001BD2  50DD               	movf	postdec2,w,c
  3719  001BD4  2267               	addwfc	(_motCounter+9)^0,f,c
  3720  001BD6                     
  3721                           ;motors.c: 626:             if(motCounter[2][0] > 3){
  3722  001BD6  BE67               	btfsc	(_motCounter+9)^0,7,c
  3723  001BD8  EFF7  F00D         	goto	u3371
  3724  001BDC  5067               	movf	(_motCounter+9)^0,w,c
  3725  001BDE  E10A               	bnz	u3370
  3726  001BE0  0E04               	movlw	4
  3727  001BE2  5C66               	subwf	(_motCounter+8)^0,w,c
  3728  001BE4  A0D8               	btfss	status,0,c
  3729  001BE6  EFF7  F00D         	goto	u3371
  3730  001BEA  EFFA  F00D         	goto	u3370
  3731  001BEE                     u3371:
  3732  001BEE  FFFF               	dw	65535	; assembler added errata NOP
  3733  001BF0  EFFF  F00D         	goto	l4064
  3734  001BF4                     u3370:
  3735  001BF4  FFFF               	dw	65535	; assembler added errata NOP
  3736  001BF6                     
  3737                           ;motors.c: 627:                 motCounter[2][0] = 0;
  3738  001BF6  0E00               	movlw	0
  3739  001BF8  6E67               	movwf	(_motCounter+9)^0,c
  3740  001BFA  0E00               	movlw	0
  3741  001BFC  6E66               	movwf	(_motCounter+8)^0,c
  3742  001BFE                     l4064:
  3743  001BFE  FFFF               	dw	65535	; assembler added errata NOP
  3744                           
  3745                           ;motors.c: 630:             LATC = stepMot3[motCounter[2][0]];
  3746  001C00  0E84               	movlw	low _stepMot3
  3747  001C02  2466               	addwf	(_motCounter+8)^0,w,c
  3748  001C04  6ED9               	movwf	fsr2l,c
  3749  001C06  0E00               	movlw	high _stepMot3
  3750  001C08  2067               	addwfc	(_motCounter+9)^0,w,c
  3751  001C0A  6EDA               	movwf	fsr2h,c
  3752  001C0C  50DF               	movf	indf2,w,c
  3753  001C0E  6E8B               	movwf	139,c	;volatile
  3754  001C10                     l4066:
  3755  001C10  FFFF               	dw	65535	; assembler added errata NOP
  3756  001C12  EC22  F012         	call	_stepMade	;wreg free
  3757  001C16  5012               	movf	?_stepMade^0,w,c
  3758  001C18  1013               	iorwf	(?_stepMade+1)^0,w,c
  3759  001C1A  B4D8               	btfsc	status,2,c
  3760  001C1C  EF12  F00E         	goto	u3381
  3761  001C20  EF15  F00E         	goto	u3380
  3762  001C24                     u3381:
  3763  001C24  FFFF               	dw	65535	; assembler added errata NOP
  3764  001C26  EF08  F00E         	goto	l4066
  3765  001C2A                     u3380:
  3766  001C2A  FFFF               	dw	65535	; assembler added errata NOP
  3767  001C2C  EFCD  F00D         	goto	l4052
  3768  001C30                     l4070:
  3769  001C30  FFFF               	dw	65535	; assembler added errata NOP
  3770                           
  3771                           ;motors.c: 608:     while(!returnTherm() || PORTDbits.RD7){
  3772  001C32  EC70  F012         	call	_returnTherm	;wreg free
  3773  001C36  5012               	movf	?_returnTherm^0,w,c
  3774  001C38  1013               	iorwf	(?_returnTherm+1)^0,w,c
  3775  001C3A  B4D8               	btfsc	status,2,c
  3776  001C3C  EF22  F00E         	goto	u3391
  3777  001C40  EF25  F00E         	goto	u3390
  3778  001C44                     u3391:
  3779  001C44  FFFF               	dw	65535	; assembler added errata NOP
  3780  001C46  EFD2  F00D         	goto	l4054
  3781  001C4A                     u3390:
  3782  001C4A  FFFF               	dw	65535	; assembler added errata NOP
  3783  001C4C  BE83               	btfsc	131,7,c	;volatile
  3784  001C4E  EF2B  F00E         	goto	u3401
  3785  001C52  EF2E  F00E         	goto	u3400
  3786  001C56                     u3401:
  3787  001C56  FFFF               	dw	65535	; assembler added errata NOP
  3788  001C58  EFD2  F00D         	goto	l4054
  3789  001C5C                     u3400:
  3790  001C5C                     l4074:
  3791  001C5C  FFFF               	dw	65535	; assembler added errata NOP
  3792                           
  3793                           ;motors.c: 651:     stopADC();
  3794  001C5E  ECB6  F012         	call	_stopADC	;wreg free
  3795  001C62                     
  3796                           ;motors.c: 654:     resetTherm();
  3797  001C62  EC87  F012         	call	_resetTherm	;wreg free
  3798  001C66                     
  3799                           ;motors.c: 657:     T0CONbits.TMR0ON = 0;
  3800  001C66  9ED5               	bcf	213,7,c	;volatile
  3801  001C68                     
  3802                           ;motors.c: 658:     T2CONbits.TMR2ON = 0;
  3803  001C68  94CA               	bcf	202,2,c	;volatile
  3804                           
  3805                           ;motors.c: 660:     TMR0 = 0;
  3806  001C6A  0E00               	movlw	0
  3807  001C6C  6ED7               	movwf	215,c	;volatile
  3808  001C6E  0E00               	movlw	0
  3809  001C70  6ED6               	movwf	214,c	;volatile
  3810                           
  3811                           ;motors.c: 661:     TMR2 = 0;
  3812  001C72  0E00               	movlw	0
  3813  001C74  6ECC               	movwf	204,c	;volatile
  3814  001C76                     
  3815                           ;motors.c: 664:     resetStep();
  3816  001C76  EC96  F012         	call	_resetStep	;wreg free
  3817  001C7A                     
  3818                           ;motors.c: 667:     if(PORTDbits.RD7){
  3819  001C7A  AE83               	btfss	131,7,c	;volatile
  3820  001C7C  EF42  F00E         	goto	u3411
  3821  001C80  EF45  F00E         	goto	u3410
  3822  001C84                     u3411:
  3823  001C84  FFFF               	dw	65535	; assembler added errata NOP
  3824  001C86  EF4A  F00E         	goto	l213
  3825  001C8A                     u3410:
  3826  001C8A  FFFF               	dw	65535	; assembler added errata NOP
  3827  001C8C                     
  3828                           ;motors.c: 668:         tm0Error = 2;
  3829  001C8C  0E00               	movlw	0
  3830  001C8E  6E51               	movwf	(_tm0Error+1)^0,c
  3831  001C90  0E02               	movlw	2
  3832  001C92  6E50               	movwf	_tm0Error^0,c
  3833  001C94                     l213:
  3834  001C94  FFFF               	dw	65535	; assembler added errata NOP
  3835                           
  3836                           ;motors.c: 671:     return(tm0Error);
  3837  001C96  5050               	movf	_tm0Error^0,w,c
  3838  001C98  0012               	return		;funcret
  3839  001C9A  FFFF               	dw	65535	; errata NOP
  3840  001C9C                     __end_of_touchTherm:
  3841                           	callstack 0
  3842                           
  3843 ;; *************** function _returnTherm *****************
  3844 ;; Defined at:
  3845 ;;		line 58 in file "adc.c"
  3846 ;; Parameters:    Size  Location     Type
  3847 ;;		None
  3848 ;; Auto vars:     Size  Location     Type
  3849 ;;		None
  3850 ;; Return value:  Size  Location     Type
  3851 ;;                  2   17[COMRAM] unsigned int 
  3852 ;; Registers used:
  3853 ;;		None
  3854 ;; Tracked objects:
  3855 ;;		On entry : 0/0
  3856 ;;		On exit  : 0/0
  3857 ;;		Unchanged: 0/0
  3858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3859 ;;      Params:         2       0       0       0       0       0       0
  3860 ;;      Locals:         0       0       0       0       0       0       0
  3861 ;;      Temps:          0       0       0       0       0       0       0
  3862 ;;      Totals:         2       0       0       0       0       0       0
  3863 ;;Total ram usage:        2 bytes
  3864 ;; Hardware stack levels used:    1
  3865 ;; Hardware stack levels required when called:    4
  3866 ;; This function calls:
  3867 ;;		Nothing
  3868 ;; This function is called by:
  3869 ;;		_touchTherm
  3870 ;; This function uses a non-reentrant model
  3871 ;;
  3872                           
  3873                           	psect	text20
  3874  0024E0                     __ptext20:
  3875                           	callstack 0
  3876  0024E0                     _returnTherm:
  3877                           	callstack 0
  3878  0024E0  FFFF               	dw	65535	; assembler added errata NOP
  3879  0024E2                     
  3880                           ;adc.c: 59:     return therm_rel;
  3881  0024E2  C05B  F012         	movff	_therm_rel,?_returnTherm	;volatile
  3882  0024E6  6A13               	clrf	(?_returnTherm+1)^0,c
  3883  0024E8  0012               	return		;funcret
  3884  0024EA  FFFF               	dw	65535	; errata NOP
  3885  0024EC                     __end_of_returnTherm:
  3886                           	callstack 0
  3887                           
  3888 ;; *************** function _resetTherm *****************
  3889 ;; Defined at:
  3890 ;;		line 72 in file "adc.c"
  3891 ;; Parameters:    Size  Location     Type
  3892 ;;		None
  3893 ;; Auto vars:     Size  Location     Type
  3894 ;;		None
  3895 ;; Return value:  Size  Location     Type
  3896 ;;                  1    wreg      void 
  3897 ;; Registers used:
  3898 ;;		wreg, status,2
  3899 ;; Tracked objects:
  3900 ;;		On entry : 0/0
  3901 ;;		On exit  : 0/0
  3902 ;;		Unchanged: 0/0
  3903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3904 ;;      Params:         0       0       0       0       0       0       0
  3905 ;;      Locals:         0       0       0       0       0       0       0
  3906 ;;      Temps:          0       0       0       0       0       0       0
  3907 ;;      Totals:         0       0       0       0       0       0       0
  3908 ;;Total ram usage:        0 bytes
  3909 ;; Hardware stack levels used:    1
  3910 ;; Hardware stack levels required when called:    4
  3911 ;; This function calls:
  3912 ;;		Nothing
  3913 ;; This function is called by:
  3914 ;;		_touchTherm
  3915 ;; This function uses a non-reentrant model
  3916 ;;
  3917                           
  3918                           	psect	text21
  3919  00250E                     __ptext21:
  3920                           	callstack 0
  3921  00250E                     _resetTherm:
  3922                           	callstack 0
  3923  00250E  FFFF               	dw	65535	; assembler added errata NOP
  3924  002510                     
  3925                           ;adc.c: 73:     therm_rel = 0;
  3926  002510  0E00               	movlw	0
  3927  002512  6E5B               	movwf	_therm_rel^0,c	;volatile
  3928  002514  0012               	return		;funcret
  3929  002516  FFFF               	dw	65535	; errata NOP
  3930  002518                     __end_of_resetTherm:
  3931                           	callstack 0
  3932                           
  3933 ;; *************** function _touchObject *****************
  3934 ;; Defined at:
  3935 ;;		line 497 in file "motors.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;		None
  3938 ;; Auto vars:     Size  Location     Type
  3939 ;;		None
  3940 ;; Return value:  Size  Location     Type
  3941 ;;                  1    wreg      unsigned char 
  3942 ;; Registers used:
  3943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3944 ;; Tracked objects:
  3945 ;;		On entry : 0/0
  3946 ;;		On exit  : 0/0
  3947 ;;		Unchanged: 0/0
  3948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3949 ;;      Params:         0       0       0       0       0       0       0
  3950 ;;      Locals:         0       0       0       0       0       0       0
  3951 ;;      Temps:          0       0       0       0       0       0       0
  3952 ;;      Totals:         0       0       0       0       0       0       0
  3953 ;;Total ram usage:        0 bytes
  3954 ;; Hardware stack levels used:    1
  3955 ;; Hardware stack levels required when called:    5
  3956 ;; This function calls:
  3957 ;;		_resetStep
  3958 ;;		_resetTouch
  3959 ;;		_returnTouch
  3960 ;;		_startADC
  3961 ;;		_stepMade
  3962 ;;		_stopADC
  3963 ;; This function is called by:
  3964 ;;		_executeData
  3965 ;; This function uses a non-reentrant model
  3966 ;;
  3967                           
  3968                           	psect	text22
  3969  001C9C                     __ptext22:
  3970                           	callstack 0
  3971  001C9C                     _touchObject:
  3972                           	callstack 0
  3973  001C9C  FFFF               	dw	65535	; assembler added errata NOP
  3974  001C9E                     
  3975                           ;motors.c: 503:     motCounter[2][1] = 1;
  3976  001C9E  0E00               	movlw	0
  3977  001CA0  6E69               	movwf	(_motCounter+11)^0,c
  3978  001CA2  0E01               	movlw	1
  3979  001CA4  6E68               	movwf	(_motCounter+10)^0,c
  3980  001CA6                     
  3981                           ;motors.c: 506:     T2CONbits.TMR2ON = 1;
  3982  001CA6  84CA               	bsf	202,2,c	;volatile
  3983                           
  3984                           ;motors.c: 508:     tm0Error = 0;
  3985  001CA8  0E00               	movlw	0
  3986  001CAA  6E51               	movwf	(_tm0Error+1)^0,c
  3987  001CAC  0E00               	movlw	0
  3988  001CAE  6E50               	movwf	_tm0Error^0,c
  3989                           
  3990                           ;motors.c: 509:     tm0Limit = 250;
  3991  001CB0  0EFA               	movlw	250
  3992  001CB2  6E5D               	movwf	_tm0Limit^0,c
  3993  001CB4                     
  3994                           ;motors.c: 510:     T0CONbits.TMR0ON = 1;
  3995  001CB4  8ED5               	bsf	213,7,c	;volatile
  3996  001CB6                     l4008:
  3997  001CB6  FFFF               	dw	65535	; assembler added errata NOP
  3998                           
  3999                           ;motors.c: 513:     startADC();
  4000  001CB8  EC8C  F012         	call	_startADC	;wreg free
  4001                           
  4002                           ;motors.c: 516:     while(!returnTouch() || PORTDbits.RD7){
  4003  001CBC  EFA6  F00E         	goto	l4026
  4004  001CC0                     l4010:
  4005  001CC0  FFFF               	dw	65535	; assembler added errata NOP
  4006                           
  4007                           ;motors.c: 519:         if(tm0Error){
  4008  001CC2  5050               	movf	_tm0Error^0,w,c
  4009  001CC4  1051               	iorwf	(_tm0Error+1)^0,w,c
  4010  001CC6  B4D8               	btfsc	status,2,c
  4011  001CC8  EF68  F00E         	goto	u3301
  4012  001CCC  EF6B  F00E         	goto	u3300
  4013  001CD0                     u3301:
  4014  001CD0  FFFF               	dw	65535	; assembler added errata NOP
  4015  001CD2  EF72  F00E         	goto	l4014
  4016  001CD6                     u3300:
  4017  001CD6  FFFF               	dw	65535	; assembler added errata NOP
  4018  001CD8                     
  4019                           ;motors.c: 524:             tm0Error = 6;
  4020  001CD8  0E00               	movlw	0
  4021  001CDA  6E51               	movwf	(_tm0Error+1)^0,c
  4022  001CDC  0E06               	movlw	6
  4023  001CDE  6E50               	movwf	_tm0Error^0,c
  4024                           
  4025                           ;motors.c: 525:             break;
  4026  001CE0  EFBC  F00E         	goto	l4030
  4027  001CE4                     l4014:
  4028  001CE4  FFFF               	dw	65535	; assembler added errata NOP
  4029                           
  4030                           ;motors.c: 533:             motCounter[2][0] += motCounter[2][1];
  4031  001CE6  EE20  F068         	lfsr	2,_motCounter+10
  4032  001CEA  50DE               	movf	postinc2,w,c
  4033  001CEC  2666               	addwf	(_motCounter+8)^0,f,c
  4034  001CEE  50DD               	movf	postdec2,w,c
  4035  001CF0  2267               	addwfc	(_motCounter+9)^0,f,c
  4036  001CF2                     
  4037                           ;motors.c: 534:             if(motCounter[2][0] > 3){
  4038  001CF2  BE67               	btfsc	(_motCounter+9)^0,7,c
  4039  001CF4  EF85  F00E         	goto	u3311
  4040  001CF8  5067               	movf	(_motCounter+9)^0,w,c
  4041  001CFA  E10A               	bnz	u3310
  4042  001CFC  0E04               	movlw	4
  4043  001CFE  5C66               	subwf	(_motCounter+8)^0,w,c
  4044  001D00  A0D8               	btfss	status,0,c
  4045  001D02  EF85  F00E         	goto	u3311
  4046  001D06  EF88  F00E         	goto	u3310
  4047  001D0A                     u3311:
  4048  001D0A  FFFF               	dw	65535	; assembler added errata NOP
  4049  001D0C  EF8D  F00E         	goto	l4020
  4050  001D10                     u3310:
  4051  001D10  FFFF               	dw	65535	; assembler added errata NOP
  4052  001D12                     
  4053                           ;motors.c: 535:                 motCounter[2][0] = 0;
  4054  001D12  0E00               	movlw	0
  4055  001D14  6E67               	movwf	(_motCounter+9)^0,c
  4056  001D16  0E00               	movlw	0
  4057  001D18  6E66               	movwf	(_motCounter+8)^0,c
  4058  001D1A                     l4020:
  4059  001D1A  FFFF               	dw	65535	; assembler added errata NOP
  4060                           
  4061                           ;motors.c: 538:             LATC = stepMot3[motCounter[2][0]];
  4062  001D1C  0E84               	movlw	low _stepMot3
  4063  001D1E  2466               	addwf	(_motCounter+8)^0,w,c
  4064  001D20  6ED9               	movwf	fsr2l,c
  4065  001D22  0E00               	movlw	high _stepMot3
  4066  001D24  2067               	addwfc	(_motCounter+9)^0,w,c
  4067  001D26  6EDA               	movwf	fsr2h,c
  4068  001D28  50DF               	movf	indf2,w,c
  4069  001D2A  6E8B               	movwf	139,c	;volatile
  4070  001D2C                     l4022:
  4071  001D2C  FFFF               	dw	65535	; assembler added errata NOP
  4072  001D2E  EC22  F012         	call	_stepMade	;wreg free
  4073  001D32  5012               	movf	?_stepMade^0,w,c
  4074  001D34  1013               	iorwf	(?_stepMade+1)^0,w,c
  4075  001D36  B4D8               	btfsc	status,2,c
  4076  001D38  EFA0  F00E         	goto	u3321
  4077  001D3C  EFA3  F00E         	goto	u3320
  4078  001D40                     u3321:
  4079  001D40  FFFF               	dw	65535	; assembler added errata NOP
  4080  001D42  EF96  F00E         	goto	l4022
  4081  001D46                     u3320:
  4082  001D46  FFFF               	dw	65535	; assembler added errata NOP
  4083  001D48  EF5B  F00E         	goto	l4008
  4084  001D4C                     l4026:
  4085  001D4C  FFFF               	dw	65535	; assembler added errata NOP
  4086                           
  4087                           ;motors.c: 516:     while(!returnTouch() || PORTDbits.RD7){
  4088  001D4E  EC76  F012         	call	_returnTouch	;wreg free
  4089  001D52  5012               	movf	?_returnTouch^0,w,c
  4090  001D54  1013               	iorwf	(?_returnTouch+1)^0,w,c
  4091  001D56  B4D8               	btfsc	status,2,c
  4092  001D58  EFB0  F00E         	goto	u3331
  4093  001D5C  EFB3  F00E         	goto	u3330
  4094  001D60                     u3331:
  4095  001D60  FFFF               	dw	65535	; assembler added errata NOP
  4096  001D62  EF60  F00E         	goto	l4010
  4097  001D66                     u3330:
  4098  001D66  FFFF               	dw	65535	; assembler added errata NOP
  4099  001D68  BE83               	btfsc	131,7,c	;volatile
  4100  001D6A  EFB9  F00E         	goto	u3341
  4101  001D6E  EFBC  F00E         	goto	u3340
  4102  001D72                     u3341:
  4103  001D72  FFFF               	dw	65535	; assembler added errata NOP
  4104  001D74  EF60  F00E         	goto	l4010
  4105  001D78                     u3340:
  4106  001D78                     l4030:
  4107  001D78  FFFF               	dw	65535	; assembler added errata NOP
  4108                           
  4109                           ;motors.c: 557:     stopADC();
  4110  001D7A  ECB6  F012         	call	_stopADC	;wreg free
  4111  001D7E                     
  4112                           ;motors.c: 560:     resetTouch();
  4113  001D7E  EC91  F012         	call	_resetTouch	;wreg free
  4114  001D82                     
  4115                           ;motors.c: 563:     T0CONbits.TMR0ON = 0;
  4116  001D82  9ED5               	bcf	213,7,c	;volatile
  4117  001D84                     
  4118                           ;motors.c: 564:     T2CONbits.TMR2ON = 0;
  4119  001D84  94CA               	bcf	202,2,c	;volatile
  4120                           
  4121                           ;motors.c: 566:     TMR0 = 0;
  4122  001D86  0E00               	movlw	0
  4123  001D88  6ED7               	movwf	215,c	;volatile
  4124  001D8A  0E00               	movlw	0
  4125  001D8C  6ED6               	movwf	214,c	;volatile
  4126                           
  4127                           ;motors.c: 567:     TMR2 = 0;
  4128  001D8E  0E00               	movlw	0
  4129  001D90  6ECC               	movwf	204,c	;volatile
  4130  001D92                     
  4131                           ;motors.c: 570:     resetStep();
  4132  001D92  EC96  F012         	call	_resetStep	;wreg free
  4133  001D96                     
  4134                           ;motors.c: 573:     if(PORTDbits.RD7){
  4135  001D96  AE83               	btfss	131,7,c	;volatile
  4136  001D98  EFD0  F00E         	goto	u3351
  4137  001D9C  EFD3  F00E         	goto	u3350
  4138  001DA0                     u3351:
  4139  001DA0  FFFF               	dw	65535	; assembler added errata NOP
  4140  001DA2  EFD8  F00E         	goto	l201
  4141  001DA6                     u3350:
  4142  001DA6  FFFF               	dw	65535	; assembler added errata NOP
  4143  001DA8                     
  4144                           ;motors.c: 574:         tm0Error = 2;
  4145  001DA8  0E00               	movlw	0
  4146  001DAA  6E51               	movwf	(_tm0Error+1)^0,c
  4147  001DAC  0E02               	movlw	2
  4148  001DAE  6E50               	movwf	_tm0Error^0,c
  4149  001DB0                     l201:
  4150  001DB0  FFFF               	dw	65535	; assembler added errata NOP
  4151                           
  4152                           ;motors.c: 577:     return(tm0Error);
  4153  001DB2  5050               	movf	_tm0Error^0,w,c
  4154  001DB4  0012               	return		;funcret
  4155  001DB6  FFFF               	dw	65535	; errata NOP
  4156  001DB8                     __end_of_touchObject:
  4157                           	callstack 0
  4158                           
  4159 ;; *************** function _stopADC *****************
  4160 ;; Defined at:
  4161 ;;		line 44 in file "adc.c"
  4162 ;; Parameters:    Size  Location     Type
  4163 ;;		None
  4164 ;; Auto vars:     Size  Location     Type
  4165 ;;		None
  4166 ;; Return value:  Size  Location     Type
  4167 ;;                  1    wreg      void 
  4168 ;; Registers used:
  4169 ;;		None
  4170 ;; Tracked objects:
  4171 ;;		On entry : 0/0
  4172 ;;		On exit  : 0/0
  4173 ;;		Unchanged: 0/0
  4174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4175 ;;      Params:         0       0       0       0       0       0       0
  4176 ;;      Locals:         0       0       0       0       0       0       0
  4177 ;;      Temps:          0       0       0       0       0       0       0
  4178 ;;      Totals:         0       0       0       0       0       0       0
  4179 ;;Total ram usage:        0 bytes
  4180 ;; Hardware stack levels used:    1
  4181 ;; Hardware stack levels required when called:    4
  4182 ;; This function calls:
  4183 ;;		Nothing
  4184 ;; This function is called by:
  4185 ;;		_touchObject
  4186 ;;		_touchTherm
  4187 ;; This function uses a non-reentrant model
  4188 ;;
  4189                           
  4190                           	psect	text23
  4191  00256C                     __ptext23:
  4192                           	callstack 0
  4193  00256C                     _stopADC:
  4194                           	callstack 0
  4195  00256C  FFFF               	dw	65535	; assembler added errata NOP
  4196  00256E                     
  4197                           ;adc.c: 45:     ADCON0bits.ADON = 0;
  4198  00256E  90C2               	bcf	194,0,c	;volatile
  4199  002570  0012               	return		;funcret
  4200  002572  FFFF               	dw	65535	; errata NOP
  4201  002574                     __end_of_stopADC:
  4202                           	callstack 0
  4203                           
  4204 ;; *************** function _startADC *****************
  4205 ;; Defined at:
  4206 ;;		line 36 in file "adc.c"
  4207 ;; Parameters:    Size  Location     Type
  4208 ;;		None
  4209 ;; Auto vars:     Size  Location     Type
  4210 ;;		None
  4211 ;; Return value:  Size  Location     Type
  4212 ;;                  1    wreg      void 
  4213 ;; Registers used:
  4214 ;;		None
  4215 ;; Tracked objects:
  4216 ;;		On entry : 0/0
  4217 ;;		On exit  : 0/0
  4218 ;;		Unchanged: 0/0
  4219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4220 ;;      Params:         0       0       0       0       0       0       0
  4221 ;;      Locals:         0       0       0       0       0       0       0
  4222 ;;      Temps:          0       0       0       0       0       0       0
  4223 ;;      Totals:         0       0       0       0       0       0       0
  4224 ;;Total ram usage:        0 bytes
  4225 ;; Hardware stack levels used:    1
  4226 ;; Hardware stack levels required when called:    4
  4227 ;; This function calls:
  4228 ;;		Nothing
  4229 ;; This function is called by:
  4230 ;;		_touchObject
  4231 ;;		_touchTherm
  4232 ;; This function uses a non-reentrant model
  4233 ;;
  4234                           
  4235                           	psect	text24
  4236  002518                     __ptext24:
  4237                           	callstack 0
  4238  002518                     _startADC:
  4239                           	callstack 0
  4240  002518  FFFF               	dw	65535	; assembler added errata NOP
  4241  00251A                     
  4242                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  4243  00251A  80C2               	bsf	194,0,c	;volatile
  4244                           
  4245                           ;adc.c: 38:     ADCON0bits.GODONE = 1;
  4246  00251C  84C2               	bsf	194,2,c	;volatile
  4247  00251E  0012               	return		;funcret
  4248  002520  FFFF               	dw	65535	; errata NOP
  4249  002522                     __end_of_startADC:
  4250                           	callstack 0
  4251                           
  4252 ;; *************** function _returnTouch *****************
  4253 ;; Defined at:
  4254 ;;		line 51 in file "adc.c"
  4255 ;; Parameters:    Size  Location     Type
  4256 ;;		None
  4257 ;; Auto vars:     Size  Location     Type
  4258 ;;		None
  4259 ;; Return value:  Size  Location     Type
  4260 ;;                  2   17[COMRAM] unsigned int 
  4261 ;; Registers used:
  4262 ;;		None
  4263 ;; Tracked objects:
  4264 ;;		On entry : 0/0
  4265 ;;		On exit  : 0/0
  4266 ;;		Unchanged: 0/0
  4267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4268 ;;      Params:         2       0       0       0       0       0       0
  4269 ;;      Locals:         0       0       0       0       0       0       0
  4270 ;;      Temps:          0       0       0       0       0       0       0
  4271 ;;      Totals:         2       0       0       0       0       0       0
  4272 ;;Total ram usage:        2 bytes
  4273 ;; Hardware stack levels used:    1
  4274 ;; Hardware stack levels required when called:    4
  4275 ;; This function calls:
  4276 ;;		Nothing
  4277 ;; This function is called by:
  4278 ;;		_touchObject
  4279 ;; This function uses a non-reentrant model
  4280 ;;
  4281                           
  4282                           	psect	text25
  4283  0024EC                     __ptext25:
  4284                           	callstack 0
  4285  0024EC                     _returnTouch:
  4286                           	callstack 0
  4287  0024EC  FFFF               	dw	65535	; assembler added errata NOP
  4288  0024EE                     
  4289                           ;adc.c: 52:     return touch_rel;
  4290  0024EE  C05C  F012         	movff	_touch_rel,?_returnTouch	;volatile
  4291  0024F2  6A13               	clrf	(?_returnTouch+1)^0,c
  4292  0024F4  0012               	return		;funcret
  4293  0024F6  FFFF               	dw	65535	; errata NOP
  4294  0024F8                     __end_of_returnTouch:
  4295                           	callstack 0
  4296                           
  4297 ;; *************** function _resetTouch *****************
  4298 ;; Defined at:
  4299 ;;		line 65 in file "adc.c"
  4300 ;; Parameters:    Size  Location     Type
  4301 ;;		None
  4302 ;; Auto vars:     Size  Location     Type
  4303 ;;		None
  4304 ;; Return value:  Size  Location     Type
  4305 ;;                  1    wreg      void 
  4306 ;; Registers used:
  4307 ;;		wreg, status,2
  4308 ;; Tracked objects:
  4309 ;;		On entry : 0/0
  4310 ;;		On exit  : 0/0
  4311 ;;		Unchanged: 0/0
  4312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4313 ;;      Params:         0       0       0       0       0       0       0
  4314 ;;      Locals:         0       0       0       0       0       0       0
  4315 ;;      Temps:          0       0       0       0       0       0       0
  4316 ;;      Totals:         0       0       0       0       0       0       0
  4317 ;;Total ram usage:        0 bytes
  4318 ;; Hardware stack levels used:    1
  4319 ;; Hardware stack levels required when called:    4
  4320 ;; This function calls:
  4321 ;;		Nothing
  4322 ;; This function is called by:
  4323 ;;		_touchObject
  4324 ;; This function uses a non-reentrant model
  4325 ;;
  4326                           
  4327                           	psect	text26
  4328  002522                     __ptext26:
  4329                           	callstack 0
  4330  002522                     _resetTouch:
  4331                           	callstack 0
  4332  002522  FFFF               	dw	65535	; assembler added errata NOP
  4333  002524                     
  4334                           ;adc.c: 66:     touch_rel = 0;
  4335  002524  0E00               	movlw	0
  4336  002526  6E5C               	movwf	_touch_rel^0,c	;volatile
  4337  002528  0012               	return		;funcret
  4338  00252A  FFFF               	dw	65535	; errata NOP
  4339  00252C                     __end_of_resetTouch:
  4340                           	callstack 0
  4341                           
  4342 ;; *************** function _rotateObj *****************
  4343 ;; Defined at:
  4344 ;;		line 751 in file "motors.c"
  4345 ;; Parameters:    Size  Location     Type
  4346 ;;  rotAngle        1    wreg     unsigned char 
  4347 ;; Auto vars:     Size  Location     Type
  4348 ;;  rotAngle        1    3[BANK0 ] unsigned char 
  4349 ;;  i               2    6[BANK0 ] unsigned int 
  4350 ;;  totStep         2    4[BANK0 ] int 
  4351 ;; Return value:  Size  Location     Type
  4352 ;;                  1    wreg      void 
  4353 ;; Registers used:
  4354 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4355 ;; Tracked objects:
  4356 ;;		On entry : 0/0
  4357 ;;		On exit  : 0/0
  4358 ;;		Unchanged: 0/0
  4359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4360 ;;      Params:         0       0       0       0       0       0       0
  4361 ;;      Locals:         0       5       0       0       0       0       0
  4362 ;;      Temps:          0       3       0       0       0       0       0
  4363 ;;      Totals:         0       8       0       0       0       0       0
  4364 ;;Total ram usage:        8 bytes
  4365 ;; Hardware stack levels used:    1
  4366 ;; Hardware stack levels required when called:    5
  4367 ;; This function calls:
  4368 ;;		___fldiv
  4369 ;;		___fltol
  4370 ;;		___xxtofl
  4371 ;;		_stepMade
  4372 ;; This function is called by:
  4373 ;;		_executeData
  4374 ;; This function uses a non-reentrant model
  4375 ;;
  4376                           
  4377                           	psect	text27
  4378  001FCC                     __ptext27:
  4379                           	callstack 0
  4380  001FCC                     _rotateObj:
  4381                           	callstack 0
  4382  001FCC  FFFF               	dw	65535	; assembler added errata NOP
  4383                           
  4384                           ;incstack = 0
  4385                           ;rotateObj@rotAngle stored from wreg
  4386  001FCE  0100               	movlb	0	; () banked
  4387  001FD0  6FF0               	movwf	rotateObj@rotAngle& (0+255),b
  4388  001FD2                     
  4389                           ;motors.c: 752:     static const float stepAngle = 0.08789;;motors.c: 753:     static ch
      +                          ar rotSequence[] = {0b1001, 0b0011, 0b0110, 0b1100};;motors.c: 754:     unsigned int i;;
      +                          motors.c: 755:     int totStep = rotAngle/stepAngle;
  4390  001FD2  0EAC               	movlw	172
  4391  001FD4  6E24               	movwf	___fldiv@a^0,c
  4392  001FD6  0EFF               	movlw	255
  4393  001FD8  6E25               	movwf	(___fldiv@a+1)^0,c
  4394  001FDA  0EB3               	movlw	179
  4395  001FDC  6E26               	movwf	(___fldiv@a+2)^0,c
  4396  001FDE  0E3D               	movlw	61
  4397  001FE0  6E27               	movwf	(___fldiv@a+3)^0,c
  4398  001FE2  0100               	movlb	0	; () banked
  4399  001FE4  51F0               	movf	rotateObj@rotAngle& (0+255),w,b
  4400  001FE6  6E12               	movwf	___xxtofl@val^0,c
  4401  001FE8  6A13               	clrf	(___xxtofl@val+1)^0,c
  4402  001FEA  6A14               	clrf	(___xxtofl@val+2)^0,c
  4403  001FEC  6A15               	clrf	(___xxtofl@val+3)^0,c
  4404  001FEE  0E01               	movlw	1
  4405  001FF0  EC4A  F009         	call	___xxtofl
  4406  001FF4  C012  F020         	movff	?___xxtofl,___fldiv@b
  4407  001FF8  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4408  001FFC  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4409  002000  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4410  002004  EC09  F003         	call	___fldiv	;wreg free
  4411  002008  C020  F039         	movff	?___fldiv,___fltol@f1
  4412  00200C  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4413  002010  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4414  002014  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4415  002018  EC97  F00C         	call	___fltol	;wreg free
  4416  00201C  C039  F0F1         	movff	?___fltol,rotateObj@totStep
  4417  002020  C03A  F0F2         	movff	?___fltol+1,rotateObj@totStep+1
  4418  002024                     
  4419                           ;motors.c: 758:     for(i = 0; i < totStep; i++){
  4420  002024  0E00               	movlw	0
  4421  002026  0100               	movlb	0	; () banked
  4422  002028  6FF4               	movwf	(rotateObj@i+1)& (0+255),b
  4423  00202A  0E00               	movlw	0
  4424  00202C  6FF3               	movwf	rotateObj@i& (0+255),b
  4425  00202E  EF44  F010         	goto	l4134
  4426  002032                     l4122:
  4427  002032  FFFF               	dw	65535	; assembler added errata NOP
  4428                           
  4429                           ; BSR set to: 0
  4430                           ;motors.c: 760:         LATD &= 0xC3;
  4431  002034  0EC3               	movlw	195
  4432  002036  168C               	andwf	140,f,c	;volatile
  4433  002038                     
  4434                           ; BSR set to: 0
  4435                           ;motors.c: 762:         LATD |= rotSequence[i%4] << 2;
  4436  002038  0E03               	movlw	3
  4437  00203A  15F3               	andwf	rotateObj@i& (0+255),w,b
  4438  00203C  6FED               	movwf	??_rotateObj& (0+255),b
  4439  00203E  0E00               	movlw	0
  4440  002040  15F4               	andwf	(rotateObj@i+1)& (0+255),w,b
  4441  002042  6FEE               	movwf	(??_rotateObj+1)& (0+255),b
  4442  002044  0E80               	movlw	low rotateObj@rotSequence
  4443  002046  25ED               	addwf	??_rotateObj& (0+255),w,b
  4444  002048  6ED9               	movwf	fsr2l,c
  4445  00204A  0E00               	movlw	high rotateObj@rotSequence
  4446  00204C  21EE               	addwfc	(??_rotateObj+1)& (0+255),w,b
  4447  00204E  6EDA               	movwf	fsr2h,c
  4448  002050  50DF               	movf	indf2,w,c
  4449  002052  6FEF               	movwf	(??_rotateObj+2)& (0+255),b
  4450  002054  90D8               	bcf	status,0,c
  4451  002056  37EF               	rlcf	(??_rotateObj+2)& (0+255),f,b
  4452  002058  90D8               	bcf	status,0,c
  4453  00205A  35EF               	rlcf	(??_rotateObj+2)& (0+255),w,b
  4454  00205C  128C               	iorwf	140,f,c	;volatile
  4455  00205E                     
  4456                           ; BSR set to: 0
  4457                           ;motors.c: 765:         T2CONbits.TMR2ON = 1;
  4458  00205E  84CA               	bsf	202,2,c	;volatile
  4459  002060                     l4128:
  4460  002060  FFFF               	dw	65535	; assembler added errata NOP
  4461  002062  EC22  F012         	call	_stepMade	;wreg free
  4462  002066  5012               	movf	?_stepMade^0,w,c
  4463  002068  1013               	iorwf	(?_stepMade+1)^0,w,c
  4464  00206A  B4D8               	btfsc	status,2,c
  4465  00206C  EF3A  F010         	goto	u3461
  4466  002070  EF3D  F010         	goto	u3460
  4467  002074                     u3461:
  4468  002074  FFFF               	dw	65535	; assembler added errata NOP
  4469  002076  EF30  F010         	goto	l4128
  4470  00207A                     u3460:
  4471  00207A  FFFF               	dw	65535	; assembler added errata NOP
  4472  00207C                     
  4473                           ;motors.c: 767:         T2CONbits.TMR2ON = 1;
  4474  00207C  84CA               	bsf	202,2,c	;volatile
  4475  00207E                     
  4476                           ;motors.c: 768:         TMR2 = 0;
  4477  00207E  0E00               	movlw	0
  4478  002080  6ECC               	movwf	204,c	;volatile
  4479  002082                     
  4480                           ;motors.c: 769:     }
  4481  002082  0100               	movlb	0	; () banked
  4482  002084  4BF3               	infsnz	rotateObj@i& (0+255),f,b
  4483  002086  2BF4               	incf	(rotateObj@i+1)& (0+255),f,b
  4484  002088                     l4134:
  4485  002088  FFFF               	dw	65535	; assembler added errata NOP
  4486                           
  4487                           ; BSR set to: 0
  4488  00208A  51F1               	movf	rotateObj@totStep& (0+255),w,b
  4489  00208C  5DF3               	subwf	rotateObj@i& (0+255),w,b
  4490  00208E  51F2               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4491  002090  59F4               	subwfb	(rotateObj@i+1)& (0+255),w,b
  4492  002092  A0D8               	btfss	status,0,c
  4493  002094  EF4E  F010         	goto	u3471
  4494  002098  EF51  F010         	goto	u3470
  4495  00209C                     u3471:
  4496  00209C  FFFF               	dw	65535	; assembler added errata NOP
  4497  00209E  EF19  F010         	goto	l4122
  4498  0020A2                     u3470:
  4499  0020A2  FFFF               	dw	65535	; assembler added errata NOP
  4500  0020A4                     
  4501                           ; BSR set to: 0
  4502  0020A4  0012               	return		;funcret
  4503  0020A6  FFFF               	dw	65535	; errata NOP
  4504  0020A8                     __end_of_rotateObj:
  4505                           	callstack 0
  4506                           
  4507 ;; *************** function ___xxtofl *****************
  4508 ;; Defined at:
  4509 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4510 ;; Parameters:    Size  Location     Type
  4511 ;;  sign            1    wreg     unsigned char 
  4512 ;;  val             4   17[COMRAM] long 
  4513 ;; Auto vars:     Size  Location     Type
  4514 ;;  sign            1   25[COMRAM] unsigned char 
  4515 ;;  arg             4   27[COMRAM] unsigned long 
  4516 ;;  exp             1   26[COMRAM] unsigned char 
  4517 ;; Return value:  Size  Location     Type
  4518 ;;                  4   17[COMRAM] unsigned char 
  4519 ;; Registers used:
  4520 ;;		wreg, status,2, status,0
  4521 ;; Tracked objects:
  4522 ;;		On entry : 0/0
  4523 ;;		On exit  : 0/0
  4524 ;;		Unchanged: 0/0
  4525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4526 ;;      Params:         4       0       0       0       0       0       0
  4527 ;;      Locals:         6       0       0       0       0       0       0
  4528 ;;      Temps:          4       0       0       0       0       0       0
  4529 ;;      Totals:        14       0       0       0       0       0       0
  4530 ;;Total ram usage:       14 bytes
  4531 ;; Hardware stack levels used:    1
  4532 ;; Hardware stack levels required when called:    4
  4533 ;; This function calls:
  4534 ;;		Nothing
  4535 ;; This function is called by:
  4536 ;;		_rotateObj
  4537 ;; This function uses a non-reentrant model
  4538 ;;
  4539                           
  4540                           	psect	text28
  4541  001294                     __ptext28:
  4542                           	callstack 0
  4543  001294                     ___xxtofl:
  4544                           	callstack 0
  4545  001294  FFFF               	dw	65535	; assembler added errata NOP
  4546                           
  4547                           ; BSR set to: 0
  4548                           ;incstack = 0
  4549                           ;___xxtofl@sign stored from wreg
  4550  001296  6E1A               	movwf	___xxtofl@sign^0,c
  4551  001298  501A               	movf	___xxtofl@sign^0,w,c
  4552  00129A  B4D8               	btfsc	status,2,c
  4553  00129C  EF52  F009         	goto	u2961
  4554  0012A0  EF55  F009         	goto	u2960
  4555  0012A4                     u2961:
  4556  0012A4  FFFF               	dw	65535	; assembler added errata NOP
  4557  0012A6  EF7A  F009         	goto	l1280
  4558  0012AA                     u2960:
  4559  0012AA  FFFF               	dw	65535	; assembler added errata NOP
  4560  0012AC  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4561  0012AE  EF5E  F009         	goto	u2970
  4562  0012B2  EF5B  F009         	goto	u2971
  4563  0012B6                     u2971:
  4564  0012B6  FFFF               	dw	65535	; assembler added errata NOP
  4565  0012B8  EF7A  F009         	goto	l1280
  4566  0012BC                     u2970:
  4567  0012BC  FFFF               	dw	65535	; assembler added errata NOP
  4568  0012BE  C012  F016         	movff	___xxtofl@val,??___xxtofl
  4569  0012C2  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  4570  0012C6  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  4571  0012CA  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  4572  0012CE  1E16               	comf	??___xxtofl^0,f,c
  4573  0012D0  1E17               	comf	(??___xxtofl+1)^0,f,c
  4574  0012D2  1E18               	comf	(??___xxtofl+2)^0,f,c
  4575  0012D4  1E19               	comf	(??___xxtofl+3)^0,f,c
  4576  0012D6  2A16               	incf	??___xxtofl^0,f,c
  4577  0012D8  0E00               	movlw	0
  4578  0012DA  2217               	addwfc	(??___xxtofl+1)^0,f,c
  4579  0012DC  2218               	addwfc	(??___xxtofl+2)^0,f,c
  4580  0012DE  2219               	addwfc	(??___xxtofl+3)^0,f,c
  4581  0012E0  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  4582  0012E4  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4583  0012E8  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4584  0012EC  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4585  0012F0  EF83  F009         	goto	l3856
  4586  0012F4                     l1280:
  4587  0012F4  FFFF               	dw	65535	; assembler added errata NOP
  4588  0012F6  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  4589  0012FA  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4590  0012FE  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4591  001302  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4592  001306                     l3856:
  4593  001306  FFFF               	dw	65535	; assembler added errata NOP
  4594  001308  5012               	movf	___xxtofl@val^0,w,c
  4595  00130A  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  4596  00130C  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  4597  00130E  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  4598  001310  A4D8               	btfss	status,2,c
  4599  001312  EF8D  F009         	goto	u2981
  4600  001316  EF90  F009         	goto	u2980
  4601  00131A                     u2981:
  4602  00131A  FFFF               	dw	65535	; assembler added errata NOP
  4603  00131C  EF9B  F009         	goto	l3862
  4604  001320                     u2980:
  4605  001320  FFFF               	dw	65535	; assembler added errata NOP
  4606  001322  0E00               	movlw	0
  4607  001324  6E12               	movwf	?___xxtofl^0,c
  4608  001326  0E00               	movlw	0
  4609  001328  6E13               	movwf	(?___xxtofl+1)^0,c
  4610  00132A  0E00               	movlw	0
  4611  00132C  6E14               	movwf	(?___xxtofl+2)^0,c
  4612  00132E  0E00               	movlw	0
  4613  001330  6E15               	movwf	(?___xxtofl+3)^0,c
  4614  001332  EF43  F00A         	goto	l1283
  4615  001336                     l3862:
  4616  001336  FFFF               	dw	65535	; assembler added errata NOP
  4617  001338  0E96               	movlw	150
  4618  00133A  6E1B               	movwf	___xxtofl@exp^0,c
  4619  00133C  EFA7  F009         	goto	l3866
  4620  001340                     l3864:
  4621  001340  FFFF               	dw	65535	; assembler added errata NOP
  4622  001342  2A1B               	incf	___xxtofl@exp^0,f,c
  4623  001344  90D8               	bcf	status,0,c
  4624  001346  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4625  001348  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4626  00134A  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4627  00134C  321C               	rrcf	___xxtofl@arg^0,f,c
  4628  00134E                     l3866:
  4629  00134E  FFFF               	dw	65535	; assembler added errata NOP
  4630  001350  0E00               	movlw	0
  4631  001352  141C               	andwf	___xxtofl@arg^0,w,c
  4632  001354  6E16               	movwf	??___xxtofl^0,c
  4633  001356  0E00               	movlw	0
  4634  001358  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4635  00135A  6E17               	movwf	(??___xxtofl+1)^0,c
  4636  00135C  0E00               	movlw	0
  4637  00135E  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4638  001360  6E18               	movwf	(??___xxtofl+2)^0,c
  4639  001362  0EFE               	movlw	254
  4640  001364  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4641  001366  6E19               	movwf	(??___xxtofl+3)^0,c
  4642  001368  5016               	movf	??___xxtofl^0,w,c
  4643  00136A  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4644  00136C  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4645  00136E  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4646  001370  A4D8               	btfss	status,2,c
  4647  001372  EFBD  F009         	goto	u2991
  4648  001376  EFC0  F009         	goto	u2990
  4649  00137A                     u2991:
  4650  00137A  FFFF               	dw	65535	; assembler added errata NOP
  4651  00137C  EFA0  F009         	goto	l3864
  4652  001380                     u2990:
  4653  001380  FFFF               	dw	65535	; assembler added errata NOP
  4654  001382  EFD0  F009         	goto	l1287
  4655  001386                     l3868:
  4656  001386  FFFF               	dw	65535	; assembler added errata NOP
  4657  001388  2A1B               	incf	___xxtofl@exp^0,f,c
  4658  00138A  0E01               	movlw	1
  4659  00138C  261C               	addwf	___xxtofl@arg^0,f,c
  4660  00138E  0E00               	movlw	0
  4661  001390  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4662  001392  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4663  001394  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4664  001396  90D8               	bcf	status,0,c
  4665  001398  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4666  00139A  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4667  00139C  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4668  00139E  321C               	rrcf	___xxtofl@arg^0,f,c
  4669  0013A0                     l1287:
  4670  0013A0  FFFF               	dw	65535	; assembler added errata NOP
  4671  0013A2  0E00               	movlw	0
  4672  0013A4  141C               	andwf	___xxtofl@arg^0,w,c
  4673  0013A6  6E16               	movwf	??___xxtofl^0,c
  4674  0013A8  0E00               	movlw	0
  4675  0013AA  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4676  0013AC  6E17               	movwf	(??___xxtofl+1)^0,c
  4677  0013AE  0E00               	movlw	0
  4678  0013B0  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4679  0013B2  6E18               	movwf	(??___xxtofl+2)^0,c
  4680  0013B4  0EFF               	movlw	255
  4681  0013B6  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4682  0013B8  6E19               	movwf	(??___xxtofl+3)^0,c
  4683  0013BA  5016               	movf	??___xxtofl^0,w,c
  4684  0013BC  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4685  0013BE  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4686  0013C0  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4687  0013C2  A4D8               	btfss	status,2,c
  4688  0013C4  EFE6  F009         	goto	u3001
  4689  0013C8  EFE9  F009         	goto	u3000
  4690  0013CC                     u3001:
  4691  0013CC  FFFF               	dw	65535	; assembler added errata NOP
  4692  0013CE  EFC3  F009         	goto	l3868
  4693  0013D2                     u3000:
  4694  0013D2  FFFF               	dw	65535	; assembler added errata NOP
  4695  0013D4  EFF3  F009         	goto	l3876
  4696  0013D8                     l3874:
  4697  0013D8  FFFF               	dw	65535	; assembler added errata NOP
  4698  0013DA  061B               	decf	___xxtofl@exp^0,f,c
  4699  0013DC  90D8               	bcf	status,0,c
  4700  0013DE  361C               	rlcf	___xxtofl@arg^0,f,c
  4701  0013E0  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4702  0013E2  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4703  0013E4  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4704  0013E6                     l3876:
  4705  0013E6  FFFF               	dw	65535	; assembler added errata NOP
  4706  0013E8  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4707  0013EA  EFF9  F009         	goto	u3011
  4708  0013EE  EFFC  F009         	goto	u3010
  4709  0013F2                     u3011:
  4710  0013F2  FFFF               	dw	65535	; assembler added errata NOP
  4711  0013F4  EF06  F00A         	goto	l1294
  4712  0013F8                     u3010:
  4713  0013F8  FFFF               	dw	65535	; assembler added errata NOP
  4714  0013FA  0E02               	movlw	2
  4715  0013FC  601B               	cpfslt	___xxtofl@exp^0,c
  4716  0013FE  EF03  F00A         	goto	u3021
  4717  001402  EF06  F00A         	goto	u3020
  4718  001406                     u3021:
  4719  001406  FFFF               	dw	65535	; assembler added errata NOP
  4720  001408  EFEC  F009         	goto	l3874
  4721  00140C                     u3020:
  4722  00140C                     l1294:
  4723  00140C  FFFF               	dw	65535	; assembler added errata NOP
  4724  00140E  B01B               	btfsc	___xxtofl@exp^0,0,c
  4725  001410  EF0C  F00A         	goto	u3031
  4726  001414  EF0F  F00A         	goto	u3030
  4727  001418                     u3031:
  4728  001418  FFFF               	dw	65535	; assembler added errata NOP
  4729  00141A  EF11  F00A         	goto	l3882
  4730  00141E                     u3030:
  4731  00141E  FFFF               	dw	65535	; assembler added errata NOP
  4732  001420  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  4733  001422                     l3882:
  4734  001422  FFFF               	dw	65535	; assembler added errata NOP
  4735  001424  90D8               	bcf	status,0,c
  4736  001426  321B               	rrcf	___xxtofl@exp^0,f,c
  4737  001428  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  4738  00142C  6A17               	clrf	(??___xxtofl+1)^0,c
  4739  00142E  6A18               	clrf	(??___xxtofl+2)^0,c
  4740  001430  6A19               	clrf	(??___xxtofl+3)^0,c
  4741  001432  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  4742  001436  6A18               	clrf	(??___xxtofl+2)^0,c
  4743  001438  6A17               	clrf	(??___xxtofl+1)^0,c
  4744  00143A  6A16               	clrf	??___xxtofl^0,c
  4745  00143C  5016               	movf	??___xxtofl^0,w,c
  4746  00143E  121C               	iorwf	___xxtofl@arg^0,f,c
  4747  001440  5017               	movf	(??___xxtofl+1)^0,w,c
  4748  001442  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4749  001444  5018               	movf	(??___xxtofl+2)^0,w,c
  4750  001446  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4751  001448  5019               	movf	(??___xxtofl+3)^0,w,c
  4752  00144A  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4753  00144C  501A               	movf	___xxtofl@sign^0,w,c
  4754  00144E  B4D8               	btfsc	status,2,c
  4755  001450  EF2C  F00A         	goto	u3041
  4756  001454  EF2F  F00A         	goto	u3040
  4757  001458                     u3041:
  4758  001458  FFFF               	dw	65535	; assembler added errata NOP
  4759  00145A  EF3A  F00A         	goto	l3892
  4760  00145E                     u3040:
  4761  00145E  FFFF               	dw	65535	; assembler added errata NOP
  4762  001460  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4763  001462  EF38  F00A         	goto	u3050
  4764  001466  EF35  F00A         	goto	u3051
  4765  00146A                     u3051:
  4766  00146A  FFFF               	dw	65535	; assembler added errata NOP
  4767  00146C  EF3A  F00A         	goto	l3892
  4768  001470                     u3050:
  4769  001470  FFFF               	dw	65535	; assembler added errata NOP
  4770  001472  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  4771  001474                     l3892:
  4772  001474  FFFF               	dw	65535	; assembler added errata NOP
  4773  001476  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  4774  00147A  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  4775  00147E  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  4776  001482  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  4777  001486                     l1283:
  4778  001486  FFFF               	dw	65535	; assembler added errata NOP
  4779  001488  0012               	return		;funcret
  4780  00148A  FFFF               	dw	65535	; errata NOP
  4781  00148C                     __end_of___xxtofl:
  4782                           	callstack 0
  4783                           
  4784 ;; *************** function ___fltol *****************
  4785 ;; Defined at:
  4786 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  4787 ;; Parameters:    Size  Location     Type
  4788 ;;  f1              4   56[COMRAM] unsigned char 
  4789 ;; Auto vars:     Size  Location     Type
  4790 ;;  exp1            1   65[COMRAM] unsigned char 
  4791 ;;  sign1           1   64[COMRAM] unsigned char 
  4792 ;; Return value:  Size  Location     Type
  4793 ;;                  4   56[COMRAM] long 
  4794 ;; Registers used:
  4795 ;;		wreg, status,2, status,0
  4796 ;; Tracked objects:
  4797 ;;		On entry : 0/0
  4798 ;;		On exit  : 0/0
  4799 ;;		Unchanged: 0/0
  4800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4801 ;;      Params:         4       0       0       0       0       0       0
  4802 ;;      Locals:         2       0       0       0       0       0       0
  4803 ;;      Temps:          4       0       0       0       0       0       0
  4804 ;;      Totals:        10       0       0       0       0       0       0
  4805 ;;Total ram usage:       10 bytes
  4806 ;; Hardware stack levels used:    1
  4807 ;; Hardware stack levels required when called:    4
  4808 ;; This function calls:
  4809 ;;		Nothing
  4810 ;; This function is called by:
  4811 ;;		_rotateObj
  4812 ;; This function uses a non-reentrant model
  4813 ;;
  4814                           
  4815                           	psect	text29
  4816  00192E                     __ptext29:
  4817                           	callstack 0
  4818  00192E                     ___fltol:
  4819                           	callstack 0
  4820  00192E  FFFF               	dw	65535	; assembler added errata NOP
  4821  001930  343B               	rlcf	(___fltol@f1+2)^0,w,c
  4822  001932  343C               	rlcf	(___fltol@f1+3)^0,w,c
  4823  001934  6E42               	movwf	___fltol@exp1^0,c
  4824  001936  5042               	movf	___fltol@exp1^0,w,c
  4825  001938  A4D8               	btfss	status,2,c
  4826  00193A  EFA1  F00C         	goto	u2891
  4827  00193E  EFA4  F00C         	goto	u2890
  4828  001942                     u2891:
  4829  001942  FFFF               	dw	65535	; assembler added errata NOP
  4830  001944  EFB0  F00C         	goto	l3812
  4831  001948                     u2890:
  4832  001948  FFFF               	dw	65535	; assembler added errata NOP
  4833  00194A                     l3808:
  4834  00194A  FFFF               	dw	65535	; assembler added errata NOP
  4835  00194C  0E00               	movlw	0
  4836  00194E  6E39               	movwf	?___fltol^0,c
  4837  001950  0E00               	movlw	0
  4838  001952  6E3A               	movwf	(?___fltol+1)^0,c
  4839  001954  0E00               	movlw	0
  4840  001956  6E3B               	movwf	(?___fltol+2)^0,c
  4841  001958  0E00               	movlw	0
  4842  00195A  6E3C               	movwf	(?___fltol+3)^0,c
  4843  00195C  EF2F  F00D         	goto	l922
  4844  001960                     l3812:
  4845  001960  FFFF               	dw	65535	; assembler added errata NOP
  4846  001962  C039  F03D         	movff	___fltol@f1,??___fltol
  4847  001966  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  4848  00196A  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  4849  00196E  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  4850  001972  0E20               	movlw	32
  4851  001974  EFC2  F00C         	goto	u2900
  4852  001978                     u2905:
  4853  001978  FFFF               	dw	65535	; assembler added errata NOP
  4854  00197A  90D8               	bcf	status,0,c
  4855  00197C  3240               	rrcf	(??___fltol+3)^0,f,c
  4856  00197E  323F               	rrcf	(??___fltol+2)^0,f,c
  4857  001980  323E               	rrcf	(??___fltol+1)^0,f,c
  4858  001982  323D               	rrcf	??___fltol^0,f,c
  4859  001984                     u2900:
  4860  001984  FFFF               	dw	65535	; assembler added errata NOP
  4861  001986  2EE8               	decfsz	wreg,f,c
  4862  001988  EFBC  F00C         	goto	u2905
  4863  00198C  503D               	movf	??___fltol^0,w,c
  4864  00198E  6E41               	movwf	___fltol@sign1^0,c
  4865  001990  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  4866  001992  0EFF               	movlw	255
  4867  001994  1639               	andwf	___fltol@f1^0,f,c
  4868  001996  0EFF               	movlw	255
  4869  001998  163A               	andwf	(___fltol@f1+1)^0,f,c
  4870  00199A  0EFF               	movlw	255
  4871  00199C  163B               	andwf	(___fltol@f1+2)^0,f,c
  4872  00199E  0E00               	movlw	0
  4873  0019A0  163C               	andwf	(___fltol@f1+3)^0,f,c
  4874  0019A2  0E96               	movlw	150
  4875  0019A4  5E42               	subwf	___fltol@exp1^0,f,c
  4876  0019A6  BE42               	btfsc	___fltol@exp1^0,7,c
  4877  0019A8  EFDB  F00C         	goto	u2910
  4878  0019AC  EFD8  F00C         	goto	u2911
  4879  0019B0                     u2911:
  4880  0019B0  FFFF               	dw	65535	; assembler added errata NOP
  4881  0019B2  EFF5  F00C         	goto	l3832
  4882  0019B6                     u2910:
  4883  0019B6  FFFF               	dw	65535	; assembler added errata NOP
  4884  0019B8  5042               	movf	___fltol@exp1^0,w,c
  4885  0019BA  0A80               	xorlw	128
  4886  0019BC  0F97               	addlw	151
  4887  0019BE  B0D8               	btfsc	status,0,c
  4888  0019C0  EFE4  F00C         	goto	u2921
  4889  0019C4  EFE7  F00C         	goto	u2920
  4890  0019C8                     u2921:
  4891  0019C8  FFFF               	dw	65535	; assembler added errata NOP
  4892  0019CA  EFEA  F00C         	goto	l3828
  4893  0019CE                     u2920:
  4894  0019CE  FFFF               	dw	65535	; assembler added errata NOP
  4895  0019D0  EFA5  F00C         	goto	l3808
  4896  0019D4                     l3828:
  4897  0019D4  FFFF               	dw	65535	; assembler added errata NOP
  4898  0019D6  90D8               	bcf	status,0,c
  4899  0019D8  323C               	rrcf	(___fltol@f1+3)^0,f,c
  4900  0019DA  323B               	rrcf	(___fltol@f1+2)^0,f,c
  4901  0019DC  323A               	rrcf	(___fltol@f1+1)^0,f,c
  4902  0019DE  3239               	rrcf	___fltol@f1^0,f,c
  4903  0019E0  3E42               	incfsz	___fltol@exp1^0,f,c
  4904  0019E2  EFEA  F00C         	goto	l3828
  4905  0019E6  EF13  F00D         	goto	l3842
  4906  0019EA                     l3832:
  4907  0019EA  FFFF               	dw	65535	; assembler added errata NOP
  4908  0019EC  0E1F               	movlw	31
  4909  0019EE  6442               	cpfsgt	___fltol@exp1^0,c
  4910  0019F0  EFFC  F00C         	goto	u2931
  4911  0019F4  EFFF  F00C         	goto	u2930
  4912  0019F8                     u2931:
  4913  0019F8  FFFF               	dw	65535	; assembler added errata NOP
  4914  0019FA  EF09  F00D         	goto	l3840
  4915  0019FE                     u2930:
  4916  0019FE  FFFF               	dw	65535	; assembler added errata NOP
  4917  001A00  EFA5  F00C         	goto	l3808
  4918  001A04                     l3838:
  4919  001A04  FFFF               	dw	65535	; assembler added errata NOP
  4920  001A06  90D8               	bcf	status,0,c
  4921  001A08  3639               	rlcf	___fltol@f1^0,f,c
  4922  001A0A  363A               	rlcf	(___fltol@f1+1)^0,f,c
  4923  001A0C  363B               	rlcf	(___fltol@f1+2)^0,f,c
  4924  001A0E  363C               	rlcf	(___fltol@f1+3)^0,f,c
  4925  001A10  0642               	decf	___fltol@exp1^0,f,c
  4926  001A12                     l3840:
  4927  001A12  FFFF               	dw	65535	; assembler added errata NOP
  4928  001A14  5042               	movf	___fltol@exp1^0,w,c
  4929  001A16  A4D8               	btfss	status,2,c
  4930  001A18  EF10  F00D         	goto	u2941
  4931  001A1C  EF13  F00D         	goto	u2940
  4932  001A20                     u2941:
  4933  001A20  FFFF               	dw	65535	; assembler added errata NOP
  4934  001A22  EF02  F00D         	goto	l3838
  4935  001A26                     u2940:
  4936  001A26                     l3842:
  4937  001A26  FFFF               	dw	65535	; assembler added errata NOP
  4938  001A28  5041               	movf	___fltol@sign1^0,w,c
  4939  001A2A  B4D8               	btfsc	status,2,c
  4940  001A2C  EF1A  F00D         	goto	u2951
  4941  001A30  EF1D  F00D         	goto	u2950
  4942  001A34                     u2951:
  4943  001A34  FFFF               	dw	65535	; assembler added errata NOP
  4944  001A36  EF26  F00D         	goto	l3846
  4945  001A3A                     u2950:
  4946  001A3A  FFFF               	dw	65535	; assembler added errata NOP
  4947  001A3C  1E3C               	comf	(___fltol@f1+3)^0,f,c
  4948  001A3E  1E3B               	comf	(___fltol@f1+2)^0,f,c
  4949  001A40  1E3A               	comf	(___fltol@f1+1)^0,f,c
  4950  001A42  6C39               	negf	___fltol@f1^0,c
  4951  001A44  0E00               	movlw	0
  4952  001A46  223A               	addwfc	(___fltol@f1+1)^0,f,c
  4953  001A48  223B               	addwfc	(___fltol@f1+2)^0,f,c
  4954  001A4A  223C               	addwfc	(___fltol@f1+3)^0,f,c
  4955  001A4C                     l3846:
  4956  001A4C  FFFF               	dw	65535	; assembler added errata NOP
  4957  001A4E  C039  F039         	movff	___fltol@f1,?___fltol
  4958  001A52  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  4959  001A56  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  4960  001A5A  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  4961  001A5E                     l922:
  4962  001A5E  FFFF               	dw	65535	; assembler added errata NOP
  4963  001A60  0012               	return		;funcret
  4964  001A62  FFFF               	dw	65535	; errata NOP
  4965  001A64                     __end_of___fltol:
  4966                           	callstack 0
  4967                           
  4968 ;; *************** function ___fldiv *****************
  4969 ;; Defined at:
  4970 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  4971 ;; Parameters:    Size  Location     Type
  4972 ;;  b               4   31[COMRAM] long 
  4973 ;;  a               4   35[COMRAM] long 
  4974 ;; Auto vars:     Size  Location     Type
  4975 ;;  grs             4   50[COMRAM] unsigned long 
  4976 ;;  rem             4   43[COMRAM] unsigned long 
  4977 ;;  new_exp         2   48[COMRAM] short 
  4978 ;;  aexp            1   55[COMRAM] unsigned char 
  4979 ;;  bexp            1   54[COMRAM] unsigned char 
  4980 ;;  sign            1   47[COMRAM] unsigned char 
  4981 ;; Return value:  Size  Location     Type
  4982 ;;                  4   31[COMRAM] unsigned char 
  4983 ;; Registers used:
  4984 ;;		wreg, status,2, status,0
  4985 ;; Tracked objects:
  4986 ;;		On entry : 0/0
  4987 ;;		On exit  : 0/0
  4988 ;;		Unchanged: 0/0
  4989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4990 ;;      Params:         8       0       0       0       0       0       0
  4991 ;;      Locals:        13       0       0       0       0       0       0
  4992 ;;      Temps:          4       0       0       0       0       0       0
  4993 ;;      Totals:        25       0       0       0       0       0       0
  4994 ;;Total ram usage:       25 bytes
  4995 ;; Hardware stack levels used:    1
  4996 ;; Hardware stack levels required when called:    4
  4997 ;; This function calls:
  4998 ;;		Nothing
  4999 ;; This function is called by:
  5000 ;;		_rotateObj
  5001 ;; This function uses a non-reentrant model
  5002 ;;
  5003                           
  5004                           	psect	text30
  5005  000612                     __ptext30:
  5006                           	callstack 0
  5007  000612                     ___fldiv:
  5008                           	callstack 0
  5009  000612  FFFF               	dw	65535	; assembler added errata NOP
  5010  000614  5023               	movf	(___fldiv@b+3)^0,w,c
  5011  000616  0B80               	andlw	128
  5012  000618  6E30               	movwf	___fldiv@sign^0,c
  5013  00061A  5023               	movf	(___fldiv@b+3)^0,w,c
  5014  00061C  2423               	addwf	(___fldiv@b+3)^0,w,c
  5015  00061E  6E37               	movwf	___fldiv@bexp^0,c
  5016  000620  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5017  000622  EF15  F003         	goto	u2661
  5018  000626  EF18  F003         	goto	u2660
  5019  00062A                     u2661:
  5020  00062A  FFFF               	dw	65535	; assembler added errata NOP
  5021  00062C  EF1A  F003         	goto	l3674
  5022  000630                     u2660:
  5023  000630  FFFF               	dw	65535	; assembler added errata NOP
  5024  000632  8037               	bsf	___fldiv@bexp^0,0,c
  5025  000634                     l3674:
  5026  000634  FFFF               	dw	65535	; assembler added errata NOP
  5027  000636  5037               	movf	___fldiv@bexp^0,w,c
  5028  000638  B4D8               	btfsc	status,2,c
  5029  00063A  EF21  F003         	goto	u2671
  5030  00063E  EF24  F003         	goto	u2670
  5031  000642                     u2671:
  5032  000642  FFFF               	dw	65535	; assembler added errata NOP
  5033  000644  EF3D  F003         	goto	l3684
  5034  000648                     u2670:
  5035  000648  FFFF               	dw	65535	; assembler added errata NOP
  5036  00064A  2837               	incf	___fldiv@bexp^0,w,c
  5037  00064C  A4D8               	btfss	status,2,c
  5038  00064E  EF2B  F003         	goto	u2681
  5039  000652  EF2E  F003         	goto	u2680
  5040  000656                     u2681:
  5041  000656  FFFF               	dw	65535	; assembler added errata NOP
  5042  000658  EF37  F003         	goto	l3680
  5043  00065C                     u2680:
  5044  00065C  FFFF               	dw	65535	; assembler added errata NOP
  5045  00065E  0E00               	movlw	0
  5046  000660  6E20               	movwf	___fldiv@b^0,c
  5047  000662  0E00               	movlw	0
  5048  000664  6E21               	movwf	(___fldiv@b+1)^0,c
  5049  000666  0E00               	movlw	0
  5050  000668  6E22               	movwf	(___fldiv@b+2)^0,c
  5051  00066A  0E00               	movlw	0
  5052  00066C  6E23               	movwf	(___fldiv@b+3)^0,c
  5053  00066E                     l3680:
  5054  00066E  FFFF               	dw	65535	; assembler added errata NOP
  5055  000670  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5056  000672  0E00               	movlw	0
  5057  000674  6E23               	movwf	(___fldiv@b+3)^0,c
  5058  000676  EF46  F003         	goto	l3686
  5059  00067A                     l3684:
  5060  00067A  FFFF               	dw	65535	; assembler added errata NOP
  5061  00067C  0E00               	movlw	0
  5062  00067E  6E20               	movwf	___fldiv@b^0,c
  5063  000680  0E00               	movlw	0
  5064  000682  6E21               	movwf	(___fldiv@b+1)^0,c
  5065  000684  0E00               	movlw	0
  5066  000686  6E22               	movwf	(___fldiv@b+2)^0,c
  5067  000688  0E00               	movlw	0
  5068  00068A  6E23               	movwf	(___fldiv@b+3)^0,c
  5069  00068C                     l3686:
  5070  00068C  FFFF               	dw	65535	; assembler added errata NOP
  5071  00068E  5027               	movf	(___fldiv@a+3)^0,w,c
  5072  000690  0B80               	andlw	128
  5073  000692  1A30               	xorwf	___fldiv@sign^0,f,c
  5074  000694  5027               	movf	(___fldiv@a+3)^0,w,c
  5075  000696  2427               	addwf	(___fldiv@a+3)^0,w,c
  5076  000698  6E38               	movwf	___fldiv@aexp^0,c
  5077  00069A  AE26               	btfss	(___fldiv@a+2)^0,7,c
  5078  00069C  EF52  F003         	goto	u2691
  5079  0006A0  EF55  F003         	goto	u2690
  5080  0006A4                     u2691:
  5081  0006A4  FFFF               	dw	65535	; assembler added errata NOP
  5082  0006A6  EF57  F003         	goto	l3694
  5083  0006AA                     u2690:
  5084  0006AA  FFFF               	dw	65535	; assembler added errata NOP
  5085  0006AC  8038               	bsf	___fldiv@aexp^0,0,c
  5086  0006AE                     l3694:
  5087  0006AE  FFFF               	dw	65535	; assembler added errata NOP
  5088  0006B0  5038               	movf	___fldiv@aexp^0,w,c
  5089  0006B2  B4D8               	btfsc	status,2,c
  5090  0006B4  EF5E  F003         	goto	u2701
  5091  0006B8  EF61  F003         	goto	u2700
  5092  0006BC                     u2701:
  5093  0006BC  FFFF               	dw	65535	; assembler added errata NOP
  5094  0006BE  EF7A  F003         	goto	l3704
  5095  0006C2                     u2700:
  5096  0006C2  FFFF               	dw	65535	; assembler added errata NOP
  5097  0006C4  2838               	incf	___fldiv@aexp^0,w,c
  5098  0006C6  A4D8               	btfss	status,2,c
  5099  0006C8  EF68  F003         	goto	u2711
  5100  0006CC  EF6B  F003         	goto	u2710
  5101  0006D0                     u2711:
  5102  0006D0  FFFF               	dw	65535	; assembler added errata NOP
  5103  0006D2  EF74  F003         	goto	l3700
  5104  0006D6                     u2710:
  5105  0006D6  FFFF               	dw	65535	; assembler added errata NOP
  5106  0006D8  0E00               	movlw	0
  5107  0006DA  6E24               	movwf	___fldiv@a^0,c
  5108  0006DC  0E00               	movlw	0
  5109  0006DE  6E25               	movwf	(___fldiv@a+1)^0,c
  5110  0006E0  0E00               	movlw	0
  5111  0006E2  6E26               	movwf	(___fldiv@a+2)^0,c
  5112  0006E4  0E00               	movlw	0
  5113  0006E6  6E27               	movwf	(___fldiv@a+3)^0,c
  5114  0006E8                     l3700:
  5115  0006E8  FFFF               	dw	65535	; assembler added errata NOP
  5116  0006EA  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5117  0006EC  0E00               	movlw	0
  5118  0006EE  6E27               	movwf	(___fldiv@a+3)^0,c
  5119  0006F0  EF83  F003         	goto	l3706
  5120  0006F4                     l3704:
  5121  0006F4  FFFF               	dw	65535	; assembler added errata NOP
  5122  0006F6  0E00               	movlw	0
  5123  0006F8  6E24               	movwf	___fldiv@a^0,c
  5124  0006FA  0E00               	movlw	0
  5125  0006FC  6E25               	movwf	(___fldiv@a+1)^0,c
  5126  0006FE  0E00               	movlw	0
  5127  000700  6E26               	movwf	(___fldiv@a+2)^0,c
  5128  000702  0E00               	movlw	0
  5129  000704  6E27               	movwf	(___fldiv@a+3)^0,c
  5130  000706                     l3706:
  5131  000706  FFFF               	dw	65535	; assembler added errata NOP
  5132  000708  5024               	movf	___fldiv@a^0,w,c
  5133  00070A  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5134  00070C  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5135  00070E  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5136  000710  A4D8               	btfss	status,2,c
  5137  000712  EF8D  F003         	goto	u2721
  5138  000716  EF90  F003         	goto	u2720
  5139  00071A                     u2721:
  5140  00071A  FFFF               	dw	65535	; assembler added errata NOP
  5141  00071C  EFAA  F003         	goto	l3718
  5142  000720                     u2720:
  5143  000720  FFFF               	dw	65535	; assembler added errata NOP
  5144  000722  0E00               	movlw	0
  5145  000724  6E20               	movwf	___fldiv@b^0,c
  5146  000726  0E00               	movlw	0
  5147  000728  6E21               	movwf	(___fldiv@b+1)^0,c
  5148  00072A  0E00               	movlw	0
  5149  00072C  6E22               	movwf	(___fldiv@b+2)^0,c
  5150  00072E  0E00               	movlw	0
  5151  000730  6E23               	movwf	(___fldiv@b+3)^0,c
  5152  000732  0E80               	movlw	128
  5153  000734  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5154  000736  0E7F               	movlw	127
  5155  000738  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5156  00073A                     l3712:
  5157  00073A  FFFF               	dw	65535	; assembler added errata NOP
  5158  00073C  5030               	movf	___fldiv@sign^0,w,c
  5159  00073E  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5160  000740  C020  F020         	movff	___fldiv@b,?___fldiv
  5161  000744  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5162  000748  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5163  00074C  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5164  000750  EF1F  F005         	goto	l1207
  5165  000754                     l3718:
  5166  000754  FFFF               	dw	65535	; assembler added errata NOP
  5167  000756  5037               	movf	___fldiv@bexp^0,w,c
  5168  000758  A4D8               	btfss	status,2,c
  5169  00075A  EFB1  F003         	goto	u2731
  5170  00075E  EFB4  F003         	goto	u2730
  5171  000762                     u2731:
  5172  000762  FFFF               	dw	65535	; assembler added errata NOP
  5173  000764  EFBF  F003         	goto	l3726
  5174  000768                     u2730:
  5175  000768  FFFF               	dw	65535	; assembler added errata NOP
  5176  00076A  0E00               	movlw	0
  5177  00076C  6E20               	movwf	?___fldiv^0,c
  5178  00076E  0E00               	movlw	0
  5179  000770  6E21               	movwf	(?___fldiv+1)^0,c
  5180  000772  0E00               	movlw	0
  5181  000774  6E22               	movwf	(?___fldiv+2)^0,c
  5182  000776  0E00               	movlw	0
  5183  000778  6E23               	movwf	(?___fldiv+3)^0,c
  5184  00077A  EF1F  F005         	goto	l1207
  5185  00077E                     l3726:
  5186  00077E  FFFF               	dw	65535	; assembler added errata NOP
  5187  000780  5038               	movf	___fldiv@aexp^0,w,c
  5188  000782  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5189  000786  6A29               	clrf	(??___fldiv+1)^0,c
  5190  000788  5E28               	subwf	??___fldiv^0,f,c
  5191  00078A  0E00               	movlw	0
  5192  00078C  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5193  00078E  0E7F               	movlw	127
  5194  000790  2428               	addwf	??___fldiv^0,w,c
  5195  000792  6E31               	movwf	___fldiv@new_exp^0,c
  5196  000794  0E00               	movlw	0
  5197  000796  2029               	addwfc	(??___fldiv+1)^0,w,c
  5198  000798  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5199  00079A  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5200  00079E  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5201  0007A2  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5202  0007A6  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5203  0007AA  0E00               	movlw	0
  5204  0007AC  6E20               	movwf	___fldiv@b^0,c
  5205  0007AE  0E00               	movlw	0
  5206  0007B0  6E21               	movwf	(___fldiv@b+1)^0,c
  5207  0007B2  0E00               	movlw	0
  5208  0007B4  6E22               	movwf	(___fldiv@b+2)^0,c
  5209  0007B6  0E00               	movlw	0
  5210  0007B8  6E23               	movwf	(___fldiv@b+3)^0,c
  5211  0007BA  0E00               	movlw	0
  5212  0007BC  6E33               	movwf	___fldiv@grs^0,c
  5213  0007BE  0E00               	movlw	0
  5214  0007C0  6E34               	movwf	(___fldiv@grs+1)^0,c
  5215  0007C2  0E00               	movlw	0
  5216  0007C4  6E35               	movwf	(___fldiv@grs+2)^0,c
  5217  0007C6  0E00               	movlw	0
  5218  0007C8  6E36               	movwf	(___fldiv@grs+3)^0,c
  5219  0007CA  0E00               	movlw	0
  5220  0007CC  6E38               	movwf	___fldiv@aexp^0,c
  5221  0007CE  EF2B  F004         	goto	l1209
  5222  0007D2                     l3736:
  5223  0007D2  FFFF               	dw	65535	; assembler added errata NOP
  5224  0007D4  5038               	movf	___fldiv@aexp^0,w,c
  5225  0007D6  B4D8               	btfsc	status,2,c
  5226  0007D8  EFF0  F003         	goto	u2741
  5227  0007DC  EFF3  F003         	goto	u2740
  5228  0007E0                     u2741:
  5229  0007E0  FFFF               	dw	65535	; assembler added errata NOP
  5230  0007E2  EF0E  F004         	goto	l3744
  5231  0007E6                     u2740:
  5232  0007E6  FFFF               	dw	65535	; assembler added errata NOP
  5233  0007E8  90D8               	bcf	status,0,c
  5234  0007EA  362C               	rlcf	___fldiv@rem^0,f,c
  5235  0007EC  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5236  0007EE  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5237  0007F0  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5238  0007F2  90D8               	bcf	status,0,c
  5239  0007F4  3620               	rlcf	___fldiv@b^0,f,c
  5240  0007F6  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5241  0007F8  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5242  0007FA  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5243  0007FC  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5244  0007FE  EF03  F004         	goto	u2751
  5245  000802  EF06  F004         	goto	u2750
  5246  000806                     u2751:
  5247  000806  FFFF               	dw	65535	; assembler added errata NOP
  5248  000808  EF08  F004         	goto	l1212
  5249  00080C                     u2750:
  5250  00080C  FFFF               	dw	65535	; assembler added errata NOP
  5251  00080E  8020               	bsf	___fldiv@b^0,0,c
  5252  000810                     l1212:
  5253  000810  FFFF               	dw	65535	; assembler added errata NOP
  5254  000812  90D8               	bcf	status,0,c
  5255  000814  3633               	rlcf	___fldiv@grs^0,f,c
  5256  000816  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5257  000818  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5258  00081A  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5259  00081C                     l3744:
  5260  00081C  FFFF               	dw	65535	; assembler added errata NOP
  5261  00081E  5024               	movf	___fldiv@a^0,w,c
  5262  000820  5C2C               	subwf	___fldiv@rem^0,w,c
  5263  000822  5025               	movf	(___fldiv@a+1)^0,w,c
  5264  000824  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5265  000826  5026               	movf	(___fldiv@a+2)^0,w,c
  5266  000828  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5267  00082A  5027               	movf	(___fldiv@a+3)^0,w,c
  5268  00082C  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5269  00082E  A0D8               	btfss	status,0,c
  5270  000830  EF1C  F004         	goto	u2761
  5271  000834  EF1F  F004         	goto	u2760
  5272  000838                     u2761:
  5273  000838  FFFF               	dw	65535	; assembler added errata NOP
  5274  00083A  EF29  F004         	goto	l3750
  5275  00083E                     u2760:
  5276  00083E  FFFF               	dw	65535	; assembler added errata NOP
  5277  000840  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5278  000842  5024               	movf	___fldiv@a^0,w,c
  5279  000844  5E2C               	subwf	___fldiv@rem^0,f,c
  5280  000846  5025               	movf	(___fldiv@a+1)^0,w,c
  5281  000848  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5282  00084A  5026               	movf	(___fldiv@a+2)^0,w,c
  5283  00084C  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5284  00084E  5027               	movf	(___fldiv@a+3)^0,w,c
  5285  000850  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5286  000852                     l3750:
  5287  000852  FFFF               	dw	65535	; assembler added errata NOP
  5288  000854  2A38               	incf	___fldiv@aexp^0,f,c
  5289  000856                     l1209:
  5290  000856  FFFF               	dw	65535	; assembler added errata NOP
  5291  000858  0E19               	movlw	25
  5292  00085A  6438               	cpfsgt	___fldiv@aexp^0,c
  5293  00085C  EF32  F004         	goto	u2771
  5294  000860  EF35  F004         	goto	u2770
  5295  000864                     u2771:
  5296  000864  FFFF               	dw	65535	; assembler added errata NOP
  5297  000866  EFE9  F003         	goto	l3736
  5298  00086A                     u2770:
  5299  00086A  FFFF               	dw	65535	; assembler added errata NOP
  5300  00086C  502C               	movf	___fldiv@rem^0,w,c
  5301  00086E  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5302  000870  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5303  000872  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5304  000874  B4D8               	btfsc	status,2,c
  5305  000876  EF3F  F004         	goto	u2781
  5306  00087A  EF42  F004         	goto	u2780
  5307  00087E                     u2781:
  5308  00087E  FFFF               	dw	65535	; assembler added errata NOP
  5309  000880  EF5F  F004         	goto	l3762
  5310  000884                     u2780:
  5311  000884  FFFF               	dw	65535	; assembler added errata NOP
  5312  000886  8033               	bsf	___fldiv@grs^0,0,c
  5313  000888  EF5F  F004         	goto	l3762
  5314  00088C                     l3756:
  5315  00088C  FFFF               	dw	65535	; assembler added errata NOP
  5316  00088E  90D8               	bcf	status,0,c
  5317  000890  3620               	rlcf	___fldiv@b^0,f,c
  5318  000892  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5319  000894  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5320  000896  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5321  000898  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5322  00089A  EF51  F004         	goto	u2791
  5323  00089E  EF54  F004         	goto	u2790
  5324  0008A2                     u2791:
  5325  0008A2  FFFF               	dw	65535	; assembler added errata NOP
  5326  0008A4  EF56  F004         	goto	l1218
  5327  0008A8                     u2790:
  5328  0008A8  FFFF               	dw	65535	; assembler added errata NOP
  5329  0008AA  8020               	bsf	___fldiv@b^0,0,c
  5330  0008AC                     l1218:
  5331  0008AC  FFFF               	dw	65535	; assembler added errata NOP
  5332  0008AE  90D8               	bcf	status,0,c
  5333  0008B0  3633               	rlcf	___fldiv@grs^0,f,c
  5334  0008B2  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5335  0008B4  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5336  0008B6  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5337  0008B8  0631               	decf	___fldiv@new_exp^0,f,c
  5338  0008BA  A0D8               	btfss	status,0,c
  5339  0008BC  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5340  0008BE                     l3762:
  5341  0008BE  FFFF               	dw	65535	; assembler added errata NOP
  5342  0008C0  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5343  0008C2  EF65  F004         	goto	u2801
  5344  0008C6  EF68  F004         	goto	u2800
  5345  0008CA                     u2801:
  5346  0008CA  FFFF               	dw	65535	; assembler added errata NOP
  5347  0008CC  EF46  F004         	goto	l3756
  5348  0008D0                     u2800:
  5349  0008D0  FFFF               	dw	65535	; assembler added errata NOP
  5350  0008D2  0E00               	movlw	0
  5351  0008D4  6E38               	movwf	___fldiv@aexp^0,c
  5352  0008D6  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5353  0008D8  EF70  F004         	goto	u2811
  5354  0008DC  EF73  F004         	goto	u2810
  5355  0008E0                     u2811:
  5356  0008E0  FFFF               	dw	65535	; assembler added errata NOP
  5357  0008E2  EF9E  F004         	goto	l1220
  5358  0008E6                     u2810:
  5359  0008E6  FFFF               	dw	65535	; assembler added errata NOP
  5360  0008E8  0EFF               	movlw	255
  5361  0008EA  1433               	andwf	___fldiv@grs^0,w,c
  5362  0008EC  6E28               	movwf	??___fldiv^0,c
  5363  0008EE  0EFF               	movlw	255
  5364  0008F0  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5365  0008F2  6E29               	movwf	(??___fldiv+1)^0,c
  5366  0008F4  0EFF               	movlw	255
  5367  0008F6  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5368  0008F8  6E2A               	movwf	(??___fldiv+2)^0,c
  5369  0008FA  0E7F               	movlw	127
  5370  0008FC  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5371  0008FE  6E2B               	movwf	(??___fldiv+3)^0,c
  5372  000900  5028               	movf	??___fldiv^0,w,c
  5373  000902  1029               	iorwf	(??___fldiv+1)^0,w,c
  5374  000904  102A               	iorwf	(??___fldiv+2)^0,w,c
  5375  000906  102B               	iorwf	(??___fldiv+3)^0,w,c
  5376  000908  B4D8               	btfsc	status,2,c
  5377  00090A  EF89  F004         	goto	u2821
  5378  00090E  EF8C  F004         	goto	u2820
  5379  000912                     u2821:
  5380  000912  FFFF               	dw	65535	; assembler added errata NOP
  5381  000914  EF92  F004         	goto	l1221
  5382  000918                     u2820:
  5383  000918  FFFF               	dw	65535	; assembler added errata NOP
  5384  00091A                     l3770:
  5385  00091A  FFFF               	dw	65535	; assembler added errata NOP
  5386  00091C  0E01               	movlw	1
  5387  00091E  6E38               	movwf	___fldiv@aexp^0,c
  5388  000920  EF9E  F004         	goto	l1220
  5389  000924                     l1221:
  5390  000924  FFFF               	dw	65535	; assembler added errata NOP
  5391  000926  A020               	btfss	___fldiv@b^0,0,c
  5392  000928  EF98  F004         	goto	u2831
  5393  00092C  EF9B  F004         	goto	u2830
  5394  000930                     u2831:
  5395  000930  FFFF               	dw	65535	; assembler added errata NOP
  5396  000932  EF9E  F004         	goto	l1220
  5397  000936                     u2830:
  5398  000936  FFFF               	dw	65535	; assembler added errata NOP
  5399  000938  EF8D  F004         	goto	l3770
  5400  00093C                     l1220:
  5401  00093C  FFFF               	dw	65535	; assembler added errata NOP
  5402  00093E  5038               	movf	___fldiv@aexp^0,w,c
  5403  000940  B4D8               	btfsc	status,2,c
  5404  000942  EFA5  F004         	goto	u2841
  5405  000946  EFA8  F004         	goto	u2840
  5406  00094A                     u2841:
  5407  00094A  FFFF               	dw	65535	; assembler added errata NOP
  5408  00094C  EFCF  F004         	goto	l3782
  5409  000950                     u2840:
  5410  000950  FFFF               	dw	65535	; assembler added errata NOP
  5411  000952  0E01               	movlw	1
  5412  000954  2620               	addwf	___fldiv@b^0,f,c
  5413  000956  0E00               	movlw	0
  5414  000958  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5415  00095A  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5416  00095C  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5417  00095E  A023               	btfss	(___fldiv@b+3)^0,0,c
  5418  000960  EFB4  F004         	goto	u2851
  5419  000964  EFB7  F004         	goto	u2850
  5420  000968                     u2851:
  5421  000968  FFFF               	dw	65535	; assembler added errata NOP
  5422  00096A  EFCF  F004         	goto	l3782
  5423  00096E                     u2850:
  5424  00096E  FFFF               	dw	65535	; assembler added errata NOP
  5425  000970  C020  F028         	movff	___fldiv@b,??___fldiv
  5426  000974  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5427  000978  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5428  00097C  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5429  000980  342B               	rlcf	(??___fldiv+3)^0,w,c
  5430  000982  322B               	rrcf	(??___fldiv+3)^0,f,c
  5431  000984  322A               	rrcf	(??___fldiv+2)^0,f,c
  5432  000986  3229               	rrcf	(??___fldiv+1)^0,f,c
  5433  000988  3228               	rrcf	??___fldiv^0,f,c
  5434  00098A  C028  F020         	movff	??___fldiv,___fldiv@b
  5435  00098E  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5436  000992  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5437  000996  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5438  00099A  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5439  00099C  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5440  00099E                     l3782:
  5441  00099E  FFFF               	dw	65535	; assembler added errata NOP
  5442  0009A0  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5443  0009A2  EFDB  F004         	goto	u2861
  5444  0009A6  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5445  0009A8  E109               	bnz	u2860
  5446  0009AA  2831               	incf	___fldiv@new_exp^0,w,c
  5447  0009AC  A0D8               	btfss	status,0,c
  5448  0009AE  EFDB  F004         	goto	u2861
  5449  0009B2  EFDE  F004         	goto	u2860
  5450  0009B6                     u2861:
  5451  0009B6  FFFF               	dw	65535	; assembler added errata NOP
  5452  0009B8  EFEA  F004         	goto	l3786
  5453  0009BC                     u2860:
  5454  0009BC  FFFF               	dw	65535	; assembler added errata NOP
  5455  0009BE  0E00               	movlw	0
  5456  0009C0  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5457  0009C2  6831               	setf	___fldiv@new_exp^0,c
  5458  0009C4  0E00               	movlw	0
  5459  0009C6  6E20               	movwf	___fldiv@b^0,c
  5460  0009C8  0E00               	movlw	0
  5461  0009CA  6E21               	movwf	(___fldiv@b+1)^0,c
  5462  0009CC  0E00               	movlw	0
  5463  0009CE  6E22               	movwf	(___fldiv@b+2)^0,c
  5464  0009D0  0E00               	movlw	0
  5465  0009D2  6E23               	movwf	(___fldiv@b+3)^0,c
  5466  0009D4                     l3786:
  5467  0009D4  FFFF               	dw	65535	; assembler added errata NOP
  5468  0009D6  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5469  0009D8  EFF9  F004         	goto	u2870
  5470  0009DC  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5471  0009DE  E106               	bnz	u2871
  5472  0009E0  0431               	decf	___fldiv@new_exp^0,w,c
  5473  0009E2  B0D8               	btfsc	status,0,c
  5474  0009E4  EFF6  F004         	goto	u2871
  5475  0009E8  EFF9  F004         	goto	u2870
  5476  0009EC                     u2871:
  5477  0009EC  FFFF               	dw	65535	; assembler added errata NOP
  5478  0009EE  EF08  F005         	goto	l3790
  5479  0009F2                     u2870:
  5480  0009F2  FFFF               	dw	65535	; assembler added errata NOP
  5481  0009F4  0E00               	movlw	0
  5482  0009F6  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5483  0009F8  0E00               	movlw	0
  5484  0009FA  6E31               	movwf	___fldiv@new_exp^0,c
  5485  0009FC  0E00               	movlw	0
  5486  0009FE  6E20               	movwf	___fldiv@b^0,c
  5487  000A00  0E00               	movlw	0
  5488  000A02  6E21               	movwf	(___fldiv@b+1)^0,c
  5489  000A04  0E00               	movlw	0
  5490  000A06  6E22               	movwf	(___fldiv@b+2)^0,c
  5491  000A08  0E00               	movlw	0
  5492  000A0A  6E23               	movwf	(___fldiv@b+3)^0,c
  5493  000A0C  0E00               	movlw	0
  5494  000A0E  6E30               	movwf	___fldiv@sign^0,c
  5495  000A10                     l3790:
  5496  000A10  FFFF               	dw	65535	; assembler added errata NOP
  5497  000A12  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5498  000A16  A037               	btfss	___fldiv@bexp^0,0,c
  5499  000A18  EF10  F005         	goto	u2881
  5500  000A1C  EF13  F005         	goto	u2880
  5501  000A20                     u2881:
  5502  000A20  FFFF               	dw	65535	; assembler added errata NOP
  5503  000A22  EF17  F005         	goto	l3796
  5504  000A26                     u2880:
  5505  000A26  FFFF               	dw	65535	; assembler added errata NOP
  5506  000A28  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5507  000A2A  EF19  F005         	goto	l3798
  5508  000A2E                     l3796:
  5509  000A2E  FFFF               	dw	65535	; assembler added errata NOP
  5510  000A30  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5511  000A32                     l3798:
  5512  000A32  FFFF               	dw	65535	; assembler added errata NOP
  5513  000A34  90D8               	bcf	status,0,c
  5514  000A36  3037               	rrcf	___fldiv@bexp^0,w,c
  5515  000A38  6E23               	movwf	(___fldiv@b+3)^0,c
  5516  000A3A  EF9D  F003         	goto	l3712
  5517  000A3E                     l1207:
  5518  000A3E  FFFF               	dw	65535	; assembler added errata NOP
  5519  000A40  0012               	return		;funcret
  5520  000A42  FFFF               	dw	65535	; errata NOP
  5521  000A44                     __end_of___fldiv:
  5522                           	callstack 0
  5523                           
  5524 ;; *************** function _releaseObj *****************
  5525 ;; Defined at:
  5526 ;;		line 788 in file "motors.c"
  5527 ;; Parameters:    Size  Location     Type
  5528 ;;		None
  5529 ;; Auto vars:     Size  Location     Type
  5530 ;;		None
  5531 ;; Return value:  Size  Location     Type
  5532 ;;                  1    wreg      void 
  5533 ;; Registers used:
  5534 ;;		wreg, status,2, status,0, cstack
  5535 ;; Tracked objects:
  5536 ;;		On entry : 0/0
  5537 ;;		On exit  : 0/0
  5538 ;;		Unchanged: 0/0
  5539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5540 ;;      Params:         0       0       0       0       0       0       0
  5541 ;;      Locals:         0       0       0       0       0       0       0
  5542 ;;      Temps:          0       0       0       0       0       0       0
  5543 ;;      Totals:         0       0       0       0       0       0       0
  5544 ;;Total ram usage:        0 bytes
  5545 ;; Hardware stack levels used:    1
  5546 ;; Hardware stack levels required when called:    5
  5547 ;; This function calls:
  5548 ;;		_stepMade
  5549 ;; This function is called by:
  5550 ;;		_executeData
  5551 ;; This function uses a non-reentrant model
  5552 ;;
  5553                           
  5554                           	psect	text31
  5555  00236E                     __ptext31:
  5556                           	callstack 0
  5557  00236E                     _releaseObj:
  5558                           	callstack 0
  5559  00236E  FFFF               	dw	65535	; assembler added errata NOP
  5560  002370                     
  5561                           ;motors.c: 789:     LATDbits.LATD1 = 0;
  5562  002370  928C               	bcf	140,1,c	;volatile
  5563                           
  5564                           ;motors.c: 792:     T2CONbits.TMR2ON = 1;
  5565  002372  84CA               	bsf	202,2,c	;volatile
  5566  002374                     l4144:
  5567  002374  FFFF               	dw	65535	; assembler added errata NOP
  5568  002376  EC22  F012         	call	_stepMade	;wreg free
  5569  00237A  5012               	movf	?_stepMade^0,w,c
  5570  00237C  1013               	iorwf	(?_stepMade+1)^0,w,c
  5571  00237E  B4D8               	btfsc	status,2,c
  5572  002380  EFC4  F011         	goto	u3491
  5573  002384  EFC7  F011         	goto	u3490
  5574  002388                     u3491:
  5575  002388  FFFF               	dw	65535	; assembler added errata NOP
  5576  00238A  EFBA  F011         	goto	l4144
  5577  00238E                     u3490:
  5578  00238E  FFFF               	dw	65535	; assembler added errata NOP
  5579  002390                     
  5580                           ;motors.c: 794:     T2CONbits.TMR2ON = 1;
  5581  002390  84CA               	bsf	202,2,c	;volatile
  5582  002392                     
  5583                           ;motors.c: 795:     TMR2 = 0;
  5584  002392  0E00               	movlw	0
  5585  002394  6ECC               	movwf	204,c	;volatile
  5586  002396  0012               	return		;funcret
  5587  002398  FFFF               	dw	65535	; errata NOP
  5588  00239A                     __end_of_releaseObj:
  5589                           	callstack 0
  5590                           
  5591 ;; *************** function _pickObject *****************
  5592 ;; Defined at:
  5593 ;;		line 775 in file "motors.c"
  5594 ;; Parameters:    Size  Location     Type
  5595 ;;		None
  5596 ;; Auto vars:     Size  Location     Type
  5597 ;;		None
  5598 ;; Return value:  Size  Location     Type
  5599 ;;                  1    wreg      void 
  5600 ;; Registers used:
  5601 ;;		wreg, status,2, status,0, cstack
  5602 ;; Tracked objects:
  5603 ;;		On entry : 0/0
  5604 ;;		On exit  : 0/0
  5605 ;;		Unchanged: 0/0
  5606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5607 ;;      Params:         0       0       0       0       0       0       0
  5608 ;;      Locals:         0       0       0       0       0       0       0
  5609 ;;      Temps:          0       0       0       0       0       0       0
  5610 ;;      Totals:         0       0       0       0       0       0       0
  5611 ;;Total ram usage:        0 bytes
  5612 ;; Hardware stack levels used:    1
  5613 ;; Hardware stack levels required when called:    5
  5614 ;; This function calls:
  5615 ;;		_stepMade
  5616 ;; This function is called by:
  5617 ;;		_executeData
  5618 ;; This function uses a non-reentrant model
  5619 ;;
  5620                           
  5621                           	psect	text32
  5622  00239A                     __ptext32:
  5623                           	callstack 0
  5624  00239A                     _pickObject:
  5625                           	callstack 0
  5626  00239A  FFFF               	dw	65535	; assembler added errata NOP
  5627  00239C                     
  5628                           ;motors.c: 776:     LATDbits.LATD1 = 1;
  5629  00239C  828C               	bsf	140,1,c	;volatile
  5630                           
  5631                           ;motors.c: 779:     T2CONbits.TMR2ON = 1;
  5632  00239E  84CA               	bsf	202,2,c	;volatile
  5633  0023A0                     l4138:
  5634  0023A0  FFFF               	dw	65535	; assembler added errata NOP
  5635  0023A2  EC22  F012         	call	_stepMade	;wreg free
  5636  0023A6  5012               	movf	?_stepMade^0,w,c
  5637  0023A8  1013               	iorwf	(?_stepMade+1)^0,w,c
  5638  0023AA  B4D8               	btfsc	status,2,c
  5639  0023AC  EFDA  F011         	goto	u3481
  5640  0023B0  EFDD  F011         	goto	u3480
  5641  0023B4                     u3481:
  5642  0023B4  FFFF               	dw	65535	; assembler added errata NOP
  5643  0023B6  EFD0  F011         	goto	l4138
  5644  0023BA                     u3480:
  5645  0023BA  FFFF               	dw	65535	; assembler added errata NOP
  5646  0023BC                     
  5647                           ;motors.c: 781:     T2CONbits.TMR2ON = 1;
  5648  0023BC  84CA               	bsf	202,2,c	;volatile
  5649  0023BE                     
  5650                           ;motors.c: 782:     TMR2 = 0;
  5651  0023BE  0E00               	movlw	0
  5652  0023C0  6ECC               	movwf	204,c	;volatile
  5653  0023C2  0012               	return		;funcret
  5654  0023C4  FFFF               	dw	65535	; errata NOP
  5655  0023C6                     __end_of_pickObject:
  5656                           	callstack 0
  5657                           
  5658 ;; *************** function _moveToPoint *****************
  5659 ;; Defined at:
  5660 ;;		line 313 in file "motors.c"
  5661 ;; Parameters:    Size  Location     Type
  5662 ;;  x1              2   20[COMRAM] int 
  5663 ;;  y1              2   22[COMRAM] int 
  5664 ;;  x2              2   24[COMRAM] int 
  5665 ;;  y2              2   26[COMRAM] int 
  5666 ;; Auto vars:     Size  Location     Type
  5667 ;;  keepMovingY     1   33[COMRAM] unsigned char 
  5668 ;;  keepMovingX     1   32[COMRAM] unsigned char 
  5669 ;;  MOT2Directio    1   31[COMRAM] unsigned char 
  5670 ;;  MOT1Directio    1   30[COMRAM] unsigned char 
  5671 ;; Return value:  Size  Location     Type
  5672 ;;                  1    wreg      unsigned char 
  5673 ;; Registers used:
  5674 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5675 ;; Tracked objects:
  5676 ;;		On entry : 0/0
  5677 ;;		On exit  : 0/0
  5678 ;;		Unchanged: 0/0
  5679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5680 ;;      Params:         8       0       0       0       0       0       0
  5681 ;;      Locals:         4       0       0       0       0       0       0
  5682 ;;      Temps:          2       0       0       0       0       0       0
  5683 ;;      Totals:        14       0       0       0       0       0       0
  5684 ;;Total ram usage:       14 bytes
  5685 ;; Hardware stack levels used:    1
  5686 ;; Hardware stack levels required when called:    5
  5687 ;; This function calls:
  5688 ;;		_resetStep
  5689 ;;		_stepCounter
  5690 ;;		_stepMade
  5691 ;; This function is called by:
  5692 ;;		_executeData
  5693 ;; This function uses a non-reentrant model
  5694 ;;
  5695                           
  5696                           	psect	text33
  5697  000A44                     __ptext33:
  5698                           	callstack 0
  5699  000A44                     _moveToPoint:
  5700                           	callstack 0
  5701  000A44  FFFF               	dw	65535	; assembler added errata NOP
  5702  000A46                     
  5703                           ;motors.c: 315:     unsigned char MOT1Direction, MOT2Direction;;motors.c: 318:     if(x2
      +                           > maxX || y2 > maxY){
  5704  000A46  501A               	movf	(moveToPoint@x2+1)^0,w,c
  5705  000A48  E107               	bnz	u3061
  5706  000A4A  0ECA               	movlw	202
  5707  000A4C  5C19               	subwf	moveToPoint@x2^0,w,c
  5708  000A4E  B0D8               	btfsc	status,0,c
  5709  000A50  EF2C  F005         	goto	u3061
  5710  000A54  EF2F  F005         	goto	u3060
  5711  000A58                     u3061:
  5712  000A58  FFFF               	dw	65535	; assembler added errata NOP
  5713  000A5A  EF3C  F005         	goto	l3900
  5714  000A5E                     u3060:
  5715  000A5E  FFFF               	dw	65535	; assembler added errata NOP
  5716  000A60  501C               	movf	(moveToPoint@y2+1)^0,w,c
  5717  000A62  E10A               	bnz	u3070
  5718  000A64  0ECA               	movlw	202
  5719  000A66  5C1B               	subwf	moveToPoint@y2^0,w,c
  5720  000A68  A0D8               	btfss	status,0,c
  5721  000A6A  EF39  F005         	goto	u3071
  5722  000A6E  EF3C  F005         	goto	u3070
  5723  000A72                     u3071:
  5724  000A72  FFFF               	dw	65535	; assembler added errata NOP
  5725  000A74  EF40  F005         	goto	l3904
  5726  000A78                     u3070:
  5727  000A78                     l3900:
  5728  000A78  FFFF               	dw	65535	; assembler added errata NOP
  5729                           
  5730                           ;motors.c: 319:         return(5);
  5731  000A7A  0E05               	movlw	5
  5732  000A7C  EF02  F007         	goto	l157
  5733  000A80                     l3904:
  5734  000A80  FFFF               	dw	65535	; assembler added errata NOP
  5735                           
  5736                           ;motors.c: 340:     if((x2 - x1) > 0){
  5737  000A82  5015               	movf	moveToPoint@x1^0,w,c
  5738  000A84  5C19               	subwf	moveToPoint@x2^0,w,c
  5739  000A86  6E1D               	movwf	??_moveToPoint^0,c
  5740  000A88  5016               	movf	(moveToPoint@x1+1)^0,w,c
  5741  000A8A  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  5742  000A8C  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5743  000A8E  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5744  000A90  EF52  F005         	goto	u3081
  5745  000A94  501E               	movf	(??_moveToPoint+1)^0,w,c
  5746  000A96  E109               	bnz	u3080
  5747  000A98  041D               	decf	??_moveToPoint^0,w,c
  5748  000A9A  A0D8               	btfss	status,0,c
  5749  000A9C  EF52  F005         	goto	u3081
  5750  000AA0  EF55  F005         	goto	u3080
  5751  000AA4                     u3081:
  5752  000AA4  FFFF               	dw	65535	; assembler added errata NOP
  5753  000AA6  EF5E  F005         	goto	l158
  5754  000AAA                     u3080:
  5755  000AAA  FFFF               	dw	65535	; assembler added errata NOP
  5756  000AAC                     
  5757                           ;motors.c: 341:         motCounter[0][1] = 1;
  5758  000AAC  0E00               	movlw	0
  5759  000AAE  6E61               	movwf	(_motCounter+3)^0,c
  5760  000AB0  0E01               	movlw	1
  5761  000AB2  6E60               	movwf	(_motCounter+2)^0,c
  5762                           
  5763                           ;motors.c: 342:         MOT1Direction = 1;
  5764  000AB4  0E01               	movlw	1
  5765  000AB6  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  5766                           
  5767                           ;motors.c: 343:     }else{
  5768  000AB8  EF63  F005         	goto	l3910
  5769  000ABC                     l158:
  5770  000ABC  FFFF               	dw	65535	; assembler added errata NOP
  5771                           
  5772                           ;motors.c: 344:         motCounter[0][1] = -1;
  5773  000ABE  6860               	setf	(_motCounter+2)^0,c
  5774  000AC0  6861               	setf	(_motCounter+3)^0,c
  5775  000AC2                     
  5776                           ;motors.c: 345:         MOT1Direction = 0;
  5777  000AC2  0E00               	movlw	0
  5778  000AC4  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  5779  000AC6                     l3910:
  5780  000AC6  FFFF               	dw	65535	; assembler added errata NOP
  5781                           
  5782                           ;motors.c: 348:     if((y2 - y1) > 0){
  5783  000AC8  5017               	movf	moveToPoint@y1^0,w,c
  5784  000ACA  5C1B               	subwf	moveToPoint@y2^0,w,c
  5785  000ACC  6E1D               	movwf	??_moveToPoint^0,c
  5786  000ACE  5018               	movf	(moveToPoint@y1+1)^0,w,c
  5787  000AD0  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  5788  000AD2  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5789  000AD4  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5790  000AD6  EF75  F005         	goto	u3091
  5791  000ADA  501E               	movf	(??_moveToPoint+1)^0,w,c
  5792  000ADC  E109               	bnz	u3090
  5793  000ADE  041D               	decf	??_moveToPoint^0,w,c
  5794  000AE0  A0D8               	btfss	status,0,c
  5795  000AE2  EF75  F005         	goto	u3091
  5796  000AE6  EF78  F005         	goto	u3090
  5797  000AEA                     u3091:
  5798  000AEA  FFFF               	dw	65535	; assembler added errata NOP
  5799  000AEC  EF81  F005         	goto	l160
  5800  000AF0                     u3090:
  5801  000AF0  FFFF               	dw	65535	; assembler added errata NOP
  5802  000AF2                     
  5803                           ;motors.c: 349:         motCounter[1][1] = 1;
  5804  000AF2  0E00               	movlw	0
  5805  000AF4  6E65               	movwf	(_motCounter+7)^0,c
  5806  000AF6  0E01               	movlw	1
  5807  000AF8  6E64               	movwf	(_motCounter+6)^0,c
  5808                           
  5809                           ;motors.c: 350:         MOT2Direction = 1;
  5810  000AFA  0E01               	movlw	1
  5811  000AFC  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  5812                           
  5813                           ;motors.c: 351:     }else{
  5814  000AFE  EF86  F005         	goto	l161
  5815  000B02                     l160:
  5816  000B02  FFFF               	dw	65535	; assembler added errata NOP
  5817                           
  5818                           ;motors.c: 352:         motCounter[2][1] = -1;
  5819  000B04  6868               	setf	(_motCounter+10)^0,c
  5820  000B06  6869               	setf	(_motCounter+11)^0,c
  5821  000B08                     
  5822                           ;motors.c: 353:         MOT2Direction = 0;
  5823  000B08  0E00               	movlw	0
  5824  000B0A  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  5825  000B0C                     l161:
  5826  000B0C  FFFF               	dw	65535	; assembler added errata NOP
  5827                           
  5828                           ;motors.c: 358:     unsigned char keepMovingX = 1;
  5829  000B0E  0E01               	movlw	1
  5830  000B10  6E21               	movwf	moveToPoint@keepMovingX^0,c
  5831                           
  5832                           ;motors.c: 359:     unsigned char keepMovingY = 1;
  5833  000B12  0E01               	movlw	1
  5834  000B14  6E22               	movwf	moveToPoint@keepMovingY^0,c
  5835  000B16                     
  5836                           ;motors.c: 362:     T2CONbits.TMR2ON = 1;
  5837  000B16  84CA               	bsf	202,2,c	;volatile
  5838                           
  5839                           ;motors.c: 364:     tm0Error = 0;
  5840  000B18  0E00               	movlw	0
  5841  000B1A  6E51               	movwf	(_tm0Error+1)^0,c
  5842  000B1C  0E00               	movlw	0
  5843  000B1E  6E50               	movwf	_tm0Error^0,c
  5844                           
  5845                           ;motors.c: 365:     tm0Limit = 250;
  5846  000B20  0EFA               	movlw	250
  5847  000B22  6E5D               	movwf	_tm0Limit^0,c
  5848  000B24                     
  5849                           ;motors.c: 366:     T0CONbits.TMR0ON = 1;
  5850  000B24  8ED5               	bsf	213,7,c	;volatile
  5851                           
  5852                           ;motors.c: 368:     while(keepMovingX || keepMovingY){
  5853  000B26  EFE2  F006         	goto	l3990
  5854  000B2A                     l3920:
  5855  000B2A  FFFF               	dw	65535	; assembler added errata NOP
  5856                           
  5857                           ;motors.c: 371:         if(tm0Error){
  5858  000B2C  5050               	movf	_tm0Error^0,w,c
  5859  000B2E  1051               	iorwf	(_tm0Error+1)^0,w,c
  5860  000B30  B4D8               	btfsc	status,2,c
  5861  000B32  EF9D  F005         	goto	u3101
  5862  000B36  EFA0  F005         	goto	u3100
  5863  000B3A                     u3101:
  5864  000B3A  FFFF               	dw	65535	; assembler added errata NOP
  5865  000B3C  EFA7  F005         	goto	l3924
  5866  000B40                     u3100:
  5867  000B40  FFFF               	dw	65535	; assembler added errata NOP
  5868  000B42                     
  5869                           ;motors.c: 377:             tm0Error = 4;
  5870  000B42  0E00               	movlw	0
  5871  000B44  6E51               	movwf	(_tm0Error+1)^0,c
  5872  000B46  0E04               	movlw	4
  5873  000B48  6E50               	movwf	_tm0Error^0,c
  5874                           
  5875                           ;motors.c: 378:             break;
  5876  000B4A  EFF6  F006         	goto	l165
  5877  000B4E                     l3924:
  5878  000B4E  FFFF               	dw	65535	; assembler added errata NOP
  5879                           
  5880                           ;motors.c: 386:         if(MOT1Direction == 1){
  5881  000B50  041F               	decf	moveToPoint@MOT1Direction^0,w,c
  5882  000B52  A4D8               	btfss	status,2,c
  5883  000B54  EFAE  F005         	goto	u3111
  5884  000B58  EFB1  F005         	goto	u3110
  5885  000B5C                     u3111:
  5886  000B5C  FFFF               	dw	65535	; assembler added errata NOP
  5887  000B5E  EFFA  F005         	goto	l3940
  5888  000B62                     u3110:
  5889  000B62  FFFF               	dw	65535	; assembler added errata NOP
  5890  000B64                     
  5891                           ;motors.c: 387:             if(x1 + stepCounter() >= x2){
  5892  000B64  EC7C  F012         	call	_stepCounter	;wreg free
  5893  000B68  5015               	movf	moveToPoint@x1^0,w,c
  5894  000B6A  2612               	addwf	?_stepCounter^0,f,c
  5895  000B6C  5016               	movf	(moveToPoint@x1+1)^0,w,c
  5896  000B6E  2213               	addwfc	(?_stepCounter+1)^0,f,c
  5897  000B70  5019               	movf	moveToPoint@x2^0,w,c
  5898  000B72  5C12               	subwf	?_stepCounter^0,w,c
  5899  000B74  501A               	movf	(moveToPoint@x2+1)^0,w,c
  5900  000B76  5813               	subwfb	(?_stepCounter+1)^0,w,c
  5901  000B78  A0D8               	btfss	status,0,c
  5902  000B7A  EFC1  F005         	goto	u3121
  5903  000B7E  EFC4  F005         	goto	u3120
  5904  000B82                     u3121:
  5905  000B82  FFFF               	dw	65535	; assembler added errata NOP
  5906  000B84  EFCA  F005         	goto	l3930
  5907  000B88                     u3120:
  5908  000B88  FFFF               	dw	65535	; assembler added errata NOP
  5909  000B8A                     l3928:
  5910  000B8A  FFFF               	dw	65535	; assembler added errata NOP
  5911                           
  5912                           ;motors.c: 389:                 keepMovingX = 0;
  5913  000B8C  0E00               	movlw	0
  5914  000B8E  6E21               	movwf	moveToPoint@keepMovingX^0,c
  5915                           
  5916                           ;motors.c: 390:             }else if(keepMovingX){
  5917  000B90  EF3E  F006         	goto	l3956
  5918  000B94                     l3930:
  5919  000B94  FFFF               	dw	65535	; assembler added errata NOP
  5920  000B96  5021               	movf	moveToPoint@keepMovingX^0,w,c
  5921  000B98  B4D8               	btfsc	status,2,c
  5922  000B9A  EFD1  F005         	goto	u3131
  5923  000B9E  EFD4  F005         	goto	u3130
  5924  000BA2                     u3131:
  5925  000BA2  FFFF               	dw	65535	; assembler added errata NOP
  5926  000BA4  EF3E  F006         	goto	l3956
  5927  000BA8                     u3130:
  5928  000BA8  FFFF               	dw	65535	; assembler added errata NOP
  5929  000BAA                     
  5930                           ;motors.c: 396:             motCounter[0][0] += motCounter[0][1];
  5931  000BAA  EE20  F060         	lfsr	2,_motCounter+2
  5932  000BAE  50DE               	movf	postinc2,w,c
  5933  000BB0  265E               	addwf	_motCounter^0,f,c
  5934  000BB2  50DD               	movf	postdec2,w,c
  5935  000BB4  225F               	addwfc	(_motCounter+1)^0,f,c
  5936  000BB6                     
  5937                           ;motors.c: 397:             if(motCounter[0][0] > 3){
  5938  000BB6  BE5F               	btfsc	(_motCounter+1)^0,7,c
  5939  000BB8  EFE7  F005         	goto	u3141
  5940  000BBC  505F               	movf	(_motCounter+1)^0,w,c
  5941  000BBE  E10A               	bnz	u3140
  5942  000BC0  0E04               	movlw	4
  5943  000BC2  5C5E               	subwf	_motCounter^0,w,c
  5944  000BC4  A0D8               	btfss	status,0,c
  5945  000BC6  EFE7  F005         	goto	u3141
  5946  000BCA  EFEA  F005         	goto	u3140
  5947  000BCE                     u3141:
  5948  000BCE  FFFF               	dw	65535	; assembler added errata NOP
  5949  000BD0  EFEF  F005         	goto	l3938
  5950  000BD4                     u3140:
  5951  000BD4  FFFF               	dw	65535	; assembler added errata NOP
  5952  000BD6                     
  5953                           ;motors.c: 398:                 motCounter[0][0] = 0;
  5954  000BD6  0E00               	movlw	0
  5955  000BD8  6E5F               	movwf	(_motCounter+1)^0,c
  5956  000BDA  0E00               	movlw	0
  5957  000BDC  6E5E               	movwf	_motCounter^0,c
  5958  000BDE                     l3938:
  5959  000BDE  FFFF               	dw	65535	; assembler added errata NOP
  5960                           
  5961                           ;motors.c: 401:             LATA = stepMot1[motCounter[0][0]];
  5962  000BE0  0E8C               	movlw	low _stepMot1
  5963  000BE2  245E               	addwf	_motCounter^0,w,c
  5964  000BE4  6ED9               	movwf	fsr2l,c
  5965  000BE6  0E00               	movlw	high _stepMot1
  5966  000BE8  205F               	addwfc	(_motCounter+1)^0,w,c
  5967  000BEA  6EDA               	movwf	fsr2h,c
  5968  000BEC  50DF               	movf	indf2,w,c
  5969  000BEE  6E89               	movwf	137,c	;volatile
  5970  000BF0  EF3E  F006         	goto	l3956
  5971  000BF4                     l3940:
  5972  000BF4  FFFF               	dw	65535	; assembler added errata NOP
  5973  000BF6  501F               	movf	moveToPoint@MOT1Direction^0,w,c
  5974  000BF8  A4D8               	btfss	status,2,c
  5975  000BFA  EF01  F006         	goto	u3151
  5976  000BFE  EF04  F006         	goto	u3150
  5977  000C02                     u3151:
  5978  000C02  FFFF               	dw	65535	; assembler added errata NOP
  5979  000C04  EF3E  F006         	goto	l3956
  5980  000C08                     u3150:
  5981  000C08  FFFF               	dw	65535	; assembler added errata NOP
  5982  000C0A                     
  5983                           ;motors.c: 405:             if(x1 - stepCounter() <= x2){
  5984  000C0A  EC7C  F012         	call	_stepCounter	;wreg free
  5985  000C0E  C015  F01D         	movff	moveToPoint@x1,??_moveToPoint
  5986  000C12  C016  F01E         	movff	moveToPoint@x1+1,??_moveToPoint+1
  5987  000C16  5012               	movf	?_stepCounter^0,w,c
  5988  000C18  5E1D               	subwf	??_moveToPoint^0,f,c
  5989  000C1A  5013               	movf	(?_stepCounter+1)^0,w,c
  5990  000C1C  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  5991  000C1E  501D               	movf	??_moveToPoint^0,w,c
  5992  000C20  5C19               	subwf	moveToPoint@x2^0,w,c
  5993  000C22  501E               	movf	(??_moveToPoint+1)^0,w,c
  5994  000C24  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  5995  000C26  A0D8               	btfss	status,0,c
  5996  000C28  EF18  F006         	goto	u3161
  5997  000C2C  EF1B  F006         	goto	u3160
  5998  000C30                     u3161:
  5999  000C30  FFFF               	dw	65535	; assembler added errata NOP
  6000  000C32  EF1E  F006         	goto	l3946
  6001  000C36                     u3160:
  6002  000C36  FFFF               	dw	65535	; assembler added errata NOP
  6003  000C38  EFC5  F005         	goto	l3928
  6004  000C3C                     l3946:
  6005  000C3C  FFFF               	dw	65535	; assembler added errata NOP
  6006  000C3E  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6007  000C40  B4D8               	btfsc	status,2,c
  6008  000C42  EF25  F006         	goto	u3171
  6009  000C46  EF28  F006         	goto	u3170
  6010  000C4A                     u3171:
  6011  000C4A  FFFF               	dw	65535	; assembler added errata NOP
  6012  000C4C  EF3E  F006         	goto	l3956
  6013  000C50                     u3170:
  6014  000C50  FFFF               	dw	65535	; assembler added errata NOP
  6015  000C52                     
  6016                           ;motors.c: 414:             motCounter[0][0] += motCounter[0][1];
  6017  000C52  EE20  F060         	lfsr	2,_motCounter+2
  6018  000C56  50DE               	movf	postinc2,w,c
  6019  000C58  265E               	addwf	_motCounter^0,f,c
  6020  000C5A  50DD               	movf	postdec2,w,c
  6021  000C5C  225F               	addwfc	(_motCounter+1)^0,f,c
  6022  000C5E                     
  6023                           ;motors.c: 415:             if(motCounter[0][0] < 0){
  6024  000C5E  BE5F               	btfsc	(_motCounter+1)^0,7,c
  6025  000C60  EF37  F006         	goto	u3180
  6026  000C64  EF34  F006         	goto	u3181
  6027  000C68                     u3181:
  6028  000C68  FFFF               	dw	65535	; assembler added errata NOP
  6029  000C6A  EFEF  F005         	goto	l3938
  6030  000C6E                     u3180:
  6031  000C6E  FFFF               	dw	65535	; assembler added errata NOP
  6032  000C70                     
  6033                           ;motors.c: 416:                 motCounter[0][0] = 3;
  6034  000C70  0E00               	movlw	0
  6035  000C72  6E5F               	movwf	(_motCounter+1)^0,c
  6036  000C74  0E03               	movlw	3
  6037  000C76  6E5E               	movwf	_motCounter^0,c
  6038  000C78  EFEF  F005         	goto	l3938
  6039  000C7C                     l3956:
  6040  000C7C  FFFF               	dw	65535	; assembler added errata NOP
  6041                           
  6042                           ;motors.c: 424:         if(MOT2Direction == 1){
  6043  000C7E  0420               	decf	moveToPoint@MOT2Direction^0,w,c
  6044  000C80  A4D8               	btfss	status,2,c
  6045  000C82  EF45  F006         	goto	u3191
  6046  000C86  EF48  F006         	goto	u3190
  6047  000C8A                     u3191:
  6048  000C8A  FFFF               	dw	65535	; assembler added errata NOP
  6049  000C8C  EF91  F006         	goto	l3972
  6050  000C90                     u3190:
  6051  000C90  FFFF               	dw	65535	; assembler added errata NOP
  6052  000C92                     
  6053                           ;motors.c: 426:             if(y1 + stepCounter() >= y2){
  6054  000C92  EC7C  F012         	call	_stepCounter	;wreg free
  6055  000C96  5017               	movf	moveToPoint@y1^0,w,c
  6056  000C98  2612               	addwf	?_stepCounter^0,f,c
  6057  000C9A  5018               	movf	(moveToPoint@y1+1)^0,w,c
  6058  000C9C  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6059  000C9E  501B               	movf	moveToPoint@y2^0,w,c
  6060  000CA0  5C12               	subwf	?_stepCounter^0,w,c
  6061  000CA2  501C               	movf	(moveToPoint@y2+1)^0,w,c
  6062  000CA4  5813               	subwfb	(?_stepCounter+1)^0,w,c
  6063  000CA6  A0D8               	btfss	status,0,c
  6064  000CA8  EF58  F006         	goto	u3201
  6065  000CAC  EF5B  F006         	goto	u3200
  6066  000CB0                     u3201:
  6067  000CB0  FFFF               	dw	65535	; assembler added errata NOP
  6068  000CB2  EF61  F006         	goto	l3962
  6069  000CB6                     u3200:
  6070  000CB6  FFFF               	dw	65535	; assembler added errata NOP
  6071  000CB8                     l3960:
  6072  000CB8  FFFF               	dw	65535	; assembler added errata NOP
  6073                           
  6074                           ;motors.c: 428:                 keepMovingY = 0;
  6075  000CBA  0E00               	movlw	0
  6076  000CBC  6E22               	movwf	moveToPoint@keepMovingY^0,c
  6077                           
  6078                           ;motors.c: 429:             }else if(keepMovingY){
  6079  000CBE  EFD5  F006         	goto	l3988
  6080  000CC2                     l3962:
  6081  000CC2  FFFF               	dw	65535	; assembler added errata NOP
  6082  000CC4  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6083  000CC6  B4D8               	btfsc	status,2,c
  6084  000CC8  EF68  F006         	goto	u3211
  6085  000CCC  EF6B  F006         	goto	u3210
  6086  000CD0                     u3211:
  6087  000CD0  FFFF               	dw	65535	; assembler added errata NOP
  6088  000CD2  EFD5  F006         	goto	l182
  6089  000CD6                     u3210:
  6090  000CD6  FFFF               	dw	65535	; assembler added errata NOP
  6091  000CD8                     
  6092                           ;motors.c: 435:             motCounter[1][0] += motCounter[1][1];
  6093  000CD8  EE20  F064         	lfsr	2,_motCounter+6
  6094  000CDC  50DE               	movf	postinc2,w,c
  6095  000CDE  2662               	addwf	(_motCounter+4)^0,f,c
  6096  000CE0  50DD               	movf	postdec2,w,c
  6097  000CE2  2263               	addwfc	(_motCounter+5)^0,f,c
  6098  000CE4                     
  6099                           ;motors.c: 436:             if(motCounter[1][0] > 3){
  6100  000CE4  BE63               	btfsc	(_motCounter+5)^0,7,c
  6101  000CE6  EF7E  F006         	goto	u3221
  6102  000CEA  5063               	movf	(_motCounter+5)^0,w,c
  6103  000CEC  E10A               	bnz	u3220
  6104  000CEE  0E04               	movlw	4
  6105  000CF0  5C62               	subwf	(_motCounter+4)^0,w,c
  6106  000CF2  A0D8               	btfss	status,0,c
  6107  000CF4  EF7E  F006         	goto	u3221
  6108  000CF8  EF81  F006         	goto	u3220
  6109  000CFC                     u3221:
  6110  000CFC  FFFF               	dw	65535	; assembler added errata NOP
  6111  000CFE  EF86  F006         	goto	l3970
  6112  000D02                     u3220:
  6113  000D02  FFFF               	dw	65535	; assembler added errata NOP
  6114  000D04                     
  6115                           ;motors.c: 437:                 motCounter[1][0] = 0;
  6116  000D04  0E00               	movlw	0
  6117  000D06  6E63               	movwf	(_motCounter+5)^0,c
  6118  000D08  0E00               	movlw	0
  6119  000D0A  6E62               	movwf	(_motCounter+4)^0,c
  6120  000D0C                     l3970:
  6121  000D0C  FFFF               	dw	65535	; assembler added errata NOP
  6122                           
  6123                           ;motors.c: 440:             LATB = stepMot2[motCounter[1][0]];
  6124  000D0E  0E88               	movlw	low _stepMot2
  6125  000D10  2462               	addwf	(_motCounter+4)^0,w,c
  6126  000D12  6ED9               	movwf	fsr2l,c
  6127  000D14  0E00               	movlw	high _stepMot2
  6128  000D16  2063               	addwfc	(_motCounter+5)^0,w,c
  6129  000D18  6EDA               	movwf	fsr2h,c
  6130  000D1A  50DF               	movf	indf2,w,c
  6131  000D1C  6E8A               	movwf	138,c	;volatile
  6132  000D1E  EFD5  F006         	goto	l3988
  6133  000D22                     l3972:
  6134  000D22  FFFF               	dw	65535	; assembler added errata NOP
  6135  000D24  5020               	movf	moveToPoint@MOT2Direction^0,w,c
  6136  000D26  A4D8               	btfss	status,2,c
  6137  000D28  EF98  F006         	goto	u3231
  6138  000D2C  EF9B  F006         	goto	u3230
  6139  000D30                     u3231:
  6140  000D30  FFFF               	dw	65535	; assembler added errata NOP
  6141  000D32  EFD5  F006         	goto	l3988
  6142  000D36                     u3230:
  6143  000D36  FFFF               	dw	65535	; assembler added errata NOP
  6144  000D38                     
  6145                           ;motors.c: 445:             if(y1 - stepCounter() <= y2){
  6146  000D38  EC7C  F012         	call	_stepCounter	;wreg free
  6147  000D3C  C017  F01D         	movff	moveToPoint@y1,??_moveToPoint
  6148  000D40  C018  F01E         	movff	moveToPoint@y1+1,??_moveToPoint+1
  6149  000D44  5012               	movf	?_stepCounter^0,w,c
  6150  000D46  5E1D               	subwf	??_moveToPoint^0,f,c
  6151  000D48  5013               	movf	(?_stepCounter+1)^0,w,c
  6152  000D4A  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6153  000D4C  501D               	movf	??_moveToPoint^0,w,c
  6154  000D4E  5C1B               	subwf	moveToPoint@y2^0,w,c
  6155  000D50  501E               	movf	(??_moveToPoint+1)^0,w,c
  6156  000D52  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  6157  000D54  A0D8               	btfss	status,0,c
  6158  000D56  EFAF  F006         	goto	u3241
  6159  000D5A  EFB2  F006         	goto	u3240
  6160  000D5E                     u3241:
  6161  000D5E  FFFF               	dw	65535	; assembler added errata NOP
  6162  000D60  EFB5  F006         	goto	l3978
  6163  000D64                     u3240:
  6164  000D64  FFFF               	dw	65535	; assembler added errata NOP
  6165  000D66  EF5C  F006         	goto	l3960
  6166  000D6A                     l3978:
  6167  000D6A  FFFF               	dw	65535	; assembler added errata NOP
  6168  000D6C  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6169  000D6E  B4D8               	btfsc	status,2,c
  6170  000D70  EFBC  F006         	goto	u3251
  6171  000D74  EFBF  F006         	goto	u3250
  6172  000D78                     u3251:
  6173  000D78  FFFF               	dw	65535	; assembler added errata NOP
  6174  000D7A  EFD5  F006         	goto	l3988
  6175  000D7E                     u3250:
  6176  000D7E  FFFF               	dw	65535	; assembler added errata NOP
  6177  000D80                     
  6178                           ;motors.c: 454:             motCounter[1][0] += motCounter[1][1];
  6179  000D80  EE20  F064         	lfsr	2,_motCounter+6
  6180  000D84  50DE               	movf	postinc2,w,c
  6181  000D86  2662               	addwf	(_motCounter+4)^0,f,c
  6182  000D88  50DD               	movf	postdec2,w,c
  6183  000D8A  2263               	addwfc	(_motCounter+5)^0,f,c
  6184  000D8C                     
  6185                           ;motors.c: 455:             if(motCounter[1][0] < 0){
  6186  000D8C  BE63               	btfsc	(_motCounter+5)^0,7,c
  6187  000D8E  EFCE  F006         	goto	u3260
  6188  000D92  EFCB  F006         	goto	u3261
  6189  000D96                     u3261:
  6190  000D96  FFFF               	dw	65535	; assembler added errata NOP
  6191  000D98  EF86  F006         	goto	l3970
  6192  000D9C                     u3260:
  6193  000D9C  FFFF               	dw	65535	; assembler added errata NOP
  6194  000D9E                     
  6195                           ;motors.c: 456:                 motCounter[1][0] = 3;
  6196  000D9E  0E00               	movlw	0
  6197  000DA0  6E63               	movwf	(_motCounter+5)^0,c
  6198  000DA2  0E03               	movlw	3
  6199  000DA4  6E62               	movwf	(_motCounter+4)^0,c
  6200  000DA6  EF86  F006         	goto	l3970
  6201  000DAA                     l182:
  6202  000DAA                     l3988:
  6203  000DAA  FFFF               	dw	65535	; assembler added errata NOP
  6204  000DAC  EC22  F012         	call	_stepMade	;wreg free
  6205  000DB0  5012               	movf	?_stepMade^0,w,c
  6206  000DB2  1013               	iorwf	(?_stepMade+1)^0,w,c
  6207  000DB4  B4D8               	btfsc	status,2,c
  6208  000DB6  EFDF  F006         	goto	u3271
  6209  000DBA  EFE2  F006         	goto	u3270
  6210  000DBE                     u3271:
  6211  000DBE  FFFF               	dw	65535	; assembler added errata NOP
  6212  000DC0  EFD5  F006         	goto	l3988
  6213  000DC4                     u3270:
  6214  000DC4                     l3990:
  6215  000DC4  FFFF               	dw	65535	; assembler added errata NOP
  6216                           
  6217                           ;motors.c: 368:     while(keepMovingX || keepMovingY){
  6218  000DC6  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6219  000DC8  A4D8               	btfss	status,2,c
  6220  000DCA  EFE9  F006         	goto	u3281
  6221  000DCE  EFEC  F006         	goto	u3280
  6222  000DD2                     u3281:
  6223  000DD2  FFFF               	dw	65535	; assembler added errata NOP
  6224  000DD4  EF95  F005         	goto	l3920
  6225  000DD8                     u3280:
  6226  000DD8  FFFF               	dw	65535	; assembler added errata NOP
  6227  000DDA  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6228  000DDC  A4D8               	btfss	status,2,c
  6229  000DDE  EFF3  F006         	goto	u3291
  6230  000DE2  EFF6  F006         	goto	u3290
  6231  000DE6                     u3291:
  6232  000DE6  FFFF               	dw	65535	; assembler added errata NOP
  6233  000DE8  EF95  F005         	goto	l3920
  6234  000DEC                     u3290:
  6235  000DEC                     l165:
  6236  000DEC  FFFF               	dw	65535	; assembler added errata NOP
  6237                           
  6238                           ;motors.c: 479:     T0CONbits.TMR0ON = 0;
  6239  000DEE  9ED5               	bcf	213,7,c	;volatile
  6240                           
  6241                           ;motors.c: 480:     T2CONbits.TMR2ON = 0;
  6242  000DF0  94CA               	bcf	202,2,c	;volatile
  6243  000DF2                     
  6244                           ;motors.c: 482:     TMR0 = 0;
  6245  000DF2  0E00               	movlw	0
  6246  000DF4  6ED7               	movwf	215,c	;volatile
  6247  000DF6  0E00               	movlw	0
  6248  000DF8  6ED6               	movwf	214,c	;volatile
  6249                           
  6250                           ;motors.c: 483:     TMR2 = 0;
  6251  000DFA  0E00               	movlw	0
  6252  000DFC  6ECC               	movwf	204,c	;volatile
  6253  000DFE                     
  6254                           ;motors.c: 486:     resetStep();
  6255  000DFE  EC96  F012         	call	_resetStep	;wreg free
  6256  000E02                     
  6257                           ;motors.c: 488:     return(tm0Error);
  6258  000E02  5050               	movf	_tm0Error^0,w,c
  6259  000E04                     l157:
  6260  000E04  FFFF               	dw	65535	; assembler added errata NOP
  6261  000E06  0012               	return		;funcret
  6262  000E08  FFFF               	dw	65535	; errata NOP
  6263  000E0A                     __end_of_moveToPoint:
  6264                           	callstack 0
  6265                           
  6266 ;; *************** function _stepCounter *****************
  6267 ;; Defined at:
  6268 ;;		line 70 in file "timer.c"
  6269 ;; Parameters:    Size  Location     Type
  6270 ;;		None
  6271 ;; Auto vars:     Size  Location     Type
  6272 ;;		None
  6273 ;; Return value:  Size  Location     Type
  6274 ;;                  2   17[COMRAM] unsigned int 
  6275 ;; Registers used:
  6276 ;;		None
  6277 ;; Tracked objects:
  6278 ;;		On entry : 0/0
  6279 ;;		On exit  : 0/0
  6280 ;;		Unchanged: 0/0
  6281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6282 ;;      Params:         2       0       0       0       0       0       0
  6283 ;;      Locals:         0       0       0       0       0       0       0
  6284 ;;      Temps:          0       0       0       0       0       0       0
  6285 ;;      Totals:         2       0       0       0       0       0       0
  6286 ;;Total ram usage:        2 bytes
  6287 ;; Hardware stack levels used:    1
  6288 ;; Hardware stack levels required when called:    4
  6289 ;; This function calls:
  6290 ;;		Nothing
  6291 ;; This function is called by:
  6292 ;;		_moveToPoint
  6293 ;; This function uses a non-reentrant model
  6294 ;;
  6295                           
  6296                           	psect	text34
  6297  0024F8                     __ptext34:
  6298                           	callstack 0
  6299  0024F8                     _stepCounter:
  6300                           	callstack 0
  6301  0024F8  FFFF               	dw	65535	; assembler added errata NOP
  6302  0024FA                     
  6303                           ;timer.c: 71:     return pwmStep;
  6304  0024FA  C053  F012         	movff	_pwmStep,?_stepCounter	;volatile
  6305  0024FE  6A13               	clrf	(?_stepCounter+1)^0,c
  6306  002500  0012               	return		;funcret
  6307  002502  FFFF               	dw	65535	; errata NOP
  6308  002504                     __end_of_stepCounter:
  6309                           	callstack 0
  6310                           
  6311 ;; *************** function _liftArm *****************
  6312 ;; Defined at:
  6313 ;;		line 678 in file "motors.c"
  6314 ;; Parameters:    Size  Location     Type
  6315 ;;		None
  6316 ;; Auto vars:     Size  Location     Type
  6317 ;;		None
  6318 ;; Return value:  Size  Location     Type
  6319 ;;                  1    wreg      unsigned char 
  6320 ;; Registers used:
  6321 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6322 ;; Tracked objects:
  6323 ;;		On entry : 0/0
  6324 ;;		On exit  : 0/0
  6325 ;;		Unchanged: 0/0
  6326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6327 ;;      Params:         0       0       0       0       0       0       0
  6328 ;;      Locals:         0       0       0       0       0       0       0
  6329 ;;      Temps:          0       0       0       0       0       0       0
  6330 ;;      Totals:         0       0       0       0       0       0       0
  6331 ;;Total ram usage:        0 bytes
  6332 ;; Hardware stack levels used:    1
  6333 ;; Hardware stack levels required when called:    5
  6334 ;; This function calls:
  6335 ;;		_resetStep
  6336 ;;		_stepMade
  6337 ;; This function is called by:
  6338 ;;		_executeData
  6339 ;; This function uses a non-reentrant model
  6340 ;;
  6341                           
  6342                           	psect	text35
  6343  0020A8                     __ptext35:
  6344                           	callstack 0
  6345  0020A8                     _liftArm:
  6346                           	callstack 0
  6347  0020A8  FFFF               	dw	65535	; assembler added errata NOP
  6348  0020AA                     
  6349                           ;motors.c: 684:     motCounter[2][1] = -1;
  6350  0020AA  6868               	setf	(_motCounter+10)^0,c
  6351  0020AC  6869               	setf	(_motCounter+11)^0,c
  6352                           
  6353                           ;motors.c: 687:     T2CONbits.TMR2ON = 1;
  6354  0020AE  84CA               	bsf	202,2,c	;volatile
  6355  0020B0                     
  6356                           ;motors.c: 689:     tm0Error = 0;
  6357  0020B0  0E00               	movlw	0
  6358  0020B2  6E51               	movwf	(_tm0Error+1)^0,c
  6359  0020B4  0E00               	movlw	0
  6360  0020B6  6E50               	movwf	_tm0Error^0,c
  6361                           
  6362                           ;motors.c: 690:     tm0Limit = 250;
  6363  0020B8  0EFA               	movlw	250
  6364  0020BA  6E5D               	movwf	_tm0Limit^0,c
  6365  0020BC                     
  6366                           ;motors.c: 691:     T0CONbits.TMR0ON = 1;
  6367  0020BC  8ED5               	bsf	213,7,c	;volatile
  6368                           
  6369                           ;motors.c: 695:     while(!PORTEbits.RE2){
  6370  0020BE  EF9D  F010         	goto	l217
  6371  0020C2                     l4096:
  6372  0020C2  FFFF               	dw	65535	; assembler added errata NOP
  6373                           
  6374                           ;motors.c: 698:         if(tm0Error){
  6375  0020C4  5050               	movf	_tm0Error^0,w,c
  6376  0020C6  1051               	iorwf	(_tm0Error+1)^0,w,c
  6377  0020C8  B4D8               	btfsc	status,2,c
  6378  0020CA  EF69  F010         	goto	u3421
  6379  0020CE  EF6C  F010         	goto	u3420
  6380  0020D2                     u3421:
  6381  0020D2  FFFF               	dw	65535	; assembler added errata NOP
  6382  0020D4  EF73  F010         	goto	l4100
  6383  0020D8                     u3420:
  6384  0020D8  FFFF               	dw	65535	; assembler added errata NOP
  6385  0020DA                     
  6386                           ;motors.c: 703:             tm0Error = 6;
  6387  0020DA  0E00               	movlw	0
  6388  0020DC  6E51               	movwf	(_tm0Error+1)^0,c
  6389  0020DE  0E06               	movlw	6
  6390  0020E0  6E50               	movwf	_tm0Error^0,c
  6391                           
  6392                           ;motors.c: 704:             break;
  6393  0020E2  EFA6  F010         	goto	l220
  6394  0020E6                     l4100:
  6395  0020E6  FFFF               	dw	65535	; assembler added errata NOP
  6396                           
  6397                           ;motors.c: 713:             motCounter[2][0] += motCounter[2][1];
  6398  0020E8  EE20  F068         	lfsr	2,_motCounter+10
  6399  0020EC  50DE               	movf	postinc2,w,c
  6400  0020EE  2666               	addwf	(_motCounter+8)^0,f,c
  6401  0020F0  50DD               	movf	postdec2,w,c
  6402  0020F2  2267               	addwfc	(_motCounter+9)^0,f,c
  6403  0020F4                     
  6404                           ;motors.c: 714:             if(motCounter[2][0] < 0){
  6405  0020F4  BE67               	btfsc	(_motCounter+9)^0,7,c
  6406  0020F6  EF82  F010         	goto	u3430
  6407  0020FA  EF7F  F010         	goto	u3431
  6408  0020FE                     u3431:
  6409  0020FE  FFFF               	dw	65535	; assembler added errata NOP
  6410  002100  EF87  F010         	goto	l4106
  6411  002104                     u3430:
  6412  002104  FFFF               	dw	65535	; assembler added errata NOP
  6413  002106                     
  6414                           ;motors.c: 715:                 motCounter[2][0] = 3;
  6415  002106  0E00               	movlw	0
  6416  002108  6E67               	movwf	(_motCounter+9)^0,c
  6417  00210A  0E03               	movlw	3
  6418  00210C  6E66               	movwf	(_motCounter+8)^0,c
  6419  00210E                     l4106:
  6420  00210E  FFFF               	dw	65535	; assembler added errata NOP
  6421                           
  6422                           ;motors.c: 718:             LATC = stepMot3[motCounter[2][0]];
  6423  002110  0E84               	movlw	low _stepMot3
  6424  002112  2466               	addwf	(_motCounter+8)^0,w,c
  6425  002114  6ED9               	movwf	fsr2l,c
  6426  002116  0E00               	movlw	high _stepMot3
  6427  002118  2067               	addwfc	(_motCounter+9)^0,w,c
  6428  00211A  6EDA               	movwf	fsr2h,c
  6429  00211C  50DF               	movf	indf2,w,c
  6430  00211E  6E8B               	movwf	139,c	;volatile
  6431  002120                     l4108:
  6432  002120  FFFF               	dw	65535	; assembler added errata NOP
  6433  002122  EC22  F012         	call	_stepMade	;wreg free
  6434  002126  5012               	movf	?_stepMade^0,w,c
  6435  002128  1013               	iorwf	(?_stepMade+1)^0,w,c
  6436  00212A  B4D8               	btfsc	status,2,c
  6437  00212C  EF9A  F010         	goto	u3441
  6438  002130  EF9D  F010         	goto	u3440
  6439  002134                     u3441:
  6440  002134  FFFF               	dw	65535	; assembler added errata NOP
  6441  002136  EF90  F010         	goto	l4108
  6442  00213A                     u3440:
  6443  00213A                     l217:
  6444  00213A  FFFF               	dw	65535	; assembler added errata NOP
  6445                           
  6446                           ;motors.c: 695:     while(!PORTEbits.RE2){
  6447  00213C  A484               	btfss	132,2,c	;volatile
  6448  00213E  EFA3  F010         	goto	u3451
  6449  002142  EFA6  F010         	goto	u3450
  6450  002146                     u3451:
  6451  002146  FFFF               	dw	65535	; assembler added errata NOP
  6452  002148  EF61  F010         	goto	l4096
  6453  00214C                     u3450:
  6454  00214C                     l220:
  6455  00214C  FFFF               	dw	65535	; assembler added errata NOP
  6456                           
  6457                           ;motors.c: 735:     T0CONbits.TMR0ON = 0;
  6458  00214E  9ED5               	bcf	213,7,c	;volatile
  6459                           
  6460                           ;motors.c: 736:     T2CONbits.TMR2ON = 0;
  6461  002150  94CA               	bcf	202,2,c	;volatile
  6462  002152                     
  6463                           ;motors.c: 738:     TMR0 = 0;
  6464  002152  0E00               	movlw	0
  6465  002154  6ED7               	movwf	215,c	;volatile
  6466  002156  0E00               	movlw	0
  6467  002158  6ED6               	movwf	214,c	;volatile
  6468                           
  6469                           ;motors.c: 739:     TMR2 = 0;
  6470  00215A  0E00               	movlw	0
  6471  00215C  6ECC               	movwf	204,c	;volatile
  6472  00215E                     
  6473                           ;motors.c: 742:     resetStep();
  6474  00215E  EC96  F012         	call	_resetStep	;wreg free
  6475  002162                     
  6476                           ;motors.c: 744:     return(tm0Error);
  6477  002162  5050               	movf	_tm0Error^0,w,c
  6478  002164  0012               	return		;funcret
  6479  002166  FFFF               	dw	65535	; errata NOP
  6480  002168                     __end_of_liftArm:
  6481                           	callstack 0
  6482                           
  6483 ;; *************** function _stepMade *****************
  6484 ;; Defined at:
  6485 ;;		line 59 in file "timer.c"
  6486 ;; Parameters:    Size  Location     Type
  6487 ;;		None
  6488 ;; Auto vars:     Size  Location     Type
  6489 ;;  temp            1   19[COMRAM] unsigned char 
  6490 ;; Return value:  Size  Location     Type
  6491 ;;                  2   17[COMRAM] unsigned int 
  6492 ;; Registers used:
  6493 ;;		wreg, status,2
  6494 ;; Tracked objects:
  6495 ;;		On entry : 0/0
  6496 ;;		On exit  : 0/0
  6497 ;;		Unchanged: 0/0
  6498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6499 ;;      Params:         2       0       0       0       0       0       0
  6500 ;;      Locals:         1       0       0       0       0       0       0
  6501 ;;      Temps:          0       0       0       0       0       0       0
  6502 ;;      Totals:         3       0       0       0       0       0       0
  6503 ;;Total ram usage:        3 bytes
  6504 ;; Hardware stack levels used:    1
  6505 ;; Hardware stack levels required when called:    4
  6506 ;; This function calls:
  6507 ;;		Nothing
  6508 ;; This function is called by:
  6509 ;;		_resetPosition
  6510 ;;		_moveToPoint
  6511 ;;		_touchObject
  6512 ;;		_touchTherm
  6513 ;;		_liftArm
  6514 ;;		_rotateObj
  6515 ;;		_pickObject
  6516 ;;		_releaseObj
  6517 ;; This function uses a non-reentrant model
  6518 ;;
  6519                           
  6520                           	psect	text36
  6521  002444                     __ptext36:
  6522                           	callstack 0
  6523  002444                     _stepMade:
  6524                           	callstack 0
  6525  002444  FFFF               	dw	65535	; assembler added errata NOP
  6526  002446                     
  6527                           ;timer.c: 60:     unsigned char temp = stepToggle;
  6528  002446  C052  F014         	movff	_stepToggle,stepMade@temp	;volatile
  6529  00244A                     
  6530                           ;timer.c: 62:     stepToggle = 0;
  6531  00244A  0E00               	movlw	0
  6532  00244C  6E52               	movwf	_stepToggle^0,c	;volatile
  6533  00244E                     
  6534                           ;timer.c: 64:     return temp;
  6535  00244E  C014  F012         	movff	stepMade@temp,?_stepMade
  6536  002452  6A13               	clrf	(?_stepMade+1)^0,c
  6537  002454  0012               	return		;funcret
  6538  002456  FFFF               	dw	65535	; errata NOP
  6539  002458                     __end_of_stepMade:
  6540                           	callstack 0
  6541                           
  6542 ;; *************** function _resetStep *****************
  6543 ;; Defined at:
  6544 ;;		line 77 in file "timer.c"
  6545 ;; Parameters:    Size  Location     Type
  6546 ;;		None
  6547 ;; Auto vars:     Size  Location     Type
  6548 ;;		None
  6549 ;; Return value:  Size  Location     Type
  6550 ;;                  1    wreg      void 
  6551 ;; Registers used:
  6552 ;;		wreg, status,2
  6553 ;; Tracked objects:
  6554 ;;		On entry : 0/0
  6555 ;;		On exit  : 0/0
  6556 ;;		Unchanged: 0/0
  6557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6558 ;;      Params:         0       0       0       0       0       0       0
  6559 ;;      Locals:         0       0       0       0       0       0       0
  6560 ;;      Temps:          0       0       0       0       0       0       0
  6561 ;;      Totals:         0       0       0       0       0       0       0
  6562 ;;Total ram usage:        0 bytes
  6563 ;; Hardware stack levels used:    1
  6564 ;; Hardware stack levels required when called:    4
  6565 ;; This function calls:
  6566 ;;		Nothing
  6567 ;; This function is called by:
  6568 ;;		_resetPosition
  6569 ;;		_moveToPoint
  6570 ;;		_touchObject
  6571 ;;		_touchTherm
  6572 ;;		_liftArm
  6573 ;; This function uses a non-reentrant model
  6574 ;;
  6575                           
  6576                           	psect	text37
  6577  00252C                     __ptext37:
  6578                           	callstack 0
  6579  00252C                     _resetStep:
  6580                           	callstack 0
  6581  00252C  FFFF               	dw	65535	; assembler added errata NOP
  6582  00252E                     
  6583                           ;timer.c: 78:     pwmStep = 0;
  6584  00252E  0E00               	movlw	0
  6585  002530  6E53               	movwf	_pwmStep^0,c	;volatile
  6586  002532  0012               	return		;funcret
  6587  002534  FFFF               	dw	65535	; errata NOP
  6588  002536                     __end_of_resetStep:
  6589                           	callstack 0
  6590                           
  6591 ;; *************** function _getData *****************
  6592 ;; Defined at:
  6593 ;;		line 35 in file "usart.c"
  6594 ;; Parameters:    Size  Location     Type
  6595 ;;		None
  6596 ;; Auto vars:     Size  Location     Type
  6597 ;;		None
  6598 ;; Return value:  Size  Location     Type
  6599 ;;                  2   17[COMRAM] PTR struct .
  6600 ;; Registers used:
  6601 ;;		wreg, status,2, status,0
  6602 ;; Tracked objects:
  6603 ;;		On entry : 0/0
  6604 ;;		On exit  : 0/0
  6605 ;;		Unchanged: 0/0
  6606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6607 ;;      Params:         2       0       0       0       0       0       0
  6608 ;;      Locals:         0       0       0       0       0       0       0
  6609 ;;      Temps:          0       0       0       0       0       0       0
  6610 ;;      Totals:         2       0       0       0       0       0       0
  6611 ;;Total ram usage:        2 bytes
  6612 ;; Hardware stack levels used:    1
  6613 ;; Hardware stack levels required when called:    4
  6614 ;; This function calls:
  6615 ;;		Nothing
  6616 ;; This function is called by:
  6617 ;;		_executeData
  6618 ;; This function uses a non-reentrant model
  6619 ;;
  6620                           
  6621                           	psect	text38
  6622  0024A8                     __ptext38:
  6623                           	callstack 0
  6624  0024A8                     _getData:
  6625                           	callstack 0
  6626  0024A8  FFFF               	dw	65535	; assembler added errata NOP
  6627  0024AA                     
  6628                           ;usart.c: 36:     return(&dataSequence[0]);
  6629  0024AA  0ED1               	movlw	low _dataSequence
  6630  0024AC  6E12               	movwf	?_getData^0,c
  6631  0024AE  0E00               	movlw	high _dataSequence
  6632  0024B0  6E13               	movwf	(?_getData+1)^0,c
  6633  0024B2  0012               	return		;funcret
  6634  0024B4  FFFF               	dw	65535	; errata NOP
  6635  0024B6                     __end_of_getData:
  6636                           	callstack 0
  6637                           
  6638 ;; *************** function _clearTM0 *****************
  6639 ;; Defined at:
  6640 ;;		line 35 in file "motors.c"
  6641 ;; Parameters:    Size  Location     Type
  6642 ;;		None
  6643 ;; Auto vars:     Size  Location     Type
  6644 ;;		None
  6645 ;; Return value:  Size  Location     Type
  6646 ;;                  1    wreg      void 
  6647 ;; Registers used:
  6648 ;;		wreg, status,2
  6649 ;; Tracked objects:
  6650 ;;		On entry : 0/0
  6651 ;;		On exit  : 0/0
  6652 ;;		Unchanged: 0/0
  6653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6654 ;;      Params:         0       0       0       0       0       0       0
  6655 ;;      Locals:         0       0       0       0       0       0       0
  6656 ;;      Temps:          0       0       0       0       0       0       0
  6657 ;;      Totals:         0       0       0       0       0       0       0
  6658 ;;Total ram usage:        0 bytes
  6659 ;; Hardware stack levels used:    1
  6660 ;; Hardware stack levels required when called:    4
  6661 ;; This function calls:
  6662 ;;		Nothing
  6663 ;; This function is called by:
  6664 ;;		_main
  6665 ;; This function uses a non-reentrant model
  6666 ;;
  6667                           
  6668                           	psect	text39
  6669  0024B6                     __ptext39:
  6670                           	callstack 0
  6671  0024B6                     _clearTM0:
  6672                           	callstack 0
  6673  0024B6  FFFF               	dw	65535	; assembler added errata NOP
  6674  0024B8                     
  6675                           ;motors.c: 36:     tm0Error = 0;
  6676  0024B8  0E00               	movlw	0
  6677  0024BA  6E51               	movwf	(_tm0Error+1)^0,c
  6678  0024BC  0E00               	movlw	0
  6679  0024BE  6E50               	movwf	_tm0Error^0,c
  6680  0024C0  0012               	return		;funcret
  6681  0024C2  FFFF               	dw	65535	; errata NOP
  6682  0024C4                     __end_of_clearTM0:
  6683                           	callstack 0
  6684                           
  6685 ;; *************** function _isr *****************
  6686 ;; Defined at:
  6687 ;;		line 38 in file "interrupt.c"
  6688 ;; Parameters:    Size  Location     Type
  6689 ;;		None
  6690 ;; Auto vars:     Size  Location     Type
  6691 ;;  temp            1   16[COMRAM] unsigned char 
  6692 ;; Return value:  Size  Location     Type
  6693 ;;                  1    wreg      void 
  6694 ;; Registers used:
  6695 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6696 ;; Tracked objects:
  6697 ;;		On entry : 0/0
  6698 ;;		On exit  : 0/0
  6699 ;;		Unchanged: 0/0
  6700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6701 ;;      Params:         0       0       0       0       0       0       0
  6702 ;;      Locals:         1       0       0       0       0       0       0
  6703 ;;      Temps:          6       0       0       0       0       0       0
  6704 ;;      Totals:         7       0       0       0       0       0       0
  6705 ;;Total ram usage:        7 bytes
  6706 ;; Hardware stack levels used:    1
  6707 ;; Hardware stack levels required when called:    3
  6708 ;; This function calls:
  6709 ;;		_abortAll
  6710 ;;		_fatalError
  6711 ;;		_increaseStep
  6712 ;;		_retPeriod
  6713 ;;		_setThermRel
  6714 ;;		_setTouchRel
  6715 ;;		_toggleStep
  6716 ;;		_whatsTM0Limit
  6717 ;;		_writeTM0
  6718 ;;		i2_storeData
  6719 ;; This function is called by:
  6720 ;;		Interrupt level 2
  6721 ;; This function uses a non-reentrant model
  6722 ;;
  6723                           
  6724                           	psect	intcode
  6725  000008                     __pintcode:
  6726                           	callstack 0
  6727  000008                     _isr:
  6728                           	callstack 0
  6729  000008  FFFF               	dw	65535	; assembler added errata NOP
  6730                           
  6731                           ;incstack = 0
  6732  00000A  826D               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6733  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  6734  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  6735  000014  CFF3 F00F          	movff	prodl,??_isr+4
  6736  000018  CFF4 F010          	movff	prodh,??_isr+5
  6737  00001C                     
  6738                           ;interrupt.c: 39:     static unsigned int single_cycle = 0;;interrupt.c: 40:     static 
      +                          unsigned char tm0Count = 0;;interrupt.c: 41:     static unsigned char completeStep = 0;;
      +                          interrupt.c: 44:     if(INTCONbits.T0IF){
  6739  00001C  A4F2               	btfss	242,2,c	;volatile
  6740  00001E  EF13  F000         	goto	i2u252_41
  6741  000022  EF16  F000         	goto	i2u252_40
  6742  000026                     i2u252_41:
  6743  000026  FFFF               	dw	65535	; assembler added errata NOP
  6744  000028  EF2C  F000         	goto	i2l3408
  6745  00002C                     i2u252_40:
  6746  00002C  FFFF               	dw	65535	; assembler added errata NOP
  6747  00002E                     
  6748                           ;interrupt.c: 45:         INTCONbits.T0IF = 0;
  6749  00002E  94F2               	bcf	242,2,c	;volatile
  6750  000030                     
  6751                           ;interrupt.c: 48:         tm0Count++;
  6752  000030  2A5A               	incf	isr@tm0Count^0,f,c
  6753  000032                     
  6754                           ;interrupt.c: 50:         if(tm0Count >= whatsTM0Limit()){
  6755  000032  ECBA  F012         	call	_whatsTM0Limit	;wreg free
  6756  000036  6E0B               	movwf	??_isr^0,c
  6757  000038  500B               	movf	??_isr^0,w,c
  6758  00003A  5C5A               	subwf	isr@tm0Count^0,w,c
  6759  00003C  A0D8               	btfss	status,0,c
  6760  00003E  EF23  F000         	goto	i2u253_41
  6761  000042  EF26  F000         	goto	i2u253_40
  6762  000046                     i2u253_41:
  6763  000046  FFFF               	dw	65535	; assembler added errata NOP
  6764  000048  EF2C  F000         	goto	i2l3408
  6765  00004C                     i2u253_40:
  6766  00004C  FFFF               	dw	65535	; assembler added errata NOP
  6767  00004E                     
  6768                           ;interrupt.c: 51:             T0CONbits.TMR0ON = 0;
  6769  00004E  9ED5               	bcf	213,7,c	;volatile
  6770  000050                     
  6771                           ;interrupt.c: 52:             tm0Count = 0;
  6772  000050  0E00               	movlw	0
  6773  000052  6E5A               	movwf	isr@tm0Count^0,c
  6774  000054                     
  6775                           ;interrupt.c: 53:             writeTM0();
  6776  000054  EC62  F012         	call	_writeTM0	;wreg free
  6777  000058                     i2l3408:
  6778  000058  FFFF               	dw	65535	; assembler added errata NOP
  6779                           
  6780                           ;interrupt.c: 58:     if(PIR1bits.TMR1IF){
  6781  00005A  A09E               	btfss	158,0,c	;volatile
  6782  00005C  EF32  F000         	goto	i2u254_41
  6783  000060  EF35  F000         	goto	i2u254_40
  6784  000064                     i2u254_41:
  6785  000064  FFFF               	dw	65535	; assembler added errata NOP
  6786  000066  EF45  F000         	goto	i2l3416
  6787  00006A                     i2u254_40:
  6788  00006A  FFFF               	dw	65535	; assembler added errata NOP
  6789  00006C                     
  6790                           ;interrupt.c: 59:         PIR1bits.TMR1IF = 0;
  6791  00006C  909E               	bcf	158,0,c	;volatile
  6792  00006E                     
  6793                           ;interrupt.c: 60:         if(fatalError()){
  6794  00006E  ECC2  F012         	call	_fatalError	;wreg free
  6795  000072  0900               	iorlw	0
  6796  000074  B4D8               	btfsc	status,2,c
  6797  000076  EF3F  F000         	goto	i2u255_41
  6798  00007A  EF42  F000         	goto	i2u255_40
  6799  00007E                     i2u255_41:
  6800  00007E  FFFF               	dw	65535	; assembler added errata NOP
  6801  000080  EF45  F000         	goto	i2l3416
  6802  000084                     i2u255_40:
  6803  000084  FFFF               	dw	65535	; assembler added errata NOP
  6804  000086                     
  6805                           ;interrupt.c: 61:             abortAll();
  6806  000086  EC35  F012         	call	_abortAll	;wreg free
  6807  00008A                     i2l3416:
  6808  00008A  FFFF               	dw	65535	; assembler added errata NOP
  6809                           
  6810                           ;interrupt.c: 66:     if(PIR1bits.TMR2IF){
  6811  00008C  A29E               	btfss	158,1,c	;volatile
  6812  00008E  EF4B  F000         	goto	i2u256_41
  6813  000092  EF4E  F000         	goto	i2u256_40
  6814  000096                     i2u256_41:
  6815  000096  FFFF               	dw	65535	; assembler added errata NOP
  6816  000098  EF80  F000         	goto	i2l3438
  6817  00009C                     i2u256_40:
  6818  00009C  FFFF               	dw	65535	; assembler added errata NOP
  6819  00009E                     
  6820                           ;interrupt.c: 67:         PIR1bits.TMR2IF = 0;
  6821  00009E  929E               	bcf	158,1,c	;volatile
  6822  0000A0                     
  6823                           ;interrupt.c: 68:         single_cycle++;
  6824  0000A0  4A48               	infsnz	isr@single_cycle^0,f,c
  6825  0000A2  2A49               	incf	(isr@single_cycle+1)^0,f,c
  6826  0000A4                     
  6827                           ;interrupt.c: 71:         if(single_cycle > retPeriod()){
  6828  0000A4  EC69  F012         	call	_retPeriod	;wreg free
  6829  0000A8  5048               	movf	isr@single_cycle^0,w,c
  6830  0000AA  5C01               	subwf	?_retPeriod^0,w,c
  6831  0000AC  5049               	movf	(isr@single_cycle+1)^0,w,c
  6832  0000AE  5802               	subwfb	(?_retPeriod+1)^0,w,c
  6833  0000B0  B0D8               	btfsc	status,0,c
  6834  0000B2  EF5D  F000         	goto	i2u257_41
  6835  0000B6  EF60  F000         	goto	i2u257_40
  6836  0000BA                     i2u257_41:
  6837  0000BA  FFFF               	dw	65535	; assembler added errata NOP
  6838  0000BC  EF80  F000         	goto	i2l3438
  6839  0000C0                     i2u257_40:
  6840  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  6841  0000C2                     
  6842                           ;interrupt.c: 72:             single_cycle = 0;
  6843  0000C2  0E00               	movlw	0
  6844  0000C4  6E49               	movwf	(isr@single_cycle+1)^0,c
  6845  0000C6  0E00               	movlw	0
  6846  0000C8  6E48               	movwf	isr@single_cycle^0,c
  6847  0000CA                     
  6848                           ;interrupt.c: 73:             completeStep++;
  6849  0000CA  2A59               	incf	isr@completeStep^0,f,c
  6850  0000CC                     
  6851                           ;interrupt.c: 76:             if(completeStep != 0 && !(completeStep % 2)){
  6852  0000CC  5059               	movf	isr@completeStep^0,w,c
  6853  0000CE  B4D8               	btfsc	status,2,c
  6854  0000D0  EF6C  F000         	goto	i2u258_41
  6855  0000D4  EF6F  F000         	goto	i2u258_40
  6856  0000D8                     i2u258_41:
  6857  0000D8  FFFF               	dw	65535	; assembler added errata NOP
  6858  0000DA  EF7D  F000         	goto	i2l3436
  6859  0000DE                     i2u258_40:
  6860  0000DE  FFFF               	dw	65535	; assembler added errata NOP
  6861  0000E0  B059               	btfsc	isr@completeStep^0,0,c
  6862  0000E2  EF75  F000         	goto	i2u259_41
  6863  0000E6  EF78  F000         	goto	i2u259_40
  6864  0000EA                     i2u259_41:
  6865  0000EA  FFFF               	dw	65535	; assembler added errata NOP
  6866  0000EC  EF7D  F000         	goto	i2l3436
  6867  0000F0                     i2u259_40:
  6868  0000F0  FFFF               	dw	65535	; assembler added errata NOP
  6869  0000F2                     
  6870                           ;interrupt.c: 78:                 completeStep = 0;
  6871  0000F2  0E00               	movlw	0
  6872  0000F4  6E59               	movwf	isr@completeStep^0,c
  6873  0000F6                     
  6874                           ;interrupt.c: 81:                 increaseStep();
  6875  0000F6  ECBE  F012         	call	_increaseStep	;wreg free
  6876  0000FA                     i2l3436:
  6877  0000FA  FFFF               	dw	65535	; assembler added errata NOP
  6878                           
  6879                           ;interrupt.c: 86:             toggleStep();
  6880  0000FC  EC9B  F012         	call	_toggleStep	;wreg free
  6881  000100                     i2l3438:
  6882  000100  FFFF               	dw	65535	; assembler added errata NOP
  6883                           
  6884                           ;interrupt.c: 91:     if(PIR1bits.ADIF){
  6885  000102  AC9E               	btfss	158,6,c	;volatile
  6886  000104  EF86  F000         	goto	i2u260_41
  6887  000108  EF89  F000         	goto	i2u260_40
  6888  00010C                     i2u260_41:
  6889  00010C  FFFF               	dw	65535	; assembler added errata NOP
  6890  00010E  EFB6  F000         	goto	i2l3450
  6891  000112                     i2u260_40:
  6892  000112  FFFF               	dw	65535	; assembler added errata NOP
  6893  000114                     
  6894                           ;interrupt.c: 92:         PIR1bits.ADIF = 0;
  6895  000114  9C9E               	bcf	158,6,c	;volatile
  6896                           
  6897                           ;interrupt.c: 95:         ADC_res = ADRESL;
  6898  000116  CFC3 F04A          	movff	4035,_ADC_res	;volatile
  6899  00011A  6A4B               	clrf	(_ADC_res+1)^0,c
  6900  00011C                     
  6901                           ;interrupt.c: 96:         ADC_res |= (ADRESH << 8);
  6902  00011C  50C4               	movf	196,w,c	;volatile
  6903  00011E  6E0C               	movwf	(??_isr+1)^0,c
  6904  000120  6A0B               	clrf	??_isr^0,c
  6905  000122  500B               	movf	??_isr^0,w,c
  6906  000124  124A               	iorwf	_ADC_res^0,f,c
  6907  000126  500C               	movf	(??_isr+1)^0,w,c
  6908  000128  124B               	iorwf	(_ADC_res+1)^0,f,c
  6909                           
  6910                           ;interrupt.c: 99:         if(ADC_res > therm_pressure){
  6911  00012A  044A               	decf	_ADC_res^0,w,c
  6912  00012C  0E04               	movlw	4
  6913  00012E  584B               	subwfb	(_ADC_res+1)^0,w,c
  6914  000130  A0D8               	btfss	status,0,c
  6915  000132  EF9D  F000         	goto	i2u261_41
  6916  000136  EFA0  F000         	goto	i2u261_40
  6917  00013A                     i2u261_41:
  6918  00013A  FFFF               	dw	65535	; assembler added errata NOP
  6919  00013C  EFA7  F000         	goto	i2l3446
  6920  000140                     i2u261_40:
  6921  000140  FFFF               	dw	65535	; assembler added errata NOP
  6922  000142                     
  6923                           ;interrupt.c: 101:             setTouchRel();
  6924  000142  ECA0  F012         	call	_setTouchRel	;wreg free
  6925                           
  6926                           ;interrupt.c: 102:             setThermRel();
  6927  000146  ECA5  F012         	call	_setThermRel	;wreg free
  6928                           
  6929                           ;interrupt.c: 103:         }else if(ADC_res > touch_pressure){
  6930  00014A  EFB6  F000         	goto	i2l3450
  6931  00014E                     i2l3446:
  6932  00014E  FFFF               	dw	65535	; assembler added errata NOP
  6933  000150  044A               	decf	_ADC_res^0,w,c
  6934  000152  0E02               	movlw	2
  6935  000154  584B               	subwfb	(_ADC_res+1)^0,w,c
  6936  000156  A0D8               	btfss	status,0,c
  6937  000158  EFB0  F000         	goto	i2u262_41
  6938  00015C  EFB3  F000         	goto	i2u262_40
  6939  000160                     i2u262_41:
  6940  000160  FFFF               	dw	65535	; assembler added errata NOP
  6941  000162  EFB6  F000         	goto	i2l3450
  6942  000166                     i2u262_40:
  6943  000166  FFFF               	dw	65535	; assembler added errata NOP
  6944  000168                     
  6945                           ;interrupt.c: 105:             setTouchRel();
  6946  000168  ECA0  F012         	call	_setTouchRel	;wreg free
  6947  00016C                     i2l3450:
  6948  00016C  FFFF               	dw	65535	; assembler added errata NOP
  6949                           
  6950                           ;interrupt.c: 110:     if(PIR1bits.RC1IF){
  6951  00016E  AA9E               	btfss	158,5,c	;volatile
  6952  000170  EFBC  F000         	goto	i2u263_41
  6953  000174  EFBF  F000         	goto	i2u263_40
  6954  000178                     i2u263_41:
  6955  000178  FFFF               	dw	65535	; assembler added errata NOP
  6956  00017A  EFC6  F000         	goto	i2l469
  6957  00017E                     i2u263_40:
  6958  00017E  FFFF               	dw	65535	; assembler added errata NOP
  6959  000180                     
  6960                           ;interrupt.c: 111:         PIR1bits.RC1IF = 0;
  6961  000180  9A9E               	bcf	158,5,c	;volatile
  6962                           
  6963                           ;interrupt.c: 114:         unsigned char temp = RCREG1;
  6964  000182  CFAE F011          	movff	4014,isr@temp	;volatile
  6965  000186                     
  6966                           ;interrupt.c: 116:         storeData(temp);
  6967  000186  5011               	movf	isr@temp^0,w,c
  6968  000188  ECD9  F00B         	call	i2_storeData
  6969  00018C                     i2l469:
  6970  00018C  FFFF               	dw	65535	; assembler added errata NOP
  6971  00018E  C010  FFF4         	movff	??_isr+5,prodh
  6972  000192  C00F  FFF3         	movff	??_isr+4,prodl
  6973  000196  C00E  FFDA         	movff	??_isr+3,fsr2h
  6974  00019A  C00D  FFD9         	movff	??_isr+2,fsr2l
  6975  00019E  926D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6976  0001A0  0011               	retfie		f
  6977  0001A2  FFFF               	dw	65535	; errata NOP
  6978  0001A4                     __end_of_isr:
  6979                           	callstack 0
  6980                           
  6981 ;; *************** function i2_storeData *****************
  6982 ;; Defined at:
  6983 ;;		line 164 in file "usart.c"
  6984 ;; Parameters:    Size  Location     Type
  6985 ;;  data            1    wreg     unsigned char 
  6986 ;; Auto vars:     Size  Location     Type
  6987 ;;  data            1    9[COMRAM] unsigned char 
  6988 ;; Return value:  Size  Location     Type
  6989 ;;                  1    wreg      void 
  6990 ;; Registers used:
  6991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6992 ;; Tracked objects:
  6993 ;;		On entry : 0/0
  6994 ;;		On exit  : 0/0
  6995 ;;		Unchanged: 0/0
  6996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6997 ;;      Params:         0       0       0       0       0       0       0
  6998 ;;      Locals:         1       0       0       0       0       0       0
  6999 ;;      Temps:          2       0       0       0       0       0       0
  7000 ;;      Totals:         3       0       0       0       0       0       0
  7001 ;;Total ram usage:        3 bytes
  7002 ;; Hardware stack levels used:    1
  7003 ;; Hardware stack levels required when called:    2
  7004 ;; This function calls:
  7005 ;;		i2_printError
  7006 ;; This function is called by:
  7007 ;;		_isr
  7008 ;; This function uses a non-reentrant model
  7009 ;;
  7010                           
  7011                           	psect	text41
  7012  0017B2                     __ptext41:
  7013                           	callstack 0
  7014  0017B2                     i2_storeData:
  7015                           	callstack 0
  7016  0017B2  FFFF               	dw	65535	; assembler added errata NOP
  7017                           
  7018                           ;incstack = 0
  7019                           ;i2storeData@data stored from wreg
  7020  0017B4  6E0A               	movwf	i2storeData@data^0,c
  7021  0017B6                     
  7022                           ;usart.c: 166:     static unsigned char counter = 0;;usart.c: 167:     static unsigned c
      +                          har mexLength = 5;;usart.c: 168:     static unsigned char command;;usart.c: 169:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 173:     receivedMex[counter] = data;
  7023  0017B6  0EC8               	movlw	low storeData@receivedMex
  7024  0017B8  2455               	addwf	storeData@counter^0,w,c
  7025  0017BA  6ED9               	movwf	fsr2l,c
  7026  0017BC  6ADA               	clrf	fsr2h,c
  7027  0017BE  0E00               	movlw	high storeData@receivedMex
  7028  0017C0  22DA               	addwfc	fsr2h,f,c
  7029  0017C2  C00A  FFDF         	movff	i2storeData@data,indf2
  7030  0017C6                     
  7031                           ;usart.c: 175:     counter++;
  7032  0017C6  2A55               	incf	storeData@counter^0,f,c
  7033                           
  7034                           ;usart.c: 178:     switch(receivedMex[0]){
  7035  0017C8  EFF5  F00B         	goto	i2l3294
  7036  0017CC                     i2l3286:
  7037  0017CC  FFFF               	dw	65535	; assembler added errata NOP
  7038                           
  7039                           ; BSR set to: 0
  7040                           ;usart.c: 180:             mexLength = 5;
  7041  0017CE  0E05               	movlw	5
  7042  0017D0  6E6C               	movwf	storeData@mexLength^0,c
  7043                           
  7044                           ;usart.c: 181:             break;
  7045  0017D2  EF11  F00C         	goto	i2l3296
  7046  0017D6                     i2l3288:
  7047  0017D6  FFFF               	dw	65535	; assembler added errata NOP
  7048                           
  7049                           ; BSR set to: 0
  7050                           ;usart.c: 183:             mexLength = 9;
  7051  0017D8  0E09               	movlw	9
  7052  0017DA  6E6C               	movwf	storeData@mexLength^0,c
  7053                           
  7054                           ;usart.c: 184:             break;
  7055  0017DC  EF11  F00C         	goto	i2l3296
  7056  0017E0                     i2l3290:
  7057  0017E0  FFFF               	dw	65535	; assembler added errata NOP
  7058                           
  7059                           ; BSR set to: 0
  7060                           ;usart.c: 186:             mexLength = 1;
  7061  0017E2  0E01               	movlw	1
  7062  0017E4  6E6C               	movwf	storeData@mexLength^0,c
  7063                           
  7064                           ;usart.c: 187:             break;
  7065  0017E6  EF11  F00C         	goto	i2l3296
  7066  0017EA                     i2l3294:
  7067  0017EA  FFFF               	dw	65535	; assembler added errata NOP
  7068  0017EC  0100               	movlb	0	; () banked
  7069  0017EE  51C8               	movf	storeData@receivedMex& (0+255),w,b
  7070  0017F0  6E08               	movwf	??i2_storeData^0,c
  7071  0017F2  6A09               	clrf	(??i2_storeData+1)^0,c
  7072                           
  7073                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7074                           ; Switch size 1, requested type "simple"
  7075                           ; Number of cases is 1, Range of values is 0 to 0
  7076                           ; switch strategies available:
  7077                           ; Name         Instructions Cycles
  7078                           ; simple_byte            4     3 (average)
  7079                           ;	Chosen strategy is simple_byte
  7080  0017F4  5009               	movf	(??i2_storeData+1)^0,w,c
  7081  0017F6  0A00               	xorlw	0	; case 0
  7082  0017F8  B4D8               	btfsc	status,2,c
  7083  0017FA  EF01  F00C         	goto	i2l4702
  7084  0017FE  EF11  F00C         	goto	i2l3296
  7085  001802                     i2l4702:
  7086  001802  FFFF               	dw	65535	; assembler added errata NOP
  7087                           
  7088                           ; BSR set to: 0
  7089                           ; Switch size 1, requested type "simple"
  7090                           ; Number of cases is 3, Range of values is 0 to 2
  7091                           ; switch strategies available:
  7092                           ; Name         Instructions Cycles
  7093                           ; simple_byte           10     6 (average)
  7094                           ;	Chosen strategy is simple_byte
  7095  001804  5008               	movf	??i2_storeData^0,w,c
  7096  001806  0A00               	xorlw	0	; case 0
  7097  001808  B4D8               	btfsc	status,2,c
  7098  00180A  EFE6  F00B         	goto	i2l3286
  7099  00180E  0A01               	xorlw	1	; case 1
  7100  001810  B4D8               	btfsc	status,2,c
  7101  001812  EFEB  F00B         	goto	i2l3288
  7102  001816  0A03               	xorlw	3	; case 2
  7103  001818  B4D8               	btfsc	status,2,c
  7104  00181A  EFF0  F00B         	goto	i2l3290
  7105  00181E  EF11  F00C         	goto	i2l3296
  7106  001822                     i2l3296:
  7107  001822  FFFF               	dw	65535	; assembler added errata NOP
  7108                           
  7109                           ; BSR set to: 0
  7110                           ;usart.c: 194:     if(counter >= mexLength){
  7111  001824  506C               	movf	storeData@mexLength^0,w,c
  7112  001826  5C55               	subwf	storeData@counter^0,w,c
  7113  001828  A0D8               	btfss	status,0,c
  7114  00182A  EF19  F00C         	goto	i2u245_41
  7115  00182E  EF1C  F00C         	goto	i2u245_40
  7116  001832                     i2u245_41:
  7117  001832  FFFF               	dw	65535	; assembler added errata NOP
  7118  001834  EF94  F00C         	goto	i2l583
  7119  001838                     i2u245_40:
  7120  001838  FFFF               	dw	65535	; assembler added errata NOP
  7121  00183A                     
  7122                           ; BSR set to: 0
  7123                           ;usart.c: 195:         counter = 0;
  7124  00183A  0E00               	movlw	0
  7125  00183C  6E55               	movwf	storeData@counter^0,c
  7126                           
  7127                           ;usart.c: 198:         switch(receivedMex[0]){
  7128  00183E  EF79  F00C         	goto	i2l3318
  7129  001842                     i2l3300:
  7130  001842  FFFF               	dw	65535	; assembler added errata NOP
  7131                           
  7132                           ; BSR set to: 0
  7133                           ;usart.c: 200:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  7134  001844  5058               	movf	_dataCounter^0,w,c
  7135  001846  0D04               	mullw	4
  7136  001848  0ED1               	movlw	low _dataSequence
  7137  00184A  24F3               	addwf	243,w,c
  7138  00184C  6ED9               	movwf	fsr2l,c
  7139  00184E  0E00               	movlw	high _dataSequence
  7140  001850  20F4               	addwfc	prodh,w,c
  7141  001852  6EDA               	movwf	fsr2h,c
  7142  001854  C0C9  FFDF         	movff	storeData@receivedMex+1,indf2
  7143                           
  7144                           ;usart.c: 201:                 dataSequence[dataCounter].posX = receivedMex[2] * 10;
  7145  001858  5058               	movf	_dataCounter^0,w,c
  7146  00185A  0D04               	mullw	4
  7147  00185C  0ED2               	movlw	low (_dataSequence+1)
  7148  00185E  24F3               	addwf	243,w,c
  7149  001860  6ED9               	movwf	fsr2l,c
  7150  001862  0E00               	movlw	high (_dataSequence+1)
  7151  001864  20F4               	addwfc	prodh,w,c
  7152  001866  6EDA               	movwf	fsr2h,c
  7153  001868  51CA               	movf	(storeData@receivedMex+2)& (0+255),w,b
  7154  00186A  0D0A               	mullw	10
  7155  00186C  CFF3 FFDF          	movff	prodl,indf2
  7156                           
  7157                           ;usart.c: 202:                 dataSequence[dataCounter].posY = receivedMex[3] * 10;
  7158  001870  5058               	movf	_dataCounter^0,w,c
  7159  001872  0D04               	mullw	4
  7160  001874  0ED3               	movlw	low (_dataSequence+2)
  7161  001876  24F3               	addwf	243,w,c
  7162  001878  6ED9               	movwf	fsr2l,c
  7163  00187A  0E00               	movlw	high (_dataSequence+2)
  7164  00187C  20F4               	addwfc	prodh,w,c
  7165  00187E  6EDA               	movwf	fsr2h,c
  7166  001880  51CB               	movf	(storeData@receivedMex+3)& (0+255),w,b
  7167  001882  0D0A               	mullw	10
  7168  001884  CFF3 FFDF          	movff	prodl,indf2
  7169                           
  7170                           ;usart.c: 203:                 dataSequence[dataCounter].rotation = receivedMex[4];
  7171  001888  5058               	movf	_dataCounter^0,w,c
  7172  00188A  0D04               	mullw	4
  7173  00188C  0ED4               	movlw	low (_dataSequence+3)
  7174  00188E  24F3               	addwf	243,w,c
  7175  001890  6ED9               	movwf	fsr2l,c
  7176  001892  0E00               	movlw	high (_dataSequence+3)
  7177  001894  20F4               	addwfc	prodh,w,c
  7178  001896  6EDA               	movwf	fsr2h,c
  7179  001898  C0CC  FFDF         	movff	storeData@receivedMex+4,indf2
  7180  00189C                     
  7181                           ; BSR set to: 0
  7182                           ;usart.c: 205:                 dataCounter++;
  7183  00189C  2A58               	incf	_dataCounter^0,f,c
  7184                           
  7185                           ;usart.c: 206:                 break;
  7186  00189E  EF94  F00C         	goto	i2l583
  7187  0018A2                     i2l580:
  7188  0018A2  FFFF               	dw	65535	; assembler added errata NOP
  7189                           
  7190                           ; BSR set to: 0
  7191                           ;usart.c: 209:                 newSequenceData.L = receivedMex[1];
  7192  0018A4  C0C9  F0E5         	movff	storeData@receivedMex+1,_newSequenceData
  7193                           
  7194                           ;usart.c: 210:                 newSequenceData.W = receivedMex[2];
  7195  0018A8  C0CA  F0E6         	movff	storeData@receivedMex+2,_newSequenceData+1
  7196  0018AC                     
  7197                           ; BSR set to: 0
  7198                           ;usart.c: 211:                 newSequenceData.init_posX = receivedMex[3] * 10;
  7199  0018AC  51CB               	movf	(storeData@receivedMex+3)& (0+255),w,b
  7200  0018AE  0D0A               	mullw	10
  7201  0018B0  CFF3 F0E7          	movff	prodl,_newSequenceData+2
  7202                           
  7203                           ;usart.c: 212:                 newSequenceData.init_posY = receivedMex[4] * 10;
  7204  0018B4  51CC               	movf	(storeData@receivedMex+4)& (0+255),w,b
  7205  0018B6  0D0A               	mullw	10
  7206  0018B8  CFF3 F0E8          	movff	prodl,_newSequenceData+3
  7207  0018BC                     
  7208                           ; BSR set to: 0
  7209                           ;usart.c: 213:                 newSequenceData.init_rot = receivedMex[5];
  7210  0018BC  C0CD  F0E9         	movff	storeData@receivedMex+5,_newSequenceData+4
  7211                           
  7212                           ;usart.c: 214:                 newSequenceData.end_posX = receivedMex[6] * 10;
  7213  0018C0  51CE               	movf	(storeData@receivedMex+6)& (0+255),w,b
  7214  0018C2  0D0A               	mullw	10
  7215  0018C4  CFF3 F0EA          	movff	prodl,_newSequenceData+5
  7216                           
  7217                           ;usart.c: 215:                 newSequenceData.end_posY = receivedMex[7] * 10;
  7218  0018C8  51CF               	movf	(storeData@receivedMex+7)& (0+255),w,b
  7219  0018CA  0D0A               	mullw	10
  7220  0018CC  CFF3 F0EB          	movff	prodl,_newSequenceData+6
  7221  0018D0                     
  7222                           ; BSR set to: 0
  7223                           ;usart.c: 216:                 newSequenceData.end_rot = receivedMex[8];
  7224  0018D0  C0D0  F0EC         	movff	storeData@receivedMex+8,_newSequenceData+7
  7225  0018D4                     
  7226                           ; BSR set to: 0
  7227                           ;usart.c: 218:                 _newSequence = 1;
  7228  0018D4  0E01               	movlw	1
  7229  0018D6  6E56               	movwf	__newSequence^0,c
  7230                           
  7231                           ;usart.c: 219:                 break;
  7232  0018D8  EF94  F00C         	goto	i2l583
  7233  0018DC                     i2l3312:
  7234  0018DC  FFFF               	dw	65535	; assembler added errata NOP
  7235                           
  7236                           ; BSR set to: 0
  7237                           ;usart.c: 222:                 _fatalError = 1;
  7238  0018DE  0E01               	movlw	1
  7239  0018E0  6E57               	movwf	__fatalError^0,c
  7240                           
  7241                           ;usart.c: 223:                 break;
  7242  0018E2  EF94  F00C         	goto	i2l583
  7243  0018E6                     i2l3314:
  7244  0018E6  FFFF               	dw	65535	; assembler added errata NOP
  7245                           
  7246                           ; BSR set to: 0
  7247                           ;usart.c: 226:                 printError(8);
  7248  0018E8  0E08               	movlw	8
  7249  0018EA  ECDC  F00E         	call	i2_printError
  7250                           
  7251                           ;usart.c: 227:                 break;
  7252  0018EE  EF94  F00C         	goto	i2l583
  7253  0018F2                     i2l3318:
  7254  0018F2  FFFF               	dw	65535	; assembler added errata NOP
  7255                           
  7256                           ; BSR set to: 0
  7257  0018F4  51C8               	movf	storeData@receivedMex& (0+255),w,b
  7258  0018F6  6E08               	movwf	??i2_storeData^0,c
  7259  0018F8  6A09               	clrf	(??i2_storeData+1)^0,c
  7260                           
  7261                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7262                           ; Switch size 1, requested type "simple"
  7263                           ; Number of cases is 1, Range of values is 0 to 0
  7264                           ; switch strategies available:
  7265                           ; Name         Instructions Cycles
  7266                           ; simple_byte            4     3 (average)
  7267                           ;	Chosen strategy is simple_byte
  7268  0018FA  5009               	movf	(??i2_storeData+1)^0,w,c
  7269  0018FC  0A00               	xorlw	0	; case 0
  7270  0018FE  B4D8               	btfsc	status,2,c
  7271  001900  EF84  F00C         	goto	i2l4704
  7272  001904  EF73  F00C         	goto	i2l3314
  7273  001908                     i2l4704:
  7274  001908  FFFF               	dw	65535	; assembler added errata NOP
  7275                           
  7276                           ; BSR set to: 0
  7277                           ; Switch size 1, requested type "simple"
  7278                           ; Number of cases is 3, Range of values is 0 to 2
  7279                           ; switch strategies available:
  7280                           ; Name         Instructions Cycles
  7281                           ; simple_byte           10     6 (average)
  7282                           ;	Chosen strategy is simple_byte
  7283  00190A  5008               	movf	??i2_storeData^0,w,c
  7284  00190C  0A00               	xorlw	0	; case 0
  7285  00190E  B4D8               	btfsc	status,2,c
  7286  001910  EF21  F00C         	goto	i2l3300
  7287  001914  0A01               	xorlw	1	; case 1
  7288  001916  B4D8               	btfsc	status,2,c
  7289  001918  EF51  F00C         	goto	i2l580
  7290  00191C  0A03               	xorlw	3	; case 2
  7291  00191E  B4D8               	btfsc	status,2,c
  7292  001920  EF6E  F00C         	goto	i2l3312
  7293  001924  EF73  F00C         	goto	i2l3314
  7294  001928                     i2l583:
  7295  001928  FFFF               	dw	65535	; assembler added errata NOP
  7296  00192A  0012               	return		;funcret
  7297  00192C  FFFF               	dw	65535	; errata NOP
  7298  00192E                     __end_ofi2_storeData:
  7299                           	callstack 0
  7300                           
  7301 ;; *************** function _writeTM0 *****************
  7302 ;; Defined at:
  7303 ;;		line 28 in file "motors.c"
  7304 ;; Parameters:    Size  Location     Type
  7305 ;;		None
  7306 ;; Auto vars:     Size  Location     Type
  7307 ;;		None
  7308 ;; Return value:  Size  Location     Type
  7309 ;;                  1    wreg      void 
  7310 ;; Registers used:
  7311 ;;		wreg, status,2
  7312 ;; Tracked objects:
  7313 ;;		On entry : 0/0
  7314 ;;		On exit  : 0/0
  7315 ;;		Unchanged: 0/0
  7316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7317 ;;      Params:         0       0       0       0       0       0       0
  7318 ;;      Locals:         0       0       0       0       0       0       0
  7319 ;;      Temps:          0       0       0       0       0       0       0
  7320 ;;      Totals:         0       0       0       0       0       0       0
  7321 ;;Total ram usage:        0 bytes
  7322 ;; Hardware stack levels used:    1
  7323 ;; This function calls:
  7324 ;;		Nothing
  7325 ;; This function is called by:
  7326 ;;		_isr
  7327 ;; This function uses a non-reentrant model
  7328 ;;
  7329                           
  7330                           	psect	text42
  7331  0024C4                     __ptext42:
  7332                           	callstack 0
  7333  0024C4                     _writeTM0:
  7334                           	callstack 0
  7335  0024C4  FFFF               	dw	65535	; assembler added errata NOP
  7336  0024C6                     
  7337                           ;motors.c: 29:     tm0Error = 1;
  7338  0024C6  0E00               	movlw	0
  7339  0024C8  6E51               	movwf	(_tm0Error+1)^0,c
  7340  0024CA  0E01               	movlw	1
  7341  0024CC  6E50               	movwf	_tm0Error^0,c
  7342  0024CE  0012               	return		;funcret
  7343  0024D0  FFFF               	dw	65535	; errata NOP
  7344  0024D2                     __end_of_writeTM0:
  7345                           	callstack 0
  7346                           
  7347 ;; *************** function _whatsTM0Limit *****************
  7348 ;; Defined at:
  7349 ;;		line 42 in file "motors.c"
  7350 ;; Parameters:    Size  Location     Type
  7351 ;;		None
  7352 ;; Auto vars:     Size  Location     Type
  7353 ;;		None
  7354 ;; Return value:  Size  Location     Type
  7355 ;;                  1    wreg      unsigned char 
  7356 ;; Registers used:
  7357 ;;		wreg, status,2
  7358 ;; Tracked objects:
  7359 ;;		On entry : 0/0
  7360 ;;		On exit  : 0/0
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7363 ;;      Params:         0       0       0       0       0       0       0
  7364 ;;      Locals:         0       0       0       0       0       0       0
  7365 ;;      Temps:          0       0       0       0       0       0       0
  7366 ;;      Totals:         0       0       0       0       0       0       0
  7367 ;;Total ram usage:        0 bytes
  7368 ;; Hardware stack levels used:    1
  7369 ;; This function calls:
  7370 ;;		Nothing
  7371 ;; This function is called by:
  7372 ;;		_isr
  7373 ;; This function uses a non-reentrant model
  7374 ;;
  7375                           
  7376                           	psect	text43
  7377  002574                     __ptext43:
  7378                           	callstack 0
  7379  002574                     _whatsTM0Limit:
  7380                           	callstack 0
  7381  002574  FFFF               	dw	65535	; assembler added errata NOP
  7382  002576                     
  7383                           ;motors.c: 43:     return(tm0Limit);
  7384  002576  505D               	movf	_tm0Limit^0,w,c
  7385  002578  0012               	return		;funcret
  7386  00257A  FFFF               	dw	65535	; errata NOP
  7387  00257C                     __end_of_whatsTM0Limit:
  7388                           	callstack 0
  7389                           
  7390 ;; *************** function _toggleStep *****************
  7391 ;; Defined at:
  7392 ;;		line 92 in file "timer.c"
  7393 ;; Parameters:    Size  Location     Type
  7394 ;;		None
  7395 ;; Auto vars:     Size  Location     Type
  7396 ;;		None
  7397 ;; Return value:  Size  Location     Type
  7398 ;;                  1    wreg      void 
  7399 ;; Registers used:
  7400 ;;		wreg, status,2
  7401 ;; Tracked objects:
  7402 ;;		On entry : 0/0
  7403 ;;		On exit  : 0/0
  7404 ;;		Unchanged: 0/0
  7405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7406 ;;      Params:         0       0       0       0       0       0       0
  7407 ;;      Locals:         0       0       0       0       0       0       0
  7408 ;;      Temps:          0       0       0       0       0       0       0
  7409 ;;      Totals:         0       0       0       0       0       0       0
  7410 ;;Total ram usage:        0 bytes
  7411 ;; Hardware stack levels used:    1
  7412 ;; This function calls:
  7413 ;;		Nothing
  7414 ;; This function is called by:
  7415 ;;		_isr
  7416 ;; This function uses a non-reentrant model
  7417 ;;
  7418                           
  7419                           	psect	text44
  7420  002536                     __ptext44:
  7421                           	callstack 0
  7422  002536                     _toggleStep:
  7423                           	callstack 0
  7424  002536  FFFF               	dw	65535	; assembler added errata NOP
  7425  002538                     
  7426                           ;timer.c: 93:     stepToggle = 1;
  7427  002538  0E01               	movlw	1
  7428  00253A  6E52               	movwf	_stepToggle^0,c	;volatile
  7429  00253C  0012               	return		;funcret
  7430  00253E  FFFF               	dw	65535	; errata NOP
  7431  002540                     __end_of_toggleStep:
  7432                           	callstack 0
  7433                           
  7434 ;; *************** function _setTouchRel *****************
  7435 ;; Defined at:
  7436 ;;		line 86 in file "adc.c"
  7437 ;; Parameters:    Size  Location     Type
  7438 ;;		None
  7439 ;; Auto vars:     Size  Location     Type
  7440 ;;		None
  7441 ;; Return value:  Size  Location     Type
  7442 ;;                  1    wreg      void 
  7443 ;; Registers used:
  7444 ;;		wreg, status,2
  7445 ;; Tracked objects:
  7446 ;;		On entry : 0/0
  7447 ;;		On exit  : 0/0
  7448 ;;		Unchanged: 0/0
  7449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7450 ;;      Params:         0       0       0       0       0       0       0
  7451 ;;      Locals:         0       0       0       0       0       0       0
  7452 ;;      Temps:          0       0       0       0       0       0       0
  7453 ;;      Totals:         0       0       0       0       0       0       0
  7454 ;;Total ram usage:        0 bytes
  7455 ;; Hardware stack levels used:    1
  7456 ;; This function calls:
  7457 ;;		Nothing
  7458 ;; This function is called by:
  7459 ;;		_isr
  7460 ;; This function uses a non-reentrant model
  7461 ;;
  7462                           
  7463                           	psect	text45
  7464  002540                     __ptext45:
  7465                           	callstack 0
  7466  002540                     _setTouchRel:
  7467                           	callstack 0
  7468  002540  FFFF               	dw	65535	; assembler added errata NOP
  7469  002542                     
  7470                           ;adc.c: 87:     touch_rel = 1;
  7471  002542  0E01               	movlw	1
  7472  002544  6E5C               	movwf	_touch_rel^0,c	;volatile
  7473  002546  0012               	return		;funcret
  7474  002548  FFFF               	dw	65535	; errata NOP
  7475  00254A                     __end_of_setTouchRel:
  7476                           	callstack 0
  7477                           
  7478 ;; *************** function _setThermRel *****************
  7479 ;; Defined at:
  7480 ;;		line 79 in file "adc.c"
  7481 ;; Parameters:    Size  Location     Type
  7482 ;;		None
  7483 ;; Auto vars:     Size  Location     Type
  7484 ;;		None
  7485 ;; Return value:  Size  Location     Type
  7486 ;;                  1    wreg      void 
  7487 ;; Registers used:
  7488 ;;		wreg, status,2
  7489 ;; Tracked objects:
  7490 ;;		On entry : 0/0
  7491 ;;		On exit  : 0/0
  7492 ;;		Unchanged: 0/0
  7493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7494 ;;      Params:         0       0       0       0       0       0       0
  7495 ;;      Locals:         0       0       0       0       0       0       0
  7496 ;;      Temps:          0       0       0       0       0       0       0
  7497 ;;      Totals:         0       0       0       0       0       0       0
  7498 ;;Total ram usage:        0 bytes
  7499 ;; Hardware stack levels used:    1
  7500 ;; This function calls:
  7501 ;;		Nothing
  7502 ;; This function is called by:
  7503 ;;		_isr
  7504 ;; This function uses a non-reentrant model
  7505 ;;
  7506                           
  7507                           	psect	text46
  7508  00254A                     __ptext46:
  7509                           	callstack 0
  7510  00254A                     _setThermRel:
  7511                           	callstack 0
  7512  00254A  FFFF               	dw	65535	; assembler added errata NOP
  7513  00254C                     
  7514                           ;adc.c: 80:     therm_rel = 1;
  7515  00254C  0E01               	movlw	1
  7516  00254E  6E5B               	movwf	_therm_rel^0,c	;volatile
  7517  002550  0012               	return		;funcret
  7518  002552  FFFF               	dw	65535	; errata NOP
  7519  002554                     __end_of_setThermRel:
  7520                           	callstack 0
  7521                           
  7522 ;; *************** function _retPeriod *****************
  7523 ;; Defined at:
  7524 ;;		line 100 in file "timer.c"
  7525 ;; Parameters:    Size  Location     Type
  7526 ;;		None
  7527 ;; Auto vars:     Size  Location     Type
  7528 ;;		None
  7529 ;; Return value:  Size  Location     Type
  7530 ;;                  2    0[COMRAM] unsigned int 
  7531 ;; Registers used:
  7532 ;;		None
  7533 ;; Tracked objects:
  7534 ;;		On entry : 0/0
  7535 ;;		On exit  : 0/0
  7536 ;;		Unchanged: 0/0
  7537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7538 ;;      Params:         2       0       0       0       0       0       0
  7539 ;;      Locals:         0       0       0       0       0       0       0
  7540 ;;      Temps:          0       0       0       0       0       0       0
  7541 ;;      Totals:         2       0       0       0       0       0       0
  7542 ;;Total ram usage:        2 bytes
  7543 ;; Hardware stack levels used:    1
  7544 ;; This function calls:
  7545 ;;		Nothing
  7546 ;; This function is called by:
  7547 ;;		_isr
  7548 ;; This function uses a non-reentrant model
  7549 ;;
  7550                           
  7551                           	psect	text47
  7552  0024D2                     __ptext47:
  7553                           	callstack 0
  7554  0024D2                     _retPeriod:
  7555                           	callstack 0
  7556  0024D2  FFFF               	dw	65535	; assembler added errata NOP
  7557  0024D4                     
  7558                           ;timer.c: 101:     return pwmPeriod;
  7559  0024D4  C046  F001         	movff	_pwmPeriod,?_retPeriod
  7560  0024D8  C047  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  7561  0024DC  0012               	return		;funcret
  7562  0024DE  FFFF               	dw	65535	; errata NOP
  7563  0024E0                     __end_of_retPeriod:
  7564                           	callstack 0
  7565                           
  7566 ;; *************** function _increaseStep *****************
  7567 ;; Defined at:
  7568 ;;		line 84 in file "timer.c"
  7569 ;; Parameters:    Size  Location     Type
  7570 ;;		None
  7571 ;; Auto vars:     Size  Location     Type
  7572 ;;		None
  7573 ;; Return value:  Size  Location     Type
  7574 ;;                  1    wreg      void 
  7575 ;; Registers used:
  7576 ;;		status,2, status,0
  7577 ;; Tracked objects:
  7578 ;;		On entry : 0/0
  7579 ;;		On exit  : 0/0
  7580 ;;		Unchanged: 0/0
  7581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7582 ;;      Params:         0       0       0       0       0       0       0
  7583 ;;      Locals:         0       0       0       0       0       0       0
  7584 ;;      Temps:          0       0       0       0       0       0       0
  7585 ;;      Totals:         0       0       0       0       0       0       0
  7586 ;;Total ram usage:        0 bytes
  7587 ;; Hardware stack levels used:    1
  7588 ;; This function calls:
  7589 ;;		Nothing
  7590 ;; This function is called by:
  7591 ;;		_isr
  7592 ;; This function uses a non-reentrant model
  7593 ;;
  7594                           
  7595                           	psect	text48
  7596  00257C                     __ptext48:
  7597                           	callstack 0
  7598  00257C                     _increaseStep:
  7599                           	callstack 0
  7600  00257C  FFFF               	dw	65535	; assembler added errata NOP
  7601  00257E                     
  7602                           ;timer.c: 85:     pwmStep++;
  7603  00257E  2A53               	incf	_pwmStep^0,f,c	;volatile
  7604  002580  0012               	return		;funcret
  7605  002582  FFFF               	dw	65535	; errata NOP
  7606  002584                     __end_of_increaseStep:
  7607                           	callstack 0
  7608                           
  7609 ;; *************** function _fatalError *****************
  7610 ;; Defined at:
  7611 ;;		line 61 in file "usart.c"
  7612 ;; Parameters:    Size  Location     Type
  7613 ;;		None
  7614 ;; Auto vars:     Size  Location     Type
  7615 ;;		None
  7616 ;; Return value:  Size  Location     Type
  7617 ;;                  1    wreg      unsigned char 
  7618 ;; Registers used:
  7619 ;;		wreg, status,2
  7620 ;; Tracked objects:
  7621 ;;		On entry : 0/0
  7622 ;;		On exit  : 0/0
  7623 ;;		Unchanged: 0/0
  7624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7625 ;;      Params:         0       0       0       0       0       0       0
  7626 ;;      Locals:         0       0       0       0       0       0       0
  7627 ;;      Temps:          0       0       0       0       0       0       0
  7628 ;;      Totals:         0       0       0       0       0       0       0
  7629 ;;Total ram usage:        0 bytes
  7630 ;; Hardware stack levels used:    1
  7631 ;; This function calls:
  7632 ;;		Nothing
  7633 ;; This function is called by:
  7634 ;;		_isr
  7635 ;; This function uses a non-reentrant model
  7636 ;;
  7637                           
  7638                           	psect	text49
  7639  002584                     __ptext49:
  7640                           	callstack 0
  7641  002584                     _fatalError:
  7642                           	callstack 0
  7643  002584  FFFF               	dw	65535	; assembler added errata NOP
  7644  002586                     
  7645                           ;usart.c: 62:     return _fatalError;
  7646  002586  5057               	movf	__fatalError^0,w,c
  7647  002588  0012               	return		;funcret
  7648  00258A  FFFF               	dw	65535	; errata NOP
  7649  00258C                     __end_of_fatalError:
  7650                           	callstack 0
  7651                           
  7652 ;; *************** function _abortAll *****************
  7653 ;; Defined at:
  7654 ;;		line 802 in file "motors.c"
  7655 ;; Parameters:    Size  Location     Type
  7656 ;;		None
  7657 ;; Auto vars:     Size  Location     Type
  7658 ;;		None
  7659 ;; Return value:  Size  Location     Type
  7660 ;;                  1    wreg      void 
  7661 ;; Registers used:
  7662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7663 ;; Tracked objects:
  7664 ;;		On entry : 0/0
  7665 ;;		On exit  : 0/0
  7666 ;;		Unchanged: 0/0
  7667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7668 ;;      Params:         0       0       0       0       0       0       0
  7669 ;;      Locals:         0       0       0       0       0       0       0
  7670 ;;      Temps:          0       0       0       0       0       0       0
  7671 ;;      Totals:         0       0       0       0       0       0       0
  7672 ;;Total ram usage:        0 bytes
  7673 ;; Hardware stack levels used:    1
  7674 ;; Hardware stack levels required when called:    2
  7675 ;; This function calls:
  7676 ;;		i2_printError
  7677 ;; This function is called by:
  7678 ;;		_isr
  7679 ;; This function uses a non-reentrant model
  7680 ;;
  7681                           
  7682                           	psect	text50
  7683  00246A                     __ptext50:
  7684                           	callstack 0
  7685  00246A                     _abortAll:
  7686                           	callstack 0
  7687  00246A  FFFF               	dw	65535	; assembler added errata NOP
  7688  00246C                     
  7689                           ;motors.c: 810:     printError(7);
  7690  00246C  0E07               	movlw	7
  7691  00246E  ECDC  F00E         	call	i2_printError
  7692  002472                     i2l253:
  7693  002472  FFFF               	dw	65535	; assembler added errata NOP
  7694  002474  EF39  F012         	goto	i2l253
  7695  002478  0012               	return		;funcret
  7696  00247A  FFFF               	dw	65535	; errata NOP
  7697  00247C                     __end_of_abortAll:
  7698                           	callstack 0
  7699                           
  7700 ;; *************** function i2_printError *****************
  7701 ;; Defined at:
  7702 ;;		line 111 in file "usart.c"
  7703 ;; Parameters:    Size  Location     Type
  7704 ;;  errCode         1    wreg     unsigned char 
  7705 ;; Auto vars:     Size  Location     Type
  7706 ;;  errCode         1    6[COMRAM] unsigned char 
  7707 ;; Return value:  Size  Location     Type
  7708 ;;                  1    wreg      void 
  7709 ;; Registers used:
  7710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7711 ;; Tracked objects:
  7712 ;;		On entry : 0/0
  7713 ;;		On exit  : 0/0
  7714 ;;		Unchanged: 0/0
  7715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7716 ;;      Params:         0       0       0       0       0       0       0
  7717 ;;      Locals:         1       0       0       0       0       0       0
  7718 ;;      Temps:          2       0       0       0       0       0       0
  7719 ;;      Totals:         3       0       0       0       0       0       0
  7720 ;;Total ram usage:        3 bytes
  7721 ;; Hardware stack levels used:    1
  7722 ;; Hardware stack levels required when called:    1
  7723 ;; This function calls:
  7724 ;;		i2_uartTx
  7725 ;; This function is called by:
  7726 ;;		_abortAll
  7727 ;;		i2_storeData
  7728 ;; This function uses a non-reentrant model
  7729 ;;
  7730                           
  7731                           	psect	text51
  7732  001DB8                     __ptext51:
  7733                           	callstack 0
  7734  001DB8                     i2_printError:
  7735                           	callstack 0
  7736  001DB8  FFFF               	dw	65535	; assembler added errata NOP
  7737                           
  7738                           ;incstack = 0
  7739                           ;i2printError@errCode stored from wreg
  7740  001DBA  6E07               	movwf	i2printError@errCode^0,c
  7741  001DBC                     
  7742                           ;usart.c: 113:     switch(errCode){
  7743  001DBC  EF38  F00F         	goto	i2l2998
  7744  001DC0                     i2l2980:
  7745  001DC0  FFFF               	dw	65535	; assembler added errata NOP
  7746                           
  7747                           ;usart.c: 115:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  7748  001DC2  0E92               	movlw	low _errString_Feed
  7749  001DC4  6E01               	movwf	i2uartTx@ptr^0,c
  7750  001DC6  0E00               	movlw	high _errString_Feed
  7751  001DC8  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7752  001DCA  0E1E               	movlw	30
  7753  001DCC  6E03               	movwf	i2uartTx@length^0,c
  7754  001DCE  EC4E  F011         	call	i2_uartTx	;wreg free
  7755                           
  7756                           ;usart.c: 116:             break;
  7757  001DD2  EF67  F00F         	goto	i2l550
  7758  001DD6                     i2l2982:
  7759  001DD6  FFFF               	dw	65535	; assembler added errata NOP
  7760                           
  7761                           ;usart.c: 118:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  7762  001DD8  0E5E               	movlw	low _errString_ZEND
  7763  001DDA  6E01               	movwf	i2uartTx@ptr^0,c
  7764  001DDC  0E01               	movlw	high _errString_ZEND
  7765  001DDE  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7766  001DE0  0E29               	movlw	41
  7767  001DE2  6E03               	movwf	i2uartTx@length^0,c
  7768  001DE4  EC4E  F011         	call	i2_uartTx	;wreg free
  7769                           
  7770                           ;usart.c: 119:             break;
  7771  001DE8  EF67  F00F         	goto	i2l550
  7772  001DEC                     i2l2984:
  7773  001DEC  FFFF               	dw	65535	; assembler added errata NOP
  7774                           
  7775                           ;usart.c: 121:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  7776  001DEE  0E87               	movlw	low _errString_Reset
  7777  001DF0  6E01               	movwf	i2uartTx@ptr^0,c
  7778  001DF2  0E01               	movlw	high _errString_Reset
  7779  001DF4  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7780  001DF6  0E28               	movlw	40
  7781  001DF8  6E03               	movwf	i2uartTx@length^0,c
  7782  001DFA  EC4E  F011         	call	i2_uartTx	;wreg free
  7783                           
  7784                           ;usart.c: 122:             break;
  7785  001DFE  EF67  F00F         	goto	i2l550
  7786  001E02                     i2l2986:
  7787  001E02  FFFF               	dw	65535	; assembler added errata NOP
  7788                           
  7789                           ;usart.c: 124:             uartTx(&errString_Point[0], sizeof(errString_Point));
  7790  001E04  0E35               	movlw	low _errString_Point
  7791  001E06  6E01               	movwf	i2uartTx@ptr^0,c
  7792  001E08  0E01               	movlw	high _errString_Point
  7793  001E0A  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7794  001E0C  0E29               	movlw	41
  7795  001E0E  6E03               	movwf	i2uartTx@length^0,c
  7796  001E10  EC4E  F011         	call	i2_uartTx	;wreg free
  7797                           
  7798                           ;usart.c: 125:             break;
  7799  001E14  EF67  F00F         	goto	i2l550
  7800  001E18                     i2l2988:
  7801  001E18  FFFF               	dw	65535	; assembler added errata NOP
  7802                           
  7803                           ;usart.c: 127:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  7804  001E1A  0ED6               	movlw	low _errString_Bound
  7805  001E1C  6E01               	movwf	i2uartTx@ptr^0,c
  7806  001E1E  0E01               	movlw	high _errString_Bound
  7807  001E20  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7808  001E22  0E21               	movlw	33
  7809  001E24  6E03               	movwf	i2uartTx@length^0,c
  7810  001E26  EC4E  F011         	call	i2_uartTx	;wreg free
  7811                           
  7812                           ;usart.c: 128:             break;
  7813  001E2A  EF67  F00F         	goto	i2l550
  7814  001E2E                     i2l2990:
  7815  001E2E  FFFF               	dw	65535	; assembler added errata NOP
  7816                           
  7817                           ;usart.c: 130:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  7818  001E30  0E00               	movlw	low _errString_PointZ
  7819  001E32  6E01               	movwf	i2uartTx@ptr^0,c
  7820  001E34  0E01               	movlw	high _errString_PointZ
  7821  001E36  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7822  001E38  0E35               	movlw	53
  7823  001E3A  6E03               	movwf	i2uartTx@length^0,c
  7824  001E3C  EC4E  F011         	call	i2_uartTx	;wreg free
  7825                           
  7826                           ;usart.c: 131:             break;
  7827  001E40  EF67  F00F         	goto	i2l550
  7828  001E44                     i2l2992:
  7829  001E44  FFFF               	dw	65535	; assembler added errata NOP
  7830                           
  7831                           ;usart.c: 133:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  7832  001E46  0EAF               	movlw	low _errString_Fatal
  7833  001E48  6E01               	movwf	i2uartTx@ptr^0,c
  7834  001E4A  0E01               	movlw	high _errString_Fatal
  7835  001E4C  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7836  001E4E  0E27               	movlw	39
  7837  001E50  6E03               	movwf	i2uartTx@length^0,c
  7838  001E52  EC4E  F011         	call	i2_uartTx	;wreg free
  7839                           
  7840                           ;usart.c: 134:             break;
  7841  001E56  EF67  F00F         	goto	i2l550
  7842  001E5A                     i2l2994:
  7843  001E5A  FFFF               	dw	65535	; assembler added errata NOP
  7844                           
  7845                           ;usart.c: 136:             uartTx(&errString_Command[0], sizeof(errString_Command));
  7846  001E5C  0EB0               	movlw	low _errString_Command
  7847  001E5E  6E01               	movwf	i2uartTx@ptr^0,c
  7848  001E60  0E00               	movlw	high _errString_Command
  7849  001E62  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7850  001E64  0E18               	movlw	24
  7851  001E66  6E03               	movwf	i2uartTx@length^0,c
  7852  001E68  EC4E  F011         	call	i2_uartTx	;wreg free
  7853                           
  7854                           ;usart.c: 137:             break;
  7855  001E6C  EF67  F00F         	goto	i2l550
  7856  001E70                     i2l2998:
  7857  001E70  FFFF               	dw	65535	; assembler added errata NOP
  7858  001E72  5007               	movf	i2printError@errCode^0,w,c
  7859  001E74  6E05               	movwf	??i2_printError^0,c
  7860  001E76  6A06               	clrf	(??i2_printError+1)^0,c
  7861                           
  7862                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7863                           ; Switch size 1, requested type "simple"
  7864                           ; Number of cases is 1, Range of values is 0 to 0
  7865                           ; switch strategies available:
  7866                           ; Name         Instructions Cycles
  7867                           ; simple_byte            4     3 (average)
  7868                           ;	Chosen strategy is simple_byte
  7869  001E78  5006               	movf	(??i2_printError+1)^0,w,c
  7870  001E7A  0A00               	xorlw	0	; case 0
  7871  001E7C  B4D8               	btfsc	status,2,c
  7872  001E7E  EF43  F00F         	goto	i2l4706
  7873  001E82  EF67  F00F         	goto	i2l550
  7874  001E86                     i2l4706:
  7875  001E86  FFFF               	dw	65535	; assembler added errata NOP
  7876                           
  7877                           ; Switch size 1, requested type "simple"
  7878                           ; Number of cases is 8, Range of values is 1 to 8
  7879                           ; switch strategies available:
  7880                           ; Name         Instructions Cycles
  7881                           ; simple_byte           25    13 (average)
  7882                           ;	Chosen strategy is simple_byte
  7883  001E88  5005               	movf	??i2_printError^0,w,c
  7884  001E8A  0A01               	xorlw	1	; case 1
  7885  001E8C  B4D8               	btfsc	status,2,c
  7886  001E8E  EFE0  F00E         	goto	i2l2980
  7887  001E92  0A03               	xorlw	3	; case 2
  7888  001E94  B4D8               	btfsc	status,2,c
  7889  001E96  EFEB  F00E         	goto	i2l2982
  7890  001E9A  0A01               	xorlw	1	; case 3
  7891  001E9C  B4D8               	btfsc	status,2,c
  7892  001E9E  EFF6  F00E         	goto	i2l2984
  7893  001EA2  0A07               	xorlw	7	; case 4
  7894  001EA4  B4D8               	btfsc	status,2,c
  7895  001EA6  EF01  F00F         	goto	i2l2986
  7896  001EAA  0A01               	xorlw	1	; case 5
  7897  001EAC  B4D8               	btfsc	status,2,c
  7898  001EAE  EF0C  F00F         	goto	i2l2988
  7899  001EB2  0A03               	xorlw	3	; case 6
  7900  001EB4  B4D8               	btfsc	status,2,c
  7901  001EB6  EF17  F00F         	goto	i2l2990
  7902  001EBA  0A01               	xorlw	1	; case 7
  7903  001EBC  B4D8               	btfsc	status,2,c
  7904  001EBE  EF22  F00F         	goto	i2l2992
  7905  001EC2  0A0F               	xorlw	15	; case 8
  7906  001EC4  B4D8               	btfsc	status,2,c
  7907  001EC6  EF2D  F00F         	goto	i2l2994
  7908  001ECA  EF67  F00F         	goto	i2l550
  7909  001ECE                     i2l550:
  7910  001ECE  FFFF               	dw	65535	; assembler added errata NOP
  7911  001ED0  0012               	return		;funcret
  7912  001ED2  FFFF               	dw	65535	; errata NOP
  7913  001ED4                     __end_ofi2_printError:
  7914                           	callstack 0
  7915                           
  7916 ;; *************** function i2_uartTx *****************
  7917 ;; Defined at:
  7918 ;;		line 148 in file "usart.c"
  7919 ;; Parameters:    Size  Location     Type
  7920 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  7921 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  7922 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  7923 ;;  length          1    2[COMRAM] unsigned char 
  7924 ;; Auto vars:     Size  Location     Type
  7925 ;;  i               1    3[COMRAM] unsigned char 
  7926 ;; Return value:  Size  Location     Type
  7927 ;;                  1    wreg      void 
  7928 ;; Registers used:
  7929 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7930 ;; Tracked objects:
  7931 ;;		On entry : 0/0
  7932 ;;		On exit  : 0/0
  7933 ;;		Unchanged: 0/0
  7934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7935 ;;      Params:         3       0       0       0       0       0       0
  7936 ;;      Locals:         1       0       0       0       0       0       0
  7937 ;;      Temps:          0       0       0       0       0       0       0
  7938 ;;      Totals:         4       0       0       0       0       0       0
  7939 ;;Total ram usage:        4 bytes
  7940 ;; Hardware stack levels used:    1
  7941 ;; This function calls:
  7942 ;;		Nothing
  7943 ;; This function is called by:
  7944 ;;		i2_printError
  7945 ;; This function uses a non-reentrant model
  7946 ;;
  7947                           
  7948                           	psect	text52
  7949  00229C                     __ptext52:
  7950                           	callstack 0
  7951  00229C                     i2_uartTx:
  7952                           	callstack 0
  7953  00229C  FFFF               	dw	65535	; assembler added errata NOP
  7954  00229E                     
  7955                           ;usart.c: 148: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 149: {;usa
      +                          rt.c: 151:     for(char i = 1; i < length; i++){
  7956  00229E  0E01               	movlw	1
  7957  0022A0  6E04               	movwf	i2uartTx@i^0,c
  7958  0022A2  EF67  F011         	goto	i2l2694
  7959  0022A6                     i2l2690:
  7960  0022A6  FFFF               	dw	65535	; assembler added errata NOP
  7961                           
  7962                           ;usart.c: 153:         TXREG = *ptr;
  7963  0022A8  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  7964  0022AC  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  7965  0022B0  50DF               	movf	indf2,w,c
  7966  0022B2  6EAD               	movwf	173,c	;volatile
  7967  0022B4                     i2l555:
  7968  0022B4  FFFF               	dw	65535	; assembler added errata NOP
  7969  0022B6  A2AC               	btfss	172,1,c	;volatile
  7970  0022B8  EF60  F011         	goto	i2u179_41
  7971  0022BC  EF63  F011         	goto	i2u179_40
  7972  0022C0                     i2u179_41:
  7973  0022C0  FFFF               	dw	65535	; assembler added errata NOP
  7974  0022C2  EF5A  F011         	goto	i2l555
  7975  0022C6                     i2u179_40:
  7976  0022C6  FFFF               	dw	65535	; assembler added errata NOP
  7977  0022C8                     
  7978                           ;usart.c: 157:         ptr++;
  7979  0022C8  4A01               	infsnz	i2uartTx@ptr^0,f,c
  7980  0022CA  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  7981                           
  7982                           ;usart.c: 158:     }
  7983  0022CC  2A04               	incf	i2uartTx@i^0,f,c
  7984  0022CE                     i2l2694:
  7985  0022CE  FFFF               	dw	65535	; assembler added errata NOP
  7986  0022D0  5003               	movf	i2uartTx@length^0,w,c
  7987  0022D2  5C04               	subwf	i2uartTx@i^0,w,c
  7988  0022D4  A0D8               	btfss	status,0,c
  7989  0022D6  EF6F  F011         	goto	i2u180_41
  7990  0022DA  EF72  F011         	goto	i2u180_40
  7991  0022DE                     i2u180_41:
  7992  0022DE  FFFF               	dw	65535	; assembler added errata NOP
  7993  0022E0  EF53  F011         	goto	i2l2690
  7994  0022E4                     i2u180_40:
  7995  0022E4  FFFF               	dw	65535	; assembler added errata NOP
  7996  0022E6  0012               	return		;funcret
  7997  0022E8  FFFF               	dw	65535	; errata NOP
  7998  0022EA                     __end_ofi2_uartTx:
  7999                           	callstack 0
  8000                           
  8001                           	psect	rparam
  8002  0000                     
  8003                           	psect	temp
  8004  00006D                     btemp:
  8005                           	callstack 0
  8006  00006D                     	ds	1
  8007  0000                     int$flags	set	btemp
  8008  0000                     wtemp8	set	btemp+1
  8009  0000                     ttemp5	set	btemp+1
  8010  0000                     ttemp6	set	btemp+4
  8011  0000                     ttemp7	set	btemp+8
  8012                           
  8013                           	psect	idloc
  8014                           
  8015                           ;Config register IDLOC0 @ 0x200000
  8016                           ;	unspecified, using default values
  8017  200000                     	org	2097152
  8018  200000  FF                 	db	255
  8019                           
  8020                           ;Config register IDLOC1 @ 0x200001
  8021                           ;	unspecified, using default values
  8022  200001                     	org	2097153
  8023  200001  FF                 	db	255
  8024                           
  8025                           ;Config register IDLOC2 @ 0x200002
  8026                           ;	unspecified, using default values
  8027  200002                     	org	2097154
  8028  200002  FF                 	db	255
  8029                           
  8030                           ;Config register IDLOC3 @ 0x200003
  8031                           ;	unspecified, using default values
  8032  200003                     	org	2097155
  8033  200003  FF                 	db	255
  8034                           
  8035                           ;Config register IDLOC4 @ 0x200004
  8036                           ;	unspecified, using default values
  8037  200004                     	org	2097156
  8038  200004  FF                 	db	255
  8039                           
  8040                           ;Config register IDLOC5 @ 0x200005
  8041                           ;	unspecified, using default values
  8042  200005                     	org	2097157
  8043  200005  FF                 	db	255
  8044                           
  8045                           ;Config register IDLOC6 @ 0x200006
  8046                           ;	unspecified, using default values
  8047  200006                     	org	2097158
  8048  200006  FF                 	db	255
  8049                           
  8050                           ;Config register IDLOC7 @ 0x200007
  8051                           ;	unspecified, using default values
  8052  200007                     	org	2097159
  8053  200007  FF                 	db	255
  8054                           
  8055                           	psect	config
  8056                           
  8057                           ; Padding undefined space
  8058  300000                     	org	3145728
  8059  300000  FF                 	db	255
  8060                           
  8061                           ;Config register CONFIG1H @ 0x300001
  8062                           ;	Oscillator Selection bits
  8063                           ;	OSC = XT, XT oscillator
  8064                           ;	Oscillator System Clock Switch Enable bit
  8065                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  8066  300001                     	org	3145729
  8067  300001  21                 	db	33
  8068                           
  8069                           ;Config register CONFIG2L @ 0x300002
  8070                           ;	Power-up Timer Enable bit
  8071                           ;	PWRT = OFF, PWRT disabled
  8072                           ;	Brown-out Reset Enable bit
  8073                           ;	BOR = OFF, Brown-out Reset disabled
  8074                           ;	Brown-out Reset Voltage bits
  8075                           ;	BORV = 20, VBOR set to 2.0V
  8076  300002                     	org	3145730
  8077  300002  0D                 	db	13
  8078                           
  8079                           ;Config register CONFIG2H @ 0x300003
  8080                           ;	Watchdog Timer Enable bit
  8081                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8082                           ;	Watchdog Timer Postscale Select bits
  8083                           ;	WDTPS = 128, 1:128
  8084  300003                     	org	3145731
  8085  300003  0E                 	db	14
  8086                           
  8087                           ; Padding undefined space
  8088  300004                     	org	3145732
  8089  300004  FF                 	db	255
  8090                           
  8091                           ;Config register CONFIG3H @ 0x300005
  8092                           ;	CCP2 Mux bit
  8093                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  8094  300005                     	org	3145733
  8095  300005  00                 	db	0
  8096                           
  8097                           ;Config register CONFIG4L @ 0x300006
  8098                           ;	Stack Full/Underflow Reset Enable bit
  8099                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  8100                           ;	Low Voltage ICSP Enable bit
  8101                           ;	LVP = OFF, Low Voltage ICSP disabled
  8102                           ;	Background Debugger Enable bit
  8103                           ;	DEBUG = 0x1, unprogrammed default
  8104  300006                     	org	3145734
  8105  300006  80                 	db	128
  8106                           
  8107                           ; Padding undefined space
  8108  300007                     	org	3145735
  8109  300007  FF                 	db	255
  8110                           
  8111                           ;Config register CONFIG5L @ 0x300008
  8112                           ;	Code Protection bit
  8113                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  8114                           ;	Code Protection bit
  8115                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  8116                           ;	Code Protection bit
  8117                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  8118                           ;	Code Protection bit
  8119                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  8120  300008                     	org	3145736
  8121  300008  0F                 	db	15
  8122                           
  8123                           ;Config register CONFIG5H @ 0x300009
  8124                           ;	Boot Block Code Protection bit
  8125                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  8126                           ;	Data EEPROM Code Protection bit
  8127                           ;	CPD = OFF, Data EEPROM not code protected
  8128  300009                     	org	3145737
  8129  300009  C0                 	db	192
  8130                           
  8131                           ;Config register CONFIG6L @ 0x30000A
  8132                           ;	Write Protection bit
  8133                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  8134                           ;	Write Protection bit
  8135                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  8136                           ;	Write Protection bit
  8137                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  8138                           ;	Write Protection bit
  8139                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  8140  30000A                     	org	3145738
  8141  30000A  0F                 	db	15
  8142                           
  8143                           ;Config register CONFIG6H @ 0x30000B
  8144                           ;	Configuration Register Write Protection bit
  8145                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  8146                           ;	Boot Block Write Protection bit
  8147                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  8148                           ;	Data EEPROM Write Protection bit
  8149                           ;	WRTD = OFF, Data EEPROM not write protected
  8150  30000B                     	org	3145739
  8151  30000B  E0                 	db	224
  8152                           
  8153                           ;Config register CONFIG7L @ 0x30000C
  8154                           ;	Table Read Protection bit
  8155                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  8156                           ;	Table Read Protection bit
  8157                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  8158                           ;	Table Read Protection bit
  8159                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  8160                           ;	Table Read Protection bit
  8161                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  8162  30000C                     	org	3145740
  8163  30000C  0F                 	db	15
  8164                           
  8165                           ;Config register CONFIG7H @ 0x30000D
  8166                           ;	Boot Block Table Read Protection bit
  8167                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  8168  30000D                     	org	3145741
  8169  30000D  40                 	db	64
  8170                           tosu	equ	0xFFF
  8171                           tosh	equ	0xFFE
  8172                           tosl	equ	0xFFD
  8173                           stkptr	equ	0xFFC
  8174                           pclatu	equ	0xFFB
  8175                           pclath	equ	0xFFA
  8176                           pcl	equ	0xFF9
  8177                           tblptru	equ	0xFF8
  8178                           tblptrh	equ	0xFF7
  8179                           tblptrl	equ	0xFF6
  8180                           tablat	equ	0xFF5
  8181                           prodh	equ	0xFF4
  8182                           prodl	equ	0xFF3
  8183                           indf0	equ	0xFEF
  8184                           postinc0	equ	0xFEE
  8185                           postdec0	equ	0xFED
  8186                           preinc0	equ	0xFEC
  8187                           plusw0	equ	0xFEB
  8188                           fsr0h	equ	0xFEA
  8189                           fsr0l	equ	0xFE9
  8190                           wreg	equ	0xFE8
  8191                           indf1	equ	0xFE7
  8192                           postinc1	equ	0xFE6
  8193                           postdec1	equ	0xFE5
  8194                           preinc1	equ	0xFE4
  8195                           plusw1	equ	0xFE3
  8196                           fsr1h	equ	0xFE2
  8197                           fsr1l	equ	0xFE1
  8198                           bsr	equ	0xFE0
  8199                           indf2	equ	0xFDF
  8200                           postinc2	equ	0xFDE
  8201                           postdec2	equ	0xFDD
  8202                           preinc2	equ	0xFDC
  8203                           plusw2	equ	0xFDB
  8204                           fsr2h	equ	0xFDA
  8205                           fsr2l	equ	0xFD9
  8206                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    16
    Data        334
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     66     108
    BANK0           128     18     127
    BANK1           256      0     247
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 53
		 -> errString_Command(BANK0[24]), errString_Fatal(BANK1[39]), errString_PointZ(BANK1[53]), errString_Bound(BANK1[33]), 
		 -> errString_Point(BANK1[41]), errString_Reset(BANK1[40]), errString_ZEND(BANK1[41]), errString_Feed(BANK0[30]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 


Critical Paths under _main in COMRAM

    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_stepMade
    _touchTherm->_stepMade
    _touchObject->_stepMade
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _releaseObj->_stepMade
    _pickObject->_stepMade
    _moveToPoint->_stepMade
    _liftArm->_stepMade

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    _abortAll->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _main->_executeData
    _executeData->_rotateObj

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   10309
                                             13 BANK0      5     5      0
                           _clearTM0
                        _executeData
                     _getNewSequence
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                   _resetNewSequence
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim1Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim1Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    1604
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0     238
                                             20 COMRAM     3     3      0
                          _resetStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (1) _resetNewSequence                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0    6225
                                              8 BANK0      5     5      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0      34
                          _resetStep
                         _resetTherm
                        _returnTherm
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0      34
                          _resetStep
                         _resetTouch
                        _returnTouch
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            8     8      0    3163
                                              0 BANK0      8     8      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         14     6      8    2608
                                             20 COMRAM    14     6      8
                          _resetStep
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0      34
                          _resetStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0    1059
                                             10 COMRAM     7     7      0
                           _abortAll
                         _fatalError
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _abortAll                                             0     0      0     507
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _executeData
     _getData
     _liftArm
       _resetStep
       _stepMade
     _moveToPoint
       _resetStep
       _stepCounter
       _stepMade
     _pickObject
       _stepMade
     _releaseObj
       _stepMade
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _stepMade
     _touchObject
       _resetStep
       _resetTouch
       _returnTouch
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTherm
       _returnTherm
       _startADC
       _stepMade
       _stopADC
   _getNewSequence
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetNewSequence
   _resetPosition
     _resetStep
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim1Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _abortAll
     i2_printError
       i2_uartTx
   _fatalError
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F7       7       96.5%
BITBANK0            80      0       0       4        0.0%
BANK0               80     12      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     42      6C       1       85.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1E2      15        0.0%
DATA                 0      0     1E2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Tue Apr 27 14:27:36 2021

                                        ___fldiv@aexp 0038  
                                        ___fldiv@bexp 0037  
                               __end_of_interruptInit 236E  
                                        ___fldiv@sign 0030  
                                                  l90 23E8  
                                                  l84 24C0  
                                                 l201 1DB0  
                                                 l202 1DB4  
                                                 l131 10E4  
                                                 l220 214C  
                                                 l132 1278  
                                                 l213 1C94  
                                                 l214 1C98  
                                                 l151 1290  
                                                 l160 0B02  
                                                 l225 2164  
                                                 l217 213A  
                                                 l161 0B0C  
                                                 l250 2396  
                                                 l243 23BC  
                                                 l244 23C2  
                                                 l236 207C  
                                                 l165 0DEC  
                                                 l157 0E04  
                                                 l333 14DA  
                                                 l510 24B2  
                                                 l182 0DAA  
                                                 l158 0ABC  
                                                 l238 20A4  
                                                 l334 14D4  
                                                 l335 14D6  
                                                 l360 108E  
                                                 l249 2390  
                                                 l513 24A4  
                                                 l601 2496  
                                                 l610 2500  
                                                 l444 2348  
                                                 l516 2558  
                                                 l604 2440  
                                                 l613 2532  
                                                 l381 2570  
                                                 l445 235E  
                                                 l525 2568  
                                                 l533 224A  
                                                 l390 2528  
                                                 l446 236A  
                                                 l550 1B7A  
                                                 l607 2454  
                                                 l375 240E  
                                                 l519 2560  
                                                 l384 24F4  
                                                 l528 250A  
                                                 l536 242C  
                                                 l393 2514  
                                                 l378 251E  
                                                 l387 24E8  
                                                 l555 2266  
                                                 l580 1726  
                                                 l559 2298  
                                                 l583 17AC  
                                                 l922 1A5E  
                                                 l598 2466  
                                                 _isr 0008  
                                         _touchObject 1C9C  
                                                 prod 000FF3  
                                                 wreg 000FE8  
                                        ___fltol@exp1 0042  
                                         main@errCode 00FC  
                                                l1220 093C  
                                                l1212 0810  
                                                l1221 0924  
                                                l1207 0A3E  
                                                l1209 0856  
                                                l1218 08AC  
                                                l1280 12F4  
                                                l4010 1CC0  
                                                l4002 1C9E  
                                                l1283 1486  
                                                l4100 20E6  
                                                l4020 1D1A  
                                                l4012 1CD8  
                                                l4004 1CA6  
                                                l4110 2152  
                                                l4102 20F4  
                                                l1294 140C  
                                                l4022 1D2C  
                                                l4030 1D78  
                                                l4014 1CE4  
                                                l4006 1CB4  
                                                l1287 13A0  
                                                l4112 215E  
                                                l4104 2106  
                                                l4120 2024  
                                                l4040 1D96  
                                                l4032 1D7E  
                                                l4016 1CF2  
                                                l4008 1CB6  
                                                l4200 10A0  
                                                l4114 2162  
                                                l4106 210E  
                                                l4130 207E  
                                                l4122 2032  
                                                l4042 1DA8  
                                                l4034 1D82  
                                                l4018 1D12  
                                                l4026 1D4C  
                                                l4050 1B98  
                                                l4210 10F8  
                                                l4202 10AC  
                                                l4108 2120  
                                                l4140 23BE  
                                                l4132 2082  
                                                l4124 2038  
                                                l4036 1D84  
                                                l4028 1D68  
                                                l4060 1BD6  
                                                l4052 1B9A  
                                                l4220 113C  
                                                l4212 110A  
                                                l4204 10BA  
                                                l4300 2432  
                                                l4142 2370  
                                                l4126 205E  
                                                l4134 2088  
                                                l4118 1FD2  
                                                l4038 1D92  
                                                l4062 1BF6  
                                                l4054 1BA4  
                                                l4070 1C30  
                                                l4046 1B82  
                                                l4310 249C  
                                                l4230 118C  
                                                l4222 114E  
                                                l4214 1114  
                                                l4206 10C0  
                                                l4150 1A6C  
                                                l4302 2434  
                                                l4136 239C  
                                                l4144 2374  
                                                l4128 2060  
                                                l4080 1C68  
                                                l4072 1C4C  
                                                l4064 1BFE  
                                                l4056 1BBC  
                                                l4048 1B8A  
                                                l4240 11DE  
                                                l4232 119E  
                                                l4224 1162  
                                                l4216 1122  
                                                l4208 10D8  
                                                l4160 1ADA  
                                                l4152 1A82  
                                                l4320 165A  
                                                l4304 2438  
                                                l4090 20AA  
                                                l4138 23A0  
                                                l4146 2392  
                                                l4082 1C76  
                                                l4066 1C10  
                                                l4074 1C5C  
                                                l4058 1BC8  
                                                l4410 0FD4  
                                                l4402 0F6E  
                                                l4306 2566  
                                                l4250 1222  
                                                l4242 11E8  
                                                l4234 11A6  
                                                l4226 1174  
                                                l4218 1134  
                                                l4162 1AF0  
                                                l4154 1A98  
                                                l4330 16BE  
                                                l4322 1664  
                                                l4314 163A  
                                                l4092 20B0  
                                                l3700 06E8  
                                                l4084 1C7A  
                                                l4076 1C62  
                                                l4420 106A  
                                                l4412 0FD8  
                                                l4404 0FB6  
                                                l4180 23C8  
                                                l4260 128A  
                                                l4244 11F6  
                                                l4236 11B8  
                                                l4228 117E  
                                                l4252 123C  
                                                l4164 1B06  
                                                l4156 1AAE  
                                                l4148 1A68  
                                                l4340 1754  
                                                l4332 16C6  
                                                l4316 164A  
                                                l4500 15F6  
                                                l4174 24AA  
                                                l4094 20BC  
                                                l3710 0732  
                                                l3702 06EC  
                                                l4086 1C8C  
                                                l4078 1C66  
                                                l4422 1072  
                                                l4414 1016  
                                                l4406 0FCC  
                                                l4430 108A  
                                                l4190 23E0  
                                                l4182 23D0  
                                                l4270 235C  
                                                l4262 128E  
                                                l4254 1252  
                                                l4246 1208  
                                                l4238 11CC  
                                                l4158 1AC4  
                                                l4342 1758  
                                                l4334 1720  
                                                l4350 1776  
                                                l4318 1650  
                                                l4326 166E  
                                                l4510 1626  
                                                l4502 15FA  
                                                l3640 244E  
                                                l4096 20C2  
                                                l3720 076A  
                                                l3712 073A  
                                                l3704 06F4  
                                                l4424 107A  
                                                l4416 1028  
                                                l4408 0FD0  
                                                l4280 2400  
                                                l4272 23EE  
                                                l4192 23E2  
                                                l4184 23D4  
                                                l4256 1266  
                                                l4248 1210  
                                                l4440 21F0  
                                                l4168 1B1C  
                                                l4344 1760  
                                                l4336 1730  
                                                l4328 16A6  
                                                l4512 162A  
                                                l4504 1614  
                                                l4178 24B8  
                                                l4098 20DA  
                                                l3730 07AA  
                                                l3722 076A  
                                                l3714 0740  
                                                l3706 0706  
                                                l3650 24EE  
                                                l4426 107E  
                                                l4418 1038  
                                                l4370 0E0C  
                                                l4282 240A  
                                                l4274 23F6  
                                                l4194 23E4  
                                                l4186 23D8  
                                                l4266 2334  
                                                l4258 127E  
                                                l4450 2236  
                                                l4346 176A  
                                                l4338 1740  
                                                l4290 245A  
                                                l4506 161C  
                                                l3644 252E  
                                                l3636 2446  
                                                l3900 0A78  
                                                l3740 07FC  
                                                l3732 07BA  
                                                l3708 0722  
                                                l3820 19A6  
                                                l3812 1960  
                                                l3652 256E  
                                                l4428 1082  
                                                l4700 0F8E  
                                                l4380 0E7A  
                                                l4372 0E18  
                                                l4284 240C  
                                                l4276 23FC  
                                                l4196 23E6  
                                                l4188 23DC  
                                                l4268 2346  
                                                l4364 2506  
                                                l3660 2250  
                                                l4292 2462  
                                                l4508 1622  
                                                l4460 149A  
                                                l4452 148C  
                                                l3638 244A  
                                                l3646 24FA  
                                                l3910 0AC6  
                                                l3750 0852  
                                                l3742 080E  
                                                l3734 07CA  
                                                l3726 077E  
                                                l3718 0754  
                                                l3670 0620  
                                                l3830 19E0  
                                                l3822 19B8  
                                                l3814 1990  
                                                l3806 1930  
                                                l3654 2524  
                                                l4390 0F22  
                                                l4382 0EB4  
                                                l4374 0E1C  
                                                l4278 23FE  
                                                l4366 255E  
                                                l4438 2556  
                                                l4198 1094  
                                                l4446 21F4  
                                                l3662 2258  
                                                l4294 248E  
                                                l4286 2414  
                                                l4470 14BA  
                                                l4462 149E  
                                                l4454 148C  
                                                l3920 0B2A  
                                                l3912 0AF2  
                                                l3904 0A80  
                                                l3760 08AA  
                                                l3752 086C  
                                                l3744 081C  
                                                l3736 07D2  
                                                l3728 079A  
                                                l3680 066E  
                                                l3672 0632  
                                                l3840 1A12  
                                                l3832 19EA  
                                                l3816 1992  
                                                l3808 194A  
                                                l3648 251A  
                                                l3656 24E2  
                                                l4392 0F36  
                                                l4384 0EC4  
                                                l4376 0E56  
                                                l4448 2234  
                                                l3664 227A  
                                                l4296 2492  
                                                l4288 2428  
                                                l4480 1516  
                                                l4472 14CE  
                                                l4464 14A2  
                                                l4456 1492  
                                                l3930 0B94  
                                                l3922 0B42  
                                                l3914 0B08  
                                                l3906 0AAC  
                                                l3770 091A  
                                                l3754 0886  
                                                l3762 08BE  
                                                l3746 0840  
                                                l3738 07E8  
                                                l3690 069A  
                                                l3682 0672  
                                                l3674 0634  
                                                l3842 1A26  
                                                l3818 19A2  
                                                l3850 1298  
                                                l3658 2510  
                                                l4394 0F58  
                                                l4386 0ED8  
                                                l4378 0E66  
                                                l3666 2280  
                                                l4298 2494  
                                                l4490 1570  
                                                l4482 1526  
                                                l4474 14DE  
                                                l4466 14A6  
                                                l4458 1496  
                                                l3932 0BAA  
                                                l3940 0BF4  
                                                l3924 0B4E  
                                                l3916 0B16  
                                                l3908 0AC2  
                                                l3780 099A  
                                                l3764 08D2  
                                                l3756 088C  
                                                l3748 0842  
                                                l3692 06AC  
                                                l3676 064A  
                                                l3684 067A  
                                                l3668 0614  
                                                l3844 1A3C  
                                                l3828 19D4  
                                                l3852 12AC  
                                                l4396 0F5C  
                                                l4388 0F12  
                                                l4492 1598  
                                                l4484 1528  
                                                l4476 14F8  
                                                l4468 14B2  
                                                l3950 0C5E  
                                                l3942 0C0A  
                                                l3934 0BB6  
                                                l3926 0B64  
                                                l3918 0B24  
                                                l3790 0A10  
                                                l3774 0952  
                                                l3782 099E  
                                                l3766 08D6  
                                                l3758 0898  
                                                l3694 06AE  
                                                l3686 068C  
                                                l3678 065E  
                                                l3846 1A4C  
                                                l3838 1A04  
                                                l3870 138A  
                                                l3862 1336  
                                                l3854 12BE  
                                                l4398 0F64  
                                                l4494 15B0  
                                                l4486 1548  
                                                l4478 1504  
                                                l3960 0CB8  
                                                l3952 0C70  
                                                l3936 0BD6  
                                                l3928 0B8A  
                                                l3792 0A16  
                                                l3784 09BE  
                                                l3776 095E  
                                                l3768 08E8  
                                                l3696 06C4  
                                                l3688 0694  
                                                l3880 1420  
                                                l3872 1396  
                                                l3864 1340  
                                                l3856 1306  
                                                l4496 15EA  
                                                l4488 1566  
                                                l3970 0D0C  
                                                l3962 0CC2  
                                                l3946 0C3C  
                                                l3938 0BDE  
                                                l3794 0A28  
                                                l3786 09D4  
                                                l3778 0970  
                                                l3698 06D8  
                                                l3890 1472  
                                                l3882 1422  
                                                l3874 13D8  
                                                l3866 134E  
                                                l3858 1322  
                                                l4498 15F2  
                                                l3980 0D80  
                                                l3964 0CD8  
                                                l3972 0D22  
                                                l3948 0C52  
                                                l3956 0C7C  
                                                l3796 0A2E  
                                                l3788 09F4  
                                                l3892 1474  
                                                l3884 1428  
                                                l3876 13E6  
                                                l3868 1386  
                                                l3982 0D8C  
                                                l3974 0D38  
                                                l3966 0CE4  
                                                l3958 0C92  
                                                l3990 0DC4  
                                                l3798 0A32  
                                                l3886 144C  
                                                l3878 13FA  
                                                l4694 1686  
                                                l3992 0DDA  
                                                l3984 0D9E  
                                                l3968 0D04  
                                                l3896 0A46  
                                                l3888 1460  
                                                l4696 178C  
                                                l3994 0DF2  
                                                l3978 0D6A  
                                                l3898 0A60  
                                                l4698 1B32  
                                                l3996 0DFE  
                                                l3988 0DAA  
                                                ?_isr 0001  
                                                l3998 0E02  
                                                u3000 13D2  
                                                u3001 13CC  
                                                u3010 13F8  
                                                u3011 13F2  
                                                u3100 0B40  
                                                u3020 140C  
                                                u3101 0B3A  
                                                u3021 1406  
                                                _LATA 000F89  
                                                u3110 0B62  
                                                u3030 141E  
                                                _LATB 000F8A  
                                                u3111 0B5C  
                                                u3031 1418  
                                                _LATC 000F8B  
                                                u3200 0CB6  
                                                u3120 0B88  
                                                u3040 145E  
                                                _LATD 000F8C  
                                                u3201 0CB0  
                                                u3121 0B82  
                                                u3041 1458  
                                                u3210 0CD6  
                                                u3130 0BA8  
                                                u3050 1470  
                                                u3211 0CD0  
                                                u3131 0BA2  
                                                u3051 146A  
                                                u3220 0D02  
                                                u3140 0BD4  
                                                u3060 0A5E  
                                                u3300 1CD6  
                                                u3221 0CFC  
                                                u3141 0BCE  
                                                u3061 0A58  
                                                u3301 1CD0  
                                                u3230 0D36  
                                                u3150 0C08  
                                                u3070 0A78  
                                                u3310 1D10  
                                                u3231 0D30  
                                                u3151 0C02  
                                                u3071 0A72  
                                                u3311 1D0A  
                                                u3240 0D64  
                                                u3160 0C36  
                                                u3080 0AAA  
                                                u3320 1D46  
                                                u3400 1C5C  
                                                u3241 0D5E  
                                                u3161 0C30  
                                                u3081 0AA4  
                                                u3321 1D40  
                                                u3401 1C56  
                                                u3250 0D7E  
                                                u3170 0C50  
                                                u3090 0AF0  
                                                u3330 1D66  
                                                u3410 1C8A  
                                                u3251 0D78  
                                                u3171 0C4A  
                                                u3091 0AEA  
                                                u3331 1D60  
                                                u3411 1C84  
                                                u3420 20D8  
                                                u3260 0D9C  
                                                u3180 0C6E  
                                                u2700 06C2  
                                                u3340 1D78  
                                                u3500 10D6  
                                                u3421 20D2  
                                                u3261 0D96  
                                                u3181 0C68  
                                                u2701 06BC  
                                                u3341 1D72  
                                                u3501 10D0  
                                                u3430 2104  
                                                u3270 0DC4  
                                                u3190 0C90  
                                                u2710 06D6  
                                                u3350 1DA6  
                                                u3510 10F6  
                                                u3431 20FE  
                                                u3271 0DBE  
                                                u3191 0C8A  
                                                u2711 06D0  
                                                u3351 1DA0  
                                                u3511 10F0  
                                                u3440 213A  
                                                u3280 0DD8  
                                                u2800 08D0  
                                                u2720 0720  
                                                u3360 1BBA  
                                                u3600 123C  
                                                u3520 110A  
                                                u2640 2278  
                                                u3441 2134  
                                                u3281 0DD2  
                                                u2801 08CA  
                                                u2721 071A  
                                                u3361 1BB4  
                                                u3601 1236  
                                                u3521 1104  
                                                u2641 2272  
                                                u3450 214C  
                                                u3290 0DEC  
                                                u2810 08E6  
                                                u2730 0768  
                                                u3370 1BF4  
                                                u3610 1250  
                                                u3530 1132  
                                                u2650 2296  
                                                u3451 2146  
                                                u3291 0DE6  
                                                u2811 08E0  
                                                u2731 0762  
                                                u3371 1BEE  
                                                u3611 124A  
                                                u3531 112C  
                                                u2651 2290  
                                                u2820 0918  
                                                u2740 07E6  
                                                u2660 0630  
                                                u2900 1984  
                                                u3460 207A  
                                                u3380 1C2A  
                                                u3620 1264  
                                                u3540 1160  
                                                u3700 14CC  
                                                u2821 0912  
                                                u2741 07E0  
                                                u2661 062A  
                                                u3461 2074  
                                                u3381 1C24  
                                                u3621 125E  
                                                u3541 115A  
                                                u3701 14C6  
                                                u2830 0936  
                                                u2750 080C  
                                                u2670 0648  
                                                u2910 19B6  
                                                u3470 20A2  
                                                u3390 1C4A  
                                                u3630 1278  
                                                u3550 1174  
                                                u3710 14F6  
                                                u2831 0930  
                                                u2751 0806  
                                                u2671 0642  
                                                u2911 19B0  
                                                u3471 209C  
                                                u3391 1C44  
                                                u3631 1272  
                                                u3551 116E  
                                                u3711 14F0  
                                                u3480 23BA  
                                                u2840 0950  
                                                u2760 083E  
                                                u2680 065C  
                                                u2920 19CE  
                                                u3640 2344  
                                                u3560 119C  
                                                u3720 1546  
                                                u3481 23B4  
                                                u2841 094A  
                                                u2761 0838  
                                                u2681 0656  
                                                u2921 19C8  
                                                u2905 1978  
                                                u3641 233E  
                                                u3561 1196  
                                                u3721 1540  
                                                u3490 238E  
                                                u2850 096E  
                                                u2770 086A  
                                                u2690 06AA  
                                                u2930 19FE  
                                                u3650 235A  
                                                u3570 11CA  
                                                u3730 1566  
                                                u3491 2388  
                                                u2851 0968  
                                                u2771 0864  
                                                u2691 06A4  
                                                u2931 19F8  
                                                u3651 2354  
                                                u3571 11C4  
                                                u3731 1560  
                                                u2860 09BC  
                                                u2780 0884  
                                                u2940 1A26  
                                                u3580 11DE  
                                                u3660 16BC  
                                                u3740 15AE  
                                                u2861 09B6  
                                                u2781 087E  
                                                u2941 1A20  
                                                u3581 11D8  
                                                u3661 16B6  
                                                u3741 15A8  
                                                u2870 09F2  
                                                u2790 08A8  
                                                u2950 1A3A  
                                                u3670 0FCA  
                                                u3590 1206  
                                                u3750 1612  
                                                u2871 09EC  
                                                u2791 08A2  
                                                u2951 1A34  
                                                u3671 0FC4  
                                                u3591 1200  
                                                u3751 160C  
                                                u2880 0A26  
                                                u2960 12AA  
                                                u3680 1068  
                                                u2881 0A20  
                                                u2961 12A4  
                                                u3681 1062  
                                                u2890 1948  
                                                u2970 12BC  
                                                u3690 2248  
                                         main@newData 00FD  
                                                u2891 1942  
                                                u2971 12B6  
                                                u3691 2242  
                                                u2980 1320  
                                                u2981 131A  
                                                u2990 1380  
                                                u2991 137A  
                                                i2l81 24CE  
                                                i2l87 2578  
                                                _TMR0 000FD6  
                                                _TMR2 000FCC  
                                 __end_ofi2_storeData 192E  
                                                _main 148C  
                                                _maxX 006A  
                                                _maxY 0090  
                                __end_ofi2_printError 1ED4  
                                                fsr2h 000FDA  
                                                indf2 000FDF  
                                                fsr1l 000FE1  
                                                fsr2l 000FD9  
                                                btemp 006D  
                                                prodh 000FF4  
                                                prodl 000FF3  
                                                start 01A4  
                                     ___fldiv@new_exp 0031  
                                        ___param_bank 000000  
                                     ??_whatsTM0Limit 0001  
                                               ??_isr 000B  
                                        ?_executeData 0001  
                                     executeData@data 00F8  
                                       ___fltol@sign1 0041  
                                               ?_main 0001  
                                     __end_of___fldiv 0A44  
                                     __end_of___fltol 1A64  
                                               i2l253 2472  
                                               i2l254 2474  
                                               i2l522 2588  
                                               i2l550 1ECE  
                                               i2l622 24DC  
                                               i2l616 2580  
                                               i2l555 22B4  
                                               i2l619 253C  
                                               i2l396 2550  
                                               i2l580 18A2  
                                               i2l469 018C  
                                               i2l559 22E6  
                                               i2l399 2546  
                                               i2l583 1928  
                                rotateObj@rotSequence 0080  
                                               _SPBRG 000FAF  
                                               _TRISA 000F92  
                                               _TRISB 000F93  
                                               _TRISC 000F94  
                                               _TRISD 000F95  
                                               _TXREG 000FAD  
                                     __end_of_getData 24B6  
                                     i2storeData@data 000A  
                                     __end_of_initADC 2412  
                                        ?_newSequence 0001  
                                     __end_of_liftArm 2168  
                                     __end_of_readSeq 2564  
                                        stepMade@temp 0014  
                                               tablat 000FF5  
                                      i2uartTx@length 0003  
                                     __end_of_stopADC 2574  
                                               ttemp5 006E  
                                               ttemp6 0071  
                                               ttemp7 0075  
                                               status 000FD8  
                                               wtemp8 006E  
                                    __end_ofi2_uartTx 22EA  
                                       ?_increaseStep 0001  
                                     __initialization 2168  
                              __size_of_initPinMotors 0026  
                                        __end_of_main 1636  
                            resetPosition@keepMovingX 0015  
                            resetPosition@keepMovingY 0016  
                            resetPosition@keepMovingZ 0017  
                                              ??_main 00FA  
                                       __activetblptr 000002  
                                         i2_storeData 17B2  
                                         isr@tm0Count 005A  
                                        ?_setThermRel 0001  
                                              _ADRESH 000FC4  
                                              _ADRESL 000FC3  
                                        ?_moveToPoint 0015  
                                              i2l2152 254C  
                                              i2l2162 257E  
                                              i2l2154 2542  
                                              i2l2156 2586  
                                              i2l2164 2538  
                                              i2l3300 1842  
                                              i2l3310 18D4  
                                              i2l3302 189C  
                                              i2l3312 18DC  
                                              i2l3304 18AC  
                                              i2l3400 0032  
                                              i2l3314 18E6  
                                              i2l3306 18BC  
                                              i2l3410 006C  
                                              i2l3402 004E  
                                              i2l3092 246C  
                                              i2l3308 18D0  
                                              i2l3420 00A0  
                                              i2l3412 006E  
                                              i2l3404 0050  
                                              i2l3318 18F2  
                                              i2l3430 00E0  
                                              i2l3422 00A4  
                                              i2l3414 0086  
                                              i2l3406 0054  
                                              i2l3280 24D4  
                                              i2l3440 0114  
                                              i2l3432 00F2  
                                              i2l3424 00C2  
                                              i2l3416 008A  
                                              i2l3408 0058  
                                              i2l3290 17E0  
                                              i2l3282 17B6  
                                              i2l3442 011C  
                                              i2l3450 016C  
                                              i2l3434 00F6  
                                              i2l3426 00CA  
                                              i2l3418 009E  
                                              i2l3284 17C6  
                                              i2l3452 0180  
                                              i2l3444 0142  
                                              i2l3436 00FA  
                                              i2l3428 00CC  
                                              i2l3286 17CC  
                                              i2l3294 17EA  
                                              i2l3454 0186  
                                              i2l3446 014E  
                                              i2l3438 0100  
                                              i2l3288 17D6  
                                              i2l3296 1822  
                                              i2l3448 0168  
                                              i2l2690 22A6  
                                              i2l1874 24C6  
                                              i2l3298 183A  
                                              i2l3394 001C  
                                              i2l2692 22C8  
                                              i2l3396 002E  
                                              i2l2694 22CE  
                                              i2l1878 2576  
                                              i2l4702 1802  
                                              i2l3398 0030  
                                              i2l2688 229E  
                                              i2l4704 1908  
                                              i2l4706 1E86  
                                              i2l2980 1DC0  
                                              i2l2990 1E2E  
                                              i2l2982 1DD6  
                                              i2l2992 1E44  
                                              i2l2984 1DEC  
                                              i2l2994 1E5A  
                                              i2l2986 1E02  
                                              i2l2978 1DBC  
                                              i2l2988 1E18  
                                              i2l2998 1E70  
                                              _RCREG1 000FAE  
                                        ?_setTouchRel 0001  
                                    __end_of_abortAll 247C  
                                    __end_of___xxtofl 148C  
                                    __end_of_clearTM0 24C4  
                                    _errString_PointZ 0100  
                                      ??_increaseStep 0001  
                                    __end_of_maxFeedX 0611  
                                    __end_of_maxFeedY 0610  
                                           ??___fldiv 0028  
                                           ??___fltol 003D  
                                    __end_of_tim0Init 246A  
                                    __end_of_tim1Init 249A  
                                    __end_of_tim2Init 2444  
                                              clear_0 21CE  
                                              clear_1 21DA  
                                           ??_getData 0014  
                                              _uartTx 224E  
                                           ??_initADC 0012  
                                           ??_liftArm 0015  
                                           ??_readSeq 0012  
                                        __pdataCOMRAM 005E  
                               __end_of_resetPosition 1294  
                                        __mediumconst 0000  
                                              tblptrh 000FF7  
                                              tblptrl 000FF6  
                                              tblptru 000FF8  
                                        ?_returnTherm 0012  
                                    __end_of_startADC 2522  
                                    __end_of_stepMade 2458  
                                       _initPinMotors 23C6  
                                        ?_returnTouch 0012  
                                           ??_stopADC 0012  
                               __size_ofi2_printError 011C  
                                    __end_of_writeTM0 24D2  
                           __size_of_resetNewSequence 000A  
                                        ___xxtofl@arg 001C  
                                        ___xxtofl@exp 001B  
                                        ___xxtofl@val 0012  
                                          __accesstop 0080  
                             __end_of__initialization 21E0  
                                        _dataSequence 00D1  
                                       ___rparam_used 000001  
                                          ___fltol@f1 0039  
                                        ?_stepCounter 0012  
                                         i2uartTx@ptr 0001  
                                      __pcstackCOMRAM 0001  
                                        __newSequence 0056  
                                        __pidataBANK0 22EA  
                                        __pidataBANK1 1ED4  
                                     isr@single_cycle 0048  
                                __size_of_executeData 0288  
                                        i2_printError 1DB8  
                                        ?_touchObject 0001  
                                      _errString_ZEND 015E  
                                      _errString_Feed 0092  
                                      ?_initPinMotors 0001  
                                           ?i2_uartTx 0001  
                                          __pbssBANK0 00C8  
                                __size_of_newSequence 0008  
                                          _feeder1Pos 060D  
                                          _feeder2Pos 060B  
                                          _feeder3Pos 0609  
                             __size_of_getNewSequence 000E  
                                          _fatalError 2584  
                                  __size_of_reduceSeq 0008  
                                  __size_of_retPeriod 000E  
                                      _touch_pressure 0607  
                                  __size_of_shiftData 0060  
                                  __size_of_resetStep 000A  
                                             _ADC_res 004A  
                                             ?_uartTx 0012  
                                           ?_abortAll 0001  
                                           ?___xxtofl 0012  
                                __end_of_increaseStep 2584  
                                           ?_clearTM0 0001  
                                          ??i2_uartTx 0004  
                                  __size_of_rotateObj 00DC  
                                   _errString_Command 00B0  
                                  __size_of_usartInit 001E  
                              __size_of_interruptInit 003C  
                                __size_of_setThermRel 000A  
                                  __size_of_storeData 017C  
                                           ?_tim0Init 0001  
                                           ?_tim1Init 0001  
                                           ?_tim2Init 0012  
                                __size_of_moveToPoint 03C6  
                                storeData@receivedMex 00C8  
                                     _newSequenceData 00E5  
                                __size_of_setTouchRel 000A  
                                             __Hparam 0000  
                                             __Lparam 0000  
                              __end_of_touch_pressure 0609  
                                             ___fldiv 0612  
                                           ?_startADC 0001  
                                           ?_stepMade 0012  
                                             ___fltol 192E  
                                        __psmallconst 0600  
                                             __pcinit 2168  
                               __end_of_whatsTM0Limit 257C  
                                             _getData 24A8  
                                             __ramtop 0600  
                                           ?_writeTM0 0001  
                                          _pickObject 239A  
                                             __ptext0 148C  
                                             __ptext1 2412  
                                             __ptext2 2430  
                                             __ptext3 248C  
                                             __ptext4 2458  
                                             __ptext5 1636  
                                             __ptext6 1A64  
                                             __ptext7 224E  
                                             __ptext8 21EE  
                                             __ptext9 1092  
                                     __size_of_uartTx 004E  
                                           _T0CONbits 000FD5  
                                             _initADC 23EC  
                                           _T1CONbits 000FCD  
                                     ??_initPinMotors 0012  
                                             _liftArm 20A8  
                                           _T2CONbits 000FCA  
                                          ??_abortAll 0008  
                                             _readSeq 255C  
                                        __size_of_isr 019C  
                                          ??___xxtofl 0016  
                                        ?i2_storeData 0001  
                                          ??_clearTM0 0012  
                                          _motCounter 005E  
                                             _pwmStep 0053  
                                             _stopADC 256C  
                                   __end_of_reduceSeq 255C  
                                   __end_of_retPeriod 24E0  
                                          _releaseObj 236E  
                                __size_of_returnTherm 000C  
                                end_of_initialization 21E0  
                                __size_of_returnTouch 000C  
                                    _resetNewSequence 2504  
                                    rotateObj@totStep 00F1  
                                   __end_of_shiftData 224E  
                                             isr@temp 0011  
                                   __end_of_resetStep 2536  
                                          ??_tim0Init 0012  
                                       __Lmediumconst 0000  
                                          ??_tim1Init 0012  
                                          ??_tim2Init 0014  
                                    storeData@command 0054  
                                    storeData@counter 0055  
                                          _resetTherm 250E  
                                          _resetTouch 2522  
                                             uartTx@i 0015  
                                         ?_fatalError 0001  
                                           _RCSTAbits 000FAB  
                                             postdec1 000FE5  
                                             postdec2 000FDD  
                                   __end_of_rotateObj 20A8  
                                             postinc0 000FEE  
                                             postinc1 000FE6  
                                             postinc2 000FDE  
                                          ??_startADC 0012  
                                          ??_stepMade 0014  
                                __size_of_stepCounter 000C  
                                       _interruptInit 2332  
                                   __end_of_usartInit 2430  
                                   __end_of_storeData 17B2  
                          __end_ofrotateObj@stepAngle 0605  
                                          ??_writeTM0 0001  
                                           _PORTDbits 000F83  
                                          _printError 1A64  
                                           _PORTEbits 000F84  
                                 i2printError@errCode 0007  
                                          _toggleStep 2536  
                                       ___xxtofl@sign 001A  
                                           _TRISCbits 000F94  
                                           _TRISDbits 000F95  
                                           _TRISEbits 000F96  
                                         ___fldiv@grs 0033  
                                         ___fldiv@rem 002C  
                                __size_of_touchObject 011C  
                                          _stepToggle 0052  
                                          _touchTherm 1B80  
                                           _TXSTAbits 000FAC  
                                      _getNewSequence 249A  
                                      ?_interruptInit 0001  
                                       __pidataCOMRAM 247C  
                               __size_of_increaseStep 0008  
                                         ?_pickObject 0001  
                                         __fatalError 0057  
                                      __end_of_uartTx 229C  
                                       moveToPoint@x1 0015  
                                       moveToPoint@x2 0019  
                                       moveToPoint@y1 0017  
                                       moveToPoint@y2 001B  
                                 start_initialization 2168  
                                           i2uartTx@i 0004  
                                         __end_of_isr 01A4  
                                 __size_of_fatalError 0008  
                                         ?_releaseObj 0001  
                                   __size_ofi2_uartTx 004E  
                              __end_of_getNewSequence 24A8  
                                     _errString_Fatal 01AF  
                                     _errString_Bound 01D6  
                                         ?_resetTherm 0001  
                                     _errString_Reset 0187  
                                         ?_resetTouch 0001  
                                     _errString_Point 0135  
                                        _increaseStep 257C  
                              __size_of_resetPosition 0202  
                                       ??_executeData 00F5  
                                         __pdataBANK0 0080  
                                         __pdataBANK1 0100  
                                         _dataCounter 0058  
                                            ??_uartTx 0015  
                              moveToPoint@keepMovingX 0021  
                              moveToPoint@keepMovingY 0022  
                                         ?_printError 0001  
                                           ___fldiv@a 0024  
                                           ___fldiv@b 0020  
                                      _therm_pressure 0605  
                                         ?_toggleStep 0001  
                                         __pbssCOMRAM 0043  
                                       __pcstackBANK0 00ED  
                                       ??_newSequence 0012  
                                   __size_of_abortAll 0012  
                                   __size_of___xxtofl 01F8  
                                __size_ofi2_storeData 017C  
                                   __size_of_clearTM0 000E  
                                     ?_getNewSequence 0012  
                                         ?_touchTherm 0001  
                                 __size_of_pickObject 002C  
                                  executeData@errCode 00F7  
                                   __size_of_tim0Init 0012  
                                   __size_of_tim1Init 000E  
                                   __size_of_tim2Init 0014  
                                     ??_interruptInit 0012  
                                           __pintcode 0008  
                                            ?___fldiv 0020  
                                            ?___fltol 0039  
                            __end_of_resetNewSequence 250E  
                                 __size_of_releaseObj 002C  
                                       storeData@data 001B  
                                            ?_getData 0012  
                                   __size_of_startADC 000A  
                                   __size_of_stepMade 0014  
                              __end_of_therm_pressure 0607  
                                            ?_initADC 0001  
                                         __smallconst 0600  
                                            ?_liftArm 0001  
                                            ?_readSeq 0001  
                                   __size_of_writeTM0 000E  
                                 __end_of_executeData 1092  
                                          shiftData@i 0014  
                                 __size_of_resetTherm 000A  
                                           _newFeeder 004C  
                                       _resetPosition 1092  
                                 __size_of_resetTouch 000A  
                                       ??_setThermRel 0001  
                                            ?_stopADC 0001  
                                       ??_moveToPoint 001D  
                                       ??_setTouchRel 0001  
                                 __end_of_newSequence 256C  
                                           _reduceSeq 2554  
                                            _LATAbits 000F89  
                                            _LATBbits 000F8A  
                                           _retPeriod 24D2  
                                            _LATCbits 000F8B  
                                            _LATDbits 000F8C  
                                 __size_of_printError 011C  
                                            _IPR1bits 000F9F  
                                            _PIE1bits 000F9D  
                                           _shiftData 21EE  
                                            i2u180_40 22E4  
                                            i2u260_40 0112  
                                            i2u252_40 002C  
                                            i2u180_41 22DE  
                                            i2u260_41 010C  
                                            i2u252_41 0026  
                                           _resetStep 252C  
                                            i2u245_40 1838  
                                            i2u261_40 0140  
                                            i2u253_40 004C  
                                            i2u245_41 1832  
                                            i2u261_41 013A  
                                            i2u253_41 0046  
                                            i2u262_40 0166  
                                            i2u254_40 006A  
                                            i2u262_41 0160  
                                            i2u254_41 0064  
                                            i2u263_40 017E  
                                            i2u255_40 0084  
                                            i2u263_41 0178  
                                            i2u255_41 007E  
                                            i2u256_40 009C  
                                            i2u256_41 0096  
                                            i2u257_40 00C0  
                                            i2u257_41 00BA  
                                            _PIR1bits 000F9E  
                                            i2u258_40 00DE  
                                            i2u258_41 00D8  
                                            i2u179_40 22C6  
                                            i2u259_40 00F0  
                                            i2u179_41 22C0  
                                            i2u259_41 00EA  
                                 __size_of_toggleStep 000A  
                                        ??_fatalError 0001  
                                           _posVector 0043  
                                            _RCONbits 000FD0  
                                           _therm_rel 005B  
                                           _pwmPeriod 0046  
                                           _rotateObj 1FCC  
                                          _ADCON0bits 000FC2  
                                          _ADCON1bits 000FC1  
                                 __size_of_touchTherm 011C  
                                           _usartInit 2412  
                                           _touch_rel 005C  
                                  __end_of_feeder1Pos 060F  
                                  __end_of_feeder2Pos 060D  
                                  __end_of_feeder3Pos 060B  
                                           _storeData 1636  
                                      ?_resetPosition 0001  
                               __end_of_initPinMotors 23EC  
                                       ??_returnTherm 0014  
                                       ??_returnTouch 0014  
                                            i2_uartTx 229C  
                                           copy_data0 217C  
                                           copy_data1 219C  
                                           copy_data2 21BC  
                                  __end_of_fatalError 258C  
                                  rotateObj@stepAngle 0601  
                                          ?_reduceSeq 0001  
                                          ?_retPeriod 0001  
                                          rotateObj@i 00F3  
                              __size_of_whatsTM0Limit 0008  
                                 __end_of_setThermRel 2554  
                                 __end_of_moveToPoint 0E0A  
                                   printError@errCode 0018  
                                          ?_shiftData 0001  
                                       ??_stepCounter 0014  
                                            __Hrparam 0000  
                                          ?_resetStep 0001  
                                 __end_of_setTouchRel 254A  
                                            __Lrparam 0000  
                                    __size_of___fldiv 0432  
                                    __size_of___fltol 0136  
                                         _executeData 0E0A  
                                        ??_pickObject 0015  
                                          ?_rotateObj 0001  
                            moveToPoint@MOT1Direction 001F  
                                       ?i2_printError 0001  
                                    __size_of_getData 000E  
                            moveToPoint@MOT2Direction 0020  
                                       ??_touchObject 0015  
                                            _abortAll 246A  
                                          ?_usartInit 0001  
                                    __size_of_initADC 0026  
                                            ___xxtofl 1294  
                                    __size_of_liftArm 00C0  
                                          ?_storeData 0001  
                                            _clearTM0 24B6  
                                    __size_of_readSeq 0008  
                                  storeData@mexLength 006C  
                                            _tm0Error 0050  
                                            _tm0Limit 005D  
                                         _newSequence 2564  
                                            __ptext10 2504  
                                            __ptext11 2554  
                                            __ptext20 24E0  
                                            __ptext12 255C  
                                            __ptext21 250E  
                                            __ptext13 2564  
                                            __ptext30 0612  
                                            __ptext22 1C9C  
                                            __ptext14 2332  
                                            __ptext31 236E  
                                            __ptext23 256C  
                                            __ptext15 23C6  
                                            __ptext32 239A  
                                            __ptext24 2518  
                                            __ptext16 23EC  
                                            __ptext41 17B2  
                                            __ptext33 0A44  
                                            __ptext25 24EC  
                                            __ptext17 249A  
                                            __ptext50 246A  
                                            __ptext42 24C4  
                                            __ptext34 24F8  
                                            __ptext26 2522  
                                            __ptext18 0E0A  
                                            __ptext51 1DB8  
                                            __ptext43 2574  
                                            __ptext35 20A8  
                                            __ptext27 1FCC  
                                            __ptext19 1B80  
                                            __ptext52 229C  
                                            __ptext44 2536  
                                            __ptext36 2444  
                                            __ptext28 1294  
                                            __ptext45 2540  
                                            __ptext37 252C  
                                            __ptext29 192E  
                                            __ptext46 254A  
                                            __ptext38 24A8  
                                            __ptext47 24D2  
                                            __ptext39 24B6  
                                            __ptext48 257C  
                                            __ptext49 2584  
                                        ??_releaseObj 0015  
                                    __size_of_stopADC 0008  
                                            _maxFeedX 0610  
                                            _maxFeedY 060F  
                                 __end_of_returnTherm 24EC  
                                 __end_of_returnTouch 24F8  
                                            _tim0Init 2458  
                                            _tim1Init 248C  
                                            _tim2Init 2430  
                                       __size_of_main 01AA  
                                  __end_of_pickObject 23C6  
                                        ??_resetTherm 0012  
                                        ??_resetTouch 0012  
                                           uartTx@ptr 0012  
                                            _rotAngle 004E  
                                     isr@completeStep 0059  
                                            int$flags 006D  
                                            _startADC 2518  
                                            _stepMade 2444  
                                            _stepMot1 008C  
                                            _stepMot2 0088  
                                            _stepMot3 0084  
                                 __end_of_stepCounter 2504  
                                   rotateObj@rotAngle 00F0  
                                      ??i2_printError 0005  
                                  __end_of_releaseObj 239A  
                                            _writeTM0 24C4  
                                        ??_printError 0016  
                                       _whatsTM0Limit 2574  
                                     ??_resetPosition 0015  
                                  tim2Init@_pwmPeriod 0012  
                                          _INTCONbits 000FF2  
                                        ??_toggleStep 0001  
                                    ??_getNewSequence 0014  
                                  __end_of_resetTherm 2518  
                                  __end_of_resetTouch 252C  
                                         _setThermRel 254A  
                                        uartTx@length 0014  
                                         _moveToPoint 0A44  
                                 __end_of_touchObject 1DB8  
                                            intlevel2 258C  
                                        ??_touchTherm 0015  
                                         _setTouchRel 2540  
                                         ??_reduceSeq 0012  
                                         ??_retPeriod 0003  
                                          _RCSTA1bits 000FAB  
                                  __end_of_printError 1B80  
                                         ??_shiftData 0012  
                                         ??_resetStep 0012  
                                  __end_of_toggleStep 2540  
                                   ?_resetNewSequence 0001  
                                      ?_whatsTM0Limit 0001  
                                         ??_rotateObj 00ED  
                                  ??_resetNewSequence 0012  
                                  __end_of_touchTherm 1C9C  
                                         ??_usartInit 0012  
                                       ??i2_storeData 0008  
                                         ??_storeData 0019  
                                         _returnTherm 24E0  
                                         _returnTouch 24EC  
                                         _stepCounter 24F8  
