

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Sat May 01 07:55:11 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    74                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    75                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    76                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    77                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    78  0000                     
    79                           ; Version 2.20
    80                           ; Generated 12/02/2020 GMT
    81                           ; 
    82                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC18F452 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     
   114                           	psect	idataCOMRAM
   115  00267A                     __pidataCOMRAM:
   116                           	callstack 0
   117                           
   118                           ;initializer for _motCounter
   119  00267A  00                 	db	0
   120  00267B  01                 	db	1
   121  00267C  00                 	db	0
   122  00267D  01                 	db	1
   123  00267E  00                 	db	0
   124  00267F  01                 	db	1
   125                           
   126                           ;initializer for storeData@mexLength
   127  002680  05                 	db	5
   128                           
   129                           	psect	idataBANK0
   130  0023C0                     __pidataBANK0:
   131                           	callstack 0
   132                           
   133                           ;initializer for rotateObj@rotSequence
   134  0023C0  24                 	db	36
   135  0023C1  0C                 	db	12
   136  0023C2  18                 	db	24
   137  0023C3  30                 	db	48
   138                           
   139                           ;initializer for _stepMot3
   140  0023C4  09                 	db	9
   141  0023C5  03                 	db	3
   142  0023C6  06                 	db	6
   143  0023C7  0C                 	db	12
   144                           
   145                           ;initializer for _stepMot2
   146  0023C8  11                 	db	17
   147  0023C9  05                 	db	5
   148  0023CA  0C                 	db	12
   149  0023CB  18                 	db	24
   150                           
   151                           ;initializer for _stepMot1
   152  0023CC  22                 	db	34
   153  0023CD  06                 	db	6
   154  0023CE  0C                 	db	12
   155  0023CF  28                 	db	40
   156                           
   157                           ;initializer for _errString_Feed
   158  0023D0  45                 	db	69
   159  0023D1  72                 	db	114
   160  0023D2  72                 	db	114
   161  0023D3  6F                 	db	111
   162  0023D4  72                 	db	114
   163  0023D5  2C                 	db	44
   164  0023D6  20                 	db	32
   165  0023D7  66                 	db	102
   166  0023D8  65                 	db	101
   167  0023D9  65                 	db	101
   168  0023DA  64                 	db	100
   169  0023DB  20                 	db	32
   170  0023DC  6C                 	db	108
   171  0023DD  69                 	db	105
   172  0023DE  6E                 	db	110
   173  0023DF  65                 	db	101
   174  0023E0  20                 	db	32
   175  0023E1  6E                 	db	110
   176  0023E2  6F                 	db	111
   177  0023E3  74                 	db	116
   178  0023E4  20                 	db	32
   179  0023E5  64                 	db	100
   180  0023E6  65                 	db	101
   181  0023E7  66                 	db	102
   182  0023E8  69                 	db	105
   183  0023E9  6E                 	db	110
   184  0023EA  65                 	db	101
   185  0023EB  64                 	db	100
   186  0023EC  0A                 	db	10
   187  0023ED  00                 	db	0
   188                           
   189                           ;initializer for _errString_Command
   190  0023EE  43                 	db	67
   191  0023EF  6F                 	db	111
   192  0023F0  6D                 	db	109
   193  0023F1  6D                 	db	109
   194  0023F2  61                 	db	97
   195  0023F3  6E                 	db	110
   196  0023F4  64                 	db	100
   197  0023F5  20                 	db	32
   198  0023F6  6E                 	db	110
   199  0023F7  6F                 	db	111
   200  0023F8  74                 	db	116
   201  0023F9  20                 	db	32
   202  0023FA  72                 	db	114
   203  0023FB  65                 	db	101
   204  0023FC  63                 	db	99
   205  0023FD  6F                 	db	111
   206  0023FE  67                 	db	103
   207  0023FF  6E                 	db	110
   208  002400  69                 	db	105
   209  002401  7A                 	db	122
   210  002402  65                 	db	101
   211  002403  64                 	db	100
   212  002404  0A                 	db	10
   213  002405  00                 	db	0
   214                           
   215                           	psect	idataBANK1
   216  002088                     __pidataBANK1:
   217                           	callstack 0
   218                           
   219                           ;initializer for _errString_PointZ
   220  002088  45                 	db	69
   221  002089  72                 	db	114
   222  00208A  72                 	db	114
   223  00208B  6F                 	db	111
   224  00208C  72                 	db	114
   225  00208D  2C                 	db	44
   226  00208E  20                 	db	32
   227  00208F  74                 	db	116
   228  002090  69                 	db	105
   229  002091  6D                 	db	109
   230  002092  65                 	db	101
   231  002093  20                 	db	32
   232  002094  65                 	db	101
   233  002095  78                 	db	120
   234  002096  63                 	db	99
   235  002097  65                 	db	101
   236  002098  65                 	db	101
   237  002099  64                 	db	100
   238  00209A  65                 	db	101
   239  00209B  64                 	db	100
   240  00209C  20                 	db	32
   241  00209D  74                 	db	116
   242  00209E  6F                 	db	111
   243  00209F  20                 	db	32
   244  0020A0  72                 	db	114
   245  0020A1  65                 	db	101
   246  0020A2  61                 	db	97
   247  0020A3  63                 	db	99
   248  0020A4  68                 	db	104
   249  0020A5  20                 	db	32
   250  0020A6  74                 	db	116
   251  0020A7  68                 	db	104
   252  0020A8  65                 	db	101
   253  0020A9  20                 	db	32
   254  0020AA  65                 	db	101
   255  0020AB  6E                 	db	110
   256  0020AC  64                 	db	100
   257  0020AD  20                 	db	32
   258  0020AE  6F                 	db	111
   259  0020AF  66                 	db	102
   260  0020B0  20                 	db	32
   261  0020B1  74                 	db	116
   262  0020B2  68                 	db	104
   263  0020B3  65                 	db	101
   264  0020B4  20                 	db	32
   265  0020B5  5A                 	db	90
   266  0020B6  20                 	db	32
   267  0020B7  41                 	db	65
   268  0020B8  78                 	db	120
   269  0020B9  69                 	db	105
   270  0020BA  73                 	db	115
   271  0020BB  0A                 	db	10
   272  0020BC  00                 	db	0
   273                           
   274                           ;initializer for _errString_Point
   275  0020BD  45                 	db	69
   276  0020BE  72                 	db	114
   277  0020BF  72                 	db	114
   278  0020C0  6F                 	db	111
   279  0020C1  72                 	db	114
   280  0020C2  2C                 	db	44
   281  0020C3  20                 	db	32
   282  0020C4  74                 	db	116
   283  0020C5  69                 	db	105
   284  0020C6  6D                 	db	109
   285  0020C7  65                 	db	101
   286  0020C8  20                 	db	32
   287  0020C9  65                 	db	101
   288  0020CA  78                 	db	120
   289  0020CB  63                 	db	99
   290  0020CC  65                 	db	101
   291  0020CD  65                 	db	101
   292  0020CE  64                 	db	100
   293  0020CF  65                 	db	101
   294  0020D0  64                 	db	100
   295  0020D1  20                 	db	32
   296  0020D2  74                 	db	116
   297  0020D3  6F                 	db	111
   298  0020D4  20                 	db	32
   299  0020D5  72                 	db	114
   300  0020D6  65                 	db	101
   301  0020D7  61                 	db	97
   302  0020D8  63                 	db	99
   303  0020D9  68                 	db	104
   304  0020DA  20                 	db	32
   305  0020DB  74                 	db	116
   306  0020DC  68                 	db	104
   307  0020DD  65                 	db	101
   308  0020DE  20                 	db	32
   309  0020DF  70                 	db	112
   310  0020E0  6F                 	db	111
   311  0020E1  69                 	db	105
   312  0020E2  6E                 	db	110
   313  0020E3  74                 	db	116
   314  0020E4  0A                 	db	10
   315  0020E5  00                 	db	0
   316                           
   317                           ;initializer for _errString_ZEND
   318  0020E6  45                 	db	69
   319  0020E7  72                 	db	114
   320  0020E8  72                 	db	114
   321  0020E9  6F                 	db	111
   322  0020EA  72                 	db	114
   323  0020EB  2C                 	db	44
   324  0020EC  20                 	db	32
   325  0020ED  6E                 	db	110
   326  0020EE  6F                 	db	111
   327  0020EF  20                 	db	32
   328  0020F0  6F                 	db	111
   329  0020F1  62                 	db	98
   330  0020F2  6A                 	db	106
   331  0020F3  65                 	db	101
   332  0020F4  63                 	db	99
   333  0020F5  74                 	db	116
   334  0020F6  20                 	db	32
   335  0020F7  72                 	db	114
   336  0020F8  65                 	db	101
   337  0020F9  6C                 	db	108
   338  0020FA  65                 	db	101
   339  0020FB  76                 	db	118
   340  0020FC  61                 	db	97
   341  0020FD  74                 	db	116
   342  0020FE  65                 	db	101
   343  0020FF  64                 	db	100
   344  002100  20                 	db	32
   345  002101  61                 	db	97
   346  002102  6C                 	db	108
   347  002103  6F                 	db	111
   348  002104  6E                 	db	110
   349  002105  67                 	db	103
   350  002106  20                 	db	32
   351  002107  5A                 	db	90
   352  002108  20                 	db	32
   353  002109  41                 	db	65
   354  00210A  78                 	db	120
   355  00210B  69                 	db	105
   356  00210C  73                 	db	115
   357  00210D  0A                 	db	10
   358  00210E  00                 	db	0
   359                           
   360                           ;initializer for _errString_Reset
   361  00210F  45                 	db	69
   362  002110  72                 	db	114
   363  002111  72                 	db	114
   364  002112  6F                 	db	111
   365  002113  72                 	db	114
   366  002114  2C                 	db	44
   367  002115  20                 	db	32
   368  002116  74                 	db	116
   369  002117  69                 	db	105
   370  002118  6D                 	db	109
   371  002119  65                 	db	101
   372  00211A  20                 	db	32
   373  00211B  65                 	db	101
   374  00211C  78                 	db	120
   375  00211D  63                 	db	99
   376  00211E  65                 	db	101
   377  00211F  65                 	db	101
   378  002120  64                 	db	100
   379  002121  65                 	db	101
   380  002122  64                 	db	100
   381  002123  20                 	db	32
   382  002124  74                 	db	116
   383  002125  6F                 	db	111
   384  002126  20                 	db	32
   385  002127  72                 	db	114
   386  002128  65                 	db	101
   387  002129  73                 	db	115
   388  00212A  65                 	db	101
   389  00212B  74                 	db	116
   390  00212C  20                 	db	32
   391  00212D  70                 	db	112
   392  00212E  6F                 	db	111
   393  00212F  73                 	db	115
   394  002130  69                 	db	105
   395  002131  74                 	db	116
   396  002132  69                 	db	105
   397  002133  6F                 	db	111
   398  002134  6E                 	db	110
   399  002135  0A                 	db	10
   400  002136  00                 	db	0
   401                           
   402                           ;initializer for _errString_Fatal
   403  002137  46                 	db	70
   404  002138  61                 	db	97
   405  002139  74                 	db	116
   406  00213A  61                 	db	97
   407  00213B  6C                 	db	108
   408  00213C  20                 	db	32
   409  00213D  45                 	db	69
   410  00213E  72                 	db	114
   411  00213F  72                 	db	114
   412  002140  6F                 	db	111
   413  002141  72                 	db	114
   414  002142  2C                 	db	44
   415  002143  20                 	db	32
   416  002144  70                 	db	112
   417  002145  6C                 	db	108
   418  002146  65                 	db	101
   419  002147  61                 	db	97
   420  002148  73                 	db	115
   421  002149  65                 	db	101
   422  00214A  20                 	db	32
   423  00214B  72                 	db	114
   424  00214C  65                 	db	101
   425  00214D  73                 	db	115
   426  00214E  65                 	db	101
   427  00214F  74                 	db	116
   428  002150  20                 	db	32
   429  002151  74                 	db	116
   430  002152  68                 	db	104
   431  002153  65                 	db	101
   432  002154  20                 	db	32
   433  002155  64                 	db	100
   434  002156  65                 	db	101
   435  002157  76                 	db	118
   436  002158  69                 	db	105
   437  002159  63                 	db	99
   438  00215A  65                 	db	101
   439  00215B  21                 	db	33
   440  00215C  0A                 	db	10
   441  00215D  00                 	db	0
   442                           
   443                           ;initializer for _errString_Bound
   444  00215E  45                 	db	69
   445  00215F  72                 	db	114
   446  002160  72                 	db	114
   447  002161  6F                 	db	111
   448  002162  72                 	db	114
   449  002163  2C                 	db	44
   450  002164  20                 	db	32
   451  002165  70                 	db	112
   452  002166  6F                 	db	111
   453  002167  69                 	db	105
   454  002168  6E                 	db	110
   455  002169  74                 	db	116
   456  00216A  20                 	db	32
   457  00216B  6F                 	db	111
   458  00216C  75                 	db	117
   459  00216D  74                 	db	116
   460  00216E  73                 	db	115
   461  00216F  69                 	db	105
   462  002170  64                 	db	100
   463  002171  65                 	db	101
   464  002172  20                 	db	32
   465  002173  62                 	db	98
   466  002174  6F                 	db	111
   467  002175  75                 	db	117
   468  002176  6E                 	db	110
   469  002177  64                 	db	100
   470  002178  61                 	db	97
   471  002179  72                 	db	114
   472  00217A  69                 	db	105
   473  00217B  65                 	db	101
   474  00217C  73                 	db	115
   475  00217D  0A                 	db	10
   476  00217E  00                 	db	0
   477                           
   478                           	psect	smallconst
   479  000600                     __psmallconst:
   480                           	callstack 0
   481  000600  00                 	db	0
   482  000601  0000               	dw	0
   483  000603  4000               	dw	16384
   484  000605                     __end_ofrotateObj@stepAngle:
   485                           	callstack 0
   486  000605  0065               	dw	101
   487  000607                     __end_of_maxY:
   488                           	callstack 0
   489  000607  0065               	dw	101
   490  000609                     __end_of_maxX:
   491                           	callstack 0
   492  000609  0400               	dw	1024
   493  00060B                     __end_of_therm_pressure:
   494                           	callstack 0
   495  00060B  0200               	dw	512
   496  00060D                     __end_of_touch_pressure:
   497                           	callstack 0
   498  00060D                     _feeder3Pos:
   499                           	callstack 0
   500  00060D  0F                 	db	15
   501  00060E  50                 	db	80
   502  00060F                     __end_of_feeder3Pos:
   503                           	callstack 0
   504  00060F                     _feeder2Pos:
   505                           	callstack 0
   506  00060F  0F                 	db	15
   507  000610  32                 	db	50
   508  000611                     __end_of_feeder2Pos:
   509                           	callstack 0
   510  000611                     _feeder1Pos:
   511                           	callstack 0
   512  000611  0F                 	db	15
   513  000612  14                 	db	20
   514  000613                     __end_of_feeder1Pos:
   515                           	callstack 0
   516  000613  64                 	db	100
   517  000614                     __end_of_maxFeedY:
   518                           	callstack 0
   519  000614  1E                 	db	30
   520  000615                     __end_of_maxFeedX:
   521                           	callstack 0
   522  0000                     _TMR0	set	4054
   523  0000                     _T1CONbits	set	4045
   524  0000                     _TXREG	set	4013
   525  0000                     _SPBRG	set	4015
   526  0000                     _TXSTAbits	set	4012
   527  0000                     _TRISCbits	set	3988
   528  0000                     _RCREG1	set	4014
   529  0000                     _ADRESH	set	4036
   530  0000                     _ADRESL	set	4035
   531  0000                     _PIR1bits	set	3998
   532  0000                     _RCONbits	set	4048
   533  0000                     _INTCONbits	set	4082
   534  0000                     _IPR1bits	set	3999
   535  0000                     _PIE1bits	set	3997
   536  0000                     _ADCON0bits	set	4034
   537  0000                     _RCSTAbits	set	4011
   538  0000                     _RCSTA1bits	set	4011
   539  0000                     _LATD	set	3980
   540  0000                     _PORTDbits	set	3971
   541  0000                     _TMR2	set	4044
   542  0000                     _LATC	set	3979
   543  0000                     _LATB	set	3978
   544  0000                     _LATA	set	3977
   545  0000                     _PORTEbits	set	3972
   546  0000                     _T0CONbits	set	4053
   547  0000                     _T2CONbits	set	4042
   548  0000                     _LATDbits	set	3980
   549  0000                     _LATCbits	set	3979
   550  0000                     _LATBbits	set	3978
   551  0000                     _LATAbits	set	3977
   552  0000                     _TRISDbits	set	3989
   553  0000                     _TRISEbits	set	3990
   554  0000                     _TRISD	set	3989
   555  0000                     _TRISC	set	3988
   556  0000                     _TRISB	set	3987
   557  0000                     _TRISA	set	3986
   558  0000                     _ADCON1bits	set	4033
   559  000615  00                 	db	0	; dummy byte at the end
   560  0000                     
   561                           ; #config settings
   562                           
   563                           	psect	cinit
   564  00223E                     __pcinit:
   565                           	callstack 0
   566  00223E                     start_initialization:
   567                           	callstack 0
   568  00223E                     __initialization:
   569                           	callstack 0
   570                           
   571                           ; Initialize objects allocated to BANK1 (247 bytes)
   572                           ; load TBLPTR registers with __pidataBANK1
   573  00223E  0E88               	movlw	low __pidataBANK1
   574  002240  6EF6               	movwf	tblptrl,c
   575  002242  0E20               	movlw	high __pidataBANK1
   576  002244  6EF7               	movwf	tblptrh,c
   577  002246  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   578  002248  6EF8               	movwf	tblptru,c
   579  00224A  EE01  F000         	lfsr	0,__pdataBANK1
   580  00224E  EE10 F0F7          	lfsr	1,247
   581  002252                     copy_data0:
   582  002252  0009               	tblrd		*+
   583  002254  CFF5 FFEE          	movff	tablat,postinc0
   584  002258  50E5               	movf	postdec1,w,c
   585  00225A  50E1               	movf	fsr1l,w,c
   586  00225C  E1FA               	bnz	copy_data0
   587                           
   588                           ; Initialize objects allocated to BANK0 (70 bytes)
   589                           ; load TBLPTR registers with __pidataBANK0
   590  00225E  0EC0               	movlw	low __pidataBANK0
   591  002260  6EF6               	movwf	tblptrl,c
   592  002262  0E23               	movlw	high __pidataBANK0
   593  002264  6EF7               	movwf	tblptrh,c
   594  002266  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   595  002268  6EF8               	movwf	tblptru,c
   596  00226A  EE00  F080         	lfsr	0,__pdataBANK0
   597  00226E  EE10 F046          	lfsr	1,70
   598  002272                     copy_data1:
   599  002272  0009               	tblrd		*+
   600  002274  CFF5 FFEE          	movff	tablat,postinc0
   601  002278  50E5               	movf	postdec1,w,c
   602  00227A  50E1               	movf	fsr1l,w,c
   603  00227C  E1FA               	bnz	copy_data1
   604                           
   605                           ; Initialize objects allocated to COMRAM (7 bytes)
   606                           ; load TBLPTR registers with __pidataCOMRAM
   607  00227E  0E7A               	movlw	low __pidataCOMRAM
   608  002280  6EF6               	movwf	tblptrl,c
   609  002282  0E26               	movlw	high __pidataCOMRAM
   610  002284  6EF7               	movwf	tblptrh,c
   611  002286  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   612  002288  6EF8               	movwf	tblptru,c
   613  00228A  EE00  F067         	lfsr	0,__pdataCOMRAM
   614  00228E  EE10 F007          	lfsr	1,7
   615  002292                     copy_data2:
   616  002292  0009               	tblrd		*+
   617  002294  CFF5 FFEE          	movff	tablat,postinc0
   618  002298  50E5               	movf	postdec1,w,c
   619  00229A  50E1               	movf	fsr1l,w,c
   620  00229C  E1FA               	bnz	copy_data2
   621                           
   622                           ; Clear objects allocated to BANK0 (28 bytes)
   623  00229E  EE00  F0C6         	lfsr	0,__pbssBANK0
   624  0022A2  0E1C               	movlw	28
   625  0022A4                     clear_0:
   626  0022A4  6AEE               	clrf	postinc0,c
   627  0022A6  06E8               	decf	wreg,f,c
   628  0022A8  E1FD               	bnz	clear_0
   629                           
   630                           ; Clear objects allocated to COMRAM (36 bytes)
   631  0022AA  EE00  F043         	lfsr	0,__pbssCOMRAM
   632  0022AE  0E24               	movlw	36
   633  0022B0                     clear_1:
   634  0022B0  6AEE               	clrf	postinc0,c
   635  0022B2  06E8               	decf	wreg,f,c
   636  0022B4  E1FD               	bnz	clear_1
   637  0022B6                     end_of_initialization:
   638                           	callstack 0
   639  0022B6                     __end_of__initialization:
   640                           	callstack 0
   641  0022B6  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   642  0022B8  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   643  0022BA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   644  0022BC  6EF8               	movwf	tblptru,c
   645  0022BE  0100               	movlb	0
   646  0022C0  EF5F  F00C         	goto	_main	;jump to C main() function
   647                           
   648                           	psect	bssCOMRAM
   649  000043                     __pbssCOMRAM:
   650                           	callstack 0
   651  000043                     storeData@receivedMex:
   652                           	callstack 0
   653  000043                     	ds	9
   654  00004C                     _posVector:
   655                           	callstack 0
   656  00004C                     	ds	3
   657  00004F                     _pwmPeriod:
   658                           	callstack 0
   659  00004F                     	ds	2
   660  000051                     _single_cycle:
   661                           	callstack 0
   662  000051                     	ds	2
   663  000053                     _ADC_res:
   664                           	callstack 0
   665  000053                     	ds	2
   666  000055                     _newFeeder:
   667                           	callstack 0
   668  000055                     	ds	2
   669  000057                     _rotAngle:
   670                           	callstack 0
   671  000057                     	ds	2
   672  000059                     _tm0Error:
   673                           	callstack 0
   674  000059                     	ds	2
   675  00005B                     _stepToggle:
   676                           	callstack 0
   677  00005B                     	ds	1
   678  00005C                     _pwmStep:
   679                           	callstack 0
   680  00005C                     	ds	1
   681  00005D                     	ds	1
   682  00005E                     storeData@counter:
   683                           	callstack 0
   684  00005E                     	ds	1
   685  00005F                     __newSequence:
   686                           	callstack 0
   687  00005F                     	ds	1
   688  000060                     __fatalError:
   689                           	callstack 0
   690  000060                     	ds	1
   691  000061                     _dataCounter:
   692                           	callstack 0
   693  000061                     	ds	1
   694  000062                     _completeStep:
   695                           	callstack 0
   696  000062                     	ds	1
   697  000063                     _tm0Count:
   698                           	callstack 0
   699  000063                     	ds	1
   700  000064                     _therm_rel:
   701                           	callstack 0
   702  000064                     	ds	1
   703  000065                     _touch_rel:
   704                           	callstack 0
   705  000065                     	ds	1
   706  000066                     _tm0Limit:
   707                           	callstack 0
   708  000066                     	ds	1
   709                           
   710                           	psect	dataCOMRAM
   711  000067                     __pdataCOMRAM:
   712                           	callstack 0
   713  000067                     _motCounter:
   714                           	callstack 0
   715  000067                     	ds	6
   716  00006D                     storeData@mexLength:
   717                           	callstack 0
   718  00006D                     	ds	1
   719                           
   720                           	psect	bssBANK0
   721  0000C6                     __pbssBANK0:
   722                           	callstack 0
   723  0000C6                     _dataSequence:
   724                           	callstack 0
   725  0000C6                     	ds	20
   726  0000DA                     _newSequenceData:
   727                           	callstack 0
   728  0000DA                     	ds	8
   729                           
   730                           	psect	dataBANK0
   731  000080                     __pdataBANK0:
   732                           	callstack 0
   733  000080                     rotateObj@rotSequence:
   734                           	callstack 0
   735  000080                     	ds	4
   736  000084                     _stepMot3:
   737                           	callstack 0
   738  000084                     	ds	4
   739  000088                     _stepMot2:
   740                           	callstack 0
   741  000088                     	ds	4
   742  00008C                     _stepMot1:
   743                           	callstack 0
   744  00008C                     	ds	4
   745  000090                     _errString_Feed:
   746                           	callstack 0
   747  000090                     	ds	30
   748  0000AE                     _errString_Command:
   749                           	callstack 0
   750  0000AE                     	ds	24
   751                           
   752                           	psect	dataBANK1
   753  000100                     __pdataBANK1:
   754                           	callstack 0
   755  000100                     _errString_PointZ:
   756                           	callstack 0
   757  000100                     	ds	53
   758  000135                     _errString_Point:
   759                           	callstack 0
   760  000135                     	ds	41
   761  00015E                     _errString_ZEND:
   762                           	callstack 0
   763  00015E                     	ds	41
   764  000187                     _errString_Reset:
   765                           	callstack 0
   766  000187                     	ds	40
   767  0001AF                     _errString_Fatal:
   768                           	callstack 0
   769  0001AF                     	ds	39
   770  0001D6                     _errString_Bound:
   771                           	callstack 0
   772  0001D6                     	ds	33
   773                           
   774                           	psect	cstackBANK0
   775  0000E2                     __pcstackBANK0:
   776                           	callstack 0
   777  0000E2                     rotateObj@rotAngle:
   778                           	callstack 0
   779                           
   780                           ; 1 bytes @ 0x0
   781  0000E2                     	ds	1
   782  0000E3                     rotateObj@totStep:
   783                           	callstack 0
   784                           
   785                           ; 2 bytes @ 0x1
   786  0000E3                     	ds	2
   787  0000E5                     rotateObj@i:
   788                           	callstack 0
   789                           
   790                           ; 2 bytes @ 0x3
   791  0000E5                     	ds	2
   792  0000E7                     rotateObj@c:
   793                           	callstack 0
   794                           
   795                           ; 2 bytes @ 0x5
   796  0000E7                     	ds	2
   797  0000E9                     ??_executeData:
   798                           
   799                           ; 1 bytes @ 0x7
   800  0000E9                     	ds	2
   801  0000EB                     executeData@data:
   802                           	callstack 0
   803                           
   804                           ; 2 bytes @ 0x9
   805  0000EB                     	ds	2
   806  0000ED                     executeData@errCode:
   807                           	callstack 0
   808                           
   809                           ; 1 bytes @ 0xB
   810  0000ED                     	ds	1
   811  0000EE                     ??_main:
   812                           
   813                           ; 1 bytes @ 0xC
   814  0000EE                     	ds	2
   815  0000F0                     main@errCode:
   816                           	callstack 0
   817                           
   818                           ; 1 bytes @ 0xE
   819  0000F0                     	ds	1
   820  0000F1                     main@newData:
   821                           	callstack 0
   822                           
   823                           ; 2 bytes @ 0xF
   824  0000F1                     	ds	2
   825                           
   826                           	psect	cstackCOMRAM
   827  000001                     __pcstackCOMRAM:
   828                           	callstack 0
   829  000001                     ?_retPeriod:
   830                           	callstack 0
   831  000001                     i2uartTx@ptr:
   832                           	callstack 0
   833                           
   834                           ; 2 bytes @ 0x0
   835  000001                     	ds	2
   836  000003                     i2uartTx@length:
   837                           	callstack 0
   838                           
   839                           ; 1 bytes @ 0x2
   840  000003                     	ds	1
   841  000004                     i2uartTx@i:
   842                           	callstack 0
   843                           
   844                           ; 1 bytes @ 0x3
   845  000004                     	ds	1
   846  000005                     ??i2_printError:
   847                           
   848                           ; 1 bytes @ 0x4
   849  000005                     	ds	2
   850  000007                     i2printError@errCode:
   851                           	callstack 0
   852                           
   853                           ; 1 bytes @ 0x6
   854  000007                     	ds	1
   855  000008                     ??i2_storeData:
   856                           
   857                           ; 1 bytes @ 0x7
   858  000008                     	ds	2
   859  00000A                     i2storeData@data:
   860                           	callstack 0
   861                           
   862                           ; 1 bytes @ 0x9
   863  00000A                     	ds	1
   864  00000B                     ??_isr:
   865                           
   866                           ; 1 bytes @ 0xA
   867  00000B                     	ds	6
   868  000011                     isr@temp:
   869                           	callstack 0
   870                           
   871                           ; 1 bytes @ 0x10
   872  000011                     	ds	1
   873  000012                     ??_shiftData:
   874  000012                     ?_stepMade:
   875                           	callstack 0
   876  000012                     ?_stepCounter:
   877                           	callstack 0
   878  000012                     ?_returnTouch:
   879                           	callstack 0
   880  000012                     ?_returnTherm:
   881                           	callstack 0
   882  000012                     ?_getNewSequence:
   883                           	callstack 0
   884  000012                     ?_getData:
   885                           	callstack 0
   886  000012                     ?___xxtofl:
   887                           	callstack 0
   888  000012                     uartTx@ptr:
   889                           	callstack 0
   890  000012                     tim2Init@_pwmPeriod:
   891                           	callstack 0
   892  000012                     ___xxtofl@val:
   893                           	callstack 0
   894                           
   895                           ; 4 bytes @ 0x11
   896  000012                     	ds	2
   897  000014                     shiftData@i:
   898                           	callstack 0
   899  000014                     uartTx@length:
   900                           	callstack 0
   901  000014                     stepMade@temp:
   902                           	callstack 0
   903                           
   904                           ; 1 bytes @ 0x13
   905  000014                     	ds	1
   906  000015                     resetPosition@keepMovingX:
   907                           	callstack 0
   908  000015                     uartTx@i:
   909                           	callstack 0
   910  000015                     moveToPoint@x1:
   911                           	callstack 0
   912                           
   913                           ; 2 bytes @ 0x14
   914  000015                     	ds	1
   915  000016                     ??_printError:
   916  000016                     ??___xxtofl:
   917  000016                     resetPosition@keepMovingY:
   918                           	callstack 0
   919                           
   920                           ; 1 bytes @ 0x15
   921  000016                     	ds	1
   922  000017                     resetPosition@keepMovingZ:
   923                           	callstack 0
   924  000017                     moveToPoint@y1:
   925                           	callstack 0
   926                           
   927                           ; 2 bytes @ 0x16
   928  000017                     	ds	1
   929  000018                     printError@errCode:
   930                           	callstack 0
   931                           
   932                           ; 1 bytes @ 0x17
   933  000018                     	ds	1
   934  000019                     ??_storeData:
   935  000019                     moveToPoint@x2:
   936                           	callstack 0
   937                           
   938                           ; 2 bytes @ 0x18
   939  000019                     	ds	1
   940  00001A                     ___xxtofl@sign:
   941                           	callstack 0
   942                           
   943                           ; 1 bytes @ 0x19
   944  00001A                     	ds	1
   945  00001B                     storeData@data:
   946                           	callstack 0
   947  00001B                     ___xxtofl@exp:
   948                           	callstack 0
   949  00001B                     moveToPoint@y2:
   950                           	callstack 0
   951                           
   952                           ; 2 bytes @ 0x1A
   953  00001B                     	ds	1
   954  00001C                     ___xxtofl@arg:
   955                           	callstack 0
   956                           
   957                           ; 4 bytes @ 0x1B
   958  00001C                     	ds	1
   959  00001D                     ??_moveToPoint:
   960                           
   961                           ; 1 bytes @ 0x1C
   962  00001D                     	ds	2
   963  00001F                     moveToPoint@MOT1Direction:
   964                           	callstack 0
   965                           
   966                           ; 1 bytes @ 0x1E
   967  00001F                     	ds	1
   968  000020                     ?___fldiv:
   969                           	callstack 0
   970  000020                     moveToPoint@MOT2Direction:
   971                           	callstack 0
   972  000020                     ___fldiv@b:
   973                           	callstack 0
   974                           
   975                           ; 4 bytes @ 0x1F
   976  000020                     	ds	1
   977  000021                     moveToPoint@keepMovingX:
   978                           	callstack 0
   979                           
   980                           ; 1 bytes @ 0x20
   981  000021                     	ds	1
   982  000022                     moveToPoint@keepMovingY:
   983                           	callstack 0
   984                           
   985                           ; 1 bytes @ 0x21
   986  000022                     	ds	2
   987  000024                     ___fldiv@a:
   988                           	callstack 0
   989                           
   990                           ; 4 bytes @ 0x23
   991  000024                     	ds	4
   992  000028                     ??___fldiv:
   993                           
   994                           ; 1 bytes @ 0x27
   995  000028                     	ds	4
   996  00002C                     ___fldiv@rem:
   997                           	callstack 0
   998                           
   999                           ; 4 bytes @ 0x2B
  1000  00002C                     	ds	4
  1001  000030                     ___fldiv@sign:
  1002                           	callstack 0
  1003                           
  1004                           ; 1 bytes @ 0x2F
  1005  000030                     	ds	1
  1006  000031                     ___fldiv@new_exp:
  1007                           	callstack 0
  1008                           
  1009                           ; 2 bytes @ 0x30
  1010  000031                     	ds	2
  1011  000033                     ___fldiv@grs:
  1012                           	callstack 0
  1013                           
  1014                           ; 4 bytes @ 0x32
  1015  000033                     	ds	4
  1016  000037                     ___fldiv@bexp:
  1017                           	callstack 0
  1018                           
  1019                           ; 1 bytes @ 0x36
  1020  000037                     	ds	1
  1021  000038                     ___fldiv@aexp:
  1022                           	callstack 0
  1023                           
  1024                           ; 1 bytes @ 0x37
  1025  000038                     	ds	1
  1026  000039                     ?___fltol:
  1027                           	callstack 0
  1028  000039                     ___fltol@f1:
  1029                           	callstack 0
  1030                           
  1031                           ; 4 bytes @ 0x38
  1032  000039                     	ds	4
  1033  00003D                     ??___fltol:
  1034                           
  1035                           ; 1 bytes @ 0x3C
  1036  00003D                     	ds	4
  1037  000041                     ___fltol@sign1:
  1038                           	callstack 0
  1039                           
  1040                           ; 1 bytes @ 0x40
  1041  000041                     	ds	1
  1042  000042                     ___fltol@exp1:
  1043                           	callstack 0
  1044                           
  1045                           ; 1 bytes @ 0x41
  1046  000042                     	ds	1
  1047  000043                     
  1048                           ; 1 bytes @ 0x42
  1049 ;;
  1050 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1051 ;;
  1052 ;; *************** function _main *****************
  1053 ;; Defined at:
  1054 ;;		line 18 in file "main.c"
  1055 ;; Parameters:    Size  Location     Type
  1056 ;;		None
  1057 ;; Auto vars:     Size  Location     Type
  1058 ;;  newData         2   15[BANK0 ] PTR struct .
  1059 ;;		 -> newSequenceData(8), 
  1060 ;;  errCode         1   14[BANK0 ] unsigned char 
  1061 ;; Return value:  Size  Location     Type
  1062 ;;                  1    wreg      void 
  1063 ;; Registers used:
  1064 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1065 ;; Tracked objects:
  1066 ;;		On entry : 0/0
  1067 ;;		On exit  : 0/0
  1068 ;;		Unchanged: 0/0
  1069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1070 ;;      Params:         0       0       0       0       0       0       0
  1071 ;;      Locals:         0       3       0       0       0       0       0
  1072 ;;      Temps:          0       2       0       0       0       0       0
  1073 ;;      Totals:         0       5       0       0       0       0       0
  1074 ;;Total ram usage:        5 bytes
  1075 ;; Hardware stack levels required when called:    7
  1076 ;; This function calls:
  1077 ;;		_clearTM0
  1078 ;;		_executeData
  1079 ;;		_getNewSequence
  1080 ;;		_increaseSeq
  1081 ;;		_initADC
  1082 ;;		_initPinMotors
  1083 ;;		_interruptInit
  1084 ;;		_newSequence
  1085 ;;		_printError
  1086 ;;		_readSeq
  1087 ;;		_reduceSeq
  1088 ;;		_resetNewSequence
  1089 ;;		_resetPosition
  1090 ;;		_shiftData
  1091 ;;		_storeData
  1092 ;;		_tim0Init
  1093 ;;		_tim1Init
  1094 ;;		_tim2Init
  1095 ;;		_usartInit
  1096 ;; This function is called by:
  1097 ;;		Startup code after reset
  1098 ;; This function uses a non-reentrant model
  1099 ;;
  1100                           
  1101                           	psect	text0
  1102  0018BE                     __ptext0:
  1103                           	callstack 0
  1104  0018BE                     _main:
  1105                           	callstack 24
  1106  0018BE  FFFF               	dw	65535	; assembler added errata NOP
  1107                           
  1108                           ;main.c: 22:     interruptInit();
  1109  0018C0  EC03  F012         	call	_interruptInit	;wreg free
  1110  0018C4                     
  1111                           ;main.c: 23:     initPinMotors();
  1112  0018C4  EC51  F012         	call	_initPinMotors	;wreg free
  1113  0018C8                     
  1114                           ;main.c: 24:     initADC();
  1115  0018C8  EC64  F012         	call	_initADC	;wreg free
  1116  0018CC                     
  1117                           ;main.c: 25:     usartInit();
  1118  0018CC  EC77  F012         	call	_usartInit	;wreg free
  1119  0018D0                     
  1120                           ;main.c: 26:     tim0Init();
  1121  0018D0  EC99  F012         	call	_tim0Init	;wreg free
  1122  0018D4                     
  1123                           ;main.c: 27:     tim1Init();
  1124  0018D4  ECB4  F012         	call	_tim1Init	;wreg free
  1125  0018D8                     
  1126                           ;main.c: 28:     tim2Init(10);
  1127  0018D8  0E00               	movlw	0
  1128  0018DA  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1129  0018DC  0E0A               	movlw	10
  1130  0018DE  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1131  0018E0  EC90  F012         	call	_tim2Init	;wreg free
  1132  0018E4                     
  1133                           ;main.c: 31:     errCode = resetPosition();
  1134  0018E4  EC6D  F00B         	call	_resetPosition	;wreg free
  1135  0018E8  0100               	movlb	0	; () banked
  1136  0018EA  6FF0               	movwf	main@errCode& (0+255),b
  1137  0018EC                     
  1138                           ; BSR set to: 0
  1139                           ;main.c: 32:     if(errCode != 0){
  1140  0018EC  51F0               	movf	main@errCode& (0+255),w,b
  1141  0018EE  B4D8               	btfsc	status,2,c
  1142  0018F0  EF7C  F00C         	goto	u4031
  1143  0018F4  EF7F  F00C         	goto	u4030
  1144  0018F8                     u4031:
  1145  0018F8  FFFF               	dw	65535	; assembler added errata NOP
  1146  0018FA  EF86  F00C         	goto	l329
  1147  0018FE                     u4030:
  1148  0018FE  FFFF               	dw	65535	; assembler added errata NOP
  1149  001900                     
  1150                           ; BSR set to: 0
  1151                           ;main.c: 33:         printError(errCode);
  1152  001900  51F0               	movf	main@errCode& (0+255),w,b
  1153  001902  EC99  F00D         	call	_printError
  1154  001906                     l330:
  1155  001906  FFFF               	dw	65535	; assembler added errata NOP
  1156  001908  EF83  F00C         	goto	l330
  1157  00190C                     l329:
  1158  00190C  FFFF               	dw	65535	; assembler added errata NOP
  1159                           
  1160                           ; BSR set to: 0
  1161                           ;main.c: 38:     RCSTA1bits.CREN = 1;
  1162  00190E  88AB               	bsf	171,4,c	;volatile
  1163  001910                     l4638:
  1164  001910  FFFF               	dw	65535	; assembler added errata NOP
  1165                           
  1166                           ;main.c: 41:         if(newSequence()){
  1167  001912  EC25  F013         	call	_newSequence	;wreg free
  1168  001916  0900               	iorlw	0
  1169  001918  B4D8               	btfsc	status,2,c
  1170  00191A  EF91  F00C         	goto	u4041
  1171  00191E  EF94  F00C         	goto	u4040
  1172  001922                     u4041:
  1173  001922  FFFF               	dw	65535	; assembler added errata NOP
  1174  001924  EFE0  F00C         	goto	l4664
  1175  001928                     u4040:
  1176  001928  FFFF               	dw	65535	; assembler added errata NOP
  1177  00192A                     
  1178                           ;main.c: 42:             t_newSequence* newData = getNewSequence();
  1179  00192A  ECBB  F012         	call	_getNewSequence	;wreg free
  1180  00192E  C012  F0F1         	movff	?_getNewSequence,main@newData
  1181  001932  C013  F0F2         	movff	?_getNewSequence+1,main@newData+1
  1182  001936                     
  1183                           ;main.c: 44:             newFeeder[0] = newData ->init_posX;
  1184  001936  0100               	movlb	0	; () banked
  1185  001938  EE20 F002          	lfsr	2,2
  1186  00193C  51F1               	movf	main@newData& (0+255),w,b
  1187  00193E  26D9               	addwf	fsr2l,f,c
  1188  001940  51F2               	movf	(main@newData+1)& (0+255),w,b
  1189  001942  22DA               	addwfc	fsr2h,f,c
  1190  001944  50DF               	movf	indf2,w,c
  1191  001946  6E55               	movwf	_newFeeder^0,c
  1192  001948                     
  1193                           ; BSR set to: 0
  1194                           ;main.c: 45:             newFeeder[1] = newData ->init_posY;
  1195  001948  EE20 F003          	lfsr	2,3
  1196  00194C  51F1               	movf	main@newData& (0+255),w,b
  1197  00194E  26D9               	addwf	fsr2l,f,c
  1198  001950  51F2               	movf	(main@newData+1)& (0+255),w,b
  1199  001952  22DA               	addwfc	fsr2h,f,c
  1200  001954  50DF               	movf	indf2,w,c
  1201  001956  6E56               	movwf	(_newFeeder+1)^0,c
  1202  001958                     
  1203                           ; BSR set to: 0
  1204                           ;main.c: 49:             RCSTAbits.CREN = 0;
  1205  001958  98AB               	bcf	171,4,c	;volatile
  1206  00195A                     
  1207                           ; BSR set to: 0
  1208                           ;main.c: 51:             storeData(newData ->end_posX);
  1209  00195A  EE20 F005          	lfsr	2,5
  1210  00195E  51F1               	movf	main@newData& (0+255),w,b
  1211  001960  26D9               	addwf	fsr2l,f,c
  1212  001962  51F2               	movf	(main@newData+1)& (0+255),w,b
  1213  001964  22DA               	addwfc	fsr2h,f,c
  1214  001966  50DF               	movf	indf2,w,c
  1215  001968  EC41  F008         	call	_storeData
  1216  00196C                     
  1217                           ;main.c: 52:             storeData(newData ->end_posY);
  1218  00196C  0100               	movlb	0	; () banked
  1219  00196E  EE20 F006          	lfsr	2,6
  1220  001972  51F1               	movf	main@newData& (0+255),w,b
  1221  001974  26D9               	addwf	fsr2l,f,c
  1222  001976  51F2               	movf	(main@newData+1)& (0+255),w,b
  1223  001978  22DA               	addwfc	fsr2h,f,c
  1224  00197A  50DF               	movf	indf2,w,c
  1225  00197C  EC41  F008         	call	_storeData
  1226  001980                     
  1227                           ;main.c: 55:             storeData(0);
  1228  001980  0E00               	movlw	0
  1229  001982  EC41  F008         	call	_storeData
  1230  001986                     
  1231                           ;main.c: 56:             storeData(0xFF);
  1232  001986  0EFF               	movlw	255
  1233  001988  EC41  F008         	call	_storeData
  1234  00198C                     
  1235                           ;main.c: 57:             storeData(newData ->end_rot - newData ->init_rot);
  1236  00198C  0100               	movlb	0	; () banked
  1237  00198E  EE20 F004          	lfsr	2,4
  1238  001992  51F1               	movf	main@newData& (0+255),w,b
  1239  001994  26D9               	addwf	fsr2l,f,c
  1240  001996  51F2               	movf	(main@newData+1)& (0+255),w,b
  1241  001998  22DA               	addwfc	fsr2h,f,c
  1242  00199A  50DF               	movf	indf2,w,c
  1243  00199C  6FEE               	movwf	??_main& (0+255),b
  1244  00199E  EE20 F007          	lfsr	2,7
  1245  0019A2  51F1               	movf	main@newData& (0+255),w,b
  1246  0019A4  26D9               	addwf	fsr2l,f,c
  1247  0019A6  51F2               	movf	(main@newData+1)& (0+255),w,b
  1248  0019A8  22DA               	addwfc	fsr2h,f,c
  1249  0019AA  50DF               	movf	indf2,w,c
  1250  0019AC  6FEF               	movwf	(??_main+1)& (0+255),b
  1251  0019AE  51EE               	movf	??_main& (0+255),w,b
  1252  0019B0  5DEF               	subwf	(??_main+1)& (0+255),w,b
  1253  0019B2  EC41  F008         	call	_storeData
  1254  0019B6                     
  1255                           ;main.c: 60:             RCSTAbits.CREN = 1;
  1256  0019B6  88AB               	bsf	171,4,c	;volatile
  1257  0019B8                     
  1258                           ;main.c: 63:             resetNewSequence();
  1259  0019B8  ECF0  F012         	call	_resetNewSequence	;wreg free
  1260  0019BC                     
  1261                           ;main.c: 64:             increaseSeq();
  1262  0019BC  EC29  F013         	call	_increaseSeq	;wreg free
  1263  0019C0                     l4664:
  1264  0019C0  FFFF               	dw	65535	; assembler added errata NOP
  1265                           
  1266                           ;main.c: 66:         if(readSeq()){
  1267  0019C2  EC21  F013         	call	_readSeq	;wreg free
  1268  0019C6  0900               	iorlw	0
  1269  0019C8  B4D8               	btfsc	status,2,c
  1270  0019CA  EFE9  F00C         	goto	u4051
  1271  0019CE  EFEC  F00C         	goto	u4050
  1272  0019D2                     u4051:
  1273  0019D2  FFFF               	dw	65535	; assembler added errata NOP
  1274  0019D4  EF88  F00C         	goto	l4638
  1275  0019D8                     u4050:
  1276  0019D8  FFFF               	dw	65535	; assembler added errata NOP
  1277  0019DA                     
  1278                           ;main.c: 70:             errCode = executeData();
  1279  0019DA  ECC6  F006         	call	_executeData	;wreg free
  1280  0019DE  0100               	movlb	0	; () banked
  1281  0019E0  6FF0               	movwf	main@errCode& (0+255),b
  1282  0019E2                     
  1283                           ; BSR set to: 0
  1284                           ;main.c: 72:             printError(errCode);
  1285  0019E2  51F0               	movf	main@errCode& (0+255),w,b
  1286  0019E4  EC99  F00D         	call	_printError
  1287  0019E8                     
  1288                           ;main.c: 75:             clearTM0();
  1289  0019E8  ECC9  F012         	call	_clearTM0	;wreg free
  1290  0019EC                     
  1291                           ;main.c: 79:             reduceSeq();
  1292  0019EC  EC1D  F013         	call	_reduceSeq	;wreg free
  1293  0019F0                     
  1294                           ;main.c: 80:             shiftData();
  1295  0019F0  EC62  F011         	call	_shiftData	;wreg free
  1296  0019F4  EF88  F00C         	goto	l4638
  1297  0019F8  EFD2  F000         	goto	start
  1298  0019FC                     __end_of_main:
  1299                           	callstack 0
  1300                           
  1301 ;; *************** function _usartInit *****************
  1302 ;; Defined at:
  1303 ;;		line 104 in file "usart.c"
  1304 ;; Parameters:    Size  Location     Type
  1305 ;;		None
  1306 ;; Auto vars:     Size  Location     Type
  1307 ;;		None
  1308 ;; Return value:  Size  Location     Type
  1309 ;;                  1    wreg      void 
  1310 ;; Registers used:
  1311 ;;		wreg, status,2
  1312 ;; Tracked objects:
  1313 ;;		On entry : 0/0
  1314 ;;		On exit  : 0/0
  1315 ;;		Unchanged: 0/0
  1316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1317 ;;      Params:         0       0       0       0       0       0       0
  1318 ;;      Locals:         0       0       0       0       0       0       0
  1319 ;;      Temps:          0       0       0       0       0       0       0
  1320 ;;      Totals:         0       0       0       0       0       0       0
  1321 ;;Total ram usage:        0 bytes
  1322 ;; Hardware stack levels used:    1
  1323 ;; Hardware stack levels required when called:    4
  1324 ;; This function calls:
  1325 ;;		Nothing
  1326 ;; This function is called by:
  1327 ;;		_main
  1328 ;; This function uses a non-reentrant model
  1329 ;;
  1330                           
  1331                           	psect	text1
  1332  0024EE                     __ptext1:
  1333                           	callstack 0
  1334  0024EE                     _usartInit:
  1335                           	callstack 0
  1336  0024EE  FFFF               	dw	65535	; assembler added errata NOP
  1337  0024F0                     
  1338                           ;usart.c: 106:     TRISCbits.TRISC6 = 0;
  1339  0024F0  9C94               	bcf	148,6,c	;volatile
  1340                           
  1341                           ;usart.c: 107:     TRISCbits.TRISC7 = 1;
  1342  0024F2  8E94               	bsf	148,7,c	;volatile
  1343                           
  1344                           ;usart.c: 109:     TXSTAbits.TX9 = 0;
  1345  0024F4  9CAC               	bcf	172,6,c	;volatile
  1346                           
  1347                           ;usart.c: 110:     TXSTAbits.TXEN = 1;
  1348  0024F6  8AAC               	bsf	172,5,c	;volatile
  1349                           
  1350                           ;usart.c: 111:     TXSTAbits.SYNC = 0;
  1351  0024F8  98AC               	bcf	172,4,c	;volatile
  1352                           
  1353                           ;usart.c: 112:     TXSTAbits.BRGH = 0;
  1354  0024FA  94AC               	bcf	172,2,c	;volatile
  1355                           
  1356                           ;usart.c: 114:     RCSTAbits.SPEN = 1;
  1357  0024FC  8EAB               	bsf	171,7,c	;volatile
  1358                           
  1359                           ;usart.c: 115:     RCSTAbits.RX9 = 0;
  1360  0024FE  9CAB               	bcf	171,6,c	;volatile
  1361                           
  1362                           ;usart.c: 116:     RCSTAbits.CREN = 0;
  1363  002500  98AB               	bcf	171,4,c	;volatile
  1364                           
  1365                           ;usart.c: 117:     RCSTAbits.ADDEN = 0;
  1366  002502  96AB               	bcf	171,3,c	;volatile
  1367  002504                     
  1368                           ;usart.c: 120:     SPBRG = 25;
  1369  002504  0E19               	movlw	25
  1370  002506  6EAF               	movwf	175,c	;volatile
  1371  002508  0012               	return		;funcret
  1372  00250A  FFFF               	dw	65535	; errata NOP
  1373  00250C                     __end_of_usartInit:
  1374                           	callstack 0
  1375                           
  1376 ;; *************** function _tim2Init *****************
  1377 ;; Defined at:
  1378 ;;		line 46 in file "timer.c"
  1379 ;; Parameters:    Size  Location     Type
  1380 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1381 ;; Auto vars:     Size  Location     Type
  1382 ;;		None
  1383 ;; Return value:  Size  Location     Type
  1384 ;;                  1    wreg      void 
  1385 ;; Registers used:
  1386 ;;		None
  1387 ;; Tracked objects:
  1388 ;;		On entry : 0/0
  1389 ;;		On exit  : 0/0
  1390 ;;		Unchanged: 0/0
  1391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1392 ;;      Params:         2       0       0       0       0       0       0
  1393 ;;      Locals:         0       0       0       0       0       0       0
  1394 ;;      Temps:          0       0       0       0       0       0       0
  1395 ;;      Totals:         2       0       0       0       0       0       0
  1396 ;;Total ram usage:        2 bytes
  1397 ;; Hardware stack levels used:    1
  1398 ;; Hardware stack levels required when called:    4
  1399 ;; This function calls:
  1400 ;;		Nothing
  1401 ;; This function is called by:
  1402 ;;		_main
  1403 ;; This function uses a non-reentrant model
  1404 ;;
  1405                           
  1406                           	psect	text2
  1407  002520                     __ptext2:
  1408                           	callstack 0
  1409  002520                     _tim2Init:
  1410                           	callstack 0
  1411  002520  FFFF               	dw	65535	; assembler added errata NOP
  1412  002522                     
  1413                           ;timer.c: 47:     T2CONbits.TMR2ON = 0;
  1414  002522  94CA               	bcf	202,2,c	;volatile
  1415                           
  1416                           ;timer.c: 48:     T2CONbits.T2CKPS1 = 1;
  1417  002524  82CA               	bsf	202,1,c	;volatile
  1418                           
  1419                           ;timer.c: 52:     pwmPeriod = _pwmPeriod;
  1420  002526  C012  F04F         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1421  00252A  C013  F050         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1422  00252E  0012               	return		;funcret
  1423  002530  FFFF               	dw	65535	; errata NOP
  1424  002532                     __end_of_tim2Init:
  1425                           	callstack 0
  1426                           
  1427 ;; *************** function _tim1Init *****************
  1428 ;; Defined at:
  1429 ;;		line 33 in file "timer.c"
  1430 ;; Parameters:    Size  Location     Type
  1431 ;;		None
  1432 ;; Auto vars:     Size  Location     Type
  1433 ;;		None
  1434 ;; Return value:  Size  Location     Type
  1435 ;;                  1    wreg      void 
  1436 ;; Registers used:
  1437 ;;		wreg, status,2
  1438 ;; Tracked objects:
  1439 ;;		On entry : 0/0
  1440 ;;		On exit  : 0/0
  1441 ;;		Unchanged: 0/0
  1442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1443 ;;      Params:         0       0       0       0       0       0       0
  1444 ;;      Locals:         0       0       0       0       0       0       0
  1445 ;;      Temps:          0       0       0       0       0       0       0
  1446 ;;      Totals:         0       0       0       0       0       0       0
  1447 ;;Total ram usage:        0 bytes
  1448 ;; Hardware stack levels used:    1
  1449 ;; Hardware stack levels required when called:    4
  1450 ;; This function calls:
  1451 ;;		Nothing
  1452 ;; This function is called by:
  1453 ;;		_main
  1454 ;; This function uses a non-reentrant model
  1455 ;;
  1456                           
  1457                           	psect	text3
  1458  002568                     __ptext3:
  1459                           	callstack 0
  1460  002568                     _tim1Init:
  1461                           	callstack 0
  1462  002568  FFFF               	dw	65535	; assembler added errata NOP
  1463  00256A                     
  1464                           ;timer.c: 34:     T1CONbits.T1CKPS = 0x03;
  1465  00256A  0E30               	movlw	48
  1466  00256C  12CD               	iorwf	205,f,c	;volatile
  1467  00256E                     
  1468                           ;timer.c: 35:     T1CONbits.TMR1CS = 0;
  1469  00256E  92CD               	bcf	205,1,c	;volatile
  1470  002570                     
  1471                           ;timer.c: 37:     T1CONbits.TMR1ON = 1;
  1472  002570  80CD               	bsf	205,0,c	;volatile
  1473  002572  0012               	return		;funcret
  1474  002574  FFFF               	dw	65535	; errata NOP
  1475  002576                     __end_of_tim1Init:
  1476                           	callstack 0
  1477                           
  1478 ;; *************** function _tim0Init *****************
  1479 ;; Defined at:
  1480 ;;		line 21 in file "timer.c"
  1481 ;; Parameters:    Size  Location     Type
  1482 ;;		None
  1483 ;; Auto vars:     Size  Location     Type
  1484 ;;		None
  1485 ;; Return value:  Size  Location     Type
  1486 ;;                  1    wreg      void 
  1487 ;; Registers used:
  1488 ;;		wreg, status,2
  1489 ;; Tracked objects:
  1490 ;;		On entry : 0/0
  1491 ;;		On exit  : 0/0
  1492 ;;		Unchanged: 0/0
  1493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1494 ;;      Params:         0       0       0       0       0       0       0
  1495 ;;      Locals:         0       0       0       0       0       0       0
  1496 ;;      Temps:          0       0       0       0       0       0       0
  1497 ;;      Totals:         0       0       0       0       0       0       0
  1498 ;;Total ram usage:        0 bytes
  1499 ;; Hardware stack levels used:    1
  1500 ;; Hardware stack levels required when called:    4
  1501 ;; This function calls:
  1502 ;;		Nothing
  1503 ;; This function is called by:
  1504 ;;		_main
  1505 ;; This function uses a non-reentrant model
  1506 ;;
  1507                           
  1508                           	psect	text4
  1509  002532                     __ptext4:
  1510                           	callstack 0
  1511  002532                     _tim0Init:
  1512                           	callstack 0
  1513  002532  FFFF               	dw	65535	; assembler added errata NOP
  1514  002534                     
  1515                           ;timer.c: 22:     T0CONbits.TMR0ON = 0;
  1516  002534  9ED5               	bcf	213,7,c	;volatile
  1517                           
  1518                           ;timer.c: 23:     T0CONbits.T08BIT = 0;
  1519  002536  9CD5               	bcf	213,6,c	;volatile
  1520                           
  1521                           ;timer.c: 24:     T0CONbits.T0CS = 0;
  1522  002538  9AD5               	bcf	213,5,c	;volatile
  1523                           
  1524                           ;timer.c: 25:     T0CONbits.PSA = 1;
  1525  00253A  86D5               	bsf	213,3,c	;volatile
  1526  00253C                     
  1527                           ;timer.c: 26:     T0CONbits.T0PS = 0x07;
  1528  00253C  0E07               	movlw	7
  1529  00253E  12D5               	iorwf	213,f,c	;volatile
  1530  002540  0012               	return		;funcret
  1531  002542  FFFF               	dw	65535	; errata NOP
  1532  002544                     __end_of_tim0Init:
  1533                           	callstack 0
  1534                           
  1535 ;; *************** function _storeData *****************
  1536 ;; Defined at:
  1537 ;;		line 176 in file "usart.c"
  1538 ;; Parameters:    Size  Location     Type
  1539 ;;  data            1    wreg     unsigned char 
  1540 ;; Auto vars:     Size  Location     Type
  1541 ;;  data            1   26[COMRAM] unsigned char 
  1542 ;; Return value:  Size  Location     Type
  1543 ;;                  1    wreg      void 
  1544 ;; Registers used:
  1545 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1546 ;; Tracked objects:
  1547 ;;		On entry : 0/0
  1548 ;;		On exit  : 0/0
  1549 ;;		Unchanged: 0/0
  1550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1551 ;;      Params:         0       0       0       0       0       0       0
  1552 ;;      Locals:         1       0       0       0       0       0       0
  1553 ;;      Temps:          2       0       0       0       0       0       0
  1554 ;;      Totals:         3       0       0       0       0       0       0
  1555 ;;Total ram usage:        3 bytes
  1556 ;; Hardware stack levels used:    1
  1557 ;; Hardware stack levels required when called:    6
  1558 ;; This function calls:
  1559 ;;		_printError
  1560 ;; This function is called by:
  1561 ;;		_main
  1562 ;; This function uses a non-reentrant model
  1563 ;;
  1564                           
  1565                           	psect	text5
  1566  001082                     __ptext5:
  1567                           	callstack 0
  1568  001082                     _storeData:
  1569                           	callstack 0
  1570  001082  FFFF               	dw	65535	; assembler added errata NOP
  1571                           
  1572                           ;incstack = 0
  1573                           ;storeData@data stored from wreg
  1574  001084  6E1B               	movwf	storeData@data^0,c
  1575  001086                     
  1576                           ;usart.c: 178:     static unsigned char counter = 0;;usart.c: 179:     static unsigned c
      +                          har mexLength = 5;;usart.c: 180:     static unsigned char command;;usart.c: 181:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 185:     receivedMex[counter] = data;
  1577  001086  0E43               	movlw	low storeData@receivedMex
  1578  001088  245E               	addwf	storeData@counter^0,w,c
  1579  00108A  6ED9               	movwf	fsr2l,c
  1580  00108C  6ADA               	clrf	fsr2h,c
  1581  00108E  0E00               	movlw	high storeData@receivedMex
  1582  001090  22DA               	addwfc	fsr2h,f,c
  1583  001092  C01B  FFDF         	movff	storeData@data,indf2
  1584  001096                     
  1585                           ;usart.c: 187:     counter++;
  1586  001096  2A5E               	incf	storeData@counter^0,f,c
  1587                           
  1588                           ;usart.c: 190:     switch(receivedMex[0]){
  1589  001098  EF5D  F008         	goto	l4448
  1590  00109C                     l4440:
  1591  00109C  FFFF               	dw	65535	; assembler added errata NOP
  1592                           
  1593                           ;usart.c: 192:             mexLength = 5;
  1594  00109E  0E05               	movlw	5
  1595  0010A0  6E6D               	movwf	storeData@mexLength^0,c
  1596                           
  1597                           ;usart.c: 193:             break;
  1598  0010A2  EF78  F008         	goto	l4450
  1599  0010A6                     l4442:
  1600  0010A6  FFFF               	dw	65535	; assembler added errata NOP
  1601                           
  1602                           ;usart.c: 195:             mexLength = 9;
  1603  0010A8  0E09               	movlw	9
  1604  0010AA  6E6D               	movwf	storeData@mexLength^0,c
  1605                           
  1606                           ;usart.c: 196:             break;
  1607  0010AC  EF78  F008         	goto	l4450
  1608  0010B0                     l4444:
  1609  0010B0  FFFF               	dw	65535	; assembler added errata NOP
  1610                           
  1611                           ;usart.c: 198:             mexLength = 1;
  1612  0010B2  0E01               	movlw	1
  1613  0010B4  6E6D               	movwf	storeData@mexLength^0,c
  1614                           
  1615                           ;usart.c: 199:             break;
  1616  0010B6  EF78  F008         	goto	l4450
  1617  0010BA                     l4448:
  1618  0010BA  FFFF               	dw	65535	; assembler added errata NOP
  1619  0010BC  5043               	movf	storeData@receivedMex^0,w,c
  1620  0010BE  6E19               	movwf	??_storeData^0,c
  1621  0010C0  6A1A               	clrf	(??_storeData+1)^0,c
  1622                           
  1623                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1624                           ; Switch size 1, requested type "simple"
  1625                           ; Number of cases is 1, Range of values is 0 to 0
  1626                           ; switch strategies available:
  1627                           ; Name         Instructions Cycles
  1628                           ; simple_byte            4     3 (average)
  1629                           ;	Chosen strategy is simple_byte
  1630  0010C2  501A               	movf	(??_storeData+1)^0,w,c
  1631  0010C4  0A00               	xorlw	0	; case 0
  1632  0010C6  B4D8               	btfsc	status,2,c
  1633  0010C8  EF68  F008         	goto	l4816
  1634  0010CC  EF78  F008         	goto	l4450
  1635  0010D0                     l4816:
  1636  0010D0  FFFF               	dw	65535	; assembler added errata NOP
  1637                           
  1638                           ; Switch size 1, requested type "simple"
  1639                           ; Number of cases is 3, Range of values is 0 to 2
  1640                           ; switch strategies available:
  1641                           ; Name         Instructions Cycles
  1642                           ; simple_byte           10     6 (average)
  1643                           ;	Chosen strategy is simple_byte
  1644  0010D2  5019               	movf	??_storeData^0,w,c
  1645  0010D4  0A00               	xorlw	0	; case 0
  1646  0010D6  B4D8               	btfsc	status,2,c
  1647  0010D8  EF4E  F008         	goto	l4440
  1648  0010DC  0A01               	xorlw	1	; case 1
  1649  0010DE  B4D8               	btfsc	status,2,c
  1650  0010E0  EF53  F008         	goto	l4442
  1651  0010E4  0A03               	xorlw	3	; case 2
  1652  0010E6  B4D8               	btfsc	status,2,c
  1653  0010E8  EF58  F008         	goto	l4444
  1654  0010EC  EF78  F008         	goto	l4450
  1655  0010F0                     l4450:
  1656  0010F0  FFFF               	dw	65535	; assembler added errata NOP
  1657                           
  1658                           ;usart.c: 206:     if(counter >= mexLength){
  1659  0010F2  506D               	movf	storeData@mexLength^0,w,c
  1660  0010F4  5C5E               	subwf	storeData@counter^0,w,c
  1661  0010F6  A0D8               	btfss	status,0,c
  1662  0010F8  EF80  F008         	goto	u3891
  1663  0010FC  EF83  F008         	goto	u3890
  1664  001100                     u3891:
  1665  001100  FFFF               	dw	65535	; assembler added errata NOP
  1666  001102  EF56  F009         	goto	l603
  1667  001106                     u3890:
  1668  001106  FFFF               	dw	65535	; assembler added errata NOP
  1669  001108                     
  1670                           ;usart.c: 207:         counter = 0;
  1671  001108  0E00               	movlw	0
  1672  00110A  6E5E               	movwf	storeData@counter^0,c
  1673                           
  1674                           ;usart.c: 210:         switch(receivedMex[0]){
  1675  00110C  EF3B  F009         	goto	l4488
  1676  001110                     l4454:
  1677  001110  FFFF               	dw	65535	; assembler added errata NOP
  1678                           
  1679                           ;usart.c: 212:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  1680  001112  5061               	movf	_dataCounter^0,w,c
  1681  001114  0D04               	mullw	4
  1682  001116  0EC6               	movlw	low _dataSequence
  1683  001118  24F3               	addwf	243,w,c
  1684  00111A  6ED9               	movwf	fsr2l,c
  1685  00111C  0E00               	movlw	high _dataSequence
  1686  00111E  20F4               	addwfc	prodh,w,c
  1687  001120  6EDA               	movwf	fsr2h,c
  1688  001122  C044  FFDF         	movff	storeData@receivedMex+1,indf2
  1689                           
  1690                           ;usart.c: 213:                 dataSequence[dataCounter].posX = receivedMex[2] * 5;
  1691  001126  5061               	movf	_dataCounter^0,w,c
  1692  001128  0D04               	mullw	4
  1693  00112A  0EC7               	movlw	low (_dataSequence+1)
  1694  00112C  24F3               	addwf	243,w,c
  1695  00112E  6ED9               	movwf	fsr2l,c
  1696  001130  0E00               	movlw	high (_dataSequence+1)
  1697  001132  20F4               	addwfc	prodh,w,c
  1698  001134  6EDA               	movwf	fsr2h,c
  1699  001136  5045               	movf	(storeData@receivedMex+2)^0,w,c
  1700  001138  0D05               	mullw	5
  1701  00113A  CFF3 FFDF          	movff	prodl,indf2
  1702                           
  1703                           ;usart.c: 214:                 dataSequence[dataCounter].posY = receivedMex[3] * 5;
  1704  00113E  5061               	movf	_dataCounter^0,w,c
  1705  001140  0D04               	mullw	4
  1706  001142  0EC8               	movlw	low (_dataSequence+2)
  1707  001144  24F3               	addwf	243,w,c
  1708  001146  6ED9               	movwf	fsr2l,c
  1709  001148  0E00               	movlw	high (_dataSequence+2)
  1710  00114A  20F4               	addwfc	prodh,w,c
  1711  00114C  6EDA               	movwf	fsr2h,c
  1712  00114E  5046               	movf	(storeData@receivedMex+3)^0,w,c
  1713  001150  0D05               	mullw	5
  1714  001152  CFF3 FFDF          	movff	prodl,indf2
  1715                           
  1716                           ;usart.c: 215:                 dataSequence[dataCounter].rotation = receivedMex[4];
  1717  001156  5061               	movf	_dataCounter^0,w,c
  1718  001158  0D04               	mullw	4
  1719  00115A  0EC9               	movlw	low (_dataSequence+3)
  1720  00115C  24F3               	addwf	243,w,c
  1721  00115E  6ED9               	movwf	fsr2l,c
  1722  001160  0E00               	movlw	high (_dataSequence+3)
  1723  001162  20F4               	addwfc	prodh,w,c
  1724  001164  6EDA               	movwf	fsr2h,c
  1725  001166  C047  FFDF         	movff	storeData@receivedMex+4,indf2
  1726                           
  1727                           ;usart.c: 218:                 if(dataSequence[dataCounter].posX > maxX ||
  1728  00116A  5061               	movf	_dataCounter^0,w,c
  1729  00116C  0D04               	mullw	4
  1730  00116E  0EC7               	movlw	low (_dataSequence+1)
  1731  001170  24F3               	addwf	243,w,c
  1732  001172  6ED9               	movwf	fsr2l,c
  1733  001174  0E00               	movlw	high (_dataSequence+1)
  1734  001176  20F4               	addwfc	prodh,w,c
  1735  001178  6EDA               	movwf	fsr2h,c
  1736  00117A  0E66               	movlw	102
  1737  00117C  60DF               	cpfslt	indf2,c
  1738  00117E  EFC3  F008         	goto	u3901
  1739  001182  EFC6  F008         	goto	u3900
  1740  001186                     u3901:
  1741  001186  FFFF               	dw	65535	; assembler added errata NOP
  1742  001188  EFD8  F008         	goto	l4458
  1743  00118C                     u3900:
  1744  00118C  FFFF               	dw	65535	; assembler added errata NOP
  1745  00118E  5061               	movf	_dataCounter^0,w,c
  1746  001190  0D04               	mullw	4
  1747  001192  0EC8               	movlw	low (_dataSequence+2)
  1748  001194  24F3               	addwf	243,w,c
  1749  001196  6ED9               	movwf	fsr2l,c
  1750  001198  0E00               	movlw	high (_dataSequence+2)
  1751  00119A  20F4               	addwfc	prodh,w,c
  1752  00119C  6EDA               	movwf	fsr2h,c
  1753  00119E  0E65               	movlw	101
  1754  0011A0  64DF               	cpfsgt	indf2,c
  1755  0011A2  EFD5  F008         	goto	u3911
  1756  0011A6  EFD8  F008         	goto	u3910
  1757  0011AA                     u3911:
  1758  0011AA  FFFF               	dw	65535	; assembler added errata NOP
  1759  0011AC  EFDE  F008         	goto	l4460
  1760  0011B0                     u3910:
  1761  0011B0                     l4458:
  1762  0011B0  FFFF               	dw	65535	; assembler added errata NOP
  1763                           
  1764                           ;usart.c: 219:                         dataSequence[dataCounter].posY > maxY){;usart.c: 
      +                          220:                     printError(5);
  1765  0011B2  0E05               	movlw	5
  1766  0011B4  EC99  F00D         	call	_printError
  1767                           
  1768                           ;usart.c: 221:                 }else{
  1769  0011B8  EF56  F009         	goto	l603
  1770  0011BC                     l4460:
  1771  0011BC  FFFF               	dw	65535	; assembler added errata NOP
  1772                           
  1773                           ;usart.c: 222:                     dataCounter++;
  1774  0011BE  2A61               	incf	_dataCounter^0,f,c
  1775  0011C0  EF56  F009         	goto	l603
  1776  0011C4                     l596:
  1777  0011C4  FFFF               	dw	65535	; assembler added errata NOP
  1778                           
  1779                           ;usart.c: 227:                 newSequenceData.L = receivedMex[1];
  1780  0011C6  C044  F0DA         	movff	storeData@receivedMex+1,_newSequenceData
  1781                           
  1782                           ;usart.c: 228:                 newSequenceData.W = receivedMex[2];
  1783  0011CA  C045  F0DB         	movff	storeData@receivedMex+2,_newSequenceData+1
  1784  0011CE                     
  1785                           ;usart.c: 229:                 newSequenceData.init_posX = receivedMex[3] * 5;
  1786  0011CE  5046               	movf	(storeData@receivedMex+3)^0,w,c
  1787  0011D0  0D05               	mullw	5
  1788  0011D2  CFF3 F0DC          	movff	prodl,_newSequenceData+2
  1789                           
  1790                           ;usart.c: 230:                 newSequenceData.init_posY = receivedMex[4] * 5;
  1791  0011D6  5047               	movf	(storeData@receivedMex+4)^0,w,c
  1792  0011D8  0D05               	mullw	5
  1793  0011DA  CFF3 F0DD          	movff	prodl,_newSequenceData+3
  1794  0011DE                     
  1795                           ;usart.c: 231:                 newSequenceData.init_rot = receivedMex[5];
  1796  0011DE  C048  F0DE         	movff	storeData@receivedMex+5,_newSequenceData+4
  1797                           
  1798                           ;usart.c: 232:                 newSequenceData.end_posX = receivedMex[6] * 5;
  1799  0011E2  5049               	movf	(storeData@receivedMex+6)^0,w,c
  1800  0011E4  0D05               	mullw	5
  1801  0011E6  CFF3 F0DF          	movff	prodl,_newSequenceData+5
  1802                           
  1803                           ;usart.c: 233:                 newSequenceData.end_posY = receivedMex[7] * 5;
  1804  0011EA  504A               	movf	(storeData@receivedMex+7)^0,w,c
  1805  0011EC  0D05               	mullw	5
  1806  0011EE  CFF3 F0E0          	movff	prodl,_newSequenceData+6
  1807  0011F2                     
  1808                           ;usart.c: 234:                 newSequenceData.end_rot = receivedMex[8];
  1809  0011F2  C04B  F0E1         	movff	storeData@receivedMex+8,_newSequenceData+7
  1810  0011F6                     
  1811                           ;usart.c: 237:                 if(newSequenceData.init_posX > maxFeedX ||
  1812  0011F6  0E1F               	movlw	31
  1813  0011F8  0100               	movlb	0	; () banked
  1814  0011FA  61DC               	cpfslt	(_newSequenceData+2)& (0+255),b
  1815  0011FC  EF02  F009         	goto	u3921
  1816  001200  EF05  F009         	goto	u3920
  1817  001204                     u3921:
  1818  001204  FFFF               	dw	65535	; assembler added errata NOP
  1819  001206  EF23  F009         	goto	l4476
  1820  00120A                     u3920:
  1821  00120A  FFFF               	dw	65535	; assembler added errata NOP
  1822  00120C                     
  1823                           ; BSR set to: 0
  1824  00120C  0E66               	movlw	102
  1825  00120E  61DF               	cpfslt	(_newSequenceData+5)& (0+255),b
  1826  001210  EF0C  F009         	goto	u3931
  1827  001214  EF0F  F009         	goto	u3930
  1828  001218                     u3931:
  1829  001218  FFFF               	dw	65535	; assembler added errata NOP
  1830  00121A  EF23  F009         	goto	l4476
  1831  00121E                     u3930:
  1832  00121E  FFFF               	dw	65535	; assembler added errata NOP
  1833  001220                     
  1834                           ; BSR set to: 0
  1835  001220  0E65               	movlw	101
  1836  001222  61DD               	cpfslt	(_newSequenceData+3)& (0+255),b
  1837  001224  EF16  F009         	goto	u3941
  1838  001228  EF19  F009         	goto	u3940
  1839  00122C                     u3941:
  1840  00122C  FFFF               	dw	65535	; assembler added errata NOP
  1841  00122E  EF23  F009         	goto	l4476
  1842  001232                     u3940:
  1843  001232  FFFF               	dw	65535	; assembler added errata NOP
  1844  001234                     
  1845                           ; BSR set to: 0
  1846  001234  0E65               	movlw	101
  1847  001236  65E0               	cpfsgt	(_newSequenceData+6)& (0+255),b
  1848  001238  EF20  F009         	goto	u3951
  1849  00123C  EF23  F009         	goto	u3950
  1850  001240                     u3951:
  1851  001240  FFFF               	dw	65535	; assembler added errata NOP
  1852  001242  EF2B  F009         	goto	l4480
  1853  001246                     u3950:
  1854  001246                     l4476:
  1855  001246  FFFF               	dw	65535	; assembler added errata NOP
  1856                           
  1857                           ; BSR set to: 0
  1858                           ;usart.c: 240:                         newSequenceData.end_posY > maxY){;usart.c: 241:  
      +                                             _newSequence = 0;
  1859  001248  0E00               	movlw	0
  1860  00124A  6E5F               	movwf	__newSequence^0,c
  1861  00124C                     
  1862                           ; BSR set to: 0
  1863                           ;usart.c: 242:                     printError(5);
  1864  00124C  0E05               	movlw	5
  1865  00124E  EC99  F00D         	call	_printError
  1866                           
  1867                           ;usart.c: 243:                 }else{
  1868  001252  EF56  F009         	goto	l603
  1869  001256                     l4480:
  1870  001256  FFFF               	dw	65535	; assembler added errata NOP
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;usart.c: 244:                     _newSequence = 1;
  1874  001258  0E01               	movlw	1
  1875  00125A  6E5F               	movwf	__newSequence^0,c
  1876  00125C  EF56  F009         	goto	l603
  1877  001260                     l4482:
  1878  001260  FFFF               	dw	65535	; assembler added errata NOP
  1879                           
  1880                           ;usart.c: 249:                 _fatalError = 1;
  1881  001262  0E01               	movlw	1
  1882  001264  6E60               	movwf	__fatalError^0,c
  1883                           
  1884                           ;usart.c: 250:                 break;
  1885  001266  EF56  F009         	goto	l603
  1886  00126A                     l4484:
  1887  00126A  FFFF               	dw	65535	; assembler added errata NOP
  1888                           
  1889                           ;usart.c: 253:                 printError(8);
  1890  00126C  0E08               	movlw	8
  1891  00126E  EC99  F00D         	call	_printError
  1892                           
  1893                           ;usart.c: 254:                 break;
  1894  001272  EF56  F009         	goto	l603
  1895  001276                     l4488:
  1896  001276  FFFF               	dw	65535	; assembler added errata NOP
  1897  001278  5043               	movf	storeData@receivedMex^0,w,c
  1898  00127A  6E19               	movwf	??_storeData^0,c
  1899  00127C  6A1A               	clrf	(??_storeData+1)^0,c
  1900                           
  1901                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1902                           ; Switch size 1, requested type "simple"
  1903                           ; Number of cases is 1, Range of values is 0 to 0
  1904                           ; switch strategies available:
  1905                           ; Name         Instructions Cycles
  1906                           ; simple_byte            4     3 (average)
  1907                           ;	Chosen strategy is simple_byte
  1908  00127E  501A               	movf	(??_storeData+1)^0,w,c
  1909  001280  0A00               	xorlw	0	; case 0
  1910  001282  B4D8               	btfsc	status,2,c
  1911  001284  EF46  F009         	goto	l4818
  1912  001288  EF35  F009         	goto	l4484
  1913  00128C                     l4818:
  1914  00128C  FFFF               	dw	65535	; assembler added errata NOP
  1915                           
  1916                           ; Switch size 1, requested type "simple"
  1917                           ; Number of cases is 3, Range of values is 0 to 2
  1918                           ; switch strategies available:
  1919                           ; Name         Instructions Cycles
  1920                           ; simple_byte           10     6 (average)
  1921                           ;	Chosen strategy is simple_byte
  1922  00128E  5019               	movf	??_storeData^0,w,c
  1923  001290  0A00               	xorlw	0	; case 0
  1924  001292  B4D8               	btfsc	status,2,c
  1925  001294  EF88  F008         	goto	l4454
  1926  001298  0A01               	xorlw	1	; case 1
  1927  00129A  B4D8               	btfsc	status,2,c
  1928  00129C  EFE2  F008         	goto	l596
  1929  0012A0  0A03               	xorlw	3	; case 2
  1930  0012A2  B4D8               	btfsc	status,2,c
  1931  0012A4  EF30  F009         	goto	l4482
  1932  0012A8  EF35  F009         	goto	l4484
  1933  0012AC                     l603:
  1934  0012AC  FFFF               	dw	65535	; assembler added errata NOP
  1935  0012AE  0012               	return		;funcret
  1936  0012B0  FFFF               	dw	65535	; errata NOP
  1937  0012B2                     __end_of_storeData:
  1938                           	callstack 0
  1939                           
  1940 ;; *************** function _printError *****************
  1941 ;; Defined at:
  1942 ;;		line 123 in file "usart.c"
  1943 ;; Parameters:    Size  Location     Type
  1944 ;;  errCode         1    wreg     unsigned char 
  1945 ;; Auto vars:     Size  Location     Type
  1946 ;;  errCode         1   23[COMRAM] unsigned char 
  1947 ;; Return value:  Size  Location     Type
  1948 ;;                  1    wreg      void 
  1949 ;; Registers used:
  1950 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1951 ;; Tracked objects:
  1952 ;;		On entry : 0/0
  1953 ;;		On exit  : 0/0
  1954 ;;		Unchanged: 0/0
  1955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1956 ;;      Params:         0       0       0       0       0       0       0
  1957 ;;      Locals:         1       0       0       0       0       0       0
  1958 ;;      Temps:          2       0       0       0       0       0       0
  1959 ;;      Totals:         3       0       0       0       0       0       0
  1960 ;;Total ram usage:        3 bytes
  1961 ;; Hardware stack levels used:    1
  1962 ;; Hardware stack levels required when called:    5
  1963 ;; This function calls:
  1964 ;;		_uartTx
  1965 ;; This function is called by:
  1966 ;;		_main
  1967 ;;		_storeData
  1968 ;; This function uses a non-reentrant model
  1969 ;;
  1970                           
  1971                           	psect	text6
  1972  001B32                     __ptext6:
  1973                           	callstack 0
  1974  001B32                     _printError:
  1975                           	callstack 0
  1976  001B32  FFFF               	dw	65535	; assembler added errata NOP
  1977                           
  1978                           ;incstack = 0
  1979                           ;printError@errCode stored from wreg
  1980  001B34  6E18               	movwf	printError@errCode^0,c
  1981  001B36                     
  1982                           ;usart.c: 125:     switch(errCode){
  1983  001B36  EFF5  F00D         	goto	l4296
  1984  001B3A                     l4278:
  1985  001B3A  FFFF               	dw	65535	; assembler added errata NOP
  1986                           
  1987                           ;usart.c: 127:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  1988  001B3C  0E90               	movlw	low _errString_Feed
  1989  001B3E  6E12               	movwf	uartTx@ptr^0,c
  1990  001B40  0E00               	movlw	high _errString_Feed
  1991  001B42  6E13               	movwf	(uartTx@ptr+1)^0,c
  1992  001B44  0E1E               	movlw	30
  1993  001B46  6E14               	movwf	uartTx@length^0,c
  1994  001B48  EC92  F011         	call	_uartTx	;wreg free
  1995                           
  1996                           ;usart.c: 128:             break;
  1997  001B4C  EF24  F00E         	goto	l562
  1998  001B50                     l4280:
  1999  001B50  FFFF               	dw	65535	; assembler added errata NOP
  2000                           
  2001                           ;usart.c: 130:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  2002  001B52  0E5E               	movlw	low _errString_ZEND
  2003  001B54  6E12               	movwf	uartTx@ptr^0,c
  2004  001B56  0E01               	movlw	high _errString_ZEND
  2005  001B58  6E13               	movwf	(uartTx@ptr+1)^0,c
  2006  001B5A  0E29               	movlw	41
  2007  001B5C  6E14               	movwf	uartTx@length^0,c
  2008  001B5E  EC92  F011         	call	_uartTx	;wreg free
  2009                           
  2010                           ;usart.c: 131:             break;
  2011  001B62  EF24  F00E         	goto	l562
  2012  001B66                     l4282:
  2013  001B66  FFFF               	dw	65535	; assembler added errata NOP
  2014                           
  2015                           ;usart.c: 133:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  2016  001B68  0E87               	movlw	low _errString_Reset
  2017  001B6A  6E12               	movwf	uartTx@ptr^0,c
  2018  001B6C  0E01               	movlw	high _errString_Reset
  2019  001B6E  6E13               	movwf	(uartTx@ptr+1)^0,c
  2020  001B70  0E28               	movlw	40
  2021  001B72  6E14               	movwf	uartTx@length^0,c
  2022  001B74  EC92  F011         	call	_uartTx	;wreg free
  2023                           
  2024                           ;usart.c: 134:             break;
  2025  001B78  EF24  F00E         	goto	l562
  2026  001B7C                     l4284:
  2027  001B7C  FFFF               	dw	65535	; assembler added errata NOP
  2028                           
  2029                           ;usart.c: 136:             uartTx(&errString_Point[0], sizeof(errString_Point));
  2030  001B7E  0E35               	movlw	low _errString_Point
  2031  001B80  6E12               	movwf	uartTx@ptr^0,c
  2032  001B82  0E01               	movlw	high _errString_Point
  2033  001B84  6E13               	movwf	(uartTx@ptr+1)^0,c
  2034  001B86  0E29               	movlw	41
  2035  001B88  6E14               	movwf	uartTx@length^0,c
  2036  001B8A  EC92  F011         	call	_uartTx	;wreg free
  2037                           
  2038                           ;usart.c: 137:             break;
  2039  001B8E  EF24  F00E         	goto	l562
  2040  001B92                     l4286:
  2041  001B92  FFFF               	dw	65535	; assembler added errata NOP
  2042                           
  2043                           ;usart.c: 139:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  2044  001B94  0ED6               	movlw	low _errString_Bound
  2045  001B96  6E12               	movwf	uartTx@ptr^0,c
  2046  001B98  0E01               	movlw	high _errString_Bound
  2047  001B9A  6E13               	movwf	(uartTx@ptr+1)^0,c
  2048  001B9C  0E21               	movlw	33
  2049  001B9E  6E14               	movwf	uartTx@length^0,c
  2050  001BA0  EC92  F011         	call	_uartTx	;wreg free
  2051                           
  2052                           ;usart.c: 140:             break;
  2053  001BA4  EF24  F00E         	goto	l562
  2054  001BA8                     l4288:
  2055  001BA8  FFFF               	dw	65535	; assembler added errata NOP
  2056                           
  2057                           ;usart.c: 142:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  2058  001BAA  0E00               	movlw	low _errString_PointZ
  2059  001BAC  6E12               	movwf	uartTx@ptr^0,c
  2060  001BAE  0E01               	movlw	high _errString_PointZ
  2061  001BB0  6E13               	movwf	(uartTx@ptr+1)^0,c
  2062  001BB2  0E35               	movlw	53
  2063  001BB4  6E14               	movwf	uartTx@length^0,c
  2064  001BB6  EC92  F011         	call	_uartTx	;wreg free
  2065                           
  2066                           ;usart.c: 143:             break;
  2067  001BBA  EF24  F00E         	goto	l562
  2068  001BBE                     l4290:
  2069  001BBE  FFFF               	dw	65535	; assembler added errata NOP
  2070                           
  2071                           ;usart.c: 145:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  2072  001BC0  0EAF               	movlw	low _errString_Fatal
  2073  001BC2  6E12               	movwf	uartTx@ptr^0,c
  2074  001BC4  0E01               	movlw	high _errString_Fatal
  2075  001BC6  6E13               	movwf	(uartTx@ptr+1)^0,c
  2076  001BC8  0E27               	movlw	39
  2077  001BCA  6E14               	movwf	uartTx@length^0,c
  2078  001BCC  EC92  F011         	call	_uartTx	;wreg free
  2079                           
  2080                           ;usart.c: 146:             break;
  2081  001BD0  EF24  F00E         	goto	l562
  2082  001BD4                     l4292:
  2083  001BD4  FFFF               	dw	65535	; assembler added errata NOP
  2084                           
  2085                           ;usart.c: 148:             uartTx(&errString_Command[0], sizeof(errString_Command));
  2086  001BD6  0EAE               	movlw	low _errString_Command
  2087  001BD8  6E12               	movwf	uartTx@ptr^0,c
  2088  001BDA  0E00               	movlw	high _errString_Command
  2089  001BDC  6E13               	movwf	(uartTx@ptr+1)^0,c
  2090  001BDE  0E18               	movlw	24
  2091  001BE0  6E14               	movwf	uartTx@length^0,c
  2092  001BE2  EC92  F011         	call	_uartTx	;wreg free
  2093                           
  2094                           ;usart.c: 149:             break;
  2095  001BE6  EF24  F00E         	goto	l562
  2096  001BEA                     l4296:
  2097  001BEA  FFFF               	dw	65535	; assembler added errata NOP
  2098  001BEC  5018               	movf	printError@errCode^0,w,c
  2099  001BEE  6E16               	movwf	??_printError^0,c
  2100  001BF0  6A17               	clrf	(??_printError+1)^0,c
  2101                           
  2102                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2103                           ; Switch size 1, requested type "simple"
  2104                           ; Number of cases is 1, Range of values is 0 to 0
  2105                           ; switch strategies available:
  2106                           ; Name         Instructions Cycles
  2107                           ; simple_byte            4     3 (average)
  2108                           ;	Chosen strategy is simple_byte
  2109  001BF2  5017               	movf	(??_printError+1)^0,w,c
  2110  001BF4  0A00               	xorlw	0	; case 0
  2111  001BF6  B4D8               	btfsc	status,2,c
  2112  001BF8  EF00  F00E         	goto	l4820
  2113  001BFC  EF24  F00E         	goto	l562
  2114  001C00                     l4820:
  2115  001C00  FFFF               	dw	65535	; assembler added errata NOP
  2116                           
  2117                           ; Switch size 1, requested type "simple"
  2118                           ; Number of cases is 8, Range of values is 1 to 8
  2119                           ; switch strategies available:
  2120                           ; Name         Instructions Cycles
  2121                           ; simple_byte           25    13 (average)
  2122                           ;	Chosen strategy is simple_byte
  2123  001C02  5016               	movf	??_printError^0,w,c
  2124  001C04  0A01               	xorlw	1	; case 1
  2125  001C06  B4D8               	btfsc	status,2,c
  2126  001C08  EF9D  F00D         	goto	l4278
  2127  001C0C  0A03               	xorlw	3	; case 2
  2128  001C0E  B4D8               	btfsc	status,2,c
  2129  001C10  EFA8  F00D         	goto	l4280
  2130  001C14  0A01               	xorlw	1	; case 3
  2131  001C16  B4D8               	btfsc	status,2,c
  2132  001C18  EFB3  F00D         	goto	l4282
  2133  001C1C  0A07               	xorlw	7	; case 4
  2134  001C1E  B4D8               	btfsc	status,2,c
  2135  001C20  EFBE  F00D         	goto	l4284
  2136  001C24  0A01               	xorlw	1	; case 5
  2137  001C26  B4D8               	btfsc	status,2,c
  2138  001C28  EFC9  F00D         	goto	l4286
  2139  001C2C  0A03               	xorlw	3	; case 6
  2140  001C2E  B4D8               	btfsc	status,2,c
  2141  001C30  EFD4  F00D         	goto	l4288
  2142  001C34  0A01               	xorlw	1	; case 7
  2143  001C36  B4D8               	btfsc	status,2,c
  2144  001C38  EFDF  F00D         	goto	l4290
  2145  001C3C  0A0F               	xorlw	15	; case 8
  2146  001C3E  B4D8               	btfsc	status,2,c
  2147  001C40  EFEA  F00D         	goto	l4292
  2148  001C44  EF24  F00E         	goto	l562
  2149  001C48                     l562:
  2150  001C48  FFFF               	dw	65535	; assembler added errata NOP
  2151  001C4A  0012               	return		;funcret
  2152  001C4C  FFFF               	dw	65535	; errata NOP
  2153  001C4E                     __end_of_printError:
  2154                           	callstack 0
  2155                           
  2156 ;; *************** function _uartTx *****************
  2157 ;; Defined at:
  2158 ;;		line 160 in file "usart.c"
  2159 ;; Parameters:    Size  Location     Type
  2160 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  2161 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  2162 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  2163 ;;  length          1   19[COMRAM] unsigned char 
  2164 ;; Auto vars:     Size  Location     Type
  2165 ;;  i               1   20[COMRAM] unsigned char 
  2166 ;; Return value:  Size  Location     Type
  2167 ;;                  1    wreg      void 
  2168 ;; Registers used:
  2169 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2170 ;; Tracked objects:
  2171 ;;		On entry : 0/0
  2172 ;;		On exit  : 0/0
  2173 ;;		Unchanged: 0/0
  2174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2175 ;;      Params:         3       0       0       0       0       0       0
  2176 ;;      Locals:         1       0       0       0       0       0       0
  2177 ;;      Temps:          0       0       0       0       0       0       0
  2178 ;;      Totals:         4       0       0       0       0       0       0
  2179 ;;Total ram usage:        4 bytes
  2180 ;; Hardware stack levels used:    1
  2181 ;; Hardware stack levels required when called:    4
  2182 ;; This function calls:
  2183 ;;		Nothing
  2184 ;; This function is called by:
  2185 ;;		_printError
  2186 ;; This function uses a non-reentrant model
  2187 ;;
  2188                           
  2189                           	psect	text7
  2190  002324                     __ptext7:
  2191                           	callstack 0
  2192  002324                     _uartTx:
  2193                           	callstack 0
  2194  002324  FFFF               	dw	65535	; assembler added errata NOP
  2195  002326                     
  2196                           ;usart.c: 160: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 161: {;usa
      +                          rt.c: 163:     for(char i = 1; i < length; i++){
  2197  002326  0E01               	movlw	1
  2198  002328  6E15               	movwf	uartTx@i^0,c
  2199  00232A  EFAB  F011         	goto	l3782
  2200  00232E                     l3778:
  2201  00232E  FFFF               	dw	65535	; assembler added errata NOP
  2202                           
  2203                           ;usart.c: 165:         TXREG = *ptr;
  2204  002330  C012  FFD9         	movff	uartTx@ptr,fsr2l
  2205  002334  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  2206  002338  50DF               	movf	indf2,w,c
  2207  00233A  6EAD               	movwf	173,c	;volatile
  2208  00233C                     l567:
  2209  00233C  FFFF               	dw	65535	; assembler added errata NOP
  2210  00233E  A2AC               	btfss	172,1,c	;volatile
  2211  002340  EFA4  F011         	goto	u2881
  2212  002344  EFA7  F011         	goto	u2880
  2213  002348                     u2881:
  2214  002348  FFFF               	dw	65535	; assembler added errata NOP
  2215  00234A  EF9E  F011         	goto	l567
  2216  00234E                     u2880:
  2217  00234E  FFFF               	dw	65535	; assembler added errata NOP
  2218  002350                     
  2219                           ;usart.c: 169:         ptr++;
  2220  002350  4A12               	infsnz	uartTx@ptr^0,f,c
  2221  002352  2A13               	incf	(uartTx@ptr+1)^0,f,c
  2222                           
  2223                           ;usart.c: 170:     }
  2224  002354  2A15               	incf	uartTx@i^0,f,c
  2225  002356                     l3782:
  2226  002356  FFFF               	dw	65535	; assembler added errata NOP
  2227  002358  5014               	movf	uartTx@length^0,w,c
  2228  00235A  5C15               	subwf	uartTx@i^0,w,c
  2229  00235C  A0D8               	btfss	status,0,c
  2230  00235E  EFB3  F011         	goto	u2891
  2231  002362  EFB6  F011         	goto	u2890
  2232  002366                     u2891:
  2233  002366  FFFF               	dw	65535	; assembler added errata NOP
  2234  002368  EF97  F011         	goto	l3778
  2235  00236C                     u2890:
  2236  00236C  FFFF               	dw	65535	; assembler added errata NOP
  2237  00236E  0012               	return		;funcret
  2238  002370  FFFF               	dw	65535	; errata NOP
  2239  002372                     __end_of_uartTx:
  2240                           	callstack 0
  2241                           
  2242 ;; *************** function _shiftData *****************
  2243 ;; Defined at:
  2244 ;;		line 93 in file "usart.c"
  2245 ;; Parameters:    Size  Location     Type
  2246 ;;		None
  2247 ;; Auto vars:     Size  Location     Type
  2248 ;;  i               1   19[COMRAM] unsigned char 
  2249 ;; Return value:  Size  Location     Type
  2250 ;;                  1    wreg      void 
  2251 ;; Registers used:
  2252 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2253 ;; Tracked objects:
  2254 ;;		On entry : 0/0
  2255 ;;		On exit  : 0/0
  2256 ;;		Unchanged: 0/0
  2257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2258 ;;      Params:         0       0       0       0       0       0       0
  2259 ;;      Locals:         1       0       0       0       0       0       0
  2260 ;;      Temps:          2       0       0       0       0       0       0
  2261 ;;      Totals:         3       0       0       0       0       0       0
  2262 ;;Total ram usage:        3 bytes
  2263 ;; Hardware stack levels used:    1
  2264 ;; Hardware stack levels required when called:    4
  2265 ;; This function calls:
  2266 ;;		Nothing
  2267 ;; This function is called by:
  2268 ;;		_main
  2269 ;; This function uses a non-reentrant model
  2270 ;;
  2271                           
  2272                           	psect	text8
  2273  0022C4                     __ptext8:
  2274                           	callstack 0
  2275  0022C4                     _shiftData:
  2276                           	callstack 0
  2277  0022C4  FFFF               	dw	65535	; assembler added errata NOP
  2278  0022C6                     
  2279                           ;usart.c: 94:     char i;;usart.c: 96:     for(i = 0; i < 4; i++){
  2280  0022C6  0E00               	movlw	0
  2281  0022C8  6E14               	movwf	shiftData@i^0,c
  2282  0022CA                     l4610:
  2283  0022CA  FFFF               	dw	65535	; assembler added errata NOP
  2284                           
  2285                           ;usart.c: 97:         dataSequence[i] = dataSequence[i+1];
  2286  0022CC  5014               	movf	shiftData@i^0,w,c
  2287  0022CE  6E12               	movwf	??_shiftData^0,c
  2288  0022D0  6A13               	clrf	(??_shiftData+1)^0,c
  2289  0022D2  90D8               	bcf	status,0,c
  2290  0022D4  3612               	rlcf	??_shiftData^0,f,c
  2291  0022D6  3613               	rlcf	(??_shiftData+1)^0,f,c
  2292  0022D8  90D8               	bcf	status,0,c
  2293  0022DA  3612               	rlcf	??_shiftData^0,f,c
  2294  0022DC  3613               	rlcf	(??_shiftData+1)^0,f,c
  2295  0022DE  0ECA               	movlw	low (_dataSequence+4)
  2296  0022E0  2412               	addwf	??_shiftData^0,w,c
  2297  0022E2  6ED9               	movwf	fsr2l,c
  2298  0022E4  0E00               	movlw	high (_dataSequence+4)
  2299  0022E6  2013               	addwfc	(??_shiftData+1)^0,w,c
  2300  0022E8  6EDA               	movwf	fsr2h,c
  2301  0022EA  5014               	movf	shiftData@i^0,w,c
  2302  0022EC  0D04               	mullw	4
  2303  0022EE  0EC6               	movlw	low _dataSequence
  2304  0022F0  24F3               	addwf	243,w,c
  2305  0022F2  6EE1               	movwf	fsr1l,c
  2306  0022F4  0E00               	movlw	high _dataSequence
  2307  0022F6  20F4               	addwfc	prodh,w,c
  2308  0022F8  6EE2               	movwf	fsr1h,c
  2309  0022FA  CFDE FFE6          	movff	postinc2,postinc1
  2310  0022FE  CFDE FFE6          	movff	postinc2,postinc1
  2311  002302  CFDE FFE6          	movff	postinc2,postinc1
  2312  002306  CFDE FFE6          	movff	postinc2,postinc1
  2313  00230A                     
  2314                           ;usart.c: 98:     }
  2315  00230A  2A14               	incf	shiftData@i^0,f,c
  2316  00230C  0E03               	movlw	3
  2317  00230E  6414               	cpfsgt	shiftData@i^0,c
  2318  002310  EF8C  F011         	goto	u4021
  2319  002314  EF8F  F011         	goto	u4020
  2320  002318                     u4021:
  2321  002318  FFFF               	dw	65535	; assembler added errata NOP
  2322  00231A  EF65  F011         	goto	l4610
  2323  00231E                     u4020:
  2324  00231E  FFFF               	dw	65535	; assembler added errata NOP
  2325  002320  0012               	return		;funcret
  2326  002322  FFFF               	dw	65535	; errata NOP
  2327  002324                     __end_of_shiftData:
  2328                           	callstack 0
  2329                           
  2330 ;; *************** function _resetPosition *****************
  2331 ;; Defined at:
  2332 ;;		line 162 in file "motors.c"
  2333 ;; Parameters:    Size  Location     Type
  2334 ;;		None
  2335 ;; Auto vars:     Size  Location     Type
  2336 ;;  keepMovingZ     1   22[COMRAM] unsigned char 
  2337 ;;  keepMovingY     1   21[COMRAM] unsigned char 
  2338 ;;  keepMovingX     1   20[COMRAM] unsigned char 
  2339 ;; Return value:  Size  Location     Type
  2340 ;;                  1    wreg      unsigned char 
  2341 ;; Registers used:
  2342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2343 ;; Tracked objects:
  2344 ;;		On entry : 0/0
  2345 ;;		On exit  : 0/0
  2346 ;;		Unchanged: 0/0
  2347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2348 ;;      Params:         0       0       0       0       0       0       0
  2349 ;;      Locals:         3       0       0       0       0       0       0
  2350 ;;      Temps:          0       0       0       0       0       0       0
  2351 ;;      Totals:         3       0       0       0       0       0       0
  2352 ;;Total ram usage:        3 bytes
  2353 ;; Hardware stack levels used:    1
  2354 ;; Hardware stack levels required when called:    5
  2355 ;; This function calls:
  2356 ;;		_resetStep
  2357 ;;		_resetTM0_Temp
  2358 ;;		_resetTM2_Temp
  2359 ;;		_stepMade
  2360 ;; This function is called by:
  2361 ;;		_main
  2362 ;; This function uses a non-reentrant model
  2363 ;;
  2364                           
  2365                           	psect	text9
  2366  0016DA                     __ptext9:
  2367                           	callstack 0
  2368  0016DA                     _resetPosition:
  2369                           	callstack 0
  2370  0016DA  FFFF               	dw	65535	; assembler added errata NOP
  2371  0016DC                     
  2372                           ;motors.c: 182:     motCounter[0][1] = -1;
  2373  0016DC  6868               	setf	(_motCounter+1)^0,c
  2374                           
  2375                           ;motors.c: 183:     motCounter[1][1] = -1;
  2376  0016DE  686A               	setf	(_motCounter+3)^0,c
  2377                           
  2378                           ;motors.c: 184:     motCounter[2][1] = -1;
  2379  0016E0  686C               	setf	(_motCounter+5)^0,c
  2380  0016E2                     
  2381                           ;motors.c: 189:     unsigned char keepMovingX = 1;
  2382  0016E2  0E01               	movlw	1
  2383  0016E4  6E15               	movwf	resetPosition@keepMovingX^0,c
  2384                           
  2385                           ;motors.c: 190:     unsigned char keepMovingY = 1;
  2386  0016E6  0E01               	movlw	1
  2387  0016E8  6E16               	movwf	resetPosition@keepMovingY^0,c
  2388                           
  2389                           ;motors.c: 191:     unsigned char keepMovingZ = 1;
  2390  0016EA  0E01               	movlw	1
  2391  0016EC  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2392  0016EE                     
  2393                           ;motors.c: 194:     T2CONbits.TMR2ON = 1;
  2394  0016EE  84CA               	bsf	202,2,c	;volatile
  2395                           
  2396                           ;motors.c: 196:     tm0Error = 0;
  2397  0016F0  0E00               	movlw	0
  2398  0016F2  6E5A               	movwf	(_tm0Error+1)^0,c
  2399  0016F4  0E00               	movlw	0
  2400  0016F6  6E59               	movwf	_tm0Error^0,c
  2401                           
  2402                           ;motors.c: 197:     tm0Limit = 200;
  2403  0016F8  0EC8               	movlw	200
  2404  0016FA  6E66               	movwf	_tm0Limit^0,c
  2405  0016FC                     
  2406                           ;motors.c: 198:     T0CONbits.TMR0ON = 1;
  2407  0016FC  8ED5               	bsf	213,7,c	;volatile
  2408                           
  2409                           ;motors.c: 200:     while(keepMovingX || keepMovingY || keepMovingZ){
  2410  0016FE  EF2F  F00C         	goto	l4376
  2411  001702                     l4334:
  2412  001702  FFFF               	dw	65535	; assembler added errata NOP
  2413                           
  2414                           ;motors.c: 202:         resetStep();
  2415  001704  EC09  F013         	call	_resetStep	;wreg free
  2416  001708                     
  2417                           ;motors.c: 205:         if(tm0Error){
  2418  001708  5059               	movf	_tm0Error^0,w,c
  2419  00170A  105A               	iorwf	(_tm0Error+1)^0,w,c
  2420  00170C  B4D8               	btfsc	status,2,c
  2421  00170E  EF8B  F00B         	goto	u3731
  2422  001712  EF8E  F00B         	goto	u3730
  2423  001716                     u3731:
  2424  001716  FFFF               	dw	65535	; assembler added errata NOP
  2425  001718  EF95  F00B         	goto	l131
  2426  00171C                     u3730:
  2427  00171C  FFFF               	dw	65535	; assembler added errata NOP
  2428  00171E                     
  2429                           ;motors.c: 213:             tm0Error = 3;
  2430  00171E  0E00               	movlw	0
  2431  001720  6E5A               	movwf	(_tm0Error+1)^0,c
  2432  001722  0E03               	movlw	3
  2433  001724  6E59               	movwf	_tm0Error^0,c
  2434                           
  2435                           ;motors.c: 214:             break;
  2436  001726  EF4D  F00C         	goto	l132
  2437  00172A                     l131:
  2438  00172A  FFFF               	dw	65535	; assembler added errata NOP
  2439                           
  2440                           ;motors.c: 221:         if(PORTEbits.RE0 || !keepMovingX){
  2441  00172C  B084               	btfsc	132,0,c	;volatile
  2442  00172E  EF9B  F00B         	goto	u3741
  2443  001732  EF9E  F00B         	goto	u3740
  2444  001736                     u3741:
  2445  001736  FFFF               	dw	65535	; assembler added errata NOP
  2446  001738  EFA8  F00B         	goto	l4342
  2447  00173C                     u3740:
  2448  00173C  FFFF               	dw	65535	; assembler added errata NOP
  2449  00173E  5015               	movf	resetPosition@keepMovingX^0,w,c
  2450  001740  A4D8               	btfss	status,2,c
  2451  001742  EFA5  F00B         	goto	u3751
  2452  001746  EFA8  F00B         	goto	u3750
  2453  00174A                     u3751:
  2454  00174A  FFFF               	dw	65535	; assembler added errata NOP
  2455  00174C  EFAD  F00B         	goto	l4344
  2456  001750                     u3750:
  2457  001750                     l4342:
  2458  001750  FFFF               	dw	65535	; assembler added errata NOP
  2459                           
  2460                           ;motors.c: 223:             keepMovingX = 0;
  2461  001752  0E00               	movlw	0
  2462  001754  6E15               	movwf	resetPosition@keepMovingX^0,c
  2463                           
  2464                           ;motors.c: 224:         }else{
  2465  001756  EFC4  F00B         	goto	l4350
  2466  00175A                     l4344:
  2467  00175A  FFFF               	dw	65535	; assembler added errata NOP
  2468                           
  2469                           ;motors.c: 230:             motCounter[0][0] += motCounter[0][1];
  2470  00175C  5068               	movf	(_motCounter+1)^0,w,c
  2471  00175E  2667               	addwf	_motCounter^0,f,c
  2472                           
  2473                           ;motors.c: 231:             if(motCounter[0][0] < 0){
  2474  001760  BE67               	btfsc	_motCounter^0,7,c
  2475  001762  EFB8  F00B         	goto	u3760
  2476  001766  EFB5  F00B         	goto	u3761
  2477  00176A                     u3761:
  2478  00176A  FFFF               	dw	65535	; assembler added errata NOP
  2479  00176C  EFBB  F00B         	goto	l4348
  2480  001770                     u3760:
  2481  001770  FFFF               	dw	65535	; assembler added errata NOP
  2482  001772                     
  2483                           ;motors.c: 232:                 motCounter[0][0] = 3;
  2484  001772  0E03               	movlw	3
  2485  001774  6E67               	movwf	_motCounter^0,c
  2486  001776                     l4348:
  2487  001776  FFFF               	dw	65535	; assembler added errata NOP
  2488                           
  2489                           ;motors.c: 235:             LATA = stepMot1[motCounter[0][0]];
  2490  001778  0E8C               	movlw	low _stepMot1
  2491  00177A  2467               	addwf	_motCounter^0,w,c
  2492  00177C  6ED9               	movwf	fsr2l,c
  2493  00177E  6ADA               	clrf	fsr2h,c
  2494  001780  0E00               	movlw	high _stepMot1
  2495  001782  22DA               	addwfc	fsr2h,f,c
  2496  001784  50DF               	movf	indf2,w,c
  2497  001786  6E89               	movwf	137,c	;volatile
  2498  001788                     l4350:
  2499  001788  FFFF               	dw	65535	; assembler added errata NOP
  2500                           
  2501                           ;motors.c: 240:         if(PORTEbits.RE1 || !keepMovingY){
  2502  00178A  B284               	btfsc	132,1,c	;volatile
  2503  00178C  EFCA  F00B         	goto	u3771
  2504  001790  EFCD  F00B         	goto	u3770
  2505  001794                     u3771:
  2506  001794  FFFF               	dw	65535	; assembler added errata NOP
  2507  001796  EFD7  F00B         	goto	l4354
  2508  00179A                     u3770:
  2509  00179A  FFFF               	dw	65535	; assembler added errata NOP
  2510  00179C  5016               	movf	resetPosition@keepMovingY^0,w,c
  2511  00179E  A4D8               	btfss	status,2,c
  2512  0017A0  EFD4  F00B         	goto	u3781
  2513  0017A4  EFD7  F00B         	goto	u3780
  2514  0017A8                     u3781:
  2515  0017A8  FFFF               	dw	65535	; assembler added errata NOP
  2516  0017AA  EFDC  F00B         	goto	l4356
  2517  0017AE                     u3780:
  2518  0017AE                     l4354:
  2519  0017AE  FFFF               	dw	65535	; assembler added errata NOP
  2520                           
  2521                           ;motors.c: 242:             keepMovingY = 0;
  2522  0017B0  0E00               	movlw	0
  2523  0017B2  6E16               	movwf	resetPosition@keepMovingY^0,c
  2524                           
  2525                           ;motors.c: 243:         }else{
  2526  0017B4  EFF3  F00B         	goto	l4362
  2527  0017B8                     l4356:
  2528  0017B8  FFFF               	dw	65535	; assembler added errata NOP
  2529                           
  2530                           ;motors.c: 249:             motCounter[1][0] += motCounter[1][1];
  2531  0017BA  506A               	movf	(_motCounter+3)^0,w,c
  2532  0017BC  2669               	addwf	(_motCounter+2)^0,f,c
  2533                           
  2534                           ;motors.c: 250:             if(motCounter[1][0] < 0){
  2535  0017BE  BE69               	btfsc	(_motCounter+2)^0,7,c
  2536  0017C0  EFE7  F00B         	goto	u3790
  2537  0017C4  EFE4  F00B         	goto	u3791
  2538  0017C8                     u3791:
  2539  0017C8  FFFF               	dw	65535	; assembler added errata NOP
  2540  0017CA  EFEA  F00B         	goto	l4360
  2541  0017CE                     u3790:
  2542  0017CE  FFFF               	dw	65535	; assembler added errata NOP
  2543  0017D0                     
  2544                           ;motors.c: 251:                 motCounter[1][0] = 3;
  2545  0017D0  0E03               	movlw	3
  2546  0017D2  6E69               	movwf	(_motCounter+2)^0,c
  2547  0017D4                     l4360:
  2548  0017D4  FFFF               	dw	65535	; assembler added errata NOP
  2549                           
  2550                           ;motors.c: 254:             LATB = stepMot2[motCounter[1][0]];
  2551  0017D6  0E88               	movlw	low _stepMot2
  2552  0017D8  2469               	addwf	(_motCounter+2)^0,w,c
  2553  0017DA  6ED9               	movwf	fsr2l,c
  2554  0017DC  6ADA               	clrf	fsr2h,c
  2555  0017DE  0E00               	movlw	high _stepMot2
  2556  0017E0  22DA               	addwfc	fsr2h,f,c
  2557  0017E2  50DF               	movf	indf2,w,c
  2558  0017E4  6E8A               	movwf	138,c	;volatile
  2559  0017E6                     l4362:
  2560  0017E6  FFFF               	dw	65535	; assembler added errata NOP
  2561                           
  2562                           ;motors.c: 259:         if(PORTEbits.RE2 || !keepMovingZ){
  2563  0017E8  B484               	btfsc	132,2,c	;volatile
  2564  0017EA  EFF9  F00B         	goto	u3801
  2565  0017EE  EFFC  F00B         	goto	u3800
  2566  0017F2                     u3801:
  2567  0017F2  FFFF               	dw	65535	; assembler added errata NOP
  2568  0017F4  EF06  F00C         	goto	l4366
  2569  0017F8                     u3800:
  2570  0017F8  FFFF               	dw	65535	; assembler added errata NOP
  2571  0017FA  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2572  0017FC  A4D8               	btfss	status,2,c
  2573  0017FE  EF03  F00C         	goto	u3811
  2574  001802  EF06  F00C         	goto	u3810
  2575  001806                     u3811:
  2576  001806  FFFF               	dw	65535	; assembler added errata NOP
  2577  001808  EF0B  F00C         	goto	l4368
  2578  00180C                     u3810:
  2579  00180C                     l4366:
  2580  00180C  FFFF               	dw	65535	; assembler added errata NOP
  2581                           
  2582                           ;motors.c: 261:             keepMovingZ = 0;
  2583  00180E  0E00               	movlw	0
  2584  001810  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2585                           
  2586                           ;motors.c: 262:         }else{
  2587  001812  EF22  F00C         	goto	l4374
  2588  001816                     l4368:
  2589  001816  FFFF               	dw	65535	; assembler added errata NOP
  2590                           
  2591                           ;motors.c: 268:             motCounter[2][0] += motCounter[2][1];
  2592  001818  506C               	movf	(_motCounter+5)^0,w,c
  2593  00181A  266B               	addwf	(_motCounter+4)^0,f,c
  2594                           
  2595                           ;motors.c: 269:             if(motCounter[2][0] < 0){
  2596  00181C  BE6B               	btfsc	(_motCounter+4)^0,7,c
  2597  00181E  EF16  F00C         	goto	u3820
  2598  001822  EF13  F00C         	goto	u3821
  2599  001826                     u3821:
  2600  001826  FFFF               	dw	65535	; assembler added errata NOP
  2601  001828  EF19  F00C         	goto	l4372
  2602  00182C                     u3820:
  2603  00182C  FFFF               	dw	65535	; assembler added errata NOP
  2604  00182E                     
  2605                           ;motors.c: 270:                 motCounter[2][0] = 3;
  2606  00182E  0E03               	movlw	3
  2607  001830  6E6B               	movwf	(_motCounter+4)^0,c
  2608  001832                     l4372:
  2609  001832  FFFF               	dw	65535	; assembler added errata NOP
  2610                           
  2611                           ;motors.c: 273:             LATC = stepMot3[motCounter[2][0]];
  2612  001834  0E84               	movlw	low _stepMot3
  2613  001836  246B               	addwf	(_motCounter+4)^0,w,c
  2614  001838  6ED9               	movwf	fsr2l,c
  2615  00183A  6ADA               	clrf	fsr2h,c
  2616  00183C  0E00               	movlw	high _stepMot3
  2617  00183E  22DA               	addwfc	fsr2h,f,c
  2618  001840  50DF               	movf	indf2,w,c
  2619  001842  6E8B               	movwf	139,c	;volatile
  2620  001844                     l4374:
  2621  001844  FFFF               	dw	65535	; assembler added errata NOP
  2622  001846  EC86  F012         	call	_stepMade	;wreg free
  2623  00184A  5012               	movf	?_stepMade^0,w,c
  2624  00184C  1013               	iorwf	(?_stepMade+1)^0,w,c
  2625  00184E  B4D8               	btfsc	status,2,c
  2626  001850  EF2C  F00C         	goto	u3831
  2627  001854  EF2F  F00C         	goto	u3830
  2628  001858                     u3831:
  2629  001858  FFFF               	dw	65535	; assembler added errata NOP
  2630  00185A  EF22  F00C         	goto	l4374
  2631  00185E                     u3830:
  2632  00185E                     l4376:
  2633  00185E  FFFF               	dw	65535	; assembler added errata NOP
  2634                           
  2635                           ;motors.c: 200:     while(keepMovingX || keepMovingY || keepMovingZ){
  2636  001860  5015               	movf	resetPosition@keepMovingX^0,w,c
  2637  001862  A4D8               	btfss	status,2,c
  2638  001864  EF36  F00C         	goto	u3841
  2639  001868  EF39  F00C         	goto	u3840
  2640  00186C                     u3841:
  2641  00186C  FFFF               	dw	65535	; assembler added errata NOP
  2642  00186E  EF81  F00B         	goto	l4334
  2643  001872                     u3840:
  2644  001872  FFFF               	dw	65535	; assembler added errata NOP
  2645  001874  5016               	movf	resetPosition@keepMovingY^0,w,c
  2646  001876  A4D8               	btfss	status,2,c
  2647  001878  EF40  F00C         	goto	u3851
  2648  00187C  EF43  F00C         	goto	u3850
  2649  001880                     u3851:
  2650  001880  FFFF               	dw	65535	; assembler added errata NOP
  2651  001882  EF81  F00B         	goto	l4334
  2652  001886                     u3850:
  2653  001886  FFFF               	dw	65535	; assembler added errata NOP
  2654  001888  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2655  00188A  A4D8               	btfss	status,2,c
  2656  00188C  EF4A  F00C         	goto	u3861
  2657  001890  EF4D  F00C         	goto	u3860
  2658  001894                     u3861:
  2659  001894  FFFF               	dw	65535	; assembler added errata NOP
  2660  001896  EF81  F00B         	goto	l4334
  2661  00189A                     u3860:
  2662  00189A                     l132:
  2663  00189A  FFFF               	dw	65535	; assembler added errata NOP
  2664                           
  2665                           ;motors.c: 293:     T0CONbits.TMR0ON = 0;
  2666  00189C  9ED5               	bcf	213,7,c	;volatile
  2667                           
  2668                           ;motors.c: 294:     T2CONbits.TMR2ON = 0;
  2669  00189E  94CA               	bcf	202,2,c	;volatile
  2670  0018A0                     
  2671                           ;motors.c: 296:     resetTM0_Temp();
  2672  0018A0  EC04  F013         	call	_resetTM0_Temp	;wreg free
  2673                           
  2674                           ;motors.c: 297:     resetTM2_Temp();
  2675  0018A4  ECA2  F012         	call	_resetTM2_Temp	;wreg free
  2676  0018A8                     
  2677                           ;motors.c: 299:     TMR0 = 0;
  2678  0018A8  0E00               	movlw	0
  2679  0018AA  6ED7               	movwf	215,c	;volatile
  2680  0018AC  0E00               	movlw	0
  2681  0018AE  6ED6               	movwf	214,c	;volatile
  2682  0018B0                     
  2683                           ;motors.c: 300:     TMR2 = 0;
  2684  0018B0  0E00               	movlw	0
  2685  0018B2  6ECC               	movwf	204,c	;volatile
  2686                           
  2687                           ;motors.c: 303:     resetStep();
  2688  0018B4  EC09  F013         	call	_resetStep	;wreg free
  2689  0018B8                     
  2690                           ;motors.c: 306:     return(tm0Error);
  2691  0018B8  5059               	movf	_tm0Error^0,w,c
  2692  0018BA  0012               	return		;funcret
  2693  0018BC  FFFF               	dw	65535	; errata NOP
  2694  0018BE                     __end_of_resetPosition:
  2695                           	callstack 0
  2696                           
  2697 ;; *************** function _resetNewSequence *****************
  2698 ;; Defined at:
  2699 ;;		line 85 in file "usart.c"
  2700 ;; Parameters:    Size  Location     Type
  2701 ;;		None
  2702 ;; Auto vars:     Size  Location     Type
  2703 ;;		None
  2704 ;; Return value:  Size  Location     Type
  2705 ;;                  1    wreg      void 
  2706 ;; Registers used:
  2707 ;;		wreg, status,2
  2708 ;; Tracked objects:
  2709 ;;		On entry : 0/0
  2710 ;;		On exit  : 0/0
  2711 ;;		Unchanged: 0/0
  2712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2713 ;;      Params:         0       0       0       0       0       0       0
  2714 ;;      Locals:         0       0       0       0       0       0       0
  2715 ;;      Temps:          0       0       0       0       0       0       0
  2716 ;;      Totals:         0       0       0       0       0       0       0
  2717 ;;Total ram usage:        0 bytes
  2718 ;; Hardware stack levels used:    1
  2719 ;; Hardware stack levels required when called:    4
  2720 ;; This function calls:
  2721 ;;		Nothing
  2722 ;; This function is called by:
  2723 ;;		_main
  2724 ;; This function uses a non-reentrant model
  2725 ;;
  2726                           
  2727                           	psect	text10
  2728  0025E0                     __ptext10:
  2729                           	callstack 0
  2730  0025E0                     _resetNewSequence:
  2731                           	callstack 0
  2732  0025E0  FFFF               	dw	65535	; assembler added errata NOP
  2733  0025E2                     
  2734                           ;usart.c: 86:     _newSequence = 0;
  2735  0025E2  0E00               	movlw	0
  2736  0025E4  6E5F               	movwf	__newSequence^0,c
  2737  0025E6  0012               	return		;funcret
  2738  0025E8  FFFF               	dw	65535	; errata NOP
  2739  0025EA                     __end_of_resetNewSequence:
  2740                           	callstack 0
  2741                           
  2742 ;; *************** function _reduceSeq *****************
  2743 ;; Defined at:
  2744 ;;		line 55 in file "usart.c"
  2745 ;; Parameters:    Size  Location     Type
  2746 ;;		None
  2747 ;; Auto vars:     Size  Location     Type
  2748 ;;		None
  2749 ;; Return value:  Size  Location     Type
  2750 ;;                  1    wreg      void 
  2751 ;; Registers used:
  2752 ;;		status,2, status,0
  2753 ;; Tracked objects:
  2754 ;;		On entry : 0/0
  2755 ;;		On exit  : 0/0
  2756 ;;		Unchanged: 0/0
  2757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2758 ;;      Params:         0       0       0       0       0       0       0
  2759 ;;      Locals:         0       0       0       0       0       0       0
  2760 ;;      Temps:          0       0       0       0       0       0       0
  2761 ;;      Totals:         0       0       0       0       0       0       0
  2762 ;;Total ram usage:        0 bytes
  2763 ;; Hardware stack levels used:    1
  2764 ;; Hardware stack levels required when called:    4
  2765 ;; This function calls:
  2766 ;;		Nothing
  2767 ;; This function is called by:
  2768 ;;		_main
  2769 ;; This function uses a non-reentrant model
  2770 ;;
  2771                           
  2772                           	psect	text11
  2773  00263A                     __ptext11:
  2774                           	callstack 0
  2775  00263A                     _reduceSeq:
  2776                           	callstack 0
  2777  00263A  FFFF               	dw	65535	; assembler added errata NOP
  2778  00263C                     
  2779                           ;usart.c: 56:     dataCounter--;
  2780  00263C  0661               	decf	_dataCounter^0,f,c
  2781  00263E  0012               	return		;funcret
  2782  002640  FFFF               	dw	65535	; errata NOP
  2783  002642                     __end_of_reduceSeq:
  2784                           	callstack 0
  2785                           
  2786 ;; *************** function _readSeq *****************
  2787 ;; Defined at:
  2788 ;;		line 69 in file "usart.c"
  2789 ;; Parameters:    Size  Location     Type
  2790 ;;		None
  2791 ;; Auto vars:     Size  Location     Type
  2792 ;;		None
  2793 ;; Return value:  Size  Location     Type
  2794 ;;                  1    wreg      unsigned char 
  2795 ;; Registers used:
  2796 ;;		wreg, status,2
  2797 ;; Tracked objects:
  2798 ;;		On entry : 0/0
  2799 ;;		On exit  : 0/0
  2800 ;;		Unchanged: 0/0
  2801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2802 ;;      Params:         0       0       0       0       0       0       0
  2803 ;;      Locals:         0       0       0       0       0       0       0
  2804 ;;      Temps:          0       0       0       0       0       0       0
  2805 ;;      Totals:         0       0       0       0       0       0       0
  2806 ;;Total ram usage:        0 bytes
  2807 ;; Hardware stack levels used:    1
  2808 ;; Hardware stack levels required when called:    4
  2809 ;; This function calls:
  2810 ;;		Nothing
  2811 ;; This function is called by:
  2812 ;;		_main
  2813 ;; This function uses a non-reentrant model
  2814 ;;
  2815                           
  2816                           	psect	text12
  2817  002642                     __ptext12:
  2818                           	callstack 0
  2819  002642                     _readSeq:
  2820                           	callstack 0
  2821  002642  FFFF               	dw	65535	; assembler added errata NOP
  2822  002644                     
  2823                           ;usart.c: 70:     return dataCounter;
  2824  002644  5061               	movf	_dataCounter^0,w,c
  2825  002646  0012               	return		;funcret
  2826  002648  FFFF               	dw	65535	; errata NOP
  2827  00264A                     __end_of_readSeq:
  2828                           	callstack 0
  2829                           
  2830 ;; *************** function _newSequence *****************
  2831 ;; Defined at:
  2832 ;;		line 77 in file "usart.c"
  2833 ;; Parameters:    Size  Location     Type
  2834 ;;		None
  2835 ;; Auto vars:     Size  Location     Type
  2836 ;;		None
  2837 ;; Return value:  Size  Location     Type
  2838 ;;                  1    wreg      unsigned char 
  2839 ;; Registers used:
  2840 ;;		wreg, status,2
  2841 ;; Tracked objects:
  2842 ;;		On entry : 0/0
  2843 ;;		On exit  : 0/0
  2844 ;;		Unchanged: 0/0
  2845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2846 ;;      Params:         0       0       0       0       0       0       0
  2847 ;;      Locals:         0       0       0       0       0       0       0
  2848 ;;      Temps:          0       0       0       0       0       0       0
  2849 ;;      Totals:         0       0       0       0       0       0       0
  2850 ;;Total ram usage:        0 bytes
  2851 ;; Hardware stack levels used:    1
  2852 ;; Hardware stack levels required when called:    4
  2853 ;; This function calls:
  2854 ;;		Nothing
  2855 ;; This function is called by:
  2856 ;;		_main
  2857 ;; This function uses a non-reentrant model
  2858 ;;
  2859                           
  2860                           	psect	text13
  2861  00264A                     __ptext13:
  2862                           	callstack 0
  2863  00264A                     _newSequence:
  2864                           	callstack 0
  2865  00264A  FFFF               	dw	65535	; assembler added errata NOP
  2866  00264C                     
  2867                           ;usart.c: 78:     return _newSequence;
  2868  00264C  505F               	movf	__newSequence^0,w,c
  2869  00264E  0012               	return		;funcret
  2870  002650  FFFF               	dw	65535	; errata NOP
  2871  002652                     __end_of_newSequence:
  2872                           	callstack 0
  2873                           
  2874 ;; *************** function _interruptInit *****************
  2875 ;; Defined at:
  2876 ;;		line 35 in file "interrupt.c"
  2877 ;; Parameters:    Size  Location     Type
  2878 ;;		None
  2879 ;; Auto vars:     Size  Location     Type
  2880 ;;		None
  2881 ;; Return value:  Size  Location     Type
  2882 ;;                  1    wreg      void 
  2883 ;; Registers used:
  2884 ;;		None
  2885 ;; Tracked objects:
  2886 ;;		On entry : 0/0
  2887 ;;		On exit  : 0/0
  2888 ;;		Unchanged: 0/0
  2889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2890 ;;      Params:         0       0       0       0       0       0       0
  2891 ;;      Locals:         0       0       0       0       0       0       0
  2892 ;;      Temps:          0       0       0       0       0       0       0
  2893 ;;      Totals:         0       0       0       0       0       0       0
  2894 ;;Total ram usage:        0 bytes
  2895 ;; Hardware stack levels used:    1
  2896 ;; Hardware stack levels required when called:    4
  2897 ;; This function calls:
  2898 ;;		Nothing
  2899 ;; This function is called by:
  2900 ;;		_main
  2901 ;; This function uses a non-reentrant model
  2902 ;;
  2903                           
  2904                           	psect	text14
  2905  002406                     __ptext14:
  2906                           	callstack 0
  2907  002406                     _interruptInit:
  2908                           	callstack 0
  2909  002406  FFFF               	dw	65535	; assembler added errata NOP
  2910  002408                     
  2911                           ;interrupt.c: 37:     if(!INTCONbits.GIE){
  2912  002408  BEF2               	btfsc	242,7,c	;volatile
  2913  00240A  EF09  F012         	goto	u3871
  2914  00240E  EF0C  F012         	goto	u3870
  2915  002412                     u3871:
  2916  002412  FFFF               	dw	65535	; assembler added errata NOP
  2917  002414  EF0E  F012         	goto	l451
  2918  002418                     u3870:
  2919  002418  FFFF               	dw	65535	; assembler added errata NOP
  2920  00241A                     
  2921                           ;interrupt.c: 38:         INTCONbits.GIE = 1;
  2922  00241A  8EF2               	bsf	242,7,c	;volatile
  2923  00241C                     l451:
  2924  00241C  FFFF               	dw	65535	; assembler added errata NOP
  2925                           
  2926                           ;interrupt.c: 40:     if(!INTCONbits.PEIE){
  2927  00241E  BCF2               	btfsc	242,6,c	;volatile
  2928  002420  EF14  F012         	goto	u3881
  2929  002424  EF17  F012         	goto	u3880
  2930  002428                     u3881:
  2931  002428  FFFF               	dw	65535	; assembler added errata NOP
  2932  00242A  EF19  F012         	goto	l452
  2933  00242E                     u3880:
  2934  00242E  FFFF               	dw	65535	; assembler added errata NOP
  2935  002430                     
  2936                           ;interrupt.c: 41:         INTCONbits.PEIE = 1;
  2937  002430  8CF2               	bsf	242,6,c	;volatile
  2938  002432                     l452:
  2939  002432  FFFF               	dw	65535	; assembler added errata NOP
  2940                           
  2941                           ;interrupt.c: 45:     RCONbits.IPEN = 1;
  2942  002434  8ED0               	bsf	208,7,c	;volatile
  2943                           
  2944                           ;interrupt.c: 46:     INTCONbits.T0IE = 1;
  2945  002436  8AF2               	bsf	242,5,c	;volatile
  2946                           
  2947                           ;interrupt.c: 47:     PIE1bits.TMR1IE = 1;
  2948  002438  809D               	bsf	157,0,c	;volatile
  2949                           
  2950                           ;interrupt.c: 48:     PIE1bits.TMR2IE = 1;
  2951  00243A  829D               	bsf	157,1,c	;volatile
  2952                           
  2953                           ;interrupt.c: 49:     PIE1bits.RC1IE = 1;
  2954  00243C  8A9D               	bsf	157,5,c	;volatile
  2955  00243E  0012               	return		;funcret
  2956  002440  FFFF               	dw	65535	; errata NOP
  2957  002442                     __end_of_interruptInit:
  2958                           	callstack 0
  2959                           
  2960 ;; *************** function _initPinMotors *****************
  2961 ;; Defined at:
  2962 ;;		line 46 in file "motors.c"
  2963 ;; Parameters:    Size  Location     Type
  2964 ;;		None
  2965 ;; Auto vars:     Size  Location     Type
  2966 ;;		None
  2967 ;; Return value:  Size  Location     Type
  2968 ;;                  1    wreg      void 
  2969 ;; Registers used:
  2970 ;;		wreg, status,2, status,0
  2971 ;; Tracked objects:
  2972 ;;		On entry : 0/0
  2973 ;;		On exit  : 0/0
  2974 ;;		Unchanged: 0/0
  2975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2976 ;;      Params:         0       0       0       0       0       0       0
  2977 ;;      Locals:         0       0       0       0       0       0       0
  2978 ;;      Temps:          0       0       0       0       0       0       0
  2979 ;;      Totals:         0       0       0       0       0       0       0
  2980 ;;Total ram usage:        0 bytes
  2981 ;; Hardware stack levels used:    1
  2982 ;; Hardware stack levels required when called:    4
  2983 ;; This function calls:
  2984 ;;		Nothing
  2985 ;; This function is called by:
  2986 ;;		_main
  2987 ;; This function uses a non-reentrant model
  2988 ;;
  2989                           
  2990                           	psect	text15
  2991  0024A2                     __ptext15:
  2992                           	callstack 0
  2993  0024A2                     _initPinMotors:
  2994                           	callstack 0
  2995  0024A2  FFFF               	dw	65535	; assembler added errata NOP
  2996  0024A4                     
  2997                           ;motors.c: 48:     ADCON1bits.PCFG = 0x06;
  2998  0024A4  50C1               	movf	193,w,c	;volatile
  2999  0024A6  0BF0               	andlw	-16
  3000  0024A8  0906               	iorlw	6
  3001  0024AA  6EC1               	movwf	193,c	;volatile
  3002  0024AC                     
  3003                           ;motors.c: 49:     TRISA &= 0b11010001;
  3004  0024AC  0ED1               	movlw	209
  3005  0024AE  1692               	andwf	146,f,c	;volatile
  3006  0024B0                     
  3007                           ;motors.c: 51:     TRISB &= 0b00000010;
  3008  0024B0  0E02               	movlw	2
  3009  0024B2  1693               	andwf	147,f,c	;volatile
  3010  0024B4                     
  3011                           ;motors.c: 52:     TRISC &= 0b11000000;
  3012  0024B4  0EC0               	movlw	192
  3013  0024B6  1694               	andwf	148,f,c	;volatile
  3014  0024B8                     
  3015                           ;motors.c: 53:     TRISD &= 0b11000000;
  3016  0024B8  0EC0               	movlw	192
  3017  0024BA  1695               	andwf	149,f,c	;volatile
  3018  0024BC                     
  3019                           ;motors.c: 56:     TRISEbits.TRISE0 = 1;
  3020  0024BC  8096               	bsf	150,0,c	;volatile
  3021  0024BE                     
  3022                           ;motors.c: 57:     TRISEbits.TRISE1 = 1;
  3023  0024BE  8296               	bsf	150,1,c	;volatile
  3024  0024C0                     
  3025                           ;motors.c: 58:     TRISEbits.TRISE2 = 1;
  3026  0024C0  8496               	bsf	150,2,c	;volatile
  3027  0024C2                     
  3028                           ;motors.c: 61:     TRISDbits.TRISD7 = 1;
  3029  0024C2  8E95               	bsf	149,7,c	;volatile
  3030  0024C4  0012               	return		;funcret
  3031  0024C6  FFFF               	dw	65535	; errata NOP
  3032  0024C8                     __end_of_initPinMotors:
  3033                           	callstack 0
  3034                           
  3035 ;; *************** function _initADC *****************
  3036 ;; Defined at:
  3037 ;;		line 18 in file "adc.c"
  3038 ;; Parameters:    Size  Location     Type
  3039 ;;		None
  3040 ;; Auto vars:     Size  Location     Type
  3041 ;;		None
  3042 ;; Return value:  Size  Location     Type
  3043 ;;                  1    wreg      void 
  3044 ;; Registers used:
  3045 ;;		wreg, status,2
  3046 ;; Tracked objects:
  3047 ;;		On entry : 0/0
  3048 ;;		On exit  : 0/0
  3049 ;;		Unchanged: 0/0
  3050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3051 ;;      Params:         0       0       0       0       0       0       0
  3052 ;;      Locals:         0       0       0       0       0       0       0
  3053 ;;      Temps:          0       0       0       0       0       0       0
  3054 ;;      Totals:         0       0       0       0       0       0       0
  3055 ;;Total ram usage:        0 bytes
  3056 ;; Hardware stack levels used:    1
  3057 ;; Hardware stack levels required when called:    4
  3058 ;; This function calls:
  3059 ;;		Nothing
  3060 ;; This function is called by:
  3061 ;;		_main
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           	psect	text16
  3066  0024C8                     __ptext16:
  3067                           	callstack 0
  3068  0024C8                     _initADC:
  3069                           	callstack 0
  3070  0024C8  FFFF               	dw	65535	; assembler added errata NOP
  3071  0024CA                     
  3072                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  3073  0024CA  50C2               	movf	194,w,c	;volatile
  3074  0024CC  0B3F               	andlw	-193
  3075  0024CE  0940               	iorlw	64
  3076  0024D0  6EC2               	movwf	194,c	;volatile
  3077  0024D2                     
  3078                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  3079  0024D2  8CC1               	bsf	193,6,c	;volatile
  3080                           
  3081                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  3082  0024D4  0EC7               	movlw	-57
  3083  0024D6  16C2               	andwf	194,f,c	;volatile
  3084  0024D8                     
  3085                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  3086  0024D8  94C2               	bcf	194,2,c	;volatile
  3087  0024DA                     
  3088                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  3089  0024DA  90C2               	bcf	194,0,c	;volatile
  3090  0024DC                     
  3091                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  3092  0024DC  9EC1               	bcf	193,7,c	;volatile
  3093                           
  3094                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  3095  0024DE  50C1               	movf	193,w,c	;volatile
  3096  0024E0  0BF0               	andlw	-16
  3097  0024E2  090E               	iorlw	14
  3098  0024E4  6EC1               	movwf	193,c	;volatile
  3099  0024E6                     
  3100                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  3101  0024E6  8C9D               	bsf	157,6,c	;volatile
  3102  0024E8                     
  3103                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  3104  0024E8  8C9F               	bsf	159,6,c	;volatile
  3105  0024EA  0012               	return		;funcret
  3106  0024EC  FFFF               	dw	65535	; errata NOP
  3107  0024EE                     __end_of_initADC:
  3108                           	callstack 0
  3109                           
  3110 ;; *************** function _increaseSeq *****************
  3111 ;; Defined at:
  3112 ;;		line 62 in file "usart.c"
  3113 ;; Parameters:    Size  Location     Type
  3114 ;;		None
  3115 ;; Auto vars:     Size  Location     Type
  3116 ;;		None
  3117 ;; Return value:  Size  Location     Type
  3118 ;;                  1    wreg      void 
  3119 ;; Registers used:
  3120 ;;		status,2, status,0
  3121 ;; Tracked objects:
  3122 ;;		On entry : 0/0
  3123 ;;		On exit  : 0/0
  3124 ;;		Unchanged: 0/0
  3125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3126 ;;      Params:         0       0       0       0       0       0       0
  3127 ;;      Locals:         0       0       0       0       0       0       0
  3128 ;;      Temps:          0       0       0       0       0       0       0
  3129 ;;      Totals:         0       0       0       0       0       0       0
  3130 ;;Total ram usage:        0 bytes
  3131 ;; Hardware stack levels used:    1
  3132 ;; Hardware stack levels required when called:    4
  3133 ;; This function calls:
  3134 ;;		Nothing
  3135 ;; This function is called by:
  3136 ;;		_main
  3137 ;; This function uses a non-reentrant model
  3138 ;;
  3139                           
  3140                           	psect	text17
  3141  002652                     __ptext17:
  3142                           	callstack 0
  3143  002652                     _increaseSeq:
  3144                           	callstack 0
  3145  002652  FFFF               	dw	65535	; assembler added errata NOP
  3146  002654                     
  3147                           ;usart.c: 63:     dataCounter++;
  3148  002654  2A61               	incf	_dataCounter^0,f,c
  3149  002656  0012               	return		;funcret
  3150  002658  FFFF               	dw	65535	; errata NOP
  3151  00265A                     __end_of_increaseSeq:
  3152                           	callstack 0
  3153                           
  3154 ;; *************** function _getNewSequence *****************
  3155 ;; Defined at:
  3156 ;;		line 48 in file "usart.c"
  3157 ;; Parameters:    Size  Location     Type
  3158 ;;		None
  3159 ;; Auto vars:     Size  Location     Type
  3160 ;;		None
  3161 ;; Return value:  Size  Location     Type
  3162 ;;                  2   17[COMRAM] PTR struct .
  3163 ;; Registers used:
  3164 ;;		wreg, status,2, status,0
  3165 ;; Tracked objects:
  3166 ;;		On entry : 0/0
  3167 ;;		On exit  : 0/0
  3168 ;;		Unchanged: 0/0
  3169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3170 ;;      Params:         2       0       0       0       0       0       0
  3171 ;;      Locals:         0       0       0       0       0       0       0
  3172 ;;      Temps:          0       0       0       0       0       0       0
  3173 ;;      Totals:         2       0       0       0       0       0       0
  3174 ;;Total ram usage:        2 bytes
  3175 ;; Hardware stack levels used:    1
  3176 ;; Hardware stack levels required when called:    4
  3177 ;; This function calls:
  3178 ;;		Nothing
  3179 ;; This function is called by:
  3180 ;;		_main
  3181 ;; This function uses a non-reentrant model
  3182 ;;
  3183                           
  3184                           	psect	text18
  3185  002576                     __ptext18:
  3186                           	callstack 0
  3187  002576                     _getNewSequence:
  3188                           	callstack 0
  3189  002576  FFFF               	dw	65535	; assembler added errata NOP
  3190  002578                     
  3191                           ;usart.c: 49:     return(&newSequenceData);
  3192  002578  0EDA               	movlw	low _newSequenceData
  3193  00257A  6E12               	movwf	?_getNewSequence^0,c
  3194  00257C  0E00               	movlw	high _newSequenceData
  3195  00257E  6E13               	movwf	(?_getNewSequence+1)^0,c
  3196  002580  0012               	return		;funcret
  3197  002582  FFFF               	dw	65535	; errata NOP
  3198  002584                     __end_of_getNewSequence:
  3199                           	callstack 0
  3200                           
  3201 ;; *************** function _executeData *****************
  3202 ;; Defined at:
  3203 ;;		line 93 in file "main.c"
  3204 ;; Parameters:    Size  Location     Type
  3205 ;;		None
  3206 ;; Auto vars:     Size  Location     Type
  3207 ;;  data            2    9[BANK0 ] PTR struct .
  3208 ;;		 -> dataSequence(20), 
  3209 ;;  errCode         1   11[BANK0 ] unsigned char 
  3210 ;; Return value:  Size  Location     Type
  3211 ;;                  1    wreg      unsigned char 
  3212 ;; Registers used:
  3213 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3214 ;; Tracked objects:
  3215 ;;		On entry : 0/0
  3216 ;;		On exit  : 0/0
  3217 ;;		Unchanged: 0/0
  3218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3219 ;;      Params:         0       0       0       0       0       0       0
  3220 ;;      Locals:         0       3       0       0       0       0       0
  3221 ;;      Temps:          0       2       0       0       0       0       0
  3222 ;;      Totals:         0       5       0       0       0       0       0
  3223 ;;Total ram usage:        5 bytes
  3224 ;; Hardware stack levels used:    1
  3225 ;; Hardware stack levels required when called:    6
  3226 ;; This function calls:
  3227 ;;		_getData
  3228 ;;		_liftArm
  3229 ;;		_moveToPoint
  3230 ;;		_pickObject
  3231 ;;		_releaseObj
  3232 ;;		_rotateObj
  3233 ;;		_touchObject
  3234 ;;		_touchTherm
  3235 ;; This function is called by:
  3236 ;;		_main
  3237 ;; This function uses a non-reentrant model
  3238 ;;
  3239                           
  3240                           	psect	text19
  3241  000D8C                     __ptext19:
  3242                           	callstack 0
  3243  000D8C                     _executeData:
  3244                           	callstack 0
  3245  000D8C  FFFF               	dw	65535	; assembler added errata NOP
  3246  000D8E                     
  3247                           ;main.c: 94:     t_sequence *data = getData();
  3248  000D8E  ECC2  F012         	call	_getData	;wreg free
  3249  000D92  C012  F0EB         	movff	?_getData,executeData@data
  3250  000D96  C013  F0EC         	movff	?_getData+1,executeData@data+1
  3251  000D9A                     
  3252                           ;main.c: 100:     switch(data->feederLine){
  3253  000D9A  EF78  F007         	goto	l4538
  3254  000D9E                     l4510:
  3255  000D9E  FFFF               	dw	65535	; assembler added errata NOP
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;main.c: 103:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0
      +                          ], feeder1Pos[1]);
  3259  000DA0  C04C  F015         	movff	_posVector,moveToPoint@x1
  3260  000DA4  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3261  000DA6  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3262  000DAA  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3263  000DAC  0E11               	movlw	low _feeder1Pos
  3264  000DAE  6EF6               	movwf	tblptrl,c
  3265  000DB0                     	if	1	;There is more than 1 active tblptr byte
  3266  000DB0  0E06               	movlw	high _feeder1Pos
  3267  000DB2  6EF7               	movwf	tblptrh,c
  3268  000DB4                     	endif
  3269  000DB4                     	if	0	;There are less than 3 active tblptr bytes
  3270  000DB4                     	endif
  3271  000DB4  0008               	tblrd		*
  3272  000DB6  FFFF               	dw	65535	; errata NOP
  3273  000DB8  50F5               	movf	tablat,w,c
  3274  000DBA  6E19               	movwf	moveToPoint@x2^0,c
  3275  000DBC  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3276  000DBE  0E12               	movlw	low (_feeder1Pos+1)
  3277  000DC0  6EF6               	movwf	tblptrl,c
  3278  000DC2  0E06               	movlw	high (_feeder1Pos+1)
  3279  000DC4  6EF7               	movwf	tblptrh,c
  3280  000DC6                     	if	0	;tblptru may be non-zero
  3281  000DC6                     	endif
  3282  000DC6                     	if	0	;tblptru may be non-zero
  3283  000DC6                     	endif
  3284  000DC6  0008               	tblrd		*
  3285  000DC8  FFFF               	dw	65535	; errata NOP
  3286  000DCA  50F5               	movf	tablat,w,c
  3287  000DCC  6E1B               	movwf	moveToPoint@y2^0,c
  3288  000DCE  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3289  000DD0  EC24  F005         	call	_moveToPoint	;wreg free
  3290  000DD4  0100               	movlb	0	; () banked
  3291  000DD6  6FED               	movwf	executeData@errCode& (0+255),b
  3292  000DD8                     
  3293                           ; BSR set to: 0
  3294                           ;main.c: 105:             posVector[0] = feeder1Pos[0];
  3295  000DD8  0E11               	movlw	low _feeder1Pos
  3296  000DDA  6EF6               	movwf	tblptrl,c
  3297  000DDC                     	if	1	;There is more than 1 active tblptr byte
  3298  000DDC  0E06               	movlw	high _feeder1Pos
  3299  000DDE  6EF7               	movwf	tblptrh,c
  3300  000DE0                     	endif
  3301  000DE0                     	if	0	;There are less than 3 active tblptr bytes
  3302  000DE0                     	endif
  3303  000DE0  0008               	tblrd		*
  3304  000DE2  FFFF               	dw	65535	; errata NOP
  3305  000DE4  CFF5 F04C          	movff	tablat,_posVector
  3306  000DE8                     
  3307                           ; BSR set to: 0
  3308                           ;main.c: 106:             posVector[1] = feeder1Pos[1];
  3309  000DE8  0E12               	movlw	low (_feeder1Pos+1)
  3310  000DEA  6EF6               	movwf	tblptrl,c
  3311  000DEC  0E06               	movlw	high (_feeder1Pos+1)
  3312  000DEE  6EF7               	movwf	tblptrh,c
  3313  000DF0                     	if	0	;tblptru may be non-zero
  3314  000DF0                     	endif
  3315  000DF0                     	if	0	;tblptru may be non-zero
  3316  000DF0                     	endif
  3317  000DF0  0008               	tblrd		*
  3318  000DF2  FFFF               	dw	65535	; errata NOP
  3319  000DF4  CFF5 F04D          	movff	tablat,_posVector+1
  3320                           
  3321                           ;main.c: 107:             break;
  3322  000DF8  EF9C  F007         	goto	l4540
  3323  000DFC                     l4516:
  3324  000DFC  FFFF               	dw	65535	; assembler added errata NOP
  3325                           
  3326                           ; BSR set to: 0
  3327                           ;main.c: 109:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3328  000DFE  C04C  F015         	movff	_posVector,moveToPoint@x1
  3329  000E02  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3330  000E04  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3331  000E08  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3332  000E0A  0E0F               	movlw	low _feeder2Pos
  3333  000E0C  6EF6               	movwf	tblptrl,c
  3334  000E0E                     	if	1	;There is more than 1 active tblptr byte
  3335  000E0E  0E06               	movlw	high _feeder2Pos
  3336  000E10  6EF7               	movwf	tblptrh,c
  3337  000E12                     	endif
  3338  000E12                     	if	0	;There are less than 3 active tblptr bytes
  3339  000E12                     	endif
  3340  000E12  0008               	tblrd		*
  3341  000E14  FFFF               	dw	65535	; errata NOP
  3342  000E16  50F5               	movf	tablat,w,c
  3343  000E18  6E19               	movwf	moveToPoint@x2^0,c
  3344  000E1A  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3345  000E1C  0E10               	movlw	low (_feeder2Pos+1)
  3346  000E1E  6EF6               	movwf	tblptrl,c
  3347  000E20  0E06               	movlw	high (_feeder2Pos+1)
  3348  000E22  6EF7               	movwf	tblptrh,c
  3349  000E24                     	if	0	;tblptru may be non-zero
  3350  000E24                     	endif
  3351  000E24                     	if	0	;tblptru may be non-zero
  3352  000E24                     	endif
  3353  000E24  0008               	tblrd		*
  3354  000E26  FFFF               	dw	65535	; errata NOP
  3355  000E28  50F5               	movf	tablat,w,c
  3356  000E2A  6E1B               	movwf	moveToPoint@y2^0,c
  3357  000E2C  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3358  000E2E  EC24  F005         	call	_moveToPoint	;wreg free
  3359  000E32  0100               	movlb	0	; () banked
  3360  000E34  6FED               	movwf	executeData@errCode& (0+255),b
  3361  000E36                     
  3362                           ; BSR set to: 0
  3363                           ;main.c: 110:             posVector[0] = feeder2Pos[0];
  3364  000E36  0E0F               	movlw	low _feeder2Pos
  3365  000E38  6EF6               	movwf	tblptrl,c
  3366  000E3A                     	if	1	;There is more than 1 active tblptr byte
  3367  000E3A  0E06               	movlw	high _feeder2Pos
  3368  000E3C  6EF7               	movwf	tblptrh,c
  3369  000E3E                     	endif
  3370  000E3E                     	if	0	;There are less than 3 active tblptr bytes
  3371  000E3E                     	endif
  3372  000E3E  0008               	tblrd		*
  3373  000E40  FFFF               	dw	65535	; errata NOP
  3374  000E42  CFF5 F04C          	movff	tablat,_posVector
  3375  000E46                     
  3376                           ; BSR set to: 0
  3377                           ;main.c: 111:             posVector[1] = feeder2Pos[1];
  3378  000E46  0E10               	movlw	low (_feeder2Pos+1)
  3379  000E48  6EF6               	movwf	tblptrl,c
  3380  000E4A  0E06               	movlw	high (_feeder2Pos+1)
  3381  000E4C  6EF7               	movwf	tblptrh,c
  3382  000E4E                     	if	0	;tblptru may be non-zero
  3383  000E4E                     	endif
  3384  000E4E                     	if	0	;tblptru may be non-zero
  3385  000E4E                     	endif
  3386  000E4E  0008               	tblrd		*
  3387  000E50  FFFF               	dw	65535	; errata NOP
  3388  000E52  CFF5 F04D          	movff	tablat,_posVector+1
  3389                           
  3390                           ;main.c: 112:             break;
  3391  000E56  EF9C  F007         	goto	l4540
  3392  000E5A                     l4522:
  3393  000E5A  FFFF               	dw	65535	; assembler added errata NOP
  3394                           
  3395                           ; BSR set to: 0
  3396                           ;main.c: 114:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3397  000E5C  C04C  F015         	movff	_posVector,moveToPoint@x1
  3398  000E60  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3399  000E62  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3400  000E66  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3401  000E68  0E0D               	movlw	low _feeder3Pos
  3402  000E6A  6EF6               	movwf	tblptrl,c
  3403  000E6C                     	if	1	;There is more than 1 active tblptr byte
  3404  000E6C  0E06               	movlw	high _feeder3Pos
  3405  000E6E  6EF7               	movwf	tblptrh,c
  3406  000E70                     	endif
  3407  000E70                     	if	0	;There are less than 3 active tblptr bytes
  3408  000E70                     	endif
  3409  000E70  0008               	tblrd		*
  3410  000E72  FFFF               	dw	65535	; errata NOP
  3411  000E74  50F5               	movf	tablat,w,c
  3412  000E76  6E19               	movwf	moveToPoint@x2^0,c
  3413  000E78  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3414  000E7A  0E0E               	movlw	low (_feeder3Pos+1)
  3415  000E7C  6EF6               	movwf	tblptrl,c
  3416  000E7E  0E06               	movlw	high (_feeder3Pos+1)
  3417  000E80  6EF7               	movwf	tblptrh,c
  3418  000E82                     	if	0	;tblptru may be non-zero
  3419  000E82                     	endif
  3420  000E82                     	if	0	;tblptru may be non-zero
  3421  000E82                     	endif
  3422  000E82  0008               	tblrd		*
  3423  000E84  FFFF               	dw	65535	; errata NOP
  3424  000E86  50F5               	movf	tablat,w,c
  3425  000E88  6E1B               	movwf	moveToPoint@y2^0,c
  3426  000E8A  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3427  000E8C  EC24  F005         	call	_moveToPoint	;wreg free
  3428  000E90  0100               	movlb	0	; () banked
  3429  000E92  6FED               	movwf	executeData@errCode& (0+255),b
  3430  000E94                     
  3431                           ; BSR set to: 0
  3432                           ;main.c: 115:             posVector[0] = feeder3Pos[0];
  3433  000E94  0E0D               	movlw	low _feeder3Pos
  3434  000E96  6EF6               	movwf	tblptrl,c
  3435  000E98                     	if	1	;There is more than 1 active tblptr byte
  3436  000E98  0E06               	movlw	high _feeder3Pos
  3437  000E9A  6EF7               	movwf	tblptrh,c
  3438  000E9C                     	endif
  3439  000E9C                     	if	0	;There are less than 3 active tblptr bytes
  3440  000E9C                     	endif
  3441  000E9C  0008               	tblrd		*
  3442  000E9E  FFFF               	dw	65535	; errata NOP
  3443  000EA0  CFF5 F04C          	movff	tablat,_posVector
  3444  000EA4                     
  3445                           ; BSR set to: 0
  3446                           ;main.c: 116:             posVector[1] = feeder3Pos[1];
  3447  000EA4  0E0E               	movlw	low (_feeder3Pos+1)
  3448  000EA6  6EF6               	movwf	tblptrl,c
  3449  000EA8  0E06               	movlw	high (_feeder3Pos+1)
  3450  000EAA  6EF7               	movwf	tblptrh,c
  3451  000EAC                     	if	0	;tblptru may be non-zero
  3452  000EAC                     	endif
  3453  000EAC                     	if	0	;tblptru may be non-zero
  3454  000EAC                     	endif
  3455  000EAC  0008               	tblrd		*
  3456  000EAE  FFFF               	dw	65535	; errata NOP
  3457  000EB0  CFF5 F04D          	movff	tablat,_posVector+1
  3458                           
  3459                           ;main.c: 117:             break;
  3460  000EB4  EF9C  F007         	goto	l4540
  3461  000EB8                     l4528:
  3462  000EB8  FFFF               	dw	65535	; assembler added errata NOP
  3463                           
  3464                           ; BSR set to: 0
  3465                           ;main.c: 121:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3466  000EBA  C04C  F015         	movff	_posVector,moveToPoint@x1
  3467  000EBE  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3468  000EC0  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3469  000EC4  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3470  000EC6  C055  F019         	movff	_newFeeder,moveToPoint@x2
  3471  000ECA  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3472  000ECC  C056  F01B         	movff	_newFeeder+1,moveToPoint@y2
  3473  000ED0  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3474  000ED2  EC24  F005         	call	_moveToPoint	;wreg free
  3475  000ED6  0100               	movlb	0	; () banked
  3476  000ED8  6FED               	movwf	executeData@errCode& (0+255),b
  3477  000EDA                     
  3478                           ; BSR set to: 0
  3479                           ;main.c: 122:             posVector[0] = newFeeder[0];
  3480  000EDA  C055  F04C         	movff	_newFeeder,_posVector
  3481  000EDE                     
  3482                           ; BSR set to: 0
  3483                           ;main.c: 123:             posVector[1] = newFeeder[1];
  3484  000EDE  C056  F04D         	movff	_newFeeder+1,_posVector+1
  3485                           
  3486                           ;main.c: 124:             break;
  3487  000EE2  EF9C  F007         	goto	l4540
  3488  000EE6                     l4534:
  3489  000EE6  FFFF               	dw	65535	; assembler added errata NOP
  3490                           
  3491                           ; BSR set to: 0
  3492                           ;main.c: 128:             errCode = 1;
  3493  000EE8  0E01               	movlw	1
  3494  000EEA  6FED               	movwf	executeData@errCode& (0+255),b
  3495                           
  3496                           ;main.c: 129:             break;
  3497  000EEC  EF9C  F007         	goto	l4540
  3498  000EF0                     l4538:
  3499  000EF0  FFFF               	dw	65535	; assembler added errata NOP
  3500  000EF2  C0EB  FFD9         	movff	executeData@data,fsr2l
  3501  000EF6  C0EC  FFDA         	movff	executeData@data+1,fsr2h
  3502  000EFA  50DF               	movf	indf2,w,c
  3503  000EFC  0100               	movlb	0	; () banked
  3504  000EFE  6FE9               	movwf	??_executeData& (0+255),b
  3505  000F00  6BEA               	clrf	(??_executeData+1)& (0+255),b
  3506                           
  3507                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3508                           ; Switch size 1, requested type "simple"
  3509                           ; Number of cases is 1, Range of values is 0 to 0
  3510                           ; switch strategies available:
  3511                           ; Name         Instructions Cycles
  3512                           ; simple_byte            4     3 (average)
  3513                           ;	Chosen strategy is simple_byte
  3514  000F02  51EA               	movf	(??_executeData+1)& (0+255),w,b
  3515  000F04  0A00               	xorlw	0	; case 0
  3516  000F06  B4D8               	btfsc	status,2,c
  3517  000F08  EF88  F007         	goto	l4822
  3518  000F0C  EF73  F007         	goto	l4534
  3519  000F10                     l4822:
  3520  000F10  FFFF               	dw	65535	; assembler added errata NOP
  3521                           
  3522                           ; BSR set to: 0
  3523                           ; Switch size 1, requested type "simple"
  3524                           ; Number of cases is 4, Range of values is 0 to 255
  3525                           ; switch strategies available:
  3526                           ; Name         Instructions Cycles
  3527                           ; simple_byte           13     7 (average)
  3528                           ;	Chosen strategy is simple_byte
  3529  000F12  51E9               	movf	??_executeData& (0+255),w,b
  3530  000F14  0A00               	xorlw	0	; case 0
  3531  000F16  B4D8               	btfsc	status,2,c
  3532  000F18  EFCF  F006         	goto	l4510
  3533  000F1C  0A01               	xorlw	1	; case 1
  3534  000F1E  B4D8               	btfsc	status,2,c
  3535  000F20  EFFE  F006         	goto	l4516
  3536  000F24  0A03               	xorlw	3	; case 2
  3537  000F26  B4D8               	btfsc	status,2,c
  3538  000F28  EF2D  F007         	goto	l4522
  3539  000F2C  0AFD               	xorlw	253	; case 255
  3540  000F2E  B4D8               	btfsc	status,2,c
  3541  000F30  EF5C  F007         	goto	l4528
  3542  000F34  EF73  F007         	goto	l4534
  3543  000F38                     l4540:
  3544  000F38  FFFF               	dw	65535	; assembler added errata NOP
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;main.c: 133:     if(!errCode){
  3548  000F3A  51ED               	movf	executeData@errCode& (0+255),w,b
  3549  000F3C  A4D8               	btfss	status,2,c
  3550  000F3E  EFA3  F007         	goto	u3961
  3551  000F42  EFA6  F007         	goto	u3960
  3552  000F46                     u3961:
  3553  000F46  FFFF               	dw	65535	; assembler added errata NOP
  3554  000F48  EFB4  F007         	goto	l4546
  3555  000F4C                     u3960:
  3556  000F4C  FFFF               	dw	65535	; assembler added errata NOP
  3557  000F4E                     
  3558                           ; BSR set to: 0
  3559                           ;main.c: 136:         errCode = touchObject();
  3560  000F4E  EC3E  F00F         	call	_touchObject	;wreg free
  3561  000F52  0100               	movlb	0	; () banked
  3562  000F54  6FED               	movwf	executeData@errCode& (0+255),b
  3563  000F56                     
  3564                           ; BSR set to: 0
  3565                           ;main.c: 137:         if(errCode != 0){
  3566  000F56  51ED               	movf	executeData@errCode& (0+255),w,b
  3567  000F58  B4D8               	btfsc	status,2,c
  3568  000F5A  EFB1  F007         	goto	u3971
  3569  000F5E  EFB4  F007         	goto	u3970
  3570  000F62                     u3971:
  3571  000F62  FFFF               	dw	65535	; assembler added errata NOP
  3572  000F64  EFB8  F007         	goto	l4550
  3573  000F68                     u3970:
  3574  000F68                     l4546:
  3575  000F68  FFFF               	dw	65535	; assembler added errata NOP
  3576                           
  3577                           ; BSR set to: 0
  3578                           ;main.c: 138:             return(errCode);
  3579  000F6A  51ED               	movf	executeData@errCode& (0+255),w,b
  3580  000F6C  EF3E  F008         	goto	l350
  3581  000F70                     l4550:
  3582  000F70  FFFF               	dw	65535	; assembler added errata NOP
  3583                           
  3584                           ; BSR set to: 0
  3585                           ;main.c: 141:         pickObject();
  3586  000F72  EC39  F012         	call	_pickObject	;wreg free
  3587  000F76                     
  3588                           ;main.c: 144:         errCode = liftArm();
  3589  000F76  ECC0  F010         	call	_liftArm	;wreg free
  3590  000F7A  0100               	movlb	0	; () banked
  3591  000F7C  6FED               	movwf	executeData@errCode& (0+255),b
  3592  000F7E                     
  3593                           ; BSR set to: 0
  3594                           ;main.c: 145:         if(errCode != 0){
  3595  000F7E  51ED               	movf	executeData@errCode& (0+255),w,b
  3596  000F80  B4D8               	btfsc	status,2,c
  3597  000F82  EFC5  F007         	goto	u3981
  3598  000F86  EFC8  F007         	goto	u3980
  3599  000F8A                     u3981:
  3600  000F8A  FFFF               	dw	65535	; assembler added errata NOP
  3601  000F8C  EFCB  F007         	goto	l4560
  3602  000F90                     u3980:
  3603  000F90  FFFF               	dw	65535	; assembler added errata NOP
  3604  000F92  EFB4  F007         	goto	l4546
  3605  000F96                     l4560:
  3606  000F96  FFFF               	dw	65535	; assembler added errata NOP
  3607                           
  3608                           ; BSR set to: 0
  3609                           ;main.c: 150:         errCode = moveToPoint(posVector[0], posVector[1], data->posX, data
      +                          ->posY);
  3610  000F98  C04C  F015         	movff	_posVector,moveToPoint@x1
  3611  000F9C  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3612  000F9E  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3613  000FA2  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3614  000FA4  EE20 F001          	lfsr	2,1
  3615  000FA8  51EB               	movf	executeData@data& (0+255),w,b
  3616  000FAA  26D9               	addwf	fsr2l,f,c
  3617  000FAC  51EC               	movf	(executeData@data+1)& (0+255),w,b
  3618  000FAE  22DA               	addwfc	fsr2h,f,c
  3619  000FB0  50DF               	movf	indf2,w,c
  3620  000FB2  6FE9               	movwf	??_executeData& (0+255),b
  3621  000FB4  51E9               	movf	??_executeData& (0+255),w,b
  3622  000FB6  6E19               	movwf	moveToPoint@x2^0,c
  3623  000FB8  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3624  000FBA  EE20 F002          	lfsr	2,2
  3625  000FBE  51EB               	movf	executeData@data& (0+255),w,b
  3626  000FC0  26D9               	addwf	fsr2l,f,c
  3627  000FC2  51EC               	movf	(executeData@data+1)& (0+255),w,b
  3628  000FC4  22DA               	addwfc	fsr2h,f,c
  3629  000FC6  50DF               	movf	indf2,w,c
  3630  000FC8  6FEA               	movwf	(??_executeData+1)& (0+255),b
  3631  000FCA  51EA               	movf	(??_executeData+1)& (0+255),w,b
  3632  000FCC  6E1B               	movwf	moveToPoint@y2^0,c
  3633  000FCE  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3634  000FD0  EC24  F005         	call	_moveToPoint	;wreg free
  3635  000FD4  0100               	movlb	0	; () banked
  3636  000FD6  6FED               	movwf	executeData@errCode& (0+255),b
  3637  000FD8                     
  3638                           ; BSR set to: 0
  3639                           ;main.c: 151:         if(errCode != 0){
  3640  000FD8  51ED               	movf	executeData@errCode& (0+255),w,b
  3641  000FDA  B4D8               	btfsc	status,2,c
  3642  000FDC  EFF2  F007         	goto	u3991
  3643  000FE0  EFF5  F007         	goto	u3990
  3644  000FE4                     u3991:
  3645  000FE4  FFFF               	dw	65535	; assembler added errata NOP
  3646  000FE6  EFF8  F007         	goto	l4568
  3647  000FEA                     u3990:
  3648  000FEA  FFFF               	dw	65535	; assembler added errata NOP
  3649  000FEC  EFB4  F007         	goto	l4546
  3650  000FF0                     l4568:
  3651  000FF0  FFFF               	dw	65535	; assembler added errata NOP
  3652                           
  3653                           ; BSR set to: 0
  3654                           ;main.c: 154:         posVector[0] = data->posX;
  3655  000FF2  EE20 F001          	lfsr	2,1
  3656  000FF6  51EB               	movf	executeData@data& (0+255),w,b
  3657  000FF8  26D9               	addwf	fsr2l,f,c
  3658  000FFA  51EC               	movf	(executeData@data+1)& (0+255),w,b
  3659  000FFC  22DA               	addwfc	fsr2h,f,c
  3660  000FFE  50DF               	movf	indf2,w,c
  3661  001000  6E4C               	movwf	_posVector^0,c
  3662                           
  3663                           ;main.c: 155:         posVector[1] = data->posY;
  3664  001002  EE20 F002          	lfsr	2,2
  3665  001006  51EB               	movf	executeData@data& (0+255),w,b
  3666  001008  26D9               	addwf	fsr2l,f,c
  3667  00100A  51EC               	movf	(executeData@data+1)& (0+255),w,b
  3668  00100C  22DA               	addwfc	fsr2h,f,c
  3669  00100E  50DF               	movf	indf2,w,c
  3670  001010  6E4D               	movwf	(_posVector+1)^0,c
  3671                           
  3672                           ;main.c: 158:         rotAngle = data->rotation;
  3673  001012  EE20 F003          	lfsr	2,3
  3674  001016  51EB               	movf	executeData@data& (0+255),w,b
  3675  001018  26D9               	addwf	fsr2l,f,c
  3676  00101A  51EC               	movf	(executeData@data+1)& (0+255),w,b
  3677  00101C  22DA               	addwfc	fsr2h,f,c
  3678  00101E  50DF               	movf	indf2,w,c
  3679  001020  6FE9               	movwf	??_executeData& (0+255),b
  3680  001022  51E9               	movf	??_executeData& (0+255),w,b
  3681  001024  6E57               	movwf	_rotAngle^0,c
  3682  001026  6A58               	clrf	(_rotAngle+1)^0,c
  3683  001028                     
  3684                           ; BSR set to: 0
  3685                           ;main.c: 160:         if(rotAngle < 0){
  3686  001028  BE58               	btfsc	(_rotAngle+1)^0,7,c
  3687  00102A  EF1C  F008         	goto	u4000
  3688  00102E  EF19  F008         	goto	u4001
  3689  001032                     u4001:
  3690  001032  FFFF               	dw	65535	; assembler added errata NOP
  3691  001034  EF21  F008         	goto	l4574
  3692  001038                     u4000:
  3693  001038  FFFF               	dw	65535	; assembler added errata NOP
  3694  00103A                     
  3695                           ; BSR set to: 0
  3696                           ;main.c: 161:             rotAngle += 360;
  3697  00103A  0E68               	movlw	104
  3698  00103C  2657               	addwf	_rotAngle^0,f,c
  3699  00103E  0E01               	movlw	1
  3700  001040  2258               	addwfc	(_rotAngle+1)^0,f,c
  3701  001042                     l4574:
  3702  001042  FFFF               	dw	65535	; assembler added errata NOP
  3703                           
  3704                           ; BSR set to: 0
  3705                           ;main.c: 163:         rotateObj(rotAngle);
  3706  001044  5057               	movf	_rotAngle^0,w,c
  3707  001046  ECC7  F00F         	call	_rotateObj
  3708  00104A                     
  3709                           ;main.c: 166:         errCode = touchTherm();
  3710  00104A  ECB5  F00E         	call	_touchTherm	;wreg free
  3711  00104E  0100               	movlb	0	; () banked
  3712  001050  6FED               	movwf	executeData@errCode& (0+255),b
  3713  001052                     
  3714                           ; BSR set to: 0
  3715                           ;main.c: 167:         if(errCode != 0){
  3716  001052  51ED               	movf	executeData@errCode& (0+255),w,b
  3717  001054  B4D8               	btfsc	status,2,c
  3718  001056  EF2F  F008         	goto	u4011
  3719  00105A  EF32  F008         	goto	u4010
  3720  00105E                     u4011:
  3721  00105E  FFFF               	dw	65535	; assembler added errata NOP
  3722  001060  EF35  F008         	goto	l4584
  3723  001064                     u4010:
  3724  001064  FFFF               	dw	65535	; assembler added errata NOP
  3725  001066  EFB4  F007         	goto	l4546
  3726  00106A                     l4584:
  3727  00106A  FFFF               	dw	65535	; assembler added errata NOP
  3728                           
  3729                           ; BSR set to: 0
  3730                           ;main.c: 171:         releaseObj();
  3731  00106C  EC21  F012         	call	_releaseObj	;wreg free
  3732  001070                     
  3733                           ;main.c: 174:         errCode = liftArm();
  3734  001070  ECC0  F010         	call	_liftArm	;wreg free
  3735  001074  0100               	movlb	0	; () banked
  3736  001076  6FED               	movwf	executeData@errCode& (0+255),b
  3737  001078  EFB4  F007         	goto	l4546
  3738  00107C                     l350:
  3739  00107C  FFFF               	dw	65535	; assembler added errata NOP
  3740                           
  3741                           ; BSR set to: 0
  3742  00107E  0012               	return		;funcret
  3743  001080  FFFF               	dw	65535	; errata NOP
  3744  001082                     __end_of_executeData:
  3745                           	callstack 0
  3746                           
  3747 ;; *************** function _touchTherm *****************
  3748 ;; Defined at:
  3749 ;;		line 595 in file "motors.c"
  3750 ;; Parameters:    Size  Location     Type
  3751 ;;		None
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;		None
  3754 ;; Return value:  Size  Location     Type
  3755 ;;                  1    wreg      unsigned char 
  3756 ;; Registers used:
  3757 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3758 ;; Tracked objects:
  3759 ;;		On entry : 0/0
  3760 ;;		On exit  : 0/0
  3761 ;;		Unchanged: 0/0
  3762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3763 ;;      Params:         0       0       0       0       0       0       0
  3764 ;;      Locals:         0       0       0       0       0       0       0
  3765 ;;      Temps:          0       0       0       0       0       0       0
  3766 ;;      Totals:         0       0       0       0       0       0       0
  3767 ;;Total ram usage:        0 bytes
  3768 ;; Hardware stack levels used:    1
  3769 ;; Hardware stack levels required when called:    5
  3770 ;; This function calls:
  3771 ;;		_resetStep
  3772 ;;		_resetTM0_Temp
  3773 ;;		_resetTM2_Temp
  3774 ;;		_resetTherm
  3775 ;;		_resetTouch
  3776 ;;		_returnTherm
  3777 ;;		_startADC
  3778 ;;		_stepMade
  3779 ;;		_stopADC
  3780 ;; This function is called by:
  3781 ;;		_executeData
  3782 ;; This function uses a non-reentrant model
  3783 ;;
  3784                           
  3785                           	psect	text20
  3786  001D6A                     __ptext20:
  3787                           	callstack 0
  3788  001D6A                     _touchTherm:
  3789                           	callstack 0
  3790  001D6A  FFFF               	dw	65535	; assembler added errata NOP
  3791  001D6C                     
  3792                           ;motors.c: 601:     motCounter[2][1] = 1;
  3793  001D6C  0E01               	movlw	1
  3794  001D6E  6E6C               	movwf	(_motCounter+5)^0,c
  3795  001D70                     
  3796                           ;motors.c: 604:     T2CONbits.TMR2ON = 1;
  3797  001D70  84CA               	bsf	202,2,c	;volatile
  3798                           
  3799                           ;motors.c: 606:     tm0Error = 0;
  3800  001D72  0E00               	movlw	0
  3801  001D74  6E5A               	movwf	(_tm0Error+1)^0,c
  3802  001D76  0E00               	movlw	0
  3803  001D78  6E59               	movwf	_tm0Error^0,c
  3804                           
  3805                           ;motors.c: 607:     tm0Limit = 200;
  3806  001D7A  0EC8               	movlw	200
  3807  001D7C  6E66               	movwf	_tm0Limit^0,c
  3808  001D7E                     
  3809                           ;motors.c: 608:     T0CONbits.TMR0ON = 1;
  3810  001D7E  8ED5               	bsf	213,7,c	;volatile
  3811  001D80                     
  3812                           ;motors.c: 611:     startADC();
  3813  001D80  ECF5  F012         	call	_startADC	;wreg free
  3814                           
  3815                           ;motors.c: 614:     resetTouch();
  3816  001D84  ECFA  F012         	call	_resetTouch	;wreg free
  3817                           
  3818                           ;motors.c: 615:     resetTherm();
  3819  001D88  ECFF  F012         	call	_resetTherm	;wreg free
  3820                           
  3821                           ;motors.c: 618:     while(!returnTherm() || PORTDbits.RD7){
  3822  001D8C  EF06  F00F         	goto	l4178
  3823  001D90                     l4162:
  3824  001D90  FFFF               	dw	65535	; assembler added errata NOP
  3825                           
  3826                           ;motors.c: 620:         resetStep();
  3827  001D92  EC09  F013         	call	_resetStep	;wreg free
  3828  001D96                     
  3829                           ;motors.c: 623:         if(tm0Error){
  3830  001D96  5059               	movf	_tm0Error^0,w,c
  3831  001D98  105A               	iorwf	(_tm0Error+1)^0,w,c
  3832  001D9A  B4D8               	btfsc	status,2,c
  3833  001D9C  EFD2  F00E         	goto	u3581
  3834  001DA0  EFD5  F00E         	goto	u3580
  3835  001DA4                     u3581:
  3836  001DA4  FFFF               	dw	65535	; assembler added errata NOP
  3837  001DA6  EFDC  F00E         	goto	l4168
  3838  001DAA                     u3580:
  3839  001DAA  FFFF               	dw	65535	; assembler added errata NOP
  3840  001DAC                     
  3841                           ;motors.c: 628:             tm0Error = 6;
  3842  001DAC  0E00               	movlw	0
  3843  001DAE  6E5A               	movwf	(_tm0Error+1)^0,c
  3844  001DB0  0E06               	movlw	6
  3845  001DB2  6E59               	movwf	_tm0Error^0,c
  3846                           
  3847                           ;motors.c: 629:             break;
  3848  001DB4  EF1C  F00F         	goto	l4182
  3849  001DB8                     l4168:
  3850  001DB8  FFFF               	dw	65535	; assembler added errata NOP
  3851                           
  3852                           ;motors.c: 637:             motCounter[2][0] += motCounter[2][1];
  3853  001DBA  506C               	movf	(_motCounter+5)^0,w,c
  3854  001DBC  266B               	addwf	(_motCounter+4)^0,f,c
  3855                           
  3856                           ;motors.c: 638:             if(motCounter[2][0] > 3){
  3857  001DBE  506B               	movf	(_motCounter+4)^0,w,c
  3858  001DC0  0A80               	xorlw	128
  3859  001DC2  0F7C               	addlw	-132
  3860  001DC4  A0D8               	btfss	status,0,c
  3861  001DC6  EFE7  F00E         	goto	u3591
  3862  001DCA  EFEA  F00E         	goto	u3590
  3863  001DCE                     u3591:
  3864  001DCE  FFFF               	dw	65535	; assembler added errata NOP
  3865  001DD0  EFED  F00E         	goto	l4172
  3866  001DD4                     u3590:
  3867  001DD4  FFFF               	dw	65535	; assembler added errata NOP
  3868  001DD6                     
  3869                           ;motors.c: 639:                 motCounter[2][0] = 0;
  3870  001DD6  0E00               	movlw	0
  3871  001DD8  6E6B               	movwf	(_motCounter+4)^0,c
  3872  001DDA                     l4172:
  3873  001DDA  FFFF               	dw	65535	; assembler added errata NOP
  3874                           
  3875                           ;motors.c: 642:             LATC = stepMot3[motCounter[2][0]];
  3876  001DDC  0E84               	movlw	low _stepMot3
  3877  001DDE  246B               	addwf	(_motCounter+4)^0,w,c
  3878  001DE0  6ED9               	movwf	fsr2l,c
  3879  001DE2  6ADA               	clrf	fsr2h,c
  3880  001DE4  0E00               	movlw	high _stepMot3
  3881  001DE6  22DA               	addwfc	fsr2h,f,c
  3882  001DE8  50DF               	movf	indf2,w,c
  3883  001DEA  6E8B               	movwf	139,c	;volatile
  3884  001DEC                     l4174:
  3885  001DEC  FFFF               	dw	65535	; assembler added errata NOP
  3886  001DEE  EC86  F012         	call	_stepMade	;wreg free
  3887  001DF2  5012               	movf	?_stepMade^0,w,c
  3888  001DF4  1013               	iorwf	(?_stepMade+1)^0,w,c
  3889  001DF6  B4D8               	btfsc	status,2,c
  3890  001DF8  EF00  F00F         	goto	u3601
  3891  001DFC  EF03  F00F         	goto	u3600
  3892  001E00                     u3601:
  3893  001E00  FFFF               	dw	65535	; assembler added errata NOP
  3894  001E02  EFF6  F00E         	goto	l4174
  3895  001E06                     u3600:
  3896  001E06  FFFF               	dw	65535	; assembler added errata NOP
  3897  001E08                     
  3898                           ;motors.c: 657:         startADC();
  3899  001E08  ECF5  F012         	call	_startADC	;wreg free
  3900  001E0C                     l4178:
  3901  001E0C  FFFF               	dw	65535	; assembler added errata NOP
  3902                           
  3903                           ;motors.c: 618:     while(!returnTherm() || PORTDbits.RD7){
  3904  001E0E  ECDE  F012         	call	_returnTherm	;wreg free
  3905  001E12  5012               	movf	?_returnTherm^0,w,c
  3906  001E14  1013               	iorwf	(?_returnTherm+1)^0,w,c
  3907  001E16  B4D8               	btfsc	status,2,c
  3908  001E18  EF10  F00F         	goto	u3611
  3909  001E1C  EF13  F00F         	goto	u3610
  3910  001E20                     u3611:
  3911  001E20  FFFF               	dw	65535	; assembler added errata NOP
  3912  001E22  EFC8  F00E         	goto	l4162
  3913  001E26                     u3610:
  3914  001E26  FFFF               	dw	65535	; assembler added errata NOP
  3915  001E28  BE83               	btfsc	131,7,c	;volatile
  3916  001E2A  EF19  F00F         	goto	u3621
  3917  001E2E  EF1C  F00F         	goto	u3620
  3918  001E32                     u3621:
  3919  001E32  FFFF               	dw	65535	; assembler added errata NOP
  3920  001E34  EFC8  F00E         	goto	l4162
  3921  001E38                     u3620:
  3922  001E38                     l4182:
  3923  001E38  FFFF               	dw	65535	; assembler added errata NOP
  3924                           
  3925                           ;motors.c: 663:     stopADC();
  3926  001E3A  EC2D  F013         	call	_stopADC	;wreg free
  3927  001E3E                     
  3928                           ;motors.c: 666:     T0CONbits.TMR0ON = 0;
  3929  001E3E  9ED5               	bcf	213,7,c	;volatile
  3930  001E40                     
  3931                           ;motors.c: 667:     T2CONbits.TMR2ON = 0;
  3932  001E40  94CA               	bcf	202,2,c	;volatile
  3933  001E42                     
  3934                           ;motors.c: 669:     resetTM0_Temp();
  3935  001E42  EC04  F013         	call	_resetTM0_Temp	;wreg free
  3936  001E46                     
  3937                           ;motors.c: 670:     resetTM2_Temp();
  3938  001E46  ECA2  F012         	call	_resetTM2_Temp	;wreg free
  3939  001E4A                     
  3940                           ;motors.c: 672:     TMR0 = 0;
  3941  001E4A  0E00               	movlw	0
  3942  001E4C  6ED7               	movwf	215,c	;volatile
  3943  001E4E  0E00               	movlw	0
  3944  001E50  6ED6               	movwf	214,c	;volatile
  3945  001E52                     
  3946                           ;motors.c: 673:     TMR2 = 0;
  3947  001E52  0E00               	movlw	0
  3948  001E54  6ECC               	movwf	204,c	;volatile
  3949  001E56                     
  3950                           ;motors.c: 676:     resetStep();
  3951  001E56  EC09  F013         	call	_resetStep	;wreg free
  3952  001E5A                     
  3953                           ;motors.c: 679:     if(PORTDbits.RD7){
  3954  001E5A  AE83               	btfss	131,7,c	;volatile
  3955  001E5C  EF32  F00F         	goto	u3631
  3956  001E60  EF35  F00F         	goto	u3630
  3957  001E64                     u3631:
  3958  001E64  FFFF               	dw	65535	; assembler added errata NOP
  3959  001E66  EF3A  F00F         	goto	l210
  3960  001E6A                     u3630:
  3961  001E6A  FFFF               	dw	65535	; assembler added errata NOP
  3962  001E6C                     
  3963                           ;motors.c: 680:         tm0Error = 2;
  3964  001E6C  0E00               	movlw	0
  3965  001E6E  6E5A               	movwf	(_tm0Error+1)^0,c
  3966  001E70  0E02               	movlw	2
  3967  001E72  6E59               	movwf	_tm0Error^0,c
  3968  001E74                     l210:
  3969  001E74  FFFF               	dw	65535	; assembler added errata NOP
  3970                           
  3971                           ;motors.c: 683:     return(tm0Error);
  3972  001E76  5059               	movf	_tm0Error^0,w,c
  3973  001E78  0012               	return		;funcret
  3974  001E7A  FFFF               	dw	65535	; errata NOP
  3975  001E7C                     __end_of_touchTherm:
  3976                           	callstack 0
  3977                           
  3978 ;; *************** function _returnTherm *****************
  3979 ;; Defined at:
  3980 ;;		line 58 in file "adc.c"
  3981 ;; Parameters:    Size  Location     Type
  3982 ;;		None
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;		None
  3985 ;; Return value:  Size  Location     Type
  3986 ;;                  2   17[COMRAM] unsigned int 
  3987 ;; Registers used:
  3988 ;;		None
  3989 ;; Tracked objects:
  3990 ;;		On entry : 0/0
  3991 ;;		On exit  : 0/0
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3994 ;;      Params:         2       0       0       0       0       0       0
  3995 ;;      Locals:         0       0       0       0       0       0       0
  3996 ;;      Temps:          0       0       0       0       0       0       0
  3997 ;;      Totals:         2       0       0       0       0       0       0
  3998 ;;Total ram usage:        2 bytes
  3999 ;; Hardware stack levels used:    1
  4000 ;; Hardware stack levels required when called:    4
  4001 ;; This function calls:
  4002 ;;		Nothing
  4003 ;; This function is called by:
  4004 ;;		_touchTherm
  4005 ;; This function uses a non-reentrant model
  4006 ;;
  4007                           
  4008                           	psect	text21
  4009  0025BC                     __ptext21:
  4010                           	callstack 0
  4011  0025BC                     _returnTherm:
  4012                           	callstack 0
  4013  0025BC  FFFF               	dw	65535	; assembler added errata NOP
  4014  0025BE                     
  4015                           ;adc.c: 59:     return therm_rel;
  4016  0025BE  C064  F012         	movff	_therm_rel,?_returnTherm	;volatile
  4017  0025C2  6A13               	clrf	(?_returnTherm+1)^0,c
  4018  0025C4  0012               	return		;funcret
  4019  0025C6  FFFF               	dw	65535	; errata NOP
  4020  0025C8                     __end_of_returnTherm:
  4021                           	callstack 0
  4022                           
  4023 ;; *************** function _touchObject *****************
  4024 ;; Defined at:
  4025 ;;		line 497 in file "motors.c"
  4026 ;; Parameters:    Size  Location     Type
  4027 ;;		None
  4028 ;; Auto vars:     Size  Location     Type
  4029 ;;		None
  4030 ;; Return value:  Size  Location     Type
  4031 ;;                  1    wreg      unsigned char 
  4032 ;; Registers used:
  4033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4034 ;; Tracked objects:
  4035 ;;		On entry : 0/0
  4036 ;;		On exit  : 0/0
  4037 ;;		Unchanged: 0/0
  4038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4039 ;;      Params:         0       0       0       0       0       0       0
  4040 ;;      Locals:         0       0       0       0       0       0       0
  4041 ;;      Temps:          0       0       0       0       0       0       0
  4042 ;;      Totals:         0       0       0       0       0       0       0
  4043 ;;Total ram usage:        0 bytes
  4044 ;; Hardware stack levels used:    1
  4045 ;; Hardware stack levels required when called:    5
  4046 ;; This function calls:
  4047 ;;		_resetStep
  4048 ;;		_resetTM0_Temp
  4049 ;;		_resetTM2_Temp
  4050 ;;		_resetTherm
  4051 ;;		_resetTouch
  4052 ;;		_returnTouch
  4053 ;;		_startADC
  4054 ;;		_stepMade
  4055 ;;		_stopADC
  4056 ;; This function is called by:
  4057 ;;		_executeData
  4058 ;; This function uses a non-reentrant model
  4059 ;;
  4060                           
  4061                           	psect	text22
  4062  001E7C                     __ptext22:
  4063                           	callstack 0
  4064  001E7C                     _touchObject:
  4065                           	callstack 0
  4066  001E7C  FFFF               	dw	65535	; assembler added errata NOP
  4067  001E7E                     
  4068                           ;motors.c: 503:     motCounter[2][1] = 1;
  4069  001E7E  0E01               	movlw	1
  4070  001E80  6E6C               	movwf	(_motCounter+5)^0,c
  4071  001E82                     
  4072                           ;motors.c: 506:     T2CONbits.TMR2ON = 1;
  4073  001E82  84CA               	bsf	202,2,c	;volatile
  4074                           
  4075                           ;motors.c: 508:     tm0Error = 0;
  4076  001E84  0E00               	movlw	0
  4077  001E86  6E5A               	movwf	(_tm0Error+1)^0,c
  4078  001E88  0E00               	movlw	0
  4079  001E8A  6E59               	movwf	_tm0Error^0,c
  4080                           
  4081                           ;motors.c: 509:     tm0Limit = 200;
  4082  001E8C  0EC8               	movlw	200
  4083  001E8E  6E66               	movwf	_tm0Limit^0,c
  4084  001E90                     
  4085                           ;motors.c: 510:     T0CONbits.TMR0ON = 1;
  4086  001E90  8ED5               	bsf	213,7,c	;volatile
  4087  001E92                     
  4088                           ;motors.c: 513:     startADC();
  4089  001E92  ECF5  F012         	call	_startADC	;wreg free
  4090                           
  4091                           ;motors.c: 516:     resetTouch();
  4092  001E96  ECFA  F012         	call	_resetTouch	;wreg free
  4093                           
  4094                           ;motors.c: 517:     resetTherm();
  4095  001E9A  ECFF  F012         	call	_resetTherm	;wreg free
  4096                           
  4097                           ;motors.c: 520:     while(!returnTouch() || PORTDbits.RD7){
  4098  001E9E  EF8F  F00F         	goto	l4128
  4099  001EA2                     l4112:
  4100  001EA2  FFFF               	dw	65535	; assembler added errata NOP
  4101                           
  4102                           ;motors.c: 522:         resetStep();
  4103  001EA4  EC09  F013         	call	_resetStep	;wreg free
  4104  001EA8                     
  4105                           ;motors.c: 525:         if(tm0Error){
  4106  001EA8  5059               	movf	_tm0Error^0,w,c
  4107  001EAA  105A               	iorwf	(_tm0Error+1)^0,w,c
  4108  001EAC  B4D8               	btfsc	status,2,c
  4109  001EAE  EF5B  F00F         	goto	u3521
  4110  001EB2  EF5E  F00F         	goto	u3520
  4111  001EB6                     u3521:
  4112  001EB6  FFFF               	dw	65535	; assembler added errata NOP
  4113  001EB8  EF65  F00F         	goto	l4118
  4114  001EBC                     u3520:
  4115  001EBC  FFFF               	dw	65535	; assembler added errata NOP
  4116  001EBE                     
  4117                           ;motors.c: 530:             tm0Error = 6;
  4118  001EBE  0E00               	movlw	0
  4119  001EC0  6E5A               	movwf	(_tm0Error+1)^0,c
  4120  001EC2  0E06               	movlw	6
  4121  001EC4  6E59               	movwf	_tm0Error^0,c
  4122                           
  4123                           ;motors.c: 531:             break;
  4124  001EC6  EFA5  F00F         	goto	l4132
  4125  001ECA                     l4118:
  4126  001ECA  FFFF               	dw	65535	; assembler added errata NOP
  4127                           
  4128                           ;motors.c: 539:             motCounter[2][0] += motCounter[2][1];
  4129  001ECC  506C               	movf	(_motCounter+5)^0,w,c
  4130  001ECE  266B               	addwf	(_motCounter+4)^0,f,c
  4131                           
  4132                           ;motors.c: 540:             if(motCounter[2][0] > 3){
  4133  001ED0  506B               	movf	(_motCounter+4)^0,w,c
  4134  001ED2  0A80               	xorlw	128
  4135  001ED4  0F7C               	addlw	-132
  4136  001ED6  A0D8               	btfss	status,0,c
  4137  001ED8  EF70  F00F         	goto	u3531
  4138  001EDC  EF73  F00F         	goto	u3530
  4139  001EE0                     u3531:
  4140  001EE0  FFFF               	dw	65535	; assembler added errata NOP
  4141  001EE2  EF76  F00F         	goto	l4122
  4142  001EE6                     u3530:
  4143  001EE6  FFFF               	dw	65535	; assembler added errata NOP
  4144  001EE8                     
  4145                           ;motors.c: 541:                 motCounter[2][0] = 0;
  4146  001EE8  0E00               	movlw	0
  4147  001EEA  6E6B               	movwf	(_motCounter+4)^0,c
  4148  001EEC                     l4122:
  4149  001EEC  FFFF               	dw	65535	; assembler added errata NOP
  4150                           
  4151                           ;motors.c: 544:             LATC = stepMot3[motCounter[2][0]];
  4152  001EEE  0E84               	movlw	low _stepMot3
  4153  001EF0  246B               	addwf	(_motCounter+4)^0,w,c
  4154  001EF2  6ED9               	movwf	fsr2l,c
  4155  001EF4  6ADA               	clrf	fsr2h,c
  4156  001EF6  0E00               	movlw	high _stepMot3
  4157  001EF8  22DA               	addwfc	fsr2h,f,c
  4158  001EFA  50DF               	movf	indf2,w,c
  4159  001EFC  6E8B               	movwf	139,c	;volatile
  4160  001EFE                     l4124:
  4161  001EFE  FFFF               	dw	65535	; assembler added errata NOP
  4162  001F00  EC86  F012         	call	_stepMade	;wreg free
  4163  001F04  5012               	movf	?_stepMade^0,w,c
  4164  001F06  1013               	iorwf	(?_stepMade+1)^0,w,c
  4165  001F08  B4D8               	btfsc	status,2,c
  4166  001F0A  EF89  F00F         	goto	u3541
  4167  001F0E  EF8C  F00F         	goto	u3540
  4168  001F12                     u3541:
  4169  001F12  FFFF               	dw	65535	; assembler added errata NOP
  4170  001F14  EF7F  F00F         	goto	l4124
  4171  001F18                     u3540:
  4172  001F18  FFFF               	dw	65535	; assembler added errata NOP
  4173  001F1A                     
  4174                           ;motors.c: 558:         startADC();
  4175  001F1A  ECF5  F012         	call	_startADC	;wreg free
  4176  001F1E                     l4128:
  4177  001F1E  FFFF               	dw	65535	; assembler added errata NOP
  4178                           
  4179                           ;motors.c: 520:     while(!returnTouch() || PORTDbits.RD7){
  4180  001F20  ECE4  F012         	call	_returnTouch	;wreg free
  4181  001F24  5012               	movf	?_returnTouch^0,w,c
  4182  001F26  1013               	iorwf	(?_returnTouch+1)^0,w,c
  4183  001F28  B4D8               	btfsc	status,2,c
  4184  001F2A  EF99  F00F         	goto	u3551
  4185  001F2E  EF9C  F00F         	goto	u3550
  4186  001F32                     u3551:
  4187  001F32  FFFF               	dw	65535	; assembler added errata NOP
  4188  001F34  EF51  F00F         	goto	l4112
  4189  001F38                     u3550:
  4190  001F38  FFFF               	dw	65535	; assembler added errata NOP
  4191  001F3A  BE83               	btfsc	131,7,c	;volatile
  4192  001F3C  EFA2  F00F         	goto	u3561
  4193  001F40  EFA5  F00F         	goto	u3560
  4194  001F44                     u3561:
  4195  001F44  FFFF               	dw	65535	; assembler added errata NOP
  4196  001F46  EF51  F00F         	goto	l4112
  4197  001F4A                     u3560:
  4198  001F4A                     l4132:
  4199  001F4A  FFFF               	dw	65535	; assembler added errata NOP
  4200                           
  4201                           ;motors.c: 563:     stopADC();
  4202  001F4C  EC2D  F013         	call	_stopADC	;wreg free
  4203  001F50                     
  4204                           ;motors.c: 566:     T0CONbits.TMR0ON = 0;
  4205  001F50  9ED5               	bcf	213,7,c	;volatile
  4206  001F52                     
  4207                           ;motors.c: 567:     T2CONbits.TMR2ON = 0;
  4208  001F52  94CA               	bcf	202,2,c	;volatile
  4209  001F54                     
  4210                           ;motors.c: 569:     resetTM0_Temp();
  4211  001F54  EC04  F013         	call	_resetTM0_Temp	;wreg free
  4212  001F58                     
  4213                           ;motors.c: 570:     resetTM2_Temp();
  4214  001F58  ECA2  F012         	call	_resetTM2_Temp	;wreg free
  4215  001F5C                     
  4216                           ;motors.c: 572:     TMR0 = 0;
  4217  001F5C  0E00               	movlw	0
  4218  001F5E  6ED7               	movwf	215,c	;volatile
  4219  001F60  0E00               	movlw	0
  4220  001F62  6ED6               	movwf	214,c	;volatile
  4221  001F64                     
  4222                           ;motors.c: 573:     TMR2 = 0;
  4223  001F64  0E00               	movlw	0
  4224  001F66  6ECC               	movwf	204,c	;volatile
  4225  001F68                     
  4226                           ;motors.c: 576:     resetStep();
  4227  001F68  EC09  F013         	call	_resetStep	;wreg free
  4228  001F6C                     
  4229                           ;motors.c: 579:     if(PORTDbits.RD7){
  4230  001F6C  AE83               	btfss	131,7,c	;volatile
  4231  001F6E  EFBB  F00F         	goto	u3571
  4232  001F72  EFBE  F00F         	goto	u3570
  4233  001F76                     u3571:
  4234  001F76  FFFF               	dw	65535	; assembler added errata NOP
  4235  001F78  EFC3  F00F         	goto	l198
  4236  001F7C                     u3570:
  4237  001F7C  FFFF               	dw	65535	; assembler added errata NOP
  4238  001F7E                     
  4239                           ;motors.c: 580:         tm0Error = 2;
  4240  001F7E  0E00               	movlw	0
  4241  001F80  6E5A               	movwf	(_tm0Error+1)^0,c
  4242  001F82  0E02               	movlw	2
  4243  001F84  6E59               	movwf	_tm0Error^0,c
  4244  001F86                     l198:
  4245  001F86  FFFF               	dw	65535	; assembler added errata NOP
  4246                           
  4247                           ;motors.c: 583:     return(tm0Error);
  4248  001F88  5059               	movf	_tm0Error^0,w,c
  4249  001F8A  0012               	return		;funcret
  4250  001F8C  FFFF               	dw	65535	; errata NOP
  4251  001F8E                     __end_of_touchObject:
  4252                           	callstack 0
  4253                           
  4254 ;; *************** function _stopADC *****************
  4255 ;; Defined at:
  4256 ;;		line 44 in file "adc.c"
  4257 ;; Parameters:    Size  Location     Type
  4258 ;;		None
  4259 ;; Auto vars:     Size  Location     Type
  4260 ;;		None
  4261 ;; Return value:  Size  Location     Type
  4262 ;;                  1    wreg      void 
  4263 ;; Registers used:
  4264 ;;		None
  4265 ;; Tracked objects:
  4266 ;;		On entry : 0/0
  4267 ;;		On exit  : 0/0
  4268 ;;		Unchanged: 0/0
  4269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4270 ;;      Params:         0       0       0       0       0       0       0
  4271 ;;      Locals:         0       0       0       0       0       0       0
  4272 ;;      Temps:          0       0       0       0       0       0       0
  4273 ;;      Totals:         0       0       0       0       0       0       0
  4274 ;;Total ram usage:        0 bytes
  4275 ;; Hardware stack levels used:    1
  4276 ;; Hardware stack levels required when called:    4
  4277 ;; This function calls:
  4278 ;;		Nothing
  4279 ;; This function is called by:
  4280 ;;		_touchObject
  4281 ;;		_touchTherm
  4282 ;; This function uses a non-reentrant model
  4283 ;;
  4284                           
  4285                           	psect	text23
  4286  00265A                     __ptext23:
  4287                           	callstack 0
  4288  00265A                     _stopADC:
  4289                           	callstack 0
  4290  00265A  FFFF               	dw	65535	; assembler added errata NOP
  4291  00265C                     
  4292                           ;adc.c: 45:     ADCON0bits.ADON = 0;
  4293  00265C  90C2               	bcf	194,0,c	;volatile
  4294  00265E  0012               	return		;funcret
  4295  002660  FFFF               	dw	65535	; errata NOP
  4296  002662                     __end_of_stopADC:
  4297                           	callstack 0
  4298                           
  4299 ;; *************** function _startADC *****************
  4300 ;; Defined at:
  4301 ;;		line 36 in file "adc.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;		None
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;		None
  4306 ;; Return value:  Size  Location     Type
  4307 ;;                  1    wreg      void 
  4308 ;; Registers used:
  4309 ;;		None
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4315 ;;      Params:         0       0       0       0       0       0       0
  4316 ;;      Locals:         0       0       0       0       0       0       0
  4317 ;;      Temps:          0       0       0       0       0       0       0
  4318 ;;      Totals:         0       0       0       0       0       0       0
  4319 ;;Total ram usage:        0 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; Hardware stack levels required when called:    4
  4322 ;; This function calls:
  4323 ;;		Nothing
  4324 ;; This function is called by:
  4325 ;;		_touchObject
  4326 ;;		_touchTherm
  4327 ;; This function uses a non-reentrant model
  4328 ;;
  4329                           
  4330                           	psect	text24
  4331  0025EA                     __ptext24:
  4332                           	callstack 0
  4333  0025EA                     _startADC:
  4334                           	callstack 0
  4335  0025EA  FFFF               	dw	65535	; assembler added errata NOP
  4336  0025EC                     
  4337                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  4338  0025EC  80C2               	bsf	194,0,c	;volatile
  4339                           
  4340                           ;adc.c: 38:     ADCON0bits.GODONE = 1;
  4341  0025EE  84C2               	bsf	194,2,c	;volatile
  4342  0025F0  0012               	return		;funcret
  4343  0025F2  FFFF               	dw	65535	; errata NOP
  4344  0025F4                     __end_of_startADC:
  4345                           	callstack 0
  4346                           
  4347 ;; *************** function _returnTouch *****************
  4348 ;; Defined at:
  4349 ;;		line 51 in file "adc.c"
  4350 ;; Parameters:    Size  Location     Type
  4351 ;;		None
  4352 ;; Auto vars:     Size  Location     Type
  4353 ;;		None
  4354 ;; Return value:  Size  Location     Type
  4355 ;;                  2   17[COMRAM] unsigned int 
  4356 ;; Registers used:
  4357 ;;		None
  4358 ;; Tracked objects:
  4359 ;;		On entry : 0/0
  4360 ;;		On exit  : 0/0
  4361 ;;		Unchanged: 0/0
  4362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4363 ;;      Params:         2       0       0       0       0       0       0
  4364 ;;      Locals:         0       0       0       0       0       0       0
  4365 ;;      Temps:          0       0       0       0       0       0       0
  4366 ;;      Totals:         2       0       0       0       0       0       0
  4367 ;;Total ram usage:        2 bytes
  4368 ;; Hardware stack levels used:    1
  4369 ;; Hardware stack levels required when called:    4
  4370 ;; This function calls:
  4371 ;;		Nothing
  4372 ;; This function is called by:
  4373 ;;		_touchObject
  4374 ;; This function uses a non-reentrant model
  4375 ;;
  4376                           
  4377                           	psect	text25
  4378  0025C8                     __ptext25:
  4379                           	callstack 0
  4380  0025C8                     _returnTouch:
  4381                           	callstack 0
  4382  0025C8  FFFF               	dw	65535	; assembler added errata NOP
  4383  0025CA                     
  4384                           ;adc.c: 52:     return touch_rel;
  4385  0025CA  C065  F012         	movff	_touch_rel,?_returnTouch	;volatile
  4386  0025CE  6A13               	clrf	(?_returnTouch+1)^0,c
  4387  0025D0  0012               	return		;funcret
  4388  0025D2  FFFF               	dw	65535	; errata NOP
  4389  0025D4                     __end_of_returnTouch:
  4390                           	callstack 0
  4391                           
  4392 ;; *************** function _resetTouch *****************
  4393 ;; Defined at:
  4394 ;;		line 65 in file "adc.c"
  4395 ;; Parameters:    Size  Location     Type
  4396 ;;		None
  4397 ;; Auto vars:     Size  Location     Type
  4398 ;;		None
  4399 ;; Return value:  Size  Location     Type
  4400 ;;                  1    wreg      void 
  4401 ;; Registers used:
  4402 ;;		wreg, status,2
  4403 ;; Tracked objects:
  4404 ;;		On entry : 0/0
  4405 ;;		On exit  : 0/0
  4406 ;;		Unchanged: 0/0
  4407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4408 ;;      Params:         0       0       0       0       0       0       0
  4409 ;;      Locals:         0       0       0       0       0       0       0
  4410 ;;      Temps:          0       0       0       0       0       0       0
  4411 ;;      Totals:         0       0       0       0       0       0       0
  4412 ;;Total ram usage:        0 bytes
  4413 ;; Hardware stack levels used:    1
  4414 ;; Hardware stack levels required when called:    4
  4415 ;; This function calls:
  4416 ;;		Nothing
  4417 ;; This function is called by:
  4418 ;;		_touchObject
  4419 ;;		_touchTherm
  4420 ;; This function uses a non-reentrant model
  4421 ;;
  4422                           
  4423                           	psect	text26
  4424  0025F4                     __ptext26:
  4425                           	callstack 0
  4426  0025F4                     _resetTouch:
  4427                           	callstack 0
  4428  0025F4  FFFF               	dw	65535	; assembler added errata NOP
  4429  0025F6                     
  4430                           ;adc.c: 66:     touch_rel = 0;
  4431  0025F6  0E00               	movlw	0
  4432  0025F8  6E65               	movwf	_touch_rel^0,c	;volatile
  4433  0025FA  0012               	return		;funcret
  4434  0025FC  FFFF               	dw	65535	; errata NOP
  4435  0025FE                     __end_of_resetTouch:
  4436                           	callstack 0
  4437                           
  4438 ;; *************** function _resetTherm *****************
  4439 ;; Defined at:
  4440 ;;		line 72 in file "adc.c"
  4441 ;; Parameters:    Size  Location     Type
  4442 ;;		None
  4443 ;; Auto vars:     Size  Location     Type
  4444 ;;		None
  4445 ;; Return value:  Size  Location     Type
  4446 ;;                  1    wreg      void 
  4447 ;; Registers used:
  4448 ;;		wreg, status,2
  4449 ;; Tracked objects:
  4450 ;;		On entry : 0/0
  4451 ;;		On exit  : 0/0
  4452 ;;		Unchanged: 0/0
  4453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4454 ;;      Params:         0       0       0       0       0       0       0
  4455 ;;      Locals:         0       0       0       0       0       0       0
  4456 ;;      Temps:          0       0       0       0       0       0       0
  4457 ;;      Totals:         0       0       0       0       0       0       0
  4458 ;;Total ram usage:        0 bytes
  4459 ;; Hardware stack levels used:    1
  4460 ;; Hardware stack levels required when called:    4
  4461 ;; This function calls:
  4462 ;;		Nothing
  4463 ;; This function is called by:
  4464 ;;		_touchObject
  4465 ;;		_touchTherm
  4466 ;; This function uses a non-reentrant model
  4467 ;;
  4468                           
  4469                           	psect	text27
  4470  0025FE                     __ptext27:
  4471                           	callstack 0
  4472  0025FE                     _resetTherm:
  4473                           	callstack 0
  4474  0025FE  FFFF               	dw	65535	; assembler added errata NOP
  4475  002600                     
  4476                           ;adc.c: 73:     therm_rel = 0;
  4477  002600  0E00               	movlw	0
  4478  002602  6E64               	movwf	_therm_rel^0,c	;volatile
  4479  002604  0012               	return		;funcret
  4480  002606  FFFF               	dw	65535	; errata NOP
  4481  002608                     __end_of_resetTherm:
  4482                           	callstack 0
  4483                           
  4484 ;; *************** function _rotateObj *****************
  4485 ;; Defined at:
  4486 ;;		line 768 in file "motors.c"
  4487 ;; Parameters:    Size  Location     Type
  4488 ;;  rotAngle        1    wreg     unsigned char 
  4489 ;; Auto vars:     Size  Location     Type
  4490 ;;  rotAngle        1    0[BANK0 ] unsigned char 
  4491 ;;  c               2    5[BANK0 ] unsigned int 
  4492 ;;  i               2    3[BANK0 ] unsigned int 
  4493 ;;  totStep         2    1[BANK0 ] int 
  4494 ;; Return value:  Size  Location     Type
  4495 ;;                  1    wreg      void 
  4496 ;; Registers used:
  4497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4498 ;; Tracked objects:
  4499 ;;		On entry : 0/0
  4500 ;;		On exit  : 0/0
  4501 ;;		Unchanged: 0/0
  4502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4503 ;;      Params:         0       0       0       0       0       0       0
  4504 ;;      Locals:         0       7       0       0       0       0       0
  4505 ;;      Temps:          0       0       0       0       0       0       0
  4506 ;;      Totals:         0       7       0       0       0       0       0
  4507 ;;Total ram usage:        7 bytes
  4508 ;; Hardware stack levels used:    1
  4509 ;; Hardware stack levels required when called:    5
  4510 ;; This function calls:
  4511 ;;		___fldiv
  4512 ;;		___fltol
  4513 ;;		___xxtofl
  4514 ;;		_resetStep
  4515 ;;		_resetTM2_Temp
  4516 ;;		_stepMade
  4517 ;; This function is called by:
  4518 ;;		_executeData
  4519 ;; This function uses a non-reentrant model
  4520 ;;
  4521                           
  4522                           	psect	text28
  4523  001F8E                     __ptext28:
  4524                           	callstack 0
  4525  001F8E                     _rotateObj:
  4526                           	callstack 0
  4527  001F8E  FFFF               	dw	65535	; assembler added errata NOP
  4528                           
  4529                           ;incstack = 0
  4530                           ;rotateObj@rotAngle stored from wreg
  4531  001F90  0100               	movlb	0	; () banked
  4532  001F92  6FE2               	movwf	rotateObj@rotAngle& (0+255),b
  4533  001F94                     
  4534                           ;motors.c: 770:     static const float stepAngle = 2;;motors.c: 771:     static char rot
      +                          Sequence[] = {0b100100, 0b001100, 0b011000, 0b110000};;motors.c: 772:     unsigned int i
      +                          , c = 0;
  4535  001F94  0E00               	movlw	0
  4536  001F96  0100               	movlb	0	; () banked
  4537  001F98  6FE8               	movwf	(rotateObj@c+1)& (0+255),b
  4538  001F9A  0E00               	movlw	0
  4539  001F9C  6FE7               	movwf	rotateObj@c& (0+255),b
  4540  001F9E                     
  4541                           ; BSR set to: 0
  4542                           ;motors.c: 773:     int totStep = rotAngle/stepAngle;
  4543  001F9E  0E00               	movlw	0
  4544  001FA0  6E24               	movwf	___fldiv@a^0,c
  4545  001FA2  0E00               	movlw	0
  4546  001FA4  6E25               	movwf	(___fldiv@a+1)^0,c
  4547  001FA6  0E00               	movlw	0
  4548  001FA8  6E26               	movwf	(___fldiv@a+2)^0,c
  4549  001FAA  0E40               	movlw	64
  4550  001FAC  6E27               	movwf	(___fldiv@a+3)^0,c
  4551  001FAE  51E2               	movf	rotateObj@rotAngle& (0+255),w,b
  4552  001FB0  6E12               	movwf	___xxtofl@val^0,c
  4553  001FB2  6A13               	clrf	(___xxtofl@val+1)^0,c
  4554  001FB4  6A14               	clrf	(___xxtofl@val+2)^0,c
  4555  001FB6  6A15               	clrf	(___xxtofl@val+3)^0,c
  4556  001FB8  0E01               	movlw	1
  4557  001FBA  EC71  F00A         	call	___xxtofl
  4558  001FBE  C012  F020         	movff	?___xxtofl,___fldiv@b
  4559  001FC2  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4560  001FC6  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4561  001FCA  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4562  001FCE  EC0B  F003         	call	___fldiv	;wreg free
  4563  001FD2  C020  F039         	movff	?___fldiv,___fltol@f1
  4564  001FD6  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4565  001FDA  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4566  001FDE  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4567  001FE2  ECFE  F00C         	call	___fltol	;wreg free
  4568  001FE6  C039  F0E3         	movff	?___fltol,rotateObj@totStep
  4569  001FEA  C03A  F0E4         	movff	?___fltol+1,rotateObj@totStep+1
  4570  001FEE                     
  4571                           ;motors.c: 776:     for(i = 0; i < totStep; i++){
  4572  001FEE  0E00               	movlw	0
  4573  001FF0  0100               	movlb	0	; () banked
  4574  001FF2  6FE6               	movwf	(rotateObj@i+1)& (0+255),b
  4575  001FF4  0E00               	movlw	0
  4576  001FF6  6FE5               	movwf	rotateObj@i& (0+255),b
  4577  001FF8  EF30  F010         	goto	l4256
  4578  001FFC                     l4240:
  4579  001FFC  FFFF               	dw	65535	; assembler added errata NOP
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;motors.c: 780:         LATD = rotSequence[c];
  4583  001FFE  0E80               	movlw	low rotateObj@rotSequence
  4584  002000  25E7               	addwf	rotateObj@c& (0+255),w,b
  4585  002002  6ED9               	movwf	fsr2l,c
  4586  002004  0E00               	movlw	high rotateObj@rotSequence
  4587  002006  21E8               	addwfc	(rotateObj@c+1)& (0+255),w,b
  4588  002008  6EDA               	movwf	fsr2h,c
  4589  00200A  50DF               	movf	indf2,w,c
  4590  00200C  6E8C               	movwf	140,c	;volatile
  4591  00200E                     
  4592                           ; BSR set to: 0
  4593                           ;motors.c: 782:         c++;
  4594  00200E  4BE7               	infsnz	rotateObj@c& (0+255),f,b
  4595  002010  2BE8               	incf	(rotateObj@c+1)& (0+255),f,b
  4596  002012                     
  4597                           ; BSR set to: 0
  4598                           ;motors.c: 783:         if (c >= 4) {c = 0;}
  4599  002012  51E8               	movf	(rotateObj@c+1)& (0+255),w,b
  4600  002014  E10A               	bnz	u3680
  4601  002016  0E04               	movlw	4
  4602  002018  5DE7               	subwf	rotateObj@c& (0+255),w,b
  4603  00201A  A0D8               	btfss	status,0,c
  4604  00201C  EF12  F010         	goto	u3681
  4605  002020  EF15  F010         	goto	u3680
  4606  002024                     u3681:
  4607  002024  FFFF               	dw	65535	; assembler added errata NOP
  4608  002026  EF1A  F010         	goto	l4248
  4609  00202A                     u3680:
  4610  00202A  FFFF               	dw	65535	; assembler added errata NOP
  4611  00202C                     
  4612                           ; BSR set to: 0
  4613  00202C  0E00               	movlw	0
  4614  00202E  6FE8               	movwf	(rotateObj@c+1)& (0+255),b
  4615  002030  0E00               	movlw	0
  4616  002032  6FE7               	movwf	rotateObj@c& (0+255),b
  4617  002034                     l4248:
  4618  002034  FFFF               	dw	65535	; assembler added errata NOP
  4619                           
  4620                           ; BSR set to: 0
  4621                           ;motors.c: 786:         T2CONbits.TMR2ON = 1;
  4622  002036  84CA               	bsf	202,2,c	;volatile
  4623  002038                     l4250:
  4624  002038  FFFF               	dw	65535	; assembler added errata NOP
  4625  00203A  EC86  F012         	call	_stepMade	;wreg free
  4626  00203E  5012               	movf	?_stepMade^0,w,c
  4627  002040  1013               	iorwf	(?_stepMade+1)^0,w,c
  4628  002042  B4D8               	btfsc	status,2,c
  4629  002044  EF26  F010         	goto	u3691
  4630  002048  EF29  F010         	goto	u3690
  4631  00204C                     u3691:
  4632  00204C  FFFF               	dw	65535	; assembler added errata NOP
  4633  00204E  EF1C  F010         	goto	l4250
  4634  002052                     u3690:
  4635  002052  FFFF               	dw	65535	; assembler added errata NOP
  4636  002054                     
  4637                           ;motors.c: 788:         T2CONbits.TMR2ON = 0;
  4638  002054  94CA               	bcf	202,2,c	;volatile
  4639  002056                     
  4640                           ;motors.c: 789:         TMR2 = 0;
  4641  002056  0E00               	movlw	0
  4642  002058  6ECC               	movwf	204,c	;volatile
  4643  00205A                     
  4644                           ;motors.c: 790:     }
  4645  00205A  0100               	movlb	0	; () banked
  4646  00205C  4BE5               	infsnz	rotateObj@i& (0+255),f,b
  4647  00205E  2BE6               	incf	(rotateObj@i+1)& (0+255),f,b
  4648  002060                     l4256:
  4649  002060  FFFF               	dw	65535	; assembler added errata NOP
  4650                           
  4651                           ; BSR set to: 0
  4652  002062  51E3               	movf	rotateObj@totStep& (0+255),w,b
  4653  002064  5DE5               	subwf	rotateObj@i& (0+255),w,b
  4654  002066  51E4               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4655  002068  59E6               	subwfb	(rotateObj@i+1)& (0+255),w,b
  4656  00206A  A0D8               	btfss	status,0,c
  4657  00206C  EF3A  F010         	goto	u3701
  4658  002070  EF3D  F010         	goto	u3700
  4659  002074                     u3701:
  4660  002074  FFFF               	dw	65535	; assembler added errata NOP
  4661  002076  EFFE  F00F         	goto	l4240
  4662  00207A                     u3700:
  4663  00207A  FFFF               	dw	65535	; assembler added errata NOP
  4664  00207C                     
  4665                           ; BSR set to: 0
  4666                           ;motors.c: 793:     resetTM2_Temp();
  4667  00207C  ECA2  F012         	call	_resetTM2_Temp	;wreg free
  4668                           
  4669                           ;motors.c: 796:     resetStep();
  4670  002080  EC09  F013         	call	_resetStep	;wreg free
  4671  002084  0012               	return		;funcret
  4672  002086  FFFF               	dw	65535	; errata NOP
  4673  002088                     __end_of_rotateObj:
  4674                           	callstack 0
  4675                           
  4676 ;; *************** function ___xxtofl *****************
  4677 ;; Defined at:
  4678 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4679 ;; Parameters:    Size  Location     Type
  4680 ;;  sign            1    wreg     unsigned char 
  4681 ;;  val             4   17[COMRAM] long 
  4682 ;; Auto vars:     Size  Location     Type
  4683 ;;  sign            1   25[COMRAM] unsigned char 
  4684 ;;  arg             4   27[COMRAM] unsigned long 
  4685 ;;  exp             1   26[COMRAM] unsigned char 
  4686 ;; Return value:  Size  Location     Type
  4687 ;;                  4   17[COMRAM] unsigned char 
  4688 ;; Registers used:
  4689 ;;		wreg, status,2, status,0
  4690 ;; Tracked objects:
  4691 ;;		On entry : 0/0
  4692 ;;		On exit  : 0/0
  4693 ;;		Unchanged: 0/0
  4694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4695 ;;      Params:         4       0       0       0       0       0       0
  4696 ;;      Locals:         6       0       0       0       0       0       0
  4697 ;;      Temps:          4       0       0       0       0       0       0
  4698 ;;      Totals:        14       0       0       0       0       0       0
  4699 ;;Total ram usage:       14 bytes
  4700 ;; Hardware stack levels used:    1
  4701 ;; Hardware stack levels required when called:    4
  4702 ;; This function calls:
  4703 ;;		Nothing
  4704 ;; This function is called by:
  4705 ;;		_rotateObj
  4706 ;; This function uses a non-reentrant model
  4707 ;;
  4708                           
  4709                           	psect	text29
  4710  0014E2                     __ptext29:
  4711                           	callstack 0
  4712  0014E2                     ___xxtofl:
  4713                           	callstack 0
  4714  0014E2  FFFF               	dw	65535	; assembler added errata NOP
  4715                           
  4716                           ;incstack = 0
  4717                           ;___xxtofl@sign stored from wreg
  4718  0014E4  6E1A               	movwf	___xxtofl@sign^0,c
  4719  0014E6  501A               	movf	___xxtofl@sign^0,w,c
  4720  0014E8  B4D8               	btfsc	status,2,c
  4721  0014EA  EF79  F00A         	goto	u3201
  4722  0014EE  EF7C  F00A         	goto	u3200
  4723  0014F2                     u3201:
  4724  0014F2  FFFF               	dw	65535	; assembler added errata NOP
  4725  0014F4  EFA1  F00A         	goto	l1300
  4726  0014F8                     u3200:
  4727  0014F8  FFFF               	dw	65535	; assembler added errata NOP
  4728  0014FA  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4729  0014FC  EF85  F00A         	goto	u3210
  4730  001500  EF82  F00A         	goto	u3211
  4731  001504                     u3211:
  4732  001504  FFFF               	dw	65535	; assembler added errata NOP
  4733  001506  EFA1  F00A         	goto	l1300
  4734  00150A                     u3210:
  4735  00150A  FFFF               	dw	65535	; assembler added errata NOP
  4736  00150C  C012  F016         	movff	___xxtofl@val,??___xxtofl
  4737  001510  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  4738  001514  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  4739  001518  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  4740  00151C  1E16               	comf	??___xxtofl^0,f,c
  4741  00151E  1E17               	comf	(??___xxtofl+1)^0,f,c
  4742  001520  1E18               	comf	(??___xxtofl+2)^0,f,c
  4743  001522  1E19               	comf	(??___xxtofl+3)^0,f,c
  4744  001524  2A16               	incf	??___xxtofl^0,f,c
  4745  001526  0E00               	movlw	0
  4746  001528  2217               	addwfc	(??___xxtofl+1)^0,f,c
  4747  00152A  2218               	addwfc	(??___xxtofl+2)^0,f,c
  4748  00152C  2219               	addwfc	(??___xxtofl+3)^0,f,c
  4749  00152E  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  4750  001532  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4751  001536  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4752  00153A  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4753  00153E  EFAA  F00A         	goto	l3972
  4754  001542                     l1300:
  4755  001542  FFFF               	dw	65535	; assembler added errata NOP
  4756  001544  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  4757  001548  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4758  00154C  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4759  001550  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4760  001554                     l3972:
  4761  001554  FFFF               	dw	65535	; assembler added errata NOP
  4762  001556  5012               	movf	___xxtofl@val^0,w,c
  4763  001558  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  4764  00155A  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  4765  00155C  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  4766  00155E  A4D8               	btfss	status,2,c
  4767  001560  EFB4  F00A         	goto	u3221
  4768  001564  EFB7  F00A         	goto	u3220
  4769  001568                     u3221:
  4770  001568  FFFF               	dw	65535	; assembler added errata NOP
  4771  00156A  EFC2  F00A         	goto	l3978
  4772  00156E                     u3220:
  4773  00156E  FFFF               	dw	65535	; assembler added errata NOP
  4774  001570  0E00               	movlw	0
  4775  001572  6E12               	movwf	?___xxtofl^0,c
  4776  001574  0E00               	movlw	0
  4777  001576  6E13               	movwf	(?___xxtofl+1)^0,c
  4778  001578  0E00               	movlw	0
  4779  00157A  6E14               	movwf	(?___xxtofl+2)^0,c
  4780  00157C  0E00               	movlw	0
  4781  00157E  6E15               	movwf	(?___xxtofl+3)^0,c
  4782  001580  EF6A  F00B         	goto	l1303
  4783  001584                     l3978:
  4784  001584  FFFF               	dw	65535	; assembler added errata NOP
  4785  001586  0E96               	movlw	150
  4786  001588  6E1B               	movwf	___xxtofl@exp^0,c
  4787  00158A  EFCE  F00A         	goto	l3982
  4788  00158E                     l3980:
  4789  00158E  FFFF               	dw	65535	; assembler added errata NOP
  4790  001590  2A1B               	incf	___xxtofl@exp^0,f,c
  4791  001592  90D8               	bcf	status,0,c
  4792  001594  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4793  001596  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4794  001598  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4795  00159A  321C               	rrcf	___xxtofl@arg^0,f,c
  4796  00159C                     l3982:
  4797  00159C  FFFF               	dw	65535	; assembler added errata NOP
  4798  00159E  0E00               	movlw	0
  4799  0015A0  141C               	andwf	___xxtofl@arg^0,w,c
  4800  0015A2  6E16               	movwf	??___xxtofl^0,c
  4801  0015A4  0E00               	movlw	0
  4802  0015A6  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4803  0015A8  6E17               	movwf	(??___xxtofl+1)^0,c
  4804  0015AA  0E00               	movlw	0
  4805  0015AC  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4806  0015AE  6E18               	movwf	(??___xxtofl+2)^0,c
  4807  0015B0  0EFE               	movlw	254
  4808  0015B2  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4809  0015B4  6E19               	movwf	(??___xxtofl+3)^0,c
  4810  0015B6  5016               	movf	??___xxtofl^0,w,c
  4811  0015B8  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4812  0015BA  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4813  0015BC  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4814  0015BE  A4D8               	btfss	status,2,c
  4815  0015C0  EFE4  F00A         	goto	u3231
  4816  0015C4  EFE7  F00A         	goto	u3230
  4817  0015C8                     u3231:
  4818  0015C8  FFFF               	dw	65535	; assembler added errata NOP
  4819  0015CA  EFC7  F00A         	goto	l3980
  4820  0015CE                     u3230:
  4821  0015CE  FFFF               	dw	65535	; assembler added errata NOP
  4822  0015D0  EFF7  F00A         	goto	l1307
  4823  0015D4                     l3984:
  4824  0015D4  FFFF               	dw	65535	; assembler added errata NOP
  4825  0015D6  2A1B               	incf	___xxtofl@exp^0,f,c
  4826  0015D8  0E01               	movlw	1
  4827  0015DA  261C               	addwf	___xxtofl@arg^0,f,c
  4828  0015DC  0E00               	movlw	0
  4829  0015DE  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4830  0015E0  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4831  0015E2  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4832  0015E4  90D8               	bcf	status,0,c
  4833  0015E6  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4834  0015E8  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4835  0015EA  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4836  0015EC  321C               	rrcf	___xxtofl@arg^0,f,c
  4837  0015EE                     l1307:
  4838  0015EE  FFFF               	dw	65535	; assembler added errata NOP
  4839  0015F0  0E00               	movlw	0
  4840  0015F2  141C               	andwf	___xxtofl@arg^0,w,c
  4841  0015F4  6E16               	movwf	??___xxtofl^0,c
  4842  0015F6  0E00               	movlw	0
  4843  0015F8  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4844  0015FA  6E17               	movwf	(??___xxtofl+1)^0,c
  4845  0015FC  0E00               	movlw	0
  4846  0015FE  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4847  001600  6E18               	movwf	(??___xxtofl+2)^0,c
  4848  001602  0EFF               	movlw	255
  4849  001604  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4850  001606  6E19               	movwf	(??___xxtofl+3)^0,c
  4851  001608  5016               	movf	??___xxtofl^0,w,c
  4852  00160A  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4853  00160C  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4854  00160E  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4855  001610  A4D8               	btfss	status,2,c
  4856  001612  EF0D  F00B         	goto	u3241
  4857  001616  EF10  F00B         	goto	u3240
  4858  00161A                     u3241:
  4859  00161A  FFFF               	dw	65535	; assembler added errata NOP
  4860  00161C  EFEA  F00A         	goto	l3984
  4861  001620                     u3240:
  4862  001620  FFFF               	dw	65535	; assembler added errata NOP
  4863  001622  EF1A  F00B         	goto	l3992
  4864  001626                     l3990:
  4865  001626  FFFF               	dw	65535	; assembler added errata NOP
  4866  001628  061B               	decf	___xxtofl@exp^0,f,c
  4867  00162A  90D8               	bcf	status,0,c
  4868  00162C  361C               	rlcf	___xxtofl@arg^0,f,c
  4869  00162E  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4870  001630  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4871  001632  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4872  001634                     l3992:
  4873  001634  FFFF               	dw	65535	; assembler added errata NOP
  4874  001636  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4875  001638  EF20  F00B         	goto	u3251
  4876  00163C  EF23  F00B         	goto	u3250
  4877  001640                     u3251:
  4878  001640  FFFF               	dw	65535	; assembler added errata NOP
  4879  001642  EF2D  F00B         	goto	l1314
  4880  001646                     u3250:
  4881  001646  FFFF               	dw	65535	; assembler added errata NOP
  4882  001648  0E02               	movlw	2
  4883  00164A  601B               	cpfslt	___xxtofl@exp^0,c
  4884  00164C  EF2A  F00B         	goto	u3261
  4885  001650  EF2D  F00B         	goto	u3260
  4886  001654                     u3261:
  4887  001654  FFFF               	dw	65535	; assembler added errata NOP
  4888  001656  EF13  F00B         	goto	l3990
  4889  00165A                     u3260:
  4890  00165A                     l1314:
  4891  00165A  FFFF               	dw	65535	; assembler added errata NOP
  4892  00165C  B01B               	btfsc	___xxtofl@exp^0,0,c
  4893  00165E  EF33  F00B         	goto	u3271
  4894  001662  EF36  F00B         	goto	u3270
  4895  001666                     u3271:
  4896  001666  FFFF               	dw	65535	; assembler added errata NOP
  4897  001668  EF38  F00B         	goto	l3998
  4898  00166C                     u3270:
  4899  00166C  FFFF               	dw	65535	; assembler added errata NOP
  4900  00166E  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  4901  001670                     l3998:
  4902  001670  FFFF               	dw	65535	; assembler added errata NOP
  4903  001672  90D8               	bcf	status,0,c
  4904  001674  321B               	rrcf	___xxtofl@exp^0,f,c
  4905  001676  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  4906  00167A  6A17               	clrf	(??___xxtofl+1)^0,c
  4907  00167C  6A18               	clrf	(??___xxtofl+2)^0,c
  4908  00167E  6A19               	clrf	(??___xxtofl+3)^0,c
  4909  001680  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  4910  001684  6A18               	clrf	(??___xxtofl+2)^0,c
  4911  001686  6A17               	clrf	(??___xxtofl+1)^0,c
  4912  001688  6A16               	clrf	??___xxtofl^0,c
  4913  00168A  5016               	movf	??___xxtofl^0,w,c
  4914  00168C  121C               	iorwf	___xxtofl@arg^0,f,c
  4915  00168E  5017               	movf	(??___xxtofl+1)^0,w,c
  4916  001690  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4917  001692  5018               	movf	(??___xxtofl+2)^0,w,c
  4918  001694  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4919  001696  5019               	movf	(??___xxtofl+3)^0,w,c
  4920  001698  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4921  00169A  501A               	movf	___xxtofl@sign^0,w,c
  4922  00169C  B4D8               	btfsc	status,2,c
  4923  00169E  EF53  F00B         	goto	u3281
  4924  0016A2  EF56  F00B         	goto	u3280
  4925  0016A6                     u3281:
  4926  0016A6  FFFF               	dw	65535	; assembler added errata NOP
  4927  0016A8  EF61  F00B         	goto	l4008
  4928  0016AC                     u3280:
  4929  0016AC  FFFF               	dw	65535	; assembler added errata NOP
  4930  0016AE  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4931  0016B0  EF5F  F00B         	goto	u3290
  4932  0016B4  EF5C  F00B         	goto	u3291
  4933  0016B8                     u3291:
  4934  0016B8  FFFF               	dw	65535	; assembler added errata NOP
  4935  0016BA  EF61  F00B         	goto	l4008
  4936  0016BE                     u3290:
  4937  0016BE  FFFF               	dw	65535	; assembler added errata NOP
  4938  0016C0  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  4939  0016C2                     l4008:
  4940  0016C2  FFFF               	dw	65535	; assembler added errata NOP
  4941  0016C4  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  4942  0016C8  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  4943  0016CC  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  4944  0016D0  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  4945  0016D4                     l1303:
  4946  0016D4  FFFF               	dw	65535	; assembler added errata NOP
  4947  0016D6  0012               	return		;funcret
  4948  0016D8  FFFF               	dw	65535	; errata NOP
  4949  0016DA                     __end_of___xxtofl:
  4950                           	callstack 0
  4951                           
  4952 ;; *************** function ___fltol *****************
  4953 ;; Defined at:
  4954 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  4955 ;; Parameters:    Size  Location     Type
  4956 ;;  f1              4   56[COMRAM] unsigned char 
  4957 ;; Auto vars:     Size  Location     Type
  4958 ;;  exp1            1   65[COMRAM] unsigned char 
  4959 ;;  sign1           1   64[COMRAM] unsigned char 
  4960 ;; Return value:  Size  Location     Type
  4961 ;;                  4   56[COMRAM] long 
  4962 ;; Registers used:
  4963 ;;		wreg, status,2, status,0
  4964 ;; Tracked objects:
  4965 ;;		On entry : 0/0
  4966 ;;		On exit  : 0/0
  4967 ;;		Unchanged: 0/0
  4968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4969 ;;      Params:         4       0       0       0       0       0       0
  4970 ;;      Locals:         2       0       0       0       0       0       0
  4971 ;;      Temps:          4       0       0       0       0       0       0
  4972 ;;      Totals:        10       0       0       0       0       0       0
  4973 ;;Total ram usage:       10 bytes
  4974 ;; Hardware stack levels used:    1
  4975 ;; Hardware stack levels required when called:    4
  4976 ;; This function calls:
  4977 ;;		Nothing
  4978 ;; This function is called by:
  4979 ;;		_rotateObj
  4980 ;; This function uses a non-reentrant model
  4981 ;;
  4982                           
  4983                           	psect	text30
  4984  0019FC                     __ptext30:
  4985                           	callstack 0
  4986  0019FC                     ___fltol:
  4987                           	callstack 0
  4988  0019FC  FFFF               	dw	65535	; assembler added errata NOP
  4989  0019FE  343B               	rlcf	(___fltol@f1+2)^0,w,c
  4990  001A00  343C               	rlcf	(___fltol@f1+3)^0,w,c
  4991  001A02  6E42               	movwf	___fltol@exp1^0,c
  4992  001A04  5042               	movf	___fltol@exp1^0,w,c
  4993  001A06  A4D8               	btfss	status,2,c
  4994  001A08  EF08  F00D         	goto	u3131
  4995  001A0C  EF0B  F00D         	goto	u3130
  4996  001A10                     u3131:
  4997  001A10  FFFF               	dw	65535	; assembler added errata NOP
  4998  001A12  EF17  F00D         	goto	l3928
  4999  001A16                     u3130:
  5000  001A16  FFFF               	dw	65535	; assembler added errata NOP
  5001  001A18                     l3924:
  5002  001A18  FFFF               	dw	65535	; assembler added errata NOP
  5003  001A1A  0E00               	movlw	0
  5004  001A1C  6E39               	movwf	?___fltol^0,c
  5005  001A1E  0E00               	movlw	0
  5006  001A20  6E3A               	movwf	(?___fltol+1)^0,c
  5007  001A22  0E00               	movlw	0
  5008  001A24  6E3B               	movwf	(?___fltol+2)^0,c
  5009  001A26  0E00               	movlw	0
  5010  001A28  6E3C               	movwf	(?___fltol+3)^0,c
  5011  001A2A  EF96  F00D         	goto	l942
  5012  001A2E                     l3928:
  5013  001A2E  FFFF               	dw	65535	; assembler added errata NOP
  5014  001A30  C039  F03D         	movff	___fltol@f1,??___fltol
  5015  001A34  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  5016  001A38  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  5017  001A3C  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  5018  001A40  0E20               	movlw	32
  5019  001A42  EF29  F00D         	goto	u3140
  5020  001A46                     u3145:
  5021  001A46  FFFF               	dw	65535	; assembler added errata NOP
  5022  001A48  90D8               	bcf	status,0,c
  5023  001A4A  3240               	rrcf	(??___fltol+3)^0,f,c
  5024  001A4C  323F               	rrcf	(??___fltol+2)^0,f,c
  5025  001A4E  323E               	rrcf	(??___fltol+1)^0,f,c
  5026  001A50  323D               	rrcf	??___fltol^0,f,c
  5027  001A52                     u3140:
  5028  001A52  FFFF               	dw	65535	; assembler added errata NOP
  5029  001A54  2EE8               	decfsz	wreg,f,c
  5030  001A56  EF23  F00D         	goto	u3145
  5031  001A5A  503D               	movf	??___fltol^0,w,c
  5032  001A5C  6E41               	movwf	___fltol@sign1^0,c
  5033  001A5E  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  5034  001A60  0EFF               	movlw	255
  5035  001A62  1639               	andwf	___fltol@f1^0,f,c
  5036  001A64  0EFF               	movlw	255
  5037  001A66  163A               	andwf	(___fltol@f1+1)^0,f,c
  5038  001A68  0EFF               	movlw	255
  5039  001A6A  163B               	andwf	(___fltol@f1+2)^0,f,c
  5040  001A6C  0E00               	movlw	0
  5041  001A6E  163C               	andwf	(___fltol@f1+3)^0,f,c
  5042  001A70  0E96               	movlw	150
  5043  001A72  5E42               	subwf	___fltol@exp1^0,f,c
  5044  001A74  BE42               	btfsc	___fltol@exp1^0,7,c
  5045  001A76  EF42  F00D         	goto	u3150
  5046  001A7A  EF3F  F00D         	goto	u3151
  5047  001A7E                     u3151:
  5048  001A7E  FFFF               	dw	65535	; assembler added errata NOP
  5049  001A80  EF5C  F00D         	goto	l3948
  5050  001A84                     u3150:
  5051  001A84  FFFF               	dw	65535	; assembler added errata NOP
  5052  001A86  5042               	movf	___fltol@exp1^0,w,c
  5053  001A88  0A80               	xorlw	128
  5054  001A8A  0F97               	addlw	151
  5055  001A8C  B0D8               	btfsc	status,0,c
  5056  001A8E  EF4B  F00D         	goto	u3161
  5057  001A92  EF4E  F00D         	goto	u3160
  5058  001A96                     u3161:
  5059  001A96  FFFF               	dw	65535	; assembler added errata NOP
  5060  001A98  EF51  F00D         	goto	l3944
  5061  001A9C                     u3160:
  5062  001A9C  FFFF               	dw	65535	; assembler added errata NOP
  5063  001A9E  EF0C  F00D         	goto	l3924
  5064  001AA2                     l3944:
  5065  001AA2  FFFF               	dw	65535	; assembler added errata NOP
  5066  001AA4  90D8               	bcf	status,0,c
  5067  001AA6  323C               	rrcf	(___fltol@f1+3)^0,f,c
  5068  001AA8  323B               	rrcf	(___fltol@f1+2)^0,f,c
  5069  001AAA  323A               	rrcf	(___fltol@f1+1)^0,f,c
  5070  001AAC  3239               	rrcf	___fltol@f1^0,f,c
  5071  001AAE  3E42               	incfsz	___fltol@exp1^0,f,c
  5072  001AB0  EF51  F00D         	goto	l3944
  5073  001AB4  EF7A  F00D         	goto	l3958
  5074  001AB8                     l3948:
  5075  001AB8  FFFF               	dw	65535	; assembler added errata NOP
  5076  001ABA  0E1F               	movlw	31
  5077  001ABC  6442               	cpfsgt	___fltol@exp1^0,c
  5078  001ABE  EF63  F00D         	goto	u3171
  5079  001AC2  EF66  F00D         	goto	u3170
  5080  001AC6                     u3171:
  5081  001AC6  FFFF               	dw	65535	; assembler added errata NOP
  5082  001AC8  EF70  F00D         	goto	l3956
  5083  001ACC                     u3170:
  5084  001ACC  FFFF               	dw	65535	; assembler added errata NOP
  5085  001ACE  EF0C  F00D         	goto	l3924
  5086  001AD2                     l3954:
  5087  001AD2  FFFF               	dw	65535	; assembler added errata NOP
  5088  001AD4  90D8               	bcf	status,0,c
  5089  001AD6  3639               	rlcf	___fltol@f1^0,f,c
  5090  001AD8  363A               	rlcf	(___fltol@f1+1)^0,f,c
  5091  001ADA  363B               	rlcf	(___fltol@f1+2)^0,f,c
  5092  001ADC  363C               	rlcf	(___fltol@f1+3)^0,f,c
  5093  001ADE  0642               	decf	___fltol@exp1^0,f,c
  5094  001AE0                     l3956:
  5095  001AE0  FFFF               	dw	65535	; assembler added errata NOP
  5096  001AE2  5042               	movf	___fltol@exp1^0,w,c
  5097  001AE4  A4D8               	btfss	status,2,c
  5098  001AE6  EF77  F00D         	goto	u3181
  5099  001AEA  EF7A  F00D         	goto	u3180
  5100  001AEE                     u3181:
  5101  001AEE  FFFF               	dw	65535	; assembler added errata NOP
  5102  001AF0  EF69  F00D         	goto	l3954
  5103  001AF4                     u3180:
  5104  001AF4                     l3958:
  5105  001AF4  FFFF               	dw	65535	; assembler added errata NOP
  5106  001AF6  5041               	movf	___fltol@sign1^0,w,c
  5107  001AF8  B4D8               	btfsc	status,2,c
  5108  001AFA  EF81  F00D         	goto	u3191
  5109  001AFE  EF84  F00D         	goto	u3190
  5110  001B02                     u3191:
  5111  001B02  FFFF               	dw	65535	; assembler added errata NOP
  5112  001B04  EF8D  F00D         	goto	l3962
  5113  001B08                     u3190:
  5114  001B08  FFFF               	dw	65535	; assembler added errata NOP
  5115  001B0A  1E3C               	comf	(___fltol@f1+3)^0,f,c
  5116  001B0C  1E3B               	comf	(___fltol@f1+2)^0,f,c
  5117  001B0E  1E3A               	comf	(___fltol@f1+1)^0,f,c
  5118  001B10  6C39               	negf	___fltol@f1^0,c
  5119  001B12  0E00               	movlw	0
  5120  001B14  223A               	addwfc	(___fltol@f1+1)^0,f,c
  5121  001B16  223B               	addwfc	(___fltol@f1+2)^0,f,c
  5122  001B18  223C               	addwfc	(___fltol@f1+3)^0,f,c
  5123  001B1A                     l3962:
  5124  001B1A  FFFF               	dw	65535	; assembler added errata NOP
  5125  001B1C  C039  F039         	movff	___fltol@f1,?___fltol
  5126  001B20  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  5127  001B24  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  5128  001B28  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  5129  001B2C                     l942:
  5130  001B2C  FFFF               	dw	65535	; assembler added errata NOP
  5131  001B2E  0012               	return		;funcret
  5132  001B30  FFFF               	dw	65535	; errata NOP
  5133  001B32                     __end_of___fltol:
  5134                           	callstack 0
  5135                           
  5136 ;; *************** function ___fldiv *****************
  5137 ;; Defined at:
  5138 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  5139 ;; Parameters:    Size  Location     Type
  5140 ;;  b               4   31[COMRAM] long 
  5141 ;;  a               4   35[COMRAM] long 
  5142 ;; Auto vars:     Size  Location     Type
  5143 ;;  grs             4   50[COMRAM] unsigned long 
  5144 ;;  rem             4   43[COMRAM] unsigned long 
  5145 ;;  new_exp         2   48[COMRAM] short 
  5146 ;;  aexp            1   55[COMRAM] unsigned char 
  5147 ;;  bexp            1   54[COMRAM] unsigned char 
  5148 ;;  sign            1   47[COMRAM] unsigned char 
  5149 ;; Return value:  Size  Location     Type
  5150 ;;                  4   31[COMRAM] unsigned char 
  5151 ;; Registers used:
  5152 ;;		wreg, status,2, status,0
  5153 ;; Tracked objects:
  5154 ;;		On entry : 0/0
  5155 ;;		On exit  : 0/0
  5156 ;;		Unchanged: 0/0
  5157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5158 ;;      Params:         8       0       0       0       0       0       0
  5159 ;;      Locals:        13       0       0       0       0       0       0
  5160 ;;      Temps:          4       0       0       0       0       0       0
  5161 ;;      Totals:        25       0       0       0       0       0       0
  5162 ;;Total ram usage:       25 bytes
  5163 ;; Hardware stack levels used:    1
  5164 ;; Hardware stack levels required when called:    4
  5165 ;; This function calls:
  5166 ;;		Nothing
  5167 ;; This function is called by:
  5168 ;;		_rotateObj
  5169 ;; This function uses a non-reentrant model
  5170 ;;
  5171                           
  5172                           	psect	text31
  5173  000616                     __ptext31:
  5174                           	callstack 0
  5175  000616                     ___fldiv:
  5176                           	callstack 0
  5177  000616  FFFF               	dw	65535	; assembler added errata NOP
  5178  000618  5023               	movf	(___fldiv@b+3)^0,w,c
  5179  00061A  0B80               	andlw	128
  5180  00061C  6E30               	movwf	___fldiv@sign^0,c
  5181  00061E  5023               	movf	(___fldiv@b+3)^0,w,c
  5182  000620  2423               	addwf	(___fldiv@b+3)^0,w,c
  5183  000622  6E37               	movwf	___fldiv@bexp^0,c
  5184  000624  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5185  000626  EF17  F003         	goto	u2901
  5186  00062A  EF1A  F003         	goto	u2900
  5187  00062E                     u2901:
  5188  00062E  FFFF               	dw	65535	; assembler added errata NOP
  5189  000630  EF1C  F003         	goto	l3790
  5190  000634                     u2900:
  5191  000634  FFFF               	dw	65535	; assembler added errata NOP
  5192  000636  8037               	bsf	___fldiv@bexp^0,0,c
  5193  000638                     l3790:
  5194  000638  FFFF               	dw	65535	; assembler added errata NOP
  5195  00063A  5037               	movf	___fldiv@bexp^0,w,c
  5196  00063C  B4D8               	btfsc	status,2,c
  5197  00063E  EF23  F003         	goto	u2911
  5198  000642  EF26  F003         	goto	u2910
  5199  000646                     u2911:
  5200  000646  FFFF               	dw	65535	; assembler added errata NOP
  5201  000648  EF3F  F003         	goto	l3800
  5202  00064C                     u2910:
  5203  00064C  FFFF               	dw	65535	; assembler added errata NOP
  5204  00064E  2837               	incf	___fldiv@bexp^0,w,c
  5205  000650  A4D8               	btfss	status,2,c
  5206  000652  EF2D  F003         	goto	u2921
  5207  000656  EF30  F003         	goto	u2920
  5208  00065A                     u2921:
  5209  00065A  FFFF               	dw	65535	; assembler added errata NOP
  5210  00065C  EF39  F003         	goto	l3796
  5211  000660                     u2920:
  5212  000660  FFFF               	dw	65535	; assembler added errata NOP
  5213  000662  0E00               	movlw	0
  5214  000664  6E20               	movwf	___fldiv@b^0,c
  5215  000666  0E00               	movlw	0
  5216  000668  6E21               	movwf	(___fldiv@b+1)^0,c
  5217  00066A  0E00               	movlw	0
  5218  00066C  6E22               	movwf	(___fldiv@b+2)^0,c
  5219  00066E  0E00               	movlw	0
  5220  000670  6E23               	movwf	(___fldiv@b+3)^0,c
  5221  000672                     l3796:
  5222  000672  FFFF               	dw	65535	; assembler added errata NOP
  5223  000674  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5224  000676  0E00               	movlw	0
  5225  000678  6E23               	movwf	(___fldiv@b+3)^0,c
  5226  00067A  EF48  F003         	goto	l3802
  5227  00067E                     l3800:
  5228  00067E  FFFF               	dw	65535	; assembler added errata NOP
  5229  000680  0E00               	movlw	0
  5230  000682  6E20               	movwf	___fldiv@b^0,c
  5231  000684  0E00               	movlw	0
  5232  000686  6E21               	movwf	(___fldiv@b+1)^0,c
  5233  000688  0E00               	movlw	0
  5234  00068A  6E22               	movwf	(___fldiv@b+2)^0,c
  5235  00068C  0E00               	movlw	0
  5236  00068E  6E23               	movwf	(___fldiv@b+3)^0,c
  5237  000690                     l3802:
  5238  000690  FFFF               	dw	65535	; assembler added errata NOP
  5239  000692  5027               	movf	(___fldiv@a+3)^0,w,c
  5240  000694  0B80               	andlw	128
  5241  000696  1A30               	xorwf	___fldiv@sign^0,f,c
  5242  000698  5027               	movf	(___fldiv@a+3)^0,w,c
  5243  00069A  2427               	addwf	(___fldiv@a+3)^0,w,c
  5244  00069C  6E38               	movwf	___fldiv@aexp^0,c
  5245  00069E  AE26               	btfss	(___fldiv@a+2)^0,7,c
  5246  0006A0  EF54  F003         	goto	u2931
  5247  0006A4  EF57  F003         	goto	u2930
  5248  0006A8                     u2931:
  5249  0006A8  FFFF               	dw	65535	; assembler added errata NOP
  5250  0006AA  EF59  F003         	goto	l3810
  5251  0006AE                     u2930:
  5252  0006AE  FFFF               	dw	65535	; assembler added errata NOP
  5253  0006B0  8038               	bsf	___fldiv@aexp^0,0,c
  5254  0006B2                     l3810:
  5255  0006B2  FFFF               	dw	65535	; assembler added errata NOP
  5256  0006B4  5038               	movf	___fldiv@aexp^0,w,c
  5257  0006B6  B4D8               	btfsc	status,2,c
  5258  0006B8  EF60  F003         	goto	u2941
  5259  0006BC  EF63  F003         	goto	u2940
  5260  0006C0                     u2941:
  5261  0006C0  FFFF               	dw	65535	; assembler added errata NOP
  5262  0006C2  EF7C  F003         	goto	l3820
  5263  0006C6                     u2940:
  5264  0006C6  FFFF               	dw	65535	; assembler added errata NOP
  5265  0006C8  2838               	incf	___fldiv@aexp^0,w,c
  5266  0006CA  A4D8               	btfss	status,2,c
  5267  0006CC  EF6A  F003         	goto	u2951
  5268  0006D0  EF6D  F003         	goto	u2950
  5269  0006D4                     u2951:
  5270  0006D4  FFFF               	dw	65535	; assembler added errata NOP
  5271  0006D6  EF76  F003         	goto	l3816
  5272  0006DA                     u2950:
  5273  0006DA  FFFF               	dw	65535	; assembler added errata NOP
  5274  0006DC  0E00               	movlw	0
  5275  0006DE  6E24               	movwf	___fldiv@a^0,c
  5276  0006E0  0E00               	movlw	0
  5277  0006E2  6E25               	movwf	(___fldiv@a+1)^0,c
  5278  0006E4  0E00               	movlw	0
  5279  0006E6  6E26               	movwf	(___fldiv@a+2)^0,c
  5280  0006E8  0E00               	movlw	0
  5281  0006EA  6E27               	movwf	(___fldiv@a+3)^0,c
  5282  0006EC                     l3816:
  5283  0006EC  FFFF               	dw	65535	; assembler added errata NOP
  5284  0006EE  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5285  0006F0  0E00               	movlw	0
  5286  0006F2  6E27               	movwf	(___fldiv@a+3)^0,c
  5287  0006F4  EF85  F003         	goto	l3822
  5288  0006F8                     l3820:
  5289  0006F8  FFFF               	dw	65535	; assembler added errata NOP
  5290  0006FA  0E00               	movlw	0
  5291  0006FC  6E24               	movwf	___fldiv@a^0,c
  5292  0006FE  0E00               	movlw	0
  5293  000700  6E25               	movwf	(___fldiv@a+1)^0,c
  5294  000702  0E00               	movlw	0
  5295  000704  6E26               	movwf	(___fldiv@a+2)^0,c
  5296  000706  0E00               	movlw	0
  5297  000708  6E27               	movwf	(___fldiv@a+3)^0,c
  5298  00070A                     l3822:
  5299  00070A  FFFF               	dw	65535	; assembler added errata NOP
  5300  00070C  5024               	movf	___fldiv@a^0,w,c
  5301  00070E  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5302  000710  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5303  000712  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5304  000714  A4D8               	btfss	status,2,c
  5305  000716  EF8F  F003         	goto	u2961
  5306  00071A  EF92  F003         	goto	u2960
  5307  00071E                     u2961:
  5308  00071E  FFFF               	dw	65535	; assembler added errata NOP
  5309  000720  EFAC  F003         	goto	l3834
  5310  000724                     u2960:
  5311  000724  FFFF               	dw	65535	; assembler added errata NOP
  5312  000726  0E00               	movlw	0
  5313  000728  6E20               	movwf	___fldiv@b^0,c
  5314  00072A  0E00               	movlw	0
  5315  00072C  6E21               	movwf	(___fldiv@b+1)^0,c
  5316  00072E  0E00               	movlw	0
  5317  000730  6E22               	movwf	(___fldiv@b+2)^0,c
  5318  000732  0E00               	movlw	0
  5319  000734  6E23               	movwf	(___fldiv@b+3)^0,c
  5320  000736  0E80               	movlw	128
  5321  000738  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5322  00073A  0E7F               	movlw	127
  5323  00073C  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5324  00073E                     l3828:
  5325  00073E  FFFF               	dw	65535	; assembler added errata NOP
  5326  000740  5030               	movf	___fldiv@sign^0,w,c
  5327  000742  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5328  000744  C020  F020         	movff	___fldiv@b,?___fldiv
  5329  000748  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5330  00074C  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5331  000750  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5332  000754  EF21  F005         	goto	l1227
  5333  000758                     l3834:
  5334  000758  FFFF               	dw	65535	; assembler added errata NOP
  5335  00075A  5037               	movf	___fldiv@bexp^0,w,c
  5336  00075C  A4D8               	btfss	status,2,c
  5337  00075E  EFB3  F003         	goto	u2971
  5338  000762  EFB6  F003         	goto	u2970
  5339  000766                     u2971:
  5340  000766  FFFF               	dw	65535	; assembler added errata NOP
  5341  000768  EFC1  F003         	goto	l3842
  5342  00076C                     u2970:
  5343  00076C  FFFF               	dw	65535	; assembler added errata NOP
  5344  00076E  0E00               	movlw	0
  5345  000770  6E20               	movwf	?___fldiv^0,c
  5346  000772  0E00               	movlw	0
  5347  000774  6E21               	movwf	(?___fldiv+1)^0,c
  5348  000776  0E00               	movlw	0
  5349  000778  6E22               	movwf	(?___fldiv+2)^0,c
  5350  00077A  0E00               	movlw	0
  5351  00077C  6E23               	movwf	(?___fldiv+3)^0,c
  5352  00077E  EF21  F005         	goto	l1227
  5353  000782                     l3842:
  5354  000782  FFFF               	dw	65535	; assembler added errata NOP
  5355  000784  5038               	movf	___fldiv@aexp^0,w,c
  5356  000786  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5357  00078A  6A29               	clrf	(??___fldiv+1)^0,c
  5358  00078C  5E28               	subwf	??___fldiv^0,f,c
  5359  00078E  0E00               	movlw	0
  5360  000790  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5361  000792  0E7F               	movlw	127
  5362  000794  2428               	addwf	??___fldiv^0,w,c
  5363  000796  6E31               	movwf	___fldiv@new_exp^0,c
  5364  000798  0E00               	movlw	0
  5365  00079A  2029               	addwfc	(??___fldiv+1)^0,w,c
  5366  00079C  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5367  00079E  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5368  0007A2  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5369  0007A6  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5370  0007AA  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5371  0007AE  0E00               	movlw	0
  5372  0007B0  6E20               	movwf	___fldiv@b^0,c
  5373  0007B2  0E00               	movlw	0
  5374  0007B4  6E21               	movwf	(___fldiv@b+1)^0,c
  5375  0007B6  0E00               	movlw	0
  5376  0007B8  6E22               	movwf	(___fldiv@b+2)^0,c
  5377  0007BA  0E00               	movlw	0
  5378  0007BC  6E23               	movwf	(___fldiv@b+3)^0,c
  5379  0007BE  0E00               	movlw	0
  5380  0007C0  6E33               	movwf	___fldiv@grs^0,c
  5381  0007C2  0E00               	movlw	0
  5382  0007C4  6E34               	movwf	(___fldiv@grs+1)^0,c
  5383  0007C6  0E00               	movlw	0
  5384  0007C8  6E35               	movwf	(___fldiv@grs+2)^0,c
  5385  0007CA  0E00               	movlw	0
  5386  0007CC  6E36               	movwf	(___fldiv@grs+3)^0,c
  5387  0007CE  0E00               	movlw	0
  5388  0007D0  6E38               	movwf	___fldiv@aexp^0,c
  5389  0007D2  EF2D  F004         	goto	l1229
  5390  0007D6                     l3852:
  5391  0007D6  FFFF               	dw	65535	; assembler added errata NOP
  5392  0007D8  5038               	movf	___fldiv@aexp^0,w,c
  5393  0007DA  B4D8               	btfsc	status,2,c
  5394  0007DC  EFF2  F003         	goto	u2981
  5395  0007E0  EFF5  F003         	goto	u2980
  5396  0007E4                     u2981:
  5397  0007E4  FFFF               	dw	65535	; assembler added errata NOP
  5398  0007E6  EF10  F004         	goto	l3860
  5399  0007EA                     u2980:
  5400  0007EA  FFFF               	dw	65535	; assembler added errata NOP
  5401  0007EC  90D8               	bcf	status,0,c
  5402  0007EE  362C               	rlcf	___fldiv@rem^0,f,c
  5403  0007F0  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5404  0007F2  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5405  0007F4  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5406  0007F6  90D8               	bcf	status,0,c
  5407  0007F8  3620               	rlcf	___fldiv@b^0,f,c
  5408  0007FA  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5409  0007FC  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5410  0007FE  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5411  000800  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5412  000802  EF05  F004         	goto	u2991
  5413  000806  EF08  F004         	goto	u2990
  5414  00080A                     u2991:
  5415  00080A  FFFF               	dw	65535	; assembler added errata NOP
  5416  00080C  EF0A  F004         	goto	l1232
  5417  000810                     u2990:
  5418  000810  FFFF               	dw	65535	; assembler added errata NOP
  5419  000812  8020               	bsf	___fldiv@b^0,0,c
  5420  000814                     l1232:
  5421  000814  FFFF               	dw	65535	; assembler added errata NOP
  5422  000816  90D8               	bcf	status,0,c
  5423  000818  3633               	rlcf	___fldiv@grs^0,f,c
  5424  00081A  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5425  00081C  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5426  00081E  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5427  000820                     l3860:
  5428  000820  FFFF               	dw	65535	; assembler added errata NOP
  5429  000822  5024               	movf	___fldiv@a^0,w,c
  5430  000824  5C2C               	subwf	___fldiv@rem^0,w,c
  5431  000826  5025               	movf	(___fldiv@a+1)^0,w,c
  5432  000828  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5433  00082A  5026               	movf	(___fldiv@a+2)^0,w,c
  5434  00082C  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5435  00082E  5027               	movf	(___fldiv@a+3)^0,w,c
  5436  000830  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5437  000832  A0D8               	btfss	status,0,c
  5438  000834  EF1E  F004         	goto	u3001
  5439  000838  EF21  F004         	goto	u3000
  5440  00083C                     u3001:
  5441  00083C  FFFF               	dw	65535	; assembler added errata NOP
  5442  00083E  EF2B  F004         	goto	l3866
  5443  000842                     u3000:
  5444  000842  FFFF               	dw	65535	; assembler added errata NOP
  5445  000844  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5446  000846  5024               	movf	___fldiv@a^0,w,c
  5447  000848  5E2C               	subwf	___fldiv@rem^0,f,c
  5448  00084A  5025               	movf	(___fldiv@a+1)^0,w,c
  5449  00084C  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5450  00084E  5026               	movf	(___fldiv@a+2)^0,w,c
  5451  000850  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5452  000852  5027               	movf	(___fldiv@a+3)^0,w,c
  5453  000854  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5454  000856                     l3866:
  5455  000856  FFFF               	dw	65535	; assembler added errata NOP
  5456  000858  2A38               	incf	___fldiv@aexp^0,f,c
  5457  00085A                     l1229:
  5458  00085A  FFFF               	dw	65535	; assembler added errata NOP
  5459  00085C  0E19               	movlw	25
  5460  00085E  6438               	cpfsgt	___fldiv@aexp^0,c
  5461  000860  EF34  F004         	goto	u3011
  5462  000864  EF37  F004         	goto	u3010
  5463  000868                     u3011:
  5464  000868  FFFF               	dw	65535	; assembler added errata NOP
  5465  00086A  EFEB  F003         	goto	l3852
  5466  00086E                     u3010:
  5467  00086E  FFFF               	dw	65535	; assembler added errata NOP
  5468  000870  502C               	movf	___fldiv@rem^0,w,c
  5469  000872  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5470  000874  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5471  000876  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5472  000878  B4D8               	btfsc	status,2,c
  5473  00087A  EF41  F004         	goto	u3021
  5474  00087E  EF44  F004         	goto	u3020
  5475  000882                     u3021:
  5476  000882  FFFF               	dw	65535	; assembler added errata NOP
  5477  000884  EF61  F004         	goto	l3878
  5478  000888                     u3020:
  5479  000888  FFFF               	dw	65535	; assembler added errata NOP
  5480  00088A  8033               	bsf	___fldiv@grs^0,0,c
  5481  00088C  EF61  F004         	goto	l3878
  5482  000890                     l3872:
  5483  000890  FFFF               	dw	65535	; assembler added errata NOP
  5484  000892  90D8               	bcf	status,0,c
  5485  000894  3620               	rlcf	___fldiv@b^0,f,c
  5486  000896  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5487  000898  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5488  00089A  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5489  00089C  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5490  00089E  EF53  F004         	goto	u3031
  5491  0008A2  EF56  F004         	goto	u3030
  5492  0008A6                     u3031:
  5493  0008A6  FFFF               	dw	65535	; assembler added errata NOP
  5494  0008A8  EF58  F004         	goto	l1238
  5495  0008AC                     u3030:
  5496  0008AC  FFFF               	dw	65535	; assembler added errata NOP
  5497  0008AE  8020               	bsf	___fldiv@b^0,0,c
  5498  0008B0                     l1238:
  5499  0008B0  FFFF               	dw	65535	; assembler added errata NOP
  5500  0008B2  90D8               	bcf	status,0,c
  5501  0008B4  3633               	rlcf	___fldiv@grs^0,f,c
  5502  0008B6  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5503  0008B8  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5504  0008BA  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5505  0008BC  0631               	decf	___fldiv@new_exp^0,f,c
  5506  0008BE  A0D8               	btfss	status,0,c
  5507  0008C0  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5508  0008C2                     l3878:
  5509  0008C2  FFFF               	dw	65535	; assembler added errata NOP
  5510  0008C4  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5511  0008C6  EF67  F004         	goto	u3041
  5512  0008CA  EF6A  F004         	goto	u3040
  5513  0008CE                     u3041:
  5514  0008CE  FFFF               	dw	65535	; assembler added errata NOP
  5515  0008D0  EF48  F004         	goto	l3872
  5516  0008D4                     u3040:
  5517  0008D4  FFFF               	dw	65535	; assembler added errata NOP
  5518  0008D6  0E00               	movlw	0
  5519  0008D8  6E38               	movwf	___fldiv@aexp^0,c
  5520  0008DA  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5521  0008DC  EF72  F004         	goto	u3051
  5522  0008E0  EF75  F004         	goto	u3050
  5523  0008E4                     u3051:
  5524  0008E4  FFFF               	dw	65535	; assembler added errata NOP
  5525  0008E6  EFA0  F004         	goto	l1240
  5526  0008EA                     u3050:
  5527  0008EA  FFFF               	dw	65535	; assembler added errata NOP
  5528  0008EC  0EFF               	movlw	255
  5529  0008EE  1433               	andwf	___fldiv@grs^0,w,c
  5530  0008F0  6E28               	movwf	??___fldiv^0,c
  5531  0008F2  0EFF               	movlw	255
  5532  0008F4  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5533  0008F6  6E29               	movwf	(??___fldiv+1)^0,c
  5534  0008F8  0EFF               	movlw	255
  5535  0008FA  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5536  0008FC  6E2A               	movwf	(??___fldiv+2)^0,c
  5537  0008FE  0E7F               	movlw	127
  5538  000900  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5539  000902  6E2B               	movwf	(??___fldiv+3)^0,c
  5540  000904  5028               	movf	??___fldiv^0,w,c
  5541  000906  1029               	iorwf	(??___fldiv+1)^0,w,c
  5542  000908  102A               	iorwf	(??___fldiv+2)^0,w,c
  5543  00090A  102B               	iorwf	(??___fldiv+3)^0,w,c
  5544  00090C  B4D8               	btfsc	status,2,c
  5545  00090E  EF8B  F004         	goto	u3061
  5546  000912  EF8E  F004         	goto	u3060
  5547  000916                     u3061:
  5548  000916  FFFF               	dw	65535	; assembler added errata NOP
  5549  000918  EF94  F004         	goto	l1241
  5550  00091C                     u3060:
  5551  00091C  FFFF               	dw	65535	; assembler added errata NOP
  5552  00091E                     l3886:
  5553  00091E  FFFF               	dw	65535	; assembler added errata NOP
  5554  000920  0E01               	movlw	1
  5555  000922  6E38               	movwf	___fldiv@aexp^0,c
  5556  000924  EFA0  F004         	goto	l1240
  5557  000928                     l1241:
  5558  000928  FFFF               	dw	65535	; assembler added errata NOP
  5559  00092A  A020               	btfss	___fldiv@b^0,0,c
  5560  00092C  EF9A  F004         	goto	u3071
  5561  000930  EF9D  F004         	goto	u3070
  5562  000934                     u3071:
  5563  000934  FFFF               	dw	65535	; assembler added errata NOP
  5564  000936  EFA0  F004         	goto	l1240
  5565  00093A                     u3070:
  5566  00093A  FFFF               	dw	65535	; assembler added errata NOP
  5567  00093C  EF8F  F004         	goto	l3886
  5568  000940                     l1240:
  5569  000940  FFFF               	dw	65535	; assembler added errata NOP
  5570  000942  5038               	movf	___fldiv@aexp^0,w,c
  5571  000944  B4D8               	btfsc	status,2,c
  5572  000946  EFA7  F004         	goto	u3081
  5573  00094A  EFAA  F004         	goto	u3080
  5574  00094E                     u3081:
  5575  00094E  FFFF               	dw	65535	; assembler added errata NOP
  5576  000950  EFD1  F004         	goto	l3898
  5577  000954                     u3080:
  5578  000954  FFFF               	dw	65535	; assembler added errata NOP
  5579  000956  0E01               	movlw	1
  5580  000958  2620               	addwf	___fldiv@b^0,f,c
  5581  00095A  0E00               	movlw	0
  5582  00095C  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5583  00095E  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5584  000960  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5585  000962  A023               	btfss	(___fldiv@b+3)^0,0,c
  5586  000964  EFB6  F004         	goto	u3091
  5587  000968  EFB9  F004         	goto	u3090
  5588  00096C                     u3091:
  5589  00096C  FFFF               	dw	65535	; assembler added errata NOP
  5590  00096E  EFD1  F004         	goto	l3898
  5591  000972                     u3090:
  5592  000972  FFFF               	dw	65535	; assembler added errata NOP
  5593  000974  C020  F028         	movff	___fldiv@b,??___fldiv
  5594  000978  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5595  00097C  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5596  000980  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5597  000984  342B               	rlcf	(??___fldiv+3)^0,w,c
  5598  000986  322B               	rrcf	(??___fldiv+3)^0,f,c
  5599  000988  322A               	rrcf	(??___fldiv+2)^0,f,c
  5600  00098A  3229               	rrcf	(??___fldiv+1)^0,f,c
  5601  00098C  3228               	rrcf	??___fldiv^0,f,c
  5602  00098E  C028  F020         	movff	??___fldiv,___fldiv@b
  5603  000992  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5604  000996  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5605  00099A  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5606  00099E  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5607  0009A0  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5608  0009A2                     l3898:
  5609  0009A2  FFFF               	dw	65535	; assembler added errata NOP
  5610  0009A4  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5611  0009A6  EFDD  F004         	goto	u3101
  5612  0009AA  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5613  0009AC  E109               	bnz	u3100
  5614  0009AE  2831               	incf	___fldiv@new_exp^0,w,c
  5615  0009B0  A0D8               	btfss	status,0,c
  5616  0009B2  EFDD  F004         	goto	u3101
  5617  0009B6  EFE0  F004         	goto	u3100
  5618  0009BA                     u3101:
  5619  0009BA  FFFF               	dw	65535	; assembler added errata NOP
  5620  0009BC  EFEC  F004         	goto	l3902
  5621  0009C0                     u3100:
  5622  0009C0  FFFF               	dw	65535	; assembler added errata NOP
  5623  0009C2  0E00               	movlw	0
  5624  0009C4  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5625  0009C6  6831               	setf	___fldiv@new_exp^0,c
  5626  0009C8  0E00               	movlw	0
  5627  0009CA  6E20               	movwf	___fldiv@b^0,c
  5628  0009CC  0E00               	movlw	0
  5629  0009CE  6E21               	movwf	(___fldiv@b+1)^0,c
  5630  0009D0  0E00               	movlw	0
  5631  0009D2  6E22               	movwf	(___fldiv@b+2)^0,c
  5632  0009D4  0E00               	movlw	0
  5633  0009D6  6E23               	movwf	(___fldiv@b+3)^0,c
  5634  0009D8                     l3902:
  5635  0009D8  FFFF               	dw	65535	; assembler added errata NOP
  5636  0009DA  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5637  0009DC  EFFB  F004         	goto	u3110
  5638  0009E0  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5639  0009E2  E106               	bnz	u3111
  5640  0009E4  0431               	decf	___fldiv@new_exp^0,w,c
  5641  0009E6  B0D8               	btfsc	status,0,c
  5642  0009E8  EFF8  F004         	goto	u3111
  5643  0009EC  EFFB  F004         	goto	u3110
  5644  0009F0                     u3111:
  5645  0009F0  FFFF               	dw	65535	; assembler added errata NOP
  5646  0009F2  EF0A  F005         	goto	l3906
  5647  0009F6                     u3110:
  5648  0009F6  FFFF               	dw	65535	; assembler added errata NOP
  5649  0009F8  0E00               	movlw	0
  5650  0009FA  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5651  0009FC  0E00               	movlw	0
  5652  0009FE  6E31               	movwf	___fldiv@new_exp^0,c
  5653  000A00  0E00               	movlw	0
  5654  000A02  6E20               	movwf	___fldiv@b^0,c
  5655  000A04  0E00               	movlw	0
  5656  000A06  6E21               	movwf	(___fldiv@b+1)^0,c
  5657  000A08  0E00               	movlw	0
  5658  000A0A  6E22               	movwf	(___fldiv@b+2)^0,c
  5659  000A0C  0E00               	movlw	0
  5660  000A0E  6E23               	movwf	(___fldiv@b+3)^0,c
  5661  000A10  0E00               	movlw	0
  5662  000A12  6E30               	movwf	___fldiv@sign^0,c
  5663  000A14                     l3906:
  5664  000A14  FFFF               	dw	65535	; assembler added errata NOP
  5665  000A16  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5666  000A1A  A037               	btfss	___fldiv@bexp^0,0,c
  5667  000A1C  EF12  F005         	goto	u3121
  5668  000A20  EF15  F005         	goto	u3120
  5669  000A24                     u3121:
  5670  000A24  FFFF               	dw	65535	; assembler added errata NOP
  5671  000A26  EF19  F005         	goto	l3912
  5672  000A2A                     u3120:
  5673  000A2A  FFFF               	dw	65535	; assembler added errata NOP
  5674  000A2C  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5675  000A2E  EF1B  F005         	goto	l3914
  5676  000A32                     l3912:
  5677  000A32  FFFF               	dw	65535	; assembler added errata NOP
  5678  000A34  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5679  000A36                     l3914:
  5680  000A36  FFFF               	dw	65535	; assembler added errata NOP
  5681  000A38  90D8               	bcf	status,0,c
  5682  000A3A  3037               	rrcf	___fldiv@bexp^0,w,c
  5683  000A3C  6E23               	movwf	(___fldiv@b+3)^0,c
  5684  000A3E  EF9F  F003         	goto	l3828
  5685  000A42                     l1227:
  5686  000A42  FFFF               	dw	65535	; assembler added errata NOP
  5687  000A44  0012               	return		;funcret
  5688  000A46  FFFF               	dw	65535	; errata NOP
  5689  000A48                     __end_of___fldiv:
  5690                           	callstack 0
  5691                           
  5692 ;; *************** function _releaseObj *****************
  5693 ;; Defined at:
  5694 ;;		line 819 in file "motors.c"
  5695 ;; Parameters:    Size  Location     Type
  5696 ;;		None
  5697 ;; Auto vars:     Size  Location     Type
  5698 ;;		None
  5699 ;; Return value:  Size  Location     Type
  5700 ;;                  1    wreg      void 
  5701 ;; Registers used:
  5702 ;;		wreg, status,2, status,0, cstack
  5703 ;; Tracked objects:
  5704 ;;		On entry : 0/0
  5705 ;;		On exit  : 0/0
  5706 ;;		Unchanged: 0/0
  5707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5708 ;;      Params:         0       0       0       0       0       0       0
  5709 ;;      Locals:         0       0       0       0       0       0       0
  5710 ;;      Temps:          0       0       0       0       0       0       0
  5711 ;;      Totals:         0       0       0       0       0       0       0
  5712 ;;Total ram usage:        0 bytes
  5713 ;; Hardware stack levels used:    1
  5714 ;; Hardware stack levels required when called:    5
  5715 ;; This function calls:
  5716 ;;		_resetTM2_Temp
  5717 ;;		_stepMade
  5718 ;; This function is called by:
  5719 ;;		_executeData
  5720 ;; This function uses a non-reentrant model
  5721 ;;
  5722                           
  5723                           	psect	text32
  5724  002442                     __ptext32:
  5725                           	callstack 0
  5726  002442                     _releaseObj:
  5727                           	callstack 0
  5728  002442  FFFF               	dw	65535	; assembler added errata NOP
  5729  002444                     
  5730                           ;motors.c: 820:     LATDbits.LATD1 = 0;
  5731  002444  928C               	bcf	140,1,c	;volatile
  5732                           
  5733                           ;motors.c: 823:     T2CONbits.TMR2ON = 1;
  5734  002446  84CA               	bsf	202,2,c	;volatile
  5735  002448                     l4270:
  5736  002448  FFFF               	dw	65535	; assembler added errata NOP
  5737  00244A  EC86  F012         	call	_stepMade	;wreg free
  5738  00244E  5012               	movf	?_stepMade^0,w,c
  5739  002450  1013               	iorwf	(?_stepMade+1)^0,w,c
  5740  002452  B4D8               	btfsc	status,2,c
  5741  002454  EF2E  F012         	goto	u3721
  5742  002458  EF31  F012         	goto	u3720
  5743  00245C                     u3721:
  5744  00245C  FFFF               	dw	65535	; assembler added errata NOP
  5745  00245E  EF24  F012         	goto	l4270
  5746  002462                     u3720:
  5747  002462  FFFF               	dw	65535	; assembler added errata NOP
  5748  002464                     
  5749                           ;motors.c: 825:     T2CONbits.TMR2ON = 0;
  5750  002464  94CA               	bcf	202,2,c	;volatile
  5751  002466                     
  5752                           ;motors.c: 826:     TMR2 = 0;
  5753  002466  0E00               	movlw	0
  5754  002468  6ECC               	movwf	204,c	;volatile
  5755  00246A                     
  5756                           ;motors.c: 829:     resetTM2_Temp();
  5757  00246A  ECA2  F012         	call	_resetTM2_Temp	;wreg free
  5758  00246E  0012               	return		;funcret
  5759  002470  FFFF               	dw	65535	; errata NOP
  5760  002472                     __end_of_releaseObj:
  5761                           	callstack 0
  5762                           
  5763 ;; *************** function _pickObject *****************
  5764 ;; Defined at:
  5765 ;;		line 802 in file "motors.c"
  5766 ;; Parameters:    Size  Location     Type
  5767 ;;		None
  5768 ;; Auto vars:     Size  Location     Type
  5769 ;;		None
  5770 ;; Return value:  Size  Location     Type
  5771 ;;                  1    wreg      void 
  5772 ;; Registers used:
  5773 ;;		wreg, status,2, status,0, cstack
  5774 ;; Tracked objects:
  5775 ;;		On entry : 0/0
  5776 ;;		On exit  : 0/0
  5777 ;;		Unchanged: 0/0
  5778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5779 ;;      Params:         0       0       0       0       0       0       0
  5780 ;;      Locals:         0       0       0       0       0       0       0
  5781 ;;      Temps:          0       0       0       0       0       0       0
  5782 ;;      Totals:         0       0       0       0       0       0       0
  5783 ;;Total ram usage:        0 bytes
  5784 ;; Hardware stack levels used:    1
  5785 ;; Hardware stack levels required when called:    5
  5786 ;; This function calls:
  5787 ;;		_resetTM2_Temp
  5788 ;;		_stepMade
  5789 ;; This function is called by:
  5790 ;;		_executeData
  5791 ;; This function uses a non-reentrant model
  5792 ;;
  5793                           
  5794                           	psect	text33
  5795  002472                     __ptext33:
  5796                           	callstack 0
  5797  002472                     _pickObject:
  5798                           	callstack 0
  5799  002472  FFFF               	dw	65535	; assembler added errata NOP
  5800  002474                     
  5801                           ;motors.c: 803:     LATDbits.LATD1 = 1;
  5802  002474  828C               	bsf	140,1,c	;volatile
  5803                           
  5804                           ;motors.c: 806:     T2CONbits.TMR2ON = 1;
  5805  002476  84CA               	bsf	202,2,c	;volatile
  5806  002478                     l4262:
  5807  002478  FFFF               	dw	65535	; assembler added errata NOP
  5808  00247A  EC86  F012         	call	_stepMade	;wreg free
  5809  00247E  5012               	movf	?_stepMade^0,w,c
  5810  002480  1013               	iorwf	(?_stepMade+1)^0,w,c
  5811  002482  B4D8               	btfsc	status,2,c
  5812  002484  EF46  F012         	goto	u3711
  5813  002488  EF49  F012         	goto	u3710
  5814  00248C                     u3711:
  5815  00248C  FFFF               	dw	65535	; assembler added errata NOP
  5816  00248E  EF3C  F012         	goto	l4262
  5817  002492                     u3710:
  5818  002492  FFFF               	dw	65535	; assembler added errata NOP
  5819  002494                     
  5820                           ;motors.c: 808:     T2CONbits.TMR2ON = 0;
  5821  002494  94CA               	bcf	202,2,c	;volatile
  5822  002496                     
  5823                           ;motors.c: 809:     TMR2 = 0;
  5824  002496  0E00               	movlw	0
  5825  002498  6ECC               	movwf	204,c	;volatile
  5826  00249A                     
  5827                           ;motors.c: 812:     resetTM2_Temp();
  5828  00249A  ECA2  F012         	call	_resetTM2_Temp	;wreg free
  5829  00249E  0012               	return		;funcret
  5830  0024A0  FFFF               	dw	65535	; errata NOP
  5831  0024A2                     __end_of_pickObject:
  5832                           	callstack 0
  5833                           
  5834 ;; *************** function _moveToPoint *****************
  5835 ;; Defined at:
  5836 ;;		line 315 in file "motors.c"
  5837 ;; Parameters:    Size  Location     Type
  5838 ;;  x1              2   20[COMRAM] int 
  5839 ;;  y1              2   22[COMRAM] int 
  5840 ;;  x2              2   24[COMRAM] int 
  5841 ;;  y2              2   26[COMRAM] int 
  5842 ;; Auto vars:     Size  Location     Type
  5843 ;;  keepMovingY     1   33[COMRAM] unsigned char 
  5844 ;;  keepMovingX     1   32[COMRAM] unsigned char 
  5845 ;;  MOT2Directio    1   31[COMRAM] unsigned char 
  5846 ;;  MOT1Directio    1   30[COMRAM] unsigned char 
  5847 ;; Return value:  Size  Location     Type
  5848 ;;                  1    wreg      unsigned char 
  5849 ;; Registers used:
  5850 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5851 ;; Tracked objects:
  5852 ;;		On entry : 0/0
  5853 ;;		On exit  : 0/0
  5854 ;;		Unchanged: 0/0
  5855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5856 ;;      Params:         8       0       0       0       0       0       0
  5857 ;;      Locals:         4       0       0       0       0       0       0
  5858 ;;      Temps:          2       0       0       0       0       0       0
  5859 ;;      Totals:        14       0       0       0       0       0       0
  5860 ;;Total ram usage:       14 bytes
  5861 ;; Hardware stack levels used:    1
  5862 ;; Hardware stack levels required when called:    5
  5863 ;; This function calls:
  5864 ;;		_resetStep
  5865 ;;		_resetTM0_Temp
  5866 ;;		_resetTM2_Temp
  5867 ;;		_stepCounter
  5868 ;;		_stepMade
  5869 ;; This function is called by:
  5870 ;;		_executeData
  5871 ;; This function uses a non-reentrant model
  5872 ;;
  5873                           
  5874                           	psect	text34
  5875  000A48                     __ptext34:
  5876                           	callstack 0
  5877  000A48                     _moveToPoint:
  5878                           	callstack 0
  5879  000A48  FFFF               	dw	65535	; assembler added errata NOP
  5880  000A4A                     
  5881                           ;motors.c: 317:     unsigned char MOT1Direction, MOT2Direction;;motors.c: 337:     if((x
      +                          2 - x1) > 0){
  5882  000A4A  5015               	movf	moveToPoint@x1^0,w,c
  5883  000A4C  5C19               	subwf	moveToPoint@x2^0,w,c
  5884  000A4E  6E1D               	movwf	??_moveToPoint^0,c
  5885  000A50  5016               	movf	(moveToPoint@x1+1)^0,w,c
  5886  000A52  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  5887  000A54  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5888  000A56  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5889  000A58  EF36  F005         	goto	u3301
  5890  000A5C  501E               	movf	(??_moveToPoint+1)^0,w,c
  5891  000A5E  E109               	bnz	u3300
  5892  000A60  041D               	decf	??_moveToPoint^0,w,c
  5893  000A62  A0D8               	btfss	status,0,c
  5894  000A64  EF36  F005         	goto	u3301
  5895  000A68  EF39  F005         	goto	u3300
  5896  000A6C                     u3301:
  5897  000A6C  FFFF               	dw	65535	; assembler added errata NOP
  5898  000A6E  EF40  F005         	goto	l154
  5899  000A72                     u3300:
  5900  000A72  FFFF               	dw	65535	; assembler added errata NOP
  5901  000A74                     
  5902                           ;motors.c: 338:         motCounter[0][1] = 1;
  5903  000A74  0E01               	movlw	1
  5904  000A76  6E68               	movwf	(_motCounter+1)^0,c
  5905                           
  5906                           ;motors.c: 339:         MOT1Direction = 1;
  5907  000A78  0E01               	movlw	1
  5908  000A7A  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  5909                           
  5910                           ;motors.c: 340:     }else{
  5911  000A7C  EF44  F005         	goto	l4018
  5912  000A80                     l154:
  5913  000A80  FFFF               	dw	65535	; assembler added errata NOP
  5914                           
  5915                           ;motors.c: 341:         motCounter[0][1] = -1;
  5916  000A82  6868               	setf	(_motCounter+1)^0,c
  5917  000A84                     
  5918                           ;motors.c: 342:         MOT1Direction = 0;
  5919  000A84  0E00               	movlw	0
  5920  000A86  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  5921  000A88                     l4018:
  5922  000A88  FFFF               	dw	65535	; assembler added errata NOP
  5923                           
  5924                           ;motors.c: 345:     if((y2 - y1) > 0){
  5925  000A8A  5017               	movf	moveToPoint@y1^0,w,c
  5926  000A8C  5C1B               	subwf	moveToPoint@y2^0,w,c
  5927  000A8E  6E1D               	movwf	??_moveToPoint^0,c
  5928  000A90  5018               	movf	(moveToPoint@y1+1)^0,w,c
  5929  000A92  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  5930  000A94  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5931  000A96  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5932  000A98  EF56  F005         	goto	u3311
  5933  000A9C  501E               	movf	(??_moveToPoint+1)^0,w,c
  5934  000A9E  E109               	bnz	u3310
  5935  000AA0  041D               	decf	??_moveToPoint^0,w,c
  5936  000AA2  A0D8               	btfss	status,0,c
  5937  000AA4  EF56  F005         	goto	u3311
  5938  000AA8  EF59  F005         	goto	u3310
  5939  000AAC                     u3311:
  5940  000AAC  FFFF               	dw	65535	; assembler added errata NOP
  5941  000AAE  EF60  F005         	goto	l156
  5942  000AB2                     u3310:
  5943  000AB2  FFFF               	dw	65535	; assembler added errata NOP
  5944  000AB4                     
  5945                           ;motors.c: 346:         motCounter[1][1] = 1;
  5946  000AB4  0E01               	movlw	1
  5947  000AB6  6E6A               	movwf	(_motCounter+3)^0,c
  5948                           
  5949                           ;motors.c: 347:         MOT2Direction = 1;
  5950  000AB8  0E01               	movlw	1
  5951  000ABA  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  5952                           
  5953                           ;motors.c: 348:     }else{
  5954  000ABC  EF64  F005         	goto	l157
  5955  000AC0                     l156:
  5956  000AC0  FFFF               	dw	65535	; assembler added errata NOP
  5957                           
  5958                           ;motors.c: 349:         motCounter[1][1] = -1;
  5959  000AC2  686A               	setf	(_motCounter+3)^0,c
  5960  000AC4                     
  5961                           ;motors.c: 350:         MOT2Direction = 0;
  5962  000AC4  0E00               	movlw	0
  5963  000AC6  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  5964  000AC8                     l157:
  5965  000AC8  FFFF               	dw	65535	; assembler added errata NOP
  5966                           
  5967                           ;motors.c: 355:     unsigned char keepMovingX = 1;
  5968  000ACA  0E01               	movlw	1
  5969  000ACC  6E21               	movwf	moveToPoint@keepMovingX^0,c
  5970                           
  5971                           ;motors.c: 356:     unsigned char keepMovingY = 1;
  5972  000ACE  0E01               	movlw	1
  5973  000AD0  6E22               	movwf	moveToPoint@keepMovingY^0,c
  5974  000AD2                     
  5975                           ;motors.c: 359:     T2CONbits.TMR2ON = 1;
  5976  000AD2  84CA               	bsf	202,2,c	;volatile
  5977                           
  5978                           ;motors.c: 361:     tm0Error = 0;
  5979  000AD4  0E00               	movlw	0
  5980  000AD6  6E5A               	movwf	(_tm0Error+1)^0,c
  5981  000AD8  0E00               	movlw	0
  5982  000ADA  6E59               	movwf	_tm0Error^0,c
  5983                           
  5984                           ;motors.c: 362:     tm0Limit = 200;
  5985  000ADC  0EC8               	movlw	200
  5986  000ADE  6E66               	movwf	_tm0Limit^0,c
  5987  000AE0                     
  5988                           ;motors.c: 363:     T0CONbits.TMR0ON = 1;
  5989  000AE0  8ED5               	bsf	213,7,c	;volatile
  5990                           
  5991                           ;motors.c: 365:     while(keepMovingX || keepMovingY){
  5992  000AE2  EFA0  F006         	goto	l4090
  5993  000AE6                     l4028:
  5994  000AE6  FFFF               	dw	65535	; assembler added errata NOP
  5995                           
  5996                           ;motors.c: 368:         if(tm0Error){
  5997  000AE8  5059               	movf	_tm0Error^0,w,c
  5998  000AEA  105A               	iorwf	(_tm0Error+1)^0,w,c
  5999  000AEC  B4D8               	btfsc	status,2,c
  6000  000AEE  EF7B  F005         	goto	u3321
  6001  000AF2  EF7E  F005         	goto	u3320
  6002  000AF6                     u3321:
  6003  000AF6  FFFF               	dw	65535	; assembler added errata NOP
  6004  000AF8  EF85  F005         	goto	l4032
  6005  000AFC                     u3320:
  6006  000AFC  FFFF               	dw	65535	; assembler added errata NOP
  6007  000AFE                     
  6008                           ;motors.c: 374:             tm0Error = 4;
  6009  000AFE  0E00               	movlw	0
  6010  000B00  6E5A               	movwf	(_tm0Error+1)^0,c
  6011  000B02  0E04               	movlw	4
  6012  000B04  6E59               	movwf	_tm0Error^0,c
  6013                           
  6014                           ;motors.c: 375:             break;
  6015  000B06  EFB4  F006         	goto	l161
  6016  000B0A                     l4032:
  6017  000B0A  FFFF               	dw	65535	; assembler added errata NOP
  6018                           
  6019                           ;motors.c: 383:         if(MOT1Direction == 1){
  6020  000B0C  041F               	decf	moveToPoint@MOT1Direction^0,w,c
  6021  000B0E  A4D8               	btfss	status,2,c
  6022  000B10  EF8C  F005         	goto	u3331
  6023  000B14  EF8F  F005         	goto	u3330
  6024  000B18                     u3331:
  6025  000B18  FFFF               	dw	65535	; assembler added errata NOP
  6026  000B1A  EFCE  F005         	goto	l4046
  6027  000B1E                     u3330:
  6028  000B1E  FFFF               	dw	65535	; assembler added errata NOP
  6029  000B20                     
  6030                           ;motors.c: 384:             if(x1 + stepCounter() >= x2){
  6031  000B20  ECEA  F012         	call	_stepCounter	;wreg free
  6032  000B24  5015               	movf	moveToPoint@x1^0,w,c
  6033  000B26  2612               	addwf	?_stepCounter^0,f,c
  6034  000B28  5016               	movf	(moveToPoint@x1+1)^0,w,c
  6035  000B2A  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6036  000B2C  5019               	movf	moveToPoint@x2^0,w,c
  6037  000B2E  5C12               	subwf	?_stepCounter^0,w,c
  6038  000B30  501A               	movf	(moveToPoint@x2+1)^0,w,c
  6039  000B32  5813               	subwfb	(?_stepCounter+1)^0,w,c
  6040  000B34  A0D8               	btfss	status,0,c
  6041  000B36  EF9F  F005         	goto	u3341
  6042  000B3A  EFA2  F005         	goto	u3340
  6043  000B3E                     u3341:
  6044  000B3E  FFFF               	dw	65535	; assembler added errata NOP
  6045  000B40  EFA8  F005         	goto	l4038
  6046  000B44                     u3340:
  6047  000B44  FFFF               	dw	65535	; assembler added errata NOP
  6048  000B46                     l4036:
  6049  000B46  FFFF               	dw	65535	; assembler added errata NOP
  6050                           
  6051                           ;motors.c: 386:                 keepMovingX = 0;
  6052  000B48  0E00               	movlw	0
  6053  000B4A  6E21               	movwf	moveToPoint@keepMovingX^0,c
  6054                           
  6055                           ;motors.c: 387:             }else if(keepMovingX){
  6056  000B4C  EF0C  F006         	goto	l4060
  6057  000B50                     l4038:
  6058  000B50  FFFF               	dw	65535	; assembler added errata NOP
  6059  000B52  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6060  000B54  B4D8               	btfsc	status,2,c
  6061  000B56  EFAF  F005         	goto	u3351
  6062  000B5A  EFB2  F005         	goto	u3350
  6063  000B5E                     u3351:
  6064  000B5E  FFFF               	dw	65535	; assembler added errata NOP
  6065  000B60  EF0C  F006         	goto	l4060
  6066  000B64                     u3350:
  6067  000B64  FFFF               	dw	65535	; assembler added errata NOP
  6068  000B66                     
  6069                           ;motors.c: 393:             motCounter[0][0] += motCounter[0][1];
  6070  000B66  5068               	movf	(_motCounter+1)^0,w,c
  6071  000B68  2667               	addwf	_motCounter^0,f,c
  6072                           
  6073                           ;motors.c: 394:             if(motCounter[0][0] > 3){
  6074  000B6A  5067               	movf	_motCounter^0,w,c
  6075  000B6C  0A80               	xorlw	128
  6076  000B6E  0F7C               	addlw	-132
  6077  000B70  A0D8               	btfss	status,0,c
  6078  000B72  EFBD  F005         	goto	u3361
  6079  000B76  EFC0  F005         	goto	u3360
  6080  000B7A                     u3361:
  6081  000B7A  FFFF               	dw	65535	; assembler added errata NOP
  6082  000B7C  EFC3  F005         	goto	l4044
  6083  000B80                     u3360:
  6084  000B80  FFFF               	dw	65535	; assembler added errata NOP
  6085  000B82                     
  6086                           ;motors.c: 395:                 motCounter[0][0] = 0;
  6087  000B82  0E00               	movlw	0
  6088  000B84  6E67               	movwf	_motCounter^0,c
  6089  000B86                     l4044:
  6090  000B86  FFFF               	dw	65535	; assembler added errata NOP
  6091                           
  6092                           ;motors.c: 398:             LATA = stepMot1[motCounter[0][0]];
  6093  000B88  0E8C               	movlw	low _stepMot1
  6094  000B8A  2467               	addwf	_motCounter^0,w,c
  6095  000B8C  6ED9               	movwf	fsr2l,c
  6096  000B8E  6ADA               	clrf	fsr2h,c
  6097  000B90  0E00               	movlw	high _stepMot1
  6098  000B92  22DA               	addwfc	fsr2h,f,c
  6099  000B94  50DF               	movf	indf2,w,c
  6100  000B96  6E89               	movwf	137,c	;volatile
  6101  000B98  EF0C  F006         	goto	l4060
  6102  000B9C                     l4046:
  6103  000B9C  FFFF               	dw	65535	; assembler added errata NOP
  6104  000B9E  501F               	movf	moveToPoint@MOT1Direction^0,w,c
  6105  000BA0  A4D8               	btfss	status,2,c
  6106  000BA2  EFD5  F005         	goto	u3371
  6107  000BA6  EFD8  F005         	goto	u3370
  6108  000BAA                     u3371:
  6109  000BAA  FFFF               	dw	65535	; assembler added errata NOP
  6110  000BAC  EF0C  F006         	goto	l4060
  6111  000BB0                     u3370:
  6112  000BB0  FFFF               	dw	65535	; assembler added errata NOP
  6113  000BB2                     
  6114                           ;motors.c: 402:             if(x1 - stepCounter() <= x2){
  6115  000BB2  ECEA  F012         	call	_stepCounter	;wreg free
  6116  000BB6  C015  F01D         	movff	moveToPoint@x1,??_moveToPoint
  6117  000BBA  C016  F01E         	movff	moveToPoint@x1+1,??_moveToPoint+1
  6118  000BBE  5012               	movf	?_stepCounter^0,w,c
  6119  000BC0  5E1D               	subwf	??_moveToPoint^0,f,c
  6120  000BC2  5013               	movf	(?_stepCounter+1)^0,w,c
  6121  000BC4  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6122  000BC6  501D               	movf	??_moveToPoint^0,w,c
  6123  000BC8  5C19               	subwf	moveToPoint@x2^0,w,c
  6124  000BCA  501E               	movf	(??_moveToPoint+1)^0,w,c
  6125  000BCC  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  6126  000BCE  A0D8               	btfss	status,0,c
  6127  000BD0  EFEC  F005         	goto	u3381
  6128  000BD4  EFEF  F005         	goto	u3380
  6129  000BD8                     u3381:
  6130  000BD8  FFFF               	dw	65535	; assembler added errata NOP
  6131  000BDA  EFF2  F005         	goto	l4052
  6132  000BDE                     u3380:
  6133  000BDE  FFFF               	dw	65535	; assembler added errata NOP
  6134  000BE0  EFA3  F005         	goto	l4036
  6135  000BE4                     l4052:
  6136  000BE4  FFFF               	dw	65535	; assembler added errata NOP
  6137  000BE6  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6138  000BE8  B4D8               	btfsc	status,2,c
  6139  000BEA  EFF9  F005         	goto	u3391
  6140  000BEE  EFFC  F005         	goto	u3390
  6141  000BF2                     u3391:
  6142  000BF2  FFFF               	dw	65535	; assembler added errata NOP
  6143  000BF4  EF0C  F006         	goto	l4060
  6144  000BF8                     u3390:
  6145  000BF8  FFFF               	dw	65535	; assembler added errata NOP
  6146  000BFA                     
  6147                           ;motors.c: 411:             motCounter[0][0] += motCounter[0][1];
  6148  000BFA  5068               	movf	(_motCounter+1)^0,w,c
  6149  000BFC  2667               	addwf	_motCounter^0,f,c
  6150                           
  6151                           ;motors.c: 412:             if(motCounter[0][0] < 0){
  6152  000BFE  BE67               	btfsc	_motCounter^0,7,c
  6153  000C00  EF07  F006         	goto	u3400
  6154  000C04  EF04  F006         	goto	u3401
  6155  000C08                     u3401:
  6156  000C08  FFFF               	dw	65535	; assembler added errata NOP
  6157  000C0A  EFC3  F005         	goto	l4044
  6158  000C0E                     u3400:
  6159  000C0E  FFFF               	dw	65535	; assembler added errata NOP
  6160  000C10                     
  6161                           ;motors.c: 413:                 motCounter[0][0] = 3;
  6162  000C10  0E03               	movlw	3
  6163  000C12  6E67               	movwf	_motCounter^0,c
  6164  000C14  EFC3  F005         	goto	l4044
  6165  000C18                     l4060:
  6166  000C18  FFFF               	dw	65535	; assembler added errata NOP
  6167                           
  6168                           ;motors.c: 421:         if(MOT2Direction == 1){
  6169  000C1A  0420               	decf	moveToPoint@MOT2Direction^0,w,c
  6170  000C1C  A4D8               	btfss	status,2,c
  6171  000C1E  EF13  F006         	goto	u3411
  6172  000C22  EF16  F006         	goto	u3410
  6173  000C26                     u3411:
  6174  000C26  FFFF               	dw	65535	; assembler added errata NOP
  6175  000C28  EF55  F006         	goto	l4074
  6176  000C2C                     u3410:
  6177  000C2C  FFFF               	dw	65535	; assembler added errata NOP
  6178  000C2E                     
  6179                           ;motors.c: 423:             if(y1 + stepCounter() >= y2){
  6180  000C2E  ECEA  F012         	call	_stepCounter	;wreg free
  6181  000C32  5017               	movf	moveToPoint@y1^0,w,c
  6182  000C34  2612               	addwf	?_stepCounter^0,f,c
  6183  000C36  5018               	movf	(moveToPoint@y1+1)^0,w,c
  6184  000C38  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6185  000C3A  501B               	movf	moveToPoint@y2^0,w,c
  6186  000C3C  5C12               	subwf	?_stepCounter^0,w,c
  6187  000C3E  501C               	movf	(moveToPoint@y2+1)^0,w,c
  6188  000C40  5813               	subwfb	(?_stepCounter+1)^0,w,c
  6189  000C42  A0D8               	btfss	status,0,c
  6190  000C44  EF26  F006         	goto	u3421
  6191  000C48  EF29  F006         	goto	u3420
  6192  000C4C                     u3421:
  6193  000C4C  FFFF               	dw	65535	; assembler added errata NOP
  6194  000C4E  EF2F  F006         	goto	l4066
  6195  000C52                     u3420:
  6196  000C52  FFFF               	dw	65535	; assembler added errata NOP
  6197  000C54                     l4064:
  6198  000C54  FFFF               	dw	65535	; assembler added errata NOP
  6199                           
  6200                           ;motors.c: 425:                 keepMovingY = 0;
  6201  000C56  0E00               	movlw	0
  6202  000C58  6E22               	movwf	moveToPoint@keepMovingY^0,c
  6203                           
  6204                           ;motors.c: 426:             }else if(keepMovingY){
  6205  000C5A  EF93  F006         	goto	l4088
  6206  000C5E                     l4066:
  6207  000C5E  FFFF               	dw	65535	; assembler added errata NOP
  6208  000C60  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6209  000C62  B4D8               	btfsc	status,2,c
  6210  000C64  EF36  F006         	goto	u3431
  6211  000C68  EF39  F006         	goto	u3430
  6212  000C6C                     u3431:
  6213  000C6C  FFFF               	dw	65535	; assembler added errata NOP
  6214  000C6E  EF93  F006         	goto	l178
  6215  000C72                     u3430:
  6216  000C72  FFFF               	dw	65535	; assembler added errata NOP
  6217  000C74                     
  6218                           ;motors.c: 432:             motCounter[1][0] += motCounter[1][1];
  6219  000C74  506A               	movf	(_motCounter+3)^0,w,c
  6220  000C76  2669               	addwf	(_motCounter+2)^0,f,c
  6221                           
  6222                           ;motors.c: 433:             if(motCounter[1][0] > 3){
  6223  000C78  5069               	movf	(_motCounter+2)^0,w,c
  6224  000C7A  0A80               	xorlw	128
  6225  000C7C  0F7C               	addlw	-132
  6226  000C7E  A0D8               	btfss	status,0,c
  6227  000C80  EF44  F006         	goto	u3441
  6228  000C84  EF47  F006         	goto	u3440
  6229  000C88                     u3441:
  6230  000C88  FFFF               	dw	65535	; assembler added errata NOP
  6231  000C8A  EF4A  F006         	goto	l4072
  6232  000C8E                     u3440:
  6233  000C8E  FFFF               	dw	65535	; assembler added errata NOP
  6234  000C90                     
  6235                           ;motors.c: 434:                 motCounter[1][0] = 0;
  6236  000C90  0E00               	movlw	0
  6237  000C92  6E69               	movwf	(_motCounter+2)^0,c
  6238  000C94                     l4072:
  6239  000C94  FFFF               	dw	65535	; assembler added errata NOP
  6240                           
  6241                           ;motors.c: 437:             LATB = stepMot2[motCounter[1][0]];
  6242  000C96  0E88               	movlw	low _stepMot2
  6243  000C98  2469               	addwf	(_motCounter+2)^0,w,c
  6244  000C9A  6ED9               	movwf	fsr2l,c
  6245  000C9C  6ADA               	clrf	fsr2h,c
  6246  000C9E  0E00               	movlw	high _stepMot2
  6247  000CA0  22DA               	addwfc	fsr2h,f,c
  6248  000CA2  50DF               	movf	indf2,w,c
  6249  000CA4  6E8A               	movwf	138,c	;volatile
  6250  000CA6  EF93  F006         	goto	l4088
  6251  000CAA                     l4074:
  6252  000CAA  FFFF               	dw	65535	; assembler added errata NOP
  6253  000CAC  5020               	movf	moveToPoint@MOT2Direction^0,w,c
  6254  000CAE  A4D8               	btfss	status,2,c
  6255  000CB0  EF5C  F006         	goto	u3451
  6256  000CB4  EF5F  F006         	goto	u3450
  6257  000CB8                     u3451:
  6258  000CB8  FFFF               	dw	65535	; assembler added errata NOP
  6259  000CBA  EF93  F006         	goto	l4088
  6260  000CBE                     u3450:
  6261  000CBE  FFFF               	dw	65535	; assembler added errata NOP
  6262  000CC0                     
  6263                           ;motors.c: 442:             if(y1 - stepCounter() <= y2){
  6264  000CC0  ECEA  F012         	call	_stepCounter	;wreg free
  6265  000CC4  C017  F01D         	movff	moveToPoint@y1,??_moveToPoint
  6266  000CC8  C018  F01E         	movff	moveToPoint@y1+1,??_moveToPoint+1
  6267  000CCC  5012               	movf	?_stepCounter^0,w,c
  6268  000CCE  5E1D               	subwf	??_moveToPoint^0,f,c
  6269  000CD0  5013               	movf	(?_stepCounter+1)^0,w,c
  6270  000CD2  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6271  000CD4  501D               	movf	??_moveToPoint^0,w,c
  6272  000CD6  5C1B               	subwf	moveToPoint@y2^0,w,c
  6273  000CD8  501E               	movf	(??_moveToPoint+1)^0,w,c
  6274  000CDA  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  6275  000CDC  A0D8               	btfss	status,0,c
  6276  000CDE  EF73  F006         	goto	u3461
  6277  000CE2  EF76  F006         	goto	u3460
  6278  000CE6                     u3461:
  6279  000CE6  FFFF               	dw	65535	; assembler added errata NOP
  6280  000CE8  EF79  F006         	goto	l4080
  6281  000CEC                     u3460:
  6282  000CEC  FFFF               	dw	65535	; assembler added errata NOP
  6283  000CEE  EF2A  F006         	goto	l4064
  6284  000CF2                     l4080:
  6285  000CF2  FFFF               	dw	65535	; assembler added errata NOP
  6286  000CF4  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6287  000CF6  B4D8               	btfsc	status,2,c
  6288  000CF8  EF80  F006         	goto	u3471
  6289  000CFC  EF83  F006         	goto	u3470
  6290  000D00                     u3471:
  6291  000D00  FFFF               	dw	65535	; assembler added errata NOP
  6292  000D02  EF93  F006         	goto	l4088
  6293  000D06                     u3470:
  6294  000D06  FFFF               	dw	65535	; assembler added errata NOP
  6295  000D08                     
  6296                           ;motors.c: 451:             motCounter[1][0] += motCounter[1][1];
  6297  000D08  506A               	movf	(_motCounter+3)^0,w,c
  6298  000D0A  2669               	addwf	(_motCounter+2)^0,f,c
  6299                           
  6300                           ;motors.c: 452:             if(motCounter[1][0] < 0){
  6301  000D0C  BE69               	btfsc	(_motCounter+2)^0,7,c
  6302  000D0E  EF8E  F006         	goto	u3480
  6303  000D12  EF8B  F006         	goto	u3481
  6304  000D16                     u3481:
  6305  000D16  FFFF               	dw	65535	; assembler added errata NOP
  6306  000D18  EF4A  F006         	goto	l4072
  6307  000D1C                     u3480:
  6308  000D1C  FFFF               	dw	65535	; assembler added errata NOP
  6309  000D1E                     
  6310                           ;motors.c: 453:                 motCounter[1][0] = 3;
  6311  000D1E  0E03               	movlw	3
  6312  000D20  6E69               	movwf	(_motCounter+2)^0,c
  6313  000D22  EF4A  F006         	goto	l4072
  6314  000D26                     l178:
  6315  000D26                     l4088:
  6316  000D26  FFFF               	dw	65535	; assembler added errata NOP
  6317  000D28  EC86  F012         	call	_stepMade	;wreg free
  6318  000D2C  5012               	movf	?_stepMade^0,w,c
  6319  000D2E  1013               	iorwf	(?_stepMade+1)^0,w,c
  6320  000D30  B4D8               	btfsc	status,2,c
  6321  000D32  EF9D  F006         	goto	u3491
  6322  000D36  EFA0  F006         	goto	u3490
  6323  000D3A                     u3491:
  6324  000D3A  FFFF               	dw	65535	; assembler added errata NOP
  6325  000D3C  EF93  F006         	goto	l4088
  6326  000D40                     u3490:
  6327  000D40                     l4090:
  6328  000D40  FFFF               	dw	65535	; assembler added errata NOP
  6329                           
  6330                           ;motors.c: 365:     while(keepMovingX || keepMovingY){
  6331  000D42  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6332  000D44  A4D8               	btfss	status,2,c
  6333  000D46  EFA7  F006         	goto	u3501
  6334  000D4A  EFAA  F006         	goto	u3500
  6335  000D4E                     u3501:
  6336  000D4E  FFFF               	dw	65535	; assembler added errata NOP
  6337  000D50  EF73  F005         	goto	l4028
  6338  000D54                     u3500:
  6339  000D54  FFFF               	dw	65535	; assembler added errata NOP
  6340  000D56  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6341  000D58  A4D8               	btfss	status,2,c
  6342  000D5A  EFB1  F006         	goto	u3511
  6343  000D5E  EFB4  F006         	goto	u3510
  6344  000D62                     u3511:
  6345  000D62  FFFF               	dw	65535	; assembler added errata NOP
  6346  000D64  EF73  F005         	goto	l4028
  6347  000D68                     u3510:
  6348  000D68                     l161:
  6349  000D68  FFFF               	dw	65535	; assembler added errata NOP
  6350                           
  6351                           ;motors.c: 476:     T0CONbits.TMR0ON = 0;
  6352  000D6A  9ED5               	bcf	213,7,c	;volatile
  6353                           
  6354                           ;motors.c: 477:     T2CONbits.TMR2ON = 0;
  6355  000D6C  94CA               	bcf	202,2,c	;volatile
  6356  000D6E                     
  6357                           ;motors.c: 479:     resetTM0_Temp();
  6358  000D6E  EC04  F013         	call	_resetTM0_Temp	;wreg free
  6359                           
  6360                           ;motors.c: 480:     resetTM2_Temp();
  6361  000D72  ECA2  F012         	call	_resetTM2_Temp	;wreg free
  6362  000D76                     
  6363                           ;motors.c: 482:     TMR0 = 0;
  6364  000D76  0E00               	movlw	0
  6365  000D78  6ED7               	movwf	215,c	;volatile
  6366  000D7A  0E00               	movlw	0
  6367  000D7C  6ED6               	movwf	214,c	;volatile
  6368  000D7E                     
  6369                           ;motors.c: 483:     TMR2 = 0;
  6370  000D7E  0E00               	movlw	0
  6371  000D80  6ECC               	movwf	204,c	;volatile
  6372                           
  6373                           ;motors.c: 486:     resetStep();
  6374  000D82  EC09  F013         	call	_resetStep	;wreg free
  6375  000D86                     
  6376                           ;motors.c: 488:     return(tm0Error);
  6377  000D86  5059               	movf	_tm0Error^0,w,c
  6378  000D88  0012               	return		;funcret
  6379  000D8A  FFFF               	dw	65535	; errata NOP
  6380  000D8C                     __end_of_moveToPoint:
  6381                           	callstack 0
  6382                           
  6383 ;; *************** function _stepCounter *****************
  6384 ;; Defined at:
  6385 ;;		line 71 in file "timer.c"
  6386 ;; Parameters:    Size  Location     Type
  6387 ;;		None
  6388 ;; Auto vars:     Size  Location     Type
  6389 ;;		None
  6390 ;; Return value:  Size  Location     Type
  6391 ;;                  2   17[COMRAM] unsigned int 
  6392 ;; Registers used:
  6393 ;;		None
  6394 ;; Tracked objects:
  6395 ;;		On entry : 0/0
  6396 ;;		On exit  : 0/0
  6397 ;;		Unchanged: 0/0
  6398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6399 ;;      Params:         2       0       0       0       0       0       0
  6400 ;;      Locals:         0       0       0       0       0       0       0
  6401 ;;      Temps:          0       0       0       0       0       0       0
  6402 ;;      Totals:         2       0       0       0       0       0       0
  6403 ;;Total ram usage:        2 bytes
  6404 ;; Hardware stack levels used:    1
  6405 ;; Hardware stack levels required when called:    4
  6406 ;; This function calls:
  6407 ;;		Nothing
  6408 ;; This function is called by:
  6409 ;;		_moveToPoint
  6410 ;; This function uses a non-reentrant model
  6411 ;;
  6412                           
  6413                           	psect	text35
  6414  0025D4                     __ptext35:
  6415                           	callstack 0
  6416  0025D4                     _stepCounter:
  6417                           	callstack 0
  6418  0025D4  FFFF               	dw	65535	; assembler added errata NOP
  6419  0025D6                     
  6420                           ;timer.c: 72:     return pwmStep;
  6421  0025D6  C05C  F012         	movff	_pwmStep,?_stepCounter	;volatile
  6422  0025DA  6A13               	clrf	(?_stepCounter+1)^0,c
  6423  0025DC  0012               	return		;funcret
  6424  0025DE  FFFF               	dw	65535	; errata NOP
  6425  0025E0                     __end_of_stepCounter:
  6426                           	callstack 0
  6427                           
  6428 ;; *************** function _liftArm *****************
  6429 ;; Defined at:
  6430 ;;		line 690 in file "motors.c"
  6431 ;; Parameters:    Size  Location     Type
  6432 ;;		None
  6433 ;; Auto vars:     Size  Location     Type
  6434 ;;		None
  6435 ;; Return value:  Size  Location     Type
  6436 ;;                  1    wreg      unsigned char 
  6437 ;; Registers used:
  6438 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6439 ;; Tracked objects:
  6440 ;;		On entry : 0/0
  6441 ;;		On exit  : 0/0
  6442 ;;		Unchanged: 0/0
  6443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6444 ;;      Params:         0       0       0       0       0       0       0
  6445 ;;      Locals:         0       0       0       0       0       0       0
  6446 ;;      Temps:          0       0       0       0       0       0       0
  6447 ;;      Totals:         0       0       0       0       0       0       0
  6448 ;;Total ram usage:        0 bytes
  6449 ;; Hardware stack levels used:    1
  6450 ;; Hardware stack levels required when called:    5
  6451 ;; This function calls:
  6452 ;;		_resetStep
  6453 ;;		_resetTM0_Temp
  6454 ;;		_resetTM2_Temp
  6455 ;;		_stepMade
  6456 ;; This function is called by:
  6457 ;;		_executeData
  6458 ;; This function uses a non-reentrant model
  6459 ;;
  6460                           
  6461                           	psect	text36
  6462  002180                     __ptext36:
  6463                           	callstack 0
  6464  002180                     _liftArm:
  6465                           	callstack 0
  6466  002180  FFFF               	dw	65535	; assembler added errata NOP
  6467  002182                     
  6468                           ;motors.c: 696:     motCounter[2][1] = -1;
  6469  002182  686C               	setf	(_motCounter+5)^0,c
  6470                           
  6471                           ;motors.c: 699:     T2CONbits.TMR2ON = 1;
  6472  002184  84CA               	bsf	202,2,c	;volatile
  6473  002186                     
  6474                           ;motors.c: 701:     tm0Error = 0;
  6475  002186  0E00               	movlw	0
  6476  002188  6E5A               	movwf	(_tm0Error+1)^0,c
  6477  00218A  0E00               	movlw	0
  6478  00218C  6E59               	movwf	_tm0Error^0,c
  6479                           
  6480                           ;motors.c: 702:     tm0Limit = 200;
  6481  00218E  0EC8               	movlw	200
  6482  002190  6E66               	movwf	_tm0Limit^0,c
  6483  002192                     
  6484                           ;motors.c: 703:     T0CONbits.TMR0ON = 1;
  6485  002192  8ED5               	bsf	213,7,c	;volatile
  6486                           
  6487                           ;motors.c: 707:     while(!PORTEbits.RE2){
  6488  002194  EF04  F011         	goto	l214
  6489  002198                     l4210:
  6490  002198  FFFF               	dw	65535	; assembler added errata NOP
  6491                           
  6492                           ;motors.c: 709:         resetStep();
  6493  00219A  EC09  F013         	call	_resetStep	;wreg free
  6494  00219E                     
  6495                           ;motors.c: 712:         if(tm0Error){
  6496  00219E  5059               	movf	_tm0Error^0,w,c
  6497  0021A0  105A               	iorwf	(_tm0Error+1)^0,w,c
  6498  0021A2  B4D8               	btfsc	status,2,c
  6499  0021A4  EFD6  F010         	goto	u3641
  6500  0021A8  EFD9  F010         	goto	u3640
  6501  0021AC                     u3641:
  6502  0021AC  FFFF               	dw	65535	; assembler added errata NOP
  6503  0021AE  EFE0  F010         	goto	l4216
  6504  0021B2                     u3640:
  6505  0021B2  FFFF               	dw	65535	; assembler added errata NOP
  6506  0021B4                     
  6507                           ;motors.c: 717:             tm0Error = 6;
  6508  0021B4  0E00               	movlw	0
  6509  0021B6  6E5A               	movwf	(_tm0Error+1)^0,c
  6510  0021B8  0E06               	movlw	6
  6511  0021BA  6E59               	movwf	_tm0Error^0,c
  6512                           
  6513                           ;motors.c: 718:             break;
  6514  0021BC  EF0D  F011         	goto	l217
  6515  0021C0                     l4216:
  6516  0021C0  FFFF               	dw	65535	; assembler added errata NOP
  6517                           
  6518                           ;motors.c: 727:             motCounter[2][0] += motCounter[2][1];
  6519  0021C2  506C               	movf	(_motCounter+5)^0,w,c
  6520  0021C4  266B               	addwf	(_motCounter+4)^0,f,c
  6521                           
  6522                           ;motors.c: 728:             if(motCounter[2][0] < 0){
  6523  0021C6  BE6B               	btfsc	(_motCounter+4)^0,7,c
  6524  0021C8  EFEB  F010         	goto	u3650
  6525  0021CC  EFE8  F010         	goto	u3651
  6526  0021D0                     u3651:
  6527  0021D0  FFFF               	dw	65535	; assembler added errata NOP
  6528  0021D2  EFEE  F010         	goto	l4220
  6529  0021D6                     u3650:
  6530  0021D6  FFFF               	dw	65535	; assembler added errata NOP
  6531  0021D8                     
  6532                           ;motors.c: 729:                 motCounter[2][0] = 3;
  6533  0021D8  0E03               	movlw	3
  6534  0021DA  6E6B               	movwf	(_motCounter+4)^0,c
  6535  0021DC                     l4220:
  6536  0021DC  FFFF               	dw	65535	; assembler added errata NOP
  6537                           
  6538                           ;motors.c: 732:             LATC = stepMot3[motCounter[2][0]];
  6539  0021DE  0E84               	movlw	low _stepMot3
  6540  0021E0  246B               	addwf	(_motCounter+4)^0,w,c
  6541  0021E2  6ED9               	movwf	fsr2l,c
  6542  0021E4  6ADA               	clrf	fsr2h,c
  6543  0021E6  0E00               	movlw	high _stepMot3
  6544  0021E8  22DA               	addwfc	fsr2h,f,c
  6545  0021EA  50DF               	movf	indf2,w,c
  6546  0021EC  6E8B               	movwf	139,c	;volatile
  6547  0021EE                     l4222:
  6548  0021EE  FFFF               	dw	65535	; assembler added errata NOP
  6549  0021F0  EC86  F012         	call	_stepMade	;wreg free
  6550  0021F4  5012               	movf	?_stepMade^0,w,c
  6551  0021F6  1013               	iorwf	(?_stepMade+1)^0,w,c
  6552  0021F8  B4D8               	btfsc	status,2,c
  6553  0021FA  EF01  F011         	goto	u3661
  6554  0021FE  EF04  F011         	goto	u3660
  6555  002202                     u3661:
  6556  002202  FFFF               	dw	65535	; assembler added errata NOP
  6557  002204  EFF7  F010         	goto	l4222
  6558  002208                     u3660:
  6559  002208                     l214:
  6560  002208  FFFF               	dw	65535	; assembler added errata NOP
  6561                           
  6562                           ;motors.c: 707:     while(!PORTEbits.RE2){
  6563  00220A  A484               	btfss	132,2,c	;volatile
  6564  00220C  EF0A  F011         	goto	u3671
  6565  002210  EF0D  F011         	goto	u3670
  6566  002214                     u3671:
  6567  002214  FFFF               	dw	65535	; assembler added errata NOP
  6568  002216  EFCC  F010         	goto	l4210
  6569  00221A                     u3670:
  6570  00221A                     l217:
  6571  00221A  FFFF               	dw	65535	; assembler added errata NOP
  6572                           
  6573                           ;motors.c: 749:     T0CONbits.TMR0ON = 0;
  6574  00221C  9ED5               	bcf	213,7,c	;volatile
  6575                           
  6576                           ;motors.c: 750:     T2CONbits.TMR2ON = 0;
  6577  00221E  94CA               	bcf	202,2,c	;volatile
  6578  002220                     
  6579                           ;motors.c: 752:     resetTM0_Temp();
  6580  002220  EC04  F013         	call	_resetTM0_Temp	;wreg free
  6581                           
  6582                           ;motors.c: 753:     resetTM2_Temp();
  6583  002224  ECA2  F012         	call	_resetTM2_Temp	;wreg free
  6584  002228                     
  6585                           ;motors.c: 755:     TMR0 = 0;
  6586  002228  0E00               	movlw	0
  6587  00222A  6ED7               	movwf	215,c	;volatile
  6588  00222C  0E00               	movlw	0
  6589  00222E  6ED6               	movwf	214,c	;volatile
  6590  002230                     
  6591                           ;motors.c: 756:     TMR2 = 0;
  6592  002230  0E00               	movlw	0
  6593  002232  6ECC               	movwf	204,c	;volatile
  6594                           
  6595                           ;motors.c: 759:     resetStep();
  6596  002234  EC09  F013         	call	_resetStep	;wreg free
  6597  002238                     
  6598                           ;motors.c: 761:     return(tm0Error);
  6599  002238  5059               	movf	_tm0Error^0,w,c
  6600  00223A  0012               	return		;funcret
  6601  00223C  FFFF               	dw	65535	; errata NOP
  6602  00223E                     __end_of_liftArm:
  6603                           	callstack 0
  6604                           
  6605 ;; *************** function _stepMade *****************
  6606 ;; Defined at:
  6607 ;;		line 60 in file "timer.c"
  6608 ;; Parameters:    Size  Location     Type
  6609 ;;		None
  6610 ;; Auto vars:     Size  Location     Type
  6611 ;;  temp            1   19[COMRAM] unsigned char 
  6612 ;; Return value:  Size  Location     Type
  6613 ;;                  2   17[COMRAM] unsigned int 
  6614 ;; Registers used:
  6615 ;;		wreg, status,2
  6616 ;; Tracked objects:
  6617 ;;		On entry : 0/0
  6618 ;;		On exit  : 0/0
  6619 ;;		Unchanged: 0/0
  6620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6621 ;;      Params:         2       0       0       0       0       0       0
  6622 ;;      Locals:         1       0       0       0       0       0       0
  6623 ;;      Temps:          0       0       0       0       0       0       0
  6624 ;;      Totals:         3       0       0       0       0       0       0
  6625 ;;Total ram usage:        3 bytes
  6626 ;; Hardware stack levels used:    1
  6627 ;; Hardware stack levels required when called:    4
  6628 ;; This function calls:
  6629 ;;		Nothing
  6630 ;; This function is called by:
  6631 ;;		_resetPosition
  6632 ;;		_moveToPoint
  6633 ;;		_touchObject
  6634 ;;		_touchTherm
  6635 ;;		_liftArm
  6636 ;;		_rotateObj
  6637 ;;		_pickObject
  6638 ;;		_releaseObj
  6639 ;; This function uses a non-reentrant model
  6640 ;;
  6641                           
  6642                           	psect	text37
  6643  00250C                     __ptext37:
  6644                           	callstack 0
  6645  00250C                     _stepMade:
  6646                           	callstack 0
  6647  00250C  FFFF               	dw	65535	; assembler added errata NOP
  6648  00250E                     
  6649                           ;timer.c: 61:     unsigned char temp = stepToggle;
  6650  00250E  C05B  F014         	movff	_stepToggle,stepMade@temp	;volatile
  6651  002512                     
  6652                           ;timer.c: 63:     stepToggle = 0;
  6653  002512  0E00               	movlw	0
  6654  002514  6E5B               	movwf	_stepToggle^0,c	;volatile
  6655  002516                     
  6656                           ;timer.c: 65:     return temp;
  6657  002516  C014  F012         	movff	stepMade@temp,?_stepMade
  6658  00251A  6A13               	clrf	(?_stepMade+1)^0,c
  6659  00251C  0012               	return		;funcret
  6660  00251E  FFFF               	dw	65535	; errata NOP
  6661  002520                     __end_of_stepMade:
  6662                           	callstack 0
  6663                           
  6664 ;; *************** function _resetTM2_Temp *****************
  6665 ;; Defined at:
  6666 ;;		line 26 in file "interrupt.c"
  6667 ;; Parameters:    Size  Location     Type
  6668 ;;		None
  6669 ;; Auto vars:     Size  Location     Type
  6670 ;;		None
  6671 ;; Return value:  Size  Location     Type
  6672 ;;                  1    wreg      void 
  6673 ;; Registers used:
  6674 ;;		wreg, status,2
  6675 ;; Tracked objects:
  6676 ;;		On entry : 0/0
  6677 ;;		On exit  : 0/0
  6678 ;;		Unchanged: 0/0
  6679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6680 ;;      Params:         0       0       0       0       0       0       0
  6681 ;;      Locals:         0       0       0       0       0       0       0
  6682 ;;      Temps:          0       0       0       0       0       0       0
  6683 ;;      Totals:         0       0       0       0       0       0       0
  6684 ;;Total ram usage:        0 bytes
  6685 ;; Hardware stack levels used:    1
  6686 ;; Hardware stack levels required when called:    4
  6687 ;; This function calls:
  6688 ;;		Nothing
  6689 ;; This function is called by:
  6690 ;;		_resetPosition
  6691 ;;		_moveToPoint
  6692 ;;		_touchObject
  6693 ;;		_touchTherm
  6694 ;;		_liftArm
  6695 ;;		_rotateObj
  6696 ;;		_pickObject
  6697 ;;		_releaseObj
  6698 ;; This function uses a non-reentrant model
  6699 ;;
  6700                           
  6701                           	psect	text38
  6702  002544                     __ptext38:
  6703                           	callstack 0
  6704  002544                     _resetTM2_Temp:
  6705                           	callstack 0
  6706  002544  FFFF               	dw	65535	; assembler added errata NOP
  6707  002546                     
  6708                           ;interrupt.c: 27:     single_cycle = 0;
  6709  002546  0E00               	movlw	0
  6710  002548  6E52               	movwf	(_single_cycle+1)^0,c
  6711  00254A  0E00               	movlw	0
  6712  00254C  6E51               	movwf	_single_cycle^0,c
  6713                           
  6714                           ;interrupt.c: 28:     completeStep = 0;
  6715  00254E  0E00               	movlw	0
  6716  002550  6E62               	movwf	_completeStep^0,c
  6717  002552  0012               	return		;funcret
  6718  002554  FFFF               	dw	65535	; errata NOP
  6719  002556                     __end_of_resetTM2_Temp:
  6720                           	callstack 0
  6721                           
  6722 ;; *************** function _resetTM0_Temp *****************
  6723 ;; Defined at:
  6724 ;;		line 22 in file "interrupt.c"
  6725 ;; Parameters:    Size  Location     Type
  6726 ;;		None
  6727 ;; Auto vars:     Size  Location     Type
  6728 ;;		None
  6729 ;; Return value:  Size  Location     Type
  6730 ;;                  1    wreg      void 
  6731 ;; Registers used:
  6732 ;;		wreg, status,2
  6733 ;; Tracked objects:
  6734 ;;		On entry : 0/0
  6735 ;;		On exit  : 0/0
  6736 ;;		Unchanged: 0/0
  6737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6738 ;;      Params:         0       0       0       0       0       0       0
  6739 ;;      Locals:         0       0       0       0       0       0       0
  6740 ;;      Temps:          0       0       0       0       0       0       0
  6741 ;;      Totals:         0       0       0       0       0       0       0
  6742 ;;Total ram usage:        0 bytes
  6743 ;; Hardware stack levels used:    1
  6744 ;; Hardware stack levels required when called:    4
  6745 ;; This function calls:
  6746 ;;		Nothing
  6747 ;; This function is called by:
  6748 ;;		_resetPosition
  6749 ;;		_moveToPoint
  6750 ;;		_touchObject
  6751 ;;		_touchTherm
  6752 ;;		_liftArm
  6753 ;; This function uses a non-reentrant model
  6754 ;;
  6755                           
  6756                           	psect	text39
  6757  002608                     __ptext39:
  6758                           	callstack 0
  6759  002608                     _resetTM0_Temp:
  6760                           	callstack 0
  6761  002608  FFFF               	dw	65535	; assembler added errata NOP
  6762  00260A                     
  6763                           ;interrupt.c: 23:     tm0Count = 0;
  6764  00260A  0E00               	movlw	0
  6765  00260C  6E63               	movwf	_tm0Count^0,c
  6766  00260E  0012               	return		;funcret
  6767  002610  FFFF               	dw	65535	; errata NOP
  6768  002612                     __end_of_resetTM0_Temp:
  6769                           	callstack 0
  6770                           
  6771 ;; *************** function _resetStep *****************
  6772 ;; Defined at:
  6773 ;;		line 78 in file "timer.c"
  6774 ;; Parameters:    Size  Location     Type
  6775 ;;		None
  6776 ;; Auto vars:     Size  Location     Type
  6777 ;;		None
  6778 ;; Return value:  Size  Location     Type
  6779 ;;                  1    wreg      void 
  6780 ;; Registers used:
  6781 ;;		wreg, status,2
  6782 ;; Tracked objects:
  6783 ;;		On entry : 0/0
  6784 ;;		On exit  : 0/0
  6785 ;;		Unchanged: 0/0
  6786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6787 ;;      Params:         0       0       0       0       0       0       0
  6788 ;;      Locals:         0       0       0       0       0       0       0
  6789 ;;      Temps:          0       0       0       0       0       0       0
  6790 ;;      Totals:         0       0       0       0       0       0       0
  6791 ;;Total ram usage:        0 bytes
  6792 ;; Hardware stack levels used:    1
  6793 ;; Hardware stack levels required when called:    4
  6794 ;; This function calls:
  6795 ;;		Nothing
  6796 ;; This function is called by:
  6797 ;;		_resetPosition
  6798 ;;		_moveToPoint
  6799 ;;		_touchObject
  6800 ;;		_touchTherm
  6801 ;;		_liftArm
  6802 ;;		_rotateObj
  6803 ;; This function uses a non-reentrant model
  6804 ;;
  6805                           
  6806                           	psect	text40
  6807  002612                     __ptext40:
  6808                           	callstack 0
  6809  002612                     _resetStep:
  6810                           	callstack 0
  6811  002612  FFFF               	dw	65535	; assembler added errata NOP
  6812  002614                     
  6813                           ;timer.c: 79:     pwmStep = 0;
  6814  002614  0E00               	movlw	0
  6815  002616  6E5C               	movwf	_pwmStep^0,c	;volatile
  6816  002618  0012               	return		;funcret
  6817  00261A  FFFF               	dw	65535	; errata NOP
  6818  00261C                     __end_of_resetStep:
  6819                           	callstack 0
  6820                           
  6821 ;; *************** function _getData *****************
  6822 ;; Defined at:
  6823 ;;		line 40 in file "usart.c"
  6824 ;; Parameters:    Size  Location     Type
  6825 ;;		None
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;		None
  6828 ;; Return value:  Size  Location     Type
  6829 ;;                  2   17[COMRAM] PTR struct .
  6830 ;; Registers used:
  6831 ;;		wreg, status,2, status,0
  6832 ;; Tracked objects:
  6833 ;;		On entry : 0/0
  6834 ;;		On exit  : 0/0
  6835 ;;		Unchanged: 0/0
  6836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6837 ;;      Params:         2       0       0       0       0       0       0
  6838 ;;      Locals:         0       0       0       0       0       0       0
  6839 ;;      Temps:          0       0       0       0       0       0       0
  6840 ;;      Totals:         2       0       0       0       0       0       0
  6841 ;;Total ram usage:        2 bytes
  6842 ;; Hardware stack levels used:    1
  6843 ;; Hardware stack levels required when called:    4
  6844 ;; This function calls:
  6845 ;;		Nothing
  6846 ;; This function is called by:
  6847 ;;		_executeData
  6848 ;; This function uses a non-reentrant model
  6849 ;;
  6850                           
  6851                           	psect	text41
  6852  002584                     __ptext41:
  6853                           	callstack 0
  6854  002584                     _getData:
  6855                           	callstack 0
  6856  002584  FFFF               	dw	65535	; assembler added errata NOP
  6857  002586                     
  6858                           ;usart.c: 41:     return(&dataSequence[0]);
  6859  002586  0EC6               	movlw	low _dataSequence
  6860  002588  6E12               	movwf	?_getData^0,c
  6861  00258A  0E00               	movlw	high _dataSequence
  6862  00258C  6E13               	movwf	(?_getData+1)^0,c
  6863  00258E  0012               	return		;funcret
  6864  002590  FFFF               	dw	65535	; errata NOP
  6865  002592                     __end_of_getData:
  6866                           	callstack 0
  6867                           
  6868 ;; *************** function _clearTM0 *****************
  6869 ;; Defined at:
  6870 ;;		line 32 in file "motors.c"
  6871 ;; Parameters:    Size  Location     Type
  6872 ;;		None
  6873 ;; Auto vars:     Size  Location     Type
  6874 ;;		None
  6875 ;; Return value:  Size  Location     Type
  6876 ;;                  1    wreg      void 
  6877 ;; Registers used:
  6878 ;;		wreg, status,2
  6879 ;; Tracked objects:
  6880 ;;		On entry : 0/0
  6881 ;;		On exit  : 0/0
  6882 ;;		Unchanged: 0/0
  6883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6884 ;;      Params:         0       0       0       0       0       0       0
  6885 ;;      Locals:         0       0       0       0       0       0       0
  6886 ;;      Temps:          0       0       0       0       0       0       0
  6887 ;;      Totals:         0       0       0       0       0       0       0
  6888 ;;Total ram usage:        0 bytes
  6889 ;; Hardware stack levels used:    1
  6890 ;; Hardware stack levels required when called:    4
  6891 ;; This function calls:
  6892 ;;		Nothing
  6893 ;; This function is called by:
  6894 ;;		_main
  6895 ;; This function uses a non-reentrant model
  6896 ;;
  6897                           
  6898                           	psect	text42
  6899  002592                     __ptext42:
  6900                           	callstack 0
  6901  002592                     _clearTM0:
  6902                           	callstack 0
  6903  002592  FFFF               	dw	65535	; assembler added errata NOP
  6904  002594                     
  6905                           ;motors.c: 33:     tm0Error = 0;
  6906  002594  0E00               	movlw	0
  6907  002596  6E5A               	movwf	(_tm0Error+1)^0,c
  6908  002598  0E00               	movlw	0
  6909  00259A  6E59               	movwf	_tm0Error^0,c
  6910  00259C  0012               	return		;funcret
  6911  00259E  FFFF               	dw	65535	; errata NOP
  6912  0025A0                     __end_of_clearTM0:
  6913                           	callstack 0
  6914                           
  6915 ;; *************** function _isr *****************
  6916 ;; Defined at:
  6917 ;;		line 52 in file "interrupt.c"
  6918 ;; Parameters:    Size  Location     Type
  6919 ;;		None
  6920 ;; Auto vars:     Size  Location     Type
  6921 ;;  temp            1   16[COMRAM] unsigned char 
  6922 ;; Return value:  Size  Location     Type
  6923 ;;                  1    wreg      void 
  6924 ;; Registers used:
  6925 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6926 ;; Tracked objects:
  6927 ;;		On entry : 0/0
  6928 ;;		On exit  : 0/0
  6929 ;;		Unchanged: 0/0
  6930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6931 ;;      Params:         0       0       0       0       0       0       0
  6932 ;;      Locals:         1       0       0       0       0       0       0
  6933 ;;      Temps:          6       0       0       0       0       0       0
  6934 ;;      Totals:         7       0       0       0       0       0       0
  6935 ;;Total ram usage:        7 bytes
  6936 ;; Hardware stack levels used:    1
  6937 ;; Hardware stack levels required when called:    3
  6938 ;; This function calls:
  6939 ;;		_abortAll
  6940 ;;		_fatalError
  6941 ;;		_increaseStep
  6942 ;;		_retPeriod
  6943 ;;		_setThermRel
  6944 ;;		_setTouchRel
  6945 ;;		_toggleStep
  6946 ;;		_whatsTM0Limit
  6947 ;;		_writeTM0
  6948 ;;		i2_storeData
  6949 ;; This function is called by:
  6950 ;;		Interrupt level 2
  6951 ;; This function uses a non-reentrant model
  6952 ;;
  6953                           
  6954                           	psect	intcode
  6955  000008                     __pintcode:
  6956                           	callstack 0
  6957  000008                     _isr:
  6958                           	callstack 0
  6959  000008  FFFF               	dw	65535	; assembler added errata NOP
  6960                           
  6961                           ;incstack = 0
  6962  00000A  826E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6963  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  6964  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  6965  000014  CFF3 F00F          	movff	prodl,??_isr+4
  6966  000018  CFF4 F010          	movff	prodh,??_isr+5
  6967  00001C                     
  6968                           ;interrupt.c: 56:     if(INTCONbits.T0IF){
  6969  00001C  A4F2               	btfss	242,2,c	;volatile
  6970  00001E  EF13  F000         	goto	i2u276_41
  6971  000022  EF16  F000         	goto	i2u276_40
  6972  000026                     i2u276_41:
  6973  000026  FFFF               	dw	65535	; assembler added errata NOP
  6974  000028  EF2C  F000         	goto	i2l3560
  6975  00002C                     i2u276_40:
  6976  00002C  FFFF               	dw	65535	; assembler added errata NOP
  6977  00002E                     
  6978                           ;interrupt.c: 57:         INTCONbits.T0IF = 0;
  6979  00002E  94F2               	bcf	242,2,c	;volatile
  6980  000030                     
  6981                           ;interrupt.c: 60:         tm0Count++;
  6982  000030  2A63               	incf	_tm0Count^0,f,c
  6983  000032                     
  6984                           ;interrupt.c: 62:         if(tm0Count >= whatsTM0Limit()){
  6985  000032  EC31  F013         	call	_whatsTM0Limit	;wreg free
  6986  000036  6E0B               	movwf	??_isr^0,c
  6987  000038  500B               	movf	??_isr^0,w,c
  6988  00003A  5C63               	subwf	_tm0Count^0,w,c
  6989  00003C  A0D8               	btfss	status,0,c
  6990  00003E  EF23  F000         	goto	i2u277_41
  6991  000042  EF26  F000         	goto	i2u277_40
  6992  000046                     i2u277_41:
  6993  000046  FFFF               	dw	65535	; assembler added errata NOP
  6994  000048  EF2C  F000         	goto	i2l3560
  6995  00004C                     i2u277_40:
  6996  00004C  FFFF               	dw	65535	; assembler added errata NOP
  6997  00004E                     
  6998                           ;interrupt.c: 63:             T0CONbits.TMR0ON = 0;
  6999  00004E  9ED5               	bcf	213,7,c	;volatile
  7000  000050                     
  7001                           ;interrupt.c: 64:             tm0Count = 0;
  7002  000050  0E00               	movlw	0
  7003  000052  6E63               	movwf	_tm0Count^0,c
  7004  000054                     
  7005                           ;interrupt.c: 65:             writeTM0();
  7006  000054  ECD0  F012         	call	_writeTM0	;wreg free
  7007  000058                     i2l3560:
  7008  000058  FFFF               	dw	65535	; assembler added errata NOP
  7009                           
  7010                           ;interrupt.c: 70:     if(PIR1bits.TMR1IF){
  7011  00005A  A09E               	btfss	158,0,c	;volatile
  7012  00005C  EF32  F000         	goto	i2u278_41
  7013  000060  EF35  F000         	goto	i2u278_40
  7014  000064                     i2u278_41:
  7015  000064  FFFF               	dw	65535	; assembler added errata NOP
  7016  000066  EF45  F000         	goto	i2l3568
  7017  00006A                     i2u278_40:
  7018  00006A  FFFF               	dw	65535	; assembler added errata NOP
  7019  00006C                     
  7020                           ;interrupt.c: 71:         PIR1bits.TMR1IF = 0;
  7021  00006C  909E               	bcf	158,0,c	;volatile
  7022  00006E                     
  7023                           ;interrupt.c: 72:         if(fatalError()){
  7024  00006E  EC39  F013         	call	_fatalError	;wreg free
  7025  000072  0900               	iorlw	0
  7026  000074  B4D8               	btfsc	status,2,c
  7027  000076  EF3F  F000         	goto	i2u279_41
  7028  00007A  EF42  F000         	goto	i2u279_40
  7029  00007E                     i2u279_41:
  7030  00007E  FFFF               	dw	65535	; assembler added errata NOP
  7031  000080  EF45  F000         	goto	i2l3568
  7032  000084                     i2u279_40:
  7033  000084  FFFF               	dw	65535	; assembler added errata NOP
  7034  000086                     
  7035                           ;interrupt.c: 73:             abortAll();
  7036  000086  ECAB  F012         	call	_abortAll	;wreg free
  7037  00008A                     i2l3568:
  7038  00008A  FFFF               	dw	65535	; assembler added errata NOP
  7039                           
  7040                           ;interrupt.c: 78:     if(PIR1bits.TMR2IF){
  7041  00008C  A29E               	btfss	158,1,c	;volatile
  7042  00008E  EF4B  F000         	goto	i2u280_41
  7043  000092  EF4E  F000         	goto	i2u280_40
  7044  000096                     i2u280_41:
  7045  000096  FFFF               	dw	65535	; assembler added errata NOP
  7046  000098  EF80  F000         	goto	i2l3590
  7047  00009C                     i2u280_40:
  7048  00009C  FFFF               	dw	65535	; assembler added errata NOP
  7049  00009E                     
  7050                           ;interrupt.c: 79:         PIR1bits.TMR2IF = 0;
  7051  00009E  929E               	bcf	158,1,c	;volatile
  7052  0000A0                     
  7053                           ;interrupt.c: 80:         single_cycle++;
  7054  0000A0  4A51               	infsnz	_single_cycle^0,f,c
  7055  0000A2  2A52               	incf	(_single_cycle+1)^0,f,c
  7056  0000A4                     
  7057                           ;interrupt.c: 83:         if(single_cycle > retPeriod()){
  7058  0000A4  ECD7  F012         	call	_retPeriod	;wreg free
  7059  0000A8  5051               	movf	_single_cycle^0,w,c
  7060  0000AA  5C01               	subwf	?_retPeriod^0,w,c
  7061  0000AC  5052               	movf	(_single_cycle+1)^0,w,c
  7062  0000AE  5802               	subwfb	(?_retPeriod+1)^0,w,c
  7063  0000B0  B0D8               	btfsc	status,0,c
  7064  0000B2  EF5D  F000         	goto	i2u281_41
  7065  0000B6  EF60  F000         	goto	i2u281_40
  7066  0000BA                     i2u281_41:
  7067  0000BA  FFFF               	dw	65535	; assembler added errata NOP
  7068  0000BC  EF80  F000         	goto	i2l3590
  7069  0000C0                     i2u281_40:
  7070  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  7071  0000C2                     
  7072                           ;interrupt.c: 84:             single_cycle = 0;
  7073  0000C2  0E00               	movlw	0
  7074  0000C4  6E52               	movwf	(_single_cycle+1)^0,c
  7075  0000C6  0E00               	movlw	0
  7076  0000C8  6E51               	movwf	_single_cycle^0,c
  7077  0000CA                     
  7078                           ;interrupt.c: 85:             completeStep++;
  7079  0000CA  2A62               	incf	_completeStep^0,f,c
  7080  0000CC                     
  7081                           ;interrupt.c: 88:             if(completeStep != 0 && !(completeStep % 2)){
  7082  0000CC  5062               	movf	_completeStep^0,w,c
  7083  0000CE  B4D8               	btfsc	status,2,c
  7084  0000D0  EF6C  F000         	goto	i2u282_41
  7085  0000D4  EF6F  F000         	goto	i2u282_40
  7086  0000D8                     i2u282_41:
  7087  0000D8  FFFF               	dw	65535	; assembler added errata NOP
  7088  0000DA  EF7D  F000         	goto	i2l3588
  7089  0000DE                     i2u282_40:
  7090  0000DE  FFFF               	dw	65535	; assembler added errata NOP
  7091  0000E0  B062               	btfsc	_completeStep^0,0,c
  7092  0000E2  EF75  F000         	goto	i2u283_41
  7093  0000E6  EF78  F000         	goto	i2u283_40
  7094  0000EA                     i2u283_41:
  7095  0000EA  FFFF               	dw	65535	; assembler added errata NOP
  7096  0000EC  EF7D  F000         	goto	i2l3588
  7097  0000F0                     i2u283_40:
  7098  0000F0  FFFF               	dw	65535	; assembler added errata NOP
  7099  0000F2                     
  7100                           ;interrupt.c: 90:                 completeStep = 0;
  7101  0000F2  0E00               	movlw	0
  7102  0000F4  6E62               	movwf	_completeStep^0,c
  7103  0000F6                     
  7104                           ;interrupt.c: 93:                 increaseStep();
  7105  0000F6  EC35  F013         	call	_increaseStep	;wreg free
  7106  0000FA                     i2l3588:
  7107  0000FA  FFFF               	dw	65535	; assembler added errata NOP
  7108                           
  7109                           ;interrupt.c: 98:             toggleStep();
  7110  0000FC  EC0E  F013         	call	_toggleStep	;wreg free
  7111  000100                     i2l3590:
  7112  000100  FFFF               	dw	65535	; assembler added errata NOP
  7113                           
  7114                           ;interrupt.c: 103:     if(PIR1bits.ADIF){
  7115  000102  AC9E               	btfss	158,6,c	;volatile
  7116  000104  EF86  F000         	goto	i2u284_41
  7117  000108  EF89  F000         	goto	i2u284_40
  7118  00010C                     i2u284_41:
  7119  00010C  FFFF               	dw	65535	; assembler added errata NOP
  7120  00010E  EFB6  F000         	goto	i2l3602
  7121  000112                     i2u284_40:
  7122  000112  FFFF               	dw	65535	; assembler added errata NOP
  7123  000114                     
  7124                           ;interrupt.c: 104:         PIR1bits.ADIF = 0;
  7125  000114  9C9E               	bcf	158,6,c	;volatile
  7126                           
  7127                           ;interrupt.c: 107:         ADC_res = ADRESL;
  7128  000116  CFC3 F053          	movff	4035,_ADC_res	;volatile
  7129  00011A  6A54               	clrf	(_ADC_res+1)^0,c
  7130  00011C                     
  7131                           ;interrupt.c: 108:         ADC_res |= (ADRESH << 8);
  7132  00011C  50C4               	movf	196,w,c	;volatile
  7133  00011E  6E0C               	movwf	(??_isr+1)^0,c
  7134  000120  6A0B               	clrf	??_isr^0,c
  7135  000122  500B               	movf	??_isr^0,w,c
  7136  000124  1253               	iorwf	_ADC_res^0,f,c
  7137  000126  500C               	movf	(??_isr+1)^0,w,c
  7138  000128  1254               	iorwf	(_ADC_res+1)^0,f,c
  7139                           
  7140                           ;interrupt.c: 111:         if(ADC_res > therm_pressure){
  7141  00012A  0453               	decf	_ADC_res^0,w,c
  7142  00012C  0E04               	movlw	4
  7143  00012E  5854               	subwfb	(_ADC_res+1)^0,w,c
  7144  000130  A0D8               	btfss	status,0,c
  7145  000132  EF9D  F000         	goto	i2u285_41
  7146  000136  EFA0  F000         	goto	i2u285_40
  7147  00013A                     i2u285_41:
  7148  00013A  FFFF               	dw	65535	; assembler added errata NOP
  7149  00013C  EFA7  F000         	goto	i2l3598
  7150  000140                     i2u285_40:
  7151  000140  FFFF               	dw	65535	; assembler added errata NOP
  7152  000142                     
  7153                           ;interrupt.c: 113:             setTouchRel();
  7154  000142  EC13  F013         	call	_setTouchRel	;wreg free
  7155                           
  7156                           ;interrupt.c: 114:             setThermRel();
  7157  000146  EC18  F013         	call	_setThermRel	;wreg free
  7158                           
  7159                           ;interrupt.c: 115:         }else if(ADC_res > touch_pressure){
  7160  00014A  EFB6  F000         	goto	i2l3602
  7161  00014E                     i2l3598:
  7162  00014E  FFFF               	dw	65535	; assembler added errata NOP
  7163  000150  0453               	decf	_ADC_res^0,w,c
  7164  000152  0E02               	movlw	2
  7165  000154  5854               	subwfb	(_ADC_res+1)^0,w,c
  7166  000156  A0D8               	btfss	status,0,c
  7167  000158  EFB0  F000         	goto	i2u286_41
  7168  00015C  EFB3  F000         	goto	i2u286_40
  7169  000160                     i2u286_41:
  7170  000160  FFFF               	dw	65535	; assembler added errata NOP
  7171  000162  EFB6  F000         	goto	i2l3602
  7172  000166                     i2u286_40:
  7173  000166  FFFF               	dw	65535	; assembler added errata NOP
  7174  000168                     
  7175                           ;interrupt.c: 117:             setTouchRel();
  7176  000168  EC13  F013         	call	_setTouchRel	;wreg free
  7177  00016C                     i2l3602:
  7178  00016C  FFFF               	dw	65535	; assembler added errata NOP
  7179                           
  7180                           ;interrupt.c: 122:     if(PIR1bits.RC1IF){
  7181  00016E  AA9E               	btfss	158,5,c	;volatile
  7182  000170  EFBC  F000         	goto	i2u287_41
  7183  000174  EFBF  F000         	goto	i2u287_40
  7184  000178                     i2u287_41:
  7185  000178  FFFF               	dw	65535	; assembler added errata NOP
  7186  00017A  EFC6  F000         	goto	i2l470
  7187  00017E                     i2u287_40:
  7188  00017E  FFFF               	dw	65535	; assembler added errata NOP
  7189  000180                     
  7190                           ;interrupt.c: 123:         PIR1bits.RC1IF = 0;
  7191  000180  9A9E               	bcf	158,5,c	;volatile
  7192                           
  7193                           ;interrupt.c: 126:         unsigned char temp = RCREG1;
  7194  000182  CFAE F011          	movff	4014,isr@temp	;volatile
  7195  000186                     
  7196                           ;interrupt.c: 128:         storeData(temp);
  7197  000186  5011               	movf	isr@temp^0,w,c
  7198  000188  EC59  F009         	call	i2_storeData
  7199  00018C                     i2l470:
  7200  00018C  FFFF               	dw	65535	; assembler added errata NOP
  7201  00018E  C010  FFF4         	movff	??_isr+5,prodh
  7202  000192  C00F  FFF3         	movff	??_isr+4,prodl
  7203  000196  C00E  FFDA         	movff	??_isr+3,fsr2h
  7204  00019A  C00D  FFD9         	movff	??_isr+2,fsr2l
  7205  00019E  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7206  0001A0  0011               	retfie		f
  7207  0001A2  FFFF               	dw	65535	; errata NOP
  7208  0001A4                     __end_of_isr:
  7209                           	callstack 0
  7210                           
  7211 ;; *************** function i2_storeData *****************
  7212 ;; Defined at:
  7213 ;;		line 176 in file "usart.c"
  7214 ;; Parameters:    Size  Location     Type
  7215 ;;  data            1    wreg     unsigned char 
  7216 ;; Auto vars:     Size  Location     Type
  7217 ;;  data            1    9[COMRAM] unsigned char 
  7218 ;; Return value:  Size  Location     Type
  7219 ;;                  1    wreg      void 
  7220 ;; Registers used:
  7221 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7222 ;; Tracked objects:
  7223 ;;		On entry : 0/0
  7224 ;;		On exit  : 0/0
  7225 ;;		Unchanged: 0/0
  7226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7227 ;;      Params:         0       0       0       0       0       0       0
  7228 ;;      Locals:         1       0       0       0       0       0       0
  7229 ;;      Temps:          2       0       0       0       0       0       0
  7230 ;;      Totals:         3       0       0       0       0       0       0
  7231 ;;Total ram usage:        3 bytes
  7232 ;; Hardware stack levels used:    1
  7233 ;; Hardware stack levels required when called:    2
  7234 ;; This function calls:
  7235 ;;		i2_printError
  7236 ;; This function is called by:
  7237 ;;		_isr
  7238 ;; This function uses a non-reentrant model
  7239 ;;
  7240                           
  7241                           	psect	text44
  7242  0012B2                     __ptext44:
  7243                           	callstack 0
  7244  0012B2                     i2_storeData:
  7245                           	callstack 0
  7246  0012B2  FFFF               	dw	65535	; assembler added errata NOP
  7247                           
  7248                           ;incstack = 0
  7249                           ;i2storeData@data stored from wreg
  7250  0012B4  6E0A               	movwf	i2storeData@data^0,c
  7251  0012B6                     
  7252                           ;usart.c: 178:     static unsigned char counter = 0;;usart.c: 179:     static unsigned c
      +                          har mexLength = 5;;usart.c: 180:     static unsigned char command;;usart.c: 181:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 185:     receivedMex[counter] = data;
  7253  0012B6  0E43               	movlw	low storeData@receivedMex
  7254  0012B8  245E               	addwf	storeData@counter^0,w,c
  7255  0012BA  6ED9               	movwf	fsr2l,c
  7256  0012BC  6ADA               	clrf	fsr2h,c
  7257  0012BE  0E00               	movlw	high storeData@receivedMex
  7258  0012C0  22DA               	addwfc	fsr2h,f,c
  7259  0012C2  C00A  FFDF         	movff	i2storeData@data,indf2
  7260  0012C6                     
  7261                           ;usart.c: 187:     counter++;
  7262  0012C6  2A5E               	incf	storeData@counter^0,f,c
  7263                           
  7264                           ;usart.c: 190:     switch(receivedMex[0]){
  7265  0012C8  EF75  F009         	goto	i2l3436
  7266  0012CC                     i2l3428:
  7267  0012CC  FFFF               	dw	65535	; assembler added errata NOP
  7268                           
  7269                           ;usart.c: 192:             mexLength = 5;
  7270  0012CE  0E05               	movlw	5
  7271  0012D0  6E6D               	movwf	storeData@mexLength^0,c
  7272                           
  7273                           ;usart.c: 193:             break;
  7274  0012D2  EF90  F009         	goto	i2l3438
  7275  0012D6                     i2l3430:
  7276  0012D6  FFFF               	dw	65535	; assembler added errata NOP
  7277                           
  7278                           ;usart.c: 195:             mexLength = 9;
  7279  0012D8  0E09               	movlw	9
  7280  0012DA  6E6D               	movwf	storeData@mexLength^0,c
  7281                           
  7282                           ;usart.c: 196:             break;
  7283  0012DC  EF90  F009         	goto	i2l3438
  7284  0012E0                     i2l3432:
  7285  0012E0  FFFF               	dw	65535	; assembler added errata NOP
  7286                           
  7287                           ;usart.c: 198:             mexLength = 1;
  7288  0012E2  0E01               	movlw	1
  7289  0012E4  6E6D               	movwf	storeData@mexLength^0,c
  7290                           
  7291                           ;usart.c: 199:             break;
  7292  0012E6  EF90  F009         	goto	i2l3438
  7293  0012EA                     i2l3436:
  7294  0012EA  FFFF               	dw	65535	; assembler added errata NOP
  7295  0012EC  5043               	movf	storeData@receivedMex^0,w,c
  7296  0012EE  6E08               	movwf	??i2_storeData^0,c
  7297  0012F0  6A09               	clrf	(??i2_storeData+1)^0,c
  7298                           
  7299                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7300                           ; Switch size 1, requested type "simple"
  7301                           ; Number of cases is 1, Range of values is 0 to 0
  7302                           ; switch strategies available:
  7303                           ; Name         Instructions Cycles
  7304                           ; simple_byte            4     3 (average)
  7305                           ;	Chosen strategy is simple_byte
  7306  0012F2  5009               	movf	(??i2_storeData+1)^0,w,c
  7307  0012F4  0A00               	xorlw	0	; case 0
  7308  0012F6  B4D8               	btfsc	status,2,c
  7309  0012F8  EF80  F009         	goto	i2l4824
  7310  0012FC  EF90  F009         	goto	i2l3438
  7311  001300                     i2l4824:
  7312  001300  FFFF               	dw	65535	; assembler added errata NOP
  7313                           
  7314                           ; Switch size 1, requested type "simple"
  7315                           ; Number of cases is 3, Range of values is 0 to 2
  7316                           ; switch strategies available:
  7317                           ; Name         Instructions Cycles
  7318                           ; simple_byte           10     6 (average)
  7319                           ;	Chosen strategy is simple_byte
  7320  001302  5008               	movf	??i2_storeData^0,w,c
  7321  001304  0A00               	xorlw	0	; case 0
  7322  001306  B4D8               	btfsc	status,2,c
  7323  001308  EF66  F009         	goto	i2l3428
  7324  00130C  0A01               	xorlw	1	; case 1
  7325  00130E  B4D8               	btfsc	status,2,c
  7326  001310  EF6B  F009         	goto	i2l3430
  7327  001314  0A03               	xorlw	3	; case 2
  7328  001316  B4D8               	btfsc	status,2,c
  7329  001318  EF70  F009         	goto	i2l3432
  7330  00131C  EF90  F009         	goto	i2l3438
  7331  001320                     i2l3438:
  7332  001320  FFFF               	dw	65535	; assembler added errata NOP
  7333                           
  7334                           ;usart.c: 206:     if(counter >= mexLength){
  7335  001322  506D               	movf	storeData@mexLength^0,w,c
  7336  001324  5C5E               	subwf	storeData@counter^0,w,c
  7337  001326  A0D8               	btfss	status,0,c
  7338  001328  EF98  F009         	goto	i2u266_41
  7339  00132C  EF9B  F009         	goto	i2u266_40
  7340  001330                     i2u266_41:
  7341  001330  FFFF               	dw	65535	; assembler added errata NOP
  7342  001332  EF6E  F00A         	goto	i2l603
  7343  001336                     i2u266_40:
  7344  001336  FFFF               	dw	65535	; assembler added errata NOP
  7345  001338                     
  7346                           ;usart.c: 207:         counter = 0;
  7347  001338  0E00               	movlw	0
  7348  00133A  6E5E               	movwf	storeData@counter^0,c
  7349                           
  7350                           ;usart.c: 210:         switch(receivedMex[0]){
  7351  00133C  EF53  F00A         	goto	i2l3476
  7352  001340                     i2l3442:
  7353  001340  FFFF               	dw	65535	; assembler added errata NOP
  7354                           
  7355                           ;usart.c: 212:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  7356  001342  5061               	movf	_dataCounter^0,w,c
  7357  001344  0D04               	mullw	4
  7358  001346  0EC6               	movlw	low _dataSequence
  7359  001348  24F3               	addwf	243,w,c
  7360  00134A  6ED9               	movwf	fsr2l,c
  7361  00134C  0E00               	movlw	high _dataSequence
  7362  00134E  20F4               	addwfc	prodh,w,c
  7363  001350  6EDA               	movwf	fsr2h,c
  7364  001352  C044  FFDF         	movff	storeData@receivedMex+1,indf2
  7365                           
  7366                           ;usart.c: 213:                 dataSequence[dataCounter].posX = receivedMex[2] * 5;
  7367  001356  5061               	movf	_dataCounter^0,w,c
  7368  001358  0D04               	mullw	4
  7369  00135A  0EC7               	movlw	low (_dataSequence+1)
  7370  00135C  24F3               	addwf	243,w,c
  7371  00135E  6ED9               	movwf	fsr2l,c
  7372  001360  0E00               	movlw	high (_dataSequence+1)
  7373  001362  20F4               	addwfc	prodh,w,c
  7374  001364  6EDA               	movwf	fsr2h,c
  7375  001366  5045               	movf	(storeData@receivedMex+2)^0,w,c
  7376  001368  0D05               	mullw	5
  7377  00136A  CFF3 FFDF          	movff	prodl,indf2
  7378                           
  7379                           ;usart.c: 214:                 dataSequence[dataCounter].posY = receivedMex[3] * 5;
  7380  00136E  5061               	movf	_dataCounter^0,w,c
  7381  001370  0D04               	mullw	4
  7382  001372  0EC8               	movlw	low (_dataSequence+2)
  7383  001374  24F3               	addwf	243,w,c
  7384  001376  6ED9               	movwf	fsr2l,c
  7385  001378  0E00               	movlw	high (_dataSequence+2)
  7386  00137A  20F4               	addwfc	prodh,w,c
  7387  00137C  6EDA               	movwf	fsr2h,c
  7388  00137E  5046               	movf	(storeData@receivedMex+3)^0,w,c
  7389  001380  0D05               	mullw	5
  7390  001382  CFF3 FFDF          	movff	prodl,indf2
  7391                           
  7392                           ;usart.c: 215:                 dataSequence[dataCounter].rotation = receivedMex[4];
  7393  001386  5061               	movf	_dataCounter^0,w,c
  7394  001388  0D04               	mullw	4
  7395  00138A  0EC9               	movlw	low (_dataSequence+3)
  7396  00138C  24F3               	addwf	243,w,c
  7397  00138E  6ED9               	movwf	fsr2l,c
  7398  001390  0E00               	movlw	high (_dataSequence+3)
  7399  001392  20F4               	addwfc	prodh,w,c
  7400  001394  6EDA               	movwf	fsr2h,c
  7401  001396  C047  FFDF         	movff	storeData@receivedMex+4,indf2
  7402                           
  7403                           ;usart.c: 218:                 if(dataSequence[dataCounter].posX > maxX ||
  7404  00139A  5061               	movf	_dataCounter^0,w,c
  7405  00139C  0D04               	mullw	4
  7406  00139E  0EC7               	movlw	low (_dataSequence+1)
  7407  0013A0  24F3               	addwf	243,w,c
  7408  0013A2  6ED9               	movwf	fsr2l,c
  7409  0013A4  0E00               	movlw	high (_dataSequence+1)
  7410  0013A6  20F4               	addwfc	prodh,w,c
  7411  0013A8  6EDA               	movwf	fsr2h,c
  7412  0013AA  0E66               	movlw	102
  7413  0013AC  60DF               	cpfslt	indf2,c
  7414  0013AE  EFDB  F009         	goto	i2u267_41
  7415  0013B2  EFDE  F009         	goto	i2u267_40
  7416  0013B6                     i2u267_41:
  7417  0013B6  FFFF               	dw	65535	; assembler added errata NOP
  7418  0013B8  EFF0  F009         	goto	i2l3446
  7419  0013BC                     i2u267_40:
  7420  0013BC  FFFF               	dw	65535	; assembler added errata NOP
  7421  0013BE  5061               	movf	_dataCounter^0,w,c
  7422  0013C0  0D04               	mullw	4
  7423  0013C2  0EC8               	movlw	low (_dataSequence+2)
  7424  0013C4  24F3               	addwf	243,w,c
  7425  0013C6  6ED9               	movwf	fsr2l,c
  7426  0013C8  0E00               	movlw	high (_dataSequence+2)
  7427  0013CA  20F4               	addwfc	prodh,w,c
  7428  0013CC  6EDA               	movwf	fsr2h,c
  7429  0013CE  0E65               	movlw	101
  7430  0013D0  64DF               	cpfsgt	indf2,c
  7431  0013D2  EFED  F009         	goto	i2u268_41
  7432  0013D6  EFF0  F009         	goto	i2u268_40
  7433  0013DA                     i2u268_41:
  7434  0013DA  FFFF               	dw	65535	; assembler added errata NOP
  7435  0013DC  EFF6  F009         	goto	i2l3448
  7436  0013E0                     i2u268_40:
  7437  0013E0                     i2l3446:
  7438  0013E0  FFFF               	dw	65535	; assembler added errata NOP
  7439                           
  7440                           ;usart.c: 219:                         dataSequence[dataCounter].posY > maxY){;usart.c: 
      +                          220:                     printError(5);
  7441  0013E2  0E05               	movlw	5
  7442  0013E4  EC27  F00E         	call	i2_printError
  7443                           
  7444                           ;usart.c: 221:                 }else{
  7445  0013E8  EF6E  F00A         	goto	i2l603
  7446  0013EC                     i2l3448:
  7447  0013EC  FFFF               	dw	65535	; assembler added errata NOP
  7448                           
  7449                           ;usart.c: 222:                     dataCounter++;
  7450  0013EE  2A61               	incf	_dataCounter^0,f,c
  7451  0013F0  EF6E  F00A         	goto	i2l603
  7452  0013F4                     i2l596:
  7453  0013F4  FFFF               	dw	65535	; assembler added errata NOP
  7454                           
  7455                           ;usart.c: 227:                 newSequenceData.L = receivedMex[1];
  7456  0013F6  C044  F0DA         	movff	storeData@receivedMex+1,_newSequenceData
  7457                           
  7458                           ;usart.c: 228:                 newSequenceData.W = receivedMex[2];
  7459  0013FA  C045  F0DB         	movff	storeData@receivedMex+2,_newSequenceData+1
  7460  0013FE                     
  7461                           ;usart.c: 229:                 newSequenceData.init_posX = receivedMex[3] * 5;
  7462  0013FE  5046               	movf	(storeData@receivedMex+3)^0,w,c
  7463  001400  0D05               	mullw	5
  7464  001402  CFF3 F0DC          	movff	prodl,_newSequenceData+2
  7465                           
  7466                           ;usart.c: 230:                 newSequenceData.init_posY = receivedMex[4] * 5;
  7467  001406  5047               	movf	(storeData@receivedMex+4)^0,w,c
  7468  001408  0D05               	mullw	5
  7469  00140A  CFF3 F0DD          	movff	prodl,_newSequenceData+3
  7470  00140E                     
  7471                           ;usart.c: 231:                 newSequenceData.init_rot = receivedMex[5];
  7472  00140E  C048  F0DE         	movff	storeData@receivedMex+5,_newSequenceData+4
  7473                           
  7474                           ;usart.c: 232:                 newSequenceData.end_posX = receivedMex[6] * 5;
  7475  001412  5049               	movf	(storeData@receivedMex+6)^0,w,c
  7476  001414  0D05               	mullw	5
  7477  001416  CFF3 F0DF          	movff	prodl,_newSequenceData+5
  7478                           
  7479                           ;usart.c: 233:                 newSequenceData.end_posY = receivedMex[7] * 5;
  7480  00141A  504A               	movf	(storeData@receivedMex+7)^0,w,c
  7481  00141C  0D05               	mullw	5
  7482  00141E  CFF3 F0E0          	movff	prodl,_newSequenceData+6
  7483  001422                     
  7484                           ;usart.c: 234:                 newSequenceData.end_rot = receivedMex[8];
  7485  001422  C04B  F0E1         	movff	storeData@receivedMex+8,_newSequenceData+7
  7486  001426                     
  7487                           ;usart.c: 237:                 if(newSequenceData.init_posX > maxFeedX ||
  7488  001426  0E1F               	movlw	31
  7489  001428  0100               	movlb	0	; () banked
  7490  00142A  61DC               	cpfslt	(_newSequenceData+2)& (0+255),b
  7491  00142C  EF1A  F00A         	goto	i2u269_41
  7492  001430  EF1D  F00A         	goto	i2u269_40
  7493  001434                     i2u269_41:
  7494  001434  FFFF               	dw	65535	; assembler added errata NOP
  7495  001436  EF3B  F00A         	goto	i2l3464
  7496  00143A                     i2u269_40:
  7497  00143A  FFFF               	dw	65535	; assembler added errata NOP
  7498  00143C                     
  7499                           ; BSR set to: 0
  7500  00143C  0E66               	movlw	102
  7501  00143E  61DF               	cpfslt	(_newSequenceData+5)& (0+255),b
  7502  001440  EF24  F00A         	goto	i2u270_41
  7503  001444  EF27  F00A         	goto	i2u270_40
  7504  001448                     i2u270_41:
  7505  001448  FFFF               	dw	65535	; assembler added errata NOP
  7506  00144A  EF3B  F00A         	goto	i2l3464
  7507  00144E                     i2u270_40:
  7508  00144E  FFFF               	dw	65535	; assembler added errata NOP
  7509  001450                     
  7510                           ; BSR set to: 0
  7511  001450  0E65               	movlw	101
  7512  001452  61DD               	cpfslt	(_newSequenceData+3)& (0+255),b
  7513  001454  EF2E  F00A         	goto	i2u271_41
  7514  001458  EF31  F00A         	goto	i2u271_40
  7515  00145C                     i2u271_41:
  7516  00145C  FFFF               	dw	65535	; assembler added errata NOP
  7517  00145E  EF3B  F00A         	goto	i2l3464
  7518  001462                     i2u271_40:
  7519  001462  FFFF               	dw	65535	; assembler added errata NOP
  7520  001464                     
  7521                           ; BSR set to: 0
  7522  001464  0E65               	movlw	101
  7523  001466  65E0               	cpfsgt	(_newSequenceData+6)& (0+255),b
  7524  001468  EF38  F00A         	goto	i2u272_41
  7525  00146C  EF3B  F00A         	goto	i2u272_40
  7526  001470                     i2u272_41:
  7527  001470  FFFF               	dw	65535	; assembler added errata NOP
  7528  001472  EF43  F00A         	goto	i2l3468
  7529  001476                     i2u272_40:
  7530  001476                     i2l3464:
  7531  001476  FFFF               	dw	65535	; assembler added errata NOP
  7532                           
  7533                           ; BSR set to: 0
  7534                           ;usart.c: 240:                         newSequenceData.end_posY > maxY){;usart.c: 241:  
      +                                             _newSequence = 0;
  7535  001478  0E00               	movlw	0
  7536  00147A  6E5F               	movwf	__newSequence^0,c
  7537  00147C                     
  7538                           ; BSR set to: 0
  7539                           ;usart.c: 242:                     printError(5);
  7540  00147C  0E05               	movlw	5
  7541  00147E  EC27  F00E         	call	i2_printError
  7542                           
  7543                           ;usart.c: 243:                 }else{
  7544  001482  EF6E  F00A         	goto	i2l603
  7545  001486                     i2l3468:
  7546  001486  FFFF               	dw	65535	; assembler added errata NOP
  7547                           
  7548                           ; BSR set to: 0
  7549                           ;usart.c: 244:                     _newSequence = 1;
  7550  001488  0E01               	movlw	1
  7551  00148A  6E5F               	movwf	__newSequence^0,c
  7552  00148C  EF6E  F00A         	goto	i2l603
  7553  001490                     i2l3470:
  7554  001490  FFFF               	dw	65535	; assembler added errata NOP
  7555                           
  7556                           ;usart.c: 249:                 _fatalError = 1;
  7557  001492  0E01               	movlw	1
  7558  001494  6E60               	movwf	__fatalError^0,c
  7559                           
  7560                           ;usart.c: 250:                 break;
  7561  001496  EF6E  F00A         	goto	i2l603
  7562  00149A                     i2l3472:
  7563  00149A  FFFF               	dw	65535	; assembler added errata NOP
  7564                           
  7565                           ;usart.c: 253:                 printError(8);
  7566  00149C  0E08               	movlw	8
  7567  00149E  EC27  F00E         	call	i2_printError
  7568                           
  7569                           ;usart.c: 254:                 break;
  7570  0014A2  EF6E  F00A         	goto	i2l603
  7571  0014A6                     i2l3476:
  7572  0014A6  FFFF               	dw	65535	; assembler added errata NOP
  7573  0014A8  5043               	movf	storeData@receivedMex^0,w,c
  7574  0014AA  6E08               	movwf	??i2_storeData^0,c
  7575  0014AC  6A09               	clrf	(??i2_storeData+1)^0,c
  7576                           
  7577                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7578                           ; Switch size 1, requested type "simple"
  7579                           ; Number of cases is 1, Range of values is 0 to 0
  7580                           ; switch strategies available:
  7581                           ; Name         Instructions Cycles
  7582                           ; simple_byte            4     3 (average)
  7583                           ;	Chosen strategy is simple_byte
  7584  0014AE  5009               	movf	(??i2_storeData+1)^0,w,c
  7585  0014B0  0A00               	xorlw	0	; case 0
  7586  0014B2  B4D8               	btfsc	status,2,c
  7587  0014B4  EF5E  F00A         	goto	i2l4826
  7588  0014B8  EF4D  F00A         	goto	i2l3472
  7589  0014BC                     i2l4826:
  7590  0014BC  FFFF               	dw	65535	; assembler added errata NOP
  7591                           
  7592                           ; Switch size 1, requested type "simple"
  7593                           ; Number of cases is 3, Range of values is 0 to 2
  7594                           ; switch strategies available:
  7595                           ; Name         Instructions Cycles
  7596                           ; simple_byte           10     6 (average)
  7597                           ;	Chosen strategy is simple_byte
  7598  0014BE  5008               	movf	??i2_storeData^0,w,c
  7599  0014C0  0A00               	xorlw	0	; case 0
  7600  0014C2  B4D8               	btfsc	status,2,c
  7601  0014C4  EFA0  F009         	goto	i2l3442
  7602  0014C8  0A01               	xorlw	1	; case 1
  7603  0014CA  B4D8               	btfsc	status,2,c
  7604  0014CC  EFFA  F009         	goto	i2l596
  7605  0014D0  0A03               	xorlw	3	; case 2
  7606  0014D2  B4D8               	btfsc	status,2,c
  7607  0014D4  EF48  F00A         	goto	i2l3470
  7608  0014D8  EF4D  F00A         	goto	i2l3472
  7609  0014DC                     i2l603:
  7610  0014DC  FFFF               	dw	65535	; assembler added errata NOP
  7611  0014DE  0012               	return		;funcret
  7612  0014E0  FFFF               	dw	65535	; errata NOP
  7613  0014E2                     __end_ofi2_storeData:
  7614                           	callstack 0
  7615                           
  7616 ;; *************** function _writeTM0 *****************
  7617 ;; Defined at:
  7618 ;;		line 25 in file "motors.c"
  7619 ;; Parameters:    Size  Location     Type
  7620 ;;		None
  7621 ;; Auto vars:     Size  Location     Type
  7622 ;;		None
  7623 ;; Return value:  Size  Location     Type
  7624 ;;                  1    wreg      void 
  7625 ;; Registers used:
  7626 ;;		wreg, status,2
  7627 ;; Tracked objects:
  7628 ;;		On entry : 0/0
  7629 ;;		On exit  : 0/0
  7630 ;;		Unchanged: 0/0
  7631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7632 ;;      Params:         0       0       0       0       0       0       0
  7633 ;;      Locals:         0       0       0       0       0       0       0
  7634 ;;      Temps:          0       0       0       0       0       0       0
  7635 ;;      Totals:         0       0       0       0       0       0       0
  7636 ;;Total ram usage:        0 bytes
  7637 ;; Hardware stack levels used:    1
  7638 ;; This function calls:
  7639 ;;		Nothing
  7640 ;; This function is called by:
  7641 ;;		_isr
  7642 ;; This function uses a non-reentrant model
  7643 ;;
  7644                           
  7645                           	psect	text45
  7646  0025A0                     __ptext45:
  7647                           	callstack 0
  7648  0025A0                     _writeTM0:
  7649                           	callstack 0
  7650  0025A0  FFFF               	dw	65535	; assembler added errata NOP
  7651  0025A2                     
  7652                           ;motors.c: 26:     tm0Error = 1;
  7653  0025A2  0E00               	movlw	0
  7654  0025A4  6E5A               	movwf	(_tm0Error+1)^0,c
  7655  0025A6  0E01               	movlw	1
  7656  0025A8  6E59               	movwf	_tm0Error^0,c
  7657  0025AA  0012               	return		;funcret
  7658  0025AC  FFFF               	dw	65535	; errata NOP
  7659  0025AE                     __end_of_writeTM0:
  7660                           	callstack 0
  7661                           
  7662 ;; *************** function _whatsTM0Limit *****************
  7663 ;; Defined at:
  7664 ;;		line 39 in file "motors.c"
  7665 ;; Parameters:    Size  Location     Type
  7666 ;;		None
  7667 ;; Auto vars:     Size  Location     Type
  7668 ;;		None
  7669 ;; Return value:  Size  Location     Type
  7670 ;;                  1    wreg      unsigned char 
  7671 ;; Registers used:
  7672 ;;		wreg, status,2
  7673 ;; Tracked objects:
  7674 ;;		On entry : 0/0
  7675 ;;		On exit  : 0/0
  7676 ;;		Unchanged: 0/0
  7677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7678 ;;      Params:         0       0       0       0       0       0       0
  7679 ;;      Locals:         0       0       0       0       0       0       0
  7680 ;;      Temps:          0       0       0       0       0       0       0
  7681 ;;      Totals:         0       0       0       0       0       0       0
  7682 ;;Total ram usage:        0 bytes
  7683 ;; Hardware stack levels used:    1
  7684 ;; This function calls:
  7685 ;;		Nothing
  7686 ;; This function is called by:
  7687 ;;		_isr
  7688 ;; This function uses a non-reentrant model
  7689 ;;
  7690                           
  7691                           	psect	text46
  7692  002662                     __ptext46:
  7693                           	callstack 0
  7694  002662                     _whatsTM0Limit:
  7695                           	callstack 0
  7696  002662  FFFF               	dw	65535	; assembler added errata NOP
  7697  002664                     
  7698                           ;motors.c: 40:     return(tm0Limit);
  7699  002664  5066               	movf	_tm0Limit^0,w,c
  7700  002666  0012               	return		;funcret
  7701  002668  FFFF               	dw	65535	; errata NOP
  7702  00266A                     __end_of_whatsTM0Limit:
  7703                           	callstack 0
  7704                           
  7705 ;; *************** function _toggleStep *****************
  7706 ;; Defined at:
  7707 ;;		line 93 in file "timer.c"
  7708 ;; Parameters:    Size  Location     Type
  7709 ;;		None
  7710 ;; Auto vars:     Size  Location     Type
  7711 ;;		None
  7712 ;; Return value:  Size  Location     Type
  7713 ;;                  1    wreg      void 
  7714 ;; Registers used:
  7715 ;;		wreg, status,2
  7716 ;; Tracked objects:
  7717 ;;		On entry : 0/0
  7718 ;;		On exit  : 0/0
  7719 ;;		Unchanged: 0/0
  7720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7721 ;;      Params:         0       0       0       0       0       0       0
  7722 ;;      Locals:         0       0       0       0       0       0       0
  7723 ;;      Temps:          0       0       0       0       0       0       0
  7724 ;;      Totals:         0       0       0       0       0       0       0
  7725 ;;Total ram usage:        0 bytes
  7726 ;; Hardware stack levels used:    1
  7727 ;; This function calls:
  7728 ;;		Nothing
  7729 ;; This function is called by:
  7730 ;;		_isr
  7731 ;; This function uses a non-reentrant model
  7732 ;;
  7733                           
  7734                           	psect	text47
  7735  00261C                     __ptext47:
  7736                           	callstack 0
  7737  00261C                     _toggleStep:
  7738                           	callstack 0
  7739  00261C  FFFF               	dw	65535	; assembler added errata NOP
  7740  00261E                     
  7741                           ;timer.c: 94:     stepToggle = 1;
  7742  00261E  0E01               	movlw	1
  7743  002620  6E5B               	movwf	_stepToggle^0,c	;volatile
  7744  002622  0012               	return		;funcret
  7745  002624  FFFF               	dw	65535	; errata NOP
  7746  002626                     __end_of_toggleStep:
  7747                           	callstack 0
  7748                           
  7749 ;; *************** function _setTouchRel *****************
  7750 ;; Defined at:
  7751 ;;		line 86 in file "adc.c"
  7752 ;; Parameters:    Size  Location     Type
  7753 ;;		None
  7754 ;; Auto vars:     Size  Location     Type
  7755 ;;		None
  7756 ;; Return value:  Size  Location     Type
  7757 ;;                  1    wreg      void 
  7758 ;; Registers used:
  7759 ;;		wreg, status,2
  7760 ;; Tracked objects:
  7761 ;;		On entry : 0/0
  7762 ;;		On exit  : 0/0
  7763 ;;		Unchanged: 0/0
  7764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7765 ;;      Params:         0       0       0       0       0       0       0
  7766 ;;      Locals:         0       0       0       0       0       0       0
  7767 ;;      Temps:          0       0       0       0       0       0       0
  7768 ;;      Totals:         0       0       0       0       0       0       0
  7769 ;;Total ram usage:        0 bytes
  7770 ;; Hardware stack levels used:    1
  7771 ;; This function calls:
  7772 ;;		Nothing
  7773 ;; This function is called by:
  7774 ;;		_isr
  7775 ;; This function uses a non-reentrant model
  7776 ;;
  7777                           
  7778                           	psect	text48
  7779  002626                     __ptext48:
  7780                           	callstack 0
  7781  002626                     _setTouchRel:
  7782                           	callstack 0
  7783  002626  FFFF               	dw	65535	; assembler added errata NOP
  7784  002628                     
  7785                           ;adc.c: 87:     touch_rel = 1;
  7786  002628  0E01               	movlw	1
  7787  00262A  6E65               	movwf	_touch_rel^0,c	;volatile
  7788  00262C  0012               	return		;funcret
  7789  00262E  FFFF               	dw	65535	; errata NOP
  7790  002630                     __end_of_setTouchRel:
  7791                           	callstack 0
  7792                           
  7793 ;; *************** function _setThermRel *****************
  7794 ;; Defined at:
  7795 ;;		line 79 in file "adc.c"
  7796 ;; Parameters:    Size  Location     Type
  7797 ;;		None
  7798 ;; Auto vars:     Size  Location     Type
  7799 ;;		None
  7800 ;; Return value:  Size  Location     Type
  7801 ;;                  1    wreg      void 
  7802 ;; Registers used:
  7803 ;;		wreg, status,2
  7804 ;; Tracked objects:
  7805 ;;		On entry : 0/0
  7806 ;;		On exit  : 0/0
  7807 ;;		Unchanged: 0/0
  7808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7809 ;;      Params:         0       0       0       0       0       0       0
  7810 ;;      Locals:         0       0       0       0       0       0       0
  7811 ;;      Temps:          0       0       0       0       0       0       0
  7812 ;;      Totals:         0       0       0       0       0       0       0
  7813 ;;Total ram usage:        0 bytes
  7814 ;; Hardware stack levels used:    1
  7815 ;; This function calls:
  7816 ;;		Nothing
  7817 ;; This function is called by:
  7818 ;;		_isr
  7819 ;; This function uses a non-reentrant model
  7820 ;;
  7821                           
  7822                           	psect	text49
  7823  002630                     __ptext49:
  7824                           	callstack 0
  7825  002630                     _setThermRel:
  7826                           	callstack 0
  7827  002630  FFFF               	dw	65535	; assembler added errata NOP
  7828  002632                     
  7829                           ;adc.c: 80:     therm_rel = 1;
  7830  002632  0E01               	movlw	1
  7831  002634  6E64               	movwf	_therm_rel^0,c	;volatile
  7832  002636  0012               	return		;funcret
  7833  002638  FFFF               	dw	65535	; errata NOP
  7834  00263A                     __end_of_setThermRel:
  7835                           	callstack 0
  7836                           
  7837 ;; *************** function _retPeriod *****************
  7838 ;; Defined at:
  7839 ;;		line 101 in file "timer.c"
  7840 ;; Parameters:    Size  Location     Type
  7841 ;;		None
  7842 ;; Auto vars:     Size  Location     Type
  7843 ;;		None
  7844 ;; Return value:  Size  Location     Type
  7845 ;;                  2    0[COMRAM] unsigned int 
  7846 ;; Registers used:
  7847 ;;		None
  7848 ;; Tracked objects:
  7849 ;;		On entry : 0/0
  7850 ;;		On exit  : 0/0
  7851 ;;		Unchanged: 0/0
  7852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7853 ;;      Params:         2       0       0       0       0       0       0
  7854 ;;      Locals:         0       0       0       0       0       0       0
  7855 ;;      Temps:          0       0       0       0       0       0       0
  7856 ;;      Totals:         2       0       0       0       0       0       0
  7857 ;;Total ram usage:        2 bytes
  7858 ;; Hardware stack levels used:    1
  7859 ;; This function calls:
  7860 ;;		Nothing
  7861 ;; This function is called by:
  7862 ;;		_isr
  7863 ;; This function uses a non-reentrant model
  7864 ;;
  7865                           
  7866                           	psect	text50
  7867  0025AE                     __ptext50:
  7868                           	callstack 0
  7869  0025AE                     _retPeriod:
  7870                           	callstack 0
  7871  0025AE  FFFF               	dw	65535	; assembler added errata NOP
  7872  0025B0                     
  7873                           ;timer.c: 102:     return pwmPeriod;
  7874  0025B0  C04F  F001         	movff	_pwmPeriod,?_retPeriod
  7875  0025B4  C050  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  7876  0025B8  0012               	return		;funcret
  7877  0025BA  FFFF               	dw	65535	; errata NOP
  7878  0025BC                     __end_of_retPeriod:
  7879                           	callstack 0
  7880                           
  7881 ;; *************** function _increaseStep *****************
  7882 ;; Defined at:
  7883 ;;		line 85 in file "timer.c"
  7884 ;; Parameters:    Size  Location     Type
  7885 ;;		None
  7886 ;; Auto vars:     Size  Location     Type
  7887 ;;		None
  7888 ;; Return value:  Size  Location     Type
  7889 ;;                  1    wreg      void 
  7890 ;; Registers used:
  7891 ;;		status,2, status,0
  7892 ;; Tracked objects:
  7893 ;;		On entry : 0/0
  7894 ;;		On exit  : 0/0
  7895 ;;		Unchanged: 0/0
  7896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7897 ;;      Params:         0       0       0       0       0       0       0
  7898 ;;      Locals:         0       0       0       0       0       0       0
  7899 ;;      Temps:          0       0       0       0       0       0       0
  7900 ;;      Totals:         0       0       0       0       0       0       0
  7901 ;;Total ram usage:        0 bytes
  7902 ;; Hardware stack levels used:    1
  7903 ;; This function calls:
  7904 ;;		Nothing
  7905 ;; This function is called by:
  7906 ;;		_isr
  7907 ;; This function uses a non-reentrant model
  7908 ;;
  7909                           
  7910                           	psect	text51
  7911  00266A                     __ptext51:
  7912                           	callstack 0
  7913  00266A                     _increaseStep:
  7914                           	callstack 0
  7915  00266A  FFFF               	dw	65535	; assembler added errata NOP
  7916  00266C                     
  7917                           ;timer.c: 86:     pwmStep++;
  7918  00266C  2A5C               	incf	_pwmStep^0,f,c	;volatile
  7919  00266E  0012               	return		;funcret
  7920  002670  FFFF               	dw	65535	; errata NOP
  7921  002672                     __end_of_increaseStep:
  7922                           	callstack 0
  7923                           
  7924 ;; *************** function _fatalError *****************
  7925 ;; Defined at:
  7926 ;;		line 73 in file "usart.c"
  7927 ;; Parameters:    Size  Location     Type
  7928 ;;		None
  7929 ;; Auto vars:     Size  Location     Type
  7930 ;;		None
  7931 ;; Return value:  Size  Location     Type
  7932 ;;                  1    wreg      unsigned char 
  7933 ;; Registers used:
  7934 ;;		wreg, status,2
  7935 ;; Tracked objects:
  7936 ;;		On entry : 0/0
  7937 ;;		On exit  : 0/0
  7938 ;;		Unchanged: 0/0
  7939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7940 ;;      Params:         0       0       0       0       0       0       0
  7941 ;;      Locals:         0       0       0       0       0       0       0
  7942 ;;      Temps:          0       0       0       0       0       0       0
  7943 ;;      Totals:         0       0       0       0       0       0       0
  7944 ;;Total ram usage:        0 bytes
  7945 ;; Hardware stack levels used:    1
  7946 ;; This function calls:
  7947 ;;		Nothing
  7948 ;; This function is called by:
  7949 ;;		_isr
  7950 ;; This function uses a non-reentrant model
  7951 ;;
  7952                           
  7953                           	psect	text52
  7954  002672                     __ptext52:
  7955                           	callstack 0
  7956  002672                     _fatalError:
  7957                           	callstack 0
  7958  002672  FFFF               	dw	65535	; assembler added errata NOP
  7959  002674                     
  7960                           ;usart.c: 74:     return _fatalError;
  7961  002674  5060               	movf	__fatalError^0,w,c
  7962  002676  0012               	return		;funcret
  7963  002678  FFFF               	dw	65535	; errata NOP
  7964  00267A                     __end_of_fatalError:
  7965                           	callstack 0
  7966                           
  7967 ;; *************** function _abortAll *****************
  7968 ;; Defined at:
  7969 ;;		line 836 in file "motors.c"
  7970 ;; Parameters:    Size  Location     Type
  7971 ;;		None
  7972 ;; Auto vars:     Size  Location     Type
  7973 ;;		None
  7974 ;; Return value:  Size  Location     Type
  7975 ;;                  1    wreg      void 
  7976 ;; Registers used:
  7977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7978 ;; Tracked objects:
  7979 ;;		On entry : 0/0
  7980 ;;		On exit  : 0/0
  7981 ;;		Unchanged: 0/0
  7982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7983 ;;      Params:         0       0       0       0       0       0       0
  7984 ;;      Locals:         0       0       0       0       0       0       0
  7985 ;;      Temps:          0       0       0       0       0       0       0
  7986 ;;      Totals:         0       0       0       0       0       0       0
  7987 ;;Total ram usage:        0 bytes
  7988 ;; Hardware stack levels used:    1
  7989 ;; Hardware stack levels required when called:    2
  7990 ;; This function calls:
  7991 ;;		i2_printError
  7992 ;; This function is called by:
  7993 ;;		_isr
  7994 ;; This function uses a non-reentrant model
  7995 ;;
  7996                           
  7997                           	psect	text53
  7998  002556                     __ptext53:
  7999                           	callstack 0
  8000  002556                     _abortAll:
  8001                           	callstack 0
  8002  002556  FFFF               	dw	65535	; assembler added errata NOP
  8003  002558                     
  8004                           ;motors.c: 844:     printError(7);
  8005  002558  0E07               	movlw	7
  8006  00255A  EC27  F00E         	call	i2_printError
  8007  00255E                     i2l251:
  8008  00255E  FFFF               	dw	65535	; assembler added errata NOP
  8009  002560  EFAF  F012         	goto	i2l251
  8010  002564  0012               	return		;funcret
  8011  002566  FFFF               	dw	65535	; errata NOP
  8012  002568                     __end_of_abortAll:
  8013                           	callstack 0
  8014                           
  8015 ;; *************** function i2_printError *****************
  8016 ;; Defined at:
  8017 ;;		line 123 in file "usart.c"
  8018 ;; Parameters:    Size  Location     Type
  8019 ;;  errCode         1    wreg     unsigned char 
  8020 ;; Auto vars:     Size  Location     Type
  8021 ;;  errCode         1    6[COMRAM] unsigned char 
  8022 ;; Return value:  Size  Location     Type
  8023 ;;                  1    wreg      void 
  8024 ;; Registers used:
  8025 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8026 ;; Tracked objects:
  8027 ;;		On entry : 0/0
  8028 ;;		On exit  : 0/0
  8029 ;;		Unchanged: 0/0
  8030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8031 ;;      Params:         0       0       0       0       0       0       0
  8032 ;;      Locals:         1       0       0       0       0       0       0
  8033 ;;      Temps:          2       0       0       0       0       0       0
  8034 ;;      Totals:         3       0       0       0       0       0       0
  8035 ;;Total ram usage:        3 bytes
  8036 ;; Hardware stack levels used:    1
  8037 ;; Hardware stack levels required when called:    1
  8038 ;; This function calls:
  8039 ;;		i2_uartTx
  8040 ;; This function is called by:
  8041 ;;		_abortAll
  8042 ;;		i2_storeData
  8043 ;; This function uses a non-reentrant model
  8044 ;;
  8045                           
  8046                           	psect	text54
  8047  001C4E                     __ptext54:
  8048                           	callstack 0
  8049  001C4E                     i2_printError:
  8050                           	callstack 0
  8051  001C4E  FFFF               	dw	65535	; assembler added errata NOP
  8052                           
  8053                           ;incstack = 0
  8054                           ;i2printError@errCode stored from wreg
  8055  001C50  6E07               	movwf	i2printError@errCode^0,c
  8056  001C52                     
  8057                           ;usart.c: 125:     switch(errCode){
  8058  001C52  EF83  F00E         	goto	i2l3104
  8059  001C56                     i2l3086:
  8060  001C56  FFFF               	dw	65535	; assembler added errata NOP
  8061                           
  8062                           ;usart.c: 127:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  8063  001C58  0E90               	movlw	low _errString_Feed
  8064  001C5A  6E01               	movwf	i2uartTx@ptr^0,c
  8065  001C5C  0E00               	movlw	high _errString_Feed
  8066  001C5E  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8067  001C60  0E1E               	movlw	30
  8068  001C62  6E03               	movwf	i2uartTx@length^0,c
  8069  001C64  ECB9  F011         	call	i2_uartTx	;wreg free
  8070                           
  8071                           ;usart.c: 128:             break;
  8072  001C68  EFB2  F00E         	goto	i2l562
  8073  001C6C                     i2l3088:
  8074  001C6C  FFFF               	dw	65535	; assembler added errata NOP
  8075                           
  8076                           ;usart.c: 130:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  8077  001C6E  0E5E               	movlw	low _errString_ZEND
  8078  001C70  6E01               	movwf	i2uartTx@ptr^0,c
  8079  001C72  0E01               	movlw	high _errString_ZEND
  8080  001C74  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8081  001C76  0E29               	movlw	41
  8082  001C78  6E03               	movwf	i2uartTx@length^0,c
  8083  001C7A  ECB9  F011         	call	i2_uartTx	;wreg free
  8084                           
  8085                           ;usart.c: 131:             break;
  8086  001C7E  EFB2  F00E         	goto	i2l562
  8087  001C82                     i2l3090:
  8088  001C82  FFFF               	dw	65535	; assembler added errata NOP
  8089                           
  8090                           ;usart.c: 133:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  8091  001C84  0E87               	movlw	low _errString_Reset
  8092  001C86  6E01               	movwf	i2uartTx@ptr^0,c
  8093  001C88  0E01               	movlw	high _errString_Reset
  8094  001C8A  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8095  001C8C  0E28               	movlw	40
  8096  001C8E  6E03               	movwf	i2uartTx@length^0,c
  8097  001C90  ECB9  F011         	call	i2_uartTx	;wreg free
  8098                           
  8099                           ;usart.c: 134:             break;
  8100  001C94  EFB2  F00E         	goto	i2l562
  8101  001C98                     i2l3092:
  8102  001C98  FFFF               	dw	65535	; assembler added errata NOP
  8103                           
  8104                           ;usart.c: 136:             uartTx(&errString_Point[0], sizeof(errString_Point));
  8105  001C9A  0E35               	movlw	low _errString_Point
  8106  001C9C  6E01               	movwf	i2uartTx@ptr^0,c
  8107  001C9E  0E01               	movlw	high _errString_Point
  8108  001CA0  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8109  001CA2  0E29               	movlw	41
  8110  001CA4  6E03               	movwf	i2uartTx@length^0,c
  8111  001CA6  ECB9  F011         	call	i2_uartTx	;wreg free
  8112                           
  8113                           ;usart.c: 137:             break;
  8114  001CAA  EFB2  F00E         	goto	i2l562
  8115  001CAE                     i2l3094:
  8116  001CAE  FFFF               	dw	65535	; assembler added errata NOP
  8117                           
  8118                           ;usart.c: 139:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  8119  001CB0  0ED6               	movlw	low _errString_Bound
  8120  001CB2  6E01               	movwf	i2uartTx@ptr^0,c
  8121  001CB4  0E01               	movlw	high _errString_Bound
  8122  001CB6  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8123  001CB8  0E21               	movlw	33
  8124  001CBA  6E03               	movwf	i2uartTx@length^0,c
  8125  001CBC  ECB9  F011         	call	i2_uartTx	;wreg free
  8126                           
  8127                           ;usart.c: 140:             break;
  8128  001CC0  EFB2  F00E         	goto	i2l562
  8129  001CC4                     i2l3096:
  8130  001CC4  FFFF               	dw	65535	; assembler added errata NOP
  8131                           
  8132                           ;usart.c: 142:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  8133  001CC6  0E00               	movlw	low _errString_PointZ
  8134  001CC8  6E01               	movwf	i2uartTx@ptr^0,c
  8135  001CCA  0E01               	movlw	high _errString_PointZ
  8136  001CCC  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8137  001CCE  0E35               	movlw	53
  8138  001CD0  6E03               	movwf	i2uartTx@length^0,c
  8139  001CD2  ECB9  F011         	call	i2_uartTx	;wreg free
  8140                           
  8141                           ;usart.c: 143:             break;
  8142  001CD6  EFB2  F00E         	goto	i2l562
  8143  001CDA                     i2l3098:
  8144  001CDA  FFFF               	dw	65535	; assembler added errata NOP
  8145                           
  8146                           ;usart.c: 145:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  8147  001CDC  0EAF               	movlw	low _errString_Fatal
  8148  001CDE  6E01               	movwf	i2uartTx@ptr^0,c
  8149  001CE0  0E01               	movlw	high _errString_Fatal
  8150  001CE2  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8151  001CE4  0E27               	movlw	39
  8152  001CE6  6E03               	movwf	i2uartTx@length^0,c
  8153  001CE8  ECB9  F011         	call	i2_uartTx	;wreg free
  8154                           
  8155                           ;usart.c: 146:             break;
  8156  001CEC  EFB2  F00E         	goto	i2l562
  8157  001CF0                     i2l3100:
  8158  001CF0  FFFF               	dw	65535	; assembler added errata NOP
  8159                           
  8160                           ;usart.c: 148:             uartTx(&errString_Command[0], sizeof(errString_Command));
  8161  001CF2  0EAE               	movlw	low _errString_Command
  8162  001CF4  6E01               	movwf	i2uartTx@ptr^0,c
  8163  001CF6  0E00               	movlw	high _errString_Command
  8164  001CF8  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8165  001CFA  0E18               	movlw	24
  8166  001CFC  6E03               	movwf	i2uartTx@length^0,c
  8167  001CFE  ECB9  F011         	call	i2_uartTx	;wreg free
  8168                           
  8169                           ;usart.c: 149:             break;
  8170  001D02  EFB2  F00E         	goto	i2l562
  8171  001D06                     i2l3104:
  8172  001D06  FFFF               	dw	65535	; assembler added errata NOP
  8173  001D08  5007               	movf	i2printError@errCode^0,w,c
  8174  001D0A  6E05               	movwf	??i2_printError^0,c
  8175  001D0C  6A06               	clrf	(??i2_printError+1)^0,c
  8176                           
  8177                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8178                           ; Switch size 1, requested type "simple"
  8179                           ; Number of cases is 1, Range of values is 0 to 0
  8180                           ; switch strategies available:
  8181                           ; Name         Instructions Cycles
  8182                           ; simple_byte            4     3 (average)
  8183                           ;	Chosen strategy is simple_byte
  8184  001D0E  5006               	movf	(??i2_printError+1)^0,w,c
  8185  001D10  0A00               	xorlw	0	; case 0
  8186  001D12  B4D8               	btfsc	status,2,c
  8187  001D14  EF8E  F00E         	goto	i2l4828
  8188  001D18  EFB2  F00E         	goto	i2l562
  8189  001D1C                     i2l4828:
  8190  001D1C  FFFF               	dw	65535	; assembler added errata NOP
  8191                           
  8192                           ; Switch size 1, requested type "simple"
  8193                           ; Number of cases is 8, Range of values is 1 to 8
  8194                           ; switch strategies available:
  8195                           ; Name         Instructions Cycles
  8196                           ; simple_byte           25    13 (average)
  8197                           ;	Chosen strategy is simple_byte
  8198  001D1E  5005               	movf	??i2_printError^0,w,c
  8199  001D20  0A01               	xorlw	1	; case 1
  8200  001D22  B4D8               	btfsc	status,2,c
  8201  001D24  EF2B  F00E         	goto	i2l3086
  8202  001D28  0A03               	xorlw	3	; case 2
  8203  001D2A  B4D8               	btfsc	status,2,c
  8204  001D2C  EF36  F00E         	goto	i2l3088
  8205  001D30  0A01               	xorlw	1	; case 3
  8206  001D32  B4D8               	btfsc	status,2,c
  8207  001D34  EF41  F00E         	goto	i2l3090
  8208  001D38  0A07               	xorlw	7	; case 4
  8209  001D3A  B4D8               	btfsc	status,2,c
  8210  001D3C  EF4C  F00E         	goto	i2l3092
  8211  001D40  0A01               	xorlw	1	; case 5
  8212  001D42  B4D8               	btfsc	status,2,c
  8213  001D44  EF57  F00E         	goto	i2l3094
  8214  001D48  0A03               	xorlw	3	; case 6
  8215  001D4A  B4D8               	btfsc	status,2,c
  8216  001D4C  EF62  F00E         	goto	i2l3096
  8217  001D50  0A01               	xorlw	1	; case 7
  8218  001D52  B4D8               	btfsc	status,2,c
  8219  001D54  EF6D  F00E         	goto	i2l3098
  8220  001D58  0A0F               	xorlw	15	; case 8
  8221  001D5A  B4D8               	btfsc	status,2,c
  8222  001D5C  EF78  F00E         	goto	i2l3100
  8223  001D60  EFB2  F00E         	goto	i2l562
  8224  001D64                     i2l562:
  8225  001D64  FFFF               	dw	65535	; assembler added errata NOP
  8226  001D66  0012               	return		;funcret
  8227  001D68  FFFF               	dw	65535	; errata NOP
  8228  001D6A                     __end_ofi2_printError:
  8229                           	callstack 0
  8230                           
  8231 ;; *************** function i2_uartTx *****************
  8232 ;; Defined at:
  8233 ;;		line 160 in file "usart.c"
  8234 ;; Parameters:    Size  Location     Type
  8235 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  8236 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  8237 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  8238 ;;  length          1    2[COMRAM] unsigned char 
  8239 ;; Auto vars:     Size  Location     Type
  8240 ;;  i               1    3[COMRAM] unsigned char 
  8241 ;; Return value:  Size  Location     Type
  8242 ;;                  1    wreg      void 
  8243 ;; Registers used:
  8244 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8245 ;; Tracked objects:
  8246 ;;		On entry : 0/0
  8247 ;;		On exit  : 0/0
  8248 ;;		Unchanged: 0/0
  8249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8250 ;;      Params:         3       0       0       0       0       0       0
  8251 ;;      Locals:         1       0       0       0       0       0       0
  8252 ;;      Temps:          0       0       0       0       0       0       0
  8253 ;;      Totals:         4       0       0       0       0       0       0
  8254 ;;Total ram usage:        4 bytes
  8255 ;; Hardware stack levels used:    1
  8256 ;; This function calls:
  8257 ;;		Nothing
  8258 ;; This function is called by:
  8259 ;;		i2_printError
  8260 ;; This function uses a non-reentrant model
  8261 ;;
  8262                           
  8263                           	psect	text55
  8264  002372                     __ptext55:
  8265                           	callstack 0
  8266  002372                     i2_uartTx:
  8267                           	callstack 0
  8268  002372  FFFF               	dw	65535	; assembler added errata NOP
  8269  002374                     
  8270                           ;usart.c: 160: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 161: {;usa
      +                          rt.c: 163:     for(char i = 1; i < length; i++){
  8271  002374  0E01               	movlw	1
  8272  002376  6E04               	movwf	i2uartTx@i^0,c
  8273  002378  EFD2  F011         	goto	i2l2788
  8274  00237C                     i2l2784:
  8275  00237C  FFFF               	dw	65535	; assembler added errata NOP
  8276                           
  8277                           ;usart.c: 165:         TXREG = *ptr;
  8278  00237E  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  8279  002382  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  8280  002386  50DF               	movf	indf2,w,c
  8281  002388  6EAD               	movwf	173,c	;volatile
  8282  00238A                     i2l567:
  8283  00238A  FFFF               	dw	65535	; assembler added errata NOP
  8284  00238C  A2AC               	btfss	172,1,c	;volatile
  8285  00238E  EFCB  F011         	goto	i2u191_41
  8286  002392  EFCE  F011         	goto	i2u191_40
  8287  002396                     i2u191_41:
  8288  002396  FFFF               	dw	65535	; assembler added errata NOP
  8289  002398  EFC5  F011         	goto	i2l567
  8290  00239C                     i2u191_40:
  8291  00239C  FFFF               	dw	65535	; assembler added errata NOP
  8292  00239E                     
  8293                           ;usart.c: 169:         ptr++;
  8294  00239E  4A01               	infsnz	i2uartTx@ptr^0,f,c
  8295  0023A0  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  8296                           
  8297                           ;usart.c: 170:     }
  8298  0023A2  2A04               	incf	i2uartTx@i^0,f,c
  8299  0023A4                     i2l2788:
  8300  0023A4  FFFF               	dw	65535	; assembler added errata NOP
  8301  0023A6  5003               	movf	i2uartTx@length^0,w,c
  8302  0023A8  5C04               	subwf	i2uartTx@i^0,w,c
  8303  0023AA  A0D8               	btfss	status,0,c
  8304  0023AC  EFDA  F011         	goto	i2u192_41
  8305  0023B0  EFDD  F011         	goto	i2u192_40
  8306  0023B4                     i2u192_41:
  8307  0023B4  FFFF               	dw	65535	; assembler added errata NOP
  8308  0023B6  EFBE  F011         	goto	i2l2784
  8309  0023BA                     i2u192_40:
  8310  0023BA  FFFF               	dw	65535	; assembler added errata NOP
  8311  0023BC  0012               	return		;funcret
  8312  0023BE  FFFF               	dw	65535	; errata NOP
  8313  0023C0                     __end_ofi2_uartTx:
  8314                           	callstack 0
  8315                           
  8316                           	psect	rparam
  8317  0000                     
  8318                           	psect	temp
  8319  00006E                     btemp:
  8320                           	callstack 0
  8321  00006E                     	ds	1
  8322  0000                     int$flags	set	btemp
  8323  0000                     wtemp8	set	btemp+1
  8324  0000                     ttemp5	set	btemp+1
  8325  0000                     ttemp6	set	btemp+4
  8326  0000                     ttemp7	set	btemp+8
  8327                           
  8328                           	psect	idloc
  8329                           
  8330                           ;Config register IDLOC0 @ 0x200000
  8331                           ;	unspecified, using default values
  8332  200000                     	org	2097152
  8333  200000  FF                 	db	255
  8334                           
  8335                           ;Config register IDLOC1 @ 0x200001
  8336                           ;	unspecified, using default values
  8337  200001                     	org	2097153
  8338  200001  FF                 	db	255
  8339                           
  8340                           ;Config register IDLOC2 @ 0x200002
  8341                           ;	unspecified, using default values
  8342  200002                     	org	2097154
  8343  200002  FF                 	db	255
  8344                           
  8345                           ;Config register IDLOC3 @ 0x200003
  8346                           ;	unspecified, using default values
  8347  200003                     	org	2097155
  8348  200003  FF                 	db	255
  8349                           
  8350                           ;Config register IDLOC4 @ 0x200004
  8351                           ;	unspecified, using default values
  8352  200004                     	org	2097156
  8353  200004  FF                 	db	255
  8354                           
  8355                           ;Config register IDLOC5 @ 0x200005
  8356                           ;	unspecified, using default values
  8357  200005                     	org	2097157
  8358  200005  FF                 	db	255
  8359                           
  8360                           ;Config register IDLOC6 @ 0x200006
  8361                           ;	unspecified, using default values
  8362  200006                     	org	2097158
  8363  200006  FF                 	db	255
  8364                           
  8365                           ;Config register IDLOC7 @ 0x200007
  8366                           ;	unspecified, using default values
  8367  200007                     	org	2097159
  8368  200007  FF                 	db	255
  8369                           
  8370                           	psect	config
  8371                           
  8372                           ; Padding undefined space
  8373  300000                     	org	3145728
  8374  300000  FF                 	db	255
  8375                           
  8376                           ;Config register CONFIG1H @ 0x300001
  8377                           ;	Oscillator Selection bits
  8378                           ;	OSC = XT, XT oscillator
  8379                           ;	Oscillator System Clock Switch Enable bit
  8380                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  8381  300001                     	org	3145729
  8382  300001  21                 	db	33
  8383                           
  8384                           ;Config register CONFIG2L @ 0x300002
  8385                           ;	Power-up Timer Enable bit
  8386                           ;	PWRT = OFF, PWRT disabled
  8387                           ;	Brown-out Reset Enable bit
  8388                           ;	BOR = OFF, Brown-out Reset disabled
  8389                           ;	Brown-out Reset Voltage bits
  8390                           ;	BORV = 20, VBOR set to 2.0V
  8391  300002                     	org	3145730
  8392  300002  0D                 	db	13
  8393                           
  8394                           ;Config register CONFIG2H @ 0x300003
  8395                           ;	Watchdog Timer Enable bit
  8396                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8397                           ;	Watchdog Timer Postscale Select bits
  8398                           ;	WDTPS = 128, 1:128
  8399  300003                     	org	3145731
  8400  300003  0E                 	db	14
  8401                           
  8402                           ; Padding undefined space
  8403  300004                     	org	3145732
  8404  300004  FF                 	db	255
  8405                           
  8406                           ;Config register CONFIG3H @ 0x300005
  8407                           ;	CCP2 Mux bit
  8408                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  8409  300005                     	org	3145733
  8410  300005  00                 	db	0
  8411                           
  8412                           ;Config register CONFIG4L @ 0x300006
  8413                           ;	Stack Full/Underflow Reset Enable bit
  8414                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  8415                           ;	Low Voltage ICSP Enable bit
  8416                           ;	LVP = OFF, Low Voltage ICSP disabled
  8417                           ;	Background Debugger Enable bit
  8418                           ;	DEBUG = 0x1, unprogrammed default
  8419  300006                     	org	3145734
  8420  300006  80                 	db	128
  8421                           
  8422                           ; Padding undefined space
  8423  300007                     	org	3145735
  8424  300007  FF                 	db	255
  8425                           
  8426                           ;Config register CONFIG5L @ 0x300008
  8427                           ;	Code Protection bit
  8428                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  8429                           ;	Code Protection bit
  8430                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  8431                           ;	Code Protection bit
  8432                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  8433                           ;	Code Protection bit
  8434                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  8435  300008                     	org	3145736
  8436  300008  0F                 	db	15
  8437                           
  8438                           ;Config register CONFIG5H @ 0x300009
  8439                           ;	Boot Block Code Protection bit
  8440                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  8441                           ;	Data EEPROM Code Protection bit
  8442                           ;	CPD = OFF, Data EEPROM not code protected
  8443  300009                     	org	3145737
  8444  300009  C0                 	db	192
  8445                           
  8446                           ;Config register CONFIG6L @ 0x30000A
  8447                           ;	Write Protection bit
  8448                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  8449                           ;	Write Protection bit
  8450                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  8451                           ;	Write Protection bit
  8452                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  8453                           ;	Write Protection bit
  8454                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  8455  30000A                     	org	3145738
  8456  30000A  0F                 	db	15
  8457                           
  8458                           ;Config register CONFIG6H @ 0x30000B
  8459                           ;	Configuration Register Write Protection bit
  8460                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  8461                           ;	Boot Block Write Protection bit
  8462                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  8463                           ;	Data EEPROM Write Protection bit
  8464                           ;	WRTD = OFF, Data EEPROM not write protected
  8465  30000B                     	org	3145739
  8466  30000B  E0                 	db	224
  8467                           
  8468                           ;Config register CONFIG7L @ 0x30000C
  8469                           ;	Table Read Protection bit
  8470                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  8471                           ;	Table Read Protection bit
  8472                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  8473                           ;	Table Read Protection bit
  8474                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  8475                           ;	Table Read Protection bit
  8476                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  8477  30000C                     	org	3145740
  8478  30000C  0F                 	db	15
  8479                           
  8480                           ;Config register CONFIG7H @ 0x30000D
  8481                           ;	Boot Block Table Read Protection bit
  8482                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  8483  30000D                     	org	3145741
  8484  30000D  40                 	db	64
  8485                           tosu	equ	0xFFF
  8486                           tosh	equ	0xFFE
  8487                           tosl	equ	0xFFD
  8488                           stkptr	equ	0xFFC
  8489                           pclatu	equ	0xFFB
  8490                           pclath	equ	0xFFA
  8491                           pcl	equ	0xFF9
  8492                           tblptru	equ	0xFF8
  8493                           tblptrh	equ	0xFF7
  8494                           tblptrl	equ	0xFF6
  8495                           tablat	equ	0xFF5
  8496                           prodh	equ	0xFF4
  8497                           prodl	equ	0xFF3
  8498                           indf0	equ	0xFEF
  8499                           postinc0	equ	0xFEE
  8500                           postdec0	equ	0xFED
  8501                           preinc0	equ	0xFEC
  8502                           plusw0	equ	0xFEB
  8503                           fsr0h	equ	0xFEA
  8504                           fsr0l	equ	0xFE9
  8505                           wreg	equ	0xFE8
  8506                           indf1	equ	0xFE7
  8507                           postinc1	equ	0xFE6
  8508                           postdec1	equ	0xFE5
  8509                           preinc1	equ	0xFE4
  8510                           plusw1	equ	0xFE3
  8511                           fsr1h	equ	0xFE2
  8512                           fsr1l	equ	0xFE1
  8513                           bsr	equ	0xFE0
  8514                           indf2	equ	0xFDF
  8515                           postinc2	equ	0xFDE
  8516                           postdec2	equ	0xFDD
  8517                           preinc2	equ	0xFDC
  8518                           plusw2	equ	0xFDB
  8519                           fsr2h	equ	0xFDA
  8520                           fsr2l	equ	0xFD9
  8521                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    20
    Data        324
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     66     109
    BANK0           128     17     115
    BANK1           256      0     247
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 53
		 -> errString_Command(BANK0[24]), errString_Fatal(BANK1[39]), errString_PointZ(BANK1[53]), errString_Bound(BANK1[33]), 
		 -> errString_Point(BANK1[41]), errString_Reset(BANK1[40]), errString_ZEND(BANK1[41]), errString_Feed(BANK0[30]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 


Critical Paths under _main in COMRAM

    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_stepMade
    _touchTherm->_stepMade
    _touchObject->_stepMade
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _releaseObj->_stepMade
    _pickObject->_stepMade
    _moveToPoint->_stepMade
    _liftArm->_stepMade

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    _abortAll->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _main->_executeData
    _executeData->_rotateObj

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   10470
                                             12 BANK0      5     5      0
                           _clearTM0
                        _executeData
                     _getNewSequence
                        _increaseSeq
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                   _resetNewSequence
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim1Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim1Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    1604
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0     238
                                             20 COMRAM     3     3      0
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (1) _resetNewSequence                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _increaseSeq                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0    6513
                                              7 BANK0      5     5      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0      34
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                         _resetTherm
                         _resetTouch
                        _returnTherm
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0      34
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                         _resetTherm
                         _resetTouch
                        _returnTouch
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            7     7      0    3203
                                              0 BANK0      7     7      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
                          _resetStep
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0      34
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0      34
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         14     6      8    2546
                                             20 COMRAM    14     6      8
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0      34
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _resetTM2_Temp                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resetTM0_Temp                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0    1059
                                             10 COMRAM     7     7      0
                           _abortAll
                         _fatalError
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _abortAll                                             0     0      0     507
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _executeData
     _getData
     _liftArm
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _stepMade
     _moveToPoint
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _stepCounter
       _stepMade
     _pickObject
       _resetTM2_Temp
       _stepMade
     _releaseObj
       _resetTM2_Temp
       _stepMade
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _resetStep
       _resetTM2_Temp
       _stepMade
     _touchObject
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _resetTherm
       _resetTouch
       _returnTouch
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _resetTherm
       _resetTouch
       _returnTherm
       _startADC
       _stepMade
       _stopADC
   _getNewSequence
   _increaseSeq
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetNewSequence
   _resetPosition
     _resetStep
     _resetTM0_Temp
     _resetTM2_Temp
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim1Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _abortAll
     i2_printError
       i2_uartTx
   _fatalError
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F7       7       96.5%
BITBANK0            80      0       0       4        0.0%
BANK0               80     11      73       5       89.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     42      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1D7      15        0.0%
DATA                 0      0     1D7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Sat May 01 07:55:11 2021

                                        ___fldiv@aexp 0038  
                                        ___fldiv@bexp 0037  
                               __end_of_interruptInit 2442  
                                        ___fldiv@sign 0030  
                                                  l90 24C4  
                                                  l84 259C  
                                                 l210 1E74  
                                                 l211 1E78  
                                                 l131 172A  
                                                 l132 189A  
                                                 l222 223A  
                                                 l214 2208  
                                                 l151 18BA  
                                                 l217 221A  
                                                 l161 0D68  
                                                 l241 2494  
                                                 l154 0A80  
                                                 l242 249E  
                                                 l234 2054  
                                                 l330 1906  
                                                 l331 1908  
                                                 l156 0AC0  
                                                 l236 2084  
                                                 l157 0AC8  
                                                 l350 107C  
                                                 l247 2464  
                                                 l248 246E  
                                                 l329 190C  
                                                 l178 0D26  
                                                 l522 2580  
                                                 l370 24EA  
                                                 l187 0D88  
                                                 l451 241C  
                                                 l531 2646  
                                                 l603 12AC  
                                                 l452 2432  
                                                 l540 25E6  
                                                 l445 260E  
                                                 l373 25F0  
                                                 l453 243E  
                                                 l525 263E  
                                                 l621 2572  
                                                 l630 25DC  
                                                 l198 1F86  
                                                 l382 25C4  
                                                 l519 258E  
                                                 l199 1F8A  
                                                 l448 2552  
                                                 l376 265E  
                                                 l528 2656  
                                                 l624 252E  
                                                 l633 2618  
                                                 l385 25FA  
                                                 l537 264E  
                                                 l545 2320  
                                                 l562 1C48  
                                                 l618 2540  
                                                 l627 251C  
                                                 l379 25D0  
                                                 l571 236E  
                                                 l388 2604  
                                                 l548 2508  
                                                 l567 233C  
                                                 l596 11C4  
                                                 l942 1B2C  
                                                 _isr 0008  
                                         _touchObject 1E7C  
                                                 prod 000FF3  
                                                 wreg 000FE8  
                                        ___fltol@exp1 0042  
                                         main@errCode 00F0  
                                                l1300 1542  
                                                l1303 16D4  
                                                l1240 0940  
                                                l1232 0814  
                                                l1241 0928  
                                                l1314 165A  
                                                l1227 0A42  
                                                l1307 15EE  
                                                l1229 085A  
                                                l1238 08B0  
                                                l4000 1676  
                                                l4002 169A  
                                                l4100 0D86  
                                                l4020 0AB4  
                                                l4012 0A4A  
                                                l4004 16AE  
                                                l4030 0AFE  
                                                l4022 0AC4  
                                                l4014 0A74  
                                                l4006 16C0  
                                                l4110 1E92  
                                                l4040 0B66  
                                                l4032 0B0A  
                                                l4024 0AD2  
                                                l4016 0A84  
                                                l4008 16C2  
                                                l4120 1EE8  
                                                l4112 1EA2  
                                                l4104 1E7E  
                                                l4200 1E6C  
                                                l4210 2198  
                                                l4042 0B82  
                                                l4034 0B20  
                                                l4026 0AE0  
                                                l4018 0A88  
                                                l4130 1F3A  
                                                l4122 1EEC  
                                                l4114 1EA8  
                                                l4106 1E82  
                                                l4220 21DC  
                                                l4212 219E  
                                                l4204 2182  
                                                l4052 0BE4  
                                                l4044 0B86  
                                                l4060 0C18  
                                                l4036 0B46  
                                                l4028 0AE6  
                                                l4140 1F58  
                                                l4124 1EFE  
                                                l4132 1F4A  
                                                l4116 1EBE  
                                                l4108 1E90  
                                                l4302 2586  
                                                l4230 2238  
                                                l4222 21EE  
                                                l4214 21B4  
                                                l4206 2186  
                                                l4070 0C90  
                                                l4062 0C2E  
                                                l4054 0BFA  
                                                l4038 0B50  
                                                l4046 0B9C  
                                                l4150 1F7E  
                                                l4142 1F5C  
                                                l4134 1F50  
                                                l4126 1F1A  
                                                l4118 1ECA  
                                                l4310 24AC  
                                                l4224 2220  
                                                l4216 21C0  
                                                l4208 2192  
                                                l4080 0CF2  
                                                l4072 0C94  
                                                l4064 0C54  
                                                l4056 0C10  
                                                l4048 0BB2  
                                                l4240 1FFC  
                                                l4144 1F64  
                                                l4136 1F52  
                                                l4128 1F1E  
                                                l4160 1D80  
                                                l4400 24D2  
                                                l4320 24BE  
                                                l4312 24B0  
                                                l4306 2594  
                                                l4226 2228  
                                                l4218 21D8  
                                                l4082 0D08  
                                                l4066 0C5E  
                                                l4074 0CAA  
                                                l4090 0D40  
                                                l4250 2038  
                                                l4242 200E  
                                                l4234 1F94  
                                                l4146 1F68  
                                                l4138 1F54  
                                                l4170 1DD6  
                                                l4162 1D90  
                                                l4154 1D6C  
                                                l4410 24E8  
                                                l4402 24D8  
                                                l4322 24C0  
                                                l4314 24B4  
                                                l4330 16EE  
                                                l4228 2230  
                                                l4092 0D56  
                                                l4084 0D1E  
                                                l4076 0CC0  
                                                l4068 0C74  
                                                l4260 2474  
                                                l4252 2056  
                                                l4244 2012  
                                                l4236 1F9E  
                                                l4148 1F6C  
                                                l4180 1E28  
                                                l4172 1DDA  
                                                l4164 1D96  
                                                l4156 1D70  
                                                l4500 2654  
                                                l4404 24DA  
                                                l4324 24C2  
                                                l4316 24B8  
                                                l4308 24A4  
                                                l4340 173E  
                                                l4332 16FC  
                                                l4420 256A  
                                                l4412 24F0  
                                                l4094 0D6E  
                                                l4262 2478  
                                                l4270 2448  
                                                l4254 205A  
                                                l4246 202C  
                                                l4238 1FEE  
                                                l4190 1E46  
                                                l4174 1DEC  
                                                l4182 1E38  
                                                l4166 1DAC  
                                                l4158 1D7E  
                                                l4510 0D9E  
                                                l4406 24DC  
                                                l4318 24BC  
                                                l4502 2644  
                                                l4350 1788  
                                                l4342 1750  
                                                l4334 1702  
                                                l4326 16DC  
                                                l4422 256E  
                                                l4414 2504  
                                                l4096 0D76  
                                                l4088 0D26  
                                                l4264 2496  
                                                l4272 2466  
                                                l3800 067E  
                                                l4248 2034  
                                                l4256 2060  
                                                l4192 1E4A  
                                                l4184 1E3E  
                                                l4176 1E08  
                                                l4168 1DB8  
                                                l4520 0E46  
                                                l4512 0DD8  
                                                l4432 2578  
                                                l4408 24E6  
                                                l4360 17D4  
                                                l4352 179C  
                                                l4344 175A  
                                                l4336 1708  
                                                l4328 16E2  
                                                l4280 1B50  
                                                l4440 109C  
                                                l4416 2534  
                                                l4424 2570  
                                                l4098 0D7E  
                                                l4266 249A  
                                                l4274 246A  
                                                l3810 06B2  
                                                l3802 0690  
                                                l4258 207C  
                                                l4194 1E52  
                                                l4186 1E40  
                                                l4178 1E0C  
                                                l4530 0EDA  
                                                l4522 0E5A  
                                                l4514 0DE8  
                                                l4506 0D8E  
                                                l4602 263C  
                                                l4370 182E  
                                                l4362 17E6  
                                                l4354 17AE  
                                                l4346 1772  
                                                l4338 171E  
                                                l4610 22CA  
                                                l4290 1BBE  
                                                l4282 1B66  
                                                l4442 10A6  
                                                l4450 10F0  
                                                l4418 253C  
                                                l4426 2522  
                                                l4268 2444  
                                                l3900 09C2  
                                                l3812 06C8  
                                                l3820 06F8  
                                                l3804 0698  
                                                l4196 1E56  
                                                l4188 1E42  
                                                l4532 0EDE  
                                                l4524 0E94  
                                                l4516 0DFC  
                                                l4540 0F38  
                                                l4508 0D9A  
                                                l4428 264C  
                                                l4380 1888  
                                                l4372 1832  
                                                l4364 17FA  
                                                l4356 17B8  
                                                l4348 1776  
                                                l4612 230A  
                                                l4604 22C6  
                                                l4292 1BD4  
                                                l4284 1B7C  
                                                l4276 1B36  
                                                l4460 11BC  
                                                l4452 1108  
                                                l4444 10B0  
                                                l4436 1086  
                                                l4620 18C4  
                                                l3750 250E  
                                                l3910 0A2C  
                                                l3902 09D8  
                                                l3830 0744  
                                                l3822 070A  
                                                l3814 06DC  
                                                l3806 069E  
                                                l4198 1E5A  
                                                l4550 0F70  
                                                l4542 0F4E  
                                                l4534 0EE6  
                                                l4526 0EA4  
                                                l4518 0E36  
                                                l4382 18A0  
                                                l4374 1844  
                                                l4366 180C  
                                                l4358 17D0  
                                                l4614 230C  
                                                l4286 1B92  
                                                l4278 1B3A  
                                                l4470 120C  
                                                l4462 11CE  
                                                l4454 1110  
                                                l4438 1096  
                                                l4630 18D8  
                                                l4622 18C8  
                                                l3760 2546  
                                                l3752 2512  
                                                l3912 0A32  
                                                l3904 09F8  
                                                l3824 0726  
                                                l3816 06EC  
                                                l3808 06B0  
                                                l4560 0F96  
                                                l4552 0F76  
                                                l4544 0F56  
                                                l4528 0EB8  
                                                l4392 2408  
                                                l4384 18A8  
                                                l4368 1816  
                                                l4376 185E  
                                                l4288 1BA8  
                                                l4296 1BEA  
                                                l4480 1256  
                                                l4472 1220  
                                                l4464 11DE  
                                                l4456 118E  
                                                l4448 10BA  
                                                l4640 192A  
                                                l4632 18E4  
                                                l4624 18CC  
                                                l4616 18BE  
                                                l3754 2516  
                                                l3762 25D6  
                                                l3914 0A36  
                                                l3906 0A14  
                                                l3850 07CE  
                                                l3842 0782  
                                                l3826 0736  
                                                l3834 0758  
                                                l3818 06F0  
                                                l3930 1A5E  
                                                l3922 19FE  
                                                l3770 25CA  
                                                l4570 1028  
                                                l4562 0FD8  
                                                l4554 0F7E  
                                                l4546 0F68  
                                                l4538 0EF0  
                                                l4394 241A  
                                                l4386 18B0  
                                                l4378 1874  
                                                l4482 1260  
                                                l4474 1234  
                                                l4466 11F2  
                                                l4458 11B0  
                                                l4650 196C  
                                                l4642 1936  
                                                l4634 18EC  
                                                l4626 18D0  
                                                l4618 18BE  
                                                l3748 2614  
                                                l3908 0A1A  
                                                l3860 0820  
                                                l3852 07D6  
                                                l3844 079E  
                                                l3836 076E  
                                                l3828 073E  
                                                l3932 1A60  
                                                l3924 1A18  
                                                l3764 25EC  
                                                l3772 265C  
                                                l4572 103A  
                                                l4396 2430  
                                                l4388 18B8  
                                                l3780 2350  
                                                l4820 1C00  
                                                l4484 126A  
                                                l4476 1246  
                                                l4468 11F6  
                                                l4660 19B8  
                                                l4652 1980  
                                                l4644 1948  
                                                l4636 1900  
                                                l4628 18D4  
                                                l3758 260A  
                                                l3870 088A  
                                                l3862 0844  
                                                l3854 07EC  
                                                l3846 07AE  
                                                l3838 076E  
                                                l3790 0638  
                                                l3934 1A70  
                                                l3766 25F6  
                                                l3774 25BE  
                                                l4574 1042  
                                                l4822 0F10  
                                                l4398 24CA  
                                                l3782 2356  
                                                l4478 124C  
                                                l4670 19E8  
                                                l4662 19BC  
                                                l4654 1986  
                                                l4646 1958  
                                                l4638 1910  
                                                l3880 08D6  
                                                l3872 0890  
                                                l3864 0846  
                                                l3856 0800  
                                                l3848 07BE  
                                                l3792 064E  
                                                l3784 0618  
                                                l3960 1B0A  
                                                l3944 1AA2  
                                                l3936 1A74  
                                                l3928 1A2E  
                                                l3768 2600  
                                                l4584 106A  
                                                l4576 104A  
                                                l4568 0FF0  
                                                l3776 2326  
                                                l4488 1276  
                                                l4816 10D0  
                                                l4672 19EC  
                                                l4656 198C  
                                                l4648 195A  
                                                l4664 19C0  
                                                l3890 0956  
                                                l3882 08DA  
                                                l3874 089C  
                                                l3866 0856  
                                                l3858 0812  
                                                l3794 0662  
                                                l3786 0624  
                                                l3962 1B1A  
                                                l3954 1AD2  
                                                l3946 1AAE  
                                                l3938 1A86  
                                                l3970 150C  
                                                l4586 1070  
                                                l4578 1052  
                                                l4498 25E2  
                                                l3778 232E  
                                                l4818 128C  
                                                l4674 19F0  
                                                l4666 19DA  
                                                l4658 19B6  
                                                l3892 0962  
                                                l3884 08EC  
                                                l3876 08AE  
                                                l3868 0870  
                                                l3796 0672  
                                                l3788 0636  
                                                l3956 1AE0  
                                                l3948 1AB8  
                                                l3980 158E  
                                                l3972 1554  
                                                l4668 19E2  
                                                l3894 0974  
                                                l3886 091E  
                                                l3878 08C2  
                                                l3798 0676  
                                                l3958 1AF4  
                                                l3990 1626  
                                                l3982 159C  
                                                l3974 1570  
                                                l3966 14E6  
                                                l3896 099E  
                                                l3992 1634  
                                                l3984 15D4  
                                                l3968 14FA  
                                                l3898 09A2  
                                                l3994 1648  
                                                l3986 15D8  
                                                l3978 1584  
                                                l3996 166E  
                                                l3988 15E4  
                                                ?_isr 0001  
                                                l3998 1670  
                                                u3000 0842  
                                                u3001 083C  
                                                u3010 086E  
                                                u3011 0868  
                                                u3100 09C0  
                                                u3020 0888  
                                                u3101 09BA  
                                                u3021 0882  
                                                _LATA 000F89  
                                                u3110 09F6  
                                                u3030 08AC  
                                                _LATB 000F8A  
                                                u3111 09F0  
                                                u3031 08A6  
                                                _LATC 000F8B  
                                                u3120 0A2A  
                                                u3040 08D4  
                                                u3200 14F8  
                                                u4000 1038  
                                                _LATD 000F8C  
                                                u3121 0A24  
                                                u3041 08CE  
                                                u3201 14F2  
                                                u4001 1032  
                                                u3050 08EA  
                                                u3130 1A16  
                                                u3210 150A  
                                                u4010 1064  
                                                u3051 08E4  
                                                u3131 1A10  
                                                u3211 1504  
                                                u4011 105E  
                                                u3300 0A72  
                                                u3060 091C  
                                                u3140 1A52  
                                                u3220 156E  
                                                u4020 231E  
                                                u3301 0A6C  
                                                u3061 0916  
                                                u3221 1568  
                                                u4021 2318  
                                                u3310 0AB2  
                                                u3070 093A  
                                                u3150 1A84  
                                                u3230 15CE  
                                                u4030 18FE  
                                                u3311 0AAC  
                                                u3071 0934  
                                                u3151 1A7E  
                                                u3231 15C8  
                                                u4031 18F8  
                                                u3400 0C0E  
                                                u3320 0AFC  
                                                u3080 0954  
                                                u3160 1A9C  
                                                u3240 1620  
                                                u4040 1928  
                                                u3401 0C08  
                                                u3321 0AF6  
                                                u3081 094E  
                                                u3161 1A96  
                                                u3145 1A46  
                                                u3241 161A  
                                                u4041 1922  
                                                u3410 0C2C  
                                                u3330 0B1E  
                                                u3090 0972  
                                                u3170 1ACC  
                                                u3250 1646  
                                                u4050 19D8  
                                                u3411 0C26  
                                                u3331 0B18  
                                                u3091 096C  
                                                u3171 1AC6  
                                                u3251 1640  
                                                u4051 19D2  
                                                u3500 0D54  
                                                u3420 0C52  
                                                u3340 0B44  
                                                u3180 1AF4  
                                                u3260 165A  
                                                u3501 0D4E  
                                                u3421 0C4C  
                                                u3341 0B3E  
                                                u3181 1AEE  
                                                u3261 1654  
                                                u3510 0D68  
                                                u3430 0C72  
                                                u3350 0B64  
                                                u3190 1B08  
                                                u3270 166C  
                                                u3511 0D62  
                                                u3431 0C6C  
                                                u3351 0B5E  
                                                u3191 1B02  
                                                u3271 1666  
                                                u3440 0C8E  
                                                u3360 0B80  
                                                u3280 16AC  
                                                u3520 1EBC  
                                                u3600 1E06  
                                                u3441 0C88  
                                                u3361 0B7A  
                                                u3281 16A6  
                                                u3521 1EB6  
                                                u3601 1E00  
                                                u3450 0CBE  
                                                u3370 0BB0  
                                                u3290 16BE  
                                                u3530 1EE6  
                                                u3610 1E26  
                                                u3451 0CB8  
                                                u3371 0BAA  
                                                u3291 16B8  
                                                u3531 1EE0  
                                                u3611 1E20  
                                                u3460 0CEC  
                                                u3380 0BDE  
                                                u2900 0634  
                                                u3700 207A  
                                                u3540 1F18  
                                                u3620 1E38  
                                                u3461 0CE6  
                                                u3381 0BD8  
                                                u2901 062E  
                                                u3701 2074  
                                                u3541 1F12  
                                                u3621 1E32  
                                                u3470 0D06  
                                                u3390 0BF8  
                                                u3710 2492  
                                                u2910 064C  
                                                u3550 1F38  
                                                u3630 1E6A  
                                                u3471 0D00  
                                                u3391 0BF2  
                                                u3711 248C  
                                                u2911 0646  
                                                u3551 1F32  
                                                u3631 1E64  
                                                u3640 21B2  
                                                u3480 0D1C  
                                                u3720 2462  
                                                u2920 0660  
                                                u3560 1F4A  
                                                u3800 17F8  
                                                u3641 21AC  
                                                u3481 0D16  
                                                u3721 245C  
                                                u2921 065A  
                                                u3561 1F44  
                                                u3801 17F2  
                                                u3650 21D6  
                                                u3490 0D40  
                                                u2930 06AE  
                                                u3570 1F7C  
                                                u3810 180C  
                                                u3730 171C  
                                                u3651 21D0  
                                                u3491 0D3A  
                                                u2931 06A8  
                                                u3571 1F76  
                                                u3811 1806  
                                                u3731 1716  
                                                u3660 2208  
                                                u2940 06C6  
                                                u3580 1DAA  
                                                u3820 182C  
                                                u3740 173C  
                                                u3900 118C  
                                                u3661 2202  
                                                u2941 06C0  
                                                u3581 1DA4  
                                                u3821 1826  
                                                u3741 1736  
                                                u3901 1186  
                                                u3670 221A  
                                                u2950 06DA  
                                                u3590 1DD4  
                                                u3830 185E  
                                                u3750 1750  
                                                u3910 11B0  
                                                u3671 2214  
                                                u2951 06D4  
                                                u3591 1DCE  
                                                u3831 1858  
                                                u3751 174A  
                                                u3911 11AA  
                                                u2960 0724  
                                                u3680 202A  
                                                u3840 1872  
                                                u3760 1770  
                                                u2880 234E  
                                                u3920 120A  
                                                u2961 071E  
                                                u3681 2024  
                                                u3841 186C  
                                                u3761 176A  
                                                u2881 2348  
                                                u3921 1204  
                                                u2970 076C  
                                                u3690 2052  
                                                u3850 1886  
                                                u3770 179A  
                                                u2890 236C  
                                                u3930 121E  
                                         main@newData 00F1  
                                                u2971 0766  
                                                u3691 204C  
                                                u3851 1880  
                                                u3771 1794  
                                                u2891 2366  
                                                u3931 1218  
                                                u2980 07EA  
                                                u3860 189A  
                                                u3780 17AE  
                                                u3940 1232  
                                                u2981 07E4  
                                                u3861 1894  
                                                u3781 17A8  
                                                u3941 122C  
                                                u2990 0810  
                                                u3870 2418  
                                                u3790 17CE  
                                                u3950 1246  
                                                u2991 080A  
                                                u3871 2412  
                                                u3791 17C8  
                                                u3951 1240  
                                                u3960 0F4C  
                                                u3880 242E  
                                                u3961 0F46  
                                                u3881 2428  
                                                u3970 0F68  
                                                u3890 1106  
                                                u3971 0F62  
                                                u3891 1100  
                                                u3980 0F90  
                                                u3981 0F8A  
                                                u3990 0FEA  
                                                u3991 0FE4  
                                                i2l81 25AA  
                                                i2l87 2666  
                                                _TMR0 000FD6  
                                                _TMR2 000FCC  
                                 __end_ofi2_storeData 14E2  
                                                _main 18BE  
                                                _maxX 0607  
                                                _maxY 0605  
                                __end_ofi2_printError 1D6A  
                                                fsr2h 000FDA  
                                                indf2 000FDF  
                                                fsr1l 000FE1  
                                                fsr2l 000FD9  
                                                btemp 006E  
                                                prodh 000FF4  
                                                prodl 000FF3  
                                                start 01A4  
                                     ___fldiv@new_exp 0031  
                                        ?_increaseSeq 0001  
                                        ___param_bank 000000  
                                     ??_whatsTM0Limit 0001  
                                               ??_isr 000B  
                                        ?_executeData 0001  
                                     executeData@data 00EB  
                                       ___fltol@sign1 0041  
                                               ?_main 0001  
                                     __end_of___fldiv 0A48  
                                     __end_of___fltol 1B32  
                                               i2l251 255E  
                                               i2l252 2560  
                                               i2l603 14DC  
                                               i2l534 2676  
                                               i2l470 018C  
                                               i2l391 2636  
                                               i2l562 1D64  
                                               i2l642 25B8  
                                               i2l394 262C  
                                               i2l571 23BC  
                                               i2l636 266E  
                                               i2l567 238A  
                                               i2l639 2622  
                                               i2l596 13F4  
                                rotateObj@rotSequence 0080  
                                               _SPBRG 000FAF  
                                               _TRISA 000F92  
                                               _TRISB 000F93  
                                               _TRISC 000F94  
                                               _TRISD 000F95  
                                               _TXREG 000FAD  
                                     __end_of_getData 2592  
                                     i2storeData@data 000A  
                                     __end_of_initADC 24EE  
                                        ?_newSequence 0001  
                                     __end_of_liftArm 223E  
                                     __end_of_readSeq 264A  
                                        stepMade@temp 0014  
                                               tablat 000FF5  
                                      i2uartTx@length 0003  
                                     __end_of_stopADC 2662  
                                               ttemp5 006F  
                                               ttemp6 0072  
                                               ttemp7 0076  
                                               status 000FD8  
                                               wtemp8 006F  
                                    __end_ofi2_uartTx 23C0  
                                       ?_increaseStep 0001  
                                     __initialization 223E  
                              __size_of_initPinMotors 0026  
                                        __end_of_main 19FC  
                                        __end_of_maxX 0609  
                                        __end_of_maxY 0607  
                            resetPosition@keepMovingX 0015  
                            resetPosition@keepMovingY 0016  
                            resetPosition@keepMovingZ 0017  
                                              ??_main 00EE  
                                       __activetblptr 000002  
                               __end_of_resetTM0_Temp 2612  
                               __end_of_resetTM2_Temp 2556  
                                         i2_storeData 12B2  
                                        ?_setThermRel 0001  
                                              _ADRESH 000FC4  
                                              _ADRESL 000FC3  
                                        ?_moveToPoint 0015  
                                              i2l3100 1CF0  
                                              i2l2230 2628  
                                              i2l3104 1D06  
                                              i2l2232 2674  
                                              i2l2240 261E  
                                              i2l2228 2632  
                                              i2l2238 266C  
                                              i2l3090 1C82  
                                              i2l3092 1C98  
                                              i2l3084 1C52  
                                              i2l3094 1CAE  
                                              i2l3086 1C56  
                                              i2l3422 25B0  
                                              i2l1910 25A2  
                                              i2l3430 12D6  
                                              i2l3096 1CC4  
                                              i2l3088 1C6C  
                                              i2l3440 1338  
                                              i2l3432 12E0  
                                              i2l3424 12B6  
                                              i2l3600 0168  
                                              i2l3098 1CDA  
                                              i2l1914 2664  
                                              i2l3450 13FE  
                                              i2l3442 1340  
                                              i2l3426 12C6  
                                              i2l3602 016C  
                                              i2l3196 2558  
                                              i2l3460 1450  
                                              i2l3452 140E  
                                              i2l3444 13BE  
                                              i2l3428 12CC  
                                              i2l3436 12EA  
                                              i2l3604 0180  
                                              i2l3470 1490  
                                              i2l3462 1464  
                                              i2l3454 1422  
                                              i2l3446 13E0  
                                              i2l3438 1320  
                                              i2l3606 0186  
                                              i2l3550 0030  
                                              i2l3472 149A  
                                              i2l3464 1476  
                                              i2l3456 1426  
                                              i2l3448 13EC  
                                              i2l3552 0032  
                                              i2l3560 0058  
                                              i2l3466 147C  
                                              i2l3458 143C  
                                              i2l3570 009E  
                                              i2l3562 006C  
                                              i2l3554 004E  
                                              i2l3546 001C  
                                              i2l3468 1486  
                                              i2l3476 14A6  
                                              i2l3580 00CC  
                                              i2l3572 00A0  
                                              i2l3564 006E  
                                              i2l3556 0050  
                                              i2l3548 002E  
                                              i2l2782 2374  
                                              i2l3582 00E0  
                                              i2l3574 00A4  
                                              i2l3590 0100  
                                              i2l3566 0086  
                                              i2l3558 0054  
                                              i2l2784 237C  
                                              i2l3592 0114  
                                              i2l3584 00F2  
                                              i2l3576 00C2  
                                              i2l3568 008A  
                                              i2l2786 239E  
                                              i2l3594 011C  
                                              i2l3586 00F6  
                                              i2l3578 00CA  
                                              i2l2788 23A4  
                                              i2l3596 0142  
                                              i2l3588 00FA  
                                              i2l3598 014E  
                                              i2l4824 1300  
                                              i2l4826 14BC  
                                              i2l4828 1D1C  
                                              _RCREG1 000FAE  
                                        ?_setTouchRel 0001  
                                    __end_of_abortAll 2568  
                                    __end_of___xxtofl 16DA  
                                    __end_of_clearTM0 25A0  
                                    _errString_PointZ 0100  
                                      ??_increaseStep 0001  
                                    __end_of_maxFeedX 0615  
                                    __end_of_maxFeedY 0614  
                                           ??___fldiv 0028  
                                           ??___fltol 003D  
                                    __end_of_tim0Init 2544  
                                    __end_of_tim1Init 2576  
                                    __end_of_tim2Init 2532  
                                              clear_0 22A4  
                                              clear_1 22B0  
                                           ??_getData 0014  
                                              _uartTx 2324  
                                           ??_initADC 0012  
                                           ??_liftArm 0015  
                                           ??_readSeq 0012  
                                        __pdataCOMRAM 0067  
                               __end_of_resetPosition 18BE  
                                        __mediumconst 0000  
                                              tblptrh 000FF7  
                                              tblptrl 000FF6  
                                              tblptru 000FF8  
                                        ?_returnTherm 0012  
                                    __end_of_startADC 25F4  
                                    __end_of_stepMade 2520  
                                       _initPinMotors 24A2  
                                        ?_returnTouch 0012  
                                           ??_stopADC 0012  
                               __size_ofi2_printError 011C  
                                    __end_of_writeTM0 25AE  
                           __size_of_resetNewSequence 000A  
                                        ___xxtofl@arg 001C  
                                        ___xxtofl@exp 001B  
                                        ___xxtofl@val 0012  
                                          __accesstop 0080  
                             __end_of__initialization 22B6  
                                        _dataSequence 00C6  
                                       ___rparam_used 000001  
                                          ___fltol@f1 0039  
                                        ?_stepCounter 0012  
                                         i2uartTx@ptr 0001  
                                      __pcstackCOMRAM 0001  
                                        __newSequence 005F  
                                        __pidataBANK0 23C0  
                                        __pidataBANK1 2088  
                                __size_of_increaseSeq 0008  
                                __size_of_executeData 02F6  
                                        i2_printError 1C4E  
                                        ?_touchObject 0001  
                                      _errString_ZEND 015E  
                                      _errString_Feed 0090  
                                      ?_initPinMotors 0001  
                                           ?i2_uartTx 0001  
                                          __pbssBANK0 00C6  
                                __size_of_newSequence 0008  
                                          _feeder1Pos 0611  
                                          _feeder2Pos 060F  
                                          _feeder3Pos 060D  
                             __size_of_getNewSequence 000E  
                                          _fatalError 2672  
                                  __size_of_reduceSeq 0008  
                                  __size_of_retPeriod 000E  
                                      _touch_pressure 060B  
                                  __size_of_shiftData 0060  
                                  __size_of_resetStep 000A  
                                             _ADC_res 0053  
                                             ?_uartTx 0012  
                                           ?_abortAll 0001  
                                           ?___xxtofl 0012  
                                __end_of_increaseStep 2672  
                                           ?_clearTM0 0001  
                                          ??i2_uartTx 0004  
                                  __size_of_rotateObj 00FA  
                                   _errString_Command 00AE  
                                  __size_of_usartInit 001E  
                              __size_of_interruptInit 003C  
                                __size_of_setThermRel 000A  
                                  __size_of_storeData 0230  
                                           ?_tim0Init 0001  
                                           ?_tim1Init 0001  
                                           ?_tim2Init 0012  
                                __size_of_moveToPoint 0344  
                                storeData@receivedMex 0043  
                                     _newSequenceData 00DA  
                                __size_of_setTouchRel 000A  
                                             __Hparam 0000  
                                             __Lparam 0000  
                              __end_of_touch_pressure 060D  
                                             ___fldiv 0616  
                                           ?_startADC 0001  
                                           ?_stepMade 0012  
                                             ___fltol 19FC  
                                        __psmallconst 0600  
                                             __pcinit 223E  
                               __end_of_whatsTM0Limit 266A  
                                             _getData 2584  
                                             __ramtop 0600  
                                           ?_writeTM0 0001  
                                          _pickObject 2472  
                                             __ptext0 18BE  
                                             __ptext1 24EE  
                                             __ptext2 2520  
                                             __ptext3 2568  
                                             __ptext4 2532  
                                             __ptext5 1082  
                                             __ptext6 1B32  
                                             __ptext7 2324  
                                             __ptext8 22C4  
                                             __ptext9 16DA  
                                     __size_of_uartTx 004E  
                                           _T0CONbits 000FD5  
                                             _initADC 24C8  
                                           _T1CONbits 000FCD  
                                     ??_initPinMotors 0012  
                                             _liftArm 2180  
                                           _T2CONbits 000FCA  
                                          ??_abortAll 0008  
                                             _readSeq 2642  
                                        __size_of_isr 019C  
                                          ??___xxtofl 0016  
                                        ?i2_storeData 0001  
                                          ??_clearTM0 0012  
                                          _motCounter 0067  
                                             _pwmStep 005C  
                                             _stopADC 265A  
                                   __end_of_reduceSeq 2642  
                                   __end_of_retPeriod 25BC  
                                          _releaseObj 2442  
                                __size_of_returnTherm 000C  
                                end_of_initialization 22B6  
                                __size_of_returnTouch 000C  
                                    _resetNewSequence 25E0  
                                    rotateObj@totStep 00E3  
                                   __end_of_shiftData 2324  
                                             isr@temp 0011  
                                   __end_of_resetStep 261C  
                                          ??_tim0Init 0012  
                                       __Lmediumconst 0000  
                                          ??_tim1Init 0012  
                                          ??_tim2Init 0014  
                                    storeData@command 005D  
                                    storeData@counter 005E  
                                          _resetTherm 25FE  
                                          _resetTouch 25F4  
                                             uartTx@i 0015  
                                         ?_fatalError 0001  
                                           _RCSTAbits 000FAB  
                                             postdec1 000FE5  
                                   __end_of_rotateObj 2088  
                                             postinc0 000FEE  
                                             postinc1 000FE6  
                                             postinc2 000FDE  
                                          ??_startADC 0012  
                                          ??_stepMade 0014  
                                __size_of_stepCounter 000C  
                                       _interruptInit 2406  
                                   __end_of_usartInit 250C  
                                   __end_of_storeData 12B2  
                          __end_ofrotateObj@stepAngle 0605  
                                          ??_writeTM0 0001  
                                           _PORTDbits 000F83  
                                          _printError 1B32  
                                           _PORTEbits 000F84  
                                 i2printError@errCode 0007  
                                          _toggleStep 261C  
                                       ___xxtofl@sign 001A  
                                           _TRISCbits 000F94  
                                           _TRISDbits 000F95  
                                           _TRISEbits 000F96  
                                         ___fldiv@grs 0033  
                                         ___fldiv@rem 002C  
                                __size_of_touchObject 0112  
                                          _stepToggle 005B  
                                        _completeStep 0062  
                                          _touchTherm 1D6A  
                                           _TXSTAbits 000FAC  
                                      _getNewSequence 2576  
                              __size_of_resetTM0_Temp 000A  
                              __size_of_resetTM2_Temp 0012  
                                      ?_interruptInit 0001  
                                       __pidataCOMRAM 267A  
                               __size_of_increaseStep 0008  
                                         ?_pickObject 0001  
                                         __fatalError 0060  
                                      __end_of_uartTx 2372  
                                       moveToPoint@x1 0015  
                                       moveToPoint@x2 0019  
                                       moveToPoint@y1 0017  
                                       moveToPoint@y2 001B  
                                 start_initialization 223E  
                                           i2uartTx@i 0004  
                                         __end_of_isr 01A4  
                                 __size_of_fatalError 0008  
                                         ?_releaseObj 0001  
                                   __size_ofi2_uartTx 004E  
                              __end_of_getNewSequence 2584  
                                     _errString_Fatal 01AF  
                                     _errString_Bound 01D6  
                                         ?_resetTherm 0001  
                                     _errString_Reset 0187  
                                         ?_resetTouch 0001  
                                       ??_increaseSeq 0012  
                                     _errString_Point 0135  
                                        _increaseStep 266A  
                              __size_of_resetPosition 01E4  
                                       ??_executeData 00E9  
                                         __pdataBANK0 0080  
                                         __pdataBANK1 0100  
                                         _dataCounter 0061  
                                            ??_uartTx 0015  
                              moveToPoint@keepMovingX 0021  
                              moveToPoint@keepMovingY 0022  
                                         ?_printError 0001  
                                           ___fldiv@a 0024  
                                           ___fldiv@b 0020  
                                      _therm_pressure 0609  
                                         ?_toggleStep 0001  
                                         __pbssCOMRAM 0043  
                                       _resetTM0_Temp 2608  
                                       _resetTM2_Temp 2544  
                                       __pcstackBANK0 00E2  
                                       ??_newSequence 0012  
                                   __size_of_abortAll 0012  
                                   __size_of___xxtofl 01F8  
                                __size_ofi2_storeData 0230  
                                   __size_of_clearTM0 000E  
                                     ?_getNewSequence 0012  
                                         ?_touchTherm 0001  
                                 __size_of_pickObject 0030  
                                  executeData@errCode 00ED  
                                   __size_of_tim0Init 0012  
                                   __size_of_tim1Init 000E  
                                   __size_of_tim2Init 0012  
                                     ??_interruptInit 0012  
                                           __pintcode 0008  
                                            ?___fldiv 0020  
                                            ?___fltol 0039  
                            __end_of_resetNewSequence 25EA  
                                 __size_of_releaseObj 0030  
                                       storeData@data 001B  
                                 __end_of_increaseSeq 265A  
                                            ?_getData 0012  
                                   __size_of_startADC 000A  
                                   __size_of_stepMade 0014  
                              __end_of_therm_pressure 060B  
                                            ?_initADC 0001  
                                         __smallconst 0600  
                                            ?_liftArm 0001  
                                            ?_readSeq 0001  
                                      ?_resetTM0_Temp 0001  
                                   __size_of_writeTM0 000E  
                                      ?_resetTM2_Temp 0001  
                                 __end_of_executeData 1082  
                                          shiftData@i 0014  
                                 __size_of_resetTherm 000A  
                                           _newFeeder 0055  
                                       _resetPosition 16DA  
                                 __size_of_resetTouch 000A  
                                       ??_setThermRel 0001  
                                            ?_stopADC 0001  
                                       ??_moveToPoint 001D  
                                       ??_setTouchRel 0001  
                                 __end_of_newSequence 2652  
                                           _reduceSeq 263A  
                                            _LATAbits 000F89  
                                            _LATBbits 000F8A  
                                           _retPeriod 25AE  
                                            _LATCbits 000F8B  
                                            _LATDbits 000F8C  
                                 __size_of_printError 011C  
                                            _IPR1bits 000F9F  
                                            _PIE1bits 000F9D  
                                           _shiftData 22C4  
                                           _resetStep 2612  
                                            i2u270_40 144E  
                                            i2u270_41 1448  
                                            i2u191_40 239C  
                                            i2u271_40 1462  
                                            i2u191_41 2396  
                                            i2u271_41 145C  
                                            i2u192_40 23BA  
                                            i2u272_40 1476  
                                            i2u280_40 009C  
                                            i2u192_41 23B4  
                                            i2u272_41 1470  
                                            i2u280_41 0096  
                                            i2u281_40 00C0  
                                            i2u281_41 00BA  
                                            _PIR1bits 000F9E  
                                            i2u266_40 1336  
                                            i2u282_40 00DE  
                                            i2u266_41 1330  
                                            i2u282_41 00D8  
                                            i2u267_40 13BC  
                                            i2u283_40 00F0  
                                            i2u267_41 13B6  
                                            i2u283_41 00EA  
                                            i2u268_40 13E0  
                                            i2u284_40 0112  
                                            i2u276_40 002C  
                                            i2u268_41 13DA  
                                            i2u284_41 010C  
                                            i2u276_41 0026  
                                            i2u269_40 143A  
                                            i2u285_40 0140  
                                            i2u277_40 004C  
                                            i2u269_41 1434  
                                            i2u285_41 013A  
                                            i2u277_41 0046  
                                            i2u286_40 0166  
                                            i2u278_40 006A  
                                            i2u286_41 0160  
                                            i2u278_41 0064  
                                            i2u287_40 017E  
                                            i2u279_40 0084  
                                            i2u287_41 0178  
                                            i2u279_41 007E  
                                 __size_of_toggleStep 000A  
                                        ??_fatalError 0001  
                                           _posVector 004C  
                                            _RCONbits 000FD0  
                                           _therm_rel 0064  
                                           _pwmPeriod 004F  
                                           _rotateObj 1F8E  
                                          _ADCON0bits 000FC2  
                                          _ADCON1bits 000FC1  
                                 __size_of_touchTherm 0112  
                                           _usartInit 24EE  
                                           _touch_rel 0065  
                                  __end_of_feeder1Pos 0613  
                                  __end_of_feeder2Pos 0611  
                                  __end_of_feeder3Pos 060F  
                                           _storeData 1082  
                                      ?_resetPosition 0001  
                               __end_of_initPinMotors 24C8  
                                       ??_returnTherm 0014  
                                       ??_returnTouch 0014  
                                            i2_uartTx 2372  
                                           copy_data0 2252  
                                           copy_data1 2272  
                                           copy_data2 2292  
                                  __end_of_fatalError 267A  
                                  rotateObj@stepAngle 0601  
                                          ?_reduceSeq 0001  
                                          ?_retPeriod 0001  
                                          rotateObj@c 00E7  
                                          rotateObj@i 00E5  
                              __size_of_whatsTM0Limit 0008  
                                 __end_of_setThermRel 263A  
                                 __end_of_moveToPoint 0D8C  
                                   printError@errCode 0018  
                                          ?_shiftData 0001  
                                       ??_stepCounter 0014  
                                            __Hrparam 0000  
                                          ?_resetStep 0001  
                                         _increaseSeq 2652  
                                 __end_of_setTouchRel 2630  
                                            __Lrparam 0000  
                                    __size_of___fldiv 0432  
                                    __size_of___fltol 0136  
                                         _executeData 0D8C  
                                        ??_pickObject 0015  
                                          ?_rotateObj 0001  
                            moveToPoint@MOT1Direction 001F  
                                     ??_resetTM0_Temp 0012  
                                       ?i2_printError 0001  
                                     ??_resetTM2_Temp 0012  
                                    __size_of_getData 000E  
                            moveToPoint@MOT2Direction 0020  
                                       ??_touchObject 0015  
                                            _abortAll 2556  
                                          ?_usartInit 0001  
                                    __size_of_initADC 0026  
                                            ___xxtofl 14E2  
                                    __size_of_liftArm 00BE  
                                          ?_storeData 0001  
                                            _clearTM0 2592  
                                    __size_of_readSeq 0008  
                                  storeData@mexLength 006D  
                                            _tm0Count 0063  
                                            _tm0Error 0059  
                                            _tm0Limit 0066  
                                         _newSequence 264A  
                                            __ptext10 25E0  
                                            __ptext11 263A  
                                            __ptext20 1D6A  
                                            __ptext12 2642  
                                            __ptext21 25BC  
                                            __ptext13 264A  
                                            __ptext30 19FC  
                                            __ptext22 1E7C  
                                            __ptext14 2406  
                                            __ptext31 0616  
                                            __ptext23 265A  
                                            __ptext15 24A2  
                                            __ptext40 2612  
                                            __ptext32 2442  
                                            __ptext24 25EA  
                                            __ptext16 24C8  
                                            __ptext41 2584  
                                            __ptext33 2472  
                                            __ptext25 25C8  
                                            __ptext17 2652  
                                            __ptext50 25AE  
                                            __ptext42 2592  
                                            __ptext34 0A48  
                                            __ptext26 25F4  
                                            __ptext18 2576  
                                            __ptext51 266A  
                                            __ptext35 25D4  
                                            __ptext27 25FE  
                                            __ptext19 0D8C  
                                            __ptext52 2672  
                                            __ptext44 12B2  
                                            __ptext36 2180  
                                            __ptext28 1F8E  
                                            __ptext53 2556  
                                            __ptext45 25A0  
                                            __ptext37 250C  
                                            __ptext29 14E2  
                                            __ptext54 1C4E  
                                            __ptext46 2662  
                                            __ptext38 2544  
                                            __ptext55 2372  
                                            __ptext47 261C  
                                            __ptext39 2608  
                                            __ptext48 2626  
                                            __ptext49 2630  
                                        ??_releaseObj 0015  
                                    __size_of_stopADC 0008  
                                            _maxFeedX 0614  
                                            _maxFeedY 0613  
                                 __end_of_returnTherm 25C8  
                                 __end_of_returnTouch 25D4  
                                            _tim0Init 2532  
                                            _tim1Init 2568  
                                            _tim2Init 2520  
                                       __size_of_main 013E  
                                  __end_of_pickObject 24A2  
                                        ??_resetTherm 0012  
                                        ??_resetTouch 0012  
                                           uartTx@ptr 0012  
                                            _rotAngle 0057  
                                            int$flags 006E  
                                            _startADC 25EA  
                                            _stepMade 250C  
                                            _stepMot1 008C  
                                            _stepMot2 0088  
                                            _stepMot3 0084  
                                 __end_of_stepCounter 25E0  
                                   rotateObj@rotAngle 00E2  
                                      ??i2_printError 0005  
                                  __end_of_releaseObj 2472  
                                            _writeTM0 25A0  
                                        ??_printError 0016  
                                       _whatsTM0Limit 2662  
                                     ??_resetPosition 0015  
                                  tim2Init@_pwmPeriod 0012  
                                          _INTCONbits 000FF2  
                                        ??_toggleStep 0001  
                                    ??_getNewSequence 0014  
                                  __end_of_resetTherm 2608  
                                  __end_of_resetTouch 25FE  
                                         _setThermRel 2630  
                                        uartTx@length 0014  
                                        _single_cycle 0051  
                                         _moveToPoint 0A48  
                                 __end_of_touchObject 1F8E  
                                            intlevel2 2682  
                                        ??_touchTherm 0015  
                                         _setTouchRel 2626  
                                         ??_reduceSeq 0012  
                                         ??_retPeriod 0003  
                                          _RCSTA1bits 000FAB  
                                  __end_of_printError 1C4E  
                                         ??_shiftData 0012  
                                         ??_resetStep 0012  
                                  __end_of_toggleStep 2626  
                                   ?_resetNewSequence 0001  
                                      ?_whatsTM0Limit 0001  
                                         ??_rotateObj 0043  
                                  ??_resetNewSequence 0012  
                                  __end_of_touchTherm 1E7C  
                                         ??_usartInit 0012  
                                       ??i2_storeData 0008  
                                         ??_storeData 0019  
                                         _returnTherm 25BC  
                                         _returnTouch 25C8  
                                         _stepCounter 25D4  
