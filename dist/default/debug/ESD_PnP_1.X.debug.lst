

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Sat May 01 10:41:18 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    74                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    75                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    76                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    77                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    78  0000                     
    79                           ; Version 2.20
    80                           ; Generated 12/02/2020 GMT
    81                           ; 
    82                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC18F452 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     
   114                           	psect	idataCOMRAM
   115  002720                     __pidataCOMRAM:
   116                           	callstack 0
   117                           
   118                           ;initializer for _motCounter
   119  002720  00                 	db	0
   120  002721  01                 	db	1
   121  002722  00                 	db	0
   122  002723  01                 	db	1
   123  002724  00                 	db	0
   124  002725  01                 	db	1
   125                           
   126                           ;initializer for _mexLength
   127  002726  05                 	db	5
   128                           
   129                           	psect	idataBANK0
   130  002466                     __pidataBANK0:
   131                           	callstack 0
   132                           
   133                           ;initializer for rotateObj@rotSequence
   134  002466  24                 	db	36
   135  002467  0C                 	db	12
   136  002468  18                 	db	24
   137  002469  30                 	db	48
   138                           
   139                           ;initializer for _stepMot3
   140  00246A  09                 	db	9
   141  00246B  03                 	db	3
   142  00246C  06                 	db	6
   143  00246D  0C                 	db	12
   144                           
   145                           ;initializer for _stepMot2
   146  00246E  11                 	db	17
   147  00246F  05                 	db	5
   148  002470  0C                 	db	12
   149  002471  18                 	db	24
   150                           
   151                           ;initializer for _stepMot1
   152  002472  22                 	db	34
   153  002473  06                 	db	6
   154  002474  0C                 	db	12
   155  002475  28                 	db	40
   156                           
   157                           ;initializer for _errString_Feed
   158  002476  45                 	db	69
   159  002477  72                 	db	114
   160  002478  72                 	db	114
   161  002479  6F                 	db	111
   162  00247A  72                 	db	114
   163  00247B  2C                 	db	44
   164  00247C  20                 	db	32
   165  00247D  66                 	db	102
   166  00247E  65                 	db	101
   167  00247F  65                 	db	101
   168  002480  64                 	db	100
   169  002481  20                 	db	32
   170  002482  6C                 	db	108
   171  002483  69                 	db	105
   172  002484  6E                 	db	110
   173  002485  65                 	db	101
   174  002486  20                 	db	32
   175  002487  6E                 	db	110
   176  002488  6F                 	db	111
   177  002489  74                 	db	116
   178  00248A  20                 	db	32
   179  00248B  64                 	db	100
   180  00248C  65                 	db	101
   181  00248D  66                 	db	102
   182  00248E  69                 	db	105
   183  00248F  6E                 	db	110
   184  002490  65                 	db	101
   185  002491  64                 	db	100
   186  002492  0A                 	db	10
   187  002493  00                 	db	0
   188                           
   189                           ;initializer for _errString_Command
   190  002494  43                 	db	67
   191  002495  6F                 	db	111
   192  002496  6D                 	db	109
   193  002497  6D                 	db	109
   194  002498  61                 	db	97
   195  002499  6E                 	db	110
   196  00249A  64                 	db	100
   197  00249B  20                 	db	32
   198  00249C  6E                 	db	110
   199  00249D  6F                 	db	111
   200  00249E  74                 	db	116
   201  00249F  20                 	db	32
   202  0024A0  72                 	db	114
   203  0024A1  65                 	db	101
   204  0024A2  63                 	db	99
   205  0024A3  6F                 	db	111
   206  0024A4  67                 	db	103
   207  0024A5  6E                 	db	110
   208  0024A6  69                 	db	105
   209  0024A7  7A                 	db	122
   210  0024A8  65                 	db	101
   211  0024A9  64                 	db	100
   212  0024AA  0A                 	db	10
   213  0024AB  00                 	db	0
   214                           
   215                           	psect	idataBANK1
   216  00212E                     __pidataBANK1:
   217                           	callstack 0
   218                           
   219                           ;initializer for _errString_PointZ
   220  00212E  45                 	db	69
   221  00212F  72                 	db	114
   222  002130  72                 	db	114
   223  002131  6F                 	db	111
   224  002132  72                 	db	114
   225  002133  2C                 	db	44
   226  002134  20                 	db	32
   227  002135  74                 	db	116
   228  002136  69                 	db	105
   229  002137  6D                 	db	109
   230  002138  65                 	db	101
   231  002139  20                 	db	32
   232  00213A  65                 	db	101
   233  00213B  78                 	db	120
   234  00213C  63                 	db	99
   235  00213D  65                 	db	101
   236  00213E  65                 	db	101
   237  00213F  64                 	db	100
   238  002140  65                 	db	101
   239  002141  64                 	db	100
   240  002142  20                 	db	32
   241  002143  74                 	db	116
   242  002144  6F                 	db	111
   243  002145  20                 	db	32
   244  002146  72                 	db	114
   245  002147  65                 	db	101
   246  002148  61                 	db	97
   247  002149  63                 	db	99
   248  00214A  68                 	db	104
   249  00214B  20                 	db	32
   250  00214C  74                 	db	116
   251  00214D  68                 	db	104
   252  00214E  65                 	db	101
   253  00214F  20                 	db	32
   254  002150  65                 	db	101
   255  002151  6E                 	db	110
   256  002152  64                 	db	100
   257  002153  20                 	db	32
   258  002154  6F                 	db	111
   259  002155  66                 	db	102
   260  002156  20                 	db	32
   261  002157  74                 	db	116
   262  002158  68                 	db	104
   263  002159  65                 	db	101
   264  00215A  20                 	db	32
   265  00215B  5A                 	db	90
   266  00215C  20                 	db	32
   267  00215D  41                 	db	65
   268  00215E  78                 	db	120
   269  00215F  69                 	db	105
   270  002160  73                 	db	115
   271  002161  0A                 	db	10
   272  002162  00                 	db	0
   273                           
   274                           ;initializer for _errString_Point
   275  002163  45                 	db	69
   276  002164  72                 	db	114
   277  002165  72                 	db	114
   278  002166  6F                 	db	111
   279  002167  72                 	db	114
   280  002168  2C                 	db	44
   281  002169  20                 	db	32
   282  00216A  74                 	db	116
   283  00216B  69                 	db	105
   284  00216C  6D                 	db	109
   285  00216D  65                 	db	101
   286  00216E  20                 	db	32
   287  00216F  65                 	db	101
   288  002170  78                 	db	120
   289  002171  63                 	db	99
   290  002172  65                 	db	101
   291  002173  65                 	db	101
   292  002174  64                 	db	100
   293  002175  65                 	db	101
   294  002176  64                 	db	100
   295  002177  20                 	db	32
   296  002178  74                 	db	116
   297  002179  6F                 	db	111
   298  00217A  20                 	db	32
   299  00217B  72                 	db	114
   300  00217C  65                 	db	101
   301  00217D  61                 	db	97
   302  00217E  63                 	db	99
   303  00217F  68                 	db	104
   304  002180  20                 	db	32
   305  002181  74                 	db	116
   306  002182  68                 	db	104
   307  002183  65                 	db	101
   308  002184  20                 	db	32
   309  002185  70                 	db	112
   310  002186  6F                 	db	111
   311  002187  69                 	db	105
   312  002188  6E                 	db	110
   313  002189  74                 	db	116
   314  00218A  0A                 	db	10
   315  00218B  00                 	db	0
   316                           
   317                           ;initializer for _errString_ZEND
   318  00218C  45                 	db	69
   319  00218D  72                 	db	114
   320  00218E  72                 	db	114
   321  00218F  6F                 	db	111
   322  002190  72                 	db	114
   323  002191  2C                 	db	44
   324  002192  20                 	db	32
   325  002193  6E                 	db	110
   326  002194  6F                 	db	111
   327  002195  20                 	db	32
   328  002196  6F                 	db	111
   329  002197  62                 	db	98
   330  002198  6A                 	db	106
   331  002199  65                 	db	101
   332  00219A  63                 	db	99
   333  00219B  74                 	db	116
   334  00219C  20                 	db	32
   335  00219D  72                 	db	114
   336  00219E  65                 	db	101
   337  00219F  6C                 	db	108
   338  0021A0  65                 	db	101
   339  0021A1  76                 	db	118
   340  0021A2  61                 	db	97
   341  0021A3  74                 	db	116
   342  0021A4  65                 	db	101
   343  0021A5  64                 	db	100
   344  0021A6  20                 	db	32
   345  0021A7  61                 	db	97
   346  0021A8  6C                 	db	108
   347  0021A9  6F                 	db	111
   348  0021AA  6E                 	db	110
   349  0021AB  67                 	db	103
   350  0021AC  20                 	db	32
   351  0021AD  5A                 	db	90
   352  0021AE  20                 	db	32
   353  0021AF  41                 	db	65
   354  0021B0  78                 	db	120
   355  0021B1  69                 	db	105
   356  0021B2  73                 	db	115
   357  0021B3  0A                 	db	10
   358  0021B4  00                 	db	0
   359                           
   360                           ;initializer for _errString_Reset
   361  0021B5  45                 	db	69
   362  0021B6  72                 	db	114
   363  0021B7  72                 	db	114
   364  0021B8  6F                 	db	111
   365  0021B9  72                 	db	114
   366  0021BA  2C                 	db	44
   367  0021BB  20                 	db	32
   368  0021BC  74                 	db	116
   369  0021BD  69                 	db	105
   370  0021BE  6D                 	db	109
   371  0021BF  65                 	db	101
   372  0021C0  20                 	db	32
   373  0021C1  65                 	db	101
   374  0021C2  78                 	db	120
   375  0021C3  63                 	db	99
   376  0021C4  65                 	db	101
   377  0021C5  65                 	db	101
   378  0021C6  64                 	db	100
   379  0021C7  65                 	db	101
   380  0021C8  64                 	db	100
   381  0021C9  20                 	db	32
   382  0021CA  74                 	db	116
   383  0021CB  6F                 	db	111
   384  0021CC  20                 	db	32
   385  0021CD  72                 	db	114
   386  0021CE  65                 	db	101
   387  0021CF  73                 	db	115
   388  0021D0  65                 	db	101
   389  0021D1  74                 	db	116
   390  0021D2  20                 	db	32
   391  0021D3  70                 	db	112
   392  0021D4  6F                 	db	111
   393  0021D5  73                 	db	115
   394  0021D6  69                 	db	105
   395  0021D7  74                 	db	116
   396  0021D8  69                 	db	105
   397  0021D9  6F                 	db	111
   398  0021DA  6E                 	db	110
   399  0021DB  0A                 	db	10
   400  0021DC  00                 	db	0
   401                           
   402                           ;initializer for _errString_Fatal
   403  0021DD  46                 	db	70
   404  0021DE  61                 	db	97
   405  0021DF  74                 	db	116
   406  0021E0  61                 	db	97
   407  0021E1  6C                 	db	108
   408  0021E2  20                 	db	32
   409  0021E3  45                 	db	69
   410  0021E4  72                 	db	114
   411  0021E5  72                 	db	114
   412  0021E6  6F                 	db	111
   413  0021E7  72                 	db	114
   414  0021E8  2C                 	db	44
   415  0021E9  20                 	db	32
   416  0021EA  70                 	db	112
   417  0021EB  6C                 	db	108
   418  0021EC  65                 	db	101
   419  0021ED  61                 	db	97
   420  0021EE  73                 	db	115
   421  0021EF  65                 	db	101
   422  0021F0  20                 	db	32
   423  0021F1  72                 	db	114
   424  0021F2  65                 	db	101
   425  0021F3  73                 	db	115
   426  0021F4  65                 	db	101
   427  0021F5  74                 	db	116
   428  0021F6  20                 	db	32
   429  0021F7  74                 	db	116
   430  0021F8  68                 	db	104
   431  0021F9  65                 	db	101
   432  0021FA  20                 	db	32
   433  0021FB  64                 	db	100
   434  0021FC  65                 	db	101
   435  0021FD  76                 	db	118
   436  0021FE  69                 	db	105
   437  0021FF  63                 	db	99
   438  002200  65                 	db	101
   439  002201  21                 	db	33
   440  002202  0A                 	db	10
   441  002203  00                 	db	0
   442                           
   443                           ;initializer for _errString_Bound
   444  002204  45                 	db	69
   445  002205  72                 	db	114
   446  002206  72                 	db	114
   447  002207  6F                 	db	111
   448  002208  72                 	db	114
   449  002209  2C                 	db	44
   450  00220A  20                 	db	32
   451  00220B  70                 	db	112
   452  00220C  6F                 	db	111
   453  00220D  69                 	db	105
   454  00220E  6E                 	db	110
   455  00220F  74                 	db	116
   456  002210  20                 	db	32
   457  002211  6F                 	db	111
   458  002212  75                 	db	117
   459  002213  74                 	db	116
   460  002214  73                 	db	115
   461  002215  69                 	db	105
   462  002216  64                 	db	100
   463  002217  65                 	db	101
   464  002218  20                 	db	32
   465  002219  62                 	db	98
   466  00221A  6F                 	db	111
   467  00221B  75                 	db	117
   468  00221C  6E                 	db	110
   469  00221D  64                 	db	100
   470  00221E  61                 	db	97
   471  00221F  72                 	db	114
   472  002220  69                 	db	105
   473  002221  65                 	db	101
   474  002222  73                 	db	115
   475  002223  0A                 	db	10
   476  002224  00                 	db	0
   477                           
   478                           	psect	smallconst
   479  000600                     __psmallconst:
   480                           	callstack 0
   481  000600  00                 	db	0
   482  000601  0000               	dw	0
   483  000603  4000               	dw	16384
   484  000605                     __end_ofrotateObj@stepAngle:
   485                           	callstack 0
   486  000605  0065               	dw	101
   487  000607                     __end_of_maxY:
   488                           	callstack 0
   489  000607  0065               	dw	101
   490  000609                     __end_of_maxX:
   491                           	callstack 0
   492  000609  0400               	dw	1024
   493  00060B                     __end_of_therm_pressure:
   494                           	callstack 0
   495  00060B  0200               	dw	512
   496  00060D                     __end_of_touch_pressure:
   497                           	callstack 0
   498  00060D                     _feeder3Pos:
   499                           	callstack 0
   500  00060D  0F                 	db	15
   501  00060E  50                 	db	80
   502  00060F                     __end_of_feeder3Pos:
   503                           	callstack 0
   504  00060F                     _feeder2Pos:
   505                           	callstack 0
   506  00060F  0F                 	db	15
   507  000610  32                 	db	50
   508  000611                     __end_of_feeder2Pos:
   509                           	callstack 0
   510  000611                     _feeder1Pos:
   511                           	callstack 0
   512  000611  0F                 	db	15
   513  000612  14                 	db	20
   514  000613                     __end_of_feeder1Pos:
   515                           	callstack 0
   516  000613  64                 	db	100
   517  000614                     __end_of_maxFeedY:
   518                           	callstack 0
   519  000614  1E                 	db	30
   520  000615                     __end_of_maxFeedX:
   521                           	callstack 0
   522  0000                     _TMR0	set	4054
   523  0000                     _T1CONbits	set	4045
   524  0000                     _TXREG	set	4013
   525  0000                     _SPBRG	set	4015
   526  0000                     _RCSTAbits	set	4011
   527  0000                     _TXSTAbits	set	4012
   528  0000                     _TRISCbits	set	3988
   529  0000                     _RCREG1	set	4014
   530  0000                     _ADRESH	set	4036
   531  0000                     _ADRESL	set	4035
   532  0000                     _PIR1bits	set	3998
   533  0000                     _RCONbits	set	4048
   534  0000                     _INTCONbits	set	4082
   535  0000                     _IPR1bits	set	3999
   536  0000                     _PIE1bits	set	3997
   537  0000                     _ADCON0bits	set	4034
   538  0000                     _RCSTA1bits	set	4011
   539  0000                     _LATD	set	3980
   540  0000                     _PORTDbits	set	3971
   541  0000                     _TMR2	set	4044
   542  0000                     _LATC	set	3979
   543  0000                     _LATB	set	3978
   544  0000                     _LATA	set	3977
   545  0000                     _PORTEbits	set	3972
   546  0000                     _T0CONbits	set	4053
   547  0000                     _T2CONbits	set	4042
   548  0000                     _LATDbits	set	3980
   549  0000                     _LATCbits	set	3979
   550  0000                     _LATBbits	set	3978
   551  0000                     _LATAbits	set	3977
   552  0000                     _TRISDbits	set	3989
   553  0000                     _TRISEbits	set	3990
   554  0000                     _TRISD	set	3989
   555  0000                     _TRISC	set	3988
   556  0000                     _TRISB	set	3987
   557  0000                     _TRISA	set	3986
   558  0000                     _ADCON1bits	set	4033
   559  000615  00                 	db	0	; dummy byte at the end
   560  0000                     
   561                           ; #config settings
   562                           
   563                           	psect	cinit
   564  0022E4                     __pcinit:
   565                           	callstack 0
   566  0022E4                     start_initialization:
   567                           	callstack 0
   568  0022E4                     __initialization:
   569                           	callstack 0
   570                           
   571                           ; Initialize objects allocated to BANK1 (247 bytes)
   572                           ; load TBLPTR registers with __pidataBANK1
   573  0022E4  0E2E               	movlw	low __pidataBANK1
   574  0022E6  6EF6               	movwf	tblptrl,c
   575  0022E8  0E21               	movlw	high __pidataBANK1
   576  0022EA  6EF7               	movwf	tblptrh,c
   577  0022EC  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   578  0022EE  6EF8               	movwf	tblptru,c
   579  0022F0  EE01  F000         	lfsr	0,__pdataBANK1
   580  0022F4  EE10 F0F7          	lfsr	1,247
   581  0022F8                     copy_data0:
   582  0022F8  0009               	tblrd		*+
   583  0022FA  CFF5 FFEE          	movff	tablat,postinc0
   584  0022FE  50E5               	movf	postdec1,w,c
   585  002300  50E1               	movf	fsr1l,w,c
   586  002302  E1FA               	bnz	copy_data0
   587                           
   588                           ; Initialize objects allocated to BANK0 (70 bytes)
   589                           ; load TBLPTR registers with __pidataBANK0
   590  002304  0E66               	movlw	low __pidataBANK0
   591  002306  6EF6               	movwf	tblptrl,c
   592  002308  0E24               	movlw	high __pidataBANK0
   593  00230A  6EF7               	movwf	tblptrh,c
   594  00230C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   595  00230E  6EF8               	movwf	tblptru,c
   596  002310  EE00  F080         	lfsr	0,__pdataBANK0
   597  002314  EE10 F046          	lfsr	1,70
   598  002318                     copy_data1:
   599  002318  0009               	tblrd		*+
   600  00231A  CFF5 FFEE          	movff	tablat,postinc0
   601  00231E  50E5               	movf	postdec1,w,c
   602  002320  50E1               	movf	fsr1l,w,c
   603  002322  E1FA               	bnz	copy_data1
   604                           
   605                           ; Initialize objects allocated to COMRAM (7 bytes)
   606                           ; load TBLPTR registers with __pidataCOMRAM
   607  002324  0E20               	movlw	low __pidataCOMRAM
   608  002326  6EF6               	movwf	tblptrl,c
   609  002328  0E27               	movlw	high __pidataCOMRAM
   610  00232A  6EF7               	movwf	tblptrh,c
   611  00232C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   612  00232E  6EF8               	movwf	tblptru,c
   613  002330  EE00  F067         	lfsr	0,__pdataCOMRAM
   614  002334  EE10 F007          	lfsr	1,7
   615  002338                     copy_data2:
   616  002338  0009               	tblrd		*+
   617  00233A  CFF5 FFEE          	movff	tablat,postinc0
   618  00233E  50E5               	movf	postdec1,w,c
   619  002340  50E1               	movf	fsr1l,w,c
   620  002342  E1FA               	bnz	copy_data2
   621                           
   622                           ; Clear objects allocated to BANK0 (28 bytes)
   623  002344  EE00  F0C6         	lfsr	0,__pbssBANK0
   624  002348  0E1C               	movlw	28
   625  00234A                     clear_0:
   626  00234A  6AEE               	clrf	postinc0,c
   627  00234C  06E8               	decf	wreg,f,c
   628  00234E  E1FD               	bnz	clear_0
   629                           
   630                           ; Clear objects allocated to COMRAM (36 bytes)
   631  002350  EE00  F043         	lfsr	0,__pbssCOMRAM
   632  002354  0E24               	movlw	36
   633  002356                     clear_1:
   634  002356  6AEE               	clrf	postinc0,c
   635  002358  06E8               	decf	wreg,f,c
   636  00235A  E1FD               	bnz	clear_1
   637  00235C                     end_of_initialization:
   638                           	callstack 0
   639  00235C                     __end_of__initialization:
   640                           	callstack 0
   641  00235C  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   642  00235E  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   643  002360  0E00               	movlw	low (__Lmediumconst shr (0+16))
   644  002362  6EF8               	movwf	tblptru,c
   645  002364  0100               	movlb	0
   646  002366  EFB3  F00C         	goto	_main	;jump to C main() function
   647                           
   648                           	psect	bssCOMRAM
   649  000043                     __pbssCOMRAM:
   650                           	callstack 0
   651  000043                     _receivedMex:
   652                           	callstack 0
   653  000043                     	ds	9
   654  00004C                     _posVector:
   655                           	callstack 0
   656  00004C                     	ds	3
   657  00004F                     _pwmPeriod:
   658                           	callstack 0
   659  00004F                     	ds	2
   660  000051                     _single_cycle:
   661                           	callstack 0
   662  000051                     	ds	2
   663  000053                     _ADC_res:
   664                           	callstack 0
   665  000053                     	ds	2
   666  000055                     _newFeeder:
   667                           	callstack 0
   668  000055                     	ds	2
   669  000057                     _rotAngle:
   670                           	callstack 0
   671  000057                     	ds	2
   672  000059                     _tm0Error:
   673                           	callstack 0
   674  000059                     	ds	2
   675  00005B                     _stepToggle:
   676                           	callstack 0
   677  00005B                     	ds	1
   678  00005C                     _pwmStep:
   679                           	callstack 0
   680  00005C                     	ds	1
   681  00005D                     _neverCheck:
   682                           	callstack 0
   683  00005D                     	ds	1
   684  00005E                     _counter:
   685                           	callstack 0
   686  00005E                     	ds	1
   687  00005F                     __newSequence:
   688                           	callstack 0
   689  00005F                     	ds	1
   690  000060                     __fatalError:
   691                           	callstack 0
   692  000060                     	ds	1
   693  000061                     _dataCounter:
   694                           	callstack 0
   695  000061                     	ds	1
   696  000062                     _completeStep:
   697                           	callstack 0
   698  000062                     	ds	1
   699  000063                     _tm0Count:
   700                           	callstack 0
   701  000063                     	ds	1
   702  000064                     _therm_rel:
   703                           	callstack 0
   704  000064                     	ds	1
   705  000065                     _touch_rel:
   706                           	callstack 0
   707  000065                     	ds	1
   708  000066                     _tm0Limit:
   709                           	callstack 0
   710  000066                     	ds	1
   711                           
   712                           	psect	dataCOMRAM
   713  000067                     __pdataCOMRAM:
   714                           	callstack 0
   715  000067                     _motCounter:
   716                           	callstack 0
   717  000067                     	ds	6
   718  00006D                     _mexLength:
   719                           	callstack 0
   720  00006D                     	ds	1
   721                           
   722                           	psect	bssBANK0
   723  0000C6                     __pbssBANK0:
   724                           	callstack 0
   725  0000C6                     _dataSequence:
   726                           	callstack 0
   727  0000C6                     	ds	20
   728  0000DA                     _newSequenceData:
   729                           	callstack 0
   730  0000DA                     	ds	8
   731                           
   732                           	psect	dataBANK0
   733  000080                     __pdataBANK0:
   734                           	callstack 0
   735  000080                     rotateObj@rotSequence:
   736                           	callstack 0
   737  000080                     	ds	4
   738  000084                     _stepMot3:
   739                           	callstack 0
   740  000084                     	ds	4
   741  000088                     _stepMot2:
   742                           	callstack 0
   743  000088                     	ds	4
   744  00008C                     _stepMot1:
   745                           	callstack 0
   746  00008C                     	ds	4
   747  000090                     _errString_Feed:
   748                           	callstack 0
   749  000090                     	ds	30
   750  0000AE                     _errString_Command:
   751                           	callstack 0
   752  0000AE                     	ds	24
   753                           
   754                           	psect	dataBANK1
   755  000100                     __pdataBANK1:
   756                           	callstack 0
   757  000100                     _errString_PointZ:
   758                           	callstack 0
   759  000100                     	ds	53
   760  000135                     _errString_Point:
   761                           	callstack 0
   762  000135                     	ds	41
   763  00015E                     _errString_ZEND:
   764                           	callstack 0
   765  00015E                     	ds	41
   766  000187                     _errString_Reset:
   767                           	callstack 0
   768  000187                     	ds	40
   769  0001AF                     _errString_Fatal:
   770                           	callstack 0
   771  0001AF                     	ds	39
   772  0001D6                     _errString_Bound:
   773                           	callstack 0
   774  0001D6                     	ds	33
   775                           
   776                           	psect	cstackBANK0
   777  0000E2                     __pcstackBANK0:
   778                           	callstack 0
   779  0000E2                     rotateObj@rotAngle:
   780                           	callstack 0
   781                           
   782                           ; 1 bytes @ 0x0
   783  0000E2                     	ds	1
   784  0000E3                     rotateObj@totStep:
   785                           	callstack 0
   786                           
   787                           ; 2 bytes @ 0x1
   788  0000E3                     	ds	2
   789  0000E5                     rotateObj@i:
   790                           	callstack 0
   791                           
   792                           ; 2 bytes @ 0x3
   793  0000E5                     	ds	2
   794  0000E7                     rotateObj@c:
   795                           	callstack 0
   796                           
   797                           ; 2 bytes @ 0x5
   798  0000E7                     	ds	2
   799  0000E9                     ??_executeData:
   800                           
   801                           ; 1 bytes @ 0x7
   802  0000E9                     	ds	2
   803  0000EB                     executeData@data:
   804                           	callstack 0
   805                           
   806                           ; 2 bytes @ 0x9
   807  0000EB                     	ds	2
   808  0000ED                     executeData@errCode:
   809                           	callstack 0
   810                           
   811                           ; 1 bytes @ 0xB
   812  0000ED                     	ds	1
   813  0000EE                     ??_main:
   814                           
   815                           ; 1 bytes @ 0xC
   816  0000EE                     	ds	2
   817  0000F0                     main@errCode:
   818                           	callstack 0
   819                           
   820                           ; 1 bytes @ 0xE
   821  0000F0                     	ds	1
   822  0000F1                     main@newData:
   823                           	callstack 0
   824                           
   825                           ; 2 bytes @ 0xF
   826  0000F1                     	ds	2
   827                           
   828                           	psect	cstackCOMRAM
   829  000001                     __pcstackCOMRAM:
   830                           	callstack 0
   831  000001                     ?_retPeriod:
   832                           	callstack 0
   833  000001                     i2uartTx@ptr:
   834                           	callstack 0
   835                           
   836                           ; 2 bytes @ 0x0
   837  000001                     	ds	2
   838  000003                     i2uartTx@length:
   839                           	callstack 0
   840                           
   841                           ; 1 bytes @ 0x2
   842  000003                     	ds	1
   843  000004                     i2uartTx@i:
   844                           	callstack 0
   845                           
   846                           ; 1 bytes @ 0x3
   847  000004                     	ds	1
   848  000005                     ??i2_printError:
   849                           
   850                           ; 1 bytes @ 0x4
   851  000005                     	ds	2
   852  000007                     i2printError@errCode:
   853                           	callstack 0
   854                           
   855                           ; 1 bytes @ 0x6
   856  000007                     	ds	1
   857  000008                     ??i2_storeData:
   858                           
   859                           ; 1 bytes @ 0x7
   860  000008                     	ds	2
   861  00000A                     i2storeData@data:
   862                           	callstack 0
   863                           
   864                           ; 1 bytes @ 0x9
   865  00000A                     	ds	1
   866  00000B                     ??_isr:
   867                           
   868                           ; 1 bytes @ 0xA
   869  00000B                     	ds	6
   870  000011                     isr@temp:
   871                           	callstack 0
   872                           
   873                           ; 1 bytes @ 0x10
   874  000011                     	ds	1
   875  000012                     ??_shiftData:
   876  000012                     ?_stepMade:
   877                           	callstack 0
   878  000012                     ?_stepCounter:
   879                           	callstack 0
   880  000012                     ?_returnTouch:
   881                           	callstack 0
   882  000012                     ?_returnTherm:
   883                           	callstack 0
   884  000012                     ?_getNewSequence:
   885                           	callstack 0
   886  000012                     ?_getData:
   887                           	callstack 0
   888  000012                     ?___xxtofl:
   889                           	callstack 0
   890  000012                     uartTx@ptr:
   891                           	callstack 0
   892  000012                     tim2Init@_pwmPeriod:
   893                           	callstack 0
   894  000012                     ___xxtofl@val:
   895                           	callstack 0
   896                           
   897                           ; 4 bytes @ 0x11
   898  000012                     	ds	2
   899  000014                     shiftData@i:
   900                           	callstack 0
   901  000014                     uartTx@length:
   902                           	callstack 0
   903  000014                     stepMade@temp:
   904                           	callstack 0
   905                           
   906                           ; 1 bytes @ 0x13
   907  000014                     	ds	1
   908  000015                     resetPosition@keepMovingX:
   909                           	callstack 0
   910  000015                     uartTx@i:
   911                           	callstack 0
   912  000015                     moveToPoint@x1:
   913                           	callstack 0
   914                           
   915                           ; 2 bytes @ 0x14
   916  000015                     	ds	1
   917  000016                     ??_printError:
   918  000016                     ??___xxtofl:
   919  000016                     resetPosition@keepMovingY:
   920                           	callstack 0
   921                           
   922                           ; 1 bytes @ 0x15
   923  000016                     	ds	1
   924  000017                     resetPosition@keepMovingZ:
   925                           	callstack 0
   926  000017                     moveToPoint@y1:
   927                           	callstack 0
   928                           
   929                           ; 2 bytes @ 0x16
   930  000017                     	ds	1
   931  000018                     printError@errCode:
   932                           	callstack 0
   933                           
   934                           ; 1 bytes @ 0x17
   935  000018                     	ds	1
   936  000019                     ??_storeData:
   937  000019                     moveToPoint@x2:
   938                           	callstack 0
   939                           
   940                           ; 2 bytes @ 0x18
   941  000019                     	ds	1
   942  00001A                     ___xxtofl@sign:
   943                           	callstack 0
   944                           
   945                           ; 1 bytes @ 0x19
   946  00001A                     	ds	1
   947  00001B                     storeData@data:
   948                           	callstack 0
   949  00001B                     ___xxtofl@exp:
   950                           	callstack 0
   951  00001B                     moveToPoint@y2:
   952                           	callstack 0
   953                           
   954                           ; 2 bytes @ 0x1A
   955  00001B                     	ds	1
   956  00001C                     ___xxtofl@arg:
   957                           	callstack 0
   958                           
   959                           ; 4 bytes @ 0x1B
   960  00001C                     	ds	1
   961  00001D                     ??_moveToPoint:
   962                           
   963                           ; 1 bytes @ 0x1C
   964  00001D                     	ds	2
   965  00001F                     moveToPoint@MOT1Direction:
   966                           	callstack 0
   967                           
   968                           ; 1 bytes @ 0x1E
   969  00001F                     	ds	1
   970  000020                     ?___fldiv:
   971                           	callstack 0
   972  000020                     moveToPoint@MOT2Direction:
   973                           	callstack 0
   974  000020                     ___fldiv@b:
   975                           	callstack 0
   976                           
   977                           ; 4 bytes @ 0x1F
   978  000020                     	ds	1
   979  000021                     moveToPoint@keepMovingX:
   980                           	callstack 0
   981                           
   982                           ; 1 bytes @ 0x20
   983  000021                     	ds	1
   984  000022                     moveToPoint@keepMovingY:
   985                           	callstack 0
   986                           
   987                           ; 1 bytes @ 0x21
   988  000022                     	ds	2
   989  000024                     ___fldiv@a:
   990                           	callstack 0
   991                           
   992                           ; 4 bytes @ 0x23
   993  000024                     	ds	4
   994  000028                     ??___fldiv:
   995                           
   996                           ; 1 bytes @ 0x27
   997  000028                     	ds	4
   998  00002C                     ___fldiv@rem:
   999                           	callstack 0
  1000                           
  1001                           ; 4 bytes @ 0x2B
  1002  00002C                     	ds	4
  1003  000030                     ___fldiv@sign:
  1004                           	callstack 0
  1005                           
  1006                           ; 1 bytes @ 0x2F
  1007  000030                     	ds	1
  1008  000031                     ___fldiv@new_exp:
  1009                           	callstack 0
  1010                           
  1011                           ; 2 bytes @ 0x30
  1012  000031                     	ds	2
  1013  000033                     ___fldiv@grs:
  1014                           	callstack 0
  1015                           
  1016                           ; 4 bytes @ 0x32
  1017  000033                     	ds	4
  1018  000037                     ___fldiv@bexp:
  1019                           	callstack 0
  1020                           
  1021                           ; 1 bytes @ 0x36
  1022  000037                     	ds	1
  1023  000038                     ___fldiv@aexp:
  1024                           	callstack 0
  1025                           
  1026                           ; 1 bytes @ 0x37
  1027  000038                     	ds	1
  1028  000039                     ?___fltol:
  1029                           	callstack 0
  1030  000039                     ___fltol@f1:
  1031                           	callstack 0
  1032                           
  1033                           ; 4 bytes @ 0x38
  1034  000039                     	ds	4
  1035  00003D                     ??___fltol:
  1036                           
  1037                           ; 1 bytes @ 0x3C
  1038  00003D                     	ds	4
  1039  000041                     ___fltol@sign1:
  1040                           	callstack 0
  1041                           
  1042                           ; 1 bytes @ 0x40
  1043  000041                     	ds	1
  1044  000042                     ___fltol@exp1:
  1045                           	callstack 0
  1046                           
  1047                           ; 1 bytes @ 0x41
  1048  000042                     	ds	1
  1049  000043                     
  1050                           ; 1 bytes @ 0x42
  1051 ;;
  1052 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1053 ;;
  1054 ;; *************** function _main *****************
  1055 ;; Defined at:
  1056 ;;		line 18 in file "main.c"
  1057 ;; Parameters:    Size  Location     Type
  1058 ;;		None
  1059 ;; Auto vars:     Size  Location     Type
  1060 ;;  newData         2   15[BANK0 ] PTR struct .
  1061 ;;		 -> newSequenceData(8), 
  1062 ;;  errCode         1   14[BANK0 ] unsigned char 
  1063 ;; Return value:  Size  Location     Type
  1064 ;;                  1    wreg      void 
  1065 ;; Registers used:
  1066 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1067 ;; Tracked objects:
  1068 ;;		On entry : 0/0
  1069 ;;		On exit  : 0/0
  1070 ;;		Unchanged: 0/0
  1071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1072 ;;      Params:         0       0       0       0       0       0       0
  1073 ;;      Locals:         0       3       0       0       0       0       0
  1074 ;;      Temps:          0       2       0       0       0       0       0
  1075 ;;      Totals:         0       5       0       0       0       0       0
  1076 ;;Total ram usage:        5 bytes
  1077 ;; Hardware stack levels required when called:    7
  1078 ;; This function calls:
  1079 ;;		_clearTM0
  1080 ;;		_executeData
  1081 ;;		_getNewSequence
  1082 ;;		_increaseSeq
  1083 ;;		_initADC
  1084 ;;		_initPinMotors
  1085 ;;		_interruptInit
  1086 ;;		_newSequence
  1087 ;;		_printError
  1088 ;;		_readSeq
  1089 ;;		_reduceSeq
  1090 ;;		_resetNewSequence
  1091 ;;		_resetPosition
  1092 ;;		_shiftData
  1093 ;;		_storeData
  1094 ;;		_tim0Init
  1095 ;;		_tim1Init
  1096 ;;		_tim2Init
  1097 ;;		_usartInit
  1098 ;; This function is called by:
  1099 ;;		Startup code after reset
  1100 ;; This function uses a non-reentrant model
  1101 ;;
  1102                           
  1103                           	psect	text0
  1104  001966                     __ptext0:
  1105                           	callstack 0
  1106  001966                     _main:
  1107                           	callstack 24
  1108  001966  FFFF               	dw	65535	; assembler added errata NOP
  1109                           
  1110                           ;main.c: 22:     interruptInit();
  1111  001968  EC56  F012         	call	_interruptInit	;wreg free
  1112  00196C                     
  1113                           ;main.c: 23:     initPinMotors();
  1114  00196C  ECA4  F012         	call	_initPinMotors	;wreg free
  1115  001970                     
  1116                           ;main.c: 24:     initADC();
  1117  001970  ECB7  F012         	call	_initADC	;wreg free
  1118  001974                     
  1119                           ;main.c: 25:     usartInit();
  1120  001974  ECCA  F012         	call	_usartInit	;wreg free
  1121  001978                     
  1122                           ;main.c: 26:     tim0Init();
  1123  001978  ECEC  F012         	call	_tim0Init	;wreg free
  1124  00197C                     
  1125                           ;main.c: 27:     tim1Init();
  1126  00197C  EC07  F013         	call	_tim1Init	;wreg free
  1127  001980                     
  1128                           ;main.c: 28:     tim2Init(10);
  1129  001980  0E00               	movlw	0
  1130  001982  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1131  001984  0E0A               	movlw	10
  1132  001986  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1133  001988  ECE3  F012         	call	_tim2Init	;wreg free
  1134  00198C                     
  1135                           ;main.c: 31:     errCode = resetPosition();
  1136  00198C  ECC1  F00B         	call	_resetPosition	;wreg free
  1137  001990  0100               	movlb	0	; () banked
  1138  001992  6FF0               	movwf	main@errCode& (0+255),b
  1139  001994                     
  1140                           ; BSR set to: 0
  1141                           ;main.c: 32:     if(errCode != 0){
  1142  001994  51F0               	movf	main@errCode& (0+255),w,b
  1143  001996  B4D8               	btfsc	status,2,c
  1144  001998  EFD0  F00C         	goto	u4131
  1145  00199C  EFD3  F00C         	goto	u4130
  1146  0019A0                     u4131:
  1147  0019A0  FFFF               	dw	65535	; assembler added errata NOP
  1148  0019A2  EFDA  F00C         	goto	l327
  1149  0019A6                     u4130:
  1150  0019A6  FFFF               	dw	65535	; assembler added errata NOP
  1151  0019A8                     
  1152                           ; BSR set to: 0
  1153                           ;main.c: 33:         printError(errCode);
  1154  0019A8  51F0               	movf	main@errCode& (0+255),w,b
  1155  0019AA  ECEC  F00D         	call	_printError
  1156  0019AE                     l328:
  1157  0019AE  FFFF               	dw	65535	; assembler added errata NOP
  1158  0019B0  EFD7  F00C         	goto	l328
  1159  0019B4                     l327:
  1160  0019B4  FFFF               	dw	65535	; assembler added errata NOP
  1161                           
  1162                           ; BSR set to: 0
  1163                           ;main.c: 38:     RCSTA1bits.CREN = 1;
  1164  0019B6  88AB               	bsf	171,4,c	;volatile
  1165  0019B8                     l4668:
  1166  0019B8  FFFF               	dw	65535	; assembler added errata NOP
  1167                           
  1168                           ;main.c: 41:         if(newSequence()){
  1169  0019BA  EC78  F013         	call	_newSequence	;wreg free
  1170  0019BE  0900               	iorlw	0
  1171  0019C0  B4D8               	btfsc	status,2,c
  1172  0019C2  EFE5  F00C         	goto	u4141
  1173  0019C6  EFE8  F00C         	goto	u4140
  1174  0019CA                     u4141:
  1175  0019CA  FFFF               	dw	65535	; assembler added errata NOP
  1176  0019CC  EF33  F00D         	goto	l4690
  1177  0019D0                     u4140:
  1178  0019D0  FFFF               	dw	65535	; assembler added errata NOP
  1179  0019D2                     
  1180                           ;main.c: 42:             t_newSequence* newData = getNewSequence();
  1181  0019D2  EC0E  F013         	call	_getNewSequence	;wreg free
  1182  0019D6  C012  F0F1         	movff	?_getNewSequence,main@newData
  1183  0019DA  C013  F0F2         	movff	?_getNewSequence+1,main@newData+1
  1184  0019DE                     
  1185                           ;main.c: 44:             newFeeder[0] = newData ->init_posX;
  1186  0019DE  0100               	movlb	0	; () banked
  1187  0019E0  EE20 F002          	lfsr	2,2
  1188  0019E4  51F1               	movf	main@newData& (0+255),w,b
  1189  0019E6  26D9               	addwf	fsr2l,f,c
  1190  0019E8  51F2               	movf	(main@newData+1)& (0+255),w,b
  1191  0019EA  22DA               	addwfc	fsr2h,f,c
  1192  0019EC  50DF               	movf	indf2,w,c
  1193  0019EE  6E55               	movwf	_newFeeder^0,c
  1194  0019F0                     
  1195                           ; BSR set to: 0
  1196                           ;main.c: 45:             newFeeder[1] = newData ->init_posY;
  1197  0019F0  EE20 F003          	lfsr	2,3
  1198  0019F4  51F1               	movf	main@newData& (0+255),w,b
  1199  0019F6  26D9               	addwf	fsr2l,f,c
  1200  0019F8  51F2               	movf	(main@newData+1)& (0+255),w,b
  1201  0019FA  22DA               	addwfc	fsr2h,f,c
  1202  0019FC  50DF               	movf	indf2,w,c
  1203  0019FE  6E56               	movwf	(_newFeeder+1)^0,c
  1204  001A00                     
  1205                           ; BSR set to: 0
  1206                           ;main.c: 48:             storeData(1);
  1207  001A00  0E01               	movlw	1
  1208  001A02  EC41  F008         	call	_storeData
  1209  001A06                     
  1210                           ;main.c: 49:             storeData(0xFF);
  1211  001A06  0EFF               	movlw	255
  1212  001A08  EC41  F008         	call	_storeData
  1213  001A0C                     
  1214                           ;main.c: 50:             storeData(newData ->end_posX);
  1215  001A0C  0100               	movlb	0	; () banked
  1216  001A0E  EE20 F005          	lfsr	2,5
  1217  001A12  51F1               	movf	main@newData& (0+255),w,b
  1218  001A14  26D9               	addwf	fsr2l,f,c
  1219  001A16  51F2               	movf	(main@newData+1)& (0+255),w,b
  1220  001A18  22DA               	addwfc	fsr2h,f,c
  1221  001A1A  50DF               	movf	indf2,w,c
  1222  001A1C  EC41  F008         	call	_storeData
  1223  001A20                     
  1224                           ;main.c: 51:             storeData(newData ->end_posY);
  1225  001A20  0100               	movlb	0	; () banked
  1226  001A22  EE20 F006          	lfsr	2,6
  1227  001A26  51F1               	movf	main@newData& (0+255),w,b
  1228  001A28  26D9               	addwf	fsr2l,f,c
  1229  001A2A  51F2               	movf	(main@newData+1)& (0+255),w,b
  1230  001A2C  22DA               	addwfc	fsr2h,f,c
  1231  001A2E  50DF               	movf	indf2,w,c
  1232  001A30  EC41  F008         	call	_storeData
  1233  001A34                     
  1234                           ;main.c: 52:             storeData(newData ->end_rot - newData ->init_rot);
  1235  001A34  0100               	movlb	0	; () banked
  1236  001A36  EE20 F004          	lfsr	2,4
  1237  001A3A  51F1               	movf	main@newData& (0+255),w,b
  1238  001A3C  26D9               	addwf	fsr2l,f,c
  1239  001A3E  51F2               	movf	(main@newData+1)& (0+255),w,b
  1240  001A40  22DA               	addwfc	fsr2h,f,c
  1241  001A42  50DF               	movf	indf2,w,c
  1242  001A44  6FEE               	movwf	??_main& (0+255),b
  1243  001A46  EE20 F007          	lfsr	2,7
  1244  001A4A  51F1               	movf	main@newData& (0+255),w,b
  1245  001A4C  26D9               	addwf	fsr2l,f,c
  1246  001A4E  51F2               	movf	(main@newData+1)& (0+255),w,b
  1247  001A50  22DA               	addwfc	fsr2h,f,c
  1248  001A52  50DF               	movf	indf2,w,c
  1249  001A54  6FEF               	movwf	(??_main+1)& (0+255),b
  1250  001A56  51EE               	movf	??_main& (0+255),w,b
  1251  001A58  5DEF               	subwf	(??_main+1)& (0+255),w,b
  1252  001A5A  EC41  F008         	call	_storeData
  1253  001A5E                     
  1254                           ;main.c: 55:             resetNewSequence();
  1255  001A5E  EC43  F013         	call	_resetNewSequence	;wreg free
  1256  001A62                     
  1257                           ;main.c: 56:             increaseSeq();
  1258  001A62  EC7C  F013         	call	_increaseSeq	;wreg free
  1259  001A66                     l4690:
  1260  001A66  FFFF               	dw	65535	; assembler added errata NOP
  1261                           
  1262                           ;main.c: 58:         if(readSeq()){
  1263  001A68  EC74  F013         	call	_readSeq	;wreg free
  1264  001A6C  0900               	iorlw	0
  1265  001A6E  B4D8               	btfsc	status,2,c
  1266  001A70  EF3C  F00D         	goto	u4151
  1267  001A74  EF3F  F00D         	goto	u4150
  1268  001A78                     u4151:
  1269  001A78  FFFF               	dw	65535	; assembler added errata NOP
  1270  001A7A  EFDC  F00C         	goto	l4668
  1271  001A7E                     u4150:
  1272  001A7E  FFFF               	dw	65535	; assembler added errata NOP
  1273  001A80                     
  1274                           ;main.c: 62:             errCode = executeData();
  1275  001A80  ECC6  F006         	call	_executeData	;wreg free
  1276  001A84  0100               	movlb	0	; () banked
  1277  001A86  6FF0               	movwf	main@errCode& (0+255),b
  1278  001A88                     
  1279                           ; BSR set to: 0
  1280                           ;main.c: 64:             printError(errCode);
  1281  001A88  51F0               	movf	main@errCode& (0+255),w,b
  1282  001A8A  ECEC  F00D         	call	_printError
  1283  001A8E                     
  1284                           ;main.c: 67:             clearTM0();
  1285  001A8E  EC1C  F013         	call	_clearTM0	;wreg free
  1286  001A92                     
  1287                           ;main.c: 71:             reduceSeq();
  1288  001A92  EC70  F013         	call	_reduceSeq	;wreg free
  1289  001A96                     
  1290                           ;main.c: 72:             shiftData();
  1291  001A96  ECB5  F011         	call	_shiftData	;wreg free
  1292  001A9A  EFDC  F00C         	goto	l4668
  1293  001A9E  EFD2  F000         	goto	start
  1294  001AA2                     __end_of_main:
  1295                           	callstack 0
  1296                           
  1297 ;; *************** function _usartInit *****************
  1298 ;; Defined at:
  1299 ;;		line 111 in file "usart.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;		None
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;		None
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  1    wreg      void 
  1306 ;; Registers used:
  1307 ;;		wreg, status,2
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1313 ;;      Params:         0       0       0       0       0       0       0
  1314 ;;      Locals:         0       0       0       0       0       0       0
  1315 ;;      Temps:          0       0       0       0       0       0       0
  1316 ;;      Totals:         0       0       0       0       0       0       0
  1317 ;;Total ram usage:        0 bytes
  1318 ;; Hardware stack levels used:    1
  1319 ;; Hardware stack levels required when called:    4
  1320 ;; This function calls:
  1321 ;;		Nothing
  1322 ;; This function is called by:
  1323 ;;		_main
  1324 ;; This function uses a non-reentrant model
  1325 ;;
  1326                           
  1327                           	psect	text1
  1328  002594                     __ptext1:
  1329                           	callstack 0
  1330  002594                     _usartInit:
  1331                           	callstack 0
  1332  002594  FFFF               	dw	65535	; assembler added errata NOP
  1333  002596                     
  1334                           ;usart.c: 113:     TRISCbits.TRISC6 = 0;
  1335  002596  9C94               	bcf	148,6,c	;volatile
  1336                           
  1337                           ;usart.c: 114:     TRISCbits.TRISC7 = 1;
  1338  002598  8E94               	bsf	148,7,c	;volatile
  1339                           
  1340                           ;usart.c: 116:     TXSTAbits.TX9 = 0;
  1341  00259A  9CAC               	bcf	172,6,c	;volatile
  1342                           
  1343                           ;usart.c: 117:     TXSTAbits.TXEN = 1;
  1344  00259C  8AAC               	bsf	172,5,c	;volatile
  1345                           
  1346                           ;usart.c: 118:     TXSTAbits.SYNC = 0;
  1347  00259E  98AC               	bcf	172,4,c	;volatile
  1348                           
  1349                           ;usart.c: 119:     TXSTAbits.BRGH = 0;
  1350  0025A0  94AC               	bcf	172,2,c	;volatile
  1351                           
  1352                           ;usart.c: 121:     RCSTAbits.SPEN = 1;
  1353  0025A2  8EAB               	bsf	171,7,c	;volatile
  1354                           
  1355                           ;usart.c: 122:     RCSTAbits.RX9 = 0;
  1356  0025A4  9CAB               	bcf	171,6,c	;volatile
  1357                           
  1358                           ;usart.c: 123:     RCSTAbits.CREN = 0;
  1359  0025A6  98AB               	bcf	171,4,c	;volatile
  1360                           
  1361                           ;usart.c: 124:     RCSTAbits.ADDEN = 0;
  1362  0025A8  96AB               	bcf	171,3,c	;volatile
  1363  0025AA                     
  1364                           ;usart.c: 127:     SPBRG = 25;
  1365  0025AA  0E19               	movlw	25
  1366  0025AC  6EAF               	movwf	175,c	;volatile
  1367  0025AE  0012               	return		;funcret
  1368  0025B0  FFFF               	dw	65535	; errata NOP
  1369  0025B2                     __end_of_usartInit:
  1370                           	callstack 0
  1371                           
  1372 ;; *************** function _tim2Init *****************
  1373 ;; Defined at:
  1374 ;;		line 46 in file "timer.c"
  1375 ;; Parameters:    Size  Location     Type
  1376 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1377 ;; Auto vars:     Size  Location     Type
  1378 ;;		None
  1379 ;; Return value:  Size  Location     Type
  1380 ;;                  1    wreg      void 
  1381 ;; Registers used:
  1382 ;;		None
  1383 ;; Tracked objects:
  1384 ;;		On entry : 0/0
  1385 ;;		On exit  : 0/0
  1386 ;;		Unchanged: 0/0
  1387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1388 ;;      Params:         2       0       0       0       0       0       0
  1389 ;;      Locals:         0       0       0       0       0       0       0
  1390 ;;      Temps:          0       0       0       0       0       0       0
  1391 ;;      Totals:         2       0       0       0       0       0       0
  1392 ;;Total ram usage:        2 bytes
  1393 ;; Hardware stack levels used:    1
  1394 ;; Hardware stack levels required when called:    4
  1395 ;; This function calls:
  1396 ;;		Nothing
  1397 ;; This function is called by:
  1398 ;;		_main
  1399 ;; This function uses a non-reentrant model
  1400 ;;
  1401                           
  1402                           	psect	text2
  1403  0025C6                     __ptext2:
  1404                           	callstack 0
  1405  0025C6                     _tim2Init:
  1406                           	callstack 0
  1407  0025C6  FFFF               	dw	65535	; assembler added errata NOP
  1408  0025C8                     
  1409                           ;timer.c: 47:     T2CONbits.TMR2ON = 0;
  1410  0025C8  94CA               	bcf	202,2,c	;volatile
  1411                           
  1412                           ;timer.c: 48:     T2CONbits.T2CKPS1 = 1;
  1413  0025CA  82CA               	bsf	202,1,c	;volatile
  1414                           
  1415                           ;timer.c: 52:     pwmPeriod = _pwmPeriod;
  1416  0025CC  C012  F04F         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1417  0025D0  C013  F050         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1418  0025D4  0012               	return		;funcret
  1419  0025D6  FFFF               	dw	65535	; errata NOP
  1420  0025D8                     __end_of_tim2Init:
  1421                           	callstack 0
  1422                           
  1423 ;; *************** function _tim1Init *****************
  1424 ;; Defined at:
  1425 ;;		line 33 in file "timer.c"
  1426 ;; Parameters:    Size  Location     Type
  1427 ;;		None
  1428 ;; Auto vars:     Size  Location     Type
  1429 ;;		None
  1430 ;; Return value:  Size  Location     Type
  1431 ;;                  1    wreg      void 
  1432 ;; Registers used:
  1433 ;;		wreg, status,2
  1434 ;; Tracked objects:
  1435 ;;		On entry : 0/0
  1436 ;;		On exit  : 0/0
  1437 ;;		Unchanged: 0/0
  1438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1439 ;;      Params:         0       0       0       0       0       0       0
  1440 ;;      Locals:         0       0       0       0       0       0       0
  1441 ;;      Temps:          0       0       0       0       0       0       0
  1442 ;;      Totals:         0       0       0       0       0       0       0
  1443 ;;Total ram usage:        0 bytes
  1444 ;; Hardware stack levels used:    1
  1445 ;; Hardware stack levels required when called:    4
  1446 ;; This function calls:
  1447 ;;		Nothing
  1448 ;; This function is called by:
  1449 ;;		_main
  1450 ;; This function uses a non-reentrant model
  1451 ;;
  1452                           
  1453                           	psect	text3
  1454  00260E                     __ptext3:
  1455                           	callstack 0
  1456  00260E                     _tim1Init:
  1457                           	callstack 0
  1458  00260E  FFFF               	dw	65535	; assembler added errata NOP
  1459  002610                     
  1460                           ;timer.c: 34:     T1CONbits.T1CKPS = 0x03;
  1461  002610  0E30               	movlw	48
  1462  002612  12CD               	iorwf	205,f,c	;volatile
  1463  002614                     
  1464                           ;timer.c: 35:     T1CONbits.TMR1CS = 0;
  1465  002614  92CD               	bcf	205,1,c	;volatile
  1466  002616                     
  1467                           ;timer.c: 37:     T1CONbits.TMR1ON = 1;
  1468  002616  80CD               	bsf	205,0,c	;volatile
  1469  002618  0012               	return		;funcret
  1470  00261A  FFFF               	dw	65535	; errata NOP
  1471  00261C                     __end_of_tim1Init:
  1472                           	callstack 0
  1473                           
  1474 ;; *************** function _tim0Init *****************
  1475 ;; Defined at:
  1476 ;;		line 21 in file "timer.c"
  1477 ;; Parameters:    Size  Location     Type
  1478 ;;		None
  1479 ;; Auto vars:     Size  Location     Type
  1480 ;;		None
  1481 ;; Return value:  Size  Location     Type
  1482 ;;                  1    wreg      void 
  1483 ;; Registers used:
  1484 ;;		wreg, status,2
  1485 ;; Tracked objects:
  1486 ;;		On entry : 0/0
  1487 ;;		On exit  : 0/0
  1488 ;;		Unchanged: 0/0
  1489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1490 ;;      Params:         0       0       0       0       0       0       0
  1491 ;;      Locals:         0       0       0       0       0       0       0
  1492 ;;      Temps:          0       0       0       0       0       0       0
  1493 ;;      Totals:         0       0       0       0       0       0       0
  1494 ;;Total ram usage:        0 bytes
  1495 ;; Hardware stack levels used:    1
  1496 ;; Hardware stack levels required when called:    4
  1497 ;; This function calls:
  1498 ;;		Nothing
  1499 ;; This function is called by:
  1500 ;;		_main
  1501 ;; This function uses a non-reentrant model
  1502 ;;
  1503                           
  1504                           	psect	text4
  1505  0025D8                     __ptext4:
  1506                           	callstack 0
  1507  0025D8                     _tim0Init:
  1508                           	callstack 0
  1509  0025D8  FFFF               	dw	65535	; assembler added errata NOP
  1510  0025DA                     
  1511                           ;timer.c: 22:     T0CONbits.TMR0ON = 0;
  1512  0025DA  9ED5               	bcf	213,7,c	;volatile
  1513                           
  1514                           ;timer.c: 23:     T0CONbits.T08BIT = 0;
  1515  0025DC  9CD5               	bcf	213,6,c	;volatile
  1516                           
  1517                           ;timer.c: 24:     T0CONbits.T0CS = 0;
  1518  0025DE  9AD5               	bcf	213,5,c	;volatile
  1519                           
  1520                           ;timer.c: 25:     T0CONbits.PSA = 1;
  1521  0025E0  86D5               	bsf	213,3,c	;volatile
  1522  0025E2                     
  1523                           ;timer.c: 26:     T0CONbits.T0PS = 0x07;
  1524  0025E2  0E07               	movlw	7
  1525  0025E4  12D5               	iorwf	213,f,c	;volatile
  1526  0025E6  0012               	return		;funcret
  1527  0025E8  FFFF               	dw	65535	; errata NOP
  1528  0025EA                     __end_of_tim0Init:
  1529                           	callstack 0
  1530                           
  1531 ;; *************** function _storeData *****************
  1532 ;; Defined at:
  1533 ;;		line 183 in file "usart.c"
  1534 ;; Parameters:    Size  Location     Type
  1535 ;;  data            1    wreg     unsigned char 
  1536 ;; Auto vars:     Size  Location     Type
  1537 ;;  data            1   26[COMRAM] unsigned char 
  1538 ;; Return value:  Size  Location     Type
  1539 ;;                  1    wreg      void 
  1540 ;; Registers used:
  1541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1542 ;; Tracked objects:
  1543 ;;		On entry : 0/0
  1544 ;;		On exit  : 0/0
  1545 ;;		Unchanged: 0/0
  1546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1547 ;;      Params:         0       0       0       0       0       0       0
  1548 ;;      Locals:         1       0       0       0       0       0       0
  1549 ;;      Temps:          2       0       0       0       0       0       0
  1550 ;;      Totals:         3       0       0       0       0       0       0
  1551 ;;Total ram usage:        3 bytes
  1552 ;; Hardware stack levels used:    1
  1553 ;; Hardware stack levels required when called:    6
  1554 ;; This function calls:
  1555 ;;		_printError
  1556 ;; This function is called by:
  1557 ;;		_main
  1558 ;; This function uses a non-reentrant model
  1559 ;;
  1560                           
  1561                           	psect	text5
  1562  001082                     __ptext5:
  1563                           	callstack 0
  1564  001082                     _storeData:
  1565                           	callstack 0
  1566  001082  FFFF               	dw	65535	; assembler added errata NOP
  1567                           
  1568                           ;incstack = 0
  1569                           ;storeData@data stored from wreg
  1570  001084  6E1B               	movwf	storeData@data^0,c
  1571  001086                     
  1572                           ;usart.c: 189:     receivedMex[counter] = data;
  1573  001086  0E43               	movlw	low _receivedMex
  1574  001088  245E               	addwf	_counter^0,w,c
  1575  00108A  6ED9               	movwf	fsr2l,c
  1576  00108C  6ADA               	clrf	fsr2h,c
  1577  00108E  0E00               	movlw	high _receivedMex
  1578  001090  22DA               	addwfc	fsr2h,f,c
  1579  001092  C01B  FFDF         	movff	storeData@data,indf2
  1580  001096                     
  1581                           ;usart.c: 191:     counter++;
  1582  001096  2A5E               	incf	_counter^0,f,c
  1583                           
  1584                           ;usart.c: 194:     switch(receivedMex[0]){
  1585  001098  EF68  F008         	goto	l4472
  1586  00109C                     l4462:
  1587  00109C  FFFF               	dw	65535	; assembler added errata NOP
  1588                           
  1589                           ;usart.c: 196:             mexLength = 5;
  1590  00109E  0E05               	movlw	5
  1591  0010A0  6E6D               	movwf	_mexLength^0,c
  1592                           
  1593                           ;usart.c: 197:             neverCheck = 0;
  1594  0010A2  0E00               	movlw	0
  1595  0010A4  6E5D               	movwf	_neverCheck^0,c
  1596                           
  1597                           ;usart.c: 198:             break;
  1598  0010A6  EF83  F008         	goto	l4474
  1599  0010AA                     l4464:
  1600  0010AA  FFFF               	dw	65535	; assembler added errata NOP
  1601                           
  1602                           ;usart.c: 200:             mexLength = 9;
  1603  0010AC  0E09               	movlw	9
  1604  0010AE  6E6D               	movwf	_mexLength^0,c
  1605                           
  1606                           ;usart.c: 201:             neverCheck = 0;
  1607  0010B0  0E00               	movlw	0
  1608  0010B2  6E5D               	movwf	_neverCheck^0,c
  1609                           
  1610                           ;usart.c: 202:             break;
  1611  0010B4  EF83  F008         	goto	l4474
  1612  0010B8                     l4466:
  1613  0010B8  FFFF               	dw	65535	; assembler added errata NOP
  1614                           
  1615                           ;usart.c: 204:             mexLength = 1;
  1616  0010BA  0E01               	movlw	1
  1617  0010BC  6E6D               	movwf	_mexLength^0,c
  1618                           
  1619                           ;usart.c: 205:             neverCheck = 0;
  1620  0010BE  0E00               	movlw	0
  1621  0010C0  6E5D               	movwf	_neverCheck^0,c
  1622                           
  1623                           ;usart.c: 206:             break;
  1624  0010C2  EF83  F008         	goto	l4474
  1625  0010C6                     l4468:
  1626  0010C6  FFFF               	dw	65535	; assembler added errata NOP
  1627                           
  1628                           ;usart.c: 208:             neverCheck = 1;
  1629  0010C8  0E01               	movlw	1
  1630  0010CA  6E5D               	movwf	_neverCheck^0,c
  1631                           
  1632                           ;usart.c: 209:             break;
  1633  0010CC  EF83  F008         	goto	l4474
  1634  0010D0                     l4472:
  1635  0010D0  FFFF               	dw	65535	; assembler added errata NOP
  1636  0010D2  5043               	movf	_receivedMex^0,w,c
  1637  0010D4  6E19               	movwf	??_storeData^0,c
  1638  0010D6  6A1A               	clrf	(??_storeData+1)^0,c
  1639                           
  1640                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1641                           ; Switch size 1, requested type "simple"
  1642                           ; Number of cases is 1, Range of values is 0 to 0
  1643                           ; switch strategies available:
  1644                           ; Name         Instructions Cycles
  1645                           ; simple_byte            4     3 (average)
  1646                           ;	Chosen strategy is simple_byte
  1647  0010D8  501A               	movf	(??_storeData+1)^0,w,c
  1648  0010DA  0A00               	xorlw	0	; case 0
  1649  0010DC  B4D8               	btfsc	status,2,c
  1650  0010DE  EF73  F008         	goto	l4842
  1651  0010E2  EF63  F008         	goto	l4468
  1652  0010E6                     l4842:
  1653  0010E6  FFFF               	dw	65535	; assembler added errata NOP
  1654                           
  1655                           ; Switch size 1, requested type "simple"
  1656                           ; Number of cases is 3, Range of values is 1 to 3
  1657                           ; switch strategies available:
  1658                           ; Name         Instructions Cycles
  1659                           ; simple_byte           10     6 (average)
  1660                           ;	Chosen strategy is simple_byte
  1661  0010E8  5019               	movf	??_storeData^0,w,c
  1662  0010EA  0A01               	xorlw	1	; case 1
  1663  0010EC  B4D8               	btfsc	status,2,c
  1664  0010EE  EF4E  F008         	goto	l4462
  1665  0010F2  0A03               	xorlw	3	; case 2
  1666  0010F4  B4D8               	btfsc	status,2,c
  1667  0010F6  EF55  F008         	goto	l4464
  1668  0010FA  0A01               	xorlw	1	; case 3
  1669  0010FC  B4D8               	btfsc	status,2,c
  1670  0010FE  EF5C  F008         	goto	l4466
  1671  001102  EF63  F008         	goto	l4468
  1672  001106                     l4474:
  1673  001106  FFFF               	dw	65535	; assembler added errata NOP
  1674                           
  1675                           ;usart.c: 214:     if(counter == mexLength && !neverCheck){
  1676  001108  506D               	movf	_mexLength^0,w,c
  1677  00110A  185E               	xorwf	_counter^0,w,c
  1678  00110C  A4D8               	btfss	status,2,c
  1679  00110E  EF8B  F008         	goto	u3971
  1680  001112  EF8E  F008         	goto	u3970
  1681  001116                     u3971:
  1682  001116  FFFF               	dw	65535	; assembler added errata NOP
  1683  001118  EF80  F009         	goto	l601
  1684  00111C                     u3970:
  1685  00111C  FFFF               	dw	65535	; assembler added errata NOP
  1686  00111E  505D               	movf	_neverCheck^0,w,c
  1687  001120  A4D8               	btfss	status,2,c
  1688  001122  EF95  F008         	goto	u3981
  1689  001126  EF98  F008         	goto	u3980
  1690  00112A                     u3981:
  1691  00112A  FFFF               	dw	65535	; assembler added errata NOP
  1692  00112C  EF80  F009         	goto	l601
  1693  001130                     u3980:
  1694  001130  FFFF               	dw	65535	; assembler added errata NOP
  1695  001132                     
  1696                           ;usart.c: 215:         counter = 0;
  1697  001132  0E00               	movlw	0
  1698  001134  6E5E               	movwf	_counter^0,c
  1699                           
  1700                           ;usart.c: 218:         switch(receivedMex[0]){
  1701  001136  EF62  F009         	goto	l4516
  1702  00113A                     l4480:
  1703  00113A  FFFF               	dw	65535	; assembler added errata NOP
  1704                           
  1705                           ;usart.c: 220:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  1706  00113C  5061               	movf	_dataCounter^0,w,c
  1707  00113E  0D04               	mullw	4
  1708  001140  0EC6               	movlw	low _dataSequence
  1709  001142  24F3               	addwf	243,w,c
  1710  001144  6ED9               	movwf	fsr2l,c
  1711  001146  0E00               	movlw	high _dataSequence
  1712  001148  20F4               	addwfc	prodh,w,c
  1713  00114A  6EDA               	movwf	fsr2h,c
  1714  00114C  C044  FFDF         	movff	_receivedMex+1,indf2
  1715                           
  1716                           ;usart.c: 221:                 dataSequence[dataCounter].posX = receivedMex[2] * 5;
  1717  001150  5061               	movf	_dataCounter^0,w,c
  1718  001152  0D04               	mullw	4
  1719  001154  0EC7               	movlw	low (_dataSequence+1)
  1720  001156  24F3               	addwf	243,w,c
  1721  001158  6ED9               	movwf	fsr2l,c
  1722  00115A  0E00               	movlw	high (_dataSequence+1)
  1723  00115C  20F4               	addwfc	prodh,w,c
  1724  00115E  6EDA               	movwf	fsr2h,c
  1725  001160  5045               	movf	(_receivedMex+2)^0,w,c
  1726  001162  0D05               	mullw	5
  1727  001164  CFF3 FFDF          	movff	prodl,indf2
  1728                           
  1729                           ;usart.c: 222:                 dataSequence[dataCounter].posY = receivedMex[3] * 5;
  1730  001168  5061               	movf	_dataCounter^0,w,c
  1731  00116A  0D04               	mullw	4
  1732  00116C  0EC8               	movlw	low (_dataSequence+2)
  1733  00116E  24F3               	addwf	243,w,c
  1734  001170  6ED9               	movwf	fsr2l,c
  1735  001172  0E00               	movlw	high (_dataSequence+2)
  1736  001174  20F4               	addwfc	prodh,w,c
  1737  001176  6EDA               	movwf	fsr2h,c
  1738  001178  5046               	movf	(_receivedMex+3)^0,w,c
  1739  00117A  0D05               	mullw	5
  1740  00117C  CFF3 FFDF          	movff	prodl,indf2
  1741                           
  1742                           ;usart.c: 223:                 dataSequence[dataCounter].rotation = receivedMex[4];
  1743  001180  5061               	movf	_dataCounter^0,w,c
  1744  001182  0D04               	mullw	4
  1745  001184  0EC9               	movlw	low (_dataSequence+3)
  1746  001186  24F3               	addwf	243,w,c
  1747  001188  6ED9               	movwf	fsr2l,c
  1748  00118A  0E00               	movlw	high (_dataSequence+3)
  1749  00118C  20F4               	addwfc	prodh,w,c
  1750  00118E  6EDA               	movwf	fsr2h,c
  1751  001190  C047  FFDF         	movff	_receivedMex+4,indf2
  1752                           
  1753                           ;usart.c: 226:                 if((dataSequence[dataCounter].posX > maxX || dataSequence
      +                          [dataCounter].posY > maxY) &&
  1754  001194  5061               	movf	_dataCounter^0,w,c
  1755  001196  0D04               	mullw	4
  1756  001198  0EC7               	movlw	low (_dataSequence+1)
  1757  00119A  24F3               	addwf	243,w,c
  1758  00119C  6ED9               	movwf	fsr2l,c
  1759  00119E  0E00               	movlw	high (_dataSequence+1)
  1760  0011A0  20F4               	addwfc	prodh,w,c
  1761  0011A2  6EDA               	movwf	fsr2h,c
  1762  0011A4  0E66               	movlw	102
  1763  0011A6  60DF               	cpfslt	indf2,c
  1764  0011A8  EFD8  F008         	goto	u3991
  1765  0011AC  EFDB  F008         	goto	u3990
  1766  0011B0                     u3991:
  1767  0011B0  FFFF               	dw	65535	; assembler added errata NOP
  1768  0011B2  EFED  F008         	goto	l4484
  1769  0011B6                     u3990:
  1770  0011B6  FFFF               	dw	65535	; assembler added errata NOP
  1771  0011B8  5061               	movf	_dataCounter^0,w,c
  1772  0011BA  0D04               	mullw	4
  1773  0011BC  0EC8               	movlw	low (_dataSequence+2)
  1774  0011BE  24F3               	addwf	243,w,c
  1775  0011C0  6ED9               	movwf	fsr2l,c
  1776  0011C2  0E00               	movlw	high (_dataSequence+2)
  1777  0011C4  20F4               	addwfc	prodh,w,c
  1778  0011C6  6EDA               	movwf	fsr2h,c
  1779  0011C8  0E65               	movlw	101
  1780  0011CA  64DF               	cpfsgt	indf2,c
  1781  0011CC  EFEA  F008         	goto	u4001
  1782  0011D0  EFED  F008         	goto	u4000
  1783  0011D4                     u4001:
  1784  0011D4  FFFF               	dw	65535	; assembler added errata NOP
  1785  0011D6  EF05  F009         	goto	l4488
  1786  0011DA                     u4000:
  1787  0011DA                     l4484:
  1788  0011DA  FFFF               	dw	65535	; assembler added errata NOP
  1789  0011DC  5061               	movf	_dataCounter^0,w,c
  1790  0011DE  0D04               	mullw	4
  1791  0011E0  0EC6               	movlw	low _dataSequence
  1792  0011E2  24F3               	addwf	243,w,c
  1793  0011E4  6ED9               	movwf	fsr2l,c
  1794  0011E6  0E00               	movlw	high _dataSequence
  1795  0011E8  20F4               	addwfc	prodh,w,c
  1796  0011EA  6EDA               	movwf	fsr2h,c
  1797  0011EC  28DE               	incf	postinc2,w,c
  1798  0011EE  B4D8               	btfsc	status,2,c
  1799  0011F0  EFFC  F008         	goto	u4011
  1800  0011F4  EFFF  F008         	goto	u4010
  1801  0011F8                     u4011:
  1802  0011F8  FFFF               	dw	65535	; assembler added errata NOP
  1803  0011FA  EF05  F009         	goto	l4488
  1804  0011FE                     u4010:
  1805  0011FE  FFFF               	dw	65535	; assembler added errata NOP
  1806  001200                     
  1807                           ;usart.c: 227:                         dataSequence[dataCounter].feederLine != 0xFF){;us
      +                          art.c: 228:                     printError(5);
  1808  001200  0E05               	movlw	5
  1809  001202  ECEC  F00D         	call	_printError
  1810                           
  1811                           ;usart.c: 229:                 }else{
  1812  001206  EF7D  F009         	goto	l4518
  1813  00120A                     l4488:
  1814  00120A  FFFF               	dw	65535	; assembler added errata NOP
  1815                           
  1816                           ;usart.c: 230:                     dataCounter++;
  1817  00120C  2A61               	incf	_dataCounter^0,f,c
  1818  00120E  EF7D  F009         	goto	l4518
  1819  001212                     l594:
  1820  001212  FFFF               	dw	65535	; assembler added errata NOP
  1821                           
  1822                           ;usart.c: 235:                 newSequenceData.L = receivedMex[1];
  1823  001214  C044  F0DA         	movff	_receivedMex+1,_newSequenceData
  1824                           
  1825                           ;usart.c: 236:                 newSequenceData.W = receivedMex[2];
  1826  001218  C045  F0DB         	movff	_receivedMex+2,_newSequenceData+1
  1827  00121C                     
  1828                           ;usart.c: 237:                 newSequenceData.init_posX = receivedMex[3] * 5;
  1829  00121C  5046               	movf	(_receivedMex+3)^0,w,c
  1830  00121E  0D05               	mullw	5
  1831  001220  CFF3 F0DC          	movff	prodl,_newSequenceData+2
  1832                           
  1833                           ;usart.c: 238:                 newSequenceData.init_posY = receivedMex[4] * 5;
  1834  001224  5047               	movf	(_receivedMex+4)^0,w,c
  1835  001226  0D05               	mullw	5
  1836  001228  CFF3 F0DD          	movff	prodl,_newSequenceData+3
  1837  00122C                     
  1838                           ;usart.c: 239:                 newSequenceData.init_rot = receivedMex[5];
  1839  00122C  C048  F0DE         	movff	_receivedMex+5,_newSequenceData+4
  1840                           
  1841                           ;usart.c: 240:                 newSequenceData.end_posX = receivedMex[6] * 5;
  1842  001230  5049               	movf	(_receivedMex+6)^0,w,c
  1843  001232  0D05               	mullw	5
  1844  001234  CFF3 F0DF          	movff	prodl,_newSequenceData+5
  1845                           
  1846                           ;usart.c: 241:                 newSequenceData.end_posY = receivedMex[7] * 5;
  1847  001238  504A               	movf	(_receivedMex+7)^0,w,c
  1848  00123A  0D05               	mullw	5
  1849  00123C  CFF3 F0E0          	movff	prodl,_newSequenceData+6
  1850  001240                     
  1851                           ;usart.c: 242:                 newSequenceData.end_rot = receivedMex[8];
  1852  001240  C04B  F0E1         	movff	_receivedMex+8,_newSequenceData+7
  1853  001244                     
  1854                           ;usart.c: 245:                 if(newSequenceData.init_posX > maxFeedX ||
  1855  001244  0E1F               	movlw	31
  1856  001246  0100               	movlb	0	; () banked
  1857  001248  61DC               	cpfslt	(_newSequenceData+2)& (0+255),b
  1858  00124A  EF29  F009         	goto	u4021
  1859  00124E  EF2C  F009         	goto	u4020
  1860  001252                     u4021:
  1861  001252  FFFF               	dw	65535	; assembler added errata NOP
  1862  001254  EF4A  F009         	goto	l4504
  1863  001258                     u4020:
  1864  001258  FFFF               	dw	65535	; assembler added errata NOP
  1865  00125A                     
  1866                           ; BSR set to: 0
  1867  00125A  0E66               	movlw	102
  1868  00125C  61DF               	cpfslt	(_newSequenceData+5)& (0+255),b
  1869  00125E  EF33  F009         	goto	u4031
  1870  001262  EF36  F009         	goto	u4030
  1871  001266                     u4031:
  1872  001266  FFFF               	dw	65535	; assembler added errata NOP
  1873  001268  EF4A  F009         	goto	l4504
  1874  00126C                     u4030:
  1875  00126C  FFFF               	dw	65535	; assembler added errata NOP
  1876  00126E                     
  1877                           ; BSR set to: 0
  1878  00126E  0E65               	movlw	101
  1879  001270  61DD               	cpfslt	(_newSequenceData+3)& (0+255),b
  1880  001272  EF3D  F009         	goto	u4041
  1881  001276  EF40  F009         	goto	u4040
  1882  00127A                     u4041:
  1883  00127A  FFFF               	dw	65535	; assembler added errata NOP
  1884  00127C  EF4A  F009         	goto	l4504
  1885  001280                     u4040:
  1886  001280  FFFF               	dw	65535	; assembler added errata NOP
  1887  001282                     
  1888                           ; BSR set to: 0
  1889  001282  0E65               	movlw	101
  1890  001284  65E0               	cpfsgt	(_newSequenceData+6)& (0+255),b
  1891  001286  EF47  F009         	goto	u4051
  1892  00128A  EF4A  F009         	goto	u4050
  1893  00128E                     u4051:
  1894  00128E  FFFF               	dw	65535	; assembler added errata NOP
  1895  001290  EF52  F009         	goto	l4508
  1896  001294                     u4050:
  1897  001294                     l4504:
  1898  001294  FFFF               	dw	65535	; assembler added errata NOP
  1899                           
  1900                           ; BSR set to: 0
  1901                           ;usart.c: 248:                         newSequenceData.end_posY > maxY){;usart.c: 249:  
      +                                             _newSequence = 0;
  1902  001296  0E00               	movlw	0
  1903  001298  6E5F               	movwf	__newSequence^0,c
  1904  00129A                     
  1905                           ; BSR set to: 0
  1906                           ;usart.c: 250:                     printError(5);
  1907  00129A  0E05               	movlw	5
  1908  00129C  ECEC  F00D         	call	_printError
  1909                           
  1910                           ;usart.c: 251:                 }else{
  1911  0012A0  EF7D  F009         	goto	l4518
  1912  0012A4                     l4508:
  1913  0012A4  FFFF               	dw	65535	; assembler added errata NOP
  1914                           
  1915                           ; BSR set to: 0
  1916                           ;usart.c: 252:                     _newSequence = 1;
  1917  0012A6  0E01               	movlw	1
  1918  0012A8  6E5F               	movwf	__newSequence^0,c
  1919  0012AA  EF7D  F009         	goto	l4518
  1920  0012AE                     l4510:
  1921  0012AE  FFFF               	dw	65535	; assembler added errata NOP
  1922                           
  1923                           ;usart.c: 257:                 _fatalError = 1;
  1924  0012B0  0E01               	movlw	1
  1925  0012B2  6E60               	movwf	__fatalError^0,c
  1926                           
  1927                           ;usart.c: 258:                 break;
  1928  0012B4  EF7D  F009         	goto	l4518
  1929  0012B8                     l4512:
  1930  0012B8  FFFF               	dw	65535	; assembler added errata NOP
  1931                           
  1932                           ;usart.c: 261:                 printError(8);
  1933  0012BA  0E08               	movlw	8
  1934  0012BC  ECEC  F00D         	call	_printError
  1935                           
  1936                           ;usart.c: 262:                 break;
  1937  0012C0  EF7D  F009         	goto	l4518
  1938  0012C4                     l4516:
  1939  0012C4  FFFF               	dw	65535	; assembler added errata NOP
  1940  0012C6  5043               	movf	_receivedMex^0,w,c
  1941  0012C8  6E19               	movwf	??_storeData^0,c
  1942  0012CA  6A1A               	clrf	(??_storeData+1)^0,c
  1943                           
  1944                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1945                           ; Switch size 1, requested type "simple"
  1946                           ; Number of cases is 1, Range of values is 0 to 0
  1947                           ; switch strategies available:
  1948                           ; Name         Instructions Cycles
  1949                           ; simple_byte            4     3 (average)
  1950                           ;	Chosen strategy is simple_byte
  1951  0012CC  501A               	movf	(??_storeData+1)^0,w,c
  1952  0012CE  0A00               	xorlw	0	; case 0
  1953  0012D0  B4D8               	btfsc	status,2,c
  1954  0012D2  EF6D  F009         	goto	l4844
  1955  0012D6  EF5C  F009         	goto	l4512
  1956  0012DA                     l4844:
  1957  0012DA  FFFF               	dw	65535	; assembler added errata NOP
  1958                           
  1959                           ; Switch size 1, requested type "simple"
  1960                           ; Number of cases is 3, Range of values is 1 to 3
  1961                           ; switch strategies available:
  1962                           ; Name         Instructions Cycles
  1963                           ; simple_byte           10     6 (average)
  1964                           ;	Chosen strategy is simple_byte
  1965  0012DC  5019               	movf	??_storeData^0,w,c
  1966  0012DE  0A01               	xorlw	1	; case 1
  1967  0012E0  B4D8               	btfsc	status,2,c
  1968  0012E2  EF9D  F008         	goto	l4480
  1969  0012E6  0A03               	xorlw	3	; case 2
  1970  0012E8  B4D8               	btfsc	status,2,c
  1971  0012EA  EF09  F009         	goto	l594
  1972  0012EE  0A01               	xorlw	1	; case 3
  1973  0012F0  B4D8               	btfsc	status,2,c
  1974  0012F2  EF57  F009         	goto	l4510
  1975  0012F6  EF5C  F009         	goto	l4512
  1976  0012FA                     l4518:
  1977  0012FA  FFFF               	dw	65535	; assembler added errata NOP
  1978                           
  1979                           ;usart.c: 266:         receivedMex[0] = 0;
  1980  0012FC  0E00               	movlw	0
  1981  0012FE  6E43               	movwf	_receivedMex^0,c
  1982  001300                     l601:
  1983  001300  FFFF               	dw	65535	; assembler added errata NOP
  1984  001302  0012               	return		;funcret
  1985  001304  FFFF               	dw	65535	; errata NOP
  1986  001306                     __end_of_storeData:
  1987                           	callstack 0
  1988                           
  1989 ;; *************** function _printError *****************
  1990 ;; Defined at:
  1991 ;;		line 130 in file "usart.c"
  1992 ;; Parameters:    Size  Location     Type
  1993 ;;  errCode         1    wreg     unsigned char 
  1994 ;; Auto vars:     Size  Location     Type
  1995 ;;  errCode         1   23[COMRAM] unsigned char 
  1996 ;; Return value:  Size  Location     Type
  1997 ;;                  1    wreg      void 
  1998 ;; Registers used:
  1999 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2000 ;; Tracked objects:
  2001 ;;		On entry : 0/0
  2002 ;;		On exit  : 0/0
  2003 ;;		Unchanged: 0/0
  2004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2005 ;;      Params:         0       0       0       0       0       0       0
  2006 ;;      Locals:         1       0       0       0       0       0       0
  2007 ;;      Temps:          2       0       0       0       0       0       0
  2008 ;;      Totals:         3       0       0       0       0       0       0
  2009 ;;Total ram usage:        3 bytes
  2010 ;; Hardware stack levels used:    1
  2011 ;; Hardware stack levels required when called:    5
  2012 ;; This function calls:
  2013 ;;		_uartTx
  2014 ;; This function is called by:
  2015 ;;		_main
  2016 ;;		_storeData
  2017 ;; This function uses a non-reentrant model
  2018 ;;
  2019                           
  2020                           	psect	text6
  2021  001BD8                     __ptext6:
  2022                           	callstack 0
  2023  001BD8                     _printError:
  2024                           	callstack 0
  2025  001BD8  FFFF               	dw	65535	; assembler added errata NOP
  2026                           
  2027                           ;incstack = 0
  2028                           ;printError@errCode stored from wreg
  2029  001BDA  6E18               	movwf	printError@errCode^0,c
  2030  001BDC                     
  2031                           ;usart.c: 132:     switch(errCode){
  2032  001BDC  EF48  F00E         	goto	l4318
  2033  001BE0                     l4300:
  2034  001BE0  FFFF               	dw	65535	; assembler added errata NOP
  2035                           
  2036                           ;usart.c: 134:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  2037  001BE2  0E90               	movlw	low _errString_Feed
  2038  001BE4  6E12               	movwf	uartTx@ptr^0,c
  2039  001BE6  0E00               	movlw	high _errString_Feed
  2040  001BE8  6E13               	movwf	(uartTx@ptr+1)^0,c
  2041  001BEA  0E1E               	movlw	30
  2042  001BEC  6E14               	movwf	uartTx@length^0,c
  2043  001BEE  ECE5  F011         	call	_uartTx	;wreg free
  2044                           
  2045                           ;usart.c: 135:             break;
  2046  001BF2  EF77  F00E         	goto	l568
  2047  001BF6                     l4302:
  2048  001BF6  FFFF               	dw	65535	; assembler added errata NOP
  2049                           
  2050                           ;usart.c: 137:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  2051  001BF8  0E5E               	movlw	low _errString_ZEND
  2052  001BFA  6E12               	movwf	uartTx@ptr^0,c
  2053  001BFC  0E01               	movlw	high _errString_ZEND
  2054  001BFE  6E13               	movwf	(uartTx@ptr+1)^0,c
  2055  001C00  0E29               	movlw	41
  2056  001C02  6E14               	movwf	uartTx@length^0,c
  2057  001C04  ECE5  F011         	call	_uartTx	;wreg free
  2058                           
  2059                           ;usart.c: 138:             break;
  2060  001C08  EF77  F00E         	goto	l568
  2061  001C0C                     l4304:
  2062  001C0C  FFFF               	dw	65535	; assembler added errata NOP
  2063                           
  2064                           ;usart.c: 140:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  2065  001C0E  0E87               	movlw	low _errString_Reset
  2066  001C10  6E12               	movwf	uartTx@ptr^0,c
  2067  001C12  0E01               	movlw	high _errString_Reset
  2068  001C14  6E13               	movwf	(uartTx@ptr+1)^0,c
  2069  001C16  0E28               	movlw	40
  2070  001C18  6E14               	movwf	uartTx@length^0,c
  2071  001C1A  ECE5  F011         	call	_uartTx	;wreg free
  2072                           
  2073                           ;usart.c: 141:             break;
  2074  001C1E  EF77  F00E         	goto	l568
  2075  001C22                     l4306:
  2076  001C22  FFFF               	dw	65535	; assembler added errata NOP
  2077                           
  2078                           ;usart.c: 143:             uartTx(&errString_Point[0], sizeof(errString_Point));
  2079  001C24  0E35               	movlw	low _errString_Point
  2080  001C26  6E12               	movwf	uartTx@ptr^0,c
  2081  001C28  0E01               	movlw	high _errString_Point
  2082  001C2A  6E13               	movwf	(uartTx@ptr+1)^0,c
  2083  001C2C  0E29               	movlw	41
  2084  001C2E  6E14               	movwf	uartTx@length^0,c
  2085  001C30  ECE5  F011         	call	_uartTx	;wreg free
  2086                           
  2087                           ;usart.c: 144:             break;
  2088  001C34  EF77  F00E         	goto	l568
  2089  001C38                     l4308:
  2090  001C38  FFFF               	dw	65535	; assembler added errata NOP
  2091                           
  2092                           ;usart.c: 146:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  2093  001C3A  0ED6               	movlw	low _errString_Bound
  2094  001C3C  6E12               	movwf	uartTx@ptr^0,c
  2095  001C3E  0E01               	movlw	high _errString_Bound
  2096  001C40  6E13               	movwf	(uartTx@ptr+1)^0,c
  2097  001C42  0E21               	movlw	33
  2098  001C44  6E14               	movwf	uartTx@length^0,c
  2099  001C46  ECE5  F011         	call	_uartTx	;wreg free
  2100                           
  2101                           ;usart.c: 147:             break;
  2102  001C4A  EF77  F00E         	goto	l568
  2103  001C4E                     l4310:
  2104  001C4E  FFFF               	dw	65535	; assembler added errata NOP
  2105                           
  2106                           ;usart.c: 149:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  2107  001C50  0E00               	movlw	low _errString_PointZ
  2108  001C52  6E12               	movwf	uartTx@ptr^0,c
  2109  001C54  0E01               	movlw	high _errString_PointZ
  2110  001C56  6E13               	movwf	(uartTx@ptr+1)^0,c
  2111  001C58  0E35               	movlw	53
  2112  001C5A  6E14               	movwf	uartTx@length^0,c
  2113  001C5C  ECE5  F011         	call	_uartTx	;wreg free
  2114                           
  2115                           ;usart.c: 150:             break;
  2116  001C60  EF77  F00E         	goto	l568
  2117  001C64                     l4312:
  2118  001C64  FFFF               	dw	65535	; assembler added errata NOP
  2119                           
  2120                           ;usart.c: 152:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  2121  001C66  0EAF               	movlw	low _errString_Fatal
  2122  001C68  6E12               	movwf	uartTx@ptr^0,c
  2123  001C6A  0E01               	movlw	high _errString_Fatal
  2124  001C6C  6E13               	movwf	(uartTx@ptr+1)^0,c
  2125  001C6E  0E27               	movlw	39
  2126  001C70  6E14               	movwf	uartTx@length^0,c
  2127  001C72  ECE5  F011         	call	_uartTx	;wreg free
  2128                           
  2129                           ;usart.c: 153:             break;
  2130  001C76  EF77  F00E         	goto	l568
  2131  001C7A                     l4314:
  2132  001C7A  FFFF               	dw	65535	; assembler added errata NOP
  2133                           
  2134                           ;usart.c: 155:             uartTx(&errString_Command[0], sizeof(errString_Command));
  2135  001C7C  0EAE               	movlw	low _errString_Command
  2136  001C7E  6E12               	movwf	uartTx@ptr^0,c
  2137  001C80  0E00               	movlw	high _errString_Command
  2138  001C82  6E13               	movwf	(uartTx@ptr+1)^0,c
  2139  001C84  0E18               	movlw	24
  2140  001C86  6E14               	movwf	uartTx@length^0,c
  2141  001C88  ECE5  F011         	call	_uartTx	;wreg free
  2142                           
  2143                           ;usart.c: 156:             break;
  2144  001C8C  EF77  F00E         	goto	l568
  2145  001C90                     l4318:
  2146  001C90  FFFF               	dw	65535	; assembler added errata NOP
  2147  001C92  5018               	movf	printError@errCode^0,w,c
  2148  001C94  6E16               	movwf	??_printError^0,c
  2149  001C96  6A17               	clrf	(??_printError+1)^0,c
  2150                           
  2151                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2152                           ; Switch size 1, requested type "simple"
  2153                           ; Number of cases is 1, Range of values is 0 to 0
  2154                           ; switch strategies available:
  2155                           ; Name         Instructions Cycles
  2156                           ; simple_byte            4     3 (average)
  2157                           ;	Chosen strategy is simple_byte
  2158  001C98  5017               	movf	(??_printError+1)^0,w,c
  2159  001C9A  0A00               	xorlw	0	; case 0
  2160  001C9C  B4D8               	btfsc	status,2,c
  2161  001C9E  EF53  F00E         	goto	l4846
  2162  001CA2  EF77  F00E         	goto	l568
  2163  001CA6                     l4846:
  2164  001CA6  FFFF               	dw	65535	; assembler added errata NOP
  2165                           
  2166                           ; Switch size 1, requested type "simple"
  2167                           ; Number of cases is 8, Range of values is 1 to 8
  2168                           ; switch strategies available:
  2169                           ; Name         Instructions Cycles
  2170                           ; simple_byte           25    13 (average)
  2171                           ;	Chosen strategy is simple_byte
  2172  001CA8  5016               	movf	??_printError^0,w,c
  2173  001CAA  0A01               	xorlw	1	; case 1
  2174  001CAC  B4D8               	btfsc	status,2,c
  2175  001CAE  EFF0  F00D         	goto	l4300
  2176  001CB2  0A03               	xorlw	3	; case 2
  2177  001CB4  B4D8               	btfsc	status,2,c
  2178  001CB6  EFFB  F00D         	goto	l4302
  2179  001CBA  0A01               	xorlw	1	; case 3
  2180  001CBC  B4D8               	btfsc	status,2,c
  2181  001CBE  EF06  F00E         	goto	l4304
  2182  001CC2  0A07               	xorlw	7	; case 4
  2183  001CC4  B4D8               	btfsc	status,2,c
  2184  001CC6  EF11  F00E         	goto	l4306
  2185  001CCA  0A01               	xorlw	1	; case 5
  2186  001CCC  B4D8               	btfsc	status,2,c
  2187  001CCE  EF1C  F00E         	goto	l4308
  2188  001CD2  0A03               	xorlw	3	; case 6
  2189  001CD4  B4D8               	btfsc	status,2,c
  2190  001CD6  EF27  F00E         	goto	l4310
  2191  001CDA  0A01               	xorlw	1	; case 7
  2192  001CDC  B4D8               	btfsc	status,2,c
  2193  001CDE  EF32  F00E         	goto	l4312
  2194  001CE2  0A0F               	xorlw	15	; case 8
  2195  001CE4  B4D8               	btfsc	status,2,c
  2196  001CE6  EF3D  F00E         	goto	l4314
  2197  001CEA  EF77  F00E         	goto	l568
  2198  001CEE                     l568:
  2199  001CEE  FFFF               	dw	65535	; assembler added errata NOP
  2200  001CF0  0012               	return		;funcret
  2201  001CF2  FFFF               	dw	65535	; errata NOP
  2202  001CF4                     __end_of_printError:
  2203                           	callstack 0
  2204                           
  2205 ;; *************** function _uartTx *****************
  2206 ;; Defined at:
  2207 ;;		line 167 in file "usart.c"
  2208 ;; Parameters:    Size  Location     Type
  2209 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  2210 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  2211 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  2212 ;;  length          1   19[COMRAM] unsigned char 
  2213 ;; Auto vars:     Size  Location     Type
  2214 ;;  i               1   20[COMRAM] unsigned char 
  2215 ;; Return value:  Size  Location     Type
  2216 ;;                  1    wreg      void 
  2217 ;; Registers used:
  2218 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2219 ;; Tracked objects:
  2220 ;;		On entry : 0/0
  2221 ;;		On exit  : 0/0
  2222 ;;		Unchanged: 0/0
  2223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2224 ;;      Params:         3       0       0       0       0       0       0
  2225 ;;      Locals:         1       0       0       0       0       0       0
  2226 ;;      Temps:          0       0       0       0       0       0       0
  2227 ;;      Totals:         4       0       0       0       0       0       0
  2228 ;;Total ram usage:        4 bytes
  2229 ;; Hardware stack levels used:    1
  2230 ;; Hardware stack levels required when called:    4
  2231 ;; This function calls:
  2232 ;;		Nothing
  2233 ;; This function is called by:
  2234 ;;		_printError
  2235 ;; This function uses a non-reentrant model
  2236 ;;
  2237                           
  2238                           	psect	text7
  2239  0023CA                     __ptext7:
  2240                           	callstack 0
  2241  0023CA                     _uartTx:
  2242                           	callstack 0
  2243  0023CA  FFFF               	dw	65535	; assembler added errata NOP
  2244  0023CC                     
  2245                           ;usart.c: 167: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 168: {;usa
      +                          rt.c: 170:     for(char i = 1; i < length; i++){
  2246  0023CC  0E01               	movlw	1
  2247  0023CE  6E15               	movwf	uartTx@i^0,c
  2248  0023D0  EFFE  F011         	goto	l3804
  2249  0023D4                     l3800:
  2250  0023D4  FFFF               	dw	65535	; assembler added errata NOP
  2251                           
  2252                           ;usart.c: 172:         TXREG = *ptr;
  2253  0023D6  C012  FFD9         	movff	uartTx@ptr,fsr2l
  2254  0023DA  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  2255  0023DE  50DF               	movf	indf2,w,c
  2256  0023E0  6EAD               	movwf	173,c	;volatile
  2257  0023E2                     l573:
  2258  0023E2  FFFF               	dw	65535	; assembler added errata NOP
  2259  0023E4  A2AC               	btfss	172,1,c	;volatile
  2260  0023E6  EFF7  F011         	goto	u2961
  2261  0023EA  EFFA  F011         	goto	u2960
  2262  0023EE                     u2961:
  2263  0023EE  FFFF               	dw	65535	; assembler added errata NOP
  2264  0023F0  EFF1  F011         	goto	l573
  2265  0023F4                     u2960:
  2266  0023F4  FFFF               	dw	65535	; assembler added errata NOP
  2267  0023F6                     
  2268                           ;usart.c: 176:         ptr++;
  2269  0023F6  4A12               	infsnz	uartTx@ptr^0,f,c
  2270  0023F8  2A13               	incf	(uartTx@ptr+1)^0,f,c
  2271                           
  2272                           ;usart.c: 177:     }
  2273  0023FA  2A15               	incf	uartTx@i^0,f,c
  2274  0023FC                     l3804:
  2275  0023FC  FFFF               	dw	65535	; assembler added errata NOP
  2276  0023FE  5014               	movf	uartTx@length^0,w,c
  2277  002400  5C15               	subwf	uartTx@i^0,w,c
  2278  002402  A0D8               	btfss	status,0,c
  2279  002404  EF06  F012         	goto	u2971
  2280  002408  EF09  F012         	goto	u2970
  2281  00240C                     u2971:
  2282  00240C  FFFF               	dw	65535	; assembler added errata NOP
  2283  00240E  EFEA  F011         	goto	l3800
  2284  002412                     u2970:
  2285  002412  FFFF               	dw	65535	; assembler added errata NOP
  2286  002414  0012               	return		;funcret
  2287  002416  FFFF               	dw	65535	; errata NOP
  2288  002418                     __end_of_uartTx:
  2289                           	callstack 0
  2290                           
  2291 ;; *************** function _shiftData *****************
  2292 ;; Defined at:
  2293 ;;		line 100 in file "usart.c"
  2294 ;; Parameters:    Size  Location     Type
  2295 ;;		None
  2296 ;; Auto vars:     Size  Location     Type
  2297 ;;  i               1   19[COMRAM] unsigned char 
  2298 ;; Return value:  Size  Location     Type
  2299 ;;                  1    wreg      void 
  2300 ;; Registers used:
  2301 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2302 ;; Tracked objects:
  2303 ;;		On entry : 0/0
  2304 ;;		On exit  : 0/0
  2305 ;;		Unchanged: 0/0
  2306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2307 ;;      Params:         0       0       0       0       0       0       0
  2308 ;;      Locals:         1       0       0       0       0       0       0
  2309 ;;      Temps:          2       0       0       0       0       0       0
  2310 ;;      Totals:         3       0       0       0       0       0       0
  2311 ;;Total ram usage:        3 bytes
  2312 ;; Hardware stack levels used:    1
  2313 ;; Hardware stack levels required when called:    4
  2314 ;; This function calls:
  2315 ;;		Nothing
  2316 ;; This function is called by:
  2317 ;;		_main
  2318 ;; This function uses a non-reentrant model
  2319 ;;
  2320                           
  2321                           	psect	text8
  2322  00236A                     __ptext8:
  2323                           	callstack 0
  2324  00236A                     _shiftData:
  2325                           	callstack 0
  2326  00236A  FFFF               	dw	65535	; assembler added errata NOP
  2327  00236C                     
  2328                           ;usart.c: 101:     char i;;usart.c: 103:     for(i = 0; i < 4; i++){
  2329  00236C  0E00               	movlw	0
  2330  00236E  6E14               	movwf	shiftData@i^0,c
  2331  002370                     l4640:
  2332  002370  FFFF               	dw	65535	; assembler added errata NOP
  2333                           
  2334                           ;usart.c: 104:         dataSequence[i] = dataSequence[i+1];
  2335  002372  5014               	movf	shiftData@i^0,w,c
  2336  002374  6E12               	movwf	??_shiftData^0,c
  2337  002376  6A13               	clrf	(??_shiftData+1)^0,c
  2338  002378  90D8               	bcf	status,0,c
  2339  00237A  3612               	rlcf	??_shiftData^0,f,c
  2340  00237C  3613               	rlcf	(??_shiftData+1)^0,f,c
  2341  00237E  90D8               	bcf	status,0,c
  2342  002380  3612               	rlcf	??_shiftData^0,f,c
  2343  002382  3613               	rlcf	(??_shiftData+1)^0,f,c
  2344  002384  0ECA               	movlw	low (_dataSequence+4)
  2345  002386  2412               	addwf	??_shiftData^0,w,c
  2346  002388  6ED9               	movwf	fsr2l,c
  2347  00238A  0E00               	movlw	high (_dataSequence+4)
  2348  00238C  2013               	addwfc	(??_shiftData+1)^0,w,c
  2349  00238E  6EDA               	movwf	fsr2h,c
  2350  002390  5014               	movf	shiftData@i^0,w,c
  2351  002392  0D04               	mullw	4
  2352  002394  0EC6               	movlw	low _dataSequence
  2353  002396  24F3               	addwf	243,w,c
  2354  002398  6EE1               	movwf	fsr1l,c
  2355  00239A  0E00               	movlw	high _dataSequence
  2356  00239C  20F4               	addwfc	prodh,w,c
  2357  00239E  6EE2               	movwf	fsr1h,c
  2358  0023A0  CFDE FFE6          	movff	postinc2,postinc1
  2359  0023A4  CFDE FFE6          	movff	postinc2,postinc1
  2360  0023A8  CFDE FFE6          	movff	postinc2,postinc1
  2361  0023AC  CFDE FFE6          	movff	postinc2,postinc1
  2362  0023B0                     
  2363                           ;usart.c: 105:     }
  2364  0023B0  2A14               	incf	shiftData@i^0,f,c
  2365  0023B2  0E03               	movlw	3
  2366  0023B4  6414               	cpfsgt	shiftData@i^0,c
  2367  0023B6  EFDF  F011         	goto	u4121
  2368  0023BA  EFE2  F011         	goto	u4120
  2369  0023BE                     u4121:
  2370  0023BE  FFFF               	dw	65535	; assembler added errata NOP
  2371  0023C0  EFB8  F011         	goto	l4640
  2372  0023C4                     u4120:
  2373  0023C4  FFFF               	dw	65535	; assembler added errata NOP
  2374  0023C6  0012               	return		;funcret
  2375  0023C8  FFFF               	dw	65535	; errata NOP
  2376  0023CA                     __end_of_shiftData:
  2377                           	callstack 0
  2378                           
  2379 ;; *************** function _resetPosition *****************
  2380 ;; Defined at:
  2381 ;;		line 162 in file "motors.c"
  2382 ;; Parameters:    Size  Location     Type
  2383 ;;		None
  2384 ;; Auto vars:     Size  Location     Type
  2385 ;;  keepMovingZ     1   22[COMRAM] unsigned char 
  2386 ;;  keepMovingY     1   21[COMRAM] unsigned char 
  2387 ;;  keepMovingX     1   20[COMRAM] unsigned char 
  2388 ;; Return value:  Size  Location     Type
  2389 ;;                  1    wreg      unsigned char 
  2390 ;; Registers used:
  2391 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2392 ;; Tracked objects:
  2393 ;;		On entry : 0/0
  2394 ;;		On exit  : 0/0
  2395 ;;		Unchanged: 0/0
  2396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2397 ;;      Params:         0       0       0       0       0       0       0
  2398 ;;      Locals:         3       0       0       0       0       0       0
  2399 ;;      Temps:          0       0       0       0       0       0       0
  2400 ;;      Totals:         3       0       0       0       0       0       0
  2401 ;;Total ram usage:        3 bytes
  2402 ;; Hardware stack levels used:    1
  2403 ;; Hardware stack levels required when called:    5
  2404 ;; This function calls:
  2405 ;;		_resetStep
  2406 ;;		_resetTM0_Temp
  2407 ;;		_resetTM2_Temp
  2408 ;;		_stepMade
  2409 ;; This function is called by:
  2410 ;;		_main
  2411 ;; This function uses a non-reentrant model
  2412 ;;
  2413                           
  2414                           	psect	text9
  2415  001782                     __ptext9:
  2416                           	callstack 0
  2417  001782                     _resetPosition:
  2418                           	callstack 0
  2419  001782  FFFF               	dw	65535	; assembler added errata NOP
  2420  001784                     
  2421                           ;motors.c: 182:     motCounter[0][1] = -1;
  2422  001784  6868               	setf	(_motCounter+1)^0,c
  2423                           
  2424                           ;motors.c: 183:     motCounter[1][1] = -1;
  2425  001786  686A               	setf	(_motCounter+3)^0,c
  2426                           
  2427                           ;motors.c: 184:     motCounter[2][1] = -1;
  2428  001788  686C               	setf	(_motCounter+5)^0,c
  2429  00178A                     
  2430                           ;motors.c: 189:     unsigned char keepMovingX = 1;
  2431  00178A  0E01               	movlw	1
  2432  00178C  6E15               	movwf	resetPosition@keepMovingX^0,c
  2433                           
  2434                           ;motors.c: 190:     unsigned char keepMovingY = 1;
  2435  00178E  0E01               	movlw	1
  2436  001790  6E16               	movwf	resetPosition@keepMovingY^0,c
  2437                           
  2438                           ;motors.c: 191:     unsigned char keepMovingZ = 1;
  2439  001792  0E01               	movlw	1
  2440  001794  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2441  001796                     
  2442                           ;motors.c: 194:     T2CONbits.TMR2ON = 1;
  2443  001796  84CA               	bsf	202,2,c	;volatile
  2444                           
  2445                           ;motors.c: 196:     tm0Error = 0;
  2446  001798  0E00               	movlw	0
  2447  00179A  6E5A               	movwf	(_tm0Error+1)^0,c
  2448  00179C  0E00               	movlw	0
  2449  00179E  6E59               	movwf	_tm0Error^0,c
  2450                           
  2451                           ;motors.c: 197:     tm0Limit = 200;
  2452  0017A0  0EC8               	movlw	200
  2453  0017A2  6E66               	movwf	_tm0Limit^0,c
  2454  0017A4                     
  2455                           ;motors.c: 198:     T0CONbits.TMR0ON = 1;
  2456  0017A4  8ED5               	bsf	213,7,c	;volatile
  2457                           
  2458                           ;motors.c: 200:     while(keepMovingX || keepMovingY || keepMovingZ){
  2459  0017A6  EF83  F00C         	goto	l4398
  2460  0017AA                     l4356:
  2461  0017AA  FFFF               	dw	65535	; assembler added errata NOP
  2462                           
  2463                           ;motors.c: 202:         resetStep();
  2464  0017AC  EC5C  F013         	call	_resetStep	;wreg free
  2465  0017B0                     
  2466                           ;motors.c: 205:         if(tm0Error){
  2467  0017B0  5059               	movf	_tm0Error^0,w,c
  2468  0017B2  105A               	iorwf	(_tm0Error+1)^0,w,c
  2469  0017B4  B4D8               	btfsc	status,2,c
  2470  0017B6  EFDF  F00B         	goto	u3811
  2471  0017BA  EFE2  F00B         	goto	u3810
  2472  0017BE                     u3811:
  2473  0017BE  FFFF               	dw	65535	; assembler added errata NOP
  2474  0017C0  EFE9  F00B         	goto	l131
  2475  0017C4                     u3810:
  2476  0017C4  FFFF               	dw	65535	; assembler added errata NOP
  2477  0017C6                     
  2478                           ;motors.c: 213:             tm0Error = 3;
  2479  0017C6  0E00               	movlw	0
  2480  0017C8  6E5A               	movwf	(_tm0Error+1)^0,c
  2481  0017CA  0E03               	movlw	3
  2482  0017CC  6E59               	movwf	_tm0Error^0,c
  2483                           
  2484                           ;motors.c: 214:             break;
  2485  0017CE  EFA1  F00C         	goto	l132
  2486  0017D2                     l131:
  2487  0017D2  FFFF               	dw	65535	; assembler added errata NOP
  2488                           
  2489                           ;motors.c: 221:         if(PORTEbits.RE0 || !keepMovingX){
  2490  0017D4  B084               	btfsc	132,0,c	;volatile
  2491  0017D6  EFEF  F00B         	goto	u3821
  2492  0017DA  EFF2  F00B         	goto	u3820
  2493  0017DE                     u3821:
  2494  0017DE  FFFF               	dw	65535	; assembler added errata NOP
  2495  0017E0  EFFC  F00B         	goto	l4364
  2496  0017E4                     u3820:
  2497  0017E4  FFFF               	dw	65535	; assembler added errata NOP
  2498  0017E6  5015               	movf	resetPosition@keepMovingX^0,w,c
  2499  0017E8  A4D8               	btfss	status,2,c
  2500  0017EA  EFF9  F00B         	goto	u3831
  2501  0017EE  EFFC  F00B         	goto	u3830
  2502  0017F2                     u3831:
  2503  0017F2  FFFF               	dw	65535	; assembler added errata NOP
  2504  0017F4  EF01  F00C         	goto	l4366
  2505  0017F8                     u3830:
  2506  0017F8                     l4364:
  2507  0017F8  FFFF               	dw	65535	; assembler added errata NOP
  2508                           
  2509                           ;motors.c: 223:             keepMovingX = 0;
  2510  0017FA  0E00               	movlw	0
  2511  0017FC  6E15               	movwf	resetPosition@keepMovingX^0,c
  2512                           
  2513                           ;motors.c: 224:         }else{
  2514  0017FE  EF18  F00C         	goto	l4372
  2515  001802                     l4366:
  2516  001802  FFFF               	dw	65535	; assembler added errata NOP
  2517                           
  2518                           ;motors.c: 230:             motCounter[0][0] += motCounter[0][1];
  2519  001804  5068               	movf	(_motCounter+1)^0,w,c
  2520  001806  2667               	addwf	_motCounter^0,f,c
  2521                           
  2522                           ;motors.c: 231:             if(motCounter[0][0] < 0){
  2523  001808  BE67               	btfsc	_motCounter^0,7,c
  2524  00180A  EF0C  F00C         	goto	u3840
  2525  00180E  EF09  F00C         	goto	u3841
  2526  001812                     u3841:
  2527  001812  FFFF               	dw	65535	; assembler added errata NOP
  2528  001814  EF0F  F00C         	goto	l4370
  2529  001818                     u3840:
  2530  001818  FFFF               	dw	65535	; assembler added errata NOP
  2531  00181A                     
  2532                           ;motors.c: 232:                 motCounter[0][0] = 3;
  2533  00181A  0E03               	movlw	3
  2534  00181C  6E67               	movwf	_motCounter^0,c
  2535  00181E                     l4370:
  2536  00181E  FFFF               	dw	65535	; assembler added errata NOP
  2537                           
  2538                           ;motors.c: 235:             LATA = stepMot1[motCounter[0][0]];
  2539  001820  0E8C               	movlw	low _stepMot1
  2540  001822  2467               	addwf	_motCounter^0,w,c
  2541  001824  6ED9               	movwf	fsr2l,c
  2542  001826  6ADA               	clrf	fsr2h,c
  2543  001828  0E00               	movlw	high _stepMot1
  2544  00182A  22DA               	addwfc	fsr2h,f,c
  2545  00182C  50DF               	movf	indf2,w,c
  2546  00182E  6E89               	movwf	137,c	;volatile
  2547  001830                     l4372:
  2548  001830  FFFF               	dw	65535	; assembler added errata NOP
  2549                           
  2550                           ;motors.c: 240:         if(PORTEbits.RE1 || !keepMovingY){
  2551  001832  B284               	btfsc	132,1,c	;volatile
  2552  001834  EF1E  F00C         	goto	u3851
  2553  001838  EF21  F00C         	goto	u3850
  2554  00183C                     u3851:
  2555  00183C  FFFF               	dw	65535	; assembler added errata NOP
  2556  00183E  EF2B  F00C         	goto	l4376
  2557  001842                     u3850:
  2558  001842  FFFF               	dw	65535	; assembler added errata NOP
  2559  001844  5016               	movf	resetPosition@keepMovingY^0,w,c
  2560  001846  A4D8               	btfss	status,2,c
  2561  001848  EF28  F00C         	goto	u3861
  2562  00184C  EF2B  F00C         	goto	u3860
  2563  001850                     u3861:
  2564  001850  FFFF               	dw	65535	; assembler added errata NOP
  2565  001852  EF30  F00C         	goto	l4378
  2566  001856                     u3860:
  2567  001856                     l4376:
  2568  001856  FFFF               	dw	65535	; assembler added errata NOP
  2569                           
  2570                           ;motors.c: 242:             keepMovingY = 0;
  2571  001858  0E00               	movlw	0
  2572  00185A  6E16               	movwf	resetPosition@keepMovingY^0,c
  2573                           
  2574                           ;motors.c: 243:         }else{
  2575  00185C  EF47  F00C         	goto	l4384
  2576  001860                     l4378:
  2577  001860  FFFF               	dw	65535	; assembler added errata NOP
  2578                           
  2579                           ;motors.c: 249:             motCounter[1][0] += motCounter[1][1];
  2580  001862  506A               	movf	(_motCounter+3)^0,w,c
  2581  001864  2669               	addwf	(_motCounter+2)^0,f,c
  2582                           
  2583                           ;motors.c: 250:             if(motCounter[1][0] < 0){
  2584  001866  BE69               	btfsc	(_motCounter+2)^0,7,c
  2585  001868  EF3B  F00C         	goto	u3870
  2586  00186C  EF38  F00C         	goto	u3871
  2587  001870                     u3871:
  2588  001870  FFFF               	dw	65535	; assembler added errata NOP
  2589  001872  EF3E  F00C         	goto	l4382
  2590  001876                     u3870:
  2591  001876  FFFF               	dw	65535	; assembler added errata NOP
  2592  001878                     
  2593                           ;motors.c: 251:                 motCounter[1][0] = 3;
  2594  001878  0E03               	movlw	3
  2595  00187A  6E69               	movwf	(_motCounter+2)^0,c
  2596  00187C                     l4382:
  2597  00187C  FFFF               	dw	65535	; assembler added errata NOP
  2598                           
  2599                           ;motors.c: 254:             LATB = stepMot2[motCounter[1][0]];
  2600  00187E  0E88               	movlw	low _stepMot2
  2601  001880  2469               	addwf	(_motCounter+2)^0,w,c
  2602  001882  6ED9               	movwf	fsr2l,c
  2603  001884  6ADA               	clrf	fsr2h,c
  2604  001886  0E00               	movlw	high _stepMot2
  2605  001888  22DA               	addwfc	fsr2h,f,c
  2606  00188A  50DF               	movf	indf2,w,c
  2607  00188C  6E8A               	movwf	138,c	;volatile
  2608  00188E                     l4384:
  2609  00188E  FFFF               	dw	65535	; assembler added errata NOP
  2610                           
  2611                           ;motors.c: 259:         if(PORTEbits.RE2 || !keepMovingZ){
  2612  001890  B484               	btfsc	132,2,c	;volatile
  2613  001892  EF4D  F00C         	goto	u3881
  2614  001896  EF50  F00C         	goto	u3880
  2615  00189A                     u3881:
  2616  00189A  FFFF               	dw	65535	; assembler added errata NOP
  2617  00189C  EF5A  F00C         	goto	l4388
  2618  0018A0                     u3880:
  2619  0018A0  FFFF               	dw	65535	; assembler added errata NOP
  2620  0018A2  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2621  0018A4  A4D8               	btfss	status,2,c
  2622  0018A6  EF57  F00C         	goto	u3891
  2623  0018AA  EF5A  F00C         	goto	u3890
  2624  0018AE                     u3891:
  2625  0018AE  FFFF               	dw	65535	; assembler added errata NOP
  2626  0018B0  EF5F  F00C         	goto	l4390
  2627  0018B4                     u3890:
  2628  0018B4                     l4388:
  2629  0018B4  FFFF               	dw	65535	; assembler added errata NOP
  2630                           
  2631                           ;motors.c: 261:             keepMovingZ = 0;
  2632  0018B6  0E00               	movlw	0
  2633  0018B8  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2634                           
  2635                           ;motors.c: 262:         }else{
  2636  0018BA  EF76  F00C         	goto	l4396
  2637  0018BE                     l4390:
  2638  0018BE  FFFF               	dw	65535	; assembler added errata NOP
  2639                           
  2640                           ;motors.c: 268:             motCounter[2][0] += motCounter[2][1];
  2641  0018C0  506C               	movf	(_motCounter+5)^0,w,c
  2642  0018C2  266B               	addwf	(_motCounter+4)^0,f,c
  2643                           
  2644                           ;motors.c: 269:             if(motCounter[2][0] < 0){
  2645  0018C4  BE6B               	btfsc	(_motCounter+4)^0,7,c
  2646  0018C6  EF6A  F00C         	goto	u3900
  2647  0018CA  EF67  F00C         	goto	u3901
  2648  0018CE                     u3901:
  2649  0018CE  FFFF               	dw	65535	; assembler added errata NOP
  2650  0018D0  EF6D  F00C         	goto	l4394
  2651  0018D4                     u3900:
  2652  0018D4  FFFF               	dw	65535	; assembler added errata NOP
  2653  0018D6                     
  2654                           ;motors.c: 270:                 motCounter[2][0] = 3;
  2655  0018D6  0E03               	movlw	3
  2656  0018D8  6E6B               	movwf	(_motCounter+4)^0,c
  2657  0018DA                     l4394:
  2658  0018DA  FFFF               	dw	65535	; assembler added errata NOP
  2659                           
  2660                           ;motors.c: 273:             LATC = stepMot3[motCounter[2][0]];
  2661  0018DC  0E84               	movlw	low _stepMot3
  2662  0018DE  246B               	addwf	(_motCounter+4)^0,w,c
  2663  0018E0  6ED9               	movwf	fsr2l,c
  2664  0018E2  6ADA               	clrf	fsr2h,c
  2665  0018E4  0E00               	movlw	high _stepMot3
  2666  0018E6  22DA               	addwfc	fsr2h,f,c
  2667  0018E8  50DF               	movf	indf2,w,c
  2668  0018EA  6E8B               	movwf	139,c	;volatile
  2669  0018EC                     l4396:
  2670  0018EC  FFFF               	dw	65535	; assembler added errata NOP
  2671  0018EE  ECD9  F012         	call	_stepMade	;wreg free
  2672  0018F2  5012               	movf	?_stepMade^0,w,c
  2673  0018F4  1013               	iorwf	(?_stepMade+1)^0,w,c
  2674  0018F6  B4D8               	btfsc	status,2,c
  2675  0018F8  EF80  F00C         	goto	u3911
  2676  0018FC  EF83  F00C         	goto	u3910
  2677  001900                     u3911:
  2678  001900  FFFF               	dw	65535	; assembler added errata NOP
  2679  001902  EF76  F00C         	goto	l4396
  2680  001906                     u3910:
  2681  001906                     l4398:
  2682  001906  FFFF               	dw	65535	; assembler added errata NOP
  2683                           
  2684                           ;motors.c: 200:     while(keepMovingX || keepMovingY || keepMovingZ){
  2685  001908  5015               	movf	resetPosition@keepMovingX^0,w,c
  2686  00190A  A4D8               	btfss	status,2,c
  2687  00190C  EF8A  F00C         	goto	u3921
  2688  001910  EF8D  F00C         	goto	u3920
  2689  001914                     u3921:
  2690  001914  FFFF               	dw	65535	; assembler added errata NOP
  2691  001916  EFD5  F00B         	goto	l4356
  2692  00191A                     u3920:
  2693  00191A  FFFF               	dw	65535	; assembler added errata NOP
  2694  00191C  5016               	movf	resetPosition@keepMovingY^0,w,c
  2695  00191E  A4D8               	btfss	status,2,c
  2696  001920  EF94  F00C         	goto	u3931
  2697  001924  EF97  F00C         	goto	u3930
  2698  001928                     u3931:
  2699  001928  FFFF               	dw	65535	; assembler added errata NOP
  2700  00192A  EFD5  F00B         	goto	l4356
  2701  00192E                     u3930:
  2702  00192E  FFFF               	dw	65535	; assembler added errata NOP
  2703  001930  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2704  001932  A4D8               	btfss	status,2,c
  2705  001934  EF9E  F00C         	goto	u3941
  2706  001938  EFA1  F00C         	goto	u3940
  2707  00193C                     u3941:
  2708  00193C  FFFF               	dw	65535	; assembler added errata NOP
  2709  00193E  EFD5  F00B         	goto	l4356
  2710  001942                     u3940:
  2711  001942                     l132:
  2712  001942  FFFF               	dw	65535	; assembler added errata NOP
  2713                           
  2714                           ;motors.c: 293:     T0CONbits.TMR0ON = 0;
  2715  001944  9ED5               	bcf	213,7,c	;volatile
  2716                           
  2717                           ;motors.c: 294:     T2CONbits.TMR2ON = 0;
  2718  001946  94CA               	bcf	202,2,c	;volatile
  2719  001948                     
  2720                           ;motors.c: 296:     resetTM0_Temp();
  2721  001948  EC57  F013         	call	_resetTM0_Temp	;wreg free
  2722                           
  2723                           ;motors.c: 297:     resetTM2_Temp();
  2724  00194C  ECF5  F012         	call	_resetTM2_Temp	;wreg free
  2725  001950                     
  2726                           ;motors.c: 299:     TMR0 = 0;
  2727  001950  0E00               	movlw	0
  2728  001952  6ED7               	movwf	215,c	;volatile
  2729  001954  0E00               	movlw	0
  2730  001956  6ED6               	movwf	214,c	;volatile
  2731  001958                     
  2732                           ;motors.c: 300:     TMR2 = 0;
  2733  001958  0E00               	movlw	0
  2734  00195A  6ECC               	movwf	204,c	;volatile
  2735                           
  2736                           ;motors.c: 303:     resetStep();
  2737  00195C  EC5C  F013         	call	_resetStep	;wreg free
  2738  001960                     
  2739                           ;motors.c: 306:     return(tm0Error);
  2740  001960  5059               	movf	_tm0Error^0,w,c
  2741  001962  0012               	return		;funcret
  2742  001964  FFFF               	dw	65535	; errata NOP
  2743  001966                     __end_of_resetPosition:
  2744                           	callstack 0
  2745                           
  2746 ;; *************** function _resetNewSequence *****************
  2747 ;; Defined at:
  2748 ;;		line 92 in file "usart.c"
  2749 ;; Parameters:    Size  Location     Type
  2750 ;;		None
  2751 ;; Auto vars:     Size  Location     Type
  2752 ;;		None
  2753 ;; Return value:  Size  Location     Type
  2754 ;;                  1    wreg      void 
  2755 ;; Registers used:
  2756 ;;		wreg, status,2
  2757 ;; Tracked objects:
  2758 ;;		On entry : 0/0
  2759 ;;		On exit  : 0/0
  2760 ;;		Unchanged: 0/0
  2761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2762 ;;      Params:         0       0       0       0       0       0       0
  2763 ;;      Locals:         0       0       0       0       0       0       0
  2764 ;;      Temps:          0       0       0       0       0       0       0
  2765 ;;      Totals:         0       0       0       0       0       0       0
  2766 ;;Total ram usage:        0 bytes
  2767 ;; Hardware stack levels used:    1
  2768 ;; Hardware stack levels required when called:    4
  2769 ;; This function calls:
  2770 ;;		Nothing
  2771 ;; This function is called by:
  2772 ;;		_main
  2773 ;; This function uses a non-reentrant model
  2774 ;;
  2775                           
  2776                           	psect	text10
  2777  002686                     __ptext10:
  2778                           	callstack 0
  2779  002686                     _resetNewSequence:
  2780                           	callstack 0
  2781  002686  FFFF               	dw	65535	; assembler added errata NOP
  2782  002688                     
  2783                           ;usart.c: 93:     _newSequence = 0;
  2784  002688  0E00               	movlw	0
  2785  00268A  6E5F               	movwf	__newSequence^0,c
  2786  00268C  0012               	return		;funcret
  2787  00268E  FFFF               	dw	65535	; errata NOP
  2788  002690                     __end_of_resetNewSequence:
  2789                           	callstack 0
  2790                           
  2791 ;; *************** function _reduceSeq *****************
  2792 ;; Defined at:
  2793 ;;		line 62 in file "usart.c"
  2794 ;; Parameters:    Size  Location     Type
  2795 ;;		None
  2796 ;; Auto vars:     Size  Location     Type
  2797 ;;		None
  2798 ;; Return value:  Size  Location     Type
  2799 ;;                  1    wreg      void 
  2800 ;; Registers used:
  2801 ;;		status,2, status,0
  2802 ;; Tracked objects:
  2803 ;;		On entry : 0/0
  2804 ;;		On exit  : 0/0
  2805 ;;		Unchanged: 0/0
  2806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2807 ;;      Params:         0       0       0       0       0       0       0
  2808 ;;      Locals:         0       0       0       0       0       0       0
  2809 ;;      Temps:          0       0       0       0       0       0       0
  2810 ;;      Totals:         0       0       0       0       0       0       0
  2811 ;;Total ram usage:        0 bytes
  2812 ;; Hardware stack levels used:    1
  2813 ;; Hardware stack levels required when called:    4
  2814 ;; This function calls:
  2815 ;;		Nothing
  2816 ;; This function is called by:
  2817 ;;		_main
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821                           	psect	text11
  2822  0026E0                     __ptext11:
  2823                           	callstack 0
  2824  0026E0                     _reduceSeq:
  2825                           	callstack 0
  2826  0026E0  FFFF               	dw	65535	; assembler added errata NOP
  2827  0026E2                     
  2828                           ;usart.c: 63:     dataCounter--;
  2829  0026E2  0661               	decf	_dataCounter^0,f,c
  2830  0026E4  0012               	return		;funcret
  2831  0026E6  FFFF               	dw	65535	; errata NOP
  2832  0026E8                     __end_of_reduceSeq:
  2833                           	callstack 0
  2834                           
  2835 ;; *************** function _readSeq *****************
  2836 ;; Defined at:
  2837 ;;		line 76 in file "usart.c"
  2838 ;; Parameters:    Size  Location     Type
  2839 ;;		None
  2840 ;; Auto vars:     Size  Location     Type
  2841 ;;		None
  2842 ;; Return value:  Size  Location     Type
  2843 ;;                  1    wreg      unsigned char 
  2844 ;; Registers used:
  2845 ;;		wreg, status,2
  2846 ;; Tracked objects:
  2847 ;;		On entry : 0/0
  2848 ;;		On exit  : 0/0
  2849 ;;		Unchanged: 0/0
  2850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2851 ;;      Params:         0       0       0       0       0       0       0
  2852 ;;      Locals:         0       0       0       0       0       0       0
  2853 ;;      Temps:          0       0       0       0       0       0       0
  2854 ;;      Totals:         0       0       0       0       0       0       0
  2855 ;;Total ram usage:        0 bytes
  2856 ;; Hardware stack levels used:    1
  2857 ;; Hardware stack levels required when called:    4
  2858 ;; This function calls:
  2859 ;;		Nothing
  2860 ;; This function is called by:
  2861 ;;		_main
  2862 ;; This function uses a non-reentrant model
  2863 ;;
  2864                           
  2865                           	psect	text12
  2866  0026E8                     __ptext12:
  2867                           	callstack 0
  2868  0026E8                     _readSeq:
  2869                           	callstack 0
  2870  0026E8  FFFF               	dw	65535	; assembler added errata NOP
  2871  0026EA                     
  2872                           ;usart.c: 77:     return dataCounter;
  2873  0026EA  5061               	movf	_dataCounter^0,w,c
  2874  0026EC  0012               	return		;funcret
  2875  0026EE  FFFF               	dw	65535	; errata NOP
  2876  0026F0                     __end_of_readSeq:
  2877                           	callstack 0
  2878                           
  2879 ;; *************** function _newSequence *****************
  2880 ;; Defined at:
  2881 ;;		line 84 in file "usart.c"
  2882 ;; Parameters:    Size  Location     Type
  2883 ;;		None
  2884 ;; Auto vars:     Size  Location     Type
  2885 ;;		None
  2886 ;; Return value:  Size  Location     Type
  2887 ;;                  1    wreg      unsigned char 
  2888 ;; Registers used:
  2889 ;;		wreg, status,2
  2890 ;; Tracked objects:
  2891 ;;		On entry : 0/0
  2892 ;;		On exit  : 0/0
  2893 ;;		Unchanged: 0/0
  2894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2895 ;;      Params:         0       0       0       0       0       0       0
  2896 ;;      Locals:         0       0       0       0       0       0       0
  2897 ;;      Temps:          0       0       0       0       0       0       0
  2898 ;;      Totals:         0       0       0       0       0       0       0
  2899 ;;Total ram usage:        0 bytes
  2900 ;; Hardware stack levels used:    1
  2901 ;; Hardware stack levels required when called:    4
  2902 ;; This function calls:
  2903 ;;		Nothing
  2904 ;; This function is called by:
  2905 ;;		_main
  2906 ;; This function uses a non-reentrant model
  2907 ;;
  2908                           
  2909                           	psect	text13
  2910  0026F0                     __ptext13:
  2911                           	callstack 0
  2912  0026F0                     _newSequence:
  2913                           	callstack 0
  2914  0026F0  FFFF               	dw	65535	; assembler added errata NOP
  2915  0026F2                     
  2916                           ;usart.c: 85:     return _newSequence;
  2917  0026F2  505F               	movf	__newSequence^0,w,c
  2918  0026F4  0012               	return		;funcret
  2919  0026F6  FFFF               	dw	65535	; errata NOP
  2920  0026F8                     __end_of_newSequence:
  2921                           	callstack 0
  2922                           
  2923 ;; *************** function _interruptInit *****************
  2924 ;; Defined at:
  2925 ;;		line 35 in file "interrupt.c"
  2926 ;; Parameters:    Size  Location     Type
  2927 ;;		None
  2928 ;; Auto vars:     Size  Location     Type
  2929 ;;		None
  2930 ;; Return value:  Size  Location     Type
  2931 ;;                  1    wreg      void 
  2932 ;; Registers used:
  2933 ;;		None
  2934 ;; Tracked objects:
  2935 ;;		On entry : 0/0
  2936 ;;		On exit  : 0/0
  2937 ;;		Unchanged: 0/0
  2938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2939 ;;      Params:         0       0       0       0       0       0       0
  2940 ;;      Locals:         0       0       0       0       0       0       0
  2941 ;;      Temps:          0       0       0       0       0       0       0
  2942 ;;      Totals:         0       0       0       0       0       0       0
  2943 ;;Total ram usage:        0 bytes
  2944 ;; Hardware stack levels used:    1
  2945 ;; Hardware stack levels required when called:    4
  2946 ;; This function calls:
  2947 ;;		Nothing
  2948 ;; This function is called by:
  2949 ;;		_main
  2950 ;; This function uses a non-reentrant model
  2951 ;;
  2952                           
  2953                           	psect	text14
  2954  0024AC                     __ptext14:
  2955                           	callstack 0
  2956  0024AC                     _interruptInit:
  2957                           	callstack 0
  2958  0024AC  FFFF               	dw	65535	; assembler added errata NOP
  2959  0024AE                     
  2960                           ;interrupt.c: 37:     if(!INTCONbits.GIE){
  2961  0024AE  BEF2               	btfsc	242,7,c	;volatile
  2962  0024B0  EF5C  F012         	goto	u3951
  2963  0024B4  EF5F  F012         	goto	u3950
  2964  0024B8                     u3951:
  2965  0024B8  FFFF               	dw	65535	; assembler added errata NOP
  2966  0024BA  EF61  F012         	goto	l449
  2967  0024BE                     u3950:
  2968  0024BE  FFFF               	dw	65535	; assembler added errata NOP
  2969  0024C0                     
  2970                           ;interrupt.c: 38:         INTCONbits.GIE = 1;
  2971  0024C0  8EF2               	bsf	242,7,c	;volatile
  2972  0024C2                     l449:
  2973  0024C2  FFFF               	dw	65535	; assembler added errata NOP
  2974                           
  2975                           ;interrupt.c: 40:     if(!INTCONbits.PEIE){
  2976  0024C4  BCF2               	btfsc	242,6,c	;volatile
  2977  0024C6  EF67  F012         	goto	u3961
  2978  0024CA  EF6A  F012         	goto	u3960
  2979  0024CE                     u3961:
  2980  0024CE  FFFF               	dw	65535	; assembler added errata NOP
  2981  0024D0  EF6C  F012         	goto	l450
  2982  0024D4                     u3960:
  2983  0024D4  FFFF               	dw	65535	; assembler added errata NOP
  2984  0024D6                     
  2985                           ;interrupt.c: 41:         INTCONbits.PEIE = 1;
  2986  0024D6  8CF2               	bsf	242,6,c	;volatile
  2987  0024D8                     l450:
  2988  0024D8  FFFF               	dw	65535	; assembler added errata NOP
  2989                           
  2990                           ;interrupt.c: 45:     RCONbits.IPEN = 1;
  2991  0024DA  8ED0               	bsf	208,7,c	;volatile
  2992                           
  2993                           ;interrupt.c: 46:     INTCONbits.T0IE = 1;
  2994  0024DC  8AF2               	bsf	242,5,c	;volatile
  2995                           
  2996                           ;interrupt.c: 47:     PIE1bits.TMR1IE = 1;
  2997  0024DE  809D               	bsf	157,0,c	;volatile
  2998                           
  2999                           ;interrupt.c: 48:     PIE1bits.TMR2IE = 1;
  3000  0024E0  829D               	bsf	157,1,c	;volatile
  3001                           
  3002                           ;interrupt.c: 49:     PIE1bits.RC1IE = 1;
  3003  0024E2  8A9D               	bsf	157,5,c	;volatile
  3004  0024E4  0012               	return		;funcret
  3005  0024E6  FFFF               	dw	65535	; errata NOP
  3006  0024E8                     __end_of_interruptInit:
  3007                           	callstack 0
  3008                           
  3009 ;; *************** function _initPinMotors *****************
  3010 ;; Defined at:
  3011 ;;		line 46 in file "motors.c"
  3012 ;; Parameters:    Size  Location     Type
  3013 ;;		None
  3014 ;; Auto vars:     Size  Location     Type
  3015 ;;		None
  3016 ;; Return value:  Size  Location     Type
  3017 ;;                  1    wreg      void 
  3018 ;; Registers used:
  3019 ;;		wreg, status,2, status,0
  3020 ;; Tracked objects:
  3021 ;;		On entry : 0/0
  3022 ;;		On exit  : 0/0
  3023 ;;		Unchanged: 0/0
  3024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3025 ;;      Params:         0       0       0       0       0       0       0
  3026 ;;      Locals:         0       0       0       0       0       0       0
  3027 ;;      Temps:          0       0       0       0       0       0       0
  3028 ;;      Totals:         0       0       0       0       0       0       0
  3029 ;;Total ram usage:        0 bytes
  3030 ;; Hardware stack levels used:    1
  3031 ;; Hardware stack levels required when called:    4
  3032 ;; This function calls:
  3033 ;;		Nothing
  3034 ;; This function is called by:
  3035 ;;		_main
  3036 ;; This function uses a non-reentrant model
  3037 ;;
  3038                           
  3039                           	psect	text15
  3040  002548                     __ptext15:
  3041                           	callstack 0
  3042  002548                     _initPinMotors:
  3043                           	callstack 0
  3044  002548  FFFF               	dw	65535	; assembler added errata NOP
  3045  00254A                     
  3046                           ;motors.c: 48:     ADCON1bits.PCFG = 0x06;
  3047  00254A  50C1               	movf	193,w,c	;volatile
  3048  00254C  0BF0               	andlw	-16
  3049  00254E  0906               	iorlw	6
  3050  002550  6EC1               	movwf	193,c	;volatile
  3051  002552                     
  3052                           ;motors.c: 49:     TRISA &= 0b11010001;
  3053  002552  0ED1               	movlw	209
  3054  002554  1692               	andwf	146,f,c	;volatile
  3055  002556                     
  3056                           ;motors.c: 51:     TRISB &= 0b00000010;
  3057  002556  0E02               	movlw	2
  3058  002558  1693               	andwf	147,f,c	;volatile
  3059  00255A                     
  3060                           ;motors.c: 52:     TRISC &= 0b11000000;
  3061  00255A  0EC0               	movlw	192
  3062  00255C  1694               	andwf	148,f,c	;volatile
  3063  00255E                     
  3064                           ;motors.c: 53:     TRISD &= 0b11000000;
  3065  00255E  0EC0               	movlw	192
  3066  002560  1695               	andwf	149,f,c	;volatile
  3067  002562                     
  3068                           ;motors.c: 56:     TRISEbits.TRISE0 = 1;
  3069  002562  8096               	bsf	150,0,c	;volatile
  3070  002564                     
  3071                           ;motors.c: 57:     TRISEbits.TRISE1 = 1;
  3072  002564  8296               	bsf	150,1,c	;volatile
  3073  002566                     
  3074                           ;motors.c: 58:     TRISEbits.TRISE2 = 1;
  3075  002566  8496               	bsf	150,2,c	;volatile
  3076  002568                     
  3077                           ;motors.c: 61:     TRISDbits.TRISD7 = 1;
  3078  002568  8E95               	bsf	149,7,c	;volatile
  3079  00256A  0012               	return		;funcret
  3080  00256C  FFFF               	dw	65535	; errata NOP
  3081  00256E                     __end_of_initPinMotors:
  3082                           	callstack 0
  3083                           
  3084 ;; *************** function _initADC *****************
  3085 ;; Defined at:
  3086 ;;		line 18 in file "adc.c"
  3087 ;; Parameters:    Size  Location     Type
  3088 ;;		None
  3089 ;; Auto vars:     Size  Location     Type
  3090 ;;		None
  3091 ;; Return value:  Size  Location     Type
  3092 ;;                  1    wreg      void 
  3093 ;; Registers used:
  3094 ;;		wreg, status,2
  3095 ;; Tracked objects:
  3096 ;;		On entry : 0/0
  3097 ;;		On exit  : 0/0
  3098 ;;		Unchanged: 0/0
  3099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3100 ;;      Params:         0       0       0       0       0       0       0
  3101 ;;      Locals:         0       0       0       0       0       0       0
  3102 ;;      Temps:          0       0       0       0       0       0       0
  3103 ;;      Totals:         0       0       0       0       0       0       0
  3104 ;;Total ram usage:        0 bytes
  3105 ;; Hardware stack levels used:    1
  3106 ;; Hardware stack levels required when called:    4
  3107 ;; This function calls:
  3108 ;;		Nothing
  3109 ;; This function is called by:
  3110 ;;		_main
  3111 ;; This function uses a non-reentrant model
  3112 ;;
  3113                           
  3114                           	psect	text16
  3115  00256E                     __ptext16:
  3116                           	callstack 0
  3117  00256E                     _initADC:
  3118                           	callstack 0
  3119  00256E  FFFF               	dw	65535	; assembler added errata NOP
  3120  002570                     
  3121                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  3122  002570  50C2               	movf	194,w,c	;volatile
  3123  002572  0B3F               	andlw	-193
  3124  002574  0940               	iorlw	64
  3125  002576  6EC2               	movwf	194,c	;volatile
  3126  002578                     
  3127                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  3128  002578  8CC1               	bsf	193,6,c	;volatile
  3129                           
  3130                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  3131  00257A  0EC7               	movlw	-57
  3132  00257C  16C2               	andwf	194,f,c	;volatile
  3133  00257E                     
  3134                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  3135  00257E  94C2               	bcf	194,2,c	;volatile
  3136  002580                     
  3137                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  3138  002580  90C2               	bcf	194,0,c	;volatile
  3139  002582                     
  3140                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  3141  002582  9EC1               	bcf	193,7,c	;volatile
  3142                           
  3143                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  3144  002584  50C1               	movf	193,w,c	;volatile
  3145  002586  0BF0               	andlw	-16
  3146  002588  090E               	iorlw	14
  3147  00258A  6EC1               	movwf	193,c	;volatile
  3148  00258C                     
  3149                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  3150  00258C  8C9D               	bsf	157,6,c	;volatile
  3151  00258E                     
  3152                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  3153  00258E  8C9F               	bsf	159,6,c	;volatile
  3154  002590  0012               	return		;funcret
  3155  002592  FFFF               	dw	65535	; errata NOP
  3156  002594                     __end_of_initADC:
  3157                           	callstack 0
  3158                           
  3159 ;; *************** function _increaseSeq *****************
  3160 ;; Defined at:
  3161 ;;		line 69 in file "usart.c"
  3162 ;; Parameters:    Size  Location     Type
  3163 ;;		None
  3164 ;; Auto vars:     Size  Location     Type
  3165 ;;		None
  3166 ;; Return value:  Size  Location     Type
  3167 ;;                  1    wreg      void 
  3168 ;; Registers used:
  3169 ;;		status,2, status,0
  3170 ;; Tracked objects:
  3171 ;;		On entry : 0/0
  3172 ;;		On exit  : 0/0
  3173 ;;		Unchanged: 0/0
  3174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3175 ;;      Params:         0       0       0       0       0       0       0
  3176 ;;      Locals:         0       0       0       0       0       0       0
  3177 ;;      Temps:          0       0       0       0       0       0       0
  3178 ;;      Totals:         0       0       0       0       0       0       0
  3179 ;;Total ram usage:        0 bytes
  3180 ;; Hardware stack levels used:    1
  3181 ;; Hardware stack levels required when called:    4
  3182 ;; This function calls:
  3183 ;;		Nothing
  3184 ;; This function is called by:
  3185 ;;		_main
  3186 ;; This function uses a non-reentrant model
  3187 ;;
  3188                           
  3189                           	psect	text17
  3190  0026F8                     __ptext17:
  3191                           	callstack 0
  3192  0026F8                     _increaseSeq:
  3193                           	callstack 0
  3194  0026F8  FFFF               	dw	65535	; assembler added errata NOP
  3195  0026FA                     
  3196                           ;usart.c: 70:     dataCounter++;
  3197  0026FA  2A61               	incf	_dataCounter^0,f,c
  3198  0026FC  0012               	return		;funcret
  3199  0026FE  FFFF               	dw	65535	; errata NOP
  3200  002700                     __end_of_increaseSeq:
  3201                           	callstack 0
  3202                           
  3203 ;; *************** function _getNewSequence *****************
  3204 ;; Defined at:
  3205 ;;		line 55 in file "usart.c"
  3206 ;; Parameters:    Size  Location     Type
  3207 ;;		None
  3208 ;; Auto vars:     Size  Location     Type
  3209 ;;		None
  3210 ;; Return value:  Size  Location     Type
  3211 ;;                  2   17[COMRAM] PTR struct .
  3212 ;; Registers used:
  3213 ;;		wreg, status,2, status,0
  3214 ;; Tracked objects:
  3215 ;;		On entry : 0/0
  3216 ;;		On exit  : 0/0
  3217 ;;		Unchanged: 0/0
  3218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3219 ;;      Params:         2       0       0       0       0       0       0
  3220 ;;      Locals:         0       0       0       0       0       0       0
  3221 ;;      Temps:          0       0       0       0       0       0       0
  3222 ;;      Totals:         2       0       0       0       0       0       0
  3223 ;;Total ram usage:        2 bytes
  3224 ;; Hardware stack levels used:    1
  3225 ;; Hardware stack levels required when called:    4
  3226 ;; This function calls:
  3227 ;;		Nothing
  3228 ;; This function is called by:
  3229 ;;		_main
  3230 ;; This function uses a non-reentrant model
  3231 ;;
  3232                           
  3233                           	psect	text18
  3234  00261C                     __ptext18:
  3235                           	callstack 0
  3236  00261C                     _getNewSequence:
  3237                           	callstack 0
  3238  00261C  FFFF               	dw	65535	; assembler added errata NOP
  3239  00261E                     
  3240                           ;usart.c: 56:     return(&newSequenceData);
  3241  00261E  0EDA               	movlw	low _newSequenceData
  3242  002620  6E12               	movwf	?_getNewSequence^0,c
  3243  002622  0E00               	movlw	high _newSequenceData
  3244  002624  6E13               	movwf	(?_getNewSequence+1)^0,c
  3245  002626  0012               	return		;funcret
  3246  002628  FFFF               	dw	65535	; errata NOP
  3247  00262A                     __end_of_getNewSequence:
  3248                           	callstack 0
  3249                           
  3250 ;; *************** function _executeData *****************
  3251 ;; Defined at:
  3252 ;;		line 85 in file "main.c"
  3253 ;; Parameters:    Size  Location     Type
  3254 ;;		None
  3255 ;; Auto vars:     Size  Location     Type
  3256 ;;  data            2    9[BANK0 ] PTR struct .
  3257 ;;		 -> dataSequence(20), 
  3258 ;;  errCode         1   11[BANK0 ] unsigned char 
  3259 ;; Return value:  Size  Location     Type
  3260 ;;                  1    wreg      unsigned char 
  3261 ;; Registers used:
  3262 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3263 ;; Tracked objects:
  3264 ;;		On entry : 0/0
  3265 ;;		On exit  : 0/0
  3266 ;;		Unchanged: 0/0
  3267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3268 ;;      Params:         0       0       0       0       0       0       0
  3269 ;;      Locals:         0       3       0       0       0       0       0
  3270 ;;      Temps:          0       2       0       0       0       0       0
  3271 ;;      Totals:         0       5       0       0       0       0       0
  3272 ;;Total ram usage:        5 bytes
  3273 ;; Hardware stack levels used:    1
  3274 ;; Hardware stack levels required when called:    6
  3275 ;; This function calls:
  3276 ;;		_getData
  3277 ;;		_liftArm
  3278 ;;		_moveToPoint
  3279 ;;		_pickObject
  3280 ;;		_releaseObj
  3281 ;;		_rotateObj
  3282 ;;		_touchObject
  3283 ;;		_touchTherm
  3284 ;; This function is called by:
  3285 ;;		_main
  3286 ;; This function uses a non-reentrant model
  3287 ;;
  3288                           
  3289                           	psect	text19
  3290  000D8C                     __ptext19:
  3291                           	callstack 0
  3292  000D8C                     _executeData:
  3293                           	callstack 0
  3294  000D8C  FFFF               	dw	65535	; assembler added errata NOP
  3295  000D8E                     
  3296                           ;main.c: 86:     t_sequence *data = getData();
  3297  000D8E  EC15  F013         	call	_getData	;wreg free
  3298  000D92  C012  F0EB         	movff	?_getData,executeData@data
  3299  000D96  C013  F0EC         	movff	?_getData+1,executeData@data+1
  3300  000D9A                     
  3301                           ;main.c: 92:     switch(data->feederLine){
  3302  000D9A  EF78  F007         	goto	l4568
  3303  000D9E                     l4540:
  3304  000D9E  FFFF               	dw	65535	; assembler added errata NOP
  3305                           
  3306                           ; BSR set to: 0
  3307                           ;main.c: 95:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0]
      +                          , feeder1Pos[1]);
  3308  000DA0  C04C  F015         	movff	_posVector,moveToPoint@x1
  3309  000DA4  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3310  000DA6  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3311  000DAA  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3312  000DAC  0E11               	movlw	low _feeder1Pos
  3313  000DAE  6EF6               	movwf	tblptrl,c
  3314  000DB0                     	if	1	;There is more than 1 active tblptr byte
  3315  000DB0  0E06               	movlw	high _feeder1Pos
  3316  000DB2  6EF7               	movwf	tblptrh,c
  3317  000DB4                     	endif
  3318  000DB4                     	if	0	;There are less than 3 active tblptr bytes
  3319  000DB4                     	endif
  3320  000DB4  0008               	tblrd		*
  3321  000DB6  FFFF               	dw	65535	; errata NOP
  3322  000DB8  50F5               	movf	tablat,w,c
  3323  000DBA  6E19               	movwf	moveToPoint@x2^0,c
  3324  000DBC  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3325  000DBE  0E12               	movlw	low (_feeder1Pos+1)
  3326  000DC0  6EF6               	movwf	tblptrl,c
  3327  000DC2  0E06               	movlw	high (_feeder1Pos+1)
  3328  000DC4  6EF7               	movwf	tblptrh,c
  3329  000DC6                     	if	0	;tblptru may be non-zero
  3330  000DC6                     	endif
  3331  000DC6                     	if	0	;tblptru may be non-zero
  3332  000DC6                     	endif
  3333  000DC6  0008               	tblrd		*
  3334  000DC8  FFFF               	dw	65535	; errata NOP
  3335  000DCA  50F5               	movf	tablat,w,c
  3336  000DCC  6E1B               	movwf	moveToPoint@y2^0,c
  3337  000DCE  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3338  000DD0  EC24  F005         	call	_moveToPoint	;wreg free
  3339  000DD4  0100               	movlb	0	; () banked
  3340  000DD6  6FED               	movwf	executeData@errCode& (0+255),b
  3341  000DD8                     
  3342                           ; BSR set to: 0
  3343                           ;main.c: 97:             posVector[0] = feeder1Pos[0];
  3344  000DD8  0E11               	movlw	low _feeder1Pos
  3345  000DDA  6EF6               	movwf	tblptrl,c
  3346  000DDC                     	if	1	;There is more than 1 active tblptr byte
  3347  000DDC  0E06               	movlw	high _feeder1Pos
  3348  000DDE  6EF7               	movwf	tblptrh,c
  3349  000DE0                     	endif
  3350  000DE0                     	if	0	;There are less than 3 active tblptr bytes
  3351  000DE0                     	endif
  3352  000DE0  0008               	tblrd		*
  3353  000DE2  FFFF               	dw	65535	; errata NOP
  3354  000DE4  CFF5 F04C          	movff	tablat,_posVector
  3355  000DE8                     
  3356                           ; BSR set to: 0
  3357                           ;main.c: 98:             posVector[1] = feeder1Pos[1];
  3358  000DE8  0E12               	movlw	low (_feeder1Pos+1)
  3359  000DEA  6EF6               	movwf	tblptrl,c
  3360  000DEC  0E06               	movlw	high (_feeder1Pos+1)
  3361  000DEE  6EF7               	movwf	tblptrh,c
  3362  000DF0                     	if	0	;tblptru may be non-zero
  3363  000DF0                     	endif
  3364  000DF0                     	if	0	;tblptru may be non-zero
  3365  000DF0                     	endif
  3366  000DF0  0008               	tblrd		*
  3367  000DF2  FFFF               	dw	65535	; errata NOP
  3368  000DF4  CFF5 F04D          	movff	tablat,_posVector+1
  3369                           
  3370                           ;main.c: 99:             break;
  3371  000DF8  EF9C  F007         	goto	l4570
  3372  000DFC                     l4546:
  3373  000DFC  FFFF               	dw	65535	; assembler added errata NOP
  3374                           
  3375                           ; BSR set to: 0
  3376                           ;main.c: 101:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3377  000DFE  C04C  F015         	movff	_posVector,moveToPoint@x1
  3378  000E02  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3379  000E04  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3380  000E08  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3381  000E0A  0E0F               	movlw	low _feeder2Pos
  3382  000E0C  6EF6               	movwf	tblptrl,c
  3383  000E0E                     	if	1	;There is more than 1 active tblptr byte
  3384  000E0E  0E06               	movlw	high _feeder2Pos
  3385  000E10  6EF7               	movwf	tblptrh,c
  3386  000E12                     	endif
  3387  000E12                     	if	0	;There are less than 3 active tblptr bytes
  3388  000E12                     	endif
  3389  000E12  0008               	tblrd		*
  3390  000E14  FFFF               	dw	65535	; errata NOP
  3391  000E16  50F5               	movf	tablat,w,c
  3392  000E18  6E19               	movwf	moveToPoint@x2^0,c
  3393  000E1A  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3394  000E1C  0E10               	movlw	low (_feeder2Pos+1)
  3395  000E1E  6EF6               	movwf	tblptrl,c
  3396  000E20  0E06               	movlw	high (_feeder2Pos+1)
  3397  000E22  6EF7               	movwf	tblptrh,c
  3398  000E24                     	if	0	;tblptru may be non-zero
  3399  000E24                     	endif
  3400  000E24                     	if	0	;tblptru may be non-zero
  3401  000E24                     	endif
  3402  000E24  0008               	tblrd		*
  3403  000E26  FFFF               	dw	65535	; errata NOP
  3404  000E28  50F5               	movf	tablat,w,c
  3405  000E2A  6E1B               	movwf	moveToPoint@y2^0,c
  3406  000E2C  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3407  000E2E  EC24  F005         	call	_moveToPoint	;wreg free
  3408  000E32  0100               	movlb	0	; () banked
  3409  000E34  6FED               	movwf	executeData@errCode& (0+255),b
  3410  000E36                     
  3411                           ; BSR set to: 0
  3412                           ;main.c: 102:             posVector[0] = feeder2Pos[0];
  3413  000E36  0E0F               	movlw	low _feeder2Pos
  3414  000E38  6EF6               	movwf	tblptrl,c
  3415  000E3A                     	if	1	;There is more than 1 active tblptr byte
  3416  000E3A  0E06               	movlw	high _feeder2Pos
  3417  000E3C  6EF7               	movwf	tblptrh,c
  3418  000E3E                     	endif
  3419  000E3E                     	if	0	;There are less than 3 active tblptr bytes
  3420  000E3E                     	endif
  3421  000E3E  0008               	tblrd		*
  3422  000E40  FFFF               	dw	65535	; errata NOP
  3423  000E42  CFF5 F04C          	movff	tablat,_posVector
  3424  000E46                     
  3425                           ; BSR set to: 0
  3426                           ;main.c: 103:             posVector[1] = feeder2Pos[1];
  3427  000E46  0E10               	movlw	low (_feeder2Pos+1)
  3428  000E48  6EF6               	movwf	tblptrl,c
  3429  000E4A  0E06               	movlw	high (_feeder2Pos+1)
  3430  000E4C  6EF7               	movwf	tblptrh,c
  3431  000E4E                     	if	0	;tblptru may be non-zero
  3432  000E4E                     	endif
  3433  000E4E                     	if	0	;tblptru may be non-zero
  3434  000E4E                     	endif
  3435  000E4E  0008               	tblrd		*
  3436  000E50  FFFF               	dw	65535	; errata NOP
  3437  000E52  CFF5 F04D          	movff	tablat,_posVector+1
  3438                           
  3439                           ;main.c: 104:             break;
  3440  000E56  EF9C  F007         	goto	l4570
  3441  000E5A                     l4552:
  3442  000E5A  FFFF               	dw	65535	; assembler added errata NOP
  3443                           
  3444                           ; BSR set to: 0
  3445                           ;main.c: 106:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3446  000E5C  C04C  F015         	movff	_posVector,moveToPoint@x1
  3447  000E60  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3448  000E62  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3449  000E66  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3450  000E68  0E0D               	movlw	low _feeder3Pos
  3451  000E6A  6EF6               	movwf	tblptrl,c
  3452  000E6C                     	if	1	;There is more than 1 active tblptr byte
  3453  000E6C  0E06               	movlw	high _feeder3Pos
  3454  000E6E  6EF7               	movwf	tblptrh,c
  3455  000E70                     	endif
  3456  000E70                     	if	0	;There are less than 3 active tblptr bytes
  3457  000E70                     	endif
  3458  000E70  0008               	tblrd		*
  3459  000E72  FFFF               	dw	65535	; errata NOP
  3460  000E74  50F5               	movf	tablat,w,c
  3461  000E76  6E19               	movwf	moveToPoint@x2^0,c
  3462  000E78  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3463  000E7A  0E0E               	movlw	low (_feeder3Pos+1)
  3464  000E7C  6EF6               	movwf	tblptrl,c
  3465  000E7E  0E06               	movlw	high (_feeder3Pos+1)
  3466  000E80  6EF7               	movwf	tblptrh,c
  3467  000E82                     	if	0	;tblptru may be non-zero
  3468  000E82                     	endif
  3469  000E82                     	if	0	;tblptru may be non-zero
  3470  000E82                     	endif
  3471  000E82  0008               	tblrd		*
  3472  000E84  FFFF               	dw	65535	; errata NOP
  3473  000E86  50F5               	movf	tablat,w,c
  3474  000E88  6E1B               	movwf	moveToPoint@y2^0,c
  3475  000E8A  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3476  000E8C  EC24  F005         	call	_moveToPoint	;wreg free
  3477  000E90  0100               	movlb	0	; () banked
  3478  000E92  6FED               	movwf	executeData@errCode& (0+255),b
  3479  000E94                     
  3480                           ; BSR set to: 0
  3481                           ;main.c: 107:             posVector[0] = feeder3Pos[0];
  3482  000E94  0E0D               	movlw	low _feeder3Pos
  3483  000E96  6EF6               	movwf	tblptrl,c
  3484  000E98                     	if	1	;There is more than 1 active tblptr byte
  3485  000E98  0E06               	movlw	high _feeder3Pos
  3486  000E9A  6EF7               	movwf	tblptrh,c
  3487  000E9C                     	endif
  3488  000E9C                     	if	0	;There are less than 3 active tblptr bytes
  3489  000E9C                     	endif
  3490  000E9C  0008               	tblrd		*
  3491  000E9E  FFFF               	dw	65535	; errata NOP
  3492  000EA0  CFF5 F04C          	movff	tablat,_posVector
  3493  000EA4                     
  3494                           ; BSR set to: 0
  3495                           ;main.c: 108:             posVector[1] = feeder3Pos[1];
  3496  000EA4  0E0E               	movlw	low (_feeder3Pos+1)
  3497  000EA6  6EF6               	movwf	tblptrl,c
  3498  000EA8  0E06               	movlw	high (_feeder3Pos+1)
  3499  000EAA  6EF7               	movwf	tblptrh,c
  3500  000EAC                     	if	0	;tblptru may be non-zero
  3501  000EAC                     	endif
  3502  000EAC                     	if	0	;tblptru may be non-zero
  3503  000EAC                     	endif
  3504  000EAC  0008               	tblrd		*
  3505  000EAE  FFFF               	dw	65535	; errata NOP
  3506  000EB0  CFF5 F04D          	movff	tablat,_posVector+1
  3507                           
  3508                           ;main.c: 109:             break;
  3509  000EB4  EF9C  F007         	goto	l4570
  3510  000EB8                     l4558:
  3511  000EB8  FFFF               	dw	65535	; assembler added errata NOP
  3512                           
  3513                           ; BSR set to: 0
  3514                           ;main.c: 113:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3515  000EBA  C04C  F015         	movff	_posVector,moveToPoint@x1
  3516  000EBE  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3517  000EC0  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3518  000EC4  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3519  000EC6  C055  F019         	movff	_newFeeder,moveToPoint@x2
  3520  000ECA  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3521  000ECC  C056  F01B         	movff	_newFeeder+1,moveToPoint@y2
  3522  000ED0  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3523  000ED2  EC24  F005         	call	_moveToPoint	;wreg free
  3524  000ED6  0100               	movlb	0	; () banked
  3525  000ED8  6FED               	movwf	executeData@errCode& (0+255),b
  3526  000EDA                     
  3527                           ; BSR set to: 0
  3528                           ;main.c: 114:             posVector[0] = newFeeder[0];
  3529  000EDA  C055  F04C         	movff	_newFeeder,_posVector
  3530  000EDE                     
  3531                           ; BSR set to: 0
  3532                           ;main.c: 115:             posVector[1] = newFeeder[1];
  3533  000EDE  C056  F04D         	movff	_newFeeder+1,_posVector+1
  3534                           
  3535                           ;main.c: 116:             break;
  3536  000EE2  EF9C  F007         	goto	l4570
  3537  000EE6                     l4564:
  3538  000EE6  FFFF               	dw	65535	; assembler added errata NOP
  3539                           
  3540                           ; BSR set to: 0
  3541                           ;main.c: 120:             errCode = 1;
  3542  000EE8  0E01               	movlw	1
  3543  000EEA  6FED               	movwf	executeData@errCode& (0+255),b
  3544                           
  3545                           ;main.c: 121:             break;
  3546  000EEC  EF9C  F007         	goto	l4570
  3547  000EF0                     l4568:
  3548  000EF0  FFFF               	dw	65535	; assembler added errata NOP
  3549  000EF2  C0EB  FFD9         	movff	executeData@data,fsr2l
  3550  000EF6  C0EC  FFDA         	movff	executeData@data+1,fsr2h
  3551  000EFA  50DF               	movf	indf2,w,c
  3552  000EFC  0100               	movlb	0	; () banked
  3553  000EFE  6FE9               	movwf	??_executeData& (0+255),b
  3554  000F00  6BEA               	clrf	(??_executeData+1)& (0+255),b
  3555                           
  3556                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3557                           ; Switch size 1, requested type "simple"
  3558                           ; Number of cases is 1, Range of values is 0 to 0
  3559                           ; switch strategies available:
  3560                           ; Name         Instructions Cycles
  3561                           ; simple_byte            4     3 (average)
  3562                           ;	Chosen strategy is simple_byte
  3563  000F02  51EA               	movf	(??_executeData+1)& (0+255),w,b
  3564  000F04  0A00               	xorlw	0	; case 0
  3565  000F06  B4D8               	btfsc	status,2,c
  3566  000F08  EF88  F007         	goto	l4848
  3567  000F0C  EF73  F007         	goto	l4564
  3568  000F10                     l4848:
  3569  000F10  FFFF               	dw	65535	; assembler added errata NOP
  3570                           
  3571                           ; BSR set to: 0
  3572                           ; Switch size 1, requested type "simple"
  3573                           ; Number of cases is 4, Range of values is 0 to 255
  3574                           ; switch strategies available:
  3575                           ; Name         Instructions Cycles
  3576                           ; simple_byte           13     7 (average)
  3577                           ;	Chosen strategy is simple_byte
  3578  000F12  51E9               	movf	??_executeData& (0+255),w,b
  3579  000F14  0A00               	xorlw	0	; case 0
  3580  000F16  B4D8               	btfsc	status,2,c
  3581  000F18  EFCF  F006         	goto	l4540
  3582  000F1C  0A01               	xorlw	1	; case 1
  3583  000F1E  B4D8               	btfsc	status,2,c
  3584  000F20  EFFE  F006         	goto	l4546
  3585  000F24  0A03               	xorlw	3	; case 2
  3586  000F26  B4D8               	btfsc	status,2,c
  3587  000F28  EF2D  F007         	goto	l4552
  3588  000F2C  0AFD               	xorlw	253	; case 255
  3589  000F2E  B4D8               	btfsc	status,2,c
  3590  000F30  EF5C  F007         	goto	l4558
  3591  000F34  EF73  F007         	goto	l4564
  3592  000F38                     l4570:
  3593  000F38  FFFF               	dw	65535	; assembler added errata NOP
  3594                           
  3595                           ; BSR set to: 0
  3596                           ;main.c: 125:     if(!errCode){
  3597  000F3A  51ED               	movf	executeData@errCode& (0+255),w,b
  3598  000F3C  A4D8               	btfss	status,2,c
  3599  000F3E  EFA3  F007         	goto	u4061
  3600  000F42  EFA6  F007         	goto	u4060
  3601  000F46                     u4061:
  3602  000F46  FFFF               	dw	65535	; assembler added errata NOP
  3603  000F48  EFB4  F007         	goto	l4576
  3604  000F4C                     u4060:
  3605  000F4C  FFFF               	dw	65535	; assembler added errata NOP
  3606  000F4E                     
  3607                           ; BSR set to: 0
  3608                           ;main.c: 128:         errCode = touchObject();
  3609  000F4E  EC91  F00F         	call	_touchObject	;wreg free
  3610  000F52  0100               	movlb	0	; () banked
  3611  000F54  6FED               	movwf	executeData@errCode& (0+255),b
  3612  000F56                     
  3613                           ; BSR set to: 0
  3614                           ;main.c: 129:         if(errCode != 0){
  3615  000F56  51ED               	movf	executeData@errCode& (0+255),w,b
  3616  000F58  B4D8               	btfsc	status,2,c
  3617  000F5A  EFB1  F007         	goto	u4071
  3618  000F5E  EFB4  F007         	goto	u4070
  3619  000F62                     u4071:
  3620  000F62  FFFF               	dw	65535	; assembler added errata NOP
  3621  000F64  EFB8  F007         	goto	l4580
  3622  000F68                     u4070:
  3623  000F68                     l4576:
  3624  000F68  FFFF               	dw	65535	; assembler added errata NOP
  3625                           
  3626                           ; BSR set to: 0
  3627                           ;main.c: 130:             return(errCode);
  3628  000F6A  51ED               	movf	executeData@errCode& (0+255),w,b
  3629  000F6C  EF3E  F008         	goto	l348
  3630  000F70                     l4580:
  3631  000F70  FFFF               	dw	65535	; assembler added errata NOP
  3632                           
  3633                           ; BSR set to: 0
  3634                           ;main.c: 133:         pickObject();
  3635  000F72  EC8C  F012         	call	_pickObject	;wreg free
  3636  000F76                     
  3637                           ;main.c: 136:         errCode = liftArm();
  3638  000F76  EC13  F011         	call	_liftArm	;wreg free
  3639  000F7A  0100               	movlb	0	; () banked
  3640  000F7C  6FED               	movwf	executeData@errCode& (0+255),b
  3641  000F7E                     
  3642                           ; BSR set to: 0
  3643                           ;main.c: 137:         if(errCode != 0){
  3644  000F7E  51ED               	movf	executeData@errCode& (0+255),w,b
  3645  000F80  B4D8               	btfsc	status,2,c
  3646  000F82  EFC5  F007         	goto	u4081
  3647  000F86  EFC8  F007         	goto	u4080
  3648  000F8A                     u4081:
  3649  000F8A  FFFF               	dw	65535	; assembler added errata NOP
  3650  000F8C  EFCB  F007         	goto	l4590
  3651  000F90                     u4080:
  3652  000F90  FFFF               	dw	65535	; assembler added errata NOP
  3653  000F92  EFB4  F007         	goto	l4576
  3654  000F96                     l4590:
  3655  000F96  FFFF               	dw	65535	; assembler added errata NOP
  3656                           
  3657                           ; BSR set to: 0
  3658                           ;main.c: 142:         errCode = moveToPoint(posVector[0], posVector[1], data->posX, data
      +                          ->posY);
  3659  000F98  C04C  F015         	movff	_posVector,moveToPoint@x1
  3660  000F9C  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3661  000F9E  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3662  000FA2  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3663  000FA4  EE20 F001          	lfsr	2,1
  3664  000FA8  51EB               	movf	executeData@data& (0+255),w,b
  3665  000FAA  26D9               	addwf	fsr2l,f,c
  3666  000FAC  51EC               	movf	(executeData@data+1)& (0+255),w,b
  3667  000FAE  22DA               	addwfc	fsr2h,f,c
  3668  000FB0  50DF               	movf	indf2,w,c
  3669  000FB2  6FE9               	movwf	??_executeData& (0+255),b
  3670  000FB4  51E9               	movf	??_executeData& (0+255),w,b
  3671  000FB6  6E19               	movwf	moveToPoint@x2^0,c
  3672  000FB8  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3673  000FBA  EE20 F002          	lfsr	2,2
  3674  000FBE  51EB               	movf	executeData@data& (0+255),w,b
  3675  000FC0  26D9               	addwf	fsr2l,f,c
  3676  000FC2  51EC               	movf	(executeData@data+1)& (0+255),w,b
  3677  000FC4  22DA               	addwfc	fsr2h,f,c
  3678  000FC6  50DF               	movf	indf2,w,c
  3679  000FC8  6FEA               	movwf	(??_executeData+1)& (0+255),b
  3680  000FCA  51EA               	movf	(??_executeData+1)& (0+255),w,b
  3681  000FCC  6E1B               	movwf	moveToPoint@y2^0,c
  3682  000FCE  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3683  000FD0  EC24  F005         	call	_moveToPoint	;wreg free
  3684  000FD4  0100               	movlb	0	; () banked
  3685  000FD6  6FED               	movwf	executeData@errCode& (0+255),b
  3686  000FD8                     
  3687                           ; BSR set to: 0
  3688                           ;main.c: 143:         if(errCode != 0){
  3689  000FD8  51ED               	movf	executeData@errCode& (0+255),w,b
  3690  000FDA  B4D8               	btfsc	status,2,c
  3691  000FDC  EFF2  F007         	goto	u4091
  3692  000FE0  EFF5  F007         	goto	u4090
  3693  000FE4                     u4091:
  3694  000FE4  FFFF               	dw	65535	; assembler added errata NOP
  3695  000FE6  EFF8  F007         	goto	l4598
  3696  000FEA                     u4090:
  3697  000FEA  FFFF               	dw	65535	; assembler added errata NOP
  3698  000FEC  EFB4  F007         	goto	l4576
  3699  000FF0                     l4598:
  3700  000FF0  FFFF               	dw	65535	; assembler added errata NOP
  3701                           
  3702                           ; BSR set to: 0
  3703                           ;main.c: 146:         posVector[0] = data->posX;
  3704  000FF2  EE20 F001          	lfsr	2,1
  3705  000FF6  51EB               	movf	executeData@data& (0+255),w,b
  3706  000FF8  26D9               	addwf	fsr2l,f,c
  3707  000FFA  51EC               	movf	(executeData@data+1)& (0+255),w,b
  3708  000FFC  22DA               	addwfc	fsr2h,f,c
  3709  000FFE  50DF               	movf	indf2,w,c
  3710  001000  6E4C               	movwf	_posVector^0,c
  3711                           
  3712                           ;main.c: 147:         posVector[1] = data->posY;
  3713  001002  EE20 F002          	lfsr	2,2
  3714  001006  51EB               	movf	executeData@data& (0+255),w,b
  3715  001008  26D9               	addwf	fsr2l,f,c
  3716  00100A  51EC               	movf	(executeData@data+1)& (0+255),w,b
  3717  00100C  22DA               	addwfc	fsr2h,f,c
  3718  00100E  50DF               	movf	indf2,w,c
  3719  001010  6E4D               	movwf	(_posVector+1)^0,c
  3720                           
  3721                           ;main.c: 150:         rotAngle = data->rotation;
  3722  001012  EE20 F003          	lfsr	2,3
  3723  001016  51EB               	movf	executeData@data& (0+255),w,b
  3724  001018  26D9               	addwf	fsr2l,f,c
  3725  00101A  51EC               	movf	(executeData@data+1)& (0+255),w,b
  3726  00101C  22DA               	addwfc	fsr2h,f,c
  3727  00101E  50DF               	movf	indf2,w,c
  3728  001020  6FE9               	movwf	??_executeData& (0+255),b
  3729  001022  51E9               	movf	??_executeData& (0+255),w,b
  3730  001024  6E57               	movwf	_rotAngle^0,c
  3731  001026  6A58               	clrf	(_rotAngle+1)^0,c
  3732  001028                     
  3733                           ; BSR set to: 0
  3734                           ;main.c: 152:         if(rotAngle < 0){
  3735  001028  BE58               	btfsc	(_rotAngle+1)^0,7,c
  3736  00102A  EF1C  F008         	goto	u4100
  3737  00102E  EF19  F008         	goto	u4101
  3738  001032                     u4101:
  3739  001032  FFFF               	dw	65535	; assembler added errata NOP
  3740  001034  EF21  F008         	goto	l4604
  3741  001038                     u4100:
  3742  001038  FFFF               	dw	65535	; assembler added errata NOP
  3743  00103A                     
  3744                           ; BSR set to: 0
  3745                           ;main.c: 153:             rotAngle += 360;
  3746  00103A  0E68               	movlw	104
  3747  00103C  2657               	addwf	_rotAngle^0,f,c
  3748  00103E  0E01               	movlw	1
  3749  001040  2258               	addwfc	(_rotAngle+1)^0,f,c
  3750  001042                     l4604:
  3751  001042  FFFF               	dw	65535	; assembler added errata NOP
  3752                           
  3753                           ; BSR set to: 0
  3754                           ;main.c: 155:         rotateObj(rotAngle);
  3755  001044  5057               	movf	_rotAngle^0,w,c
  3756  001046  EC1A  F010         	call	_rotateObj
  3757  00104A                     
  3758                           ;main.c: 158:         errCode = touchTherm();
  3759  00104A  EC08  F00F         	call	_touchTherm	;wreg free
  3760  00104E  0100               	movlb	0	; () banked
  3761  001050  6FED               	movwf	executeData@errCode& (0+255),b
  3762  001052                     
  3763                           ; BSR set to: 0
  3764                           ;main.c: 159:         if(errCode != 0){
  3765  001052  51ED               	movf	executeData@errCode& (0+255),w,b
  3766  001054  B4D8               	btfsc	status,2,c
  3767  001056  EF2F  F008         	goto	u4111
  3768  00105A  EF32  F008         	goto	u4110
  3769  00105E                     u4111:
  3770  00105E  FFFF               	dw	65535	; assembler added errata NOP
  3771  001060  EF35  F008         	goto	l4614
  3772  001064                     u4110:
  3773  001064  FFFF               	dw	65535	; assembler added errata NOP
  3774  001066  EFB4  F007         	goto	l4576
  3775  00106A                     l4614:
  3776  00106A  FFFF               	dw	65535	; assembler added errata NOP
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;main.c: 163:         releaseObj();
  3780  00106C  EC74  F012         	call	_releaseObj	;wreg free
  3781  001070                     
  3782                           ;main.c: 166:         errCode = liftArm();
  3783  001070  EC13  F011         	call	_liftArm	;wreg free
  3784  001074  0100               	movlb	0	; () banked
  3785  001076  6FED               	movwf	executeData@errCode& (0+255),b
  3786  001078  EFB4  F007         	goto	l4576
  3787  00107C                     l348:
  3788  00107C  FFFF               	dw	65535	; assembler added errata NOP
  3789                           
  3790                           ; BSR set to: 0
  3791  00107E  0012               	return		;funcret
  3792  001080  FFFF               	dw	65535	; errata NOP
  3793  001082                     __end_of_executeData:
  3794                           	callstack 0
  3795                           
  3796 ;; *************** function _touchTherm *****************
  3797 ;; Defined at:
  3798 ;;		line 595 in file "motors.c"
  3799 ;; Parameters:    Size  Location     Type
  3800 ;;		None
  3801 ;; Auto vars:     Size  Location     Type
  3802 ;;		None
  3803 ;; Return value:  Size  Location     Type
  3804 ;;                  1    wreg      unsigned char 
  3805 ;; Registers used:
  3806 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3807 ;; Tracked objects:
  3808 ;;		On entry : 0/0
  3809 ;;		On exit  : 0/0
  3810 ;;		Unchanged: 0/0
  3811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3812 ;;      Params:         0       0       0       0       0       0       0
  3813 ;;      Locals:         0       0       0       0       0       0       0
  3814 ;;      Temps:          0       0       0       0       0       0       0
  3815 ;;      Totals:         0       0       0       0       0       0       0
  3816 ;;Total ram usage:        0 bytes
  3817 ;; Hardware stack levels used:    1
  3818 ;; Hardware stack levels required when called:    5
  3819 ;; This function calls:
  3820 ;;		_resetStep
  3821 ;;		_resetTM0_Temp
  3822 ;;		_resetTM2_Temp
  3823 ;;		_resetTherm
  3824 ;;		_resetTouch
  3825 ;;		_returnTherm
  3826 ;;		_startADC
  3827 ;;		_stepMade
  3828 ;;		_stopADC
  3829 ;; This function is called by:
  3830 ;;		_executeData
  3831 ;; This function uses a non-reentrant model
  3832 ;;
  3833                           
  3834                           	psect	text20
  3835  001E10                     __ptext20:
  3836                           	callstack 0
  3837  001E10                     _touchTherm:
  3838                           	callstack 0
  3839  001E10  FFFF               	dw	65535	; assembler added errata NOP
  3840  001E12                     
  3841                           ;motors.c: 601:     motCounter[2][1] = 1;
  3842  001E12  0E01               	movlw	1
  3843  001E14  6E6C               	movwf	(_motCounter+5)^0,c
  3844  001E16                     
  3845                           ;motors.c: 604:     T2CONbits.TMR2ON = 1;
  3846  001E16  84CA               	bsf	202,2,c	;volatile
  3847                           
  3848                           ;motors.c: 606:     tm0Error = 0;
  3849  001E18  0E00               	movlw	0
  3850  001E1A  6E5A               	movwf	(_tm0Error+1)^0,c
  3851  001E1C  0E00               	movlw	0
  3852  001E1E  6E59               	movwf	_tm0Error^0,c
  3853                           
  3854                           ;motors.c: 607:     tm0Limit = 200;
  3855  001E20  0EC8               	movlw	200
  3856  001E22  6E66               	movwf	_tm0Limit^0,c
  3857  001E24                     
  3858                           ;motors.c: 608:     T0CONbits.TMR0ON = 1;
  3859  001E24  8ED5               	bsf	213,7,c	;volatile
  3860  001E26                     
  3861                           ;motors.c: 611:     startADC();
  3862  001E26  EC48  F013         	call	_startADC	;wreg free
  3863                           
  3864                           ;motors.c: 614:     resetTouch();
  3865  001E2A  EC4D  F013         	call	_resetTouch	;wreg free
  3866                           
  3867                           ;motors.c: 615:     resetTherm();
  3868  001E2E  EC52  F013         	call	_resetTherm	;wreg free
  3869                           
  3870                           ;motors.c: 618:     while(!returnTherm() || PORTDbits.RD7){
  3871  001E32  EF59  F00F         	goto	l4200
  3872  001E36                     l4184:
  3873  001E36  FFFF               	dw	65535	; assembler added errata NOP
  3874                           
  3875                           ;motors.c: 620:         resetStep();
  3876  001E38  EC5C  F013         	call	_resetStep	;wreg free
  3877  001E3C                     
  3878                           ;motors.c: 623:         if(tm0Error){
  3879  001E3C  5059               	movf	_tm0Error^0,w,c
  3880  001E3E  105A               	iorwf	(_tm0Error+1)^0,w,c
  3881  001E40  B4D8               	btfsc	status,2,c
  3882  001E42  EF25  F00F         	goto	u3661
  3883  001E46  EF28  F00F         	goto	u3660
  3884  001E4A                     u3661:
  3885  001E4A  FFFF               	dw	65535	; assembler added errata NOP
  3886  001E4C  EF2F  F00F         	goto	l4190
  3887  001E50                     u3660:
  3888  001E50  FFFF               	dw	65535	; assembler added errata NOP
  3889  001E52                     
  3890                           ;motors.c: 628:             tm0Error = 6;
  3891  001E52  0E00               	movlw	0
  3892  001E54  6E5A               	movwf	(_tm0Error+1)^0,c
  3893  001E56  0E06               	movlw	6
  3894  001E58  6E59               	movwf	_tm0Error^0,c
  3895                           
  3896                           ;motors.c: 629:             break;
  3897  001E5A  EF6F  F00F         	goto	l4204
  3898  001E5E                     l4190:
  3899  001E5E  FFFF               	dw	65535	; assembler added errata NOP
  3900                           
  3901                           ;motors.c: 637:             motCounter[2][0] += motCounter[2][1];
  3902  001E60  506C               	movf	(_motCounter+5)^0,w,c
  3903  001E62  266B               	addwf	(_motCounter+4)^0,f,c
  3904                           
  3905                           ;motors.c: 638:             if(motCounter[2][0] > 3){
  3906  001E64  506B               	movf	(_motCounter+4)^0,w,c
  3907  001E66  0A80               	xorlw	128
  3908  001E68  0F7C               	addlw	-132
  3909  001E6A  A0D8               	btfss	status,0,c
  3910  001E6C  EF3A  F00F         	goto	u3671
  3911  001E70  EF3D  F00F         	goto	u3670
  3912  001E74                     u3671:
  3913  001E74  FFFF               	dw	65535	; assembler added errata NOP
  3914  001E76  EF40  F00F         	goto	l4194
  3915  001E7A                     u3670:
  3916  001E7A  FFFF               	dw	65535	; assembler added errata NOP
  3917  001E7C                     
  3918                           ;motors.c: 639:                 motCounter[2][0] = 0;
  3919  001E7C  0E00               	movlw	0
  3920  001E7E  6E6B               	movwf	(_motCounter+4)^0,c
  3921  001E80                     l4194:
  3922  001E80  FFFF               	dw	65535	; assembler added errata NOP
  3923                           
  3924                           ;motors.c: 642:             LATC = stepMot3[motCounter[2][0]];
  3925  001E82  0E84               	movlw	low _stepMot3
  3926  001E84  246B               	addwf	(_motCounter+4)^0,w,c
  3927  001E86  6ED9               	movwf	fsr2l,c
  3928  001E88  6ADA               	clrf	fsr2h,c
  3929  001E8A  0E00               	movlw	high _stepMot3
  3930  001E8C  22DA               	addwfc	fsr2h,f,c
  3931  001E8E  50DF               	movf	indf2,w,c
  3932  001E90  6E8B               	movwf	139,c	;volatile
  3933  001E92                     l4196:
  3934  001E92  FFFF               	dw	65535	; assembler added errata NOP
  3935  001E94  ECD9  F012         	call	_stepMade	;wreg free
  3936  001E98  5012               	movf	?_stepMade^0,w,c
  3937  001E9A  1013               	iorwf	(?_stepMade+1)^0,w,c
  3938  001E9C  B4D8               	btfsc	status,2,c
  3939  001E9E  EF53  F00F         	goto	u3681
  3940  001EA2  EF56  F00F         	goto	u3680
  3941  001EA6                     u3681:
  3942  001EA6  FFFF               	dw	65535	; assembler added errata NOP
  3943  001EA8  EF49  F00F         	goto	l4196
  3944  001EAC                     u3680:
  3945  001EAC  FFFF               	dw	65535	; assembler added errata NOP
  3946  001EAE                     
  3947                           ;motors.c: 657:         startADC();
  3948  001EAE  EC48  F013         	call	_startADC	;wreg free
  3949  001EB2                     l4200:
  3950  001EB2  FFFF               	dw	65535	; assembler added errata NOP
  3951                           
  3952                           ;motors.c: 618:     while(!returnTherm() || PORTDbits.RD7){
  3953  001EB4  EC31  F013         	call	_returnTherm	;wreg free
  3954  001EB8  5012               	movf	?_returnTherm^0,w,c
  3955  001EBA  1013               	iorwf	(?_returnTherm+1)^0,w,c
  3956  001EBC  B4D8               	btfsc	status,2,c
  3957  001EBE  EF63  F00F         	goto	u3691
  3958  001EC2  EF66  F00F         	goto	u3690
  3959  001EC6                     u3691:
  3960  001EC6  FFFF               	dw	65535	; assembler added errata NOP
  3961  001EC8  EF1B  F00F         	goto	l4184
  3962  001ECC                     u3690:
  3963  001ECC  FFFF               	dw	65535	; assembler added errata NOP
  3964  001ECE  BE83               	btfsc	131,7,c	;volatile
  3965  001ED0  EF6C  F00F         	goto	u3701
  3966  001ED4  EF6F  F00F         	goto	u3700
  3967  001ED8                     u3701:
  3968  001ED8  FFFF               	dw	65535	; assembler added errata NOP
  3969  001EDA  EF1B  F00F         	goto	l4184
  3970  001EDE                     u3700:
  3971  001EDE                     l4204:
  3972  001EDE  FFFF               	dw	65535	; assembler added errata NOP
  3973                           
  3974                           ;motors.c: 663:     stopADC();
  3975  001EE0  EC80  F013         	call	_stopADC	;wreg free
  3976  001EE4                     
  3977                           ;motors.c: 666:     T0CONbits.TMR0ON = 0;
  3978  001EE4  9ED5               	bcf	213,7,c	;volatile
  3979  001EE6                     
  3980                           ;motors.c: 667:     T2CONbits.TMR2ON = 0;
  3981  001EE6  94CA               	bcf	202,2,c	;volatile
  3982  001EE8                     
  3983                           ;motors.c: 669:     resetTM0_Temp();
  3984  001EE8  EC57  F013         	call	_resetTM0_Temp	;wreg free
  3985  001EEC                     
  3986                           ;motors.c: 670:     resetTM2_Temp();
  3987  001EEC  ECF5  F012         	call	_resetTM2_Temp	;wreg free
  3988  001EF0                     
  3989                           ;motors.c: 672:     TMR0 = 0;
  3990  001EF0  0E00               	movlw	0
  3991  001EF2  6ED7               	movwf	215,c	;volatile
  3992  001EF4  0E00               	movlw	0
  3993  001EF6  6ED6               	movwf	214,c	;volatile
  3994  001EF8                     
  3995                           ;motors.c: 673:     TMR2 = 0;
  3996  001EF8  0E00               	movlw	0
  3997  001EFA  6ECC               	movwf	204,c	;volatile
  3998  001EFC                     
  3999                           ;motors.c: 676:     resetStep();
  4000  001EFC  EC5C  F013         	call	_resetStep	;wreg free
  4001  001F00                     
  4002                           ;motors.c: 679:     if(PORTDbits.RD7){
  4003  001F00  AE83               	btfss	131,7,c	;volatile
  4004  001F02  EF85  F00F         	goto	u3711
  4005  001F06  EF88  F00F         	goto	u3710
  4006  001F0A                     u3711:
  4007  001F0A  FFFF               	dw	65535	; assembler added errata NOP
  4008  001F0C  EF8D  F00F         	goto	l210
  4009  001F10                     u3710:
  4010  001F10  FFFF               	dw	65535	; assembler added errata NOP
  4011  001F12                     
  4012                           ;motors.c: 680:         tm0Error = 2;
  4013  001F12  0E00               	movlw	0
  4014  001F14  6E5A               	movwf	(_tm0Error+1)^0,c
  4015  001F16  0E02               	movlw	2
  4016  001F18  6E59               	movwf	_tm0Error^0,c
  4017  001F1A                     l210:
  4018  001F1A  FFFF               	dw	65535	; assembler added errata NOP
  4019                           
  4020                           ;motors.c: 683:     return(tm0Error);
  4021  001F1C  5059               	movf	_tm0Error^0,w,c
  4022  001F1E  0012               	return		;funcret
  4023  001F20  FFFF               	dw	65535	; errata NOP
  4024  001F22                     __end_of_touchTherm:
  4025                           	callstack 0
  4026                           
  4027 ;; *************** function _returnTherm *****************
  4028 ;; Defined at:
  4029 ;;		line 58 in file "adc.c"
  4030 ;; Parameters:    Size  Location     Type
  4031 ;;		None
  4032 ;; Auto vars:     Size  Location     Type
  4033 ;;		None
  4034 ;; Return value:  Size  Location     Type
  4035 ;;                  2   17[COMRAM] unsigned int 
  4036 ;; Registers used:
  4037 ;;		None
  4038 ;; Tracked objects:
  4039 ;;		On entry : 0/0
  4040 ;;		On exit  : 0/0
  4041 ;;		Unchanged: 0/0
  4042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4043 ;;      Params:         2       0       0       0       0       0       0
  4044 ;;      Locals:         0       0       0       0       0       0       0
  4045 ;;      Temps:          0       0       0       0       0       0       0
  4046 ;;      Totals:         2       0       0       0       0       0       0
  4047 ;;Total ram usage:        2 bytes
  4048 ;; Hardware stack levels used:    1
  4049 ;; Hardware stack levels required when called:    4
  4050 ;; This function calls:
  4051 ;;		Nothing
  4052 ;; This function is called by:
  4053 ;;		_touchTherm
  4054 ;; This function uses a non-reentrant model
  4055 ;;
  4056                           
  4057                           	psect	text21
  4058  002662                     __ptext21:
  4059                           	callstack 0
  4060  002662                     _returnTherm:
  4061                           	callstack 0
  4062  002662  FFFF               	dw	65535	; assembler added errata NOP
  4063  002664                     
  4064                           ;adc.c: 59:     return therm_rel;
  4065  002664  C064  F012         	movff	_therm_rel,?_returnTherm	;volatile
  4066  002668  6A13               	clrf	(?_returnTherm+1)^0,c
  4067  00266A  0012               	return		;funcret
  4068  00266C  FFFF               	dw	65535	; errata NOP
  4069  00266E                     __end_of_returnTherm:
  4070                           	callstack 0
  4071                           
  4072 ;; *************** function _touchObject *****************
  4073 ;; Defined at:
  4074 ;;		line 497 in file "motors.c"
  4075 ;; Parameters:    Size  Location     Type
  4076 ;;		None
  4077 ;; Auto vars:     Size  Location     Type
  4078 ;;		None
  4079 ;; Return value:  Size  Location     Type
  4080 ;;                  1    wreg      unsigned char 
  4081 ;; Registers used:
  4082 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4083 ;; Tracked objects:
  4084 ;;		On entry : 0/0
  4085 ;;		On exit  : 0/0
  4086 ;;		Unchanged: 0/0
  4087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4088 ;;      Params:         0       0       0       0       0       0       0
  4089 ;;      Locals:         0       0       0       0       0       0       0
  4090 ;;      Temps:          0       0       0       0       0       0       0
  4091 ;;      Totals:         0       0       0       0       0       0       0
  4092 ;;Total ram usage:        0 bytes
  4093 ;; Hardware stack levels used:    1
  4094 ;; Hardware stack levels required when called:    5
  4095 ;; This function calls:
  4096 ;;		_resetStep
  4097 ;;		_resetTM0_Temp
  4098 ;;		_resetTM2_Temp
  4099 ;;		_resetTherm
  4100 ;;		_resetTouch
  4101 ;;		_returnTouch
  4102 ;;		_startADC
  4103 ;;		_stepMade
  4104 ;;		_stopADC
  4105 ;; This function is called by:
  4106 ;;		_executeData
  4107 ;; This function uses a non-reentrant model
  4108 ;;
  4109                           
  4110                           	psect	text22
  4111  001F22                     __ptext22:
  4112                           	callstack 0
  4113  001F22                     _touchObject:
  4114                           	callstack 0
  4115  001F22  FFFF               	dw	65535	; assembler added errata NOP
  4116  001F24                     
  4117                           ;motors.c: 503:     motCounter[2][1] = 1;
  4118  001F24  0E01               	movlw	1
  4119  001F26  6E6C               	movwf	(_motCounter+5)^0,c
  4120  001F28                     
  4121                           ;motors.c: 506:     T2CONbits.TMR2ON = 1;
  4122  001F28  84CA               	bsf	202,2,c	;volatile
  4123                           
  4124                           ;motors.c: 508:     tm0Error = 0;
  4125  001F2A  0E00               	movlw	0
  4126  001F2C  6E5A               	movwf	(_tm0Error+1)^0,c
  4127  001F2E  0E00               	movlw	0
  4128  001F30  6E59               	movwf	_tm0Error^0,c
  4129                           
  4130                           ;motors.c: 509:     tm0Limit = 200;
  4131  001F32  0EC8               	movlw	200
  4132  001F34  6E66               	movwf	_tm0Limit^0,c
  4133  001F36                     
  4134                           ;motors.c: 510:     T0CONbits.TMR0ON = 1;
  4135  001F36  8ED5               	bsf	213,7,c	;volatile
  4136  001F38                     
  4137                           ;motors.c: 513:     startADC();
  4138  001F38  EC48  F013         	call	_startADC	;wreg free
  4139                           
  4140                           ;motors.c: 516:     resetTouch();
  4141  001F3C  EC4D  F013         	call	_resetTouch	;wreg free
  4142                           
  4143                           ;motors.c: 517:     resetTherm();
  4144  001F40  EC52  F013         	call	_resetTherm	;wreg free
  4145                           
  4146                           ;motors.c: 520:     while(!returnTouch() || PORTDbits.RD7){
  4147  001F44  EFE2  F00F         	goto	l4150
  4148  001F48                     l4134:
  4149  001F48  FFFF               	dw	65535	; assembler added errata NOP
  4150                           
  4151                           ;motors.c: 522:         resetStep();
  4152  001F4A  EC5C  F013         	call	_resetStep	;wreg free
  4153  001F4E                     
  4154                           ;motors.c: 525:         if(tm0Error){
  4155  001F4E  5059               	movf	_tm0Error^0,w,c
  4156  001F50  105A               	iorwf	(_tm0Error+1)^0,w,c
  4157  001F52  B4D8               	btfsc	status,2,c
  4158  001F54  EFAE  F00F         	goto	u3601
  4159  001F58  EFB1  F00F         	goto	u3600
  4160  001F5C                     u3601:
  4161  001F5C  FFFF               	dw	65535	; assembler added errata NOP
  4162  001F5E  EFB8  F00F         	goto	l4140
  4163  001F62                     u3600:
  4164  001F62  FFFF               	dw	65535	; assembler added errata NOP
  4165  001F64                     
  4166                           ;motors.c: 530:             tm0Error = 6;
  4167  001F64  0E00               	movlw	0
  4168  001F66  6E5A               	movwf	(_tm0Error+1)^0,c
  4169  001F68  0E06               	movlw	6
  4170  001F6A  6E59               	movwf	_tm0Error^0,c
  4171                           
  4172                           ;motors.c: 531:             break;
  4173  001F6C  EFF8  F00F         	goto	l4154
  4174  001F70                     l4140:
  4175  001F70  FFFF               	dw	65535	; assembler added errata NOP
  4176                           
  4177                           ;motors.c: 539:             motCounter[2][0] += motCounter[2][1];
  4178  001F72  506C               	movf	(_motCounter+5)^0,w,c
  4179  001F74  266B               	addwf	(_motCounter+4)^0,f,c
  4180                           
  4181                           ;motors.c: 540:             if(motCounter[2][0] > 3){
  4182  001F76  506B               	movf	(_motCounter+4)^0,w,c
  4183  001F78  0A80               	xorlw	128
  4184  001F7A  0F7C               	addlw	-132
  4185  001F7C  A0D8               	btfss	status,0,c
  4186  001F7E  EFC3  F00F         	goto	u3611
  4187  001F82  EFC6  F00F         	goto	u3610
  4188  001F86                     u3611:
  4189  001F86  FFFF               	dw	65535	; assembler added errata NOP
  4190  001F88  EFC9  F00F         	goto	l4144
  4191  001F8C                     u3610:
  4192  001F8C  FFFF               	dw	65535	; assembler added errata NOP
  4193  001F8E                     
  4194                           ;motors.c: 541:                 motCounter[2][0] = 0;
  4195  001F8E  0E00               	movlw	0
  4196  001F90  6E6B               	movwf	(_motCounter+4)^0,c
  4197  001F92                     l4144:
  4198  001F92  FFFF               	dw	65535	; assembler added errata NOP
  4199                           
  4200                           ;motors.c: 544:             LATC = stepMot3[motCounter[2][0]];
  4201  001F94  0E84               	movlw	low _stepMot3
  4202  001F96  246B               	addwf	(_motCounter+4)^0,w,c
  4203  001F98  6ED9               	movwf	fsr2l,c
  4204  001F9A  6ADA               	clrf	fsr2h,c
  4205  001F9C  0E00               	movlw	high _stepMot3
  4206  001F9E  22DA               	addwfc	fsr2h,f,c
  4207  001FA0  50DF               	movf	indf2,w,c
  4208  001FA2  6E8B               	movwf	139,c	;volatile
  4209  001FA4                     l4146:
  4210  001FA4  FFFF               	dw	65535	; assembler added errata NOP
  4211  001FA6  ECD9  F012         	call	_stepMade	;wreg free
  4212  001FAA  5012               	movf	?_stepMade^0,w,c
  4213  001FAC  1013               	iorwf	(?_stepMade+1)^0,w,c
  4214  001FAE  B4D8               	btfsc	status,2,c
  4215  001FB0  EFDC  F00F         	goto	u3621
  4216  001FB4  EFDF  F00F         	goto	u3620
  4217  001FB8                     u3621:
  4218  001FB8  FFFF               	dw	65535	; assembler added errata NOP
  4219  001FBA  EFD2  F00F         	goto	l4146
  4220  001FBE                     u3620:
  4221  001FBE  FFFF               	dw	65535	; assembler added errata NOP
  4222  001FC0                     
  4223                           ;motors.c: 558:         startADC();
  4224  001FC0  EC48  F013         	call	_startADC	;wreg free
  4225  001FC4                     l4150:
  4226  001FC4  FFFF               	dw	65535	; assembler added errata NOP
  4227                           
  4228                           ;motors.c: 520:     while(!returnTouch() || PORTDbits.RD7){
  4229  001FC6  EC37  F013         	call	_returnTouch	;wreg free
  4230  001FCA  5012               	movf	?_returnTouch^0,w,c
  4231  001FCC  1013               	iorwf	(?_returnTouch+1)^0,w,c
  4232  001FCE  B4D8               	btfsc	status,2,c
  4233  001FD0  EFEC  F00F         	goto	u3631
  4234  001FD4  EFEF  F00F         	goto	u3630
  4235  001FD8                     u3631:
  4236  001FD8  FFFF               	dw	65535	; assembler added errata NOP
  4237  001FDA  EFA4  F00F         	goto	l4134
  4238  001FDE                     u3630:
  4239  001FDE  FFFF               	dw	65535	; assembler added errata NOP
  4240  001FE0  BE83               	btfsc	131,7,c	;volatile
  4241  001FE2  EFF5  F00F         	goto	u3641
  4242  001FE6  EFF8  F00F         	goto	u3640
  4243  001FEA                     u3641:
  4244  001FEA  FFFF               	dw	65535	; assembler added errata NOP
  4245  001FEC  EFA4  F00F         	goto	l4134
  4246  001FF0                     u3640:
  4247  001FF0                     l4154:
  4248  001FF0  FFFF               	dw	65535	; assembler added errata NOP
  4249                           
  4250                           ;motors.c: 563:     stopADC();
  4251  001FF2  EC80  F013         	call	_stopADC	;wreg free
  4252  001FF6                     
  4253                           ;motors.c: 566:     T0CONbits.TMR0ON = 0;
  4254  001FF6  9ED5               	bcf	213,7,c	;volatile
  4255  001FF8                     
  4256                           ;motors.c: 567:     T2CONbits.TMR2ON = 0;
  4257  001FF8  94CA               	bcf	202,2,c	;volatile
  4258  001FFA                     
  4259                           ;motors.c: 569:     resetTM0_Temp();
  4260  001FFA  EC57  F013         	call	_resetTM0_Temp	;wreg free
  4261  001FFE                     
  4262                           ;motors.c: 570:     resetTM2_Temp();
  4263  001FFE  ECF5  F012         	call	_resetTM2_Temp	;wreg free
  4264  002002                     
  4265                           ;motors.c: 572:     TMR0 = 0;
  4266  002002  0E00               	movlw	0
  4267  002004  6ED7               	movwf	215,c	;volatile
  4268  002006  0E00               	movlw	0
  4269  002008  6ED6               	movwf	214,c	;volatile
  4270  00200A                     
  4271                           ;motors.c: 573:     TMR2 = 0;
  4272  00200A  0E00               	movlw	0
  4273  00200C  6ECC               	movwf	204,c	;volatile
  4274  00200E                     
  4275                           ;motors.c: 576:     resetStep();
  4276  00200E  EC5C  F013         	call	_resetStep	;wreg free
  4277  002012                     
  4278                           ;motors.c: 579:     if(PORTDbits.RD7){
  4279  002012  AE83               	btfss	131,7,c	;volatile
  4280  002014  EF0E  F010         	goto	u3651
  4281  002018  EF11  F010         	goto	u3650
  4282  00201C                     u3651:
  4283  00201C  FFFF               	dw	65535	; assembler added errata NOP
  4284  00201E  EF16  F010         	goto	l198
  4285  002022                     u3650:
  4286  002022  FFFF               	dw	65535	; assembler added errata NOP
  4287  002024                     
  4288                           ;motors.c: 580:         tm0Error = 2;
  4289  002024  0E00               	movlw	0
  4290  002026  6E5A               	movwf	(_tm0Error+1)^0,c
  4291  002028  0E02               	movlw	2
  4292  00202A  6E59               	movwf	_tm0Error^0,c
  4293  00202C                     l198:
  4294  00202C  FFFF               	dw	65535	; assembler added errata NOP
  4295                           
  4296                           ;motors.c: 583:     return(tm0Error);
  4297  00202E  5059               	movf	_tm0Error^0,w,c
  4298  002030  0012               	return		;funcret
  4299  002032  FFFF               	dw	65535	; errata NOP
  4300  002034                     __end_of_touchObject:
  4301                           	callstack 0
  4302                           
  4303 ;; *************** function _stopADC *****************
  4304 ;; Defined at:
  4305 ;;		line 44 in file "adc.c"
  4306 ;; Parameters:    Size  Location     Type
  4307 ;;		None
  4308 ;; Auto vars:     Size  Location     Type
  4309 ;;		None
  4310 ;; Return value:  Size  Location     Type
  4311 ;;                  1    wreg      void 
  4312 ;; Registers used:
  4313 ;;		None
  4314 ;; Tracked objects:
  4315 ;;		On entry : 0/0
  4316 ;;		On exit  : 0/0
  4317 ;;		Unchanged: 0/0
  4318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4319 ;;      Params:         0       0       0       0       0       0       0
  4320 ;;      Locals:         0       0       0       0       0       0       0
  4321 ;;      Temps:          0       0       0       0       0       0       0
  4322 ;;      Totals:         0       0       0       0       0       0       0
  4323 ;;Total ram usage:        0 bytes
  4324 ;; Hardware stack levels used:    1
  4325 ;; Hardware stack levels required when called:    4
  4326 ;; This function calls:
  4327 ;;		Nothing
  4328 ;; This function is called by:
  4329 ;;		_touchObject
  4330 ;;		_touchTherm
  4331 ;; This function uses a non-reentrant model
  4332 ;;
  4333                           
  4334                           	psect	text23
  4335  002700                     __ptext23:
  4336                           	callstack 0
  4337  002700                     _stopADC:
  4338                           	callstack 0
  4339  002700  FFFF               	dw	65535	; assembler added errata NOP
  4340  002702                     
  4341                           ;adc.c: 45:     ADCON0bits.ADON = 0;
  4342  002702  90C2               	bcf	194,0,c	;volatile
  4343  002704  0012               	return		;funcret
  4344  002706  FFFF               	dw	65535	; errata NOP
  4345  002708                     __end_of_stopADC:
  4346                           	callstack 0
  4347                           
  4348 ;; *************** function _startADC *****************
  4349 ;; Defined at:
  4350 ;;		line 36 in file "adc.c"
  4351 ;; Parameters:    Size  Location     Type
  4352 ;;		None
  4353 ;; Auto vars:     Size  Location     Type
  4354 ;;		None
  4355 ;; Return value:  Size  Location     Type
  4356 ;;                  1    wreg      void 
  4357 ;; Registers used:
  4358 ;;		None
  4359 ;; Tracked objects:
  4360 ;;		On entry : 0/0
  4361 ;;		On exit  : 0/0
  4362 ;;		Unchanged: 0/0
  4363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4364 ;;      Params:         0       0       0       0       0       0       0
  4365 ;;      Locals:         0       0       0       0       0       0       0
  4366 ;;      Temps:          0       0       0       0       0       0       0
  4367 ;;      Totals:         0       0       0       0       0       0       0
  4368 ;;Total ram usage:        0 bytes
  4369 ;; Hardware stack levels used:    1
  4370 ;; Hardware stack levels required when called:    4
  4371 ;; This function calls:
  4372 ;;		Nothing
  4373 ;; This function is called by:
  4374 ;;		_touchObject
  4375 ;;		_touchTherm
  4376 ;; This function uses a non-reentrant model
  4377 ;;
  4378                           
  4379                           	psect	text24
  4380  002690                     __ptext24:
  4381                           	callstack 0
  4382  002690                     _startADC:
  4383                           	callstack 0
  4384  002690  FFFF               	dw	65535	; assembler added errata NOP
  4385  002692                     
  4386                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  4387  002692  80C2               	bsf	194,0,c	;volatile
  4388                           
  4389                           ;adc.c: 38:     ADCON0bits.GODONE = 1;
  4390  002694  84C2               	bsf	194,2,c	;volatile
  4391  002696  0012               	return		;funcret
  4392  002698  FFFF               	dw	65535	; errata NOP
  4393  00269A                     __end_of_startADC:
  4394                           	callstack 0
  4395                           
  4396 ;; *************** function _returnTouch *****************
  4397 ;; Defined at:
  4398 ;;		line 51 in file "adc.c"
  4399 ;; Parameters:    Size  Location     Type
  4400 ;;		None
  4401 ;; Auto vars:     Size  Location     Type
  4402 ;;		None
  4403 ;; Return value:  Size  Location     Type
  4404 ;;                  2   17[COMRAM] unsigned int 
  4405 ;; Registers used:
  4406 ;;		None
  4407 ;; Tracked objects:
  4408 ;;		On entry : 0/0
  4409 ;;		On exit  : 0/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4412 ;;      Params:         2       0       0       0       0       0       0
  4413 ;;      Locals:         0       0       0       0       0       0       0
  4414 ;;      Temps:          0       0       0       0       0       0       0
  4415 ;;      Totals:         2       0       0       0       0       0       0
  4416 ;;Total ram usage:        2 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; Hardware stack levels required when called:    4
  4419 ;; This function calls:
  4420 ;;		Nothing
  4421 ;; This function is called by:
  4422 ;;		_touchObject
  4423 ;; This function uses a non-reentrant model
  4424 ;;
  4425                           
  4426                           	psect	text25
  4427  00266E                     __ptext25:
  4428                           	callstack 0
  4429  00266E                     _returnTouch:
  4430                           	callstack 0
  4431  00266E  FFFF               	dw	65535	; assembler added errata NOP
  4432  002670                     
  4433                           ;adc.c: 52:     return touch_rel;
  4434  002670  C065  F012         	movff	_touch_rel,?_returnTouch	;volatile
  4435  002674  6A13               	clrf	(?_returnTouch+1)^0,c
  4436  002676  0012               	return		;funcret
  4437  002678  FFFF               	dw	65535	; errata NOP
  4438  00267A                     __end_of_returnTouch:
  4439                           	callstack 0
  4440                           
  4441 ;; *************** function _resetTouch *****************
  4442 ;; Defined at:
  4443 ;;		line 65 in file "adc.c"
  4444 ;; Parameters:    Size  Location     Type
  4445 ;;		None
  4446 ;; Auto vars:     Size  Location     Type
  4447 ;;		None
  4448 ;; Return value:  Size  Location     Type
  4449 ;;                  1    wreg      void 
  4450 ;; Registers used:
  4451 ;;		wreg, status,2
  4452 ;; Tracked objects:
  4453 ;;		On entry : 0/0
  4454 ;;		On exit  : 0/0
  4455 ;;		Unchanged: 0/0
  4456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4457 ;;      Params:         0       0       0       0       0       0       0
  4458 ;;      Locals:         0       0       0       0       0       0       0
  4459 ;;      Temps:          0       0       0       0       0       0       0
  4460 ;;      Totals:         0       0       0       0       0       0       0
  4461 ;;Total ram usage:        0 bytes
  4462 ;; Hardware stack levels used:    1
  4463 ;; Hardware stack levels required when called:    4
  4464 ;; This function calls:
  4465 ;;		Nothing
  4466 ;; This function is called by:
  4467 ;;		_touchObject
  4468 ;;		_touchTherm
  4469 ;; This function uses a non-reentrant model
  4470 ;;
  4471                           
  4472                           	psect	text26
  4473  00269A                     __ptext26:
  4474                           	callstack 0
  4475  00269A                     _resetTouch:
  4476                           	callstack 0
  4477  00269A  FFFF               	dw	65535	; assembler added errata NOP
  4478  00269C                     
  4479                           ;adc.c: 66:     touch_rel = 0;
  4480  00269C  0E00               	movlw	0
  4481  00269E  6E65               	movwf	_touch_rel^0,c	;volatile
  4482  0026A0  0012               	return		;funcret
  4483  0026A2  FFFF               	dw	65535	; errata NOP
  4484  0026A4                     __end_of_resetTouch:
  4485                           	callstack 0
  4486                           
  4487 ;; *************** function _resetTherm *****************
  4488 ;; Defined at:
  4489 ;;		line 72 in file "adc.c"
  4490 ;; Parameters:    Size  Location     Type
  4491 ;;		None
  4492 ;; Auto vars:     Size  Location     Type
  4493 ;;		None
  4494 ;; Return value:  Size  Location     Type
  4495 ;;                  1    wreg      void 
  4496 ;; Registers used:
  4497 ;;		wreg, status,2
  4498 ;; Tracked objects:
  4499 ;;		On entry : 0/0
  4500 ;;		On exit  : 0/0
  4501 ;;		Unchanged: 0/0
  4502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4503 ;;      Params:         0       0       0       0       0       0       0
  4504 ;;      Locals:         0       0       0       0       0       0       0
  4505 ;;      Temps:          0       0       0       0       0       0       0
  4506 ;;      Totals:         0       0       0       0       0       0       0
  4507 ;;Total ram usage:        0 bytes
  4508 ;; Hardware stack levels used:    1
  4509 ;; Hardware stack levels required when called:    4
  4510 ;; This function calls:
  4511 ;;		Nothing
  4512 ;; This function is called by:
  4513 ;;		_touchObject
  4514 ;;		_touchTherm
  4515 ;; This function uses a non-reentrant model
  4516 ;;
  4517                           
  4518                           	psect	text27
  4519  0026A4                     __ptext27:
  4520                           	callstack 0
  4521  0026A4                     _resetTherm:
  4522                           	callstack 0
  4523  0026A4  FFFF               	dw	65535	; assembler added errata NOP
  4524  0026A6                     
  4525                           ;adc.c: 73:     therm_rel = 0;
  4526  0026A6  0E00               	movlw	0
  4527  0026A8  6E64               	movwf	_therm_rel^0,c	;volatile
  4528  0026AA  0012               	return		;funcret
  4529  0026AC  FFFF               	dw	65535	; errata NOP
  4530  0026AE                     __end_of_resetTherm:
  4531                           	callstack 0
  4532                           
  4533 ;; *************** function _rotateObj *****************
  4534 ;; Defined at:
  4535 ;;		line 768 in file "motors.c"
  4536 ;; Parameters:    Size  Location     Type
  4537 ;;  rotAngle        1    wreg     unsigned char 
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;  rotAngle        1    0[BANK0 ] unsigned char 
  4540 ;;  c               2    5[BANK0 ] unsigned int 
  4541 ;;  i               2    3[BANK0 ] unsigned int 
  4542 ;;  totStep         2    1[BANK0 ] int 
  4543 ;; Return value:  Size  Location     Type
  4544 ;;                  1    wreg      void 
  4545 ;; Registers used:
  4546 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4547 ;; Tracked objects:
  4548 ;;		On entry : 0/0
  4549 ;;		On exit  : 0/0
  4550 ;;		Unchanged: 0/0
  4551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4552 ;;      Params:         0       0       0       0       0       0       0
  4553 ;;      Locals:         0       7       0       0       0       0       0
  4554 ;;      Temps:          0       0       0       0       0       0       0
  4555 ;;      Totals:         0       7       0       0       0       0       0
  4556 ;;Total ram usage:        7 bytes
  4557 ;; Hardware stack levels used:    1
  4558 ;; Hardware stack levels required when called:    5
  4559 ;; This function calls:
  4560 ;;		___fldiv
  4561 ;;		___fltol
  4562 ;;		___xxtofl
  4563 ;;		_resetStep
  4564 ;;		_resetTM2_Temp
  4565 ;;		_stepMade
  4566 ;; This function is called by:
  4567 ;;		_executeData
  4568 ;; This function uses a non-reentrant model
  4569 ;;
  4570                           
  4571                           	psect	text28
  4572  002034                     __ptext28:
  4573                           	callstack 0
  4574  002034                     _rotateObj:
  4575                           	callstack 0
  4576  002034  FFFF               	dw	65535	; assembler added errata NOP
  4577                           
  4578                           ;incstack = 0
  4579                           ;rotateObj@rotAngle stored from wreg
  4580  002036  0100               	movlb	0	; () banked
  4581  002038  6FE2               	movwf	rotateObj@rotAngle& (0+255),b
  4582  00203A                     
  4583                           ;motors.c: 770:     static const float stepAngle = 2;;motors.c: 771:     static char rot
      +                          Sequence[] = {0b100100, 0b001100, 0b011000, 0b110000};;motors.c: 772:     unsigned int i
      +                          , c = 0;
  4584  00203A  0E00               	movlw	0
  4585  00203C  0100               	movlb	0	; () banked
  4586  00203E  6FE8               	movwf	(rotateObj@c+1)& (0+255),b
  4587  002040  0E00               	movlw	0
  4588  002042  6FE7               	movwf	rotateObj@c& (0+255),b
  4589  002044                     
  4590                           ; BSR set to: 0
  4591                           ;motors.c: 773:     int totStep = rotAngle/stepAngle;
  4592  002044  0E00               	movlw	0
  4593  002046  6E24               	movwf	___fldiv@a^0,c
  4594  002048  0E00               	movlw	0
  4595  00204A  6E25               	movwf	(___fldiv@a+1)^0,c
  4596  00204C  0E00               	movlw	0
  4597  00204E  6E26               	movwf	(___fldiv@a+2)^0,c
  4598  002050  0E40               	movlw	64
  4599  002052  6E27               	movwf	(___fldiv@a+3)^0,c
  4600  002054  51E2               	movf	rotateObj@rotAngle& (0+255),w,b
  4601  002056  6E12               	movwf	___xxtofl@val^0,c
  4602  002058  6A13               	clrf	(___xxtofl@val+1)^0,c
  4603  00205A  6A14               	clrf	(___xxtofl@val+2)^0,c
  4604  00205C  6A15               	clrf	(___xxtofl@val+3)^0,c
  4605  00205E  0E01               	movlw	1
  4606  002060  ECC5  F00A         	call	___xxtofl
  4607  002064  C012  F020         	movff	?___xxtofl,___fldiv@b
  4608  002068  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4609  00206C  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4610  002070  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4611  002074  EC0B  F003         	call	___fldiv	;wreg free
  4612  002078  C020  F039         	movff	?___fldiv,___fltol@f1
  4613  00207C  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4614  002080  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4615  002084  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4616  002088  EC51  F00D         	call	___fltol	;wreg free
  4617  00208C  C039  F0E3         	movff	?___fltol,rotateObj@totStep
  4618  002090  C03A  F0E4         	movff	?___fltol+1,rotateObj@totStep+1
  4619  002094                     
  4620                           ;motors.c: 776:     for(i = 0; i < totStep; i++){
  4621  002094  0E00               	movlw	0
  4622  002096  0100               	movlb	0	; () banked
  4623  002098  6FE6               	movwf	(rotateObj@i+1)& (0+255),b
  4624  00209A  0E00               	movlw	0
  4625  00209C  6FE5               	movwf	rotateObj@i& (0+255),b
  4626  00209E  EF83  F010         	goto	l4278
  4627  0020A2                     l4262:
  4628  0020A2  FFFF               	dw	65535	; assembler added errata NOP
  4629                           
  4630                           ; BSR set to: 0
  4631                           ;motors.c: 780:         LATD = rotSequence[c];
  4632  0020A4  0E80               	movlw	low rotateObj@rotSequence
  4633  0020A6  25E7               	addwf	rotateObj@c& (0+255),w,b
  4634  0020A8  6ED9               	movwf	fsr2l,c
  4635  0020AA  0E00               	movlw	high rotateObj@rotSequence
  4636  0020AC  21E8               	addwfc	(rotateObj@c+1)& (0+255),w,b
  4637  0020AE  6EDA               	movwf	fsr2h,c
  4638  0020B0  50DF               	movf	indf2,w,c
  4639  0020B2  6E8C               	movwf	140,c	;volatile
  4640  0020B4                     
  4641                           ; BSR set to: 0
  4642                           ;motors.c: 782:         c++;
  4643  0020B4  4BE7               	infsnz	rotateObj@c& (0+255),f,b
  4644  0020B6  2BE8               	incf	(rotateObj@c+1)& (0+255),f,b
  4645  0020B8                     
  4646                           ; BSR set to: 0
  4647                           ;motors.c: 783:         if (c >= 4) {c = 0;}
  4648  0020B8  51E8               	movf	(rotateObj@c+1)& (0+255),w,b
  4649  0020BA  E10A               	bnz	u3760
  4650  0020BC  0E04               	movlw	4
  4651  0020BE  5DE7               	subwf	rotateObj@c& (0+255),w,b
  4652  0020C0  A0D8               	btfss	status,0,c
  4653  0020C2  EF65  F010         	goto	u3761
  4654  0020C6  EF68  F010         	goto	u3760
  4655  0020CA                     u3761:
  4656  0020CA  FFFF               	dw	65535	; assembler added errata NOP
  4657  0020CC  EF6D  F010         	goto	l4270
  4658  0020D0                     u3760:
  4659  0020D0  FFFF               	dw	65535	; assembler added errata NOP
  4660  0020D2                     
  4661                           ; BSR set to: 0
  4662  0020D2  0E00               	movlw	0
  4663  0020D4  6FE8               	movwf	(rotateObj@c+1)& (0+255),b
  4664  0020D6  0E00               	movlw	0
  4665  0020D8  6FE7               	movwf	rotateObj@c& (0+255),b
  4666  0020DA                     l4270:
  4667  0020DA  FFFF               	dw	65535	; assembler added errata NOP
  4668                           
  4669                           ; BSR set to: 0
  4670                           ;motors.c: 786:         T2CONbits.TMR2ON = 1;
  4671  0020DC  84CA               	bsf	202,2,c	;volatile
  4672  0020DE                     l4272:
  4673  0020DE  FFFF               	dw	65535	; assembler added errata NOP
  4674  0020E0  ECD9  F012         	call	_stepMade	;wreg free
  4675  0020E4  5012               	movf	?_stepMade^0,w,c
  4676  0020E6  1013               	iorwf	(?_stepMade+1)^0,w,c
  4677  0020E8  B4D8               	btfsc	status,2,c
  4678  0020EA  EF79  F010         	goto	u3771
  4679  0020EE  EF7C  F010         	goto	u3770
  4680  0020F2                     u3771:
  4681  0020F2  FFFF               	dw	65535	; assembler added errata NOP
  4682  0020F4  EF6F  F010         	goto	l4272
  4683  0020F8                     u3770:
  4684  0020F8  FFFF               	dw	65535	; assembler added errata NOP
  4685  0020FA                     
  4686                           ;motors.c: 788:         T2CONbits.TMR2ON = 0;
  4687  0020FA  94CA               	bcf	202,2,c	;volatile
  4688  0020FC                     
  4689                           ;motors.c: 789:         TMR2 = 0;
  4690  0020FC  0E00               	movlw	0
  4691  0020FE  6ECC               	movwf	204,c	;volatile
  4692  002100                     
  4693                           ;motors.c: 790:     }
  4694  002100  0100               	movlb	0	; () banked
  4695  002102  4BE5               	infsnz	rotateObj@i& (0+255),f,b
  4696  002104  2BE6               	incf	(rotateObj@i+1)& (0+255),f,b
  4697  002106                     l4278:
  4698  002106  FFFF               	dw	65535	; assembler added errata NOP
  4699                           
  4700                           ; BSR set to: 0
  4701  002108  51E3               	movf	rotateObj@totStep& (0+255),w,b
  4702  00210A  5DE5               	subwf	rotateObj@i& (0+255),w,b
  4703  00210C  51E4               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4704  00210E  59E6               	subwfb	(rotateObj@i+1)& (0+255),w,b
  4705  002110  A0D8               	btfss	status,0,c
  4706  002112  EF8D  F010         	goto	u3781
  4707  002116  EF90  F010         	goto	u3780
  4708  00211A                     u3781:
  4709  00211A  FFFF               	dw	65535	; assembler added errata NOP
  4710  00211C  EF51  F010         	goto	l4262
  4711  002120                     u3780:
  4712  002120  FFFF               	dw	65535	; assembler added errata NOP
  4713  002122                     
  4714                           ; BSR set to: 0
  4715                           ;motors.c: 793:     resetTM2_Temp();
  4716  002122  ECF5  F012         	call	_resetTM2_Temp	;wreg free
  4717                           
  4718                           ;motors.c: 796:     resetStep();
  4719  002126  EC5C  F013         	call	_resetStep	;wreg free
  4720  00212A  0012               	return		;funcret
  4721  00212C  FFFF               	dw	65535	; errata NOP
  4722  00212E                     __end_of_rotateObj:
  4723                           	callstack 0
  4724                           
  4725 ;; *************** function ___xxtofl *****************
  4726 ;; Defined at:
  4727 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4728 ;; Parameters:    Size  Location     Type
  4729 ;;  sign            1    wreg     unsigned char 
  4730 ;;  val             4   17[COMRAM] long 
  4731 ;; Auto vars:     Size  Location     Type
  4732 ;;  sign            1   25[COMRAM] unsigned char 
  4733 ;;  arg             4   27[COMRAM] unsigned long 
  4734 ;;  exp             1   26[COMRAM] unsigned char 
  4735 ;; Return value:  Size  Location     Type
  4736 ;;                  4   17[COMRAM] unsigned char 
  4737 ;; Registers used:
  4738 ;;		wreg, status,2, status,0
  4739 ;; Tracked objects:
  4740 ;;		On entry : 0/0
  4741 ;;		On exit  : 0/0
  4742 ;;		Unchanged: 0/0
  4743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4744 ;;      Params:         4       0       0       0       0       0       0
  4745 ;;      Locals:         6       0       0       0       0       0       0
  4746 ;;      Temps:          4       0       0       0       0       0       0
  4747 ;;      Totals:        14       0       0       0       0       0       0
  4748 ;;Total ram usage:       14 bytes
  4749 ;; Hardware stack levels used:    1
  4750 ;; Hardware stack levels required when called:    4
  4751 ;; This function calls:
  4752 ;;		Nothing
  4753 ;; This function is called by:
  4754 ;;		_rotateObj
  4755 ;; This function uses a non-reentrant model
  4756 ;;
  4757                           
  4758                           	psect	text29
  4759  00158A                     __ptext29:
  4760                           	callstack 0
  4761  00158A                     ___xxtofl:
  4762                           	callstack 0
  4763  00158A  FFFF               	dw	65535	; assembler added errata NOP
  4764                           
  4765                           ;incstack = 0
  4766                           ;___xxtofl@sign stored from wreg
  4767  00158C  6E1A               	movwf	___xxtofl@sign^0,c
  4768  00158E  501A               	movf	___xxtofl@sign^0,w,c
  4769  001590  B4D8               	btfsc	status,2,c
  4770  001592  EFCD  F00A         	goto	u3281
  4771  001596  EFD0  F00A         	goto	u3280
  4772  00159A                     u3281:
  4773  00159A  FFFF               	dw	65535	; assembler added errata NOP
  4774  00159C  EFF5  F00A         	goto	l1298
  4775  0015A0                     u3280:
  4776  0015A0  FFFF               	dw	65535	; assembler added errata NOP
  4777  0015A2  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4778  0015A4  EFD9  F00A         	goto	u3290
  4779  0015A8  EFD6  F00A         	goto	u3291
  4780  0015AC                     u3291:
  4781  0015AC  FFFF               	dw	65535	; assembler added errata NOP
  4782  0015AE  EFF5  F00A         	goto	l1298
  4783  0015B2                     u3290:
  4784  0015B2  FFFF               	dw	65535	; assembler added errata NOP
  4785  0015B4  C012  F016         	movff	___xxtofl@val,??___xxtofl
  4786  0015B8  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  4787  0015BC  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  4788  0015C0  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  4789  0015C4  1E16               	comf	??___xxtofl^0,f,c
  4790  0015C6  1E17               	comf	(??___xxtofl+1)^0,f,c
  4791  0015C8  1E18               	comf	(??___xxtofl+2)^0,f,c
  4792  0015CA  1E19               	comf	(??___xxtofl+3)^0,f,c
  4793  0015CC  2A16               	incf	??___xxtofl^0,f,c
  4794  0015CE  0E00               	movlw	0
  4795  0015D0  2217               	addwfc	(??___xxtofl+1)^0,f,c
  4796  0015D2  2218               	addwfc	(??___xxtofl+2)^0,f,c
  4797  0015D4  2219               	addwfc	(??___xxtofl+3)^0,f,c
  4798  0015D6  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  4799  0015DA  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4800  0015DE  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4801  0015E2  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4802  0015E6  EFFE  F00A         	goto	l3994
  4803  0015EA                     l1298:
  4804  0015EA  FFFF               	dw	65535	; assembler added errata NOP
  4805  0015EC  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  4806  0015F0  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4807  0015F4  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4808  0015F8  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4809  0015FC                     l3994:
  4810  0015FC  FFFF               	dw	65535	; assembler added errata NOP
  4811  0015FE  5012               	movf	___xxtofl@val^0,w,c
  4812  001600  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  4813  001602  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  4814  001604  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  4815  001606  A4D8               	btfss	status,2,c
  4816  001608  EF08  F00B         	goto	u3301
  4817  00160C  EF0B  F00B         	goto	u3300
  4818  001610                     u3301:
  4819  001610  FFFF               	dw	65535	; assembler added errata NOP
  4820  001612  EF16  F00B         	goto	l4000
  4821  001616                     u3300:
  4822  001616  FFFF               	dw	65535	; assembler added errata NOP
  4823  001618  0E00               	movlw	0
  4824  00161A  6E12               	movwf	?___xxtofl^0,c
  4825  00161C  0E00               	movlw	0
  4826  00161E  6E13               	movwf	(?___xxtofl+1)^0,c
  4827  001620  0E00               	movlw	0
  4828  001622  6E14               	movwf	(?___xxtofl+2)^0,c
  4829  001624  0E00               	movlw	0
  4830  001626  6E15               	movwf	(?___xxtofl+3)^0,c
  4831  001628  EFBE  F00B         	goto	l1301
  4832  00162C                     l4000:
  4833  00162C  FFFF               	dw	65535	; assembler added errata NOP
  4834  00162E  0E96               	movlw	150
  4835  001630  6E1B               	movwf	___xxtofl@exp^0,c
  4836  001632  EF22  F00B         	goto	l4004
  4837  001636                     l4002:
  4838  001636  FFFF               	dw	65535	; assembler added errata NOP
  4839  001638  2A1B               	incf	___xxtofl@exp^0,f,c
  4840  00163A  90D8               	bcf	status,0,c
  4841  00163C  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4842  00163E  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4843  001640  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4844  001642  321C               	rrcf	___xxtofl@arg^0,f,c
  4845  001644                     l4004:
  4846  001644  FFFF               	dw	65535	; assembler added errata NOP
  4847  001646  0E00               	movlw	0
  4848  001648  141C               	andwf	___xxtofl@arg^0,w,c
  4849  00164A  6E16               	movwf	??___xxtofl^0,c
  4850  00164C  0E00               	movlw	0
  4851  00164E  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4852  001650  6E17               	movwf	(??___xxtofl+1)^0,c
  4853  001652  0E00               	movlw	0
  4854  001654  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4855  001656  6E18               	movwf	(??___xxtofl+2)^0,c
  4856  001658  0EFE               	movlw	254
  4857  00165A  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4858  00165C  6E19               	movwf	(??___xxtofl+3)^0,c
  4859  00165E  5016               	movf	??___xxtofl^0,w,c
  4860  001660  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4861  001662  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4862  001664  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4863  001666  A4D8               	btfss	status,2,c
  4864  001668  EF38  F00B         	goto	u3311
  4865  00166C  EF3B  F00B         	goto	u3310
  4866  001670                     u3311:
  4867  001670  FFFF               	dw	65535	; assembler added errata NOP
  4868  001672  EF1B  F00B         	goto	l4002
  4869  001676                     u3310:
  4870  001676  FFFF               	dw	65535	; assembler added errata NOP
  4871  001678  EF4B  F00B         	goto	l1305
  4872  00167C                     l4006:
  4873  00167C  FFFF               	dw	65535	; assembler added errata NOP
  4874  00167E  2A1B               	incf	___xxtofl@exp^0,f,c
  4875  001680  0E01               	movlw	1
  4876  001682  261C               	addwf	___xxtofl@arg^0,f,c
  4877  001684  0E00               	movlw	0
  4878  001686  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4879  001688  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4880  00168A  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4881  00168C  90D8               	bcf	status,0,c
  4882  00168E  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4883  001690  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4884  001692  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4885  001694  321C               	rrcf	___xxtofl@arg^0,f,c
  4886  001696                     l1305:
  4887  001696  FFFF               	dw	65535	; assembler added errata NOP
  4888  001698  0E00               	movlw	0
  4889  00169A  141C               	andwf	___xxtofl@arg^0,w,c
  4890  00169C  6E16               	movwf	??___xxtofl^0,c
  4891  00169E  0E00               	movlw	0
  4892  0016A0  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4893  0016A2  6E17               	movwf	(??___xxtofl+1)^0,c
  4894  0016A4  0E00               	movlw	0
  4895  0016A6  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4896  0016A8  6E18               	movwf	(??___xxtofl+2)^0,c
  4897  0016AA  0EFF               	movlw	255
  4898  0016AC  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4899  0016AE  6E19               	movwf	(??___xxtofl+3)^0,c
  4900  0016B0  5016               	movf	??___xxtofl^0,w,c
  4901  0016B2  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4902  0016B4  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4903  0016B6  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4904  0016B8  A4D8               	btfss	status,2,c
  4905  0016BA  EF61  F00B         	goto	u3321
  4906  0016BE  EF64  F00B         	goto	u3320
  4907  0016C2                     u3321:
  4908  0016C2  FFFF               	dw	65535	; assembler added errata NOP
  4909  0016C4  EF3E  F00B         	goto	l4006
  4910  0016C8                     u3320:
  4911  0016C8  FFFF               	dw	65535	; assembler added errata NOP
  4912  0016CA  EF6E  F00B         	goto	l4014
  4913  0016CE                     l4012:
  4914  0016CE  FFFF               	dw	65535	; assembler added errata NOP
  4915  0016D0  061B               	decf	___xxtofl@exp^0,f,c
  4916  0016D2  90D8               	bcf	status,0,c
  4917  0016D4  361C               	rlcf	___xxtofl@arg^0,f,c
  4918  0016D6  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4919  0016D8  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4920  0016DA  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4921  0016DC                     l4014:
  4922  0016DC  FFFF               	dw	65535	; assembler added errata NOP
  4923  0016DE  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4924  0016E0  EF74  F00B         	goto	u3331
  4925  0016E4  EF77  F00B         	goto	u3330
  4926  0016E8                     u3331:
  4927  0016E8  FFFF               	dw	65535	; assembler added errata NOP
  4928  0016EA  EF81  F00B         	goto	l1312
  4929  0016EE                     u3330:
  4930  0016EE  FFFF               	dw	65535	; assembler added errata NOP
  4931  0016F0  0E02               	movlw	2
  4932  0016F2  601B               	cpfslt	___xxtofl@exp^0,c
  4933  0016F4  EF7E  F00B         	goto	u3341
  4934  0016F8  EF81  F00B         	goto	u3340
  4935  0016FC                     u3341:
  4936  0016FC  FFFF               	dw	65535	; assembler added errata NOP
  4937  0016FE  EF67  F00B         	goto	l4012
  4938  001702                     u3340:
  4939  001702                     l1312:
  4940  001702  FFFF               	dw	65535	; assembler added errata NOP
  4941  001704  B01B               	btfsc	___xxtofl@exp^0,0,c
  4942  001706  EF87  F00B         	goto	u3351
  4943  00170A  EF8A  F00B         	goto	u3350
  4944  00170E                     u3351:
  4945  00170E  FFFF               	dw	65535	; assembler added errata NOP
  4946  001710  EF8C  F00B         	goto	l4020
  4947  001714                     u3350:
  4948  001714  FFFF               	dw	65535	; assembler added errata NOP
  4949  001716  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  4950  001718                     l4020:
  4951  001718  FFFF               	dw	65535	; assembler added errata NOP
  4952  00171A  90D8               	bcf	status,0,c
  4953  00171C  321B               	rrcf	___xxtofl@exp^0,f,c
  4954  00171E  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  4955  001722  6A17               	clrf	(??___xxtofl+1)^0,c
  4956  001724  6A18               	clrf	(??___xxtofl+2)^0,c
  4957  001726  6A19               	clrf	(??___xxtofl+3)^0,c
  4958  001728  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  4959  00172C  6A18               	clrf	(??___xxtofl+2)^0,c
  4960  00172E  6A17               	clrf	(??___xxtofl+1)^0,c
  4961  001730  6A16               	clrf	??___xxtofl^0,c
  4962  001732  5016               	movf	??___xxtofl^0,w,c
  4963  001734  121C               	iorwf	___xxtofl@arg^0,f,c
  4964  001736  5017               	movf	(??___xxtofl+1)^0,w,c
  4965  001738  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4966  00173A  5018               	movf	(??___xxtofl+2)^0,w,c
  4967  00173C  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4968  00173E  5019               	movf	(??___xxtofl+3)^0,w,c
  4969  001740  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4970  001742  501A               	movf	___xxtofl@sign^0,w,c
  4971  001744  B4D8               	btfsc	status,2,c
  4972  001746  EFA7  F00B         	goto	u3361
  4973  00174A  EFAA  F00B         	goto	u3360
  4974  00174E                     u3361:
  4975  00174E  FFFF               	dw	65535	; assembler added errata NOP
  4976  001750  EFB5  F00B         	goto	l4030
  4977  001754                     u3360:
  4978  001754  FFFF               	dw	65535	; assembler added errata NOP
  4979  001756  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4980  001758  EFB3  F00B         	goto	u3370
  4981  00175C  EFB0  F00B         	goto	u3371
  4982  001760                     u3371:
  4983  001760  FFFF               	dw	65535	; assembler added errata NOP
  4984  001762  EFB5  F00B         	goto	l4030
  4985  001766                     u3370:
  4986  001766  FFFF               	dw	65535	; assembler added errata NOP
  4987  001768  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  4988  00176A                     l4030:
  4989  00176A  FFFF               	dw	65535	; assembler added errata NOP
  4990  00176C  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  4991  001770  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  4992  001774  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  4993  001778  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  4994  00177C                     l1301:
  4995  00177C  FFFF               	dw	65535	; assembler added errata NOP
  4996  00177E  0012               	return		;funcret
  4997  001780  FFFF               	dw	65535	; errata NOP
  4998  001782                     __end_of___xxtofl:
  4999                           	callstack 0
  5000                           
  5001 ;; *************** function ___fltol *****************
  5002 ;; Defined at:
  5003 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  5004 ;; Parameters:    Size  Location     Type
  5005 ;;  f1              4   56[COMRAM] unsigned char 
  5006 ;; Auto vars:     Size  Location     Type
  5007 ;;  exp1            1   65[COMRAM] unsigned char 
  5008 ;;  sign1           1   64[COMRAM] unsigned char 
  5009 ;; Return value:  Size  Location     Type
  5010 ;;                  4   56[COMRAM] long 
  5011 ;; Registers used:
  5012 ;;		wreg, status,2, status,0
  5013 ;; Tracked objects:
  5014 ;;		On entry : 0/0
  5015 ;;		On exit  : 0/0
  5016 ;;		Unchanged: 0/0
  5017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5018 ;;      Params:         4       0       0       0       0       0       0
  5019 ;;      Locals:         2       0       0       0       0       0       0
  5020 ;;      Temps:          4       0       0       0       0       0       0
  5021 ;;      Totals:        10       0       0       0       0       0       0
  5022 ;;Total ram usage:       10 bytes
  5023 ;; Hardware stack levels used:    1
  5024 ;; Hardware stack levels required when called:    4
  5025 ;; This function calls:
  5026 ;;		Nothing
  5027 ;; This function is called by:
  5028 ;;		_rotateObj
  5029 ;; This function uses a non-reentrant model
  5030 ;;
  5031                           
  5032                           	psect	text30
  5033  001AA2                     __ptext30:
  5034                           	callstack 0
  5035  001AA2                     ___fltol:
  5036                           	callstack 0
  5037  001AA2  FFFF               	dw	65535	; assembler added errata NOP
  5038  001AA4  343B               	rlcf	(___fltol@f1+2)^0,w,c
  5039  001AA6  343C               	rlcf	(___fltol@f1+3)^0,w,c
  5040  001AA8  6E42               	movwf	___fltol@exp1^0,c
  5041  001AAA  5042               	movf	___fltol@exp1^0,w,c
  5042  001AAC  A4D8               	btfss	status,2,c
  5043  001AAE  EF5B  F00D         	goto	u3211
  5044  001AB2  EF5E  F00D         	goto	u3210
  5045  001AB6                     u3211:
  5046  001AB6  FFFF               	dw	65535	; assembler added errata NOP
  5047  001AB8  EF6A  F00D         	goto	l3950
  5048  001ABC                     u3210:
  5049  001ABC  FFFF               	dw	65535	; assembler added errata NOP
  5050  001ABE                     l3946:
  5051  001ABE  FFFF               	dw	65535	; assembler added errata NOP
  5052  001AC0  0E00               	movlw	0
  5053  001AC2  6E39               	movwf	?___fltol^0,c
  5054  001AC4  0E00               	movlw	0
  5055  001AC6  6E3A               	movwf	(?___fltol+1)^0,c
  5056  001AC8  0E00               	movlw	0
  5057  001ACA  6E3B               	movwf	(?___fltol+2)^0,c
  5058  001ACC  0E00               	movlw	0
  5059  001ACE  6E3C               	movwf	(?___fltol+3)^0,c
  5060  001AD0  EFE9  F00D         	goto	l940
  5061  001AD4                     l3950:
  5062  001AD4  FFFF               	dw	65535	; assembler added errata NOP
  5063  001AD6  C039  F03D         	movff	___fltol@f1,??___fltol
  5064  001ADA  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  5065  001ADE  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  5066  001AE2  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  5067  001AE6  0E20               	movlw	32
  5068  001AE8  EF7C  F00D         	goto	u3220
  5069  001AEC                     u3225:
  5070  001AEC  FFFF               	dw	65535	; assembler added errata NOP
  5071  001AEE  90D8               	bcf	status,0,c
  5072  001AF0  3240               	rrcf	(??___fltol+3)^0,f,c
  5073  001AF2  323F               	rrcf	(??___fltol+2)^0,f,c
  5074  001AF4  323E               	rrcf	(??___fltol+1)^0,f,c
  5075  001AF6  323D               	rrcf	??___fltol^0,f,c
  5076  001AF8                     u3220:
  5077  001AF8  FFFF               	dw	65535	; assembler added errata NOP
  5078  001AFA  2EE8               	decfsz	wreg,f,c
  5079  001AFC  EF76  F00D         	goto	u3225
  5080  001B00  503D               	movf	??___fltol^0,w,c
  5081  001B02  6E41               	movwf	___fltol@sign1^0,c
  5082  001B04  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  5083  001B06  0EFF               	movlw	255
  5084  001B08  1639               	andwf	___fltol@f1^0,f,c
  5085  001B0A  0EFF               	movlw	255
  5086  001B0C  163A               	andwf	(___fltol@f1+1)^0,f,c
  5087  001B0E  0EFF               	movlw	255
  5088  001B10  163B               	andwf	(___fltol@f1+2)^0,f,c
  5089  001B12  0E00               	movlw	0
  5090  001B14  163C               	andwf	(___fltol@f1+3)^0,f,c
  5091  001B16  0E96               	movlw	150
  5092  001B18  5E42               	subwf	___fltol@exp1^0,f,c
  5093  001B1A  BE42               	btfsc	___fltol@exp1^0,7,c
  5094  001B1C  EF95  F00D         	goto	u3230
  5095  001B20  EF92  F00D         	goto	u3231
  5096  001B24                     u3231:
  5097  001B24  FFFF               	dw	65535	; assembler added errata NOP
  5098  001B26  EFAF  F00D         	goto	l3970
  5099  001B2A                     u3230:
  5100  001B2A  FFFF               	dw	65535	; assembler added errata NOP
  5101  001B2C  5042               	movf	___fltol@exp1^0,w,c
  5102  001B2E  0A80               	xorlw	128
  5103  001B30  0F97               	addlw	151
  5104  001B32  B0D8               	btfsc	status,0,c
  5105  001B34  EF9E  F00D         	goto	u3241
  5106  001B38  EFA1  F00D         	goto	u3240
  5107  001B3C                     u3241:
  5108  001B3C  FFFF               	dw	65535	; assembler added errata NOP
  5109  001B3E  EFA4  F00D         	goto	l3966
  5110  001B42                     u3240:
  5111  001B42  FFFF               	dw	65535	; assembler added errata NOP
  5112  001B44  EF5F  F00D         	goto	l3946
  5113  001B48                     l3966:
  5114  001B48  FFFF               	dw	65535	; assembler added errata NOP
  5115  001B4A  90D8               	bcf	status,0,c
  5116  001B4C  323C               	rrcf	(___fltol@f1+3)^0,f,c
  5117  001B4E  323B               	rrcf	(___fltol@f1+2)^0,f,c
  5118  001B50  323A               	rrcf	(___fltol@f1+1)^0,f,c
  5119  001B52  3239               	rrcf	___fltol@f1^0,f,c
  5120  001B54  3E42               	incfsz	___fltol@exp1^0,f,c
  5121  001B56  EFA4  F00D         	goto	l3966
  5122  001B5A  EFCD  F00D         	goto	l3980
  5123  001B5E                     l3970:
  5124  001B5E  FFFF               	dw	65535	; assembler added errata NOP
  5125  001B60  0E1F               	movlw	31
  5126  001B62  6442               	cpfsgt	___fltol@exp1^0,c
  5127  001B64  EFB6  F00D         	goto	u3251
  5128  001B68  EFB9  F00D         	goto	u3250
  5129  001B6C                     u3251:
  5130  001B6C  FFFF               	dw	65535	; assembler added errata NOP
  5131  001B6E  EFC3  F00D         	goto	l3978
  5132  001B72                     u3250:
  5133  001B72  FFFF               	dw	65535	; assembler added errata NOP
  5134  001B74  EF5F  F00D         	goto	l3946
  5135  001B78                     l3976:
  5136  001B78  FFFF               	dw	65535	; assembler added errata NOP
  5137  001B7A  90D8               	bcf	status,0,c
  5138  001B7C  3639               	rlcf	___fltol@f1^0,f,c
  5139  001B7E  363A               	rlcf	(___fltol@f1+1)^0,f,c
  5140  001B80  363B               	rlcf	(___fltol@f1+2)^0,f,c
  5141  001B82  363C               	rlcf	(___fltol@f1+3)^0,f,c
  5142  001B84  0642               	decf	___fltol@exp1^0,f,c
  5143  001B86                     l3978:
  5144  001B86  FFFF               	dw	65535	; assembler added errata NOP
  5145  001B88  5042               	movf	___fltol@exp1^0,w,c
  5146  001B8A  A4D8               	btfss	status,2,c
  5147  001B8C  EFCA  F00D         	goto	u3261
  5148  001B90  EFCD  F00D         	goto	u3260
  5149  001B94                     u3261:
  5150  001B94  FFFF               	dw	65535	; assembler added errata NOP
  5151  001B96  EFBC  F00D         	goto	l3976
  5152  001B9A                     u3260:
  5153  001B9A                     l3980:
  5154  001B9A  FFFF               	dw	65535	; assembler added errata NOP
  5155  001B9C  5041               	movf	___fltol@sign1^0,w,c
  5156  001B9E  B4D8               	btfsc	status,2,c
  5157  001BA0  EFD4  F00D         	goto	u3271
  5158  001BA4  EFD7  F00D         	goto	u3270
  5159  001BA8                     u3271:
  5160  001BA8  FFFF               	dw	65535	; assembler added errata NOP
  5161  001BAA  EFE0  F00D         	goto	l3984
  5162  001BAE                     u3270:
  5163  001BAE  FFFF               	dw	65535	; assembler added errata NOP
  5164  001BB0  1E3C               	comf	(___fltol@f1+3)^0,f,c
  5165  001BB2  1E3B               	comf	(___fltol@f1+2)^0,f,c
  5166  001BB4  1E3A               	comf	(___fltol@f1+1)^0,f,c
  5167  001BB6  6C39               	negf	___fltol@f1^0,c
  5168  001BB8  0E00               	movlw	0
  5169  001BBA  223A               	addwfc	(___fltol@f1+1)^0,f,c
  5170  001BBC  223B               	addwfc	(___fltol@f1+2)^0,f,c
  5171  001BBE  223C               	addwfc	(___fltol@f1+3)^0,f,c
  5172  001BC0                     l3984:
  5173  001BC0  FFFF               	dw	65535	; assembler added errata NOP
  5174  001BC2  C039  F039         	movff	___fltol@f1,?___fltol
  5175  001BC6  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  5176  001BCA  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  5177  001BCE  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  5178  001BD2                     l940:
  5179  001BD2  FFFF               	dw	65535	; assembler added errata NOP
  5180  001BD4  0012               	return		;funcret
  5181  001BD6  FFFF               	dw	65535	; errata NOP
  5182  001BD8                     __end_of___fltol:
  5183                           	callstack 0
  5184                           
  5185 ;; *************** function ___fldiv *****************
  5186 ;; Defined at:
  5187 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  5188 ;; Parameters:    Size  Location     Type
  5189 ;;  b               4   31[COMRAM] long 
  5190 ;;  a               4   35[COMRAM] long 
  5191 ;; Auto vars:     Size  Location     Type
  5192 ;;  grs             4   50[COMRAM] unsigned long 
  5193 ;;  rem             4   43[COMRAM] unsigned long 
  5194 ;;  new_exp         2   48[COMRAM] short 
  5195 ;;  aexp            1   55[COMRAM] unsigned char 
  5196 ;;  bexp            1   54[COMRAM] unsigned char 
  5197 ;;  sign            1   47[COMRAM] unsigned char 
  5198 ;; Return value:  Size  Location     Type
  5199 ;;                  4   31[COMRAM] unsigned char 
  5200 ;; Registers used:
  5201 ;;		wreg, status,2, status,0
  5202 ;; Tracked objects:
  5203 ;;		On entry : 0/0
  5204 ;;		On exit  : 0/0
  5205 ;;		Unchanged: 0/0
  5206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5207 ;;      Params:         8       0       0       0       0       0       0
  5208 ;;      Locals:        13       0       0       0       0       0       0
  5209 ;;      Temps:          4       0       0       0       0       0       0
  5210 ;;      Totals:        25       0       0       0       0       0       0
  5211 ;;Total ram usage:       25 bytes
  5212 ;; Hardware stack levels used:    1
  5213 ;; Hardware stack levels required when called:    4
  5214 ;; This function calls:
  5215 ;;		Nothing
  5216 ;; This function is called by:
  5217 ;;		_rotateObj
  5218 ;; This function uses a non-reentrant model
  5219 ;;
  5220                           
  5221                           	psect	text31
  5222  000616                     __ptext31:
  5223                           	callstack 0
  5224  000616                     ___fldiv:
  5225                           	callstack 0
  5226  000616  FFFF               	dw	65535	; assembler added errata NOP
  5227  000618  5023               	movf	(___fldiv@b+3)^0,w,c
  5228  00061A  0B80               	andlw	128
  5229  00061C  6E30               	movwf	___fldiv@sign^0,c
  5230  00061E  5023               	movf	(___fldiv@b+3)^0,w,c
  5231  000620  2423               	addwf	(___fldiv@b+3)^0,w,c
  5232  000622  6E37               	movwf	___fldiv@bexp^0,c
  5233  000624  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5234  000626  EF17  F003         	goto	u2981
  5235  00062A  EF1A  F003         	goto	u2980
  5236  00062E                     u2981:
  5237  00062E  FFFF               	dw	65535	; assembler added errata NOP
  5238  000630  EF1C  F003         	goto	l3812
  5239  000634                     u2980:
  5240  000634  FFFF               	dw	65535	; assembler added errata NOP
  5241  000636  8037               	bsf	___fldiv@bexp^0,0,c
  5242  000638                     l3812:
  5243  000638  FFFF               	dw	65535	; assembler added errata NOP
  5244  00063A  5037               	movf	___fldiv@bexp^0,w,c
  5245  00063C  B4D8               	btfsc	status,2,c
  5246  00063E  EF23  F003         	goto	u2991
  5247  000642  EF26  F003         	goto	u2990
  5248  000646                     u2991:
  5249  000646  FFFF               	dw	65535	; assembler added errata NOP
  5250  000648  EF3F  F003         	goto	l3822
  5251  00064C                     u2990:
  5252  00064C  FFFF               	dw	65535	; assembler added errata NOP
  5253  00064E  2837               	incf	___fldiv@bexp^0,w,c
  5254  000650  A4D8               	btfss	status,2,c
  5255  000652  EF2D  F003         	goto	u3001
  5256  000656  EF30  F003         	goto	u3000
  5257  00065A                     u3001:
  5258  00065A  FFFF               	dw	65535	; assembler added errata NOP
  5259  00065C  EF39  F003         	goto	l3818
  5260  000660                     u3000:
  5261  000660  FFFF               	dw	65535	; assembler added errata NOP
  5262  000662  0E00               	movlw	0
  5263  000664  6E20               	movwf	___fldiv@b^0,c
  5264  000666  0E00               	movlw	0
  5265  000668  6E21               	movwf	(___fldiv@b+1)^0,c
  5266  00066A  0E00               	movlw	0
  5267  00066C  6E22               	movwf	(___fldiv@b+2)^0,c
  5268  00066E  0E00               	movlw	0
  5269  000670  6E23               	movwf	(___fldiv@b+3)^0,c
  5270  000672                     l3818:
  5271  000672  FFFF               	dw	65535	; assembler added errata NOP
  5272  000674  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5273  000676  0E00               	movlw	0
  5274  000678  6E23               	movwf	(___fldiv@b+3)^0,c
  5275  00067A  EF48  F003         	goto	l3824
  5276  00067E                     l3822:
  5277  00067E  FFFF               	dw	65535	; assembler added errata NOP
  5278  000680  0E00               	movlw	0
  5279  000682  6E20               	movwf	___fldiv@b^0,c
  5280  000684  0E00               	movlw	0
  5281  000686  6E21               	movwf	(___fldiv@b+1)^0,c
  5282  000688  0E00               	movlw	0
  5283  00068A  6E22               	movwf	(___fldiv@b+2)^0,c
  5284  00068C  0E00               	movlw	0
  5285  00068E  6E23               	movwf	(___fldiv@b+3)^0,c
  5286  000690                     l3824:
  5287  000690  FFFF               	dw	65535	; assembler added errata NOP
  5288  000692  5027               	movf	(___fldiv@a+3)^0,w,c
  5289  000694  0B80               	andlw	128
  5290  000696  1A30               	xorwf	___fldiv@sign^0,f,c
  5291  000698  5027               	movf	(___fldiv@a+3)^0,w,c
  5292  00069A  2427               	addwf	(___fldiv@a+3)^0,w,c
  5293  00069C  6E38               	movwf	___fldiv@aexp^0,c
  5294  00069E  AE26               	btfss	(___fldiv@a+2)^0,7,c
  5295  0006A0  EF54  F003         	goto	u3011
  5296  0006A4  EF57  F003         	goto	u3010
  5297  0006A8                     u3011:
  5298  0006A8  FFFF               	dw	65535	; assembler added errata NOP
  5299  0006AA  EF59  F003         	goto	l3832
  5300  0006AE                     u3010:
  5301  0006AE  FFFF               	dw	65535	; assembler added errata NOP
  5302  0006B0  8038               	bsf	___fldiv@aexp^0,0,c
  5303  0006B2                     l3832:
  5304  0006B2  FFFF               	dw	65535	; assembler added errata NOP
  5305  0006B4  5038               	movf	___fldiv@aexp^0,w,c
  5306  0006B6  B4D8               	btfsc	status,2,c
  5307  0006B8  EF60  F003         	goto	u3021
  5308  0006BC  EF63  F003         	goto	u3020
  5309  0006C0                     u3021:
  5310  0006C0  FFFF               	dw	65535	; assembler added errata NOP
  5311  0006C2  EF7C  F003         	goto	l3842
  5312  0006C6                     u3020:
  5313  0006C6  FFFF               	dw	65535	; assembler added errata NOP
  5314  0006C8  2838               	incf	___fldiv@aexp^0,w,c
  5315  0006CA  A4D8               	btfss	status,2,c
  5316  0006CC  EF6A  F003         	goto	u3031
  5317  0006D0  EF6D  F003         	goto	u3030
  5318  0006D4                     u3031:
  5319  0006D4  FFFF               	dw	65535	; assembler added errata NOP
  5320  0006D6  EF76  F003         	goto	l3838
  5321  0006DA                     u3030:
  5322  0006DA  FFFF               	dw	65535	; assembler added errata NOP
  5323  0006DC  0E00               	movlw	0
  5324  0006DE  6E24               	movwf	___fldiv@a^0,c
  5325  0006E0  0E00               	movlw	0
  5326  0006E2  6E25               	movwf	(___fldiv@a+1)^0,c
  5327  0006E4  0E00               	movlw	0
  5328  0006E6  6E26               	movwf	(___fldiv@a+2)^0,c
  5329  0006E8  0E00               	movlw	0
  5330  0006EA  6E27               	movwf	(___fldiv@a+3)^0,c
  5331  0006EC                     l3838:
  5332  0006EC  FFFF               	dw	65535	; assembler added errata NOP
  5333  0006EE  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5334  0006F0  0E00               	movlw	0
  5335  0006F2  6E27               	movwf	(___fldiv@a+3)^0,c
  5336  0006F4  EF85  F003         	goto	l3844
  5337  0006F8                     l3842:
  5338  0006F8  FFFF               	dw	65535	; assembler added errata NOP
  5339  0006FA  0E00               	movlw	0
  5340  0006FC  6E24               	movwf	___fldiv@a^0,c
  5341  0006FE  0E00               	movlw	0
  5342  000700  6E25               	movwf	(___fldiv@a+1)^0,c
  5343  000702  0E00               	movlw	0
  5344  000704  6E26               	movwf	(___fldiv@a+2)^0,c
  5345  000706  0E00               	movlw	0
  5346  000708  6E27               	movwf	(___fldiv@a+3)^0,c
  5347  00070A                     l3844:
  5348  00070A  FFFF               	dw	65535	; assembler added errata NOP
  5349  00070C  5024               	movf	___fldiv@a^0,w,c
  5350  00070E  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5351  000710  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5352  000712  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5353  000714  A4D8               	btfss	status,2,c
  5354  000716  EF8F  F003         	goto	u3041
  5355  00071A  EF92  F003         	goto	u3040
  5356  00071E                     u3041:
  5357  00071E  FFFF               	dw	65535	; assembler added errata NOP
  5358  000720  EFAC  F003         	goto	l3856
  5359  000724                     u3040:
  5360  000724  FFFF               	dw	65535	; assembler added errata NOP
  5361  000726  0E00               	movlw	0
  5362  000728  6E20               	movwf	___fldiv@b^0,c
  5363  00072A  0E00               	movlw	0
  5364  00072C  6E21               	movwf	(___fldiv@b+1)^0,c
  5365  00072E  0E00               	movlw	0
  5366  000730  6E22               	movwf	(___fldiv@b+2)^0,c
  5367  000732  0E00               	movlw	0
  5368  000734  6E23               	movwf	(___fldiv@b+3)^0,c
  5369  000736  0E80               	movlw	128
  5370  000738  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5371  00073A  0E7F               	movlw	127
  5372  00073C  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5373  00073E                     l3850:
  5374  00073E  FFFF               	dw	65535	; assembler added errata NOP
  5375  000740  5030               	movf	___fldiv@sign^0,w,c
  5376  000742  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5377  000744  C020  F020         	movff	___fldiv@b,?___fldiv
  5378  000748  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5379  00074C  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5380  000750  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5381  000754  EF21  F005         	goto	l1225
  5382  000758                     l3856:
  5383  000758  FFFF               	dw	65535	; assembler added errata NOP
  5384  00075A  5037               	movf	___fldiv@bexp^0,w,c
  5385  00075C  A4D8               	btfss	status,2,c
  5386  00075E  EFB3  F003         	goto	u3051
  5387  000762  EFB6  F003         	goto	u3050
  5388  000766                     u3051:
  5389  000766  FFFF               	dw	65535	; assembler added errata NOP
  5390  000768  EFC1  F003         	goto	l3864
  5391  00076C                     u3050:
  5392  00076C  FFFF               	dw	65535	; assembler added errata NOP
  5393  00076E  0E00               	movlw	0
  5394  000770  6E20               	movwf	?___fldiv^0,c
  5395  000772  0E00               	movlw	0
  5396  000774  6E21               	movwf	(?___fldiv+1)^0,c
  5397  000776  0E00               	movlw	0
  5398  000778  6E22               	movwf	(?___fldiv+2)^0,c
  5399  00077A  0E00               	movlw	0
  5400  00077C  6E23               	movwf	(?___fldiv+3)^0,c
  5401  00077E  EF21  F005         	goto	l1225
  5402  000782                     l3864:
  5403  000782  FFFF               	dw	65535	; assembler added errata NOP
  5404  000784  5038               	movf	___fldiv@aexp^0,w,c
  5405  000786  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5406  00078A  6A29               	clrf	(??___fldiv+1)^0,c
  5407  00078C  5E28               	subwf	??___fldiv^0,f,c
  5408  00078E  0E00               	movlw	0
  5409  000790  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5410  000792  0E7F               	movlw	127
  5411  000794  2428               	addwf	??___fldiv^0,w,c
  5412  000796  6E31               	movwf	___fldiv@new_exp^0,c
  5413  000798  0E00               	movlw	0
  5414  00079A  2029               	addwfc	(??___fldiv+1)^0,w,c
  5415  00079C  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5416  00079E  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5417  0007A2  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5418  0007A6  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5419  0007AA  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5420  0007AE  0E00               	movlw	0
  5421  0007B0  6E20               	movwf	___fldiv@b^0,c
  5422  0007B2  0E00               	movlw	0
  5423  0007B4  6E21               	movwf	(___fldiv@b+1)^0,c
  5424  0007B6  0E00               	movlw	0
  5425  0007B8  6E22               	movwf	(___fldiv@b+2)^0,c
  5426  0007BA  0E00               	movlw	0
  5427  0007BC  6E23               	movwf	(___fldiv@b+3)^0,c
  5428  0007BE  0E00               	movlw	0
  5429  0007C0  6E33               	movwf	___fldiv@grs^0,c
  5430  0007C2  0E00               	movlw	0
  5431  0007C4  6E34               	movwf	(___fldiv@grs+1)^0,c
  5432  0007C6  0E00               	movlw	0
  5433  0007C8  6E35               	movwf	(___fldiv@grs+2)^0,c
  5434  0007CA  0E00               	movlw	0
  5435  0007CC  6E36               	movwf	(___fldiv@grs+3)^0,c
  5436  0007CE  0E00               	movlw	0
  5437  0007D0  6E38               	movwf	___fldiv@aexp^0,c
  5438  0007D2  EF2D  F004         	goto	l1227
  5439  0007D6                     l3874:
  5440  0007D6  FFFF               	dw	65535	; assembler added errata NOP
  5441  0007D8  5038               	movf	___fldiv@aexp^0,w,c
  5442  0007DA  B4D8               	btfsc	status,2,c
  5443  0007DC  EFF2  F003         	goto	u3061
  5444  0007E0  EFF5  F003         	goto	u3060
  5445  0007E4                     u3061:
  5446  0007E4  FFFF               	dw	65535	; assembler added errata NOP
  5447  0007E6  EF10  F004         	goto	l3882
  5448  0007EA                     u3060:
  5449  0007EA  FFFF               	dw	65535	; assembler added errata NOP
  5450  0007EC  90D8               	bcf	status,0,c
  5451  0007EE  362C               	rlcf	___fldiv@rem^0,f,c
  5452  0007F0  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5453  0007F2  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5454  0007F4  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5455  0007F6  90D8               	bcf	status,0,c
  5456  0007F8  3620               	rlcf	___fldiv@b^0,f,c
  5457  0007FA  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5458  0007FC  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5459  0007FE  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5460  000800  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5461  000802  EF05  F004         	goto	u3071
  5462  000806  EF08  F004         	goto	u3070
  5463  00080A                     u3071:
  5464  00080A  FFFF               	dw	65535	; assembler added errata NOP
  5465  00080C  EF0A  F004         	goto	l1230
  5466  000810                     u3070:
  5467  000810  FFFF               	dw	65535	; assembler added errata NOP
  5468  000812  8020               	bsf	___fldiv@b^0,0,c
  5469  000814                     l1230:
  5470  000814  FFFF               	dw	65535	; assembler added errata NOP
  5471  000816  90D8               	bcf	status,0,c
  5472  000818  3633               	rlcf	___fldiv@grs^0,f,c
  5473  00081A  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5474  00081C  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5475  00081E  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5476  000820                     l3882:
  5477  000820  FFFF               	dw	65535	; assembler added errata NOP
  5478  000822  5024               	movf	___fldiv@a^0,w,c
  5479  000824  5C2C               	subwf	___fldiv@rem^0,w,c
  5480  000826  5025               	movf	(___fldiv@a+1)^0,w,c
  5481  000828  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5482  00082A  5026               	movf	(___fldiv@a+2)^0,w,c
  5483  00082C  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5484  00082E  5027               	movf	(___fldiv@a+3)^0,w,c
  5485  000830  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5486  000832  A0D8               	btfss	status,0,c
  5487  000834  EF1E  F004         	goto	u3081
  5488  000838  EF21  F004         	goto	u3080
  5489  00083C                     u3081:
  5490  00083C  FFFF               	dw	65535	; assembler added errata NOP
  5491  00083E  EF2B  F004         	goto	l3888
  5492  000842                     u3080:
  5493  000842  FFFF               	dw	65535	; assembler added errata NOP
  5494  000844  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5495  000846  5024               	movf	___fldiv@a^0,w,c
  5496  000848  5E2C               	subwf	___fldiv@rem^0,f,c
  5497  00084A  5025               	movf	(___fldiv@a+1)^0,w,c
  5498  00084C  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5499  00084E  5026               	movf	(___fldiv@a+2)^0,w,c
  5500  000850  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5501  000852  5027               	movf	(___fldiv@a+3)^0,w,c
  5502  000854  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5503  000856                     l3888:
  5504  000856  FFFF               	dw	65535	; assembler added errata NOP
  5505  000858  2A38               	incf	___fldiv@aexp^0,f,c
  5506  00085A                     l1227:
  5507  00085A  FFFF               	dw	65535	; assembler added errata NOP
  5508  00085C  0E19               	movlw	25
  5509  00085E  6438               	cpfsgt	___fldiv@aexp^0,c
  5510  000860  EF34  F004         	goto	u3091
  5511  000864  EF37  F004         	goto	u3090
  5512  000868                     u3091:
  5513  000868  FFFF               	dw	65535	; assembler added errata NOP
  5514  00086A  EFEB  F003         	goto	l3874
  5515  00086E                     u3090:
  5516  00086E  FFFF               	dw	65535	; assembler added errata NOP
  5517  000870  502C               	movf	___fldiv@rem^0,w,c
  5518  000872  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5519  000874  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5520  000876  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5521  000878  B4D8               	btfsc	status,2,c
  5522  00087A  EF41  F004         	goto	u3101
  5523  00087E  EF44  F004         	goto	u3100
  5524  000882                     u3101:
  5525  000882  FFFF               	dw	65535	; assembler added errata NOP
  5526  000884  EF61  F004         	goto	l3900
  5527  000888                     u3100:
  5528  000888  FFFF               	dw	65535	; assembler added errata NOP
  5529  00088A  8033               	bsf	___fldiv@grs^0,0,c
  5530  00088C  EF61  F004         	goto	l3900
  5531  000890                     l3894:
  5532  000890  FFFF               	dw	65535	; assembler added errata NOP
  5533  000892  90D8               	bcf	status,0,c
  5534  000894  3620               	rlcf	___fldiv@b^0,f,c
  5535  000896  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5536  000898  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5537  00089A  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5538  00089C  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5539  00089E  EF53  F004         	goto	u3111
  5540  0008A2  EF56  F004         	goto	u3110
  5541  0008A6                     u3111:
  5542  0008A6  FFFF               	dw	65535	; assembler added errata NOP
  5543  0008A8  EF58  F004         	goto	l1236
  5544  0008AC                     u3110:
  5545  0008AC  FFFF               	dw	65535	; assembler added errata NOP
  5546  0008AE  8020               	bsf	___fldiv@b^0,0,c
  5547  0008B0                     l1236:
  5548  0008B0  FFFF               	dw	65535	; assembler added errata NOP
  5549  0008B2  90D8               	bcf	status,0,c
  5550  0008B4  3633               	rlcf	___fldiv@grs^0,f,c
  5551  0008B6  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5552  0008B8  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5553  0008BA  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5554  0008BC  0631               	decf	___fldiv@new_exp^0,f,c
  5555  0008BE  A0D8               	btfss	status,0,c
  5556  0008C0  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5557  0008C2                     l3900:
  5558  0008C2  FFFF               	dw	65535	; assembler added errata NOP
  5559  0008C4  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5560  0008C6  EF67  F004         	goto	u3121
  5561  0008CA  EF6A  F004         	goto	u3120
  5562  0008CE                     u3121:
  5563  0008CE  FFFF               	dw	65535	; assembler added errata NOP
  5564  0008D0  EF48  F004         	goto	l3894
  5565  0008D4                     u3120:
  5566  0008D4  FFFF               	dw	65535	; assembler added errata NOP
  5567  0008D6  0E00               	movlw	0
  5568  0008D8  6E38               	movwf	___fldiv@aexp^0,c
  5569  0008DA  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5570  0008DC  EF72  F004         	goto	u3131
  5571  0008E0  EF75  F004         	goto	u3130
  5572  0008E4                     u3131:
  5573  0008E4  FFFF               	dw	65535	; assembler added errata NOP
  5574  0008E6  EFA0  F004         	goto	l1238
  5575  0008EA                     u3130:
  5576  0008EA  FFFF               	dw	65535	; assembler added errata NOP
  5577  0008EC  0EFF               	movlw	255
  5578  0008EE  1433               	andwf	___fldiv@grs^0,w,c
  5579  0008F0  6E28               	movwf	??___fldiv^0,c
  5580  0008F2  0EFF               	movlw	255
  5581  0008F4  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5582  0008F6  6E29               	movwf	(??___fldiv+1)^0,c
  5583  0008F8  0EFF               	movlw	255
  5584  0008FA  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5585  0008FC  6E2A               	movwf	(??___fldiv+2)^0,c
  5586  0008FE  0E7F               	movlw	127
  5587  000900  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5588  000902  6E2B               	movwf	(??___fldiv+3)^0,c
  5589  000904  5028               	movf	??___fldiv^0,w,c
  5590  000906  1029               	iorwf	(??___fldiv+1)^0,w,c
  5591  000908  102A               	iorwf	(??___fldiv+2)^0,w,c
  5592  00090A  102B               	iorwf	(??___fldiv+3)^0,w,c
  5593  00090C  B4D8               	btfsc	status,2,c
  5594  00090E  EF8B  F004         	goto	u3141
  5595  000912  EF8E  F004         	goto	u3140
  5596  000916                     u3141:
  5597  000916  FFFF               	dw	65535	; assembler added errata NOP
  5598  000918  EF94  F004         	goto	l1239
  5599  00091C                     u3140:
  5600  00091C  FFFF               	dw	65535	; assembler added errata NOP
  5601  00091E                     l3908:
  5602  00091E  FFFF               	dw	65535	; assembler added errata NOP
  5603  000920  0E01               	movlw	1
  5604  000922  6E38               	movwf	___fldiv@aexp^0,c
  5605  000924  EFA0  F004         	goto	l1238
  5606  000928                     l1239:
  5607  000928  FFFF               	dw	65535	; assembler added errata NOP
  5608  00092A  A020               	btfss	___fldiv@b^0,0,c
  5609  00092C  EF9A  F004         	goto	u3151
  5610  000930  EF9D  F004         	goto	u3150
  5611  000934                     u3151:
  5612  000934  FFFF               	dw	65535	; assembler added errata NOP
  5613  000936  EFA0  F004         	goto	l1238
  5614  00093A                     u3150:
  5615  00093A  FFFF               	dw	65535	; assembler added errata NOP
  5616  00093C  EF8F  F004         	goto	l3908
  5617  000940                     l1238:
  5618  000940  FFFF               	dw	65535	; assembler added errata NOP
  5619  000942  5038               	movf	___fldiv@aexp^0,w,c
  5620  000944  B4D8               	btfsc	status,2,c
  5621  000946  EFA7  F004         	goto	u3161
  5622  00094A  EFAA  F004         	goto	u3160
  5623  00094E                     u3161:
  5624  00094E  FFFF               	dw	65535	; assembler added errata NOP
  5625  000950  EFD1  F004         	goto	l3920
  5626  000954                     u3160:
  5627  000954  FFFF               	dw	65535	; assembler added errata NOP
  5628  000956  0E01               	movlw	1
  5629  000958  2620               	addwf	___fldiv@b^0,f,c
  5630  00095A  0E00               	movlw	0
  5631  00095C  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5632  00095E  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5633  000960  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5634  000962  A023               	btfss	(___fldiv@b+3)^0,0,c
  5635  000964  EFB6  F004         	goto	u3171
  5636  000968  EFB9  F004         	goto	u3170
  5637  00096C                     u3171:
  5638  00096C  FFFF               	dw	65535	; assembler added errata NOP
  5639  00096E  EFD1  F004         	goto	l3920
  5640  000972                     u3170:
  5641  000972  FFFF               	dw	65535	; assembler added errata NOP
  5642  000974  C020  F028         	movff	___fldiv@b,??___fldiv
  5643  000978  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5644  00097C  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5645  000980  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5646  000984  342B               	rlcf	(??___fldiv+3)^0,w,c
  5647  000986  322B               	rrcf	(??___fldiv+3)^0,f,c
  5648  000988  322A               	rrcf	(??___fldiv+2)^0,f,c
  5649  00098A  3229               	rrcf	(??___fldiv+1)^0,f,c
  5650  00098C  3228               	rrcf	??___fldiv^0,f,c
  5651  00098E  C028  F020         	movff	??___fldiv,___fldiv@b
  5652  000992  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5653  000996  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5654  00099A  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5655  00099E  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5656  0009A0  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5657  0009A2                     l3920:
  5658  0009A2  FFFF               	dw	65535	; assembler added errata NOP
  5659  0009A4  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5660  0009A6  EFDD  F004         	goto	u3181
  5661  0009AA  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5662  0009AC  E109               	bnz	u3180
  5663  0009AE  2831               	incf	___fldiv@new_exp^0,w,c
  5664  0009B0  A0D8               	btfss	status,0,c
  5665  0009B2  EFDD  F004         	goto	u3181
  5666  0009B6  EFE0  F004         	goto	u3180
  5667  0009BA                     u3181:
  5668  0009BA  FFFF               	dw	65535	; assembler added errata NOP
  5669  0009BC  EFEC  F004         	goto	l3924
  5670  0009C0                     u3180:
  5671  0009C0  FFFF               	dw	65535	; assembler added errata NOP
  5672  0009C2  0E00               	movlw	0
  5673  0009C4  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5674  0009C6  6831               	setf	___fldiv@new_exp^0,c
  5675  0009C8  0E00               	movlw	0
  5676  0009CA  6E20               	movwf	___fldiv@b^0,c
  5677  0009CC  0E00               	movlw	0
  5678  0009CE  6E21               	movwf	(___fldiv@b+1)^0,c
  5679  0009D0  0E00               	movlw	0
  5680  0009D2  6E22               	movwf	(___fldiv@b+2)^0,c
  5681  0009D4  0E00               	movlw	0
  5682  0009D6  6E23               	movwf	(___fldiv@b+3)^0,c
  5683  0009D8                     l3924:
  5684  0009D8  FFFF               	dw	65535	; assembler added errata NOP
  5685  0009DA  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5686  0009DC  EFFB  F004         	goto	u3190
  5687  0009E0  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5688  0009E2  E106               	bnz	u3191
  5689  0009E4  0431               	decf	___fldiv@new_exp^0,w,c
  5690  0009E6  B0D8               	btfsc	status,0,c
  5691  0009E8  EFF8  F004         	goto	u3191
  5692  0009EC  EFFB  F004         	goto	u3190
  5693  0009F0                     u3191:
  5694  0009F0  FFFF               	dw	65535	; assembler added errata NOP
  5695  0009F2  EF0A  F005         	goto	l3928
  5696  0009F6                     u3190:
  5697  0009F6  FFFF               	dw	65535	; assembler added errata NOP
  5698  0009F8  0E00               	movlw	0
  5699  0009FA  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5700  0009FC  0E00               	movlw	0
  5701  0009FE  6E31               	movwf	___fldiv@new_exp^0,c
  5702  000A00  0E00               	movlw	0
  5703  000A02  6E20               	movwf	___fldiv@b^0,c
  5704  000A04  0E00               	movlw	0
  5705  000A06  6E21               	movwf	(___fldiv@b+1)^0,c
  5706  000A08  0E00               	movlw	0
  5707  000A0A  6E22               	movwf	(___fldiv@b+2)^0,c
  5708  000A0C  0E00               	movlw	0
  5709  000A0E  6E23               	movwf	(___fldiv@b+3)^0,c
  5710  000A10  0E00               	movlw	0
  5711  000A12  6E30               	movwf	___fldiv@sign^0,c
  5712  000A14                     l3928:
  5713  000A14  FFFF               	dw	65535	; assembler added errata NOP
  5714  000A16  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5715  000A1A  A037               	btfss	___fldiv@bexp^0,0,c
  5716  000A1C  EF12  F005         	goto	u3201
  5717  000A20  EF15  F005         	goto	u3200
  5718  000A24                     u3201:
  5719  000A24  FFFF               	dw	65535	; assembler added errata NOP
  5720  000A26  EF19  F005         	goto	l3934
  5721  000A2A                     u3200:
  5722  000A2A  FFFF               	dw	65535	; assembler added errata NOP
  5723  000A2C  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5724  000A2E  EF1B  F005         	goto	l3936
  5725  000A32                     l3934:
  5726  000A32  FFFF               	dw	65535	; assembler added errata NOP
  5727  000A34  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5728  000A36                     l3936:
  5729  000A36  FFFF               	dw	65535	; assembler added errata NOP
  5730  000A38  90D8               	bcf	status,0,c
  5731  000A3A  3037               	rrcf	___fldiv@bexp^0,w,c
  5732  000A3C  6E23               	movwf	(___fldiv@b+3)^0,c
  5733  000A3E  EF9F  F003         	goto	l3850
  5734  000A42                     l1225:
  5735  000A42  FFFF               	dw	65535	; assembler added errata NOP
  5736  000A44  0012               	return		;funcret
  5737  000A46  FFFF               	dw	65535	; errata NOP
  5738  000A48                     __end_of___fldiv:
  5739                           	callstack 0
  5740                           
  5741 ;; *************** function _releaseObj *****************
  5742 ;; Defined at:
  5743 ;;		line 819 in file "motors.c"
  5744 ;; Parameters:    Size  Location     Type
  5745 ;;		None
  5746 ;; Auto vars:     Size  Location     Type
  5747 ;;		None
  5748 ;; Return value:  Size  Location     Type
  5749 ;;                  1    wreg      void 
  5750 ;; Registers used:
  5751 ;;		wreg, status,2, status,0, cstack
  5752 ;; Tracked objects:
  5753 ;;		On entry : 0/0
  5754 ;;		On exit  : 0/0
  5755 ;;		Unchanged: 0/0
  5756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5757 ;;      Params:         0       0       0       0       0       0       0
  5758 ;;      Locals:         0       0       0       0       0       0       0
  5759 ;;      Temps:          0       0       0       0       0       0       0
  5760 ;;      Totals:         0       0       0       0       0       0       0
  5761 ;;Total ram usage:        0 bytes
  5762 ;; Hardware stack levels used:    1
  5763 ;; Hardware stack levels required when called:    5
  5764 ;; This function calls:
  5765 ;;		_resetTM2_Temp
  5766 ;;		_stepMade
  5767 ;; This function is called by:
  5768 ;;		_executeData
  5769 ;; This function uses a non-reentrant model
  5770 ;;
  5771                           
  5772                           	psect	text32
  5773  0024E8                     __ptext32:
  5774                           	callstack 0
  5775  0024E8                     _releaseObj:
  5776                           	callstack 0
  5777  0024E8  FFFF               	dw	65535	; assembler added errata NOP
  5778  0024EA                     
  5779                           ;motors.c: 820:     LATDbits.LATD1 = 0;
  5780  0024EA  928C               	bcf	140,1,c	;volatile
  5781                           
  5782                           ;motors.c: 823:     T2CONbits.TMR2ON = 1;
  5783  0024EC  84CA               	bsf	202,2,c	;volatile
  5784  0024EE                     l4292:
  5785  0024EE  FFFF               	dw	65535	; assembler added errata NOP
  5786  0024F0  ECD9  F012         	call	_stepMade	;wreg free
  5787  0024F4  5012               	movf	?_stepMade^0,w,c
  5788  0024F6  1013               	iorwf	(?_stepMade+1)^0,w,c
  5789  0024F8  B4D8               	btfsc	status,2,c
  5790  0024FA  EF81  F012         	goto	u3801
  5791  0024FE  EF84  F012         	goto	u3800
  5792  002502                     u3801:
  5793  002502  FFFF               	dw	65535	; assembler added errata NOP
  5794  002504  EF77  F012         	goto	l4292
  5795  002508                     u3800:
  5796  002508  FFFF               	dw	65535	; assembler added errata NOP
  5797  00250A                     
  5798                           ;motors.c: 825:     T2CONbits.TMR2ON = 0;
  5799  00250A  94CA               	bcf	202,2,c	;volatile
  5800  00250C                     
  5801                           ;motors.c: 826:     TMR2 = 0;
  5802  00250C  0E00               	movlw	0
  5803  00250E  6ECC               	movwf	204,c	;volatile
  5804  002510                     
  5805                           ;motors.c: 829:     resetTM2_Temp();
  5806  002510  ECF5  F012         	call	_resetTM2_Temp	;wreg free
  5807  002514  0012               	return		;funcret
  5808  002516  FFFF               	dw	65535	; errata NOP
  5809  002518                     __end_of_releaseObj:
  5810                           	callstack 0
  5811                           
  5812 ;; *************** function _pickObject *****************
  5813 ;; Defined at:
  5814 ;;		line 802 in file "motors.c"
  5815 ;; Parameters:    Size  Location     Type
  5816 ;;		None
  5817 ;; Auto vars:     Size  Location     Type
  5818 ;;		None
  5819 ;; Return value:  Size  Location     Type
  5820 ;;                  1    wreg      void 
  5821 ;; Registers used:
  5822 ;;		wreg, status,2, status,0, cstack
  5823 ;; Tracked objects:
  5824 ;;		On entry : 0/0
  5825 ;;		On exit  : 0/0
  5826 ;;		Unchanged: 0/0
  5827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5828 ;;      Params:         0       0       0       0       0       0       0
  5829 ;;      Locals:         0       0       0       0       0       0       0
  5830 ;;      Temps:          0       0       0       0       0       0       0
  5831 ;;      Totals:         0       0       0       0       0       0       0
  5832 ;;Total ram usage:        0 bytes
  5833 ;; Hardware stack levels used:    1
  5834 ;; Hardware stack levels required when called:    5
  5835 ;; This function calls:
  5836 ;;		_resetTM2_Temp
  5837 ;;		_stepMade
  5838 ;; This function is called by:
  5839 ;;		_executeData
  5840 ;; This function uses a non-reentrant model
  5841 ;;
  5842                           
  5843                           	psect	text33
  5844  002518                     __ptext33:
  5845                           	callstack 0
  5846  002518                     _pickObject:
  5847                           	callstack 0
  5848  002518  FFFF               	dw	65535	; assembler added errata NOP
  5849  00251A                     
  5850                           ;motors.c: 803:     LATDbits.LATD1 = 1;
  5851  00251A  828C               	bsf	140,1,c	;volatile
  5852                           
  5853                           ;motors.c: 806:     T2CONbits.TMR2ON = 1;
  5854  00251C  84CA               	bsf	202,2,c	;volatile
  5855  00251E                     l4284:
  5856  00251E  FFFF               	dw	65535	; assembler added errata NOP
  5857  002520  ECD9  F012         	call	_stepMade	;wreg free
  5858  002524  5012               	movf	?_stepMade^0,w,c
  5859  002526  1013               	iorwf	(?_stepMade+1)^0,w,c
  5860  002528  B4D8               	btfsc	status,2,c
  5861  00252A  EF99  F012         	goto	u3791
  5862  00252E  EF9C  F012         	goto	u3790
  5863  002532                     u3791:
  5864  002532  FFFF               	dw	65535	; assembler added errata NOP
  5865  002534  EF8F  F012         	goto	l4284
  5866  002538                     u3790:
  5867  002538  FFFF               	dw	65535	; assembler added errata NOP
  5868  00253A                     
  5869                           ;motors.c: 808:     T2CONbits.TMR2ON = 0;
  5870  00253A  94CA               	bcf	202,2,c	;volatile
  5871  00253C                     
  5872                           ;motors.c: 809:     TMR2 = 0;
  5873  00253C  0E00               	movlw	0
  5874  00253E  6ECC               	movwf	204,c	;volatile
  5875  002540                     
  5876                           ;motors.c: 812:     resetTM2_Temp();
  5877  002540  ECF5  F012         	call	_resetTM2_Temp	;wreg free
  5878  002544  0012               	return		;funcret
  5879  002546  FFFF               	dw	65535	; errata NOP
  5880  002548                     __end_of_pickObject:
  5881                           	callstack 0
  5882                           
  5883 ;; *************** function _moveToPoint *****************
  5884 ;; Defined at:
  5885 ;;		line 315 in file "motors.c"
  5886 ;; Parameters:    Size  Location     Type
  5887 ;;  x1              2   20[COMRAM] int 
  5888 ;;  y1              2   22[COMRAM] int 
  5889 ;;  x2              2   24[COMRAM] int 
  5890 ;;  y2              2   26[COMRAM] int 
  5891 ;; Auto vars:     Size  Location     Type
  5892 ;;  keepMovingY     1   33[COMRAM] unsigned char 
  5893 ;;  keepMovingX     1   32[COMRAM] unsigned char 
  5894 ;;  MOT2Directio    1   31[COMRAM] unsigned char 
  5895 ;;  MOT1Directio    1   30[COMRAM] unsigned char 
  5896 ;; Return value:  Size  Location     Type
  5897 ;;                  1    wreg      unsigned char 
  5898 ;; Registers used:
  5899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5900 ;; Tracked objects:
  5901 ;;		On entry : 0/0
  5902 ;;		On exit  : 0/0
  5903 ;;		Unchanged: 0/0
  5904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5905 ;;      Params:         8       0       0       0       0       0       0
  5906 ;;      Locals:         4       0       0       0       0       0       0
  5907 ;;      Temps:          2       0       0       0       0       0       0
  5908 ;;      Totals:        14       0       0       0       0       0       0
  5909 ;;Total ram usage:       14 bytes
  5910 ;; Hardware stack levels used:    1
  5911 ;; Hardware stack levels required when called:    5
  5912 ;; This function calls:
  5913 ;;		_resetStep
  5914 ;;		_resetTM0_Temp
  5915 ;;		_resetTM2_Temp
  5916 ;;		_stepCounter
  5917 ;;		_stepMade
  5918 ;; This function is called by:
  5919 ;;		_executeData
  5920 ;; This function uses a non-reentrant model
  5921 ;;
  5922                           
  5923                           	psect	text34
  5924  000A48                     __ptext34:
  5925                           	callstack 0
  5926  000A48                     _moveToPoint:
  5927                           	callstack 0
  5928  000A48  FFFF               	dw	65535	; assembler added errata NOP
  5929  000A4A                     
  5930                           ;motors.c: 317:     unsigned char MOT1Direction, MOT2Direction;;motors.c: 337:     if((x
      +                          2 - x1) > 0){
  5931  000A4A  5015               	movf	moveToPoint@x1^0,w,c
  5932  000A4C  5C19               	subwf	moveToPoint@x2^0,w,c
  5933  000A4E  6E1D               	movwf	??_moveToPoint^0,c
  5934  000A50  5016               	movf	(moveToPoint@x1+1)^0,w,c
  5935  000A52  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  5936  000A54  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5937  000A56  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5938  000A58  EF36  F005         	goto	u3381
  5939  000A5C  501E               	movf	(??_moveToPoint+1)^0,w,c
  5940  000A5E  E109               	bnz	u3380
  5941  000A60  041D               	decf	??_moveToPoint^0,w,c
  5942  000A62  A0D8               	btfss	status,0,c
  5943  000A64  EF36  F005         	goto	u3381
  5944  000A68  EF39  F005         	goto	u3380
  5945  000A6C                     u3381:
  5946  000A6C  FFFF               	dw	65535	; assembler added errata NOP
  5947  000A6E  EF40  F005         	goto	l154
  5948  000A72                     u3380:
  5949  000A72  FFFF               	dw	65535	; assembler added errata NOP
  5950  000A74                     
  5951                           ;motors.c: 338:         motCounter[0][1] = 1;
  5952  000A74  0E01               	movlw	1
  5953  000A76  6E68               	movwf	(_motCounter+1)^0,c
  5954                           
  5955                           ;motors.c: 339:         MOT1Direction = 1;
  5956  000A78  0E01               	movlw	1
  5957  000A7A  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  5958                           
  5959                           ;motors.c: 340:     }else{
  5960  000A7C  EF44  F005         	goto	l4040
  5961  000A80                     l154:
  5962  000A80  FFFF               	dw	65535	; assembler added errata NOP
  5963                           
  5964                           ;motors.c: 341:         motCounter[0][1] = -1;
  5965  000A82  6868               	setf	(_motCounter+1)^0,c
  5966  000A84                     
  5967                           ;motors.c: 342:         MOT1Direction = 0;
  5968  000A84  0E00               	movlw	0
  5969  000A86  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  5970  000A88                     l4040:
  5971  000A88  FFFF               	dw	65535	; assembler added errata NOP
  5972                           
  5973                           ;motors.c: 345:     if((y2 - y1) > 0){
  5974  000A8A  5017               	movf	moveToPoint@y1^0,w,c
  5975  000A8C  5C1B               	subwf	moveToPoint@y2^0,w,c
  5976  000A8E  6E1D               	movwf	??_moveToPoint^0,c
  5977  000A90  5018               	movf	(moveToPoint@y1+1)^0,w,c
  5978  000A92  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  5979  000A94  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5980  000A96  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5981  000A98  EF56  F005         	goto	u3391
  5982  000A9C  501E               	movf	(??_moveToPoint+1)^0,w,c
  5983  000A9E  E109               	bnz	u3390
  5984  000AA0  041D               	decf	??_moveToPoint^0,w,c
  5985  000AA2  A0D8               	btfss	status,0,c
  5986  000AA4  EF56  F005         	goto	u3391
  5987  000AA8  EF59  F005         	goto	u3390
  5988  000AAC                     u3391:
  5989  000AAC  FFFF               	dw	65535	; assembler added errata NOP
  5990  000AAE  EF60  F005         	goto	l156
  5991  000AB2                     u3390:
  5992  000AB2  FFFF               	dw	65535	; assembler added errata NOP
  5993  000AB4                     
  5994                           ;motors.c: 346:         motCounter[1][1] = 1;
  5995  000AB4  0E01               	movlw	1
  5996  000AB6  6E6A               	movwf	(_motCounter+3)^0,c
  5997                           
  5998                           ;motors.c: 347:         MOT2Direction = 1;
  5999  000AB8  0E01               	movlw	1
  6000  000ABA  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  6001                           
  6002                           ;motors.c: 348:     }else{
  6003  000ABC  EF64  F005         	goto	l157
  6004  000AC0                     l156:
  6005  000AC0  FFFF               	dw	65535	; assembler added errata NOP
  6006                           
  6007                           ;motors.c: 349:         motCounter[1][1] = -1;
  6008  000AC2  686A               	setf	(_motCounter+3)^0,c
  6009  000AC4                     
  6010                           ;motors.c: 350:         MOT2Direction = 0;
  6011  000AC4  0E00               	movlw	0
  6012  000AC6  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  6013  000AC8                     l157:
  6014  000AC8  FFFF               	dw	65535	; assembler added errata NOP
  6015                           
  6016                           ;motors.c: 355:     unsigned char keepMovingX = 1;
  6017  000ACA  0E01               	movlw	1
  6018  000ACC  6E21               	movwf	moveToPoint@keepMovingX^0,c
  6019                           
  6020                           ;motors.c: 356:     unsigned char keepMovingY = 1;
  6021  000ACE  0E01               	movlw	1
  6022  000AD0  6E22               	movwf	moveToPoint@keepMovingY^0,c
  6023  000AD2                     
  6024                           ;motors.c: 359:     T2CONbits.TMR2ON = 1;
  6025  000AD2  84CA               	bsf	202,2,c	;volatile
  6026                           
  6027                           ;motors.c: 361:     tm0Error = 0;
  6028  000AD4  0E00               	movlw	0
  6029  000AD6  6E5A               	movwf	(_tm0Error+1)^0,c
  6030  000AD8  0E00               	movlw	0
  6031  000ADA  6E59               	movwf	_tm0Error^0,c
  6032                           
  6033                           ;motors.c: 362:     tm0Limit = 200;
  6034  000ADC  0EC8               	movlw	200
  6035  000ADE  6E66               	movwf	_tm0Limit^0,c
  6036  000AE0                     
  6037                           ;motors.c: 363:     T0CONbits.TMR0ON = 1;
  6038  000AE0  8ED5               	bsf	213,7,c	;volatile
  6039                           
  6040                           ;motors.c: 365:     while(keepMovingX || keepMovingY){
  6041  000AE2  EFA0  F006         	goto	l4112
  6042  000AE6                     l4050:
  6043  000AE6  FFFF               	dw	65535	; assembler added errata NOP
  6044                           
  6045                           ;motors.c: 368:         if(tm0Error){
  6046  000AE8  5059               	movf	_tm0Error^0,w,c
  6047  000AEA  105A               	iorwf	(_tm0Error+1)^0,w,c
  6048  000AEC  B4D8               	btfsc	status,2,c
  6049  000AEE  EF7B  F005         	goto	u3401
  6050  000AF2  EF7E  F005         	goto	u3400
  6051  000AF6                     u3401:
  6052  000AF6  FFFF               	dw	65535	; assembler added errata NOP
  6053  000AF8  EF85  F005         	goto	l4054
  6054  000AFC                     u3400:
  6055  000AFC  FFFF               	dw	65535	; assembler added errata NOP
  6056  000AFE                     
  6057                           ;motors.c: 374:             tm0Error = 4;
  6058  000AFE  0E00               	movlw	0
  6059  000B00  6E5A               	movwf	(_tm0Error+1)^0,c
  6060  000B02  0E04               	movlw	4
  6061  000B04  6E59               	movwf	_tm0Error^0,c
  6062                           
  6063                           ;motors.c: 375:             break;
  6064  000B06  EFB4  F006         	goto	l161
  6065  000B0A                     l4054:
  6066  000B0A  FFFF               	dw	65535	; assembler added errata NOP
  6067                           
  6068                           ;motors.c: 383:         if(MOT1Direction == 1){
  6069  000B0C  041F               	decf	moveToPoint@MOT1Direction^0,w,c
  6070  000B0E  A4D8               	btfss	status,2,c
  6071  000B10  EF8C  F005         	goto	u3411
  6072  000B14  EF8F  F005         	goto	u3410
  6073  000B18                     u3411:
  6074  000B18  FFFF               	dw	65535	; assembler added errata NOP
  6075  000B1A  EFCE  F005         	goto	l4068
  6076  000B1E                     u3410:
  6077  000B1E  FFFF               	dw	65535	; assembler added errata NOP
  6078  000B20                     
  6079                           ;motors.c: 384:             if(x1 + stepCounter() >= x2){
  6080  000B20  EC3D  F013         	call	_stepCounter	;wreg free
  6081  000B24  5015               	movf	moveToPoint@x1^0,w,c
  6082  000B26  2612               	addwf	?_stepCounter^0,f,c
  6083  000B28  5016               	movf	(moveToPoint@x1+1)^0,w,c
  6084  000B2A  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6085  000B2C  5019               	movf	moveToPoint@x2^0,w,c
  6086  000B2E  5C12               	subwf	?_stepCounter^0,w,c
  6087  000B30  501A               	movf	(moveToPoint@x2+1)^0,w,c
  6088  000B32  5813               	subwfb	(?_stepCounter+1)^0,w,c
  6089  000B34  A0D8               	btfss	status,0,c
  6090  000B36  EF9F  F005         	goto	u3421
  6091  000B3A  EFA2  F005         	goto	u3420
  6092  000B3E                     u3421:
  6093  000B3E  FFFF               	dw	65535	; assembler added errata NOP
  6094  000B40  EFA8  F005         	goto	l4060
  6095  000B44                     u3420:
  6096  000B44  FFFF               	dw	65535	; assembler added errata NOP
  6097  000B46                     l4058:
  6098  000B46  FFFF               	dw	65535	; assembler added errata NOP
  6099                           
  6100                           ;motors.c: 386:                 keepMovingX = 0;
  6101  000B48  0E00               	movlw	0
  6102  000B4A  6E21               	movwf	moveToPoint@keepMovingX^0,c
  6103                           
  6104                           ;motors.c: 387:             }else if(keepMovingX){
  6105  000B4C  EF0C  F006         	goto	l4082
  6106  000B50                     l4060:
  6107  000B50  FFFF               	dw	65535	; assembler added errata NOP
  6108  000B52  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6109  000B54  B4D8               	btfsc	status,2,c
  6110  000B56  EFAF  F005         	goto	u3431
  6111  000B5A  EFB2  F005         	goto	u3430
  6112  000B5E                     u3431:
  6113  000B5E  FFFF               	dw	65535	; assembler added errata NOP
  6114  000B60  EF0C  F006         	goto	l4082
  6115  000B64                     u3430:
  6116  000B64  FFFF               	dw	65535	; assembler added errata NOP
  6117  000B66                     
  6118                           ;motors.c: 393:             motCounter[0][0] += motCounter[0][1];
  6119  000B66  5068               	movf	(_motCounter+1)^0,w,c
  6120  000B68  2667               	addwf	_motCounter^0,f,c
  6121                           
  6122                           ;motors.c: 394:             if(motCounter[0][0] > 3){
  6123  000B6A  5067               	movf	_motCounter^0,w,c
  6124  000B6C  0A80               	xorlw	128
  6125  000B6E  0F7C               	addlw	-132
  6126  000B70  A0D8               	btfss	status,0,c
  6127  000B72  EFBD  F005         	goto	u3441
  6128  000B76  EFC0  F005         	goto	u3440
  6129  000B7A                     u3441:
  6130  000B7A  FFFF               	dw	65535	; assembler added errata NOP
  6131  000B7C  EFC3  F005         	goto	l4066
  6132  000B80                     u3440:
  6133  000B80  FFFF               	dw	65535	; assembler added errata NOP
  6134  000B82                     
  6135                           ;motors.c: 395:                 motCounter[0][0] = 0;
  6136  000B82  0E00               	movlw	0
  6137  000B84  6E67               	movwf	_motCounter^0,c
  6138  000B86                     l4066:
  6139  000B86  FFFF               	dw	65535	; assembler added errata NOP
  6140                           
  6141                           ;motors.c: 398:             LATA = stepMot1[motCounter[0][0]];
  6142  000B88  0E8C               	movlw	low _stepMot1
  6143  000B8A  2467               	addwf	_motCounter^0,w,c
  6144  000B8C  6ED9               	movwf	fsr2l,c
  6145  000B8E  6ADA               	clrf	fsr2h,c
  6146  000B90  0E00               	movlw	high _stepMot1
  6147  000B92  22DA               	addwfc	fsr2h,f,c
  6148  000B94  50DF               	movf	indf2,w,c
  6149  000B96  6E89               	movwf	137,c	;volatile
  6150  000B98  EF0C  F006         	goto	l4082
  6151  000B9C                     l4068:
  6152  000B9C  FFFF               	dw	65535	; assembler added errata NOP
  6153  000B9E  501F               	movf	moveToPoint@MOT1Direction^0,w,c
  6154  000BA0  A4D8               	btfss	status,2,c
  6155  000BA2  EFD5  F005         	goto	u3451
  6156  000BA6  EFD8  F005         	goto	u3450
  6157  000BAA                     u3451:
  6158  000BAA  FFFF               	dw	65535	; assembler added errata NOP
  6159  000BAC  EF0C  F006         	goto	l4082
  6160  000BB0                     u3450:
  6161  000BB0  FFFF               	dw	65535	; assembler added errata NOP
  6162  000BB2                     
  6163                           ;motors.c: 402:             if(x1 - stepCounter() <= x2){
  6164  000BB2  EC3D  F013         	call	_stepCounter	;wreg free
  6165  000BB6  C015  F01D         	movff	moveToPoint@x1,??_moveToPoint
  6166  000BBA  C016  F01E         	movff	moveToPoint@x1+1,??_moveToPoint+1
  6167  000BBE  5012               	movf	?_stepCounter^0,w,c
  6168  000BC0  5E1D               	subwf	??_moveToPoint^0,f,c
  6169  000BC2  5013               	movf	(?_stepCounter+1)^0,w,c
  6170  000BC4  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6171  000BC6  501D               	movf	??_moveToPoint^0,w,c
  6172  000BC8  5C19               	subwf	moveToPoint@x2^0,w,c
  6173  000BCA  501E               	movf	(??_moveToPoint+1)^0,w,c
  6174  000BCC  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  6175  000BCE  A0D8               	btfss	status,0,c
  6176  000BD0  EFEC  F005         	goto	u3461
  6177  000BD4  EFEF  F005         	goto	u3460
  6178  000BD8                     u3461:
  6179  000BD8  FFFF               	dw	65535	; assembler added errata NOP
  6180  000BDA  EFF2  F005         	goto	l4074
  6181  000BDE                     u3460:
  6182  000BDE  FFFF               	dw	65535	; assembler added errata NOP
  6183  000BE0  EFA3  F005         	goto	l4058
  6184  000BE4                     l4074:
  6185  000BE4  FFFF               	dw	65535	; assembler added errata NOP
  6186  000BE6  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6187  000BE8  B4D8               	btfsc	status,2,c
  6188  000BEA  EFF9  F005         	goto	u3471
  6189  000BEE  EFFC  F005         	goto	u3470
  6190  000BF2                     u3471:
  6191  000BF2  FFFF               	dw	65535	; assembler added errata NOP
  6192  000BF4  EF0C  F006         	goto	l4082
  6193  000BF8                     u3470:
  6194  000BF8  FFFF               	dw	65535	; assembler added errata NOP
  6195  000BFA                     
  6196                           ;motors.c: 411:             motCounter[0][0] += motCounter[0][1];
  6197  000BFA  5068               	movf	(_motCounter+1)^0,w,c
  6198  000BFC  2667               	addwf	_motCounter^0,f,c
  6199                           
  6200                           ;motors.c: 412:             if(motCounter[0][0] < 0){
  6201  000BFE  BE67               	btfsc	_motCounter^0,7,c
  6202  000C00  EF07  F006         	goto	u3480
  6203  000C04  EF04  F006         	goto	u3481
  6204  000C08                     u3481:
  6205  000C08  FFFF               	dw	65535	; assembler added errata NOP
  6206  000C0A  EFC3  F005         	goto	l4066
  6207  000C0E                     u3480:
  6208  000C0E  FFFF               	dw	65535	; assembler added errata NOP
  6209  000C10                     
  6210                           ;motors.c: 413:                 motCounter[0][0] = 3;
  6211  000C10  0E03               	movlw	3
  6212  000C12  6E67               	movwf	_motCounter^0,c
  6213  000C14  EFC3  F005         	goto	l4066
  6214  000C18                     l4082:
  6215  000C18  FFFF               	dw	65535	; assembler added errata NOP
  6216                           
  6217                           ;motors.c: 421:         if(MOT2Direction == 1){
  6218  000C1A  0420               	decf	moveToPoint@MOT2Direction^0,w,c
  6219  000C1C  A4D8               	btfss	status,2,c
  6220  000C1E  EF13  F006         	goto	u3491
  6221  000C22  EF16  F006         	goto	u3490
  6222  000C26                     u3491:
  6223  000C26  FFFF               	dw	65535	; assembler added errata NOP
  6224  000C28  EF55  F006         	goto	l4096
  6225  000C2C                     u3490:
  6226  000C2C  FFFF               	dw	65535	; assembler added errata NOP
  6227  000C2E                     
  6228                           ;motors.c: 423:             if(y1 + stepCounter() >= y2){
  6229  000C2E  EC3D  F013         	call	_stepCounter	;wreg free
  6230  000C32  5017               	movf	moveToPoint@y1^0,w,c
  6231  000C34  2612               	addwf	?_stepCounter^0,f,c
  6232  000C36  5018               	movf	(moveToPoint@y1+1)^0,w,c
  6233  000C38  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6234  000C3A  501B               	movf	moveToPoint@y2^0,w,c
  6235  000C3C  5C12               	subwf	?_stepCounter^0,w,c
  6236  000C3E  501C               	movf	(moveToPoint@y2+1)^0,w,c
  6237  000C40  5813               	subwfb	(?_stepCounter+1)^0,w,c
  6238  000C42  A0D8               	btfss	status,0,c
  6239  000C44  EF26  F006         	goto	u3501
  6240  000C48  EF29  F006         	goto	u3500
  6241  000C4C                     u3501:
  6242  000C4C  FFFF               	dw	65535	; assembler added errata NOP
  6243  000C4E  EF2F  F006         	goto	l4088
  6244  000C52                     u3500:
  6245  000C52  FFFF               	dw	65535	; assembler added errata NOP
  6246  000C54                     l4086:
  6247  000C54  FFFF               	dw	65535	; assembler added errata NOP
  6248                           
  6249                           ;motors.c: 425:                 keepMovingY = 0;
  6250  000C56  0E00               	movlw	0
  6251  000C58  6E22               	movwf	moveToPoint@keepMovingY^0,c
  6252                           
  6253                           ;motors.c: 426:             }else if(keepMovingY){
  6254  000C5A  EF93  F006         	goto	l4110
  6255  000C5E                     l4088:
  6256  000C5E  FFFF               	dw	65535	; assembler added errata NOP
  6257  000C60  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6258  000C62  B4D8               	btfsc	status,2,c
  6259  000C64  EF36  F006         	goto	u3511
  6260  000C68  EF39  F006         	goto	u3510
  6261  000C6C                     u3511:
  6262  000C6C  FFFF               	dw	65535	; assembler added errata NOP
  6263  000C6E  EF93  F006         	goto	l178
  6264  000C72                     u3510:
  6265  000C72  FFFF               	dw	65535	; assembler added errata NOP
  6266  000C74                     
  6267                           ;motors.c: 432:             motCounter[1][0] += motCounter[1][1];
  6268  000C74  506A               	movf	(_motCounter+3)^0,w,c
  6269  000C76  2669               	addwf	(_motCounter+2)^0,f,c
  6270                           
  6271                           ;motors.c: 433:             if(motCounter[1][0] > 3){
  6272  000C78  5069               	movf	(_motCounter+2)^0,w,c
  6273  000C7A  0A80               	xorlw	128
  6274  000C7C  0F7C               	addlw	-132
  6275  000C7E  A0D8               	btfss	status,0,c
  6276  000C80  EF44  F006         	goto	u3521
  6277  000C84  EF47  F006         	goto	u3520
  6278  000C88                     u3521:
  6279  000C88  FFFF               	dw	65535	; assembler added errata NOP
  6280  000C8A  EF4A  F006         	goto	l4094
  6281  000C8E                     u3520:
  6282  000C8E  FFFF               	dw	65535	; assembler added errata NOP
  6283  000C90                     
  6284                           ;motors.c: 434:                 motCounter[1][0] = 0;
  6285  000C90  0E00               	movlw	0
  6286  000C92  6E69               	movwf	(_motCounter+2)^0,c
  6287  000C94                     l4094:
  6288  000C94  FFFF               	dw	65535	; assembler added errata NOP
  6289                           
  6290                           ;motors.c: 437:             LATB = stepMot2[motCounter[1][0]];
  6291  000C96  0E88               	movlw	low _stepMot2
  6292  000C98  2469               	addwf	(_motCounter+2)^0,w,c
  6293  000C9A  6ED9               	movwf	fsr2l,c
  6294  000C9C  6ADA               	clrf	fsr2h,c
  6295  000C9E  0E00               	movlw	high _stepMot2
  6296  000CA0  22DA               	addwfc	fsr2h,f,c
  6297  000CA2  50DF               	movf	indf2,w,c
  6298  000CA4  6E8A               	movwf	138,c	;volatile
  6299  000CA6  EF93  F006         	goto	l4110
  6300  000CAA                     l4096:
  6301  000CAA  FFFF               	dw	65535	; assembler added errata NOP
  6302  000CAC  5020               	movf	moveToPoint@MOT2Direction^0,w,c
  6303  000CAE  A4D8               	btfss	status,2,c
  6304  000CB0  EF5C  F006         	goto	u3531
  6305  000CB4  EF5F  F006         	goto	u3530
  6306  000CB8                     u3531:
  6307  000CB8  FFFF               	dw	65535	; assembler added errata NOP
  6308  000CBA  EF93  F006         	goto	l4110
  6309  000CBE                     u3530:
  6310  000CBE  FFFF               	dw	65535	; assembler added errata NOP
  6311  000CC0                     
  6312                           ;motors.c: 442:             if(y1 - stepCounter() <= y2){
  6313  000CC0  EC3D  F013         	call	_stepCounter	;wreg free
  6314  000CC4  C017  F01D         	movff	moveToPoint@y1,??_moveToPoint
  6315  000CC8  C018  F01E         	movff	moveToPoint@y1+1,??_moveToPoint+1
  6316  000CCC  5012               	movf	?_stepCounter^0,w,c
  6317  000CCE  5E1D               	subwf	??_moveToPoint^0,f,c
  6318  000CD0  5013               	movf	(?_stepCounter+1)^0,w,c
  6319  000CD2  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6320  000CD4  501D               	movf	??_moveToPoint^0,w,c
  6321  000CD6  5C1B               	subwf	moveToPoint@y2^0,w,c
  6322  000CD8  501E               	movf	(??_moveToPoint+1)^0,w,c
  6323  000CDA  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  6324  000CDC  A0D8               	btfss	status,0,c
  6325  000CDE  EF73  F006         	goto	u3541
  6326  000CE2  EF76  F006         	goto	u3540
  6327  000CE6                     u3541:
  6328  000CE6  FFFF               	dw	65535	; assembler added errata NOP
  6329  000CE8  EF79  F006         	goto	l4102
  6330  000CEC                     u3540:
  6331  000CEC  FFFF               	dw	65535	; assembler added errata NOP
  6332  000CEE  EF2A  F006         	goto	l4086
  6333  000CF2                     l4102:
  6334  000CF2  FFFF               	dw	65535	; assembler added errata NOP
  6335  000CF4  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6336  000CF6  B4D8               	btfsc	status,2,c
  6337  000CF8  EF80  F006         	goto	u3551
  6338  000CFC  EF83  F006         	goto	u3550
  6339  000D00                     u3551:
  6340  000D00  FFFF               	dw	65535	; assembler added errata NOP
  6341  000D02  EF93  F006         	goto	l4110
  6342  000D06                     u3550:
  6343  000D06  FFFF               	dw	65535	; assembler added errata NOP
  6344  000D08                     
  6345                           ;motors.c: 451:             motCounter[1][0] += motCounter[1][1];
  6346  000D08  506A               	movf	(_motCounter+3)^0,w,c
  6347  000D0A  2669               	addwf	(_motCounter+2)^0,f,c
  6348                           
  6349                           ;motors.c: 452:             if(motCounter[1][0] < 0){
  6350  000D0C  BE69               	btfsc	(_motCounter+2)^0,7,c
  6351  000D0E  EF8E  F006         	goto	u3560
  6352  000D12  EF8B  F006         	goto	u3561
  6353  000D16                     u3561:
  6354  000D16  FFFF               	dw	65535	; assembler added errata NOP
  6355  000D18  EF4A  F006         	goto	l4094
  6356  000D1C                     u3560:
  6357  000D1C  FFFF               	dw	65535	; assembler added errata NOP
  6358  000D1E                     
  6359                           ;motors.c: 453:                 motCounter[1][0] = 3;
  6360  000D1E  0E03               	movlw	3
  6361  000D20  6E69               	movwf	(_motCounter+2)^0,c
  6362  000D22  EF4A  F006         	goto	l4094
  6363  000D26                     l178:
  6364  000D26                     l4110:
  6365  000D26  FFFF               	dw	65535	; assembler added errata NOP
  6366  000D28  ECD9  F012         	call	_stepMade	;wreg free
  6367  000D2C  5012               	movf	?_stepMade^0,w,c
  6368  000D2E  1013               	iorwf	(?_stepMade+1)^0,w,c
  6369  000D30  B4D8               	btfsc	status,2,c
  6370  000D32  EF9D  F006         	goto	u3571
  6371  000D36  EFA0  F006         	goto	u3570
  6372  000D3A                     u3571:
  6373  000D3A  FFFF               	dw	65535	; assembler added errata NOP
  6374  000D3C  EF93  F006         	goto	l4110
  6375  000D40                     u3570:
  6376  000D40                     l4112:
  6377  000D40  FFFF               	dw	65535	; assembler added errata NOP
  6378                           
  6379                           ;motors.c: 365:     while(keepMovingX || keepMovingY){
  6380  000D42  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6381  000D44  A4D8               	btfss	status,2,c
  6382  000D46  EFA7  F006         	goto	u3581
  6383  000D4A  EFAA  F006         	goto	u3580
  6384  000D4E                     u3581:
  6385  000D4E  FFFF               	dw	65535	; assembler added errata NOP
  6386  000D50  EF73  F005         	goto	l4050
  6387  000D54                     u3580:
  6388  000D54  FFFF               	dw	65535	; assembler added errata NOP
  6389  000D56  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6390  000D58  A4D8               	btfss	status,2,c
  6391  000D5A  EFB1  F006         	goto	u3591
  6392  000D5E  EFB4  F006         	goto	u3590
  6393  000D62                     u3591:
  6394  000D62  FFFF               	dw	65535	; assembler added errata NOP
  6395  000D64  EF73  F005         	goto	l4050
  6396  000D68                     u3590:
  6397  000D68                     l161:
  6398  000D68  FFFF               	dw	65535	; assembler added errata NOP
  6399                           
  6400                           ;motors.c: 476:     T0CONbits.TMR0ON = 0;
  6401  000D6A  9ED5               	bcf	213,7,c	;volatile
  6402                           
  6403                           ;motors.c: 477:     T2CONbits.TMR2ON = 0;
  6404  000D6C  94CA               	bcf	202,2,c	;volatile
  6405  000D6E                     
  6406                           ;motors.c: 479:     resetTM0_Temp();
  6407  000D6E  EC57  F013         	call	_resetTM0_Temp	;wreg free
  6408                           
  6409                           ;motors.c: 480:     resetTM2_Temp();
  6410  000D72  ECF5  F012         	call	_resetTM2_Temp	;wreg free
  6411  000D76                     
  6412                           ;motors.c: 482:     TMR0 = 0;
  6413  000D76  0E00               	movlw	0
  6414  000D78  6ED7               	movwf	215,c	;volatile
  6415  000D7A  0E00               	movlw	0
  6416  000D7C  6ED6               	movwf	214,c	;volatile
  6417  000D7E                     
  6418                           ;motors.c: 483:     TMR2 = 0;
  6419  000D7E  0E00               	movlw	0
  6420  000D80  6ECC               	movwf	204,c	;volatile
  6421                           
  6422                           ;motors.c: 486:     resetStep();
  6423  000D82  EC5C  F013         	call	_resetStep	;wreg free
  6424  000D86                     
  6425                           ;motors.c: 488:     return(tm0Error);
  6426  000D86  5059               	movf	_tm0Error^0,w,c
  6427  000D88  0012               	return		;funcret
  6428  000D8A  FFFF               	dw	65535	; errata NOP
  6429  000D8C                     __end_of_moveToPoint:
  6430                           	callstack 0
  6431                           
  6432 ;; *************** function _stepCounter *****************
  6433 ;; Defined at:
  6434 ;;		line 71 in file "timer.c"
  6435 ;; Parameters:    Size  Location     Type
  6436 ;;		None
  6437 ;; Auto vars:     Size  Location     Type
  6438 ;;		None
  6439 ;; Return value:  Size  Location     Type
  6440 ;;                  2   17[COMRAM] unsigned int 
  6441 ;; Registers used:
  6442 ;;		None
  6443 ;; Tracked objects:
  6444 ;;		On entry : 0/0
  6445 ;;		On exit  : 0/0
  6446 ;;		Unchanged: 0/0
  6447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6448 ;;      Params:         2       0       0       0       0       0       0
  6449 ;;      Locals:         0       0       0       0       0       0       0
  6450 ;;      Temps:          0       0       0       0       0       0       0
  6451 ;;      Totals:         2       0       0       0       0       0       0
  6452 ;;Total ram usage:        2 bytes
  6453 ;; Hardware stack levels used:    1
  6454 ;; Hardware stack levels required when called:    4
  6455 ;; This function calls:
  6456 ;;		Nothing
  6457 ;; This function is called by:
  6458 ;;		_moveToPoint
  6459 ;; This function uses a non-reentrant model
  6460 ;;
  6461                           
  6462                           	psect	text35
  6463  00267A                     __ptext35:
  6464                           	callstack 0
  6465  00267A                     _stepCounter:
  6466                           	callstack 0
  6467  00267A  FFFF               	dw	65535	; assembler added errata NOP
  6468  00267C                     
  6469                           ;timer.c: 72:     return pwmStep;
  6470  00267C  C05C  F012         	movff	_pwmStep,?_stepCounter	;volatile
  6471  002680  6A13               	clrf	(?_stepCounter+1)^0,c
  6472  002682  0012               	return		;funcret
  6473  002684  FFFF               	dw	65535	; errata NOP
  6474  002686                     __end_of_stepCounter:
  6475                           	callstack 0
  6476                           
  6477 ;; *************** function _liftArm *****************
  6478 ;; Defined at:
  6479 ;;		line 690 in file "motors.c"
  6480 ;; Parameters:    Size  Location     Type
  6481 ;;		None
  6482 ;; Auto vars:     Size  Location     Type
  6483 ;;		None
  6484 ;; Return value:  Size  Location     Type
  6485 ;;                  1    wreg      unsigned char 
  6486 ;; Registers used:
  6487 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6488 ;; Tracked objects:
  6489 ;;		On entry : 0/0
  6490 ;;		On exit  : 0/0
  6491 ;;		Unchanged: 0/0
  6492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6493 ;;      Params:         0       0       0       0       0       0       0
  6494 ;;      Locals:         0       0       0       0       0       0       0
  6495 ;;      Temps:          0       0       0       0       0       0       0
  6496 ;;      Totals:         0       0       0       0       0       0       0
  6497 ;;Total ram usage:        0 bytes
  6498 ;; Hardware stack levels used:    1
  6499 ;; Hardware stack levels required when called:    5
  6500 ;; This function calls:
  6501 ;;		_resetStep
  6502 ;;		_resetTM0_Temp
  6503 ;;		_resetTM2_Temp
  6504 ;;		_stepMade
  6505 ;; This function is called by:
  6506 ;;		_executeData
  6507 ;; This function uses a non-reentrant model
  6508 ;;
  6509                           
  6510                           	psect	text36
  6511  002226                     __ptext36:
  6512                           	callstack 0
  6513  002226                     _liftArm:
  6514                           	callstack 0
  6515  002226  FFFF               	dw	65535	; assembler added errata NOP
  6516  002228                     
  6517                           ;motors.c: 696:     motCounter[2][1] = -1;
  6518  002228  686C               	setf	(_motCounter+5)^0,c
  6519                           
  6520                           ;motors.c: 699:     T2CONbits.TMR2ON = 1;
  6521  00222A  84CA               	bsf	202,2,c	;volatile
  6522  00222C                     
  6523                           ;motors.c: 701:     tm0Error = 0;
  6524  00222C  0E00               	movlw	0
  6525  00222E  6E5A               	movwf	(_tm0Error+1)^0,c
  6526  002230  0E00               	movlw	0
  6527  002232  6E59               	movwf	_tm0Error^0,c
  6528                           
  6529                           ;motors.c: 702:     tm0Limit = 200;
  6530  002234  0EC8               	movlw	200
  6531  002236  6E66               	movwf	_tm0Limit^0,c
  6532  002238                     
  6533                           ;motors.c: 703:     T0CONbits.TMR0ON = 1;
  6534  002238  8ED5               	bsf	213,7,c	;volatile
  6535                           
  6536                           ;motors.c: 707:     while(!PORTEbits.RE2){
  6537  00223A  EF57  F011         	goto	l214
  6538  00223E                     l4232:
  6539  00223E  FFFF               	dw	65535	; assembler added errata NOP
  6540                           
  6541                           ;motors.c: 709:         resetStep();
  6542  002240  EC5C  F013         	call	_resetStep	;wreg free
  6543  002244                     
  6544                           ;motors.c: 712:         if(tm0Error){
  6545  002244  5059               	movf	_tm0Error^0,w,c
  6546  002246  105A               	iorwf	(_tm0Error+1)^0,w,c
  6547  002248  B4D8               	btfsc	status,2,c
  6548  00224A  EF29  F011         	goto	u3721
  6549  00224E  EF2C  F011         	goto	u3720
  6550  002252                     u3721:
  6551  002252  FFFF               	dw	65535	; assembler added errata NOP
  6552  002254  EF33  F011         	goto	l4238
  6553  002258                     u3720:
  6554  002258  FFFF               	dw	65535	; assembler added errata NOP
  6555  00225A                     
  6556                           ;motors.c: 717:             tm0Error = 6;
  6557  00225A  0E00               	movlw	0
  6558  00225C  6E5A               	movwf	(_tm0Error+1)^0,c
  6559  00225E  0E06               	movlw	6
  6560  002260  6E59               	movwf	_tm0Error^0,c
  6561                           
  6562                           ;motors.c: 718:             break;
  6563  002262  EF60  F011         	goto	l217
  6564  002266                     l4238:
  6565  002266  FFFF               	dw	65535	; assembler added errata NOP
  6566                           
  6567                           ;motors.c: 727:             motCounter[2][0] += motCounter[2][1];
  6568  002268  506C               	movf	(_motCounter+5)^0,w,c
  6569  00226A  266B               	addwf	(_motCounter+4)^0,f,c
  6570                           
  6571                           ;motors.c: 728:             if(motCounter[2][0] < 0){
  6572  00226C  BE6B               	btfsc	(_motCounter+4)^0,7,c
  6573  00226E  EF3E  F011         	goto	u3730
  6574  002272  EF3B  F011         	goto	u3731
  6575  002276                     u3731:
  6576  002276  FFFF               	dw	65535	; assembler added errata NOP
  6577  002278  EF41  F011         	goto	l4242
  6578  00227C                     u3730:
  6579  00227C  FFFF               	dw	65535	; assembler added errata NOP
  6580  00227E                     
  6581                           ;motors.c: 729:                 motCounter[2][0] = 3;
  6582  00227E  0E03               	movlw	3
  6583  002280  6E6B               	movwf	(_motCounter+4)^0,c
  6584  002282                     l4242:
  6585  002282  FFFF               	dw	65535	; assembler added errata NOP
  6586                           
  6587                           ;motors.c: 732:             LATC = stepMot3[motCounter[2][0]];
  6588  002284  0E84               	movlw	low _stepMot3
  6589  002286  246B               	addwf	(_motCounter+4)^0,w,c
  6590  002288  6ED9               	movwf	fsr2l,c
  6591  00228A  6ADA               	clrf	fsr2h,c
  6592  00228C  0E00               	movlw	high _stepMot3
  6593  00228E  22DA               	addwfc	fsr2h,f,c
  6594  002290  50DF               	movf	indf2,w,c
  6595  002292  6E8B               	movwf	139,c	;volatile
  6596  002294                     l4244:
  6597  002294  FFFF               	dw	65535	; assembler added errata NOP
  6598  002296  ECD9  F012         	call	_stepMade	;wreg free
  6599  00229A  5012               	movf	?_stepMade^0,w,c
  6600  00229C  1013               	iorwf	(?_stepMade+1)^0,w,c
  6601  00229E  B4D8               	btfsc	status,2,c
  6602  0022A0  EF54  F011         	goto	u3741
  6603  0022A4  EF57  F011         	goto	u3740
  6604  0022A8                     u3741:
  6605  0022A8  FFFF               	dw	65535	; assembler added errata NOP
  6606  0022AA  EF4A  F011         	goto	l4244
  6607  0022AE                     u3740:
  6608  0022AE                     l214:
  6609  0022AE  FFFF               	dw	65535	; assembler added errata NOP
  6610                           
  6611                           ;motors.c: 707:     while(!PORTEbits.RE2){
  6612  0022B0  A484               	btfss	132,2,c	;volatile
  6613  0022B2  EF5D  F011         	goto	u3751
  6614  0022B6  EF60  F011         	goto	u3750
  6615  0022BA                     u3751:
  6616  0022BA  FFFF               	dw	65535	; assembler added errata NOP
  6617  0022BC  EF1F  F011         	goto	l4232
  6618  0022C0                     u3750:
  6619  0022C0                     l217:
  6620  0022C0  FFFF               	dw	65535	; assembler added errata NOP
  6621                           
  6622                           ;motors.c: 749:     T0CONbits.TMR0ON = 0;
  6623  0022C2  9ED5               	bcf	213,7,c	;volatile
  6624                           
  6625                           ;motors.c: 750:     T2CONbits.TMR2ON = 0;
  6626  0022C4  94CA               	bcf	202,2,c	;volatile
  6627  0022C6                     
  6628                           ;motors.c: 752:     resetTM0_Temp();
  6629  0022C6  EC57  F013         	call	_resetTM0_Temp	;wreg free
  6630                           
  6631                           ;motors.c: 753:     resetTM2_Temp();
  6632  0022CA  ECF5  F012         	call	_resetTM2_Temp	;wreg free
  6633  0022CE                     
  6634                           ;motors.c: 755:     TMR0 = 0;
  6635  0022CE  0E00               	movlw	0
  6636  0022D0  6ED7               	movwf	215,c	;volatile
  6637  0022D2  0E00               	movlw	0
  6638  0022D4  6ED6               	movwf	214,c	;volatile
  6639  0022D6                     
  6640                           ;motors.c: 756:     TMR2 = 0;
  6641  0022D6  0E00               	movlw	0
  6642  0022D8  6ECC               	movwf	204,c	;volatile
  6643                           
  6644                           ;motors.c: 759:     resetStep();
  6645  0022DA  EC5C  F013         	call	_resetStep	;wreg free
  6646  0022DE                     
  6647                           ;motors.c: 761:     return(tm0Error);
  6648  0022DE  5059               	movf	_tm0Error^0,w,c
  6649  0022E0  0012               	return		;funcret
  6650  0022E2  FFFF               	dw	65535	; errata NOP
  6651  0022E4                     __end_of_liftArm:
  6652                           	callstack 0
  6653                           
  6654 ;; *************** function _stepMade *****************
  6655 ;; Defined at:
  6656 ;;		line 60 in file "timer.c"
  6657 ;; Parameters:    Size  Location     Type
  6658 ;;		None
  6659 ;; Auto vars:     Size  Location     Type
  6660 ;;  temp            1   19[COMRAM] unsigned char 
  6661 ;; Return value:  Size  Location     Type
  6662 ;;                  2   17[COMRAM] unsigned int 
  6663 ;; Registers used:
  6664 ;;		wreg, status,2
  6665 ;; Tracked objects:
  6666 ;;		On entry : 0/0
  6667 ;;		On exit  : 0/0
  6668 ;;		Unchanged: 0/0
  6669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6670 ;;      Params:         2       0       0       0       0       0       0
  6671 ;;      Locals:         1       0       0       0       0       0       0
  6672 ;;      Temps:          0       0       0       0       0       0       0
  6673 ;;      Totals:         3       0       0       0       0       0       0
  6674 ;;Total ram usage:        3 bytes
  6675 ;; Hardware stack levels used:    1
  6676 ;; Hardware stack levels required when called:    4
  6677 ;; This function calls:
  6678 ;;		Nothing
  6679 ;; This function is called by:
  6680 ;;		_resetPosition
  6681 ;;		_moveToPoint
  6682 ;;		_touchObject
  6683 ;;		_touchTherm
  6684 ;;		_liftArm
  6685 ;;		_rotateObj
  6686 ;;		_pickObject
  6687 ;;		_releaseObj
  6688 ;; This function uses a non-reentrant model
  6689 ;;
  6690                           
  6691                           	psect	text37
  6692  0025B2                     __ptext37:
  6693                           	callstack 0
  6694  0025B2                     _stepMade:
  6695                           	callstack 0
  6696  0025B2  FFFF               	dw	65535	; assembler added errata NOP
  6697  0025B4                     
  6698                           ;timer.c: 61:     unsigned char temp = stepToggle;
  6699  0025B4  C05B  F014         	movff	_stepToggle,stepMade@temp	;volatile
  6700  0025B8                     
  6701                           ;timer.c: 63:     stepToggle = 0;
  6702  0025B8  0E00               	movlw	0
  6703  0025BA  6E5B               	movwf	_stepToggle^0,c	;volatile
  6704  0025BC                     
  6705                           ;timer.c: 65:     return temp;
  6706  0025BC  C014  F012         	movff	stepMade@temp,?_stepMade
  6707  0025C0  6A13               	clrf	(?_stepMade+1)^0,c
  6708  0025C2  0012               	return		;funcret
  6709  0025C4  FFFF               	dw	65535	; errata NOP
  6710  0025C6                     __end_of_stepMade:
  6711                           	callstack 0
  6712                           
  6713 ;; *************** function _resetTM2_Temp *****************
  6714 ;; Defined at:
  6715 ;;		line 26 in file "interrupt.c"
  6716 ;; Parameters:    Size  Location     Type
  6717 ;;		None
  6718 ;; Auto vars:     Size  Location     Type
  6719 ;;		None
  6720 ;; Return value:  Size  Location     Type
  6721 ;;                  1    wreg      void 
  6722 ;; Registers used:
  6723 ;;		wreg, status,2
  6724 ;; Tracked objects:
  6725 ;;		On entry : 0/0
  6726 ;;		On exit  : 0/0
  6727 ;;		Unchanged: 0/0
  6728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6729 ;;      Params:         0       0       0       0       0       0       0
  6730 ;;      Locals:         0       0       0       0       0       0       0
  6731 ;;      Temps:          0       0       0       0       0       0       0
  6732 ;;      Totals:         0       0       0       0       0       0       0
  6733 ;;Total ram usage:        0 bytes
  6734 ;; Hardware stack levels used:    1
  6735 ;; Hardware stack levels required when called:    4
  6736 ;; This function calls:
  6737 ;;		Nothing
  6738 ;; This function is called by:
  6739 ;;		_resetPosition
  6740 ;;		_moveToPoint
  6741 ;;		_touchObject
  6742 ;;		_touchTherm
  6743 ;;		_liftArm
  6744 ;;		_rotateObj
  6745 ;;		_pickObject
  6746 ;;		_releaseObj
  6747 ;; This function uses a non-reentrant model
  6748 ;;
  6749                           
  6750                           	psect	text38
  6751  0025EA                     __ptext38:
  6752                           	callstack 0
  6753  0025EA                     _resetTM2_Temp:
  6754                           	callstack 0
  6755  0025EA  FFFF               	dw	65535	; assembler added errata NOP
  6756  0025EC                     
  6757                           ;interrupt.c: 27:     single_cycle = 0;
  6758  0025EC  0E00               	movlw	0
  6759  0025EE  6E52               	movwf	(_single_cycle+1)^0,c
  6760  0025F0  0E00               	movlw	0
  6761  0025F2  6E51               	movwf	_single_cycle^0,c
  6762                           
  6763                           ;interrupt.c: 28:     completeStep = 0;
  6764  0025F4  0E00               	movlw	0
  6765  0025F6  6E62               	movwf	_completeStep^0,c
  6766  0025F8  0012               	return		;funcret
  6767  0025FA  FFFF               	dw	65535	; errata NOP
  6768  0025FC                     __end_of_resetTM2_Temp:
  6769                           	callstack 0
  6770                           
  6771 ;; *************** function _resetTM0_Temp *****************
  6772 ;; Defined at:
  6773 ;;		line 22 in file "interrupt.c"
  6774 ;; Parameters:    Size  Location     Type
  6775 ;;		None
  6776 ;; Auto vars:     Size  Location     Type
  6777 ;;		None
  6778 ;; Return value:  Size  Location     Type
  6779 ;;                  1    wreg      void 
  6780 ;; Registers used:
  6781 ;;		wreg, status,2
  6782 ;; Tracked objects:
  6783 ;;		On entry : 0/0
  6784 ;;		On exit  : 0/0
  6785 ;;		Unchanged: 0/0
  6786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6787 ;;      Params:         0       0       0       0       0       0       0
  6788 ;;      Locals:         0       0       0       0       0       0       0
  6789 ;;      Temps:          0       0       0       0       0       0       0
  6790 ;;      Totals:         0       0       0       0       0       0       0
  6791 ;;Total ram usage:        0 bytes
  6792 ;; Hardware stack levels used:    1
  6793 ;; Hardware stack levels required when called:    4
  6794 ;; This function calls:
  6795 ;;		Nothing
  6796 ;; This function is called by:
  6797 ;;		_resetPosition
  6798 ;;		_moveToPoint
  6799 ;;		_touchObject
  6800 ;;		_touchTherm
  6801 ;;		_liftArm
  6802 ;; This function uses a non-reentrant model
  6803 ;;
  6804                           
  6805                           	psect	text39
  6806  0026AE                     __ptext39:
  6807                           	callstack 0
  6808  0026AE                     _resetTM0_Temp:
  6809                           	callstack 0
  6810  0026AE  FFFF               	dw	65535	; assembler added errata NOP
  6811  0026B0                     
  6812                           ;interrupt.c: 23:     tm0Count = 0;
  6813  0026B0  0E00               	movlw	0
  6814  0026B2  6E63               	movwf	_tm0Count^0,c
  6815  0026B4  0012               	return		;funcret
  6816  0026B6  FFFF               	dw	65535	; errata NOP
  6817  0026B8                     __end_of_resetTM0_Temp:
  6818                           	callstack 0
  6819                           
  6820 ;; *************** function _resetStep *****************
  6821 ;; Defined at:
  6822 ;;		line 78 in file "timer.c"
  6823 ;; Parameters:    Size  Location     Type
  6824 ;;		None
  6825 ;; Auto vars:     Size  Location     Type
  6826 ;;		None
  6827 ;; Return value:  Size  Location     Type
  6828 ;;                  1    wreg      void 
  6829 ;; Registers used:
  6830 ;;		wreg, status,2
  6831 ;; Tracked objects:
  6832 ;;		On entry : 0/0
  6833 ;;		On exit  : 0/0
  6834 ;;		Unchanged: 0/0
  6835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6836 ;;      Params:         0       0       0       0       0       0       0
  6837 ;;      Locals:         0       0       0       0       0       0       0
  6838 ;;      Temps:          0       0       0       0       0       0       0
  6839 ;;      Totals:         0       0       0       0       0       0       0
  6840 ;;Total ram usage:        0 bytes
  6841 ;; Hardware stack levels used:    1
  6842 ;; Hardware stack levels required when called:    4
  6843 ;; This function calls:
  6844 ;;		Nothing
  6845 ;; This function is called by:
  6846 ;;		_resetPosition
  6847 ;;		_moveToPoint
  6848 ;;		_touchObject
  6849 ;;		_touchTherm
  6850 ;;		_liftArm
  6851 ;;		_rotateObj
  6852 ;; This function uses a non-reentrant model
  6853 ;;
  6854                           
  6855                           	psect	text40
  6856  0026B8                     __ptext40:
  6857                           	callstack 0
  6858  0026B8                     _resetStep:
  6859                           	callstack 0
  6860  0026B8  FFFF               	dw	65535	; assembler added errata NOP
  6861  0026BA                     
  6862                           ;timer.c: 79:     pwmStep = 0;
  6863  0026BA  0E00               	movlw	0
  6864  0026BC  6E5C               	movwf	_pwmStep^0,c	;volatile
  6865  0026BE  0012               	return		;funcret
  6866  0026C0  FFFF               	dw	65535	; errata NOP
  6867  0026C2                     __end_of_resetStep:
  6868                           	callstack 0
  6869                           
  6870 ;; *************** function _getData *****************
  6871 ;; Defined at:
  6872 ;;		line 47 in file "usart.c"
  6873 ;; Parameters:    Size  Location     Type
  6874 ;;		None
  6875 ;; Auto vars:     Size  Location     Type
  6876 ;;		None
  6877 ;; Return value:  Size  Location     Type
  6878 ;;                  2   17[COMRAM] PTR struct .
  6879 ;; Registers used:
  6880 ;;		wreg, status,2, status,0
  6881 ;; Tracked objects:
  6882 ;;		On entry : 0/0
  6883 ;;		On exit  : 0/0
  6884 ;;		Unchanged: 0/0
  6885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6886 ;;      Params:         2       0       0       0       0       0       0
  6887 ;;      Locals:         0       0       0       0       0       0       0
  6888 ;;      Temps:          0       0       0       0       0       0       0
  6889 ;;      Totals:         2       0       0       0       0       0       0
  6890 ;;Total ram usage:        2 bytes
  6891 ;; Hardware stack levels used:    1
  6892 ;; Hardware stack levels required when called:    4
  6893 ;; This function calls:
  6894 ;;		Nothing
  6895 ;; This function is called by:
  6896 ;;		_executeData
  6897 ;; This function uses a non-reentrant model
  6898 ;;
  6899                           
  6900                           	psect	text41
  6901  00262A                     __ptext41:
  6902                           	callstack 0
  6903  00262A                     _getData:
  6904                           	callstack 0
  6905  00262A  FFFF               	dw	65535	; assembler added errata NOP
  6906  00262C                     
  6907                           ;usart.c: 48:     return(&dataSequence[0]);
  6908  00262C  0EC6               	movlw	low _dataSequence
  6909  00262E  6E12               	movwf	?_getData^0,c
  6910  002630  0E00               	movlw	high _dataSequence
  6911  002632  6E13               	movwf	(?_getData+1)^0,c
  6912  002634  0012               	return		;funcret
  6913  002636  FFFF               	dw	65535	; errata NOP
  6914  002638                     __end_of_getData:
  6915                           	callstack 0
  6916                           
  6917 ;; *************** function _clearTM0 *****************
  6918 ;; Defined at:
  6919 ;;		line 32 in file "motors.c"
  6920 ;; Parameters:    Size  Location     Type
  6921 ;;		None
  6922 ;; Auto vars:     Size  Location     Type
  6923 ;;		None
  6924 ;; Return value:  Size  Location     Type
  6925 ;;                  1    wreg      void 
  6926 ;; Registers used:
  6927 ;;		wreg, status,2
  6928 ;; Tracked objects:
  6929 ;;		On entry : 0/0
  6930 ;;		On exit  : 0/0
  6931 ;;		Unchanged: 0/0
  6932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6933 ;;      Params:         0       0       0       0       0       0       0
  6934 ;;      Locals:         0       0       0       0       0       0       0
  6935 ;;      Temps:          0       0       0       0       0       0       0
  6936 ;;      Totals:         0       0       0       0       0       0       0
  6937 ;;Total ram usage:        0 bytes
  6938 ;; Hardware stack levels used:    1
  6939 ;; Hardware stack levels required when called:    4
  6940 ;; This function calls:
  6941 ;;		Nothing
  6942 ;; This function is called by:
  6943 ;;		_main
  6944 ;; This function uses a non-reentrant model
  6945 ;;
  6946                           
  6947                           	psect	text42
  6948  002638                     __ptext42:
  6949                           	callstack 0
  6950  002638                     _clearTM0:
  6951                           	callstack 0
  6952  002638  FFFF               	dw	65535	; assembler added errata NOP
  6953  00263A                     
  6954                           ;motors.c: 33:     tm0Error = 0;
  6955  00263A  0E00               	movlw	0
  6956  00263C  6E5A               	movwf	(_tm0Error+1)^0,c
  6957  00263E  0E00               	movlw	0
  6958  002640  6E59               	movwf	_tm0Error^0,c
  6959  002642  0012               	return		;funcret
  6960  002644  FFFF               	dw	65535	; errata NOP
  6961  002646                     __end_of_clearTM0:
  6962                           	callstack 0
  6963                           
  6964 ;; *************** function _isr *****************
  6965 ;; Defined at:
  6966 ;;		line 52 in file "interrupt.c"
  6967 ;; Parameters:    Size  Location     Type
  6968 ;;		None
  6969 ;; Auto vars:     Size  Location     Type
  6970 ;;  temp            1   16[COMRAM] unsigned char 
  6971 ;; Return value:  Size  Location     Type
  6972 ;;                  1    wreg      void 
  6973 ;; Registers used:
  6974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6975 ;; Tracked objects:
  6976 ;;		On entry : 0/0
  6977 ;;		On exit  : 0/0
  6978 ;;		Unchanged: 0/0
  6979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6980 ;;      Params:         0       0       0       0       0       0       0
  6981 ;;      Locals:         1       0       0       0       0       0       0
  6982 ;;      Temps:          6       0       0       0       0       0       0
  6983 ;;      Totals:         7       0       0       0       0       0       0
  6984 ;;Total ram usage:        7 bytes
  6985 ;; Hardware stack levels used:    1
  6986 ;; Hardware stack levels required when called:    3
  6987 ;; This function calls:
  6988 ;;		_abortAll
  6989 ;;		_fatalError
  6990 ;;		_increaseStep
  6991 ;;		_retPeriod
  6992 ;;		_setThermRel
  6993 ;;		_setTouchRel
  6994 ;;		_toggleStep
  6995 ;;		_whatsTM0Limit
  6996 ;;		_writeTM0
  6997 ;;		i2_storeData
  6998 ;; This function is called by:
  6999 ;;		Interrupt level 2
  7000 ;; This function uses a non-reentrant model
  7001 ;;
  7002                           
  7003                           	psect	intcode
  7004  000008                     __pintcode:
  7005                           	callstack 0
  7006  000008                     _isr:
  7007                           	callstack 0
  7008  000008  FFFF               	dw	65535	; assembler added errata NOP
  7009                           
  7010                           ;incstack = 0
  7011  00000A  826E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7012  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  7013  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  7014  000014  CFF3 F00F          	movff	prodl,??_isr+4
  7015  000018  CFF4 F010          	movff	prodh,??_isr+5
  7016  00001C                     
  7017                           ;interrupt.c: 56:     if(INTCONbits.T0IF){
  7018  00001C  A4F2               	btfss	242,2,c	;volatile
  7019  00001E  EF13  F000         	goto	i2u284_41
  7020  000022  EF16  F000         	goto	i2u284_40
  7021  000026                     i2u284_41:
  7022  000026  FFFF               	dw	65535	; assembler added errata NOP
  7023  000028  EF2C  F000         	goto	i2l3582
  7024  00002C                     i2u284_40:
  7025  00002C  FFFF               	dw	65535	; assembler added errata NOP
  7026  00002E                     
  7027                           ;interrupt.c: 57:         INTCONbits.T0IF = 0;
  7028  00002E  94F2               	bcf	242,2,c	;volatile
  7029  000030                     
  7030                           ;interrupt.c: 60:         tm0Count++;
  7031  000030  2A63               	incf	_tm0Count^0,f,c
  7032  000032                     
  7033                           ;interrupt.c: 62:         if(tm0Count >= whatsTM0Limit()){
  7034  000032  EC84  F013         	call	_whatsTM0Limit	;wreg free
  7035  000036  6E0B               	movwf	??_isr^0,c
  7036  000038  500B               	movf	??_isr^0,w,c
  7037  00003A  5C63               	subwf	_tm0Count^0,w,c
  7038  00003C  A0D8               	btfss	status,0,c
  7039  00003E  EF23  F000         	goto	i2u285_41
  7040  000042  EF26  F000         	goto	i2u285_40
  7041  000046                     i2u285_41:
  7042  000046  FFFF               	dw	65535	; assembler added errata NOP
  7043  000048  EF2C  F000         	goto	i2l3582
  7044  00004C                     i2u285_40:
  7045  00004C  FFFF               	dw	65535	; assembler added errata NOP
  7046  00004E                     
  7047                           ;interrupt.c: 63:             T0CONbits.TMR0ON = 0;
  7048  00004E  9ED5               	bcf	213,7,c	;volatile
  7049  000050                     
  7050                           ;interrupt.c: 64:             tm0Count = 0;
  7051  000050  0E00               	movlw	0
  7052  000052  6E63               	movwf	_tm0Count^0,c
  7053  000054                     
  7054                           ;interrupt.c: 65:             writeTM0();
  7055  000054  EC23  F013         	call	_writeTM0	;wreg free
  7056  000058                     i2l3582:
  7057  000058  FFFF               	dw	65535	; assembler added errata NOP
  7058                           
  7059                           ;interrupt.c: 70:     if(PIR1bits.TMR1IF){
  7060  00005A  A09E               	btfss	158,0,c	;volatile
  7061  00005C  EF32  F000         	goto	i2u286_41
  7062  000060  EF35  F000         	goto	i2u286_40
  7063  000064                     i2u286_41:
  7064  000064  FFFF               	dw	65535	; assembler added errata NOP
  7065  000066  EF45  F000         	goto	i2l3590
  7066  00006A                     i2u286_40:
  7067  00006A  FFFF               	dw	65535	; assembler added errata NOP
  7068  00006C                     
  7069                           ;interrupt.c: 71:         PIR1bits.TMR1IF = 0;
  7070  00006C  909E               	bcf	158,0,c	;volatile
  7071  00006E                     
  7072                           ;interrupt.c: 72:         if(fatalError()){
  7073  00006E  EC8C  F013         	call	_fatalError	;wreg free
  7074  000072  0900               	iorlw	0
  7075  000074  B4D8               	btfsc	status,2,c
  7076  000076  EF3F  F000         	goto	i2u287_41
  7077  00007A  EF42  F000         	goto	i2u287_40
  7078  00007E                     i2u287_41:
  7079  00007E  FFFF               	dw	65535	; assembler added errata NOP
  7080  000080  EF45  F000         	goto	i2l3590
  7081  000084                     i2u287_40:
  7082  000084  FFFF               	dw	65535	; assembler added errata NOP
  7083  000086                     
  7084                           ;interrupt.c: 73:             abortAll();
  7085  000086  ECFE  F012         	call	_abortAll	;wreg free
  7086  00008A                     i2l3590:
  7087  00008A  FFFF               	dw	65535	; assembler added errata NOP
  7088                           
  7089                           ;interrupt.c: 78:     if(PIR1bits.TMR2IF){
  7090  00008C  A29E               	btfss	158,1,c	;volatile
  7091  00008E  EF4B  F000         	goto	i2u288_41
  7092  000092  EF4E  F000         	goto	i2u288_40
  7093  000096                     i2u288_41:
  7094  000096  FFFF               	dw	65535	; assembler added errata NOP
  7095  000098  EF80  F000         	goto	i2l3612
  7096  00009C                     i2u288_40:
  7097  00009C  FFFF               	dw	65535	; assembler added errata NOP
  7098  00009E                     
  7099                           ;interrupt.c: 79:         PIR1bits.TMR2IF = 0;
  7100  00009E  929E               	bcf	158,1,c	;volatile
  7101  0000A0                     
  7102                           ;interrupt.c: 80:         single_cycle++;
  7103  0000A0  4A51               	infsnz	_single_cycle^0,f,c
  7104  0000A2  2A52               	incf	(_single_cycle+1)^0,f,c
  7105  0000A4                     
  7106                           ;interrupt.c: 83:         if(single_cycle > retPeriod()){
  7107  0000A4  EC2A  F013         	call	_retPeriod	;wreg free
  7108  0000A8  5051               	movf	_single_cycle^0,w,c
  7109  0000AA  5C01               	subwf	?_retPeriod^0,w,c
  7110  0000AC  5052               	movf	(_single_cycle+1)^0,w,c
  7111  0000AE  5802               	subwfb	(?_retPeriod+1)^0,w,c
  7112  0000B0  B0D8               	btfsc	status,0,c
  7113  0000B2  EF5D  F000         	goto	i2u289_41
  7114  0000B6  EF60  F000         	goto	i2u289_40
  7115  0000BA                     i2u289_41:
  7116  0000BA  FFFF               	dw	65535	; assembler added errata NOP
  7117  0000BC  EF80  F000         	goto	i2l3612
  7118  0000C0                     i2u289_40:
  7119  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  7120  0000C2                     
  7121                           ;interrupt.c: 84:             single_cycle = 0;
  7122  0000C2  0E00               	movlw	0
  7123  0000C4  6E52               	movwf	(_single_cycle+1)^0,c
  7124  0000C6  0E00               	movlw	0
  7125  0000C8  6E51               	movwf	_single_cycle^0,c
  7126  0000CA                     
  7127                           ;interrupt.c: 85:             completeStep++;
  7128  0000CA  2A62               	incf	_completeStep^0,f,c
  7129  0000CC                     
  7130                           ;interrupt.c: 88:             if(completeStep != 0 && !(completeStep % 2)){
  7131  0000CC  5062               	movf	_completeStep^0,w,c
  7132  0000CE  B4D8               	btfsc	status,2,c
  7133  0000D0  EF6C  F000         	goto	i2u290_41
  7134  0000D4  EF6F  F000         	goto	i2u290_40
  7135  0000D8                     i2u290_41:
  7136  0000D8  FFFF               	dw	65535	; assembler added errata NOP
  7137  0000DA  EF7D  F000         	goto	i2l3610
  7138  0000DE                     i2u290_40:
  7139  0000DE  FFFF               	dw	65535	; assembler added errata NOP
  7140  0000E0  B062               	btfsc	_completeStep^0,0,c
  7141  0000E2  EF75  F000         	goto	i2u291_41
  7142  0000E6  EF78  F000         	goto	i2u291_40
  7143  0000EA                     i2u291_41:
  7144  0000EA  FFFF               	dw	65535	; assembler added errata NOP
  7145  0000EC  EF7D  F000         	goto	i2l3610
  7146  0000F0                     i2u291_40:
  7147  0000F0  FFFF               	dw	65535	; assembler added errata NOP
  7148  0000F2                     
  7149                           ;interrupt.c: 90:                 completeStep = 0;
  7150  0000F2  0E00               	movlw	0
  7151  0000F4  6E62               	movwf	_completeStep^0,c
  7152  0000F6                     
  7153                           ;interrupt.c: 93:                 increaseStep();
  7154  0000F6  EC88  F013         	call	_increaseStep	;wreg free
  7155  0000FA                     i2l3610:
  7156  0000FA  FFFF               	dw	65535	; assembler added errata NOP
  7157                           
  7158                           ;interrupt.c: 98:             toggleStep();
  7159  0000FC  EC61  F013         	call	_toggleStep	;wreg free
  7160  000100                     i2l3612:
  7161  000100  FFFF               	dw	65535	; assembler added errata NOP
  7162                           
  7163                           ;interrupt.c: 103:     if(PIR1bits.ADIF){
  7164  000102  AC9E               	btfss	158,6,c	;volatile
  7165  000104  EF86  F000         	goto	i2u292_41
  7166  000108  EF89  F000         	goto	i2u292_40
  7167  00010C                     i2u292_41:
  7168  00010C  FFFF               	dw	65535	; assembler added errata NOP
  7169  00010E  EFB6  F000         	goto	i2l3624
  7170  000112                     i2u292_40:
  7171  000112  FFFF               	dw	65535	; assembler added errata NOP
  7172  000114                     
  7173                           ;interrupt.c: 104:         PIR1bits.ADIF = 0;
  7174  000114  9C9E               	bcf	158,6,c	;volatile
  7175                           
  7176                           ;interrupt.c: 107:         ADC_res = ADRESL;
  7177  000116  CFC3 F053          	movff	4035,_ADC_res	;volatile
  7178  00011A  6A54               	clrf	(_ADC_res+1)^0,c
  7179  00011C                     
  7180                           ;interrupt.c: 108:         ADC_res |= (ADRESH << 8);
  7181  00011C  50C4               	movf	196,w,c	;volatile
  7182  00011E  6E0C               	movwf	(??_isr+1)^0,c
  7183  000120  6A0B               	clrf	??_isr^0,c
  7184  000122  500B               	movf	??_isr^0,w,c
  7185  000124  1253               	iorwf	_ADC_res^0,f,c
  7186  000126  500C               	movf	(??_isr+1)^0,w,c
  7187  000128  1254               	iorwf	(_ADC_res+1)^0,f,c
  7188                           
  7189                           ;interrupt.c: 111:         if(ADC_res > therm_pressure){
  7190  00012A  0453               	decf	_ADC_res^0,w,c
  7191  00012C  0E04               	movlw	4
  7192  00012E  5854               	subwfb	(_ADC_res+1)^0,w,c
  7193  000130  A0D8               	btfss	status,0,c
  7194  000132  EF9D  F000         	goto	i2u293_41
  7195  000136  EFA0  F000         	goto	i2u293_40
  7196  00013A                     i2u293_41:
  7197  00013A  FFFF               	dw	65535	; assembler added errata NOP
  7198  00013C  EFA7  F000         	goto	i2l3620
  7199  000140                     i2u293_40:
  7200  000140  FFFF               	dw	65535	; assembler added errata NOP
  7201  000142                     
  7202                           ;interrupt.c: 113:             setTouchRel();
  7203  000142  EC66  F013         	call	_setTouchRel	;wreg free
  7204                           
  7205                           ;interrupt.c: 114:             setThermRel();
  7206  000146  EC6B  F013         	call	_setThermRel	;wreg free
  7207                           
  7208                           ;interrupt.c: 115:         }else if(ADC_res > touch_pressure){
  7209  00014A  EFB6  F000         	goto	i2l3624
  7210  00014E                     i2l3620:
  7211  00014E  FFFF               	dw	65535	; assembler added errata NOP
  7212  000150  0453               	decf	_ADC_res^0,w,c
  7213  000152  0E02               	movlw	2
  7214  000154  5854               	subwfb	(_ADC_res+1)^0,w,c
  7215  000156  A0D8               	btfss	status,0,c
  7216  000158  EFB0  F000         	goto	i2u294_41
  7217  00015C  EFB3  F000         	goto	i2u294_40
  7218  000160                     i2u294_41:
  7219  000160  FFFF               	dw	65535	; assembler added errata NOP
  7220  000162  EFB6  F000         	goto	i2l3624
  7221  000166                     i2u294_40:
  7222  000166  FFFF               	dw	65535	; assembler added errata NOP
  7223  000168                     
  7224                           ;interrupt.c: 117:             setTouchRel();
  7225  000168  EC66  F013         	call	_setTouchRel	;wreg free
  7226  00016C                     i2l3624:
  7227  00016C  FFFF               	dw	65535	; assembler added errata NOP
  7228                           
  7229                           ;interrupt.c: 122:     if(PIR1bits.RC1IF){
  7230  00016E  AA9E               	btfss	158,5,c	;volatile
  7231  000170  EFBC  F000         	goto	i2u295_41
  7232  000174  EFBF  F000         	goto	i2u295_40
  7233  000178                     i2u295_41:
  7234  000178  FFFF               	dw	65535	; assembler added errata NOP
  7235  00017A  EFC6  F000         	goto	i2l468
  7236  00017E                     i2u295_40:
  7237  00017E  FFFF               	dw	65535	; assembler added errata NOP
  7238  000180                     
  7239                           ;interrupt.c: 123:         PIR1bits.RC1IF = 0;
  7240  000180  9A9E               	bcf	158,5,c	;volatile
  7241                           
  7242                           ;interrupt.c: 126:         unsigned char temp = RCREG1;
  7243  000182  CFAE F011          	movff	4014,isr@temp	;volatile
  7244  000186                     
  7245                           ;interrupt.c: 128:         storeData(temp);
  7246  000186  5011               	movf	isr@temp^0,w,c
  7247  000188  EC83  F009         	call	i2_storeData
  7248  00018C                     i2l468:
  7249  00018C  FFFF               	dw	65535	; assembler added errata NOP
  7250  00018E  C010  FFF4         	movff	??_isr+5,prodh
  7251  000192  C00F  FFF3         	movff	??_isr+4,prodl
  7252  000196  C00E  FFDA         	movff	??_isr+3,fsr2h
  7253  00019A  C00D  FFD9         	movff	??_isr+2,fsr2l
  7254  00019E  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7255  0001A0  0011               	retfie		f
  7256  0001A2  FFFF               	dw	65535	; errata NOP
  7257  0001A4                     __end_of_isr:
  7258                           	callstack 0
  7259                           
  7260 ;; *************** function i2_storeData *****************
  7261 ;; Defined at:
  7262 ;;		line 183 in file "usart.c"
  7263 ;; Parameters:    Size  Location     Type
  7264 ;;  data            1    wreg     unsigned char 
  7265 ;; Auto vars:     Size  Location     Type
  7266 ;;  data            1    9[COMRAM] unsigned char 
  7267 ;; Return value:  Size  Location     Type
  7268 ;;                  1    wreg      void 
  7269 ;; Registers used:
  7270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7271 ;; Tracked objects:
  7272 ;;		On entry : 0/0
  7273 ;;		On exit  : 0/0
  7274 ;;		Unchanged: 0/0
  7275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7276 ;;      Params:         0       0       0       0       0       0       0
  7277 ;;      Locals:         1       0       0       0       0       0       0
  7278 ;;      Temps:          2       0       0       0       0       0       0
  7279 ;;      Totals:         3       0       0       0       0       0       0
  7280 ;;Total ram usage:        3 bytes
  7281 ;; Hardware stack levels used:    1
  7282 ;; Hardware stack levels required when called:    2
  7283 ;; This function calls:
  7284 ;;		i2_printError
  7285 ;; This function is called by:
  7286 ;;		_isr
  7287 ;; This function uses a non-reentrant model
  7288 ;;
  7289                           
  7290                           	psect	text44
  7291  001306                     __ptext44:
  7292                           	callstack 0
  7293  001306                     i2_storeData:
  7294                           	callstack 0
  7295  001306  FFFF               	dw	65535	; assembler added errata NOP
  7296                           
  7297                           ;incstack = 0
  7298                           ;i2storeData@data stored from wreg
  7299  001308  6E0A               	movwf	i2storeData@data^0,c
  7300  00130A                     
  7301                           ;usart.c: 189:     receivedMex[counter] = data;
  7302  00130A  0E43               	movlw	low _receivedMex
  7303  00130C  245E               	addwf	_counter^0,w,c
  7304  00130E  6ED9               	movwf	fsr2l,c
  7305  001310  6ADA               	clrf	fsr2h,c
  7306  001312  0E00               	movlw	high _receivedMex
  7307  001314  22DA               	addwfc	fsr2h,f,c
  7308  001316  C00A  FFDF         	movff	i2storeData@data,indf2
  7309  00131A                     
  7310                           ;usart.c: 191:     counter++;
  7311  00131A  2A5E               	incf	_counter^0,f,c
  7312                           
  7313                           ;usart.c: 194:     switch(receivedMex[0]){
  7314  00131C  EFAA  F009         	goto	i2l3456
  7315  001320                     i2l3446:
  7316  001320  FFFF               	dw	65535	; assembler added errata NOP
  7317                           
  7318                           ;usart.c: 196:             mexLength = 5;
  7319  001322  0E05               	movlw	5
  7320  001324  6E6D               	movwf	_mexLength^0,c
  7321                           
  7322                           ;usart.c: 197:             neverCheck = 0;
  7323  001326  0E00               	movlw	0
  7324  001328  6E5D               	movwf	_neverCheck^0,c
  7325                           
  7326                           ;usart.c: 198:             break;
  7327  00132A  EFC5  F009         	goto	i2l3458
  7328  00132E                     i2l3448:
  7329  00132E  FFFF               	dw	65535	; assembler added errata NOP
  7330                           
  7331                           ;usart.c: 200:             mexLength = 9;
  7332  001330  0E09               	movlw	9
  7333  001332  6E6D               	movwf	_mexLength^0,c
  7334                           
  7335                           ;usart.c: 201:             neverCheck = 0;
  7336  001334  0E00               	movlw	0
  7337  001336  6E5D               	movwf	_neverCheck^0,c
  7338                           
  7339                           ;usart.c: 202:             break;
  7340  001338  EFC5  F009         	goto	i2l3458
  7341  00133C                     i2l3450:
  7342  00133C  FFFF               	dw	65535	; assembler added errata NOP
  7343                           
  7344                           ;usart.c: 204:             mexLength = 1;
  7345  00133E  0E01               	movlw	1
  7346  001340  6E6D               	movwf	_mexLength^0,c
  7347                           
  7348                           ;usart.c: 205:             neverCheck = 0;
  7349  001342  0E00               	movlw	0
  7350  001344  6E5D               	movwf	_neverCheck^0,c
  7351                           
  7352                           ;usart.c: 206:             break;
  7353  001346  EFC5  F009         	goto	i2l3458
  7354  00134A                     i2l3452:
  7355  00134A  FFFF               	dw	65535	; assembler added errata NOP
  7356                           
  7357                           ;usart.c: 208:             neverCheck = 1;
  7358  00134C  0E01               	movlw	1
  7359  00134E  6E5D               	movwf	_neverCheck^0,c
  7360                           
  7361                           ;usart.c: 209:             break;
  7362  001350  EFC5  F009         	goto	i2l3458
  7363  001354                     i2l3456:
  7364  001354  FFFF               	dw	65535	; assembler added errata NOP
  7365  001356  5043               	movf	_receivedMex^0,w,c
  7366  001358  6E08               	movwf	??i2_storeData^0,c
  7367  00135A  6A09               	clrf	(??i2_storeData+1)^0,c
  7368                           
  7369                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7370                           ; Switch size 1, requested type "simple"
  7371                           ; Number of cases is 1, Range of values is 0 to 0
  7372                           ; switch strategies available:
  7373                           ; Name         Instructions Cycles
  7374                           ; simple_byte            4     3 (average)
  7375                           ;	Chosen strategy is simple_byte
  7376  00135C  5009               	movf	(??i2_storeData+1)^0,w,c
  7377  00135E  0A00               	xorlw	0	; case 0
  7378  001360  B4D8               	btfsc	status,2,c
  7379  001362  EFB5  F009         	goto	i2l4850
  7380  001366  EFA5  F009         	goto	i2l3452
  7381  00136A                     i2l4850:
  7382  00136A  FFFF               	dw	65535	; assembler added errata NOP
  7383                           
  7384                           ; Switch size 1, requested type "simple"
  7385                           ; Number of cases is 3, Range of values is 1 to 3
  7386                           ; switch strategies available:
  7387                           ; Name         Instructions Cycles
  7388                           ; simple_byte           10     6 (average)
  7389                           ;	Chosen strategy is simple_byte
  7390  00136C  5008               	movf	??i2_storeData^0,w,c
  7391  00136E  0A01               	xorlw	1	; case 1
  7392  001370  B4D8               	btfsc	status,2,c
  7393  001372  EF90  F009         	goto	i2l3446
  7394  001376  0A03               	xorlw	3	; case 2
  7395  001378  B4D8               	btfsc	status,2,c
  7396  00137A  EF97  F009         	goto	i2l3448
  7397  00137E  0A01               	xorlw	1	; case 3
  7398  001380  B4D8               	btfsc	status,2,c
  7399  001382  EF9E  F009         	goto	i2l3450
  7400  001386  EFA5  F009         	goto	i2l3452
  7401  00138A                     i2l3458:
  7402  00138A  FFFF               	dw	65535	; assembler added errata NOP
  7403                           
  7404                           ;usart.c: 214:     if(counter == mexLength && !neverCheck){
  7405  00138C  506D               	movf	_mexLength^0,w,c
  7406  00138E  185E               	xorwf	_counter^0,w,c
  7407  001390  A4D8               	btfss	status,2,c
  7408  001392  EFCD  F009         	goto	i2u272_41
  7409  001396  EFD0  F009         	goto	i2u272_40
  7410  00139A                     i2u272_41:
  7411  00139A  FFFF               	dw	65535	; assembler added errata NOP
  7412  00139C  EFC2  F00A         	goto	i2l601
  7413  0013A0                     i2u272_40:
  7414  0013A0  FFFF               	dw	65535	; assembler added errata NOP
  7415  0013A2  505D               	movf	_neverCheck^0,w,c
  7416  0013A4  A4D8               	btfss	status,2,c
  7417  0013A6  EFD7  F009         	goto	i2u273_41
  7418  0013AA  EFDA  F009         	goto	i2u273_40
  7419  0013AE                     i2u273_41:
  7420  0013AE  FFFF               	dw	65535	; assembler added errata NOP
  7421  0013B0  EFC2  F00A         	goto	i2l601
  7422  0013B4                     i2u273_40:
  7423  0013B4  FFFF               	dw	65535	; assembler added errata NOP
  7424  0013B6                     
  7425                           ;usart.c: 215:         counter = 0;
  7426  0013B6  0E00               	movlw	0
  7427  0013B8  6E5E               	movwf	_counter^0,c
  7428                           
  7429                           ;usart.c: 218:         switch(receivedMex[0]){
  7430  0013BA  EFA4  F00A         	goto	i2l3500
  7431  0013BE                     i2l3464:
  7432  0013BE  FFFF               	dw	65535	; assembler added errata NOP
  7433                           
  7434                           ;usart.c: 220:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  7435  0013C0  5061               	movf	_dataCounter^0,w,c
  7436  0013C2  0D04               	mullw	4
  7437  0013C4  0EC6               	movlw	low _dataSequence
  7438  0013C6  24F3               	addwf	243,w,c
  7439  0013C8  6ED9               	movwf	fsr2l,c
  7440  0013CA  0E00               	movlw	high _dataSequence
  7441  0013CC  20F4               	addwfc	prodh,w,c
  7442  0013CE  6EDA               	movwf	fsr2h,c
  7443  0013D0  C044  FFDF         	movff	_receivedMex+1,indf2
  7444                           
  7445                           ;usart.c: 221:                 dataSequence[dataCounter].posX = receivedMex[2] * 5;
  7446  0013D4  5061               	movf	_dataCounter^0,w,c
  7447  0013D6  0D04               	mullw	4
  7448  0013D8  0EC7               	movlw	low (_dataSequence+1)
  7449  0013DA  24F3               	addwf	243,w,c
  7450  0013DC  6ED9               	movwf	fsr2l,c
  7451  0013DE  0E00               	movlw	high (_dataSequence+1)
  7452  0013E0  20F4               	addwfc	prodh,w,c
  7453  0013E2  6EDA               	movwf	fsr2h,c
  7454  0013E4  5045               	movf	(_receivedMex+2)^0,w,c
  7455  0013E6  0D05               	mullw	5
  7456  0013E8  CFF3 FFDF          	movff	prodl,indf2
  7457                           
  7458                           ;usart.c: 222:                 dataSequence[dataCounter].posY = receivedMex[3] * 5;
  7459  0013EC  5061               	movf	_dataCounter^0,w,c
  7460  0013EE  0D04               	mullw	4
  7461  0013F0  0EC8               	movlw	low (_dataSequence+2)
  7462  0013F2  24F3               	addwf	243,w,c
  7463  0013F4  6ED9               	movwf	fsr2l,c
  7464  0013F6  0E00               	movlw	high (_dataSequence+2)
  7465  0013F8  20F4               	addwfc	prodh,w,c
  7466  0013FA  6EDA               	movwf	fsr2h,c
  7467  0013FC  5046               	movf	(_receivedMex+3)^0,w,c
  7468  0013FE  0D05               	mullw	5
  7469  001400  CFF3 FFDF          	movff	prodl,indf2
  7470                           
  7471                           ;usart.c: 223:                 dataSequence[dataCounter].rotation = receivedMex[4];
  7472  001404  5061               	movf	_dataCounter^0,w,c
  7473  001406  0D04               	mullw	4
  7474  001408  0EC9               	movlw	low (_dataSequence+3)
  7475  00140A  24F3               	addwf	243,w,c
  7476  00140C  6ED9               	movwf	fsr2l,c
  7477  00140E  0E00               	movlw	high (_dataSequence+3)
  7478  001410  20F4               	addwfc	prodh,w,c
  7479  001412  6EDA               	movwf	fsr2h,c
  7480  001414  C047  FFDF         	movff	_receivedMex+4,indf2
  7481                           
  7482                           ;usart.c: 226:                 if((dataSequence[dataCounter].posX > maxX || dataSequence
      +                          [dataCounter].posY > maxY) &&
  7483  001418  5061               	movf	_dataCounter^0,w,c
  7484  00141A  0D04               	mullw	4
  7485  00141C  0EC7               	movlw	low (_dataSequence+1)
  7486  00141E  24F3               	addwf	243,w,c
  7487  001420  6ED9               	movwf	fsr2l,c
  7488  001422  0E00               	movlw	high (_dataSequence+1)
  7489  001424  20F4               	addwfc	prodh,w,c
  7490  001426  6EDA               	movwf	fsr2h,c
  7491  001428  0E66               	movlw	102
  7492  00142A  60DF               	cpfslt	indf2,c
  7493  00142C  EF1A  F00A         	goto	i2u274_41
  7494  001430  EF1D  F00A         	goto	i2u274_40
  7495  001434                     i2u274_41:
  7496  001434  FFFF               	dw	65535	; assembler added errata NOP
  7497  001436  EF2F  F00A         	goto	i2l3468
  7498  00143A                     i2u274_40:
  7499  00143A  FFFF               	dw	65535	; assembler added errata NOP
  7500  00143C  5061               	movf	_dataCounter^0,w,c
  7501  00143E  0D04               	mullw	4
  7502  001440  0EC8               	movlw	low (_dataSequence+2)
  7503  001442  24F3               	addwf	243,w,c
  7504  001444  6ED9               	movwf	fsr2l,c
  7505  001446  0E00               	movlw	high (_dataSequence+2)
  7506  001448  20F4               	addwfc	prodh,w,c
  7507  00144A  6EDA               	movwf	fsr2h,c
  7508  00144C  0E65               	movlw	101
  7509  00144E  64DF               	cpfsgt	indf2,c
  7510  001450  EF2C  F00A         	goto	i2u275_41
  7511  001454  EF2F  F00A         	goto	i2u275_40
  7512  001458                     i2u275_41:
  7513  001458  FFFF               	dw	65535	; assembler added errata NOP
  7514  00145A  EF47  F00A         	goto	i2l3472
  7515  00145E                     i2u275_40:
  7516  00145E                     i2l3468:
  7517  00145E  FFFF               	dw	65535	; assembler added errata NOP
  7518  001460  5061               	movf	_dataCounter^0,w,c
  7519  001462  0D04               	mullw	4
  7520  001464  0EC6               	movlw	low _dataSequence
  7521  001466  24F3               	addwf	243,w,c
  7522  001468  6ED9               	movwf	fsr2l,c
  7523  00146A  0E00               	movlw	high _dataSequence
  7524  00146C  20F4               	addwfc	prodh,w,c
  7525  00146E  6EDA               	movwf	fsr2h,c
  7526  001470  28DE               	incf	postinc2,w,c
  7527  001472  B4D8               	btfsc	status,2,c
  7528  001474  EF3E  F00A         	goto	i2u276_41
  7529  001478  EF41  F00A         	goto	i2u276_40
  7530  00147C                     i2u276_41:
  7531  00147C  FFFF               	dw	65535	; assembler added errata NOP
  7532  00147E  EF47  F00A         	goto	i2l3472
  7533  001482                     i2u276_40:
  7534  001482  FFFF               	dw	65535	; assembler added errata NOP
  7535  001484                     
  7536                           ;usart.c: 227:                         dataSequence[dataCounter].feederLine != 0xFF){;us
      +                          art.c: 228:                     printError(5);
  7537  001484  0E05               	movlw	5
  7538  001486  EC7A  F00E         	call	i2_printError
  7539                           
  7540                           ;usart.c: 229:                 }else{
  7541  00148A  EFBF  F00A         	goto	i2l3502
  7542  00148E                     i2l3472:
  7543  00148E  FFFF               	dw	65535	; assembler added errata NOP
  7544                           
  7545                           ;usart.c: 230:                     dataCounter++;
  7546  001490  2A61               	incf	_dataCounter^0,f,c
  7547  001492  EFBF  F00A         	goto	i2l3502
  7548  001496                     i2l594:
  7549  001496  FFFF               	dw	65535	; assembler added errata NOP
  7550                           
  7551                           ;usart.c: 235:                 newSequenceData.L = receivedMex[1];
  7552  001498  C044  F0DA         	movff	_receivedMex+1,_newSequenceData
  7553                           
  7554                           ;usart.c: 236:                 newSequenceData.W = receivedMex[2];
  7555  00149C  C045  F0DB         	movff	_receivedMex+2,_newSequenceData+1
  7556  0014A0                     
  7557                           ;usart.c: 237:                 newSequenceData.init_posX = receivedMex[3] * 5;
  7558  0014A0  5046               	movf	(_receivedMex+3)^0,w,c
  7559  0014A2  0D05               	mullw	5
  7560  0014A4  CFF3 F0DC          	movff	prodl,_newSequenceData+2
  7561                           
  7562                           ;usart.c: 238:                 newSequenceData.init_posY = receivedMex[4] * 5;
  7563  0014A8  5047               	movf	(_receivedMex+4)^0,w,c
  7564  0014AA  0D05               	mullw	5
  7565  0014AC  CFF3 F0DD          	movff	prodl,_newSequenceData+3
  7566  0014B0                     
  7567                           ;usart.c: 239:                 newSequenceData.init_rot = receivedMex[5];
  7568  0014B0  C048  F0DE         	movff	_receivedMex+5,_newSequenceData+4
  7569                           
  7570                           ;usart.c: 240:                 newSequenceData.end_posX = receivedMex[6] * 5;
  7571  0014B4  5049               	movf	(_receivedMex+6)^0,w,c
  7572  0014B6  0D05               	mullw	5
  7573  0014B8  CFF3 F0DF          	movff	prodl,_newSequenceData+5
  7574                           
  7575                           ;usart.c: 241:                 newSequenceData.end_posY = receivedMex[7] * 5;
  7576  0014BC  504A               	movf	(_receivedMex+7)^0,w,c
  7577  0014BE  0D05               	mullw	5
  7578  0014C0  CFF3 F0E0          	movff	prodl,_newSequenceData+6
  7579  0014C4                     
  7580                           ;usart.c: 242:                 newSequenceData.end_rot = receivedMex[8];
  7581  0014C4  C04B  F0E1         	movff	_receivedMex+8,_newSequenceData+7
  7582  0014C8                     
  7583                           ;usart.c: 245:                 if(newSequenceData.init_posX > maxFeedX ||
  7584  0014C8  0E1F               	movlw	31
  7585  0014CA  0100               	movlb	0	; () banked
  7586  0014CC  61DC               	cpfslt	(_newSequenceData+2)& (0+255),b
  7587  0014CE  EF6B  F00A         	goto	i2u277_41
  7588  0014D2  EF6E  F00A         	goto	i2u277_40
  7589  0014D6                     i2u277_41:
  7590  0014D6  FFFF               	dw	65535	; assembler added errata NOP
  7591  0014D8  EF8C  F00A         	goto	i2l3488
  7592  0014DC                     i2u277_40:
  7593  0014DC  FFFF               	dw	65535	; assembler added errata NOP
  7594  0014DE                     
  7595                           ; BSR set to: 0
  7596  0014DE  0E66               	movlw	102
  7597  0014E0  61DF               	cpfslt	(_newSequenceData+5)& (0+255),b
  7598  0014E2  EF75  F00A         	goto	i2u278_41
  7599  0014E6  EF78  F00A         	goto	i2u278_40
  7600  0014EA                     i2u278_41:
  7601  0014EA  FFFF               	dw	65535	; assembler added errata NOP
  7602  0014EC  EF8C  F00A         	goto	i2l3488
  7603  0014F0                     i2u278_40:
  7604  0014F0  FFFF               	dw	65535	; assembler added errata NOP
  7605  0014F2                     
  7606                           ; BSR set to: 0
  7607  0014F2  0E65               	movlw	101
  7608  0014F4  61DD               	cpfslt	(_newSequenceData+3)& (0+255),b
  7609  0014F6  EF7F  F00A         	goto	i2u279_41
  7610  0014FA  EF82  F00A         	goto	i2u279_40
  7611  0014FE                     i2u279_41:
  7612  0014FE  FFFF               	dw	65535	; assembler added errata NOP
  7613  001500  EF8C  F00A         	goto	i2l3488
  7614  001504                     i2u279_40:
  7615  001504  FFFF               	dw	65535	; assembler added errata NOP
  7616  001506                     
  7617                           ; BSR set to: 0
  7618  001506  0E65               	movlw	101
  7619  001508  65E0               	cpfsgt	(_newSequenceData+6)& (0+255),b
  7620  00150A  EF89  F00A         	goto	i2u280_41
  7621  00150E  EF8C  F00A         	goto	i2u280_40
  7622  001512                     i2u280_41:
  7623  001512  FFFF               	dw	65535	; assembler added errata NOP
  7624  001514  EF94  F00A         	goto	i2l3492
  7625  001518                     i2u280_40:
  7626  001518                     i2l3488:
  7627  001518  FFFF               	dw	65535	; assembler added errata NOP
  7628                           
  7629                           ; BSR set to: 0
  7630                           ;usart.c: 248:                         newSequenceData.end_posY > maxY){;usart.c: 249:  
      +                                             _newSequence = 0;
  7631  00151A  0E00               	movlw	0
  7632  00151C  6E5F               	movwf	__newSequence^0,c
  7633  00151E                     
  7634                           ; BSR set to: 0
  7635                           ;usart.c: 250:                     printError(5);
  7636  00151E  0E05               	movlw	5
  7637  001520  EC7A  F00E         	call	i2_printError
  7638                           
  7639                           ;usart.c: 251:                 }else{
  7640  001524  EFBF  F00A         	goto	i2l3502
  7641  001528                     i2l3492:
  7642  001528  FFFF               	dw	65535	; assembler added errata NOP
  7643                           
  7644                           ; BSR set to: 0
  7645                           ;usart.c: 252:                     _newSequence = 1;
  7646  00152A  0E01               	movlw	1
  7647  00152C  6E5F               	movwf	__newSequence^0,c
  7648  00152E  EFBF  F00A         	goto	i2l3502
  7649  001532                     i2l3494:
  7650  001532  FFFF               	dw	65535	; assembler added errata NOP
  7651                           
  7652                           ;usart.c: 257:                 _fatalError = 1;
  7653  001534  0E01               	movlw	1
  7654  001536  6E60               	movwf	__fatalError^0,c
  7655                           
  7656                           ;usart.c: 258:                 break;
  7657  001538  EFBF  F00A         	goto	i2l3502
  7658  00153C                     i2l3496:
  7659  00153C  FFFF               	dw	65535	; assembler added errata NOP
  7660                           
  7661                           ;usart.c: 261:                 printError(8);
  7662  00153E  0E08               	movlw	8
  7663  001540  EC7A  F00E         	call	i2_printError
  7664                           
  7665                           ;usart.c: 262:                 break;
  7666  001544  EFBF  F00A         	goto	i2l3502
  7667  001548                     i2l3500:
  7668  001548  FFFF               	dw	65535	; assembler added errata NOP
  7669  00154A  5043               	movf	_receivedMex^0,w,c
  7670  00154C  6E08               	movwf	??i2_storeData^0,c
  7671  00154E  6A09               	clrf	(??i2_storeData+1)^0,c
  7672                           
  7673                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7674                           ; Switch size 1, requested type "simple"
  7675                           ; Number of cases is 1, Range of values is 0 to 0
  7676                           ; switch strategies available:
  7677                           ; Name         Instructions Cycles
  7678                           ; simple_byte            4     3 (average)
  7679                           ;	Chosen strategy is simple_byte
  7680  001550  5009               	movf	(??i2_storeData+1)^0,w,c
  7681  001552  0A00               	xorlw	0	; case 0
  7682  001554  B4D8               	btfsc	status,2,c
  7683  001556  EFAF  F00A         	goto	i2l4852
  7684  00155A  EF9E  F00A         	goto	i2l3496
  7685  00155E                     i2l4852:
  7686  00155E  FFFF               	dw	65535	; assembler added errata NOP
  7687                           
  7688                           ; Switch size 1, requested type "simple"
  7689                           ; Number of cases is 3, Range of values is 1 to 3
  7690                           ; switch strategies available:
  7691                           ; Name         Instructions Cycles
  7692                           ; simple_byte           10     6 (average)
  7693                           ;	Chosen strategy is simple_byte
  7694  001560  5008               	movf	??i2_storeData^0,w,c
  7695  001562  0A01               	xorlw	1	; case 1
  7696  001564  B4D8               	btfsc	status,2,c
  7697  001566  EFDF  F009         	goto	i2l3464
  7698  00156A  0A03               	xorlw	3	; case 2
  7699  00156C  B4D8               	btfsc	status,2,c
  7700  00156E  EF4B  F00A         	goto	i2l594
  7701  001572  0A01               	xorlw	1	; case 3
  7702  001574  B4D8               	btfsc	status,2,c
  7703  001576  EF99  F00A         	goto	i2l3494
  7704  00157A  EF9E  F00A         	goto	i2l3496
  7705  00157E                     i2l3502:
  7706  00157E  FFFF               	dw	65535	; assembler added errata NOP
  7707                           
  7708                           ;usart.c: 266:         receivedMex[0] = 0;
  7709  001580  0E00               	movlw	0
  7710  001582  6E43               	movwf	_receivedMex^0,c
  7711  001584                     i2l601:
  7712  001584  FFFF               	dw	65535	; assembler added errata NOP
  7713  001586  0012               	return		;funcret
  7714  001588  FFFF               	dw	65535	; errata NOP
  7715  00158A                     __end_ofi2_storeData:
  7716                           	callstack 0
  7717                           
  7718 ;; *************** function _writeTM0 *****************
  7719 ;; Defined at:
  7720 ;;		line 25 in file "motors.c"
  7721 ;; Parameters:    Size  Location     Type
  7722 ;;		None
  7723 ;; Auto vars:     Size  Location     Type
  7724 ;;		None
  7725 ;; Return value:  Size  Location     Type
  7726 ;;                  1    wreg      void 
  7727 ;; Registers used:
  7728 ;;		wreg, status,2
  7729 ;; Tracked objects:
  7730 ;;		On entry : 0/0
  7731 ;;		On exit  : 0/0
  7732 ;;		Unchanged: 0/0
  7733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7734 ;;      Params:         0       0       0       0       0       0       0
  7735 ;;      Locals:         0       0       0       0       0       0       0
  7736 ;;      Temps:          0       0       0       0       0       0       0
  7737 ;;      Totals:         0       0       0       0       0       0       0
  7738 ;;Total ram usage:        0 bytes
  7739 ;; Hardware stack levels used:    1
  7740 ;; This function calls:
  7741 ;;		Nothing
  7742 ;; This function is called by:
  7743 ;;		_isr
  7744 ;; This function uses a non-reentrant model
  7745 ;;
  7746                           
  7747                           	psect	text45
  7748  002646                     __ptext45:
  7749                           	callstack 0
  7750  002646                     _writeTM0:
  7751                           	callstack 0
  7752  002646  FFFF               	dw	65535	; assembler added errata NOP
  7753  002648                     
  7754                           ;motors.c: 26:     tm0Error = 1;
  7755  002648  0E00               	movlw	0
  7756  00264A  6E5A               	movwf	(_tm0Error+1)^0,c
  7757  00264C  0E01               	movlw	1
  7758  00264E  6E59               	movwf	_tm0Error^0,c
  7759  002650  0012               	return		;funcret
  7760  002652  FFFF               	dw	65535	; errata NOP
  7761  002654                     __end_of_writeTM0:
  7762                           	callstack 0
  7763                           
  7764 ;; *************** function _whatsTM0Limit *****************
  7765 ;; Defined at:
  7766 ;;		line 39 in file "motors.c"
  7767 ;; Parameters:    Size  Location     Type
  7768 ;;		None
  7769 ;; Auto vars:     Size  Location     Type
  7770 ;;		None
  7771 ;; Return value:  Size  Location     Type
  7772 ;;                  1    wreg      unsigned char 
  7773 ;; Registers used:
  7774 ;;		wreg, status,2
  7775 ;; Tracked objects:
  7776 ;;		On entry : 0/0
  7777 ;;		On exit  : 0/0
  7778 ;;		Unchanged: 0/0
  7779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7780 ;;      Params:         0       0       0       0       0       0       0
  7781 ;;      Locals:         0       0       0       0       0       0       0
  7782 ;;      Temps:          0       0       0       0       0       0       0
  7783 ;;      Totals:         0       0       0       0       0       0       0
  7784 ;;Total ram usage:        0 bytes
  7785 ;; Hardware stack levels used:    1
  7786 ;; This function calls:
  7787 ;;		Nothing
  7788 ;; This function is called by:
  7789 ;;		_isr
  7790 ;; This function uses a non-reentrant model
  7791 ;;
  7792                           
  7793                           	psect	text46
  7794  002708                     __ptext46:
  7795                           	callstack 0
  7796  002708                     _whatsTM0Limit:
  7797                           	callstack 0
  7798  002708  FFFF               	dw	65535	; assembler added errata NOP
  7799  00270A                     
  7800                           ;motors.c: 40:     return(tm0Limit);
  7801  00270A  5066               	movf	_tm0Limit^0,w,c
  7802  00270C  0012               	return		;funcret
  7803  00270E  FFFF               	dw	65535	; errata NOP
  7804  002710                     __end_of_whatsTM0Limit:
  7805                           	callstack 0
  7806                           
  7807 ;; *************** function _toggleStep *****************
  7808 ;; Defined at:
  7809 ;;		line 93 in file "timer.c"
  7810 ;; Parameters:    Size  Location     Type
  7811 ;;		None
  7812 ;; Auto vars:     Size  Location     Type
  7813 ;;		None
  7814 ;; Return value:  Size  Location     Type
  7815 ;;                  1    wreg      void 
  7816 ;; Registers used:
  7817 ;;		wreg, status,2
  7818 ;; Tracked objects:
  7819 ;;		On entry : 0/0
  7820 ;;		On exit  : 0/0
  7821 ;;		Unchanged: 0/0
  7822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7823 ;;      Params:         0       0       0       0       0       0       0
  7824 ;;      Locals:         0       0       0       0       0       0       0
  7825 ;;      Temps:          0       0       0       0       0       0       0
  7826 ;;      Totals:         0       0       0       0       0       0       0
  7827 ;;Total ram usage:        0 bytes
  7828 ;; Hardware stack levels used:    1
  7829 ;; This function calls:
  7830 ;;		Nothing
  7831 ;; This function is called by:
  7832 ;;		_isr
  7833 ;; This function uses a non-reentrant model
  7834 ;;
  7835                           
  7836                           	psect	text47
  7837  0026C2                     __ptext47:
  7838                           	callstack 0
  7839  0026C2                     _toggleStep:
  7840                           	callstack 0
  7841  0026C2  FFFF               	dw	65535	; assembler added errata NOP
  7842  0026C4                     
  7843                           ;timer.c: 94:     stepToggle = 1;
  7844  0026C4  0E01               	movlw	1
  7845  0026C6  6E5B               	movwf	_stepToggle^0,c	;volatile
  7846  0026C8  0012               	return		;funcret
  7847  0026CA  FFFF               	dw	65535	; errata NOP
  7848  0026CC                     __end_of_toggleStep:
  7849                           	callstack 0
  7850                           
  7851 ;; *************** function _setTouchRel *****************
  7852 ;; Defined at:
  7853 ;;		line 86 in file "adc.c"
  7854 ;; Parameters:    Size  Location     Type
  7855 ;;		None
  7856 ;; Auto vars:     Size  Location     Type
  7857 ;;		None
  7858 ;; Return value:  Size  Location     Type
  7859 ;;                  1    wreg      void 
  7860 ;; Registers used:
  7861 ;;		wreg, status,2
  7862 ;; Tracked objects:
  7863 ;;		On entry : 0/0
  7864 ;;		On exit  : 0/0
  7865 ;;		Unchanged: 0/0
  7866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7867 ;;      Params:         0       0       0       0       0       0       0
  7868 ;;      Locals:         0       0       0       0       0       0       0
  7869 ;;      Temps:          0       0       0       0       0       0       0
  7870 ;;      Totals:         0       0       0       0       0       0       0
  7871 ;;Total ram usage:        0 bytes
  7872 ;; Hardware stack levels used:    1
  7873 ;; This function calls:
  7874 ;;		Nothing
  7875 ;; This function is called by:
  7876 ;;		_isr
  7877 ;; This function uses a non-reentrant model
  7878 ;;
  7879                           
  7880                           	psect	text48
  7881  0026CC                     __ptext48:
  7882                           	callstack 0
  7883  0026CC                     _setTouchRel:
  7884                           	callstack 0
  7885  0026CC  FFFF               	dw	65535	; assembler added errata NOP
  7886  0026CE                     
  7887                           ;adc.c: 87:     touch_rel = 1;
  7888  0026CE  0E01               	movlw	1
  7889  0026D0  6E65               	movwf	_touch_rel^0,c	;volatile
  7890  0026D2  0012               	return		;funcret
  7891  0026D4  FFFF               	dw	65535	; errata NOP
  7892  0026D6                     __end_of_setTouchRel:
  7893                           	callstack 0
  7894                           
  7895 ;; *************** function _setThermRel *****************
  7896 ;; Defined at:
  7897 ;;		line 79 in file "adc.c"
  7898 ;; Parameters:    Size  Location     Type
  7899 ;;		None
  7900 ;; Auto vars:     Size  Location     Type
  7901 ;;		None
  7902 ;; Return value:  Size  Location     Type
  7903 ;;                  1    wreg      void 
  7904 ;; Registers used:
  7905 ;;		wreg, status,2
  7906 ;; Tracked objects:
  7907 ;;		On entry : 0/0
  7908 ;;		On exit  : 0/0
  7909 ;;		Unchanged: 0/0
  7910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7911 ;;      Params:         0       0       0       0       0       0       0
  7912 ;;      Locals:         0       0       0       0       0       0       0
  7913 ;;      Temps:          0       0       0       0       0       0       0
  7914 ;;      Totals:         0       0       0       0       0       0       0
  7915 ;;Total ram usage:        0 bytes
  7916 ;; Hardware stack levels used:    1
  7917 ;; This function calls:
  7918 ;;		Nothing
  7919 ;; This function is called by:
  7920 ;;		_isr
  7921 ;; This function uses a non-reentrant model
  7922 ;;
  7923                           
  7924                           	psect	text49
  7925  0026D6                     __ptext49:
  7926                           	callstack 0
  7927  0026D6                     _setThermRel:
  7928                           	callstack 0
  7929  0026D6  FFFF               	dw	65535	; assembler added errata NOP
  7930  0026D8                     
  7931                           ;adc.c: 80:     therm_rel = 1;
  7932  0026D8  0E01               	movlw	1
  7933  0026DA  6E64               	movwf	_therm_rel^0,c	;volatile
  7934  0026DC  0012               	return		;funcret
  7935  0026DE  FFFF               	dw	65535	; errata NOP
  7936  0026E0                     __end_of_setThermRel:
  7937                           	callstack 0
  7938                           
  7939 ;; *************** function _retPeriod *****************
  7940 ;; Defined at:
  7941 ;;		line 101 in file "timer.c"
  7942 ;; Parameters:    Size  Location     Type
  7943 ;;		None
  7944 ;; Auto vars:     Size  Location     Type
  7945 ;;		None
  7946 ;; Return value:  Size  Location     Type
  7947 ;;                  2    0[COMRAM] unsigned int 
  7948 ;; Registers used:
  7949 ;;		None
  7950 ;; Tracked objects:
  7951 ;;		On entry : 0/0
  7952 ;;		On exit  : 0/0
  7953 ;;		Unchanged: 0/0
  7954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7955 ;;      Params:         2       0       0       0       0       0       0
  7956 ;;      Locals:         0       0       0       0       0       0       0
  7957 ;;      Temps:          0       0       0       0       0       0       0
  7958 ;;      Totals:         2       0       0       0       0       0       0
  7959 ;;Total ram usage:        2 bytes
  7960 ;; Hardware stack levels used:    1
  7961 ;; This function calls:
  7962 ;;		Nothing
  7963 ;; This function is called by:
  7964 ;;		_isr
  7965 ;; This function uses a non-reentrant model
  7966 ;;
  7967                           
  7968                           	psect	text50
  7969  002654                     __ptext50:
  7970                           	callstack 0
  7971  002654                     _retPeriod:
  7972                           	callstack 0
  7973  002654  FFFF               	dw	65535	; assembler added errata NOP
  7974  002656                     
  7975                           ;timer.c: 102:     return pwmPeriod;
  7976  002656  C04F  F001         	movff	_pwmPeriod,?_retPeriod
  7977  00265A  C050  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  7978  00265E  0012               	return		;funcret
  7979  002660  FFFF               	dw	65535	; errata NOP
  7980  002662                     __end_of_retPeriod:
  7981                           	callstack 0
  7982                           
  7983 ;; *************** function _increaseStep *****************
  7984 ;; Defined at:
  7985 ;;		line 85 in file "timer.c"
  7986 ;; Parameters:    Size  Location     Type
  7987 ;;		None
  7988 ;; Auto vars:     Size  Location     Type
  7989 ;;		None
  7990 ;; Return value:  Size  Location     Type
  7991 ;;                  1    wreg      void 
  7992 ;; Registers used:
  7993 ;;		status,2, status,0
  7994 ;; Tracked objects:
  7995 ;;		On entry : 0/0
  7996 ;;		On exit  : 0/0
  7997 ;;		Unchanged: 0/0
  7998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7999 ;;      Params:         0       0       0       0       0       0       0
  8000 ;;      Locals:         0       0       0       0       0       0       0
  8001 ;;      Temps:          0       0       0       0       0       0       0
  8002 ;;      Totals:         0       0       0       0       0       0       0
  8003 ;;Total ram usage:        0 bytes
  8004 ;; Hardware stack levels used:    1
  8005 ;; This function calls:
  8006 ;;		Nothing
  8007 ;; This function is called by:
  8008 ;;		_isr
  8009 ;; This function uses a non-reentrant model
  8010 ;;
  8011                           
  8012                           	psect	text51
  8013  002710                     __ptext51:
  8014                           	callstack 0
  8015  002710                     _increaseStep:
  8016                           	callstack 0
  8017  002710  FFFF               	dw	65535	; assembler added errata NOP
  8018  002712                     
  8019                           ;timer.c: 86:     pwmStep++;
  8020  002712  2A5C               	incf	_pwmStep^0,f,c	;volatile
  8021  002714  0012               	return		;funcret
  8022  002716  FFFF               	dw	65535	; errata NOP
  8023  002718                     __end_of_increaseStep:
  8024                           	callstack 0
  8025                           
  8026 ;; *************** function _fatalError *****************
  8027 ;; Defined at:
  8028 ;;		line 80 in file "usart.c"
  8029 ;; Parameters:    Size  Location     Type
  8030 ;;		None
  8031 ;; Auto vars:     Size  Location     Type
  8032 ;;		None
  8033 ;; Return value:  Size  Location     Type
  8034 ;;                  1    wreg      unsigned char 
  8035 ;; Registers used:
  8036 ;;		wreg, status,2
  8037 ;; Tracked objects:
  8038 ;;		On entry : 0/0
  8039 ;;		On exit  : 0/0
  8040 ;;		Unchanged: 0/0
  8041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8042 ;;      Params:         0       0       0       0       0       0       0
  8043 ;;      Locals:         0       0       0       0       0       0       0
  8044 ;;      Temps:          0       0       0       0       0       0       0
  8045 ;;      Totals:         0       0       0       0       0       0       0
  8046 ;;Total ram usage:        0 bytes
  8047 ;; Hardware stack levels used:    1
  8048 ;; This function calls:
  8049 ;;		Nothing
  8050 ;; This function is called by:
  8051 ;;		_isr
  8052 ;; This function uses a non-reentrant model
  8053 ;;
  8054                           
  8055                           	psect	text52
  8056  002718                     __ptext52:
  8057                           	callstack 0
  8058  002718                     _fatalError:
  8059                           	callstack 0
  8060  002718  FFFF               	dw	65535	; assembler added errata NOP
  8061  00271A                     
  8062                           ;usart.c: 81:     return _fatalError;
  8063  00271A  5060               	movf	__fatalError^0,w,c
  8064  00271C  0012               	return		;funcret
  8065  00271E  FFFF               	dw	65535	; errata NOP
  8066  002720                     __end_of_fatalError:
  8067                           	callstack 0
  8068                           
  8069 ;; *************** function _abortAll *****************
  8070 ;; Defined at:
  8071 ;;		line 836 in file "motors.c"
  8072 ;; Parameters:    Size  Location     Type
  8073 ;;		None
  8074 ;; Auto vars:     Size  Location     Type
  8075 ;;		None
  8076 ;; Return value:  Size  Location     Type
  8077 ;;                  1    wreg      void 
  8078 ;; Registers used:
  8079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8080 ;; Tracked objects:
  8081 ;;		On entry : 0/0
  8082 ;;		On exit  : 0/0
  8083 ;;		Unchanged: 0/0
  8084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8085 ;;      Params:         0       0       0       0       0       0       0
  8086 ;;      Locals:         0       0       0       0       0       0       0
  8087 ;;      Temps:          0       0       0       0       0       0       0
  8088 ;;      Totals:         0       0       0       0       0       0       0
  8089 ;;Total ram usage:        0 bytes
  8090 ;; Hardware stack levels used:    1
  8091 ;; Hardware stack levels required when called:    2
  8092 ;; This function calls:
  8093 ;;		i2_printError
  8094 ;; This function is called by:
  8095 ;;		_isr
  8096 ;; This function uses a non-reentrant model
  8097 ;;
  8098                           
  8099                           	psect	text53
  8100  0025FC                     __ptext53:
  8101                           	callstack 0
  8102  0025FC                     _abortAll:
  8103                           	callstack 0
  8104  0025FC  FFFF               	dw	65535	; assembler added errata NOP
  8105  0025FE                     
  8106                           ;motors.c: 844:     printError(7);
  8107  0025FE  0E07               	movlw	7
  8108  002600  EC7A  F00E         	call	i2_printError
  8109  002604                     i2l251:
  8110  002604  FFFF               	dw	65535	; assembler added errata NOP
  8111  002606  EF02  F013         	goto	i2l251
  8112  00260A  0012               	return		;funcret
  8113  00260C  FFFF               	dw	65535	; errata NOP
  8114  00260E                     __end_of_abortAll:
  8115                           	callstack 0
  8116                           
  8117 ;; *************** function i2_printError *****************
  8118 ;; Defined at:
  8119 ;;		line 130 in file "usart.c"
  8120 ;; Parameters:    Size  Location     Type
  8121 ;;  errCode         1    wreg     unsigned char 
  8122 ;; Auto vars:     Size  Location     Type
  8123 ;;  errCode         1    6[COMRAM] unsigned char 
  8124 ;; Return value:  Size  Location     Type
  8125 ;;                  1    wreg      void 
  8126 ;; Registers used:
  8127 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8128 ;; Tracked objects:
  8129 ;;		On entry : 0/0
  8130 ;;		On exit  : 0/0
  8131 ;;		Unchanged: 0/0
  8132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8133 ;;      Params:         0       0       0       0       0       0       0
  8134 ;;      Locals:         1       0       0       0       0       0       0
  8135 ;;      Temps:          2       0       0       0       0       0       0
  8136 ;;      Totals:         3       0       0       0       0       0       0
  8137 ;;Total ram usage:        3 bytes
  8138 ;; Hardware stack levels used:    1
  8139 ;; Hardware stack levels required when called:    1
  8140 ;; This function calls:
  8141 ;;		i2_uartTx
  8142 ;; This function is called by:
  8143 ;;		_abortAll
  8144 ;;		i2_storeData
  8145 ;; This function uses a non-reentrant model
  8146 ;;
  8147                           
  8148                           	psect	text54
  8149  001CF4                     __ptext54:
  8150                           	callstack 0
  8151  001CF4                     i2_printError:
  8152                           	callstack 0
  8153  001CF4  FFFF               	dw	65535	; assembler added errata NOP
  8154                           
  8155                           ;incstack = 0
  8156                           ;i2printError@errCode stored from wreg
  8157  001CF6  6E07               	movwf	i2printError@errCode^0,c
  8158  001CF8                     
  8159                           ;usart.c: 132:     switch(errCode){
  8160  001CF8  EFD6  F00E         	goto	i2l3114
  8161  001CFC                     i2l3096:
  8162  001CFC  FFFF               	dw	65535	; assembler added errata NOP
  8163                           
  8164                           ;usart.c: 134:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  8165  001CFE  0E90               	movlw	low _errString_Feed
  8166  001D00  6E01               	movwf	i2uartTx@ptr^0,c
  8167  001D02  0E00               	movlw	high _errString_Feed
  8168  001D04  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8169  001D06  0E1E               	movlw	30
  8170  001D08  6E03               	movwf	i2uartTx@length^0,c
  8171  001D0A  EC0C  F012         	call	i2_uartTx	;wreg free
  8172                           
  8173                           ;usart.c: 135:             break;
  8174  001D0E  EF05  F00F         	goto	i2l568
  8175  001D12                     i2l3098:
  8176  001D12  FFFF               	dw	65535	; assembler added errata NOP
  8177                           
  8178                           ;usart.c: 137:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  8179  001D14  0E5E               	movlw	low _errString_ZEND
  8180  001D16  6E01               	movwf	i2uartTx@ptr^0,c
  8181  001D18  0E01               	movlw	high _errString_ZEND
  8182  001D1A  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8183  001D1C  0E29               	movlw	41
  8184  001D1E  6E03               	movwf	i2uartTx@length^0,c
  8185  001D20  EC0C  F012         	call	i2_uartTx	;wreg free
  8186                           
  8187                           ;usart.c: 138:             break;
  8188  001D24  EF05  F00F         	goto	i2l568
  8189  001D28                     i2l3100:
  8190  001D28  FFFF               	dw	65535	; assembler added errata NOP
  8191                           
  8192                           ;usart.c: 140:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  8193  001D2A  0E87               	movlw	low _errString_Reset
  8194  001D2C  6E01               	movwf	i2uartTx@ptr^0,c
  8195  001D2E  0E01               	movlw	high _errString_Reset
  8196  001D30  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8197  001D32  0E28               	movlw	40
  8198  001D34  6E03               	movwf	i2uartTx@length^0,c
  8199  001D36  EC0C  F012         	call	i2_uartTx	;wreg free
  8200                           
  8201                           ;usart.c: 141:             break;
  8202  001D3A  EF05  F00F         	goto	i2l568
  8203  001D3E                     i2l3102:
  8204  001D3E  FFFF               	dw	65535	; assembler added errata NOP
  8205                           
  8206                           ;usart.c: 143:             uartTx(&errString_Point[0], sizeof(errString_Point));
  8207  001D40  0E35               	movlw	low _errString_Point
  8208  001D42  6E01               	movwf	i2uartTx@ptr^0,c
  8209  001D44  0E01               	movlw	high _errString_Point
  8210  001D46  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8211  001D48  0E29               	movlw	41
  8212  001D4A  6E03               	movwf	i2uartTx@length^0,c
  8213  001D4C  EC0C  F012         	call	i2_uartTx	;wreg free
  8214                           
  8215                           ;usart.c: 144:             break;
  8216  001D50  EF05  F00F         	goto	i2l568
  8217  001D54                     i2l3104:
  8218  001D54  FFFF               	dw	65535	; assembler added errata NOP
  8219                           
  8220                           ;usart.c: 146:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  8221  001D56  0ED6               	movlw	low _errString_Bound
  8222  001D58  6E01               	movwf	i2uartTx@ptr^0,c
  8223  001D5A  0E01               	movlw	high _errString_Bound
  8224  001D5C  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8225  001D5E  0E21               	movlw	33
  8226  001D60  6E03               	movwf	i2uartTx@length^0,c
  8227  001D62  EC0C  F012         	call	i2_uartTx	;wreg free
  8228                           
  8229                           ;usart.c: 147:             break;
  8230  001D66  EF05  F00F         	goto	i2l568
  8231  001D6A                     i2l3106:
  8232  001D6A  FFFF               	dw	65535	; assembler added errata NOP
  8233                           
  8234                           ;usart.c: 149:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  8235  001D6C  0E00               	movlw	low _errString_PointZ
  8236  001D6E  6E01               	movwf	i2uartTx@ptr^0,c
  8237  001D70  0E01               	movlw	high _errString_PointZ
  8238  001D72  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8239  001D74  0E35               	movlw	53
  8240  001D76  6E03               	movwf	i2uartTx@length^0,c
  8241  001D78  EC0C  F012         	call	i2_uartTx	;wreg free
  8242                           
  8243                           ;usart.c: 150:             break;
  8244  001D7C  EF05  F00F         	goto	i2l568
  8245  001D80                     i2l3108:
  8246  001D80  FFFF               	dw	65535	; assembler added errata NOP
  8247                           
  8248                           ;usart.c: 152:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  8249  001D82  0EAF               	movlw	low _errString_Fatal
  8250  001D84  6E01               	movwf	i2uartTx@ptr^0,c
  8251  001D86  0E01               	movlw	high _errString_Fatal
  8252  001D88  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8253  001D8A  0E27               	movlw	39
  8254  001D8C  6E03               	movwf	i2uartTx@length^0,c
  8255  001D8E  EC0C  F012         	call	i2_uartTx	;wreg free
  8256                           
  8257                           ;usart.c: 153:             break;
  8258  001D92  EF05  F00F         	goto	i2l568
  8259  001D96                     i2l3110:
  8260  001D96  FFFF               	dw	65535	; assembler added errata NOP
  8261                           
  8262                           ;usart.c: 155:             uartTx(&errString_Command[0], sizeof(errString_Command));
  8263  001D98  0EAE               	movlw	low _errString_Command
  8264  001D9A  6E01               	movwf	i2uartTx@ptr^0,c
  8265  001D9C  0E00               	movlw	high _errString_Command
  8266  001D9E  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8267  001DA0  0E18               	movlw	24
  8268  001DA2  6E03               	movwf	i2uartTx@length^0,c
  8269  001DA4  EC0C  F012         	call	i2_uartTx	;wreg free
  8270                           
  8271                           ;usart.c: 156:             break;
  8272  001DA8  EF05  F00F         	goto	i2l568
  8273  001DAC                     i2l3114:
  8274  001DAC  FFFF               	dw	65535	; assembler added errata NOP
  8275  001DAE  5007               	movf	i2printError@errCode^0,w,c
  8276  001DB0  6E05               	movwf	??i2_printError^0,c
  8277  001DB2  6A06               	clrf	(??i2_printError+1)^0,c
  8278                           
  8279                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8280                           ; Switch size 1, requested type "simple"
  8281                           ; Number of cases is 1, Range of values is 0 to 0
  8282                           ; switch strategies available:
  8283                           ; Name         Instructions Cycles
  8284                           ; simple_byte            4     3 (average)
  8285                           ;	Chosen strategy is simple_byte
  8286  001DB4  5006               	movf	(??i2_printError+1)^0,w,c
  8287  001DB6  0A00               	xorlw	0	; case 0
  8288  001DB8  B4D8               	btfsc	status,2,c
  8289  001DBA  EFE1  F00E         	goto	i2l4854
  8290  001DBE  EF05  F00F         	goto	i2l568
  8291  001DC2                     i2l4854:
  8292  001DC2  FFFF               	dw	65535	; assembler added errata NOP
  8293                           
  8294                           ; Switch size 1, requested type "simple"
  8295                           ; Number of cases is 8, Range of values is 1 to 8
  8296                           ; switch strategies available:
  8297                           ; Name         Instructions Cycles
  8298                           ; simple_byte           25    13 (average)
  8299                           ;	Chosen strategy is simple_byte
  8300  001DC4  5005               	movf	??i2_printError^0,w,c
  8301  001DC6  0A01               	xorlw	1	; case 1
  8302  001DC8  B4D8               	btfsc	status,2,c
  8303  001DCA  EF7E  F00E         	goto	i2l3096
  8304  001DCE  0A03               	xorlw	3	; case 2
  8305  001DD0  B4D8               	btfsc	status,2,c
  8306  001DD2  EF89  F00E         	goto	i2l3098
  8307  001DD6  0A01               	xorlw	1	; case 3
  8308  001DD8  B4D8               	btfsc	status,2,c
  8309  001DDA  EF94  F00E         	goto	i2l3100
  8310  001DDE  0A07               	xorlw	7	; case 4
  8311  001DE0  B4D8               	btfsc	status,2,c
  8312  001DE2  EF9F  F00E         	goto	i2l3102
  8313  001DE6  0A01               	xorlw	1	; case 5
  8314  001DE8  B4D8               	btfsc	status,2,c
  8315  001DEA  EFAA  F00E         	goto	i2l3104
  8316  001DEE  0A03               	xorlw	3	; case 6
  8317  001DF0  B4D8               	btfsc	status,2,c
  8318  001DF2  EFB5  F00E         	goto	i2l3106
  8319  001DF6  0A01               	xorlw	1	; case 7
  8320  001DF8  B4D8               	btfsc	status,2,c
  8321  001DFA  EFC0  F00E         	goto	i2l3108
  8322  001DFE  0A0F               	xorlw	15	; case 8
  8323  001E00  B4D8               	btfsc	status,2,c
  8324  001E02  EFCB  F00E         	goto	i2l3110
  8325  001E06  EF05  F00F         	goto	i2l568
  8326  001E0A                     i2l568:
  8327  001E0A  FFFF               	dw	65535	; assembler added errata NOP
  8328  001E0C  0012               	return		;funcret
  8329  001E0E  FFFF               	dw	65535	; errata NOP
  8330  001E10                     __end_ofi2_printError:
  8331                           	callstack 0
  8332                           
  8333 ;; *************** function i2_uartTx *****************
  8334 ;; Defined at:
  8335 ;;		line 167 in file "usart.c"
  8336 ;; Parameters:    Size  Location     Type
  8337 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  8338 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  8339 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  8340 ;;  length          1    2[COMRAM] unsigned char 
  8341 ;; Auto vars:     Size  Location     Type
  8342 ;;  i               1    3[COMRAM] unsigned char 
  8343 ;; Return value:  Size  Location     Type
  8344 ;;                  1    wreg      void 
  8345 ;; Registers used:
  8346 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8347 ;; Tracked objects:
  8348 ;;		On entry : 0/0
  8349 ;;		On exit  : 0/0
  8350 ;;		Unchanged: 0/0
  8351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8352 ;;      Params:         3       0       0       0       0       0       0
  8353 ;;      Locals:         1       0       0       0       0       0       0
  8354 ;;      Temps:          0       0       0       0       0       0       0
  8355 ;;      Totals:         4       0       0       0       0       0       0
  8356 ;;Total ram usage:        4 bytes
  8357 ;; Hardware stack levels used:    1
  8358 ;; This function calls:
  8359 ;;		Nothing
  8360 ;; This function is called by:
  8361 ;;		i2_printError
  8362 ;; This function uses a non-reentrant model
  8363 ;;
  8364                           
  8365                           	psect	text55
  8366  002418                     __ptext55:
  8367                           	callstack 0
  8368  002418                     i2_uartTx:
  8369                           	callstack 0
  8370  002418  FFFF               	dw	65535	; assembler added errata NOP
  8371  00241A                     
  8372                           ;usart.c: 167: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 168: {;usa
      +                          rt.c: 170:     for(char i = 1; i < length; i++){
  8373  00241A  0E01               	movlw	1
  8374  00241C  6E04               	movwf	i2uartTx@i^0,c
  8375  00241E  EF25  F012         	goto	i2l2798
  8376  002422                     i2l2794:
  8377  002422  FFFF               	dw	65535	; assembler added errata NOP
  8378                           
  8379                           ;usart.c: 172:         TXREG = *ptr;
  8380  002424  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  8381  002428  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  8382  00242C  50DF               	movf	indf2,w,c
  8383  00242E  6EAD               	movwf	173,c	;volatile
  8384  002430                     i2l573:
  8385  002430  FFFF               	dw	65535	; assembler added errata NOP
  8386  002432  A2AC               	btfss	172,1,c	;volatile
  8387  002434  EF1E  F012         	goto	i2u195_41
  8388  002438  EF21  F012         	goto	i2u195_40
  8389  00243C                     i2u195_41:
  8390  00243C  FFFF               	dw	65535	; assembler added errata NOP
  8391  00243E  EF18  F012         	goto	i2l573
  8392  002442                     i2u195_40:
  8393  002442  FFFF               	dw	65535	; assembler added errata NOP
  8394  002444                     
  8395                           ;usart.c: 176:         ptr++;
  8396  002444  4A01               	infsnz	i2uartTx@ptr^0,f,c
  8397  002446  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  8398                           
  8399                           ;usart.c: 177:     }
  8400  002448  2A04               	incf	i2uartTx@i^0,f,c
  8401  00244A                     i2l2798:
  8402  00244A  FFFF               	dw	65535	; assembler added errata NOP
  8403  00244C  5003               	movf	i2uartTx@length^0,w,c
  8404  00244E  5C04               	subwf	i2uartTx@i^0,w,c
  8405  002450  A0D8               	btfss	status,0,c
  8406  002452  EF2D  F012         	goto	i2u196_41
  8407  002456  EF30  F012         	goto	i2u196_40
  8408  00245A                     i2u196_41:
  8409  00245A  FFFF               	dw	65535	; assembler added errata NOP
  8410  00245C  EF11  F012         	goto	i2l2794
  8411  002460                     i2u196_40:
  8412  002460  FFFF               	dw	65535	; assembler added errata NOP
  8413  002462  0012               	return		;funcret
  8414  002464  FFFF               	dw	65535	; errata NOP
  8415  002466                     __end_ofi2_uartTx:
  8416                           	callstack 0
  8417                           
  8418                           	psect	rparam
  8419  0000                     
  8420                           	psect	temp
  8421  00006E                     btemp:
  8422                           	callstack 0
  8423  00006E                     	ds	1
  8424  0000                     int$flags	set	btemp
  8425  0000                     wtemp8	set	btemp+1
  8426  0000                     ttemp5	set	btemp+1
  8427  0000                     ttemp6	set	btemp+4
  8428  0000                     ttemp7	set	btemp+8
  8429                           
  8430                           	psect	idloc
  8431                           
  8432                           ;Config register IDLOC0 @ 0x200000
  8433                           ;	unspecified, using default values
  8434  200000                     	org	2097152
  8435  200000  FF                 	db	255
  8436                           
  8437                           ;Config register IDLOC1 @ 0x200001
  8438                           ;	unspecified, using default values
  8439  200001                     	org	2097153
  8440  200001  FF                 	db	255
  8441                           
  8442                           ;Config register IDLOC2 @ 0x200002
  8443                           ;	unspecified, using default values
  8444  200002                     	org	2097154
  8445  200002  FF                 	db	255
  8446                           
  8447                           ;Config register IDLOC3 @ 0x200003
  8448                           ;	unspecified, using default values
  8449  200003                     	org	2097155
  8450  200003  FF                 	db	255
  8451                           
  8452                           ;Config register IDLOC4 @ 0x200004
  8453                           ;	unspecified, using default values
  8454  200004                     	org	2097156
  8455  200004  FF                 	db	255
  8456                           
  8457                           ;Config register IDLOC5 @ 0x200005
  8458                           ;	unspecified, using default values
  8459  200005                     	org	2097157
  8460  200005  FF                 	db	255
  8461                           
  8462                           ;Config register IDLOC6 @ 0x200006
  8463                           ;	unspecified, using default values
  8464  200006                     	org	2097158
  8465  200006  FF                 	db	255
  8466                           
  8467                           ;Config register IDLOC7 @ 0x200007
  8468                           ;	unspecified, using default values
  8469  200007                     	org	2097159
  8470  200007  FF                 	db	255
  8471                           
  8472                           	psect	config
  8473                           
  8474                           ; Padding undefined space
  8475  300000                     	org	3145728
  8476  300000  FF                 	db	255
  8477                           
  8478                           ;Config register CONFIG1H @ 0x300001
  8479                           ;	Oscillator Selection bits
  8480                           ;	OSC = XT, XT oscillator
  8481                           ;	Oscillator System Clock Switch Enable bit
  8482                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  8483  300001                     	org	3145729
  8484  300001  21                 	db	33
  8485                           
  8486                           ;Config register CONFIG2L @ 0x300002
  8487                           ;	Power-up Timer Enable bit
  8488                           ;	PWRT = OFF, PWRT disabled
  8489                           ;	Brown-out Reset Enable bit
  8490                           ;	BOR = OFF, Brown-out Reset disabled
  8491                           ;	Brown-out Reset Voltage bits
  8492                           ;	BORV = 20, VBOR set to 2.0V
  8493  300002                     	org	3145730
  8494  300002  0D                 	db	13
  8495                           
  8496                           ;Config register CONFIG2H @ 0x300003
  8497                           ;	Watchdog Timer Enable bit
  8498                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8499                           ;	Watchdog Timer Postscale Select bits
  8500                           ;	WDTPS = 128, 1:128
  8501  300003                     	org	3145731
  8502  300003  0E                 	db	14
  8503                           
  8504                           ; Padding undefined space
  8505  300004                     	org	3145732
  8506  300004  FF                 	db	255
  8507                           
  8508                           ;Config register CONFIG3H @ 0x300005
  8509                           ;	CCP2 Mux bit
  8510                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  8511  300005                     	org	3145733
  8512  300005  00                 	db	0
  8513                           
  8514                           ;Config register CONFIG4L @ 0x300006
  8515                           ;	Stack Full/Underflow Reset Enable bit
  8516                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  8517                           ;	Low Voltage ICSP Enable bit
  8518                           ;	LVP = OFF, Low Voltage ICSP disabled
  8519                           ;	Background Debugger Enable bit
  8520                           ;	DEBUG = 0x1, unprogrammed default
  8521  300006                     	org	3145734
  8522  300006  80                 	db	128
  8523                           
  8524                           ; Padding undefined space
  8525  300007                     	org	3145735
  8526  300007  FF                 	db	255
  8527                           
  8528                           ;Config register CONFIG5L @ 0x300008
  8529                           ;	Code Protection bit
  8530                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  8531                           ;	Code Protection bit
  8532                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  8533                           ;	Code Protection bit
  8534                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  8535                           ;	Code Protection bit
  8536                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  8537  300008                     	org	3145736
  8538  300008  0F                 	db	15
  8539                           
  8540                           ;Config register CONFIG5H @ 0x300009
  8541                           ;	Boot Block Code Protection bit
  8542                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  8543                           ;	Data EEPROM Code Protection bit
  8544                           ;	CPD = OFF, Data EEPROM not code protected
  8545  300009                     	org	3145737
  8546  300009  C0                 	db	192
  8547                           
  8548                           ;Config register CONFIG6L @ 0x30000A
  8549                           ;	Write Protection bit
  8550                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  8551                           ;	Write Protection bit
  8552                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  8553                           ;	Write Protection bit
  8554                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  8555                           ;	Write Protection bit
  8556                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  8557  30000A                     	org	3145738
  8558  30000A  0F                 	db	15
  8559                           
  8560                           ;Config register CONFIG6H @ 0x30000B
  8561                           ;	Configuration Register Write Protection bit
  8562                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  8563                           ;	Boot Block Write Protection bit
  8564                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  8565                           ;	Data EEPROM Write Protection bit
  8566                           ;	WRTD = OFF, Data EEPROM not write protected
  8567  30000B                     	org	3145739
  8568  30000B  E0                 	db	224
  8569                           
  8570                           ;Config register CONFIG7L @ 0x30000C
  8571                           ;	Table Read Protection bit
  8572                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  8573                           ;	Table Read Protection bit
  8574                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  8575                           ;	Table Read Protection bit
  8576                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  8577                           ;	Table Read Protection bit
  8578                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  8579  30000C                     	org	3145740
  8580  30000C  0F                 	db	15
  8581                           
  8582                           ;Config register CONFIG7H @ 0x30000D
  8583                           ;	Boot Block Table Read Protection bit
  8584                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  8585  30000D                     	org	3145741
  8586  30000D  40                 	db	64
  8587                           tosu	equ	0xFFF
  8588                           tosh	equ	0xFFE
  8589                           tosl	equ	0xFFD
  8590                           stkptr	equ	0xFFC
  8591                           pclatu	equ	0xFFB
  8592                           pclath	equ	0xFFA
  8593                           pcl	equ	0xFF9
  8594                           tblptru	equ	0xFF8
  8595                           tblptrh	equ	0xFF7
  8596                           tblptrl	equ	0xFF6
  8597                           tablat	equ	0xFF5
  8598                           prodh	equ	0xFF4
  8599                           prodl	equ	0xFF3
  8600                           indf0	equ	0xFEF
  8601                           postinc0	equ	0xFEE
  8602                           postdec0	equ	0xFED
  8603                           preinc0	equ	0xFEC
  8604                           plusw0	equ	0xFEB
  8605                           fsr0h	equ	0xFEA
  8606                           fsr0l	equ	0xFE9
  8607                           wreg	equ	0xFE8
  8608                           indf1	equ	0xFE7
  8609                           postinc1	equ	0xFE6
  8610                           postdec1	equ	0xFE5
  8611                           preinc1	equ	0xFE4
  8612                           plusw1	equ	0xFE3
  8613                           fsr1h	equ	0xFE2
  8614                           fsr1l	equ	0xFE1
  8615                           bsr	equ	0xFE0
  8616                           indf2	equ	0xFDF
  8617                           postinc2	equ	0xFDE
  8618                           postdec2	equ	0xFDD
  8619                           preinc2	equ	0xFDC
  8620                           plusw2	equ	0xFDB
  8621                           fsr2h	equ	0xFDA
  8622                           fsr2l	equ	0xFD9
  8623                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    20
    Data        324
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     66     109
    BANK0           128     17     115
    BANK1           256      0     247
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 53
		 -> errString_Command(BANK0[24]), errString_Fatal(BANK1[39]), errString_PointZ(BANK1[53]), errString_Bound(BANK1[33]), 
		 -> errString_Point(BANK1[41]), errString_Reset(BANK1[40]), errString_ZEND(BANK1[41]), errString_Feed(BANK0[30]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 


Critical Paths under _main in COMRAM

    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_stepMade
    _touchTherm->_stepMade
    _touchObject->_stepMade
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _releaseObj->_stepMade
    _pickObject->_stepMade
    _moveToPoint->_stepMade
    _liftArm->_stepMade

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    _abortAll->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _main->_executeData
    _executeData->_rotateObj

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   10470
                                             12 BANK0      5     5      0
                           _clearTM0
                        _executeData
                     _getNewSequence
                        _increaseSeq
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                   _resetNewSequence
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim1Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim1Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    1604
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0     238
                                             20 COMRAM     3     3      0
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (1) _resetNewSequence                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _increaseSeq                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0    6513
                                              7 BANK0      5     5      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0      34
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                         _resetTherm
                         _resetTouch
                        _returnTherm
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0      34
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                         _resetTherm
                         _resetTouch
                        _returnTouch
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            7     7      0    3203
                                              0 BANK0      7     7      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
                          _resetStep
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0      34
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0      34
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         14     6      8    2546
                                             20 COMRAM    14     6      8
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0      34
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _resetTM2_Temp                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resetTM0_Temp                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0    1059
                                             10 COMRAM     7     7      0
                           _abortAll
                         _fatalError
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _abortAll                                             0     0      0     507
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _executeData
     _getData
     _liftArm
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _stepMade
     _moveToPoint
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _stepCounter
       _stepMade
     _pickObject
       _resetTM2_Temp
       _stepMade
     _releaseObj
       _resetTM2_Temp
       _stepMade
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _resetStep
       _resetTM2_Temp
       _stepMade
     _touchObject
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _resetTherm
       _resetTouch
       _returnTouch
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _resetTherm
       _resetTouch
       _returnTherm
       _startADC
       _stepMade
       _stopADC
   _getNewSequence
   _increaseSeq
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetNewSequence
   _resetPosition
     _resetStep
     _resetTM0_Temp
     _resetTM2_Temp
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim1Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _abortAll
     i2_printError
       i2_uartTx
   _fatalError
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F7       7       96.5%
BITBANK0            80      0       0       4        0.0%
BANK0               80     11      73       5       89.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     42      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1D7      15        0.0%
DATA                 0      0     1D7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Sat May 01 10:41:18 2021

                                        ___fldiv@aexp 0038  
                                        ___fldiv@bexp 0037  
                               __end_of_interruptInit 24E8  
                                        ___fldiv@sign 0030  
                                                  l90 256A  
                                                  l84 2642  
                                                 l210 1F1A  
                                                 l211 1F1E  
                                                 l131 17D2  
                                                 l132 1942  
                                                 l222 22E0  
                                                 l214 22AE  
                                                 l151 1962  
                                                 l217 22C0  
                                                 l161 0D68  
                                                 l241 253A  
                                                 l154 0A80  
                                                 l242 2544  
                                                 l234 20FA  
                                                 l156 0AC0  
                                                 l236 212A  
                                                 l157 0AC8  
                                                 l247 250A  
                                                 l327 19B4  
                                                 l248 2514  
                                                 l328 19AE  
                                                 l601 1300  
                                                 l329 19B0  
                                                 l178 0D26  
                                                 l450 24D8  
                                                 l443 26B4  
                                                 l187 0D88  
                                                 l371 2696  
                                                 l451 24E4  
                                                 l531 26E4  
                                                 l380 266A  
                                                 l348 107C  
                                                 l525 2634  
                                                 l446 25F8  
                                                 l374 2704  
                                                 l198 202C  
                                                 l534 26FC  
                                                 l622 25D4  
                                                 l631 26BE  
                                                 l383 26A0  
                                                 l199 2030  
                                                 l543 26F4  
                                                 l551 23C6  
                                                 l528 2626  
                                                 l368 2590  
                                                 l616 25E6  
                                                 l625 25C2  
                                                 l377 2676  
                                                 l449 24C2  
                                                 l537 26EC  
                                                 l386 26AA  
                                                 l546 268C  
                                                 l554 25AE  
                                                 l619 2618  
                                                 l628 2682  
                                                 l573 23E2  
                                                 l568 1CEE  
                                                 l577 2414  
                                                 l594 1212  
                                                 l940 1BD2  
                                                 _isr 0008  
                                         _touchObject 1F22  
                                                 prod 000FF3  
                                                 wreg 000FE8  
                                        ___fltol@exp1 0042  
                                         main@errCode 00F0  
                                                l1301 177C  
                                                l1230 0814  
                                                l1312 1702  
                                                l1225 0A42  
                                                l1305 1696  
                                                l1227 085A  
                                                l1236 08B0  
                                                l1238 0940  
                                                l1239 0928  
                                                l4000 162C  
                                                l4010 168C  
                                                l4002 1636  
                                                l4020 1718  
                                                l4012 16CE  
                                                l4004 1644  
                                                l4102 0CF2  
                                                l4110 0D26  
                                                l4030 176A  
                                                l4022 171E  
                                                l4014 16DC  
                                                l4006 167C  
                                                l4120 0D7E  
                                                l4104 0D08  
                                                l4112 0D40  
                                                l4040 0A88  
                                                l4024 1742  
                                                l4016 16F0  
                                                l4008 1680  
                                                l4200 1EB2  
                                                l4122 0D86  
                                                l4114 0D56  
                                                l4106 0D1E  
                                                l4050 0AE6  
                                                l4042 0AB4  
                                                l4034 0A4A  
                                                l4026 1756  
                                                l4018 1716  
                                                l1298 15EA  
                                                l4130 1F36  
                                                l4210 1EE8  
                                                l4202 1ECE  
                                                l4116 0D6E  
                                                l4060 0B50  
                                                l4052 0AFE  
                                                l4044 0AC4  
                                                l4036 0A74  
                                                l4028 1768  
                                                l4140 1F70  
                                                l4132 1F38  
                                                l4220 1F00  
                                                l4212 1EEC  
                                                l4204 1EDE  
                                                l4300 1BE0  
                                                l4230 2238  
                                                l4118 0D76  
                                                l4070 0BB2  
                                                l4062 0B66  
                                                l4054 0B0A  
                                                l4046 0AD2  
                                                l4038 0A84  
                                                l4142 1F8E  
                                                l4134 1F48  
                                                l4150 1FC4  
                                                l4126 1F24  
                                                l4222 1F12  
                                                l4214 1EF0  
                                                l4206 1EE4  
                                                l4310 1C4E  
                                                l4302 1BF6  
                                                l4240 227E  
                                                l4232 223E  
                                                l4064 0B82  
                                                l4056 0B20  
                                                l4048 0AE0  
                                                l4160 1FFA  
                                                l4152 1FE0  
                                                l4144 1F92  
                                                l4136 1F4E  
                                                l4128 1F28  
                                                l4216 1EF8  
                                                l4208 1EE6  
                                                l4400 191C  
                                                l4312 1C64  
                                                l4304 1C0C  
                                                l4250 22D6  
                                                l4242 2282  
                                                l4234 2244  
                                                l4226 2228  
                                                l4090 0C74  
                                                l4074 0BE4  
                                                l4066 0B86  
                                                l4082 0C18  
                                                l4058 0B46  
                                                l4170 2012  
                                                l4162 1FFE  
                                                l4146 1FA4  
                                                l4154 1FF0  
                                                l4138 1F64  
                                                l4218 1EFC  
                                                l4330 254A  
                                                l4410 1960  
                                                l4402 1930  
                                                l4314 1C7A  
                                                l4306 1C22  
                                                l4324 262C  
                                                l4252 22DE  
                                                l4244 2294  
                                                l4236 225A  
                                                l4228 222C  
                                                l4092 0C90  
                                                l4084 0C2E  
                                                l4076 0BFA  
                                                l4068 0B9C  
                                                l4260 2094  
                                                l4172 2024  
                                                l4164 2002  
                                                l4156 1FF6  
                                                l4148 1FC0  
                                                l4180 1E24  
                                                l4420 2570  
                                                l4340 2562  
                                                l4332 2552  
                                                l4404 1948  
                                                l4308 1C38  
                                                l4500 126E  
                                                l4246 22C6  
                                                l4238 2266  
                                                l4094 0C94  
                                                l4086 0C54  
                                                l4078 0C10  
                                                l4270 20DA  
                                                l4262 20A2  
                                                l4166 200A  
                                                l4158 1FF8  
                                                l4190 1E5E  
                                                l4182 1E26  
                                                l4430 258C  
                                                l4422 2578  
                                                l4342 2564  
                                                l4334 2556  
                                                l4414 24AE  
                                                l4406 1950  
                                                l4350 178A  
                                                l4318 1C90  
                                                l4510 12AE  
                                                l4502 1282  
                                                l4328 263A  
                                                l4248 22CE  
                                                l4088 0C5E  
                                                l4096 0CAA  
                                                l4280 2122  
                                                l4272 20DE  
                                                l4264 20B4  
                                                l4256 203A  
                                                l4168 200E  
                                                l4192 1E7C  
                                                l4184 1E36  
                                                l4176 1E12  
                                                l4600 1028  
                                                l4432 258E  
                                                l4424 257E  
                                                l4344 2566  
                                                l4336 255A  
                                                l4416 24C0  
                                                l4408 1958  
                                                l4360 17C6  
                                                l4352 1796  
                                                l3800 23D4  
                                                l4512 12B8  
                                                l4504 1294  
                                                l4440 25E2  
                                                l4098 0CC0  
                                                l4282 251A  
                                                l4290 24EA  
                                                l3810 0636  
                                                l4274 20FC  
                                                l4266 20B8  
                                                l4258 2044  
                                                l4194 1E80  
                                                l4186 1E3C  
                                                l4178 1E16  
                                                l4602 103A  
                                                l4530 26FA  
                                                l4426 2580  
                                                l4346 2568  
                                                l4338 255E  
                                                l4418 24D6  
                                                l4450 26F2  
                                                l4370 181E  
                                                l4362 17E6  
                                                l4354 17A4  
                                                l3802 23F6  
                                                l4506 129A  
                                                l4442 2610  
                                                l4434 2596  
                                                l4284 251E  
                                                l4292 24EE  
                                                l3900 08C2  
                                                l3820 0676  
                                                l3812 0638  
                                                l4276 2100  
                                                l4268 20D2  
                                                l4196 1E92  
                                                l4188 1E52  
                                                l4604 1042  
                                                l4540 0D9E  
                                                l4428 2582  
                                                l4532 26EA  
                                                l4380 1878  
                                                l4372 1830  
                                                l4364 17F8  
                                                l4356 17AA  
                                                l4348 1784  
                                                l3804 23FC  
                                                l4508 12A4  
                                                l4516 12C4  
                                                l4460 1096  
                                                l4444 2614  
                                                l4436 25AA  
                                                l4700 1A96  
                                                l4286 253C  
                                                l4294 250C  
                                                l3902 08D6  
                                                l3830 06B0  
                                                l3814 064E  
                                                l3822 067E  
                                                l3806 0618  
                                                l4278 2106  
                                                l4198 1EAE  
                                                l4614 106A  
                                                l4606 104A  
                                                l4550 0E46  
                                                l4542 0DD8  
                                                l4454 261E  
                                                l4390 18BE  
                                                l4382 187C  
                                                l4374 1844  
                                                l4366 1802  
                                                l4358 17B0  
                                                l4518 12FA  
                                                l4462 109C  
                                                l4438 25DA  
                                                l4446 2616  
                                                l4288 2540  
                                                l4296 2510  
                                                l3912 0956  
                                                l3920 09A2  
                                                l3904 08DA  
                                                l3840 06F0  
                                                l3832 06B2  
                                                l3824 0690  
                                                l3816 0662  
                                                l3808 0624  
                                                l4616 1070  
                                                l4608 1052  
                                                l4560 0EDA  
                                                l4552 0E5A  
                                                l4544 0DE8  
                                                l4536 0D8E  
                                                l4632 26E2  
                                                l4528 2688  
                                                l4392 18D6  
                                                l4384 188E  
                                                l4376 1856  
                                                l4368 181A  
                                                l4640 2370  
                                                l4480 113A  
                                                l4464 10AA  
                                                l4472 10D0  
                                                l4448 25C8  
                                                l3770 26BA  
                                                l3930 0A1A  
                                                l3922 09C2  
                                                l3914 0962  
                                                l3906 08EC  
                                                l3850 073E  
                                                l3834 06C8  
                                                l3842 06F8  
                                                l3826 0698  
                                                l3818 0672  
                                                l4562 0EDE  
                                                l4554 0E94  
                                                l4546 0DFC  
                                                l4570 0F38  
                                                l4538 0D9A  
                                                l4394 18DA  
                                                l4386 18A2  
                                                l4378 1860  
                                                l4642 23B0  
                                                l4634 236C  
                                                l4298 1BDC  
                                                l4490 121C  
                                                l4482 11B8  
                                                l4466 10B8  
                                                l4474 1106  
                                                l4458 1086  
                                                l4650 196C  
                                                l3780 26B0  
                                                l3772 25B4  
                                                l3932 0A2C  
                                                l3924 09D8  
                                                l3916 0974  
                                                l3908 091E  
                                                l3860 076E  
                                                l3852 0744  
                                                l3844 070A  
                                                l3836 06DC  
                                                l3828 069E  
                                                l4580 0F70  
                                                l4572 0F4E  
                                                l4564 0EE6  
                                                l4556 0EA4  
                                                l4548 0E36  
                                                l4396 18EC  
                                                l4388 18B4  
                                                l4644 23B2  
                                                l4492 122C  
                                                l4484 11DA  
                                                l4476 111E  
                                                l4468 10C6  
                                                l4660 1980  
                                                l4652 1970  
                                                l3782 25EC  
                                                l3774 25B8  
                                                l3934 0A32  
                                                l3926 09F8  
                                                l3918 099E  
                                                l3870 07BE  
                                                l3846 0726  
                                                l3838 06EC  
                                                l3950 1AD4  
                                                l3790 26A6  
                                                l4590 0F96  
                                                l4582 0F76  
                                                l4574 0F56  
                                                l4558 0EB8  
                                                l4398 1906  
                                                l4494 1240  
                                                l4486 1200  
                                                l4478 1132  
                                                l4670 19D2  
                                                l4662 198C  
                                                l4654 1974  
                                                l4646 1966  
                                                l3776 25BC  
                                                l3784 267C  
                                                l3936 0A36  
                                                l3928 0A14  
                                                l3880 0812  
                                                l3872 07CE  
                                                l3864 0782  
                                                l3848 0736  
                                                l3856 0758  
                                                l3960 1B2C  
                                                l3952 1B04  
                                                l3944 1AA4  
                                                l3792 2670  
                                                l4592 0FD8  
                                                l4584 0F7E  
                                                l4576 0F68  
                                                l4568 0EF0  
                                                l4496 1244  
                                                l4488 120A  
                                                l4680 1A0C  
                                                l4672 19DE  
                                                l4664 1994  
                                                l4656 1978  
                                                l4648 1966  
                                                l3890 0870  
                                                l3882 0820  
                                                l3874 07D6  
                                                l3866 079E  
                                                l3858 076E  
                                                l3970 1B5E  
                                                l3954 1B06  
                                                l3946 1ABE  
                                                l3786 2692  
                                                l3794 2702  
                                                l4498 125A  
                                                l4842 10E6  
                                                l4682 1A20  
                                                l4674 19F0  
                                                l4690 1A66  
                                                l4666 19A8  
                                                l4658 197C  
                                                l3892 088A  
                                                l3884 0844  
                                                l3876 07EC  
                                                l3868 07AE  
                                                l3980 1B9A  
                                                l3956 1B16  
                                                l3788 269C  
                                                l3796 2664  
                                                l4844 12DA  
                                                l4692 1A80  
                                                l4684 1A34  
                                                l4676 1A00  
                                                l4668 19B8  
                                                l3894 0890  
                                                l3886 0846  
                                                l3878 0800  
                                                l3982 1BB0  
                                                l3966 1B48  
                                                l3958 1B1A  
                                                l3990 15A2  
                                                l4598 0FF0  
                                                l3798 23CC  
                                                l4846 1CA6  
                                                l4694 1A88  
                                                l4686 1A5E  
                                                l4678 1A06  
                                                l3896 089C  
                                                l3888 0856  
                                                l3984 1BC0  
                                                l3976 1B78  
                                                l3968 1B54  
                                                l3992 15B4  
                                                l4848 0F10  
                                                l4696 1A8E  
                                                l4688 1A62  
                                                l3898 08AE  
                                                l3978 1B86  
                                                l3994 15FC  
                                                l4698 1A92  
                                                l3996 1618  
                                                l3988 158E  
                                                ?_isr 0001  
                                                u3000 0660  
                                                u3001 065A  
                                                u3010 06AE  
                                                u3011 06A8  
                                                u3100 0888  
                                                u3020 06C6  
                                                u3101 0882  
                                                u3021 06C0  
                                                _LATA 000F89  
                                                u3110 08AC  
                                                u3030 06DA  
                                                _LATB 000F8A  
                                                u3111 08A6  
                                                u3031 06D4  
                                                _LATC 000F8B  
                                                u3200 0A2A  
                                                u3120 08D4  
                                                u3040 0724  
                                                u4000 11DA  
                                                _LATD 000F8C  
                                                u3201 0A24  
                                                u3121 08CE  
                                                u3041 071E  
                                                u4001 11D4  
                                                u3130 08EA  
                                                u3050 076C  
                                                u3210 1ABC  
                                                u4010 11FE  
                                                u3131 08E4  
                                                u3051 0766  
                                                u3211 1AB6  
                                                u4011 11F8  
                                                u3140 091C  
                                                u3060 07EA  
                                                u3220 1AF8  
                                                u3300 1616  
                                                u4100 1038  
                                                u4020 1258  
                                                u3141 0916  
                                                u3061 07E4  
                                                u3301 1610  
                                                u4101 1032  
                                                u4021 1252  
                                                u3150 093A  
                                                u3070 0810  
                                                u3230 1B2A  
                                                u3310 1676  
                                                u4110 1064  
                                                u4030 126C  
                                                u3151 0934  
                                                u3071 080A  
                                                u3231 1B24  
                                                u3311 1670  
                                                u4111 105E  
                                                u4031 1266  
                                                u3400 0AFC  
                                                u3160 0954  
                                                u3080 0842  
                                                u3240 1B42  
                                                u3320 16C8  
                                                u4120 23C4  
                                                u4040 1280  
                                                u3401 0AF6  
                                                u3161 094E  
                                                u3081 083C  
                                                u3241 1B3C  
                                                u3225 1AEC  
                                                u3321 16C2  
                                                u4121 23BE  
                                                u4041 127A  
                                                u3410 0B1E  
                                                u3170 0972  
                                                u3090 086E  
                                                u3250 1B72  
                                                u3330 16EE  
                                                u4050 1294  
                                                u4130 19A6  
                                                u3411 0B18  
                                                u3171 096C  
                                                u3091 0868  
                                                u3251 1B6C  
                                                u3331 16E8  
                                                u4051 128E  
                                                u4131 19A0  
                                                u3500 0C52  
                                                u3420 0B44  
                                                u3180 09C0  
                                                u3260 1B9A  
                                                u3340 1702  
                                                u4060 0F4C  
                                                u4140 19D0  
                                                u3501 0C4C  
                                                u3421 0B3E  
                                                u3181 09BA  
                                                u3261 1B94  
                                                u3341 16FC  
                                                u4061 0F46  
                                                u4141 19CA  
                                                u3510 0C72  
                                                u3430 0B64  
                                                u3190 09F6  
                                                u3270 1BAE  
                                                u3350 1714  
                                                u4070 0F68  
                                                u4150 1A7E  
                                                u3511 0C6C  
                                                u3431 0B5E  
                                                u3191 09F0  
                                                u3271 1BA8  
                                                u3351 170E  
                                                u4071 0F62  
                                                u4151 1A78  
                                                u3520 0C8E  
                                                u3440 0B80  
                                                u3360 1754  
                                                u3280 15A0  
                                                u3600 1F62  
                                                u4080 0F90  
                                                u3521 0C88  
                                                u3441 0B7A  
                                                u3361 174E  
                                                u3281 159A  
                                                u3601 1F5C  
                                                u4081 0F8A  
                                                u3530 0CBE  
                                                u3450 0BB0  
                                                u3370 1766  
                                                u3290 15B2  
                                                u3610 1F8C  
                                                u4090 0FEA  
                                                u3531 0CB8  
                                                u3451 0BAA  
                                                u3371 1760  
                                                u3291 15AC  
                                                u3611 1F86  
                                                u4091 0FE4  
                                                u3540 0CEC  
                                                u3460 0BDE  
                                                u3380 0A72  
                                                u3620 1FBE  
                                                u3700 1EDE  
                                                u3541 0CE6  
                                                u3461 0BD8  
                                                u3381 0A6C  
                                                u3621 1FB8  
                                                u3701 1ED8  
                                                u3550 0D06  
                                                u3470 0BF8  
                                                u3390 0AB2  
                                                u3630 1FDE  
                                                u3710 1F10  
                                                u3551 0D00  
                                                u3471 0BF2  
                                                u3391 0AAC  
                                                u3631 1FD8  
                                                u3711 1F0A  
                                                u3720 2258  
                                                u3560 0D1C  
                                                u3480 0C0E  
                                                u3800 2508  
                                                u3640 1FF0  
                                                u3721 2252  
                                                u3561 0D16  
                                                u3481 0C08  
                                                u3801 2502  
                                                u3641 1FEA  
                                                u3730 227C  
                                                u3570 0D40  
                                                u3490 0C2C  
                                                u3650 2022  
                                                u3810 17C4  
                                                u3731 2276  
                                                u3571 0D3A  
                                                u3491 0C26  
                                                u3651 201C  
                                                u3811 17BE  
                                                u3740 22AE  
                                                u3580 0D54  
                                                u3660 1E50  
                                                u3900 18D4  
                                                u3820 17E4  
                                                u3741 22A8  
                                                u3581 0D4E  
                                                u3661 1E4A  
                                                u3901 18CE  
                                                u3821 17DE  
                                                u3750 22C0  
                                                u3590 0D68  
                                                u3670 1E7A  
                                                u3910 1906  
                                                u3830 17F8  
                                                u3751 22BA  
                                                u3591 0D62  
                                                u3671 1E74  
                                                u3911 1900  
                                                u3831 17F2  
                                                u3760 20D0  
                                                u3680 1EAC  
                                                u3920 191A  
                                                u3840 1818  
                                                u2960 23F4  
                                                u3761 20CA  
                                                u3681 1EA6  
                                                u3921 1914  
                                                u3841 1812  
                                                u2961 23EE  
                                                u3770 20F8  
                                                u3690 1ECC  
                                                u3930 192E  
                                                u3850 1842  
                                                u2970 2412  
                                         main@newData 00F1  
                                                u3771 20F2  
                                                u3691 1EC6  
                                                u3931 1928  
                                                u3851 183C  
                                                u2971 240C  
                                                u2980 0634  
                                                u3780 2120  
                                                u3940 1942  
                                                u3860 1856  
                                                u2981 062E  
                                                u3781 211A  
                                                u3941 193C  
                                                u3861 1850  
                                                u3790 2538  
                                                u2990 064C  
                                                u3950 24BE  
                                                u3870 1876  
                                                u3791 2532  
                                                u2991 0646  
                                                u3951 24B8  
                                                u3871 1870  
                                                u3960 24D4  
                                                u3880 18A0  
                                                u3961 24CE  
                                                u3881 189A  
                                                u3890 18B4  
                                                u3970 111C  
                                                u3891 18AE  
                                                u3971 1116  
                                                u3980 1130  
                                                u3981 112A  
                                                u3990 11B6  
                                                u3991 11B0  
                                                i2l81 2650  
                                                i2l87 270C  
                                                _TMR0 000FD6  
                                                _TMR2 000FCC  
                                 __end_ofi2_storeData 158A  
                                                _main 1966  
                                                _maxX 0607  
                                                _maxY 0605  
                                __end_ofi2_printError 1E10  
                                                fsr2h 000FDA  
                                                indf2 000FDF  
                                                fsr1l 000FE1  
                                                fsr2l 000FD9  
                                                btemp 006E  
                                                prodh 000FF4  
                                                prodl 000FF3  
                                                start 01A4  
                                     ___fldiv@new_exp 0031  
                                        ?_increaseSeq 0001  
                                        ___param_bank 000000  
                                     ??_whatsTM0Limit 0001  
                                               ??_isr 000B  
                                        ?_executeData 0001  
                                     executeData@data 00EB  
                                       ___fltol@sign1 0041  
                                               ?_main 0001  
                                     __end_of___fldiv 0A48  
                                     __end_of___fltol 1BD8  
                                               i2l251 2604  
                                               i2l252 2606  
                                               i2l601 1584  
                                               i2l540 271C  
                                               i2l640 265E  
                                               i2l392 26D2  
                                               i2l634 2714  
                                               i2l468 018C  
                                               i2l573 2430  
                                               i2l389 26DC  
                                               i2l637 26C8  
                                               i2l568 1E0A  
                                               i2l577 2462  
                                               i2l594 1496  
                                rotateObj@rotSequence 0080  
                                               _SPBRG 000FAF  
                                               _TRISA 000F92  
                                               _TRISB 000F93  
                                               _TRISC 000F94  
                                               _TRISD 000F95  
                                               _TXREG 000FAD  
                                     __end_of_getData 2638  
                                     i2storeData@data 000A  
                                     __end_of_initADC 2594  
                                        ?_newSequence 0001  
                                     __end_of_liftArm 22E4  
                                     __end_of_readSeq 26F0  
                                        stepMade@temp 0014  
                                               tablat 000FF5  
                                      i2uartTx@length 0003  
                                     __end_of_stopADC 2708  
                                               ttemp5 006F  
                                               ttemp6 0072  
                                               ttemp7 0076  
                                               status 000FD8  
                                               wtemp8 006F  
                                    __end_ofi2_uartTx 2466  
                                       ?_increaseStep 0001  
                                     __initialization 22E4  
                              __size_of_initPinMotors 0026  
                                        __end_of_main 1AA2  
                                        __end_of_maxX 0609  
                                        __end_of_maxY 0607  
                            resetPosition@keepMovingX 0015  
                            resetPosition@keepMovingY 0016  
                            resetPosition@keepMovingZ 0017  
                                              ??_main 00EE  
                                       __activetblptr 000002  
                               __end_of_resetTM0_Temp 26B8  
                               __end_of_resetTM2_Temp 25FC  
                                         i2_storeData 1306  
                                        ?_setThermRel 0001  
                                              _ADRESH 000FC4  
                                              _ADRESL 000FC3  
                                        ?_moveToPoint 0015  
                                              i2l3100 1D28  
                                              i2l3110 1D96  
                                              i2l3102 1D3E  
                                              i2l3104 1D54  
                                              i2l3106 1D6A  
                                              i2l3114 1DAC  
                                              i2l2234 26D8  
                                              i2l3108 1D80  
                                              i2l2244 2712  
                                              i2l2236 26CE  
                                              i2l3206 25FE  
                                              i2l2238 271A  
                                              i2l2246 26C4  
                                              i2l3500 1548  
                                              i2l3094 1CF8  
                                              i2l3502 157E  
                                              i2l3096 1CFC  
                                              i2l3440 2656  
                                              i2l1912 270A  
                                              i2l3600 00CA  
                                              i2l3098 1D12  
                                              i2l3450 133C  
                                              i2l3442 130A  
                                              i2l3610 00FA  
                                              i2l3602 00CC  
                                              i2l1908 2648  
                                              i2l3460 13A2  
                                              i2l3452 134A  
                                              i2l3444 131A  
                                              i2l3620 014E  
                                              i2l3604 00E0  
                                              i2l3612 0100  
                                              i2l3470 1484  
                                              i2l3462 13B6  
                                              i2l3446 1320  
                                              i2l3622 0168  
                                              i2l3614 0114  
                                              i2l3606 00F2  
                                              i2l3480 14C8  
                                              i2l3472 148E  
                                              i2l3464 13BE  
                                              i2l3448 132E  
                                              i2l3456 1354  
                                              i2l3616 011C  
                                              i2l3624 016C  
                                              i2l3608 00F6  
                                              i2l3490 151E  
                                              i2l3482 14DE  
                                              i2l3474 14A0  
                                              i2l3466 143C  
                                              i2l3458 138A  
                                              i2l3626 0180  
                                              i2l3618 0142  
                                              i2l3570 002E  
                                              i2l3492 1528  
                                              i2l3484 14F2  
                                              i2l3476 14B0  
                                              i2l3468 145E  
                                              i2l3628 0186  
                                              i2l3580 0054  
                                              i2l3572 0030  
                                              i2l3494 1532  
                                              i2l3486 1506  
                                              i2l3478 14C4  
                                              i2l3590 008A  
                                              i2l3574 0032  
                                              i2l3582 0058  
                                              i2l2792 241A  
                                              i2l3496 153C  
                                              i2l3488 1518  
                                              i2l3592 009E  
                                              i2l3584 006C  
                                              i2l3576 004E  
                                              i2l3568 001C  
                                              i2l2794 2422  
                                              i2l3594 00A0  
                                              i2l3586 006E  
                                              i2l3578 0050  
                                              i2l2796 2444  
                                              i2l3596 00A4  
                                              i2l3588 0086  
                                              i2l2798 244A  
                                              i2l3598 00C2  
                                              i2l4850 136A  
                                              i2l4852 155E  
                                              i2l4854 1DC2  
                                              _RCREG1 000FAE  
                                        ?_setTouchRel 0001  
                                    __end_of_abortAll 260E  
                                    __end_of___xxtofl 1782  
                                    __end_of_clearTM0 2646  
                                    _errString_PointZ 0100  
                                      ??_increaseStep 0001  
                                    __end_of_maxFeedX 0615  
                                    __end_of_maxFeedY 0614  
                                           ??___fldiv 0028  
                                           ??___fltol 003D  
                                    __end_of_tim0Init 25EA  
                                    __end_of_tim1Init 261C  
                                    __end_of_tim2Init 25D8  
                                              clear_0 234A  
                                              clear_1 2356  
                                           ??_getData 0014  
                                              _uartTx 23CA  
                                           ??_initADC 0012  
                                           ??_liftArm 0015  
                                           ??_readSeq 0012  
                                        __pdataCOMRAM 0067  
                               __end_of_resetPosition 1966  
                                        __mediumconst 0000  
                                              tblptrh 000FF7  
                                              tblptrl 000FF6  
                                              tblptru 000FF8  
                                        ?_returnTherm 0012  
                                    __end_of_startADC 269A  
                                    __end_of_stepMade 25C6  
                                       _initPinMotors 2548  
                                        ?_returnTouch 0012  
                                           ??_stopADC 0012  
                               __size_ofi2_printError 011C  
                                    __end_of_writeTM0 2654  
                           __size_of_resetNewSequence 000A  
                                        ___xxtofl@arg 001C  
                                        ___xxtofl@exp 001B  
                                        ___xxtofl@val 0012  
                                          __accesstop 0080  
                             __end_of__initialization 235C  
                                        _dataSequence 00C6  
                                       ___rparam_used 000001  
                                          ___fltol@f1 0039  
                                        ?_stepCounter 0012  
                                         i2uartTx@ptr 0001  
                                      __pcstackCOMRAM 0001  
                                        __newSequence 005F  
                                        __pidataBANK0 2466  
                                        __pidataBANK1 212E  
                                __size_of_increaseSeq 0008  
                                __size_of_executeData 02F6  
                                        i2_printError 1CF4  
                                        ?_touchObject 0001  
                                      _errString_ZEND 015E  
                                      _errString_Feed 0090  
                                      ?_initPinMotors 0001  
                                           ?i2_uartTx 0001  
                                          __pbssBANK0 00C6  
                                __size_of_newSequence 0008  
                                          _feeder1Pos 0611  
                                          _feeder2Pos 060F  
                                          _feeder3Pos 060D  
                             __size_of_getNewSequence 000E  
                                          _fatalError 2718  
                                  __size_of_reduceSeq 0008  
                                  __size_of_retPeriod 000E  
                                      _touch_pressure 060B  
                                  __size_of_shiftData 0060  
                                  __size_of_resetStep 000A  
                                             _ADC_res 0053  
                                             ?_uartTx 0012  
                                           ?_abortAll 0001  
                                           ?___xxtofl 0012  
                                __end_of_increaseStep 2718  
                                           ?_clearTM0 0001  
                                          ??i2_uartTx 0004  
                                  __size_of_rotateObj 00FA  
                                   _errString_Command 00AE  
                                  __size_of_usartInit 001E  
                              __size_of_interruptInit 003C  
                                __size_of_setThermRel 000A  
                                  __size_of_storeData 0284  
                                           ?_tim0Init 0001  
                                           ?_tim1Init 0001  
                                           ?_tim2Init 0012  
                                __size_of_moveToPoint 0344  
                                     _newSequenceData 00DA  
                                __size_of_setTouchRel 000A  
                                             __Hparam 0000  
                                             __Lparam 0000  
                              __end_of_touch_pressure 060D  
                                             ___fldiv 0616  
                                           ?_startADC 0001  
                                           ?_stepMade 0012  
                                             ___fltol 1AA2  
                                        __psmallconst 0600  
                                             __pcinit 22E4  
                               __end_of_whatsTM0Limit 2710  
                                             _getData 262A  
                                             __ramtop 0600  
                                           ?_writeTM0 0001  
                                          _pickObject 2518  
                                             __ptext0 1966  
                                             __ptext1 2594  
                                             __ptext2 25C6  
                                             __ptext3 260E  
                                             __ptext4 25D8  
                                             __ptext5 1082  
                                             __ptext6 1BD8  
                                             __ptext7 23CA  
                                             __ptext8 236A  
                                             __ptext9 1782  
                                     __size_of_uartTx 004E  
                                           _T0CONbits 000FD5  
                                             _initADC 256E  
                                           _T1CONbits 000FCD  
                                     ??_initPinMotors 0012  
                                             _counter 005E  
                                             _liftArm 2226  
                                           _T2CONbits 000FCA  
                                          ??_abortAll 0008  
                                             _readSeq 26E8  
                                        __size_of_isr 019C  
                                          ??___xxtofl 0016  
                                          _neverCheck 005D  
                                        ?i2_storeData 0001  
                                          ??_clearTM0 0012  
                                          _motCounter 0067  
                                             _pwmStep 005C  
                                             _stopADC 2700  
                                   __end_of_reduceSeq 26E8  
                                   __end_of_retPeriod 2662  
                                          _releaseObj 24E8  
                                __size_of_returnTherm 000C  
                                end_of_initialization 235C  
                                __size_of_returnTouch 000C  
                                    _resetNewSequence 2686  
                                    rotateObj@totStep 00E3  
                                   __end_of_shiftData 23CA  
                                             isr@temp 0011  
                                   __end_of_resetStep 26C2  
                                          ??_tim0Init 0012  
                                       __Lmediumconst 0000  
                                          ??_tim1Init 0012  
                                          ??_tim2Init 0014  
                                          _resetTherm 26A4  
                                          _resetTouch 269A  
                                             uartTx@i 0015  
                                         ?_fatalError 0001  
                                           _RCSTAbits 000FAB  
                                             postdec1 000FE5  
                                   __end_of_rotateObj 212E  
                                             postinc0 000FEE  
                                             postinc1 000FE6  
                                             postinc2 000FDE  
                                          ??_startADC 0012  
                                          ??_stepMade 0014  
                                __size_of_stepCounter 000C  
                                       _interruptInit 24AC  
                                   __end_of_usartInit 25B2  
                                   __end_of_storeData 1306  
                          __end_ofrotateObj@stepAngle 0605  
                                          ??_writeTM0 0001  
                                           _PORTDbits 000F83  
                                          _printError 1BD8  
                                           _PORTEbits 000F84  
                                 i2printError@errCode 0007  
                                          _toggleStep 26C2  
                                       ___xxtofl@sign 001A  
                                           _TRISCbits 000F94  
                                           _TRISDbits 000F95  
                                           _TRISEbits 000F96  
                                         ___fldiv@grs 0033  
                                         ___fldiv@rem 002C  
                                __size_of_touchObject 0112  
                                          _stepToggle 005B  
                                        _completeStep 0062  
                                          _touchTherm 1E10  
                                           _TXSTAbits 000FAC  
                                      _getNewSequence 261C  
                              __size_of_resetTM0_Temp 000A  
                              __size_of_resetTM2_Temp 0012  
                                      ?_interruptInit 0001  
                                       __pidataCOMRAM 2720  
                               __size_of_increaseStep 0008  
                                         ?_pickObject 0001  
                                         __fatalError 0060  
                                      __end_of_uartTx 2418  
                                       moveToPoint@x1 0015  
                                       moveToPoint@x2 0019  
                                       moveToPoint@y1 0017  
                                       moveToPoint@y2 001B  
                                 start_initialization 22E4  
                                           i2uartTx@i 0004  
                                         __end_of_isr 01A4  
                                 __size_of_fatalError 0008  
                                         ?_releaseObj 0001  
                                   __size_ofi2_uartTx 004E  
                              __end_of_getNewSequence 262A  
                                     _errString_Fatal 01AF  
                                     _errString_Bound 01D6  
                                         ?_resetTherm 0001  
                                     _errString_Reset 0187  
                                         ?_resetTouch 0001  
                                       ??_increaseSeq 0012  
                                     _errString_Point 0135  
                                        _increaseStep 2710  
                              __size_of_resetPosition 01E4  
                                       ??_executeData 00E9  
                                         __pdataBANK0 0080  
                                         __pdataBANK1 0100  
                                         _dataCounter 0061  
                                            ??_uartTx 0015  
                              moveToPoint@keepMovingX 0021  
                              moveToPoint@keepMovingY 0022  
                                         ?_printError 0001  
                                           ___fldiv@a 0024  
                                           ___fldiv@b 0020  
                                      _therm_pressure 0609  
                                         ?_toggleStep 0001  
                                         __pbssCOMRAM 0043  
                                       _resetTM0_Temp 26AE  
                                       _resetTM2_Temp 25EA  
                                       __pcstackBANK0 00E2  
                                       ??_newSequence 0012  
                                   __size_of_abortAll 0012  
                                   __size_of___xxtofl 01F8  
                                __size_ofi2_storeData 0284  
                                   __size_of_clearTM0 000E  
                                     ?_getNewSequence 0012  
                                         ?_touchTherm 0001  
                                 __size_of_pickObject 0030  
                                  executeData@errCode 00ED  
                                   __size_of_tim0Init 0012  
                                   __size_of_tim1Init 000E  
                                   __size_of_tim2Init 0012  
                                     ??_interruptInit 0012  
                                           __pintcode 0008  
                                            ?___fldiv 0020  
                                            ?___fltol 0039  
                            __end_of_resetNewSequence 2690  
                                 __size_of_releaseObj 0030  
                                       storeData@data 001B  
                                 __end_of_increaseSeq 2700  
                                            ?_getData 0012  
                                   __size_of_startADC 000A  
                                   __size_of_stepMade 0014  
                              __end_of_therm_pressure 060B  
                                            ?_initADC 0001  
                                         __smallconst 0600  
                                            ?_liftArm 0001  
                                            ?_readSeq 0001  
                                      ?_resetTM0_Temp 0001  
                                   __size_of_writeTM0 000E  
                                      ?_resetTM2_Temp 0001  
                                 __end_of_executeData 1082  
                                          shiftData@i 0014  
                                 __size_of_resetTherm 000A  
                                           _newFeeder 0055  
                                       _resetPosition 1782  
                                 __size_of_resetTouch 000A  
                                           _mexLength 006D  
                                       ??_setThermRel 0001  
                                            ?_stopADC 0001  
                                       ??_moveToPoint 001D  
                                       ??_setTouchRel 0001  
                                 __end_of_newSequence 26F8  
                                           _reduceSeq 26E0  
                                            _LATAbits 000F89  
                                            _LATBbits 000F8A  
                                           _retPeriod 2654  
                                            _LATCbits 000F8B  
                                            _LATDbits 000F8C  
                                 __size_of_printError 011C  
                                            _IPR1bits 000F9F  
                                            _PIE1bits 000F9D  
                                           _shiftData 236A  
                                           _resetStep 26B8  
                                            i2u280_40 1518  
                                            i2u272_40 13A0  
                                            i2u280_41 1512  
                                            i2u272_41 139A  
                                            i2u273_40 13B4  
                                            i2u273_41 13AE  
                                            _PIR1bits 000F9E  
                                            i2u274_40 143A  
                                            i2u290_40 00DE  
                                            i2u274_41 1434  
                                            i2u290_41 00D8  
                                            i2u195_40 2442  
                                            i2u275_40 145E  
                                            i2u291_40 00F0  
                                            i2u195_41 243C  
                                            i2u275_41 1458  
                                            i2u291_41 00EA  
                                            i2u196_40 2460  
                                            i2u276_40 1482  
                                            i2u292_40 0112  
                                            i2u284_40 002C  
                                            i2u196_41 245A  
                                            i2u276_41 147C  
                                            i2u292_41 010C  
                                            i2u284_41 0026  
                                            i2u277_40 14DC  
                                            i2u293_40 0140  
                                            i2u285_40 004C  
                                            i2u277_41 14D6  
                                            i2u293_41 013A  
                                            i2u285_41 0046  
                                            i2u278_40 14F0  
                                            i2u294_40 0166  
                                            i2u286_40 006A  
                                            i2u278_41 14EA  
                                            i2u294_41 0160  
                                            i2u286_41 0064  
                                            i2u279_40 1504  
                                            i2u295_40 017E  
                                            i2u287_40 0084  
                                            i2u279_41 14FE  
                                            i2u295_41 0178  
                                            i2u287_41 007E  
                                            i2u288_40 009C  
                                            i2u288_41 0096  
                                            i2u289_40 00C0  
                                            i2u289_41 00BA  
                                 __size_of_toggleStep 000A  
                                        ??_fatalError 0001  
                                           _posVector 004C  
                                            _RCONbits 000FD0  
                                           _therm_rel 0064  
                                           _pwmPeriod 004F  
                                           _rotateObj 2034  
                                          _ADCON0bits 000FC2  
                                          _ADCON1bits 000FC1  
                                 __size_of_touchTherm 0112  
                                           _usartInit 2594  
                                           _touch_rel 0065  
                                  __end_of_feeder1Pos 0613  
                                  __end_of_feeder2Pos 0611  
                                  __end_of_feeder3Pos 060F  
                                           _storeData 1082  
                                      ?_resetPosition 0001  
                               __end_of_initPinMotors 256E  
                                       ??_returnTherm 0014  
                                       ??_returnTouch 0014  
                                            i2_uartTx 2418  
                                           copy_data0 22F8  
                                           copy_data1 2318  
                                           copy_data2 2338  
                                  __end_of_fatalError 2720  
                                  rotateObj@stepAngle 0601  
                                          ?_reduceSeq 0001  
                                          ?_retPeriod 0001  
                                          rotateObj@c 00E7  
                                          rotateObj@i 00E5  
                              __size_of_whatsTM0Limit 0008  
                                 __end_of_setThermRel 26E0  
                                 __end_of_moveToPoint 0D8C  
                                   printError@errCode 0018  
                                          ?_shiftData 0001  
                                       ??_stepCounter 0014  
                                            __Hrparam 0000  
                                          ?_resetStep 0001  
                                         _increaseSeq 26F8  
                                 __end_of_setTouchRel 26D6  
                                            __Lrparam 0000  
                                    __size_of___fldiv 0432  
                                    __size_of___fltol 0136  
                                         _executeData 0D8C  
                                        ??_pickObject 0015  
                                          ?_rotateObj 0001  
                            moveToPoint@MOT1Direction 001F  
                                     ??_resetTM0_Temp 0012  
                                       ?i2_printError 0001  
                                     ??_resetTM2_Temp 0012  
                                    __size_of_getData 000E  
                            moveToPoint@MOT2Direction 0020  
                                       ??_touchObject 0015  
                                            _abortAll 25FC  
                                          ?_usartInit 0001  
                                    __size_of_initADC 0026  
                                            ___xxtofl 158A  
                                    __size_of_liftArm 00BE  
                                          ?_storeData 0001  
                                            _clearTM0 2638  
                                    __size_of_readSeq 0008  
                                            _tm0Count 0063  
                                            _tm0Error 0059  
                                            _tm0Limit 0066  
                                         _newSequence 26F0  
                                            __ptext10 2686  
                                            __ptext11 26E0  
                                            __ptext20 1E10  
                                            __ptext12 26E8  
                                            __ptext21 2662  
                                            __ptext13 26F0  
                                            __ptext30 1AA2  
                                            __ptext22 1F22  
                                            __ptext14 24AC  
                                            __ptext31 0616  
                                            __ptext23 2700  
                                            __ptext15 2548  
                                            __ptext40 26B8  
                                            __ptext32 24E8  
                                            __ptext24 2690  
                                            __ptext16 256E  
                                            __ptext41 262A  
                                            __ptext33 2518  
                                            __ptext25 266E  
                                            __ptext17 26F8  
                                            __ptext50 2654  
                                            __ptext42 2638  
                                            __ptext34 0A48  
                                            __ptext26 269A  
                                            __ptext18 261C  
                                            __ptext51 2710  
                                            __ptext35 267A  
                                            __ptext27 26A4  
                                            __ptext19 0D8C  
                                            __ptext52 2718  
                                            __ptext44 1306  
                                            __ptext36 2226  
                                            __ptext28 2034  
                                            __ptext53 25FC  
                                            __ptext45 2646  
                                            __ptext37 25B2  
                                            __ptext29 158A  
                                            __ptext54 1CF4  
                                            __ptext46 2708  
                                            __ptext38 25EA  
                                            __ptext55 2418  
                                            __ptext47 26C2  
                                            __ptext39 26AE  
                                            __ptext48 26CC  
                                            __ptext49 26D6  
                                        ??_releaseObj 0015  
                                    __size_of_stopADC 0008  
                                            _maxFeedX 0614  
                                            _maxFeedY 0613  
                                 __end_of_returnTherm 266E  
                                 __end_of_returnTouch 267A  
                                            _tim0Init 25D8  
                                            _tim1Init 260E  
                                            _tim2Init 25C6  
                                       __size_of_main 013C  
                                         _receivedMex 0043  
                                  __end_of_pickObject 2548  
                                        ??_resetTherm 0012  
                                        ??_resetTouch 0012  
                                           uartTx@ptr 0012  
                                            _rotAngle 0057  
                                            int$flags 006E  
                                            _startADC 2690  
                                            _stepMade 25B2  
                                            _stepMot1 008C  
                                            _stepMot2 0088  
                                            _stepMot3 0084  
                                 __end_of_stepCounter 2686  
                                   rotateObj@rotAngle 00E2  
                                      ??i2_printError 0005  
                                  __end_of_releaseObj 2518  
                                            _writeTM0 2646  
                                        ??_printError 0016  
                                       _whatsTM0Limit 2708  
                                     ??_resetPosition 0015  
                                  tim2Init@_pwmPeriod 0012  
                                          _INTCONbits 000FF2  
                                        ??_toggleStep 0001  
                                    ??_getNewSequence 0014  
                                  __end_of_resetTherm 26AE  
                                  __end_of_resetTouch 26A4  
                                         _setThermRel 26D6  
                                        uartTx@length 0014  
                                        _single_cycle 0051  
                                         _moveToPoint 0A48  
                                 __end_of_touchObject 2034  
                                            intlevel2 2728  
                                        ??_touchTherm 0015  
                                         _setTouchRel 26CC  
                                         ??_reduceSeq 0012  
                                         ??_retPeriod 0003  
                                          _RCSTA1bits 000FAB  
                                  __end_of_printError 1CF4  
                                         ??_shiftData 0012  
                                         ??_resetStep 0012  
                                  __end_of_toggleStep 26CC  
                                   ?_resetNewSequence 0001  
                                      ?_whatsTM0Limit 0001  
                                         ??_rotateObj 0043  
                                  ??_resetNewSequence 0012  
                                  __end_of_touchTherm 1F22  
                                         ??_usartInit 0012  
                                       ??i2_storeData 0008  
                                         ??_storeData 0019  
                                         _returnTherm 2662  
                                         _returnTouch 266E  
                                         _stepCounter 267A  
