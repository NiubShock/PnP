

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Thu Jan 28 11:24:49 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    74                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    75                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    76                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    77                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    78  0000                     
    79                           ; Version 2.20
    80                           ; Generated 12/02/2020 GMT
    81                           ; 
    82                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC18F452 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     
   114                           	psect	idataCOMRAM
   115  002450                     __pidataCOMRAM:
   116                           	callstack 0
   117                           
   118                           ;initializer for _maxY
   119  002450  03E8               	dw	1000
   120                           
   121                           ;initializer for _maxX
   122  002452  03E8               	dw	1000
   123                           
   124                           ;initializer for storeData@mexLength
   125  002454  05                 	db	5
   126                           
   127                           	psect	idataBANK0
   128  00217E                     __pidataBANK0:
   129                           	callstack 0
   130                           
   131                           ;initializer for rotateObj@rotSequence
   132  00217E  09                 	db	9
   133  00217F  03                 	db	3
   134  002180  06                 	db	6
   135  002181  0C                 	db	12
   136                           
   137                           ;initializer for _errString_Bound
   138  002182  45                 	db	69
   139  002183  72                 	db	114
   140  002184  72                 	db	114
   141  002185  6F                 	db	111
   142  002186  72                 	db	114
   143  002187  2C                 	db	44
   144  002188  20                 	db	32
   145  002189  70                 	db	112
   146  00218A  6F                 	db	111
   147  00218B  69                 	db	105
   148  00218C  6E                 	db	110
   149  00218D  74                 	db	116
   150  00218E  20                 	db	32
   151  00218F  6F                 	db	111
   152  002190  75                 	db	117
   153  002191  74                 	db	116
   154  002192  73                 	db	115
   155  002193  69                 	db	105
   156  002194  64                 	db	100
   157  002195  65                 	db	101
   158  002196  20                 	db	32
   159  002197  62                 	db	98
   160  002198  6F                 	db	111
   161  002199  75                 	db	117
   162  00219A  6E                 	db	110
   163  00219B  64                 	db	100
   164  00219C  61                 	db	97
   165  00219D  72                 	db	114
   166  00219E  69                 	db	105
   167  00219F  65                 	db	101
   168  0021A0  73                 	db	115
   169  0021A1  00                 	db	0
   170                           
   171                           ;initializer for _errString_Feed
   172  0021A2  45                 	db	69
   173  0021A3  72                 	db	114
   174  0021A4  72                 	db	114
   175  0021A5  6F                 	db	111
   176  0021A6  72                 	db	114
   177  0021A7  2C                 	db	44
   178  0021A8  20                 	db	32
   179  0021A9  66                 	db	102
   180  0021AA  65                 	db	101
   181  0021AB  65                 	db	101
   182  0021AC  64                 	db	100
   183  0021AD  20                 	db	32
   184  0021AE  6C                 	db	108
   185  0021AF  69                 	db	105
   186  0021B0  6E                 	db	110
   187  0021B1  65                 	db	101
   188  0021B2  20                 	db	32
   189  0021B3  6E                 	db	110
   190  0021B4  6F                 	db	111
   191  0021B5  74                 	db	116
   192  0021B6  20                 	db	32
   193  0021B7  64                 	db	100
   194  0021B8  65                 	db	101
   195  0021B9  66                 	db	102
   196  0021BA  69                 	db	105
   197  0021BB  6E                 	db	110
   198  0021BC  65                 	db	101
   199  0021BD  64                 	db	100
   200  0021BE  00                 	db	0
   201                           
   202                           ;initializer for _errString_Command
   203  0021BF  43                 	db	67
   204  0021C0  6F                 	db	111
   205  0021C1  6D                 	db	109
   206  0021C2  6D                 	db	109
   207  0021C3  61                 	db	97
   208  0021C4  6E                 	db	110
   209  0021C5  64                 	db	100
   210  0021C6  20                 	db	32
   211  0021C7  6E                 	db	110
   212  0021C8  6F                 	db	111
   213  0021C9  74                 	db	116
   214  0021CA  20                 	db	32
   215  0021CB  72                 	db	114
   216  0021CC  65                 	db	101
   217  0021CD  63                 	db	99
   218  0021CE  6F                 	db	111
   219  0021CF  67                 	db	103
   220  0021D0  6E                 	db	110
   221  0021D1  69                 	db	105
   222  0021D2  7A                 	db	122
   223  0021D3  65                 	db	101
   224  0021D4  64                 	db	100
   225  0021D5  00                 	db	0
   226                           
   227                           	psect	idataBANK1
   228  001D00                     __pidataBANK1:
   229                           	callstack 0
   230                           
   231                           ;initializer for _errString_PointZ
   232  001D00  45                 	db	69
   233  001D01  72                 	db	114
   234  001D02  72                 	db	114
   235  001D03  6F                 	db	111
   236  001D04  72                 	db	114
   237  001D05  2C                 	db	44
   238  001D06  20                 	db	32
   239  001D07  74                 	db	116
   240  001D08  69                 	db	105
   241  001D09  6D                 	db	109
   242  001D0A  65                 	db	101
   243  001D0B  20                 	db	32
   244  001D0C  65                 	db	101
   245  001D0D  78                 	db	120
   246  001D0E  63                 	db	99
   247  001D0F  65                 	db	101
   248  001D10  65                 	db	101
   249  001D11  64                 	db	100
   250  001D12  65                 	db	101
   251  001D13  64                 	db	100
   252  001D14  20                 	db	32
   253  001D15  74                 	db	116
   254  001D16  6F                 	db	111
   255  001D17  20                 	db	32
   256  001D18  72                 	db	114
   257  001D19  65                 	db	101
   258  001D1A  61                 	db	97
   259  001D1B  63                 	db	99
   260  001D1C  68                 	db	104
   261  001D1D  20                 	db	32
   262  001D1E  74                 	db	116
   263  001D1F  68                 	db	104
   264  001D20  65                 	db	101
   265  001D21  20                 	db	32
   266  001D22  65                 	db	101
   267  001D23  6E                 	db	110
   268  001D24  64                 	db	100
   269  001D25  20                 	db	32
   270  001D26  6F                 	db	111
   271  001D27  66                 	db	102
   272  001D28  20                 	db	32
   273  001D29  74                 	db	116
   274  001D2A  68                 	db	104
   275  001D2B  65                 	db	101
   276  001D2C  20                 	db	32
   277  001D2D  5A                 	db	90
   278  001D2E  20                 	db	32
   279  001D2F  41                 	db	65
   280  001D30  78                 	db	120
   281  001D31  69                 	db	105
   282  001D32  73                 	db	115
   283  001D33  00                 	db	0
   284                           
   285                           ;initializer for _errString_Point
   286  001D34  45                 	db	69
   287  001D35  72                 	db	114
   288  001D36  72                 	db	114
   289  001D37  6F                 	db	111
   290  001D38  72                 	db	114
   291  001D39  2C                 	db	44
   292  001D3A  20                 	db	32
   293  001D3B  74                 	db	116
   294  001D3C  69                 	db	105
   295  001D3D  6D                 	db	109
   296  001D3E  65                 	db	101
   297  001D3F  20                 	db	32
   298  001D40  65                 	db	101
   299  001D41  78                 	db	120
   300  001D42  63                 	db	99
   301  001D43  65                 	db	101
   302  001D44  65                 	db	101
   303  001D45  64                 	db	100
   304  001D46  65                 	db	101
   305  001D47  64                 	db	100
   306  001D48  20                 	db	32
   307  001D49  74                 	db	116
   308  001D4A  6F                 	db	111
   309  001D4B  20                 	db	32
   310  001D4C  72                 	db	114
   311  001D4D  65                 	db	101
   312  001D4E  61                 	db	97
   313  001D4F  63                 	db	99
   314  001D50  68                 	db	104
   315  001D51  20                 	db	32
   316  001D52  74                 	db	116
   317  001D53  68                 	db	104
   318  001D54  65                 	db	101
   319  001D55  20                 	db	32
   320  001D56  70                 	db	112
   321  001D57  6F                 	db	111
   322  001D58  69                 	db	105
   323  001D59  6E                 	db	110
   324  001D5A  74                 	db	116
   325  001D5B  00                 	db	0
   326                           
   327                           ;initializer for _errString_ZEND
   328  001D5C  45                 	db	69
   329  001D5D  72                 	db	114
   330  001D5E  72                 	db	114
   331  001D5F  6F                 	db	111
   332  001D60  72                 	db	114
   333  001D61  2C                 	db	44
   334  001D62  20                 	db	32
   335  001D63  6E                 	db	110
   336  001D64  6F                 	db	111
   337  001D65  20                 	db	32
   338  001D66  6F                 	db	111
   339  001D67  62                 	db	98
   340  001D68  6A                 	db	106
   341  001D69  65                 	db	101
   342  001D6A  63                 	db	99
   343  001D6B  74                 	db	116
   344  001D6C  20                 	db	32
   345  001D6D  72                 	db	114
   346  001D6E  65                 	db	101
   347  001D6F  6C                 	db	108
   348  001D70  65                 	db	101
   349  001D71  76                 	db	118
   350  001D72  61                 	db	97
   351  001D73  74                 	db	116
   352  001D74  65                 	db	101
   353  001D75  64                 	db	100
   354  001D76  20                 	db	32
   355  001D77  61                 	db	97
   356  001D78  6C                 	db	108
   357  001D79  6F                 	db	111
   358  001D7A  6E                 	db	110
   359  001D7B  67                 	db	103
   360  001D7C  20                 	db	32
   361  001D7D  5A                 	db	90
   362  001D7E  20                 	db	32
   363  001D7F  41                 	db	65
   364  001D80  78                 	db	120
   365  001D81  69                 	db	105
   366  001D82  73                 	db	115
   367  001D83  00                 	db	0
   368                           
   369                           ;initializer for _errString_Reset
   370  001D84  45                 	db	69
   371  001D85  72                 	db	114
   372  001D86  72                 	db	114
   373  001D87  6F                 	db	111
   374  001D88  72                 	db	114
   375  001D89  2C                 	db	44
   376  001D8A  20                 	db	32
   377  001D8B  74                 	db	116
   378  001D8C  69                 	db	105
   379  001D8D  6D                 	db	109
   380  001D8E  65                 	db	101
   381  001D8F  20                 	db	32
   382  001D90  65                 	db	101
   383  001D91  78                 	db	120
   384  001D92  63                 	db	99
   385  001D93  65                 	db	101
   386  001D94  65                 	db	101
   387  001D95  64                 	db	100
   388  001D96  65                 	db	101
   389  001D97  64                 	db	100
   390  001D98  20                 	db	32
   391  001D99  74                 	db	116
   392  001D9A  6F                 	db	111
   393  001D9B  20                 	db	32
   394  001D9C  72                 	db	114
   395  001D9D  65                 	db	101
   396  001D9E  73                 	db	115
   397  001D9F  65                 	db	101
   398  001DA0  74                 	db	116
   399  001DA1  20                 	db	32
   400  001DA2  70                 	db	112
   401  001DA3  6F                 	db	111
   402  001DA4  73                 	db	115
   403  001DA5  69                 	db	105
   404  001DA6  74                 	db	116
   405  001DA7  69                 	db	105
   406  001DA8  6F                 	db	111
   407  001DA9  6E                 	db	110
   408  001DAA  00                 	db	0
   409                           
   410                           ;initializer for _errString_Fatal
   411  001DAB  46                 	db	70
   412  001DAC  61                 	db	97
   413  001DAD  74                 	db	116
   414  001DAE  61                 	db	97
   415  001DAF  6C                 	db	108
   416  001DB0  20                 	db	32
   417  001DB1  45                 	db	69
   418  001DB2  72                 	db	114
   419  001DB3  72                 	db	114
   420  001DB4  6F                 	db	111
   421  001DB5  72                 	db	114
   422  001DB6  2C                 	db	44
   423  001DB7  20                 	db	32
   424  001DB8  70                 	db	112
   425  001DB9  6C                 	db	108
   426  001DBA  65                 	db	101
   427  001DBB  61                 	db	97
   428  001DBC  73                 	db	115
   429  001DBD  65                 	db	101
   430  001DBE  20                 	db	32
   431  001DBF  72                 	db	114
   432  001DC0  65                 	db	101
   433  001DC1  73                 	db	115
   434  001DC2  65                 	db	101
   435  001DC3  74                 	db	116
   436  001DC4  20                 	db	32
   437  001DC5  74                 	db	116
   438  001DC6  68                 	db	104
   439  001DC7  65                 	db	101
   440  001DC8  20                 	db	32
   441  001DC9  64                 	db	100
   442  001DCA  65                 	db	101
   443  001DCB  76                 	db	118
   444  001DCC  69                 	db	105
   445  001DCD  63                 	db	99
   446  001DCE  65                 	db	101
   447  001DCF  21                 	db	33
   448  001DD0  00                 	db	0
   449                           
   450                           	psect	smallconst
   451  000600                     __psmallconst:
   452                           	callstack 0
   453  000600  00                 	db	0
   454  000601  FFAC               	dw	65452
   455  000603  3DB3               	dw	15795
   456  000605                     __end_ofrotateObj@stepAngle:
   457                           	callstack 0
   458  000605  0400               	dw	1024
   459  000607                     __end_of_therm_pressure:
   460                           	callstack 0
   461  000607  0200               	dw	512
   462  000609                     __end_of_touch_pressure:
   463                           	callstack 0
   464  000609                     _feeder3Pos:
   465                           	callstack 0
   466  000609  19                 	db	25
   467  00060A  19                 	db	25
   468  00060B                     __end_of_feeder3Pos:
   469                           	callstack 0
   470  00060B                     _feeder2Pos:
   471                           	callstack 0
   472  00060B  0F                 	db	15
   473  00060C  0F                 	db	15
   474  00060D                     __end_of_feeder2Pos:
   475                           	callstack 0
   476  00060D                     _feeder1Pos:
   477                           	callstack 0
   478  00060D  05                 	db	5
   479  00060E  05                 	db	5
   480  00060F                     __end_of_feeder1Pos:
   481                           	callstack 0
   482  0000                     _TMR0	set	4054
   483  0000                     _TXREG	set	4013
   484  0000                     _SPBRG	set	4015
   485  0000                     _TXSTAbits	set	4012
   486  0000                     _TRISCbits	set	3988
   487  0000                     _RCREG1	set	4014
   488  0000                     _ADRESH	set	4036
   489  0000                     _ADRESL	set	4035
   490  0000                     _PIR1bits	set	3998
   491  0000                     _IPR1bits	set	3999
   492  0000                     _ADCON0bits	set	4034
   493  0000                     _PIE1bits	set	3997
   494  0000                     _RCONbits	set	4048
   495  0000                     _INTCONbits	set	4082
   496  0000                     _RCSTAbits	set	4011
   497  0000                     _RCSTA1bits	set	4011
   498  0000                     _LATD	set	3980
   499  0000                     _PORTDbits	set	3971
   500  0000                     _TMR2	set	4044
   501  0000                     _PORTEbits	set	3972
   502  0000                     _T0CONbits	set	4053
   503  0000                     _T2CONbits	set	4042
   504  0000                     _LATDbits	set	3980
   505  0000                     _LATCbits	set	3979
   506  0000                     _LATBbits	set	3978
   507  0000                     _LATAbits	set	3977
   508  0000                     _TRISDbits	set	3989
   509  0000                     _TRISEbits	set	3990
   510  0000                     _TRISD	set	3989
   511  0000                     _TRISC	set	3988
   512  0000                     _TRISB	set	3987
   513  0000                     _TRISA	set	3986
   514  0000                     _ADCON1bits	set	4033
   515  00060F  00                 	db	0	; dummy byte at the end
   516  0000                     
   517                           ; #config settings
   518                           
   519                           	psect	cinit
   520  001F3C                     __pcinit:
   521                           	callstack 0
   522  001F3C                     start_initialization:
   523                           	callstack 0
   524  001F3C                     __initialization:
   525                           	callstack 0
   526                           
   527                           ; Initialize objects allocated to BANK1 (209 bytes)
   528                           ; load TBLPTR registers with __pidataBANK1
   529  001F3C  0E00               	movlw	low __pidataBANK1
   530  001F3E  6EF6               	movwf	tblptrl,c
   531  001F40  0E1D               	movlw	high __pidataBANK1
   532  001F42  6EF7               	movwf	tblptrh,c
   533  001F44  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   534  001F46  6EF8               	movwf	tblptru,c
   535  001F48  EE01  F000         	lfsr	0,__pdataBANK1
   536  001F4C  EE10 F0D1          	lfsr	1,209
   537  001F50                     copy_data0:
   538  001F50  0009               	tblrd		*+
   539  001F52  CFF5 FFEE          	movff	tablat,postinc0
   540  001F56  50E5               	movf	postdec1,w,c
   541  001F58  50E1               	movf	fsr1l,w,c
   542  001F5A  E1FA               	bnz	copy_data0
   543                           
   544                           ; Initialize objects allocated to BANK0 (88 bytes)
   545                           ; load TBLPTR registers with __pidataBANK0
   546  001F5C  0E7E               	movlw	low __pidataBANK0
   547  001F5E  6EF6               	movwf	tblptrl,c
   548  001F60  0E21               	movlw	high __pidataBANK0
   549  001F62  6EF7               	movwf	tblptrh,c
   550  001F64  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   551  001F66  6EF8               	movwf	tblptru,c
   552  001F68  EE00  F080         	lfsr	0,__pdataBANK0
   553  001F6C  EE10 F058          	lfsr	1,88
   554  001F70                     copy_data1:
   555  001F70  0009               	tblrd		*+
   556  001F72  CFF5 FFEE          	movff	tablat,postinc0
   557  001F76  50E5               	movf	postdec1,w,c
   558  001F78  50E1               	movf	fsr1l,w,c
   559  001F7A  E1FA               	bnz	copy_data1
   560                           
   561                           ; Initialize objects allocated to COMRAM (5 bytes)
   562                           ; load TBLPTR registers with __pidataCOMRAM
   563  001F7C  0E50               	movlw	low __pidataCOMRAM
   564  001F7E  6EF6               	movwf	tblptrl,c
   565  001F80  0E24               	movlw	high __pidataCOMRAM
   566  001F82  6EF7               	movwf	tblptrh,c
   567  001F84  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   568  001F86  6EF8               	movwf	tblptru,c
   569  001F88  EE00  F069         	lfsr	0,__pdataCOMRAM
   570  001F8C  EE10 F005          	lfsr	1,5
   571  001F90                     copy_data2:
   572  001F90  0009               	tblrd		*+
   573  001F92  CFF5 FFEE          	movff	tablat,postinc0
   574  001F96  50E5               	movf	postdec1,w,c
   575  001F98  50E1               	movf	fsr1l,w,c
   576  001F9A  E1FA               	bnz	copy_data2
   577                           
   578                           ; Clear objects allocated to BANK0 (28 bytes)
   579  001F9C  EE00  F0D8         	lfsr	0,__pbssBANK0
   580  001FA0  0E1C               	movlw	28
   581  001FA2                     clear_0:
   582  001FA2  6AEE               	clrf	postinc0,c
   583  001FA4  06E8               	decf	wreg,f,c
   584  001FA6  E1FD               	bnz	clear_0
   585                           
   586                           ; Clear objects allocated to COMRAM (36 bytes)
   587  001FA8  EE00  F045         	lfsr	0,__pbssCOMRAM
   588  001FAC  0E24               	movlw	36
   589  001FAE                     clear_1:
   590  001FAE  6AEE               	clrf	postinc0,c
   591  001FB0  06E8               	decf	wreg,f,c
   592  001FB2  E1FD               	bnz	clear_1
   593  001FB4                     end_of_initialization:
   594                           	callstack 0
   595  001FB4                     __end_of__initialization:
   596                           	callstack 0
   597  001FB4  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   598  001FB6  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   599  001FB8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   600  001FBA  6EF8               	movwf	tblptru,c
   601  001FBC  0100               	movlb	0
   602  001FBE  EF4F  F009         	goto	_main	;jump to C main() function
   603                           
   604                           	psect	bssCOMRAM
   605  000045                     __pbssCOMRAM:
   606                           	callstack 0
   607  000045                     storeData@receivedMex:
   608                           	callstack 0
   609  000045                     	ds	9
   610  00004E                     _posVector:
   611                           	callstack 0
   612  00004E                     	ds	3
   613  000051                     isr@single_cycle:
   614                           	callstack 0
   615  000051                     	ds	2
   616  000053                     _ADC_res:
   617                           	callstack 0
   618  000053                     	ds	2
   619  000055                     _pwmPeriod:
   620                           	callstack 0
   621  000055                     	ds	2
   622  000057                     _newFeeder:
   623                           	callstack 0
   624  000057                     	ds	2
   625  000059                     _rotAngle:
   626                           	callstack 0
   627  000059                     	ds	2
   628  00005B                     _tm0Error:
   629                           	callstack 0
   630  00005B                     	ds	2
   631  00005D                     	ds	1
   632  00005E                     storeData@counter:
   633                           	callstack 0
   634  00005E                     	ds	1
   635  00005F                     __newSequence:
   636                           	callstack 0
   637  00005F                     	ds	1
   638  000060                     __fatalError:
   639                           	callstack 0
   640  000060                     	ds	1
   641  000061                     _dataCounter:
   642                           	callstack 0
   643  000061                     	ds	1
   644  000062                     isr@completeStep:
   645                           	callstack 0
   646  000062                     	ds	1
   647  000063                     isr@tm0Count:
   648                           	callstack 0
   649  000063                     	ds	1
   650  000064                     _therm_rel:
   651                           	callstack 0
   652  000064                     	ds	1
   653  000065                     _touch_rel:
   654                           	callstack 0
   655  000065                     	ds	1
   656  000066                     _stepToggle:
   657                           	callstack 0
   658  000066                     	ds	1
   659  000067                     _pwmStep:
   660                           	callstack 0
   661  000067                     	ds	1
   662  000068                     _tm0Limit:
   663                           	callstack 0
   664  000068                     	ds	1
   665                           
   666                           	psect	dataCOMRAM
   667  000069                     __pdataCOMRAM:
   668                           	callstack 0
   669  000069                     	ds	2
   670  00006B                     	ds	2
   671  00006D                     storeData@mexLength:
   672                           	callstack 0
   673  00006D                     	ds	1
   674                           
   675                           	psect	bssBANK0
   676  0000D8                     __pbssBANK0:
   677                           	callstack 0
   678  0000D8                     _dataSequence:
   679                           	callstack 0
   680  0000D8                     	ds	20
   681  0000EC                     _newSequenceData:
   682                           	callstack 0
   683  0000EC                     	ds	8
   684                           
   685                           	psect	dataBANK0
   686  000080                     __pdataBANK0:
   687                           	callstack 0
   688  000080                     rotateObj@rotSequence:
   689                           	callstack 0
   690  000080                     	ds	4
   691  000084                     _errString_Bound:
   692                           	callstack 0
   693  000084                     	ds	32
   694  0000A4                     _errString_Feed:
   695                           	callstack 0
   696  0000A4                     	ds	29
   697  0000C1                     _errString_Command:
   698                           	callstack 0
   699  0000C1                     	ds	23
   700                           
   701                           	psect	dataBANK1
   702  000100                     __pdataBANK1:
   703                           	callstack 0
   704  000100                     _errString_PointZ:
   705                           	callstack 0
   706  000100                     	ds	52
   707  000134                     _errString_Point:
   708                           	callstack 0
   709  000134                     	ds	40
   710  00015C                     _errString_ZEND:
   711                           	callstack 0
   712  00015C                     	ds	40
   713  000184                     _errString_Reset:
   714                           	callstack 0
   715  000184                     	ds	39
   716  0001AB                     _errString_Fatal:
   717                           	callstack 0
   718  0001AB                     	ds	38
   719                           
   720                           	psect	cstackBANK1
   721  0001D1                     __pcstackBANK1:
   722                           	callstack 0
   723  0001D1                     main@errCode:
   724                           	callstack 0
   725                           
   726                           ; 1 bytes @ 0x0
   727  0001D1                     	ds	1
   728  0001D2                     main@newData:
   729                           	callstack 0
   730                           
   731                           ; 2 bytes @ 0x1
   732  0001D2                     	ds	2
   733                           
   734                           	psect	cstackBANK0
   735  0000F4                     __pcstackBANK0:
   736                           	callstack 0
   737  0000F4                     ??_rotateObj:
   738                           
   739                           ; 1 bytes @ 0x0
   740  0000F4                     	ds	3
   741  0000F7                     rotateObj@rotAngle:
   742                           	callstack 0
   743                           
   744                           ; 1 bytes @ 0x3
   745  0000F7                     	ds	1
   746  0000F8                     rotateObj@totStep:
   747                           	callstack 0
   748                           
   749                           ; 2 bytes @ 0x4
   750  0000F8                     	ds	2
   751  0000FA                     rotateObj@i:
   752                           	callstack 0
   753                           
   754                           ; 1 bytes @ 0x6
   755  0000FA                     	ds	1
   756  0000FB                     executeData@errCode:
   757                           	callstack 0
   758                           
   759                           ; 1 bytes @ 0x7
   760  0000FB                     	ds	1
   761  0000FC                     executeData@data:
   762                           	callstack 0
   763                           
   764                           ; 2 bytes @ 0x8
   765  0000FC                     	ds	2
   766  0000FE                     ??_main:
   767                           
   768                           ; 1 bytes @ 0xA
   769  0000FE                     	ds	2
   770                           
   771                           	psect	cstackCOMRAM
   772  000001                     __pcstackCOMRAM:
   773                           	callstack 0
   774  000001                     ?_retPeriod:
   775                           	callstack 0
   776  000001                     i2uartTx@ptr:
   777                           	callstack 0
   778                           
   779                           ; 2 bytes @ 0x0
   780  000001                     	ds	2
   781  000003                     i2uartTx@length:
   782                           	callstack 0
   783                           
   784                           ; 1 bytes @ 0x2
   785  000003                     	ds	1
   786  000004                     i2uartTx@i:
   787                           	callstack 0
   788                           
   789                           ; 1 bytes @ 0x3
   790  000004                     	ds	1
   791  000005                     ??i2_printError:
   792                           
   793                           ; 1 bytes @ 0x4
   794  000005                     	ds	2
   795  000007                     i2printError@errCode:
   796                           	callstack 0
   797                           
   798                           ; 1 bytes @ 0x6
   799  000007                     	ds	1
   800  000008                     ??i2_storeData:
   801                           
   802                           ; 1 bytes @ 0x7
   803  000008                     	ds	2
   804  00000A                     i2storeData@data:
   805                           	callstack 0
   806                           
   807                           ; 1 bytes @ 0x9
   808  00000A                     	ds	1
   809  00000B                     ??_isr:
   810                           
   811                           ; 1 bytes @ 0xA
   812  00000B                     	ds	6
   813  000011                     isr@temp:
   814                           	callstack 0
   815                           
   816                           ; 1 bytes @ 0x10
   817  000011                     	ds	1
   818  000012                     ??_shiftData:
   819  000012                     ?_stepMade:
   820                           	callstack 0
   821  000012                     ?_stepCounter:
   822                           	callstack 0
   823  000012                     ?_returnTouch:
   824                           	callstack 0
   825  000012                     ?_returnTherm:
   826                           	callstack 0
   827  000012                     ?_getNewSequence:
   828                           	callstack 0
   829  000012                     ?_getData:
   830                           	callstack 0
   831  000012                     ?___xxtofl:
   832                           	callstack 0
   833  000012                     setStep@motor:
   834                           	callstack 0
   835  000012                     enableMotor@motor:
   836                           	callstack 0
   837  000012                     setDirection@motor:
   838                           	callstack 0
   839  000012                     setDecay@motor:
   840                           	callstack 0
   841  000012                     tim2Init@_pwmPeriod:
   842                           	callstack 0
   843  000012                     uartTx@ptr:
   844                           	callstack 0
   845  000012                     ___xxtofl@val:
   846                           	callstack 0
   847                           
   848                           ; 4 bytes @ 0x11
   849  000012                     	ds	1
   850  000013                     ??_setStep:
   851  000013                     ??_enableMotor:
   852  000013                     ??_setDirection:
   853  000013                     ??_setDecay:
   854                           
   855                           ; 1 bytes @ 0x12
   856  000013                     	ds	1
   857  000014                     stepMade@temp:
   858                           	callstack 0
   859  000014                     shiftData@i:
   860                           	callstack 0
   861  000014                     uartTx@length:
   862                           	callstack 0
   863                           
   864                           ; 1 bytes @ 0x13
   865  000014                     	ds	1
   866  000015                     setStep@step:
   867                           	callstack 0
   868  000015                     enableMotor@enable:
   869                           	callstack 0
   870  000015                     setDirection@direction:
   871                           	callstack 0
   872  000015                     setDecay@decay:
   873                           	callstack 0
   874  000015                     uartTx@i:
   875                           	callstack 0
   876                           
   877                           ; 1 bytes @ 0x14
   878  000015                     	ds	1
   879  000016                     ??_printError:
   880  000016                     ??___xxtofl:
   881  000016                     resetPosition@keepMovingX:
   882                           	callstack 0
   883  000016                     moveToPoint@x1:
   884                           	callstack 0
   885                           
   886                           ; 2 bytes @ 0x15
   887  000016                     	ds	1
   888  000017                     resetPosition@keepMovingY:
   889                           	callstack 0
   890                           
   891                           ; 1 bytes @ 0x16
   892  000017                     	ds	1
   893  000018                     resetPosition@keepMovingZ:
   894                           	callstack 0
   895  000018                     printError@errCode:
   896                           	callstack 0
   897  000018                     moveToPoint@y1:
   898                           	callstack 0
   899                           
   900                           ; 2 bytes @ 0x17
   901  000018                     	ds	1
   902  000019                     ??_storeData:
   903                           
   904                           ; 1 bytes @ 0x18
   905  000019                     	ds	1
   906  00001A                     ___xxtofl@sign:
   907                           	callstack 0
   908  00001A                     moveToPoint@x2:
   909                           	callstack 0
   910                           
   911                           ; 2 bytes @ 0x19
   912  00001A                     	ds	1
   913  00001B                     storeData@data:
   914                           	callstack 0
   915  00001B                     ___xxtofl@exp:
   916                           	callstack 0
   917                           
   918                           ; 1 bytes @ 0x1A
   919  00001B                     	ds	1
   920  00001C                     moveToPoint@y2:
   921                           	callstack 0
   922  00001C                     ___xxtofl@arg:
   923                           	callstack 0
   924                           
   925                           ; 4 bytes @ 0x1B
   926  00001C                     	ds	2
   927  00001E                     ??_moveToPoint:
   928                           
   929                           ; 1 bytes @ 0x1D
   930  00001E                     	ds	2
   931  000020                     ?___fldiv:
   932                           	callstack 0
   933  000020                     moveToPoint@keepMovingX:
   934                           	callstack 0
   935  000020                     ___fldiv@b:
   936                           	callstack 0
   937                           
   938                           ; 4 bytes @ 0x1F
   939  000020                     	ds	1
   940  000021                     moveToPoint@keepMovingY:
   941                           	callstack 0
   942                           
   943                           ; 1 bytes @ 0x20
   944  000021                     	ds	3
   945  000024                     ___fldiv@a:
   946                           	callstack 0
   947                           
   948                           ; 4 bytes @ 0x23
   949  000024                     	ds	4
   950  000028                     ??___fldiv:
   951                           
   952                           ; 1 bytes @ 0x27
   953  000028                     	ds	4
   954  00002C                     ___fldiv@rem:
   955                           	callstack 0
   956                           
   957                           ; 4 bytes @ 0x2B
   958  00002C                     	ds	4
   959  000030                     ___fldiv@sign:
   960                           	callstack 0
   961                           
   962                           ; 1 bytes @ 0x2F
   963  000030                     	ds	1
   964  000031                     ___fldiv@new_exp:
   965                           	callstack 0
   966                           
   967                           ; 2 bytes @ 0x30
   968  000031                     	ds	2
   969  000033                     ___fldiv@grs:
   970                           	callstack 0
   971                           
   972                           ; 4 bytes @ 0x32
   973  000033                     	ds	4
   974  000037                     ___fldiv@bexp:
   975                           	callstack 0
   976                           
   977                           ; 1 bytes @ 0x36
   978  000037                     	ds	1
   979  000038                     ___fldiv@aexp:
   980                           	callstack 0
   981                           
   982                           ; 1 bytes @ 0x37
   983  000038                     	ds	1
   984  000039                     ?___fltol:
   985                           	callstack 0
   986  000039                     ___fltol@f1:
   987                           	callstack 0
   988                           
   989                           ; 4 bytes @ 0x38
   990  000039                     	ds	4
   991  00003D                     ??___fltol:
   992                           
   993                           ; 1 bytes @ 0x3C
   994  00003D                     	ds	4
   995  000041                     ___fltol@sign1:
   996                           	callstack 0
   997                           
   998                           ; 1 bytes @ 0x40
   999  000041                     	ds	1
  1000  000042                     ___fltol@exp1:
  1001                           	callstack 0
  1002                           
  1003                           ; 1 bytes @ 0x41
  1004  000042                     	ds	1
  1005  000043                     ??_executeData:
  1006                           
  1007                           ; 1 bytes @ 0x42
  1008  000043                     	ds	2
  1009                           
  1010 ;;
  1011 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1012 ;;
  1013 ;; *************** function _main *****************
  1014 ;; Defined at:
  1015 ;;		line 26 in file "main.c"
  1016 ;; Parameters:    Size  Location     Type
  1017 ;;		None
  1018 ;; Auto vars:     Size  Location     Type
  1019 ;;  newData         2    1[BANK1 ] PTR struct .
  1020 ;;		 -> newSequenceData(8), 
  1021 ;;  errCode         1    0[BANK1 ] unsigned char 
  1022 ;; Return value:  Size  Location     Type
  1023 ;;                  1    wreg      void 
  1024 ;; Registers used:
  1025 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1026 ;; Tracked objects:
  1027 ;;		On entry : 0/0
  1028 ;;		On exit  : 0/0
  1029 ;;		Unchanged: 0/0
  1030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1031 ;;      Params:         0       0       0       0       0       0       0
  1032 ;;      Locals:         0       0       3       0       0       0       0
  1033 ;;      Temps:          0       2       0       0       0       0       0
  1034 ;;      Totals:         0       2       3       0       0       0       0
  1035 ;;Total ram usage:        5 bytes
  1036 ;; Hardware stack levels required when called:    7
  1037 ;; This function calls:
  1038 ;;		_clearTM0
  1039 ;;		_enableMotor
  1040 ;;		_executeData
  1041 ;;		_fatalError
  1042 ;;		_getNewSequence
  1043 ;;		_initADC
  1044 ;;		_initPinMotors
  1045 ;;		_interruptInit
  1046 ;;		_newSequence
  1047 ;;		_printError
  1048 ;;		_readSeq
  1049 ;;		_reduceSeq
  1050 ;;		_resetNewSequence
  1051 ;;		_resetPosition
  1052 ;;		_shiftData
  1053 ;;		_storeData
  1054 ;;		_tim0Init
  1055 ;;		_tim2Init
  1056 ;;		_usartInit
  1057 ;; This function is called by:
  1058 ;;		Startup code after reset
  1059 ;; This function uses a non-reentrant model
  1060 ;;
  1061                           
  1062                           	psect	text0
  1063  00129E                     __ptext0:
  1064                           	callstack 0
  1065  00129E                     _main:
  1066                           	callstack 24
  1067  00129E  FFFF               	dw	65535	; assembler added errata NOP
  1068                           
  1069                           ;main.c: 30:     interruptInit();
  1070  0012A0  EC39  F011         	call	_interruptInit	;wreg free
  1071  0012A4                     
  1072                           ;main.c: 31:     initPinMotors();
  1073  0012A4  EC56  F011         	call	_initPinMotors	;wreg free
  1074  0012A8                     
  1075                           ;main.c: 32:     initADC();
  1076  0012A8  EC69  F011         	call	_initADC	;wreg free
  1077  0012AC                     
  1078                           ;main.c: 33:     tim0Init();
  1079  0012AC  EC9F  F011         	call	_tim0Init	;wreg free
  1080  0012B0                     
  1081                           ;main.c: 34:     tim2Init(10);
  1082  0012B0  0E00               	movlw	0
  1083  0012B2  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1084  0012B4  0E0A               	movlw	10
  1085  0012B6  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1086  0012B8  EC8B  F011         	call	_tim2Init	;wreg free
  1087                           
  1088                           ;main.c: 37:     resetPosition();
  1089  0012BC  EC61  F007         	call	_resetPosition	;wreg free
  1090  0012C0                     
  1091                           ;main.c: 40:     usartInit();
  1092  0012C0  EC7C  F011         	call	_usartInit	;wreg free
  1093  0012C4                     
  1094                           ;main.c: 41:     RCSTA1bits.CREN = 1;
  1095  0012C4  88AB               	bsf	171,4,c	;volatile
  1096  0012C6                     l4105:
  1097  0012C6  FFFF               	dw	65535	; assembler added errata NOP
  1098                           
  1099                           ;main.c: 44:         if(fatalError()){
  1100  0012C8  EC0C  F012         	call	_fatalError	;wreg free
  1101  0012CC  0900               	iorlw	0
  1102  0012CE  B4D8               	btfsc	status,2,c
  1103  0012D0  EF6C  F009         	goto	u3241
  1104  0012D4  EF6F  F009         	goto	u3240
  1105  0012D8                     u3241:
  1106  0012D8  FFFF               	dw	65535	; assembler added errata NOP
  1107  0012DA  EF85  F009         	goto	l4111
  1108  0012DE                     u3240:
  1109  0012DE  FFFF               	dw	65535	; assembler added errata NOP
  1110  0012E0                     
  1111                           ;main.c: 46:             enableMotor(1, 0);
  1112  0012E0  0E00               	movlw	0
  1113  0012E2  6E12               	movwf	enableMotor@motor^0,c
  1114  0012E4  0E01               	movlw	1
  1115  0012E6  EC1B  F010         	call	_enableMotor
  1116                           
  1117                           ;main.c: 47:             enableMotor(1, 1);
  1118  0012EA  0E01               	movlw	1
  1119  0012EC  6E12               	movwf	enableMotor@motor^0,c
  1120  0012EE  0E01               	movlw	1
  1121  0012F0  EC1B  F010         	call	_enableMotor
  1122                           
  1123                           ;main.c: 48:             enableMotor(1, 2);
  1124  0012F4  0E02               	movlw	2
  1125  0012F6  6E12               	movwf	enableMotor@motor^0,c
  1126  0012F8  0E01               	movlw	1
  1127  0012FA  EC1B  F010         	call	_enableMotor
  1128  0012FE                     
  1129                           ;main.c: 50:             printError(7);
  1130  0012FE  0E07               	movlw	7
  1131  001300  EC07  F00C         	call	_printError
  1132  001304                     l299:
  1133  001304  FFFF               	dw	65535	; assembler added errata NOP
  1134  001306  EF82  F009         	goto	l299
  1135  00130A                     l4111:
  1136  00130A  FFFF               	dw	65535	; assembler added errata NOP
  1137  00130C  EC08  F012         	call	_newSequence	;wreg free
  1138  001310  0900               	iorlw	0
  1139  001312  B4D8               	btfsc	status,2,c
  1140  001314  EF8E  F009         	goto	u3251
  1141  001318  EF91  F009         	goto	u3250
  1142  00131C                     u3251:
  1143  00131C  FFFF               	dw	65535	; assembler added errata NOP
  1144  00131E  EFEF  F009         	goto	l4145
  1145  001322                     u3250:
  1146  001322  FFFF               	dw	65535	; assembler added errata NOP
  1147  001324                     
  1148                           ;main.c: 53:             t_newSequence* newData = getNewSequence();
  1149  001324  ECA8  F011         	call	_getNewSequence	;wreg free
  1150  001328  C012  F1D2         	movff	?_getNewSequence,main@newData
  1151  00132C  C013  F1D3         	movff	?_getNewSequence+1,main@newData+1
  1152  001330                     
  1153                           ;main.c: 55:             newFeeder[0] = newData ->init_posX;
  1154  001330  0101               	movlb	1	; () banked
  1155  001332  EE20 F002          	lfsr	2,2
  1156  001336  51D2               	movf	main@newData& (0+255),w,b
  1157  001338  26D9               	addwf	fsr2l,f,c
  1158  00133A  51D3               	movf	(main@newData+1)& (0+255),w,b
  1159  00133C  22DA               	addwfc	fsr2h,f,c
  1160  00133E  50DF               	movf	indf2,w,c
  1161  001340  6E57               	movwf	_newFeeder^0,c
  1162  001342                     
  1163                           ; BSR set to: 1
  1164                           ;main.c: 56:             newFeeder[1] = newData ->init_posY;
  1165  001342  EE20 F003          	lfsr	2,3
  1166  001346  51D2               	movf	main@newData& (0+255),w,b
  1167  001348  26D9               	addwf	fsr2l,f,c
  1168  00134A  51D3               	movf	(main@newData+1)& (0+255),w,b
  1169  00134C  22DA               	addwfc	fsr2h,f,c
  1170  00134E  50DF               	movf	indf2,w,c
  1171  001350  6E58               	movwf	(_newFeeder+1)^0,c
  1172  001352                     
  1173                           ; BSR set to: 1
  1174                           ;main.c: 60:             RCSTAbits.CREN = 0;
  1175  001352  98AB               	bcf	171,4,c	;volatile
  1176  001354                     
  1177                           ; BSR set to: 1
  1178                           ;main.c: 63:             storeData(0);
  1179  001354  0E00               	movlw	0
  1180  001356  EC0A  F00A         	call	_storeData
  1181  00135A                     
  1182                           ;main.c: 64:             storeData(0xFF);
  1183  00135A  0EFF               	movlw	255
  1184  00135C  EC0A  F00A         	call	_storeData
  1185  001360                     
  1186                           ;main.c: 65:             storeData(newData ->end_posX);
  1187  001360  0101               	movlb	1	; () banked
  1188  001362  EE20 F005          	lfsr	2,5
  1189  001366  51D2               	movf	main@newData& (0+255),w,b
  1190  001368  26D9               	addwf	fsr2l,f,c
  1191  00136A  51D3               	movf	(main@newData+1)& (0+255),w,b
  1192  00136C  22DA               	addwfc	fsr2h,f,c
  1193  00136E  50DF               	movf	indf2,w,c
  1194  001370  EC0A  F00A         	call	_storeData
  1195  001374                     
  1196                           ;main.c: 66:             storeData(newData ->end_posY);
  1197  001374  0101               	movlb	1	; () banked
  1198  001376  EE20 F006          	lfsr	2,6
  1199  00137A  51D2               	movf	main@newData& (0+255),w,b
  1200  00137C  26D9               	addwf	fsr2l,f,c
  1201  00137E  51D3               	movf	(main@newData+1)& (0+255),w,b
  1202  001380  22DA               	addwfc	fsr2h,f,c
  1203  001382  50DF               	movf	indf2,w,c
  1204  001384  EC0A  F00A         	call	_storeData
  1205  001388                     
  1206                           ;main.c: 67:             storeData(newData ->end_rot - newData ->init_rot);
  1207  001388  0101               	movlb	1	; () banked
  1208  00138A  EE20 F004          	lfsr	2,4
  1209  00138E  51D2               	movf	main@newData& (0+255),w,b
  1210  001390  26D9               	addwf	fsr2l,f,c
  1211  001392  51D3               	movf	(main@newData+1)& (0+255),w,b
  1212  001394  22DA               	addwfc	fsr2h,f,c
  1213  001396  50DF               	movf	indf2,w,c
  1214  001398  0100               	movlb	0	; () banked
  1215  00139A  6FFE               	movwf	??_main& (0+255),b
  1216  00139C  0101               	movlb	1	; () banked
  1217  00139E  EE20 F007          	lfsr	2,7
  1218  0013A2  51D2               	movf	main@newData& (0+255),w,b
  1219  0013A4  26D9               	addwf	fsr2l,f,c
  1220  0013A6  51D3               	movf	(main@newData+1)& (0+255),w,b
  1221  0013A8  22DA               	addwfc	fsr2h,f,c
  1222  0013AA  50DF               	movf	indf2,w,c
  1223  0013AC  0100               	movlb	0	; () banked
  1224  0013AE  6FFF               	movwf	(??_main+1)& (0+255),b
  1225  0013B0  51FE               	movf	??_main& (0+255),w,b
  1226  0013B2  5DFF               	subwf	(??_main+1)& (0+255),w,b
  1227  0013B4  EC0A  F00A         	call	_storeData
  1228  0013B8                     
  1229                           ;main.c: 70:             RCSTAbits.CREN = 1;
  1230  0013B8  88AB               	bsf	171,4,c	;volatile
  1231  0013BA                     
  1232                           ;main.c: 73:             resetNewSequence();
  1233  0013BA  ECDD  F011         	call	_resetNewSequence	;wreg free
  1234  0013BE                     
  1235                           ;main.c: 75:             errCode = executeData();
  1236  0013BE  EC21  F005         	call	_executeData	;wreg free
  1237  0013C2  0101               	movlb	1	; () banked
  1238  0013C4  6FD1               	movwf	main@errCode& (0+255),b
  1239  0013C6                     
  1240                           ; BSR set to: 1
  1241                           ;main.c: 76:             printError(errCode);
  1242  0013C6  51D1               	movf	main@errCode& (0+255),w,b
  1243  0013C8  EC07  F00C         	call	_printError
  1244  0013CC                     l4139:
  1245  0013CC  FFFF               	dw	65535	; assembler added errata NOP
  1246                           
  1247                           ;main.c: 77:             clearTM0();
  1248  0013CE  ECB6  F011         	call	_clearTM0	;wreg free
  1249  0013D2                     
  1250                           ;main.c: 81:             reduceSeq();
  1251  0013D2  EC00  F012         	call	_reduceSeq	;wreg free
  1252  0013D6                     
  1253                           ;main.c: 82:             shiftData();
  1254  0013D6  EC8F  F010         	call	_shiftData	;wreg free
  1255                           
  1256                           ;main.c: 84:         }else if(readSeq()){
  1257  0013DA  EF63  F009         	goto	l4105
  1258  0013DE                     l4145:
  1259  0013DE  FFFF               	dw	65535	; assembler added errata NOP
  1260  0013E0  EC04  F012         	call	_readSeq	;wreg free
  1261  0013E4  0900               	iorlw	0
  1262  0013E6  B4D8               	btfsc	status,2,c
  1263  0013E8  EFF8  F009         	goto	u3261
  1264  0013EC  EFFB  F009         	goto	u3260
  1265  0013F0                     u3261:
  1266  0013F0  FFFF               	dw	65535	; assembler added errata NOP
  1267  0013F2  EF05  F00A         	goto	l302
  1268  0013F6                     u3260:
  1269  0013F6  FFFF               	dw	65535	; assembler added errata NOP
  1270  0013F8                     
  1271                           ;main.c: 87:             errCode = executeData();
  1272  0013F8  EC21  F005         	call	_executeData	;wreg free
  1273  0013FC  0101               	movlb	1	; () banked
  1274  0013FE  6FD1               	movwf	main@errCode& (0+255),b
  1275  001400                     
  1276                           ; BSR set to: 1
  1277                           ;main.c: 88:             printError(errCode);
  1278  001400  51D1               	movf	main@errCode& (0+255),w,b
  1279  001402  EC07  F00C         	call	_printError
  1280  001406  EFE6  F009         	goto	l4139
  1281  00140A                     l302:
  1282  00140A  FFFF               	dw	65535	; assembler added errata NOP
  1283  00140C  EF63  F009         	goto	l4105
  1284  001410  EFB5  F000         	goto	start
  1285  001414                     __end_of_main:
  1286                           	callstack 0
  1287                           
  1288 ;; *************** function _usartInit *****************
  1289 ;; Defined at:
  1290 ;;		line 34 in file "usart.c"
  1291 ;; Parameters:    Size  Location     Type
  1292 ;;		None
  1293 ;; Auto vars:     Size  Location     Type
  1294 ;;		None
  1295 ;; Return value:  Size  Location     Type
  1296 ;;                  1    wreg      void 
  1297 ;; Registers used:
  1298 ;;		wreg, status,2
  1299 ;; Tracked objects:
  1300 ;;		On entry : 0/0
  1301 ;;		On exit  : 0/0
  1302 ;;		Unchanged: 0/0
  1303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1304 ;;      Params:         0       0       0       0       0       0       0
  1305 ;;      Locals:         0       0       0       0       0       0       0
  1306 ;;      Temps:          0       0       0       0       0       0       0
  1307 ;;      Totals:         0       0       0       0       0       0       0
  1308 ;;Total ram usage:        0 bytes
  1309 ;; Hardware stack levels used:    1
  1310 ;; Hardware stack levels required when called:    4
  1311 ;; This function calls:
  1312 ;;		Nothing
  1313 ;; This function is called by:
  1314 ;;		_main
  1315 ;; This function uses a non-reentrant model
  1316 ;;
  1317                           
  1318                           	psect	text1
  1319  0022F8                     __ptext1:
  1320                           	callstack 0
  1321  0022F8                     _usartInit:
  1322                           	callstack 0
  1323  0022F8  FFFF               	dw	65535	; assembler added errata NOP
  1324  0022FA                     
  1325                           ;usart.c: 36:     TRISCbits.TRISC6 = 0;
  1326  0022FA  9C94               	bcf	148,6,c	;volatile
  1327                           
  1328                           ;usart.c: 37:     TRISCbits.TRISC7 = 1;
  1329  0022FC  8E94               	bsf	148,7,c	;volatile
  1330                           
  1331                           ;usart.c: 39:     TXSTAbits.TX9 = 0;
  1332  0022FE  9CAC               	bcf	172,6,c	;volatile
  1333                           
  1334                           ;usart.c: 40:     TXSTAbits.TXEN = 1;
  1335  002300  8AAC               	bsf	172,5,c	;volatile
  1336                           
  1337                           ;usart.c: 41:     TXSTAbits.SYNC = 0;
  1338  002302  98AC               	bcf	172,4,c	;volatile
  1339                           
  1340                           ;usart.c: 42:     TXSTAbits.BRGH = 0;
  1341  002304  94AC               	bcf	172,2,c	;volatile
  1342                           
  1343                           ;usart.c: 44:     RCSTAbits.SPEN = 1;
  1344  002306  8EAB               	bsf	171,7,c	;volatile
  1345                           
  1346                           ;usart.c: 45:     RCSTAbits.RX9 = 0;
  1347  002308  9CAB               	bcf	171,6,c	;volatile
  1348                           
  1349                           ;usart.c: 46:     RCSTAbits.CREN = 0;
  1350  00230A  98AB               	bcf	171,4,c	;volatile
  1351                           
  1352                           ;usart.c: 47:     RCSTAbits.ADDEN = 0;
  1353  00230C  96AB               	bcf	171,3,c	;volatile
  1354  00230E                     
  1355                           ;usart.c: 50:     SPBRG = 25;
  1356  00230E  0E19               	movlw	25
  1357  002310  6EAF               	movwf	175,c	;volatile
  1358  002312  0012               	return		;funcret
  1359  002314  FFFF               	dw	65535	; errata NOP
  1360  002316                     __end_of_usartInit:
  1361                           	callstack 0
  1362                           
  1363 ;; *************** function _tim2Init *****************
  1364 ;; Defined at:
  1365 ;;		line 34 in file "pwm.c"
  1366 ;; Parameters:    Size  Location     Type
  1367 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1368 ;; Auto vars:     Size  Location     Type
  1369 ;;		None
  1370 ;; Return value:  Size  Location     Type
  1371 ;;                  1    wreg      void 
  1372 ;; Registers used:
  1373 ;;		wreg, status,2
  1374 ;; Tracked objects:
  1375 ;;		On entry : 0/0
  1376 ;;		On exit  : 0/0
  1377 ;;		Unchanged: 0/0
  1378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1379 ;;      Params:         2       0       0       0       0       0       0
  1380 ;;      Locals:         0       0       0       0       0       0       0
  1381 ;;      Temps:          0       0       0       0       0       0       0
  1382 ;;      Totals:         2       0       0       0       0       0       0
  1383 ;;Total ram usage:        2 bytes
  1384 ;; Hardware stack levels used:    1
  1385 ;; Hardware stack levels required when called:    4
  1386 ;; This function calls:
  1387 ;;		Nothing
  1388 ;; This function is called by:
  1389 ;;		_main
  1390 ;; This function uses a non-reentrant model
  1391 ;;
  1392                           
  1393                           	psect	text2
  1394  002316                     __ptext2:
  1395                           	callstack 0
  1396  002316                     _tim2Init:
  1397                           	callstack 0
  1398  002316  FFFF               	dw	65535	; assembler added errata NOP
  1399  002318                     
  1400                           ;pwm.c: 35:     T2CONbits.TMR2ON = 0;
  1401  002318  94CA               	bcf	202,2,c	;volatile
  1402  00231A                     
  1403                           ;pwm.c: 36:     T2CONbits.T2CKPS = 0x03;
  1404  00231A  0E03               	movlw	3
  1405  00231C  12CA               	iorwf	202,f,c	;volatile
  1406  00231E                     
  1407                           ;pwm.c: 39:     pwmPeriod = _pwmPeriod;
  1408  00231E  C012  F055         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1409  002322  C013  F056         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1410  002326  0012               	return		;funcret
  1411  002328  FFFF               	dw	65535	; errata NOP
  1412  00232A                     __end_of_tim2Init:
  1413                           	callstack 0
  1414                           
  1415 ;; *************** function _tim0Init *****************
  1416 ;; Defined at:
  1417 ;;		line 21 in file "pwm.c"
  1418 ;; Parameters:    Size  Location     Type
  1419 ;;		None
  1420 ;; Auto vars:     Size  Location     Type
  1421 ;;		None
  1422 ;; Return value:  Size  Location     Type
  1423 ;;                  1    wreg      void 
  1424 ;; Registers used:
  1425 ;;		wreg, status,2
  1426 ;; Tracked objects:
  1427 ;;		On entry : 0/0
  1428 ;;		On exit  : 0/0
  1429 ;;		Unchanged: 0/0
  1430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1431 ;;      Params:         0       0       0       0       0       0       0
  1432 ;;      Locals:         0       0       0       0       0       0       0
  1433 ;;      Temps:          0       0       0       0       0       0       0
  1434 ;;      Totals:         0       0       0       0       0       0       0
  1435 ;;Total ram usage:        0 bytes
  1436 ;; Hardware stack levels used:    1
  1437 ;; Hardware stack levels required when called:    4
  1438 ;; This function calls:
  1439 ;;		Nothing
  1440 ;; This function is called by:
  1441 ;;		_main
  1442 ;; This function uses a non-reentrant model
  1443 ;;
  1444                           
  1445                           	psect	text3
  1446  00233E                     __ptext3:
  1447                           	callstack 0
  1448  00233E                     _tim0Init:
  1449                           	callstack 0
  1450  00233E  FFFF               	dw	65535	; assembler added errata NOP
  1451  002340                     
  1452                           ;pwm.c: 22:     T0CONbits.TMR0ON = 0;
  1453  002340  9ED5               	bcf	213,7,c	;volatile
  1454                           
  1455                           ;pwm.c: 23:     T0CONbits.T08BIT = 0;
  1456  002342  9CD5               	bcf	213,6,c	;volatile
  1457                           
  1458                           ;pwm.c: 24:     T0CONbits.T0CS = 0;
  1459  002344  9AD5               	bcf	213,5,c	;volatile
  1460                           
  1461                           ;pwm.c: 25:     T0CONbits.PSA = 1;
  1462  002346  86D5               	bsf	213,3,c	;volatile
  1463  002348                     
  1464                           ;pwm.c: 26:     T0CONbits.T0PS = 0x07;
  1465  002348  0E07               	movlw	7
  1466  00234A  12D5               	iorwf	213,f,c	;volatile
  1467  00234C  0012               	return		;funcret
  1468  00234E  FFFF               	dw	65535	; errata NOP
  1469  002350                     __end_of_tim0Init:
  1470                           	callstack 0
  1471                           
  1472 ;; *************** function _storeData *****************
  1473 ;; Defined at:
  1474 ;;		line 131 in file "usart.c"
  1475 ;; Parameters:    Size  Location     Type
  1476 ;;  data            1    wreg     unsigned char 
  1477 ;; Auto vars:     Size  Location     Type
  1478 ;;  data            1   26[COMRAM] unsigned char 
  1479 ;; Return value:  Size  Location     Type
  1480 ;;                  1    wreg      void 
  1481 ;; Registers used:
  1482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1483 ;; Tracked objects:
  1484 ;;		On entry : 0/0
  1485 ;;		On exit  : 0/0
  1486 ;;		Unchanged: 0/0
  1487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1488 ;;      Params:         0       0       0       0       0       0       0
  1489 ;;      Locals:         1       0       0       0       0       0       0
  1490 ;;      Temps:          2       0       0       0       0       0       0
  1491 ;;      Totals:         3       0       0       0       0       0       0
  1492 ;;Total ram usage:        3 bytes
  1493 ;; Hardware stack levels used:    1
  1494 ;; Hardware stack levels required when called:    6
  1495 ;; This function calls:
  1496 ;;		_printError
  1497 ;; This function is called by:
  1498 ;;		_main
  1499 ;; This function uses a non-reentrant model
  1500 ;;
  1501                           
  1502                           	psect	text4
  1503  001414                     __ptext4:
  1504                           	callstack 0
  1505  001414                     _storeData:
  1506                           	callstack 0
  1507  001414  FFFF               	dw	65535	; assembler added errata NOP
  1508                           
  1509                           ;incstack = 0
  1510                           ;storeData@data stored from wreg
  1511  001416  6E1B               	movwf	storeData@data^0,c
  1512  001418                     
  1513                           ;usart.c: 133:     static unsigned char counter = 0;;usart.c: 134:     static unsigned c
      +                          har mexLength = 5;;usart.c: 135:     static unsigned char command;;usart.c: 136:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 140:     receivedMex[counter] = data;
  1514  001418  0E45               	movlw	low storeData@receivedMex
  1515  00141A  245E               	addwf	storeData@counter^0,w,c
  1516  00141C  6ED9               	movwf	fsr2l,c
  1517  00141E  6ADA               	clrf	fsr2h,c
  1518  001420  0E00               	movlw	high storeData@receivedMex
  1519  001422  22DA               	addwfc	fsr2h,f,c
  1520  001424  C01B  FFDF         	movff	storeData@data,indf2
  1521  001428                     
  1522                           ;usart.c: 142:     counter++;
  1523  001428  2A5E               	incf	storeData@counter^0,f,c
  1524                           
  1525                           ;usart.c: 145:     switch(receivedMex[0]){
  1526  00142A  EF26  F00A         	goto	l3977
  1527  00142E                     l3969:
  1528  00142E  FFFF               	dw	65535	; assembler added errata NOP
  1529                           
  1530                           ;usart.c: 147:             mexLength = 5;
  1531  001430  0E05               	movlw	5
  1532  001432  6E6D               	movwf	storeData@mexLength^0,c
  1533                           
  1534                           ;usart.c: 148:             break;
  1535  001434  EF41  F00A         	goto	l3979
  1536  001438                     l3971:
  1537  001438  FFFF               	dw	65535	; assembler added errata NOP
  1538                           
  1539                           ;usart.c: 150:             mexLength = 9;
  1540  00143A  0E09               	movlw	9
  1541  00143C  6E6D               	movwf	storeData@mexLength^0,c
  1542                           
  1543                           ;usart.c: 151:             break;
  1544  00143E  EF41  F00A         	goto	l3979
  1545  001442                     l3973:
  1546  001442  FFFF               	dw	65535	; assembler added errata NOP
  1547                           
  1548                           ;usart.c: 153:             mexLength = 1;
  1549  001444  0E01               	movlw	1
  1550  001446  6E6D               	movwf	storeData@mexLength^0,c
  1551                           
  1552                           ;usart.c: 154:             break;
  1553  001448  EF41  F00A         	goto	l3979
  1554  00144C                     l3977:
  1555  00144C  FFFF               	dw	65535	; assembler added errata NOP
  1556  00144E  5045               	movf	storeData@receivedMex^0,w,c
  1557  001450  6E19               	movwf	??_storeData^0,c
  1558  001452  6A1A               	clrf	(??_storeData+1)^0,c
  1559                           
  1560                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1561                           ; Switch size 1, requested type "simple"
  1562                           ; Number of cases is 1, Range of values is 0 to 0
  1563                           ; switch strategies available:
  1564                           ; Name         Instructions Cycles
  1565                           ; simple_byte            4     3 (average)
  1566                           ;	Chosen strategy is simple_byte
  1567  001454  501A               	movf	(??_storeData+1)^0,w,c
  1568  001456  0A00               	xorlw	0	; case 0
  1569  001458  B4D8               	btfsc	status,2,c
  1570  00145A  EF31  F00A         	goto	l4377
  1571  00145E  EF41  F00A         	goto	l3979
  1572  001462                     l4377:
  1573  001462  FFFF               	dw	65535	; assembler added errata NOP
  1574                           
  1575                           ; Switch size 1, requested type "simple"
  1576                           ; Number of cases is 3, Range of values is 0 to 2
  1577                           ; switch strategies available:
  1578                           ; Name         Instructions Cycles
  1579                           ; simple_byte           10     6 (average)
  1580                           ;	Chosen strategy is simple_byte
  1581  001464  5019               	movf	??_storeData^0,w,c
  1582  001466  0A00               	xorlw	0	; case 0
  1583  001468  B4D8               	btfsc	status,2,c
  1584  00146A  EF17  F00A         	goto	l3969
  1585  00146E  0A01               	xorlw	1	; case 1
  1586  001470  B4D8               	btfsc	status,2,c
  1587  001472  EF1C  F00A         	goto	l3971
  1588  001476  0A03               	xorlw	3	; case 2
  1589  001478  B4D8               	btfsc	status,2,c
  1590  00147A  EF21  F00A         	goto	l3973
  1591  00147E  EF41  F00A         	goto	l3979
  1592  001482                     l3979:
  1593  001482  FFFF               	dw	65535	; assembler added errata NOP
  1594                           
  1595                           ;usart.c: 161:     if(counter >= mexLength){
  1596  001484  506D               	movf	storeData@mexLength^0,w,c
  1597  001486  5C5E               	subwf	storeData@counter^0,w,c
  1598  001488  A0D8               	btfss	status,0,c
  1599  00148A  EF49  F00A         	goto	u3201
  1600  00148E  EF4C  F00A         	goto	u3200
  1601  001492                     u3201:
  1602  001492  FFFF               	dw	65535	; assembler added errata NOP
  1603  001494  EFB8  F00A         	goto	l552
  1604  001498                     u3200:
  1605  001498  FFFF               	dw	65535	; assembler added errata NOP
  1606  00149A                     
  1607                           ;usart.c: 162:         counter = 0;
  1608  00149A  0E00               	movlw	0
  1609  00149C  6E5E               	movwf	storeData@counter^0,c
  1610                           
  1611                           ;usart.c: 166:         switch(receivedMex[0]){
  1612  00149E  EF9D  F00A         	goto	l3995
  1613  0014A2                     l3983:
  1614  0014A2  FFFF               	dw	65535	; assembler added errata NOP
  1615                           
  1616                           ;usart.c: 168:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  1617  0014A4  5061               	movf	_dataCounter^0,w,c
  1618  0014A6  0D04               	mullw	4
  1619  0014A8  0ED8               	movlw	low _dataSequence
  1620  0014AA  24F3               	addwf	243,w,c
  1621  0014AC  6ED9               	movwf	fsr2l,c
  1622  0014AE  0E00               	movlw	high _dataSequence
  1623  0014B0  20F4               	addwfc	prodh,w,c
  1624  0014B2  6EDA               	movwf	fsr2h,c
  1625  0014B4  C046  FFDF         	movff	storeData@receivedMex+1,indf2
  1626                           
  1627                           ;usart.c: 169:                 dataSequence[dataCounter].posX = receivedMex[2];
  1628  0014B8  5061               	movf	_dataCounter^0,w,c
  1629  0014BA  0D04               	mullw	4
  1630  0014BC  0ED9               	movlw	low (_dataSequence+1)
  1631  0014BE  24F3               	addwf	243,w,c
  1632  0014C0  6ED9               	movwf	fsr2l,c
  1633  0014C2  0E00               	movlw	high (_dataSequence+1)
  1634  0014C4  20F4               	addwfc	prodh,w,c
  1635  0014C6  6EDA               	movwf	fsr2h,c
  1636  0014C8  C047  FFDF         	movff	storeData@receivedMex+2,indf2
  1637                           
  1638                           ;usart.c: 170:                 dataSequence[dataCounter].posY = receivedMex[3];
  1639  0014CC  5061               	movf	_dataCounter^0,w,c
  1640  0014CE  0D04               	mullw	4
  1641  0014D0  0EDA               	movlw	low (_dataSequence+2)
  1642  0014D2  24F3               	addwf	243,w,c
  1643  0014D4  6ED9               	movwf	fsr2l,c
  1644  0014D6  0E00               	movlw	high (_dataSequence+2)
  1645  0014D8  20F4               	addwfc	prodh,w,c
  1646  0014DA  6EDA               	movwf	fsr2h,c
  1647  0014DC  C048  FFDF         	movff	storeData@receivedMex+3,indf2
  1648                           
  1649                           ;usart.c: 171:                 dataSequence[dataCounter].rotation = receivedMex[4];
  1650  0014E0  5061               	movf	_dataCounter^0,w,c
  1651  0014E2  0D04               	mullw	4
  1652  0014E4  0EDB               	movlw	low (_dataSequence+3)
  1653  0014E6  24F3               	addwf	243,w,c
  1654  0014E8  6ED9               	movwf	fsr2l,c
  1655  0014EA  0E00               	movlw	high (_dataSequence+3)
  1656  0014EC  20F4               	addwfc	prodh,w,c
  1657  0014EE  6EDA               	movwf	fsr2h,c
  1658  0014F0  C049  FFDF         	movff	storeData@receivedMex+4,indf2
  1659  0014F4                     
  1660                           ;usart.c: 173:                 dataCounter++;
  1661  0014F4  2A61               	incf	_dataCounter^0,f,c
  1662                           
  1663                           ;usart.c: 174:                 break;
  1664  0014F6  EFB8  F00A         	goto	l552
  1665  0014FA                     l549:
  1666  0014FA  FFFF               	dw	65535	; assembler added errata NOP
  1667                           
  1668                           ;usart.c: 177:                 newSequenceData.L = receivedMex[1];
  1669  0014FC  C046  F0EC         	movff	storeData@receivedMex+1,_newSequenceData
  1670                           
  1671                           ;usart.c: 178:                 newSequenceData.W = receivedMex[2];
  1672  001500  C047  F0ED         	movff	storeData@receivedMex+2,_newSequenceData+1
  1673                           
  1674                           ;usart.c: 179:                 newSequenceData.init_posX = receivedMex[3];
  1675  001504  C048  F0EE         	movff	storeData@receivedMex+3,_newSequenceData+2
  1676                           
  1677                           ;usart.c: 180:                 newSequenceData.init_posY = receivedMex[4];
  1678  001508  C049  F0EF         	movff	storeData@receivedMex+4,_newSequenceData+3
  1679                           
  1680                           ;usart.c: 181:                 newSequenceData.init_rot = receivedMex[5];
  1681  00150C  C04A  F0F0         	movff	storeData@receivedMex+5,_newSequenceData+4
  1682                           
  1683                           ;usart.c: 182:                 newSequenceData.end_posX = receivedMex[6];
  1684  001510  C04B  F0F1         	movff	storeData@receivedMex+6,_newSequenceData+5
  1685                           
  1686                           ;usart.c: 183:                 newSequenceData.end_posY = receivedMex[7];
  1687  001514  C04C  F0F2         	movff	storeData@receivedMex+7,_newSequenceData+6
  1688                           
  1689                           ;usart.c: 184:                 newSequenceData.end_rot = receivedMex[8];
  1690  001518  C04D  F0F3         	movff	storeData@receivedMex+8,_newSequenceData+7
  1691  00151C                     
  1692                           ;usart.c: 186:                 _newSequence = 1;
  1693  00151C  0E01               	movlw	1
  1694  00151E  6E5F               	movwf	__newSequence^0,c
  1695                           
  1696                           ;usart.c: 187:                 break;
  1697  001520  EFB8  F00A         	goto	l552
  1698  001524                     l3989:
  1699  001524  FFFF               	dw	65535	; assembler added errata NOP
  1700                           
  1701                           ;usart.c: 190:                 _fatalError = 1;
  1702  001526  0E01               	movlw	1
  1703  001528  6E60               	movwf	__fatalError^0,c
  1704                           
  1705                           ;usart.c: 191:                 break;
  1706  00152A  EFB8  F00A         	goto	l552
  1707  00152E                     l3991:
  1708  00152E  FFFF               	dw	65535	; assembler added errata NOP
  1709                           
  1710                           ;usart.c: 194:                 printError(8);
  1711  001530  0E08               	movlw	8
  1712  001532  EC07  F00C         	call	_printError
  1713                           
  1714                           ;usart.c: 195:                 break;
  1715  001536  EFB8  F00A         	goto	l552
  1716  00153A                     l3995:
  1717  00153A  FFFF               	dw	65535	; assembler added errata NOP
  1718  00153C  5045               	movf	storeData@receivedMex^0,w,c
  1719  00153E  6E19               	movwf	??_storeData^0,c
  1720  001540  6A1A               	clrf	(??_storeData+1)^0,c
  1721                           
  1722                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1723                           ; Switch size 1, requested type "simple"
  1724                           ; Number of cases is 1, Range of values is 0 to 0
  1725                           ; switch strategies available:
  1726                           ; Name         Instructions Cycles
  1727                           ; simple_byte            4     3 (average)
  1728                           ;	Chosen strategy is simple_byte
  1729  001542  501A               	movf	(??_storeData+1)^0,w,c
  1730  001544  0A00               	xorlw	0	; case 0
  1731  001546  B4D8               	btfsc	status,2,c
  1732  001548  EFA8  F00A         	goto	l4379
  1733  00154C  EF97  F00A         	goto	l3991
  1734  001550                     l4379:
  1735  001550  FFFF               	dw	65535	; assembler added errata NOP
  1736                           
  1737                           ; Switch size 1, requested type "simple"
  1738                           ; Number of cases is 3, Range of values is 0 to 2
  1739                           ; switch strategies available:
  1740                           ; Name         Instructions Cycles
  1741                           ; simple_byte           10     6 (average)
  1742                           ;	Chosen strategy is simple_byte
  1743  001552  5019               	movf	??_storeData^0,w,c
  1744  001554  0A00               	xorlw	0	; case 0
  1745  001556  B4D8               	btfsc	status,2,c
  1746  001558  EF51  F00A         	goto	l3983
  1747  00155C  0A01               	xorlw	1	; case 1
  1748  00155E  B4D8               	btfsc	status,2,c
  1749  001560  EF7D  F00A         	goto	l549
  1750  001564  0A03               	xorlw	3	; case 2
  1751  001566  B4D8               	btfsc	status,2,c
  1752  001568  EF92  F00A         	goto	l3989
  1753  00156C  EF97  F00A         	goto	l3991
  1754  001570                     l552:
  1755  001570  FFFF               	dw	65535	; assembler added errata NOP
  1756  001572  0012               	return		;funcret
  1757  001574  FFFF               	dw	65535	; errata NOP
  1758  001576                     __end_of_storeData:
  1759                           	callstack 0
  1760                           
  1761 ;; *************** function _printError *****************
  1762 ;; Defined at:
  1763 ;;		line 53 in file "usart.c"
  1764 ;; Parameters:    Size  Location     Type
  1765 ;;  errCode         1    wreg     unsigned char 
  1766 ;; Auto vars:     Size  Location     Type
  1767 ;;  errCode         1   23[COMRAM] unsigned char 
  1768 ;; Return value:  Size  Location     Type
  1769 ;;                  1    wreg      void 
  1770 ;; Registers used:
  1771 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1772 ;; Tracked objects:
  1773 ;;		On entry : 0/0
  1774 ;;		On exit  : 0/0
  1775 ;;		Unchanged: 0/0
  1776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1777 ;;      Params:         0       0       0       0       0       0       0
  1778 ;;      Locals:         1       0       0       0       0       0       0
  1779 ;;      Temps:          2       0       0       0       0       0       0
  1780 ;;      Totals:         3       0       0       0       0       0       0
  1781 ;;Total ram usage:        3 bytes
  1782 ;; Hardware stack levels used:    1
  1783 ;; Hardware stack levels required when called:    5
  1784 ;; This function calls:
  1785 ;;		_uartTx
  1786 ;; This function is called by:
  1787 ;;		_main
  1788 ;;		_storeData
  1789 ;; This function uses a non-reentrant model
  1790 ;;
  1791                           
  1792                           	psect	text5
  1793  00180E                     __ptext5:
  1794                           	callstack 0
  1795  00180E                     _printError:
  1796                           	callstack 0
  1797  00180E  FFFF               	dw	65535	; assembler added errata NOP
  1798                           
  1799                           ;incstack = 0
  1800                           ;printError@errCode stored from wreg
  1801  001810  6E18               	movwf	printError@errCode^0,c
  1802  001812                     
  1803                           ;usart.c: 55:     switch(errCode){
  1804  001812  EF63  F00C         	goto	l3839
  1805  001816                     l3821:
  1806  001816  FFFF               	dw	65535	; assembler added errata NOP
  1807                           
  1808                           ;usart.c: 57:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  1809  001818  0EA4               	movlw	low _errString_Feed
  1810  00181A  6E12               	movwf	uartTx@ptr^0,c
  1811  00181C  0E00               	movlw	high _errString_Feed
  1812  00181E  6E13               	movwf	(uartTx@ptr+1)^0,c
  1813  001820  0E1D               	movlw	29
  1814  001822  6E14               	movwf	uartTx@length^0,c
  1815  001824  ECEB  F010         	call	_uartTx	;wreg free
  1816                           
  1817                           ;usart.c: 58:             break;
  1818  001828  EF92  F00C         	goto	l508
  1819  00182C                     l3823:
  1820  00182C  FFFF               	dw	65535	; assembler added errata NOP
  1821                           
  1822                           ;usart.c: 60:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  1823  00182E  0E5C               	movlw	low _errString_ZEND
  1824  001830  6E12               	movwf	uartTx@ptr^0,c
  1825  001832  0E01               	movlw	high _errString_ZEND
  1826  001834  6E13               	movwf	(uartTx@ptr+1)^0,c
  1827  001836  0E28               	movlw	40
  1828  001838  6E14               	movwf	uartTx@length^0,c
  1829  00183A  ECEB  F010         	call	_uartTx	;wreg free
  1830                           
  1831                           ;usart.c: 61:             break;
  1832  00183E  EF92  F00C         	goto	l508
  1833  001842                     l3825:
  1834  001842  FFFF               	dw	65535	; assembler added errata NOP
  1835                           
  1836                           ;usart.c: 63:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  1837  001844  0E84               	movlw	low _errString_Reset
  1838  001846  6E12               	movwf	uartTx@ptr^0,c
  1839  001848  0E01               	movlw	high _errString_Reset
  1840  00184A  6E13               	movwf	(uartTx@ptr+1)^0,c
  1841  00184C  0E27               	movlw	39
  1842  00184E  6E14               	movwf	uartTx@length^0,c
  1843  001850  ECEB  F010         	call	_uartTx	;wreg free
  1844                           
  1845                           ;usart.c: 64:             break;
  1846  001854  EF92  F00C         	goto	l508
  1847  001858                     l3827:
  1848  001858  FFFF               	dw	65535	; assembler added errata NOP
  1849                           
  1850                           ;usart.c: 66:             uartTx(&errString_Point[0], sizeof(errString_Point));
  1851  00185A  0E34               	movlw	low _errString_Point
  1852  00185C  6E12               	movwf	uartTx@ptr^0,c
  1853  00185E  0E01               	movlw	high _errString_Point
  1854  001860  6E13               	movwf	(uartTx@ptr+1)^0,c
  1855  001862  0E28               	movlw	40
  1856  001864  6E14               	movwf	uartTx@length^0,c
  1857  001866  ECEB  F010         	call	_uartTx	;wreg free
  1858                           
  1859                           ;usart.c: 67:             break;
  1860  00186A  EF92  F00C         	goto	l508
  1861  00186E                     l3829:
  1862  00186E  FFFF               	dw	65535	; assembler added errata NOP
  1863                           
  1864                           ;usart.c: 69:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  1865  001870  0E84               	movlw	low _errString_Bound
  1866  001872  6E12               	movwf	uartTx@ptr^0,c
  1867  001874  0E00               	movlw	high _errString_Bound
  1868  001876  6E13               	movwf	(uartTx@ptr+1)^0,c
  1869  001878  0E20               	movlw	32
  1870  00187A  6E14               	movwf	uartTx@length^0,c
  1871  00187C  ECEB  F010         	call	_uartTx	;wreg free
  1872                           
  1873                           ;usart.c: 70:             break;
  1874  001880  EF92  F00C         	goto	l508
  1875  001884                     l3831:
  1876  001884  FFFF               	dw	65535	; assembler added errata NOP
  1877                           
  1878                           ;usart.c: 72:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  1879  001886  0E00               	movlw	low _errString_PointZ
  1880  001888  6E12               	movwf	uartTx@ptr^0,c
  1881  00188A  0E01               	movlw	high _errString_PointZ
  1882  00188C  6E13               	movwf	(uartTx@ptr+1)^0,c
  1883  00188E  0E34               	movlw	52
  1884  001890  6E14               	movwf	uartTx@length^0,c
  1885  001892  ECEB  F010         	call	_uartTx	;wreg free
  1886                           
  1887                           ;usart.c: 73:             break;
  1888  001896  EF92  F00C         	goto	l508
  1889  00189A                     l3833:
  1890  00189A  FFFF               	dw	65535	; assembler added errata NOP
  1891                           
  1892                           ;usart.c: 75:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  1893  00189C  0EAB               	movlw	low _errString_Fatal
  1894  00189E  6E12               	movwf	uartTx@ptr^0,c
  1895  0018A0  0E01               	movlw	high _errString_Fatal
  1896  0018A2  6E13               	movwf	(uartTx@ptr+1)^0,c
  1897  0018A4  0E26               	movlw	38
  1898  0018A6  6E14               	movwf	uartTx@length^0,c
  1899  0018A8  ECEB  F010         	call	_uartTx	;wreg free
  1900                           
  1901                           ;usart.c: 76:             break;
  1902  0018AC  EF92  F00C         	goto	l508
  1903  0018B0                     l3835:
  1904  0018B0  FFFF               	dw	65535	; assembler added errata NOP
  1905                           
  1906                           ;usart.c: 78:             uartTx(&errString_Command[0], sizeof(errString_Command));
  1907  0018B2  0EC1               	movlw	low _errString_Command
  1908  0018B4  6E12               	movwf	uartTx@ptr^0,c
  1909  0018B6  0E00               	movlw	high _errString_Command
  1910  0018B8  6E13               	movwf	(uartTx@ptr+1)^0,c
  1911  0018BA  0E17               	movlw	23
  1912  0018BC  6E14               	movwf	uartTx@length^0,c
  1913  0018BE  ECEB  F010         	call	_uartTx	;wreg free
  1914                           
  1915                           ;usart.c: 79:             break;
  1916  0018C2  EF92  F00C         	goto	l508
  1917  0018C6                     l3839:
  1918  0018C6  FFFF               	dw	65535	; assembler added errata NOP
  1919  0018C8  5018               	movf	printError@errCode^0,w,c
  1920  0018CA  6E16               	movwf	??_printError^0,c
  1921  0018CC  6A17               	clrf	(??_printError+1)^0,c
  1922                           
  1923                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1924                           ; Switch size 1, requested type "simple"
  1925                           ; Number of cases is 1, Range of values is 0 to 0
  1926                           ; switch strategies available:
  1927                           ; Name         Instructions Cycles
  1928                           ; simple_byte            4     3 (average)
  1929                           ;	Chosen strategy is simple_byte
  1930  0018CE  5017               	movf	(??_printError+1)^0,w,c
  1931  0018D0  0A00               	xorlw	0	; case 0
  1932  0018D2  B4D8               	btfsc	status,2,c
  1933  0018D4  EF6E  F00C         	goto	l4381
  1934  0018D8  EF92  F00C         	goto	l508
  1935  0018DC                     l4381:
  1936  0018DC  FFFF               	dw	65535	; assembler added errata NOP
  1937                           
  1938                           ; Switch size 1, requested type "simple"
  1939                           ; Number of cases is 8, Range of values is 1 to 8
  1940                           ; switch strategies available:
  1941                           ; Name         Instructions Cycles
  1942                           ; simple_byte           25    13 (average)
  1943                           ;	Chosen strategy is simple_byte
  1944  0018DE  5016               	movf	??_printError^0,w,c
  1945  0018E0  0A01               	xorlw	1	; case 1
  1946  0018E2  B4D8               	btfsc	status,2,c
  1947  0018E4  EF0B  F00C         	goto	l3821
  1948  0018E8  0A03               	xorlw	3	; case 2
  1949  0018EA  B4D8               	btfsc	status,2,c
  1950  0018EC  EF16  F00C         	goto	l3823
  1951  0018F0  0A01               	xorlw	1	; case 3
  1952  0018F2  B4D8               	btfsc	status,2,c
  1953  0018F4  EF21  F00C         	goto	l3825
  1954  0018F8  0A07               	xorlw	7	; case 4
  1955  0018FA  B4D8               	btfsc	status,2,c
  1956  0018FC  EF2C  F00C         	goto	l3827
  1957  001900  0A01               	xorlw	1	; case 5
  1958  001902  B4D8               	btfsc	status,2,c
  1959  001904  EF37  F00C         	goto	l3829
  1960  001908  0A03               	xorlw	3	; case 6
  1961  00190A  B4D8               	btfsc	status,2,c
  1962  00190C  EF42  F00C         	goto	l3831
  1963  001910  0A01               	xorlw	1	; case 7
  1964  001912  B4D8               	btfsc	status,2,c
  1965  001914  EF4D  F00C         	goto	l3833
  1966  001918  0A0F               	xorlw	15	; case 8
  1967  00191A  B4D8               	btfsc	status,2,c
  1968  00191C  EF58  F00C         	goto	l3835
  1969  001920  EF92  F00C         	goto	l508
  1970  001924                     l508:
  1971  001924  FFFF               	dw	65535	; assembler added errata NOP
  1972  001926  0012               	return		;funcret
  1973  001928  FFFF               	dw	65535	; errata NOP
  1974  00192A                     __end_of_printError:
  1975                           	callstack 0
  1976                           
  1977 ;; *************** function _uartTx *****************
  1978 ;; Defined at:
  1979 ;;		line 221 in file "usart.c"
  1980 ;; Parameters:    Size  Location     Type
  1981 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  1982 ;;		 -> errString_Command(23), errString_Fatal(38), errString_PointZ(52), errString_Bound(32), 
  1983 ;;		 -> errString_Point(40), errString_Reset(39), errString_ZEND(40), errString_Feed(29), 
  1984 ;;  length          1   19[COMRAM] unsigned char 
  1985 ;; Auto vars:     Size  Location     Type
  1986 ;;  i               1   20[COMRAM] unsigned char 
  1987 ;; Return value:  Size  Location     Type
  1988 ;;                  1    wreg      void 
  1989 ;; Registers used:
  1990 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1991 ;; Tracked objects:
  1992 ;;		On entry : 0/0
  1993 ;;		On exit  : 0/0
  1994 ;;		Unchanged: 0/0
  1995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1996 ;;      Params:         3       0       0       0       0       0       0
  1997 ;;      Locals:         1       0       0       0       0       0       0
  1998 ;;      Temps:          0       0       0       0       0       0       0
  1999 ;;      Totals:         4       0       0       0       0       0       0
  2000 ;;Total ram usage:        4 bytes
  2001 ;; Hardware stack levels used:    1
  2002 ;; Hardware stack levels required when called:    4
  2003 ;; This function calls:
  2004 ;;		Nothing
  2005 ;; This function is called by:
  2006 ;;		_printError
  2007 ;; This function uses a non-reentrant model
  2008 ;;
  2009                           
  2010                           	psect	text6
  2011  0021D6                     __ptext6:
  2012                           	callstack 0
  2013  0021D6                     _uartTx:
  2014                           	callstack 0
  2015  0021D6  FFFF               	dw	65535	; assembler added errata NOP
  2016  0021D8                     
  2017                           ;usart.c: 221: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 222: {;usa
      +                          rt.c: 224:     for(char i = 1; i < length; i++){
  2018  0021D8  0E01               	movlw	1
  2019  0021DA  6E15               	movwf	uartTx@i^0,c
  2020  0021DC  EF04  F011         	goto	l3351
  2021  0021E0                     l3347:
  2022  0021E0  FFFF               	dw	65535	; assembler added errata NOP
  2023                           
  2024                           ;usart.c: 226:         TXREG = *ptr;
  2025  0021E2  C012  FFD9         	movff	uartTx@ptr,fsr2l
  2026  0021E6  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  2027  0021EA  50DF               	movf	indf2,w,c
  2028  0021EC  6EAD               	movwf	173,c	;volatile
  2029  0021EE                     l563:
  2030  0021EE  FFFF               	dw	65535	; assembler added errata NOP
  2031  0021F0  A2AC               	btfss	172,1,c	;volatile
  2032  0021F2  EFFD  F010         	goto	u2301
  2033  0021F6  EF00  F011         	goto	u2300
  2034  0021FA                     u2301:
  2035  0021FA  FFFF               	dw	65535	; assembler added errata NOP
  2036  0021FC  EFF7  F010         	goto	l563
  2037  002200                     u2300:
  2038  002200  FFFF               	dw	65535	; assembler added errata NOP
  2039  002202                     
  2040                           ;usart.c: 230:         ptr++;
  2041  002202  4A12               	infsnz	uartTx@ptr^0,f,c
  2042  002204  2A13               	incf	(uartTx@ptr+1)^0,f,c
  2043                           
  2044                           ;usart.c: 231:     }
  2045  002206  2A15               	incf	uartTx@i^0,f,c
  2046  002208                     l3351:
  2047  002208  FFFF               	dw	65535	; assembler added errata NOP
  2048  00220A  5014               	movf	uartTx@length^0,w,c
  2049  00220C  5C15               	subwf	uartTx@i^0,w,c
  2050  00220E  A0D8               	btfss	status,0,c
  2051  002210  EF0C  F011         	goto	u2311
  2052  002214  EF0F  F011         	goto	u2310
  2053  002218                     u2311:
  2054  002218  FFFF               	dw	65535	; assembler added errata NOP
  2055  00221A  EFF0  F010         	goto	l3347
  2056  00221E                     u2310:
  2057  00221E  FFFF               	dw	65535	; assembler added errata NOP
  2058  002220  0012               	return		;funcret
  2059  002222  FFFF               	dw	65535	; errata NOP
  2060  002224                     __end_of_uartTx:
  2061                           	callstack 0
  2062                           
  2063 ;; *************** function _shiftData *****************
  2064 ;; Defined at:
  2065 ;;		line 120 in file "usart.c"
  2066 ;; Parameters:    Size  Location     Type
  2067 ;;		None
  2068 ;; Auto vars:     Size  Location     Type
  2069 ;;  i               1   19[COMRAM] unsigned char 
  2070 ;; Return value:  Size  Location     Type
  2071 ;;                  1    wreg      void 
  2072 ;; Registers used:
  2073 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2074 ;; Tracked objects:
  2075 ;;		On entry : 0/0
  2076 ;;		On exit  : 0/0
  2077 ;;		Unchanged: 0/0
  2078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2079 ;;      Params:         0       0       0       0       0       0       0
  2080 ;;      Locals:         1       0       0       0       0       0       0
  2081 ;;      Temps:          2       0       0       0       0       0       0
  2082 ;;      Totals:         3       0       0       0       0       0       0
  2083 ;;Total ram usage:        3 bytes
  2084 ;; Hardware stack levels used:    1
  2085 ;; Hardware stack levels required when called:    4
  2086 ;; This function calls:
  2087 ;;		Nothing
  2088 ;; This function is called by:
  2089 ;;		_main
  2090 ;; This function uses a non-reentrant model
  2091 ;;
  2092                           
  2093                           	psect	text7
  2094  00211E                     __ptext7:
  2095                           	callstack 0
  2096  00211E                     _shiftData:
  2097                           	callstack 0
  2098  00211E  FFFF               	dw	65535	; assembler added errata NOP
  2099  002120                     
  2100                           ;usart.c: 121:     char i;;usart.c: 123:     for(i = 0; i < 4; i++){
  2101  002120  0E00               	movlw	0
  2102  002122  6E14               	movwf	shiftData@i^0,c
  2103  002124                     l4079:
  2104  002124  FFFF               	dw	65535	; assembler added errata NOP
  2105                           
  2106                           ;usart.c: 124:         dataSequence[i] = dataSequence[i+1];
  2107  002126  5014               	movf	shiftData@i^0,w,c
  2108  002128  6E12               	movwf	??_shiftData^0,c
  2109  00212A  6A13               	clrf	(??_shiftData+1)^0,c
  2110  00212C  90D8               	bcf	status,0,c
  2111  00212E  3612               	rlcf	??_shiftData^0,f,c
  2112  002130  3613               	rlcf	(??_shiftData+1)^0,f,c
  2113  002132  90D8               	bcf	status,0,c
  2114  002134  3612               	rlcf	??_shiftData^0,f,c
  2115  002136  3613               	rlcf	(??_shiftData+1)^0,f,c
  2116  002138  0EDC               	movlw	low (_dataSequence+4)
  2117  00213A  2412               	addwf	??_shiftData^0,w,c
  2118  00213C  6ED9               	movwf	fsr2l,c
  2119  00213E  0E00               	movlw	high (_dataSequence+4)
  2120  002140  2013               	addwfc	(??_shiftData+1)^0,w,c
  2121  002142  6EDA               	movwf	fsr2h,c
  2122  002144  5014               	movf	shiftData@i^0,w,c
  2123  002146  0D04               	mullw	4
  2124  002148  0ED8               	movlw	low _dataSequence
  2125  00214A  24F3               	addwf	243,w,c
  2126  00214C  6EE1               	movwf	fsr1l,c
  2127  00214E  0E00               	movlw	high _dataSequence
  2128  002150  20F4               	addwfc	prodh,w,c
  2129  002152  6EE2               	movwf	fsr1h,c
  2130  002154  CFDE FFE6          	movff	postinc2,postinc1
  2131  002158  CFDE FFE6          	movff	postinc2,postinc1
  2132  00215C  CFDE FFE6          	movff	postinc2,postinc1
  2133  002160  CFDE FFE6          	movff	postinc2,postinc1
  2134  002164                     
  2135                           ;usart.c: 125:     }
  2136  002164  2A14               	incf	shiftData@i^0,f,c
  2137  002166  0E03               	movlw	3
  2138  002168  6414               	cpfsgt	shiftData@i^0,c
  2139  00216A  EFB9  F010         	goto	u3231
  2140  00216E  EFBC  F010         	goto	u3230
  2141  002172                     u3231:
  2142  002172  FFFF               	dw	65535	; assembler added errata NOP
  2143  002174  EF92  F010         	goto	l4079
  2144  002178                     u3230:
  2145  002178  FFFF               	dw	65535	; assembler added errata NOP
  2146  00217A  0012               	return		;funcret
  2147  00217C  FFFF               	dw	65535	; errata NOP
  2148  00217E                     __end_of_shiftData:
  2149                           	callstack 0
  2150                           
  2151 ;; *************** function _resetPosition *****************
  2152 ;; Defined at:
  2153 ;;		line 160 in file "motors.c"
  2154 ;; Parameters:    Size  Location     Type
  2155 ;;		None
  2156 ;; Auto vars:     Size  Location     Type
  2157 ;;  keepMovingZ     1   23[COMRAM] unsigned char 
  2158 ;;  keepMovingY     1   22[COMRAM] unsigned char 
  2159 ;;  keepMovingX     1   21[COMRAM] unsigned char 
  2160 ;; Return value:  Size  Location     Type
  2161 ;;                  1    wreg      unsigned char 
  2162 ;; Registers used:
  2163 ;;		wreg, status,2, status,0, cstack
  2164 ;; Tracked objects:
  2165 ;;		On entry : 0/0
  2166 ;;		On exit  : 0/0
  2167 ;;		Unchanged: 0/0
  2168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2169 ;;      Params:         0       0       0       0       0       0       0
  2170 ;;      Locals:         3       0       0       0       0       0       0
  2171 ;;      Temps:          0       0       0       0       0       0       0
  2172 ;;      Totals:         3       0       0       0       0       0       0
  2173 ;;Total ram usage:        3 bytes
  2174 ;; Hardware stack levels used:    1
  2175 ;; Hardware stack levels required when called:    5
  2176 ;; This function calls:
  2177 ;;		_enableMotor
  2178 ;;		_resetStep
  2179 ;;		_setDecay
  2180 ;;		_setDirection
  2181 ;;		_setStep
  2182 ;;		_stepMade
  2183 ;; This function is called by:
  2184 ;;		_main
  2185 ;; This function uses a non-reentrant model
  2186 ;;
  2187                           
  2188                           	psect	text8
  2189  000EC2                     __ptext8:
  2190                           	callstack 0
  2191  000EC2                     _resetPosition:
  2192                           	callstack 0
  2193  000EC2  FFFF               	dw	65535	; assembler added errata NOP
  2194  000EC4                     
  2195                           ;motors.c: 162:     setStep(0, 0);
  2196  000EC4  0E00               	movlw	0
  2197  000EC6  6E12               	movwf	setStep@motor^0,c
  2198  000EC8  0E00               	movlw	0
  2199  000ECA  EC15  F00E         	call	_setStep
  2200                           
  2201                           ;motors.c: 163:     setStep(1, 0);
  2202  000ECE  0E00               	movlw	0
  2203  000ED0  6E12               	movwf	setStep@motor^0,c
  2204  000ED2  0E01               	movlw	1
  2205  000ED4  EC15  F00E         	call	_setStep
  2206                           
  2207                           ;motors.c: 164:     setStep(2, 0);
  2208  000ED8  0E00               	movlw	0
  2209  000EDA  6E12               	movwf	setStep@motor^0,c
  2210  000EDC  0E02               	movlw	2
  2211  000EDE  EC15  F00E         	call	_setStep
  2212                           
  2213                           ;motors.c: 166:     setDirection(0, 0);
  2214  000EE2  0E00               	movlw	0
  2215  000EE4  6E12               	movwf	setDirection@motor^0,c
  2216  000EE6  0E00               	movlw	0
  2217  000EE8  EC55  F010         	call	_setDirection
  2218                           
  2219                           ;motors.c: 167:     setDirection(0, 1);
  2220  000EEC  0E01               	movlw	1
  2221  000EEE  6E12               	movwf	setDirection@motor^0,c
  2222  000EF0  0E00               	movlw	0
  2223  000EF2  EC55  F010         	call	_setDirection
  2224                           
  2225                           ;motors.c: 168:     setDirection(0, 2);
  2226  000EF6  0E02               	movlw	2
  2227  000EF8  6E12               	movwf	setDirection@motor^0,c
  2228  000EFA  0E00               	movlw	0
  2229  000EFC  EC55  F010         	call	_setDirection
  2230                           
  2231                           ;motors.c: 170:     setDecay(1, 0);
  2232  000F00  0E00               	movlw	0
  2233  000F02  6E12               	movwf	setDecay@motor^0,c
  2234  000F04  0E01               	movlw	1
  2235  000F06  ECE1  F00F         	call	_setDecay
  2236                           
  2237                           ;motors.c: 171:     setDecay(1, 1);
  2238  000F0A  0E01               	movlw	1
  2239  000F0C  6E12               	movwf	setDecay@motor^0,c
  2240  000F0E  0E01               	movlw	1
  2241  000F10  ECE1  F00F         	call	_setDecay
  2242                           
  2243                           ;motors.c: 172:     setDecay(1, 2);
  2244  000F14  0E02               	movlw	2
  2245  000F16  6E12               	movwf	setDecay@motor^0,c
  2246  000F18  0E01               	movlw	1
  2247  000F1A  ECE1  F00F         	call	_setDecay
  2248                           
  2249                           ;motors.c: 174:     enableMotor(0, 0);
  2250  000F1E  0E00               	movlw	0
  2251  000F20  6E12               	movwf	enableMotor@motor^0,c
  2252  000F22  0E00               	movlw	0
  2253  000F24  EC1B  F010         	call	_enableMotor
  2254                           
  2255                           ;motors.c: 175:     enableMotor(0, 1);
  2256  000F28  0E01               	movlw	1
  2257  000F2A  6E12               	movwf	enableMotor@motor^0,c
  2258  000F2C  0E00               	movlw	0
  2259  000F2E  EC1B  F010         	call	_enableMotor
  2260                           
  2261                           ;motors.c: 176:     enableMotor(0, 2);
  2262  000F32  0E02               	movlw	2
  2263  000F34  6E12               	movwf	enableMotor@motor^0,c
  2264  000F36  0E00               	movlw	0
  2265  000F38  EC1B  F010         	call	_enableMotor
  2266  000F3C                     
  2267                           ;motors.c: 180:     unsigned char keepMovingX = 1;
  2268  000F3C  0E01               	movlw	1
  2269  000F3E  6E16               	movwf	resetPosition@keepMovingX^0,c
  2270  000F40                     
  2271                           ;motors.c: 181:     unsigned char keepMovingY = 1;
  2272  000F40  0E01               	movlw	1
  2273  000F42  6E17               	movwf	resetPosition@keepMovingY^0,c
  2274  000F44                     
  2275                           ;motors.c: 182:     unsigned char keepMovingZ = 1;
  2276  000F44  0E01               	movlw	1
  2277  000F46  6E18               	movwf	resetPosition@keepMovingZ^0,c
  2278  000F48                     
  2279                           ;motors.c: 185:     T2CONbits.TMR2ON = 1;
  2280  000F48  84CA               	bsf	202,2,c	;volatile
  2281  000F4A                     
  2282                           ;motors.c: 187:     tm0Error = 0;
  2283  000F4A  0E00               	movlw	0
  2284  000F4C  6E5C               	movwf	(_tm0Error+1)^0,c
  2285  000F4E  0E00               	movlw	0
  2286  000F50  6E5B               	movwf	_tm0Error^0,c
  2287  000F52                     
  2288                           ;motors.c: 188:     tm0Limit = 200;
  2289  000F52  0EC8               	movlw	200
  2290  000F54  6E68               	movwf	_tm0Limit^0,c
  2291  000F56                     
  2292                           ;motors.c: 189:     T0CONbits.TMR0ON = 1;
  2293  000F56  8ED5               	bsf	213,7,c	;volatile
  2294                           
  2295                           ;motors.c: 191:     while(keepMovingX || keepMovingY || keepMovingZ){
  2296  000F58  EF2F  F008         	goto	l3907
  2297  000F5C                     l3885:
  2298  000F5C  FFFF               	dw	65535	; assembler added errata NOP
  2299                           
  2300                           ;motors.c: 194:         if(tm0Error){
  2301  000F5E  505B               	movf	_tm0Error^0,w,c
  2302  000F60  105C               	iorwf	(_tm0Error+1)^0,w,c
  2303  000F62  B4D8               	btfsc	status,2,c
  2304  000F64  EFB6  F007         	goto	u3061
  2305  000F68  EFB9  F007         	goto	u3060
  2306  000F6C                     u3061:
  2307  000F6C  FFFF               	dw	65535	; assembler added errata NOP
  2308  000F6E  EFC3  F007         	goto	l115
  2309  000F72                     u3060:
  2310  000F72  FFFF               	dw	65535	; assembler added errata NOP
  2311  000F74                     
  2312                           ;motors.c: 196:             LATAbits.LATA2 = 0;
  2313  000F74  9489               	bcf	137,2,c	;volatile
  2314                           
  2315                           ;motors.c: 197:             LATBbits.LATB4 = 0;
  2316  000F76  988A               	bcf	138,4,c	;volatile
  2317                           
  2318                           ;motors.c: 198:             LATCbits.LATC2 = 0;
  2319  000F78  948B               	bcf	139,2,c	;volatile
  2320  000F7A                     
  2321                           ;motors.c: 200:             tm0Error = 3;
  2322  000F7A  0E00               	movlw	0
  2323  000F7C  6E5C               	movwf	(_tm0Error+1)^0,c
  2324  000F7E  0E03               	movlw	3
  2325  000F80  6E5B               	movwf	_tm0Error^0,c
  2326                           
  2327                           ;motors.c: 201:             break;
  2328  000F82  EF4D  F008         	goto	l116
  2329  000F86                     l115:
  2330  000F86  FFFF               	dw	65535	; assembler added errata NOP
  2331                           
  2332                           ;motors.c: 208:         if(PORTEbits.RE0 || !keepMovingX){
  2333  000F88  B084               	btfsc	132,0,c	;volatile
  2334  000F8A  EFC9  F007         	goto	u3071
  2335  000F8E  EFCC  F007         	goto	u3070
  2336  000F92                     u3071:
  2337  000F92  FFFF               	dw	65535	; assembler added errata NOP
  2338  000F94  EFD6  F007         	goto	l3893
  2339  000F98                     u3070:
  2340  000F98  FFFF               	dw	65535	; assembler added errata NOP
  2341  000F9A  5016               	movf	resetPosition@keepMovingX^0,w,c
  2342  000F9C  A4D8               	btfss	status,2,c
  2343  000F9E  EFD3  F007         	goto	u3081
  2344  000FA2  EFD6  F007         	goto	u3080
  2345  000FA6                     u3081:
  2346  000FA6  FFFF               	dw	65535	; assembler added errata NOP
  2347  000FA8  EFDB  F007         	goto	l117
  2348  000FAC                     u3080:
  2349  000FAC                     l3893:
  2350  000FAC  FFFF               	dw	65535	; assembler added errata NOP
  2351                           
  2352                           ;motors.c: 210:             keepMovingX = 0;
  2353  000FAE  0E00               	movlw	0
  2354  000FB0  6E16               	movwf	resetPosition@keepMovingX^0,c
  2355                           
  2356                           ;motors.c: 211:         }else{
  2357  000FB2  EFDD  F007         	goto	l120
  2358  000FB6                     l117:
  2359  000FB6  FFFF               	dw	65535	; assembler added errata NOP
  2360                           
  2361                           ;motors.c: 213:             LATAbits.LATA2 = 1;
  2362  000FB8  8489               	bsf	137,2,c	;volatile
  2363  000FBA                     l120:
  2364  000FBA  FFFF               	dw	65535	; assembler added errata NOP
  2365                           
  2366                           ;motors.c: 217:         if(PORTEbits.RE1 || !keepMovingY){
  2367  000FBC  B284               	btfsc	132,1,c	;volatile
  2368  000FBE  EFE3  F007         	goto	u3091
  2369  000FC2  EFE6  F007         	goto	u3090
  2370  000FC6                     u3091:
  2371  000FC6  FFFF               	dw	65535	; assembler added errata NOP
  2372  000FC8  EFF0  F007         	goto	l3897
  2373  000FCC                     u3090:
  2374  000FCC  FFFF               	dw	65535	; assembler added errata NOP
  2375  000FCE  5017               	movf	resetPosition@keepMovingY^0,w,c
  2376  000FD0  A4D8               	btfss	status,2,c
  2377  000FD2  EFED  F007         	goto	u3101
  2378  000FD6  EFF0  F007         	goto	u3100
  2379  000FDA                     u3101:
  2380  000FDA  FFFF               	dw	65535	; assembler added errata NOP
  2381  000FDC  EFF5  F007         	goto	l121
  2382  000FE0                     u3100:
  2383  000FE0                     l3897:
  2384  000FE0  FFFF               	dw	65535	; assembler added errata NOP
  2385                           
  2386                           ;motors.c: 219:             keepMovingY = 0;
  2387  000FE2  0E00               	movlw	0
  2388  000FE4  6E17               	movwf	resetPosition@keepMovingY^0,c
  2389                           
  2390                           ;motors.c: 220:         }else{
  2391  000FE6  EFF7  F007         	goto	l124
  2392  000FEA                     l121:
  2393  000FEA  FFFF               	dw	65535	; assembler added errata NOP
  2394                           
  2395                           ;motors.c: 222:             LATBbits.LATB4 = 1;
  2396  000FEC  888A               	bsf	138,4,c	;volatile
  2397  000FEE                     l124:
  2398  000FEE  FFFF               	dw	65535	; assembler added errata NOP
  2399                           
  2400                           ;motors.c: 226:         if(PORTEbits.RE2 || !keepMovingZ){
  2401  000FF0  B484               	btfsc	132,2,c	;volatile
  2402  000FF2  EFFD  F007         	goto	u3111
  2403  000FF6  EF00  F008         	goto	u3110
  2404  000FFA                     u3111:
  2405  000FFA  FFFF               	dw	65535	; assembler added errata NOP
  2406  000FFC  EF0A  F008         	goto	l3901
  2407  001000                     u3110:
  2408  001000  FFFF               	dw	65535	; assembler added errata NOP
  2409  001002  5018               	movf	resetPosition@keepMovingZ^0,w,c
  2410  001004  A4D8               	btfss	status,2,c
  2411  001006  EF07  F008         	goto	u3121
  2412  00100A  EF0A  F008         	goto	u3120
  2413  00100E                     u3121:
  2414  00100E  FFFF               	dw	65535	; assembler added errata NOP
  2415  001010  EF0F  F008         	goto	l125
  2416  001014                     u3120:
  2417  001014                     l3901:
  2418  001014  FFFF               	dw	65535	; assembler added errata NOP
  2419                           
  2420                           ;motors.c: 228:             keepMovingZ = 0;
  2421  001016  0E00               	movlw	0
  2422  001018  6E18               	movwf	resetPosition@keepMovingZ^0,c
  2423                           
  2424                           ;motors.c: 229:         }else{
  2425  00101A  EF11  F008         	goto	l3903
  2426  00101E                     l125:
  2427  00101E  FFFF               	dw	65535	; assembler added errata NOP
  2428                           
  2429                           ;motors.c: 231:             LATCbits.LATC2 = 1;
  2430  001020  848B               	bsf	139,2,c	;volatile
  2431  001022                     l3903:
  2432  001022  FFFF               	dw	65535	; assembler added errata NOP
  2433  001024  EC95  F011         	call	_stepMade	;wreg free
  2434  001028  5012               	movf	?_stepMade^0,w,c
  2435  00102A  1013               	iorwf	(?_stepMade+1)^0,w,c
  2436  00102C  B4D8               	btfsc	status,2,c
  2437  00102E  EF1B  F008         	goto	u3131
  2438  001032  EF1E  F008         	goto	u3130
  2439  001036                     u3131:
  2440  001036  FFFF               	dw	65535	; assembler added errata NOP
  2441  001038  EF11  F008         	goto	l3903
  2442  00103C                     u3130:
  2443  00103C  FFFF               	dw	65535	; assembler added errata NOP
  2444  00103E                     
  2445                           ;motors.c: 238:         LATAbits.LATA2 = 0;
  2446  00103E  9489               	bcf	137,2,c	;volatile
  2447                           
  2448                           ;motors.c: 239:         LATBbits.LATB4 = 0;
  2449  001040  988A               	bcf	138,4,c	;volatile
  2450                           
  2451                           ;motors.c: 240:         LATCbits.LATC2 = 0;
  2452  001042  948B               	bcf	139,2,c	;volatile
  2453  001044                     l3905:
  2454  001044  FFFF               	dw	65535	; assembler added errata NOP
  2455  001046  EC95  F011         	call	_stepMade	;wreg free
  2456  00104A  5012               	movf	?_stepMade^0,w,c
  2457  00104C  1013               	iorwf	(?_stepMade+1)^0,w,c
  2458  00104E  B4D8               	btfsc	status,2,c
  2459  001050  EF2C  F008         	goto	u3141
  2460  001054  EF2F  F008         	goto	u3140
  2461  001058                     u3141:
  2462  001058  FFFF               	dw	65535	; assembler added errata NOP
  2463  00105A  EF22  F008         	goto	l3905
  2464  00105E                     u3140:
  2465  00105E                     l3907:
  2466  00105E  FFFF               	dw	65535	; assembler added errata NOP
  2467                           
  2468                           ;motors.c: 191:     while(keepMovingX || keepMovingY || keepMovingZ){
  2469  001060  5016               	movf	resetPosition@keepMovingX^0,w,c
  2470  001062  A4D8               	btfss	status,2,c
  2471  001064  EF36  F008         	goto	u3151
  2472  001068  EF39  F008         	goto	u3150
  2473  00106C                     u3151:
  2474  00106C  FFFF               	dw	65535	; assembler added errata NOP
  2475  00106E  EFAE  F007         	goto	l3885
  2476  001072                     u3150:
  2477  001072  FFFF               	dw	65535	; assembler added errata NOP
  2478  001074  5017               	movf	resetPosition@keepMovingY^0,w,c
  2479  001076  A4D8               	btfss	status,2,c
  2480  001078  EF40  F008         	goto	u3161
  2481  00107C  EF43  F008         	goto	u3160
  2482  001080                     u3161:
  2483  001080  FFFF               	dw	65535	; assembler added errata NOP
  2484  001082  EFAE  F007         	goto	l3885
  2485  001086                     u3160:
  2486  001086  FFFF               	dw	65535	; assembler added errata NOP
  2487  001088  5018               	movf	resetPosition@keepMovingZ^0,w,c
  2488  00108A  A4D8               	btfss	status,2,c
  2489  00108C  EF4A  F008         	goto	u3171
  2490  001090  EF4D  F008         	goto	u3170
  2491  001094                     u3171:
  2492  001094  FFFF               	dw	65535	; assembler added errata NOP
  2493  001096  EFAE  F007         	goto	l3885
  2494  00109A                     u3170:
  2495  00109A                     l116:
  2496  00109A  FFFF               	dw	65535	; assembler added errata NOP
  2497                           
  2498                           ;motors.c: 247:     T0CONbits.TMR0ON = 0;
  2499  00109C  9ED5               	bcf	213,7,c	;volatile
  2500                           
  2501                           ;motors.c: 248:     T2CONbits.TMR2ON = 0;
  2502  00109E  94CA               	bcf	202,2,c	;volatile
  2503  0010A0                     
  2504                           ;motors.c: 250:     TMR0 = 0;
  2505  0010A0  0E00               	movlw	0
  2506  0010A2  6ED7               	movwf	215,c	;volatile
  2507  0010A4  0E00               	movlw	0
  2508  0010A6  6ED6               	movwf	214,c	;volatile
  2509                           
  2510                           ;motors.c: 251:     TMR2 = 0;
  2511  0010A8  0E00               	movlw	0
  2512  0010AA  6ECC               	movwf	204,c	;volatile
  2513  0010AC                     
  2514                           ;motors.c: 254:     resetStep();
  2515  0010AC  ECEC  F011         	call	_resetStep	;wreg free
  2516  0010B0  0012               	return		;funcret
  2517  0010B2  FFFF               	dw	65535	; errata NOP
  2518  0010B4                     __end_of_resetPosition:
  2519                           	callstack 0
  2520                           
  2521 ;; *************** function _setStep *****************
  2522 ;; Defined at:
  2523 ;;		line 69 in file "motors.c"
  2524 ;; Parameters:    Size  Location     Type
  2525 ;;  step            1    wreg     unsigned char 
  2526 ;;  motor           1   17[COMRAM] unsigned char 
  2527 ;; Auto vars:     Size  Location     Type
  2528 ;;  step            1   20[COMRAM] unsigned char 
  2529 ;; Return value:  Size  Location     Type
  2530 ;;                  1    wreg      void 
  2531 ;; Registers used:
  2532 ;;		wreg, status,2, status,0
  2533 ;; Tracked objects:
  2534 ;;		On entry : 0/0
  2535 ;;		On exit  : 0/0
  2536 ;;		Unchanged: 0/0
  2537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2538 ;;      Params:         1       0       0       0       0       0       0
  2539 ;;      Locals:         1       0       0       0       0       0       0
  2540 ;;      Temps:          2       0       0       0       0       0       0
  2541 ;;      Totals:         4       0       0       0       0       0       0
  2542 ;;Total ram usage:        4 bytes
  2543 ;; Hardware stack levels used:    1
  2544 ;; Hardware stack levels required when called:    4
  2545 ;; This function calls:
  2546 ;;		Nothing
  2547 ;; This function is called by:
  2548 ;;		_resetPosition
  2549 ;; This function uses a non-reentrant model
  2550 ;;
  2551                           
  2552                           	psect	text9
  2553  001C2A                     __ptext9:
  2554                           	callstack 0
  2555  001C2A                     _setStep:
  2556                           	callstack 0
  2557  001C2A  FFFF               	dw	65535	; assembler added errata NOP
  2558                           
  2559                           ;incstack = 0
  2560                           ;setStep@step stored from wreg
  2561  001C2C  6E15               	movwf	setStep@step^0,c
  2562  001C2E                     
  2563                           ;motors.c: 70:     switch(motor){
  2564  001C2E  EF62  F00E         	goto	l3591
  2565  001C32                     l3583:
  2566  001C32  FFFF               	dw	65535	; assembler added errata NOP
  2567                           
  2568                           ;motors.c: 73:             LATAbits.LATA5 = (step & 0x01);
  2569  001C34  C015  F013         	movff	setStep@step,??_setStep
  2570  001C38  0E01               	movlw	1
  2571  001C3A  1613               	andwf	??_setStep^0,f,c
  2572  001C3C  3A13               	swapf	??_setStep^0,f,c
  2573  001C3E  4613               	rlncf	??_setStep^0,f,c
  2574  001C40  5089               	movf	137,w,c	;volatile
  2575  001C42  1813               	xorwf	??_setStep^0,w,c
  2576  001C44  0BDF               	andlw	-33
  2577  001C46  1813               	xorwf	??_setStep^0,w,c
  2578  001C48  6E89               	movwf	137,c	;volatile
  2579                           
  2580                           ;motors.c: 75:             LATBbits.LATB0 = (step & 0x02);
  2581  001C4A  C015  F013         	movff	setStep@step,??_setStep
  2582  001C4E  0E02               	movlw	2
  2583  001C50  1613               	andwf	??_setStep^0,f,c
  2584  001C52  508A               	movf	138,w,c	;volatile
  2585  001C54  1813               	xorwf	??_setStep^0,w,c
  2586  001C56  0BFE               	andlw	-2
  2587  001C58  1813               	xorwf	??_setStep^0,w,c
  2588  001C5A  6E8A               	movwf	138,c	;volatile
  2589                           
  2590                           ;motors.c: 76:             break;
  2591  001C5C  EF7D  F00E         	goto	l83
  2592  001C60                     l3585:
  2593  001C60  FFFF               	dw	65535	; assembler added errata NOP
  2594                           
  2595                           ;motors.c: 78:             LATBbits.LATB6 = (step & 0x01);
  2596  001C62  C015  F013         	movff	setStep@step,??_setStep
  2597  001C66  0E01               	movlw	1
  2598  001C68  1613               	andwf	??_setStep^0,f,c
  2599  001C6A  3A13               	swapf	??_setStep^0,f,c
  2600  001C6C  4613               	rlncf	??_setStep^0,f,c
  2601  001C6E  4613               	rlncf	??_setStep^0,f,c
  2602  001C70  508A               	movf	138,w,c	;volatile
  2603  001C72  1813               	xorwf	??_setStep^0,w,c
  2604  001C74  0BBF               	andlw	-65
  2605  001C76  1813               	xorwf	??_setStep^0,w,c
  2606  001C78  6E8A               	movwf	138,c	;volatile
  2607                           
  2608                           ;motors.c: 79:             LATBbits.LATB7 = (step & 0x02);
  2609  001C7A  C015  F013         	movff	setStep@step,??_setStep
  2610  001C7E  0E02               	movlw	2
  2611  001C80  1613               	andwf	??_setStep^0,f,c
  2612  001C82  3213               	rrcf	??_setStep^0,f,c
  2613  001C84  3213               	rrcf	??_setStep^0,f,c
  2614  001C86  508A               	movf	138,w,c	;volatile
  2615  001C88  1813               	xorwf	??_setStep^0,w,c
  2616  001C8A  0B7F               	andlw	-129
  2617  001C8C  1813               	xorwf	??_setStep^0,w,c
  2618  001C8E  6E8A               	movwf	138,c	;volatile
  2619                           
  2620                           ;motors.c: 80:             break;
  2621  001C90  EF7D  F00E         	goto	l83
  2622  001C94                     l3587:
  2623  001C94  FFFF               	dw	65535	; assembler added errata NOP
  2624                           
  2625                           ;motors.c: 82:             LATCbits.LATC4 = (step & 0x01);
  2626  001C96  C015  F013         	movff	setStep@step,??_setStep
  2627  001C9A  0E01               	movlw	1
  2628  001C9C  1613               	andwf	??_setStep^0,f,c
  2629  001C9E  3A13               	swapf	??_setStep^0,f,c
  2630  001CA0  508B               	movf	139,w,c	;volatile
  2631  001CA2  1813               	xorwf	??_setStep^0,w,c
  2632  001CA4  0BEF               	andlw	-17
  2633  001CA6  1813               	xorwf	??_setStep^0,w,c
  2634  001CA8  6E8B               	movwf	139,c	;volatile
  2635                           
  2636                           ;motors.c: 83:             LATCbits.LATC5 = (step & 0x02);
  2637  001CAA  C015  F013         	movff	setStep@step,??_setStep
  2638  001CAE  0E02               	movlw	2
  2639  001CB0  1613               	andwf	??_setStep^0,f,c
  2640  001CB2  3A13               	swapf	??_setStep^0,f,c
  2641  001CB4  4613               	rlncf	??_setStep^0,f,c
  2642  001CB6  508B               	movf	139,w,c	;volatile
  2643  001CB8  1813               	xorwf	??_setStep^0,w,c
  2644  001CBA  0BDF               	andlw	-33
  2645  001CBC  1813               	xorwf	??_setStep^0,w,c
  2646  001CBE  6E8B               	movwf	139,c	;volatile
  2647                           
  2648                           ;motors.c: 84:             break;
  2649  001CC0  EF7D  F00E         	goto	l83
  2650  001CC4                     l3591:
  2651  001CC4  FFFF               	dw	65535	; assembler added errata NOP
  2652  001CC6  5012               	movf	setStep@motor^0,w,c
  2653  001CC8  6E13               	movwf	??_setStep^0,c
  2654  001CCA  6A14               	clrf	(??_setStep+1)^0,c
  2655                           
  2656                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2657                           ; Switch size 1, requested type "simple"
  2658                           ; Number of cases is 1, Range of values is 0 to 0
  2659                           ; switch strategies available:
  2660                           ; Name         Instructions Cycles
  2661                           ; simple_byte            4     3 (average)
  2662                           ;	Chosen strategy is simple_byte
  2663  001CCC  5014               	movf	(??_setStep+1)^0,w,c
  2664  001CCE  0A00               	xorlw	0	; case 0
  2665  001CD0  B4D8               	btfsc	status,2,c
  2666  001CD2  EF6D  F00E         	goto	l4383
  2667  001CD6  EF7D  F00E         	goto	l83
  2668  001CDA                     l4383:
  2669  001CDA  FFFF               	dw	65535	; assembler added errata NOP
  2670                           
  2671                           ; Switch size 1, requested type "simple"
  2672                           ; Number of cases is 3, Range of values is 0 to 2
  2673                           ; switch strategies available:
  2674                           ; Name         Instructions Cycles
  2675                           ; simple_byte           10     6 (average)
  2676                           ;	Chosen strategy is simple_byte
  2677  001CDC  5013               	movf	??_setStep^0,w,c
  2678  001CDE  0A00               	xorlw	0	; case 0
  2679  001CE0  B4D8               	btfsc	status,2,c
  2680  001CE2  EF19  F00E         	goto	l3583
  2681  001CE6  0A01               	xorlw	1	; case 1
  2682  001CE8  B4D8               	btfsc	status,2,c
  2683  001CEA  EF30  F00E         	goto	l3585
  2684  001CEE  0A03               	xorlw	3	; case 2
  2685  001CF0  B4D8               	btfsc	status,2,c
  2686  001CF2  EF4A  F00E         	goto	l3587
  2687  001CF6  EF7D  F00E         	goto	l83
  2688  001CFA                     l83:
  2689  001CFA  FFFF               	dw	65535	; assembler added errata NOP
  2690  001CFC  0012               	return		;funcret
  2691  001CFE  FFFF               	dw	65535	; errata NOP
  2692  001D00                     __end_of_setStep:
  2693                           	callstack 0
  2694                           
  2695 ;; *************** function _setDecay *****************
  2696 ;; Defined at:
  2697 ;;		line 138 in file "motors.c"
  2698 ;; Parameters:    Size  Location     Type
  2699 ;;  decay           1    wreg     unsigned char 
  2700 ;;  motor           1   17[COMRAM] unsigned char 
  2701 ;; Auto vars:     Size  Location     Type
  2702 ;;  decay           1   20[COMRAM] unsigned char 
  2703 ;; Return value:  Size  Location     Type
  2704 ;;                  1    wreg      void 
  2705 ;; Registers used:
  2706 ;;		wreg, status,2, status,0
  2707 ;; Tracked objects:
  2708 ;;		On entry : 0/0
  2709 ;;		On exit  : 0/0
  2710 ;;		Unchanged: 0/0
  2711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2712 ;;      Params:         1       0       0       0       0       0       0
  2713 ;;      Locals:         1       0       0       0       0       0       0
  2714 ;;      Temps:          2       0       0       0       0       0       0
  2715 ;;      Totals:         4       0       0       0       0       0       0
  2716 ;;Total ram usage:        4 bytes
  2717 ;; Hardware stack levels used:    1
  2718 ;; Hardware stack levels required when called:    4
  2719 ;; This function calls:
  2720 ;;		Nothing
  2721 ;; This function is called by:
  2722 ;;		_resetPosition
  2723 ;; This function uses a non-reentrant model
  2724 ;;
  2725                           
  2726                           	psect	text10
  2727  001FC2                     __ptext10:
  2728                           	callstack 0
  2729  001FC2                     _setDecay:
  2730                           	callstack 0
  2731  001FC2  FFFF               	dw	65535	; assembler added errata NOP
  2732                           
  2733                           ;incstack = 0
  2734                           ;setDecay@decay stored from wreg
  2735  001FC4  6E15               	movwf	setDecay@decay^0,c
  2736  001FC6                     
  2737                           ;motors.c: 139:     switch(motor){
  2738  001FC6  EFFD  F00F         	goto	l3623
  2739  001FCA                     l3615:
  2740  001FCA  FFFF               	dw	65535	; assembler added errata NOP
  2741                           
  2742                           ;motors.c: 141:             LATBbits.LATB2 = decay;
  2743  001FCC  B015               	btfsc	setDecay@decay^0,0,c
  2744  001FCE  D002               	bra	u2755
  2745  001FD0  948A               	bcf	138,2,c	;volatile
  2746  001FD2  D001               	bra	u2756
  2747  001FD4                     u2755:
  2748  001FD4  848A               	bsf	138,2,c	;volatile
  2749  001FD6                     u2756:
  2750                           
  2751                           ;motors.c: 142:             break;
  2752  001FD6  EF18  F010         	goto	l110
  2753  001FDA                     l3617:
  2754  001FDA  FFFF               	dw	65535	; assembler added errata NOP
  2755                           
  2756                           ;motors.c: 144:             LATCbits.LATC0 = decay;
  2757  001FDC  B015               	btfsc	setDecay@decay^0,0,c
  2758  001FDE  D002               	bra	u2765
  2759  001FE0  908B               	bcf	139,0,c	;volatile
  2760  001FE2  D001               	bra	u2766
  2761  001FE4                     u2765:
  2762  001FE4  808B               	bsf	139,0,c	;volatile
  2763  001FE6                     u2766:
  2764                           
  2765                           ;motors.c: 145:             break;
  2766  001FE6  EF18  F010         	goto	l110
  2767  001FEA                     l3619:
  2768  001FEA  FFFF               	dw	65535	; assembler added errata NOP
  2769                           
  2770                           ;motors.c: 147:             LATDbits.LATD0 = decay;
  2771  001FEC  B015               	btfsc	setDecay@decay^0,0,c
  2772  001FEE  D002               	bra	u2775
  2773  001FF0  908C               	bcf	140,0,c	;volatile
  2774  001FF2  D001               	bra	u2776
  2775  001FF4                     u2775:
  2776  001FF4  808C               	bsf	140,0,c	;volatile
  2777  001FF6                     u2776:
  2778                           
  2779                           ;motors.c: 148:             break;
  2780  001FF6  EF18  F010         	goto	l110
  2781  001FFA                     l3623:
  2782  001FFA  FFFF               	dw	65535	; assembler added errata NOP
  2783  001FFC  5012               	movf	setDecay@motor^0,w,c
  2784  001FFE  6E13               	movwf	??_setDecay^0,c
  2785  002000  6A14               	clrf	(??_setDecay+1)^0,c
  2786                           
  2787                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2788                           ; Switch size 1, requested type "simple"
  2789                           ; Number of cases is 1, Range of values is 0 to 0
  2790                           ; switch strategies available:
  2791                           ; Name         Instructions Cycles
  2792                           ; simple_byte            4     3 (average)
  2793                           ;	Chosen strategy is simple_byte
  2794  002002  5014               	movf	(??_setDecay+1)^0,w,c
  2795  002004  0A00               	xorlw	0	; case 0
  2796  002006  B4D8               	btfsc	status,2,c
  2797  002008  EF08  F010         	goto	l4385
  2798  00200C  EF18  F010         	goto	l110
  2799  002010                     l4385:
  2800  002010  FFFF               	dw	65535	; assembler added errata NOP
  2801                           
  2802                           ; Switch size 1, requested type "simple"
  2803                           ; Number of cases is 3, Range of values is 0 to 2
  2804                           ; switch strategies available:
  2805                           ; Name         Instructions Cycles
  2806                           ; simple_byte           10     6 (average)
  2807                           ;	Chosen strategy is simple_byte
  2808  002012  5013               	movf	??_setDecay^0,w,c
  2809  002014  0A00               	xorlw	0	; case 0
  2810  002016  B4D8               	btfsc	status,2,c
  2811  002018  EFE5  F00F         	goto	l3615
  2812  00201C  0A01               	xorlw	1	; case 1
  2813  00201E  B4D8               	btfsc	status,2,c
  2814  002020  EFED  F00F         	goto	l3617
  2815  002024  0A03               	xorlw	3	; case 2
  2816  002026  B4D8               	btfsc	status,2,c
  2817  002028  EFF5  F00F         	goto	l3619
  2818  00202C  EF18  F010         	goto	l110
  2819  002030                     l110:
  2820  002030  FFFF               	dw	65535	; assembler added errata NOP
  2821  002032  0012               	return		;funcret
  2822  002034  FFFF               	dw	65535	; errata NOP
  2823  002036                     __end_of_setDecay:
  2824                           	callstack 0
  2825                           
  2826 ;; *************** function _enableMotor *****************
  2827 ;; Defined at:
  2828 ;;		line 96 in file "motors.c"
  2829 ;; Parameters:    Size  Location     Type
  2830 ;;  enable          1    wreg     unsigned char 
  2831 ;;  motor           1   17[COMRAM] unsigned char 
  2832 ;; Auto vars:     Size  Location     Type
  2833 ;;  enable          1   20[COMRAM] unsigned char 
  2834 ;; Return value:  Size  Location     Type
  2835 ;;                  1    wreg      void 
  2836 ;; Registers used:
  2837 ;;		wreg, status,2, status,0
  2838 ;; Tracked objects:
  2839 ;;		On entry : 0/0
  2840 ;;		On exit  : 0/0
  2841 ;;		Unchanged: 0/0
  2842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2843 ;;      Params:         1       0       0       0       0       0       0
  2844 ;;      Locals:         1       0       0       0       0       0       0
  2845 ;;      Temps:          2       0       0       0       0       0       0
  2846 ;;      Totals:         4       0       0       0       0       0       0
  2847 ;;Total ram usage:        4 bytes
  2848 ;; Hardware stack levels used:    1
  2849 ;; Hardware stack levels required when called:    4
  2850 ;; This function calls:
  2851 ;;		Nothing
  2852 ;; This function is called by:
  2853 ;;		_resetPosition
  2854 ;;		_main
  2855 ;; This function uses a non-reentrant model
  2856 ;;
  2857                           
  2858                           	psect	text11
  2859  002036                     __ptext11:
  2860                           	callstack 0
  2861  002036                     _enableMotor:
  2862                           	callstack 0
  2863  002036  FFFF               	dw	65535	; assembler added errata NOP
  2864                           
  2865                           ;incstack = 0
  2866                           ;enableMotor@enable stored from wreg
  2867  002038  6E15               	movwf	enableMotor@enable^0,c
  2868  00203A                     
  2869                           ;motors.c: 97:     switch(motor){
  2870  00203A  EF37  F010         	goto	l3607
  2871  00203E                     l3599:
  2872  00203E  FFFF               	dw	65535	; assembler added errata NOP
  2873                           
  2874                           ;motors.c: 99:             LATAbits.LATA3 = enable;
  2875  002040  B015               	btfsc	enableMotor@enable^0,0,c
  2876  002042  D002               	bra	u2725
  2877  002044  9689               	bcf	137,3,c	;volatile
  2878  002046  D001               	bra	u2726
  2879  002048                     u2725:
  2880  002048  8689               	bsf	137,3,c	;volatile
  2881  00204A                     u2726:
  2882                           
  2883                           ;motors.c: 100:             break;
  2884  00204A  EF52  F010         	goto	l92
  2885  00204E                     l3601:
  2886  00204E  FFFF               	dw	65535	; assembler added errata NOP
  2887                           
  2888                           ;motors.c: 102:             LATBbits.LATB5 = enable;
  2889  002050  B015               	btfsc	enableMotor@enable^0,0,c
  2890  002052  D002               	bra	u2735
  2891  002054  9A8A               	bcf	138,5,c	;volatile
  2892  002056  D001               	bra	u2736
  2893  002058                     u2735:
  2894  002058  8A8A               	bsf	138,5,c	;volatile
  2895  00205A                     u2736:
  2896                           
  2897                           ;motors.c: 103:             break;
  2898  00205A  EF52  F010         	goto	l92
  2899  00205E                     l3603:
  2900  00205E  FFFF               	dw	65535	; assembler added errata NOP
  2901                           
  2902                           ;motors.c: 105:             LATCbits.LATC3 = enable;
  2903  002060  B015               	btfsc	enableMotor@enable^0,0,c
  2904  002062  D002               	bra	u2745
  2905  002064  968B               	bcf	139,3,c	;volatile
  2906  002066  D001               	bra	u2746
  2907  002068                     u2745:
  2908  002068  868B               	bsf	139,3,c	;volatile
  2909  00206A                     u2746:
  2910                           
  2911                           ;motors.c: 106:             break;
  2912  00206A  EF52  F010         	goto	l92
  2913  00206E                     l3607:
  2914  00206E  FFFF               	dw	65535	; assembler added errata NOP
  2915  002070  5012               	movf	enableMotor@motor^0,w,c
  2916  002072  6E13               	movwf	??_enableMotor^0,c
  2917  002074  6A14               	clrf	(??_enableMotor+1)^0,c
  2918                           
  2919                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2920                           ; Switch size 1, requested type "simple"
  2921                           ; Number of cases is 1, Range of values is 0 to 0
  2922                           ; switch strategies available:
  2923                           ; Name         Instructions Cycles
  2924                           ; simple_byte            4     3 (average)
  2925                           ;	Chosen strategy is simple_byte
  2926  002076  5014               	movf	(??_enableMotor+1)^0,w,c
  2927  002078  0A00               	xorlw	0	; case 0
  2928  00207A  B4D8               	btfsc	status,2,c
  2929  00207C  EF42  F010         	goto	l4387
  2930  002080  EF52  F010         	goto	l92
  2931  002084                     l4387:
  2932  002084  FFFF               	dw	65535	; assembler added errata NOP
  2933                           
  2934                           ; Switch size 1, requested type "simple"
  2935                           ; Number of cases is 3, Range of values is 0 to 2
  2936                           ; switch strategies available:
  2937                           ; Name         Instructions Cycles
  2938                           ; simple_byte           10     6 (average)
  2939                           ;	Chosen strategy is simple_byte
  2940  002086  5013               	movf	??_enableMotor^0,w,c
  2941  002088  0A00               	xorlw	0	; case 0
  2942  00208A  B4D8               	btfsc	status,2,c
  2943  00208C  EF1F  F010         	goto	l3599
  2944  002090  0A01               	xorlw	1	; case 1
  2945  002092  B4D8               	btfsc	status,2,c
  2946  002094  EF27  F010         	goto	l3601
  2947  002098  0A03               	xorlw	3	; case 2
  2948  00209A  B4D8               	btfsc	status,2,c
  2949  00209C  EF2F  F010         	goto	l3603
  2950  0020A0  EF52  F010         	goto	l92
  2951  0020A4                     l92:
  2952  0020A4  FFFF               	dw	65535	; assembler added errata NOP
  2953  0020A6  0012               	return		;funcret
  2954  0020A8  FFFF               	dw	65535	; errata NOP
  2955  0020AA                     __end_of_enableMotor:
  2956                           	callstack 0
  2957                           
  2958 ;; *************** function _resetNewSequence *****************
  2959 ;; Defined at:
  2960 ;;		line 112 in file "usart.c"
  2961 ;; Parameters:    Size  Location     Type
  2962 ;;		None
  2963 ;; Auto vars:     Size  Location     Type
  2964 ;;		None
  2965 ;; Return value:  Size  Location     Type
  2966 ;;                  1    wreg      void 
  2967 ;; Registers used:
  2968 ;;		wreg, status,2
  2969 ;; Tracked objects:
  2970 ;;		On entry : 0/0
  2971 ;;		On exit  : 0/0
  2972 ;;		Unchanged: 0/0
  2973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2974 ;;      Params:         0       0       0       0       0       0       0
  2975 ;;      Locals:         0       0       0       0       0       0       0
  2976 ;;      Temps:          0       0       0       0       0       0       0
  2977 ;;      Totals:         0       0       0       0       0       0       0
  2978 ;;Total ram usage:        0 bytes
  2979 ;; Hardware stack levels used:    1
  2980 ;; Hardware stack levels required when called:    4
  2981 ;; This function calls:
  2982 ;;		Nothing
  2983 ;; This function is called by:
  2984 ;;		_main
  2985 ;; This function uses a non-reentrant model
  2986 ;;
  2987                           
  2988                           	psect	text12
  2989  0023BA                     __ptext12:
  2990                           	callstack 0
  2991  0023BA                     _resetNewSequence:
  2992                           	callstack 0
  2993  0023BA  FFFF               	dw	65535	; assembler added errata NOP
  2994  0023BC                     
  2995                           ;usart.c: 113:     _newSequence = 0;
  2996  0023BC  0E00               	movlw	0
  2997  0023BE  6E5F               	movwf	__newSequence^0,c
  2998  0023C0  0012               	return		;funcret
  2999  0023C2  FFFF               	dw	65535	; errata NOP
  3000  0023C4                     __end_of_resetNewSequence:
  3001                           	callstack 0
  3002                           
  3003 ;; *************** function _reduceSeq *****************
  3004 ;; Defined at:
  3005 ;;		line 89 in file "usart.c"
  3006 ;; Parameters:    Size  Location     Type
  3007 ;;		None
  3008 ;; Auto vars:     Size  Location     Type
  3009 ;;		None
  3010 ;; Return value:  Size  Location     Type
  3011 ;;                  1    wreg      void 
  3012 ;; Registers used:
  3013 ;;		status,2, status,0
  3014 ;; Tracked objects:
  3015 ;;		On entry : 0/0
  3016 ;;		On exit  : 0/0
  3017 ;;		Unchanged: 0/0
  3018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3019 ;;      Params:         0       0       0       0       0       0       0
  3020 ;;      Locals:         0       0       0       0       0       0       0
  3021 ;;      Temps:          0       0       0       0       0       0       0
  3022 ;;      Totals:         0       0       0       0       0       0       0
  3023 ;;Total ram usage:        0 bytes
  3024 ;; Hardware stack levels used:    1
  3025 ;; Hardware stack levels required when called:    4
  3026 ;; This function calls:
  3027 ;;		Nothing
  3028 ;; This function is called by:
  3029 ;;		_main
  3030 ;; This function uses a non-reentrant model
  3031 ;;
  3032                           
  3033                           	psect	text13
  3034  002400                     __ptext13:
  3035                           	callstack 0
  3036  002400                     _reduceSeq:
  3037                           	callstack 0
  3038  002400  FFFF               	dw	65535	; assembler added errata NOP
  3039  002402                     
  3040                           ;usart.c: 90:     dataCounter--;
  3041  002402  0661               	decf	_dataCounter^0,f,c
  3042  002404  0012               	return		;funcret
  3043  002406  FFFF               	dw	65535	; errata NOP
  3044  002408                     __end_of_reduceSeq:
  3045                           	callstack 0
  3046                           
  3047 ;; *************** function _readSeq *****************
  3048 ;; Defined at:
  3049 ;;		line 96 in file "usart.c"
  3050 ;; Parameters:    Size  Location     Type
  3051 ;;		None
  3052 ;; Auto vars:     Size  Location     Type
  3053 ;;		None
  3054 ;; Return value:  Size  Location     Type
  3055 ;;                  1    wreg      unsigned char 
  3056 ;; Registers used:
  3057 ;;		wreg, status,2
  3058 ;; Tracked objects:
  3059 ;;		On entry : 0/0
  3060 ;;		On exit  : 0/0
  3061 ;;		Unchanged: 0/0
  3062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3063 ;;      Params:         0       0       0       0       0       0       0
  3064 ;;      Locals:         0       0       0       0       0       0       0
  3065 ;;      Temps:          0       0       0       0       0       0       0
  3066 ;;      Totals:         0       0       0       0       0       0       0
  3067 ;;Total ram usage:        0 bytes
  3068 ;; Hardware stack levels used:    1
  3069 ;; Hardware stack levels required when called:    4
  3070 ;; This function calls:
  3071 ;;		Nothing
  3072 ;; This function is called by:
  3073 ;;		_main
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077                           	psect	text14
  3078  002408                     __ptext14:
  3079                           	callstack 0
  3080  002408                     _readSeq:
  3081                           	callstack 0
  3082  002408  FFFF               	dw	65535	; assembler added errata NOP
  3083  00240A                     
  3084                           ;usart.c: 97:     return dataCounter;
  3085  00240A  5061               	movf	_dataCounter^0,w,c
  3086  00240C  0012               	return		;funcret
  3087  00240E  FFFF               	dw	65535	; errata NOP
  3088  002410                     __end_of_readSeq:
  3089                           	callstack 0
  3090                           
  3091 ;; *************** function _newSequence *****************
  3092 ;; Defined at:
  3093 ;;		line 104 in file "usart.c"
  3094 ;; Parameters:    Size  Location     Type
  3095 ;;		None
  3096 ;; Auto vars:     Size  Location     Type
  3097 ;;		None
  3098 ;; Return value:  Size  Location     Type
  3099 ;;                  1    wreg      unsigned char 
  3100 ;; Registers used:
  3101 ;;		wreg, status,2
  3102 ;; Tracked objects:
  3103 ;;		On entry : 0/0
  3104 ;;		On exit  : 0/0
  3105 ;;		Unchanged: 0/0
  3106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3107 ;;      Params:         0       0       0       0       0       0       0
  3108 ;;      Locals:         0       0       0       0       0       0       0
  3109 ;;      Temps:          0       0       0       0       0       0       0
  3110 ;;      Totals:         0       0       0       0       0       0       0
  3111 ;;Total ram usage:        0 bytes
  3112 ;; Hardware stack levels used:    1
  3113 ;; Hardware stack levels required when called:    4
  3114 ;; This function calls:
  3115 ;;		Nothing
  3116 ;; This function is called by:
  3117 ;;		_main
  3118 ;; This function uses a non-reentrant model
  3119 ;;
  3120                           
  3121                           	psect	text15
  3122  002410                     __ptext15:
  3123                           	callstack 0
  3124  002410                     _newSequence:
  3125                           	callstack 0
  3126  002410  FFFF               	dw	65535	; assembler added errata NOP
  3127  002412                     
  3128                           ;usart.c: 105:     return _newSequence;
  3129  002412  505F               	movf	__newSequence^0,w,c
  3130  002414  0012               	return		;funcret
  3131  002416  FFFF               	dw	65535	; errata NOP
  3132  002418                     __end_of_newSequence:
  3133                           	callstack 0
  3134                           
  3135 ;; *************** function _interruptInit *****************
  3136 ;; Defined at:
  3137 ;;		line 107 in file "main.c"
  3138 ;; Parameters:    Size  Location     Type
  3139 ;;		None
  3140 ;; Auto vars:     Size  Location     Type
  3141 ;;		None
  3142 ;; Return value:  Size  Location     Type
  3143 ;;                  1    wreg      void 
  3144 ;; Registers used:
  3145 ;;		None
  3146 ;; Tracked objects:
  3147 ;;		On entry : 0/0
  3148 ;;		On exit  : 0/0
  3149 ;;		Unchanged: 0/0
  3150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3151 ;;      Params:         0       0       0       0       0       0       0
  3152 ;;      Locals:         0       0       0       0       0       0       0
  3153 ;;      Temps:          0       0       0       0       0       0       0
  3154 ;;      Totals:         0       0       0       0       0       0       0
  3155 ;;Total ram usage:        0 bytes
  3156 ;; Hardware stack levels used:    1
  3157 ;; Hardware stack levels required when called:    4
  3158 ;; This function calls:
  3159 ;;		Nothing
  3160 ;; This function is called by:
  3161 ;;		_main
  3162 ;; This function uses a non-reentrant model
  3163 ;;
  3164                           
  3165                           	psect	text16
  3166  002272                     __ptext16:
  3167                           	callstack 0
  3168  002272                     _interruptInit:
  3169                           	callstack 0
  3170  002272  FFFF               	dw	65535	; assembler added errata NOP
  3171  002274                     
  3172                           ;main.c: 109:     if(!INTCONbits.GIE){
  3173  002274  BEF2               	btfsc	242,7,c	;volatile
  3174  002276  EF3F  F011         	goto	u3181
  3175  00227A  EF42  F011         	goto	u3180
  3176  00227E                     u3181:
  3177  00227E  FFFF               	dw	65535	; assembler added errata NOP
  3178  002280  EF44  F011         	goto	l311
  3179  002284                     u3180:
  3180  002284  FFFF               	dw	65535	; assembler added errata NOP
  3181  002286                     
  3182                           ;main.c: 110:         INTCONbits.GIE = 1;
  3183  002286  8EF2               	bsf	242,7,c	;volatile
  3184  002288                     l311:
  3185  002288  FFFF               	dw	65535	; assembler added errata NOP
  3186                           
  3187                           ;main.c: 112:     if(!INTCONbits.PEIE){
  3188  00228A  BCF2               	btfsc	242,6,c	;volatile
  3189  00228C  EF4A  F011         	goto	u3191
  3190  002290  EF4D  F011         	goto	u3190
  3191  002294                     u3191:
  3192  002294  FFFF               	dw	65535	; assembler added errata NOP
  3193  002296  EF4F  F011         	goto	l312
  3194  00229A                     u3190:
  3195  00229A  FFFF               	dw	65535	; assembler added errata NOP
  3196  00229C                     
  3197                           ;main.c: 113:         INTCONbits.PEIE = 1;
  3198  00229C  8CF2               	bsf	242,6,c	;volatile
  3199  00229E                     l312:
  3200  00229E  FFFF               	dw	65535	; assembler added errata NOP
  3201                           
  3202                           ;main.c: 117:     RCONbits.IPEN = 1;
  3203  0022A0  8ED0               	bsf	208,7,c	;volatile
  3204                           
  3205                           ;main.c: 118:     INTCONbits.T0IE = 1;
  3206  0022A2  8AF2               	bsf	242,5,c	;volatile
  3207                           
  3208                           ;main.c: 119:     PIE1bits.TMR2IE = 1;
  3209  0022A4  829D               	bsf	157,1,c	;volatile
  3210                           
  3211                           ;main.c: 120:     PIE1bits.RC1IE = 1;
  3212  0022A6  8A9D               	bsf	157,5,c	;volatile
  3213  0022A8  0012               	return		;funcret
  3214  0022AA  FFFF               	dw	65535	; errata NOP
  3215  0022AC                     __end_of_interruptInit:
  3216                           	callstack 0
  3217                           
  3218 ;; *************** function _initPinMotors *****************
  3219 ;; Defined at:
  3220 ;;		line 44 in file "motors.c"
  3221 ;; Parameters:    Size  Location     Type
  3222 ;;		None
  3223 ;; Auto vars:     Size  Location     Type
  3224 ;;		None
  3225 ;; Return value:  Size  Location     Type
  3226 ;;                  1    wreg      void 
  3227 ;; Registers used:
  3228 ;;		wreg, status,2, status,0
  3229 ;; Tracked objects:
  3230 ;;		On entry : 0/0
  3231 ;;		On exit  : 0/0
  3232 ;;		Unchanged: 0/0
  3233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3234 ;;      Params:         0       0       0       0       0       0       0
  3235 ;;      Locals:         0       0       0       0       0       0       0
  3236 ;;      Temps:          0       0       0       0       0       0       0
  3237 ;;      Totals:         0       0       0       0       0       0       0
  3238 ;;Total ram usage:        0 bytes
  3239 ;; Hardware stack levels used:    1
  3240 ;; Hardware stack levels required when called:    4
  3241 ;; This function calls:
  3242 ;;		Nothing
  3243 ;; This function is called by:
  3244 ;;		_main
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           	psect	text17
  3249  0022AC                     __ptext17:
  3250                           	callstack 0
  3251  0022AC                     _initPinMotors:
  3252                           	callstack 0
  3253  0022AC  FFFF               	dw	65535	; assembler added errata NOP
  3254  0022AE                     
  3255                           ;motors.c: 46:     ADCON1bits.PCFG = 0x06;
  3256  0022AE  50C1               	movf	193,w,c	;volatile
  3257  0022B0  0BF0               	andlw	-16
  3258  0022B2  0906               	iorlw	6
  3259  0022B4  6EC1               	movwf	193,c	;volatile
  3260  0022B6                     
  3261                           ;motors.c: 47:     TRISA &= 0b11010001;
  3262  0022B6  0ED1               	movlw	209
  3263  0022B8  1692               	andwf	146,f,c	;volatile
  3264  0022BA                     
  3265                           ;motors.c: 49:     TRISB &= 0b00000010;
  3266  0022BA  0E02               	movlw	2
  3267  0022BC  1693               	andwf	147,f,c	;volatile
  3268  0022BE                     
  3269                           ;motors.c: 50:     TRISC &= 0b11000000;
  3270  0022BE  0EC0               	movlw	192
  3271  0022C0  1694               	andwf	148,f,c	;volatile
  3272  0022C2                     
  3273                           ;motors.c: 51:     TRISD &= 0b11000000;
  3274  0022C2  0EC0               	movlw	192
  3275  0022C4  1695               	andwf	149,f,c	;volatile
  3276  0022C6                     
  3277                           ;motors.c: 54:     TRISEbits.TRISE0 = 1;
  3278  0022C6  8096               	bsf	150,0,c	;volatile
  3279  0022C8                     
  3280                           ;motors.c: 55:     TRISEbits.TRISE1 = 1;
  3281  0022C8  8296               	bsf	150,1,c	;volatile
  3282  0022CA                     
  3283                           ;motors.c: 56:     TRISEbits.TRISE2 = 1;
  3284  0022CA  8496               	bsf	150,2,c	;volatile
  3285  0022CC                     
  3286                           ;motors.c: 59:     TRISDbits.TRISD7 = 1;
  3287  0022CC  8E95               	bsf	149,7,c	;volatile
  3288  0022CE  0012               	return		;funcret
  3289  0022D0  FFFF               	dw	65535	; errata NOP
  3290  0022D2                     __end_of_initPinMotors:
  3291                           	callstack 0
  3292                           
  3293 ;; *************** function _initADC *****************
  3294 ;; Defined at:
  3295 ;;		line 18 in file "adc.c"
  3296 ;; Parameters:    Size  Location     Type
  3297 ;;		None
  3298 ;; Auto vars:     Size  Location     Type
  3299 ;;		None
  3300 ;; Return value:  Size  Location     Type
  3301 ;;                  1    wreg      void 
  3302 ;; Registers used:
  3303 ;;		wreg, status,2
  3304 ;; Tracked objects:
  3305 ;;		On entry : 0/0
  3306 ;;		On exit  : 0/0
  3307 ;;		Unchanged: 0/0
  3308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3309 ;;      Params:         0       0       0       0       0       0       0
  3310 ;;      Locals:         0       0       0       0       0       0       0
  3311 ;;      Temps:          0       0       0       0       0       0       0
  3312 ;;      Totals:         0       0       0       0       0       0       0
  3313 ;;Total ram usage:        0 bytes
  3314 ;; Hardware stack levels used:    1
  3315 ;; Hardware stack levels required when called:    4
  3316 ;; This function calls:
  3317 ;;		Nothing
  3318 ;; This function is called by:
  3319 ;;		_main
  3320 ;; This function uses a non-reentrant model
  3321 ;;
  3322                           
  3323                           	psect	text18
  3324  0022D2                     __ptext18:
  3325                           	callstack 0
  3326  0022D2                     _initADC:
  3327                           	callstack 0
  3328  0022D2  FFFF               	dw	65535	; assembler added errata NOP
  3329  0022D4                     
  3330                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  3331  0022D4  50C2               	movf	194,w,c	;volatile
  3332  0022D6  0B3F               	andlw	-193
  3333  0022D8  0940               	iorlw	64
  3334  0022DA  6EC2               	movwf	194,c	;volatile
  3335  0022DC                     
  3336                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  3337  0022DC  8CC1               	bsf	193,6,c	;volatile
  3338                           
  3339                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  3340  0022DE  0EC7               	movlw	-57
  3341  0022E0  16C2               	andwf	194,f,c	;volatile
  3342  0022E2                     
  3343                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  3344  0022E2  94C2               	bcf	194,2,c	;volatile
  3345  0022E4                     
  3346                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  3347  0022E4  90C2               	bcf	194,0,c	;volatile
  3348  0022E6                     
  3349                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  3350  0022E6  9EC1               	bcf	193,7,c	;volatile
  3351                           
  3352                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  3353  0022E8  50C1               	movf	193,w,c	;volatile
  3354  0022EA  0BF0               	andlw	-16
  3355  0022EC  090E               	iorlw	14
  3356  0022EE  6EC1               	movwf	193,c	;volatile
  3357  0022F0                     
  3358                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  3359  0022F0  8C9D               	bsf	157,6,c	;volatile
  3360  0022F2                     
  3361                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  3362  0022F2  8C9F               	bsf	159,6,c	;volatile
  3363  0022F4  0012               	return		;funcret
  3364  0022F6  FFFF               	dw	65535	; errata NOP
  3365  0022F8                     __end_of_initADC:
  3366                           	callstack 0
  3367                           
  3368 ;; *************** function _getNewSequence *****************
  3369 ;; Defined at:
  3370 ;;		line 213 in file "usart.c"
  3371 ;; Parameters:    Size  Location     Type
  3372 ;;		None
  3373 ;; Auto vars:     Size  Location     Type
  3374 ;;		None
  3375 ;; Return value:  Size  Location     Type
  3376 ;;                  2   17[COMRAM] PTR struct .
  3377 ;; Registers used:
  3378 ;;		wreg, status,2, status,0
  3379 ;; Tracked objects:
  3380 ;;		On entry : 0/0
  3381 ;;		On exit  : 0/0
  3382 ;;		Unchanged: 0/0
  3383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3384 ;;      Params:         2       0       0       0       0       0       0
  3385 ;;      Locals:         0       0       0       0       0       0       0
  3386 ;;      Temps:          0       0       0       0       0       0       0
  3387 ;;      Totals:         2       0       0       0       0       0       0
  3388 ;;Total ram usage:        2 bytes
  3389 ;; Hardware stack levels used:    1
  3390 ;; Hardware stack levels required when called:    4
  3391 ;; This function calls:
  3392 ;;		Nothing
  3393 ;; This function is called by:
  3394 ;;		_main
  3395 ;; This function uses a non-reentrant model
  3396 ;;
  3397                           
  3398                           	psect	text19
  3399  002350                     __ptext19:
  3400                           	callstack 0
  3401  002350                     _getNewSequence:
  3402                           	callstack 0
  3403  002350  FFFF               	dw	65535	; assembler added errata NOP
  3404  002352                     
  3405                           ;usart.c: 214:     return(&newSequenceData);
  3406  002352  0EEC               	movlw	low _newSequenceData
  3407  002354  6E12               	movwf	?_getNewSequence^0,c
  3408  002356  0E00               	movlw	high _newSequenceData
  3409  002358  6E13               	movwf	(?_getNewSequence+1)^0,c
  3410  00235A  0012               	return		;funcret
  3411  00235C  FFFF               	dw	65535	; errata NOP
  3412  00235E                     __end_of_getNewSequence:
  3413                           	callstack 0
  3414                           
  3415 ;; *************** function _fatalError *****************
  3416 ;; Defined at:
  3417 ;;		line 100 in file "usart.c"
  3418 ;; Parameters:    Size  Location     Type
  3419 ;;		None
  3420 ;; Auto vars:     Size  Location     Type
  3421 ;;		None
  3422 ;; Return value:  Size  Location     Type
  3423 ;;                  1    wreg      unsigned char 
  3424 ;; Registers used:
  3425 ;;		wreg, status,2
  3426 ;; Tracked objects:
  3427 ;;		On entry : 0/0
  3428 ;;		On exit  : 0/0
  3429 ;;		Unchanged: 0/0
  3430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3431 ;;      Params:         0       0       0       0       0       0       0
  3432 ;;      Locals:         0       0       0       0       0       0       0
  3433 ;;      Temps:          0       0       0       0       0       0       0
  3434 ;;      Totals:         0       0       0       0       0       0       0
  3435 ;;Total ram usage:        0 bytes
  3436 ;; Hardware stack levels used:    1
  3437 ;; Hardware stack levels required when called:    4
  3438 ;; This function calls:
  3439 ;;		Nothing
  3440 ;; This function is called by:
  3441 ;;		_main
  3442 ;; This function uses a non-reentrant model
  3443 ;;
  3444                           
  3445                           	psect	text20
  3446  002418                     __ptext20:
  3447                           	callstack 0
  3448  002418                     _fatalError:
  3449                           	callstack 0
  3450  002418  FFFF               	dw	65535	; assembler added errata NOP
  3451  00241A                     
  3452                           ;usart.c: 101:     return _fatalError;
  3453  00241A  5060               	movf	__fatalError^0,w,c
  3454  00241C  0012               	return		;funcret
  3455  00241E  FFFF               	dw	65535	; errata NOP
  3456  002420                     __end_of_fatalError:
  3457                           	callstack 0
  3458                           
  3459 ;; *************** function _executeData *****************
  3460 ;; Defined at:
  3461 ;;		line 130 in file "main.c"
  3462 ;; Parameters:    Size  Location     Type
  3463 ;;		None
  3464 ;; Auto vars:     Size  Location     Type
  3465 ;;  data            2    8[BANK0 ] PTR struct .
  3466 ;;		 -> dataSequence(20), 
  3467 ;;  errCode         1    7[BANK0 ] unsigned char 
  3468 ;; Return value:  Size  Location     Type
  3469 ;;                  1    wreg      unsigned char 
  3470 ;; Registers used:
  3471 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3472 ;; Tracked objects:
  3473 ;;		On entry : 0/0
  3474 ;;		On exit  : 0/0
  3475 ;;		Unchanged: 0/0
  3476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3477 ;;      Params:         0       0       0       0       0       0       0
  3478 ;;      Locals:         0       3       0       0       0       0       0
  3479 ;;      Temps:          2       0       0       0       0       0       0
  3480 ;;      Totals:         2       3       0       0       0       0       0
  3481 ;;Total ram usage:        5 bytes
  3482 ;; Hardware stack levels used:    1
  3483 ;; Hardware stack levels required when called:    6
  3484 ;; This function calls:
  3485 ;;		_getData
  3486 ;;		_liftArm
  3487 ;;		_moveToPoint
  3488 ;;		_pickObject
  3489 ;;		_releaseObj
  3490 ;;		_rotateObj
  3491 ;;		_touchObject
  3492 ;;		_touchTherm
  3493 ;; This function is called by:
  3494 ;;		_main
  3495 ;; This function uses a non-reentrant model
  3496 ;;
  3497                           
  3498                           	psect	text21
  3499  000A42                     __ptext21:
  3500                           	callstack 0
  3501  000A42                     _executeData:
  3502                           	callstack 0
  3503  000A42  FFFF               	dw	65535	; assembler added errata NOP
  3504  000A44                     
  3505                           ;main.c: 131:     t_sequence *data = getData();
  3506  000A44  ECAF  F011         	call	_getData	;wreg free
  3507  000A48  C012  F0FC         	movff	?_getData,executeData@data
  3508  000A4C  C013  F0FD         	movff	?_getData+1,executeData@data+1
  3509  000A50                     
  3510                           ;main.c: 137:     switch(data->feederLine){
  3511  000A50  EFD4  F005         	goto	l4039
  3512  000A54                     l4011:
  3513  000A54  FFFF               	dw	65535	; assembler added errata NOP
  3514                           
  3515                           ;main.c: 140:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0
      +                          ], feeder1Pos[1]);
  3516  000A56  C04E  F016         	movff	_posVector,moveToPoint@x1
  3517  000A5A  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3518  000A5C  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3519  000A60  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3520  000A62  0E0D               	movlw	low _feeder1Pos
  3521  000A64  6EF6               	movwf	tblptrl,c
  3522  000A66                     	if	1	;There is more than 1 active tblptr byte
  3523  000A66  0E06               	movlw	high _feeder1Pos
  3524  000A68  6EF7               	movwf	tblptrh,c
  3525  000A6A                     	endif
  3526  000A6A                     	if	0	;There are less than 3 active tblptr bytes
  3527  000A6A                     	endif
  3528  000A6A  0008               	tblrd		*
  3529  000A6C  FFFF               	dw	65535	; errata NOP
  3530  000A6E  50F5               	movf	tablat,w,c
  3531  000A70  6E1A               	movwf	moveToPoint@x2^0,c
  3532  000A72  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3533  000A74  0E0E               	movlw	low (_feeder1Pos+1)
  3534  000A76  6EF6               	movwf	tblptrl,c
  3535  000A78  0E06               	movlw	high (_feeder1Pos+1)
  3536  000A7A  6EF7               	movwf	tblptrh,c
  3537  000A7C                     	if	0	;tblptru may be non-zero
  3538  000A7C                     	endif
  3539  000A7C                     	if	0	;tblptru may be non-zero
  3540  000A7C                     	endif
  3541  000A7C  0008               	tblrd		*
  3542  000A7E  FFFF               	dw	65535	; errata NOP
  3543  000A80  50F5               	movf	tablat,w,c
  3544  000A82  6E1C               	movwf	moveToPoint@y2^0,c
  3545  000A84  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3546  000A86  EC5A  F008         	call	_moveToPoint	;wreg free
  3547  000A8A  0100               	movlb	0	; () banked
  3548  000A8C  6FFB               	movwf	executeData@errCode& (0+255),b
  3549  000A8E                     
  3550                           ; BSR set to: 0
  3551                           ;main.c: 142:             posVector[0] = feeder1Pos[0];
  3552  000A8E  0E0D               	movlw	low _feeder1Pos
  3553  000A90  6EF6               	movwf	tblptrl,c
  3554  000A92                     	if	1	;There is more than 1 active tblptr byte
  3555  000A92  0E06               	movlw	high _feeder1Pos
  3556  000A94  6EF7               	movwf	tblptrh,c
  3557  000A96                     	endif
  3558  000A96                     	if	0	;There are less than 3 active tblptr bytes
  3559  000A96                     	endif
  3560  000A96  0008               	tblrd		*
  3561  000A98  FFFF               	dw	65535	; errata NOP
  3562  000A9A  CFF5 F04E          	movff	tablat,_posVector
  3563  000A9E                     
  3564                           ; BSR set to: 0
  3565                           ;main.c: 143:             posVector[1] = feeder1Pos[1];
  3566  000A9E  0E0E               	movlw	low (_feeder1Pos+1)
  3567  000AA0  6EF6               	movwf	tblptrl,c
  3568  000AA2  0E06               	movlw	high (_feeder1Pos+1)
  3569  000AA4  6EF7               	movwf	tblptrh,c
  3570  000AA6                     	if	0	;tblptru may be non-zero
  3571  000AA6                     	endif
  3572  000AA6                     	if	0	;tblptru may be non-zero
  3573  000AA6                     	endif
  3574  000AA6  0008               	tblrd		*
  3575  000AA8  FFFF               	dw	65535	; errata NOP
  3576  000AAA  CFF5 F04F          	movff	tablat,_posVector+1
  3577                           
  3578                           ;main.c: 144:             break;
  3579  000AAE  EFF7  F005         	goto	l4041
  3580  000AB2                     l4017:
  3581  000AB2  FFFF               	dw	65535	; assembler added errata NOP
  3582                           
  3583                           ;main.c: 146:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3584  000AB4  C04E  F016         	movff	_posVector,moveToPoint@x1
  3585  000AB8  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3586  000ABA  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3587  000ABE  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3588  000AC0  0E0B               	movlw	low _feeder2Pos
  3589  000AC2  6EF6               	movwf	tblptrl,c
  3590  000AC4                     	if	1	;There is more than 1 active tblptr byte
  3591  000AC4  0E06               	movlw	high _feeder2Pos
  3592  000AC6  6EF7               	movwf	tblptrh,c
  3593  000AC8                     	endif
  3594  000AC8                     	if	0	;There are less than 3 active tblptr bytes
  3595  000AC8                     	endif
  3596  000AC8  0008               	tblrd		*
  3597  000ACA  FFFF               	dw	65535	; errata NOP
  3598  000ACC  50F5               	movf	tablat,w,c
  3599  000ACE  6E1A               	movwf	moveToPoint@x2^0,c
  3600  000AD0  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3601  000AD2  0E0C               	movlw	low (_feeder2Pos+1)
  3602  000AD4  6EF6               	movwf	tblptrl,c
  3603  000AD6  0E06               	movlw	high (_feeder2Pos+1)
  3604  000AD8  6EF7               	movwf	tblptrh,c
  3605  000ADA                     	if	0	;tblptru may be non-zero
  3606  000ADA                     	endif
  3607  000ADA                     	if	0	;tblptru may be non-zero
  3608  000ADA                     	endif
  3609  000ADA  0008               	tblrd		*
  3610  000ADC  FFFF               	dw	65535	; errata NOP
  3611  000ADE  50F5               	movf	tablat,w,c
  3612  000AE0  6E1C               	movwf	moveToPoint@y2^0,c
  3613  000AE2  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3614  000AE4  EC5A  F008         	call	_moveToPoint	;wreg free
  3615  000AE8  0100               	movlb	0	; () banked
  3616  000AEA  6FFB               	movwf	executeData@errCode& (0+255),b
  3617  000AEC                     
  3618                           ; BSR set to: 0
  3619                           ;main.c: 147:             posVector[0] = feeder2Pos[0];
  3620  000AEC  0E0B               	movlw	low _feeder2Pos
  3621  000AEE  6EF6               	movwf	tblptrl,c
  3622  000AF0                     	if	1	;There is more than 1 active tblptr byte
  3623  000AF0  0E06               	movlw	high _feeder2Pos
  3624  000AF2  6EF7               	movwf	tblptrh,c
  3625  000AF4                     	endif
  3626  000AF4                     	if	0	;There are less than 3 active tblptr bytes
  3627  000AF4                     	endif
  3628  000AF4  0008               	tblrd		*
  3629  000AF6  FFFF               	dw	65535	; errata NOP
  3630  000AF8  CFF5 F04E          	movff	tablat,_posVector
  3631  000AFC                     
  3632                           ; BSR set to: 0
  3633                           ;main.c: 148:             posVector[1] = feeder2Pos[1];
  3634  000AFC  0E0C               	movlw	low (_feeder2Pos+1)
  3635  000AFE  6EF6               	movwf	tblptrl,c
  3636  000B00  0E06               	movlw	high (_feeder2Pos+1)
  3637  000B02  6EF7               	movwf	tblptrh,c
  3638  000B04                     	if	0	;tblptru may be non-zero
  3639  000B04                     	endif
  3640  000B04                     	if	0	;tblptru may be non-zero
  3641  000B04                     	endif
  3642  000B04  0008               	tblrd		*
  3643  000B06  FFFF               	dw	65535	; errata NOP
  3644  000B08  CFF5 F04F          	movff	tablat,_posVector+1
  3645                           
  3646                           ;main.c: 149:             break;
  3647  000B0C  EFF7  F005         	goto	l4041
  3648  000B10                     l4023:
  3649  000B10  FFFF               	dw	65535	; assembler added errata NOP
  3650                           
  3651                           ;main.c: 151:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3652  000B12  C04E  F016         	movff	_posVector,moveToPoint@x1
  3653  000B16  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3654  000B18  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3655  000B1C  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3656  000B1E  0E09               	movlw	low _feeder3Pos
  3657  000B20  6EF6               	movwf	tblptrl,c
  3658  000B22                     	if	1	;There is more than 1 active tblptr byte
  3659  000B22  0E06               	movlw	high _feeder3Pos
  3660  000B24  6EF7               	movwf	tblptrh,c
  3661  000B26                     	endif
  3662  000B26                     	if	0	;There are less than 3 active tblptr bytes
  3663  000B26                     	endif
  3664  000B26  0008               	tblrd		*
  3665  000B28  FFFF               	dw	65535	; errata NOP
  3666  000B2A  50F5               	movf	tablat,w,c
  3667  000B2C  6E1A               	movwf	moveToPoint@x2^0,c
  3668  000B2E  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3669  000B30  0E0A               	movlw	low (_feeder3Pos+1)
  3670  000B32  6EF6               	movwf	tblptrl,c
  3671  000B34  0E06               	movlw	high (_feeder3Pos+1)
  3672  000B36  6EF7               	movwf	tblptrh,c
  3673  000B38                     	if	0	;tblptru may be non-zero
  3674  000B38                     	endif
  3675  000B38                     	if	0	;tblptru may be non-zero
  3676  000B38                     	endif
  3677  000B38  0008               	tblrd		*
  3678  000B3A  FFFF               	dw	65535	; errata NOP
  3679  000B3C  50F5               	movf	tablat,w,c
  3680  000B3E  6E1C               	movwf	moveToPoint@y2^0,c
  3681  000B40  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3682  000B42  EC5A  F008         	call	_moveToPoint	;wreg free
  3683  000B46  0100               	movlb	0	; () banked
  3684  000B48  6FFB               	movwf	executeData@errCode& (0+255),b
  3685  000B4A                     
  3686                           ; BSR set to: 0
  3687                           ;main.c: 152:             posVector[0] = feeder3Pos[0];
  3688  000B4A  0E09               	movlw	low _feeder3Pos
  3689  000B4C  6EF6               	movwf	tblptrl,c
  3690  000B4E                     	if	1	;There is more than 1 active tblptr byte
  3691  000B4E  0E06               	movlw	high _feeder3Pos
  3692  000B50  6EF7               	movwf	tblptrh,c
  3693  000B52                     	endif
  3694  000B52                     	if	0	;There are less than 3 active tblptr bytes
  3695  000B52                     	endif
  3696  000B52  0008               	tblrd		*
  3697  000B54  FFFF               	dw	65535	; errata NOP
  3698  000B56  CFF5 F04E          	movff	tablat,_posVector
  3699  000B5A                     
  3700                           ; BSR set to: 0
  3701                           ;main.c: 153:             posVector[1] = feeder3Pos[1];
  3702  000B5A  0E0A               	movlw	low (_feeder3Pos+1)
  3703  000B5C  6EF6               	movwf	tblptrl,c
  3704  000B5E  0E06               	movlw	high (_feeder3Pos+1)
  3705  000B60  6EF7               	movwf	tblptrh,c
  3706  000B62                     	if	0	;tblptru may be non-zero
  3707  000B62                     	endif
  3708  000B62                     	if	0	;tblptru may be non-zero
  3709  000B62                     	endif
  3710  000B62  0008               	tblrd		*
  3711  000B64  FFFF               	dw	65535	; errata NOP
  3712  000B66  CFF5 F04F          	movff	tablat,_posVector+1
  3713                           
  3714                           ;main.c: 154:             break;
  3715  000B6A  EFF7  F005         	goto	l4041
  3716  000B6E                     l4029:
  3717  000B6E  FFFF               	dw	65535	; assembler added errata NOP
  3718                           
  3719                           ;main.c: 158:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3720  000B70  C04E  F016         	movff	_posVector,moveToPoint@x1
  3721  000B74  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3722  000B76  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3723  000B7A  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3724  000B7C  C057  F01A         	movff	_newFeeder,moveToPoint@x2
  3725  000B80  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3726  000B82  C058  F01C         	movff	_newFeeder+1,moveToPoint@y2
  3727  000B86  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3728  000B88  EC5A  F008         	call	_moveToPoint	;wreg free
  3729  000B8C  0100               	movlb	0	; () banked
  3730  000B8E  6FFB               	movwf	executeData@errCode& (0+255),b
  3731  000B90                     
  3732                           ; BSR set to: 0
  3733                           ;main.c: 159:             posVector[0] = newFeeder[0];
  3734  000B90  C057  F04E         	movff	_newFeeder,_posVector
  3735  000B94                     
  3736                           ; BSR set to: 0
  3737                           ;main.c: 160:             posVector[1] = newFeeder[1];
  3738  000B94  C058  F04F         	movff	_newFeeder+1,_posVector+1
  3739                           
  3740                           ;main.c: 161:             break;
  3741  000B98  EFF7  F005         	goto	l4041
  3742  000B9C                     l4035:
  3743  000B9C  FFFF               	dw	65535	; assembler added errata NOP
  3744                           
  3745                           ;main.c: 165:             errCode = 1;
  3746  000B9E  0E01               	movlw	1
  3747  000BA0  0100               	movlb	0	; () banked
  3748  000BA2  6FFB               	movwf	executeData@errCode& (0+255),b
  3749                           
  3750                           ;main.c: 166:             break;
  3751  000BA4  EFF7  F005         	goto	l4041
  3752  000BA8                     l4039:
  3753  000BA8  FFFF               	dw	65535	; assembler added errata NOP
  3754  000BAA  C0FC  FFD9         	movff	executeData@data,fsr2l
  3755  000BAE  C0FD  FFDA         	movff	executeData@data+1,fsr2h
  3756  000BB2  50DF               	movf	indf2,w,c
  3757  000BB4  6E43               	movwf	??_executeData^0,c
  3758  000BB6  6A44               	clrf	(??_executeData+1)^0,c
  3759                           
  3760                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3761                           ; Switch size 1, requested type "simple"
  3762                           ; Number of cases is 1, Range of values is 0 to 0
  3763                           ; switch strategies available:
  3764                           ; Name         Instructions Cycles
  3765                           ; simple_byte            4     3 (average)
  3766                           ;	Chosen strategy is simple_byte
  3767  000BB8  5044               	movf	(??_executeData+1)^0,w,c
  3768  000BBA  0A00               	xorlw	0	; case 0
  3769  000BBC  B4D8               	btfsc	status,2,c
  3770  000BBE  EFE3  F005         	goto	l4389
  3771  000BC2  EFCE  F005         	goto	l4035
  3772  000BC6                     l4389:
  3773  000BC6  FFFF               	dw	65535	; assembler added errata NOP
  3774                           
  3775                           ; Switch size 1, requested type "simple"
  3776                           ; Number of cases is 4, Range of values is 48 to 255
  3777                           ; switch strategies available:
  3778                           ; Name         Instructions Cycles
  3779                           ; simple_byte           13     7 (average)
  3780                           ;	Chosen strategy is simple_byte
  3781  000BC8  5043               	movf	??_executeData^0,w,c
  3782  000BCA  0A30               	xorlw	48	; case 48
  3783  000BCC  B4D8               	btfsc	status,2,c
  3784  000BCE  EF2A  F005         	goto	l4011
  3785  000BD2  0A01               	xorlw	1	; case 49
  3786  000BD4  B4D8               	btfsc	status,2,c
  3787  000BD6  EF59  F005         	goto	l4017
  3788  000BDA  0A03               	xorlw	3	; case 50
  3789  000BDC  B4D8               	btfsc	status,2,c
  3790  000BDE  EF88  F005         	goto	l4023
  3791  000BE2  0ACD               	xorlw	205	; case 255
  3792  000BE4  B4D8               	btfsc	status,2,c
  3793  000BE6  EFB7  F005         	goto	l4029
  3794  000BEA  EFCE  F005         	goto	l4035
  3795  000BEE                     l4041:
  3796  000BEE  FFFF               	dw	65535	; assembler added errata NOP
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;main.c: 170:     if(!errCode){
  3800  000BF0  51FB               	movf	executeData@errCode& (0+255),w,b
  3801  000BF2  A4D8               	btfss	status,2,c
  3802  000BF4  EFFE  F005         	goto	u3211
  3803  000BF8  EF01  F006         	goto	u3210
  3804  000BFC                     u3211:
  3805  000BFC  FFFF               	dw	65535	; assembler added errata NOP
  3806  000BFE  EF61  F006         	goto	l4063
  3807  000C02                     u3210:
  3808  000C02  FFFF               	dw	65535	; assembler added errata NOP
  3809  000C04                     
  3810                           ; BSR set to: 0
  3811  000C04  EC9C  F00D         	call	_touchObject	;wreg free
  3812  000C08                     
  3813                           ;main.c: 174:         pickObject();
  3814  000C08  EC1C  F012         	call	_pickObject	;wreg free
  3815  000C0C  EC46  F00F         	call	_liftArm	;wreg free
  3816  000C10  C04E  F016         	movff	_posVector,moveToPoint@x1
  3817  000C14  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3818  000C16  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3819  000C1A  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3820  000C1C  0100               	movlb	0	; () banked
  3821  000C1E  EE20 F001          	lfsr	2,1
  3822  000C22  51FC               	movf	executeData@data& (0+255),w,b
  3823  000C24  26D9               	addwf	fsr2l,f,c
  3824  000C26  51FD               	movf	(executeData@data+1)& (0+255),w,b
  3825  000C28  22DA               	addwfc	fsr2h,f,c
  3826  000C2A  50DF               	movf	indf2,w,c
  3827  000C2C  6E43               	movwf	??_executeData^0,c
  3828  000C2E  5043               	movf	??_executeData^0,w,c
  3829  000C30  6E1A               	movwf	moveToPoint@x2^0,c
  3830  000C32  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3831  000C34  EE20 F002          	lfsr	2,2
  3832  000C38  51FC               	movf	executeData@data& (0+255),w,b
  3833  000C3A  26D9               	addwf	fsr2l,f,c
  3834  000C3C  51FD               	movf	(executeData@data+1)& (0+255),w,b
  3835  000C3E  22DA               	addwfc	fsr2h,f,c
  3836  000C40  50DF               	movf	indf2,w,c
  3837  000C42  6E44               	movwf	(??_executeData+1)^0,c
  3838  000C44  5044               	movf	(??_executeData+1)^0,w,c
  3839  000C46  6E1C               	movwf	moveToPoint@y2^0,c
  3840  000C48  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3841  000C4A  EC5A  F008         	call	_moveToPoint	;wreg free
  3842                           
  3843                           ;main.c: 181:         posVector[0] = data->posX;
  3844  000C4E  0100               	movlb	0	; () banked
  3845  000C50  EE20 F001          	lfsr	2,1
  3846  000C54  51FC               	movf	executeData@data& (0+255),w,b
  3847  000C56  26D9               	addwf	fsr2l,f,c
  3848  000C58  51FD               	movf	(executeData@data+1)& (0+255),w,b
  3849  000C5A  22DA               	addwfc	fsr2h,f,c
  3850  000C5C  50DF               	movf	indf2,w,c
  3851  000C5E  6E4E               	movwf	_posVector^0,c
  3852                           
  3853                           ;main.c: 182:         posVector[1] = data->posY;
  3854  000C60  EE20 F002          	lfsr	2,2
  3855  000C64  51FC               	movf	executeData@data& (0+255),w,b
  3856  000C66  26D9               	addwf	fsr2l,f,c
  3857  000C68  51FD               	movf	(executeData@data+1)& (0+255),w,b
  3858  000C6A  22DA               	addwfc	fsr2h,f,c
  3859  000C6C  50DF               	movf	indf2,w,c
  3860  000C6E  6E4F               	movwf	(_posVector+1)^0,c
  3861                           
  3862                           ;main.c: 185:         rotAngle = data->rotation - rotAngle;
  3863  000C70  EE20 F003          	lfsr	2,3
  3864  000C74  51FC               	movf	executeData@data& (0+255),w,b
  3865  000C76  26D9               	addwf	fsr2l,f,c
  3866  000C78  51FD               	movf	(executeData@data+1)& (0+255),w,b
  3867  000C7A  22DA               	addwfc	fsr2h,f,c
  3868  000C7C  50DF               	movf	indf2,w,c
  3869  000C7E  6E43               	movwf	??_executeData^0,c
  3870  000C80  5059               	movf	_rotAngle^0,w,c
  3871  000C82  5C43               	subwf	??_executeData^0,w,c
  3872  000C84  6E59               	movwf	_rotAngle^0,c
  3873  000C86  505A               	movf	(_rotAngle+1)^0,w,c
  3874  000C88  A0D8               	btfss	status,0,c
  3875  000C8A  285A               	incf	(_rotAngle+1)^0,w,c
  3876  000C8C  6A5A               	clrf	(_rotAngle+1)^0,c
  3877  000C8E  5E5A               	subwf	(_rotAngle+1)^0,f,c
  3878  000C90                     
  3879                           ; BSR set to: 0
  3880                           ;main.c: 187:         if(rotAngle < 0){
  3881  000C90  BE5A               	btfsc	(_rotAngle+1)^0,7,c
  3882  000C92  EF50  F006         	goto	u3220
  3883  000C96  EF4D  F006         	goto	u3221
  3884  000C9A                     u3221:
  3885  000C9A  FFFF               	dw	65535	; assembler added errata NOP
  3886  000C9C  EF55  F006         	goto	l4055
  3887  000CA0                     u3220:
  3888  000CA0  FFFF               	dw	65535	; assembler added errata NOP
  3889  000CA2                     
  3890                           ; BSR set to: 0
  3891                           ;main.c: 188:             rotAngle += 360;
  3892  000CA2  0E68               	movlw	104
  3893  000CA4  2659               	addwf	_rotAngle^0,f,c
  3894  000CA6  0E01               	movlw	1
  3895  000CA8  225A               	addwfc	(_rotAngle+1)^0,f,c
  3896  000CAA                     l4055:
  3897  000CAA  FFFF               	dw	65535	; assembler added errata NOP
  3898                           
  3899                           ; BSR set to: 0
  3900                           ;main.c: 190:         rotateObj(rotAngle);
  3901  000CAC  5059               	movf	_rotAngle^0,w,c
  3902  000CAE  ECE9  F00E         	call	_rotateObj
  3903  000CB2  EC23  F00D         	call	_touchTherm	;wreg free
  3904  000CB6                     
  3905                           ;main.c: 195:         releaseObj();
  3906  000CB6  EC18  F012         	call	_releaseObj	;wreg free
  3907  000CBA                     
  3908                           ;main.c: 198:         errCode = liftArm();
  3909  000CBA  EC46  F00F         	call	_liftArm	;wreg free
  3910  000CBE  0100               	movlb	0	; () banked
  3911  000CC0  6FFB               	movwf	executeData@errCode& (0+255),b
  3912  000CC2                     l4063:
  3913  000CC2  FFFF               	dw	65535	; assembler added errata NOP
  3914                           
  3915                           ; BSR set to: 0
  3916                           ;main.c: 201:     return(errCode);
  3917  000CC4  51FB               	movf	executeData@errCode& (0+255),w,b
  3918  000CC6                     
  3919                           ; BSR set to: 0
  3920  000CC6  0012               	return		;funcret
  3921  000CC8  FFFF               	dw	65535	; errata NOP
  3922  000CCA                     __end_of_executeData:
  3923                           	callstack 0
  3924                           
  3925 ;; *************** function _touchTherm *****************
  3926 ;; Defined at:
  3927 ;;		line 430 in file "motors.c"
  3928 ;; Parameters:    Size  Location     Type
  3929 ;;		None
  3930 ;; Auto vars:     Size  Location     Type
  3931 ;;		None
  3932 ;; Return value:  Size  Location     Type
  3933 ;;                  1    wreg      unsigned char 
  3934 ;; Registers used:
  3935 ;;		wreg, status,2, status,0, cstack
  3936 ;; Tracked objects:
  3937 ;;		On entry : 0/0
  3938 ;;		On exit  : 0/0
  3939 ;;		Unchanged: 0/0
  3940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3941 ;;      Params:         0       0       0       0       0       0       0
  3942 ;;      Locals:         0       0       0       0       0       0       0
  3943 ;;      Temps:          0       0       0       0       0       0       0
  3944 ;;      Totals:         0       0       0       0       0       0       0
  3945 ;;Total ram usage:        0 bytes
  3946 ;; Hardware stack levels used:    1
  3947 ;; Hardware stack levels required when called:    5
  3948 ;; This function calls:
  3949 ;;		_resetStep
  3950 ;;		_resetTherm
  3951 ;;		_returnTherm
  3952 ;;		_setDirection
  3953 ;;		_startADC
  3954 ;;		_stepMade
  3955 ;;		_stopADC
  3956 ;; This function is called by:
  3957 ;;		_executeData
  3958 ;; This function uses a non-reentrant model
  3959 ;;
  3960                           
  3961                           	psect	text22
  3962  001A46                     __ptext22:
  3963                           	callstack 0
  3964  001A46                     _touchTherm:
  3965                           	callstack 0
  3966  001A46  FFFF               	dw	65535	; assembler added errata NOP
  3967  001A48                     
  3968                           ;motors.c: 433:     setDirection(1, 2);
  3969  001A48  0E02               	movlw	2
  3970  001A4A  6E12               	movwf	setDirection@motor^0,c
  3971  001A4C  0E01               	movlw	1
  3972  001A4E  EC55  F010         	call	_setDirection
  3973  001A52                     
  3974                           ;motors.c: 435:     T2CONbits.TMR2ON = 1;
  3975  001A52  84CA               	bsf	202,2,c	;volatile
  3976  001A54                     
  3977                           ;motors.c: 437:     tm0Error = 0;
  3978  001A54  0E00               	movlw	0
  3979  001A56  6E5C               	movwf	(_tm0Error+1)^0,c
  3980  001A58  0E00               	movlw	0
  3981  001A5A  6E5B               	movwf	_tm0Error^0,c
  3982  001A5C                     
  3983                           ;motors.c: 438:     tm0Limit = 200;
  3984  001A5C  0EC8               	movlw	200
  3985  001A5E  6E68               	movwf	_tm0Limit^0,c
  3986  001A60                     
  3987                           ;motors.c: 439:     T0CONbits.TMR0ON = 1;
  3988  001A60  8ED5               	bsf	213,7,c	;volatile
  3989  001A62                     
  3990                           ;motors.c: 442:     startADC();
  3991  001A62  EC14  F012         	call	_startADC	;wreg free
  3992                           
  3993                           ;motors.c: 445:     while(!returnTherm() || PORTDbits.RD7){
  3994  001A66  EF66  F00D         	goto	l3755
  3995  001A6A                     l3745:
  3996  001A6A  FFFF               	dw	65535	; assembler added errata NOP
  3997                           
  3998                           ;motors.c: 448:         if(tm0Error){
  3999  001A6C  505B               	movf	_tm0Error^0,w,c
  4000  001A6E  105C               	iorwf	(_tm0Error+1)^0,w,c
  4001  001A70  B4D8               	btfsc	status,2,c
  4002  001A72  EF3D  F00D         	goto	u2951
  4003  001A76  EF40  F00D         	goto	u2950
  4004  001A7A                     u2951:
  4005  001A7A  FFFF               	dw	65535	; assembler added errata NOP
  4006  001A7C  EF48  F00D         	goto	l178
  4007  001A80                     u2950:
  4008  001A80  FFFF               	dw	65535	; assembler added errata NOP
  4009  001A82                     
  4010                           ;motors.c: 450:             LATCbits.LATC2 = 0;
  4011  001A82  948B               	bcf	139,2,c	;volatile
  4012  001A84                     
  4013                           ;motors.c: 451:             tm0Error = 6;
  4014  001A84  0E00               	movlw	0
  4015  001A86  6E5C               	movwf	(_tm0Error+1)^0,c
  4016  001A88  0E06               	movlw	6
  4017  001A8A  6E5B               	movwf	_tm0Error^0,c
  4018                           
  4019                           ;motors.c: 452:             break;
  4020  001A8C  EF7C  F00D         	goto	l3759
  4021  001A90                     l178:
  4022  001A90  FFFF               	dw	65535	; assembler added errata NOP
  4023                           
  4024                           ;motors.c: 456:         LATCbits.LATC2 = 1;
  4025  001A92  848B               	bsf	139,2,c	;volatile
  4026  001A94                     l3751:
  4027  001A94  FFFF               	dw	65535	; assembler added errata NOP
  4028  001A96  EC95  F011         	call	_stepMade	;wreg free
  4029  001A9A  5012               	movf	?_stepMade^0,w,c
  4030  001A9C  1013               	iorwf	(?_stepMade+1)^0,w,c
  4031  001A9E  B4D8               	btfsc	status,2,c
  4032  001AA0  EF54  F00D         	goto	u2961
  4033  001AA4  EF57  F00D         	goto	u2960
  4034  001AA8                     u2961:
  4035  001AA8  FFFF               	dw	65535	; assembler added errata NOP
  4036  001AAA  EF4A  F00D         	goto	l3751
  4037  001AAE                     u2960:
  4038  001AAE  FFFF               	dw	65535	; assembler added errata NOP
  4039  001AB0                     
  4040                           ;motors.c: 462:         LATCbits.LATC2 = 0;
  4041  001AB0  948B               	bcf	139,2,c	;volatile
  4042  001AB2                     l3753:
  4043  001AB2  FFFF               	dw	65535	; assembler added errata NOP
  4044  001AB4  EC95  F011         	call	_stepMade	;wreg free
  4045  001AB8  5012               	movf	?_stepMade^0,w,c
  4046  001ABA  1013               	iorwf	(?_stepMade+1)^0,w,c
  4047  001ABC  B4D8               	btfsc	status,2,c
  4048  001ABE  EF63  F00D         	goto	u2971
  4049  001AC2  EF66  F00D         	goto	u2970
  4050  001AC6                     u2971:
  4051  001AC6  FFFF               	dw	65535	; assembler added errata NOP
  4052  001AC8  EF59  F00D         	goto	l3753
  4053  001ACC                     u2970:
  4054  001ACC                     l3755:
  4055  001ACC  FFFF               	dw	65535	; assembler added errata NOP
  4056                           
  4057                           ;motors.c: 445:     while(!returnTherm() || PORTDbits.RD7){
  4058  001ACE  ECCB  F011         	call	_returnTherm	;wreg free
  4059  001AD2  5012               	movf	?_returnTherm^0,w,c
  4060  001AD4  1013               	iorwf	(?_returnTherm+1)^0,w,c
  4061  001AD6  B4D8               	btfsc	status,2,c
  4062  001AD8  EF70  F00D         	goto	u2981
  4063  001ADC  EF73  F00D         	goto	u2980
  4064  001AE0                     u2981:
  4065  001AE0  FFFF               	dw	65535	; assembler added errata NOP
  4066  001AE2  EF35  F00D         	goto	l3745
  4067  001AE6                     u2980:
  4068  001AE6  FFFF               	dw	65535	; assembler added errata NOP
  4069  001AE8  BE83               	btfsc	131,7,c	;volatile
  4070  001AEA  EF79  F00D         	goto	u2991
  4071  001AEE  EF7C  F00D         	goto	u2990
  4072  001AF2                     u2991:
  4073  001AF2  FFFF               	dw	65535	; assembler added errata NOP
  4074  001AF4  EF35  F00D         	goto	l3745
  4075  001AF8                     u2990:
  4076  001AF8                     l3759:
  4077  001AF8  FFFF               	dw	65535	; assembler added errata NOP
  4078                           
  4079                           ;motors.c: 469:     stopADC();
  4080  001AFA  EC10  F012         	call	_stopADC	;wreg free
  4081  001AFE                     
  4082                           ;motors.c: 472:     resetTherm();
  4083  001AFE  ECE2  F011         	call	_resetTherm	;wreg free
  4084  001B02                     
  4085                           ;motors.c: 475:     T0CONbits.TMR0ON = 0;
  4086  001B02  9ED5               	bcf	213,7,c	;volatile
  4087  001B04                     
  4088                           ;motors.c: 476:     T2CONbits.TMR2ON = 0;
  4089  001B04  94CA               	bcf	202,2,c	;volatile
  4090                           
  4091                           ;motors.c: 478:     TMR0 = 0;
  4092  001B06  0E00               	movlw	0
  4093  001B08  6ED7               	movwf	215,c	;volatile
  4094  001B0A  0E00               	movlw	0
  4095  001B0C  6ED6               	movwf	214,c	;volatile
  4096                           
  4097                           ;motors.c: 479:     TMR2 = 0;
  4098  001B0E  0E00               	movlw	0
  4099  001B10  6ECC               	movwf	204,c	;volatile
  4100  001B12                     
  4101                           ;motors.c: 482:     resetStep();
  4102  001B12  ECEC  F011         	call	_resetStep	;wreg free
  4103  001B16                     
  4104                           ;motors.c: 485:     if(PORTDbits.RD7){
  4105  001B16  AE83               	btfss	131,7,c	;volatile
  4106  001B18  EF90  F00D         	goto	u3001
  4107  001B1C  EF93  F00D         	goto	u3000
  4108  001B20                     u3001:
  4109  001B20  FFFF               	dw	65535	; assembler added errata NOP
  4110  001B22  EF98  F00D         	goto	l186
  4111  001B26                     u3000:
  4112  001B26  FFFF               	dw	65535	; assembler added errata NOP
  4113  001B28                     
  4114                           ;motors.c: 486:         tm0Error = 2;
  4115  001B28  0E00               	movlw	0
  4116  001B2A  6E5C               	movwf	(_tm0Error+1)^0,c
  4117  001B2C  0E02               	movlw	2
  4118  001B2E  6E5B               	movwf	_tm0Error^0,c
  4119  001B30                     l186:
  4120  001B30  FFFF               	dw	65535	; assembler added errata NOP
  4121                           
  4122                           ;motors.c: 489:     return(tm0Error);
  4123  001B32  505B               	movf	_tm0Error^0,w,c
  4124  001B34  0012               	return		;funcret
  4125  001B36  FFFF               	dw	65535	; errata NOP
  4126  001B38                     __end_of_touchTherm:
  4127                           	callstack 0
  4128                           
  4129 ;; *************** function _returnTherm *****************
  4130 ;; Defined at:
  4131 ;;		line 57 in file "adc.c"
  4132 ;; Parameters:    Size  Location     Type
  4133 ;;		None
  4134 ;; Auto vars:     Size  Location     Type
  4135 ;;		None
  4136 ;; Return value:  Size  Location     Type
  4137 ;;                  2   17[COMRAM] unsigned int 
  4138 ;; Registers used:
  4139 ;;		None
  4140 ;; Tracked objects:
  4141 ;;		On entry : 0/0
  4142 ;;		On exit  : 0/0
  4143 ;;		Unchanged: 0/0
  4144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4145 ;;      Params:         2       0       0       0       0       0       0
  4146 ;;      Locals:         0       0       0       0       0       0       0
  4147 ;;      Temps:          0       0       0       0       0       0       0
  4148 ;;      Totals:         2       0       0       0       0       0       0
  4149 ;;Total ram usage:        2 bytes
  4150 ;; Hardware stack levels used:    1
  4151 ;; Hardware stack levels required when called:    4
  4152 ;; This function calls:
  4153 ;;		Nothing
  4154 ;; This function is called by:
  4155 ;;		_touchTherm
  4156 ;; This function uses a non-reentrant model
  4157 ;;
  4158                           
  4159                           	psect	text23
  4160  002396                     __ptext23:
  4161                           	callstack 0
  4162  002396                     _returnTherm:
  4163                           	callstack 0
  4164  002396  FFFF               	dw	65535	; assembler added errata NOP
  4165  002398                     
  4166                           ;adc.c: 58:     return therm_rel;
  4167  002398  C064  F012         	movff	_therm_rel,?_returnTherm	;volatile
  4168  00239C  6A13               	clrf	(?_returnTherm+1)^0,c
  4169  00239E  0012               	return		;funcret
  4170  0023A0  FFFF               	dw	65535	; errata NOP
  4171  0023A2                     __end_of_returnTherm:
  4172                           	callstack 0
  4173                           
  4174 ;; *************** function _resetTherm *****************
  4175 ;; Defined at:
  4176 ;;		line 71 in file "adc.c"
  4177 ;; Parameters:    Size  Location     Type
  4178 ;;		None
  4179 ;; Auto vars:     Size  Location     Type
  4180 ;;		None
  4181 ;; Return value:  Size  Location     Type
  4182 ;;                  1    wreg      void 
  4183 ;; Registers used:
  4184 ;;		wreg, status,2
  4185 ;; Tracked objects:
  4186 ;;		On entry : 0/0
  4187 ;;		On exit  : 0/0
  4188 ;;		Unchanged: 0/0
  4189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4190 ;;      Params:         0       0       0       0       0       0       0
  4191 ;;      Locals:         0       0       0       0       0       0       0
  4192 ;;      Temps:          0       0       0       0       0       0       0
  4193 ;;      Totals:         0       0       0       0       0       0       0
  4194 ;;Total ram usage:        0 bytes
  4195 ;; Hardware stack levels used:    1
  4196 ;; Hardware stack levels required when called:    4
  4197 ;; This function calls:
  4198 ;;		Nothing
  4199 ;; This function is called by:
  4200 ;;		_touchTherm
  4201 ;; This function uses a non-reentrant model
  4202 ;;
  4203                           
  4204                           	psect	text24
  4205  0023C4                     __ptext24:
  4206                           	callstack 0
  4207  0023C4                     _resetTherm:
  4208                           	callstack 0
  4209  0023C4  FFFF               	dw	65535	; assembler added errata NOP
  4210  0023C6                     
  4211                           ;adc.c: 72:     therm_rel = 0;
  4212  0023C6  0E00               	movlw	0
  4213  0023C8  6E64               	movwf	_therm_rel^0,c	;volatile
  4214  0023CA  0012               	return		;funcret
  4215  0023CC  FFFF               	dw	65535	; errata NOP
  4216  0023CE                     __end_of_resetTherm:
  4217                           	callstack 0
  4218                           
  4219 ;; *************** function _touchObject *****************
  4220 ;; Defined at:
  4221 ;;		line 359 in file "motors.c"
  4222 ;; Parameters:    Size  Location     Type
  4223 ;;		None
  4224 ;; Auto vars:     Size  Location     Type
  4225 ;;		None
  4226 ;; Return value:  Size  Location     Type
  4227 ;;                  1    wreg      unsigned char 
  4228 ;; Registers used:
  4229 ;;		wreg, status,2, status,0, cstack
  4230 ;; Tracked objects:
  4231 ;;		On entry : 0/0
  4232 ;;		On exit  : 0/0
  4233 ;;		Unchanged: 0/0
  4234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4235 ;;      Params:         0       0       0       0       0       0       0
  4236 ;;      Locals:         0       0       0       0       0       0       0
  4237 ;;      Temps:          0       0       0       0       0       0       0
  4238 ;;      Totals:         0       0       0       0       0       0       0
  4239 ;;Total ram usage:        0 bytes
  4240 ;; Hardware stack levels used:    1
  4241 ;; Hardware stack levels required when called:    5
  4242 ;; This function calls:
  4243 ;;		_resetStep
  4244 ;;		_resetTouch
  4245 ;;		_returnTouch
  4246 ;;		_setDirection
  4247 ;;		_startADC
  4248 ;;		_stepMade
  4249 ;;		_stopADC
  4250 ;; This function is called by:
  4251 ;;		_executeData
  4252 ;; This function uses a non-reentrant model
  4253 ;;
  4254                           
  4255                           	psect	text25
  4256  001B38                     __ptext25:
  4257                           	callstack 0
  4258  001B38                     _touchObject:
  4259                           	callstack 0
  4260  001B38  FFFF               	dw	65535	; assembler added errata NOP
  4261  001B3A                     
  4262                           ;motors.c: 362:     setDirection(1, 2);
  4263  001B3A  0E02               	movlw	2
  4264  001B3C  6E12               	movwf	setDirection@motor^0,c
  4265  001B3E  0E01               	movlw	1
  4266  001B40  EC55  F010         	call	_setDirection
  4267  001B44                     
  4268                           ;motors.c: 364:     T2CONbits.TMR2ON = 1;
  4269  001B44  84CA               	bsf	202,2,c	;volatile
  4270  001B46                     
  4271                           ;motors.c: 366:     tm0Error = 0;
  4272  001B46  0E00               	movlw	0
  4273  001B48  6E5C               	movwf	(_tm0Error+1)^0,c
  4274  001B4A  0E00               	movlw	0
  4275  001B4C  6E5B               	movwf	_tm0Error^0,c
  4276  001B4E                     
  4277                           ;motors.c: 367:     tm0Limit = 200;
  4278  001B4E  0EC8               	movlw	200
  4279  001B50  6E68               	movwf	_tm0Limit^0,c
  4280  001B52                     
  4281                           ;motors.c: 368:     T0CONbits.TMR0ON = 1;
  4282  001B52  8ED5               	bsf	213,7,c	;volatile
  4283  001B54                     
  4284                           ;motors.c: 371:     startADC();
  4285  001B54  EC14  F012         	call	_startADC	;wreg free
  4286                           
  4287                           ;motors.c: 374:     while(!returnTouch() || PORTDbits.RD7){
  4288  001B58  EFDF  F00D         	goto	l3713
  4289  001B5C                     l3703:
  4290  001B5C  FFFF               	dw	65535	; assembler added errata NOP
  4291                           
  4292                           ;motors.c: 377:         if(tm0Error){
  4293  001B5E  505B               	movf	_tm0Error^0,w,c
  4294  001B60  105C               	iorwf	(_tm0Error+1)^0,w,c
  4295  001B62  B4D8               	btfsc	status,2,c
  4296  001B64  EFB6  F00D         	goto	u2891
  4297  001B68  EFB9  F00D         	goto	u2890
  4298  001B6C                     u2891:
  4299  001B6C  FFFF               	dw	65535	; assembler added errata NOP
  4300  001B6E  EFC1  F00D         	goto	l164
  4301  001B72                     u2890:
  4302  001B72  FFFF               	dw	65535	; assembler added errata NOP
  4303  001B74                     
  4304                           ;motors.c: 379:             LATCbits.LATC2 = 0;
  4305  001B74  948B               	bcf	139,2,c	;volatile
  4306  001B76                     
  4307                           ;motors.c: 380:             tm0Error = 6;
  4308  001B76  0E00               	movlw	0
  4309  001B78  6E5C               	movwf	(_tm0Error+1)^0,c
  4310  001B7A  0E06               	movlw	6
  4311  001B7C  6E5B               	movwf	_tm0Error^0,c
  4312                           
  4313                           ;motors.c: 381:             break;
  4314  001B7E  EFF5  F00D         	goto	l3717
  4315  001B82                     l164:
  4316  001B82  FFFF               	dw	65535	; assembler added errata NOP
  4317                           
  4318                           ;motors.c: 385:         LATCbits.LATC2 = 1;
  4319  001B84  848B               	bsf	139,2,c	;volatile
  4320  001B86                     l3709:
  4321  001B86  FFFF               	dw	65535	; assembler added errata NOP
  4322  001B88  EC95  F011         	call	_stepMade	;wreg free
  4323  001B8C  5012               	movf	?_stepMade^0,w,c
  4324  001B8E  1013               	iorwf	(?_stepMade+1)^0,w,c
  4325  001B90  B4D8               	btfsc	status,2,c
  4326  001B92  EFCD  F00D         	goto	u2901
  4327  001B96  EFD0  F00D         	goto	u2900
  4328  001B9A                     u2901:
  4329  001B9A  FFFF               	dw	65535	; assembler added errata NOP
  4330  001B9C  EFC3  F00D         	goto	l3709
  4331  001BA0                     u2900:
  4332  001BA0  FFFF               	dw	65535	; assembler added errata NOP
  4333  001BA2                     
  4334                           ;motors.c: 391:         LATCbits.LATC2 = 0;
  4335  001BA2  948B               	bcf	139,2,c	;volatile
  4336  001BA4                     l3711:
  4337  001BA4  FFFF               	dw	65535	; assembler added errata NOP
  4338  001BA6  EC95  F011         	call	_stepMade	;wreg free
  4339  001BAA  5012               	movf	?_stepMade^0,w,c
  4340  001BAC  1013               	iorwf	(?_stepMade+1)^0,w,c
  4341  001BAE  B4D8               	btfsc	status,2,c
  4342  001BB0  EFDC  F00D         	goto	u2911
  4343  001BB4  EFDF  F00D         	goto	u2910
  4344  001BB8                     u2911:
  4345  001BB8  FFFF               	dw	65535	; assembler added errata NOP
  4346  001BBA  EFD2  F00D         	goto	l3711
  4347  001BBE                     u2910:
  4348  001BBE                     l3713:
  4349  001BBE  FFFF               	dw	65535	; assembler added errata NOP
  4350                           
  4351                           ;motors.c: 374:     while(!returnTouch() || PORTDbits.RD7){
  4352  001BC0  ECD1  F011         	call	_returnTouch	;wreg free
  4353  001BC4  5012               	movf	?_returnTouch^0,w,c
  4354  001BC6  1013               	iorwf	(?_returnTouch+1)^0,w,c
  4355  001BC8  B4D8               	btfsc	status,2,c
  4356  001BCA  EFE9  F00D         	goto	u2921
  4357  001BCE  EFEC  F00D         	goto	u2920
  4358  001BD2                     u2921:
  4359  001BD2  FFFF               	dw	65535	; assembler added errata NOP
  4360  001BD4  EFAE  F00D         	goto	l3703
  4361  001BD8                     u2920:
  4362  001BD8  FFFF               	dw	65535	; assembler added errata NOP
  4363  001BDA  BE83               	btfsc	131,7,c	;volatile
  4364  001BDC  EFF2  F00D         	goto	u2931
  4365  001BE0  EFF5  F00D         	goto	u2930
  4366  001BE4                     u2931:
  4367  001BE4  FFFF               	dw	65535	; assembler added errata NOP
  4368  001BE6  EFAE  F00D         	goto	l3703
  4369  001BEA                     u2930:
  4370  001BEA                     l3717:
  4371  001BEA  FFFF               	dw	65535	; assembler added errata NOP
  4372                           
  4373                           ;motors.c: 398:     stopADC();
  4374  001BEC  EC10  F012         	call	_stopADC	;wreg free
  4375  001BF0                     
  4376                           ;motors.c: 401:     resetTouch();
  4377  001BF0  ECE7  F011         	call	_resetTouch	;wreg free
  4378  001BF4                     
  4379                           ;motors.c: 404:     T0CONbits.TMR0ON = 0;
  4380  001BF4  9ED5               	bcf	213,7,c	;volatile
  4381  001BF6                     
  4382                           ;motors.c: 405:     T2CONbits.TMR2ON = 0;
  4383  001BF6  94CA               	bcf	202,2,c	;volatile
  4384                           
  4385                           ;motors.c: 407:     TMR0 = 0;
  4386  001BF8  0E00               	movlw	0
  4387  001BFA  6ED7               	movwf	215,c	;volatile
  4388  001BFC  0E00               	movlw	0
  4389  001BFE  6ED6               	movwf	214,c	;volatile
  4390                           
  4391                           ;motors.c: 408:     TMR2 = 0;
  4392  001C00  0E00               	movlw	0
  4393  001C02  6ECC               	movwf	204,c	;volatile
  4394  001C04                     
  4395                           ;motors.c: 411:     resetStep();
  4396  001C04  ECEC  F011         	call	_resetStep	;wreg free
  4397  001C08                     
  4398                           ;motors.c: 414:     if(PORTDbits.RD7){
  4399  001C08  AE83               	btfss	131,7,c	;volatile
  4400  001C0A  EF09  F00E         	goto	u2941
  4401  001C0E  EF0C  F00E         	goto	u2940
  4402  001C12                     u2941:
  4403  001C12  FFFF               	dw	65535	; assembler added errata NOP
  4404  001C14  EF11  F00E         	goto	l172
  4405  001C18                     u2940:
  4406  001C18  FFFF               	dw	65535	; assembler added errata NOP
  4407  001C1A                     
  4408                           ;motors.c: 415:         tm0Error = 2;
  4409  001C1A  0E00               	movlw	0
  4410  001C1C  6E5C               	movwf	(_tm0Error+1)^0,c
  4411  001C1E  0E02               	movlw	2
  4412  001C20  6E5B               	movwf	_tm0Error^0,c
  4413  001C22                     l172:
  4414  001C22  FFFF               	dw	65535	; assembler added errata NOP
  4415                           
  4416                           ;motors.c: 418:     return(tm0Error);
  4417  001C24  505B               	movf	_tm0Error^0,w,c
  4418  001C26  0012               	return		;funcret
  4419  001C28  FFFF               	dw	65535	; errata NOP
  4420  001C2A                     __end_of_touchObject:
  4421                           	callstack 0
  4422                           
  4423 ;; *************** function _stopADC *****************
  4424 ;; Defined at:
  4425 ;;		line 43 in file "adc.c"
  4426 ;; Parameters:    Size  Location     Type
  4427 ;;		None
  4428 ;; Auto vars:     Size  Location     Type
  4429 ;;		None
  4430 ;; Return value:  Size  Location     Type
  4431 ;;                  1    wreg      void 
  4432 ;; Registers used:
  4433 ;;		None
  4434 ;; Tracked objects:
  4435 ;;		On entry : 0/0
  4436 ;;		On exit  : 0/0
  4437 ;;		Unchanged: 0/0
  4438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4439 ;;      Params:         0       0       0       0       0       0       0
  4440 ;;      Locals:         0       0       0       0       0       0       0
  4441 ;;      Temps:          0       0       0       0       0       0       0
  4442 ;;      Totals:         0       0       0       0       0       0       0
  4443 ;;Total ram usage:        0 bytes
  4444 ;; Hardware stack levels used:    1
  4445 ;; Hardware stack levels required when called:    4
  4446 ;; This function calls:
  4447 ;;		Nothing
  4448 ;; This function is called by:
  4449 ;;		_touchObject
  4450 ;;		_touchTherm
  4451 ;; This function uses a non-reentrant model
  4452 ;;
  4453                           
  4454                           	psect	text26
  4455  002420                     __ptext26:
  4456                           	callstack 0
  4457  002420                     _stopADC:
  4458                           	callstack 0
  4459  002420  FFFF               	dw	65535	; assembler added errata NOP
  4460  002422                     
  4461                           ;adc.c: 44:     ADCON0bits.ADON = 0;
  4462  002422  90C2               	bcf	194,0,c	;volatile
  4463  002424  0012               	return		;funcret
  4464  002426  FFFF               	dw	65535	; errata NOP
  4465  002428                     __end_of_stopADC:
  4466                           	callstack 0
  4467                           
  4468 ;; *************** function _startADC *****************
  4469 ;; Defined at:
  4470 ;;		line 36 in file "adc.c"
  4471 ;; Parameters:    Size  Location     Type
  4472 ;;		None
  4473 ;; Auto vars:     Size  Location     Type
  4474 ;;		None
  4475 ;; Return value:  Size  Location     Type
  4476 ;;                  1    wreg      void 
  4477 ;; Registers used:
  4478 ;;		None
  4479 ;; Tracked objects:
  4480 ;;		On entry : 0/0
  4481 ;;		On exit  : 0/0
  4482 ;;		Unchanged: 0/0
  4483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4484 ;;      Params:         0       0       0       0       0       0       0
  4485 ;;      Locals:         0       0       0       0       0       0       0
  4486 ;;      Temps:          0       0       0       0       0       0       0
  4487 ;;      Totals:         0       0       0       0       0       0       0
  4488 ;;Total ram usage:        0 bytes
  4489 ;; Hardware stack levels used:    1
  4490 ;; Hardware stack levels required when called:    4
  4491 ;; This function calls:
  4492 ;;		Nothing
  4493 ;; This function is called by:
  4494 ;;		_touchObject
  4495 ;;		_touchTherm
  4496 ;; This function uses a non-reentrant model
  4497 ;;
  4498                           
  4499                           	psect	text27
  4500  002428                     __ptext27:
  4501                           	callstack 0
  4502  002428                     _startADC:
  4503                           	callstack 0
  4504  002428  FFFF               	dw	65535	; assembler added errata NOP
  4505  00242A                     
  4506                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  4507  00242A  80C2               	bsf	194,0,c	;volatile
  4508  00242C  0012               	return		;funcret
  4509  00242E  FFFF               	dw	65535	; errata NOP
  4510  002430                     __end_of_startADC:
  4511                           	callstack 0
  4512                           
  4513 ;; *************** function _returnTouch *****************
  4514 ;; Defined at:
  4515 ;;		line 50 in file "adc.c"
  4516 ;; Parameters:    Size  Location     Type
  4517 ;;		None
  4518 ;; Auto vars:     Size  Location     Type
  4519 ;;		None
  4520 ;; Return value:  Size  Location     Type
  4521 ;;                  2   17[COMRAM] unsigned int 
  4522 ;; Registers used:
  4523 ;;		None
  4524 ;; Tracked objects:
  4525 ;;		On entry : 0/0
  4526 ;;		On exit  : 0/0
  4527 ;;		Unchanged: 0/0
  4528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4529 ;;      Params:         2       0       0       0       0       0       0
  4530 ;;      Locals:         0       0       0       0       0       0       0
  4531 ;;      Temps:          0       0       0       0       0       0       0
  4532 ;;      Totals:         2       0       0       0       0       0       0
  4533 ;;Total ram usage:        2 bytes
  4534 ;; Hardware stack levels used:    1
  4535 ;; Hardware stack levels required when called:    4
  4536 ;; This function calls:
  4537 ;;		Nothing
  4538 ;; This function is called by:
  4539 ;;		_touchObject
  4540 ;; This function uses a non-reentrant model
  4541 ;;
  4542                           
  4543                           	psect	text28
  4544  0023A2                     __ptext28:
  4545                           	callstack 0
  4546  0023A2                     _returnTouch:
  4547                           	callstack 0
  4548  0023A2  FFFF               	dw	65535	; assembler added errata NOP
  4549  0023A4                     
  4550                           ;adc.c: 51:     return touch_rel;
  4551  0023A4  C065  F012         	movff	_touch_rel,?_returnTouch	;volatile
  4552  0023A8  6A13               	clrf	(?_returnTouch+1)^0,c
  4553  0023AA  0012               	return		;funcret
  4554  0023AC  FFFF               	dw	65535	; errata NOP
  4555  0023AE                     __end_of_returnTouch:
  4556                           	callstack 0
  4557                           
  4558 ;; *************** function _resetTouch *****************
  4559 ;; Defined at:
  4560 ;;		line 64 in file "adc.c"
  4561 ;; Parameters:    Size  Location     Type
  4562 ;;		None
  4563 ;; Auto vars:     Size  Location     Type
  4564 ;;		None
  4565 ;; Return value:  Size  Location     Type
  4566 ;;                  1    wreg      void 
  4567 ;; Registers used:
  4568 ;;		wreg, status,2
  4569 ;; Tracked objects:
  4570 ;;		On entry : 0/0
  4571 ;;		On exit  : 0/0
  4572 ;;		Unchanged: 0/0
  4573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4574 ;;      Params:         0       0       0       0       0       0       0
  4575 ;;      Locals:         0       0       0       0       0       0       0
  4576 ;;      Temps:          0       0       0       0       0       0       0
  4577 ;;      Totals:         0       0       0       0       0       0       0
  4578 ;;Total ram usage:        0 bytes
  4579 ;; Hardware stack levels used:    1
  4580 ;; Hardware stack levels required when called:    4
  4581 ;; This function calls:
  4582 ;;		Nothing
  4583 ;; This function is called by:
  4584 ;;		_touchObject
  4585 ;; This function uses a non-reentrant model
  4586 ;;
  4587                           
  4588                           	psect	text29
  4589  0023CE                     __ptext29:
  4590                           	callstack 0
  4591  0023CE                     _resetTouch:
  4592                           	callstack 0
  4593  0023CE  FFFF               	dw	65535	; assembler added errata NOP
  4594  0023D0                     
  4595                           ;adc.c: 65:     touch_rel = 0;
  4596  0023D0  0E00               	movlw	0
  4597  0023D2  6E65               	movwf	_touch_rel^0,c	;volatile
  4598  0023D4  0012               	return		;funcret
  4599  0023D6  FFFF               	dw	65535	; errata NOP
  4600  0023D8                     __end_of_resetTouch:
  4601                           	callstack 0
  4602                           
  4603 ;; *************** function _rotateObj *****************
  4604 ;; Defined at:
  4605 ;;		line 550 in file "motors.c"
  4606 ;; Parameters:    Size  Location     Type
  4607 ;;  rotAngle        1    wreg     unsigned char 
  4608 ;; Auto vars:     Size  Location     Type
  4609 ;;  rotAngle        1    3[BANK0 ] unsigned char 
  4610 ;;  totStep         2    4[BANK0 ] int 
  4611 ;;  i               1    6[BANK0 ] unsigned char 
  4612 ;; Return value:  Size  Location     Type
  4613 ;;                  1    wreg      void 
  4614 ;; Registers used:
  4615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4616 ;; Tracked objects:
  4617 ;;		On entry : 0/0
  4618 ;;		On exit  : 0/0
  4619 ;;		Unchanged: 0/0
  4620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4621 ;;      Params:         0       0       0       0       0       0       0
  4622 ;;      Locals:         0       4       0       0       0       0       0
  4623 ;;      Temps:          0       3       0       0       0       0       0
  4624 ;;      Totals:         0       7       0       0       0       0       0
  4625 ;;Total ram usage:        7 bytes
  4626 ;; Hardware stack levels used:    1
  4627 ;; Hardware stack levels required when called:    5
  4628 ;; This function calls:
  4629 ;;		___fldiv
  4630 ;;		___fltol
  4631 ;;		___xxtofl
  4632 ;; This function is called by:
  4633 ;;		_executeData
  4634 ;; This function uses a non-reentrant model
  4635 ;;
  4636                           
  4637                           	psect	text30
  4638  001DD2                     __ptext30:
  4639                           	callstack 0
  4640  001DD2                     _rotateObj:
  4641                           	callstack 0
  4642  001DD2  FFFF               	dw	65535	; assembler added errata NOP
  4643                           
  4644                           ;incstack = 0
  4645                           ;rotateObj@rotAngle stored from wreg
  4646  001DD4  0100               	movlb	0	; () banked
  4647  001DD6  6FF7               	movwf	rotateObj@rotAngle& (0+255),b
  4648  001DD8                     
  4649                           ;motors.c: 551:     static const float stepAngle = 0.08789;;motors.c: 552:     static ch
      +                          ar rotSequence[] = {0b1001, 0b0011, 0b0110, 0b1100};;motors.c: 553:     unsigned char i;
      +                          ;motors.c: 554:     int totStep = rotAngle/stepAngle;
  4650  001DD8  0EAC               	movlw	172
  4651  001DDA  6E24               	movwf	___fldiv@a^0,c
  4652  001DDC  0EFF               	movlw	255
  4653  001DDE  6E25               	movwf	(___fldiv@a+1)^0,c
  4654  001DE0  0EB3               	movlw	179
  4655  001DE2  6E26               	movwf	(___fldiv@a+2)^0,c
  4656  001DE4  0E3D               	movlw	61
  4657  001DE6  6E27               	movwf	(___fldiv@a+3)^0,c
  4658  001DE8  0100               	movlb	0	; () banked
  4659  001DEA  51F7               	movf	rotateObj@rotAngle& (0+255),w,b
  4660  001DEC  6E12               	movwf	___xxtofl@val^0,c
  4661  001DEE  6A13               	clrf	(___xxtofl@val+1)^0,c
  4662  001DF0  6A14               	clrf	(___xxtofl@val+2)^0,c
  4663  001DF2  6A15               	clrf	(___xxtofl@val+3)^0,c
  4664  001DF4  0E01               	movlw	1
  4665  001DF6  EC65  F006         	call	___xxtofl
  4666  001DFA  C012  F020         	movff	?___xxtofl,___fldiv@b
  4667  001DFE  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4668  001E02  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4669  001E06  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4670  001E0A  EC08  F003         	call	___fldiv	;wreg free
  4671  001E0E  C020  F039         	movff	?___fldiv,___fltol@f1
  4672  001E12  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4673  001E16  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4674  001E1A  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4675  001E1E  EC6C  F00B         	call	___fltol	;wreg free
  4676  001E22  C039  F0F8         	movff	?___fltol,rotateObj@totStep
  4677  001E26  C03A  F0F9         	movff	?___fltol+1,rotateObj@totStep+1
  4678  001E2A                     
  4679                           ;motors.c: 557:     for(i = 0; i < totStep; i++){
  4680  001E2A  0E00               	movlw	0
  4681  001E2C  0100               	movlb	0	; () banked
  4682  001E2E  6FFA               	movwf	rotateObj@i& (0+255),b
  4683  001E30  EF2F  F00F         	goto	l3813
  4684  001E34                     l3807:
  4685  001E34  FFFF               	dw	65535	; assembler added errata NOP
  4686                           
  4687                           ; BSR set to: 0
  4688                           ;motors.c: 559:         LATD &= 0xC3;
  4689  001E36  0EC3               	movlw	195
  4690  001E38  168C               	andwf	140,f,c	;volatile
  4691  001E3A                     
  4692                           ; BSR set to: 0
  4693                           ;motors.c: 561:         LATD |= rotSequence[i%4] << 2;
  4694  001E3A  51FA               	movf	rotateObj@i& (0+255),w,b
  4695  001E3C  0B03               	andlw	3
  4696  001E3E  6FF4               	movwf	??_rotateObj& (0+255),b
  4697  001E40  6BF5               	clrf	(??_rotateObj+1)& (0+255),b
  4698  001E42  0E80               	movlw	low rotateObj@rotSequence
  4699  001E44  25F4               	addwf	??_rotateObj& (0+255),w,b
  4700  001E46  6ED9               	movwf	fsr2l,c
  4701  001E48  0E00               	movlw	high rotateObj@rotSequence
  4702  001E4A  21F5               	addwfc	(??_rotateObj+1)& (0+255),w,b
  4703  001E4C  6EDA               	movwf	fsr2h,c
  4704  001E4E  50DF               	movf	indf2,w,c
  4705  001E50  6FF6               	movwf	(??_rotateObj+2)& (0+255),b
  4706  001E52  90D8               	bcf	status,0,c
  4707  001E54  37F6               	rlcf	(??_rotateObj+2)& (0+255),f,b
  4708  001E56  90D8               	bcf	status,0,c
  4709  001E58  35F6               	rlcf	(??_rotateObj+2)& (0+255),w,b
  4710  001E5A  128C               	iorwf	140,f,c	;volatile
  4711  001E5C                     
  4712                           ; BSR set to: 0
  4713                           ;motors.c: 562:     }
  4714  001E5C  2BFA               	incf	rotateObj@i& (0+255),f,b
  4715  001E5E                     l3813:
  4716  001E5E  FFFF               	dw	65535	; assembler added errata NOP
  4717                           
  4718                           ; BSR set to: 0
  4719  001E60  51FA               	movf	rotateObj@i& (0+255),w,b
  4720  001E62  6FF4               	movwf	??_rotateObj& (0+255),b
  4721  001E64  6BF5               	clrf	(??_rotateObj+1)& (0+255),b
  4722  001E66  51F8               	movf	rotateObj@totStep& (0+255),w,b
  4723  001E68  5DF4               	subwf	??_rotateObj& (0+255),w,b
  4724  001E6A  51F5               	movf	(??_rotateObj+1)& (0+255),w,b
  4725  001E6C  0A80               	xorlw	128
  4726  001E6E  6FF6               	movwf	(??_rotateObj+2)& (0+255),b
  4727  001E70  51F9               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4728  001E72  0A80               	xorlw	128
  4729  001E74  59F6               	subwfb	(??_rotateObj+2)& (0+255),w,b
  4730  001E76  A0D8               	btfss	status,0,c
  4731  001E78  EF40  F00F         	goto	u3051
  4732  001E7C  EF43  F00F         	goto	u3050
  4733  001E80                     u3051:
  4734  001E80  FFFF               	dw	65535	; assembler added errata NOP
  4735  001E82  EF1A  F00F         	goto	l3807
  4736  001E86                     u3050:
  4737  001E86  FFFF               	dw	65535	; assembler added errata NOP
  4738  001E88                     
  4739                           ; BSR set to: 0
  4740  001E88  0012               	return		;funcret
  4741  001E8A  FFFF               	dw	65535	; errata NOP
  4742  001E8C                     __end_of_rotateObj:
  4743                           	callstack 0
  4744                           
  4745 ;; *************** function ___xxtofl *****************
  4746 ;; Defined at:
  4747 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4748 ;; Parameters:    Size  Location     Type
  4749 ;;  sign            1    wreg     unsigned char 
  4750 ;;  val             4   17[COMRAM] long 
  4751 ;; Auto vars:     Size  Location     Type
  4752 ;;  sign            1   25[COMRAM] unsigned char 
  4753 ;;  arg             4   27[COMRAM] unsigned long 
  4754 ;;  exp             1   26[COMRAM] unsigned char 
  4755 ;; Return value:  Size  Location     Type
  4756 ;;                  4   17[COMRAM] unsigned char 
  4757 ;; Registers used:
  4758 ;;		wreg, status,2, status,0
  4759 ;; Tracked objects:
  4760 ;;		On entry : 0/0
  4761 ;;		On exit  : 0/0
  4762 ;;		Unchanged: 0/0
  4763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4764 ;;      Params:         4       0       0       0       0       0       0
  4765 ;;      Locals:         6       0       0       0       0       0       0
  4766 ;;      Temps:          4       0       0       0       0       0       0
  4767 ;;      Totals:        14       0       0       0       0       0       0
  4768 ;;Total ram usage:       14 bytes
  4769 ;; Hardware stack levels used:    1
  4770 ;; Hardware stack levels required when called:    4
  4771 ;; This function calls:
  4772 ;;		Nothing
  4773 ;; This function is called by:
  4774 ;;		_rotateObj
  4775 ;; This function uses a non-reentrant model
  4776 ;;
  4777                           
  4778                           	psect	text31
  4779  000CCA                     __ptext31:
  4780                           	callstack 0
  4781  000CCA                     ___xxtofl:
  4782                           	callstack 0
  4783  000CCA  FFFF               	dw	65535	; assembler added errata NOP
  4784                           
  4785                           ; BSR set to: 0
  4786                           ;incstack = 0
  4787                           ;___xxtofl@sign stored from wreg
  4788  000CCC  6E1A               	movwf	___xxtofl@sign^0,c
  4789  000CCE  501A               	movf	___xxtofl@sign^0,w,c
  4790  000CD0  B4D8               	btfsc	status,2,c
  4791  000CD2  EF6D  F006         	goto	u2621
  4792  000CD6  EF70  F006         	goto	u2620
  4793  000CDA                     u2621:
  4794  000CDA  FFFF               	dw	65535	; assembler added errata NOP
  4795  000CDC  EF95  F006         	goto	l1225
  4796  000CE0                     u2620:
  4797  000CE0  FFFF               	dw	65535	; assembler added errata NOP
  4798  000CE2  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4799  000CE4  EF79  F006         	goto	u2630
  4800  000CE8  EF76  F006         	goto	u2631
  4801  000CEC                     u2631:
  4802  000CEC  FFFF               	dw	65535	; assembler added errata NOP
  4803  000CEE  EF95  F006         	goto	l1225
  4804  000CF2                     u2630:
  4805  000CF2  FFFF               	dw	65535	; assembler added errata NOP
  4806  000CF4  C012  F016         	movff	___xxtofl@val,??___xxtofl
  4807  000CF8  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  4808  000CFC  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  4809  000D00  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  4810  000D04  1E16               	comf	??___xxtofl^0,f,c
  4811  000D06  1E17               	comf	(??___xxtofl+1)^0,f,c
  4812  000D08  1E18               	comf	(??___xxtofl+2)^0,f,c
  4813  000D0A  1E19               	comf	(??___xxtofl+3)^0,f,c
  4814  000D0C  2A16               	incf	??___xxtofl^0,f,c
  4815  000D0E  0E00               	movlw	0
  4816  000D10  2217               	addwfc	(??___xxtofl+1)^0,f,c
  4817  000D12  2218               	addwfc	(??___xxtofl+2)^0,f,c
  4818  000D14  2219               	addwfc	(??___xxtofl+3)^0,f,c
  4819  000D16  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  4820  000D1A  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4821  000D1E  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4822  000D22  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4823  000D26  EF9E  F006         	goto	l3541
  4824  000D2A                     l1225:
  4825  000D2A  FFFF               	dw	65535	; assembler added errata NOP
  4826  000D2C  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  4827  000D30  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4828  000D34  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4829  000D38  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4830  000D3C                     l3541:
  4831  000D3C  FFFF               	dw	65535	; assembler added errata NOP
  4832  000D3E  5012               	movf	___xxtofl@val^0,w,c
  4833  000D40  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  4834  000D42  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  4835  000D44  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  4836  000D46  A4D8               	btfss	status,2,c
  4837  000D48  EFA8  F006         	goto	u2641
  4838  000D4C  EFAB  F006         	goto	u2640
  4839  000D50                     u2641:
  4840  000D50  FFFF               	dw	65535	; assembler added errata NOP
  4841  000D52  EFB6  F006         	goto	l3547
  4842  000D56                     u2640:
  4843  000D56  FFFF               	dw	65535	; assembler added errata NOP
  4844  000D58  0E00               	movlw	0
  4845  000D5A  6E12               	movwf	?___xxtofl^0,c
  4846  000D5C  0E00               	movlw	0
  4847  000D5E  6E13               	movwf	(?___xxtofl+1)^0,c
  4848  000D60  0E00               	movlw	0
  4849  000D62  6E14               	movwf	(?___xxtofl+2)^0,c
  4850  000D64  0E00               	movlw	0
  4851  000D66  6E15               	movwf	(?___xxtofl+3)^0,c
  4852  000D68  EF5E  F007         	goto	l1228
  4853  000D6C                     l3547:
  4854  000D6C  FFFF               	dw	65535	; assembler added errata NOP
  4855  000D6E  0E96               	movlw	150
  4856  000D70  6E1B               	movwf	___xxtofl@exp^0,c
  4857  000D72  EFC2  F006         	goto	l3551
  4858  000D76                     l3549:
  4859  000D76  FFFF               	dw	65535	; assembler added errata NOP
  4860  000D78  2A1B               	incf	___xxtofl@exp^0,f,c
  4861  000D7A  90D8               	bcf	status,0,c
  4862  000D7C  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4863  000D7E  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4864  000D80  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4865  000D82  321C               	rrcf	___xxtofl@arg^0,f,c
  4866  000D84                     l3551:
  4867  000D84  FFFF               	dw	65535	; assembler added errata NOP
  4868  000D86  0E00               	movlw	0
  4869  000D88  141C               	andwf	___xxtofl@arg^0,w,c
  4870  000D8A  6E16               	movwf	??___xxtofl^0,c
  4871  000D8C  0E00               	movlw	0
  4872  000D8E  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4873  000D90  6E17               	movwf	(??___xxtofl+1)^0,c
  4874  000D92  0E00               	movlw	0
  4875  000D94  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4876  000D96  6E18               	movwf	(??___xxtofl+2)^0,c
  4877  000D98  0EFE               	movlw	254
  4878  000D9A  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4879  000D9C  6E19               	movwf	(??___xxtofl+3)^0,c
  4880  000D9E  5016               	movf	??___xxtofl^0,w,c
  4881  000DA0  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4882  000DA2  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4883  000DA4  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4884  000DA6  A4D8               	btfss	status,2,c
  4885  000DA8  EFD8  F006         	goto	u2651
  4886  000DAC  EFDB  F006         	goto	u2650
  4887  000DB0                     u2651:
  4888  000DB0  FFFF               	dw	65535	; assembler added errata NOP
  4889  000DB2  EFBB  F006         	goto	l3549
  4890  000DB6                     u2650:
  4891  000DB6  FFFF               	dw	65535	; assembler added errata NOP
  4892  000DB8  EFEB  F006         	goto	l1232
  4893  000DBC                     l3553:
  4894  000DBC  FFFF               	dw	65535	; assembler added errata NOP
  4895  000DBE  2A1B               	incf	___xxtofl@exp^0,f,c
  4896  000DC0  0E01               	movlw	1
  4897  000DC2  261C               	addwf	___xxtofl@arg^0,f,c
  4898  000DC4  0E00               	movlw	0
  4899  000DC6  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4900  000DC8  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4901  000DCA  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4902  000DCC  90D8               	bcf	status,0,c
  4903  000DCE  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4904  000DD0  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4905  000DD2  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4906  000DD4  321C               	rrcf	___xxtofl@arg^0,f,c
  4907  000DD6                     l1232:
  4908  000DD6  FFFF               	dw	65535	; assembler added errata NOP
  4909  000DD8  0E00               	movlw	0
  4910  000DDA  141C               	andwf	___xxtofl@arg^0,w,c
  4911  000DDC  6E16               	movwf	??___xxtofl^0,c
  4912  000DDE  0E00               	movlw	0
  4913  000DE0  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4914  000DE2  6E17               	movwf	(??___xxtofl+1)^0,c
  4915  000DE4  0E00               	movlw	0
  4916  000DE6  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4917  000DE8  6E18               	movwf	(??___xxtofl+2)^0,c
  4918  000DEA  0EFF               	movlw	255
  4919  000DEC  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4920  000DEE  6E19               	movwf	(??___xxtofl+3)^0,c
  4921  000DF0  5016               	movf	??___xxtofl^0,w,c
  4922  000DF2  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4923  000DF4  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4924  000DF6  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4925  000DF8  A4D8               	btfss	status,2,c
  4926  000DFA  EF01  F007         	goto	u2661
  4927  000DFE  EF04  F007         	goto	u2660
  4928  000E02                     u2661:
  4929  000E02  FFFF               	dw	65535	; assembler added errata NOP
  4930  000E04  EFDE  F006         	goto	l3553
  4931  000E08                     u2660:
  4932  000E08  FFFF               	dw	65535	; assembler added errata NOP
  4933  000E0A  EF0E  F007         	goto	l3561
  4934  000E0E                     l3559:
  4935  000E0E  FFFF               	dw	65535	; assembler added errata NOP
  4936  000E10  061B               	decf	___xxtofl@exp^0,f,c
  4937  000E12  90D8               	bcf	status,0,c
  4938  000E14  361C               	rlcf	___xxtofl@arg^0,f,c
  4939  000E16  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4940  000E18  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4941  000E1A  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4942  000E1C                     l3561:
  4943  000E1C  FFFF               	dw	65535	; assembler added errata NOP
  4944  000E1E  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4945  000E20  EF14  F007         	goto	u2671
  4946  000E24  EF17  F007         	goto	u2670
  4947  000E28                     u2671:
  4948  000E28  FFFF               	dw	65535	; assembler added errata NOP
  4949  000E2A  EF21  F007         	goto	l1239
  4950  000E2E                     u2670:
  4951  000E2E  FFFF               	dw	65535	; assembler added errata NOP
  4952  000E30  0E02               	movlw	2
  4953  000E32  601B               	cpfslt	___xxtofl@exp^0,c
  4954  000E34  EF1E  F007         	goto	u2681
  4955  000E38  EF21  F007         	goto	u2680
  4956  000E3C                     u2681:
  4957  000E3C  FFFF               	dw	65535	; assembler added errata NOP
  4958  000E3E  EF07  F007         	goto	l3559
  4959  000E42                     u2680:
  4960  000E42                     l1239:
  4961  000E42  FFFF               	dw	65535	; assembler added errata NOP
  4962  000E44  B01B               	btfsc	___xxtofl@exp^0,0,c
  4963  000E46  EF27  F007         	goto	u2691
  4964  000E4A  EF2A  F007         	goto	u2690
  4965  000E4E                     u2691:
  4966  000E4E  FFFF               	dw	65535	; assembler added errata NOP
  4967  000E50  EF2C  F007         	goto	l3567
  4968  000E54                     u2690:
  4969  000E54  FFFF               	dw	65535	; assembler added errata NOP
  4970  000E56  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  4971  000E58                     l3567:
  4972  000E58  FFFF               	dw	65535	; assembler added errata NOP
  4973  000E5A  90D8               	bcf	status,0,c
  4974  000E5C  321B               	rrcf	___xxtofl@exp^0,f,c
  4975  000E5E  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  4976  000E62  6A17               	clrf	(??___xxtofl+1)^0,c
  4977  000E64  6A18               	clrf	(??___xxtofl+2)^0,c
  4978  000E66  6A19               	clrf	(??___xxtofl+3)^0,c
  4979  000E68  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  4980  000E6C  6A18               	clrf	(??___xxtofl+2)^0,c
  4981  000E6E  6A17               	clrf	(??___xxtofl+1)^0,c
  4982  000E70  6A16               	clrf	??___xxtofl^0,c
  4983  000E72  5016               	movf	??___xxtofl^0,w,c
  4984  000E74  121C               	iorwf	___xxtofl@arg^0,f,c
  4985  000E76  5017               	movf	(??___xxtofl+1)^0,w,c
  4986  000E78  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4987  000E7A  5018               	movf	(??___xxtofl+2)^0,w,c
  4988  000E7C  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4989  000E7E  5019               	movf	(??___xxtofl+3)^0,w,c
  4990  000E80  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4991  000E82  501A               	movf	___xxtofl@sign^0,w,c
  4992  000E84  B4D8               	btfsc	status,2,c
  4993  000E86  EF47  F007         	goto	u2701
  4994  000E8A  EF4A  F007         	goto	u2700
  4995  000E8E                     u2701:
  4996  000E8E  FFFF               	dw	65535	; assembler added errata NOP
  4997  000E90  EF55  F007         	goto	l3577
  4998  000E94                     u2700:
  4999  000E94  FFFF               	dw	65535	; assembler added errata NOP
  5000  000E96  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  5001  000E98  EF53  F007         	goto	u2710
  5002  000E9C  EF50  F007         	goto	u2711
  5003  000EA0                     u2711:
  5004  000EA0  FFFF               	dw	65535	; assembler added errata NOP
  5005  000EA2  EF55  F007         	goto	l3577
  5006  000EA6                     u2710:
  5007  000EA6  FFFF               	dw	65535	; assembler added errata NOP
  5008  000EA8  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  5009  000EAA                     l3577:
  5010  000EAA  FFFF               	dw	65535	; assembler added errata NOP
  5011  000EAC  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  5012  000EB0  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  5013  000EB4  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  5014  000EB8  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  5015  000EBC                     l1228:
  5016  000EBC  FFFF               	dw	65535	; assembler added errata NOP
  5017  000EBE  0012               	return		;funcret
  5018  000EC0  FFFF               	dw	65535	; errata NOP
  5019  000EC2                     __end_of___xxtofl:
  5020                           	callstack 0
  5021                           
  5022 ;; *************** function ___fltol *****************
  5023 ;; Defined at:
  5024 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  5025 ;; Parameters:    Size  Location     Type
  5026 ;;  f1              4   56[COMRAM] unsigned char 
  5027 ;; Auto vars:     Size  Location     Type
  5028 ;;  exp1            1   65[COMRAM] unsigned char 
  5029 ;;  sign1           1   64[COMRAM] unsigned char 
  5030 ;; Return value:  Size  Location     Type
  5031 ;;                  4   56[COMRAM] long 
  5032 ;; Registers used:
  5033 ;;		wreg, status,2, status,0
  5034 ;; Tracked objects:
  5035 ;;		On entry : 0/0
  5036 ;;		On exit  : 0/0
  5037 ;;		Unchanged: 0/0
  5038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5039 ;;      Params:         4       0       0       0       0       0       0
  5040 ;;      Locals:         2       0       0       0       0       0       0
  5041 ;;      Temps:          4       0       0       0       0       0       0
  5042 ;;      Totals:        10       0       0       0       0       0       0
  5043 ;;Total ram usage:       10 bytes
  5044 ;; Hardware stack levels used:    1
  5045 ;; Hardware stack levels required when called:    4
  5046 ;; This function calls:
  5047 ;;		Nothing
  5048 ;; This function is called by:
  5049 ;;		_rotateObj
  5050 ;; This function uses a non-reentrant model
  5051 ;;
  5052                           
  5053                           	psect	text32
  5054  0016D8                     __ptext32:
  5055                           	callstack 0
  5056  0016D8                     ___fltol:
  5057                           	callstack 0
  5058  0016D8  FFFF               	dw	65535	; assembler added errata NOP
  5059  0016DA  343B               	rlcf	(___fltol@f1+2)^0,w,c
  5060  0016DC  343C               	rlcf	(___fltol@f1+3)^0,w,c
  5061  0016DE  6E42               	movwf	___fltol@exp1^0,c
  5062  0016E0  5042               	movf	___fltol@exp1^0,w,c
  5063  0016E2  A4D8               	btfss	status,2,c
  5064  0016E4  EF76  F00B         	goto	u2551
  5065  0016E8  EF79  F00B         	goto	u2550
  5066  0016EC                     u2551:
  5067  0016EC  FFFF               	dw	65535	; assembler added errata NOP
  5068  0016EE  EF85  F00B         	goto	l3497
  5069  0016F2                     u2550:
  5070  0016F2  FFFF               	dw	65535	; assembler added errata NOP
  5071  0016F4                     l3493:
  5072  0016F4  FFFF               	dw	65535	; assembler added errata NOP
  5073  0016F6  0E00               	movlw	0
  5074  0016F8  6E39               	movwf	?___fltol^0,c
  5075  0016FA  0E00               	movlw	0
  5076  0016FC  6E3A               	movwf	(?___fltol+1)^0,c
  5077  0016FE  0E00               	movlw	0
  5078  001700  6E3B               	movwf	(?___fltol+2)^0,c
  5079  001702  0E00               	movlw	0
  5080  001704  6E3C               	movwf	(?___fltol+3)^0,c
  5081  001706  EF04  F00C         	goto	l867
  5082  00170A                     l3497:
  5083  00170A  FFFF               	dw	65535	; assembler added errata NOP
  5084  00170C  C039  F03D         	movff	___fltol@f1,??___fltol
  5085  001710  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  5086  001714  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  5087  001718  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  5088  00171C  0E20               	movlw	32
  5089  00171E  EF97  F00B         	goto	u2560
  5090  001722                     u2565:
  5091  001722  FFFF               	dw	65535	; assembler added errata NOP
  5092  001724  90D8               	bcf	status,0,c
  5093  001726  3240               	rrcf	(??___fltol+3)^0,f,c
  5094  001728  323F               	rrcf	(??___fltol+2)^0,f,c
  5095  00172A  323E               	rrcf	(??___fltol+1)^0,f,c
  5096  00172C  323D               	rrcf	??___fltol^0,f,c
  5097  00172E                     u2560:
  5098  00172E  FFFF               	dw	65535	; assembler added errata NOP
  5099  001730  2EE8               	decfsz	wreg,f,c
  5100  001732  EF91  F00B         	goto	u2565
  5101  001736  503D               	movf	??___fltol^0,w,c
  5102  001738  6E41               	movwf	___fltol@sign1^0,c
  5103  00173A  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  5104  00173C  0EFF               	movlw	255
  5105  00173E  1639               	andwf	___fltol@f1^0,f,c
  5106  001740  0EFF               	movlw	255
  5107  001742  163A               	andwf	(___fltol@f1+1)^0,f,c
  5108  001744  0EFF               	movlw	255
  5109  001746  163B               	andwf	(___fltol@f1+2)^0,f,c
  5110  001748  0E00               	movlw	0
  5111  00174A  163C               	andwf	(___fltol@f1+3)^0,f,c
  5112  00174C  0E96               	movlw	150
  5113  00174E  5E42               	subwf	___fltol@exp1^0,f,c
  5114  001750  BE42               	btfsc	___fltol@exp1^0,7,c
  5115  001752  EFB0  F00B         	goto	u2570
  5116  001756  EFAD  F00B         	goto	u2571
  5117  00175A                     u2571:
  5118  00175A  FFFF               	dw	65535	; assembler added errata NOP
  5119  00175C  EFCA  F00B         	goto	l3517
  5120  001760                     u2570:
  5121  001760  FFFF               	dw	65535	; assembler added errata NOP
  5122  001762  5042               	movf	___fltol@exp1^0,w,c
  5123  001764  0A80               	xorlw	128
  5124  001766  0F97               	addlw	151
  5125  001768  B0D8               	btfsc	status,0,c
  5126  00176A  EFB9  F00B         	goto	u2581
  5127  00176E  EFBC  F00B         	goto	u2580
  5128  001772                     u2581:
  5129  001772  FFFF               	dw	65535	; assembler added errata NOP
  5130  001774  EFBF  F00B         	goto	l3513
  5131  001778                     u2580:
  5132  001778  FFFF               	dw	65535	; assembler added errata NOP
  5133  00177A  EF7A  F00B         	goto	l3493
  5134  00177E                     l3513:
  5135  00177E  FFFF               	dw	65535	; assembler added errata NOP
  5136  001780  90D8               	bcf	status,0,c
  5137  001782  323C               	rrcf	(___fltol@f1+3)^0,f,c
  5138  001784  323B               	rrcf	(___fltol@f1+2)^0,f,c
  5139  001786  323A               	rrcf	(___fltol@f1+1)^0,f,c
  5140  001788  3239               	rrcf	___fltol@f1^0,f,c
  5141  00178A  3E42               	incfsz	___fltol@exp1^0,f,c
  5142  00178C  EFBF  F00B         	goto	l3513
  5143  001790  EFE8  F00B         	goto	l3527
  5144  001794                     l3517:
  5145  001794  FFFF               	dw	65535	; assembler added errata NOP
  5146  001796  0E1F               	movlw	31
  5147  001798  6442               	cpfsgt	___fltol@exp1^0,c
  5148  00179A  EFD1  F00B         	goto	u2591
  5149  00179E  EFD4  F00B         	goto	u2590
  5150  0017A2                     u2591:
  5151  0017A2  FFFF               	dw	65535	; assembler added errata NOP
  5152  0017A4  EFDE  F00B         	goto	l3525
  5153  0017A8                     u2590:
  5154  0017A8  FFFF               	dw	65535	; assembler added errata NOP
  5155  0017AA  EF7A  F00B         	goto	l3493
  5156  0017AE                     l3523:
  5157  0017AE  FFFF               	dw	65535	; assembler added errata NOP
  5158  0017B0  90D8               	bcf	status,0,c
  5159  0017B2  3639               	rlcf	___fltol@f1^0,f,c
  5160  0017B4  363A               	rlcf	(___fltol@f1+1)^0,f,c
  5161  0017B6  363B               	rlcf	(___fltol@f1+2)^0,f,c
  5162  0017B8  363C               	rlcf	(___fltol@f1+3)^0,f,c
  5163  0017BA  0642               	decf	___fltol@exp1^0,f,c
  5164  0017BC                     l3525:
  5165  0017BC  FFFF               	dw	65535	; assembler added errata NOP
  5166  0017BE  5042               	movf	___fltol@exp1^0,w,c
  5167  0017C0  A4D8               	btfss	status,2,c
  5168  0017C2  EFE5  F00B         	goto	u2601
  5169  0017C6  EFE8  F00B         	goto	u2600
  5170  0017CA                     u2601:
  5171  0017CA  FFFF               	dw	65535	; assembler added errata NOP
  5172  0017CC  EFD7  F00B         	goto	l3523
  5173  0017D0                     u2600:
  5174  0017D0                     l3527:
  5175  0017D0  FFFF               	dw	65535	; assembler added errata NOP
  5176  0017D2  5041               	movf	___fltol@sign1^0,w,c
  5177  0017D4  B4D8               	btfsc	status,2,c
  5178  0017D6  EFEF  F00B         	goto	u2611
  5179  0017DA  EFF2  F00B         	goto	u2610
  5180  0017DE                     u2611:
  5181  0017DE  FFFF               	dw	65535	; assembler added errata NOP
  5182  0017E0  EFFB  F00B         	goto	l3531
  5183  0017E4                     u2610:
  5184  0017E4  FFFF               	dw	65535	; assembler added errata NOP
  5185  0017E6  1E3C               	comf	(___fltol@f1+3)^0,f,c
  5186  0017E8  1E3B               	comf	(___fltol@f1+2)^0,f,c
  5187  0017EA  1E3A               	comf	(___fltol@f1+1)^0,f,c
  5188  0017EC  6C39               	negf	___fltol@f1^0,c
  5189  0017EE  0E00               	movlw	0
  5190  0017F0  223A               	addwfc	(___fltol@f1+1)^0,f,c
  5191  0017F2  223B               	addwfc	(___fltol@f1+2)^0,f,c
  5192  0017F4  223C               	addwfc	(___fltol@f1+3)^0,f,c
  5193  0017F6                     l3531:
  5194  0017F6  FFFF               	dw	65535	; assembler added errata NOP
  5195  0017F8  C039  F039         	movff	___fltol@f1,?___fltol
  5196  0017FC  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  5197  001800  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  5198  001804  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  5199  001808                     l867:
  5200  001808  FFFF               	dw	65535	; assembler added errata NOP
  5201  00180A  0012               	return		;funcret
  5202  00180C  FFFF               	dw	65535	; errata NOP
  5203  00180E                     __end_of___fltol:
  5204                           	callstack 0
  5205                           
  5206 ;; *************** function ___fldiv *****************
  5207 ;; Defined at:
  5208 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  5209 ;; Parameters:    Size  Location     Type
  5210 ;;  b               4   31[COMRAM] long 
  5211 ;;  a               4   35[COMRAM] long 
  5212 ;; Auto vars:     Size  Location     Type
  5213 ;;  grs             4   50[COMRAM] unsigned long 
  5214 ;;  rem             4   43[COMRAM] unsigned long 
  5215 ;;  new_exp         2   48[COMRAM] short 
  5216 ;;  aexp            1   55[COMRAM] unsigned char 
  5217 ;;  bexp            1   54[COMRAM] unsigned char 
  5218 ;;  sign            1   47[COMRAM] unsigned char 
  5219 ;; Return value:  Size  Location     Type
  5220 ;;                  4   31[COMRAM] unsigned char 
  5221 ;; Registers used:
  5222 ;;		wreg, status,2, status,0
  5223 ;; Tracked objects:
  5224 ;;		On entry : 0/0
  5225 ;;		On exit  : 0/0
  5226 ;;		Unchanged: 0/0
  5227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5228 ;;      Params:         8       0       0       0       0       0       0
  5229 ;;      Locals:        13       0       0       0       0       0       0
  5230 ;;      Temps:          4       0       0       0       0       0       0
  5231 ;;      Totals:        25       0       0       0       0       0       0
  5232 ;;Total ram usage:       25 bytes
  5233 ;; Hardware stack levels used:    1
  5234 ;; Hardware stack levels required when called:    4
  5235 ;; This function calls:
  5236 ;;		Nothing
  5237 ;; This function is called by:
  5238 ;;		_rotateObj
  5239 ;; This function uses a non-reentrant model
  5240 ;;
  5241                           
  5242                           	psect	text33
  5243  000610                     __ptext33:
  5244                           	callstack 0
  5245  000610                     ___fldiv:
  5246                           	callstack 0
  5247  000610  FFFF               	dw	65535	; assembler added errata NOP
  5248  000612  5023               	movf	(___fldiv@b+3)^0,w,c
  5249  000614  0B80               	andlw	128
  5250  000616  6E30               	movwf	___fldiv@sign^0,c
  5251  000618  5023               	movf	(___fldiv@b+3)^0,w,c
  5252  00061A  2423               	addwf	(___fldiv@b+3)^0,w,c
  5253  00061C  6E37               	movwf	___fldiv@bexp^0,c
  5254  00061E  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5255  000620  EF14  F003         	goto	u2321
  5256  000624  EF17  F003         	goto	u2320
  5257  000628                     u2321:
  5258  000628  FFFF               	dw	65535	; assembler added errata NOP
  5259  00062A  EF19  F003         	goto	l3359
  5260  00062E                     u2320:
  5261  00062E  FFFF               	dw	65535	; assembler added errata NOP
  5262  000630  8037               	bsf	___fldiv@bexp^0,0,c
  5263  000632                     l3359:
  5264  000632  FFFF               	dw	65535	; assembler added errata NOP
  5265  000634  5037               	movf	___fldiv@bexp^0,w,c
  5266  000636  B4D8               	btfsc	status,2,c
  5267  000638  EF20  F003         	goto	u2331
  5268  00063C  EF23  F003         	goto	u2330
  5269  000640                     u2331:
  5270  000640  FFFF               	dw	65535	; assembler added errata NOP
  5271  000642  EF3C  F003         	goto	l3369
  5272  000646                     u2330:
  5273  000646  FFFF               	dw	65535	; assembler added errata NOP
  5274  000648  2837               	incf	___fldiv@bexp^0,w,c
  5275  00064A  A4D8               	btfss	status,2,c
  5276  00064C  EF2A  F003         	goto	u2341
  5277  000650  EF2D  F003         	goto	u2340
  5278  000654                     u2341:
  5279  000654  FFFF               	dw	65535	; assembler added errata NOP
  5280  000656  EF36  F003         	goto	l3365
  5281  00065A                     u2340:
  5282  00065A  FFFF               	dw	65535	; assembler added errata NOP
  5283  00065C  0E00               	movlw	0
  5284  00065E  6E20               	movwf	___fldiv@b^0,c
  5285  000660  0E00               	movlw	0
  5286  000662  6E21               	movwf	(___fldiv@b+1)^0,c
  5287  000664  0E00               	movlw	0
  5288  000666  6E22               	movwf	(___fldiv@b+2)^0,c
  5289  000668  0E00               	movlw	0
  5290  00066A  6E23               	movwf	(___fldiv@b+3)^0,c
  5291  00066C                     l3365:
  5292  00066C  FFFF               	dw	65535	; assembler added errata NOP
  5293  00066E  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5294  000670  0E00               	movlw	0
  5295  000672  6E23               	movwf	(___fldiv@b+3)^0,c
  5296  000674  EF45  F003         	goto	l3371
  5297  000678                     l3369:
  5298  000678  FFFF               	dw	65535	; assembler added errata NOP
  5299  00067A  0E00               	movlw	0
  5300  00067C  6E20               	movwf	___fldiv@b^0,c
  5301  00067E  0E00               	movlw	0
  5302  000680  6E21               	movwf	(___fldiv@b+1)^0,c
  5303  000682  0E00               	movlw	0
  5304  000684  6E22               	movwf	(___fldiv@b+2)^0,c
  5305  000686  0E00               	movlw	0
  5306  000688  6E23               	movwf	(___fldiv@b+3)^0,c
  5307  00068A                     l3371:
  5308  00068A  FFFF               	dw	65535	; assembler added errata NOP
  5309  00068C  5027               	movf	(___fldiv@a+3)^0,w,c
  5310  00068E  0B80               	andlw	128
  5311  000690  1A30               	xorwf	___fldiv@sign^0,f,c
  5312  000692  5027               	movf	(___fldiv@a+3)^0,w,c
  5313  000694  2427               	addwf	(___fldiv@a+3)^0,w,c
  5314  000696  6E38               	movwf	___fldiv@aexp^0,c
  5315  000698  AE26               	btfss	(___fldiv@a+2)^0,7,c
  5316  00069A  EF51  F003         	goto	u2351
  5317  00069E  EF54  F003         	goto	u2350
  5318  0006A2                     u2351:
  5319  0006A2  FFFF               	dw	65535	; assembler added errata NOP
  5320  0006A4  EF56  F003         	goto	l3379
  5321  0006A8                     u2350:
  5322  0006A8  FFFF               	dw	65535	; assembler added errata NOP
  5323  0006AA  8038               	bsf	___fldiv@aexp^0,0,c
  5324  0006AC                     l3379:
  5325  0006AC  FFFF               	dw	65535	; assembler added errata NOP
  5326  0006AE  5038               	movf	___fldiv@aexp^0,w,c
  5327  0006B0  B4D8               	btfsc	status,2,c
  5328  0006B2  EF5D  F003         	goto	u2361
  5329  0006B6  EF60  F003         	goto	u2360
  5330  0006BA                     u2361:
  5331  0006BA  FFFF               	dw	65535	; assembler added errata NOP
  5332  0006BC  EF79  F003         	goto	l3389
  5333  0006C0                     u2360:
  5334  0006C0  FFFF               	dw	65535	; assembler added errata NOP
  5335  0006C2  2838               	incf	___fldiv@aexp^0,w,c
  5336  0006C4  A4D8               	btfss	status,2,c
  5337  0006C6  EF67  F003         	goto	u2371
  5338  0006CA  EF6A  F003         	goto	u2370
  5339  0006CE                     u2371:
  5340  0006CE  FFFF               	dw	65535	; assembler added errata NOP
  5341  0006D0  EF73  F003         	goto	l3385
  5342  0006D4                     u2370:
  5343  0006D4  FFFF               	dw	65535	; assembler added errata NOP
  5344  0006D6  0E00               	movlw	0
  5345  0006D8  6E24               	movwf	___fldiv@a^0,c
  5346  0006DA  0E00               	movlw	0
  5347  0006DC  6E25               	movwf	(___fldiv@a+1)^0,c
  5348  0006DE  0E00               	movlw	0
  5349  0006E0  6E26               	movwf	(___fldiv@a+2)^0,c
  5350  0006E2  0E00               	movlw	0
  5351  0006E4  6E27               	movwf	(___fldiv@a+3)^0,c
  5352  0006E6                     l3385:
  5353  0006E6  FFFF               	dw	65535	; assembler added errata NOP
  5354  0006E8  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5355  0006EA  0E00               	movlw	0
  5356  0006EC  6E27               	movwf	(___fldiv@a+3)^0,c
  5357  0006EE  EF82  F003         	goto	l3391
  5358  0006F2                     l3389:
  5359  0006F2  FFFF               	dw	65535	; assembler added errata NOP
  5360  0006F4  0E00               	movlw	0
  5361  0006F6  6E24               	movwf	___fldiv@a^0,c
  5362  0006F8  0E00               	movlw	0
  5363  0006FA  6E25               	movwf	(___fldiv@a+1)^0,c
  5364  0006FC  0E00               	movlw	0
  5365  0006FE  6E26               	movwf	(___fldiv@a+2)^0,c
  5366  000700  0E00               	movlw	0
  5367  000702  6E27               	movwf	(___fldiv@a+3)^0,c
  5368  000704                     l3391:
  5369  000704  FFFF               	dw	65535	; assembler added errata NOP
  5370  000706  5024               	movf	___fldiv@a^0,w,c
  5371  000708  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5372  00070A  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5373  00070C  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5374  00070E  A4D8               	btfss	status,2,c
  5375  000710  EF8C  F003         	goto	u2381
  5376  000714  EF8F  F003         	goto	u2380
  5377  000718                     u2381:
  5378  000718  FFFF               	dw	65535	; assembler added errata NOP
  5379  00071A  EFA9  F003         	goto	l3403
  5380  00071E                     u2380:
  5381  00071E  FFFF               	dw	65535	; assembler added errata NOP
  5382  000720  0E00               	movlw	0
  5383  000722  6E20               	movwf	___fldiv@b^0,c
  5384  000724  0E00               	movlw	0
  5385  000726  6E21               	movwf	(___fldiv@b+1)^0,c
  5386  000728  0E00               	movlw	0
  5387  00072A  6E22               	movwf	(___fldiv@b+2)^0,c
  5388  00072C  0E00               	movlw	0
  5389  00072E  6E23               	movwf	(___fldiv@b+3)^0,c
  5390  000730  0E80               	movlw	128
  5391  000732  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5392  000734  0E7F               	movlw	127
  5393  000736  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5394  000738                     l3397:
  5395  000738  FFFF               	dw	65535	; assembler added errata NOP
  5396  00073A  5030               	movf	___fldiv@sign^0,w,c
  5397  00073C  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5398  00073E  C020  F020         	movff	___fldiv@b,?___fldiv
  5399  000742  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5400  000746  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5401  00074A  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5402  00074E  EF1E  F005         	goto	l1152
  5403  000752                     l3403:
  5404  000752  FFFF               	dw	65535	; assembler added errata NOP
  5405  000754  5037               	movf	___fldiv@bexp^0,w,c
  5406  000756  A4D8               	btfss	status,2,c
  5407  000758  EFB0  F003         	goto	u2391
  5408  00075C  EFB3  F003         	goto	u2390
  5409  000760                     u2391:
  5410  000760  FFFF               	dw	65535	; assembler added errata NOP
  5411  000762  EFBE  F003         	goto	l3411
  5412  000766                     u2390:
  5413  000766  FFFF               	dw	65535	; assembler added errata NOP
  5414  000768  0E00               	movlw	0
  5415  00076A  6E20               	movwf	?___fldiv^0,c
  5416  00076C  0E00               	movlw	0
  5417  00076E  6E21               	movwf	(?___fldiv+1)^0,c
  5418  000770  0E00               	movlw	0
  5419  000772  6E22               	movwf	(?___fldiv+2)^0,c
  5420  000774  0E00               	movlw	0
  5421  000776  6E23               	movwf	(?___fldiv+3)^0,c
  5422  000778  EF1E  F005         	goto	l1152
  5423  00077C                     l3411:
  5424  00077C  FFFF               	dw	65535	; assembler added errata NOP
  5425  00077E  5038               	movf	___fldiv@aexp^0,w,c
  5426  000780  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5427  000784  6A29               	clrf	(??___fldiv+1)^0,c
  5428  000786  5E28               	subwf	??___fldiv^0,f,c
  5429  000788  0E00               	movlw	0
  5430  00078A  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5431  00078C  0E7F               	movlw	127
  5432  00078E  2428               	addwf	??___fldiv^0,w,c
  5433  000790  6E31               	movwf	___fldiv@new_exp^0,c
  5434  000792  0E00               	movlw	0
  5435  000794  2029               	addwfc	(??___fldiv+1)^0,w,c
  5436  000796  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5437  000798  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5438  00079C  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5439  0007A0  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5440  0007A4  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5441  0007A8  0E00               	movlw	0
  5442  0007AA  6E20               	movwf	___fldiv@b^0,c
  5443  0007AC  0E00               	movlw	0
  5444  0007AE  6E21               	movwf	(___fldiv@b+1)^0,c
  5445  0007B0  0E00               	movlw	0
  5446  0007B2  6E22               	movwf	(___fldiv@b+2)^0,c
  5447  0007B4  0E00               	movlw	0
  5448  0007B6  6E23               	movwf	(___fldiv@b+3)^0,c
  5449  0007B8  0E00               	movlw	0
  5450  0007BA  6E33               	movwf	___fldiv@grs^0,c
  5451  0007BC  0E00               	movlw	0
  5452  0007BE  6E34               	movwf	(___fldiv@grs+1)^0,c
  5453  0007C0  0E00               	movlw	0
  5454  0007C2  6E35               	movwf	(___fldiv@grs+2)^0,c
  5455  0007C4  0E00               	movlw	0
  5456  0007C6  6E36               	movwf	(___fldiv@grs+3)^0,c
  5457  0007C8  0E00               	movlw	0
  5458  0007CA  6E38               	movwf	___fldiv@aexp^0,c
  5459  0007CC  EF2A  F004         	goto	l1154
  5460  0007D0                     l3421:
  5461  0007D0  FFFF               	dw	65535	; assembler added errata NOP
  5462  0007D2  5038               	movf	___fldiv@aexp^0,w,c
  5463  0007D4  B4D8               	btfsc	status,2,c
  5464  0007D6  EFEF  F003         	goto	u2401
  5465  0007DA  EFF2  F003         	goto	u2400
  5466  0007DE                     u2401:
  5467  0007DE  FFFF               	dw	65535	; assembler added errata NOP
  5468  0007E0  EF0D  F004         	goto	l3429
  5469  0007E4                     u2400:
  5470  0007E4  FFFF               	dw	65535	; assembler added errata NOP
  5471  0007E6  90D8               	bcf	status,0,c
  5472  0007E8  362C               	rlcf	___fldiv@rem^0,f,c
  5473  0007EA  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5474  0007EC  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5475  0007EE  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5476  0007F0  90D8               	bcf	status,0,c
  5477  0007F2  3620               	rlcf	___fldiv@b^0,f,c
  5478  0007F4  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5479  0007F6  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5480  0007F8  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5481  0007FA  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5482  0007FC  EF02  F004         	goto	u2411
  5483  000800  EF05  F004         	goto	u2410
  5484  000804                     u2411:
  5485  000804  FFFF               	dw	65535	; assembler added errata NOP
  5486  000806  EF07  F004         	goto	l1157
  5487  00080A                     u2410:
  5488  00080A  FFFF               	dw	65535	; assembler added errata NOP
  5489  00080C  8020               	bsf	___fldiv@b^0,0,c
  5490  00080E                     l1157:
  5491  00080E  FFFF               	dw	65535	; assembler added errata NOP
  5492  000810  90D8               	bcf	status,0,c
  5493  000812  3633               	rlcf	___fldiv@grs^0,f,c
  5494  000814  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5495  000816  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5496  000818  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5497  00081A                     l3429:
  5498  00081A  FFFF               	dw	65535	; assembler added errata NOP
  5499  00081C  5024               	movf	___fldiv@a^0,w,c
  5500  00081E  5C2C               	subwf	___fldiv@rem^0,w,c
  5501  000820  5025               	movf	(___fldiv@a+1)^0,w,c
  5502  000822  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5503  000824  5026               	movf	(___fldiv@a+2)^0,w,c
  5504  000826  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5505  000828  5027               	movf	(___fldiv@a+3)^0,w,c
  5506  00082A  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5507  00082C  A0D8               	btfss	status,0,c
  5508  00082E  EF1B  F004         	goto	u2421
  5509  000832  EF1E  F004         	goto	u2420
  5510  000836                     u2421:
  5511  000836  FFFF               	dw	65535	; assembler added errata NOP
  5512  000838  EF28  F004         	goto	l3435
  5513  00083C                     u2420:
  5514  00083C  FFFF               	dw	65535	; assembler added errata NOP
  5515  00083E  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5516  000840  5024               	movf	___fldiv@a^0,w,c
  5517  000842  5E2C               	subwf	___fldiv@rem^0,f,c
  5518  000844  5025               	movf	(___fldiv@a+1)^0,w,c
  5519  000846  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5520  000848  5026               	movf	(___fldiv@a+2)^0,w,c
  5521  00084A  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5522  00084C  5027               	movf	(___fldiv@a+3)^0,w,c
  5523  00084E  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5524  000850                     l3435:
  5525  000850  FFFF               	dw	65535	; assembler added errata NOP
  5526  000852  2A38               	incf	___fldiv@aexp^0,f,c
  5527  000854                     l1154:
  5528  000854  FFFF               	dw	65535	; assembler added errata NOP
  5529  000856  0E19               	movlw	25
  5530  000858  6438               	cpfsgt	___fldiv@aexp^0,c
  5531  00085A  EF31  F004         	goto	u2431
  5532  00085E  EF34  F004         	goto	u2430
  5533  000862                     u2431:
  5534  000862  FFFF               	dw	65535	; assembler added errata NOP
  5535  000864  EFE8  F003         	goto	l3421
  5536  000868                     u2430:
  5537  000868  FFFF               	dw	65535	; assembler added errata NOP
  5538  00086A  502C               	movf	___fldiv@rem^0,w,c
  5539  00086C  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5540  00086E  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5541  000870  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5542  000872  B4D8               	btfsc	status,2,c
  5543  000874  EF3E  F004         	goto	u2441
  5544  000878  EF41  F004         	goto	u2440
  5545  00087C                     u2441:
  5546  00087C  FFFF               	dw	65535	; assembler added errata NOP
  5547  00087E  EF5E  F004         	goto	l3447
  5548  000882                     u2440:
  5549  000882  FFFF               	dw	65535	; assembler added errata NOP
  5550  000884  8033               	bsf	___fldiv@grs^0,0,c
  5551  000886  EF5E  F004         	goto	l3447
  5552  00088A                     l3441:
  5553  00088A  FFFF               	dw	65535	; assembler added errata NOP
  5554  00088C  90D8               	bcf	status,0,c
  5555  00088E  3620               	rlcf	___fldiv@b^0,f,c
  5556  000890  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5557  000892  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5558  000894  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5559  000896  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5560  000898  EF50  F004         	goto	u2451
  5561  00089C  EF53  F004         	goto	u2450
  5562  0008A0                     u2451:
  5563  0008A0  FFFF               	dw	65535	; assembler added errata NOP
  5564  0008A2  EF55  F004         	goto	l1163
  5565  0008A6                     u2450:
  5566  0008A6  FFFF               	dw	65535	; assembler added errata NOP
  5567  0008A8  8020               	bsf	___fldiv@b^0,0,c
  5568  0008AA                     l1163:
  5569  0008AA  FFFF               	dw	65535	; assembler added errata NOP
  5570  0008AC  90D8               	bcf	status,0,c
  5571  0008AE  3633               	rlcf	___fldiv@grs^0,f,c
  5572  0008B0  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5573  0008B2  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5574  0008B4  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5575  0008B6  0631               	decf	___fldiv@new_exp^0,f,c
  5576  0008B8  A0D8               	btfss	status,0,c
  5577  0008BA  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5578  0008BC                     l3447:
  5579  0008BC  FFFF               	dw	65535	; assembler added errata NOP
  5580  0008BE  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5581  0008C0  EF64  F004         	goto	u2461
  5582  0008C4  EF67  F004         	goto	u2460
  5583  0008C8                     u2461:
  5584  0008C8  FFFF               	dw	65535	; assembler added errata NOP
  5585  0008CA  EF45  F004         	goto	l3441
  5586  0008CE                     u2460:
  5587  0008CE  FFFF               	dw	65535	; assembler added errata NOP
  5588  0008D0  0E00               	movlw	0
  5589  0008D2  6E38               	movwf	___fldiv@aexp^0,c
  5590  0008D4  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5591  0008D6  EF6F  F004         	goto	u2471
  5592  0008DA  EF72  F004         	goto	u2470
  5593  0008DE                     u2471:
  5594  0008DE  FFFF               	dw	65535	; assembler added errata NOP
  5595  0008E0  EF9D  F004         	goto	l1165
  5596  0008E4                     u2470:
  5597  0008E4  FFFF               	dw	65535	; assembler added errata NOP
  5598  0008E6  0EFF               	movlw	255
  5599  0008E8  1433               	andwf	___fldiv@grs^0,w,c
  5600  0008EA  6E28               	movwf	??___fldiv^0,c
  5601  0008EC  0EFF               	movlw	255
  5602  0008EE  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5603  0008F0  6E29               	movwf	(??___fldiv+1)^0,c
  5604  0008F2  0EFF               	movlw	255
  5605  0008F4  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5606  0008F6  6E2A               	movwf	(??___fldiv+2)^0,c
  5607  0008F8  0E7F               	movlw	127
  5608  0008FA  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5609  0008FC  6E2B               	movwf	(??___fldiv+3)^0,c
  5610  0008FE  5028               	movf	??___fldiv^0,w,c
  5611  000900  1029               	iorwf	(??___fldiv+1)^0,w,c
  5612  000902  102A               	iorwf	(??___fldiv+2)^0,w,c
  5613  000904  102B               	iorwf	(??___fldiv+3)^0,w,c
  5614  000906  B4D8               	btfsc	status,2,c
  5615  000908  EF88  F004         	goto	u2481
  5616  00090C  EF8B  F004         	goto	u2480
  5617  000910                     u2481:
  5618  000910  FFFF               	dw	65535	; assembler added errata NOP
  5619  000912  EF91  F004         	goto	l1166
  5620  000916                     u2480:
  5621  000916  FFFF               	dw	65535	; assembler added errata NOP
  5622  000918                     l3455:
  5623  000918  FFFF               	dw	65535	; assembler added errata NOP
  5624  00091A  0E01               	movlw	1
  5625  00091C  6E38               	movwf	___fldiv@aexp^0,c
  5626  00091E  EF9D  F004         	goto	l1165
  5627  000922                     l1166:
  5628  000922  FFFF               	dw	65535	; assembler added errata NOP
  5629  000924  A020               	btfss	___fldiv@b^0,0,c
  5630  000926  EF97  F004         	goto	u2491
  5631  00092A  EF9A  F004         	goto	u2490
  5632  00092E                     u2491:
  5633  00092E  FFFF               	dw	65535	; assembler added errata NOP
  5634  000930  EF9D  F004         	goto	l1165
  5635  000934                     u2490:
  5636  000934  FFFF               	dw	65535	; assembler added errata NOP
  5637  000936  EF8C  F004         	goto	l3455
  5638  00093A                     l1165:
  5639  00093A  FFFF               	dw	65535	; assembler added errata NOP
  5640  00093C  5038               	movf	___fldiv@aexp^0,w,c
  5641  00093E  B4D8               	btfsc	status,2,c
  5642  000940  EFA4  F004         	goto	u2501
  5643  000944  EFA7  F004         	goto	u2500
  5644  000948                     u2501:
  5645  000948  FFFF               	dw	65535	; assembler added errata NOP
  5646  00094A  EFCE  F004         	goto	l3467
  5647  00094E                     u2500:
  5648  00094E  FFFF               	dw	65535	; assembler added errata NOP
  5649  000950  0E01               	movlw	1
  5650  000952  2620               	addwf	___fldiv@b^0,f,c
  5651  000954  0E00               	movlw	0
  5652  000956  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5653  000958  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5654  00095A  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5655  00095C  A023               	btfss	(___fldiv@b+3)^0,0,c
  5656  00095E  EFB3  F004         	goto	u2511
  5657  000962  EFB6  F004         	goto	u2510
  5658  000966                     u2511:
  5659  000966  FFFF               	dw	65535	; assembler added errata NOP
  5660  000968  EFCE  F004         	goto	l3467
  5661  00096C                     u2510:
  5662  00096C  FFFF               	dw	65535	; assembler added errata NOP
  5663  00096E  C020  F028         	movff	___fldiv@b,??___fldiv
  5664  000972  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5665  000976  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5666  00097A  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5667  00097E  342B               	rlcf	(??___fldiv+3)^0,w,c
  5668  000980  322B               	rrcf	(??___fldiv+3)^0,f,c
  5669  000982  322A               	rrcf	(??___fldiv+2)^0,f,c
  5670  000984  3229               	rrcf	(??___fldiv+1)^0,f,c
  5671  000986  3228               	rrcf	??___fldiv^0,f,c
  5672  000988  C028  F020         	movff	??___fldiv,___fldiv@b
  5673  00098C  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5674  000990  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5675  000994  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5676  000998  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5677  00099A  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5678  00099C                     l3467:
  5679  00099C  FFFF               	dw	65535	; assembler added errata NOP
  5680  00099E  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5681  0009A0  EFDA  F004         	goto	u2521
  5682  0009A4  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5683  0009A6  E109               	bnz	u2520
  5684  0009A8  2831               	incf	___fldiv@new_exp^0,w,c
  5685  0009AA  A0D8               	btfss	status,0,c
  5686  0009AC  EFDA  F004         	goto	u2521
  5687  0009B0  EFDD  F004         	goto	u2520
  5688  0009B4                     u2521:
  5689  0009B4  FFFF               	dw	65535	; assembler added errata NOP
  5690  0009B6  EFE9  F004         	goto	l3471
  5691  0009BA                     u2520:
  5692  0009BA  FFFF               	dw	65535	; assembler added errata NOP
  5693  0009BC  0E00               	movlw	0
  5694  0009BE  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5695  0009C0  6831               	setf	___fldiv@new_exp^0,c
  5696  0009C2  0E00               	movlw	0
  5697  0009C4  6E20               	movwf	___fldiv@b^0,c
  5698  0009C6  0E00               	movlw	0
  5699  0009C8  6E21               	movwf	(___fldiv@b+1)^0,c
  5700  0009CA  0E00               	movlw	0
  5701  0009CC  6E22               	movwf	(___fldiv@b+2)^0,c
  5702  0009CE  0E00               	movlw	0
  5703  0009D0  6E23               	movwf	(___fldiv@b+3)^0,c
  5704  0009D2                     l3471:
  5705  0009D2  FFFF               	dw	65535	; assembler added errata NOP
  5706  0009D4  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5707  0009D6  EFF8  F004         	goto	u2530
  5708  0009DA  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5709  0009DC  E106               	bnz	u2531
  5710  0009DE  0431               	decf	___fldiv@new_exp^0,w,c
  5711  0009E0  B0D8               	btfsc	status,0,c
  5712  0009E2  EFF5  F004         	goto	u2531
  5713  0009E6  EFF8  F004         	goto	u2530
  5714  0009EA                     u2531:
  5715  0009EA  FFFF               	dw	65535	; assembler added errata NOP
  5716  0009EC  EF07  F005         	goto	l3475
  5717  0009F0                     u2530:
  5718  0009F0  FFFF               	dw	65535	; assembler added errata NOP
  5719  0009F2  0E00               	movlw	0
  5720  0009F4  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5721  0009F6  0E00               	movlw	0
  5722  0009F8  6E31               	movwf	___fldiv@new_exp^0,c
  5723  0009FA  0E00               	movlw	0
  5724  0009FC  6E20               	movwf	___fldiv@b^0,c
  5725  0009FE  0E00               	movlw	0
  5726  000A00  6E21               	movwf	(___fldiv@b+1)^0,c
  5727  000A02  0E00               	movlw	0
  5728  000A04  6E22               	movwf	(___fldiv@b+2)^0,c
  5729  000A06  0E00               	movlw	0
  5730  000A08  6E23               	movwf	(___fldiv@b+3)^0,c
  5731  000A0A  0E00               	movlw	0
  5732  000A0C  6E30               	movwf	___fldiv@sign^0,c
  5733  000A0E                     l3475:
  5734  000A0E  FFFF               	dw	65535	; assembler added errata NOP
  5735  000A10  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5736  000A14  A037               	btfss	___fldiv@bexp^0,0,c
  5737  000A16  EF0F  F005         	goto	u2541
  5738  000A1A  EF12  F005         	goto	u2540
  5739  000A1E                     u2541:
  5740  000A1E  FFFF               	dw	65535	; assembler added errata NOP
  5741  000A20  EF16  F005         	goto	l3481
  5742  000A24                     u2540:
  5743  000A24  FFFF               	dw	65535	; assembler added errata NOP
  5744  000A26  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5745  000A28  EF18  F005         	goto	l3483
  5746  000A2C                     l3481:
  5747  000A2C  FFFF               	dw	65535	; assembler added errata NOP
  5748  000A2E  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5749  000A30                     l3483:
  5750  000A30  FFFF               	dw	65535	; assembler added errata NOP
  5751  000A32  90D8               	bcf	status,0,c
  5752  000A34  3037               	rrcf	___fldiv@bexp^0,w,c
  5753  000A36  6E23               	movwf	(___fldiv@b+3)^0,c
  5754  000A38  EF9C  F003         	goto	l3397
  5755  000A3C                     l1152:
  5756  000A3C  FFFF               	dw	65535	; assembler added errata NOP
  5757  000A3E  0012               	return		;funcret
  5758  000A40  FFFF               	dw	65535	; errata NOP
  5759  000A42                     __end_of___fldiv:
  5760                           	callstack 0
  5761                           
  5762 ;; *************** function _releaseObj *****************
  5763 ;; Defined at:
  5764 ;;		line 575 in file "motors.c"
  5765 ;; Parameters:    Size  Location     Type
  5766 ;;		None
  5767 ;; Auto vars:     Size  Location     Type
  5768 ;;		None
  5769 ;; Return value:  Size  Location     Type
  5770 ;;                  1    wreg      void 
  5771 ;; Registers used:
  5772 ;;		None
  5773 ;; Tracked objects:
  5774 ;;		On entry : 0/0
  5775 ;;		On exit  : 0/0
  5776 ;;		Unchanged: 0/0
  5777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5778 ;;      Params:         0       0       0       0       0       0       0
  5779 ;;      Locals:         0       0       0       0       0       0       0
  5780 ;;      Temps:          0       0       0       0       0       0       0
  5781 ;;      Totals:         0       0       0       0       0       0       0
  5782 ;;Total ram usage:        0 bytes
  5783 ;; Hardware stack levels used:    1
  5784 ;; Hardware stack levels required when called:    4
  5785 ;; This function calls:
  5786 ;;		Nothing
  5787 ;; This function is called by:
  5788 ;;		_executeData
  5789 ;; This function uses a non-reentrant model
  5790 ;;
  5791                           
  5792                           	psect	text34
  5793  002430                     __ptext34:
  5794                           	callstack 0
  5795  002430                     _releaseObj:
  5796                           	callstack 0
  5797  002430  FFFF               	dw	65535	; assembler added errata NOP
  5798  002432                     
  5799                           ;motors.c: 576:     LATDbits.LATD1 = 0;
  5800  002432  928C               	bcf	140,1,c	;volatile
  5801  002434  0012               	return		;funcret
  5802  002436  FFFF               	dw	65535	; errata NOP
  5803  002438                     __end_of_releaseObj:
  5804                           	callstack 0
  5805                           
  5806 ;; *************** function _pickObject *****************
  5807 ;; Defined at:
  5808 ;;		line 568 in file "motors.c"
  5809 ;; Parameters:    Size  Location     Type
  5810 ;;		None
  5811 ;; Auto vars:     Size  Location     Type
  5812 ;;		None
  5813 ;; Return value:  Size  Location     Type
  5814 ;;                  1    wreg      void 
  5815 ;; Registers used:
  5816 ;;		None
  5817 ;; Tracked objects:
  5818 ;;		On entry : 0/0
  5819 ;;		On exit  : 0/0
  5820 ;;		Unchanged: 0/0
  5821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5822 ;;      Params:         0       0       0       0       0       0       0
  5823 ;;      Locals:         0       0       0       0       0       0       0
  5824 ;;      Temps:          0       0       0       0       0       0       0
  5825 ;;      Totals:         0       0       0       0       0       0       0
  5826 ;;Total ram usage:        0 bytes
  5827 ;; Hardware stack levels used:    1
  5828 ;; Hardware stack levels required when called:    4
  5829 ;; This function calls:
  5830 ;;		Nothing
  5831 ;; This function is called by:
  5832 ;;		_executeData
  5833 ;; This function uses a non-reentrant model
  5834 ;;
  5835                           
  5836                           	psect	text35
  5837  002438                     __ptext35:
  5838                           	callstack 0
  5839  002438                     _pickObject:
  5840                           	callstack 0
  5841  002438  FFFF               	dw	65535	; assembler added errata NOP
  5842  00243A                     
  5843                           ;motors.c: 569:     LATDbits.LATD1 = 1;
  5844  00243A  828C               	bsf	140,1,c	;volatile
  5845  00243C  0012               	return		;funcret
  5846  00243E  FFFF               	dw	65535	; errata NOP
  5847  002440                     __end_of_pickObject:
  5848                           	callstack 0
  5849                           
  5850 ;; *************** function _moveToPoint *****************
  5851 ;; Defined at:
  5852 ;;		line 266 in file "motors.c"
  5853 ;; Parameters:    Size  Location     Type
  5854 ;;  x1              2   21[COMRAM] unsigned int 
  5855 ;;  y1              2   23[COMRAM] unsigned int 
  5856 ;;  x2              2   25[COMRAM] unsigned int 
  5857 ;;  y2              2   27[COMRAM] unsigned int 
  5858 ;; Auto vars:     Size  Location     Type
  5859 ;;  keepMovingY     1   32[COMRAM] unsigned char 
  5860 ;;  keepMovingX     1   31[COMRAM] unsigned char 
  5861 ;; Return value:  Size  Location     Type
  5862 ;;                  1    wreg      unsigned char 
  5863 ;; Registers used:
  5864 ;;		wreg, status,2, status,0, cstack
  5865 ;; Tracked objects:
  5866 ;;		On entry : 0/0
  5867 ;;		On exit  : 0/0
  5868 ;;		Unchanged: 0/0
  5869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5870 ;;      Params:         8       0       0       0       0       0       0
  5871 ;;      Locals:         2       0       0       0       0       0       0
  5872 ;;      Temps:          2       0       0       0       0       0       0
  5873 ;;      Totals:        12       0       0       0       0       0       0
  5874 ;;Total ram usage:       12 bytes
  5875 ;; Hardware stack levels used:    1
  5876 ;; Hardware stack levels required when called:    5
  5877 ;; This function calls:
  5878 ;;		_resetStep
  5879 ;;		_setDirection
  5880 ;;		_stepCounter
  5881 ;;		_stepMade
  5882 ;; This function is called by:
  5883 ;;		_executeData
  5884 ;; This function uses a non-reentrant model
  5885 ;;
  5886                           
  5887                           	psect	text36
  5888  0010B4                     __ptext36:
  5889                           	callstack 0
  5890  0010B4                     _moveToPoint:
  5891                           	callstack 0
  5892  0010B4  FFFF               	dw	65535	; assembler added errata NOP
  5893  0010B6                     
  5894                           ;motors.c: 269:     if(x2 > maxX || y2 > maxY){
  5895  0010B6  0EE9               	movlw	233
  5896  0010B8  5C1A               	subwf	moveToPoint@x2^0,w,c
  5897  0010BA  0E03               	movlw	3
  5898  0010BC  581B               	subwfb	(moveToPoint@x2+1)^0,w,c
  5899  0010BE  B0D8               	btfsc	status,0,c
  5900  0010C0  EF64  F008         	goto	u2781
  5901  0010C4  EF67  F008         	goto	u2780
  5902  0010C8                     u2781:
  5903  0010C8  FFFF               	dw	65535	; assembler added errata NOP
  5904  0010CA  EF74  F008         	goto	l3633
  5905  0010CE                     u2780:
  5906  0010CE  FFFF               	dw	65535	; assembler added errata NOP
  5907  0010D0  0EE9               	movlw	233
  5908  0010D2  5C1C               	subwf	moveToPoint@y2^0,w,c
  5909  0010D4  0E03               	movlw	3
  5910  0010D6  581D               	subwfb	(moveToPoint@y2+1)^0,w,c
  5911  0010D8  A0D8               	btfss	status,0,c
  5912  0010DA  EF71  F008         	goto	u2791
  5913  0010DE  EF74  F008         	goto	u2790
  5914  0010E2                     u2791:
  5915  0010E2  FFFF               	dw	65535	; assembler added errata NOP
  5916  0010E4  EF78  F008         	goto	l3637
  5917  0010E8                     u2790:
  5918  0010E8                     l3633:
  5919  0010E8  FFFF               	dw	65535	; assembler added errata NOP
  5920                           
  5921                           ;motors.c: 270:         return(5);
  5922  0010EA  0E05               	movlw	5
  5923  0010EC  EF4C  F009         	goto	l141
  5924  0010F0                     l3637:
  5925  0010F0  FFFF               	dw	65535	; assembler added errata NOP
  5926                           
  5927                           ;motors.c: 274:     if((x2 - x1) > 0){
  5928  0010F2  5016               	movf	moveToPoint@x1^0,w,c
  5929  0010F4  5C1A               	subwf	moveToPoint@x2^0,w,c
  5930  0010F6  6E1E               	movwf	??_moveToPoint^0,c
  5931  0010F8  5017               	movf	(moveToPoint@x1+1)^0,w,c
  5932  0010FA  581B               	subwfb	(moveToPoint@x2+1)^0,w,c
  5933  0010FC  6E1F               	movwf	(??_moveToPoint+1)^0,c
  5934  0010FE  501E               	movf	??_moveToPoint^0,w,c
  5935  001100  101F               	iorwf	(??_moveToPoint+1)^0,w,c
  5936  001102  B4D8               	btfsc	status,2,c
  5937  001104  EF86  F008         	goto	u2801
  5938  001108  EF89  F008         	goto	u2800
  5939  00110C                     u2801:
  5940  00110C  FFFF               	dw	65535	; assembler added errata NOP
  5941  00110E  EF91  F008         	goto	l3641
  5942  001112                     u2800:
  5943  001112  FFFF               	dw	65535	; assembler added errata NOP
  5944  001114                     
  5945                           ;motors.c: 275:         setDirection(1, 0);
  5946  001114  0E00               	movlw	0
  5947  001116  6E12               	movwf	setDirection@motor^0,c
  5948  001118  0E01               	movlw	1
  5949  00111A  EC55  F010         	call	_setDirection
  5950                           
  5951                           ;motors.c: 276:     }else{
  5952  00111E  EF97  F008         	goto	l3643
  5953  001122                     l3641:
  5954  001122  FFFF               	dw	65535	; assembler added errata NOP
  5955                           
  5956                           ;motors.c: 277:         setDirection(0, 0);
  5957  001124  0E00               	movlw	0
  5958  001126  6E12               	movwf	setDirection@motor^0,c
  5959  001128  0E00               	movlw	0
  5960  00112A  EC55  F010         	call	_setDirection
  5961  00112E                     l3643:
  5962  00112E  FFFF               	dw	65535	; assembler added errata NOP
  5963                           
  5964                           ;motors.c: 280:     if((y2 - y1) > 0){
  5965  001130  5018               	movf	moveToPoint@y1^0,w,c
  5966  001132  5C1C               	subwf	moveToPoint@y2^0,w,c
  5967  001134  6E1E               	movwf	??_moveToPoint^0,c
  5968  001136  5019               	movf	(moveToPoint@y1+1)^0,w,c
  5969  001138  581D               	subwfb	(moveToPoint@y2+1)^0,w,c
  5970  00113A  6E1F               	movwf	(??_moveToPoint+1)^0,c
  5971  00113C  501E               	movf	??_moveToPoint^0,w,c
  5972  00113E  101F               	iorwf	(??_moveToPoint+1)^0,w,c
  5973  001140  B4D8               	btfsc	status,2,c
  5974  001142  EFA5  F008         	goto	u2811
  5975  001146  EFA8  F008         	goto	u2810
  5976  00114A                     u2811:
  5977  00114A  FFFF               	dw	65535	; assembler added errata NOP
  5978  00114C  EFB0  F008         	goto	l3647
  5979  001150                     u2810:
  5980  001150  FFFF               	dw	65535	; assembler added errata NOP
  5981  001152                     
  5982                           ;motors.c: 281:         setDirection(1, 1);
  5983  001152  0E01               	movlw	1
  5984  001154  6E12               	movwf	setDirection@motor^0,c
  5985  001156  0E01               	movlw	1
  5986  001158  EC55  F010         	call	_setDirection
  5987                           
  5988                           ;motors.c: 282:     }else{
  5989  00115C  EFB6  F008         	goto	l3649
  5990  001160                     l3647:
  5991  001160  FFFF               	dw	65535	; assembler added errata NOP
  5992                           
  5993                           ;motors.c: 283:         setDirection(0, 1);
  5994  001162  0E01               	movlw	1
  5995  001164  6E12               	movwf	setDirection@motor^0,c
  5996  001166  0E00               	movlw	0
  5997  001168  EC55  F010         	call	_setDirection
  5998  00116C                     l3649:
  5999  00116C  FFFF               	dw	65535	; assembler added errata NOP
  6000                           
  6001                           ;motors.c: 286:     unsigned char keepMovingX = 1;
  6002  00116E  0E01               	movlw	1
  6003  001170  6E20               	movwf	moveToPoint@keepMovingX^0,c
  6004  001172                     
  6005                           ;motors.c: 287:     unsigned char keepMovingY = 1;
  6006  001172  0E01               	movlw	1
  6007  001174  6E21               	movwf	moveToPoint@keepMovingY^0,c
  6008  001176                     
  6009                           ;motors.c: 290:     T2CONbits.TMR2ON = 1;
  6010  001176  84CA               	bsf	202,2,c	;volatile
  6011  001178                     
  6012                           ;motors.c: 292:     tm0Error = 0;
  6013  001178  0E00               	movlw	0
  6014  00117A  6E5C               	movwf	(_tm0Error+1)^0,c
  6015  00117C  0E00               	movlw	0
  6016  00117E  6E5B               	movwf	_tm0Error^0,c
  6017  001180                     
  6018                           ;motors.c: 293:     tm0Limit = 200;
  6019  001180  0EC8               	movlw	200
  6020  001182  6E68               	movwf	_tm0Limit^0,c
  6021  001184                     
  6022                           ;motors.c: 294:     T0CONbits.TMR0ON = 1;
  6023  001184  8ED5               	bsf	213,7,c	;volatile
  6024                           
  6025                           ;motors.c: 296:     while(keepMovingX || keepMovingY){
  6026  001186  EF2C  F009         	goto	l3679
  6027  00118A                     l3661:
  6028  00118A  FFFF               	dw	65535	; assembler added errata NOP
  6029                           
  6030                           ;motors.c: 299:         if(tm0Error){
  6031  00118C  505B               	movf	_tm0Error^0,w,c
  6032  00118E  105C               	iorwf	(_tm0Error+1)^0,w,c
  6033  001190  B4D8               	btfsc	status,2,c
  6034  001192  EFCD  F008         	goto	u2821
  6035  001196  EFD0  F008         	goto	u2820
  6036  00119A                     u2821:
  6037  00119A  FFFF               	dw	65535	; assembler added errata NOP
  6038  00119C  EFD9  F008         	goto	l3667
  6039  0011A0                     u2820:
  6040  0011A0  FFFF               	dw	65535	; assembler added errata NOP
  6041  0011A2                     
  6042                           ;motors.c: 301:             LATAbits.LATA2 = 0;
  6043  0011A2  9489               	bcf	137,2,c	;volatile
  6044                           
  6045                           ;motors.c: 302:             LATBbits.LATB4 = 0;
  6046  0011A4  988A               	bcf	138,4,c	;volatile
  6047  0011A6                     
  6048                           ;motors.c: 303:             tm0Error = 4;
  6049  0011A6  0E00               	movlw	0
  6050  0011A8  6E5C               	movwf	(_tm0Error+1)^0,c
  6051  0011AA  0E04               	movlw	4
  6052  0011AC  6E5B               	movwf	_tm0Error^0,c
  6053                           
  6054                           ;motors.c: 304:             break;
  6055  0011AE  EF40  F009         	goto	l149
  6056  0011B2                     l3667:
  6057  0011B2  FFFF               	dw	65535	; assembler added errata NOP
  6058                           
  6059                           ;motors.c: 312:         if(x1 + stepCounter() == x2){
  6060  0011B4  ECD7  F011         	call	_stepCounter	;wreg free
  6061  0011B8  5016               	movf	moveToPoint@x1^0,w,c
  6062  0011BA  2612               	addwf	?_stepCounter^0,f,c
  6063  0011BC  5017               	movf	(moveToPoint@x1+1)^0,w,c
  6064  0011BE  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6065  0011C0  501A               	movf	moveToPoint@x2^0,w,c
  6066  0011C2  1812               	xorwf	?_stepCounter^0,w,c
  6067  0011C4  E107               	bnz	u2831
  6068  0011C6  501B               	movf	(moveToPoint@x2+1)^0,w,c
  6069  0011C8  1813               	xorwf	(?_stepCounter+1)^0,w,c
  6070  0011CA  A4D8               	btfss	status,2,c
  6071  0011CC  EFEA  F008         	goto	u2831
  6072  0011D0  EFED  F008         	goto	u2830
  6073  0011D4                     u2831:
  6074  0011D4  FFFF               	dw	65535	; assembler added errata NOP
  6075  0011D6  EFF2  F008         	goto	l150
  6076  0011DA                     u2830:
  6077  0011DA  FFFF               	dw	65535	; assembler added errata NOP
  6078  0011DC                     
  6079                           ;motors.c: 314:             keepMovingX = 0;
  6080  0011DC  0E00               	movlw	0
  6081  0011DE  6E20               	movwf	moveToPoint@keepMovingX^0,c
  6082                           
  6083                           ;motors.c: 315:         }else{
  6084  0011E0  EFF4  F008         	goto	l3671
  6085  0011E4                     l150:
  6086  0011E4  FFFF               	dw	65535	; assembler added errata NOP
  6087                           
  6088                           ;motors.c: 317:             LATAbits.LATA2 = 1;
  6089  0011E6  8489               	bsf	137,2,c	;volatile
  6090  0011E8                     l3671:
  6091  0011E8  FFFF               	dw	65535	; assembler added errata NOP
  6092                           
  6093                           ;motors.c: 321:         if(y1 + stepCounter() == y2){
  6094  0011EA  ECD7  F011         	call	_stepCounter	;wreg free
  6095  0011EE  5018               	movf	moveToPoint@y1^0,w,c
  6096  0011F0  2612               	addwf	?_stepCounter^0,f,c
  6097  0011F2  5019               	movf	(moveToPoint@y1+1)^0,w,c
  6098  0011F4  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6099  0011F6  501C               	movf	moveToPoint@y2^0,w,c
  6100  0011F8  1812               	xorwf	?_stepCounter^0,w,c
  6101  0011FA  E107               	bnz	u2841
  6102  0011FC  501D               	movf	(moveToPoint@y2+1)^0,w,c
  6103  0011FE  1813               	xorwf	(?_stepCounter+1)^0,w,c
  6104  001200  A4D8               	btfss	status,2,c
  6105  001202  EF05  F009         	goto	u2841
  6106  001206  EF08  F009         	goto	u2840
  6107  00120A                     u2841:
  6108  00120A  FFFF               	dw	65535	; assembler added errata NOP
  6109  00120C  EF0D  F009         	goto	l152
  6110  001210                     u2840:
  6111  001210  FFFF               	dw	65535	; assembler added errata NOP
  6112  001212                     
  6113                           ;motors.c: 323:             keepMovingY = 0;
  6114  001212  0E00               	movlw	0
  6115  001214  6E21               	movwf	moveToPoint@keepMovingY^0,c
  6116                           
  6117                           ;motors.c: 324:         }else{
  6118  001216  EF0F  F009         	goto	l3675
  6119  00121A                     l152:
  6120  00121A  FFFF               	dw	65535	; assembler added errata NOP
  6121                           
  6122                           ;motors.c: 326:             LATBbits.LATB4 = 1;
  6123  00121C  888A               	bsf	138,4,c	;volatile
  6124  00121E                     l3675:
  6125  00121E  FFFF               	dw	65535	; assembler added errata NOP
  6126  001220  EC95  F011         	call	_stepMade	;wreg free
  6127  001224  5012               	movf	?_stepMade^0,w,c
  6128  001226  1013               	iorwf	(?_stepMade+1)^0,w,c
  6129  001228  B4D8               	btfsc	status,2,c
  6130  00122A  EF19  F009         	goto	u2851
  6131  00122E  EF1C  F009         	goto	u2850
  6132  001232                     u2851:
  6133  001232  FFFF               	dw	65535	; assembler added errata NOP
  6134  001234  EF0F  F009         	goto	l3675
  6135  001238                     u2850:
  6136  001238  FFFF               	dw	65535	; assembler added errata NOP
  6137  00123A                     
  6138                           ;motors.c: 333:         LATAbits.LATA2 = 0;
  6139  00123A  9489               	bcf	137,2,c	;volatile
  6140                           
  6141                           ;motors.c: 334:         LATBbits.LATB4 = 0;
  6142  00123C  988A               	bcf	138,4,c	;volatile
  6143  00123E                     l3677:
  6144  00123E  FFFF               	dw	65535	; assembler added errata NOP
  6145  001240  EC95  F011         	call	_stepMade	;wreg free
  6146  001244  5012               	movf	?_stepMade^0,w,c
  6147  001246  1013               	iorwf	(?_stepMade+1)^0,w,c
  6148  001248  B4D8               	btfsc	status,2,c
  6149  00124A  EF29  F009         	goto	u2861
  6150  00124E  EF2C  F009         	goto	u2860
  6151  001252                     u2861:
  6152  001252  FFFF               	dw	65535	; assembler added errata NOP
  6153  001254  EF1F  F009         	goto	l3677
  6154  001258                     u2860:
  6155  001258                     l3679:
  6156  001258  FFFF               	dw	65535	; assembler added errata NOP
  6157                           
  6158                           ;motors.c: 296:     while(keepMovingX || keepMovingY){
  6159  00125A  5020               	movf	moveToPoint@keepMovingX^0,w,c
  6160  00125C  A4D8               	btfss	status,2,c
  6161  00125E  EF33  F009         	goto	u2871
  6162  001262  EF36  F009         	goto	u2870
  6163  001266                     u2871:
  6164  001266  FFFF               	dw	65535	; assembler added errata NOP
  6165  001268  EFC5  F008         	goto	l3661
  6166  00126C                     u2870:
  6167  00126C  FFFF               	dw	65535	; assembler added errata NOP
  6168  00126E  5021               	movf	moveToPoint@keepMovingY^0,w,c
  6169  001270  A4D8               	btfss	status,2,c
  6170  001272  EF3D  F009         	goto	u2881
  6171  001276  EF40  F009         	goto	u2880
  6172  00127A                     u2881:
  6173  00127A  FFFF               	dw	65535	; assembler added errata NOP
  6174  00127C  EFC5  F008         	goto	l3661
  6175  001280                     u2880:
  6176  001280                     l149:
  6177  001280  FFFF               	dw	65535	; assembler added errata NOP
  6178                           
  6179                           ;motors.c: 341:     T0CONbits.TMR0ON = 0;
  6180  001282  9ED5               	bcf	213,7,c	;volatile
  6181                           
  6182                           ;motors.c: 342:     T2CONbits.TMR2ON = 0;
  6183  001284  94CA               	bcf	202,2,c	;volatile
  6184  001286                     
  6185                           ;motors.c: 344:     TMR0 = 0;
  6186  001286  0E00               	movlw	0
  6187  001288  6ED7               	movwf	215,c	;volatile
  6188  00128A  0E00               	movlw	0
  6189  00128C  6ED6               	movwf	214,c	;volatile
  6190                           
  6191                           ;motors.c: 345:     TMR2 = 0;
  6192  00128E  0E00               	movlw	0
  6193  001290  6ECC               	movwf	204,c	;volatile
  6194  001292                     
  6195                           ;motors.c: 348:     resetStep();
  6196  001292  ECEC  F011         	call	_resetStep	;wreg free
  6197  001296                     
  6198                           ;motors.c: 350:     return(tm0Error);
  6199  001296  505B               	movf	_tm0Error^0,w,c
  6200  001298                     l141:
  6201  001298  FFFF               	dw	65535	; assembler added errata NOP
  6202  00129A  0012               	return		;funcret
  6203  00129C  FFFF               	dw	65535	; errata NOP
  6204  00129E                     __end_of_moveToPoint:
  6205                           	callstack 0
  6206                           
  6207 ;; *************** function _stepCounter *****************
  6208 ;; Defined at:
  6209 ;;		line 59 in file "pwm.c"
  6210 ;; Parameters:    Size  Location     Type
  6211 ;;		None
  6212 ;; Auto vars:     Size  Location     Type
  6213 ;;		None
  6214 ;; Return value:  Size  Location     Type
  6215 ;;                  2   17[COMRAM] unsigned int 
  6216 ;; Registers used:
  6217 ;;		None
  6218 ;; Tracked objects:
  6219 ;;		On entry : 0/0
  6220 ;;		On exit  : 0/0
  6221 ;;		Unchanged: 0/0
  6222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6223 ;;      Params:         2       0       0       0       0       0       0
  6224 ;;      Locals:         0       0       0       0       0       0       0
  6225 ;;      Temps:          0       0       0       0       0       0       0
  6226 ;;      Totals:         2       0       0       0       0       0       0
  6227 ;;Total ram usage:        2 bytes
  6228 ;; Hardware stack levels used:    1
  6229 ;; Hardware stack levels required when called:    4
  6230 ;; This function calls:
  6231 ;;		Nothing
  6232 ;; This function is called by:
  6233 ;;		_moveToPoint
  6234 ;; This function uses a non-reentrant model
  6235 ;;
  6236                           
  6237                           	psect	text37
  6238  0023AE                     __ptext37:
  6239                           	callstack 0
  6240  0023AE                     _stepCounter:
  6241                           	callstack 0
  6242  0023AE  FFFF               	dw	65535	; assembler added errata NOP
  6243  0023B0                     
  6244                           ;pwm.c: 60:     return pwmStep;
  6245  0023B0  C067  F012         	movff	_pwmStep,?_stepCounter	;volatile
  6246  0023B4  6A13               	clrf	(?_stepCounter+1)^0,c
  6247  0023B6  0012               	return		;funcret
  6248  0023B8  FFFF               	dw	65535	; errata NOP
  6249  0023BA                     __end_of_stepCounter:
  6250                           	callstack 0
  6251                           
  6252 ;; *************** function _liftArm *****************
  6253 ;; Defined at:
  6254 ;;		line 496 in file "motors.c"
  6255 ;; Parameters:    Size  Location     Type
  6256 ;;		None
  6257 ;; Auto vars:     Size  Location     Type
  6258 ;;		None
  6259 ;; Return value:  Size  Location     Type
  6260 ;;                  1    wreg      unsigned char 
  6261 ;; Registers used:
  6262 ;;		wreg, status,2, status,0, cstack
  6263 ;; Tracked objects:
  6264 ;;		On entry : 0/0
  6265 ;;		On exit  : 0/0
  6266 ;;		Unchanged: 0/0
  6267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6268 ;;      Params:         0       0       0       0       0       0       0
  6269 ;;      Locals:         0       0       0       0       0       0       0
  6270 ;;      Temps:          0       0       0       0       0       0       0
  6271 ;;      Totals:         0       0       0       0       0       0       0
  6272 ;;Total ram usage:        0 bytes
  6273 ;; Hardware stack levels used:    1
  6274 ;; Hardware stack levels required when called:    5
  6275 ;; This function calls:
  6276 ;;		_resetStep
  6277 ;;		_setDirection
  6278 ;;		_stepMade
  6279 ;; This function is called by:
  6280 ;;		_executeData
  6281 ;; This function uses a non-reentrant model
  6282 ;;
  6283                           
  6284                           	psect	text38
  6285  001E8C                     __ptext38:
  6286                           	callstack 0
  6287  001E8C                     _liftArm:
  6288                           	callstack 0
  6289  001E8C  FFFF               	dw	65535	; assembler added errata NOP
  6290  001E8E                     
  6291                           ;motors.c: 499:     setDirection(0, 2);
  6292  001E8E  0E02               	movlw	2
  6293  001E90  6E12               	movwf	setDirection@motor^0,c
  6294  001E92  0E00               	movlw	0
  6295  001E94  EC55  F010         	call	_setDirection
  6296  001E98                     
  6297                           ;motors.c: 501:     T2CONbits.TMR2ON = 1;
  6298  001E98  84CA               	bsf	202,2,c	;volatile
  6299  001E9A                     
  6300                           ;motors.c: 503:     tm0Error = 0;
  6301  001E9A  0E00               	movlw	0
  6302  001E9C  6E5C               	movwf	(_tm0Error+1)^0,c
  6303  001E9E  0E00               	movlw	0
  6304  001EA0  6E5B               	movwf	_tm0Error^0,c
  6305  001EA2                     
  6306                           ;motors.c: 504:     tm0Limit = 200;
  6307  001EA2  0EC8               	movlw	200
  6308  001EA4  6E68               	movwf	_tm0Limit^0,c
  6309  001EA6                     
  6310                           ;motors.c: 505:     T0CONbits.TMR0ON = 1;
  6311  001EA6  8ED5               	bsf	213,7,c	;volatile
  6312                           
  6313                           ;motors.c: 509:     while(!PORTEbits.RE2){
  6314  001EA8  EF87  F00F         	goto	l190
  6315  001EAC                     l3785:
  6316  001EAC  FFFF               	dw	65535	; assembler added errata NOP
  6317                           
  6318                           ;motors.c: 512:         if(tm0Error){
  6319  001EAE  505B               	movf	_tm0Error^0,w,c
  6320  001EB0  105C               	iorwf	(_tm0Error+1)^0,w,c
  6321  001EB2  B4D8               	btfsc	status,2,c
  6322  001EB4  EF5E  F00F         	goto	u3011
  6323  001EB8  EF61  F00F         	goto	u3010
  6324  001EBC                     u3011:
  6325  001EBC  FFFF               	dw	65535	; assembler added errata NOP
  6326  001EBE  EF69  F00F         	goto	l192
  6327  001EC2                     u3010:
  6328  001EC2  FFFF               	dw	65535	; assembler added errata NOP
  6329  001EC4                     
  6330                           ;motors.c: 514:             LATCbits.LATC2 = 0;
  6331  001EC4  948B               	bcf	139,2,c	;volatile
  6332  001EC6                     
  6333                           ;motors.c: 515:             tm0Error = 6;
  6334  001EC6  0E00               	movlw	0
  6335  001EC8  6E5C               	movwf	(_tm0Error+1)^0,c
  6336  001ECA  0E06               	movlw	6
  6337  001ECC  6E5B               	movwf	_tm0Error^0,c
  6338                           
  6339                           ;motors.c: 516:             break;
  6340  001ECE  EF90  F00F         	goto	l193
  6341  001ED2                     l192:
  6342  001ED2  FFFF               	dw	65535	; assembler added errata NOP
  6343                           
  6344                           ;motors.c: 521:         LATCbits.LATC2 = 1;
  6345  001ED4  848B               	bsf	139,2,c	;volatile
  6346  001ED6                     l3791:
  6347  001ED6  FFFF               	dw	65535	; assembler added errata NOP
  6348  001ED8  EC95  F011         	call	_stepMade	;wreg free
  6349  001EDC  5012               	movf	?_stepMade^0,w,c
  6350  001EDE  1013               	iorwf	(?_stepMade+1)^0,w,c
  6351  001EE0  B4D8               	btfsc	status,2,c
  6352  001EE2  EF75  F00F         	goto	u3021
  6353  001EE6  EF78  F00F         	goto	u3020
  6354  001EEA                     u3021:
  6355  001EEA  FFFF               	dw	65535	; assembler added errata NOP
  6356  001EEC  EF6B  F00F         	goto	l3791
  6357  001EF0                     u3020:
  6358  001EF0  FFFF               	dw	65535	; assembler added errata NOP
  6359  001EF2                     
  6360                           ;motors.c: 527:         LATCbits.LATC2 = 0;
  6361  001EF2  948B               	bcf	139,2,c	;volatile
  6362  001EF4                     l3793:
  6363  001EF4  FFFF               	dw	65535	; assembler added errata NOP
  6364  001EF6  EC95  F011         	call	_stepMade	;wreg free
  6365  001EFA  5012               	movf	?_stepMade^0,w,c
  6366  001EFC  1013               	iorwf	(?_stepMade+1)^0,w,c
  6367  001EFE  B4D8               	btfsc	status,2,c
  6368  001F00  EF84  F00F         	goto	u3031
  6369  001F04  EF87  F00F         	goto	u3030
  6370  001F08                     u3031:
  6371  001F08  FFFF               	dw	65535	; assembler added errata NOP
  6372  001F0A  EF7A  F00F         	goto	l3793
  6373  001F0E                     u3030:
  6374  001F0E                     l190:
  6375  001F0E  FFFF               	dw	65535	; assembler added errata NOP
  6376                           
  6377                           ;motors.c: 509:     while(!PORTEbits.RE2){
  6378  001F10  A484               	btfss	132,2,c	;volatile
  6379  001F12  EF8D  F00F         	goto	u3041
  6380  001F16  EF90  F00F         	goto	u3040
  6381  001F1A                     u3041:
  6382  001F1A  FFFF               	dw	65535	; assembler added errata NOP
  6383  001F1C  EF56  F00F         	goto	l3785
  6384  001F20                     u3040:
  6385  001F20                     l193:
  6386  001F20  FFFF               	dw	65535	; assembler added errata NOP
  6387                           
  6388                           ;motors.c: 534:     T0CONbits.TMR0ON = 0;
  6389  001F22  9ED5               	bcf	213,7,c	;volatile
  6390                           
  6391                           ;motors.c: 535:     T2CONbits.TMR2ON = 0;
  6392  001F24  94CA               	bcf	202,2,c	;volatile
  6393  001F26                     
  6394                           ;motors.c: 537:     TMR0 = 0;
  6395  001F26  0E00               	movlw	0
  6396  001F28  6ED7               	movwf	215,c	;volatile
  6397  001F2A  0E00               	movlw	0
  6398  001F2C  6ED6               	movwf	214,c	;volatile
  6399                           
  6400                           ;motors.c: 538:     TMR2 = 0;
  6401  001F2E  0E00               	movlw	0
  6402  001F30  6ECC               	movwf	204,c	;volatile
  6403  001F32                     
  6404                           ;motors.c: 541:     resetStep();
  6405  001F32  ECEC  F011         	call	_resetStep	;wreg free
  6406  001F36                     
  6407                           ;motors.c: 543:     return(tm0Error);
  6408  001F36  505B               	movf	_tm0Error^0,w,c
  6409  001F38  0012               	return		;funcret
  6410  001F3A  FFFF               	dw	65535	; errata NOP
  6411  001F3C                     __end_of_liftArm:
  6412                           	callstack 0
  6413                           
  6414 ;; *************** function _stepMade *****************
  6415 ;; Defined at:
  6416 ;;		line 47 in file "pwm.c"
  6417 ;; Parameters:    Size  Location     Type
  6418 ;;		None
  6419 ;; Auto vars:     Size  Location     Type
  6420 ;;  temp            1   19[COMRAM] unsigned char 
  6421 ;; Return value:  Size  Location     Type
  6422 ;;                  2   17[COMRAM] unsigned int 
  6423 ;; Registers used:
  6424 ;;		wreg, status,2
  6425 ;; Tracked objects:
  6426 ;;		On entry : 0/0
  6427 ;;		On exit  : 0/0
  6428 ;;		Unchanged: 0/0
  6429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6430 ;;      Params:         2       0       0       0       0       0       0
  6431 ;;      Locals:         1       0       0       0       0       0       0
  6432 ;;      Temps:          0       0       0       0       0       0       0
  6433 ;;      Totals:         3       0       0       0       0       0       0
  6434 ;;Total ram usage:        3 bytes
  6435 ;; Hardware stack levels used:    1
  6436 ;; Hardware stack levels required when called:    4
  6437 ;; This function calls:
  6438 ;;		Nothing
  6439 ;; This function is called by:
  6440 ;;		_resetPosition
  6441 ;;		_moveToPoint
  6442 ;;		_touchObject
  6443 ;;		_touchTherm
  6444 ;;		_liftArm
  6445 ;; This function uses a non-reentrant model
  6446 ;;
  6447                           
  6448                           	psect	text39
  6449  00232A                     __ptext39:
  6450                           	callstack 0
  6451  00232A                     _stepMade:
  6452                           	callstack 0
  6453  00232A  FFFF               	dw	65535	; assembler added errata NOP
  6454  00232C                     
  6455                           ;pwm.c: 48:     unsigned char temp = stepToggle;
  6456  00232C  C066  F014         	movff	_stepToggle,stepMade@temp	;volatile
  6457  002330                     
  6458                           ;pwm.c: 50:     stepToggle = 0;
  6459  002330  0E00               	movlw	0
  6460  002332  6E66               	movwf	_stepToggle^0,c	;volatile
  6461  002334                     
  6462                           ;pwm.c: 52:     return temp;
  6463  002334  C014  F012         	movff	stepMade@temp,?_stepMade
  6464  002338  6A13               	clrf	(?_stepMade+1)^0,c
  6465  00233A  0012               	return		;funcret
  6466  00233C  FFFF               	dw	65535	; errata NOP
  6467  00233E                     __end_of_stepMade:
  6468                           	callstack 0
  6469                           
  6470 ;; *************** function _setDirection *****************
  6471 ;; Defined at:
  6472 ;;		line 117 in file "motors.c"
  6473 ;; Parameters:    Size  Location     Type
  6474 ;;  direction       1    wreg     unsigned char 
  6475 ;;  motor           1   17[COMRAM] unsigned char 
  6476 ;; Auto vars:     Size  Location     Type
  6477 ;;  direction       1   20[COMRAM] unsigned char 
  6478 ;; Return value:  Size  Location     Type
  6479 ;;                  1    wreg      void 
  6480 ;; Registers used:
  6481 ;;		wreg, status,2, status,0
  6482 ;; Tracked objects:
  6483 ;;		On entry : 0/0
  6484 ;;		On exit  : 0/0
  6485 ;;		Unchanged: 0/0
  6486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6487 ;;      Params:         1       0       0       0       0       0       0
  6488 ;;      Locals:         1       0       0       0       0       0       0
  6489 ;;      Temps:          2       0       0       0       0       0       0
  6490 ;;      Totals:         4       0       0       0       0       0       0
  6491 ;;Total ram usage:        4 bytes
  6492 ;; Hardware stack levels used:    1
  6493 ;; Hardware stack levels required when called:    4
  6494 ;; This function calls:
  6495 ;;		Nothing
  6496 ;; This function is called by:
  6497 ;;		_resetPosition
  6498 ;;		_moveToPoint
  6499 ;;		_touchObject
  6500 ;;		_touchTherm
  6501 ;;		_liftArm
  6502 ;; This function uses a non-reentrant model
  6503 ;;
  6504                           
  6505                           	psect	text40
  6506  0020AA                     __ptext40:
  6507                           	callstack 0
  6508  0020AA                     _setDirection:
  6509                           	callstack 0
  6510  0020AA  FFFF               	dw	65535	; assembler added errata NOP
  6511                           
  6512                           ;incstack = 0
  6513                           ;setDirection@direction stored from wreg
  6514  0020AC  6E15               	movwf	setDirection@direction^0,c
  6515  0020AE                     
  6516                           ;motors.c: 118:     switch(motor){
  6517  0020AE  EF71  F010         	goto	l3315
  6518  0020B2                     l3307:
  6519  0020B2  FFFF               	dw	65535	; assembler added errata NOP
  6520                           
  6521                           ;motors.c: 120:             LATAbits.LATA1 = direction;
  6522  0020B4  B015               	btfsc	setDirection@direction^0,0,c
  6523  0020B6  D002               	bra	u2275
  6524  0020B8  9289               	bcf	137,1,c	;volatile
  6525  0020BA  D001               	bra	u2276
  6526  0020BC                     u2275:
  6527  0020BC  8289               	bsf	137,1,c	;volatile
  6528  0020BE                     u2276:
  6529                           
  6530                           ;motors.c: 121:             break;
  6531  0020BE  EF8C  F010         	goto	l101
  6532  0020C2                     l3309:
  6533  0020C2  FFFF               	dw	65535	; assembler added errata NOP
  6534                           
  6535                           ;motors.c: 123:             LATBbits.LATB3 = direction;
  6536  0020C4  B015               	btfsc	setDirection@direction^0,0,c
  6537  0020C6  D002               	bra	u2285
  6538  0020C8  968A               	bcf	138,3,c	;volatile
  6539  0020CA  D001               	bra	u2286
  6540  0020CC                     u2285:
  6541  0020CC  868A               	bsf	138,3,c	;volatile
  6542  0020CE                     u2286:
  6543                           
  6544                           ;motors.c: 124:             break;
  6545  0020CE  EF8C  F010         	goto	l101
  6546  0020D2                     l3311:
  6547  0020D2  FFFF               	dw	65535	; assembler added errata NOP
  6548                           
  6549                           ;motors.c: 126:             LATCbits.LATC1 = direction;
  6550  0020D4  B015               	btfsc	setDirection@direction^0,0,c
  6551  0020D6  D002               	bra	u2295
  6552  0020D8  928B               	bcf	139,1,c	;volatile
  6553  0020DA  D001               	bra	u2296
  6554  0020DC                     u2295:
  6555  0020DC  828B               	bsf	139,1,c	;volatile
  6556  0020DE                     u2296:
  6557                           
  6558                           ;motors.c: 127:             break;
  6559  0020DE  EF8C  F010         	goto	l101
  6560  0020E2                     l3315:
  6561  0020E2  FFFF               	dw	65535	; assembler added errata NOP
  6562  0020E4  5012               	movf	setDirection@motor^0,w,c
  6563  0020E6  6E13               	movwf	??_setDirection^0,c
  6564  0020E8  6A14               	clrf	(??_setDirection+1)^0,c
  6565                           
  6566                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6567                           ; Switch size 1, requested type "simple"
  6568                           ; Number of cases is 1, Range of values is 0 to 0
  6569                           ; switch strategies available:
  6570                           ; Name         Instructions Cycles
  6571                           ; simple_byte            4     3 (average)
  6572                           ;	Chosen strategy is simple_byte
  6573  0020EA  5014               	movf	(??_setDirection+1)^0,w,c
  6574  0020EC  0A00               	xorlw	0	; case 0
  6575  0020EE  B4D8               	btfsc	status,2,c
  6576  0020F0  EF7C  F010         	goto	l4391
  6577  0020F4  EF8C  F010         	goto	l101
  6578  0020F8                     l4391:
  6579  0020F8  FFFF               	dw	65535	; assembler added errata NOP
  6580                           
  6581                           ; Switch size 1, requested type "simple"
  6582                           ; Number of cases is 3, Range of values is 0 to 2
  6583                           ; switch strategies available:
  6584                           ; Name         Instructions Cycles
  6585                           ; simple_byte           10     6 (average)
  6586                           ;	Chosen strategy is simple_byte
  6587  0020FA  5013               	movf	??_setDirection^0,w,c
  6588  0020FC  0A00               	xorlw	0	; case 0
  6589  0020FE  B4D8               	btfsc	status,2,c
  6590  002100  EF59  F010         	goto	l3307
  6591  002104  0A01               	xorlw	1	; case 1
  6592  002106  B4D8               	btfsc	status,2,c
  6593  002108  EF61  F010         	goto	l3309
  6594  00210C  0A03               	xorlw	3	; case 2
  6595  00210E  B4D8               	btfsc	status,2,c
  6596  002110  EF69  F010         	goto	l3311
  6597  002114  EF8C  F010         	goto	l101
  6598  002118                     l101:
  6599  002118  FFFF               	dw	65535	; assembler added errata NOP
  6600  00211A  0012               	return		;funcret
  6601  00211C  FFFF               	dw	65535	; errata NOP
  6602  00211E                     __end_of_setDirection:
  6603                           	callstack 0
  6604                           
  6605 ;; *************** function _resetStep *****************
  6606 ;; Defined at:
  6607 ;;		line 66 in file "pwm.c"
  6608 ;; Parameters:    Size  Location     Type
  6609 ;;		None
  6610 ;; Auto vars:     Size  Location     Type
  6611 ;;		None
  6612 ;; Return value:  Size  Location     Type
  6613 ;;                  1    wreg      void 
  6614 ;; Registers used:
  6615 ;;		wreg, status,2
  6616 ;; Tracked objects:
  6617 ;;		On entry : 0/0
  6618 ;;		On exit  : 0/0
  6619 ;;		Unchanged: 0/0
  6620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6621 ;;      Params:         0       0       0       0       0       0       0
  6622 ;;      Locals:         0       0       0       0       0       0       0
  6623 ;;      Temps:          0       0       0       0       0       0       0
  6624 ;;      Totals:         0       0       0       0       0       0       0
  6625 ;;Total ram usage:        0 bytes
  6626 ;; Hardware stack levels used:    1
  6627 ;; Hardware stack levels required when called:    4
  6628 ;; This function calls:
  6629 ;;		Nothing
  6630 ;; This function is called by:
  6631 ;;		_resetPosition
  6632 ;;		_moveToPoint
  6633 ;;		_touchObject
  6634 ;;		_touchTherm
  6635 ;;		_liftArm
  6636 ;; This function uses a non-reentrant model
  6637 ;;
  6638                           
  6639                           	psect	text41
  6640  0023D8                     __ptext41:
  6641                           	callstack 0
  6642  0023D8                     _resetStep:
  6643                           	callstack 0
  6644  0023D8  FFFF               	dw	65535	; assembler added errata NOP
  6645  0023DA                     
  6646                           ;pwm.c: 67:     pwmStep = 0;
  6647  0023DA  0E00               	movlw	0
  6648  0023DC  6E67               	movwf	_pwmStep^0,c	;volatile
  6649  0023DE  0012               	return		;funcret
  6650  0023E0  FFFF               	dw	65535	; errata NOP
  6651  0023E2                     __end_of_resetStep:
  6652                           	callstack 0
  6653                           
  6654 ;; *************** function _getData *****************
  6655 ;; Defined at:
  6656 ;;		line 205 in file "usart.c"
  6657 ;; Parameters:    Size  Location     Type
  6658 ;;		None
  6659 ;; Auto vars:     Size  Location     Type
  6660 ;;		None
  6661 ;; Return value:  Size  Location     Type
  6662 ;;                  2   17[COMRAM] PTR struct .
  6663 ;; Registers used:
  6664 ;;		wreg, status,2, status,0
  6665 ;; Tracked objects:
  6666 ;;		On entry : 0/0
  6667 ;;		On exit  : 0/0
  6668 ;;		Unchanged: 0/0
  6669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6670 ;;      Params:         2       0       0       0       0       0       0
  6671 ;;      Locals:         0       0       0       0       0       0       0
  6672 ;;      Temps:          0       0       0       0       0       0       0
  6673 ;;      Totals:         2       0       0       0       0       0       0
  6674 ;;Total ram usage:        2 bytes
  6675 ;; Hardware stack levels used:    1
  6676 ;; Hardware stack levels required when called:    4
  6677 ;; This function calls:
  6678 ;;		Nothing
  6679 ;; This function is called by:
  6680 ;;		_executeData
  6681 ;; This function uses a non-reentrant model
  6682 ;;
  6683                           
  6684                           	psect	text42
  6685  00235E                     __ptext42:
  6686                           	callstack 0
  6687  00235E                     _getData:
  6688                           	callstack 0
  6689  00235E  FFFF               	dw	65535	; assembler added errata NOP
  6690  002360                     
  6691                           ;usart.c: 206:     return(&dataSequence[0]);
  6692  002360  0ED8               	movlw	low _dataSequence
  6693  002362  6E12               	movwf	?_getData^0,c
  6694  002364  0E00               	movlw	high _dataSequence
  6695  002366  6E13               	movwf	(?_getData+1)^0,c
  6696  002368  0012               	return		;funcret
  6697  00236A  FFFF               	dw	65535	; errata NOP
  6698  00236C                     __end_of_getData:
  6699                           	callstack 0
  6700                           
  6701 ;; *************** function _clearTM0 *****************
  6702 ;; Defined at:
  6703 ;;		line 30 in file "motors.c"
  6704 ;; Parameters:    Size  Location     Type
  6705 ;;		None
  6706 ;; Auto vars:     Size  Location     Type
  6707 ;;		None
  6708 ;; Return value:  Size  Location     Type
  6709 ;;                  1    wreg      void 
  6710 ;; Registers used:
  6711 ;;		wreg, status,2
  6712 ;; Tracked objects:
  6713 ;;		On entry : 0/0
  6714 ;;		On exit  : 0/0
  6715 ;;		Unchanged: 0/0
  6716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6717 ;;      Params:         0       0       0       0       0       0       0
  6718 ;;      Locals:         0       0       0       0       0       0       0
  6719 ;;      Temps:          0       0       0       0       0       0       0
  6720 ;;      Totals:         0       0       0       0       0       0       0
  6721 ;;Total ram usage:        0 bytes
  6722 ;; Hardware stack levels used:    1
  6723 ;; Hardware stack levels required when called:    4
  6724 ;; This function calls:
  6725 ;;		Nothing
  6726 ;; This function is called by:
  6727 ;;		_main
  6728 ;; This function uses a non-reentrant model
  6729 ;;
  6730                           
  6731                           	psect	text43
  6732  00236C                     __ptext43:
  6733                           	callstack 0
  6734  00236C                     _clearTM0:
  6735                           	callstack 0
  6736  00236C  FFFF               	dw	65535	; assembler added errata NOP
  6737  00236E                     
  6738                           ;motors.c: 31:     tm0Error = 0;
  6739  00236E  0E00               	movlw	0
  6740  002370  6E5C               	movwf	(_tm0Error+1)^0,c
  6741  002372  0E00               	movlw	0
  6742  002374  6E5B               	movwf	_tm0Error^0,c
  6743  002376  0012               	return		;funcret
  6744  002378  FFFF               	dw	65535	; errata NOP
  6745  00237A                     __end_of_clearTM0:
  6746                           	callstack 0
  6747                           
  6748 ;; *************** function _isr *****************
  6749 ;; Defined at:
  6750 ;;		line 17 in file "interrupt.c"
  6751 ;; Parameters:    Size  Location     Type
  6752 ;;		None
  6753 ;; Auto vars:     Size  Location     Type
  6754 ;;  temp            1   16[COMRAM] unsigned char 
  6755 ;; Return value:  Size  Location     Type
  6756 ;;                  1    wreg      void 
  6757 ;; Registers used:
  6758 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6759 ;; Tracked objects:
  6760 ;;		On entry : 0/0
  6761 ;;		On exit  : 0/0
  6762 ;;		Unchanged: 0/0
  6763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6764 ;;      Params:         0       0       0       0       0       0       0
  6765 ;;      Locals:         1       0       0       0       0       0       0
  6766 ;;      Temps:          6       0       0       0       0       0       0
  6767 ;;      Totals:         7       0       0       0       0       0       0
  6768 ;;Total ram usage:        7 bytes
  6769 ;; Hardware stack levels used:    1
  6770 ;; Hardware stack levels required when called:    3
  6771 ;; This function calls:
  6772 ;;		_increaseStep
  6773 ;;		_retPeriod
  6774 ;;		_setThermRel
  6775 ;;		_setTouchRel
  6776 ;;		_toggleStep
  6777 ;;		_whatsTM0Limit
  6778 ;;		_writeTM0
  6779 ;;		i2_storeData
  6780 ;; This function is called by:
  6781 ;;		Interrupt level 2
  6782 ;; This function uses a non-reentrant model
  6783 ;;
  6784                           
  6785                           	psect	intcode
  6786  000008                     __pintcode:
  6787                           	callstack 0
  6788  000008                     _isr:
  6789                           	callstack 0
  6790  000008  FFFF               	dw	65535	; assembler added errata NOP
  6791                           
  6792                           ;incstack = 0
  6793  00000A  826E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6794  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  6795  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  6796  000014  CFF3 F00F          	movff	prodl,??_isr+4
  6797  000018  CFF4 F010          	movff	prodh,??_isr+5
  6798  00001C                     
  6799                           ;interrupt.c: 18:     static unsigned int single_cycle = 0;;interrupt.c: 19:     static 
      +                          unsigned char tm0Count = 0;;interrupt.c: 20:     static unsigned char completeStep = 0;;
      +                          interrupt.c: 23:     if(INTCONbits.T0IF){
  6800  00001C  A4F2               	btfss	242,2,c	;volatile
  6801  00001E  EF13  F000         	goto	i2u217_41
  6802  000022  EF16  F000         	goto	i2u217_40
  6803  000026                     i2u217_41:
  6804  000026  FFFF               	dw	65535	; assembler added errata NOP
  6805  000028  EF2C  F000         	goto	i2l3223
  6806  00002C                     i2u217_40:
  6807  00002C  FFFF               	dw	65535	; assembler added errata NOP
  6808  00002E                     
  6809                           ;interrupt.c: 24:         INTCONbits.T0IF = 0;
  6810  00002E  94F2               	bcf	242,2,c	;volatile
  6811  000030                     
  6812                           ;interrupt.c: 27:         tm0Count++;
  6813  000030  2A63               	incf	isr@tm0Count^0,f,c
  6814  000032                     
  6815                           ;interrupt.c: 29:         if(tm0Count >= whatsTM0Limit()){
  6816  000032  EC20  F012         	call	_whatsTM0Limit	;wreg free
  6817  000036  6E0B               	movwf	??_isr^0,c
  6818  000038  500B               	movf	??_isr^0,w,c
  6819  00003A  5C63               	subwf	isr@tm0Count^0,w,c
  6820  00003C  A0D8               	btfss	status,0,c
  6821  00003E  EF23  F000         	goto	i2u218_41
  6822  000042  EF26  F000         	goto	i2u218_40
  6823  000046                     i2u218_41:
  6824  000046  FFFF               	dw	65535	; assembler added errata NOP
  6825  000048  EF2C  F000         	goto	i2l3223
  6826  00004C                     i2u218_40:
  6827  00004C  FFFF               	dw	65535	; assembler added errata NOP
  6828  00004E                     
  6829                           ;interrupt.c: 30:             T0CONbits.TMR0ON = 0;
  6830  00004E  9ED5               	bcf	213,7,c	;volatile
  6831  000050                     
  6832                           ;interrupt.c: 31:             tm0Count = 0;
  6833  000050  0E00               	movlw	0
  6834  000052  6E63               	movwf	isr@tm0Count^0,c
  6835  000054                     
  6836                           ;interrupt.c: 32:             writeTM0();
  6837  000054  ECBD  F011         	call	_writeTM0	;wreg free
  6838  000058                     i2l3223:
  6839  000058  FFFF               	dw	65535	; assembler added errata NOP
  6840                           
  6841                           ;interrupt.c: 37:     if(PIR1bits.TMR2IF){
  6842  00005A  A29E               	btfss	158,1,c	;volatile
  6843  00005C  EF32  F000         	goto	i2u219_41
  6844  000060  EF35  F000         	goto	i2u219_40
  6845  000064                     i2u219_41:
  6846  000064  FFFF               	dw	65535	; assembler added errata NOP
  6847  000066  EF63  F000         	goto	i2l3243
  6848  00006A                     i2u219_40:
  6849  00006A  FFFF               	dw	65535	; assembler added errata NOP
  6850  00006C                     
  6851                           ;interrupt.c: 38:         PIR1bits.TMR2IF = 0;
  6852  00006C  929E               	bcf	158,1,c	;volatile
  6853  00006E                     
  6854                           ;interrupt.c: 39:         single_cycle++;
  6855  00006E  4A51               	infsnz	isr@single_cycle^0,f,c
  6856  000070  2A52               	incf	(isr@single_cycle+1)^0,f,c
  6857  000072                     
  6858                           ;interrupt.c: 42:         if(single_cycle > retPeriod()){
  6859  000072  ECC4  F011         	call	_retPeriod	;wreg free
  6860  000076  5051               	movf	isr@single_cycle^0,w,c
  6861  000078  5C01               	subwf	?_retPeriod^0,w,c
  6862  00007A  5052               	movf	(isr@single_cycle+1)^0,w,c
  6863  00007C  5802               	subwfb	(?_retPeriod+1)^0,w,c
  6864  00007E  B0D8               	btfsc	status,0,c
  6865  000080  EF44  F000         	goto	i2u220_41
  6866  000084  EF47  F000         	goto	i2u220_40
  6867  000088                     i2u220_41:
  6868  000088  FFFF               	dw	65535	; assembler added errata NOP
  6869  00008A  EF63  F000         	goto	i2l3243
  6870  00008E                     i2u220_40:
  6871  00008E  FFFF               	dw	65535	; assembler added errata NOP
  6872  000090                     
  6873                           ;interrupt.c: 43:             completeStep++;
  6874  000090  2A62               	incf	isr@completeStep^0,f,c
  6875  000092                     
  6876                           ;interrupt.c: 46:             if(completeStep != 0 && !(completeStep % 2)){
  6877  000092  5062               	movf	isr@completeStep^0,w,c
  6878  000094  B4D8               	btfsc	status,2,c
  6879  000096  EF4F  F000         	goto	i2u221_41
  6880  00009A  EF52  F000         	goto	i2u221_40
  6881  00009E                     i2u221_41:
  6882  00009E  FFFF               	dw	65535	; assembler added errata NOP
  6883  0000A0  EF60  F000         	goto	i2l3241
  6884  0000A4                     i2u221_40:
  6885  0000A4  FFFF               	dw	65535	; assembler added errata NOP
  6886  0000A6  B062               	btfsc	isr@completeStep^0,0,c
  6887  0000A8  EF58  F000         	goto	i2u222_41
  6888  0000AC  EF5B  F000         	goto	i2u222_40
  6889  0000B0                     i2u222_41:
  6890  0000B0  FFFF               	dw	65535	; assembler added errata NOP
  6891  0000B2  EF60  F000         	goto	i2l3241
  6892  0000B6                     i2u222_40:
  6893  0000B6  FFFF               	dw	65535	; assembler added errata NOP
  6894  0000B8                     
  6895                           ;interrupt.c: 48:                 completeStep = 0;
  6896  0000B8  0E00               	movlw	0
  6897  0000BA  6E62               	movwf	isr@completeStep^0,c
  6898  0000BC                     
  6899                           ;interrupt.c: 51:                 increaseStep();
  6900  0000BC  EC24  F012         	call	_increaseStep	;wreg free
  6901  0000C0                     i2l3241:
  6902  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  6903                           
  6904                           ;interrupt.c: 56:             toggleStep();
  6905  0000C2  ECF1  F011         	call	_toggleStep	;wreg free
  6906  0000C6                     i2l3243:
  6907  0000C6  FFFF               	dw	65535	; assembler added errata NOP
  6908                           
  6909                           ;interrupt.c: 61:     if(PIR1bits.ADIF){
  6910  0000C8  AC9E               	btfss	158,6,c	;volatile
  6911  0000CA  EF69  F000         	goto	i2u223_41
  6912  0000CE  EF6C  F000         	goto	i2u223_40
  6913  0000D2                     i2u223_41:
  6914  0000D2  FFFF               	dw	65535	; assembler added errata NOP
  6915  0000D4  EF99  F000         	goto	i2l3255
  6916  0000D8                     i2u223_40:
  6917  0000D8  FFFF               	dw	65535	; assembler added errata NOP
  6918  0000DA                     
  6919                           ;interrupt.c: 62:         PIR1bits.ADIF = 0;
  6920  0000DA  9C9E               	bcf	158,6,c	;volatile
  6921                           
  6922                           ;interrupt.c: 65:         ADC_res = ADRESL;
  6923  0000DC  CFC3 F053          	movff	4035,_ADC_res	;volatile
  6924  0000E0  6A54               	clrf	(_ADC_res+1)^0,c
  6925  0000E2                     
  6926                           ;interrupt.c: 66:         ADC_res |= (ADRESH << 8);
  6927  0000E2  50C4               	movf	196,w,c	;volatile
  6928  0000E4  6E0C               	movwf	(??_isr+1)^0,c
  6929  0000E6  6A0B               	clrf	??_isr^0,c
  6930  0000E8  500B               	movf	??_isr^0,w,c
  6931  0000EA  1253               	iorwf	_ADC_res^0,f,c
  6932  0000EC  500C               	movf	(??_isr+1)^0,w,c
  6933  0000EE  1254               	iorwf	(_ADC_res+1)^0,f,c
  6934                           
  6935                           ;interrupt.c: 69:         if(ADC_res > therm_pressure){
  6936  0000F0  0453               	decf	_ADC_res^0,w,c
  6937  0000F2  0E04               	movlw	4
  6938  0000F4  5854               	subwfb	(_ADC_res+1)^0,w,c
  6939  0000F6  A0D8               	btfss	status,0,c
  6940  0000F8  EF80  F000         	goto	i2u224_41
  6941  0000FC  EF83  F000         	goto	i2u224_40
  6942  000100                     i2u224_41:
  6943  000100  FFFF               	dw	65535	; assembler added errata NOP
  6944  000102  EF8A  F000         	goto	i2l3251
  6945  000106                     i2u224_40:
  6946  000106  FFFF               	dw	65535	; assembler added errata NOP
  6947  000108                     
  6948                           ;interrupt.c: 71:             setTouchRel();
  6949  000108  ECF6  F011         	call	_setTouchRel	;wreg free
  6950                           
  6951                           ;interrupt.c: 72:             setThermRel();
  6952  00010C  ECFB  F011         	call	_setThermRel	;wreg free
  6953                           
  6954                           ;interrupt.c: 73:         }else if(ADC_res > touch_pressure){
  6955  000110  EF99  F000         	goto	i2l3255
  6956  000114                     i2l3251:
  6957  000114  FFFF               	dw	65535	; assembler added errata NOP
  6958  000116  0453               	decf	_ADC_res^0,w,c
  6959  000118  0E02               	movlw	2
  6960  00011A  5854               	subwfb	(_ADC_res+1)^0,w,c
  6961  00011C  A0D8               	btfss	status,0,c
  6962  00011E  EF93  F000         	goto	i2u225_41
  6963  000122  EF96  F000         	goto	i2u225_40
  6964  000126                     i2u225_41:
  6965  000126  FFFF               	dw	65535	; assembler added errata NOP
  6966  000128  EF99  F000         	goto	i2l3255
  6967  00012C                     i2u225_40:
  6968  00012C  FFFF               	dw	65535	; assembler added errata NOP
  6969  00012E                     
  6970                           ;interrupt.c: 75:             setTouchRel();
  6971  00012E  ECF6  F011         	call	_setTouchRel	;wreg free
  6972  000132                     i2l3255:
  6973  000132  FFFF               	dw	65535	; assembler added errata NOP
  6974                           
  6975                           ;interrupt.c: 80:     if(PIR1bits.RC1IF){
  6976  000134  AA9E               	btfss	158,5,c	;volatile
  6977  000136  EF9F  F000         	goto	i2u226_41
  6978  00013A  EFA2  F000         	goto	i2u226_40
  6979  00013E                     i2u226_41:
  6980  00013E  FFFF               	dw	65535	; assembler added errata NOP
  6981  000140  EFA9  F000         	goto	i2l453
  6982  000144                     i2u226_40:
  6983  000144  FFFF               	dw	65535	; assembler added errata NOP
  6984  000146                     
  6985                           ;interrupt.c: 81:         PIR1bits.RC1IF = 0;
  6986  000146  9A9E               	bcf	158,5,c	;volatile
  6987                           
  6988                           ;interrupt.c: 84:         unsigned char temp = RCREG1;
  6989  000148  CFAE F011          	movff	4014,isr@temp	;volatile
  6990  00014C                     
  6991                           ;interrupt.c: 86:         storeData(temp);
  6992  00014C  5011               	movf	isr@temp^0,w,c
  6993  00014E  ECBB  F00A         	call	i2_storeData
  6994  000152                     i2l453:
  6995  000152  FFFF               	dw	65535	; assembler added errata NOP
  6996  000154  C010  FFF4         	movff	??_isr+5,prodh
  6997  000158  C00F  FFF3         	movff	??_isr+4,prodl
  6998  00015C  C00E  FFDA         	movff	??_isr+3,fsr2h
  6999  000160  C00D  FFD9         	movff	??_isr+2,fsr2l
  7000  000164  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7001  000166  0011               	retfie		f
  7002  000168  FFFF               	dw	65535	; errata NOP
  7003  00016A                     __end_of_isr:
  7004                           	callstack 0
  7005                           
  7006 ;; *************** function i2_storeData *****************
  7007 ;; Defined at:
  7008 ;;		line 131 in file "usart.c"
  7009 ;; Parameters:    Size  Location     Type
  7010 ;;  data            1    wreg     unsigned char 
  7011 ;; Auto vars:     Size  Location     Type
  7012 ;;  data            1    9[COMRAM] unsigned char 
  7013 ;; Return value:  Size  Location     Type
  7014 ;;                  1    wreg      void 
  7015 ;; Registers used:
  7016 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7017 ;; Tracked objects:
  7018 ;;		On entry : 0/0
  7019 ;;		On exit  : 0/0
  7020 ;;		Unchanged: 0/0
  7021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7022 ;;      Params:         0       0       0       0       0       0       0
  7023 ;;      Locals:         1       0       0       0       0       0       0
  7024 ;;      Temps:          2       0       0       0       0       0       0
  7025 ;;      Totals:         3       0       0       0       0       0       0
  7026 ;;Total ram usage:        3 bytes
  7027 ;; Hardware stack levels used:    1
  7028 ;; Hardware stack levels required when called:    2
  7029 ;; This function calls:
  7030 ;;		i2_printError
  7031 ;; This function is called by:
  7032 ;;		_isr
  7033 ;; This function uses a non-reentrant model
  7034 ;;
  7035                           
  7036                           	psect	text45
  7037  001576                     __ptext45:
  7038                           	callstack 0
  7039  001576                     i2_storeData:
  7040                           	callstack 0
  7041  001576  FFFF               	dw	65535	; assembler added errata NOP
  7042                           
  7043                           ;incstack = 0
  7044                           ;i2storeData@data stored from wreg
  7045  001578  6E0A               	movwf	i2storeData@data^0,c
  7046  00157A                     
  7047                           ;usart.c: 133:     static unsigned char counter = 0;;usart.c: 134:     static unsigned c
      +                          har mexLength = 5;;usart.c: 135:     static unsigned char command;;usart.c: 136:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 140:     receivedMex[counter] = data;
  7048  00157A  0E45               	movlw	low storeData@receivedMex
  7049  00157C  245E               	addwf	storeData@counter^0,w,c
  7050  00157E  6ED9               	movwf	fsr2l,c
  7051  001580  6ADA               	clrf	fsr2h,c
  7052  001582  0E00               	movlw	high storeData@receivedMex
  7053  001584  22DA               	addwfc	fsr2h,f,c
  7054  001586  C00A  FFDF         	movff	i2storeData@data,indf2
  7055  00158A                     
  7056                           ;usart.c: 142:     counter++;
  7057  00158A  2A5E               	incf	storeData@counter^0,f,c
  7058                           
  7059                           ;usart.c: 145:     switch(receivedMex[0]){
  7060  00158C  EFD7  F00A         	goto	i2l3113
  7061  001590                     i2l3105:
  7062  001590  FFFF               	dw	65535	; assembler added errata NOP
  7063                           
  7064                           ;usart.c: 147:             mexLength = 5;
  7065  001592  0E05               	movlw	5
  7066  001594  6E6D               	movwf	storeData@mexLength^0,c
  7067                           
  7068                           ;usart.c: 148:             break;
  7069  001596  EFF2  F00A         	goto	i2l3115
  7070  00159A                     i2l3107:
  7071  00159A  FFFF               	dw	65535	; assembler added errata NOP
  7072                           
  7073                           ;usart.c: 150:             mexLength = 9;
  7074  00159C  0E09               	movlw	9
  7075  00159E  6E6D               	movwf	storeData@mexLength^0,c
  7076                           
  7077                           ;usart.c: 151:             break;
  7078  0015A0  EFF2  F00A         	goto	i2l3115
  7079  0015A4                     i2l3109:
  7080  0015A4  FFFF               	dw	65535	; assembler added errata NOP
  7081                           
  7082                           ;usart.c: 153:             mexLength = 1;
  7083  0015A6  0E01               	movlw	1
  7084  0015A8  6E6D               	movwf	storeData@mexLength^0,c
  7085                           
  7086                           ;usart.c: 154:             break;
  7087  0015AA  EFF2  F00A         	goto	i2l3115
  7088  0015AE                     i2l3113:
  7089  0015AE  FFFF               	dw	65535	; assembler added errata NOP
  7090  0015B0  5045               	movf	storeData@receivedMex^0,w,c
  7091  0015B2  6E08               	movwf	??i2_storeData^0,c
  7092  0015B4  6A09               	clrf	(??i2_storeData+1)^0,c
  7093                           
  7094                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7095                           ; Switch size 1, requested type "simple"
  7096                           ; Number of cases is 1, Range of values is 0 to 0
  7097                           ; switch strategies available:
  7098                           ; Name         Instructions Cycles
  7099                           ; simple_byte            4     3 (average)
  7100                           ;	Chosen strategy is simple_byte
  7101  0015B6  5009               	movf	(??i2_storeData+1)^0,w,c
  7102  0015B8  0A00               	xorlw	0	; case 0
  7103  0015BA  B4D8               	btfsc	status,2,c
  7104  0015BC  EFE2  F00A         	goto	i2l4393
  7105  0015C0  EFF2  F00A         	goto	i2l3115
  7106  0015C4                     i2l4393:
  7107  0015C4  FFFF               	dw	65535	; assembler added errata NOP
  7108                           
  7109                           ; Switch size 1, requested type "simple"
  7110                           ; Number of cases is 3, Range of values is 0 to 2
  7111                           ; switch strategies available:
  7112                           ; Name         Instructions Cycles
  7113                           ; simple_byte           10     6 (average)
  7114                           ;	Chosen strategy is simple_byte
  7115  0015C6  5008               	movf	??i2_storeData^0,w,c
  7116  0015C8  0A00               	xorlw	0	; case 0
  7117  0015CA  B4D8               	btfsc	status,2,c
  7118  0015CC  EFC8  F00A         	goto	i2l3105
  7119  0015D0  0A01               	xorlw	1	; case 1
  7120  0015D2  B4D8               	btfsc	status,2,c
  7121  0015D4  EFCD  F00A         	goto	i2l3107
  7122  0015D8  0A03               	xorlw	3	; case 2
  7123  0015DA  B4D8               	btfsc	status,2,c
  7124  0015DC  EFD2  F00A         	goto	i2l3109
  7125  0015E0  EFF2  F00A         	goto	i2l3115
  7126  0015E4                     i2l3115:
  7127  0015E4  FFFF               	dw	65535	; assembler added errata NOP
  7128                           
  7129                           ;usart.c: 161:     if(counter >= mexLength){
  7130  0015E6  506D               	movf	storeData@mexLength^0,w,c
  7131  0015E8  5C5E               	subwf	storeData@counter^0,w,c
  7132  0015EA  A0D8               	btfss	status,0,c
  7133  0015EC  EFFA  F00A         	goto	i2u213_41
  7134  0015F0  EFFD  F00A         	goto	i2u213_40
  7135  0015F4                     i2u213_41:
  7136  0015F4  FFFF               	dw	65535	; assembler added errata NOP
  7137  0015F6  EF69  F00B         	goto	i2l552
  7138  0015FA                     i2u213_40:
  7139  0015FA  FFFF               	dw	65535	; assembler added errata NOP
  7140  0015FC                     
  7141                           ;usart.c: 162:         counter = 0;
  7142  0015FC  0E00               	movlw	0
  7143  0015FE  6E5E               	movwf	storeData@counter^0,c
  7144                           
  7145                           ;usart.c: 166:         switch(receivedMex[0]){
  7146  001600  EF4E  F00B         	goto	i2l3131
  7147  001604                     i2l3119:
  7148  001604  FFFF               	dw	65535	; assembler added errata NOP
  7149                           
  7150                           ;usart.c: 168:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  7151  001606  5061               	movf	_dataCounter^0,w,c
  7152  001608  0D04               	mullw	4
  7153  00160A  0ED8               	movlw	low _dataSequence
  7154  00160C  24F3               	addwf	243,w,c
  7155  00160E  6ED9               	movwf	fsr2l,c
  7156  001610  0E00               	movlw	high _dataSequence
  7157  001612  20F4               	addwfc	prodh,w,c
  7158  001614  6EDA               	movwf	fsr2h,c
  7159  001616  C046  FFDF         	movff	storeData@receivedMex+1,indf2
  7160                           
  7161                           ;usart.c: 169:                 dataSequence[dataCounter].posX = receivedMex[2];
  7162  00161A  5061               	movf	_dataCounter^0,w,c
  7163  00161C  0D04               	mullw	4
  7164  00161E  0ED9               	movlw	low (_dataSequence+1)
  7165  001620  24F3               	addwf	243,w,c
  7166  001622  6ED9               	movwf	fsr2l,c
  7167  001624  0E00               	movlw	high (_dataSequence+1)
  7168  001626  20F4               	addwfc	prodh,w,c
  7169  001628  6EDA               	movwf	fsr2h,c
  7170  00162A  C047  FFDF         	movff	storeData@receivedMex+2,indf2
  7171                           
  7172                           ;usart.c: 170:                 dataSequence[dataCounter].posY = receivedMex[3];
  7173  00162E  5061               	movf	_dataCounter^0,w,c
  7174  001630  0D04               	mullw	4
  7175  001632  0EDA               	movlw	low (_dataSequence+2)
  7176  001634  24F3               	addwf	243,w,c
  7177  001636  6ED9               	movwf	fsr2l,c
  7178  001638  0E00               	movlw	high (_dataSequence+2)
  7179  00163A  20F4               	addwfc	prodh,w,c
  7180  00163C  6EDA               	movwf	fsr2h,c
  7181  00163E  C048  FFDF         	movff	storeData@receivedMex+3,indf2
  7182                           
  7183                           ;usart.c: 171:                 dataSequence[dataCounter].rotation = receivedMex[4];
  7184  001642  5061               	movf	_dataCounter^0,w,c
  7185  001644  0D04               	mullw	4
  7186  001646  0EDB               	movlw	low (_dataSequence+3)
  7187  001648  24F3               	addwf	243,w,c
  7188  00164A  6ED9               	movwf	fsr2l,c
  7189  00164C  0E00               	movlw	high (_dataSequence+3)
  7190  00164E  20F4               	addwfc	prodh,w,c
  7191  001650  6EDA               	movwf	fsr2h,c
  7192  001652  C049  FFDF         	movff	storeData@receivedMex+4,indf2
  7193  001656                     
  7194                           ;usart.c: 173:                 dataCounter++;
  7195  001656  2A61               	incf	_dataCounter^0,f,c
  7196                           
  7197                           ;usart.c: 174:                 break;
  7198  001658  EF69  F00B         	goto	i2l552
  7199  00165C                     i2l549:
  7200  00165C  FFFF               	dw	65535	; assembler added errata NOP
  7201                           
  7202                           ;usart.c: 177:                 newSequenceData.L = receivedMex[1];
  7203  00165E  C046  F0EC         	movff	storeData@receivedMex+1,_newSequenceData
  7204                           
  7205                           ;usart.c: 178:                 newSequenceData.W = receivedMex[2];
  7206  001662  C047  F0ED         	movff	storeData@receivedMex+2,_newSequenceData+1
  7207                           
  7208                           ;usart.c: 179:                 newSequenceData.init_posX = receivedMex[3];
  7209  001666  C048  F0EE         	movff	storeData@receivedMex+3,_newSequenceData+2
  7210                           
  7211                           ;usart.c: 180:                 newSequenceData.init_posY = receivedMex[4];
  7212  00166A  C049  F0EF         	movff	storeData@receivedMex+4,_newSequenceData+3
  7213                           
  7214                           ;usart.c: 181:                 newSequenceData.init_rot = receivedMex[5];
  7215  00166E  C04A  F0F0         	movff	storeData@receivedMex+5,_newSequenceData+4
  7216                           
  7217                           ;usart.c: 182:                 newSequenceData.end_posX = receivedMex[6];
  7218  001672  C04B  F0F1         	movff	storeData@receivedMex+6,_newSequenceData+5
  7219                           
  7220                           ;usart.c: 183:                 newSequenceData.end_posY = receivedMex[7];
  7221  001676  C04C  F0F2         	movff	storeData@receivedMex+7,_newSequenceData+6
  7222                           
  7223                           ;usart.c: 184:                 newSequenceData.end_rot = receivedMex[8];
  7224  00167A  C04D  F0F3         	movff	storeData@receivedMex+8,_newSequenceData+7
  7225  00167E                     
  7226                           ;usart.c: 186:                 _newSequence = 1;
  7227  00167E  0E01               	movlw	1
  7228  001680  6E5F               	movwf	__newSequence^0,c
  7229                           
  7230                           ;usart.c: 187:                 break;
  7231  001682  EF69  F00B         	goto	i2l552
  7232  001686                     i2l3125:
  7233  001686  FFFF               	dw	65535	; assembler added errata NOP
  7234                           
  7235                           ;usart.c: 190:                 _fatalError = 1;
  7236  001688  0E01               	movlw	1
  7237  00168A  6E60               	movwf	__fatalError^0,c
  7238                           
  7239                           ;usart.c: 191:                 break;
  7240  00168C  EF69  F00B         	goto	i2l552
  7241  001690                     i2l3127:
  7242  001690  FFFF               	dw	65535	; assembler added errata NOP
  7243                           
  7244                           ;usart.c: 194:                 printError(8);
  7245  001692  0E08               	movlw	8
  7246  001694  EC95  F00C         	call	i2_printError
  7247                           
  7248                           ;usart.c: 195:                 break;
  7249  001698  EF69  F00B         	goto	i2l552
  7250  00169C                     i2l3131:
  7251  00169C  FFFF               	dw	65535	; assembler added errata NOP
  7252  00169E  5045               	movf	storeData@receivedMex^0,w,c
  7253  0016A0  6E08               	movwf	??i2_storeData^0,c
  7254  0016A2  6A09               	clrf	(??i2_storeData+1)^0,c
  7255                           
  7256                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7257                           ; Switch size 1, requested type "simple"
  7258                           ; Number of cases is 1, Range of values is 0 to 0
  7259                           ; switch strategies available:
  7260                           ; Name         Instructions Cycles
  7261                           ; simple_byte            4     3 (average)
  7262                           ;	Chosen strategy is simple_byte
  7263  0016A4  5009               	movf	(??i2_storeData+1)^0,w,c
  7264  0016A6  0A00               	xorlw	0	; case 0
  7265  0016A8  B4D8               	btfsc	status,2,c
  7266  0016AA  EF59  F00B         	goto	i2l4395
  7267  0016AE  EF48  F00B         	goto	i2l3127
  7268  0016B2                     i2l4395:
  7269  0016B2  FFFF               	dw	65535	; assembler added errata NOP
  7270                           
  7271                           ; Switch size 1, requested type "simple"
  7272                           ; Number of cases is 3, Range of values is 0 to 2
  7273                           ; switch strategies available:
  7274                           ; Name         Instructions Cycles
  7275                           ; simple_byte           10     6 (average)
  7276                           ;	Chosen strategy is simple_byte
  7277  0016B4  5008               	movf	??i2_storeData^0,w,c
  7278  0016B6  0A00               	xorlw	0	; case 0
  7279  0016B8  B4D8               	btfsc	status,2,c
  7280  0016BA  EF02  F00B         	goto	i2l3119
  7281  0016BE  0A01               	xorlw	1	; case 1
  7282  0016C0  B4D8               	btfsc	status,2,c
  7283  0016C2  EF2E  F00B         	goto	i2l549
  7284  0016C6  0A03               	xorlw	3	; case 2
  7285  0016C8  B4D8               	btfsc	status,2,c
  7286  0016CA  EF43  F00B         	goto	i2l3125
  7287  0016CE  EF48  F00B         	goto	i2l3127
  7288  0016D2                     i2l552:
  7289  0016D2  FFFF               	dw	65535	; assembler added errata NOP
  7290  0016D4  0012               	return		;funcret
  7291  0016D6  FFFF               	dw	65535	; errata NOP
  7292  0016D8                     __end_ofi2_storeData:
  7293                           	callstack 0
  7294                           
  7295 ;; *************** function i2_printError *****************
  7296 ;; Defined at:
  7297 ;;		line 53 in file "usart.c"
  7298 ;; Parameters:    Size  Location     Type
  7299 ;;  errCode         1    wreg     unsigned char 
  7300 ;; Auto vars:     Size  Location     Type
  7301 ;;  errCode         1    6[COMRAM] unsigned char 
  7302 ;; Return value:  Size  Location     Type
  7303 ;;                  1    wreg      void 
  7304 ;; Registers used:
  7305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7306 ;; Tracked objects:
  7307 ;;		On entry : 0/0
  7308 ;;		On exit  : 0/0
  7309 ;;		Unchanged: 0/0
  7310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7311 ;;      Params:         0       0       0       0       0       0       0
  7312 ;;      Locals:         1       0       0       0       0       0       0
  7313 ;;      Temps:          2       0       0       0       0       0       0
  7314 ;;      Totals:         3       0       0       0       0       0       0
  7315 ;;Total ram usage:        3 bytes
  7316 ;; Hardware stack levels used:    1
  7317 ;; Hardware stack levels required when called:    1
  7318 ;; This function calls:
  7319 ;;		i2_uartTx
  7320 ;; This function is called by:
  7321 ;;		i2_storeData
  7322 ;; This function uses a non-reentrant model
  7323 ;;
  7324                           
  7325                           	psect	text46
  7326  00192A                     __ptext46:
  7327                           	callstack 0
  7328  00192A                     i2_printError:
  7329                           	callstack 0
  7330  00192A  FFFF               	dw	65535	; assembler added errata NOP
  7331                           
  7332                           ;incstack = 0
  7333                           ;i2printError@errCode stored from wreg
  7334  00192C  6E07               	movwf	i2printError@errCode^0,c
  7335  00192E                     
  7336                           ;usart.c: 55:     switch(errCode){
  7337  00192E  EFF1  F00C         	goto	i2l2853
  7338  001932                     i2l2835:
  7339  001932  FFFF               	dw	65535	; assembler added errata NOP
  7340                           
  7341                           ;usart.c: 57:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  7342  001934  0EA4               	movlw	low _errString_Feed
  7343  001936  6E01               	movwf	i2uartTx@ptr^0,c
  7344  001938  0E00               	movlw	high _errString_Feed
  7345  00193A  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7346  00193C  0E1D               	movlw	29
  7347  00193E  6E03               	movwf	i2uartTx@length^0,c
  7348  001940  EC12  F011         	call	i2_uartTx	;wreg free
  7349                           
  7350                           ;usart.c: 58:             break;
  7351  001944  EF20  F00D         	goto	i2l508
  7352  001948                     i2l2837:
  7353  001948  FFFF               	dw	65535	; assembler added errata NOP
  7354                           
  7355                           ;usart.c: 60:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  7356  00194A  0E5C               	movlw	low _errString_ZEND
  7357  00194C  6E01               	movwf	i2uartTx@ptr^0,c
  7358  00194E  0E01               	movlw	high _errString_ZEND
  7359  001950  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7360  001952  0E28               	movlw	40
  7361  001954  6E03               	movwf	i2uartTx@length^0,c
  7362  001956  EC12  F011         	call	i2_uartTx	;wreg free
  7363                           
  7364                           ;usart.c: 61:             break;
  7365  00195A  EF20  F00D         	goto	i2l508
  7366  00195E                     i2l2839:
  7367  00195E  FFFF               	dw	65535	; assembler added errata NOP
  7368                           
  7369                           ;usart.c: 63:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  7370  001960  0E84               	movlw	low _errString_Reset
  7371  001962  6E01               	movwf	i2uartTx@ptr^0,c
  7372  001964  0E01               	movlw	high _errString_Reset
  7373  001966  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7374  001968  0E27               	movlw	39
  7375  00196A  6E03               	movwf	i2uartTx@length^0,c
  7376  00196C  EC12  F011         	call	i2_uartTx	;wreg free
  7377                           
  7378                           ;usart.c: 64:             break;
  7379  001970  EF20  F00D         	goto	i2l508
  7380  001974                     i2l2841:
  7381  001974  FFFF               	dw	65535	; assembler added errata NOP
  7382                           
  7383                           ;usart.c: 66:             uartTx(&errString_Point[0], sizeof(errString_Point));
  7384  001976  0E34               	movlw	low _errString_Point
  7385  001978  6E01               	movwf	i2uartTx@ptr^0,c
  7386  00197A  0E01               	movlw	high _errString_Point
  7387  00197C  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7388  00197E  0E28               	movlw	40
  7389  001980  6E03               	movwf	i2uartTx@length^0,c
  7390  001982  EC12  F011         	call	i2_uartTx	;wreg free
  7391                           
  7392                           ;usart.c: 67:             break;
  7393  001986  EF20  F00D         	goto	i2l508
  7394  00198A                     i2l2843:
  7395  00198A  FFFF               	dw	65535	; assembler added errata NOP
  7396                           
  7397                           ;usart.c: 69:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  7398  00198C  0E84               	movlw	low _errString_Bound
  7399  00198E  6E01               	movwf	i2uartTx@ptr^0,c
  7400  001990  0E00               	movlw	high _errString_Bound
  7401  001992  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7402  001994  0E20               	movlw	32
  7403  001996  6E03               	movwf	i2uartTx@length^0,c
  7404  001998  EC12  F011         	call	i2_uartTx	;wreg free
  7405                           
  7406                           ;usart.c: 70:             break;
  7407  00199C  EF20  F00D         	goto	i2l508
  7408  0019A0                     i2l2845:
  7409  0019A0  FFFF               	dw	65535	; assembler added errata NOP
  7410                           
  7411                           ;usart.c: 72:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  7412  0019A2  0E00               	movlw	low _errString_PointZ
  7413  0019A4  6E01               	movwf	i2uartTx@ptr^0,c
  7414  0019A6  0E01               	movlw	high _errString_PointZ
  7415  0019A8  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7416  0019AA  0E34               	movlw	52
  7417  0019AC  6E03               	movwf	i2uartTx@length^0,c
  7418  0019AE  EC12  F011         	call	i2_uartTx	;wreg free
  7419                           
  7420                           ;usart.c: 73:             break;
  7421  0019B2  EF20  F00D         	goto	i2l508
  7422  0019B6                     i2l2847:
  7423  0019B6  FFFF               	dw	65535	; assembler added errata NOP
  7424                           
  7425                           ;usart.c: 75:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  7426  0019B8  0EAB               	movlw	low _errString_Fatal
  7427  0019BA  6E01               	movwf	i2uartTx@ptr^0,c
  7428  0019BC  0E01               	movlw	high _errString_Fatal
  7429  0019BE  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7430  0019C0  0E26               	movlw	38
  7431  0019C2  6E03               	movwf	i2uartTx@length^0,c
  7432  0019C4  EC12  F011         	call	i2_uartTx	;wreg free
  7433                           
  7434                           ;usart.c: 76:             break;
  7435  0019C8  EF20  F00D         	goto	i2l508
  7436  0019CC                     i2l2849:
  7437  0019CC  FFFF               	dw	65535	; assembler added errata NOP
  7438                           
  7439                           ;usart.c: 78:             uartTx(&errString_Command[0], sizeof(errString_Command));
  7440  0019CE  0EC1               	movlw	low _errString_Command
  7441  0019D0  6E01               	movwf	i2uartTx@ptr^0,c
  7442  0019D2  0E00               	movlw	high _errString_Command
  7443  0019D4  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7444  0019D6  0E17               	movlw	23
  7445  0019D8  6E03               	movwf	i2uartTx@length^0,c
  7446  0019DA  EC12  F011         	call	i2_uartTx	;wreg free
  7447                           
  7448                           ;usart.c: 79:             break;
  7449  0019DE  EF20  F00D         	goto	i2l508
  7450  0019E2                     i2l2853:
  7451  0019E2  FFFF               	dw	65535	; assembler added errata NOP
  7452  0019E4  5007               	movf	i2printError@errCode^0,w,c
  7453  0019E6  6E05               	movwf	??i2_printError^0,c
  7454  0019E8  6A06               	clrf	(??i2_printError+1)^0,c
  7455                           
  7456                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7457                           ; Switch size 1, requested type "simple"
  7458                           ; Number of cases is 1, Range of values is 0 to 0
  7459                           ; switch strategies available:
  7460                           ; Name         Instructions Cycles
  7461                           ; simple_byte            4     3 (average)
  7462                           ;	Chosen strategy is simple_byte
  7463  0019EA  5006               	movf	(??i2_printError+1)^0,w,c
  7464  0019EC  0A00               	xorlw	0	; case 0
  7465  0019EE  B4D8               	btfsc	status,2,c
  7466  0019F0  EFFC  F00C         	goto	i2l4397
  7467  0019F4  EF20  F00D         	goto	i2l508
  7468  0019F8                     i2l4397:
  7469  0019F8  FFFF               	dw	65535	; assembler added errata NOP
  7470                           
  7471                           ; Switch size 1, requested type "simple"
  7472                           ; Number of cases is 8, Range of values is 1 to 8
  7473                           ; switch strategies available:
  7474                           ; Name         Instructions Cycles
  7475                           ; simple_byte           25    13 (average)
  7476                           ;	Chosen strategy is simple_byte
  7477  0019FA  5005               	movf	??i2_printError^0,w,c
  7478  0019FC  0A01               	xorlw	1	; case 1
  7479  0019FE  B4D8               	btfsc	status,2,c
  7480  001A00  EF99  F00C         	goto	i2l2835
  7481  001A04  0A03               	xorlw	3	; case 2
  7482  001A06  B4D8               	btfsc	status,2,c
  7483  001A08  EFA4  F00C         	goto	i2l2837
  7484  001A0C  0A01               	xorlw	1	; case 3
  7485  001A0E  B4D8               	btfsc	status,2,c
  7486  001A10  EFAF  F00C         	goto	i2l2839
  7487  001A14  0A07               	xorlw	7	; case 4
  7488  001A16  B4D8               	btfsc	status,2,c
  7489  001A18  EFBA  F00C         	goto	i2l2841
  7490  001A1C  0A01               	xorlw	1	; case 5
  7491  001A1E  B4D8               	btfsc	status,2,c
  7492  001A20  EFC5  F00C         	goto	i2l2843
  7493  001A24  0A03               	xorlw	3	; case 6
  7494  001A26  B4D8               	btfsc	status,2,c
  7495  001A28  EFD0  F00C         	goto	i2l2845
  7496  001A2C  0A01               	xorlw	1	; case 7
  7497  001A2E  B4D8               	btfsc	status,2,c
  7498  001A30  EFDB  F00C         	goto	i2l2847
  7499  001A34  0A0F               	xorlw	15	; case 8
  7500  001A36  B4D8               	btfsc	status,2,c
  7501  001A38  EFE6  F00C         	goto	i2l2849
  7502  001A3C  EF20  F00D         	goto	i2l508
  7503  001A40                     i2l508:
  7504  001A40  FFFF               	dw	65535	; assembler added errata NOP
  7505  001A42  0012               	return		;funcret
  7506  001A44  FFFF               	dw	65535	; errata NOP
  7507  001A46                     __end_ofi2_printError:
  7508                           	callstack 0
  7509                           
  7510 ;; *************** function i2_uartTx *****************
  7511 ;; Defined at:
  7512 ;;		line 221 in file "usart.c"
  7513 ;; Parameters:    Size  Location     Type
  7514 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  7515 ;;		 -> errString_Command(23), errString_Fatal(38), errString_PointZ(52), errString_Bound(32), 
  7516 ;;		 -> errString_Point(40), errString_Reset(39), errString_ZEND(40), errString_Feed(29), 
  7517 ;;  length          1    2[COMRAM] unsigned char 
  7518 ;; Auto vars:     Size  Location     Type
  7519 ;;  i               1    3[COMRAM] unsigned char 
  7520 ;; Return value:  Size  Location     Type
  7521 ;;                  1    wreg      void 
  7522 ;; Registers used:
  7523 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7524 ;; Tracked objects:
  7525 ;;		On entry : 0/0
  7526 ;;		On exit  : 0/0
  7527 ;;		Unchanged: 0/0
  7528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7529 ;;      Params:         3       0       0       0       0       0       0
  7530 ;;      Locals:         1       0       0       0       0       0       0
  7531 ;;      Temps:          0       0       0       0       0       0       0
  7532 ;;      Totals:         4       0       0       0       0       0       0
  7533 ;;Total ram usage:        4 bytes
  7534 ;; Hardware stack levels used:    1
  7535 ;; This function calls:
  7536 ;;		Nothing
  7537 ;; This function is called by:
  7538 ;;		i2_printError
  7539 ;; This function uses a non-reentrant model
  7540 ;;
  7541                           
  7542                           	psect	text47
  7543  002224                     __ptext47:
  7544                           	callstack 0
  7545  002224                     i2_uartTx:
  7546                           	callstack 0
  7547  002224  FFFF               	dw	65535	; assembler added errata NOP
  7548  002226                     
  7549                           ;usart.c: 221: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 222: {;usa
      +                          rt.c: 224:     for(char i = 1; i < length; i++){
  7550  002226  0E01               	movlw	1
  7551  002228  6E04               	movwf	i2uartTx@i^0,c
  7552  00222A  EF2B  F011         	goto	i2l2563
  7553  00222E                     i2l2559:
  7554  00222E  FFFF               	dw	65535	; assembler added errata NOP
  7555                           
  7556                           ;usart.c: 226:         TXREG = *ptr;
  7557  002230  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  7558  002234  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  7559  002238  50DF               	movf	indf2,w,c
  7560  00223A  6EAD               	movwf	173,c	;volatile
  7561  00223C                     i2l563:
  7562  00223C  FFFF               	dw	65535	; assembler added errata NOP
  7563  00223E  A2AC               	btfss	172,1,c	;volatile
  7564  002240  EF24  F011         	goto	i2u159_41
  7565  002244  EF27  F011         	goto	i2u159_40
  7566  002248                     i2u159_41:
  7567  002248  FFFF               	dw	65535	; assembler added errata NOP
  7568  00224A  EF1E  F011         	goto	i2l563
  7569  00224E                     i2u159_40:
  7570  00224E  FFFF               	dw	65535	; assembler added errata NOP
  7571  002250                     
  7572                           ;usart.c: 230:         ptr++;
  7573  002250  4A01               	infsnz	i2uartTx@ptr^0,f,c
  7574  002252  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  7575                           
  7576                           ;usart.c: 231:     }
  7577  002254  2A04               	incf	i2uartTx@i^0,f,c
  7578  002256                     i2l2563:
  7579  002256  FFFF               	dw	65535	; assembler added errata NOP
  7580  002258  5003               	movf	i2uartTx@length^0,w,c
  7581  00225A  5C04               	subwf	i2uartTx@i^0,w,c
  7582  00225C  A0D8               	btfss	status,0,c
  7583  00225E  EF33  F011         	goto	i2u160_41
  7584  002262  EF36  F011         	goto	i2u160_40
  7585  002266                     i2u160_41:
  7586  002266  FFFF               	dw	65535	; assembler added errata NOP
  7587  002268  EF17  F011         	goto	i2l2559
  7588  00226C                     i2u160_40:
  7589  00226C  FFFF               	dw	65535	; assembler added errata NOP
  7590  00226E  0012               	return		;funcret
  7591  002270  FFFF               	dw	65535	; errata NOP
  7592  002272                     __end_ofi2_uartTx:
  7593                           	callstack 0
  7594                           
  7595 ;; *************** function _writeTM0 *****************
  7596 ;; Defined at:
  7597 ;;		line 23 in file "motors.c"
  7598 ;; Parameters:    Size  Location     Type
  7599 ;;		None
  7600 ;; Auto vars:     Size  Location     Type
  7601 ;;		None
  7602 ;; Return value:  Size  Location     Type
  7603 ;;                  1    wreg      void 
  7604 ;; Registers used:
  7605 ;;		wreg, status,2
  7606 ;; Tracked objects:
  7607 ;;		On entry : 0/0
  7608 ;;		On exit  : 0/0
  7609 ;;		Unchanged: 0/0
  7610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7611 ;;      Params:         0       0       0       0       0       0       0
  7612 ;;      Locals:         0       0       0       0       0       0       0
  7613 ;;      Temps:          0       0       0       0       0       0       0
  7614 ;;      Totals:         0       0       0       0       0       0       0
  7615 ;;Total ram usage:        0 bytes
  7616 ;; Hardware stack levels used:    1
  7617 ;; This function calls:
  7618 ;;		Nothing
  7619 ;; This function is called by:
  7620 ;;		_isr
  7621 ;; This function uses a non-reentrant model
  7622 ;;
  7623                           
  7624                           	psect	text48
  7625  00237A                     __ptext48:
  7626                           	callstack 0
  7627  00237A                     _writeTM0:
  7628                           	callstack 0
  7629  00237A  FFFF               	dw	65535	; assembler added errata NOP
  7630  00237C                     
  7631                           ;motors.c: 24:     tm0Error = 1;
  7632  00237C  0E00               	movlw	0
  7633  00237E  6E5C               	movwf	(_tm0Error+1)^0,c
  7634  002380  0E01               	movlw	1
  7635  002382  6E5B               	movwf	_tm0Error^0,c
  7636  002384  0012               	return		;funcret
  7637  002386  FFFF               	dw	65535	; errata NOP
  7638  002388                     __end_of_writeTM0:
  7639                           	callstack 0
  7640                           
  7641 ;; *************** function _whatsTM0Limit *****************
  7642 ;; Defined at:
  7643 ;;		line 37 in file "motors.c"
  7644 ;; Parameters:    Size  Location     Type
  7645 ;;		None
  7646 ;; Auto vars:     Size  Location     Type
  7647 ;;		None
  7648 ;; Return value:  Size  Location     Type
  7649 ;;                  1    wreg      unsigned char 
  7650 ;; Registers used:
  7651 ;;		wreg, status,2
  7652 ;; Tracked objects:
  7653 ;;		On entry : 0/0
  7654 ;;		On exit  : 0/0
  7655 ;;		Unchanged: 0/0
  7656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7657 ;;      Params:         0       0       0       0       0       0       0
  7658 ;;      Locals:         0       0       0       0       0       0       0
  7659 ;;      Temps:          0       0       0       0       0       0       0
  7660 ;;      Totals:         0       0       0       0       0       0       0
  7661 ;;Total ram usage:        0 bytes
  7662 ;; Hardware stack levels used:    1
  7663 ;; This function calls:
  7664 ;;		Nothing
  7665 ;; This function is called by:
  7666 ;;		_isr
  7667 ;; This function uses a non-reentrant model
  7668 ;;
  7669                           
  7670                           	psect	text49
  7671  002440                     __ptext49:
  7672                           	callstack 0
  7673  002440                     _whatsTM0Limit:
  7674                           	callstack 0
  7675  002440  FFFF               	dw	65535	; assembler added errata NOP
  7676  002442                     
  7677                           ;motors.c: 38:     return(tm0Limit);
  7678  002442  5068               	movf	_tm0Limit^0,w,c
  7679  002444  0012               	return		;funcret
  7680  002446  FFFF               	dw	65535	; errata NOP
  7681  002448                     __end_of_whatsTM0Limit:
  7682                           	callstack 0
  7683                           
  7684 ;; *************** function _toggleStep *****************
  7685 ;; Defined at:
  7686 ;;		line 81 in file "pwm.c"
  7687 ;; Parameters:    Size  Location     Type
  7688 ;;		None
  7689 ;; Auto vars:     Size  Location     Type
  7690 ;;		None
  7691 ;; Return value:  Size  Location     Type
  7692 ;;                  1    wreg      void 
  7693 ;; Registers used:
  7694 ;;		wreg, status,2
  7695 ;; Tracked objects:
  7696 ;;		On entry : 0/0
  7697 ;;		On exit  : 0/0
  7698 ;;		Unchanged: 0/0
  7699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7700 ;;      Params:         0       0       0       0       0       0       0
  7701 ;;      Locals:         0       0       0       0       0       0       0
  7702 ;;      Temps:          0       0       0       0       0       0       0
  7703 ;;      Totals:         0       0       0       0       0       0       0
  7704 ;;Total ram usage:        0 bytes
  7705 ;; Hardware stack levels used:    1
  7706 ;; This function calls:
  7707 ;;		Nothing
  7708 ;; This function is called by:
  7709 ;;		_isr
  7710 ;; This function uses a non-reentrant model
  7711 ;;
  7712                           
  7713                           	psect	text50
  7714  0023E2                     __ptext50:
  7715                           	callstack 0
  7716  0023E2                     _toggleStep:
  7717                           	callstack 0
  7718  0023E2  FFFF               	dw	65535	; assembler added errata NOP
  7719  0023E4                     
  7720                           ;pwm.c: 82:     stepToggle = 1;
  7721  0023E4  0E01               	movlw	1
  7722  0023E6  6E66               	movwf	_stepToggle^0,c	;volatile
  7723  0023E8  0012               	return		;funcret
  7724  0023EA  FFFF               	dw	65535	; errata NOP
  7725  0023EC                     __end_of_toggleStep:
  7726                           	callstack 0
  7727                           
  7728 ;; *************** function _setTouchRel *****************
  7729 ;; Defined at:
  7730 ;;		line 85 in file "adc.c"
  7731 ;; Parameters:    Size  Location     Type
  7732 ;;		None
  7733 ;; Auto vars:     Size  Location     Type
  7734 ;;		None
  7735 ;; Return value:  Size  Location     Type
  7736 ;;                  1    wreg      void 
  7737 ;; Registers used:
  7738 ;;		wreg, status,2
  7739 ;; Tracked objects:
  7740 ;;		On entry : 0/0
  7741 ;;		On exit  : 0/0
  7742 ;;		Unchanged: 0/0
  7743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7744 ;;      Params:         0       0       0       0       0       0       0
  7745 ;;      Locals:         0       0       0       0       0       0       0
  7746 ;;      Temps:          0       0       0       0       0       0       0
  7747 ;;      Totals:         0       0       0       0       0       0       0
  7748 ;;Total ram usage:        0 bytes
  7749 ;; Hardware stack levels used:    1
  7750 ;; This function calls:
  7751 ;;		Nothing
  7752 ;; This function is called by:
  7753 ;;		_isr
  7754 ;; This function uses a non-reentrant model
  7755 ;;
  7756                           
  7757                           	psect	text51
  7758  0023EC                     __ptext51:
  7759                           	callstack 0
  7760  0023EC                     _setTouchRel:
  7761                           	callstack 0
  7762  0023EC  FFFF               	dw	65535	; assembler added errata NOP
  7763  0023EE                     
  7764                           ;adc.c: 86:     touch_rel = 1;
  7765  0023EE  0E01               	movlw	1
  7766  0023F0  6E65               	movwf	_touch_rel^0,c	;volatile
  7767  0023F2  0012               	return		;funcret
  7768  0023F4  FFFF               	dw	65535	; errata NOP
  7769  0023F6                     __end_of_setTouchRel:
  7770                           	callstack 0
  7771                           
  7772 ;; *************** function _setThermRel *****************
  7773 ;; Defined at:
  7774 ;;		line 78 in file "adc.c"
  7775 ;; Parameters:    Size  Location     Type
  7776 ;;		None
  7777 ;; Auto vars:     Size  Location     Type
  7778 ;;		None
  7779 ;; Return value:  Size  Location     Type
  7780 ;;                  1    wreg      void 
  7781 ;; Registers used:
  7782 ;;		wreg, status,2
  7783 ;; Tracked objects:
  7784 ;;		On entry : 0/0
  7785 ;;		On exit  : 0/0
  7786 ;;		Unchanged: 0/0
  7787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7788 ;;      Params:         0       0       0       0       0       0       0
  7789 ;;      Locals:         0       0       0       0       0       0       0
  7790 ;;      Temps:          0       0       0       0       0       0       0
  7791 ;;      Totals:         0       0       0       0       0       0       0
  7792 ;;Total ram usage:        0 bytes
  7793 ;; Hardware stack levels used:    1
  7794 ;; This function calls:
  7795 ;;		Nothing
  7796 ;; This function is called by:
  7797 ;;		_isr
  7798 ;; This function uses a non-reentrant model
  7799 ;;
  7800                           
  7801                           	psect	text52
  7802  0023F6                     __ptext52:
  7803                           	callstack 0
  7804  0023F6                     _setThermRel:
  7805                           	callstack 0
  7806  0023F6  FFFF               	dw	65535	; assembler added errata NOP
  7807  0023F8                     
  7808                           ;adc.c: 79:     therm_rel = 1;
  7809  0023F8  0E01               	movlw	1
  7810  0023FA  6E64               	movwf	_therm_rel^0,c	;volatile
  7811  0023FC  0012               	return		;funcret
  7812  0023FE  FFFF               	dw	65535	; errata NOP
  7813  002400                     __end_of_setThermRel:
  7814                           	callstack 0
  7815                           
  7816 ;; *************** function _retPeriod *****************
  7817 ;; Defined at:
  7818 ;;		line 89 in file "pwm.c"
  7819 ;; Parameters:    Size  Location     Type
  7820 ;;		None
  7821 ;; Auto vars:     Size  Location     Type
  7822 ;;		None
  7823 ;; Return value:  Size  Location     Type
  7824 ;;                  2    0[COMRAM] unsigned int 
  7825 ;; Registers used:
  7826 ;;		None
  7827 ;; Tracked objects:
  7828 ;;		On entry : 0/0
  7829 ;;		On exit  : 0/0
  7830 ;;		Unchanged: 0/0
  7831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7832 ;;      Params:         2       0       0       0       0       0       0
  7833 ;;      Locals:         0       0       0       0       0       0       0
  7834 ;;      Temps:          0       0       0       0       0       0       0
  7835 ;;      Totals:         2       0       0       0       0       0       0
  7836 ;;Total ram usage:        2 bytes
  7837 ;; Hardware stack levels used:    1
  7838 ;; This function calls:
  7839 ;;		Nothing
  7840 ;; This function is called by:
  7841 ;;		_isr
  7842 ;; This function uses a non-reentrant model
  7843 ;;
  7844                           
  7845                           	psect	text53
  7846  002388                     __ptext53:
  7847                           	callstack 0
  7848  002388                     _retPeriod:
  7849                           	callstack 0
  7850  002388  FFFF               	dw	65535	; assembler added errata NOP
  7851  00238A                     
  7852                           ;pwm.c: 90:     return pwmPeriod;
  7853  00238A  C055  F001         	movff	_pwmPeriod,?_retPeriod
  7854  00238E  C056  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  7855  002392  0012               	return		;funcret
  7856  002394  FFFF               	dw	65535	; errata NOP
  7857  002396                     __end_of_retPeriod:
  7858                           	callstack 0
  7859                           
  7860 ;; *************** function _increaseStep *****************
  7861 ;; Defined at:
  7862 ;;		line 73 in file "pwm.c"
  7863 ;; Parameters:    Size  Location     Type
  7864 ;;		None
  7865 ;; Auto vars:     Size  Location     Type
  7866 ;;		None
  7867 ;; Return value:  Size  Location     Type
  7868 ;;                  1    wreg      void 
  7869 ;; Registers used:
  7870 ;;		status,2, status,0
  7871 ;; Tracked objects:
  7872 ;;		On entry : 0/0
  7873 ;;		On exit  : 0/0
  7874 ;;		Unchanged: 0/0
  7875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7876 ;;      Params:         0       0       0       0       0       0       0
  7877 ;;      Locals:         0       0       0       0       0       0       0
  7878 ;;      Temps:          0       0       0       0       0       0       0
  7879 ;;      Totals:         0       0       0       0       0       0       0
  7880 ;;Total ram usage:        0 bytes
  7881 ;; Hardware stack levels used:    1
  7882 ;; This function calls:
  7883 ;;		Nothing
  7884 ;; This function is called by:
  7885 ;;		_isr
  7886 ;; This function uses a non-reentrant model
  7887 ;;
  7888                           
  7889                           	psect	text54
  7890  002448                     __ptext54:
  7891                           	callstack 0
  7892  002448                     _increaseStep:
  7893                           	callstack 0
  7894  002448  FFFF               	dw	65535	; assembler added errata NOP
  7895  00244A                     
  7896                           ;pwm.c: 74:     pwmStep++;
  7897  00244A  2A67               	incf	_pwmStep^0,f,c	;volatile
  7898  00244C  0012               	return		;funcret
  7899  00244E  FFFF               	dw	65535	; errata NOP
  7900  002450                     __end_of_increaseStep:
  7901                           	callstack 0
  7902                           
  7903                           	psect	rparam
  7904  0000                     
  7905                           	psect	temp
  7906  00006E                     btemp:
  7907                           	callstack 0
  7908  00006E                     	ds	1
  7909  0000                     int$flags	set	btemp
  7910  0000                     wtemp8	set	btemp+1
  7911  0000                     ttemp5	set	btemp+1
  7912  0000                     ttemp6	set	btemp+4
  7913  0000                     ttemp7	set	btemp+8
  7914                           
  7915                           	psect	idloc
  7916                           
  7917                           ;Config register IDLOC0 @ 0x200000
  7918                           ;	unspecified, using default values
  7919  200000                     	org	2097152
  7920  200000  FF                 	db	255
  7921                           
  7922                           ;Config register IDLOC1 @ 0x200001
  7923                           ;	unspecified, using default values
  7924  200001                     	org	2097153
  7925  200001  FF                 	db	255
  7926                           
  7927                           ;Config register IDLOC2 @ 0x200002
  7928                           ;	unspecified, using default values
  7929  200002                     	org	2097154
  7930  200002  FF                 	db	255
  7931                           
  7932                           ;Config register IDLOC3 @ 0x200003
  7933                           ;	unspecified, using default values
  7934  200003                     	org	2097155
  7935  200003  FF                 	db	255
  7936                           
  7937                           ;Config register IDLOC4 @ 0x200004
  7938                           ;	unspecified, using default values
  7939  200004                     	org	2097156
  7940  200004  FF                 	db	255
  7941                           
  7942                           ;Config register IDLOC5 @ 0x200005
  7943                           ;	unspecified, using default values
  7944  200005                     	org	2097157
  7945  200005  FF                 	db	255
  7946                           
  7947                           ;Config register IDLOC6 @ 0x200006
  7948                           ;	unspecified, using default values
  7949  200006                     	org	2097158
  7950  200006  FF                 	db	255
  7951                           
  7952                           ;Config register IDLOC7 @ 0x200007
  7953                           ;	unspecified, using default values
  7954  200007                     	org	2097159
  7955  200007  FF                 	db	255
  7956                           
  7957                           	psect	config
  7958                           
  7959                           ; Padding undefined space
  7960  300000                     	org	3145728
  7961  300000  FF                 	db	255
  7962                           
  7963                           ;Config register CONFIG1H @ 0x300001
  7964                           ;	Oscillator Selection bits
  7965                           ;	OSC = XT, XT oscillator
  7966                           ;	Oscillator System Clock Switch Enable bit
  7967                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  7968  300001                     	org	3145729
  7969  300001  21                 	db	33
  7970                           
  7971                           ;Config register CONFIG2L @ 0x300002
  7972                           ;	Power-up Timer Enable bit
  7973                           ;	PWRT = OFF, PWRT disabled
  7974                           ;	Brown-out Reset Enable bit
  7975                           ;	BOR = OFF, Brown-out Reset disabled
  7976                           ;	Brown-out Reset Voltage bits
  7977                           ;	BORV = 20, VBOR set to 2.0V
  7978  300002                     	org	3145730
  7979  300002  0D                 	db	13
  7980                           
  7981                           ;Config register CONFIG2H @ 0x300003
  7982                           ;	Watchdog Timer Enable bit
  7983                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  7984                           ;	Watchdog Timer Postscale Select bits
  7985                           ;	WDTPS = 128, 1:128
  7986  300003                     	org	3145731
  7987  300003  0E                 	db	14
  7988                           
  7989                           ; Padding undefined space
  7990  300004                     	org	3145732
  7991  300004  FF                 	db	255
  7992                           
  7993                           ;Config register CONFIG3H @ 0x300005
  7994                           ;	CCP2 Mux bit
  7995                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  7996  300005                     	org	3145733
  7997  300005  00                 	db	0
  7998                           
  7999                           ;Config register CONFIG4L @ 0x300006
  8000                           ;	Stack Full/Underflow Reset Enable bit
  8001                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  8002                           ;	Low Voltage ICSP Enable bit
  8003                           ;	LVP = OFF, Low Voltage ICSP disabled
  8004                           ;	Background Debugger Enable bit
  8005                           ;	DEBUG = 0x1, unprogrammed default
  8006  300006                     	org	3145734
  8007  300006  80                 	db	128
  8008                           
  8009                           ; Padding undefined space
  8010  300007                     	org	3145735
  8011  300007  FF                 	db	255
  8012                           
  8013                           ;Config register CONFIG5L @ 0x300008
  8014                           ;	Code Protection bit
  8015                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  8016                           ;	Code Protection bit
  8017                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  8018                           ;	Code Protection bit
  8019                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  8020                           ;	Code Protection bit
  8021                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  8022  300008                     	org	3145736
  8023  300008  0F                 	db	15
  8024                           
  8025                           ;Config register CONFIG5H @ 0x300009
  8026                           ;	Boot Block Code Protection bit
  8027                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  8028                           ;	Data EEPROM Code Protection bit
  8029                           ;	CPD = OFF, Data EEPROM not code protected
  8030  300009                     	org	3145737
  8031  300009  C0                 	db	192
  8032                           
  8033                           ;Config register CONFIG6L @ 0x30000A
  8034                           ;	Write Protection bit
  8035                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  8036                           ;	Write Protection bit
  8037                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  8038                           ;	Write Protection bit
  8039                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  8040                           ;	Write Protection bit
  8041                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  8042  30000A                     	org	3145738
  8043  30000A  0F                 	db	15
  8044                           
  8045                           ;Config register CONFIG6H @ 0x30000B
  8046                           ;	Configuration Register Write Protection bit
  8047                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  8048                           ;	Boot Block Write Protection bit
  8049                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  8050                           ;	Data EEPROM Write Protection bit
  8051                           ;	WRTD = OFF, Data EEPROM not write protected
  8052  30000B                     	org	3145739
  8053  30000B  E0                 	db	224
  8054                           
  8055                           ;Config register CONFIG7L @ 0x30000C
  8056                           ;	Table Read Protection bit
  8057                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  8058                           ;	Table Read Protection bit
  8059                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  8060                           ;	Table Read Protection bit
  8061                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  8062                           ;	Table Read Protection bit
  8063                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  8064  30000C                     	org	3145740
  8065  30000C  0F                 	db	15
  8066                           
  8067                           ;Config register CONFIG7H @ 0x30000D
  8068                           ;	Boot Block Table Read Protection bit
  8069                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  8070  30000D                     	org	3145741
  8071  30000D  40                 	db	64
  8072                           tosu	equ	0xFFF
  8073                           tosh	equ	0xFFE
  8074                           tosl	equ	0xFFD
  8075                           stkptr	equ	0xFFC
  8076                           pclatu	equ	0xFFB
  8077                           pclath	equ	0xFFA
  8078                           pcl	equ	0xFF9
  8079                           tblptru	equ	0xFF8
  8080                           tblptrh	equ	0xFF7
  8081                           tblptrl	equ	0xFF6
  8082                           tablat	equ	0xFF5
  8083                           prodh	equ	0xFF4
  8084                           prodl	equ	0xFF3
  8085                           indf0	equ	0xFEF
  8086                           postinc0	equ	0xFEE
  8087                           postdec0	equ	0xFED
  8088                           preinc0	equ	0xFEC
  8089                           plusw0	equ	0xFEB
  8090                           fsr0h	equ	0xFEA
  8091                           fsr0l	equ	0xFE9
  8092                           wreg	equ	0xFE8
  8093                           indf1	equ	0xFE7
  8094                           postinc1	equ	0xFE6
  8095                           postdec1	equ	0xFE5
  8096                           preinc1	equ	0xFE4
  8097                           plusw1	equ	0xFE3
  8098                           fsr1h	equ	0xFE2
  8099                           fsr1l	equ	0xFE1
  8100                           bsr	equ	0xFE0
  8101                           indf2	equ	0xFDF
  8102                           postinc2	equ	0xFDE
  8103                           postdec2	equ	0xFDD
  8104                           preinc2	equ	0xFDC
  8105                           plusw2	equ	0xFDB
  8106                           fsr2h	equ	0xFDA
  8107                           fsr2l	equ	0xFD9
  8108                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    14
    Data        302
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     68     109
    BANK0           128     12     128
    BANK1           256      3     212
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 52
		 -> errString_Command(BANK0[23]), errString_Fatal(BANK1[38]), errString_PointZ(BANK1[52]), errString_Bound(BANK0[32]), 
		 -> errString_Point(BANK1[40]), errString_Reset(BANK1[39]), errString_ZEND(BANK1[40]), errString_Feed(BANK0[29]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 


Critical Paths under _main in COMRAM

    _main->_executeData
    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_enableMotor
    _resetPosition->_setDecay
    _resetPosition->_setDirection
    _resetPosition->_setStep
    _touchTherm->_setDirection
    _touchObject->_setDirection
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _moveToPoint->_setDirection
    _liftArm->_setDirection

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _main->_executeData
    _executeData->_rotateObj

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   16988
                                             10 BANK0      2     2      0
                                              0 BANK1      3     3      0
                           _clearTM0
                        _enableMotor
                        _executeData
                         _fatalError
                     _getNewSequence
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                   _resetNewSequence
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    1604
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0    2807
                                             21 COMRAM     3     3      0
                        _enableMotor
                          _resetStep
                           _setDecay
                       _setDirection
                            _setStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _setStep                                              4     3      1     487
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _setDecay                                             4     3      1     394
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _enableMotor                                          4     3      1     664
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _resetNewSequence                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0    9829
                                             66 COMRAM     2     2      0
                                              7 BANK0      3     3      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0    1058
                          _resetStep
                         _resetTherm
                        _returnTherm
                       _setDirection
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0    1058
                          _resetStep
                         _resetTouch
                        _returnTouch
                       _setDirection
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            7     7      0    3129
                                              0 BANK0      7     7      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         12     4      8    3242
                                             21 COMRAM    12     4      8
                          _resetStep
                       _setDirection
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0    1058
                          _resetStep
                       _setDirection
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _setDirection                                         4     3      1    1024
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0     552
                                             10 COMRAM     7     7      0
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _enableMotor
   _executeData
     _getData
     _liftArm
       _resetStep
       _setDirection
       _stepMade
     _moveToPoint
       _resetStep
       _setDirection
       _stepCounter
       _stepMade
     _pickObject
     _releaseObj
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _touchObject
       _resetStep
       _resetTouch
       _returnTouch
       _setDirection
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTherm
       _returnTherm
       _setDirection
       _startADC
       _stepMade
       _stopADC
   _fatalError
   _getNewSequence
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetNewSequence
   _resetPosition
     _enableMotor
     _resetStep
     _setDecay
     _setDirection
     _setStep
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      3      D4       7       82.8%
BITBANK0            80      0       0       4        0.0%
BANK0               80      C      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     44      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C1      15        0.0%
DATA                 0      0     1C1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Thu Jan 28 11:24:49 2021

                                        ___fldiv@aexp 0038  
                                        ___fldiv@bexp 0037  
                               __end_of_interruptInit 22AC  
                                        ___fldiv@sign 0030  
                                                  l74 22CE  
                                                  l83 1CFA  
                                                  l68 2376  
                                                  l92 20A4  
                                                 l101 2118  
                                                 l110 2030  
                                                 l200 1F38  
                                                 l120 0FBA  
                                                 l121 0FEA  
                                                 l210 1E88  
                                                 l131 103E  
                                                 l115 0F86  
                                                 l124 0FEE  
                                                 l116 109A  
                                                 l300 1306  
                                                 l141 1298  
                                                 l213 243C  
                                                 l125 101E  
                                                 l117 0FB6  
                                                 l150 11E4  
                                                 l302 140A  
                                                 l311 2288  
                                                 l135 10B0  
                                                 l152 121A  
                                                 l216 2434  
                                                 l312 229E  
                                                 l313 22A8  
                                                 l156 123A  
                                                 l172 1C22  
                                                 l164 1B82  
                                                 l149 1280  
                                                 l173 1C26  
                                                 l325 0CC6  
                                                 l341 2326  
                                                 l350 23DE  
                                                 l190 1F0E  
                                                 l182 1AB0  
                                                 l511 2404  
                                                 l344 233A  
                                                 l192 1ED2  
                                                 l168 1BA2  
                                                 l520 2414  
                                                 l193 1F20  
                                                 l186 1B30  
                                                 l178 1A90  
                                                 l514 240C  
                                                 l338 234C  
                                                 l347 23B6  
                                                 l187 1B34  
                                                 l523 23C0  
                                                 l196 1EF2  
                                                 l380 2424  
                                                 l508 1924  
                                                 l517 241C  
                                                 l374 22F4  
                                                 l383 23AA  
                                                 l392 23CA  
                                                 l528 217A  
                                                 l552 1570  
                                                 l377 242C  
                                                 l386 239E  
                                                 l555 2368  
                                                 l563 21EE  
                                                 l299 1304  
                                                 l389 23D4  
                                                 l549 14FA  
                                                 l558 235A  
                                                 l494 2312  
                                                 l567 2220  
                                                 l867 1808  
                                                 _isr 0008  
                                         _touchObject 1B38  
                                                 prod 000FF3  
                                                 wreg 000FE8  
                                        ___fltol@exp1 0042  
                                         main@errCode 01D1  
                                                l1152 0A3C  
                                                l1232 0DD6  
                                                l1225 0D2A  
                                                l1154 0854  
                                                l1163 08AA  
                                                l1228 0EBC  
                                                l1165 093A  
                                                l1157 080E  
                                                l1166 0922  
                                                l1239 0E42  
                                                l4011 0A54  
                                                l4021 0AFC  
                                                l4013 0A8E  
                                                l4005 23BC  
                                                l4101 12C0  
                                                l3311 20D2  
                                                l4031 0B90  
                                                l4023 0B10  
                                                l4015 0A9E  
                                                l4007 0A44  
                                                l4111 130A  
                                                l4103 12C4  
                                                l3305 20AE  
                                                l3321 232C  
                                                l4033 0B94  
                                                l4025 0B4A  
                                                l4017 0AB2  
                                                l4041 0BEE  
                                                l4009 0A50  
                                                l4121 1354  
                                                l4113 1324  
                                                l4105 12C6  
                                                l3307 20B2  
                                                l3315 20E2  
                                                l3323 2330  
                                                l3331 23B0  
                                                l3411 077C  
                                                l3403 0752  
                                                l4051 0C90  
                                                l4043 0C04  
                                                l4035 0B9C  
                                                l4027 0B5A  
                                                l4019 0AEC  
                                                l4131 13B8  
                                                l4123 135A  
                                                l4115 1330  
                                                l4107 12E0  
                                                l3309 20C2  
                                                l3325 2334  
                                                l3421 07D0  
                                                l3413 0798  
                                                l3405 0768  
                                                l3501 173C  
                                                l3333 242A  
                                                l3341 2398  
                                                l4061 0CBA  
                                                l4053 0CA2  
                                                l4045 0C08  
                                                l4029 0B6E  
                                                l4141 13D2  
                                                l4133 13BA  
                                                l4125 1360  
                                                l4117 1342  
                                                l4109 12FE  
                                                l3431 083E  
                                                l3423 07E6  
                                                l3415 07A8  
                                                l3407 0768  
                                                l3503 174C  
                                                l3335 23A4  
                                                l3343 23C6  
                                                l4055 0CAA  
                                                l4047 0C0C  
                                                l4063 0CC2  
                                                l4039 0BA8  
                                                l4071 2402  
                                                l3351 2208  
                                                l4143 13D6  
                                                l4135 13BE  
                                                l4127 1374  
                                                l4119 1352  
                                                l3329 23DA  
                                                l3441 088A  
                                                l3433 0840  
                                                l3425 07FA  
                                                l3417 07B8  
                                                l3361 0648  
                                                l3353 0612  
                                                l3513 177E  
                                                l3505 1750  
                                                l3337 2422  
                                                l4057 0CB2  
                                                l4049 0C10  
                                                l3601 204E  
                                                l4081 2164  
                                                l4073 2120  
                                                l3345 21D8  
                                                l4137 13C6  
                                                l4129 1388  
                                                l4145 13DE  
                                                l3451 08D4  
                                                l3443 0896  
                                                l3435 0850  
                                                l3427 080C  
                                                l3419 07C8  
                                                l3371 068A  
                                                l3363 065C  
                                                l3355 061E  
                                                l3531 17F6  
                                                l3523 17AE  
                                                l3515 178A  
                                                l3507 1762  
                                                l3339 23D0  
                                                l4059 0CB6  
                                                l3603 205E  
                                                l4083 2166  
                                                l3347 21E0  
                                                l4147 13F8  
                                                l4139 13CC  
                                                l4091 129E  
                                                l3461 095C  
                                                l3453 08E6  
                                                l3445 08A8  
                                                l3437 086A  
                                                l3429 081A  
                                                l3381 06C2  
                                                l3373 0692  
                                                l3365 066C  
                                                l3357 0630  
                                                l3525 17BC  
                                                l3517 1794  
                                                l3541 0D3C  
                                                l3701 1B54  
                                                l4085 240A  
                                                l3613 1FC6  
                                                l3349 2202  
                                                l4149 1400  
                                                l4093 12A4  
                                                l3631 10D0  
                                                l3471 09D2  
                                                l3463 096E  
                                                l3455 0918  
                                                l3439 0884  
                                                l3447 08BC  
                                                l3391 0704  
                                                l3383 06D6  
                                                l3375 0698  
                                                l3367 0670  
                                                l3359 0632  
                                                l3527 17D0  
                                                l3551 0D84  
                                                l3543 0D58  
                                                l3535 0CCE  
                                                l3711 1BA4  
                                                l3703 1B5C  
                                                l3607 206E  
                                                l3615 1FCA  
                                                l3623 1FFA  
                                                l4079 2124  
                                                l4095 12A8  
                                                l3641 1122  
                                                l3633 10E8  
                                                l3481 0A2C  
                                                l3473 09F2  
                                                l3465 0998  
                                                l3449 08D0  
                                                l3393 0720  
                                                l3385 06E6  
                                                l3377 06AA  
                                                l3369 0678  
                                                l3529 17E6  
                                                l3561 0E1C  
                                                l3553 0DBC  
                                                l3537 0CE2  
                                                l3721 1BF4  
                                                l3705 1B74  
                                                l3713 1BBE  
                                                l3617 1FDA  
                                                l4097 12AC  
                                                l4089 129E  
                                                l3651 1172  
                                                l3643 112E  
                                                l3483 0A30  
                                                l3475 0A0E  
                                                l3459 0950  
                                                l3467 099C  
                                                l3395 0730  
                                                l3387 06EA  
                                                l3379 06AC  
                                                l3491 16DA  
                                                l3571 0E82  
                                                l3563 0E30  
                                                l3555 0DC0  
                                                l3547 0D6C  
                                                l3539 0CF4  
                                                l3811 1E5C  
                                                l3803 1DD8  
                                                l3723 1BF6  
                                                l3715 1BDA  
                                                l3707 1B76  
                                                l3619 1FEA  
                                                l4099 12B0  
                                                l3661 118A  
                                                l3653 1176  
                                                l3645 1152  
                                                l3637 10F0  
                                                l3629 10B6  
                                                l3477 0A14  
                                                l3469 09BC  
                                                l3397 0738  
                                                l3389 06F2  
                                                l3493 16F4  
                                                l3573 0E96  
                                                l3565 0E56  
                                                l3557 0DCC  
                                                l3549 0D76  
                                                l3813 1E5E  
                                                l3805 1E2A  
                                                l3725 1C04  
                                                l3709 1B86  
                                                l3717 1BEA  
                                                l3741 1A60  
                                                l3733 1A48  
                                                l3581 1C2E  
                                                l3901 1014  
                                                l4381 18DC  
                                                l3821 1816  
                                                l4391 20F8  
                                                l3671 11E8  
                                                l3663 11A2  
                                                l3655 1178  
                                                l3647 1160  
                                                l3639 1114  
                                                l3815 243A  
                                                l3479 0A26  
                                                l3399 073E  
                                                l3575 0EA8  
                                                l3567 0E58  
                                                l3559 0E0E  
                                                l3807 1E34  
                                                l3727 1C08  
                                                l3719 1BF0  
                                                l3751 1A94  
                                                l3743 1A62  
                                                l3735 1A52  
                                                l4383 1CDA  
                                                l3583 1C32  
                                                l3591 1CC4  
                                                l3911 1088  
                                                l3903 1022  
                                                l3831 1884  
                                                l3823 182C  
                                                l3681 126E  
                                                l3673 1212  
                                                l3665 11A6  
                                                l3657 1180  
                                                l3649 116C  
                                                l3817 2432  
                                                l3497 170A  
                                                l3577 0EAA  
                                                l3569 0E5E  
                                                l3809 1E3A  
                                                l3729 1C1A  
                                                l3761 1AFE  
                                                l3753 1AB2  
                                                l3745 1A6A  
                                                l3737 1A54  
                                                l3921 2286  
                                                l4385 2010  
                                                l3585 1C60  
                                                l3913 10A0  
                                                l3905 1044  
                                                l3833 189A  
                                                l3825 1842  
                                                l4377 1462  
                                                l3683 1286  
                                                l3675 121E  
                                                l3667 11B2  
                                                l3659 1184  
                                                l3499 173A  
                                                l3691 1B3A  
                                                l3771 1B28  
                                                l3763 1B02  
                                                l3747 1A82  
                                                l3755 1ACC  
                                                l3739 1A5C  
                                                l3931 22E4  
                                                l3851 22AE  
                                                l3923 229C  
                                                l4387 2084  
                                                l3587 1C94  
                                                l3915 10AC  
                                                l3907 105E  
                                                l3835 18B0  
                                                l3827 1858  
                                                l3819 1812  
                                                l4379 1550  
                                                l3845 2360  
                                                l3781 1EA2  
                                                l3685 1292  
                                                l3677 123E  
                                                l3669 11DC  
                                                l3693 1B44  
                                                l3765 1B04  
                                                l3757 1AE8  
                                                l3749 1A84  
                                                l4389 0BC6  
                                                l3933 22E6  
                                                l3925 22D4  
                                                l3861 22C6  
                                                l3853 22B6  
                                                l3597 203A  
                                                l3909 1074  
                                                l3829 186E  
                                                l3941 2348  
                                                l3791 1ED6  
                                                l3783 1EA6  
                                                l3775 1E8E  
                                                l3687 1296  
                                                l3679 1258  
                                                l3695 1B46  
                                                l3767 1B12  
                                                l3759 1AF8  
                                                l3935 22F0  
                                                l3927 22DC  
                                                l3863 22C8  
                                                l3855 22BA  
                                                l3919 2274  
                                                l3599 203E  
                                                l3871 0F3C  
                                                l3839 18C6  
                                                l3943 2318  
                                                l3951 230E  
                                                l3849 236E  
                                                l3793 1EF4  
                                                l3785 1EAC  
                                                l3777 1E98  
                                                l3697 1B4E  
                                                l3769 1B16  
                                                l3953 241A  
                                                l3961 2352  
                                                l3937 22F2  
                                                l3929 22E2  
                                                l3865 22CA  
                                                l3857 22BE  
                                                l3881 0F52  
                                                l3873 0F40  
                                                l3945 231A  
                                                l3795 1F26  
                                                l3787 1EC4  
                                                l3779 1E9A  
                                                l3699 1B52  
                                                l3867 22CC  
                                                l3859 22C2  
                                                l3891 0F9A  
                                                l3883 0F56  
                                                l3875 0F44  
                                                l3971 1438  
                                                l3939 2340  
                                                l3947 231E  
                                                l3797 1F32  
                                                l3789 1EC6  
                                                l3957 2412  
                                                l3893 0FAC  
                                                l3885 0F5C  
                                                l3877 0F48  
                                                l3869 0EC4  
                                                l3981 149A  
                                                l3973 1442  
                                                l3965 1418  
                                                l3949 22FA  
                                                l3799 1F36  
                                                l3895 0FCE  
                                                l3887 0F74  
                                                l3879 0F4A  
                                                l3991 152E  
                                                l3983 14A2  
                                                l3967 1428  
                                                l3897 0FE0  
                                                l3889 0F7A  
                                                l3985 14F4  
                                                l3969 142E  
                                                l3977 144C  
                                                l3899 1002  
                                                l3987 151C  
                                                l3995 153A  
                                                l3979 1482  
                                                ?_isr 0001  
                                                l3989 1524  
                                                u3000 1B26  
                                                u3001 1B20  
                                                u3010 1EC2  
                                                u3011 1EBC  
                                                u3020 1EF0  
                                                u3100 0FE0  
                                                u2300 2200  
                                                u3021 1EEA  
                                                u3101 0FDA  
                                                u2301 21FA  
                                                u3030 1F0E  
                                                u3110 1000  
                                                u2310 221E  
                                                u3031 1F08  
                                                u3111 0FFA  
                                                u2311 2218  
                                                u3040 1F20  
                                                u2400 07E4  
                                                u2320 062E  
                                                u3120 1014  
                                                u3200 1498  
                                                _LATD 000F8C  
                                                u3041 1F1A  
                                                u2401 07DE  
                                                u2321 0628  
                                                u3121 100E  
                                                u3201 1492  
                                                u2410 080A  
                                                u2330 0646  
                                                u3050 1E86  
                                                u3210 0C02  
                                                u3130 103C  
                                                u2411 0804  
                                                u2331 0640  
                                                u3051 1E80  
                                                u3211 0BFC  
                                                u3131 1036  
                                                u2500 094E  
                                                u2420 083C  
                                                u2340 065A  
                                                u3220 0CA0  
                                                u3140 105E  
                                                u3060 0F72  
                                                u2501 0948  
                                                u2421 0836  
                                                u2341 0654  
                                                u3221 0C9A  
                                                u3141 1058  
                                                u3061 0F6C  
                                                u2510 096C  
                                                u2430 0868  
                                                u2350 06A8  
                                                u3150 1072  
                                                u3070 0F98  
                                                u3230 2178  
                                                u2511 0966  
                                                u2431 0862  
                                                u2351 06A2  
                                                u3151 106C  
                                                u3071 0F92  
                                                u3231 2172  
                                                u2520 09BA  
                                                u2440 0882  
                                                u2360 06C0  
                                                u2600 17D0  
                                                u3160 1086  
                                                u3080 0FAC  
                                                u3240 12DE  
                                                u2521 09B4  
                                                u2441 087C  
                                                u2361 06BA  
                                                u2601 17CA  
                                                u3161 1080  
                                                u3081 0FA6  
                                                u3241 12D8  
                                                u2530 09F0  
                                                u2450 08A6  
                                                u2370 06D4  
                                                u2610 17E4  
                                                u3170 109A  
                                                u3090 0FCC  
                                                u3250 1322  
                                                u2275 20BC  
                                                u2531 09EA  
                                                u2451 08A0  
                                                u2371 06CE  
                                                u2611 17DE  
                                                u3171 1094  
                                                u3091 0FC6  
                                                u3251 131C  
                                                u2276 20BE  
                                                u2540 0A24  
                                                u2460 08CE  
                                                u2380 071E  
                                                u2700 0E94  
                                                u2620 0CE0  
                                                u3180 2284  
                                                u3260 13F6  
                                                u2285 20CC  
                                                u2541 0A1E  
                                                u2461 08C8  
                                                u2381 0718  
                                                u2701 0E8E  
                                                u2621 0CDA  
                                                u3181 227E  
                                                u3261 13F0  
                                                u2286 20CE  
                                                u2470 08E4  
                                                u2390 0766  
                                                u2550 16F2  
                                                u2710 0EA6  
                                                u2630 0CF2  
                                                u3190 229A  
                                                u2295 20DC  
                                                u2471 08DE  
                                                u2391 0760  
                                                u2551 16EC  
                                                u2711 0EA0  
                                                u2631 0CEC  
                                                u3191 2294  
                                                u2296 20DE  
                                                u2800 1112  
                                                u2480 0916  
                                                u2560 172E  
                                                u2640 0D56  
                                                u2801 110C  
                                                u2481 0910  
                                                u2641 0D50  
                                                u2810 1150  
                                                u2490 0934  
                                                u2570 1760  
                                                u2650 0DB6  
                                                u2811 114A  
                                                u2491 092E  
                                                u2571 175A  
                                                u2651 0DB0  
                                                u2820 11A0  
                                                u2580 1778  
                                                u2660 0E08  
                                                u2900 1BA0  
                                                u2821 119A  
                                                u2581 1772  
                                                u2565 1722  
                                                u2661 0E02  
                                                u2901 1B9A  
                                                u2725 2048  
                                                u2830 11DA  
                                                u2590 17A8  
                                                u2670 0E2E  
                                                u2910 1BBE  
                                                u2726 204A  
                                                u2831 11D4  
                                                u2591 17A2  
                                                u2671 0E28  
                                                u2911 1BB8  
                                                u2735 2058  
                                                u2840 1210  
                                                u2680 0E42  
                                                u2920 1BD8  
                                                u2736 205A  
                                                u2841 120A  
                                                u2681 0E3C  
                                                u2921 1BD2  
                                                u2745 2068  
                                                u2850 1238  
                                                u2690 0E54  
                                                u2930 1BEA  
                                                u2746 206A  
                                                u2851 1232  
                                                u2691 0E4E  
                                                u2931 1BE4  
                                                u2755 1FD4  
                                                u2860 1258  
                                                u2780 10CE  
                                                u2940 1C18  
                                                u2756 1FD6  
                                                u2861 1252  
                                                u2781 10C8  
                                                u2941 1C12  
                                                u2765 1FE4  
                                                u2870 126C  
                                                u2790 10E8  
                                                u2950 1A80  
                                                u2766 1FE6  
                                                u2871 1266  
                                                u2791 10E2  
                                                u2951 1A7A  
                                                u2775 1FF4  
                                                u2880 1280  
                                                u2960 1AAE  
                                                u2776 1FF6  
                                                u2881 127A  
                                                u2961 1AA8  
                                                u2890 1B72  
                                                u2970 1ACC  
                                         main@newData 01D2  
                                                u2891 1B6C  
                                                u2971 1AC6  
                                                u2980 1AE6  
                                                u2981 1AE0  
                                                u2990 1AF8  
                                                u2991 1AF2  
                                                i2l71 2444  
                                                i2l65 2384  
                                                _TMR0 000FD6  
                                                _TMR2 000FCC  
                                 __end_ofi2_storeData 16D8  
                                                _main 129E  
                                                _maxX 006B  
                                                _maxY 0069  
                                __end_ofi2_printError 1A46  
                                                fsr2h 000FDA  
                                                indf2 000FDF  
                                                fsr1l 000FE1  
                                                fsr2l 000FD9  
                                                btemp 006E  
                                                prodh 000FF4  
                                                prodl 000FF3  
                                                start 016A  
                                     ___fldiv@new_exp 0031  
                                        ___param_bank 000000  
                                     ??_whatsTM0Limit 0001  
                                               ??_isr 000B  
                                        ?_executeData 0001  
                                     executeData@data 00FC  
                                       ___fltol@sign1 0041  
                                               ?_main 0001  
                                     __end_of___fldiv 0A42  
                                     __end_of___fltol 180E  
                                               i2l353 244C  
                                               i2l356 23E8  
                                               i2l508 1A40  
                                               i2l453 0152  
                                               i2l359 2392  
                                               i2l552 16D2  
                                               i2l395 23FC  
                                               i2l563 223C  
                                               i2l549 165C  
                                               i2l398 23F2  
                                               i2l567 226E  
                                rotateObj@rotSequence 0080  
                                               _SPBRG 000FAF  
                                               _TRISA 000F92  
                                               _TRISB 000F93  
                                               _TRISC 000F94  
                                               _TRISD 000F95  
                                               _TXREG 000FAD  
                                     __end_of_getData 236C  
                                     i2storeData@data 000A  
                                     __end_of_initADC 22F8  
                                        ?_newSequence 0001  
                                     __end_of_liftArm 1F3C  
                                     __end_of_readSeq 2410  
                                        stepMade@temp 0014  
                                     __end_of_setStep 1D00  
                                               tablat 000FF5  
                                      i2uartTx@length 0003  
                                     __end_of_stopADC 2428  
                                               ttemp5 006F  
                                               ttemp6 0072  
                                               ttemp7 0076  
                                               status 000FD8  
                                               wtemp8 006F  
                                    __end_ofi2_uartTx 2272  
                                       ?_increaseStep 0001  
                                     __initialization 1F3C  
                              __size_of_initPinMotors 0026  
                                        __end_of_main 1414  
                            resetPosition@keepMovingX 0016  
                            resetPosition@keepMovingY 0017  
                            resetPosition@keepMovingZ 0018  
                                              ??_main 00FE  
                                       __activetblptr 000002  
                                         i2_storeData 1576  
                                __size_of_enableMotor 0074  
                                         isr@tm0Count 0063  
                                        ?_setThermRel 0001  
                                              _ADRESH 000FC4  
                                              _ADRESL 000FC3  
                                        ?_moveToPoint 0016  
                                              i2l3101 157A  
                                              i2l3103 158A  
                                              i2l2073 23F8  
                                              i2l3121 1656  
                                              i2l3105 1590  
                                              i2l3113 15AE  
                                              i2l2067 244A  
                                              i2l2075 23EE  
                                              i2l3123 167E  
                                              i2l3131 169C  
                                              i2l3107 159A  
                                              i2l3115 15E4  
                                              i2l3211 002E  
                                              i2l2069 23E4  
                                              i2l3125 1686  
                                              i2l3117 15FC  
                                              i2l3109 15A4  
                                              i2l3221 0054  
                                              i2l3213 0030  
                                              i2l3127 1690  
                                              i2l3119 1604  
                                              i2l3231 0090  
                                              i2l3215 0032  
                                              i2l3223 0058  
                                              i2l3241 00C0  
                                              i2l3233 0092  
                                              i2l3225 006C  
                                              i2l3217 004E  
                                              i2l3209 001C  
                                              i2l3251 0114  
                                              i2l3235 00A6  
                                              i2l3227 006E  
                                              i2l3243 00C6  
                                              i2l3219 0050  
                                              i2l1821 237C  
                                              i2l3253 012E  
                                              i2l3245 00DA  
                                              i2l3237 00B8  
                                              i2l3229 0072  
                                              i2l3247 00E2  
                                              i2l3255 0132  
                                              i2l3239 00BC  
                                              i2l1825 2442  
                                              i2l2561 2250  
                                              i2l3257 0146  
                                              i2l3249 0108  
                                              i2l3099 238A  
                                              i2l2563 2256  
                                              i2l3259 014C  
                                              i2l2557 2226  
                                              i2l2559 222E  
                                              i2l2841 1974  
                                              i2l2833 192E  
                                              i2l2843 198A  
                                              i2l2835 1932  
                                              i2l2845 19A0  
                                              i2l2837 1948  
                                              i2l2853 19E2  
                                              i2l2847 19B6  
                                              i2l2839 195E  
                                              i2l2849 19CC  
                                              i2l4393 15C4  
                                              i2l4395 16B2  
                                              i2l4397 19F8  
                                              _RCREG1 000FAE  
                                        ?_setTouchRel 0001  
                                       setDecay@decay 0015  
                                    __end_of___xxtofl 0EC2  
                                       setDecay@motor 0012  
                                    __end_of_clearTM0 237A  
                                    _errString_PointZ 0100  
                                      ??_increaseStep 0001  
                                           ??___fldiv 0028  
                                           ??___fltol 003D  
                                    __end_of_tim0Init 2350  
                                    __end_of_tim2Init 232A  
                                              clear_0 1FA2  
                                              clear_1 1FAE  
                                           ??_getData 0014  
                                              _uartTx 21D6  
                                    __end_of_setDecay 2036  
                                           ??_initADC 0012  
                                           ??_liftArm 0016  
                                           ??_readSeq 0012  
                                        __pdataCOMRAM 0069  
                               __end_of_resetPosition 10B4  
                                        __mediumconst 0000  
                                           ??_setStep 0013  
                                              tblptrh 000FF7  
                                              tblptrl 000FF6  
                                              tblptru 000FF8  
                                        ?_returnTherm 0012  
                                    __end_of_startADC 2430  
                                    __end_of_stepMade 233E  
                                       _initPinMotors 22AC  
                                        ?_returnTouch 0012  
                                           ??_stopADC 0012  
                               __size_ofi2_printError 011C  
                                    __end_of_writeTM0 2388  
                           __size_of_resetNewSequence 000A  
                                        ___xxtofl@arg 001C  
                                        ___xxtofl@exp 001B  
                                        ___xxtofl@val 0012  
                                          __accesstop 0080  
                             __end_of__initialization 1FB4  
                                        _dataSequence 00D8  
                                       ___rparam_used 000001  
                                          ___fltol@f1 0039  
                                        ?_stepCounter 0012  
                                         i2uartTx@ptr 0001  
                                      __pcstackCOMRAM 0001  
                                        __newSequence 005F  
                                        __pidataBANK0 217E  
                                        __pidataBANK1 1D00  
                                     isr@single_cycle 0051  
                                __size_of_executeData 0288  
                                       ?_setDirection 0012  
                                        i2_printError 192A  
                                        ?_touchObject 0001  
                                      _errString_ZEND 015C  
                                      _errString_Feed 00A4  
                                      ?_initPinMotors 0001  
                                           ?i2_uartTx 0001  
                                          __pbssBANK0 00D8  
                                __size_of_newSequence 0008  
                                          _feeder1Pos 060D  
                                          _feeder2Pos 060B  
                                          _feeder3Pos 0609  
                             __size_of_getNewSequence 000E  
                                          _fatalError 2418  
                                  __size_of_reduceSeq 0008  
                                  __size_of_retPeriod 000E  
                                      _touch_pressure 0607  
                                  __size_of_shiftData 0060  
                                  __size_of_resetStep 000A  
                                             _ADC_res 0053  
                                             ?_uartTx 0012  
                                      ??_setDirection 0013  
                                           ?___xxtofl 0012  
                                __end_of_increaseStep 2450  
                                           ?_clearTM0 0001  
                                          ??i2_uartTx 0004  
                                  __size_of_rotateObj 00BA  
                                   _errString_Command 00C1  
                                  __size_of_usartInit 001E  
                              __size_of_interruptInit 003A  
                                __size_of_setThermRel 000A  
                                  __size_of_storeData 0162  
                                           ?_tim0Init 0001  
                                           ?_tim2Init 0012  
                                __size_of_moveToPoint 01EA  
                                storeData@receivedMex 0045  
                                     _newSequenceData 00EC  
                                           ?_setDecay 0012  
                                __size_of_setTouchRel 000A  
                                         setStep@step 0015  
                                             __Hparam 0000  
                                             __Lparam 0000  
                              __end_of_touch_pressure 0609  
                                             ___fldiv 0610  
                                           ?_startADC 0001  
                                           ?_stepMade 0012  
                                             ___fltol 16D8  
                                        __psmallconst 0600  
                                             __pcinit 1F3C  
                               __end_of_whatsTM0Limit 2448  
                                             _getData 235E  
                                             __ramtop 0600  
                                           ?_writeTM0 0001  
                                          _pickObject 2438  
                                             __ptext0 129E  
                                             __ptext1 22F8  
                                             __ptext2 2316  
                                             __ptext3 233E  
                                             __ptext4 1414  
                                             __ptext5 180E  
                                             __ptext6 21D6  
                                             __ptext7 211E  
                                             __ptext8 0EC2  
                                             __ptext9 1C2A  
                                     __size_of_uartTx 004E  
                                           _T0CONbits 000FD5  
                                             _initADC 22D2  
                                     ??_initPinMotors 0012  
                                             _liftArm 1E8C  
                                           _T2CONbits 000FCA  
                                             _readSeq 2408  
                                        __size_of_isr 0162  
                                          ??___xxtofl 0016  
                                        ?i2_storeData 0001  
                                          ??_clearTM0 0012  
                                             _setStep 1C2A  
                                             _pwmStep 0067  
                                             _stopADC 2420  
                                   __end_of_reduceSeq 2408  
                                   __end_of_retPeriod 2396  
                                          _releaseObj 2430  
                                __size_of_returnTherm 000C  
                                end_of_initialization 1FB4  
                                __size_of_returnTouch 000C  
                                    _resetNewSequence 23BA  
                                    rotateObj@totStep 00F8  
                                   __end_of_shiftData 217E  
                                             isr@temp 0011  
                                   __end_of_resetStep 23E2  
                                          ??_tim0Init 0012  
                                       __Lmediumconst 0000  
                                          ??_tim2Init 0014  
                                    storeData@command 005D  
                                    storeData@counter 005E  
                                          ??_setDecay 0013  
                                    enableMotor@motor 0012  
                                          _resetTherm 23C4  
                                          _resetTouch 23CE  
                                             uartTx@i 0015  
                                         ?_fatalError 0001  
                                           _RCSTAbits 000FAB  
                                             postdec1 000FE5  
                                   __end_of_rotateObj 1E8C  
                                             postinc0 000FEE  
                                             postinc1 000FE6  
                                             postinc2 000FDE  
                                          ??_startADC 0012  
                                          ??_stepMade 0014  
                                __size_of_stepCounter 000C  
                                       _interruptInit 2272  
                                   __end_of_usartInit 2316  
                                   __end_of_storeData 1576  
                          __end_ofrotateObj@stepAngle 0605  
                                          ??_writeTM0 0001  
                                           _PORTDbits 000F83  
                                          _printError 180E  
                                           _PORTEbits 000F84  
                                       ??_enableMotor 0013  
                                 i2printError@errCode 0007  
                                          _toggleStep 23E2  
                                       ___xxtofl@sign 001A  
                                           _TRISCbits 000F94  
                                           _TRISDbits 000F95  
                                           _TRISEbits 000F96  
                                         ___fldiv@grs 0033  
                                         ___fldiv@rem 002C  
                                __size_of_touchObject 00F2  
                                          _stepToggle 0066  
                                          _touchTherm 1A46  
                                __end_of_setDirection 211E  
                                           _TXSTAbits 000FAC  
                                      _getNewSequence 2350  
                                      ?_interruptInit 0001  
                                       __pidataCOMRAM 2450  
                               __size_of_increaseStep 0008  
                                         ?_pickObject 0001  
                                         __fatalError 0060  
                                      __end_of_uartTx 2224  
                                       moveToPoint@x1 0016  
                                       moveToPoint@x2 001A  
                                       moveToPoint@y1 0018  
                                       moveToPoint@y2 001C  
                                 start_initialization 1F3C  
                                           i2uartTx@i 0004  
                                         __end_of_isr 016A  
                                 __size_of_fatalError 0008  
                                 __end_of_enableMotor 20AA  
                                         ?_releaseObj 0001  
                                   __size_ofi2_uartTx 004E  
                              __end_of_getNewSequence 235E  
                                     _errString_Fatal 01AB  
                                     _errString_Bound 0084  
                                         ?_resetTherm 0001  
                                     _errString_Reset 0184  
                                         ?_resetTouch 0001  
                                     _errString_Point 0134  
                                        _increaseStep 2448  
                              __size_of_resetPosition 01F2  
                                       ??_executeData 0043  
                                         __pdataBANK0 0080  
                                         __pdataBANK1 0100  
                                         _dataCounter 0061  
                                            ??_uartTx 0015  
                              moveToPoint@keepMovingX 0020  
                              moveToPoint@keepMovingY 0021  
                                         ?_printError 0001  
                                           ___fldiv@a 0024  
                                           ___fldiv@b 0020  
                                      _therm_pressure 0605  
                                         ?_toggleStep 0001  
                                         __pbssCOMRAM 0045  
                                       __pcstackBANK0 00F4  
                                       __pcstackBANK1 01D1  
                                       ??_newSequence 0012  
                                   __size_of___xxtofl 01F8  
                                __size_ofi2_storeData 0162  
                                   __size_of_clearTM0 000E  
                                     ?_getNewSequence 0012  
                                         ?_touchTherm 0001  
                                 __size_of_pickObject 0008  
                                  executeData@errCode 00FB  
                                   __size_of_tim0Init 0012  
                                   __size_of_tim2Init 0014  
                                     ??_interruptInit 0012  
                                   __size_of_setDecay 0074  
                                           __pintcode 0008  
                                            ?___fldiv 0020  
                                            ?___fltol 0039  
                            __end_of_resetNewSequence 23C4  
                                 __size_of_releaseObj 0008  
                                       storeData@data 001B  
                                            ?_getData 0012  
                                   __size_of_startADC 0008  
                                   __size_of_stepMade 0014  
                              __end_of_therm_pressure 0607  
                                            ?_initADC 0001  
                                         __smallconst 0600  
                                            ?_liftArm 0001  
                                         _enableMotor 2036  
                                            ?_readSeq 0001  
                                   __size_of_writeTM0 000E  
                                 __end_of_executeData 0CCA  
                                          shiftData@i 0014  
                                            ?_setStep 0012  
                                 __size_of_resetTherm 000A  
                                           _newFeeder 0057  
                                       _resetPosition 0EC2  
                                 __size_of_resetTouch 000A  
                                       ??_setThermRel 0001  
                                            ?_stopADC 0001  
                               __size_of_setDirection 0074  
                                       ??_moveToPoint 001E  
                                       ??_setTouchRel 0001  
                                 __end_of_newSequence 2418  
                                           _reduceSeq 2400  
                                            _LATAbits 000F89  
                                            _LATBbits 000F8A  
                                           _retPeriod 2388  
                                            _LATCbits 000F8B  
                                            _LATDbits 000F8C  
                                 __size_of_printError 011C  
                                            _IPR1bits 000F9F  
                                            _PIE1bits 000F9D  
                                           _shiftData 211E  
                                            i2u220_40 008E  
                                            i2u220_41 0088  
                                            i2u213_40 15FA  
                                            i2u221_40 00A4  
                                            i2u213_41 15F4  
                                            i2u221_41 009E  
                                            i2u222_40 00B6  
                                            i2u222_41 00B0  
                                            i2u223_40 00D8  
                                            i2u223_41 00D2  
                                            i2u160_40 226C  
                                            i2u224_40 0106  
                                            i2u160_41 2266  
                                            i2u224_41 0100  
                                            i2u225_40 012C  
                                            i2u217_40 002C  
                                            i2u225_41 0126  
                                            i2u217_41 0026  
                                            i2u226_40 0144  
                                            i2u218_40 004C  
                                            i2u226_41 013E  
                                            i2u218_41 0046  
                                            i2u219_40 006A  
                                            i2u219_41 0064  
                                           _resetStep 23D8  
                                            i2u159_40 224E  
                                            i2u159_41 2248  
                                            _PIR1bits 000F9E  
                                 __size_of_toggleStep 000A  
                                        ??_fatalError 0012  
                                           _posVector 004E  
                                            _RCONbits 000FD0  
                                           _therm_rel 0064  
                                           _pwmPeriod 0055  
                                   setDirection@motor 0012  
                                           _rotateObj 1DD2  
                                          _ADCON0bits 000FC2  
                                          _ADCON1bits 000FC1  
                                 __size_of_touchTherm 00F2  
                                        _setDirection 20AA  
                                           _usartInit 22F8  
                                           _touch_rel 0065  
                                  __end_of_feeder1Pos 060F  
                                  __end_of_feeder2Pos 060D  
                                  __end_of_feeder3Pos 060B  
                                           _storeData 1414  
                                      ?_resetPosition 0001  
                               __end_of_initPinMotors 22D2  
                                       ??_returnTherm 0014  
                                       ??_returnTouch 0014  
                                            i2_uartTx 2224  
                                           copy_data0 1F50  
                                           copy_data1 1F70  
                                           copy_data2 1F90  
                                  __end_of_fatalError 2420  
                                  rotateObj@stepAngle 0601  
                                          ?_reduceSeq 0001  
                                          ?_retPeriod 0001  
                                        setStep@motor 0012  
                                          rotateObj@i 00FA  
                              __size_of_whatsTM0Limit 0008  
                                 __end_of_setThermRel 2400  
                                 __end_of_moveToPoint 129E  
                                   printError@errCode 0018  
                                          ?_shiftData 0001  
                                       ??_stepCounter 0014  
                                            __Hrparam 0000  
                                          ?_resetStep 0001  
                                 __end_of_setTouchRel 23F6  
                                            __Lrparam 0000  
                                    __size_of___fldiv 0432  
                                    __size_of___fltol 0136  
                                         _executeData 0A42  
                                        ??_pickObject 0012  
                                          ?_rotateObj 0001  
                                       ?i2_printError 0001  
                                    __size_of_getData 000E  
                                       ??_touchObject 0016  
                                          ?_usartInit 0001  
                                    __size_of_initADC 0026  
                                            ___xxtofl 0CCA  
                                    __size_of_liftArm 00B0  
                                          ?_storeData 0001  
                                            _clearTM0 236C  
                                    __size_of_readSeq 0008  
                                  storeData@mexLength 006D  
                                            _tm0Error 005B  
                                            _tm0Limit 0068  
                                    __size_of_setStep 00D6  
                                         _newSequence 2410  
                                            __ptext10 1FC2  
                                            __ptext11 2036  
                                            __ptext20 2418  
                                            __ptext12 23BA  
                                            __ptext21 0A42  
                                            __ptext13 2400  
                                            __ptext30 1DD2  
                                            __ptext22 1A46  
                                            __ptext14 2408  
                                            __ptext31 0CCA  
                                            __ptext23 2396  
                                            __ptext15 2410  
                                            __ptext40 20AA  
                                            __ptext32 16D8  
                                            __ptext24 23C4  
                                            __ptext16 2272  
                                            __ptext41 23D8  
                                            __ptext33 0610  
                                            __ptext25 1B38  
                                            __ptext17 22AC  
                                            __ptext50 23E2  
                                            __ptext42 235E  
                                            __ptext34 2430  
                                            __ptext26 2420  
                                            __ptext18 22D2  
                                            __ptext51 23EC  
                                            __ptext43 236C  
                                            __ptext35 2438  
                                            __ptext27 2428  
                                            __ptext19 2350  
                                            __ptext52 23F6  
                                            __ptext36 10B4  
                                            __ptext28 23A2  
                                            __ptext53 2388  
                                            __ptext45 1576  
                                            __ptext37 23AE  
                                            __ptext29 23CE  
                                            __ptext54 2448  
                                            __ptext46 192A  
                                            __ptext38 1E8C  
                                            __ptext47 2224  
                                            __ptext39 232A  
                                            __ptext48 237A  
                                            __ptext49 2440  
                                        ??_releaseObj 0012  
                                    __size_of_stopADC 0008  
                                 __end_of_returnTherm 23A2  
                                 __end_of_returnTouch 23AE  
                                            _tim0Init 233E  
                                            _tim2Init 2316  
                                       __size_of_main 0176  
                                            _setDecay 1FC2  
                                  __end_of_pickObject 2440  
                                        ??_resetTherm 0012  
                                        ??_resetTouch 0012  
                                           uartTx@ptr 0012  
                                            _rotAngle 0059  
                                     isr@completeStep 0062  
                                            int$flags 006E  
                                            _startADC 2428  
                                            _stepMade 232A  
                                 __end_of_stepCounter 23BA  
                                   rotateObj@rotAngle 00F7  
                                      ??i2_printError 0005  
                                  __end_of_releaseObj 2438  
                                            _writeTM0 237A  
                                        ??_printError 0016  
                                       _whatsTM0Limit 2440  
                                     ??_resetPosition 0016  
                                  tim2Init@_pwmPeriod 0012  
                                          _INTCONbits 000FF2  
                                        ??_toggleStep 0001  
                                    ??_getNewSequence 0014  
                                  __end_of_resetTherm 23CE  
                                  __end_of_resetTouch 23D8  
                                         _setThermRel 23F6  
                                        uartTx@length 0014  
                                         _moveToPoint 10B4  
                                 __end_of_touchObject 1C2A  
                                            intlevel2 2456  
                                   enableMotor@enable 0015  
                                        ??_touchTherm 0016  
                                         _setTouchRel 23EC  
                                         ??_reduceSeq 0012  
                                         ??_retPeriod 0003  
                                          _RCSTA1bits 000FAB  
                                  __end_of_printError 192A  
                               setDirection@direction 0015  
                                         ??_shiftData 0012  
                                         ??_resetStep 0012  
                                  __end_of_toggleStep 23EC  
                                   ?_resetNewSequence 0001  
                                      ?_whatsTM0Limit 0001  
                                         ??_rotateObj 00F4  
                                  ??_resetNewSequence 0012  
                                  __end_of_touchTherm 1B38  
                                        ?_enableMotor 0012  
                                         ??_usartInit 0012  
                                       ??i2_storeData 0008  
                                         ??_storeData 0019  
                                         _returnTherm 2396  
                                         _returnTouch 23A2  
                                         _stepCounter 23AE  
