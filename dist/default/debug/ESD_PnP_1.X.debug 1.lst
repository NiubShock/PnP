

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Mon Feb 01 12:38:27 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    74                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    75                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    76                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    77                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    78  0000                     
    79                           ; Version 2.20
    80                           ; Generated 12/02/2020 GMT
    81                           ; 
    82                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC18F452 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     
   114                           	psect	idataCOMRAM
   115  002520                     __pidataCOMRAM:
   116                           	callstack 0
   117                           
   118                           ;initializer for _maxY
   119  002520  03E8               	dw	1000
   120                           
   121                           ;initializer for _maxX
   122  002522  03E8               	dw	1000
   123                           
   124                           ;initializer for storeData@mexLength
   125  002524  05                 	db	5
   126                           
   127                           	psect	idataBANK0
   128  00224C                     __pidataBANK0:
   129                           	callstack 0
   130                           
   131                           ;initializer for rotateObj@rotSequence
   132  00224C  09                 	db	9
   133  00224D  03                 	db	3
   134  00224E  06                 	db	6
   135  00224F  0C                 	db	12
   136                           
   137                           ;initializer for _errString_Bound
   138  002250  45                 	db	69
   139  002251  72                 	db	114
   140  002252  72                 	db	114
   141  002253  6F                 	db	111
   142  002254  72                 	db	114
   143  002255  2C                 	db	44
   144  002256  20                 	db	32
   145  002257  70                 	db	112
   146  002258  6F                 	db	111
   147  002259  69                 	db	105
   148  00225A  6E                 	db	110
   149  00225B  74                 	db	116
   150  00225C  20                 	db	32
   151  00225D  6F                 	db	111
   152  00225E  75                 	db	117
   153  00225F  74                 	db	116
   154  002260  73                 	db	115
   155  002261  69                 	db	105
   156  002262  64                 	db	100
   157  002263  65                 	db	101
   158  002264  20                 	db	32
   159  002265  62                 	db	98
   160  002266  6F                 	db	111
   161  002267  75                 	db	117
   162  002268  6E                 	db	110
   163  002269  64                 	db	100
   164  00226A  61                 	db	97
   165  00226B  72                 	db	114
   166  00226C  69                 	db	105
   167  00226D  65                 	db	101
   168  00226E  73                 	db	115
   169  00226F  00                 	db	0
   170                           
   171                           ;initializer for _errString_Feed
   172  002270  45                 	db	69
   173  002271  72                 	db	114
   174  002272  72                 	db	114
   175  002273  6F                 	db	111
   176  002274  72                 	db	114
   177  002275  2C                 	db	44
   178  002276  20                 	db	32
   179  002277  66                 	db	102
   180  002278  65                 	db	101
   181  002279  65                 	db	101
   182  00227A  64                 	db	100
   183  00227B  20                 	db	32
   184  00227C  6C                 	db	108
   185  00227D  69                 	db	105
   186  00227E  6E                 	db	110
   187  00227F  65                 	db	101
   188  002280  20                 	db	32
   189  002281  6E                 	db	110
   190  002282  6F                 	db	111
   191  002283  74                 	db	116
   192  002284  20                 	db	32
   193  002285  64                 	db	100
   194  002286  65                 	db	101
   195  002287  66                 	db	102
   196  002288  69                 	db	105
   197  002289  6E                 	db	110
   198  00228A  65                 	db	101
   199  00228B  64                 	db	100
   200  00228C  00                 	db	0
   201                           
   202                           ;initializer for _errString_Command
   203  00228D  43                 	db	67
   204  00228E  6F                 	db	111
   205  00228F  6D                 	db	109
   206  002290  6D                 	db	109
   207  002291  61                 	db	97
   208  002292  6E                 	db	110
   209  002293  64                 	db	100
   210  002294  20                 	db	32
   211  002295  6E                 	db	110
   212  002296  6F                 	db	111
   213  002297  74                 	db	116
   214  002298  20                 	db	32
   215  002299  72                 	db	114
   216  00229A  65                 	db	101
   217  00229B  63                 	db	99
   218  00229C  6F                 	db	111
   219  00229D  67                 	db	103
   220  00229E  6E                 	db	110
   221  00229F  69                 	db	105
   222  0022A0  7A                 	db	122
   223  0022A1  65                 	db	101
   224  0022A2  64                 	db	100
   225  0022A3  00                 	db	0
   226                           
   227                           	psect	idataBANK1
   228  001DD2                     __pidataBANK1:
   229                           	callstack 0
   230                           
   231                           ;initializer for _errString_PointZ
   232  001DD2  45                 	db	69
   233  001DD3  72                 	db	114
   234  001DD4  72                 	db	114
   235  001DD5  6F                 	db	111
   236  001DD6  72                 	db	114
   237  001DD7  2C                 	db	44
   238  001DD8  20                 	db	32
   239  001DD9  74                 	db	116
   240  001DDA  69                 	db	105
   241  001DDB  6D                 	db	109
   242  001DDC  65                 	db	101
   243  001DDD  20                 	db	32
   244  001DDE  65                 	db	101
   245  001DDF  78                 	db	120
   246  001DE0  63                 	db	99
   247  001DE1  65                 	db	101
   248  001DE2  65                 	db	101
   249  001DE3  64                 	db	100
   250  001DE4  65                 	db	101
   251  001DE5  64                 	db	100
   252  001DE6  20                 	db	32
   253  001DE7  74                 	db	116
   254  001DE8  6F                 	db	111
   255  001DE9  20                 	db	32
   256  001DEA  72                 	db	114
   257  001DEB  65                 	db	101
   258  001DEC  61                 	db	97
   259  001DED  63                 	db	99
   260  001DEE  68                 	db	104
   261  001DEF  20                 	db	32
   262  001DF0  74                 	db	116
   263  001DF1  68                 	db	104
   264  001DF2  65                 	db	101
   265  001DF3  20                 	db	32
   266  001DF4  65                 	db	101
   267  001DF5  6E                 	db	110
   268  001DF6  64                 	db	100
   269  001DF7  20                 	db	32
   270  001DF8  6F                 	db	111
   271  001DF9  66                 	db	102
   272  001DFA  20                 	db	32
   273  001DFB  74                 	db	116
   274  001DFC  68                 	db	104
   275  001DFD  65                 	db	101
   276  001DFE  20                 	db	32
   277  001DFF  5A                 	db	90
   278  001E00  20                 	db	32
   279  001E01  41                 	db	65
   280  001E02  78                 	db	120
   281  001E03  69                 	db	105
   282  001E04  73                 	db	115
   283  001E05  00                 	db	0
   284                           
   285                           ;initializer for _errString_Point
   286  001E06  45                 	db	69
   287  001E07  72                 	db	114
   288  001E08  72                 	db	114
   289  001E09  6F                 	db	111
   290  001E0A  72                 	db	114
   291  001E0B  2C                 	db	44
   292  001E0C  20                 	db	32
   293  001E0D  74                 	db	116
   294  001E0E  69                 	db	105
   295  001E0F  6D                 	db	109
   296  001E10  65                 	db	101
   297  001E11  20                 	db	32
   298  001E12  65                 	db	101
   299  001E13  78                 	db	120
   300  001E14  63                 	db	99
   301  001E15  65                 	db	101
   302  001E16  65                 	db	101
   303  001E17  64                 	db	100
   304  001E18  65                 	db	101
   305  001E19  64                 	db	100
   306  001E1A  20                 	db	32
   307  001E1B  74                 	db	116
   308  001E1C  6F                 	db	111
   309  001E1D  20                 	db	32
   310  001E1E  72                 	db	114
   311  001E1F  65                 	db	101
   312  001E20  61                 	db	97
   313  001E21  63                 	db	99
   314  001E22  68                 	db	104
   315  001E23  20                 	db	32
   316  001E24  74                 	db	116
   317  001E25  68                 	db	104
   318  001E26  65                 	db	101
   319  001E27  20                 	db	32
   320  001E28  70                 	db	112
   321  001E29  6F                 	db	111
   322  001E2A  69                 	db	105
   323  001E2B  6E                 	db	110
   324  001E2C  74                 	db	116
   325  001E2D  00                 	db	0
   326                           
   327                           ;initializer for _errString_ZEND
   328  001E2E  45                 	db	69
   329  001E2F  72                 	db	114
   330  001E30  72                 	db	114
   331  001E31  6F                 	db	111
   332  001E32  72                 	db	114
   333  001E33  2C                 	db	44
   334  001E34  20                 	db	32
   335  001E35  6E                 	db	110
   336  001E36  6F                 	db	111
   337  001E37  20                 	db	32
   338  001E38  6F                 	db	111
   339  001E39  62                 	db	98
   340  001E3A  6A                 	db	106
   341  001E3B  65                 	db	101
   342  001E3C  63                 	db	99
   343  001E3D  74                 	db	116
   344  001E3E  20                 	db	32
   345  001E3F  72                 	db	114
   346  001E40  65                 	db	101
   347  001E41  6C                 	db	108
   348  001E42  65                 	db	101
   349  001E43  76                 	db	118
   350  001E44  61                 	db	97
   351  001E45  74                 	db	116
   352  001E46  65                 	db	101
   353  001E47  64                 	db	100
   354  001E48  20                 	db	32
   355  001E49  61                 	db	97
   356  001E4A  6C                 	db	108
   357  001E4B  6F                 	db	111
   358  001E4C  6E                 	db	110
   359  001E4D  67                 	db	103
   360  001E4E  20                 	db	32
   361  001E4F  5A                 	db	90
   362  001E50  20                 	db	32
   363  001E51  41                 	db	65
   364  001E52  78                 	db	120
   365  001E53  69                 	db	105
   366  001E54  73                 	db	115
   367  001E55  00                 	db	0
   368                           
   369                           ;initializer for _errString_Reset
   370  001E56  45                 	db	69
   371  001E57  72                 	db	114
   372  001E58  72                 	db	114
   373  001E59  6F                 	db	111
   374  001E5A  72                 	db	114
   375  001E5B  2C                 	db	44
   376  001E5C  20                 	db	32
   377  001E5D  74                 	db	116
   378  001E5E  69                 	db	105
   379  001E5F  6D                 	db	109
   380  001E60  65                 	db	101
   381  001E61  20                 	db	32
   382  001E62  65                 	db	101
   383  001E63  78                 	db	120
   384  001E64  63                 	db	99
   385  001E65  65                 	db	101
   386  001E66  65                 	db	101
   387  001E67  64                 	db	100
   388  001E68  65                 	db	101
   389  001E69  64                 	db	100
   390  001E6A  20                 	db	32
   391  001E6B  74                 	db	116
   392  001E6C  6F                 	db	111
   393  001E6D  20                 	db	32
   394  001E6E  72                 	db	114
   395  001E6F  65                 	db	101
   396  001E70  73                 	db	115
   397  001E71  65                 	db	101
   398  001E72  74                 	db	116
   399  001E73  20                 	db	32
   400  001E74  70                 	db	112
   401  001E75  6F                 	db	111
   402  001E76  73                 	db	115
   403  001E77  69                 	db	105
   404  001E78  74                 	db	116
   405  001E79  69                 	db	105
   406  001E7A  6F                 	db	111
   407  001E7B  6E                 	db	110
   408  001E7C  00                 	db	0
   409                           
   410                           ;initializer for _errString_Fatal
   411  001E7D  46                 	db	70
   412  001E7E  61                 	db	97
   413  001E7F  74                 	db	116
   414  001E80  61                 	db	97
   415  001E81  6C                 	db	108
   416  001E82  20                 	db	32
   417  001E83  45                 	db	69
   418  001E84  72                 	db	114
   419  001E85  72                 	db	114
   420  001E86  6F                 	db	111
   421  001E87  72                 	db	114
   422  001E88  2C                 	db	44
   423  001E89  20                 	db	32
   424  001E8A  70                 	db	112
   425  001E8B  6C                 	db	108
   426  001E8C  65                 	db	101
   427  001E8D  61                 	db	97
   428  001E8E  73                 	db	115
   429  001E8F  65                 	db	101
   430  001E90  20                 	db	32
   431  001E91  72                 	db	114
   432  001E92  65                 	db	101
   433  001E93  73                 	db	115
   434  001E94  65                 	db	101
   435  001E95  74                 	db	116
   436  001E96  20                 	db	32
   437  001E97  74                 	db	116
   438  001E98  68                 	db	104
   439  001E99  65                 	db	101
   440  001E9A  20                 	db	32
   441  001E9B  64                 	db	100
   442  001E9C  65                 	db	101
   443  001E9D  76                 	db	118
   444  001E9E  69                 	db	105
   445  001E9F  63                 	db	99
   446  001EA0  65                 	db	101
   447  001EA1  21                 	db	33
   448  001EA2  00                 	db	0
   449                           
   450                           	psect	smallconst
   451  000600                     __psmallconst:
   452                           	callstack 0
   453  000600  00                 	db	0
   454  000601  FFAC               	dw	65452
   455  000603  3DB3               	dw	15795
   456  000605                     __end_ofrotateObj@stepAngle:
   457                           	callstack 0
   458  000605  0400               	dw	1024
   459  000607                     __end_of_therm_pressure:
   460                           	callstack 0
   461  000607  0200               	dw	512
   462  000609                     __end_of_touch_pressure:
   463                           	callstack 0
   464  000609                     _feeder3Pos:
   465                           	callstack 0
   466  000609  19                 	db	25
   467  00060A  19                 	db	25
   468  00060B                     __end_of_feeder3Pos:
   469                           	callstack 0
   470  00060B                     _feeder2Pos:
   471                           	callstack 0
   472  00060B  0F                 	db	15
   473  00060C  0F                 	db	15
   474  00060D                     __end_of_feeder2Pos:
   475                           	callstack 0
   476  00060D                     _feeder1Pos:
   477                           	callstack 0
   478  00060D  05                 	db	5
   479  00060E  05                 	db	5
   480  00060F                     __end_of_feeder1Pos:
   481                           	callstack 0
   482  0000                     _TMR0	set	4054
   483  0000                     _TXREG	set	4013
   484  0000                     _SPBRG	set	4015
   485  0000                     _TXSTAbits	set	4012
   486  0000                     _TRISCbits	set	3988
   487  0000                     _RCREG1	set	4014
   488  0000                     _ADRESH	set	4036
   489  0000                     _ADRESL	set	4035
   490  0000                     _PIR1bits	set	3998
   491  0000                     _IPR1bits	set	3999
   492  0000                     _ADCON0bits	set	4034
   493  0000                     _PIE1bits	set	3997
   494  0000                     _RCONbits	set	4048
   495  0000                     _INTCONbits	set	4082
   496  0000                     _RCSTAbits	set	4011
   497  0000                     _RCSTA1bits	set	4011
   498  0000                     _LATD	set	3980
   499  0000                     _PORTDbits	set	3971
   500  0000                     _TMR2	set	4044
   501  0000                     _PORTEbits	set	3972
   502  0000                     _T0CONbits	set	4053
   503  0000                     _T2CONbits	set	4042
   504  0000                     _LATDbits	set	3980
   505  0000                     _LATCbits	set	3979
   506  0000                     _LATBbits	set	3978
   507  0000                     _LATAbits	set	3977
   508  0000                     _TRISDbits	set	3989
   509  0000                     _TRISEbits	set	3990
   510  0000                     _TRISD	set	3989
   511  0000                     _TRISC	set	3988
   512  0000                     _TRISB	set	3987
   513  0000                     _TRISA	set	3986
   514  0000                     _ADCON1bits	set	4033
   515  00060F  00                 	db	0	; dummy byte at the end
   516  0000                     
   517                           ; #config settings
   518                           
   519                           	psect	cinit
   520  00200A                     __pcinit:
   521                           	callstack 0
   522  00200A                     start_initialization:
   523                           	callstack 0
   524  00200A                     __initialization:
   525                           	callstack 0
   526                           
   527                           ; Initialize objects allocated to BANK1 (209 bytes)
   528                           ; load TBLPTR registers with __pidataBANK1
   529  00200A  0ED2               	movlw	low __pidataBANK1
   530  00200C  6EF6               	movwf	tblptrl,c
   531  00200E  0E1D               	movlw	high __pidataBANK1
   532  002010  6EF7               	movwf	tblptrh,c
   533  002012  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   534  002014  6EF8               	movwf	tblptru,c
   535  002016  EE01  F000         	lfsr	0,__pdataBANK1
   536  00201A  EE10 F0D1          	lfsr	1,209
   537  00201E                     copy_data0:
   538  00201E  0009               	tblrd		*+
   539  002020  CFF5 FFEE          	movff	tablat,postinc0
   540  002024  50E5               	movf	postdec1,w,c
   541  002026  50E1               	movf	fsr1l,w,c
   542  002028  E1FA               	bnz	copy_data0
   543                           
   544                           ; Initialize objects allocated to BANK0 (88 bytes)
   545                           ; load TBLPTR registers with __pidataBANK0
   546  00202A  0E4C               	movlw	low __pidataBANK0
   547  00202C  6EF6               	movwf	tblptrl,c
   548  00202E  0E22               	movlw	high __pidataBANK0
   549  002030  6EF7               	movwf	tblptrh,c
   550  002032  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   551  002034  6EF8               	movwf	tblptru,c
   552  002036  EE00  F080         	lfsr	0,__pdataBANK0
   553  00203A  EE10 F058          	lfsr	1,88
   554  00203E                     copy_data1:
   555  00203E  0009               	tblrd		*+
   556  002040  CFF5 FFEE          	movff	tablat,postinc0
   557  002044  50E5               	movf	postdec1,w,c
   558  002046  50E1               	movf	fsr1l,w,c
   559  002048  E1FA               	bnz	copy_data1
   560                           
   561                           ; Initialize objects allocated to COMRAM (5 bytes)
   562                           ; load TBLPTR registers with __pidataCOMRAM
   563  00204A  0E20               	movlw	low __pidataCOMRAM
   564  00204C  6EF6               	movwf	tblptrl,c
   565  00204E  0E25               	movlw	high __pidataCOMRAM
   566  002050  6EF7               	movwf	tblptrh,c
   567  002052  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   568  002054  6EF8               	movwf	tblptru,c
   569  002056  EE00  F069         	lfsr	0,__pdataCOMRAM
   570  00205A  EE10 F005          	lfsr	1,5
   571  00205E                     copy_data2:
   572  00205E  0009               	tblrd		*+
   573  002060  CFF5 FFEE          	movff	tablat,postinc0
   574  002064  50E5               	movf	postdec1,w,c
   575  002066  50E1               	movf	fsr1l,w,c
   576  002068  E1FA               	bnz	copy_data2
   577                           
   578                           ; Clear objects allocated to BANK0 (28 bytes)
   579  00206A  EE00  F0D8         	lfsr	0,__pbssBANK0
   580  00206E  0E1C               	movlw	28
   581  002070                     clear_0:
   582  002070  6AEE               	clrf	postinc0,c
   583  002072  06E8               	decf	wreg,f,c
   584  002074  E1FD               	bnz	clear_0
   585                           
   586                           ; Clear objects allocated to COMRAM (36 bytes)
   587  002076  EE00  F045         	lfsr	0,__pbssCOMRAM
   588  00207A  0E24               	movlw	36
   589  00207C                     clear_1:
   590  00207C  6AEE               	clrf	postinc0,c
   591  00207E  06E8               	decf	wreg,f,c
   592  002080  E1FD               	bnz	clear_1
   593  002082                     end_of_initialization:
   594                           	callstack 0
   595  002082                     __end_of__initialization:
   596                           	callstack 0
   597  002082  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   598  002084  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   599  002086  0E00               	movlw	low (__Lmediumconst shr (0+16))
   600  002088  6EF8               	movwf	tblptru,c
   601  00208A  0100               	movlb	0
   602  00208C  EFBB  F009         	goto	_main	;jump to C main() function
   603                           
   604                           	psect	bssCOMRAM
   605  000045                     __pbssCOMRAM:
   606                           	callstack 0
   607  000045                     storeData@receivedMex:
   608                           	callstack 0
   609  000045                     	ds	9
   610  00004E                     _posVector:
   611                           	callstack 0
   612  00004E                     	ds	3
   613  000051                     isr@single_cycle:
   614                           	callstack 0
   615  000051                     	ds	2
   616  000053                     _ADC_res:
   617                           	callstack 0
   618  000053                     	ds	2
   619  000055                     _pwmPeriod:
   620                           	callstack 0
   621  000055                     	ds	2
   622  000057                     _newFeeder:
   623                           	callstack 0
   624  000057                     	ds	2
   625  000059                     _rotAngle:
   626                           	callstack 0
   627  000059                     	ds	2
   628  00005B                     _tm0Error:
   629                           	callstack 0
   630  00005B                     	ds	2
   631  00005D                     	ds	1
   632  00005E                     storeData@counter:
   633                           	callstack 0
   634  00005E                     	ds	1
   635  00005F                     __newSequence:
   636                           	callstack 0
   637  00005F                     	ds	1
   638  000060                     __fatalError:
   639                           	callstack 0
   640  000060                     	ds	1
   641  000061                     _dataCounter:
   642                           	callstack 0
   643  000061                     	ds	1
   644  000062                     isr@completeStep:
   645                           	callstack 0
   646  000062                     	ds	1
   647  000063                     isr@tm0Count:
   648                           	callstack 0
   649  000063                     	ds	1
   650  000064                     _therm_rel:
   651                           	callstack 0
   652  000064                     	ds	1
   653  000065                     _touch_rel:
   654                           	callstack 0
   655  000065                     	ds	1
   656  000066                     _stepToggle:
   657                           	callstack 0
   658  000066                     	ds	1
   659  000067                     _pwmStep:
   660                           	callstack 0
   661  000067                     	ds	1
   662  000068                     _tm0Limit:
   663                           	callstack 0
   664  000068                     	ds	1
   665                           
   666                           	psect	dataCOMRAM
   667  000069                     __pdataCOMRAM:
   668                           	callstack 0
   669  000069                     	ds	2
   670  00006B                     	ds	2
   671  00006D                     storeData@mexLength:
   672                           	callstack 0
   673  00006D                     	ds	1
   674                           
   675                           	psect	bssBANK0
   676  0000D8                     __pbssBANK0:
   677                           	callstack 0
   678  0000D8                     _dataSequence:
   679                           	callstack 0
   680  0000D8                     	ds	20
   681  0000EC                     _newSequenceData:
   682                           	callstack 0
   683  0000EC                     	ds	8
   684                           
   685                           	psect	dataBANK0
   686  000080                     __pdataBANK0:
   687                           	callstack 0
   688  000080                     rotateObj@rotSequence:
   689                           	callstack 0
   690  000080                     	ds	4
   691  000084                     _errString_Bound:
   692                           	callstack 0
   693  000084                     	ds	32
   694  0000A4                     _errString_Feed:
   695                           	callstack 0
   696  0000A4                     	ds	29
   697  0000C1                     _errString_Command:
   698                           	callstack 0
   699  0000C1                     	ds	23
   700                           
   701                           	psect	dataBANK1
   702  000100                     __pdataBANK1:
   703                           	callstack 0
   704  000100                     _errString_PointZ:
   705                           	callstack 0
   706  000100                     	ds	52
   707  000134                     _errString_Point:
   708                           	callstack 0
   709  000134                     	ds	40
   710  00015C                     _errString_ZEND:
   711                           	callstack 0
   712  00015C                     	ds	40
   713  000184                     _errString_Reset:
   714                           	callstack 0
   715  000184                     	ds	39
   716  0001AB                     _errString_Fatal:
   717                           	callstack 0
   718  0001AB                     	ds	38
   719                           
   720                           	psect	cstackBANK1
   721  0001D1                     __pcstackBANK1:
   722                           	callstack 0
   723  0001D1                     ??_main:
   724                           
   725                           ; 1 bytes @ 0x0
   726  0001D1                     	ds	2
   727  0001D3                     main@errCode:
   728                           	callstack 0
   729                           
   730                           ; 1 bytes @ 0x2
   731  0001D3                     	ds	1
   732  0001D4                     main@newData:
   733                           	callstack 0
   734                           
   735                           ; 2 bytes @ 0x3
   736  0001D4                     	ds	2
   737                           
   738                           	psect	cstackBANK0
   739  0000F4                     __pcstackBANK0:
   740                           	callstack 0
   741  0000F4                     ??_rotateObj:
   742                           
   743                           ; 1 bytes @ 0x0
   744  0000F4                     	ds	3
   745  0000F7                     rotateObj@rotAngle:
   746                           	callstack 0
   747                           
   748                           ; 1 bytes @ 0x3
   749  0000F7                     	ds	1
   750  0000F8                     rotateObj@totStep:
   751                           	callstack 0
   752                           
   753                           ; 2 bytes @ 0x4
   754  0000F8                     	ds	2
   755  0000FA                     rotateObj@i:
   756                           	callstack 0
   757                           
   758                           ; 2 bytes @ 0x6
   759  0000FA                     	ds	2
   760  0000FC                     executeData@errCode:
   761                           	callstack 0
   762                           
   763                           ; 1 bytes @ 0x8
   764  0000FC                     	ds	1
   765  0000FD                     executeData@data:
   766                           	callstack 0
   767                           
   768                           ; 2 bytes @ 0x9
   769  0000FD                     	ds	2
   770                           
   771                           	psect	cstackCOMRAM
   772  000001                     __pcstackCOMRAM:
   773                           	callstack 0
   774  000001                     ?_retPeriod:
   775                           	callstack 0
   776  000001                     i2uartTx@ptr:
   777                           	callstack 0
   778                           
   779                           ; 2 bytes @ 0x0
   780  000001                     	ds	2
   781  000003                     i2uartTx@length:
   782                           	callstack 0
   783                           
   784                           ; 1 bytes @ 0x2
   785  000003                     	ds	1
   786  000004                     i2uartTx@i:
   787                           	callstack 0
   788                           
   789                           ; 1 bytes @ 0x3
   790  000004                     	ds	1
   791  000005                     ??i2_printError:
   792                           
   793                           ; 1 bytes @ 0x4
   794  000005                     	ds	2
   795  000007                     i2printError@errCode:
   796                           	callstack 0
   797                           
   798                           ; 1 bytes @ 0x6
   799  000007                     	ds	1
   800  000008                     ??i2_storeData:
   801                           
   802                           ; 1 bytes @ 0x7
   803  000008                     	ds	2
   804  00000A                     i2storeData@data:
   805                           	callstack 0
   806                           
   807                           ; 1 bytes @ 0x9
   808  00000A                     	ds	1
   809  00000B                     ??_isr:
   810                           
   811                           ; 1 bytes @ 0xA
   812  00000B                     	ds	6
   813  000011                     isr@temp:
   814                           	callstack 0
   815                           
   816                           ; 1 bytes @ 0x10
   817  000011                     	ds	1
   818  000012                     ??_shiftData:
   819  000012                     ?_stepMade:
   820                           	callstack 0
   821  000012                     ?_stepCounter:
   822                           	callstack 0
   823  000012                     ?_returnTouch:
   824                           	callstack 0
   825  000012                     ?_returnTherm:
   826                           	callstack 0
   827  000012                     ?_getNewSequence:
   828                           	callstack 0
   829  000012                     ?_getData:
   830                           	callstack 0
   831  000012                     ?___xxtofl:
   832                           	callstack 0
   833  000012                     setStep@motor:
   834                           	callstack 0
   835  000012                     enableMotor@motor:
   836                           	callstack 0
   837  000012                     setDirection@motor:
   838                           	callstack 0
   839  000012                     setDecay@motor:
   840                           	callstack 0
   841  000012                     tim2Init@_pwmPeriod:
   842                           	callstack 0
   843  000012                     uartTx@ptr:
   844                           	callstack 0
   845  000012                     ___xxtofl@val:
   846                           	callstack 0
   847                           
   848                           ; 4 bytes @ 0x11
   849  000012                     	ds	1
   850  000013                     ??_setStep:
   851  000013                     ??_enableMotor:
   852  000013                     ??_setDirection:
   853  000013                     ??_setDecay:
   854                           
   855                           ; 1 bytes @ 0x12
   856  000013                     	ds	1
   857  000014                     stepMade@temp:
   858                           	callstack 0
   859  000014                     shiftData@i:
   860                           	callstack 0
   861  000014                     uartTx@length:
   862                           	callstack 0
   863                           
   864                           ; 1 bytes @ 0x13
   865  000014                     	ds	1
   866  000015                     setStep@step:
   867                           	callstack 0
   868  000015                     enableMotor@enable:
   869                           	callstack 0
   870  000015                     setDirection@direction:
   871                           	callstack 0
   872  000015                     setDecay@decay:
   873                           	callstack 0
   874  000015                     uartTx@i:
   875                           	callstack 0
   876                           
   877                           ; 1 bytes @ 0x14
   878  000015                     	ds	1
   879  000016                     ??_printError:
   880  000016                     ??___xxtofl:
   881  000016                     resetPosition@keepMovingX:
   882                           	callstack 0
   883  000016                     moveToPoint@x1:
   884                           	callstack 0
   885                           
   886                           ; 2 bytes @ 0x15
   887  000016                     	ds	1
   888  000017                     resetPosition@keepMovingY:
   889                           	callstack 0
   890                           
   891                           ; 1 bytes @ 0x16
   892  000017                     	ds	1
   893  000018                     resetPosition@keepMovingZ:
   894                           	callstack 0
   895  000018                     printError@errCode:
   896                           	callstack 0
   897  000018                     moveToPoint@y1:
   898                           	callstack 0
   899                           
   900                           ; 2 bytes @ 0x17
   901  000018                     	ds	1
   902  000019                     ??_storeData:
   903                           
   904                           ; 1 bytes @ 0x18
   905  000019                     	ds	1
   906  00001A                     ___xxtofl@sign:
   907                           	callstack 0
   908  00001A                     moveToPoint@x2:
   909                           	callstack 0
   910                           
   911                           ; 2 bytes @ 0x19
   912  00001A                     	ds	1
   913  00001B                     storeData@data:
   914                           	callstack 0
   915  00001B                     ___xxtofl@exp:
   916                           	callstack 0
   917                           
   918                           ; 1 bytes @ 0x1A
   919  00001B                     	ds	1
   920  00001C                     moveToPoint@y2:
   921                           	callstack 0
   922  00001C                     ___xxtofl@arg:
   923                           	callstack 0
   924                           
   925                           ; 4 bytes @ 0x1B
   926  00001C                     	ds	2
   927  00001E                     ??_moveToPoint:
   928                           
   929                           ; 1 bytes @ 0x1D
   930  00001E                     	ds	2
   931  000020                     ?___fldiv:
   932                           	callstack 0
   933  000020                     moveToPoint@keepMovingX:
   934                           	callstack 0
   935  000020                     ___fldiv@b:
   936                           	callstack 0
   937                           
   938                           ; 4 bytes @ 0x1F
   939  000020                     	ds	1
   940  000021                     moveToPoint@keepMovingY:
   941                           	callstack 0
   942                           
   943                           ; 1 bytes @ 0x20
   944  000021                     	ds	1
   945  000022                     moveToPoint@MOT1Direction:
   946                           	callstack 0
   947                           
   948                           ; 1 bytes @ 0x21
   949  000022                     	ds	1
   950  000023                     moveToPoint@MOT2Direction:
   951                           	callstack 0
   952                           
   953                           ; 1 bytes @ 0x22
   954  000023                     	ds	1
   955  000024                     ___fldiv@a:
   956                           	callstack 0
   957                           
   958                           ; 4 bytes @ 0x23
   959  000024                     	ds	4
   960  000028                     ??___fldiv:
   961                           
   962                           ; 1 bytes @ 0x27
   963  000028                     	ds	4
   964  00002C                     ___fldiv@rem:
   965                           	callstack 0
   966                           
   967                           ; 4 bytes @ 0x2B
   968  00002C                     	ds	4
   969  000030                     ___fldiv@sign:
   970                           	callstack 0
   971                           
   972                           ; 1 bytes @ 0x2F
   973  000030                     	ds	1
   974  000031                     ___fldiv@new_exp:
   975                           	callstack 0
   976                           
   977                           ; 2 bytes @ 0x30
   978  000031                     	ds	2
   979  000033                     ___fldiv@grs:
   980                           	callstack 0
   981                           
   982                           ; 4 bytes @ 0x32
   983  000033                     	ds	4
   984  000037                     ___fldiv@bexp:
   985                           	callstack 0
   986                           
   987                           ; 1 bytes @ 0x36
   988  000037                     	ds	1
   989  000038                     ___fldiv@aexp:
   990                           	callstack 0
   991                           
   992                           ; 1 bytes @ 0x37
   993  000038                     	ds	1
   994  000039                     ?___fltol:
   995                           	callstack 0
   996  000039                     ___fltol@f1:
   997                           	callstack 0
   998                           
   999                           ; 4 bytes @ 0x38
  1000  000039                     	ds	4
  1001  00003D                     ??___fltol:
  1002                           
  1003                           ; 1 bytes @ 0x3C
  1004  00003D                     	ds	4
  1005  000041                     ___fltol@sign1:
  1006                           	callstack 0
  1007                           
  1008                           ; 1 bytes @ 0x40
  1009  000041                     	ds	1
  1010  000042                     ___fltol@exp1:
  1011                           	callstack 0
  1012                           
  1013                           ; 1 bytes @ 0x41
  1014  000042                     	ds	1
  1015  000043                     ??_executeData:
  1016                           
  1017                           ; 1 bytes @ 0x42
  1018  000043                     	ds	2
  1019                           
  1020 ;;
  1021 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1022 ;;
  1023 ;; *************** function _main *****************
  1024 ;; Defined at:
  1025 ;;		line 26 in file "main.c"
  1026 ;; Parameters:    Size  Location     Type
  1027 ;;		None
  1028 ;; Auto vars:     Size  Location     Type
  1029 ;;  newData         2    3[BANK1 ] PTR struct .
  1030 ;;		 -> newSequenceData(8), 
  1031 ;;  errCode         1    2[BANK1 ] unsigned char 
  1032 ;; Return value:  Size  Location     Type
  1033 ;;                  1    wreg      void 
  1034 ;; Registers used:
  1035 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1036 ;; Tracked objects:
  1037 ;;		On entry : 0/0
  1038 ;;		On exit  : 0/0
  1039 ;;		Unchanged: 0/0
  1040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1041 ;;      Params:         0       0       0       0       0       0       0
  1042 ;;      Locals:         0       0       3       0       0       0       0
  1043 ;;      Temps:          0       0       2       0       0       0       0
  1044 ;;      Totals:         0       0       5       0       0       0       0
  1045 ;;Total ram usage:        5 bytes
  1046 ;; Hardware stack levels required when called:    7
  1047 ;; This function calls:
  1048 ;;		_clearTM0
  1049 ;;		_enableMotor
  1050 ;;		_executeData
  1051 ;;		_fatalError
  1052 ;;		_getNewSequence
  1053 ;;		_initADC
  1054 ;;		_initPinMotors
  1055 ;;		_interruptInit
  1056 ;;		_newSequence
  1057 ;;		_printError
  1058 ;;		_readSeq
  1059 ;;		_reduceSeq
  1060 ;;		_resetNewSequence
  1061 ;;		_resetPosition
  1062 ;;		_shiftData
  1063 ;;		_storeData
  1064 ;;		_tim0Init
  1065 ;;		_tim2Init
  1066 ;;		_usartInit
  1067 ;; This function is called by:
  1068 ;;		Startup code after reset
  1069 ;; This function uses a non-reentrant model
  1070 ;;
  1071                           
  1072                           	psect	text0
  1073  001376                     __ptext0:
  1074                           	callstack 0
  1075  001376                     _main:
  1076                           	callstack 24
  1077  001376  FFFF               	dw	65535	; assembler added errata NOP
  1078                           
  1079                           ;main.c: 30:     interruptInit();
  1080  001378  ECA0  F011         	call	_interruptInit	;wreg free
  1081  00137C                     
  1082                           ;main.c: 31:     initPinMotors();
  1083  00137C  ECBD  F011         	call	_initPinMotors	;wreg free
  1084  001380                     
  1085                           ;main.c: 32:     initADC();
  1086  001380  ECD0  F011         	call	_initADC	;wreg free
  1087  001384                     
  1088                           ;main.c: 33:     tim0Init();
  1089  001384  EC06  F012         	call	_tim0Init	;wreg free
  1090  001388                     
  1091                           ;main.c: 34:     tim2Init(10);
  1092  001388  0E00               	movlw	0
  1093  00138A  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1094  00138C  0E0A               	movlw	10
  1095  00138E  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1096  001390  ECF2  F011         	call	_tim2Init	;wreg free
  1097                           
  1098                           ;main.c: 37:     resetPosition();
  1099  001394  ECC2  F008         	call	_resetPosition	;wreg free
  1100  001398                     
  1101                           ;main.c: 40:     usartInit();
  1102  001398  ECE3  F011         	call	_usartInit	;wreg free
  1103  00139C                     
  1104                           ;main.c: 41:     RCSTA1bits.CREN = 1;
  1105  00139C  88AB               	bsf	171,4,c	;volatile
  1106  00139E                     l4187:
  1107  00139E  FFFF               	dw	65535	; assembler added errata NOP
  1108                           
  1109                           ;main.c: 44:         if(fatalError()){
  1110  0013A0  EC78  F012         	call	_fatalError	;wreg free
  1111  0013A4  0900               	iorlw	0
  1112  0013A6  B4D8               	btfsc	status,2,c
  1113  0013A8  EFD8  F009         	goto	u3421
  1114  0013AC  EFDB  F009         	goto	u3420
  1115  0013B0                     u3421:
  1116  0013B0  FFFF               	dw	65535	; assembler added errata NOP
  1117  0013B2  EFF1  F009         	goto	l4193
  1118  0013B6                     u3420:
  1119  0013B6  FFFF               	dw	65535	; assembler added errata NOP
  1120  0013B8                     
  1121                           ;main.c: 46:             enableMotor(1, 0);
  1122  0013B8  0E00               	movlw	0
  1123  0013BA  6E12               	movwf	enableMotor@motor^0,c
  1124  0013BC  0E01               	movlw	1
  1125  0013BE  EC82  F010         	call	_enableMotor
  1126                           
  1127                           ;main.c: 47:             enableMotor(1, 1);
  1128  0013C2  0E01               	movlw	1
  1129  0013C4  6E12               	movwf	enableMotor@motor^0,c
  1130  0013C6  0E01               	movlw	1
  1131  0013C8  EC82  F010         	call	_enableMotor
  1132                           
  1133                           ;main.c: 48:             enableMotor(1, 2);
  1134  0013CC  0E02               	movlw	2
  1135  0013CE  6E12               	movwf	enableMotor@motor^0,c
  1136  0013D0  0E01               	movlw	1
  1137  0013D2  EC82  F010         	call	_enableMotor
  1138  0013D6                     
  1139                           ;main.c: 50:             printError(7);
  1140  0013D6  0E07               	movlw	7
  1141  0013D8  EC70  F00C         	call	_printError
  1142  0013DC                     l309:
  1143  0013DC  FFFF               	dw	65535	; assembler added errata NOP
  1144  0013DE  EFEE  F009         	goto	l309
  1145  0013E2                     l4193:
  1146  0013E2  FFFF               	dw	65535	; assembler added errata NOP
  1147  0013E4  EC74  F012         	call	_newSequence	;wreg free
  1148  0013E8  0900               	iorlw	0
  1149  0013EA  B4D8               	btfsc	status,2,c
  1150  0013EC  EFFA  F009         	goto	u3431
  1151  0013F0  EFFD  F009         	goto	u3430
  1152  0013F4                     u3431:
  1153  0013F4  FFFF               	dw	65535	; assembler added errata NOP
  1154  0013F6  EF58  F00A         	goto	l4227
  1155  0013FA                     u3430:
  1156  0013FA  FFFF               	dw	65535	; assembler added errata NOP
  1157  0013FC                     
  1158                           ;main.c: 53:             t_newSequence* newData = getNewSequence();
  1159  0013FC  EC0F  F012         	call	_getNewSequence	;wreg free
  1160  001400  C012  F1D4         	movff	?_getNewSequence,main@newData
  1161  001404  C013  F1D5         	movff	?_getNewSequence+1,main@newData+1
  1162  001408                     
  1163                           ;main.c: 55:             newFeeder[0] = newData ->init_posX;
  1164  001408  0101               	movlb	1	; () banked
  1165  00140A  EE20 F002          	lfsr	2,2
  1166  00140E  51D4               	movf	main@newData& (0+255),w,b
  1167  001410  26D9               	addwf	fsr2l,f,c
  1168  001412  51D5               	movf	(main@newData+1)& (0+255),w,b
  1169  001414  22DA               	addwfc	fsr2h,f,c
  1170  001416  50DF               	movf	indf2,w,c
  1171  001418  6E57               	movwf	_newFeeder^0,c
  1172  00141A                     
  1173                           ; BSR set to: 1
  1174                           ;main.c: 56:             newFeeder[1] = newData ->init_posY;
  1175  00141A  EE20 F003          	lfsr	2,3
  1176  00141E  51D4               	movf	main@newData& (0+255),w,b
  1177  001420  26D9               	addwf	fsr2l,f,c
  1178  001422  51D5               	movf	(main@newData+1)& (0+255),w,b
  1179  001424  22DA               	addwfc	fsr2h,f,c
  1180  001426  50DF               	movf	indf2,w,c
  1181  001428  6E58               	movwf	(_newFeeder+1)^0,c
  1182  00142A                     
  1183                           ; BSR set to: 1
  1184                           ;main.c: 60:             RCSTAbits.CREN = 0;
  1185  00142A  98AB               	bcf	171,4,c	;volatile
  1186  00142C                     
  1187                           ; BSR set to: 1
  1188                           ;main.c: 63:             storeData(0);
  1189  00142C  0E00               	movlw	0
  1190  00142E  EC73  F00A         	call	_storeData
  1191  001432                     
  1192                           ;main.c: 64:             storeData(0xFF);
  1193  001432  0EFF               	movlw	255
  1194  001434  EC73  F00A         	call	_storeData
  1195  001438                     
  1196                           ;main.c: 65:             storeData(newData ->end_posX);
  1197  001438  0101               	movlb	1	; () banked
  1198  00143A  EE20 F005          	lfsr	2,5
  1199  00143E  51D4               	movf	main@newData& (0+255),w,b
  1200  001440  26D9               	addwf	fsr2l,f,c
  1201  001442  51D5               	movf	(main@newData+1)& (0+255),w,b
  1202  001444  22DA               	addwfc	fsr2h,f,c
  1203  001446  50DF               	movf	indf2,w,c
  1204  001448  EC73  F00A         	call	_storeData
  1205  00144C                     
  1206                           ;main.c: 66:             storeData(newData ->end_posY);
  1207  00144C  0101               	movlb	1	; () banked
  1208  00144E  EE20 F006          	lfsr	2,6
  1209  001452  51D4               	movf	main@newData& (0+255),w,b
  1210  001454  26D9               	addwf	fsr2l,f,c
  1211  001456  51D5               	movf	(main@newData+1)& (0+255),w,b
  1212  001458  22DA               	addwfc	fsr2h,f,c
  1213  00145A  50DF               	movf	indf2,w,c
  1214  00145C  EC73  F00A         	call	_storeData
  1215  001460                     
  1216                           ;main.c: 67:             storeData(newData ->end_rot - newData ->init_rot);
  1217  001460  0101               	movlb	1	; () banked
  1218  001462  EE20 F004          	lfsr	2,4
  1219  001466  51D4               	movf	main@newData& (0+255),w,b
  1220  001468  26D9               	addwf	fsr2l,f,c
  1221  00146A  51D5               	movf	(main@newData+1)& (0+255),w,b
  1222  00146C  22DA               	addwfc	fsr2h,f,c
  1223  00146E  50DF               	movf	indf2,w,c
  1224  001470  6FD1               	movwf	??_main& (0+255),b
  1225  001472  EE20 F007          	lfsr	2,7
  1226  001476  51D4               	movf	main@newData& (0+255),w,b
  1227  001478  26D9               	addwf	fsr2l,f,c
  1228  00147A  51D5               	movf	(main@newData+1)& (0+255),w,b
  1229  00147C  22DA               	addwfc	fsr2h,f,c
  1230  00147E  50DF               	movf	indf2,w,c
  1231  001480  6FD2               	movwf	(??_main+1)& (0+255),b
  1232  001482  51D1               	movf	??_main& (0+255),w,b
  1233  001484  5DD2               	subwf	(??_main+1)& (0+255),w,b
  1234  001486  EC73  F00A         	call	_storeData
  1235  00148A                     
  1236                           ;main.c: 70:             RCSTAbits.CREN = 1;
  1237  00148A  88AB               	bsf	171,4,c	;volatile
  1238  00148C                     
  1239                           ;main.c: 73:             resetNewSequence();
  1240  00148C  EC44  F012         	call	_resetNewSequence	;wreg free
  1241  001490                     
  1242                           ;main.c: 75:             errCode = executeData();
  1243  001490  EC82  F006         	call	_executeData	;wreg free
  1244  001494  0101               	movlb	1	; () banked
  1245  001496  6FD3               	movwf	main@errCode& (0+255),b
  1246  001498                     
  1247                           ; BSR set to: 1
  1248                           ;main.c: 76:             printError(errCode);
  1249  001498  51D3               	movf	main@errCode& (0+255),w,b
  1250  00149A  EC70  F00C         	call	_printError
  1251  00149E                     l4221:
  1252  00149E  FFFF               	dw	65535	; assembler added errata NOP
  1253                           
  1254                           ;main.c: 77:             clearTM0();
  1255  0014A0  EC1D  F012         	call	_clearTM0	;wreg free
  1256  0014A4                     
  1257                           ;main.c: 81:             reduceSeq();
  1258  0014A4  EC6C  F012         	call	_reduceSeq	;wreg free
  1259  0014A8                     
  1260                           ;main.c: 82:             shiftData();
  1261  0014A8  ECF6  F010         	call	_shiftData	;wreg free
  1262                           
  1263                           ;main.c: 84:         }else if(readSeq()){
  1264  0014AC  EFCF  F009         	goto	l4187
  1265  0014B0                     l4227:
  1266  0014B0  FFFF               	dw	65535	; assembler added errata NOP
  1267  0014B2  EC70  F012         	call	_readSeq	;wreg free
  1268  0014B6  0900               	iorlw	0
  1269  0014B8  B4D8               	btfsc	status,2,c
  1270  0014BA  EF61  F00A         	goto	u3441
  1271  0014BE  EF64  F00A         	goto	u3440
  1272  0014C2                     u3441:
  1273  0014C2  FFFF               	dw	65535	; assembler added errata NOP
  1274  0014C4  EF6E  F00A         	goto	l312
  1275  0014C8                     u3440:
  1276  0014C8  FFFF               	dw	65535	; assembler added errata NOP
  1277  0014CA                     
  1278                           ;main.c: 87:             errCode = executeData();
  1279  0014CA  EC82  F006         	call	_executeData	;wreg free
  1280  0014CE  0101               	movlb	1	; () banked
  1281  0014D0  6FD3               	movwf	main@errCode& (0+255),b
  1282  0014D2                     
  1283                           ; BSR set to: 1
  1284                           ;main.c: 88:             printError(errCode);
  1285  0014D2  51D3               	movf	main@errCode& (0+255),w,b
  1286  0014D4  EC70  F00C         	call	_printError
  1287  0014D8  EF4F  F00A         	goto	l4221
  1288  0014DC                     l312:
  1289  0014DC  FFFF               	dw	65535	; assembler added errata NOP
  1290  0014DE  EFCF  F009         	goto	l4187
  1291  0014E2  EFB5  F000         	goto	start
  1292  0014E6                     __end_of_main:
  1293                           	callstack 0
  1294                           
  1295 ;; *************** function _usartInit *****************
  1296 ;; Defined at:
  1297 ;;		line 34 in file "usart.c"
  1298 ;; Parameters:    Size  Location     Type
  1299 ;;		None
  1300 ;; Auto vars:     Size  Location     Type
  1301 ;;		None
  1302 ;; Return value:  Size  Location     Type
  1303 ;;                  1    wreg      void 
  1304 ;; Registers used:
  1305 ;;		wreg, status,2
  1306 ;; Tracked objects:
  1307 ;;		On entry : 0/0
  1308 ;;		On exit  : 0/0
  1309 ;;		Unchanged: 0/0
  1310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1311 ;;      Params:         0       0       0       0       0       0       0
  1312 ;;      Locals:         0       0       0       0       0       0       0
  1313 ;;      Temps:          0       0       0       0       0       0       0
  1314 ;;      Totals:         0       0       0       0       0       0       0
  1315 ;;Total ram usage:        0 bytes
  1316 ;; Hardware stack levels used:    1
  1317 ;; Hardware stack levels required when called:    4
  1318 ;; This function calls:
  1319 ;;		Nothing
  1320 ;; This function is called by:
  1321 ;;		_main
  1322 ;; This function uses a non-reentrant model
  1323 ;;
  1324                           
  1325                           	psect	text1
  1326  0023C6                     __ptext1:
  1327                           	callstack 0
  1328  0023C6                     _usartInit:
  1329                           	callstack 0
  1330  0023C6  FFFF               	dw	65535	; assembler added errata NOP
  1331  0023C8                     
  1332                           ;usart.c: 36:     TRISCbits.TRISC6 = 0;
  1333  0023C8  9C94               	bcf	148,6,c	;volatile
  1334                           
  1335                           ;usart.c: 37:     TRISCbits.TRISC7 = 1;
  1336  0023CA  8E94               	bsf	148,7,c	;volatile
  1337                           
  1338                           ;usart.c: 39:     TXSTAbits.TX9 = 0;
  1339  0023CC  9CAC               	bcf	172,6,c	;volatile
  1340                           
  1341                           ;usart.c: 40:     TXSTAbits.TXEN = 1;
  1342  0023CE  8AAC               	bsf	172,5,c	;volatile
  1343                           
  1344                           ;usart.c: 41:     TXSTAbits.SYNC = 0;
  1345  0023D0  98AC               	bcf	172,4,c	;volatile
  1346                           
  1347                           ;usart.c: 42:     TXSTAbits.BRGH = 0;
  1348  0023D2  94AC               	bcf	172,2,c	;volatile
  1349                           
  1350                           ;usart.c: 44:     RCSTAbits.SPEN = 1;
  1351  0023D4  8EAB               	bsf	171,7,c	;volatile
  1352                           
  1353                           ;usart.c: 45:     RCSTAbits.RX9 = 0;
  1354  0023D6  9CAB               	bcf	171,6,c	;volatile
  1355                           
  1356                           ;usart.c: 46:     RCSTAbits.CREN = 0;
  1357  0023D8  98AB               	bcf	171,4,c	;volatile
  1358                           
  1359                           ;usart.c: 47:     RCSTAbits.ADDEN = 0;
  1360  0023DA  96AB               	bcf	171,3,c	;volatile
  1361  0023DC                     
  1362                           ;usart.c: 50:     SPBRG = 25;
  1363  0023DC  0E19               	movlw	25
  1364  0023DE  6EAF               	movwf	175,c	;volatile
  1365  0023E0  0012               	return		;funcret
  1366  0023E2  FFFF               	dw	65535	; errata NOP
  1367  0023E4                     __end_of_usartInit:
  1368                           	callstack 0
  1369                           
  1370 ;; *************** function _tim2Init *****************
  1371 ;; Defined at:
  1372 ;;		line 34 in file "pwm.c"
  1373 ;; Parameters:    Size  Location     Type
  1374 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1375 ;; Auto vars:     Size  Location     Type
  1376 ;;		None
  1377 ;; Return value:  Size  Location     Type
  1378 ;;                  1    wreg      void 
  1379 ;; Registers used:
  1380 ;;		wreg, status,2
  1381 ;; Tracked objects:
  1382 ;;		On entry : 0/0
  1383 ;;		On exit  : 0/0
  1384 ;;		Unchanged: 0/0
  1385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1386 ;;      Params:         2       0       0       0       0       0       0
  1387 ;;      Locals:         0       0       0       0       0       0       0
  1388 ;;      Temps:          0       0       0       0       0       0       0
  1389 ;;      Totals:         2       0       0       0       0       0       0
  1390 ;;Total ram usage:        2 bytes
  1391 ;; Hardware stack levels used:    1
  1392 ;; Hardware stack levels required when called:    4
  1393 ;; This function calls:
  1394 ;;		Nothing
  1395 ;; This function is called by:
  1396 ;;		_main
  1397 ;; This function uses a non-reentrant model
  1398 ;;
  1399                           
  1400                           	psect	text2
  1401  0023E4                     __ptext2:
  1402                           	callstack 0
  1403  0023E4                     _tim2Init:
  1404                           	callstack 0
  1405  0023E4  FFFF               	dw	65535	; assembler added errata NOP
  1406  0023E6                     
  1407                           ;pwm.c: 35:     T2CONbits.TMR2ON = 0;
  1408  0023E6  94CA               	bcf	202,2,c	;volatile
  1409  0023E8                     
  1410                           ;pwm.c: 36:     T2CONbits.T2CKPS = 0x03;
  1411  0023E8  0E03               	movlw	3
  1412  0023EA  12CA               	iorwf	202,f,c	;volatile
  1413  0023EC                     
  1414                           ;pwm.c: 39:     pwmPeriod = _pwmPeriod;
  1415  0023EC  C012  F055         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1416  0023F0  C013  F056         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1417  0023F4  0012               	return		;funcret
  1418  0023F6  FFFF               	dw	65535	; errata NOP
  1419  0023F8                     __end_of_tim2Init:
  1420                           	callstack 0
  1421                           
  1422 ;; *************** function _tim0Init *****************
  1423 ;; Defined at:
  1424 ;;		line 21 in file "pwm.c"
  1425 ;; Parameters:    Size  Location     Type
  1426 ;;		None
  1427 ;; Auto vars:     Size  Location     Type
  1428 ;;		None
  1429 ;; Return value:  Size  Location     Type
  1430 ;;                  1    wreg      void 
  1431 ;; Registers used:
  1432 ;;		wreg, status,2
  1433 ;; Tracked objects:
  1434 ;;		On entry : 0/0
  1435 ;;		On exit  : 0/0
  1436 ;;		Unchanged: 0/0
  1437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1438 ;;      Params:         0       0       0       0       0       0       0
  1439 ;;      Locals:         0       0       0       0       0       0       0
  1440 ;;      Temps:          0       0       0       0       0       0       0
  1441 ;;      Totals:         0       0       0       0       0       0       0
  1442 ;;Total ram usage:        0 bytes
  1443 ;; Hardware stack levels used:    1
  1444 ;; Hardware stack levels required when called:    4
  1445 ;; This function calls:
  1446 ;;		Nothing
  1447 ;; This function is called by:
  1448 ;;		_main
  1449 ;; This function uses a non-reentrant model
  1450 ;;
  1451                           
  1452                           	psect	text3
  1453  00240C                     __ptext3:
  1454                           	callstack 0
  1455  00240C                     _tim0Init:
  1456                           	callstack 0
  1457  00240C  FFFF               	dw	65535	; assembler added errata NOP
  1458  00240E                     
  1459                           ;pwm.c: 22:     T0CONbits.TMR0ON = 0;
  1460  00240E  9ED5               	bcf	213,7,c	;volatile
  1461                           
  1462                           ;pwm.c: 23:     T0CONbits.T08BIT = 0;
  1463  002410  9CD5               	bcf	213,6,c	;volatile
  1464                           
  1465                           ;pwm.c: 24:     T0CONbits.T0CS = 0;
  1466  002412  9AD5               	bcf	213,5,c	;volatile
  1467                           
  1468                           ;pwm.c: 25:     T0CONbits.PSA = 1;
  1469  002414  86D5               	bsf	213,3,c	;volatile
  1470  002416                     
  1471                           ;pwm.c: 26:     T0CONbits.T0PS = 0x07;
  1472  002416  0E07               	movlw	7
  1473  002418  12D5               	iorwf	213,f,c	;volatile
  1474  00241A  0012               	return		;funcret
  1475  00241C  FFFF               	dw	65535	; errata NOP
  1476  00241E                     __end_of_tim0Init:
  1477                           	callstack 0
  1478                           
  1479 ;; *************** function _storeData *****************
  1480 ;; Defined at:
  1481 ;;		line 131 in file "usart.c"
  1482 ;; Parameters:    Size  Location     Type
  1483 ;;  data            1    wreg     unsigned char 
  1484 ;; Auto vars:     Size  Location     Type
  1485 ;;  data            1   26[COMRAM] unsigned char 
  1486 ;; Return value:  Size  Location     Type
  1487 ;;                  1    wreg      void 
  1488 ;; Registers used:
  1489 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1490 ;; Tracked objects:
  1491 ;;		On entry : 0/0
  1492 ;;		On exit  : 0/0
  1493 ;;		Unchanged: 0/0
  1494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1495 ;;      Params:         0       0       0       0       0       0       0
  1496 ;;      Locals:         1       0       0       0       0       0       0
  1497 ;;      Temps:          2       0       0       0       0       0       0
  1498 ;;      Totals:         3       0       0       0       0       0       0
  1499 ;;Total ram usage:        3 bytes
  1500 ;; Hardware stack levels used:    1
  1501 ;; Hardware stack levels required when called:    6
  1502 ;; This function calls:
  1503 ;;		_printError
  1504 ;; This function is called by:
  1505 ;;		_main
  1506 ;; This function uses a non-reentrant model
  1507 ;;
  1508                           
  1509                           	psect	text4
  1510  0014E6                     __ptext4:
  1511                           	callstack 0
  1512  0014E6                     _storeData:
  1513                           	callstack 0
  1514  0014E6  FFFF               	dw	65535	; assembler added errata NOP
  1515                           
  1516                           ;incstack = 0
  1517                           ;storeData@data stored from wreg
  1518  0014E8  6E1B               	movwf	storeData@data^0,c
  1519  0014EA                     
  1520                           ;usart.c: 133:     static unsigned char counter = 0;;usart.c: 134:     static unsigned c
      +                          har mexLength = 5;;usart.c: 135:     static unsigned char command;;usart.c: 136:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 140:     receivedMex[counter] = data;
  1521  0014EA  0E45               	movlw	low storeData@receivedMex
  1522  0014EC  245E               	addwf	storeData@counter^0,w,c
  1523  0014EE  6ED9               	movwf	fsr2l,c
  1524  0014F0  6ADA               	clrf	fsr2h,c
  1525  0014F2  0E00               	movlw	high storeData@receivedMex
  1526  0014F4  22DA               	addwfc	fsr2h,f,c
  1527  0014F6  C01B  FFDF         	movff	storeData@data,indf2
  1528  0014FA                     
  1529                           ;usart.c: 142:     counter++;
  1530  0014FA  2A5E               	incf	storeData@counter^0,f,c
  1531                           
  1532                           ;usart.c: 145:     switch(receivedMex[0]){
  1533  0014FC  EF8F  F00A         	goto	l4059
  1534  001500                     l4051:
  1535  001500  FFFF               	dw	65535	; assembler added errata NOP
  1536                           
  1537                           ;usart.c: 147:             mexLength = 5;
  1538  001502  0E05               	movlw	5
  1539  001504  6E6D               	movwf	storeData@mexLength^0,c
  1540                           
  1541                           ;usart.c: 148:             break;
  1542  001506  EFAA  F00A         	goto	l4061
  1543  00150A                     l4053:
  1544  00150A  FFFF               	dw	65535	; assembler added errata NOP
  1545                           
  1546                           ;usart.c: 150:             mexLength = 9;
  1547  00150C  0E09               	movlw	9
  1548  00150E  6E6D               	movwf	storeData@mexLength^0,c
  1549                           
  1550                           ;usart.c: 151:             break;
  1551  001510  EFAA  F00A         	goto	l4061
  1552  001514                     l4055:
  1553  001514  FFFF               	dw	65535	; assembler added errata NOP
  1554                           
  1555                           ;usart.c: 153:             mexLength = 1;
  1556  001516  0E01               	movlw	1
  1557  001518  6E6D               	movwf	storeData@mexLength^0,c
  1558                           
  1559                           ;usart.c: 154:             break;
  1560  00151A  EFAA  F00A         	goto	l4061
  1561  00151E                     l4059:
  1562  00151E  FFFF               	dw	65535	; assembler added errata NOP
  1563  001520  5045               	movf	storeData@receivedMex^0,w,c
  1564  001522  6E19               	movwf	??_storeData^0,c
  1565  001524  6A1A               	clrf	(??_storeData+1)^0,c
  1566                           
  1567                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1568                           ; Switch size 1, requested type "simple"
  1569                           ; Number of cases is 1, Range of values is 0 to 0
  1570                           ; switch strategies available:
  1571                           ; Name         Instructions Cycles
  1572                           ; simple_byte            4     3 (average)
  1573                           ;	Chosen strategy is simple_byte
  1574  001526  501A               	movf	(??_storeData+1)^0,w,c
  1575  001528  0A00               	xorlw	0	; case 0
  1576  00152A  B4D8               	btfsc	status,2,c
  1577  00152C  EF9A  F00A         	goto	l4459
  1578  001530  EFAA  F00A         	goto	l4061
  1579  001534                     l4459:
  1580  001534  FFFF               	dw	65535	; assembler added errata NOP
  1581                           
  1582                           ; Switch size 1, requested type "simple"
  1583                           ; Number of cases is 3, Range of values is 0 to 2
  1584                           ; switch strategies available:
  1585                           ; Name         Instructions Cycles
  1586                           ; simple_byte           10     6 (average)
  1587                           ;	Chosen strategy is simple_byte
  1588  001536  5019               	movf	??_storeData^0,w,c
  1589  001538  0A00               	xorlw	0	; case 0
  1590  00153A  B4D8               	btfsc	status,2,c
  1591  00153C  EF80  F00A         	goto	l4051
  1592  001540  0A01               	xorlw	1	; case 1
  1593  001542  B4D8               	btfsc	status,2,c
  1594  001544  EF85  F00A         	goto	l4053
  1595  001548  0A03               	xorlw	3	; case 2
  1596  00154A  B4D8               	btfsc	status,2,c
  1597  00154C  EF8A  F00A         	goto	l4055
  1598  001550  EFAA  F00A         	goto	l4061
  1599  001554                     l4061:
  1600  001554  FFFF               	dw	65535	; assembler added errata NOP
  1601                           
  1602                           ;usart.c: 161:     if(counter >= mexLength){
  1603  001556  506D               	movf	storeData@mexLength^0,w,c
  1604  001558  5C5E               	subwf	storeData@counter^0,w,c
  1605  00155A  A0D8               	btfss	status,0,c
  1606  00155C  EFB2  F00A         	goto	u3381
  1607  001560  EFB5  F00A         	goto	u3380
  1608  001564                     u3381:
  1609  001564  FFFF               	dw	65535	; assembler added errata NOP
  1610  001566  EF21  F00B         	goto	l562
  1611  00156A                     u3380:
  1612  00156A  FFFF               	dw	65535	; assembler added errata NOP
  1613  00156C                     
  1614                           ;usart.c: 162:         counter = 0;
  1615  00156C  0E00               	movlw	0
  1616  00156E  6E5E               	movwf	storeData@counter^0,c
  1617                           
  1618                           ;usart.c: 166:         switch(receivedMex[0]){
  1619  001570  EF06  F00B         	goto	l4077
  1620  001574                     l4065:
  1621  001574  FFFF               	dw	65535	; assembler added errata NOP
  1622                           
  1623                           ;usart.c: 168:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  1624  001576  5061               	movf	_dataCounter^0,w,c
  1625  001578  0D04               	mullw	4
  1626  00157A  0ED8               	movlw	low _dataSequence
  1627  00157C  24F3               	addwf	243,w,c
  1628  00157E  6ED9               	movwf	fsr2l,c
  1629  001580  0E00               	movlw	high _dataSequence
  1630  001582  20F4               	addwfc	prodh,w,c
  1631  001584  6EDA               	movwf	fsr2h,c
  1632  001586  C046  FFDF         	movff	storeData@receivedMex+1,indf2
  1633                           
  1634                           ;usart.c: 169:                 dataSequence[dataCounter].posX = receivedMex[2];
  1635  00158A  5061               	movf	_dataCounter^0,w,c
  1636  00158C  0D04               	mullw	4
  1637  00158E  0ED9               	movlw	low (_dataSequence+1)
  1638  001590  24F3               	addwf	243,w,c
  1639  001592  6ED9               	movwf	fsr2l,c
  1640  001594  0E00               	movlw	high (_dataSequence+1)
  1641  001596  20F4               	addwfc	prodh,w,c
  1642  001598  6EDA               	movwf	fsr2h,c
  1643  00159A  C047  FFDF         	movff	storeData@receivedMex+2,indf2
  1644                           
  1645                           ;usart.c: 170:                 dataSequence[dataCounter].posY = receivedMex[3];
  1646  00159E  5061               	movf	_dataCounter^0,w,c
  1647  0015A0  0D04               	mullw	4
  1648  0015A2  0EDA               	movlw	low (_dataSequence+2)
  1649  0015A4  24F3               	addwf	243,w,c
  1650  0015A6  6ED9               	movwf	fsr2l,c
  1651  0015A8  0E00               	movlw	high (_dataSequence+2)
  1652  0015AA  20F4               	addwfc	prodh,w,c
  1653  0015AC  6EDA               	movwf	fsr2h,c
  1654  0015AE  C048  FFDF         	movff	storeData@receivedMex+3,indf2
  1655                           
  1656                           ;usart.c: 171:                 dataSequence[dataCounter].rotation = receivedMex[4];
  1657  0015B2  5061               	movf	_dataCounter^0,w,c
  1658  0015B4  0D04               	mullw	4
  1659  0015B6  0EDB               	movlw	low (_dataSequence+3)
  1660  0015B8  24F3               	addwf	243,w,c
  1661  0015BA  6ED9               	movwf	fsr2l,c
  1662  0015BC  0E00               	movlw	high (_dataSequence+3)
  1663  0015BE  20F4               	addwfc	prodh,w,c
  1664  0015C0  6EDA               	movwf	fsr2h,c
  1665  0015C2  C049  FFDF         	movff	storeData@receivedMex+4,indf2
  1666  0015C6                     
  1667                           ;usart.c: 173:                 dataCounter++;
  1668  0015C6  2A61               	incf	_dataCounter^0,f,c
  1669                           
  1670                           ;usart.c: 174:                 break;
  1671  0015C8  EF21  F00B         	goto	l562
  1672  0015CC                     l559:
  1673  0015CC  FFFF               	dw	65535	; assembler added errata NOP
  1674                           
  1675                           ;usart.c: 177:                 newSequenceData.L = receivedMex[1];
  1676  0015CE  C046  F0EC         	movff	storeData@receivedMex+1,_newSequenceData
  1677                           
  1678                           ;usart.c: 178:                 newSequenceData.W = receivedMex[2];
  1679  0015D2  C047  F0ED         	movff	storeData@receivedMex+2,_newSequenceData+1
  1680                           
  1681                           ;usart.c: 179:                 newSequenceData.init_posX = receivedMex[3];
  1682  0015D6  C048  F0EE         	movff	storeData@receivedMex+3,_newSequenceData+2
  1683                           
  1684                           ;usart.c: 180:                 newSequenceData.init_posY = receivedMex[4];
  1685  0015DA  C049  F0EF         	movff	storeData@receivedMex+4,_newSequenceData+3
  1686                           
  1687                           ;usart.c: 181:                 newSequenceData.init_rot = receivedMex[5];
  1688  0015DE  C04A  F0F0         	movff	storeData@receivedMex+5,_newSequenceData+4
  1689                           
  1690                           ;usart.c: 182:                 newSequenceData.end_posX = receivedMex[6];
  1691  0015E2  C04B  F0F1         	movff	storeData@receivedMex+6,_newSequenceData+5
  1692                           
  1693                           ;usart.c: 183:                 newSequenceData.end_posY = receivedMex[7];
  1694  0015E6  C04C  F0F2         	movff	storeData@receivedMex+7,_newSequenceData+6
  1695                           
  1696                           ;usart.c: 184:                 newSequenceData.end_rot = receivedMex[8];
  1697  0015EA  C04D  F0F3         	movff	storeData@receivedMex+8,_newSequenceData+7
  1698  0015EE                     
  1699                           ;usart.c: 186:                 _newSequence = 1;
  1700  0015EE  0E01               	movlw	1
  1701  0015F0  6E5F               	movwf	__newSequence^0,c
  1702                           
  1703                           ;usart.c: 187:                 break;
  1704  0015F2  EF21  F00B         	goto	l562
  1705  0015F6                     l4071:
  1706  0015F6  FFFF               	dw	65535	; assembler added errata NOP
  1707                           
  1708                           ;usart.c: 190:                 _fatalError = 1;
  1709  0015F8  0E01               	movlw	1
  1710  0015FA  6E60               	movwf	__fatalError^0,c
  1711                           
  1712                           ;usart.c: 191:                 break;
  1713  0015FC  EF21  F00B         	goto	l562
  1714  001600                     l4073:
  1715  001600  FFFF               	dw	65535	; assembler added errata NOP
  1716                           
  1717                           ;usart.c: 194:                 printError(8);
  1718  001602  0E08               	movlw	8
  1719  001604  EC70  F00C         	call	_printError
  1720                           
  1721                           ;usart.c: 195:                 break;
  1722  001608  EF21  F00B         	goto	l562
  1723  00160C                     l4077:
  1724  00160C  FFFF               	dw	65535	; assembler added errata NOP
  1725  00160E  5045               	movf	storeData@receivedMex^0,w,c
  1726  001610  6E19               	movwf	??_storeData^0,c
  1727  001612  6A1A               	clrf	(??_storeData+1)^0,c
  1728                           
  1729                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1730                           ; Switch size 1, requested type "simple"
  1731                           ; Number of cases is 1, Range of values is 0 to 0
  1732                           ; switch strategies available:
  1733                           ; Name         Instructions Cycles
  1734                           ; simple_byte            4     3 (average)
  1735                           ;	Chosen strategy is simple_byte
  1736  001614  501A               	movf	(??_storeData+1)^0,w,c
  1737  001616  0A00               	xorlw	0	; case 0
  1738  001618  B4D8               	btfsc	status,2,c
  1739  00161A  EF11  F00B         	goto	l4461
  1740  00161E  EF00  F00B         	goto	l4073
  1741  001622                     l4461:
  1742  001622  FFFF               	dw	65535	; assembler added errata NOP
  1743                           
  1744                           ; Switch size 1, requested type "simple"
  1745                           ; Number of cases is 3, Range of values is 0 to 2
  1746                           ; switch strategies available:
  1747                           ; Name         Instructions Cycles
  1748                           ; simple_byte           10     6 (average)
  1749                           ;	Chosen strategy is simple_byte
  1750  001624  5019               	movf	??_storeData^0,w,c
  1751  001626  0A00               	xorlw	0	; case 0
  1752  001628  B4D8               	btfsc	status,2,c
  1753  00162A  EFBA  F00A         	goto	l4065
  1754  00162E  0A01               	xorlw	1	; case 1
  1755  001630  B4D8               	btfsc	status,2,c
  1756  001632  EFE6  F00A         	goto	l559
  1757  001636  0A03               	xorlw	3	; case 2
  1758  001638  B4D8               	btfsc	status,2,c
  1759  00163A  EFFB  F00A         	goto	l4071
  1760  00163E  EF00  F00B         	goto	l4073
  1761  001642                     l562:
  1762  001642  FFFF               	dw	65535	; assembler added errata NOP
  1763  001644  0012               	return		;funcret
  1764  001646  FFFF               	dw	65535	; errata NOP
  1765  001648                     __end_of_storeData:
  1766                           	callstack 0
  1767                           
  1768 ;; *************** function _printError *****************
  1769 ;; Defined at:
  1770 ;;		line 53 in file "usart.c"
  1771 ;; Parameters:    Size  Location     Type
  1772 ;;  errCode         1    wreg     unsigned char 
  1773 ;; Auto vars:     Size  Location     Type
  1774 ;;  errCode         1   23[COMRAM] unsigned char 
  1775 ;; Return value:  Size  Location     Type
  1776 ;;                  1    wreg      void 
  1777 ;; Registers used:
  1778 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1779 ;; Tracked objects:
  1780 ;;		On entry : 0/0
  1781 ;;		On exit  : 0/0
  1782 ;;		Unchanged: 0/0
  1783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1784 ;;      Params:         0       0       0       0       0       0       0
  1785 ;;      Locals:         1       0       0       0       0       0       0
  1786 ;;      Temps:          2       0       0       0       0       0       0
  1787 ;;      Totals:         3       0       0       0       0       0       0
  1788 ;;Total ram usage:        3 bytes
  1789 ;; Hardware stack levels used:    1
  1790 ;; Hardware stack levels required when called:    5
  1791 ;; This function calls:
  1792 ;;		_uartTx
  1793 ;; This function is called by:
  1794 ;;		_main
  1795 ;;		_storeData
  1796 ;; This function uses a non-reentrant model
  1797 ;;
  1798                           
  1799                           	psect	text5
  1800  0018E0                     __ptext5:
  1801                           	callstack 0
  1802  0018E0                     _printError:
  1803                           	callstack 0
  1804  0018E0  FFFF               	dw	65535	; assembler added errata NOP
  1805                           
  1806                           ;incstack = 0
  1807                           ;printError@errCode stored from wreg
  1808  0018E2  6E18               	movwf	printError@errCode^0,c
  1809  0018E4                     
  1810                           ;usart.c: 55:     switch(errCode){
  1811  0018E4  EFCC  F00C         	goto	l3921
  1812  0018E8                     l3903:
  1813  0018E8  FFFF               	dw	65535	; assembler added errata NOP
  1814                           
  1815                           ;usart.c: 57:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  1816  0018EA  0EA4               	movlw	low _errString_Feed
  1817  0018EC  6E12               	movwf	uartTx@ptr^0,c
  1818  0018EE  0E00               	movlw	high _errString_Feed
  1819  0018F0  6E13               	movwf	(uartTx@ptr+1)^0,c
  1820  0018F2  0E1D               	movlw	29
  1821  0018F4  6E14               	movwf	uartTx@length^0,c
  1822  0018F6  EC52  F011         	call	_uartTx	;wreg free
  1823                           
  1824                           ;usart.c: 58:             break;
  1825  0018FA  EFFB  F00C         	goto	l518
  1826  0018FE                     l3905:
  1827  0018FE  FFFF               	dw	65535	; assembler added errata NOP
  1828                           
  1829                           ;usart.c: 60:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  1830  001900  0E5C               	movlw	low _errString_ZEND
  1831  001902  6E12               	movwf	uartTx@ptr^0,c
  1832  001904  0E01               	movlw	high _errString_ZEND
  1833  001906  6E13               	movwf	(uartTx@ptr+1)^0,c
  1834  001908  0E28               	movlw	40
  1835  00190A  6E14               	movwf	uartTx@length^0,c
  1836  00190C  EC52  F011         	call	_uartTx	;wreg free
  1837                           
  1838                           ;usart.c: 61:             break;
  1839  001910  EFFB  F00C         	goto	l518
  1840  001914                     l3907:
  1841  001914  FFFF               	dw	65535	; assembler added errata NOP
  1842                           
  1843                           ;usart.c: 63:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  1844  001916  0E84               	movlw	low _errString_Reset
  1845  001918  6E12               	movwf	uartTx@ptr^0,c
  1846  00191A  0E01               	movlw	high _errString_Reset
  1847  00191C  6E13               	movwf	(uartTx@ptr+1)^0,c
  1848  00191E  0E27               	movlw	39
  1849  001920  6E14               	movwf	uartTx@length^0,c
  1850  001922  EC52  F011         	call	_uartTx	;wreg free
  1851                           
  1852                           ;usart.c: 64:             break;
  1853  001926  EFFB  F00C         	goto	l518
  1854  00192A                     l3909:
  1855  00192A  FFFF               	dw	65535	; assembler added errata NOP
  1856                           
  1857                           ;usart.c: 66:             uartTx(&errString_Point[0], sizeof(errString_Point));
  1858  00192C  0E34               	movlw	low _errString_Point
  1859  00192E  6E12               	movwf	uartTx@ptr^0,c
  1860  001930  0E01               	movlw	high _errString_Point
  1861  001932  6E13               	movwf	(uartTx@ptr+1)^0,c
  1862  001934  0E28               	movlw	40
  1863  001936  6E14               	movwf	uartTx@length^0,c
  1864  001938  EC52  F011         	call	_uartTx	;wreg free
  1865                           
  1866                           ;usart.c: 67:             break;
  1867  00193C  EFFB  F00C         	goto	l518
  1868  001940                     l3911:
  1869  001940  FFFF               	dw	65535	; assembler added errata NOP
  1870                           
  1871                           ;usart.c: 69:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  1872  001942  0E84               	movlw	low _errString_Bound
  1873  001944  6E12               	movwf	uartTx@ptr^0,c
  1874  001946  0E00               	movlw	high _errString_Bound
  1875  001948  6E13               	movwf	(uartTx@ptr+1)^0,c
  1876  00194A  0E20               	movlw	32
  1877  00194C  6E14               	movwf	uartTx@length^0,c
  1878  00194E  EC52  F011         	call	_uartTx	;wreg free
  1879                           
  1880                           ;usart.c: 70:             break;
  1881  001952  EFFB  F00C         	goto	l518
  1882  001956                     l3913:
  1883  001956  FFFF               	dw	65535	; assembler added errata NOP
  1884                           
  1885                           ;usart.c: 72:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  1886  001958  0E00               	movlw	low _errString_PointZ
  1887  00195A  6E12               	movwf	uartTx@ptr^0,c
  1888  00195C  0E01               	movlw	high _errString_PointZ
  1889  00195E  6E13               	movwf	(uartTx@ptr+1)^0,c
  1890  001960  0E34               	movlw	52
  1891  001962  6E14               	movwf	uartTx@length^0,c
  1892  001964  EC52  F011         	call	_uartTx	;wreg free
  1893                           
  1894                           ;usart.c: 73:             break;
  1895  001968  EFFB  F00C         	goto	l518
  1896  00196C                     l3915:
  1897  00196C  FFFF               	dw	65535	; assembler added errata NOP
  1898                           
  1899                           ;usart.c: 75:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  1900  00196E  0EAB               	movlw	low _errString_Fatal
  1901  001970  6E12               	movwf	uartTx@ptr^0,c
  1902  001972  0E01               	movlw	high _errString_Fatal
  1903  001974  6E13               	movwf	(uartTx@ptr+1)^0,c
  1904  001976  0E26               	movlw	38
  1905  001978  6E14               	movwf	uartTx@length^0,c
  1906  00197A  EC52  F011         	call	_uartTx	;wreg free
  1907                           
  1908                           ;usart.c: 76:             break;
  1909  00197E  EFFB  F00C         	goto	l518
  1910  001982                     l3917:
  1911  001982  FFFF               	dw	65535	; assembler added errata NOP
  1912                           
  1913                           ;usart.c: 78:             uartTx(&errString_Command[0], sizeof(errString_Command));
  1914  001984  0EC1               	movlw	low _errString_Command
  1915  001986  6E12               	movwf	uartTx@ptr^0,c
  1916  001988  0E00               	movlw	high _errString_Command
  1917  00198A  6E13               	movwf	(uartTx@ptr+1)^0,c
  1918  00198C  0E17               	movlw	23
  1919  00198E  6E14               	movwf	uartTx@length^0,c
  1920  001990  EC52  F011         	call	_uartTx	;wreg free
  1921                           
  1922                           ;usart.c: 79:             break;
  1923  001994  EFFB  F00C         	goto	l518
  1924  001998                     l3921:
  1925  001998  FFFF               	dw	65535	; assembler added errata NOP
  1926  00199A  5018               	movf	printError@errCode^0,w,c
  1927  00199C  6E16               	movwf	??_printError^0,c
  1928  00199E  6A17               	clrf	(??_printError+1)^0,c
  1929                           
  1930                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1931                           ; Switch size 1, requested type "simple"
  1932                           ; Number of cases is 1, Range of values is 0 to 0
  1933                           ; switch strategies available:
  1934                           ; Name         Instructions Cycles
  1935                           ; simple_byte            4     3 (average)
  1936                           ;	Chosen strategy is simple_byte
  1937  0019A0  5017               	movf	(??_printError+1)^0,w,c
  1938  0019A2  0A00               	xorlw	0	; case 0
  1939  0019A4  B4D8               	btfsc	status,2,c
  1940  0019A6  EFD7  F00C         	goto	l4463
  1941  0019AA  EFFB  F00C         	goto	l518
  1942  0019AE                     l4463:
  1943  0019AE  FFFF               	dw	65535	; assembler added errata NOP
  1944                           
  1945                           ; Switch size 1, requested type "simple"
  1946                           ; Number of cases is 8, Range of values is 1 to 8
  1947                           ; switch strategies available:
  1948                           ; Name         Instructions Cycles
  1949                           ; simple_byte           25    13 (average)
  1950                           ;	Chosen strategy is simple_byte
  1951  0019B0  5016               	movf	??_printError^0,w,c
  1952  0019B2  0A01               	xorlw	1	; case 1
  1953  0019B4  B4D8               	btfsc	status,2,c
  1954  0019B6  EF74  F00C         	goto	l3903
  1955  0019BA  0A03               	xorlw	3	; case 2
  1956  0019BC  B4D8               	btfsc	status,2,c
  1957  0019BE  EF7F  F00C         	goto	l3905
  1958  0019C2  0A01               	xorlw	1	; case 3
  1959  0019C4  B4D8               	btfsc	status,2,c
  1960  0019C6  EF8A  F00C         	goto	l3907
  1961  0019CA  0A07               	xorlw	7	; case 4
  1962  0019CC  B4D8               	btfsc	status,2,c
  1963  0019CE  EF95  F00C         	goto	l3909
  1964  0019D2  0A01               	xorlw	1	; case 5
  1965  0019D4  B4D8               	btfsc	status,2,c
  1966  0019D6  EFA0  F00C         	goto	l3911
  1967  0019DA  0A03               	xorlw	3	; case 6
  1968  0019DC  B4D8               	btfsc	status,2,c
  1969  0019DE  EFAB  F00C         	goto	l3913
  1970  0019E2  0A01               	xorlw	1	; case 7
  1971  0019E4  B4D8               	btfsc	status,2,c
  1972  0019E6  EFB6  F00C         	goto	l3915
  1973  0019EA  0A0F               	xorlw	15	; case 8
  1974  0019EC  B4D8               	btfsc	status,2,c
  1975  0019EE  EFC1  F00C         	goto	l3917
  1976  0019F2  EFFB  F00C         	goto	l518
  1977  0019F6                     l518:
  1978  0019F6  FFFF               	dw	65535	; assembler added errata NOP
  1979  0019F8  0012               	return		;funcret
  1980  0019FA  FFFF               	dw	65535	; errata NOP
  1981  0019FC                     __end_of_printError:
  1982                           	callstack 0
  1983                           
  1984 ;; *************** function _uartTx *****************
  1985 ;; Defined at:
  1986 ;;		line 221 in file "usart.c"
  1987 ;; Parameters:    Size  Location     Type
  1988 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  1989 ;;		 -> errString_Command(23), errString_Fatal(38), errString_PointZ(52), errString_Bound(32), 
  1990 ;;		 -> errString_Point(40), errString_Reset(39), errString_ZEND(40), errString_Feed(29), 
  1991 ;;  length          1   19[COMRAM] unsigned char 
  1992 ;; Auto vars:     Size  Location     Type
  1993 ;;  i               1   20[COMRAM] unsigned char 
  1994 ;; Return value:  Size  Location     Type
  1995 ;;                  1    wreg      void 
  1996 ;; Registers used:
  1997 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1998 ;; Tracked objects:
  1999 ;;		On entry : 0/0
  2000 ;;		On exit  : 0/0
  2001 ;;		Unchanged: 0/0
  2002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2003 ;;      Params:         3       0       0       0       0       0       0
  2004 ;;      Locals:         1       0       0       0       0       0       0
  2005 ;;      Temps:          0       0       0       0       0       0       0
  2006 ;;      Totals:         4       0       0       0       0       0       0
  2007 ;;Total ram usage:        4 bytes
  2008 ;; Hardware stack levels used:    1
  2009 ;; Hardware stack levels required when called:    4
  2010 ;; This function calls:
  2011 ;;		Nothing
  2012 ;; This function is called by:
  2013 ;;		_printError
  2014 ;; This function uses a non-reentrant model
  2015 ;;
  2016                           
  2017                           	psect	text6
  2018  0022A4                     __ptext6:
  2019                           	callstack 0
  2020  0022A4                     _uartTx:
  2021                           	callstack 0
  2022  0022A4  FFFF               	dw	65535	; assembler added errata NOP
  2023  0022A6                     
  2024                           ;usart.c: 221: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 222: {;usa
      +                          rt.c: 224:     for(char i = 1; i < length; i++){
  2025  0022A6  0E01               	movlw	1
  2026  0022A8  6E15               	movwf	uartTx@i^0,c
  2027  0022AA  EF6B  F011         	goto	l3409
  2028  0022AE                     l3405:
  2029  0022AE  FFFF               	dw	65535	; assembler added errata NOP
  2030                           
  2031                           ;usart.c: 226:         TXREG = *ptr;
  2032  0022B0  C012  FFD9         	movff	uartTx@ptr,fsr2l
  2033  0022B4  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  2034  0022B8  50DF               	movf	indf2,w,c
  2035  0022BA  6EAD               	movwf	173,c	;volatile
  2036  0022BC                     l573:
  2037  0022BC  FFFF               	dw	65535	; assembler added errata NOP
  2038  0022BE  A2AC               	btfss	172,1,c	;volatile
  2039  0022C0  EF64  F011         	goto	u2421
  2040  0022C4  EF67  F011         	goto	u2420
  2041  0022C8                     u2421:
  2042  0022C8  FFFF               	dw	65535	; assembler added errata NOP
  2043  0022CA  EF5E  F011         	goto	l573
  2044  0022CE                     u2420:
  2045  0022CE  FFFF               	dw	65535	; assembler added errata NOP
  2046  0022D0                     
  2047                           ;usart.c: 230:         ptr++;
  2048  0022D0  4A12               	infsnz	uartTx@ptr^0,f,c
  2049  0022D2  2A13               	incf	(uartTx@ptr+1)^0,f,c
  2050                           
  2051                           ;usart.c: 231:     }
  2052  0022D4  2A15               	incf	uartTx@i^0,f,c
  2053  0022D6                     l3409:
  2054  0022D6  FFFF               	dw	65535	; assembler added errata NOP
  2055  0022D8  5014               	movf	uartTx@length^0,w,c
  2056  0022DA  5C15               	subwf	uartTx@i^0,w,c
  2057  0022DC  A0D8               	btfss	status,0,c
  2058  0022DE  EF73  F011         	goto	u2431
  2059  0022E2  EF76  F011         	goto	u2430
  2060  0022E6                     u2431:
  2061  0022E6  FFFF               	dw	65535	; assembler added errata NOP
  2062  0022E8  EF57  F011         	goto	l3405
  2063  0022EC                     u2430:
  2064  0022EC  FFFF               	dw	65535	; assembler added errata NOP
  2065  0022EE  0012               	return		;funcret
  2066  0022F0  FFFF               	dw	65535	; errata NOP
  2067  0022F2                     __end_of_uartTx:
  2068                           	callstack 0
  2069                           
  2070 ;; *************** function _shiftData *****************
  2071 ;; Defined at:
  2072 ;;		line 120 in file "usart.c"
  2073 ;; Parameters:    Size  Location     Type
  2074 ;;		None
  2075 ;; Auto vars:     Size  Location     Type
  2076 ;;  i               1   19[COMRAM] unsigned char 
  2077 ;; Return value:  Size  Location     Type
  2078 ;;                  1    wreg      void 
  2079 ;; Registers used:
  2080 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2081 ;; Tracked objects:
  2082 ;;		On entry : 0/0
  2083 ;;		On exit  : 0/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2086 ;;      Params:         0       0       0       0       0       0       0
  2087 ;;      Locals:         1       0       0       0       0       0       0
  2088 ;;      Temps:          2       0       0       0       0       0       0
  2089 ;;      Totals:         3       0       0       0       0       0       0
  2090 ;;Total ram usage:        3 bytes
  2091 ;; Hardware stack levels used:    1
  2092 ;; Hardware stack levels required when called:    4
  2093 ;; This function calls:
  2094 ;;		Nothing
  2095 ;; This function is called by:
  2096 ;;		_main
  2097 ;; This function uses a non-reentrant model
  2098 ;;
  2099                           
  2100                           	psect	text7
  2101  0021EC                     __ptext7:
  2102                           	callstack 0
  2103  0021EC                     _shiftData:
  2104                           	callstack 0
  2105  0021EC  FFFF               	dw	65535	; assembler added errata NOP
  2106  0021EE                     
  2107                           ;usart.c: 121:     char i;;usart.c: 123:     for(i = 0; i < 4; i++){
  2108  0021EE  0E00               	movlw	0
  2109  0021F0  6E14               	movwf	shiftData@i^0,c
  2110  0021F2                     l4161:
  2111  0021F2  FFFF               	dw	65535	; assembler added errata NOP
  2112                           
  2113                           ;usart.c: 124:         dataSequence[i] = dataSequence[i+1];
  2114  0021F4  5014               	movf	shiftData@i^0,w,c
  2115  0021F6  6E12               	movwf	??_shiftData^0,c
  2116  0021F8  6A13               	clrf	(??_shiftData+1)^0,c
  2117  0021FA  90D8               	bcf	status,0,c
  2118  0021FC  3612               	rlcf	??_shiftData^0,f,c
  2119  0021FE  3613               	rlcf	(??_shiftData+1)^0,f,c
  2120  002200  90D8               	bcf	status,0,c
  2121  002202  3612               	rlcf	??_shiftData^0,f,c
  2122  002204  3613               	rlcf	(??_shiftData+1)^0,f,c
  2123  002206  0EDC               	movlw	low (_dataSequence+4)
  2124  002208  2412               	addwf	??_shiftData^0,w,c
  2125  00220A  6ED9               	movwf	fsr2l,c
  2126  00220C  0E00               	movlw	high (_dataSequence+4)
  2127  00220E  2013               	addwfc	(??_shiftData+1)^0,w,c
  2128  002210  6EDA               	movwf	fsr2h,c
  2129  002212  5014               	movf	shiftData@i^0,w,c
  2130  002214  0D04               	mullw	4
  2131  002216  0ED8               	movlw	low _dataSequence
  2132  002218  24F3               	addwf	243,w,c
  2133  00221A  6EE1               	movwf	fsr1l,c
  2134  00221C  0E00               	movlw	high _dataSequence
  2135  00221E  20F4               	addwfc	prodh,w,c
  2136  002220  6EE2               	movwf	fsr1h,c
  2137  002222  CFDE FFE6          	movff	postinc2,postinc1
  2138  002226  CFDE FFE6          	movff	postinc2,postinc1
  2139  00222A  CFDE FFE6          	movff	postinc2,postinc1
  2140  00222E  CFDE FFE6          	movff	postinc2,postinc1
  2141  002232                     
  2142                           ;usart.c: 125:     }
  2143  002232  2A14               	incf	shiftData@i^0,f,c
  2144  002234  0E03               	movlw	3
  2145  002236  6414               	cpfsgt	shiftData@i^0,c
  2146  002238  EF20  F011         	goto	u3411
  2147  00223C  EF23  F011         	goto	u3410
  2148  002240                     u3411:
  2149  002240  FFFF               	dw	65535	; assembler added errata NOP
  2150  002242  EFF9  F010         	goto	l4161
  2151  002246                     u3410:
  2152  002246  FFFF               	dw	65535	; assembler added errata NOP
  2153  002248  0012               	return		;funcret
  2154  00224A  FFFF               	dw	65535	; errata NOP
  2155  00224C                     __end_of_shiftData:
  2156                           	callstack 0
  2157                           
  2158 ;; *************** function _resetPosition *****************
  2159 ;; Defined at:
  2160 ;;		line 160 in file "motors.c"
  2161 ;; Parameters:    Size  Location     Type
  2162 ;;		None
  2163 ;; Auto vars:     Size  Location     Type
  2164 ;;  keepMovingZ     1   23[COMRAM] unsigned char 
  2165 ;;  keepMovingY     1   22[COMRAM] unsigned char 
  2166 ;;  keepMovingX     1   21[COMRAM] unsigned char 
  2167 ;; Return value:  Size  Location     Type
  2168 ;;                  1    wreg      unsigned char 
  2169 ;; Registers used:
  2170 ;;		wreg, status,2, status,0, cstack
  2171 ;; Tracked objects:
  2172 ;;		On entry : 0/0
  2173 ;;		On exit  : 0/0
  2174 ;;		Unchanged: 0/0
  2175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2176 ;;      Params:         0       0       0       0       0       0       0
  2177 ;;      Locals:         3       0       0       0       0       0       0
  2178 ;;      Temps:          0       0       0       0       0       0       0
  2179 ;;      Totals:         3       0       0       0       0       0       0
  2180 ;;Total ram usage:        3 bytes
  2181 ;; Hardware stack levels used:    1
  2182 ;; Hardware stack levels required when called:    5
  2183 ;; This function calls:
  2184 ;;		_enableMotor
  2185 ;;		_resetStep
  2186 ;;		_setDecay
  2187 ;;		_setDirection
  2188 ;;		_setStep
  2189 ;;		_stepMade
  2190 ;; This function is called by:
  2191 ;;		_main
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194                           
  2195                           	psect	text8
  2196  001184                     __ptext8:
  2197                           	callstack 0
  2198  001184                     _resetPosition:
  2199                           	callstack 0
  2200  001184  FFFF               	dw	65535	; assembler added errata NOP
  2201  001186                     
  2202                           ;motors.c: 162:     setStep(0, 0);
  2203  001186  0E00               	movlw	0
  2204  001188  6E12               	movwf	setStep@motor^0,c
  2205  00118A  0E00               	movlw	0
  2206  00118C  EC7E  F00E         	call	_setStep
  2207                           
  2208                           ;motors.c: 163:     setStep(1, 0);
  2209  001190  0E00               	movlw	0
  2210  001192  6E12               	movwf	setStep@motor^0,c
  2211  001194  0E01               	movlw	1
  2212  001196  EC7E  F00E         	call	_setStep
  2213                           
  2214                           ;motors.c: 164:     setStep(2, 0);
  2215  00119A  0E00               	movlw	0
  2216  00119C  6E12               	movwf	setStep@motor^0,c
  2217  00119E  0E02               	movlw	2
  2218  0011A0  EC7E  F00E         	call	_setStep
  2219                           
  2220                           ;motors.c: 166:     setDirection(0, 0);
  2221  0011A4  0E00               	movlw	0
  2222  0011A6  6E12               	movwf	setDirection@motor^0,c
  2223  0011A8  0E00               	movlw	0
  2224  0011AA  ECBC  F010         	call	_setDirection
  2225                           
  2226                           ;motors.c: 167:     setDirection(0, 1);
  2227  0011AE  0E01               	movlw	1
  2228  0011B0  6E12               	movwf	setDirection@motor^0,c
  2229  0011B2  0E00               	movlw	0
  2230  0011B4  ECBC  F010         	call	_setDirection
  2231                           
  2232                           ;motors.c: 168:     setDirection(0, 2);
  2233  0011B8  0E02               	movlw	2
  2234  0011BA  6E12               	movwf	setDirection@motor^0,c
  2235  0011BC  0E00               	movlw	0
  2236  0011BE  ECBC  F010         	call	_setDirection
  2237                           
  2238                           ;motors.c: 170:     setDecay(1, 0);
  2239  0011C2  0E00               	movlw	0
  2240  0011C4  6E12               	movwf	setDecay@motor^0,c
  2241  0011C6  0E01               	movlw	1
  2242  0011C8  EC48  F010         	call	_setDecay
  2243                           
  2244                           ;motors.c: 171:     setDecay(1, 1);
  2245  0011CC  0E01               	movlw	1
  2246  0011CE  6E12               	movwf	setDecay@motor^0,c
  2247  0011D0  0E01               	movlw	1
  2248  0011D2  EC48  F010         	call	_setDecay
  2249                           
  2250                           ;motors.c: 172:     setDecay(1, 2);
  2251  0011D6  0E02               	movlw	2
  2252  0011D8  6E12               	movwf	setDecay@motor^0,c
  2253  0011DA  0E01               	movlw	1
  2254  0011DC  EC48  F010         	call	_setDecay
  2255                           
  2256                           ;motors.c: 174:     enableMotor(0, 0);
  2257  0011E0  0E00               	movlw	0
  2258  0011E2  6E12               	movwf	enableMotor@motor^0,c
  2259  0011E4  0E00               	movlw	0
  2260  0011E6  EC82  F010         	call	_enableMotor
  2261                           
  2262                           ;motors.c: 175:     enableMotor(0, 1);
  2263  0011EA  0E01               	movlw	1
  2264  0011EC  6E12               	movwf	enableMotor@motor^0,c
  2265  0011EE  0E00               	movlw	0
  2266  0011F0  EC82  F010         	call	_enableMotor
  2267                           
  2268                           ;motors.c: 176:     enableMotor(0, 2);
  2269  0011F4  0E02               	movlw	2
  2270  0011F6  6E12               	movwf	enableMotor@motor^0,c
  2271  0011F8  0E00               	movlw	0
  2272  0011FA  EC82  F010         	call	_enableMotor
  2273  0011FE                     
  2274                           ;motors.c: 180:     unsigned char keepMovingX = 1;
  2275  0011FE  0E01               	movlw	1
  2276  001200  6E16               	movwf	resetPosition@keepMovingX^0,c
  2277  001202                     
  2278                           ;motors.c: 181:     unsigned char keepMovingY = 1;
  2279  001202  0E01               	movlw	1
  2280  001204  6E17               	movwf	resetPosition@keepMovingY^0,c
  2281  001206                     
  2282                           ;motors.c: 182:     unsigned char keepMovingZ = 1;
  2283  001206  0E01               	movlw	1
  2284  001208  6E18               	movwf	resetPosition@keepMovingZ^0,c
  2285  00120A                     
  2286                           ;motors.c: 185:     T2CONbits.TMR2ON = 1;
  2287  00120A  84CA               	bsf	202,2,c	;volatile
  2288  00120C                     
  2289                           ;motors.c: 187:     tm0Error = 0;
  2290  00120C  0E00               	movlw	0
  2291  00120E  6E5C               	movwf	(_tm0Error+1)^0,c
  2292  001210  0E00               	movlw	0
  2293  001212  6E5B               	movwf	_tm0Error^0,c
  2294  001214                     
  2295                           ;motors.c: 188:     tm0Limit = 200;
  2296  001214  0EC8               	movlw	200
  2297  001216  6E68               	movwf	_tm0Limit^0,c
  2298  001218                     
  2299                           ;motors.c: 189:     T0CONbits.TMR0ON = 1;
  2300  001218  8ED5               	bsf	213,7,c	;volatile
  2301                           
  2302                           ;motors.c: 191:     while(keepMovingX || keepMovingY || keepMovingZ){
  2303  00121A  EF90  F009         	goto	l3989
  2304  00121E                     l3967:
  2305  00121E  FFFF               	dw	65535	; assembler added errata NOP
  2306                           
  2307                           ;motors.c: 194:         if(tm0Error){
  2308  001220  505B               	movf	_tm0Error^0,w,c
  2309  001222  105C               	iorwf	(_tm0Error+1)^0,w,c
  2310  001224  B4D8               	btfsc	status,2,c
  2311  001226  EF17  F009         	goto	u3241
  2312  00122A  EF1A  F009         	goto	u3240
  2313  00122E                     u3241:
  2314  00122E  FFFF               	dw	65535	; assembler added errata NOP
  2315  001230  EF24  F009         	goto	l115
  2316  001234                     u3240:
  2317  001234  FFFF               	dw	65535	; assembler added errata NOP
  2318  001236                     
  2319                           ;motors.c: 196:             LATAbits.LATA2 = 0;
  2320  001236  9489               	bcf	137,2,c	;volatile
  2321                           
  2322                           ;motors.c: 197:             LATBbits.LATB4 = 0;
  2323  001238  988A               	bcf	138,4,c	;volatile
  2324                           
  2325                           ;motors.c: 198:             LATCbits.LATC2 = 0;
  2326  00123A  948B               	bcf	139,2,c	;volatile
  2327  00123C                     
  2328                           ;motors.c: 200:             tm0Error = 3;
  2329  00123C  0E00               	movlw	0
  2330  00123E  6E5C               	movwf	(_tm0Error+1)^0,c
  2331  001240  0E03               	movlw	3
  2332  001242  6E5B               	movwf	_tm0Error^0,c
  2333                           
  2334                           ;motors.c: 201:             break;
  2335  001244  EFAE  F009         	goto	l116
  2336  001248                     l115:
  2337  001248  FFFF               	dw	65535	; assembler added errata NOP
  2338                           
  2339                           ;motors.c: 208:         if(PORTEbits.RE0 || !keepMovingX){
  2340  00124A  B084               	btfsc	132,0,c	;volatile
  2341  00124C  EF2A  F009         	goto	u3251
  2342  001250  EF2D  F009         	goto	u3250
  2343  001254                     u3251:
  2344  001254  FFFF               	dw	65535	; assembler added errata NOP
  2345  001256  EF37  F009         	goto	l3975
  2346  00125A                     u3250:
  2347  00125A  FFFF               	dw	65535	; assembler added errata NOP
  2348  00125C  5016               	movf	resetPosition@keepMovingX^0,w,c
  2349  00125E  A4D8               	btfss	status,2,c
  2350  001260  EF34  F009         	goto	u3261
  2351  001264  EF37  F009         	goto	u3260
  2352  001268                     u3261:
  2353  001268  FFFF               	dw	65535	; assembler added errata NOP
  2354  00126A  EF3C  F009         	goto	l117
  2355  00126E                     u3260:
  2356  00126E                     l3975:
  2357  00126E  FFFF               	dw	65535	; assembler added errata NOP
  2358                           
  2359                           ;motors.c: 210:             keepMovingX = 0;
  2360  001270  0E00               	movlw	0
  2361  001272  6E16               	movwf	resetPosition@keepMovingX^0,c
  2362                           
  2363                           ;motors.c: 211:         }else{
  2364  001274  EF3E  F009         	goto	l120
  2365  001278                     l117:
  2366  001278  FFFF               	dw	65535	; assembler added errata NOP
  2367                           
  2368                           ;motors.c: 213:             LATAbits.LATA2 = 1;
  2369  00127A  8489               	bsf	137,2,c	;volatile
  2370  00127C                     l120:
  2371  00127C  FFFF               	dw	65535	; assembler added errata NOP
  2372                           
  2373                           ;motors.c: 217:         if(PORTEbits.RE1 || !keepMovingY){
  2374  00127E  B284               	btfsc	132,1,c	;volatile
  2375  001280  EF44  F009         	goto	u3271
  2376  001284  EF47  F009         	goto	u3270
  2377  001288                     u3271:
  2378  001288  FFFF               	dw	65535	; assembler added errata NOP
  2379  00128A  EF51  F009         	goto	l3979
  2380  00128E                     u3270:
  2381  00128E  FFFF               	dw	65535	; assembler added errata NOP
  2382  001290  5017               	movf	resetPosition@keepMovingY^0,w,c
  2383  001292  A4D8               	btfss	status,2,c
  2384  001294  EF4E  F009         	goto	u3281
  2385  001298  EF51  F009         	goto	u3280
  2386  00129C                     u3281:
  2387  00129C  FFFF               	dw	65535	; assembler added errata NOP
  2388  00129E  EF56  F009         	goto	l121
  2389  0012A2                     u3280:
  2390  0012A2                     l3979:
  2391  0012A2  FFFF               	dw	65535	; assembler added errata NOP
  2392                           
  2393                           ;motors.c: 219:             keepMovingY = 0;
  2394  0012A4  0E00               	movlw	0
  2395  0012A6  6E17               	movwf	resetPosition@keepMovingY^0,c
  2396                           
  2397                           ;motors.c: 220:         }else{
  2398  0012A8  EF58  F009         	goto	l124
  2399  0012AC                     l121:
  2400  0012AC  FFFF               	dw	65535	; assembler added errata NOP
  2401                           
  2402                           ;motors.c: 222:             LATBbits.LATB4 = 1;
  2403  0012AE  888A               	bsf	138,4,c	;volatile
  2404  0012B0                     l124:
  2405  0012B0  FFFF               	dw	65535	; assembler added errata NOP
  2406                           
  2407                           ;motors.c: 226:         if(PORTEbits.RE2 || !keepMovingZ){
  2408  0012B2  B484               	btfsc	132,2,c	;volatile
  2409  0012B4  EF5E  F009         	goto	u3291
  2410  0012B8  EF61  F009         	goto	u3290
  2411  0012BC                     u3291:
  2412  0012BC  FFFF               	dw	65535	; assembler added errata NOP
  2413  0012BE  EF6B  F009         	goto	l3983
  2414  0012C2                     u3290:
  2415  0012C2  FFFF               	dw	65535	; assembler added errata NOP
  2416  0012C4  5018               	movf	resetPosition@keepMovingZ^0,w,c
  2417  0012C6  A4D8               	btfss	status,2,c
  2418  0012C8  EF68  F009         	goto	u3301
  2419  0012CC  EF6B  F009         	goto	u3300
  2420  0012D0                     u3301:
  2421  0012D0  FFFF               	dw	65535	; assembler added errata NOP
  2422  0012D2  EF70  F009         	goto	l125
  2423  0012D6                     u3300:
  2424  0012D6                     l3983:
  2425  0012D6  FFFF               	dw	65535	; assembler added errata NOP
  2426                           
  2427                           ;motors.c: 228:             keepMovingZ = 0;
  2428  0012D8  0E00               	movlw	0
  2429  0012DA  6E18               	movwf	resetPosition@keepMovingZ^0,c
  2430                           
  2431                           ;motors.c: 229:         }else{
  2432  0012DC  EF72  F009         	goto	l3985
  2433  0012E0                     l125:
  2434  0012E0  FFFF               	dw	65535	; assembler added errata NOP
  2435                           
  2436                           ;motors.c: 231:             LATCbits.LATC2 = 1;
  2437  0012E2  848B               	bsf	139,2,c	;volatile
  2438  0012E4                     l3985:
  2439  0012E4  FFFF               	dw	65535	; assembler added errata NOP
  2440  0012E6  ECFC  F011         	call	_stepMade	;wreg free
  2441  0012EA  5012               	movf	?_stepMade^0,w,c
  2442  0012EC  1013               	iorwf	(?_stepMade+1)^0,w,c
  2443  0012EE  B4D8               	btfsc	status,2,c
  2444  0012F0  EF7C  F009         	goto	u3311
  2445  0012F4  EF7F  F009         	goto	u3310
  2446  0012F8                     u3311:
  2447  0012F8  FFFF               	dw	65535	; assembler added errata NOP
  2448  0012FA  EF72  F009         	goto	l3985
  2449  0012FE                     u3310:
  2450  0012FE  FFFF               	dw	65535	; assembler added errata NOP
  2451  001300                     
  2452                           ;motors.c: 238:         LATAbits.LATA2 = 0;
  2453  001300  9489               	bcf	137,2,c	;volatile
  2454                           
  2455                           ;motors.c: 239:         LATBbits.LATB4 = 0;
  2456  001302  988A               	bcf	138,4,c	;volatile
  2457                           
  2458                           ;motors.c: 240:         LATCbits.LATC2 = 0;
  2459  001304  948B               	bcf	139,2,c	;volatile
  2460  001306                     l3987:
  2461  001306  FFFF               	dw	65535	; assembler added errata NOP
  2462  001308  ECFC  F011         	call	_stepMade	;wreg free
  2463  00130C  5012               	movf	?_stepMade^0,w,c
  2464  00130E  1013               	iorwf	(?_stepMade+1)^0,w,c
  2465  001310  B4D8               	btfsc	status,2,c
  2466  001312  EF8D  F009         	goto	u3321
  2467  001316  EF90  F009         	goto	u3320
  2468  00131A                     u3321:
  2469  00131A  FFFF               	dw	65535	; assembler added errata NOP
  2470  00131C  EF83  F009         	goto	l3987
  2471  001320                     u3320:
  2472  001320                     l3989:
  2473  001320  FFFF               	dw	65535	; assembler added errata NOP
  2474                           
  2475                           ;motors.c: 191:     while(keepMovingX || keepMovingY || keepMovingZ){
  2476  001322  5016               	movf	resetPosition@keepMovingX^0,w,c
  2477  001324  A4D8               	btfss	status,2,c
  2478  001326  EF97  F009         	goto	u3331
  2479  00132A  EF9A  F009         	goto	u3330
  2480  00132E                     u3331:
  2481  00132E  FFFF               	dw	65535	; assembler added errata NOP
  2482  001330  EF0F  F009         	goto	l3967
  2483  001334                     u3330:
  2484  001334  FFFF               	dw	65535	; assembler added errata NOP
  2485  001336  5017               	movf	resetPosition@keepMovingY^0,w,c
  2486  001338  A4D8               	btfss	status,2,c
  2487  00133A  EFA1  F009         	goto	u3341
  2488  00133E  EFA4  F009         	goto	u3340
  2489  001342                     u3341:
  2490  001342  FFFF               	dw	65535	; assembler added errata NOP
  2491  001344  EF0F  F009         	goto	l3967
  2492  001348                     u3340:
  2493  001348  FFFF               	dw	65535	; assembler added errata NOP
  2494  00134A  5018               	movf	resetPosition@keepMovingZ^0,w,c
  2495  00134C  A4D8               	btfss	status,2,c
  2496  00134E  EFAB  F009         	goto	u3351
  2497  001352  EFAE  F009         	goto	u3350
  2498  001356                     u3351:
  2499  001356  FFFF               	dw	65535	; assembler added errata NOP
  2500  001358  EF0F  F009         	goto	l3967
  2501  00135C                     u3350:
  2502  00135C                     l116:
  2503  00135C  FFFF               	dw	65535	; assembler added errata NOP
  2504                           
  2505                           ;motors.c: 247:     T0CONbits.TMR0ON = 0;
  2506  00135E  9ED5               	bcf	213,7,c	;volatile
  2507                           
  2508                           ;motors.c: 248:     T2CONbits.TMR2ON = 0;
  2509  001360  94CA               	bcf	202,2,c	;volatile
  2510  001362                     
  2511                           ;motors.c: 250:     TMR0 = 0;
  2512  001362  0E00               	movlw	0
  2513  001364  6ED7               	movwf	215,c	;volatile
  2514  001366  0E00               	movlw	0
  2515  001368  6ED6               	movwf	214,c	;volatile
  2516                           
  2517                           ;motors.c: 251:     TMR2 = 0;
  2518  00136A  0E00               	movlw	0
  2519  00136C  6ECC               	movwf	204,c	;volatile
  2520  00136E                     
  2521                           ;motors.c: 254:     resetStep();
  2522  00136E  EC58  F012         	call	_resetStep	;wreg free
  2523  001372  0012               	return		;funcret
  2524  001374  FFFF               	dw	65535	; errata NOP
  2525  001376                     __end_of_resetPosition:
  2526                           	callstack 0
  2527                           
  2528 ;; *************** function _setStep *****************
  2529 ;; Defined at:
  2530 ;;		line 69 in file "motors.c"
  2531 ;; Parameters:    Size  Location     Type
  2532 ;;  step            1    wreg     unsigned char 
  2533 ;;  motor           1   17[COMRAM] unsigned char 
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;  step            1   20[COMRAM] unsigned char 
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  1    wreg      void 
  2538 ;; Registers used:
  2539 ;;		wreg, status,2, status,0
  2540 ;; Tracked objects:
  2541 ;;		On entry : 0/0
  2542 ;;		On exit  : 0/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2545 ;;      Params:         1       0       0       0       0       0       0
  2546 ;;      Locals:         1       0       0       0       0       0       0
  2547 ;;      Temps:          2       0       0       0       0       0       0
  2548 ;;      Totals:         4       0       0       0       0       0       0
  2549 ;;Total ram usage:        4 bytes
  2550 ;; Hardware stack levels used:    1
  2551 ;; Hardware stack levels required when called:    4
  2552 ;; This function calls:
  2553 ;;		Nothing
  2554 ;; This function is called by:
  2555 ;;		_resetPosition
  2556 ;; This function uses a non-reentrant model
  2557 ;;
  2558                           
  2559                           	psect	text9
  2560  001CFC                     __ptext9:
  2561                           	callstack 0
  2562  001CFC                     _setStep:
  2563                           	callstack 0
  2564  001CFC  FFFF               	dw	65535	; assembler added errata NOP
  2565                           
  2566                           ;incstack = 0
  2567                           ;setStep@step stored from wreg
  2568  001CFE  6E15               	movwf	setStep@step^0,c
  2569  001D00                     
  2570                           ;motors.c: 70:     switch(motor){
  2571  001D00  EFCB  F00E         	goto	l3649
  2572  001D04                     l3641:
  2573  001D04  FFFF               	dw	65535	; assembler added errata NOP
  2574                           
  2575                           ;motors.c: 73:             LATAbits.LATA5 = (step & 0x01);
  2576  001D06  C015  F013         	movff	setStep@step,??_setStep
  2577  001D0A  0E01               	movlw	1
  2578  001D0C  1613               	andwf	??_setStep^0,f,c
  2579  001D0E  3A13               	swapf	??_setStep^0,f,c
  2580  001D10  4613               	rlncf	??_setStep^0,f,c
  2581  001D12  5089               	movf	137,w,c	;volatile
  2582  001D14  1813               	xorwf	??_setStep^0,w,c
  2583  001D16  0BDF               	andlw	-33
  2584  001D18  1813               	xorwf	??_setStep^0,w,c
  2585  001D1A  6E89               	movwf	137,c	;volatile
  2586                           
  2587                           ;motors.c: 75:             LATBbits.LATB0 = (step & 0x02);
  2588  001D1C  C015  F013         	movff	setStep@step,??_setStep
  2589  001D20  0E02               	movlw	2
  2590  001D22  1613               	andwf	??_setStep^0,f,c
  2591  001D24  508A               	movf	138,w,c	;volatile
  2592  001D26  1813               	xorwf	??_setStep^0,w,c
  2593  001D28  0BFE               	andlw	-2
  2594  001D2A  1813               	xorwf	??_setStep^0,w,c
  2595  001D2C  6E8A               	movwf	138,c	;volatile
  2596                           
  2597                           ;motors.c: 76:             break;
  2598  001D2E  EFE6  F00E         	goto	l83
  2599  001D32                     l3643:
  2600  001D32  FFFF               	dw	65535	; assembler added errata NOP
  2601                           
  2602                           ;motors.c: 78:             LATBbits.LATB6 = (step & 0x01);
  2603  001D34  C015  F013         	movff	setStep@step,??_setStep
  2604  001D38  0E01               	movlw	1
  2605  001D3A  1613               	andwf	??_setStep^0,f,c
  2606  001D3C  3A13               	swapf	??_setStep^0,f,c
  2607  001D3E  4613               	rlncf	??_setStep^0,f,c
  2608  001D40  4613               	rlncf	??_setStep^0,f,c
  2609  001D42  508A               	movf	138,w,c	;volatile
  2610  001D44  1813               	xorwf	??_setStep^0,w,c
  2611  001D46  0BBF               	andlw	-65
  2612  001D48  1813               	xorwf	??_setStep^0,w,c
  2613  001D4A  6E8A               	movwf	138,c	;volatile
  2614                           
  2615                           ;motors.c: 79:             LATBbits.LATB7 = (step & 0x02);
  2616  001D4C  C015  F013         	movff	setStep@step,??_setStep
  2617  001D50  0E02               	movlw	2
  2618  001D52  1613               	andwf	??_setStep^0,f,c
  2619  001D54  3213               	rrcf	??_setStep^0,f,c
  2620  001D56  3213               	rrcf	??_setStep^0,f,c
  2621  001D58  508A               	movf	138,w,c	;volatile
  2622  001D5A  1813               	xorwf	??_setStep^0,w,c
  2623  001D5C  0B7F               	andlw	-129
  2624  001D5E  1813               	xorwf	??_setStep^0,w,c
  2625  001D60  6E8A               	movwf	138,c	;volatile
  2626                           
  2627                           ;motors.c: 80:             break;
  2628  001D62  EFE6  F00E         	goto	l83
  2629  001D66                     l3645:
  2630  001D66  FFFF               	dw	65535	; assembler added errata NOP
  2631                           
  2632                           ;motors.c: 82:             LATCbits.LATC4 = (step & 0x01);
  2633  001D68  C015  F013         	movff	setStep@step,??_setStep
  2634  001D6C  0E01               	movlw	1
  2635  001D6E  1613               	andwf	??_setStep^0,f,c
  2636  001D70  3A13               	swapf	??_setStep^0,f,c
  2637  001D72  508B               	movf	139,w,c	;volatile
  2638  001D74  1813               	xorwf	??_setStep^0,w,c
  2639  001D76  0BEF               	andlw	-17
  2640  001D78  1813               	xorwf	??_setStep^0,w,c
  2641  001D7A  6E8B               	movwf	139,c	;volatile
  2642                           
  2643                           ;motors.c: 83:             LATCbits.LATC5 = (step & 0x02);
  2644  001D7C  C015  F013         	movff	setStep@step,??_setStep
  2645  001D80  0E02               	movlw	2
  2646  001D82  1613               	andwf	??_setStep^0,f,c
  2647  001D84  3A13               	swapf	??_setStep^0,f,c
  2648  001D86  4613               	rlncf	??_setStep^0,f,c
  2649  001D88  508B               	movf	139,w,c	;volatile
  2650  001D8A  1813               	xorwf	??_setStep^0,w,c
  2651  001D8C  0BDF               	andlw	-33
  2652  001D8E  1813               	xorwf	??_setStep^0,w,c
  2653  001D90  6E8B               	movwf	139,c	;volatile
  2654                           
  2655                           ;motors.c: 84:             break;
  2656  001D92  EFE6  F00E         	goto	l83
  2657  001D96                     l3649:
  2658  001D96  FFFF               	dw	65535	; assembler added errata NOP
  2659  001D98  5012               	movf	setStep@motor^0,w,c
  2660  001D9A  6E13               	movwf	??_setStep^0,c
  2661  001D9C  6A14               	clrf	(??_setStep+1)^0,c
  2662                           
  2663                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2664                           ; Switch size 1, requested type "simple"
  2665                           ; Number of cases is 1, Range of values is 0 to 0
  2666                           ; switch strategies available:
  2667                           ; Name         Instructions Cycles
  2668                           ; simple_byte            4     3 (average)
  2669                           ;	Chosen strategy is simple_byte
  2670  001D9E  5014               	movf	(??_setStep+1)^0,w,c
  2671  001DA0  0A00               	xorlw	0	; case 0
  2672  001DA2  B4D8               	btfsc	status,2,c
  2673  001DA4  EFD6  F00E         	goto	l4465
  2674  001DA8  EFE6  F00E         	goto	l83
  2675  001DAC                     l4465:
  2676  001DAC  FFFF               	dw	65535	; assembler added errata NOP
  2677                           
  2678                           ; Switch size 1, requested type "simple"
  2679                           ; Number of cases is 3, Range of values is 0 to 2
  2680                           ; switch strategies available:
  2681                           ; Name         Instructions Cycles
  2682                           ; simple_byte           10     6 (average)
  2683                           ;	Chosen strategy is simple_byte
  2684  001DAE  5013               	movf	??_setStep^0,w,c
  2685  001DB0  0A00               	xorlw	0	; case 0
  2686  001DB2  B4D8               	btfsc	status,2,c
  2687  001DB4  EF82  F00E         	goto	l3641
  2688  001DB8  0A01               	xorlw	1	; case 1
  2689  001DBA  B4D8               	btfsc	status,2,c
  2690  001DBC  EF99  F00E         	goto	l3643
  2691  001DC0  0A03               	xorlw	3	; case 2
  2692  001DC2  B4D8               	btfsc	status,2,c
  2693  001DC4  EFB3  F00E         	goto	l3645
  2694  001DC8  EFE6  F00E         	goto	l83
  2695  001DCC                     l83:
  2696  001DCC  FFFF               	dw	65535	; assembler added errata NOP
  2697  001DCE  0012               	return		;funcret
  2698  001DD0  FFFF               	dw	65535	; errata NOP
  2699  001DD2                     __end_of_setStep:
  2700                           	callstack 0
  2701                           
  2702 ;; *************** function _setDecay *****************
  2703 ;; Defined at:
  2704 ;;		line 138 in file "motors.c"
  2705 ;; Parameters:    Size  Location     Type
  2706 ;;  decay           1    wreg     unsigned char 
  2707 ;;  motor           1   17[COMRAM] unsigned char 
  2708 ;; Auto vars:     Size  Location     Type
  2709 ;;  decay           1   20[COMRAM] unsigned char 
  2710 ;; Return value:  Size  Location     Type
  2711 ;;                  1    wreg      void 
  2712 ;; Registers used:
  2713 ;;		wreg, status,2, status,0
  2714 ;; Tracked objects:
  2715 ;;		On entry : 0/0
  2716 ;;		On exit  : 0/0
  2717 ;;		Unchanged: 0/0
  2718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2719 ;;      Params:         1       0       0       0       0       0       0
  2720 ;;      Locals:         1       0       0       0       0       0       0
  2721 ;;      Temps:          2       0       0       0       0       0       0
  2722 ;;      Totals:         4       0       0       0       0       0       0
  2723 ;;Total ram usage:        4 bytes
  2724 ;; Hardware stack levels used:    1
  2725 ;; Hardware stack levels required when called:    4
  2726 ;; This function calls:
  2727 ;;		Nothing
  2728 ;; This function is called by:
  2729 ;;		_resetPosition
  2730 ;; This function uses a non-reentrant model
  2731 ;;
  2732                           
  2733                           	psect	text10
  2734  002090                     __ptext10:
  2735                           	callstack 0
  2736  002090                     _setDecay:
  2737                           	callstack 0
  2738  002090  FFFF               	dw	65535	; assembler added errata NOP
  2739                           
  2740                           ;incstack = 0
  2741                           ;setDecay@decay stored from wreg
  2742  002092  6E15               	movwf	setDecay@decay^0,c
  2743  002094                     
  2744                           ;motors.c: 139:     switch(motor){
  2745  002094  EF64  F010         	goto	l3681
  2746  002098                     l3673:
  2747  002098  FFFF               	dw	65535	; assembler added errata NOP
  2748                           
  2749                           ;motors.c: 141:             LATBbits.LATB2 = decay;
  2750  00209A  B015               	btfsc	setDecay@decay^0,0,c
  2751  00209C  D002               	bra	u2875
  2752  00209E  948A               	bcf	138,2,c	;volatile
  2753  0020A0  D001               	bra	u2876
  2754  0020A2                     u2875:
  2755  0020A2  848A               	bsf	138,2,c	;volatile
  2756  0020A4                     u2876:
  2757                           
  2758                           ;motors.c: 142:             break;
  2759  0020A4  EF7F  F010         	goto	l110
  2760  0020A8                     l3675:
  2761  0020A8  FFFF               	dw	65535	; assembler added errata NOP
  2762                           
  2763                           ;motors.c: 144:             LATCbits.LATC0 = decay;
  2764  0020AA  B015               	btfsc	setDecay@decay^0,0,c
  2765  0020AC  D002               	bra	u2885
  2766  0020AE  908B               	bcf	139,0,c	;volatile
  2767  0020B0  D001               	bra	u2886
  2768  0020B2                     u2885:
  2769  0020B2  808B               	bsf	139,0,c	;volatile
  2770  0020B4                     u2886:
  2771                           
  2772                           ;motors.c: 145:             break;
  2773  0020B4  EF7F  F010         	goto	l110
  2774  0020B8                     l3677:
  2775  0020B8  FFFF               	dw	65535	; assembler added errata NOP
  2776                           
  2777                           ;motors.c: 147:             LATDbits.LATD0 = decay;
  2778  0020BA  B015               	btfsc	setDecay@decay^0,0,c
  2779  0020BC  D002               	bra	u2895
  2780  0020BE  908C               	bcf	140,0,c	;volatile
  2781  0020C0  D001               	bra	u2896
  2782  0020C2                     u2895:
  2783  0020C2  808C               	bsf	140,0,c	;volatile
  2784  0020C4                     u2896:
  2785                           
  2786                           ;motors.c: 148:             break;
  2787  0020C4  EF7F  F010         	goto	l110
  2788  0020C8                     l3681:
  2789  0020C8  FFFF               	dw	65535	; assembler added errata NOP
  2790  0020CA  5012               	movf	setDecay@motor^0,w,c
  2791  0020CC  6E13               	movwf	??_setDecay^0,c
  2792  0020CE  6A14               	clrf	(??_setDecay+1)^0,c
  2793                           
  2794                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2795                           ; Switch size 1, requested type "simple"
  2796                           ; Number of cases is 1, Range of values is 0 to 0
  2797                           ; switch strategies available:
  2798                           ; Name         Instructions Cycles
  2799                           ; simple_byte            4     3 (average)
  2800                           ;	Chosen strategy is simple_byte
  2801  0020D0  5014               	movf	(??_setDecay+1)^0,w,c
  2802  0020D2  0A00               	xorlw	0	; case 0
  2803  0020D4  B4D8               	btfsc	status,2,c
  2804  0020D6  EF6F  F010         	goto	l4467
  2805  0020DA  EF7F  F010         	goto	l110
  2806  0020DE                     l4467:
  2807  0020DE  FFFF               	dw	65535	; assembler added errata NOP
  2808                           
  2809                           ; Switch size 1, requested type "simple"
  2810                           ; Number of cases is 3, Range of values is 0 to 2
  2811                           ; switch strategies available:
  2812                           ; Name         Instructions Cycles
  2813                           ; simple_byte           10     6 (average)
  2814                           ;	Chosen strategy is simple_byte
  2815  0020E0  5013               	movf	??_setDecay^0,w,c
  2816  0020E2  0A00               	xorlw	0	; case 0
  2817  0020E4  B4D8               	btfsc	status,2,c
  2818  0020E6  EF4C  F010         	goto	l3673
  2819  0020EA  0A01               	xorlw	1	; case 1
  2820  0020EC  B4D8               	btfsc	status,2,c
  2821  0020EE  EF54  F010         	goto	l3675
  2822  0020F2  0A03               	xorlw	3	; case 2
  2823  0020F4  B4D8               	btfsc	status,2,c
  2824  0020F6  EF5C  F010         	goto	l3677
  2825  0020FA  EF7F  F010         	goto	l110
  2826  0020FE                     l110:
  2827  0020FE  FFFF               	dw	65535	; assembler added errata NOP
  2828  002100  0012               	return		;funcret
  2829  002102  FFFF               	dw	65535	; errata NOP
  2830  002104                     __end_of_setDecay:
  2831                           	callstack 0
  2832                           
  2833 ;; *************** function _enableMotor *****************
  2834 ;; Defined at:
  2835 ;;		line 96 in file "motors.c"
  2836 ;; Parameters:    Size  Location     Type
  2837 ;;  enable          1    wreg     unsigned char 
  2838 ;;  motor           1   17[COMRAM] unsigned char 
  2839 ;; Auto vars:     Size  Location     Type
  2840 ;;  enable          1   20[COMRAM] unsigned char 
  2841 ;; Return value:  Size  Location     Type
  2842 ;;                  1    wreg      void 
  2843 ;; Registers used:
  2844 ;;		wreg, status,2, status,0
  2845 ;; Tracked objects:
  2846 ;;		On entry : 0/0
  2847 ;;		On exit  : 0/0
  2848 ;;		Unchanged: 0/0
  2849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2850 ;;      Params:         1       0       0       0       0       0       0
  2851 ;;      Locals:         1       0       0       0       0       0       0
  2852 ;;      Temps:          2       0       0       0       0       0       0
  2853 ;;      Totals:         4       0       0       0       0       0       0
  2854 ;;Total ram usage:        4 bytes
  2855 ;; Hardware stack levels used:    1
  2856 ;; Hardware stack levels required when called:    4
  2857 ;; This function calls:
  2858 ;;		Nothing
  2859 ;; This function is called by:
  2860 ;;		_resetPosition
  2861 ;;		_main
  2862 ;; This function uses a non-reentrant model
  2863 ;;
  2864                           
  2865                           	psect	text11
  2866  002104                     __ptext11:
  2867                           	callstack 0
  2868  002104                     _enableMotor:
  2869                           	callstack 0
  2870  002104  FFFF               	dw	65535	; assembler added errata NOP
  2871                           
  2872                           ;incstack = 0
  2873                           ;enableMotor@enable stored from wreg
  2874  002106  6E15               	movwf	enableMotor@enable^0,c
  2875  002108                     
  2876                           ;motors.c: 97:     switch(motor){
  2877  002108  EF9E  F010         	goto	l3665
  2878  00210C                     l3657:
  2879  00210C  FFFF               	dw	65535	; assembler added errata NOP
  2880                           
  2881                           ;motors.c: 99:             LATAbits.LATA3 = enable;
  2882  00210E  B015               	btfsc	enableMotor@enable^0,0,c
  2883  002110  D002               	bra	u2845
  2884  002112  9689               	bcf	137,3,c	;volatile
  2885  002114  D001               	bra	u2846
  2886  002116                     u2845:
  2887  002116  8689               	bsf	137,3,c	;volatile
  2888  002118                     u2846:
  2889                           
  2890                           ;motors.c: 100:             break;
  2891  002118  EFB9  F010         	goto	l92
  2892  00211C                     l3659:
  2893  00211C  FFFF               	dw	65535	; assembler added errata NOP
  2894                           
  2895                           ;motors.c: 102:             LATBbits.LATB5 = enable;
  2896  00211E  B015               	btfsc	enableMotor@enable^0,0,c
  2897  002120  D002               	bra	u2855
  2898  002122  9A8A               	bcf	138,5,c	;volatile
  2899  002124  D001               	bra	u2856
  2900  002126                     u2855:
  2901  002126  8A8A               	bsf	138,5,c	;volatile
  2902  002128                     u2856:
  2903                           
  2904                           ;motors.c: 103:             break;
  2905  002128  EFB9  F010         	goto	l92
  2906  00212C                     l3661:
  2907  00212C  FFFF               	dw	65535	; assembler added errata NOP
  2908                           
  2909                           ;motors.c: 105:             LATCbits.LATC3 = enable;
  2910  00212E  B015               	btfsc	enableMotor@enable^0,0,c
  2911  002130  D002               	bra	u2865
  2912  002132  968B               	bcf	139,3,c	;volatile
  2913  002134  D001               	bra	u2866
  2914  002136                     u2865:
  2915  002136  868B               	bsf	139,3,c	;volatile
  2916  002138                     u2866:
  2917                           
  2918                           ;motors.c: 106:             break;
  2919  002138  EFB9  F010         	goto	l92
  2920  00213C                     l3665:
  2921  00213C  FFFF               	dw	65535	; assembler added errata NOP
  2922  00213E  5012               	movf	enableMotor@motor^0,w,c
  2923  002140  6E13               	movwf	??_enableMotor^0,c
  2924  002142  6A14               	clrf	(??_enableMotor+1)^0,c
  2925                           
  2926                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2927                           ; Switch size 1, requested type "simple"
  2928                           ; Number of cases is 1, Range of values is 0 to 0
  2929                           ; switch strategies available:
  2930                           ; Name         Instructions Cycles
  2931                           ; simple_byte            4     3 (average)
  2932                           ;	Chosen strategy is simple_byte
  2933  002144  5014               	movf	(??_enableMotor+1)^0,w,c
  2934  002146  0A00               	xorlw	0	; case 0
  2935  002148  B4D8               	btfsc	status,2,c
  2936  00214A  EFA9  F010         	goto	l4469
  2937  00214E  EFB9  F010         	goto	l92
  2938  002152                     l4469:
  2939  002152  FFFF               	dw	65535	; assembler added errata NOP
  2940                           
  2941                           ; Switch size 1, requested type "simple"
  2942                           ; Number of cases is 3, Range of values is 0 to 2
  2943                           ; switch strategies available:
  2944                           ; Name         Instructions Cycles
  2945                           ; simple_byte           10     6 (average)
  2946                           ;	Chosen strategy is simple_byte
  2947  002154  5013               	movf	??_enableMotor^0,w,c
  2948  002156  0A00               	xorlw	0	; case 0
  2949  002158  B4D8               	btfsc	status,2,c
  2950  00215A  EF86  F010         	goto	l3657
  2951  00215E  0A01               	xorlw	1	; case 1
  2952  002160  B4D8               	btfsc	status,2,c
  2953  002162  EF8E  F010         	goto	l3659
  2954  002166  0A03               	xorlw	3	; case 2
  2955  002168  B4D8               	btfsc	status,2,c
  2956  00216A  EF96  F010         	goto	l3661
  2957  00216E  EFB9  F010         	goto	l92
  2958  002172                     l92:
  2959  002172  FFFF               	dw	65535	; assembler added errata NOP
  2960  002174  0012               	return		;funcret
  2961  002176  FFFF               	dw	65535	; errata NOP
  2962  002178                     __end_of_enableMotor:
  2963                           	callstack 0
  2964                           
  2965 ;; *************** function _resetNewSequence *****************
  2966 ;; Defined at:
  2967 ;;		line 112 in file "usart.c"
  2968 ;; Parameters:    Size  Location     Type
  2969 ;;		None
  2970 ;; Auto vars:     Size  Location     Type
  2971 ;;		None
  2972 ;; Return value:  Size  Location     Type
  2973 ;;                  1    wreg      void 
  2974 ;; Registers used:
  2975 ;;		wreg, status,2
  2976 ;; Tracked objects:
  2977 ;;		On entry : 0/0
  2978 ;;		On exit  : 0/0
  2979 ;;		Unchanged: 0/0
  2980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2981 ;;      Params:         0       0       0       0       0       0       0
  2982 ;;      Locals:         0       0       0       0       0       0       0
  2983 ;;      Temps:          0       0       0       0       0       0       0
  2984 ;;      Totals:         0       0       0       0       0       0       0
  2985 ;;Total ram usage:        0 bytes
  2986 ;; Hardware stack levels used:    1
  2987 ;; Hardware stack levels required when called:    4
  2988 ;; This function calls:
  2989 ;;		Nothing
  2990 ;; This function is called by:
  2991 ;;		_main
  2992 ;; This function uses a non-reentrant model
  2993 ;;
  2994                           
  2995                           	psect	text12
  2996  002488                     __ptext12:
  2997                           	callstack 0
  2998  002488                     _resetNewSequence:
  2999                           	callstack 0
  3000  002488  FFFF               	dw	65535	; assembler added errata NOP
  3001  00248A                     
  3002                           ;usart.c: 113:     _newSequence = 0;
  3003  00248A  0E00               	movlw	0
  3004  00248C  6E5F               	movwf	__newSequence^0,c
  3005  00248E  0012               	return		;funcret
  3006  002490  FFFF               	dw	65535	; errata NOP
  3007  002492                     __end_of_resetNewSequence:
  3008                           	callstack 0
  3009                           
  3010 ;; *************** function _reduceSeq *****************
  3011 ;; Defined at:
  3012 ;;		line 89 in file "usart.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;		None
  3015 ;; Auto vars:     Size  Location     Type
  3016 ;;		None
  3017 ;; Return value:  Size  Location     Type
  3018 ;;                  1    wreg      void 
  3019 ;; Registers used:
  3020 ;;		status,2, status,0
  3021 ;; Tracked objects:
  3022 ;;		On entry : 0/0
  3023 ;;		On exit  : 0/0
  3024 ;;		Unchanged: 0/0
  3025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3026 ;;      Params:         0       0       0       0       0       0       0
  3027 ;;      Locals:         0       0       0       0       0       0       0
  3028 ;;      Temps:          0       0       0       0       0       0       0
  3029 ;;      Totals:         0       0       0       0       0       0       0
  3030 ;;Total ram usage:        0 bytes
  3031 ;; Hardware stack levels used:    1
  3032 ;; Hardware stack levels required when called:    4
  3033 ;; This function calls:
  3034 ;;		Nothing
  3035 ;; This function is called by:
  3036 ;;		_main
  3037 ;; This function uses a non-reentrant model
  3038 ;;
  3039                           
  3040                           	psect	text13
  3041  0024D8                     __ptext13:
  3042                           	callstack 0
  3043  0024D8                     _reduceSeq:
  3044                           	callstack 0
  3045  0024D8  FFFF               	dw	65535	; assembler added errata NOP
  3046  0024DA                     
  3047                           ;usart.c: 90:     dataCounter--;
  3048  0024DA  0661               	decf	_dataCounter^0,f,c
  3049  0024DC  0012               	return		;funcret
  3050  0024DE  FFFF               	dw	65535	; errata NOP
  3051  0024E0                     __end_of_reduceSeq:
  3052                           	callstack 0
  3053                           
  3054 ;; *************** function _readSeq *****************
  3055 ;; Defined at:
  3056 ;;		line 96 in file "usart.c"
  3057 ;; Parameters:    Size  Location     Type
  3058 ;;		None
  3059 ;; Auto vars:     Size  Location     Type
  3060 ;;		None
  3061 ;; Return value:  Size  Location     Type
  3062 ;;                  1    wreg      unsigned char 
  3063 ;; Registers used:
  3064 ;;		wreg, status,2
  3065 ;; Tracked objects:
  3066 ;;		On entry : 0/0
  3067 ;;		On exit  : 0/0
  3068 ;;		Unchanged: 0/0
  3069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3070 ;;      Params:         0       0       0       0       0       0       0
  3071 ;;      Locals:         0       0       0       0       0       0       0
  3072 ;;      Temps:          0       0       0       0       0       0       0
  3073 ;;      Totals:         0       0       0       0       0       0       0
  3074 ;;Total ram usage:        0 bytes
  3075 ;; Hardware stack levels used:    1
  3076 ;; Hardware stack levels required when called:    4
  3077 ;; This function calls:
  3078 ;;		Nothing
  3079 ;; This function is called by:
  3080 ;;		_main
  3081 ;; This function uses a non-reentrant model
  3082 ;;
  3083                           
  3084                           	psect	text14
  3085  0024E0                     __ptext14:
  3086                           	callstack 0
  3087  0024E0                     _readSeq:
  3088                           	callstack 0
  3089  0024E0  FFFF               	dw	65535	; assembler added errata NOP
  3090  0024E2                     
  3091                           ;usart.c: 97:     return dataCounter;
  3092  0024E2  5061               	movf	_dataCounter^0,w,c
  3093  0024E4  0012               	return		;funcret
  3094  0024E6  FFFF               	dw	65535	; errata NOP
  3095  0024E8                     __end_of_readSeq:
  3096                           	callstack 0
  3097                           
  3098 ;; *************** function _newSequence *****************
  3099 ;; Defined at:
  3100 ;;		line 104 in file "usart.c"
  3101 ;; Parameters:    Size  Location     Type
  3102 ;;		None
  3103 ;; Auto vars:     Size  Location     Type
  3104 ;;		None
  3105 ;; Return value:  Size  Location     Type
  3106 ;;                  1    wreg      unsigned char 
  3107 ;; Registers used:
  3108 ;;		wreg, status,2
  3109 ;; Tracked objects:
  3110 ;;		On entry : 0/0
  3111 ;;		On exit  : 0/0
  3112 ;;		Unchanged: 0/0
  3113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3114 ;;      Params:         0       0       0       0       0       0       0
  3115 ;;      Locals:         0       0       0       0       0       0       0
  3116 ;;      Temps:          0       0       0       0       0       0       0
  3117 ;;      Totals:         0       0       0       0       0       0       0
  3118 ;;Total ram usage:        0 bytes
  3119 ;; Hardware stack levels used:    1
  3120 ;; Hardware stack levels required when called:    4
  3121 ;; This function calls:
  3122 ;;		Nothing
  3123 ;; This function is called by:
  3124 ;;		_main
  3125 ;; This function uses a non-reentrant model
  3126 ;;
  3127                           
  3128                           	psect	text15
  3129  0024E8                     __ptext15:
  3130                           	callstack 0
  3131  0024E8                     _newSequence:
  3132                           	callstack 0
  3133  0024E8  FFFF               	dw	65535	; assembler added errata NOP
  3134  0024EA                     
  3135                           ;usart.c: 105:     return _newSequence;
  3136  0024EA  505F               	movf	__newSequence^0,w,c
  3137  0024EC  0012               	return		;funcret
  3138  0024EE  FFFF               	dw	65535	; errata NOP
  3139  0024F0                     __end_of_newSequence:
  3140                           	callstack 0
  3141                           
  3142 ;; *************** function _interruptInit *****************
  3143 ;; Defined at:
  3144 ;;		line 107 in file "main.c"
  3145 ;; Parameters:    Size  Location     Type
  3146 ;;		None
  3147 ;; Auto vars:     Size  Location     Type
  3148 ;;		None
  3149 ;; Return value:  Size  Location     Type
  3150 ;;                  1    wreg      void 
  3151 ;; Registers used:
  3152 ;;		None
  3153 ;; Tracked objects:
  3154 ;;		On entry : 0/0
  3155 ;;		On exit  : 0/0
  3156 ;;		Unchanged: 0/0
  3157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3158 ;;      Params:         0       0       0       0       0       0       0
  3159 ;;      Locals:         0       0       0       0       0       0       0
  3160 ;;      Temps:          0       0       0       0       0       0       0
  3161 ;;      Totals:         0       0       0       0       0       0       0
  3162 ;;Total ram usage:        0 bytes
  3163 ;; Hardware stack levels used:    1
  3164 ;; Hardware stack levels required when called:    4
  3165 ;; This function calls:
  3166 ;;		Nothing
  3167 ;; This function is called by:
  3168 ;;		_main
  3169 ;; This function uses a non-reentrant model
  3170 ;;
  3171                           
  3172                           	psect	text16
  3173  002340                     __ptext16:
  3174                           	callstack 0
  3175  002340                     _interruptInit:
  3176                           	callstack 0
  3177  002340  FFFF               	dw	65535	; assembler added errata NOP
  3178  002342                     
  3179                           ;main.c: 109:     if(!INTCONbits.GIE){
  3180  002342  BEF2               	btfsc	242,7,c	;volatile
  3181  002344  EFA6  F011         	goto	u3361
  3182  002348  EFA9  F011         	goto	u3360
  3183  00234C                     u3361:
  3184  00234C  FFFF               	dw	65535	; assembler added errata NOP
  3185  00234E  EFAB  F011         	goto	l321
  3186  002352                     u3360:
  3187  002352  FFFF               	dw	65535	; assembler added errata NOP
  3188  002354                     
  3189                           ;main.c: 110:         INTCONbits.GIE = 1;
  3190  002354  8EF2               	bsf	242,7,c	;volatile
  3191  002356                     l321:
  3192  002356  FFFF               	dw	65535	; assembler added errata NOP
  3193                           
  3194                           ;main.c: 112:     if(!INTCONbits.PEIE){
  3195  002358  BCF2               	btfsc	242,6,c	;volatile
  3196  00235A  EFB1  F011         	goto	u3371
  3197  00235E  EFB4  F011         	goto	u3370
  3198  002362                     u3371:
  3199  002362  FFFF               	dw	65535	; assembler added errata NOP
  3200  002364  EFB6  F011         	goto	l322
  3201  002368                     u3370:
  3202  002368  FFFF               	dw	65535	; assembler added errata NOP
  3203  00236A                     
  3204                           ;main.c: 113:         INTCONbits.PEIE = 1;
  3205  00236A  8CF2               	bsf	242,6,c	;volatile
  3206  00236C                     l322:
  3207  00236C  FFFF               	dw	65535	; assembler added errata NOP
  3208                           
  3209                           ;main.c: 117:     RCONbits.IPEN = 1;
  3210  00236E  8ED0               	bsf	208,7,c	;volatile
  3211                           
  3212                           ;main.c: 118:     INTCONbits.T0IE = 1;
  3213  002370  8AF2               	bsf	242,5,c	;volatile
  3214                           
  3215                           ;main.c: 119:     PIE1bits.TMR2IE = 1;
  3216  002372  829D               	bsf	157,1,c	;volatile
  3217                           
  3218                           ;main.c: 120:     PIE1bits.RC1IE = 1;
  3219  002374  8A9D               	bsf	157,5,c	;volatile
  3220  002376  0012               	return		;funcret
  3221  002378  FFFF               	dw	65535	; errata NOP
  3222  00237A                     __end_of_interruptInit:
  3223                           	callstack 0
  3224                           
  3225 ;; *************** function _initPinMotors *****************
  3226 ;; Defined at:
  3227 ;;		line 44 in file "motors.c"
  3228 ;; Parameters:    Size  Location     Type
  3229 ;;		None
  3230 ;; Auto vars:     Size  Location     Type
  3231 ;;		None
  3232 ;; Return value:  Size  Location     Type
  3233 ;;                  1    wreg      void 
  3234 ;; Registers used:
  3235 ;;		wreg, status,2, status,0
  3236 ;; Tracked objects:
  3237 ;;		On entry : 0/0
  3238 ;;		On exit  : 0/0
  3239 ;;		Unchanged: 0/0
  3240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3241 ;;      Params:         0       0       0       0       0       0       0
  3242 ;;      Locals:         0       0       0       0       0       0       0
  3243 ;;      Temps:          0       0       0       0       0       0       0
  3244 ;;      Totals:         0       0       0       0       0       0       0
  3245 ;;Total ram usage:        0 bytes
  3246 ;; Hardware stack levels used:    1
  3247 ;; Hardware stack levels required when called:    4
  3248 ;; This function calls:
  3249 ;;		Nothing
  3250 ;; This function is called by:
  3251 ;;		_main
  3252 ;; This function uses a non-reentrant model
  3253 ;;
  3254                           
  3255                           	psect	text17
  3256  00237A                     __ptext17:
  3257                           	callstack 0
  3258  00237A                     _initPinMotors:
  3259                           	callstack 0
  3260  00237A  FFFF               	dw	65535	; assembler added errata NOP
  3261  00237C                     
  3262                           ;motors.c: 46:     ADCON1bits.PCFG = 0x06;
  3263  00237C  50C1               	movf	193,w,c	;volatile
  3264  00237E  0BF0               	andlw	-16
  3265  002380  0906               	iorlw	6
  3266  002382  6EC1               	movwf	193,c	;volatile
  3267  002384                     
  3268                           ;motors.c: 47:     TRISA &= 0b11010001;
  3269  002384  0ED1               	movlw	209
  3270  002386  1692               	andwf	146,f,c	;volatile
  3271  002388                     
  3272                           ;motors.c: 49:     TRISB &= 0b00000010;
  3273  002388  0E02               	movlw	2
  3274  00238A  1693               	andwf	147,f,c	;volatile
  3275  00238C                     
  3276                           ;motors.c: 50:     TRISC &= 0b11000000;
  3277  00238C  0EC0               	movlw	192
  3278  00238E  1694               	andwf	148,f,c	;volatile
  3279  002390                     
  3280                           ;motors.c: 51:     TRISD &= 0b11000000;
  3281  002390  0EC0               	movlw	192
  3282  002392  1695               	andwf	149,f,c	;volatile
  3283  002394                     
  3284                           ;motors.c: 54:     TRISEbits.TRISE0 = 1;
  3285  002394  8096               	bsf	150,0,c	;volatile
  3286  002396                     
  3287                           ;motors.c: 55:     TRISEbits.TRISE1 = 1;
  3288  002396  8296               	bsf	150,1,c	;volatile
  3289  002398                     
  3290                           ;motors.c: 56:     TRISEbits.TRISE2 = 1;
  3291  002398  8496               	bsf	150,2,c	;volatile
  3292  00239A                     
  3293                           ;motors.c: 59:     TRISDbits.TRISD7 = 1;
  3294  00239A  8E95               	bsf	149,7,c	;volatile
  3295  00239C  0012               	return		;funcret
  3296  00239E  FFFF               	dw	65535	; errata NOP
  3297  0023A0                     __end_of_initPinMotors:
  3298                           	callstack 0
  3299                           
  3300 ;; *************** function _initADC *****************
  3301 ;; Defined at:
  3302 ;;		line 18 in file "adc.c"
  3303 ;; Parameters:    Size  Location     Type
  3304 ;;		None
  3305 ;; Auto vars:     Size  Location     Type
  3306 ;;		None
  3307 ;; Return value:  Size  Location     Type
  3308 ;;                  1    wreg      void 
  3309 ;; Registers used:
  3310 ;;		wreg, status,2
  3311 ;; Tracked objects:
  3312 ;;		On entry : 0/0
  3313 ;;		On exit  : 0/0
  3314 ;;		Unchanged: 0/0
  3315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3316 ;;      Params:         0       0       0       0       0       0       0
  3317 ;;      Locals:         0       0       0       0       0       0       0
  3318 ;;      Temps:          0       0       0       0       0       0       0
  3319 ;;      Totals:         0       0       0       0       0       0       0
  3320 ;;Total ram usage:        0 bytes
  3321 ;; Hardware stack levels used:    1
  3322 ;; Hardware stack levels required when called:    4
  3323 ;; This function calls:
  3324 ;;		Nothing
  3325 ;; This function is called by:
  3326 ;;		_main
  3327 ;; This function uses a non-reentrant model
  3328 ;;
  3329                           
  3330                           	psect	text18
  3331  0023A0                     __ptext18:
  3332                           	callstack 0
  3333  0023A0                     _initADC:
  3334                           	callstack 0
  3335  0023A0  FFFF               	dw	65535	; assembler added errata NOP
  3336  0023A2                     
  3337                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  3338  0023A2  50C2               	movf	194,w,c	;volatile
  3339  0023A4  0B3F               	andlw	-193
  3340  0023A6  0940               	iorlw	64
  3341  0023A8  6EC2               	movwf	194,c	;volatile
  3342  0023AA                     
  3343                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  3344  0023AA  8CC1               	bsf	193,6,c	;volatile
  3345                           
  3346                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  3347  0023AC  0EC7               	movlw	-57
  3348  0023AE  16C2               	andwf	194,f,c	;volatile
  3349  0023B0                     
  3350                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  3351  0023B0  94C2               	bcf	194,2,c	;volatile
  3352  0023B2                     
  3353                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  3354  0023B2  90C2               	bcf	194,0,c	;volatile
  3355  0023B4                     
  3356                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  3357  0023B4  9EC1               	bcf	193,7,c	;volatile
  3358                           
  3359                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  3360  0023B6  50C1               	movf	193,w,c	;volatile
  3361  0023B8  0BF0               	andlw	-16
  3362  0023BA  090E               	iorlw	14
  3363  0023BC  6EC1               	movwf	193,c	;volatile
  3364  0023BE                     
  3365                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  3366  0023BE  8C9D               	bsf	157,6,c	;volatile
  3367  0023C0                     
  3368                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  3369  0023C0  8C9F               	bsf	159,6,c	;volatile
  3370  0023C2  0012               	return		;funcret
  3371  0023C4  FFFF               	dw	65535	; errata NOP
  3372  0023C6                     __end_of_initADC:
  3373                           	callstack 0
  3374                           
  3375 ;; *************** function _getNewSequence *****************
  3376 ;; Defined at:
  3377 ;;		line 213 in file "usart.c"
  3378 ;; Parameters:    Size  Location     Type
  3379 ;;		None
  3380 ;; Auto vars:     Size  Location     Type
  3381 ;;		None
  3382 ;; Return value:  Size  Location     Type
  3383 ;;                  2   17[COMRAM] PTR struct .
  3384 ;; Registers used:
  3385 ;;		wreg, status,2, status,0
  3386 ;; Tracked objects:
  3387 ;;		On entry : 0/0
  3388 ;;		On exit  : 0/0
  3389 ;;		Unchanged: 0/0
  3390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3391 ;;      Params:         2       0       0       0       0       0       0
  3392 ;;      Locals:         0       0       0       0       0       0       0
  3393 ;;      Temps:          0       0       0       0       0       0       0
  3394 ;;      Totals:         2       0       0       0       0       0       0
  3395 ;;Total ram usage:        2 bytes
  3396 ;; Hardware stack levels used:    1
  3397 ;; Hardware stack levels required when called:    4
  3398 ;; This function calls:
  3399 ;;		Nothing
  3400 ;; This function is called by:
  3401 ;;		_main
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           	psect	text19
  3406  00241E                     __ptext19:
  3407                           	callstack 0
  3408  00241E                     _getNewSequence:
  3409                           	callstack 0
  3410  00241E  FFFF               	dw	65535	; assembler added errata NOP
  3411  002420                     
  3412                           ;usart.c: 214:     return(&newSequenceData);
  3413  002420  0EEC               	movlw	low _newSequenceData
  3414  002422  6E12               	movwf	?_getNewSequence^0,c
  3415  002424  0E00               	movlw	high _newSequenceData
  3416  002426  6E13               	movwf	(?_getNewSequence+1)^0,c
  3417  002428  0012               	return		;funcret
  3418  00242A  FFFF               	dw	65535	; errata NOP
  3419  00242C                     __end_of_getNewSequence:
  3420                           	callstack 0
  3421                           
  3422 ;; *************** function _fatalError *****************
  3423 ;; Defined at:
  3424 ;;		line 100 in file "usart.c"
  3425 ;; Parameters:    Size  Location     Type
  3426 ;;		None
  3427 ;; Auto vars:     Size  Location     Type
  3428 ;;		None
  3429 ;; Return value:  Size  Location     Type
  3430 ;;                  1    wreg      unsigned char 
  3431 ;; Registers used:
  3432 ;;		wreg, status,2
  3433 ;; Tracked objects:
  3434 ;;		On entry : 0/0
  3435 ;;		On exit  : 0/0
  3436 ;;		Unchanged: 0/0
  3437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3438 ;;      Params:         0       0       0       0       0       0       0
  3439 ;;      Locals:         0       0       0       0       0       0       0
  3440 ;;      Temps:          0       0       0       0       0       0       0
  3441 ;;      Totals:         0       0       0       0       0       0       0
  3442 ;;Total ram usage:        0 bytes
  3443 ;; Hardware stack levels used:    1
  3444 ;; Hardware stack levels required when called:    4
  3445 ;; This function calls:
  3446 ;;		Nothing
  3447 ;; This function is called by:
  3448 ;;		_main
  3449 ;; This function uses a non-reentrant model
  3450 ;;
  3451                           
  3452                           	psect	text20
  3453  0024F0                     __ptext20:
  3454                           	callstack 0
  3455  0024F0                     _fatalError:
  3456                           	callstack 0
  3457  0024F0  FFFF               	dw	65535	; assembler added errata NOP
  3458  0024F2                     
  3459                           ;usart.c: 101:     return _fatalError;
  3460  0024F2  5060               	movf	__fatalError^0,w,c
  3461  0024F4  0012               	return		;funcret
  3462  0024F6  FFFF               	dw	65535	; errata NOP
  3463  0024F8                     __end_of_fatalError:
  3464                           	callstack 0
  3465                           
  3466 ;; *************** function _executeData *****************
  3467 ;; Defined at:
  3468 ;;		line 130 in file "main.c"
  3469 ;; Parameters:    Size  Location     Type
  3470 ;;		None
  3471 ;; Auto vars:     Size  Location     Type
  3472 ;;  data            2    9[BANK0 ] PTR struct .
  3473 ;;		 -> dataSequence(20), 
  3474 ;;  errCode         1    8[BANK0 ] unsigned char 
  3475 ;; Return value:  Size  Location     Type
  3476 ;;                  1    wreg      unsigned char 
  3477 ;; Registers used:
  3478 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3479 ;; Tracked objects:
  3480 ;;		On entry : 0/0
  3481 ;;		On exit  : 0/0
  3482 ;;		Unchanged: 0/0
  3483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3484 ;;      Params:         0       0       0       0       0       0       0
  3485 ;;      Locals:         0       3       0       0       0       0       0
  3486 ;;      Temps:          2       0       0       0       0       0       0
  3487 ;;      Totals:         2       3       0       0       0       0       0
  3488 ;;Total ram usage:        5 bytes
  3489 ;; Hardware stack levels used:    1
  3490 ;; Hardware stack levels required when called:    6
  3491 ;; This function calls:
  3492 ;;		_getData
  3493 ;;		_liftArm
  3494 ;;		_moveToPoint
  3495 ;;		_pickObject
  3496 ;;		_releaseObj
  3497 ;;		_rotateObj
  3498 ;;		_touchObject
  3499 ;;		_touchTherm
  3500 ;; This function is called by:
  3501 ;;		_main
  3502 ;; This function uses a non-reentrant model
  3503 ;;
  3504                           
  3505                           	psect	text21
  3506  000D04                     __ptext21:
  3507                           	callstack 0
  3508  000D04                     _executeData:
  3509                           	callstack 0
  3510  000D04  FFFF               	dw	65535	; assembler added errata NOP
  3511  000D06                     
  3512                           ;main.c: 131:     t_sequence *data = getData();
  3513  000D06  EC16  F012         	call	_getData	;wreg free
  3514  000D0A  C012  F0FD         	movff	?_getData,executeData@data
  3515  000D0E  C013  F0FE         	movff	?_getData+1,executeData@data+1
  3516  000D12                     
  3517                           ;main.c: 137:     switch(data->feederLine){
  3518  000D12  EF35  F007         	goto	l4121
  3519  000D16                     l4093:
  3520  000D16  FFFF               	dw	65535	; assembler added errata NOP
  3521                           
  3522                           ;main.c: 140:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0
      +                          ], feeder1Pos[1]);
  3523  000D18  C04E  F016         	movff	_posVector,moveToPoint@x1
  3524  000D1C  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3525  000D1E  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3526  000D22  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3527  000D24  0E0D               	movlw	low _feeder1Pos
  3528  000D26  6EF6               	movwf	tblptrl,c
  3529  000D28                     	if	1	;There is more than 1 active tblptr byte
  3530  000D28  0E06               	movlw	high _feeder1Pos
  3531  000D2A  6EF7               	movwf	tblptrh,c
  3532  000D2C                     	endif
  3533  000D2C                     	if	0	;There are less than 3 active tblptr bytes
  3534  000D2C                     	endif
  3535  000D2C  0008               	tblrd		*
  3536  000D2E  FFFF               	dw	65535	; errata NOP
  3537  000D30  50F5               	movf	tablat,w,c
  3538  000D32  6E1A               	movwf	moveToPoint@x2^0,c
  3539  000D34  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3540  000D36  0E0E               	movlw	low (_feeder1Pos+1)
  3541  000D38  6EF6               	movwf	tblptrl,c
  3542  000D3A  0E06               	movlw	high (_feeder1Pos+1)
  3543  000D3C  6EF7               	movwf	tblptrh,c
  3544  000D3E                     	if	0	;tblptru may be non-zero
  3545  000D3E                     	endif
  3546  000D3E                     	if	0	;tblptru may be non-zero
  3547  000D3E                     	endif
  3548  000D3E  0008               	tblrd		*
  3549  000D40  FFFF               	dw	65535	; errata NOP
  3550  000D42  50F5               	movf	tablat,w,c
  3551  000D44  6E1C               	movwf	moveToPoint@y2^0,c
  3552  000D46  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3553  000D48  EC21  F005         	call	_moveToPoint	;wreg free
  3554  000D4C  0100               	movlb	0	; () banked
  3555  000D4E  6FFC               	movwf	executeData@errCode& (0+255),b
  3556  000D50                     
  3557                           ; BSR set to: 0
  3558                           ;main.c: 142:             posVector[0] = feeder1Pos[0];
  3559  000D50  0E0D               	movlw	low _feeder1Pos
  3560  000D52  6EF6               	movwf	tblptrl,c
  3561  000D54                     	if	1	;There is more than 1 active tblptr byte
  3562  000D54  0E06               	movlw	high _feeder1Pos
  3563  000D56  6EF7               	movwf	tblptrh,c
  3564  000D58                     	endif
  3565  000D58                     	if	0	;There are less than 3 active tblptr bytes
  3566  000D58                     	endif
  3567  000D58  0008               	tblrd		*
  3568  000D5A  FFFF               	dw	65535	; errata NOP
  3569  000D5C  CFF5 F04E          	movff	tablat,_posVector
  3570  000D60                     
  3571                           ; BSR set to: 0
  3572                           ;main.c: 143:             posVector[1] = feeder1Pos[1];
  3573  000D60  0E0E               	movlw	low (_feeder1Pos+1)
  3574  000D62  6EF6               	movwf	tblptrl,c
  3575  000D64  0E06               	movlw	high (_feeder1Pos+1)
  3576  000D66  6EF7               	movwf	tblptrh,c
  3577  000D68                     	if	0	;tblptru may be non-zero
  3578  000D68                     	endif
  3579  000D68                     	if	0	;tblptru may be non-zero
  3580  000D68                     	endif
  3581  000D68  0008               	tblrd		*
  3582  000D6A  FFFF               	dw	65535	; errata NOP
  3583  000D6C  CFF5 F04F          	movff	tablat,_posVector+1
  3584                           
  3585                           ;main.c: 144:             break;
  3586  000D70  EF58  F007         	goto	l4123
  3587  000D74                     l4099:
  3588  000D74  FFFF               	dw	65535	; assembler added errata NOP
  3589                           
  3590                           ;main.c: 146:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3591  000D76  C04E  F016         	movff	_posVector,moveToPoint@x1
  3592  000D7A  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3593  000D7C  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3594  000D80  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3595  000D82  0E0B               	movlw	low _feeder2Pos
  3596  000D84  6EF6               	movwf	tblptrl,c
  3597  000D86                     	if	1	;There is more than 1 active tblptr byte
  3598  000D86  0E06               	movlw	high _feeder2Pos
  3599  000D88  6EF7               	movwf	tblptrh,c
  3600  000D8A                     	endif
  3601  000D8A                     	if	0	;There are less than 3 active tblptr bytes
  3602  000D8A                     	endif
  3603  000D8A  0008               	tblrd		*
  3604  000D8C  FFFF               	dw	65535	; errata NOP
  3605  000D8E  50F5               	movf	tablat,w,c
  3606  000D90  6E1A               	movwf	moveToPoint@x2^0,c
  3607  000D92  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3608  000D94  0E0C               	movlw	low (_feeder2Pos+1)
  3609  000D96  6EF6               	movwf	tblptrl,c
  3610  000D98  0E06               	movlw	high (_feeder2Pos+1)
  3611  000D9A  6EF7               	movwf	tblptrh,c
  3612  000D9C                     	if	0	;tblptru may be non-zero
  3613  000D9C                     	endif
  3614  000D9C                     	if	0	;tblptru may be non-zero
  3615  000D9C                     	endif
  3616  000D9C  0008               	tblrd		*
  3617  000D9E  FFFF               	dw	65535	; errata NOP
  3618  000DA0  50F5               	movf	tablat,w,c
  3619  000DA2  6E1C               	movwf	moveToPoint@y2^0,c
  3620  000DA4  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3621  000DA6  EC21  F005         	call	_moveToPoint	;wreg free
  3622  000DAA  0100               	movlb	0	; () banked
  3623  000DAC  6FFC               	movwf	executeData@errCode& (0+255),b
  3624  000DAE                     
  3625                           ; BSR set to: 0
  3626                           ;main.c: 147:             posVector[0] = feeder2Pos[0];
  3627  000DAE  0E0B               	movlw	low _feeder2Pos
  3628  000DB0  6EF6               	movwf	tblptrl,c
  3629  000DB2                     	if	1	;There is more than 1 active tblptr byte
  3630  000DB2  0E06               	movlw	high _feeder2Pos
  3631  000DB4  6EF7               	movwf	tblptrh,c
  3632  000DB6                     	endif
  3633  000DB6                     	if	0	;There are less than 3 active tblptr bytes
  3634  000DB6                     	endif
  3635  000DB6  0008               	tblrd		*
  3636  000DB8  FFFF               	dw	65535	; errata NOP
  3637  000DBA  CFF5 F04E          	movff	tablat,_posVector
  3638  000DBE                     
  3639                           ; BSR set to: 0
  3640                           ;main.c: 148:             posVector[1] = feeder2Pos[1];
  3641  000DBE  0E0C               	movlw	low (_feeder2Pos+1)
  3642  000DC0  6EF6               	movwf	tblptrl,c
  3643  000DC2  0E06               	movlw	high (_feeder2Pos+1)
  3644  000DC4  6EF7               	movwf	tblptrh,c
  3645  000DC6                     	if	0	;tblptru may be non-zero
  3646  000DC6                     	endif
  3647  000DC6                     	if	0	;tblptru may be non-zero
  3648  000DC6                     	endif
  3649  000DC6  0008               	tblrd		*
  3650  000DC8  FFFF               	dw	65535	; errata NOP
  3651  000DCA  CFF5 F04F          	movff	tablat,_posVector+1
  3652                           
  3653                           ;main.c: 149:             break;
  3654  000DCE  EF58  F007         	goto	l4123
  3655  000DD2                     l4105:
  3656  000DD2  FFFF               	dw	65535	; assembler added errata NOP
  3657                           
  3658                           ;main.c: 151:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3659  000DD4  C04E  F016         	movff	_posVector,moveToPoint@x1
  3660  000DD8  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3661  000DDA  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3662  000DDE  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3663  000DE0  0E09               	movlw	low _feeder3Pos
  3664  000DE2  6EF6               	movwf	tblptrl,c
  3665  000DE4                     	if	1	;There is more than 1 active tblptr byte
  3666  000DE4  0E06               	movlw	high _feeder3Pos
  3667  000DE6  6EF7               	movwf	tblptrh,c
  3668  000DE8                     	endif
  3669  000DE8                     	if	0	;There are less than 3 active tblptr bytes
  3670  000DE8                     	endif
  3671  000DE8  0008               	tblrd		*
  3672  000DEA  FFFF               	dw	65535	; errata NOP
  3673  000DEC  50F5               	movf	tablat,w,c
  3674  000DEE  6E1A               	movwf	moveToPoint@x2^0,c
  3675  000DF0  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3676  000DF2  0E0A               	movlw	low (_feeder3Pos+1)
  3677  000DF4  6EF6               	movwf	tblptrl,c
  3678  000DF6  0E06               	movlw	high (_feeder3Pos+1)
  3679  000DF8  6EF7               	movwf	tblptrh,c
  3680  000DFA                     	if	0	;tblptru may be non-zero
  3681  000DFA                     	endif
  3682  000DFA                     	if	0	;tblptru may be non-zero
  3683  000DFA                     	endif
  3684  000DFA  0008               	tblrd		*
  3685  000DFC  FFFF               	dw	65535	; errata NOP
  3686  000DFE  50F5               	movf	tablat,w,c
  3687  000E00  6E1C               	movwf	moveToPoint@y2^0,c
  3688  000E02  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3689  000E04  EC21  F005         	call	_moveToPoint	;wreg free
  3690  000E08  0100               	movlb	0	; () banked
  3691  000E0A  6FFC               	movwf	executeData@errCode& (0+255),b
  3692  000E0C                     
  3693                           ; BSR set to: 0
  3694                           ;main.c: 152:             posVector[0] = feeder3Pos[0];
  3695  000E0C  0E09               	movlw	low _feeder3Pos
  3696  000E0E  6EF6               	movwf	tblptrl,c
  3697  000E10                     	if	1	;There is more than 1 active tblptr byte
  3698  000E10  0E06               	movlw	high _feeder3Pos
  3699  000E12  6EF7               	movwf	tblptrh,c
  3700  000E14                     	endif
  3701  000E14                     	if	0	;There are less than 3 active tblptr bytes
  3702  000E14                     	endif
  3703  000E14  0008               	tblrd		*
  3704  000E16  FFFF               	dw	65535	; errata NOP
  3705  000E18  CFF5 F04E          	movff	tablat,_posVector
  3706  000E1C                     
  3707                           ; BSR set to: 0
  3708                           ;main.c: 153:             posVector[1] = feeder3Pos[1];
  3709  000E1C  0E0A               	movlw	low (_feeder3Pos+1)
  3710  000E1E  6EF6               	movwf	tblptrl,c
  3711  000E20  0E06               	movlw	high (_feeder3Pos+1)
  3712  000E22  6EF7               	movwf	tblptrh,c
  3713  000E24                     	if	0	;tblptru may be non-zero
  3714  000E24                     	endif
  3715  000E24                     	if	0	;tblptru may be non-zero
  3716  000E24                     	endif
  3717  000E24  0008               	tblrd		*
  3718  000E26  FFFF               	dw	65535	; errata NOP
  3719  000E28  CFF5 F04F          	movff	tablat,_posVector+1
  3720                           
  3721                           ;main.c: 154:             break;
  3722  000E2C  EF58  F007         	goto	l4123
  3723  000E30                     l4111:
  3724  000E30  FFFF               	dw	65535	; assembler added errata NOP
  3725                           
  3726                           ;main.c: 158:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3727  000E32  C04E  F016         	movff	_posVector,moveToPoint@x1
  3728  000E36  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3729  000E38  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3730  000E3C  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3731  000E3E  C057  F01A         	movff	_newFeeder,moveToPoint@x2
  3732  000E42  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3733  000E44  C058  F01C         	movff	_newFeeder+1,moveToPoint@y2
  3734  000E48  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3735  000E4A  EC21  F005         	call	_moveToPoint	;wreg free
  3736  000E4E  0100               	movlb	0	; () banked
  3737  000E50  6FFC               	movwf	executeData@errCode& (0+255),b
  3738  000E52                     
  3739                           ; BSR set to: 0
  3740                           ;main.c: 159:             posVector[0] = newFeeder[0];
  3741  000E52  C057  F04E         	movff	_newFeeder,_posVector
  3742  000E56                     
  3743                           ; BSR set to: 0
  3744                           ;main.c: 160:             posVector[1] = newFeeder[1];
  3745  000E56  C058  F04F         	movff	_newFeeder+1,_posVector+1
  3746                           
  3747                           ;main.c: 161:             break;
  3748  000E5A  EF58  F007         	goto	l4123
  3749  000E5E                     l4117:
  3750  000E5E  FFFF               	dw	65535	; assembler added errata NOP
  3751                           
  3752                           ;main.c: 165:             errCode = 1;
  3753  000E60  0E01               	movlw	1
  3754  000E62  0100               	movlb	0	; () banked
  3755  000E64  6FFC               	movwf	executeData@errCode& (0+255),b
  3756                           
  3757                           ;main.c: 166:             break;
  3758  000E66  EF58  F007         	goto	l4123
  3759  000E6A                     l4121:
  3760  000E6A  FFFF               	dw	65535	; assembler added errata NOP
  3761  000E6C  C0FD  FFD9         	movff	executeData@data,fsr2l
  3762  000E70  C0FE  FFDA         	movff	executeData@data+1,fsr2h
  3763  000E74  50DF               	movf	indf2,w,c
  3764  000E76  6E43               	movwf	??_executeData^0,c
  3765  000E78  6A44               	clrf	(??_executeData+1)^0,c
  3766                           
  3767                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3768                           ; Switch size 1, requested type "simple"
  3769                           ; Number of cases is 1, Range of values is 0 to 0
  3770                           ; switch strategies available:
  3771                           ; Name         Instructions Cycles
  3772                           ; simple_byte            4     3 (average)
  3773                           ;	Chosen strategy is simple_byte
  3774  000E7A  5044               	movf	(??_executeData+1)^0,w,c
  3775  000E7C  0A00               	xorlw	0	; case 0
  3776  000E7E  B4D8               	btfsc	status,2,c
  3777  000E80  EF44  F007         	goto	l4471
  3778  000E84  EF2F  F007         	goto	l4117
  3779  000E88                     l4471:
  3780  000E88  FFFF               	dw	65535	; assembler added errata NOP
  3781                           
  3782                           ; Switch size 1, requested type "simple"
  3783                           ; Number of cases is 4, Range of values is 0 to 255
  3784                           ; switch strategies available:
  3785                           ; Name         Instructions Cycles
  3786                           ; simple_byte           13     7 (average)
  3787                           ;	Chosen strategy is simple_byte
  3788  000E8A  5043               	movf	??_executeData^0,w,c
  3789  000E8C  0A00               	xorlw	0	; case 0
  3790  000E8E  B4D8               	btfsc	status,2,c
  3791  000E90  EF8B  F006         	goto	l4093
  3792  000E94  0A01               	xorlw	1	; case 1
  3793  000E96  B4D8               	btfsc	status,2,c
  3794  000E98  EFBA  F006         	goto	l4099
  3795  000E9C  0A03               	xorlw	3	; case 2
  3796  000E9E  B4D8               	btfsc	status,2,c
  3797  000EA0  EFE9  F006         	goto	l4105
  3798  000EA4  0AFD               	xorlw	253	; case 255
  3799  000EA6  B4D8               	btfsc	status,2,c
  3800  000EA8  EF18  F007         	goto	l4111
  3801  000EAC  EF2F  F007         	goto	l4117
  3802  000EB0                     l4123:
  3803  000EB0  FFFF               	dw	65535	; assembler added errata NOP
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;main.c: 170:     if(!errCode){
  3807  000EB2  51FC               	movf	executeData@errCode& (0+255),w,b
  3808  000EB4  A4D8               	btfss	status,2,c
  3809  000EB6  EF5F  F007         	goto	u3391
  3810  000EBA  EF62  F007         	goto	u3390
  3811  000EBE                     u3391:
  3812  000EBE  FFFF               	dw	65535	; assembler added errata NOP
  3813  000EC0  EFC2  F007         	goto	l4145
  3814  000EC4                     u3390:
  3815  000EC4  FFFF               	dw	65535	; assembler added errata NOP
  3816  000EC6                     
  3817                           ; BSR set to: 0
  3818  000EC6  EC05  F00E         	call	_touchObject	;wreg free
  3819  000ECA                     
  3820                           ;main.c: 176:         pickObject();
  3821  000ECA  EC84  F012         	call	_pickObject	;wreg free
  3822  000ECE  ECAD  F00F         	call	_liftArm	;wreg free
  3823  000ED2  C04E  F016         	movff	_posVector,moveToPoint@x1
  3824  000ED6  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3825  000ED8  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3826  000EDC  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3827  000EDE  0100               	movlb	0	; () banked
  3828  000EE0  EE20 F001          	lfsr	2,1
  3829  000EE4  51FD               	movf	executeData@data& (0+255),w,b
  3830  000EE6  26D9               	addwf	fsr2l,f,c
  3831  000EE8  51FE               	movf	(executeData@data+1)& (0+255),w,b
  3832  000EEA  22DA               	addwfc	fsr2h,f,c
  3833  000EEC  50DF               	movf	indf2,w,c
  3834  000EEE  6E43               	movwf	??_executeData^0,c
  3835  000EF0  5043               	movf	??_executeData^0,w,c
  3836  000EF2  6E1A               	movwf	moveToPoint@x2^0,c
  3837  000EF4  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3838  000EF6  EE20 F002          	lfsr	2,2
  3839  000EFA  51FD               	movf	executeData@data& (0+255),w,b
  3840  000EFC  26D9               	addwf	fsr2l,f,c
  3841  000EFE  51FE               	movf	(executeData@data+1)& (0+255),w,b
  3842  000F00  22DA               	addwfc	fsr2h,f,c
  3843  000F02  50DF               	movf	indf2,w,c
  3844  000F04  6E44               	movwf	(??_executeData+1)^0,c
  3845  000F06  5044               	movf	(??_executeData+1)^0,w,c
  3846  000F08  6E1C               	movwf	moveToPoint@y2^0,c
  3847  000F0A  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3848  000F0C  EC21  F005         	call	_moveToPoint	;wreg free
  3849                           
  3850                           ;main.c: 183:         posVector[0] = data->posX;
  3851  000F10  0100               	movlb	0	; () banked
  3852  000F12  EE20 F001          	lfsr	2,1
  3853  000F16  51FD               	movf	executeData@data& (0+255),w,b
  3854  000F18  26D9               	addwf	fsr2l,f,c
  3855  000F1A  51FE               	movf	(executeData@data+1)& (0+255),w,b
  3856  000F1C  22DA               	addwfc	fsr2h,f,c
  3857  000F1E  50DF               	movf	indf2,w,c
  3858  000F20  6E4E               	movwf	_posVector^0,c
  3859                           
  3860                           ;main.c: 184:         posVector[1] = data->posY;
  3861  000F22  EE20 F002          	lfsr	2,2
  3862  000F26  51FD               	movf	executeData@data& (0+255),w,b
  3863  000F28  26D9               	addwf	fsr2l,f,c
  3864  000F2A  51FE               	movf	(executeData@data+1)& (0+255),w,b
  3865  000F2C  22DA               	addwfc	fsr2h,f,c
  3866  000F2E  50DF               	movf	indf2,w,c
  3867  000F30  6E4F               	movwf	(_posVector+1)^0,c
  3868                           
  3869                           ;main.c: 187:         rotAngle = data->rotation - rotAngle;
  3870  000F32  EE20 F003          	lfsr	2,3
  3871  000F36  51FD               	movf	executeData@data& (0+255),w,b
  3872  000F38  26D9               	addwf	fsr2l,f,c
  3873  000F3A  51FE               	movf	(executeData@data+1)& (0+255),w,b
  3874  000F3C  22DA               	addwfc	fsr2h,f,c
  3875  000F3E  50DF               	movf	indf2,w,c
  3876  000F40  6E43               	movwf	??_executeData^0,c
  3877  000F42  5059               	movf	_rotAngle^0,w,c
  3878  000F44  5C43               	subwf	??_executeData^0,w,c
  3879  000F46  6E59               	movwf	_rotAngle^0,c
  3880  000F48  505A               	movf	(_rotAngle+1)^0,w,c
  3881  000F4A  A0D8               	btfss	status,0,c
  3882  000F4C  285A               	incf	(_rotAngle+1)^0,w,c
  3883  000F4E  6A5A               	clrf	(_rotAngle+1)^0,c
  3884  000F50  5E5A               	subwf	(_rotAngle+1)^0,f,c
  3885  000F52                     
  3886                           ; BSR set to: 0
  3887                           ;main.c: 189:         if(rotAngle < 0){
  3888  000F52  BE5A               	btfsc	(_rotAngle+1)^0,7,c
  3889  000F54  EFB1  F007         	goto	u3400
  3890  000F58  EFAE  F007         	goto	u3401
  3891  000F5C                     u3401:
  3892  000F5C  FFFF               	dw	65535	; assembler added errata NOP
  3893  000F5E  EFB6  F007         	goto	l4137
  3894  000F62                     u3400:
  3895  000F62  FFFF               	dw	65535	; assembler added errata NOP
  3896  000F64                     
  3897                           ; BSR set to: 0
  3898                           ;main.c: 190:             rotAngle += 360;
  3899  000F64  0E68               	movlw	104
  3900  000F66  2659               	addwf	_rotAngle^0,f,c
  3901  000F68  0E01               	movlw	1
  3902  000F6A  225A               	addwfc	(_rotAngle+1)^0,f,c
  3903  000F6C                     l4137:
  3904  000F6C  FFFF               	dw	65535	; assembler added errata NOP
  3905                           
  3906                           ; BSR set to: 0
  3907                           ;main.c: 192:         rotateObj(rotAngle);
  3908  000F6E  5059               	movf	_rotAngle^0,w,c
  3909  000F70  EC52  F00F         	call	_rotateObj
  3910  000F74  EC8C  F00D         	call	_touchTherm	;wreg free
  3911  000F78                     
  3912                           ;main.c: 198:         releaseObj();
  3913  000F78  EC80  F012         	call	_releaseObj	;wreg free
  3914  000F7C                     
  3915                           ;main.c: 201:         errCode = liftArm();
  3916  000F7C  ECAD  F00F         	call	_liftArm	;wreg free
  3917  000F80  0100               	movlb	0	; () banked
  3918  000F82  6FFC               	movwf	executeData@errCode& (0+255),b
  3919  000F84                     l4145:
  3920  000F84  FFFF               	dw	65535	; assembler added errata NOP
  3921                           
  3922                           ; BSR set to: 0
  3923                           ;main.c: 204:     return(errCode);
  3924  000F86  51FC               	movf	executeData@errCode& (0+255),w,b
  3925  000F88                     
  3926                           ; BSR set to: 0
  3927  000F88  0012               	return		;funcret
  3928  000F8A  FFFF               	dw	65535	; errata NOP
  3929  000F8C                     __end_of_executeData:
  3930                           	callstack 0
  3931                           
  3932 ;; *************** function _touchTherm *****************
  3933 ;; Defined at:
  3934 ;;		line 457 in file "motors.c"
  3935 ;; Parameters:    Size  Location     Type
  3936 ;;		None
  3937 ;; Auto vars:     Size  Location     Type
  3938 ;;		None
  3939 ;; Return value:  Size  Location     Type
  3940 ;;                  1    wreg      unsigned char 
  3941 ;; Registers used:
  3942 ;;		wreg, status,2, status,0, cstack
  3943 ;; Tracked objects:
  3944 ;;		On entry : 0/0
  3945 ;;		On exit  : 0/0
  3946 ;;		Unchanged: 0/0
  3947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3948 ;;      Params:         0       0       0       0       0       0       0
  3949 ;;      Locals:         0       0       0       0       0       0       0
  3950 ;;      Temps:          0       0       0       0       0       0       0
  3951 ;;      Totals:         0       0       0       0       0       0       0
  3952 ;;Total ram usage:        0 bytes
  3953 ;; Hardware stack levels used:    1
  3954 ;; Hardware stack levels required when called:    5
  3955 ;; This function calls:
  3956 ;;		_resetStep
  3957 ;;		_resetTherm
  3958 ;;		_returnTherm
  3959 ;;		_setDirection
  3960 ;;		_startADC
  3961 ;;		_stepMade
  3962 ;;		_stopADC
  3963 ;; This function is called by:
  3964 ;;		_executeData
  3965 ;; This function uses a non-reentrant model
  3966 ;;
  3967                           
  3968                           	psect	text22
  3969  001B18                     __ptext22:
  3970                           	callstack 0
  3971  001B18                     _touchTherm:
  3972                           	callstack 0
  3973  001B18  FFFF               	dw	65535	; assembler added errata NOP
  3974  001B1A                     
  3975                           ;motors.c: 460:     setDirection(1, 2);
  3976  001B1A  0E02               	movlw	2
  3977  001B1C  6E12               	movwf	setDirection@motor^0,c
  3978  001B1E  0E01               	movlw	1
  3979  001B20  ECBC  F010         	call	_setDirection
  3980  001B24                     
  3981                           ;motors.c: 462:     T2CONbits.TMR2ON = 1;
  3982  001B24  84CA               	bsf	202,2,c	;volatile
  3983  001B26                     
  3984                           ;motors.c: 464:     tm0Error = 0;
  3985  001B26  0E00               	movlw	0
  3986  001B28  6E5C               	movwf	(_tm0Error+1)^0,c
  3987  001B2A  0E00               	movlw	0
  3988  001B2C  6E5B               	movwf	_tm0Error^0,c
  3989  001B2E                     
  3990                           ;motors.c: 465:     tm0Limit = 200;
  3991  001B2E  0EC8               	movlw	200
  3992  001B30  6E68               	movwf	_tm0Limit^0,c
  3993  001B32                     
  3994                           ;motors.c: 466:     T0CONbits.TMR0ON = 1;
  3995  001B32  8ED5               	bsf	213,7,c	;volatile
  3996  001B34                     
  3997                           ;motors.c: 469:     startADC();
  3998  001B34  EC4E  F012         	call	_startADC	;wreg free
  3999                           
  4000                           ;motors.c: 472:     while(!returnTherm() || PORTDbits.RD7){
  4001  001B38  EFCF  F00D         	goto	l3837
  4002  001B3C                     l3827:
  4003  001B3C  FFFF               	dw	65535	; assembler added errata NOP
  4004                           
  4005                           ;motors.c: 475:         if(tm0Error){
  4006  001B3E  505B               	movf	_tm0Error^0,w,c
  4007  001B40  105C               	iorwf	(_tm0Error+1)^0,w,c
  4008  001B42  B4D8               	btfsc	status,2,c
  4009  001B44  EFA6  F00D         	goto	u3131
  4010  001B48  EFA9  F00D         	goto	u3130
  4011  001B4C                     u3131:
  4012  001B4C  FFFF               	dw	65535	; assembler added errata NOP
  4013  001B4E  EFB1  F00D         	goto	l188
  4014  001B52                     u3130:
  4015  001B52  FFFF               	dw	65535	; assembler added errata NOP
  4016  001B54                     
  4017                           ;motors.c: 477:             LATCbits.LATC2 = 0;
  4018  001B54  948B               	bcf	139,2,c	;volatile
  4019  001B56                     
  4020                           ;motors.c: 478:             tm0Error = 6;
  4021  001B56  0E00               	movlw	0
  4022  001B58  6E5C               	movwf	(_tm0Error+1)^0,c
  4023  001B5A  0E06               	movlw	6
  4024  001B5C  6E5B               	movwf	_tm0Error^0,c
  4025                           
  4026                           ;motors.c: 479:             break;
  4027  001B5E  EFE5  F00D         	goto	l3841
  4028  001B62                     l188:
  4029  001B62  FFFF               	dw	65535	; assembler added errata NOP
  4030                           
  4031                           ;motors.c: 483:         LATCbits.LATC2 = 1;
  4032  001B64  848B               	bsf	139,2,c	;volatile
  4033  001B66                     l3833:
  4034  001B66  FFFF               	dw	65535	; assembler added errata NOP
  4035  001B68  ECFC  F011         	call	_stepMade	;wreg free
  4036  001B6C  5012               	movf	?_stepMade^0,w,c
  4037  001B6E  1013               	iorwf	(?_stepMade+1)^0,w,c
  4038  001B70  B4D8               	btfsc	status,2,c
  4039  001B72  EFBD  F00D         	goto	u3141
  4040  001B76  EFC0  F00D         	goto	u3140
  4041  001B7A                     u3141:
  4042  001B7A  FFFF               	dw	65535	; assembler added errata NOP
  4043  001B7C  EFB3  F00D         	goto	l3833
  4044  001B80                     u3140:
  4045  001B80  FFFF               	dw	65535	; assembler added errata NOP
  4046  001B82                     
  4047                           ;motors.c: 489:         LATCbits.LATC2 = 0;
  4048  001B82  948B               	bcf	139,2,c	;volatile
  4049  001B84                     l3835:
  4050  001B84  FFFF               	dw	65535	; assembler added errata NOP
  4051  001B86  ECFC  F011         	call	_stepMade	;wreg free
  4052  001B8A  5012               	movf	?_stepMade^0,w,c
  4053  001B8C  1013               	iorwf	(?_stepMade+1)^0,w,c
  4054  001B8E  B4D8               	btfsc	status,2,c
  4055  001B90  EFCC  F00D         	goto	u3151
  4056  001B94  EFCF  F00D         	goto	u3150
  4057  001B98                     u3151:
  4058  001B98  FFFF               	dw	65535	; assembler added errata NOP
  4059  001B9A  EFC2  F00D         	goto	l3835
  4060  001B9E                     u3150:
  4061  001B9E                     l3837:
  4062  001B9E  FFFF               	dw	65535	; assembler added errata NOP
  4063                           
  4064                           ;motors.c: 472:     while(!returnTherm() || PORTDbits.RD7){
  4065  001BA0  EC32  F012         	call	_returnTherm	;wreg free
  4066  001BA4  5012               	movf	?_returnTherm^0,w,c
  4067  001BA6  1013               	iorwf	(?_returnTherm+1)^0,w,c
  4068  001BA8  B4D8               	btfsc	status,2,c
  4069  001BAA  EFD9  F00D         	goto	u3161
  4070  001BAE  EFDC  F00D         	goto	u3160
  4071  001BB2                     u3161:
  4072  001BB2  FFFF               	dw	65535	; assembler added errata NOP
  4073  001BB4  EF9E  F00D         	goto	l3827
  4074  001BB8                     u3160:
  4075  001BB8  FFFF               	dw	65535	; assembler added errata NOP
  4076  001BBA  BE83               	btfsc	131,7,c	;volatile
  4077  001BBC  EFE2  F00D         	goto	u3171
  4078  001BC0  EFE5  F00D         	goto	u3170
  4079  001BC4                     u3171:
  4080  001BC4  FFFF               	dw	65535	; assembler added errata NOP
  4081  001BC6  EF9E  F00D         	goto	l3827
  4082  001BCA                     u3170:
  4083  001BCA                     l3841:
  4084  001BCA  FFFF               	dw	65535	; assembler added errata NOP
  4085                           
  4086                           ;motors.c: 496:     stopADC();
  4087  001BCC  EC7C  F012         	call	_stopADC	;wreg free
  4088  001BD0                     
  4089                           ;motors.c: 499:     resetTherm();
  4090  001BD0  EC49  F012         	call	_resetTherm	;wreg free
  4091  001BD4                     
  4092                           ;motors.c: 502:     T0CONbits.TMR0ON = 0;
  4093  001BD4  9ED5               	bcf	213,7,c	;volatile
  4094  001BD6                     
  4095                           ;motors.c: 503:     T2CONbits.TMR2ON = 0;
  4096  001BD6  94CA               	bcf	202,2,c	;volatile
  4097                           
  4098                           ;motors.c: 505:     TMR0 = 0;
  4099  001BD8  0E00               	movlw	0
  4100  001BDA  6ED7               	movwf	215,c	;volatile
  4101  001BDC  0E00               	movlw	0
  4102  001BDE  6ED6               	movwf	214,c	;volatile
  4103                           
  4104                           ;motors.c: 506:     TMR2 = 0;
  4105  001BE0  0E00               	movlw	0
  4106  001BE2  6ECC               	movwf	204,c	;volatile
  4107  001BE4                     
  4108                           ;motors.c: 509:     resetStep();
  4109  001BE4  EC58  F012         	call	_resetStep	;wreg free
  4110  001BE8                     
  4111                           ;motors.c: 512:     if(PORTDbits.RD7){
  4112  001BE8  AE83               	btfss	131,7,c	;volatile
  4113  001BEA  EFF9  F00D         	goto	u3181
  4114  001BEE  EFFC  F00D         	goto	u3180
  4115  001BF2                     u3181:
  4116  001BF2  FFFF               	dw	65535	; assembler added errata NOP
  4117  001BF4  EF01  F00E         	goto	l196
  4118  001BF8                     u3180:
  4119  001BF8  FFFF               	dw	65535	; assembler added errata NOP
  4120  001BFA                     
  4121                           ;motors.c: 513:         tm0Error = 2;
  4122  001BFA  0E00               	movlw	0
  4123  001BFC  6E5C               	movwf	(_tm0Error+1)^0,c
  4124  001BFE  0E02               	movlw	2
  4125  001C00  6E5B               	movwf	_tm0Error^0,c
  4126  001C02                     l196:
  4127  001C02  FFFF               	dw	65535	; assembler added errata NOP
  4128                           
  4129                           ;motors.c: 516:     return(tm0Error);
  4130  001C04  505B               	movf	_tm0Error^0,w,c
  4131  001C06  0012               	return		;funcret
  4132  001C08  FFFF               	dw	65535	; errata NOP
  4133  001C0A                     __end_of_touchTherm:
  4134                           	callstack 0
  4135                           
  4136 ;; *************** function _returnTherm *****************
  4137 ;; Defined at:
  4138 ;;		line 58 in file "adc.c"
  4139 ;; Parameters:    Size  Location     Type
  4140 ;;		None
  4141 ;; Auto vars:     Size  Location     Type
  4142 ;;		None
  4143 ;; Return value:  Size  Location     Type
  4144 ;;                  2   17[COMRAM] unsigned int 
  4145 ;; Registers used:
  4146 ;;		None
  4147 ;; Tracked objects:
  4148 ;;		On entry : 0/0
  4149 ;;		On exit  : 0/0
  4150 ;;		Unchanged: 0/0
  4151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4152 ;;      Params:         2       0       0       0       0       0       0
  4153 ;;      Locals:         0       0       0       0       0       0       0
  4154 ;;      Temps:          0       0       0       0       0       0       0
  4155 ;;      Totals:         2       0       0       0       0       0       0
  4156 ;;Total ram usage:        2 bytes
  4157 ;; Hardware stack levels used:    1
  4158 ;; Hardware stack levels required when called:    4
  4159 ;; This function calls:
  4160 ;;		Nothing
  4161 ;; This function is called by:
  4162 ;;		_touchTherm
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           	psect	text23
  4167  002464                     __ptext23:
  4168                           	callstack 0
  4169  002464                     _returnTherm:
  4170                           	callstack 0
  4171  002464  FFFF               	dw	65535	; assembler added errata NOP
  4172  002466                     
  4173                           ;adc.c: 59:     return therm_rel;
  4174  002466  C064  F012         	movff	_therm_rel,?_returnTherm	;volatile
  4175  00246A  6A13               	clrf	(?_returnTherm+1)^0,c
  4176  00246C  0012               	return		;funcret
  4177  00246E  FFFF               	dw	65535	; errata NOP
  4178  002470                     __end_of_returnTherm:
  4179                           	callstack 0
  4180                           
  4181 ;; *************** function _resetTherm *****************
  4182 ;; Defined at:
  4183 ;;		line 72 in file "adc.c"
  4184 ;; Parameters:    Size  Location     Type
  4185 ;;		None
  4186 ;; Auto vars:     Size  Location     Type
  4187 ;;		None
  4188 ;; Return value:  Size  Location     Type
  4189 ;;                  1    wreg      void 
  4190 ;; Registers used:
  4191 ;;		wreg, status,2
  4192 ;; Tracked objects:
  4193 ;;		On entry : 0/0
  4194 ;;		On exit  : 0/0
  4195 ;;		Unchanged: 0/0
  4196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4197 ;;      Params:         0       0       0       0       0       0       0
  4198 ;;      Locals:         0       0       0       0       0       0       0
  4199 ;;      Temps:          0       0       0       0       0       0       0
  4200 ;;      Totals:         0       0       0       0       0       0       0
  4201 ;;Total ram usage:        0 bytes
  4202 ;; Hardware stack levels used:    1
  4203 ;; Hardware stack levels required when called:    4
  4204 ;; This function calls:
  4205 ;;		Nothing
  4206 ;; This function is called by:
  4207 ;;		_touchTherm
  4208 ;; This function uses a non-reentrant model
  4209 ;;
  4210                           
  4211                           	psect	text24
  4212  002492                     __ptext24:
  4213                           	callstack 0
  4214  002492                     _resetTherm:
  4215                           	callstack 0
  4216  002492  FFFF               	dw	65535	; assembler added errata NOP
  4217  002494                     
  4218                           ;adc.c: 73:     therm_rel = 0;
  4219  002494  0E00               	movlw	0
  4220  002496  6E64               	movwf	_therm_rel^0,c	;volatile
  4221  002498  0012               	return		;funcret
  4222  00249A  FFFF               	dw	65535	; errata NOP
  4223  00249C                     __end_of_resetTherm:
  4224                           	callstack 0
  4225                           
  4226 ;; *************** function _touchObject *****************
  4227 ;; Defined at:
  4228 ;;		line 386 in file "motors.c"
  4229 ;; Parameters:    Size  Location     Type
  4230 ;;		None
  4231 ;; Auto vars:     Size  Location     Type
  4232 ;;		None
  4233 ;; Return value:  Size  Location     Type
  4234 ;;                  1    wreg      unsigned char 
  4235 ;; Registers used:
  4236 ;;		wreg, status,2, status,0, cstack
  4237 ;; Tracked objects:
  4238 ;;		On entry : 0/0
  4239 ;;		On exit  : 0/0
  4240 ;;		Unchanged: 0/0
  4241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4242 ;;      Params:         0       0       0       0       0       0       0
  4243 ;;      Locals:         0       0       0       0       0       0       0
  4244 ;;      Temps:          0       0       0       0       0       0       0
  4245 ;;      Totals:         0       0       0       0       0       0       0
  4246 ;;Total ram usage:        0 bytes
  4247 ;; Hardware stack levels used:    1
  4248 ;; Hardware stack levels required when called:    5
  4249 ;; This function calls:
  4250 ;;		_resetStep
  4251 ;;		_resetTouch
  4252 ;;		_returnTouch
  4253 ;;		_setDirection
  4254 ;;		_startADC
  4255 ;;		_stepMade
  4256 ;;		_stopADC
  4257 ;; This function is called by:
  4258 ;;		_executeData
  4259 ;; This function uses a non-reentrant model
  4260 ;;
  4261                           
  4262                           	psect	text25
  4263  001C0A                     __ptext25:
  4264                           	callstack 0
  4265  001C0A                     _touchObject:
  4266                           	callstack 0
  4267  001C0A  FFFF               	dw	65535	; assembler added errata NOP
  4268  001C0C                     
  4269                           ;motors.c: 389:     setDirection(1, 2);
  4270  001C0C  0E02               	movlw	2
  4271  001C0E  6E12               	movwf	setDirection@motor^0,c
  4272  001C10  0E01               	movlw	1
  4273  001C12  ECBC  F010         	call	_setDirection
  4274  001C16                     
  4275                           ;motors.c: 391:     T2CONbits.TMR2ON = 1;
  4276  001C16  84CA               	bsf	202,2,c	;volatile
  4277  001C18                     
  4278                           ;motors.c: 393:     tm0Error = 0;
  4279  001C18  0E00               	movlw	0
  4280  001C1A  6E5C               	movwf	(_tm0Error+1)^0,c
  4281  001C1C  0E00               	movlw	0
  4282  001C1E  6E5B               	movwf	_tm0Error^0,c
  4283  001C20                     
  4284                           ;motors.c: 394:     tm0Limit = 200;
  4285  001C20  0EC8               	movlw	200
  4286  001C22  6E68               	movwf	_tm0Limit^0,c
  4287  001C24                     
  4288                           ;motors.c: 395:     T0CONbits.TMR0ON = 1;
  4289  001C24  8ED5               	bsf	213,7,c	;volatile
  4290  001C26                     
  4291                           ;motors.c: 398:     startADC();
  4292  001C26  EC4E  F012         	call	_startADC	;wreg free
  4293                           
  4294                           ;motors.c: 401:     while(!returnTouch() || PORTDbits.RD7){
  4295  001C2A  EF48  F00E         	goto	l3795
  4296  001C2E                     l3785:
  4297  001C2E  FFFF               	dw	65535	; assembler added errata NOP
  4298                           
  4299                           ;motors.c: 404:         if(tm0Error){
  4300  001C30  505B               	movf	_tm0Error^0,w,c
  4301  001C32  105C               	iorwf	(_tm0Error+1)^0,w,c
  4302  001C34  B4D8               	btfsc	status,2,c
  4303  001C36  EF1F  F00E         	goto	u3071
  4304  001C3A  EF22  F00E         	goto	u3070
  4305  001C3E                     u3071:
  4306  001C3E  FFFF               	dw	65535	; assembler added errata NOP
  4307  001C40  EF2A  F00E         	goto	l174
  4308  001C44                     u3070:
  4309  001C44  FFFF               	dw	65535	; assembler added errata NOP
  4310  001C46                     
  4311                           ;motors.c: 406:             LATCbits.LATC2 = 0;
  4312  001C46  948B               	bcf	139,2,c	;volatile
  4313  001C48                     
  4314                           ;motors.c: 407:             tm0Error = 6;
  4315  001C48  0E00               	movlw	0
  4316  001C4A  6E5C               	movwf	(_tm0Error+1)^0,c
  4317  001C4C  0E06               	movlw	6
  4318  001C4E  6E5B               	movwf	_tm0Error^0,c
  4319                           
  4320                           ;motors.c: 408:             break;
  4321  001C50  EF5E  F00E         	goto	l3799
  4322  001C54                     l174:
  4323  001C54  FFFF               	dw	65535	; assembler added errata NOP
  4324                           
  4325                           ;motors.c: 412:         LATCbits.LATC2 = 1;
  4326  001C56  848B               	bsf	139,2,c	;volatile
  4327  001C58                     l3791:
  4328  001C58  FFFF               	dw	65535	; assembler added errata NOP
  4329  001C5A  ECFC  F011         	call	_stepMade	;wreg free
  4330  001C5E  5012               	movf	?_stepMade^0,w,c
  4331  001C60  1013               	iorwf	(?_stepMade+1)^0,w,c
  4332  001C62  B4D8               	btfsc	status,2,c
  4333  001C64  EF36  F00E         	goto	u3081
  4334  001C68  EF39  F00E         	goto	u3080
  4335  001C6C                     u3081:
  4336  001C6C  FFFF               	dw	65535	; assembler added errata NOP
  4337  001C6E  EF2C  F00E         	goto	l3791
  4338  001C72                     u3080:
  4339  001C72  FFFF               	dw	65535	; assembler added errata NOP
  4340  001C74                     
  4341                           ;motors.c: 418:         LATCbits.LATC2 = 0;
  4342  001C74  948B               	bcf	139,2,c	;volatile
  4343  001C76                     l3793:
  4344  001C76  FFFF               	dw	65535	; assembler added errata NOP
  4345  001C78  ECFC  F011         	call	_stepMade	;wreg free
  4346  001C7C  5012               	movf	?_stepMade^0,w,c
  4347  001C7E  1013               	iorwf	(?_stepMade+1)^0,w,c
  4348  001C80  B4D8               	btfsc	status,2,c
  4349  001C82  EF45  F00E         	goto	u3091
  4350  001C86  EF48  F00E         	goto	u3090
  4351  001C8A                     u3091:
  4352  001C8A  FFFF               	dw	65535	; assembler added errata NOP
  4353  001C8C  EF3B  F00E         	goto	l3793
  4354  001C90                     u3090:
  4355  001C90                     l3795:
  4356  001C90  FFFF               	dw	65535	; assembler added errata NOP
  4357                           
  4358                           ;motors.c: 401:     while(!returnTouch() || PORTDbits.RD7){
  4359  001C92  EC38  F012         	call	_returnTouch	;wreg free
  4360  001C96  5012               	movf	?_returnTouch^0,w,c
  4361  001C98  1013               	iorwf	(?_returnTouch+1)^0,w,c
  4362  001C9A  B4D8               	btfsc	status,2,c
  4363  001C9C  EF52  F00E         	goto	u3101
  4364  001CA0  EF55  F00E         	goto	u3100
  4365  001CA4                     u3101:
  4366  001CA4  FFFF               	dw	65535	; assembler added errata NOP
  4367  001CA6  EF17  F00E         	goto	l3785
  4368  001CAA                     u3100:
  4369  001CAA  FFFF               	dw	65535	; assembler added errata NOP
  4370  001CAC  BE83               	btfsc	131,7,c	;volatile
  4371  001CAE  EF5B  F00E         	goto	u3111
  4372  001CB2  EF5E  F00E         	goto	u3110
  4373  001CB6                     u3111:
  4374  001CB6  FFFF               	dw	65535	; assembler added errata NOP
  4375  001CB8  EF17  F00E         	goto	l3785
  4376  001CBC                     u3110:
  4377  001CBC                     l3799:
  4378  001CBC  FFFF               	dw	65535	; assembler added errata NOP
  4379                           
  4380                           ;motors.c: 425:     stopADC();
  4381  001CBE  EC7C  F012         	call	_stopADC	;wreg free
  4382  001CC2                     
  4383                           ;motors.c: 428:     resetTouch();
  4384  001CC2  EC53  F012         	call	_resetTouch	;wreg free
  4385  001CC6                     
  4386                           ;motors.c: 431:     T0CONbits.TMR0ON = 0;
  4387  001CC6  9ED5               	bcf	213,7,c	;volatile
  4388  001CC8                     
  4389                           ;motors.c: 432:     T2CONbits.TMR2ON = 0;
  4390  001CC8  94CA               	bcf	202,2,c	;volatile
  4391                           
  4392                           ;motors.c: 434:     TMR0 = 0;
  4393  001CCA  0E00               	movlw	0
  4394  001CCC  6ED7               	movwf	215,c	;volatile
  4395  001CCE  0E00               	movlw	0
  4396  001CD0  6ED6               	movwf	214,c	;volatile
  4397                           
  4398                           ;motors.c: 435:     TMR2 = 0;
  4399  001CD2  0E00               	movlw	0
  4400  001CD4  6ECC               	movwf	204,c	;volatile
  4401  001CD6                     
  4402                           ;motors.c: 438:     resetStep();
  4403  001CD6  EC58  F012         	call	_resetStep	;wreg free
  4404  001CDA                     
  4405                           ;motors.c: 441:     if(PORTDbits.RD7){
  4406  001CDA  AE83               	btfss	131,7,c	;volatile
  4407  001CDC  EF72  F00E         	goto	u3121
  4408  001CE0  EF75  F00E         	goto	u3120
  4409  001CE4                     u3121:
  4410  001CE4  FFFF               	dw	65535	; assembler added errata NOP
  4411  001CE6  EF7A  F00E         	goto	l182
  4412  001CEA                     u3120:
  4413  001CEA  FFFF               	dw	65535	; assembler added errata NOP
  4414  001CEC                     
  4415                           ;motors.c: 442:         tm0Error = 2;
  4416  001CEC  0E00               	movlw	0
  4417  001CEE  6E5C               	movwf	(_tm0Error+1)^0,c
  4418  001CF0  0E02               	movlw	2
  4419  001CF2  6E5B               	movwf	_tm0Error^0,c
  4420  001CF4                     l182:
  4421  001CF4  FFFF               	dw	65535	; assembler added errata NOP
  4422                           
  4423                           ;motors.c: 445:     return(tm0Error);
  4424  001CF6  505B               	movf	_tm0Error^0,w,c
  4425  001CF8  0012               	return		;funcret
  4426  001CFA  FFFF               	dw	65535	; errata NOP
  4427  001CFC                     __end_of_touchObject:
  4428                           	callstack 0
  4429                           
  4430 ;; *************** function _stopADC *****************
  4431 ;; Defined at:
  4432 ;;		line 44 in file "adc.c"
  4433 ;; Parameters:    Size  Location     Type
  4434 ;;		None
  4435 ;; Auto vars:     Size  Location     Type
  4436 ;;		None
  4437 ;; Return value:  Size  Location     Type
  4438 ;;                  1    wreg      void 
  4439 ;; Registers used:
  4440 ;;		None
  4441 ;; Tracked objects:
  4442 ;;		On entry : 0/0
  4443 ;;		On exit  : 0/0
  4444 ;;		Unchanged: 0/0
  4445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4446 ;;      Params:         0       0       0       0       0       0       0
  4447 ;;      Locals:         0       0       0       0       0       0       0
  4448 ;;      Temps:          0       0       0       0       0       0       0
  4449 ;;      Totals:         0       0       0       0       0       0       0
  4450 ;;Total ram usage:        0 bytes
  4451 ;; Hardware stack levels used:    1
  4452 ;; Hardware stack levels required when called:    4
  4453 ;; This function calls:
  4454 ;;		Nothing
  4455 ;; This function is called by:
  4456 ;;		_touchObject
  4457 ;;		_touchTherm
  4458 ;; This function uses a non-reentrant model
  4459 ;;
  4460                           
  4461                           	psect	text26
  4462  0024F8                     __ptext26:
  4463                           	callstack 0
  4464  0024F8                     _stopADC:
  4465                           	callstack 0
  4466  0024F8  FFFF               	dw	65535	; assembler added errata NOP
  4467  0024FA                     
  4468                           ;adc.c: 45:     ADCON0bits.ADON = 0;
  4469  0024FA  90C2               	bcf	194,0,c	;volatile
  4470  0024FC  0012               	return		;funcret
  4471  0024FE  FFFF               	dw	65535	; errata NOP
  4472  002500                     __end_of_stopADC:
  4473                           	callstack 0
  4474                           
  4475 ;; *************** function _startADC *****************
  4476 ;; Defined at:
  4477 ;;		line 36 in file "adc.c"
  4478 ;; Parameters:    Size  Location     Type
  4479 ;;		None
  4480 ;; Auto vars:     Size  Location     Type
  4481 ;;		None
  4482 ;; Return value:  Size  Location     Type
  4483 ;;                  1    wreg      void 
  4484 ;; Registers used:
  4485 ;;		None
  4486 ;; Tracked objects:
  4487 ;;		On entry : 0/0
  4488 ;;		On exit  : 0/0
  4489 ;;		Unchanged: 0/0
  4490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4491 ;;      Params:         0       0       0       0       0       0       0
  4492 ;;      Locals:         0       0       0       0       0       0       0
  4493 ;;      Temps:          0       0       0       0       0       0       0
  4494 ;;      Totals:         0       0       0       0       0       0       0
  4495 ;;Total ram usage:        0 bytes
  4496 ;; Hardware stack levels used:    1
  4497 ;; Hardware stack levels required when called:    4
  4498 ;; This function calls:
  4499 ;;		Nothing
  4500 ;; This function is called by:
  4501 ;;		_touchObject
  4502 ;;		_touchTherm
  4503 ;; This function uses a non-reentrant model
  4504 ;;
  4505                           
  4506                           	psect	text27
  4507  00249C                     __ptext27:
  4508                           	callstack 0
  4509  00249C                     _startADC:
  4510                           	callstack 0
  4511  00249C  FFFF               	dw	65535	; assembler added errata NOP
  4512  00249E                     
  4513                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  4514  00249E  80C2               	bsf	194,0,c	;volatile
  4515                           
  4516                           ;adc.c: 38:     ADCON0bits.GODONE = 1;
  4517  0024A0  84C2               	bsf	194,2,c	;volatile
  4518  0024A2  0012               	return		;funcret
  4519  0024A4  FFFF               	dw	65535	; errata NOP
  4520  0024A6                     __end_of_startADC:
  4521                           	callstack 0
  4522                           
  4523 ;; *************** function _returnTouch *****************
  4524 ;; Defined at:
  4525 ;;		line 51 in file "adc.c"
  4526 ;; Parameters:    Size  Location     Type
  4527 ;;		None
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;		None
  4530 ;; Return value:  Size  Location     Type
  4531 ;;                  2   17[COMRAM] unsigned int 
  4532 ;; Registers used:
  4533 ;;		None
  4534 ;; Tracked objects:
  4535 ;;		On entry : 0/0
  4536 ;;		On exit  : 0/0
  4537 ;;		Unchanged: 0/0
  4538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4539 ;;      Params:         2       0       0       0       0       0       0
  4540 ;;      Locals:         0       0       0       0       0       0       0
  4541 ;;      Temps:          0       0       0       0       0       0       0
  4542 ;;      Totals:         2       0       0       0       0       0       0
  4543 ;;Total ram usage:        2 bytes
  4544 ;; Hardware stack levels used:    1
  4545 ;; Hardware stack levels required when called:    4
  4546 ;; This function calls:
  4547 ;;		Nothing
  4548 ;; This function is called by:
  4549 ;;		_touchObject
  4550 ;; This function uses a non-reentrant model
  4551 ;;
  4552                           
  4553                           	psect	text28
  4554  002470                     __ptext28:
  4555                           	callstack 0
  4556  002470                     _returnTouch:
  4557                           	callstack 0
  4558  002470  FFFF               	dw	65535	; assembler added errata NOP
  4559  002472                     
  4560                           ;adc.c: 52:     return touch_rel;
  4561  002472  C065  F012         	movff	_touch_rel,?_returnTouch	;volatile
  4562  002476  6A13               	clrf	(?_returnTouch+1)^0,c
  4563  002478  0012               	return		;funcret
  4564  00247A  FFFF               	dw	65535	; errata NOP
  4565  00247C                     __end_of_returnTouch:
  4566                           	callstack 0
  4567                           
  4568 ;; *************** function _resetTouch *****************
  4569 ;; Defined at:
  4570 ;;		line 65 in file "adc.c"
  4571 ;; Parameters:    Size  Location     Type
  4572 ;;		None
  4573 ;; Auto vars:     Size  Location     Type
  4574 ;;		None
  4575 ;; Return value:  Size  Location     Type
  4576 ;;                  1    wreg      void 
  4577 ;; Registers used:
  4578 ;;		wreg, status,2
  4579 ;; Tracked objects:
  4580 ;;		On entry : 0/0
  4581 ;;		On exit  : 0/0
  4582 ;;		Unchanged: 0/0
  4583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4584 ;;      Params:         0       0       0       0       0       0       0
  4585 ;;      Locals:         0       0       0       0       0       0       0
  4586 ;;      Temps:          0       0       0       0       0       0       0
  4587 ;;      Totals:         0       0       0       0       0       0       0
  4588 ;;Total ram usage:        0 bytes
  4589 ;; Hardware stack levels used:    1
  4590 ;; Hardware stack levels required when called:    4
  4591 ;; This function calls:
  4592 ;;		Nothing
  4593 ;; This function is called by:
  4594 ;;		_touchObject
  4595 ;; This function uses a non-reentrant model
  4596 ;;
  4597                           
  4598                           	psect	text29
  4599  0024A6                     __ptext29:
  4600                           	callstack 0
  4601  0024A6                     _resetTouch:
  4602                           	callstack 0
  4603  0024A6  FFFF               	dw	65535	; assembler added errata NOP
  4604  0024A8                     
  4605                           ;adc.c: 66:     touch_rel = 0;
  4606  0024A8  0E00               	movlw	0
  4607  0024AA  6E65               	movwf	_touch_rel^0,c	;volatile
  4608  0024AC  0012               	return		;funcret
  4609  0024AE  FFFF               	dw	65535	; errata NOP
  4610  0024B0                     __end_of_resetTouch:
  4611                           	callstack 0
  4612                           
  4613 ;; *************** function _rotateObj *****************
  4614 ;; Defined at:
  4615 ;;		line 577 in file "motors.c"
  4616 ;; Parameters:    Size  Location     Type
  4617 ;;  rotAngle        1    wreg     unsigned char 
  4618 ;; Auto vars:     Size  Location     Type
  4619 ;;  rotAngle        1    3[BANK0 ] unsigned char 
  4620 ;;  i               2    6[BANK0 ] unsigned int 
  4621 ;;  totStep         2    4[BANK0 ] int 
  4622 ;; Return value:  Size  Location     Type
  4623 ;;                  1    wreg      void 
  4624 ;; Registers used:
  4625 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4626 ;; Tracked objects:
  4627 ;;		On entry : 0/0
  4628 ;;		On exit  : 0/0
  4629 ;;		Unchanged: 0/0
  4630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4631 ;;      Params:         0       0       0       0       0       0       0
  4632 ;;      Locals:         0       5       0       0       0       0       0
  4633 ;;      Temps:          0       3       0       0       0       0       0
  4634 ;;      Totals:         0       8       0       0       0       0       0
  4635 ;;Total ram usage:        8 bytes
  4636 ;; Hardware stack levels used:    1
  4637 ;; Hardware stack levels required when called:    5
  4638 ;; This function calls:
  4639 ;;		___fldiv
  4640 ;;		___fltol
  4641 ;;		___xxtofl
  4642 ;; This function is called by:
  4643 ;;		_executeData
  4644 ;; This function uses a non-reentrant model
  4645 ;;
  4646                           
  4647                           	psect	text30
  4648  001EA4                     __ptext30:
  4649                           	callstack 0
  4650  001EA4                     _rotateObj:
  4651                           	callstack 0
  4652  001EA4  FFFF               	dw	65535	; assembler added errata NOP
  4653                           
  4654                           ;incstack = 0
  4655                           ;rotateObj@rotAngle stored from wreg
  4656  001EA6  0100               	movlb	0	; () banked
  4657  001EA8  6FF7               	movwf	rotateObj@rotAngle& (0+255),b
  4658  001EAA                     
  4659                           ;motors.c: 578:     static const float stepAngle = 0.08789;;motors.c: 579:     static ch
      +                          ar rotSequence[] = {0b1001, 0b0011, 0b0110, 0b1100};;motors.c: 580:     unsigned int i;;
      +                          motors.c: 581:     int totStep = rotAngle/stepAngle;
  4660  001EAA  0EAC               	movlw	172
  4661  001EAC  6E24               	movwf	___fldiv@a^0,c
  4662  001EAE  0EFF               	movlw	255
  4663  001EB0  6E25               	movwf	(___fldiv@a+1)^0,c
  4664  001EB2  0EB3               	movlw	179
  4665  001EB4  6E26               	movwf	(___fldiv@a+2)^0,c
  4666  001EB6  0E3D               	movlw	61
  4667  001EB8  6E27               	movwf	(___fldiv@a+3)^0,c
  4668  001EBA  0100               	movlb	0	; () banked
  4669  001EBC  51F7               	movf	rotateObj@rotAngle& (0+255),w,b
  4670  001EBE  6E12               	movwf	___xxtofl@val^0,c
  4671  001EC0  6A13               	clrf	(___xxtofl@val+1)^0,c
  4672  001EC2  6A14               	clrf	(___xxtofl@val+2)^0,c
  4673  001EC4  6A15               	clrf	(___xxtofl@val+3)^0,c
  4674  001EC6  0E01               	movlw	1
  4675  001EC8  ECC6  F007         	call	___xxtofl
  4676  001ECC  C012  F020         	movff	?___xxtofl,___fldiv@b
  4677  001ED0  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4678  001ED4  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4679  001ED8  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4680  001EDC  EC08  F003         	call	___fldiv	;wreg free
  4681  001EE0  C020  F039         	movff	?___fldiv,___fltol@f1
  4682  001EE4  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4683  001EE8  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4684  001EEC  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4685  001EF0  ECD5  F00B         	call	___fltol	;wreg free
  4686  001EF4  C039  F0F8         	movff	?___fltol,rotateObj@totStep
  4687  001EF8  C03A  F0F9         	movff	?___fltol+1,rotateObj@totStep+1
  4688  001EFC                     
  4689                           ;motors.c: 584:     for(i = 0; i < totStep; i++){
  4690  001EFC  0E00               	movlw	0
  4691  001EFE  0100               	movlb	0	; () banked
  4692  001F00  6FFB               	movwf	(rotateObj@i+1)& (0+255),b
  4693  001F02  0E00               	movlw	0
  4694  001F04  6FFA               	movwf	rotateObj@i& (0+255),b
  4695  001F06  EF9D  F00F         	goto	l3895
  4696  001F0A                     l3889:
  4697  001F0A  FFFF               	dw	65535	; assembler added errata NOP
  4698                           
  4699                           ; BSR set to: 0
  4700                           ;motors.c: 586:         LATD &= 0xC3;
  4701  001F0C  0EC3               	movlw	195
  4702  001F0E  168C               	andwf	140,f,c	;volatile
  4703  001F10                     
  4704                           ; BSR set to: 0
  4705                           ;motors.c: 588:         LATD |= rotSequence[i%4] << 2;
  4706  001F10  0E03               	movlw	3
  4707  001F12  15FA               	andwf	rotateObj@i& (0+255),w,b
  4708  001F14  6FF4               	movwf	??_rotateObj& (0+255),b
  4709  001F16  0E00               	movlw	0
  4710  001F18  15FB               	andwf	(rotateObj@i+1)& (0+255),w,b
  4711  001F1A  6FF5               	movwf	(??_rotateObj+1)& (0+255),b
  4712  001F1C  0E80               	movlw	low rotateObj@rotSequence
  4713  001F1E  25F4               	addwf	??_rotateObj& (0+255),w,b
  4714  001F20  6ED9               	movwf	fsr2l,c
  4715  001F22  0E00               	movlw	high rotateObj@rotSequence
  4716  001F24  21F5               	addwfc	(??_rotateObj+1)& (0+255),w,b
  4717  001F26  6EDA               	movwf	fsr2h,c
  4718  001F28  50DF               	movf	indf2,w,c
  4719  001F2A  6FF6               	movwf	(??_rotateObj+2)& (0+255),b
  4720  001F2C  90D8               	bcf	status,0,c
  4721  001F2E  37F6               	rlcf	(??_rotateObj+2)& (0+255),f,b
  4722  001F30  90D8               	bcf	status,0,c
  4723  001F32  35F6               	rlcf	(??_rotateObj+2)& (0+255),w,b
  4724  001F34  128C               	iorwf	140,f,c	;volatile
  4725  001F36                     
  4726                           ; BSR set to: 0
  4727                           ;motors.c: 591:     }
  4728  001F36  4BFA               	infsnz	rotateObj@i& (0+255),f,b
  4729  001F38  2BFB               	incf	(rotateObj@i+1)& (0+255),f,b
  4730  001F3A                     l3895:
  4731  001F3A  FFFF               	dw	65535	; assembler added errata NOP
  4732                           
  4733                           ; BSR set to: 0
  4734  001F3C  51F8               	movf	rotateObj@totStep& (0+255),w,b
  4735  001F3E  5DFA               	subwf	rotateObj@i& (0+255),w,b
  4736  001F40  51F9               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4737  001F42  59FB               	subwfb	(rotateObj@i+1)& (0+255),w,b
  4738  001F44  A0D8               	btfss	status,0,c
  4739  001F46  EFA7  F00F         	goto	u3231
  4740  001F4A  EFAA  F00F         	goto	u3230
  4741  001F4E                     u3231:
  4742  001F4E  FFFF               	dw	65535	; assembler added errata NOP
  4743  001F50  EF85  F00F         	goto	l3889
  4744  001F54                     u3230:
  4745  001F54  FFFF               	dw	65535	; assembler added errata NOP
  4746  001F56                     
  4747                           ; BSR set to: 0
  4748  001F56  0012               	return		;funcret
  4749  001F58  FFFF               	dw	65535	; errata NOP
  4750  001F5A                     __end_of_rotateObj:
  4751                           	callstack 0
  4752                           
  4753 ;; *************** function ___xxtofl *****************
  4754 ;; Defined at:
  4755 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4756 ;; Parameters:    Size  Location     Type
  4757 ;;  sign            1    wreg     unsigned char 
  4758 ;;  val             4   17[COMRAM] long 
  4759 ;; Auto vars:     Size  Location     Type
  4760 ;;  sign            1   25[COMRAM] unsigned char 
  4761 ;;  arg             4   27[COMRAM] unsigned long 
  4762 ;;  exp             1   26[COMRAM] unsigned char 
  4763 ;; Return value:  Size  Location     Type
  4764 ;;                  4   17[COMRAM] unsigned char 
  4765 ;; Registers used:
  4766 ;;		wreg, status,2, status,0
  4767 ;; Tracked objects:
  4768 ;;		On entry : 0/0
  4769 ;;		On exit  : 0/0
  4770 ;;		Unchanged: 0/0
  4771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4772 ;;      Params:         4       0       0       0       0       0       0
  4773 ;;      Locals:         6       0       0       0       0       0       0
  4774 ;;      Temps:          4       0       0       0       0       0       0
  4775 ;;      Totals:        14       0       0       0       0       0       0
  4776 ;;Total ram usage:       14 bytes
  4777 ;; Hardware stack levels used:    1
  4778 ;; Hardware stack levels required when called:    4
  4779 ;; This function calls:
  4780 ;;		Nothing
  4781 ;; This function is called by:
  4782 ;;		_rotateObj
  4783 ;; This function uses a non-reentrant model
  4784 ;;
  4785                           
  4786                           	psect	text31
  4787  000F8C                     __ptext31:
  4788                           	callstack 0
  4789  000F8C                     ___xxtofl:
  4790                           	callstack 0
  4791  000F8C  FFFF               	dw	65535	; assembler added errata NOP
  4792                           
  4793                           ; BSR set to: 0
  4794                           ;incstack = 0
  4795                           ;___xxtofl@sign stored from wreg
  4796  000F8E  6E1A               	movwf	___xxtofl@sign^0,c
  4797  000F90  501A               	movf	___xxtofl@sign^0,w,c
  4798  000F92  B4D8               	btfsc	status,2,c
  4799  000F94  EFCE  F007         	goto	u2741
  4800  000F98  EFD1  F007         	goto	u2740
  4801  000F9C                     u2741:
  4802  000F9C  FFFF               	dw	65535	; assembler added errata NOP
  4803  000F9E  EFF6  F007         	goto	l1235
  4804  000FA2                     u2740:
  4805  000FA2  FFFF               	dw	65535	; assembler added errata NOP
  4806  000FA4  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4807  000FA6  EFDA  F007         	goto	u2750
  4808  000FAA  EFD7  F007         	goto	u2751
  4809  000FAE                     u2751:
  4810  000FAE  FFFF               	dw	65535	; assembler added errata NOP
  4811  000FB0  EFF6  F007         	goto	l1235
  4812  000FB4                     u2750:
  4813  000FB4  FFFF               	dw	65535	; assembler added errata NOP
  4814  000FB6  C012  F016         	movff	___xxtofl@val,??___xxtofl
  4815  000FBA  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  4816  000FBE  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  4817  000FC2  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  4818  000FC6  1E16               	comf	??___xxtofl^0,f,c
  4819  000FC8  1E17               	comf	(??___xxtofl+1)^0,f,c
  4820  000FCA  1E18               	comf	(??___xxtofl+2)^0,f,c
  4821  000FCC  1E19               	comf	(??___xxtofl+3)^0,f,c
  4822  000FCE  2A16               	incf	??___xxtofl^0,f,c
  4823  000FD0  0E00               	movlw	0
  4824  000FD2  2217               	addwfc	(??___xxtofl+1)^0,f,c
  4825  000FD4  2218               	addwfc	(??___xxtofl+2)^0,f,c
  4826  000FD6  2219               	addwfc	(??___xxtofl+3)^0,f,c
  4827  000FD8  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  4828  000FDC  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4829  000FE0  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4830  000FE4  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4831  000FE8  EFFF  F007         	goto	l3599
  4832  000FEC                     l1235:
  4833  000FEC  FFFF               	dw	65535	; assembler added errata NOP
  4834  000FEE  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  4835  000FF2  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4836  000FF6  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4837  000FFA  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4838  000FFE                     l3599:
  4839  000FFE  FFFF               	dw	65535	; assembler added errata NOP
  4840  001000  5012               	movf	___xxtofl@val^0,w,c
  4841  001002  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  4842  001004  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  4843  001006  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  4844  001008  A4D8               	btfss	status,2,c
  4845  00100A  EF09  F008         	goto	u2761
  4846  00100E  EF0C  F008         	goto	u2760
  4847  001012                     u2761:
  4848  001012  FFFF               	dw	65535	; assembler added errata NOP
  4849  001014  EF17  F008         	goto	l3605
  4850  001018                     u2760:
  4851  001018  FFFF               	dw	65535	; assembler added errata NOP
  4852  00101A  0E00               	movlw	0
  4853  00101C  6E12               	movwf	?___xxtofl^0,c
  4854  00101E  0E00               	movlw	0
  4855  001020  6E13               	movwf	(?___xxtofl+1)^0,c
  4856  001022  0E00               	movlw	0
  4857  001024  6E14               	movwf	(?___xxtofl+2)^0,c
  4858  001026  0E00               	movlw	0
  4859  001028  6E15               	movwf	(?___xxtofl+3)^0,c
  4860  00102A  EFBF  F008         	goto	l1238
  4861  00102E                     l3605:
  4862  00102E  FFFF               	dw	65535	; assembler added errata NOP
  4863  001030  0E96               	movlw	150
  4864  001032  6E1B               	movwf	___xxtofl@exp^0,c
  4865  001034  EF23  F008         	goto	l3609
  4866  001038                     l3607:
  4867  001038  FFFF               	dw	65535	; assembler added errata NOP
  4868  00103A  2A1B               	incf	___xxtofl@exp^0,f,c
  4869  00103C  90D8               	bcf	status,0,c
  4870  00103E  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4871  001040  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4872  001042  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4873  001044  321C               	rrcf	___xxtofl@arg^0,f,c
  4874  001046                     l3609:
  4875  001046  FFFF               	dw	65535	; assembler added errata NOP
  4876  001048  0E00               	movlw	0
  4877  00104A  141C               	andwf	___xxtofl@arg^0,w,c
  4878  00104C  6E16               	movwf	??___xxtofl^0,c
  4879  00104E  0E00               	movlw	0
  4880  001050  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4881  001052  6E17               	movwf	(??___xxtofl+1)^0,c
  4882  001054  0E00               	movlw	0
  4883  001056  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4884  001058  6E18               	movwf	(??___xxtofl+2)^0,c
  4885  00105A  0EFE               	movlw	254
  4886  00105C  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4887  00105E  6E19               	movwf	(??___xxtofl+3)^0,c
  4888  001060  5016               	movf	??___xxtofl^0,w,c
  4889  001062  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4890  001064  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4891  001066  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4892  001068  A4D8               	btfss	status,2,c
  4893  00106A  EF39  F008         	goto	u2771
  4894  00106E  EF3C  F008         	goto	u2770
  4895  001072                     u2771:
  4896  001072  FFFF               	dw	65535	; assembler added errata NOP
  4897  001074  EF1C  F008         	goto	l3607
  4898  001078                     u2770:
  4899  001078  FFFF               	dw	65535	; assembler added errata NOP
  4900  00107A  EF4C  F008         	goto	l1242
  4901  00107E                     l3611:
  4902  00107E  FFFF               	dw	65535	; assembler added errata NOP
  4903  001080  2A1B               	incf	___xxtofl@exp^0,f,c
  4904  001082  0E01               	movlw	1
  4905  001084  261C               	addwf	___xxtofl@arg^0,f,c
  4906  001086  0E00               	movlw	0
  4907  001088  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4908  00108A  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4909  00108C  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4910  00108E  90D8               	bcf	status,0,c
  4911  001090  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4912  001092  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4913  001094  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4914  001096  321C               	rrcf	___xxtofl@arg^0,f,c
  4915  001098                     l1242:
  4916  001098  FFFF               	dw	65535	; assembler added errata NOP
  4917  00109A  0E00               	movlw	0
  4918  00109C  141C               	andwf	___xxtofl@arg^0,w,c
  4919  00109E  6E16               	movwf	??___xxtofl^0,c
  4920  0010A0  0E00               	movlw	0
  4921  0010A2  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4922  0010A4  6E17               	movwf	(??___xxtofl+1)^0,c
  4923  0010A6  0E00               	movlw	0
  4924  0010A8  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4925  0010AA  6E18               	movwf	(??___xxtofl+2)^0,c
  4926  0010AC  0EFF               	movlw	255
  4927  0010AE  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4928  0010B0  6E19               	movwf	(??___xxtofl+3)^0,c
  4929  0010B2  5016               	movf	??___xxtofl^0,w,c
  4930  0010B4  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4931  0010B6  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4932  0010B8  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4933  0010BA  A4D8               	btfss	status,2,c
  4934  0010BC  EF62  F008         	goto	u2781
  4935  0010C0  EF65  F008         	goto	u2780
  4936  0010C4                     u2781:
  4937  0010C4  FFFF               	dw	65535	; assembler added errata NOP
  4938  0010C6  EF3F  F008         	goto	l3611
  4939  0010CA                     u2780:
  4940  0010CA  FFFF               	dw	65535	; assembler added errata NOP
  4941  0010CC  EF6F  F008         	goto	l3619
  4942  0010D0                     l3617:
  4943  0010D0  FFFF               	dw	65535	; assembler added errata NOP
  4944  0010D2  061B               	decf	___xxtofl@exp^0,f,c
  4945  0010D4  90D8               	bcf	status,0,c
  4946  0010D6  361C               	rlcf	___xxtofl@arg^0,f,c
  4947  0010D8  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4948  0010DA  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4949  0010DC  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4950  0010DE                     l3619:
  4951  0010DE  FFFF               	dw	65535	; assembler added errata NOP
  4952  0010E0  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4953  0010E2  EF75  F008         	goto	u2791
  4954  0010E6  EF78  F008         	goto	u2790
  4955  0010EA                     u2791:
  4956  0010EA  FFFF               	dw	65535	; assembler added errata NOP
  4957  0010EC  EF82  F008         	goto	l1249
  4958  0010F0                     u2790:
  4959  0010F0  FFFF               	dw	65535	; assembler added errata NOP
  4960  0010F2  0E02               	movlw	2
  4961  0010F4  601B               	cpfslt	___xxtofl@exp^0,c
  4962  0010F6  EF7F  F008         	goto	u2801
  4963  0010FA  EF82  F008         	goto	u2800
  4964  0010FE                     u2801:
  4965  0010FE  FFFF               	dw	65535	; assembler added errata NOP
  4966  001100  EF68  F008         	goto	l3617
  4967  001104                     u2800:
  4968  001104                     l1249:
  4969  001104  FFFF               	dw	65535	; assembler added errata NOP
  4970  001106  B01B               	btfsc	___xxtofl@exp^0,0,c
  4971  001108  EF88  F008         	goto	u2811
  4972  00110C  EF8B  F008         	goto	u2810
  4973  001110                     u2811:
  4974  001110  FFFF               	dw	65535	; assembler added errata NOP
  4975  001112  EF8D  F008         	goto	l3625
  4976  001116                     u2810:
  4977  001116  FFFF               	dw	65535	; assembler added errata NOP
  4978  001118  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  4979  00111A                     l3625:
  4980  00111A  FFFF               	dw	65535	; assembler added errata NOP
  4981  00111C  90D8               	bcf	status,0,c
  4982  00111E  321B               	rrcf	___xxtofl@exp^0,f,c
  4983  001120  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  4984  001124  6A17               	clrf	(??___xxtofl+1)^0,c
  4985  001126  6A18               	clrf	(??___xxtofl+2)^0,c
  4986  001128  6A19               	clrf	(??___xxtofl+3)^0,c
  4987  00112A  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  4988  00112E  6A18               	clrf	(??___xxtofl+2)^0,c
  4989  001130  6A17               	clrf	(??___xxtofl+1)^0,c
  4990  001132  6A16               	clrf	??___xxtofl^0,c
  4991  001134  5016               	movf	??___xxtofl^0,w,c
  4992  001136  121C               	iorwf	___xxtofl@arg^0,f,c
  4993  001138  5017               	movf	(??___xxtofl+1)^0,w,c
  4994  00113A  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4995  00113C  5018               	movf	(??___xxtofl+2)^0,w,c
  4996  00113E  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4997  001140  5019               	movf	(??___xxtofl+3)^0,w,c
  4998  001142  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4999  001144  501A               	movf	___xxtofl@sign^0,w,c
  5000  001146  B4D8               	btfsc	status,2,c
  5001  001148  EFA8  F008         	goto	u2821
  5002  00114C  EFAB  F008         	goto	u2820
  5003  001150                     u2821:
  5004  001150  FFFF               	dw	65535	; assembler added errata NOP
  5005  001152  EFB6  F008         	goto	l3635
  5006  001156                     u2820:
  5007  001156  FFFF               	dw	65535	; assembler added errata NOP
  5008  001158  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  5009  00115A  EFB4  F008         	goto	u2830
  5010  00115E  EFB1  F008         	goto	u2831
  5011  001162                     u2831:
  5012  001162  FFFF               	dw	65535	; assembler added errata NOP
  5013  001164  EFB6  F008         	goto	l3635
  5014  001168                     u2830:
  5015  001168  FFFF               	dw	65535	; assembler added errata NOP
  5016  00116A  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  5017  00116C                     l3635:
  5018  00116C  FFFF               	dw	65535	; assembler added errata NOP
  5019  00116E  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  5020  001172  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  5021  001176  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  5022  00117A  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  5023  00117E                     l1238:
  5024  00117E  FFFF               	dw	65535	; assembler added errata NOP
  5025  001180  0012               	return		;funcret
  5026  001182  FFFF               	dw	65535	; errata NOP
  5027  001184                     __end_of___xxtofl:
  5028                           	callstack 0
  5029                           
  5030 ;; *************** function ___fltol *****************
  5031 ;; Defined at:
  5032 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  5033 ;; Parameters:    Size  Location     Type
  5034 ;;  f1              4   56[COMRAM] unsigned char 
  5035 ;; Auto vars:     Size  Location     Type
  5036 ;;  exp1            1   65[COMRAM] unsigned char 
  5037 ;;  sign1           1   64[COMRAM] unsigned char 
  5038 ;; Return value:  Size  Location     Type
  5039 ;;                  4   56[COMRAM] long 
  5040 ;; Registers used:
  5041 ;;		wreg, status,2, status,0
  5042 ;; Tracked objects:
  5043 ;;		On entry : 0/0
  5044 ;;		On exit  : 0/0
  5045 ;;		Unchanged: 0/0
  5046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5047 ;;      Params:         4       0       0       0       0       0       0
  5048 ;;      Locals:         2       0       0       0       0       0       0
  5049 ;;      Temps:          4       0       0       0       0       0       0
  5050 ;;      Totals:        10       0       0       0       0       0       0
  5051 ;;Total ram usage:       10 bytes
  5052 ;; Hardware stack levels used:    1
  5053 ;; Hardware stack levels required when called:    4
  5054 ;; This function calls:
  5055 ;;		Nothing
  5056 ;; This function is called by:
  5057 ;;		_rotateObj
  5058 ;; This function uses a non-reentrant model
  5059 ;;
  5060                           
  5061                           	psect	text32
  5062  0017AA                     __ptext32:
  5063                           	callstack 0
  5064  0017AA                     ___fltol:
  5065                           	callstack 0
  5066  0017AA  FFFF               	dw	65535	; assembler added errata NOP
  5067  0017AC  343B               	rlcf	(___fltol@f1+2)^0,w,c
  5068  0017AE  343C               	rlcf	(___fltol@f1+3)^0,w,c
  5069  0017B0  6E42               	movwf	___fltol@exp1^0,c
  5070  0017B2  5042               	movf	___fltol@exp1^0,w,c
  5071  0017B4  A4D8               	btfss	status,2,c
  5072  0017B6  EFDF  F00B         	goto	u2671
  5073  0017BA  EFE2  F00B         	goto	u2670
  5074  0017BE                     u2671:
  5075  0017BE  FFFF               	dw	65535	; assembler added errata NOP
  5076  0017C0  EFEE  F00B         	goto	l3555
  5077  0017C4                     u2670:
  5078  0017C4  FFFF               	dw	65535	; assembler added errata NOP
  5079  0017C6                     l3551:
  5080  0017C6  FFFF               	dw	65535	; assembler added errata NOP
  5081  0017C8  0E00               	movlw	0
  5082  0017CA  6E39               	movwf	?___fltol^0,c
  5083  0017CC  0E00               	movlw	0
  5084  0017CE  6E3A               	movwf	(?___fltol+1)^0,c
  5085  0017D0  0E00               	movlw	0
  5086  0017D2  6E3B               	movwf	(?___fltol+2)^0,c
  5087  0017D4  0E00               	movlw	0
  5088  0017D6  6E3C               	movwf	(?___fltol+3)^0,c
  5089  0017D8  EF6D  F00C         	goto	l877
  5090  0017DC                     l3555:
  5091  0017DC  FFFF               	dw	65535	; assembler added errata NOP
  5092  0017DE  C039  F03D         	movff	___fltol@f1,??___fltol
  5093  0017E2  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  5094  0017E6  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  5095  0017EA  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  5096  0017EE  0E20               	movlw	32
  5097  0017F0  EF00  F00C         	goto	u2680
  5098  0017F4                     u2685:
  5099  0017F4  FFFF               	dw	65535	; assembler added errata NOP
  5100  0017F6  90D8               	bcf	status,0,c
  5101  0017F8  3240               	rrcf	(??___fltol+3)^0,f,c
  5102  0017FA  323F               	rrcf	(??___fltol+2)^0,f,c
  5103  0017FC  323E               	rrcf	(??___fltol+1)^0,f,c
  5104  0017FE  323D               	rrcf	??___fltol^0,f,c
  5105  001800                     u2680:
  5106  001800  FFFF               	dw	65535	; assembler added errata NOP
  5107  001802  2EE8               	decfsz	wreg,f,c
  5108  001804  EFFA  F00B         	goto	u2685
  5109  001808  503D               	movf	??___fltol^0,w,c
  5110  00180A  6E41               	movwf	___fltol@sign1^0,c
  5111  00180C  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  5112  00180E  0EFF               	movlw	255
  5113  001810  1639               	andwf	___fltol@f1^0,f,c
  5114  001812  0EFF               	movlw	255
  5115  001814  163A               	andwf	(___fltol@f1+1)^0,f,c
  5116  001816  0EFF               	movlw	255
  5117  001818  163B               	andwf	(___fltol@f1+2)^0,f,c
  5118  00181A  0E00               	movlw	0
  5119  00181C  163C               	andwf	(___fltol@f1+3)^0,f,c
  5120  00181E  0E96               	movlw	150
  5121  001820  5E42               	subwf	___fltol@exp1^0,f,c
  5122  001822  BE42               	btfsc	___fltol@exp1^0,7,c
  5123  001824  EF19  F00C         	goto	u2690
  5124  001828  EF16  F00C         	goto	u2691
  5125  00182C                     u2691:
  5126  00182C  FFFF               	dw	65535	; assembler added errata NOP
  5127  00182E  EF33  F00C         	goto	l3575
  5128  001832                     u2690:
  5129  001832  FFFF               	dw	65535	; assembler added errata NOP
  5130  001834  5042               	movf	___fltol@exp1^0,w,c
  5131  001836  0A80               	xorlw	128
  5132  001838  0F97               	addlw	151
  5133  00183A  B0D8               	btfsc	status,0,c
  5134  00183C  EF22  F00C         	goto	u2701
  5135  001840  EF25  F00C         	goto	u2700
  5136  001844                     u2701:
  5137  001844  FFFF               	dw	65535	; assembler added errata NOP
  5138  001846  EF28  F00C         	goto	l3571
  5139  00184A                     u2700:
  5140  00184A  FFFF               	dw	65535	; assembler added errata NOP
  5141  00184C  EFE3  F00B         	goto	l3551
  5142  001850                     l3571:
  5143  001850  FFFF               	dw	65535	; assembler added errata NOP
  5144  001852  90D8               	bcf	status,0,c
  5145  001854  323C               	rrcf	(___fltol@f1+3)^0,f,c
  5146  001856  323B               	rrcf	(___fltol@f1+2)^0,f,c
  5147  001858  323A               	rrcf	(___fltol@f1+1)^0,f,c
  5148  00185A  3239               	rrcf	___fltol@f1^0,f,c
  5149  00185C  3E42               	incfsz	___fltol@exp1^0,f,c
  5150  00185E  EF28  F00C         	goto	l3571
  5151  001862  EF51  F00C         	goto	l3585
  5152  001866                     l3575:
  5153  001866  FFFF               	dw	65535	; assembler added errata NOP
  5154  001868  0E1F               	movlw	31
  5155  00186A  6442               	cpfsgt	___fltol@exp1^0,c
  5156  00186C  EF3A  F00C         	goto	u2711
  5157  001870  EF3D  F00C         	goto	u2710
  5158  001874                     u2711:
  5159  001874  FFFF               	dw	65535	; assembler added errata NOP
  5160  001876  EF47  F00C         	goto	l3583
  5161  00187A                     u2710:
  5162  00187A  FFFF               	dw	65535	; assembler added errata NOP
  5163  00187C  EFE3  F00B         	goto	l3551
  5164  001880                     l3581:
  5165  001880  FFFF               	dw	65535	; assembler added errata NOP
  5166  001882  90D8               	bcf	status,0,c
  5167  001884  3639               	rlcf	___fltol@f1^0,f,c
  5168  001886  363A               	rlcf	(___fltol@f1+1)^0,f,c
  5169  001888  363B               	rlcf	(___fltol@f1+2)^0,f,c
  5170  00188A  363C               	rlcf	(___fltol@f1+3)^0,f,c
  5171  00188C  0642               	decf	___fltol@exp1^0,f,c
  5172  00188E                     l3583:
  5173  00188E  FFFF               	dw	65535	; assembler added errata NOP
  5174  001890  5042               	movf	___fltol@exp1^0,w,c
  5175  001892  A4D8               	btfss	status,2,c
  5176  001894  EF4E  F00C         	goto	u2721
  5177  001898  EF51  F00C         	goto	u2720
  5178  00189C                     u2721:
  5179  00189C  FFFF               	dw	65535	; assembler added errata NOP
  5180  00189E  EF40  F00C         	goto	l3581
  5181  0018A2                     u2720:
  5182  0018A2                     l3585:
  5183  0018A2  FFFF               	dw	65535	; assembler added errata NOP
  5184  0018A4  5041               	movf	___fltol@sign1^0,w,c
  5185  0018A6  B4D8               	btfsc	status,2,c
  5186  0018A8  EF58  F00C         	goto	u2731
  5187  0018AC  EF5B  F00C         	goto	u2730
  5188  0018B0                     u2731:
  5189  0018B0  FFFF               	dw	65535	; assembler added errata NOP
  5190  0018B2  EF64  F00C         	goto	l3589
  5191  0018B6                     u2730:
  5192  0018B6  FFFF               	dw	65535	; assembler added errata NOP
  5193  0018B8  1E3C               	comf	(___fltol@f1+3)^0,f,c
  5194  0018BA  1E3B               	comf	(___fltol@f1+2)^0,f,c
  5195  0018BC  1E3A               	comf	(___fltol@f1+1)^0,f,c
  5196  0018BE  6C39               	negf	___fltol@f1^0,c
  5197  0018C0  0E00               	movlw	0
  5198  0018C2  223A               	addwfc	(___fltol@f1+1)^0,f,c
  5199  0018C4  223B               	addwfc	(___fltol@f1+2)^0,f,c
  5200  0018C6  223C               	addwfc	(___fltol@f1+3)^0,f,c
  5201  0018C8                     l3589:
  5202  0018C8  FFFF               	dw	65535	; assembler added errata NOP
  5203  0018CA  C039  F039         	movff	___fltol@f1,?___fltol
  5204  0018CE  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  5205  0018D2  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  5206  0018D6  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  5207  0018DA                     l877:
  5208  0018DA  FFFF               	dw	65535	; assembler added errata NOP
  5209  0018DC  0012               	return		;funcret
  5210  0018DE  FFFF               	dw	65535	; errata NOP
  5211  0018E0                     __end_of___fltol:
  5212                           	callstack 0
  5213                           
  5214 ;; *************** function ___fldiv *****************
  5215 ;; Defined at:
  5216 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  5217 ;; Parameters:    Size  Location     Type
  5218 ;;  b               4   31[COMRAM] long 
  5219 ;;  a               4   35[COMRAM] long 
  5220 ;; Auto vars:     Size  Location     Type
  5221 ;;  grs             4   50[COMRAM] unsigned long 
  5222 ;;  rem             4   43[COMRAM] unsigned long 
  5223 ;;  new_exp         2   48[COMRAM] short 
  5224 ;;  aexp            1   55[COMRAM] unsigned char 
  5225 ;;  bexp            1   54[COMRAM] unsigned char 
  5226 ;;  sign            1   47[COMRAM] unsigned char 
  5227 ;; Return value:  Size  Location     Type
  5228 ;;                  4   31[COMRAM] unsigned char 
  5229 ;; Registers used:
  5230 ;;		wreg, status,2, status,0
  5231 ;; Tracked objects:
  5232 ;;		On entry : 0/0
  5233 ;;		On exit  : 0/0
  5234 ;;		Unchanged: 0/0
  5235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5236 ;;      Params:         8       0       0       0       0       0       0
  5237 ;;      Locals:        13       0       0       0       0       0       0
  5238 ;;      Temps:          4       0       0       0       0       0       0
  5239 ;;      Totals:        25       0       0       0       0       0       0
  5240 ;;Total ram usage:       25 bytes
  5241 ;; Hardware stack levels used:    1
  5242 ;; Hardware stack levels required when called:    4
  5243 ;; This function calls:
  5244 ;;		Nothing
  5245 ;; This function is called by:
  5246 ;;		_rotateObj
  5247 ;; This function uses a non-reentrant model
  5248 ;;
  5249                           
  5250                           	psect	text33
  5251  000610                     __ptext33:
  5252                           	callstack 0
  5253  000610                     ___fldiv:
  5254                           	callstack 0
  5255  000610  FFFF               	dw	65535	; assembler added errata NOP
  5256  000612  5023               	movf	(___fldiv@b+3)^0,w,c
  5257  000614  0B80               	andlw	128
  5258  000616  6E30               	movwf	___fldiv@sign^0,c
  5259  000618  5023               	movf	(___fldiv@b+3)^0,w,c
  5260  00061A  2423               	addwf	(___fldiv@b+3)^0,w,c
  5261  00061C  6E37               	movwf	___fldiv@bexp^0,c
  5262  00061E  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5263  000620  EF14  F003         	goto	u2441
  5264  000624  EF17  F003         	goto	u2440
  5265  000628                     u2441:
  5266  000628  FFFF               	dw	65535	; assembler added errata NOP
  5267  00062A  EF19  F003         	goto	l3417
  5268  00062E                     u2440:
  5269  00062E  FFFF               	dw	65535	; assembler added errata NOP
  5270  000630  8037               	bsf	___fldiv@bexp^0,0,c
  5271  000632                     l3417:
  5272  000632  FFFF               	dw	65535	; assembler added errata NOP
  5273  000634  5037               	movf	___fldiv@bexp^0,w,c
  5274  000636  B4D8               	btfsc	status,2,c
  5275  000638  EF20  F003         	goto	u2451
  5276  00063C  EF23  F003         	goto	u2450
  5277  000640                     u2451:
  5278  000640  FFFF               	dw	65535	; assembler added errata NOP
  5279  000642  EF3C  F003         	goto	l3427
  5280  000646                     u2450:
  5281  000646  FFFF               	dw	65535	; assembler added errata NOP
  5282  000648  2837               	incf	___fldiv@bexp^0,w,c
  5283  00064A  A4D8               	btfss	status,2,c
  5284  00064C  EF2A  F003         	goto	u2461
  5285  000650  EF2D  F003         	goto	u2460
  5286  000654                     u2461:
  5287  000654  FFFF               	dw	65535	; assembler added errata NOP
  5288  000656  EF36  F003         	goto	l3423
  5289  00065A                     u2460:
  5290  00065A  FFFF               	dw	65535	; assembler added errata NOP
  5291  00065C  0E00               	movlw	0
  5292  00065E  6E20               	movwf	___fldiv@b^0,c
  5293  000660  0E00               	movlw	0
  5294  000662  6E21               	movwf	(___fldiv@b+1)^0,c
  5295  000664  0E00               	movlw	0
  5296  000666  6E22               	movwf	(___fldiv@b+2)^0,c
  5297  000668  0E00               	movlw	0
  5298  00066A  6E23               	movwf	(___fldiv@b+3)^0,c
  5299  00066C                     l3423:
  5300  00066C  FFFF               	dw	65535	; assembler added errata NOP
  5301  00066E  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5302  000670  0E00               	movlw	0
  5303  000672  6E23               	movwf	(___fldiv@b+3)^0,c
  5304  000674  EF45  F003         	goto	l3429
  5305  000678                     l3427:
  5306  000678  FFFF               	dw	65535	; assembler added errata NOP
  5307  00067A  0E00               	movlw	0
  5308  00067C  6E20               	movwf	___fldiv@b^0,c
  5309  00067E  0E00               	movlw	0
  5310  000680  6E21               	movwf	(___fldiv@b+1)^0,c
  5311  000682  0E00               	movlw	0
  5312  000684  6E22               	movwf	(___fldiv@b+2)^0,c
  5313  000686  0E00               	movlw	0
  5314  000688  6E23               	movwf	(___fldiv@b+3)^0,c
  5315  00068A                     l3429:
  5316  00068A  FFFF               	dw	65535	; assembler added errata NOP
  5317  00068C  5027               	movf	(___fldiv@a+3)^0,w,c
  5318  00068E  0B80               	andlw	128
  5319  000690  1A30               	xorwf	___fldiv@sign^0,f,c
  5320  000692  5027               	movf	(___fldiv@a+3)^0,w,c
  5321  000694  2427               	addwf	(___fldiv@a+3)^0,w,c
  5322  000696  6E38               	movwf	___fldiv@aexp^0,c
  5323  000698  AE26               	btfss	(___fldiv@a+2)^0,7,c
  5324  00069A  EF51  F003         	goto	u2471
  5325  00069E  EF54  F003         	goto	u2470
  5326  0006A2                     u2471:
  5327  0006A2  FFFF               	dw	65535	; assembler added errata NOP
  5328  0006A4  EF56  F003         	goto	l3437
  5329  0006A8                     u2470:
  5330  0006A8  FFFF               	dw	65535	; assembler added errata NOP
  5331  0006AA  8038               	bsf	___fldiv@aexp^0,0,c
  5332  0006AC                     l3437:
  5333  0006AC  FFFF               	dw	65535	; assembler added errata NOP
  5334  0006AE  5038               	movf	___fldiv@aexp^0,w,c
  5335  0006B0  B4D8               	btfsc	status,2,c
  5336  0006B2  EF5D  F003         	goto	u2481
  5337  0006B6  EF60  F003         	goto	u2480
  5338  0006BA                     u2481:
  5339  0006BA  FFFF               	dw	65535	; assembler added errata NOP
  5340  0006BC  EF79  F003         	goto	l3447
  5341  0006C0                     u2480:
  5342  0006C0  FFFF               	dw	65535	; assembler added errata NOP
  5343  0006C2  2838               	incf	___fldiv@aexp^0,w,c
  5344  0006C4  A4D8               	btfss	status,2,c
  5345  0006C6  EF67  F003         	goto	u2491
  5346  0006CA  EF6A  F003         	goto	u2490
  5347  0006CE                     u2491:
  5348  0006CE  FFFF               	dw	65535	; assembler added errata NOP
  5349  0006D0  EF73  F003         	goto	l3443
  5350  0006D4                     u2490:
  5351  0006D4  FFFF               	dw	65535	; assembler added errata NOP
  5352  0006D6  0E00               	movlw	0
  5353  0006D8  6E24               	movwf	___fldiv@a^0,c
  5354  0006DA  0E00               	movlw	0
  5355  0006DC  6E25               	movwf	(___fldiv@a+1)^0,c
  5356  0006DE  0E00               	movlw	0
  5357  0006E0  6E26               	movwf	(___fldiv@a+2)^0,c
  5358  0006E2  0E00               	movlw	0
  5359  0006E4  6E27               	movwf	(___fldiv@a+3)^0,c
  5360  0006E6                     l3443:
  5361  0006E6  FFFF               	dw	65535	; assembler added errata NOP
  5362  0006E8  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5363  0006EA  0E00               	movlw	0
  5364  0006EC  6E27               	movwf	(___fldiv@a+3)^0,c
  5365  0006EE  EF82  F003         	goto	l3449
  5366  0006F2                     l3447:
  5367  0006F2  FFFF               	dw	65535	; assembler added errata NOP
  5368  0006F4  0E00               	movlw	0
  5369  0006F6  6E24               	movwf	___fldiv@a^0,c
  5370  0006F8  0E00               	movlw	0
  5371  0006FA  6E25               	movwf	(___fldiv@a+1)^0,c
  5372  0006FC  0E00               	movlw	0
  5373  0006FE  6E26               	movwf	(___fldiv@a+2)^0,c
  5374  000700  0E00               	movlw	0
  5375  000702  6E27               	movwf	(___fldiv@a+3)^0,c
  5376  000704                     l3449:
  5377  000704  FFFF               	dw	65535	; assembler added errata NOP
  5378  000706  5024               	movf	___fldiv@a^0,w,c
  5379  000708  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5380  00070A  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5381  00070C  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5382  00070E  A4D8               	btfss	status,2,c
  5383  000710  EF8C  F003         	goto	u2501
  5384  000714  EF8F  F003         	goto	u2500
  5385  000718                     u2501:
  5386  000718  FFFF               	dw	65535	; assembler added errata NOP
  5387  00071A  EFA9  F003         	goto	l3461
  5388  00071E                     u2500:
  5389  00071E  FFFF               	dw	65535	; assembler added errata NOP
  5390  000720  0E00               	movlw	0
  5391  000722  6E20               	movwf	___fldiv@b^0,c
  5392  000724  0E00               	movlw	0
  5393  000726  6E21               	movwf	(___fldiv@b+1)^0,c
  5394  000728  0E00               	movlw	0
  5395  00072A  6E22               	movwf	(___fldiv@b+2)^0,c
  5396  00072C  0E00               	movlw	0
  5397  00072E  6E23               	movwf	(___fldiv@b+3)^0,c
  5398  000730  0E80               	movlw	128
  5399  000732  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5400  000734  0E7F               	movlw	127
  5401  000736  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5402  000738                     l3455:
  5403  000738  FFFF               	dw	65535	; assembler added errata NOP
  5404  00073A  5030               	movf	___fldiv@sign^0,w,c
  5405  00073C  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5406  00073E  C020  F020         	movff	___fldiv@b,?___fldiv
  5407  000742  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5408  000746  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5409  00074A  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5410  00074E  EF1E  F005         	goto	l1162
  5411  000752                     l3461:
  5412  000752  FFFF               	dw	65535	; assembler added errata NOP
  5413  000754  5037               	movf	___fldiv@bexp^0,w,c
  5414  000756  A4D8               	btfss	status,2,c
  5415  000758  EFB0  F003         	goto	u2511
  5416  00075C  EFB3  F003         	goto	u2510
  5417  000760                     u2511:
  5418  000760  FFFF               	dw	65535	; assembler added errata NOP
  5419  000762  EFBE  F003         	goto	l3469
  5420  000766                     u2510:
  5421  000766  FFFF               	dw	65535	; assembler added errata NOP
  5422  000768  0E00               	movlw	0
  5423  00076A  6E20               	movwf	?___fldiv^0,c
  5424  00076C  0E00               	movlw	0
  5425  00076E  6E21               	movwf	(?___fldiv+1)^0,c
  5426  000770  0E00               	movlw	0
  5427  000772  6E22               	movwf	(?___fldiv+2)^0,c
  5428  000774  0E00               	movlw	0
  5429  000776  6E23               	movwf	(?___fldiv+3)^0,c
  5430  000778  EF1E  F005         	goto	l1162
  5431  00077C                     l3469:
  5432  00077C  FFFF               	dw	65535	; assembler added errata NOP
  5433  00077E  5038               	movf	___fldiv@aexp^0,w,c
  5434  000780  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5435  000784  6A29               	clrf	(??___fldiv+1)^0,c
  5436  000786  5E28               	subwf	??___fldiv^0,f,c
  5437  000788  0E00               	movlw	0
  5438  00078A  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5439  00078C  0E7F               	movlw	127
  5440  00078E  2428               	addwf	??___fldiv^0,w,c
  5441  000790  6E31               	movwf	___fldiv@new_exp^0,c
  5442  000792  0E00               	movlw	0
  5443  000794  2029               	addwfc	(??___fldiv+1)^0,w,c
  5444  000796  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5445  000798  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5446  00079C  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5447  0007A0  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5448  0007A4  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5449  0007A8  0E00               	movlw	0
  5450  0007AA  6E20               	movwf	___fldiv@b^0,c
  5451  0007AC  0E00               	movlw	0
  5452  0007AE  6E21               	movwf	(___fldiv@b+1)^0,c
  5453  0007B0  0E00               	movlw	0
  5454  0007B2  6E22               	movwf	(___fldiv@b+2)^0,c
  5455  0007B4  0E00               	movlw	0
  5456  0007B6  6E23               	movwf	(___fldiv@b+3)^0,c
  5457  0007B8  0E00               	movlw	0
  5458  0007BA  6E33               	movwf	___fldiv@grs^0,c
  5459  0007BC  0E00               	movlw	0
  5460  0007BE  6E34               	movwf	(___fldiv@grs+1)^0,c
  5461  0007C0  0E00               	movlw	0
  5462  0007C2  6E35               	movwf	(___fldiv@grs+2)^0,c
  5463  0007C4  0E00               	movlw	0
  5464  0007C6  6E36               	movwf	(___fldiv@grs+3)^0,c
  5465  0007C8  0E00               	movlw	0
  5466  0007CA  6E38               	movwf	___fldiv@aexp^0,c
  5467  0007CC  EF2A  F004         	goto	l1164
  5468  0007D0                     l3479:
  5469  0007D0  FFFF               	dw	65535	; assembler added errata NOP
  5470  0007D2  5038               	movf	___fldiv@aexp^0,w,c
  5471  0007D4  B4D8               	btfsc	status,2,c
  5472  0007D6  EFEF  F003         	goto	u2521
  5473  0007DA  EFF2  F003         	goto	u2520
  5474  0007DE                     u2521:
  5475  0007DE  FFFF               	dw	65535	; assembler added errata NOP
  5476  0007E0  EF0D  F004         	goto	l3487
  5477  0007E4                     u2520:
  5478  0007E4  FFFF               	dw	65535	; assembler added errata NOP
  5479  0007E6  90D8               	bcf	status,0,c
  5480  0007E8  362C               	rlcf	___fldiv@rem^0,f,c
  5481  0007EA  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5482  0007EC  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5483  0007EE  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5484  0007F0  90D8               	bcf	status,0,c
  5485  0007F2  3620               	rlcf	___fldiv@b^0,f,c
  5486  0007F4  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5487  0007F6  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5488  0007F8  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5489  0007FA  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5490  0007FC  EF02  F004         	goto	u2531
  5491  000800  EF05  F004         	goto	u2530
  5492  000804                     u2531:
  5493  000804  FFFF               	dw	65535	; assembler added errata NOP
  5494  000806  EF07  F004         	goto	l1167
  5495  00080A                     u2530:
  5496  00080A  FFFF               	dw	65535	; assembler added errata NOP
  5497  00080C  8020               	bsf	___fldiv@b^0,0,c
  5498  00080E                     l1167:
  5499  00080E  FFFF               	dw	65535	; assembler added errata NOP
  5500  000810  90D8               	bcf	status,0,c
  5501  000812  3633               	rlcf	___fldiv@grs^0,f,c
  5502  000814  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5503  000816  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5504  000818  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5505  00081A                     l3487:
  5506  00081A  FFFF               	dw	65535	; assembler added errata NOP
  5507  00081C  5024               	movf	___fldiv@a^0,w,c
  5508  00081E  5C2C               	subwf	___fldiv@rem^0,w,c
  5509  000820  5025               	movf	(___fldiv@a+1)^0,w,c
  5510  000822  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5511  000824  5026               	movf	(___fldiv@a+2)^0,w,c
  5512  000826  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5513  000828  5027               	movf	(___fldiv@a+3)^0,w,c
  5514  00082A  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5515  00082C  A0D8               	btfss	status,0,c
  5516  00082E  EF1B  F004         	goto	u2541
  5517  000832  EF1E  F004         	goto	u2540
  5518  000836                     u2541:
  5519  000836  FFFF               	dw	65535	; assembler added errata NOP
  5520  000838  EF28  F004         	goto	l3493
  5521  00083C                     u2540:
  5522  00083C  FFFF               	dw	65535	; assembler added errata NOP
  5523  00083E  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5524  000840  5024               	movf	___fldiv@a^0,w,c
  5525  000842  5E2C               	subwf	___fldiv@rem^0,f,c
  5526  000844  5025               	movf	(___fldiv@a+1)^0,w,c
  5527  000846  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5528  000848  5026               	movf	(___fldiv@a+2)^0,w,c
  5529  00084A  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5530  00084C  5027               	movf	(___fldiv@a+3)^0,w,c
  5531  00084E  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5532  000850                     l3493:
  5533  000850  FFFF               	dw	65535	; assembler added errata NOP
  5534  000852  2A38               	incf	___fldiv@aexp^0,f,c
  5535  000854                     l1164:
  5536  000854  FFFF               	dw	65535	; assembler added errata NOP
  5537  000856  0E19               	movlw	25
  5538  000858  6438               	cpfsgt	___fldiv@aexp^0,c
  5539  00085A  EF31  F004         	goto	u2551
  5540  00085E  EF34  F004         	goto	u2550
  5541  000862                     u2551:
  5542  000862  FFFF               	dw	65535	; assembler added errata NOP
  5543  000864  EFE8  F003         	goto	l3479
  5544  000868                     u2550:
  5545  000868  FFFF               	dw	65535	; assembler added errata NOP
  5546  00086A  502C               	movf	___fldiv@rem^0,w,c
  5547  00086C  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5548  00086E  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5549  000870  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5550  000872  B4D8               	btfsc	status,2,c
  5551  000874  EF3E  F004         	goto	u2561
  5552  000878  EF41  F004         	goto	u2560
  5553  00087C                     u2561:
  5554  00087C  FFFF               	dw	65535	; assembler added errata NOP
  5555  00087E  EF5E  F004         	goto	l3505
  5556  000882                     u2560:
  5557  000882  FFFF               	dw	65535	; assembler added errata NOP
  5558  000884  8033               	bsf	___fldiv@grs^0,0,c
  5559  000886  EF5E  F004         	goto	l3505
  5560  00088A                     l3499:
  5561  00088A  FFFF               	dw	65535	; assembler added errata NOP
  5562  00088C  90D8               	bcf	status,0,c
  5563  00088E  3620               	rlcf	___fldiv@b^0,f,c
  5564  000890  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5565  000892  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5566  000894  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5567  000896  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5568  000898  EF50  F004         	goto	u2571
  5569  00089C  EF53  F004         	goto	u2570
  5570  0008A0                     u2571:
  5571  0008A0  FFFF               	dw	65535	; assembler added errata NOP
  5572  0008A2  EF55  F004         	goto	l1173
  5573  0008A6                     u2570:
  5574  0008A6  FFFF               	dw	65535	; assembler added errata NOP
  5575  0008A8  8020               	bsf	___fldiv@b^0,0,c
  5576  0008AA                     l1173:
  5577  0008AA  FFFF               	dw	65535	; assembler added errata NOP
  5578  0008AC  90D8               	bcf	status,0,c
  5579  0008AE  3633               	rlcf	___fldiv@grs^0,f,c
  5580  0008B0  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5581  0008B2  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5582  0008B4  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5583  0008B6  0631               	decf	___fldiv@new_exp^0,f,c
  5584  0008B8  A0D8               	btfss	status,0,c
  5585  0008BA  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5586  0008BC                     l3505:
  5587  0008BC  FFFF               	dw	65535	; assembler added errata NOP
  5588  0008BE  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5589  0008C0  EF64  F004         	goto	u2581
  5590  0008C4  EF67  F004         	goto	u2580
  5591  0008C8                     u2581:
  5592  0008C8  FFFF               	dw	65535	; assembler added errata NOP
  5593  0008CA  EF45  F004         	goto	l3499
  5594  0008CE                     u2580:
  5595  0008CE  FFFF               	dw	65535	; assembler added errata NOP
  5596  0008D0  0E00               	movlw	0
  5597  0008D2  6E38               	movwf	___fldiv@aexp^0,c
  5598  0008D4  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5599  0008D6  EF6F  F004         	goto	u2591
  5600  0008DA  EF72  F004         	goto	u2590
  5601  0008DE                     u2591:
  5602  0008DE  FFFF               	dw	65535	; assembler added errata NOP
  5603  0008E0  EF9D  F004         	goto	l1175
  5604  0008E4                     u2590:
  5605  0008E4  FFFF               	dw	65535	; assembler added errata NOP
  5606  0008E6  0EFF               	movlw	255
  5607  0008E8  1433               	andwf	___fldiv@grs^0,w,c
  5608  0008EA  6E28               	movwf	??___fldiv^0,c
  5609  0008EC  0EFF               	movlw	255
  5610  0008EE  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5611  0008F0  6E29               	movwf	(??___fldiv+1)^0,c
  5612  0008F2  0EFF               	movlw	255
  5613  0008F4  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5614  0008F6  6E2A               	movwf	(??___fldiv+2)^0,c
  5615  0008F8  0E7F               	movlw	127
  5616  0008FA  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5617  0008FC  6E2B               	movwf	(??___fldiv+3)^0,c
  5618  0008FE  5028               	movf	??___fldiv^0,w,c
  5619  000900  1029               	iorwf	(??___fldiv+1)^0,w,c
  5620  000902  102A               	iorwf	(??___fldiv+2)^0,w,c
  5621  000904  102B               	iorwf	(??___fldiv+3)^0,w,c
  5622  000906  B4D8               	btfsc	status,2,c
  5623  000908  EF88  F004         	goto	u2601
  5624  00090C  EF8B  F004         	goto	u2600
  5625  000910                     u2601:
  5626  000910  FFFF               	dw	65535	; assembler added errata NOP
  5627  000912  EF91  F004         	goto	l1176
  5628  000916                     u2600:
  5629  000916  FFFF               	dw	65535	; assembler added errata NOP
  5630  000918                     l3513:
  5631  000918  FFFF               	dw	65535	; assembler added errata NOP
  5632  00091A  0E01               	movlw	1
  5633  00091C  6E38               	movwf	___fldiv@aexp^0,c
  5634  00091E  EF9D  F004         	goto	l1175
  5635  000922                     l1176:
  5636  000922  FFFF               	dw	65535	; assembler added errata NOP
  5637  000924  A020               	btfss	___fldiv@b^0,0,c
  5638  000926  EF97  F004         	goto	u2611
  5639  00092A  EF9A  F004         	goto	u2610
  5640  00092E                     u2611:
  5641  00092E  FFFF               	dw	65535	; assembler added errata NOP
  5642  000930  EF9D  F004         	goto	l1175
  5643  000934                     u2610:
  5644  000934  FFFF               	dw	65535	; assembler added errata NOP
  5645  000936  EF8C  F004         	goto	l3513
  5646  00093A                     l1175:
  5647  00093A  FFFF               	dw	65535	; assembler added errata NOP
  5648  00093C  5038               	movf	___fldiv@aexp^0,w,c
  5649  00093E  B4D8               	btfsc	status,2,c
  5650  000940  EFA4  F004         	goto	u2621
  5651  000944  EFA7  F004         	goto	u2620
  5652  000948                     u2621:
  5653  000948  FFFF               	dw	65535	; assembler added errata NOP
  5654  00094A  EFCE  F004         	goto	l3525
  5655  00094E                     u2620:
  5656  00094E  FFFF               	dw	65535	; assembler added errata NOP
  5657  000950  0E01               	movlw	1
  5658  000952  2620               	addwf	___fldiv@b^0,f,c
  5659  000954  0E00               	movlw	0
  5660  000956  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5661  000958  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5662  00095A  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5663  00095C  A023               	btfss	(___fldiv@b+3)^0,0,c
  5664  00095E  EFB3  F004         	goto	u2631
  5665  000962  EFB6  F004         	goto	u2630
  5666  000966                     u2631:
  5667  000966  FFFF               	dw	65535	; assembler added errata NOP
  5668  000968  EFCE  F004         	goto	l3525
  5669  00096C                     u2630:
  5670  00096C  FFFF               	dw	65535	; assembler added errata NOP
  5671  00096E  C020  F028         	movff	___fldiv@b,??___fldiv
  5672  000972  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5673  000976  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5674  00097A  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5675  00097E  342B               	rlcf	(??___fldiv+3)^0,w,c
  5676  000980  322B               	rrcf	(??___fldiv+3)^0,f,c
  5677  000982  322A               	rrcf	(??___fldiv+2)^0,f,c
  5678  000984  3229               	rrcf	(??___fldiv+1)^0,f,c
  5679  000986  3228               	rrcf	??___fldiv^0,f,c
  5680  000988  C028  F020         	movff	??___fldiv,___fldiv@b
  5681  00098C  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5682  000990  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5683  000994  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5684  000998  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5685  00099A  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5686  00099C                     l3525:
  5687  00099C  FFFF               	dw	65535	; assembler added errata NOP
  5688  00099E  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5689  0009A0  EFDA  F004         	goto	u2641
  5690  0009A4  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5691  0009A6  E109               	bnz	u2640
  5692  0009A8  2831               	incf	___fldiv@new_exp^0,w,c
  5693  0009AA  A0D8               	btfss	status,0,c
  5694  0009AC  EFDA  F004         	goto	u2641
  5695  0009B0  EFDD  F004         	goto	u2640
  5696  0009B4                     u2641:
  5697  0009B4  FFFF               	dw	65535	; assembler added errata NOP
  5698  0009B6  EFE9  F004         	goto	l3529
  5699  0009BA                     u2640:
  5700  0009BA  FFFF               	dw	65535	; assembler added errata NOP
  5701  0009BC  0E00               	movlw	0
  5702  0009BE  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5703  0009C0  6831               	setf	___fldiv@new_exp^0,c
  5704  0009C2  0E00               	movlw	0
  5705  0009C4  6E20               	movwf	___fldiv@b^0,c
  5706  0009C6  0E00               	movlw	0
  5707  0009C8  6E21               	movwf	(___fldiv@b+1)^0,c
  5708  0009CA  0E00               	movlw	0
  5709  0009CC  6E22               	movwf	(___fldiv@b+2)^0,c
  5710  0009CE  0E00               	movlw	0
  5711  0009D0  6E23               	movwf	(___fldiv@b+3)^0,c
  5712  0009D2                     l3529:
  5713  0009D2  FFFF               	dw	65535	; assembler added errata NOP
  5714  0009D4  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5715  0009D6  EFF8  F004         	goto	u2650
  5716  0009DA  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5717  0009DC  E106               	bnz	u2651
  5718  0009DE  0431               	decf	___fldiv@new_exp^0,w,c
  5719  0009E0  B0D8               	btfsc	status,0,c
  5720  0009E2  EFF5  F004         	goto	u2651
  5721  0009E6  EFF8  F004         	goto	u2650
  5722  0009EA                     u2651:
  5723  0009EA  FFFF               	dw	65535	; assembler added errata NOP
  5724  0009EC  EF07  F005         	goto	l3533
  5725  0009F0                     u2650:
  5726  0009F0  FFFF               	dw	65535	; assembler added errata NOP
  5727  0009F2  0E00               	movlw	0
  5728  0009F4  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5729  0009F6  0E00               	movlw	0
  5730  0009F8  6E31               	movwf	___fldiv@new_exp^0,c
  5731  0009FA  0E00               	movlw	0
  5732  0009FC  6E20               	movwf	___fldiv@b^0,c
  5733  0009FE  0E00               	movlw	0
  5734  000A00  6E21               	movwf	(___fldiv@b+1)^0,c
  5735  000A02  0E00               	movlw	0
  5736  000A04  6E22               	movwf	(___fldiv@b+2)^0,c
  5737  000A06  0E00               	movlw	0
  5738  000A08  6E23               	movwf	(___fldiv@b+3)^0,c
  5739  000A0A  0E00               	movlw	0
  5740  000A0C  6E30               	movwf	___fldiv@sign^0,c
  5741  000A0E                     l3533:
  5742  000A0E  FFFF               	dw	65535	; assembler added errata NOP
  5743  000A10  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5744  000A14  A037               	btfss	___fldiv@bexp^0,0,c
  5745  000A16  EF0F  F005         	goto	u2661
  5746  000A1A  EF12  F005         	goto	u2660
  5747  000A1E                     u2661:
  5748  000A1E  FFFF               	dw	65535	; assembler added errata NOP
  5749  000A20  EF16  F005         	goto	l3539
  5750  000A24                     u2660:
  5751  000A24  FFFF               	dw	65535	; assembler added errata NOP
  5752  000A26  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5753  000A28  EF18  F005         	goto	l3541
  5754  000A2C                     l3539:
  5755  000A2C  FFFF               	dw	65535	; assembler added errata NOP
  5756  000A2E  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5757  000A30                     l3541:
  5758  000A30  FFFF               	dw	65535	; assembler added errata NOP
  5759  000A32  90D8               	bcf	status,0,c
  5760  000A34  3037               	rrcf	___fldiv@bexp^0,w,c
  5761  000A36  6E23               	movwf	(___fldiv@b+3)^0,c
  5762  000A38  EF9C  F003         	goto	l3455
  5763  000A3C                     l1162:
  5764  000A3C  FFFF               	dw	65535	; assembler added errata NOP
  5765  000A3E  0012               	return		;funcret
  5766  000A40  FFFF               	dw	65535	; errata NOP
  5767  000A42                     __end_of___fldiv:
  5768                           	callstack 0
  5769                           
  5770 ;; *************** function _releaseObj *****************
  5771 ;; Defined at:
  5772 ;;		line 604 in file "motors.c"
  5773 ;; Parameters:    Size  Location     Type
  5774 ;;		None
  5775 ;; Auto vars:     Size  Location     Type
  5776 ;;		None
  5777 ;; Return value:  Size  Location     Type
  5778 ;;                  1    wreg      void 
  5779 ;; Registers used:
  5780 ;;		None
  5781 ;; Tracked objects:
  5782 ;;		On entry : 0/0
  5783 ;;		On exit  : 0/0
  5784 ;;		Unchanged: 0/0
  5785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5786 ;;      Params:         0       0       0       0       0       0       0
  5787 ;;      Locals:         0       0       0       0       0       0       0
  5788 ;;      Temps:          0       0       0       0       0       0       0
  5789 ;;      Totals:         0       0       0       0       0       0       0
  5790 ;;Total ram usage:        0 bytes
  5791 ;; Hardware stack levels used:    1
  5792 ;; Hardware stack levels required when called:    4
  5793 ;; This function calls:
  5794 ;;		Nothing
  5795 ;; This function is called by:
  5796 ;;		_executeData
  5797 ;; This function uses a non-reentrant model
  5798 ;;
  5799                           
  5800                           	psect	text34
  5801  002500                     __ptext34:
  5802                           	callstack 0
  5803  002500                     _releaseObj:
  5804                           	callstack 0
  5805  002500  FFFF               	dw	65535	; assembler added errata NOP
  5806  002502                     
  5807                           ;motors.c: 605:     LATDbits.LATD1 = 0;
  5808  002502  928C               	bcf	140,1,c	;volatile
  5809  002504  0012               	return		;funcret
  5810  002506  FFFF               	dw	65535	; errata NOP
  5811  002508                     __end_of_releaseObj:
  5812                           	callstack 0
  5813                           
  5814 ;; *************** function _pickObject *****************
  5815 ;; Defined at:
  5816 ;;		line 597 in file "motors.c"
  5817 ;; Parameters:    Size  Location     Type
  5818 ;;		None
  5819 ;; Auto vars:     Size  Location     Type
  5820 ;;		None
  5821 ;; Return value:  Size  Location     Type
  5822 ;;                  1    wreg      void 
  5823 ;; Registers used:
  5824 ;;		None
  5825 ;; Tracked objects:
  5826 ;;		On entry : 0/0
  5827 ;;		On exit  : 0/0
  5828 ;;		Unchanged: 0/0
  5829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5830 ;;      Params:         0       0       0       0       0       0       0
  5831 ;;      Locals:         0       0       0       0       0       0       0
  5832 ;;      Temps:          0       0       0       0       0       0       0
  5833 ;;      Totals:         0       0       0       0       0       0       0
  5834 ;;Total ram usage:        0 bytes
  5835 ;; Hardware stack levels used:    1
  5836 ;; Hardware stack levels required when called:    4
  5837 ;; This function calls:
  5838 ;;		Nothing
  5839 ;; This function is called by:
  5840 ;;		_executeData
  5841 ;; This function uses a non-reentrant model
  5842 ;;
  5843                           
  5844                           	psect	text35
  5845  002508                     __ptext35:
  5846                           	callstack 0
  5847  002508                     _pickObject:
  5848                           	callstack 0
  5849  002508  FFFF               	dw	65535	; assembler added errata NOP
  5850  00250A                     
  5851                           ;motors.c: 598:     LATDbits.LATD1 = 1;
  5852  00250A  828C               	bsf	140,1,c	;volatile
  5853  00250C  0012               	return		;funcret
  5854  00250E  FFFF               	dw	65535	; errata NOP
  5855  002510                     __end_of_pickObject:
  5856                           	callstack 0
  5857                           
  5858 ;; *************** function _moveToPoint *****************
  5859 ;; Defined at:
  5860 ;;		line 266 in file "motors.c"
  5861 ;; Parameters:    Size  Location     Type
  5862 ;;  x1              2   21[COMRAM] unsigned int 
  5863 ;;  y1              2   23[COMRAM] unsigned int 
  5864 ;;  x2              2   25[COMRAM] unsigned int 
  5865 ;;  y2              2   27[COMRAM] unsigned int 
  5866 ;; Auto vars:     Size  Location     Type
  5867 ;;  MOT2Directio    1   34[COMRAM] unsigned char 
  5868 ;;  MOT1Directio    1   33[COMRAM] unsigned char 
  5869 ;;  keepMovingY     1   32[COMRAM] unsigned char 
  5870 ;;  keepMovingX     1   31[COMRAM] unsigned char 
  5871 ;; Return value:  Size  Location     Type
  5872 ;;                  1    wreg      unsigned char 
  5873 ;; Registers used:
  5874 ;;		wreg, status,2, status,0, cstack
  5875 ;; Tracked objects:
  5876 ;;		On entry : 0/0
  5877 ;;		On exit  : 0/0
  5878 ;;		Unchanged: 0/0
  5879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5880 ;;      Params:         8       0       0       0       0       0       0
  5881 ;;      Locals:         4       0       0       0       0       0       0
  5882 ;;      Temps:          2       0       0       0       0       0       0
  5883 ;;      Totals:        14       0       0       0       0       0       0
  5884 ;;Total ram usage:       14 bytes
  5885 ;; Hardware stack levels used:    1
  5886 ;; Hardware stack levels required when called:    5
  5887 ;; This function calls:
  5888 ;;		_resetStep
  5889 ;;		_setDirection
  5890 ;;		_stepCounter
  5891 ;;		_stepMade
  5892 ;; This function is called by:
  5893 ;;		_executeData
  5894 ;; This function uses a non-reentrant model
  5895 ;;
  5896                           
  5897                           	psect	text36
  5898  000A42                     __ptext36:
  5899                           	callstack 0
  5900  000A42                     _moveToPoint:
  5901                           	callstack 0
  5902  000A42  FFFF               	dw	65535	; assembler added errata NOP
  5903  000A44                     
  5904                           ;motors.c: 268:     unsigned char MOT1Direction, MOT2Direction;;motors.c: 271:     if(x2
      +                           > maxX || y2 > maxY){
  5905  000A44  0EE9               	movlw	233
  5906  000A46  5C1A               	subwf	moveToPoint@x2^0,w,c
  5907  000A48  0E03               	movlw	3
  5908  000A4A  581B               	subwfb	(moveToPoint@x2+1)^0,w,c
  5909  000A4C  B0D8               	btfsc	status,0,c
  5910  000A4E  EF2B  F005         	goto	u2901
  5911  000A52  EF2E  F005         	goto	u2900
  5912  000A56                     u2901:
  5913  000A56  FFFF               	dw	65535	; assembler added errata NOP
  5914  000A58  EF3B  F005         	goto	l3691
  5915  000A5C                     u2900:
  5916  000A5C  FFFF               	dw	65535	; assembler added errata NOP
  5917  000A5E  0EE9               	movlw	233
  5918  000A60  5C1C               	subwf	moveToPoint@y2^0,w,c
  5919  000A62  0E03               	movlw	3
  5920  000A64  581D               	subwfb	(moveToPoint@y2+1)^0,w,c
  5921  000A66  A0D8               	btfss	status,0,c
  5922  000A68  EF38  F005         	goto	u2911
  5923  000A6C  EF3B  F005         	goto	u2910
  5924  000A70                     u2911:
  5925  000A70  FFFF               	dw	65535	; assembler added errata NOP
  5926  000A72  EF3F  F005         	goto	l3695
  5927  000A76                     u2910:
  5928  000A76                     l3691:
  5929  000A76  FFFF               	dw	65535	; assembler added errata NOP
  5930                           
  5931                           ;motors.c: 272:         return(5);
  5932  000A78  0E05               	movlw	5
  5933  000A7A  EF7F  F006         	goto	l141
  5934  000A7E                     l3695:
  5935  000A7E  FFFF               	dw	65535	; assembler added errata NOP
  5936                           
  5937                           ;motors.c: 276:     if((x2 - x1) > 0){
  5938  000A80  5016               	movf	moveToPoint@x1^0,w,c
  5939  000A82  5C1A               	subwf	moveToPoint@x2^0,w,c
  5940  000A84  6E1E               	movwf	??_moveToPoint^0,c
  5941  000A86  5017               	movf	(moveToPoint@x1+1)^0,w,c
  5942  000A88  581B               	subwfb	(moveToPoint@x2+1)^0,w,c
  5943  000A8A  6E1F               	movwf	(??_moveToPoint+1)^0,c
  5944  000A8C  501E               	movf	??_moveToPoint^0,w,c
  5945  000A8E  101F               	iorwf	(??_moveToPoint+1)^0,w,c
  5946  000A90  B4D8               	btfsc	status,2,c
  5947  000A92  EF4D  F005         	goto	u2921
  5948  000A96  EF50  F005         	goto	u2920
  5949  000A9A                     u2921:
  5950  000A9A  FFFF               	dw	65535	; assembler added errata NOP
  5951  000A9C  EF5A  F005         	goto	l3701
  5952  000AA0                     u2920:
  5953  000AA0  FFFF               	dw	65535	; assembler added errata NOP
  5954  000AA2                     
  5955                           ;motors.c: 277:         setDirection(1, 0);
  5956  000AA2  0E00               	movlw	0
  5957  000AA4  6E12               	movwf	setDirection@motor^0,c
  5958  000AA6  0E01               	movlw	1
  5959  000AA8  ECBC  F010         	call	_setDirection
  5960  000AAC                     
  5961                           ;motors.c: 278:         MOT1Direction = 1;
  5962  000AAC  0E01               	movlw	1
  5963  000AAE  6E22               	movwf	moveToPoint@MOT1Direction^0,c
  5964                           
  5965                           ;motors.c: 279:     }else{
  5966  000AB0  EF62  F005         	goto	l3705
  5967  000AB4                     l3701:
  5968  000AB4  FFFF               	dw	65535	; assembler added errata NOP
  5969                           
  5970                           ;motors.c: 280:         setDirection(0, 0);
  5971  000AB6  0E00               	movlw	0
  5972  000AB8  6E12               	movwf	setDirection@motor^0,c
  5973  000ABA  0E00               	movlw	0
  5974  000ABC  ECBC  F010         	call	_setDirection
  5975  000AC0                     
  5976                           ;motors.c: 281:         MOT1Direction = 0;
  5977  000AC0  0E00               	movlw	0
  5978  000AC2  6E22               	movwf	moveToPoint@MOT1Direction^0,c
  5979  000AC4                     l3705:
  5980  000AC4  FFFF               	dw	65535	; assembler added errata NOP
  5981                           
  5982                           ;motors.c: 284:     if((y2 - y1) > 0){
  5983  000AC6  5018               	movf	moveToPoint@y1^0,w,c
  5984  000AC8  5C1C               	subwf	moveToPoint@y2^0,w,c
  5985  000ACA  6E1E               	movwf	??_moveToPoint^0,c
  5986  000ACC  5019               	movf	(moveToPoint@y1+1)^0,w,c
  5987  000ACE  581D               	subwfb	(moveToPoint@y2+1)^0,w,c
  5988  000AD0  6E1F               	movwf	(??_moveToPoint+1)^0,c
  5989  000AD2  501E               	movf	??_moveToPoint^0,w,c
  5990  000AD4  101F               	iorwf	(??_moveToPoint+1)^0,w,c
  5991  000AD6  B4D8               	btfsc	status,2,c
  5992  000AD8  EF70  F005         	goto	u2931
  5993  000ADC  EF73  F005         	goto	u2930
  5994  000AE0                     u2931:
  5995  000AE0  FFFF               	dw	65535	; assembler added errata NOP
  5996  000AE2  EF7D  F005         	goto	l3711
  5997  000AE6                     u2930:
  5998  000AE6  FFFF               	dw	65535	; assembler added errata NOP
  5999  000AE8                     
  6000                           ;motors.c: 285:         setDirection(1, 1);
  6001  000AE8  0E01               	movlw	1
  6002  000AEA  6E12               	movwf	setDirection@motor^0,c
  6003  000AEC  0E01               	movlw	1
  6004  000AEE  ECBC  F010         	call	_setDirection
  6005  000AF2                     
  6006                           ;motors.c: 286:         MOT2Direction = 1;
  6007  000AF2  0E01               	movlw	1
  6008  000AF4  6E23               	movwf	moveToPoint@MOT2Direction^0,c
  6009                           
  6010                           ;motors.c: 287:     }else{
  6011  000AF6  EF85  F005         	goto	l3715
  6012  000AFA                     l3711:
  6013  000AFA  FFFF               	dw	65535	; assembler added errata NOP
  6014                           
  6015                           ;motors.c: 288:         setDirection(0, 1);
  6016  000AFC  0E01               	movlw	1
  6017  000AFE  6E12               	movwf	setDirection@motor^0,c
  6018  000B00  0E00               	movlw	0
  6019  000B02  ECBC  F010         	call	_setDirection
  6020  000B06                     
  6021                           ;motors.c: 289:         MOT2Direction = 0;
  6022  000B06  0E00               	movlw	0
  6023  000B08  6E23               	movwf	moveToPoint@MOT2Direction^0,c
  6024  000B0A                     l3715:
  6025  000B0A  FFFF               	dw	65535	; assembler added errata NOP
  6026                           
  6027                           ;motors.c: 292:     unsigned char keepMovingX = 1;
  6028  000B0C  0E01               	movlw	1
  6029  000B0E  6E20               	movwf	moveToPoint@keepMovingX^0,c
  6030  000B10                     
  6031                           ;motors.c: 293:     unsigned char keepMovingY = 1;
  6032  000B10  0E01               	movlw	1
  6033  000B12  6E21               	movwf	moveToPoint@keepMovingY^0,c
  6034  000B14                     
  6035                           ;motors.c: 296:     T2CONbits.TMR2ON = 1;
  6036  000B14  84CA               	bsf	202,2,c	;volatile
  6037  000B16                     
  6038                           ;motors.c: 298:     tm0Error = 0;
  6039  000B16  0E00               	movlw	0
  6040  000B18  6E5C               	movwf	(_tm0Error+1)^0,c
  6041  000B1A  0E00               	movlw	0
  6042  000B1C  6E5B               	movwf	_tm0Error^0,c
  6043  000B1E                     
  6044                           ;motors.c: 299:     tm0Limit = 200;
  6045  000B1E  0EC8               	movlw	200
  6046  000B20  6E68               	movwf	_tm0Limit^0,c
  6047  000B22                     
  6048                           ;motors.c: 300:     T0CONbits.TMR0ON = 1;
  6049  000B22  8ED5               	bsf	213,7,c	;volatile
  6050                           
  6051                           ;motors.c: 302:     while(keepMovingX || keepMovingY){
  6052  000B24  EF5F  F006         	goto	l3761
  6053  000B28                     l3727:
  6054  000B28  FFFF               	dw	65535	; assembler added errata NOP
  6055                           
  6056                           ;motors.c: 305:         if(tm0Error){
  6057  000B2A  505B               	movf	_tm0Error^0,w,c
  6058  000B2C  105C               	iorwf	(_tm0Error+1)^0,w,c
  6059  000B2E  B4D8               	btfsc	status,2,c
  6060  000B30  EF9C  F005         	goto	u2941
  6061  000B34  EF9F  F005         	goto	u2940
  6062  000B38                     u2941:
  6063  000B38  FFFF               	dw	65535	; assembler added errata NOP
  6064  000B3A  EFA8  F005         	goto	l3733
  6065  000B3E                     u2940:
  6066  000B3E  FFFF               	dw	65535	; assembler added errata NOP
  6067  000B40                     
  6068                           ;motors.c: 307:             LATAbits.LATA2 = 0;
  6069  000B40  9489               	bcf	137,2,c	;volatile
  6070                           
  6071                           ;motors.c: 308:             LATBbits.LATB4 = 0;
  6072  000B42  988A               	bcf	138,4,c	;volatile
  6073  000B44                     
  6074                           ;motors.c: 309:             tm0Error = 4;
  6075  000B44  0E00               	movlw	0
  6076  000B46  6E5C               	movwf	(_tm0Error+1)^0,c
  6077  000B48  0E04               	movlw	4
  6078  000B4A  6E5B               	movwf	_tm0Error^0,c
  6079                           
  6080                           ;motors.c: 310:             break;
  6081  000B4C  EF73  F006         	goto	l149
  6082  000B50                     l3733:
  6083  000B50  FFFF               	dw	65535	; assembler added errata NOP
  6084                           
  6085                           ;motors.c: 318:         if(MOT1Direction == 1){
  6086  000B52  0422               	decf	moveToPoint@MOT1Direction^0,w,c
  6087  000B54  A4D8               	btfss	status,2,c
  6088  000B56  EFAF  F005         	goto	u2951
  6089  000B5A  EFB2  F005         	goto	u2950
  6090  000B5E                     u2951:
  6091  000B5E  FFFF               	dw	65535	; assembler added errata NOP
  6092  000B60  EFD0  F005         	goto	l3739
  6093  000B64                     u2950:
  6094  000B64  FFFF               	dw	65535	; assembler added errata NOP
  6095  000B66                     
  6096                           ;motors.c: 319:             if(x1 + stepCounter() == x2){
  6097  000B66  EC3E  F012         	call	_stepCounter	;wreg free
  6098  000B6A  5016               	movf	moveToPoint@x1^0,w,c
  6099  000B6C  2612               	addwf	?_stepCounter^0,f,c
  6100  000B6E  5017               	movf	(moveToPoint@x1+1)^0,w,c
  6101  000B70  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6102  000B72  501A               	movf	moveToPoint@x2^0,w,c
  6103  000B74  1812               	xorwf	?_stepCounter^0,w,c
  6104  000B76  E107               	bnz	u2961
  6105  000B78  501B               	movf	(moveToPoint@x2+1)^0,w,c
  6106  000B7A  1813               	xorwf	(?_stepCounter+1)^0,w,c
  6107  000B7C  A4D8               	btfss	status,2,c
  6108  000B7E  EFC3  F005         	goto	u2961
  6109  000B82  EFC6  F005         	goto	u2960
  6110  000B86                     u2961:
  6111  000B86  FFFF               	dw	65535	; assembler added errata NOP
  6112  000B88  EFCC  F005         	goto	l151
  6113  000B8C                     u2960:
  6114  000B8C  FFFF               	dw	65535	; assembler added errata NOP
  6115  000B8E                     l3737:
  6116  000B8E  FFFF               	dw	65535	; assembler added errata NOP
  6117                           
  6118                           ;motors.c: 321:                 keepMovingX = 0;
  6119  000B90  0E00               	movlw	0
  6120  000B92  6E20               	movwf	moveToPoint@keepMovingX^0,c
  6121                           
  6122                           ;motors.c: 322:             }else{
  6123  000B94  EFF7  F005         	goto	l3745
  6124  000B98                     l151:
  6125  000B98  FFFF               	dw	65535	; assembler added errata NOP
  6126                           
  6127                           ;motors.c: 324:                 LATAbits.LATA2 = 1;
  6128  000B9A  8489               	bsf	137,2,c	;volatile
  6129  000B9C  EFF7  F005         	goto	l3745
  6130  000BA0                     l3739:
  6131  000BA0  FFFF               	dw	65535	; assembler added errata NOP
  6132  000BA2  5022               	movf	moveToPoint@MOT1Direction^0,w,c
  6133  000BA4  A4D8               	btfss	status,2,c
  6134  000BA6  EFD7  F005         	goto	u2971
  6135  000BAA  EFDA  F005         	goto	u2970
  6136  000BAE                     u2971:
  6137  000BAE  FFFF               	dw	65535	; assembler added errata NOP
  6138  000BB0  EFF7  F005         	goto	l3745
  6139  000BB4                     u2970:
  6140  000BB4  FFFF               	dw	65535	; assembler added errata NOP
  6141  000BB6                     
  6142                           ;motors.c: 327:             if(x1 - stepCounter() == x2){
  6143  000BB6  EC3E  F012         	call	_stepCounter	;wreg free
  6144  000BBA  C016  F01E         	movff	moveToPoint@x1,??_moveToPoint
  6145  000BBE  C017  F01F         	movff	moveToPoint@x1+1,??_moveToPoint+1
  6146  000BC2  5012               	movf	?_stepCounter^0,w,c
  6147  000BC4  5E1E               	subwf	??_moveToPoint^0,f,c
  6148  000BC6  5013               	movf	(?_stepCounter+1)^0,w,c
  6149  000BC8  5A1F               	subwfb	(??_moveToPoint+1)^0,f,c
  6150  000BCA  501A               	movf	moveToPoint@x2^0,w,c
  6151  000BCC  181E               	xorwf	??_moveToPoint^0,w,c
  6152  000BCE  E107               	bnz	u2981
  6153  000BD0  501B               	movf	(moveToPoint@x2+1)^0,w,c
  6154  000BD2  181F               	xorwf	(??_moveToPoint+1)^0,w,c
  6155  000BD4  A4D8               	btfss	status,2,c
  6156  000BD6  EFEF  F005         	goto	u2981
  6157  000BDA  EFF2  F005         	goto	u2980
  6158  000BDE                     u2981:
  6159  000BDE  FFFF               	dw	65535	; assembler added errata NOP
  6160  000BE0  EFF5  F005         	goto	l155
  6161  000BE4                     u2980:
  6162  000BE4  FFFF               	dw	65535	; assembler added errata NOP
  6163  000BE6  EFC7  F005         	goto	l3737
  6164  000BEA                     l155:
  6165  000BEA  FFFF               	dw	65535	; assembler added errata NOP
  6166                           
  6167                           ;motors.c: 332:                 LATAbits.LATA2 = 1;
  6168  000BEC  8489               	bsf	137,2,c	;volatile
  6169  000BEE                     l3745:
  6170  000BEE  FFFF               	dw	65535	; assembler added errata NOP
  6171                           
  6172                           ;motors.c: 336:         if(MOT2Direction == 1){
  6173  000BF0  0423               	decf	moveToPoint@MOT2Direction^0,w,c
  6174  000BF2  A4D8               	btfss	status,2,c
  6175  000BF4  EFFE  F005         	goto	u2991
  6176  000BF8  EF01  F006         	goto	u2990
  6177  000BFC                     u2991:
  6178  000BFC  FFFF               	dw	65535	; assembler added errata NOP
  6179  000BFE  EF1F  F006         	goto	l3751
  6180  000C02                     u2990:
  6181  000C02  FFFF               	dw	65535	; assembler added errata NOP
  6182  000C04                     
  6183                           ;motors.c: 338:             if(y1 + stepCounter() == y2){
  6184  000C04  EC3E  F012         	call	_stepCounter	;wreg free
  6185  000C08  5018               	movf	moveToPoint@y1^0,w,c
  6186  000C0A  2612               	addwf	?_stepCounter^0,f,c
  6187  000C0C  5019               	movf	(moveToPoint@y1+1)^0,w,c
  6188  000C0E  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6189  000C10  501C               	movf	moveToPoint@y2^0,w,c
  6190  000C12  1812               	xorwf	?_stepCounter^0,w,c
  6191  000C14  E107               	bnz	u3001
  6192  000C16  501D               	movf	(moveToPoint@y2+1)^0,w,c
  6193  000C18  1813               	xorwf	(?_stepCounter+1)^0,w,c
  6194  000C1A  A4D8               	btfss	status,2,c
  6195  000C1C  EF12  F006         	goto	u3001
  6196  000C20  EF15  F006         	goto	u3000
  6197  000C24                     u3001:
  6198  000C24  FFFF               	dw	65535	; assembler added errata NOP
  6199  000C26  EF1B  F006         	goto	l158
  6200  000C2A                     u3000:
  6201  000C2A  FFFF               	dw	65535	; assembler added errata NOP
  6202  000C2C                     l3749:
  6203  000C2C  FFFF               	dw	65535	; assembler added errata NOP
  6204                           
  6205                           ;motors.c: 340:                 keepMovingY = 0;
  6206  000C2E  0E00               	movlw	0
  6207  000C30  6E21               	movwf	moveToPoint@keepMovingY^0,c
  6208                           
  6209                           ;motors.c: 341:             }else{
  6210  000C32  EF42  F006         	goto	l3757
  6211  000C36                     l158:
  6212  000C36  FFFF               	dw	65535	; assembler added errata NOP
  6213                           
  6214                           ;motors.c: 343:                 LATBbits.LATB4 = 1;
  6215  000C38  888A               	bsf	138,4,c	;volatile
  6216  000C3A  EF42  F006         	goto	l3757
  6217  000C3E                     l3751:
  6218  000C3E  FFFF               	dw	65535	; assembler added errata NOP
  6219  000C40  5023               	movf	moveToPoint@MOT2Direction^0,w,c
  6220  000C42  A4D8               	btfss	status,2,c
  6221  000C44  EF26  F006         	goto	u3011
  6222  000C48  EF29  F006         	goto	u3010
  6223  000C4C                     u3011:
  6224  000C4C  FFFF               	dw	65535	; assembler added errata NOP
  6225  000C4E  EF42  F006         	goto	l3757
  6226  000C52                     u3010:
  6227  000C52  FFFF               	dw	65535	; assembler added errata NOP
  6228  000C54                     
  6229                           ;motors.c: 347:             if(y1 + stepCounter() == y2){
  6230  000C54  EC3E  F012         	call	_stepCounter	;wreg free
  6231  000C58  5018               	movf	moveToPoint@y1^0,w,c
  6232  000C5A  2612               	addwf	?_stepCounter^0,f,c
  6233  000C5C  5019               	movf	(moveToPoint@y1+1)^0,w,c
  6234  000C5E  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6235  000C60  501C               	movf	moveToPoint@y2^0,w,c
  6236  000C62  1812               	xorwf	?_stepCounter^0,w,c
  6237  000C64  E107               	bnz	u3021
  6238  000C66  501D               	movf	(moveToPoint@y2+1)^0,w,c
  6239  000C68  1813               	xorwf	(?_stepCounter+1)^0,w,c
  6240  000C6A  A4D8               	btfss	status,2,c
  6241  000C6C  EF3A  F006         	goto	u3021
  6242  000C70  EF3D  F006         	goto	u3020
  6243  000C74                     u3021:
  6244  000C74  FFFF               	dw	65535	; assembler added errata NOP
  6245  000C76  EF40  F006         	goto	l162
  6246  000C7A                     u3020:
  6247  000C7A  FFFF               	dw	65535	; assembler added errata NOP
  6248  000C7C  EF16  F006         	goto	l3749
  6249  000C80                     l162:
  6250  000C80  FFFF               	dw	65535	; assembler added errata NOP
  6251                           
  6252                           ;motors.c: 352:                 LATBbits.LATB4 = 1;
  6253  000C82  888A               	bsf	138,4,c	;volatile
  6254  000C84                     l3757:
  6255  000C84  FFFF               	dw	65535	; assembler added errata NOP
  6256  000C86  ECFC  F011         	call	_stepMade	;wreg free
  6257  000C8A  5012               	movf	?_stepMade^0,w,c
  6258  000C8C  1013               	iorwf	(?_stepMade+1)^0,w,c
  6259  000C8E  B4D8               	btfsc	status,2,c
  6260  000C90  EF4C  F006         	goto	u3031
  6261  000C94  EF4F  F006         	goto	u3030
  6262  000C98                     u3031:
  6263  000C98  FFFF               	dw	65535	; assembler added errata NOP
  6264  000C9A  EF42  F006         	goto	l3757
  6265  000C9E                     u3030:
  6266  000C9E  FFFF               	dw	65535	; assembler added errata NOP
  6267  000CA0                     
  6268                           ;motors.c: 360:         LATAbits.LATA2 = 0;
  6269  000CA0  9489               	bcf	137,2,c	;volatile
  6270                           
  6271                           ;motors.c: 361:         LATBbits.LATB4 = 0;
  6272  000CA2  988A               	bcf	138,4,c	;volatile
  6273  000CA4                     l3759:
  6274  000CA4  FFFF               	dw	65535	; assembler added errata NOP
  6275  000CA6  ECFC  F011         	call	_stepMade	;wreg free
  6276  000CAA  5012               	movf	?_stepMade^0,w,c
  6277  000CAC  1013               	iorwf	(?_stepMade+1)^0,w,c
  6278  000CAE  B4D8               	btfsc	status,2,c
  6279  000CB0  EF5C  F006         	goto	u3041
  6280  000CB4  EF5F  F006         	goto	u3040
  6281  000CB8                     u3041:
  6282  000CB8  FFFF               	dw	65535	; assembler added errata NOP
  6283  000CBA  EF52  F006         	goto	l3759
  6284  000CBE                     u3040:
  6285  000CBE                     l3761:
  6286  000CBE  FFFF               	dw	65535	; assembler added errata NOP
  6287                           
  6288                           ;motors.c: 302:     while(keepMovingX || keepMovingY){
  6289  000CC0  5020               	movf	moveToPoint@keepMovingX^0,w,c
  6290  000CC2  A4D8               	btfss	status,2,c
  6291  000CC4  EF66  F006         	goto	u3051
  6292  000CC8  EF69  F006         	goto	u3050
  6293  000CCC                     u3051:
  6294  000CCC  FFFF               	dw	65535	; assembler added errata NOP
  6295  000CCE  EF94  F005         	goto	l3727
  6296  000CD2                     u3050:
  6297  000CD2  FFFF               	dw	65535	; assembler added errata NOP
  6298  000CD4  5021               	movf	moveToPoint@keepMovingY^0,w,c
  6299  000CD6  A4D8               	btfss	status,2,c
  6300  000CD8  EF70  F006         	goto	u3061
  6301  000CDC  EF73  F006         	goto	u3060
  6302  000CE0                     u3061:
  6303  000CE0  FFFF               	dw	65535	; assembler added errata NOP
  6304  000CE2  EF94  F005         	goto	l3727
  6305  000CE6                     u3060:
  6306  000CE6                     l149:
  6307  000CE6  FFFF               	dw	65535	; assembler added errata NOP
  6308                           
  6309                           ;motors.c: 368:     T0CONbits.TMR0ON = 0;
  6310  000CE8  9ED5               	bcf	213,7,c	;volatile
  6311                           
  6312                           ;motors.c: 369:     T2CONbits.TMR2ON = 0;
  6313  000CEA  94CA               	bcf	202,2,c	;volatile
  6314  000CEC                     
  6315                           ;motors.c: 371:     TMR0 = 0;
  6316  000CEC  0E00               	movlw	0
  6317  000CEE  6ED7               	movwf	215,c	;volatile
  6318  000CF0  0E00               	movlw	0
  6319  000CF2  6ED6               	movwf	214,c	;volatile
  6320                           
  6321                           ;motors.c: 372:     TMR2 = 0;
  6322  000CF4  0E00               	movlw	0
  6323  000CF6  6ECC               	movwf	204,c	;volatile
  6324  000CF8                     
  6325                           ;motors.c: 375:     resetStep();
  6326  000CF8  EC58  F012         	call	_resetStep	;wreg free
  6327  000CFC                     
  6328                           ;motors.c: 377:     return(tm0Error);
  6329  000CFC  505B               	movf	_tm0Error^0,w,c
  6330  000CFE                     l141:
  6331  000CFE  FFFF               	dw	65535	; assembler added errata NOP
  6332  000D00  0012               	return		;funcret
  6333  000D02  FFFF               	dw	65535	; errata NOP
  6334  000D04                     __end_of_moveToPoint:
  6335                           	callstack 0
  6336                           
  6337 ;; *************** function _stepCounter *****************
  6338 ;; Defined at:
  6339 ;;		line 59 in file "pwm.c"
  6340 ;; Parameters:    Size  Location     Type
  6341 ;;		None
  6342 ;; Auto vars:     Size  Location     Type
  6343 ;;		None
  6344 ;; Return value:  Size  Location     Type
  6345 ;;                  2   17[COMRAM] unsigned int 
  6346 ;; Registers used:
  6347 ;;		None
  6348 ;; Tracked objects:
  6349 ;;		On entry : 0/0
  6350 ;;		On exit  : 0/0
  6351 ;;		Unchanged: 0/0
  6352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6353 ;;      Params:         2       0       0       0       0       0       0
  6354 ;;      Locals:         0       0       0       0       0       0       0
  6355 ;;      Temps:          0       0       0       0       0       0       0
  6356 ;;      Totals:         2       0       0       0       0       0       0
  6357 ;;Total ram usage:        2 bytes
  6358 ;; Hardware stack levels used:    1
  6359 ;; Hardware stack levels required when called:    4
  6360 ;; This function calls:
  6361 ;;		Nothing
  6362 ;; This function is called by:
  6363 ;;		_moveToPoint
  6364 ;; This function uses a non-reentrant model
  6365 ;;
  6366                           
  6367                           	psect	text37
  6368  00247C                     __ptext37:
  6369                           	callstack 0
  6370  00247C                     _stepCounter:
  6371                           	callstack 0
  6372  00247C  FFFF               	dw	65535	; assembler added errata NOP
  6373  00247E                     
  6374                           ;pwm.c: 60:     return pwmStep;
  6375  00247E  C067  F012         	movff	_pwmStep,?_stepCounter	;volatile
  6376  002482  6A13               	clrf	(?_stepCounter+1)^0,c
  6377  002484  0012               	return		;funcret
  6378  002486  FFFF               	dw	65535	; errata NOP
  6379  002488                     __end_of_stepCounter:
  6380                           	callstack 0
  6381                           
  6382 ;; *************** function _liftArm *****************
  6383 ;; Defined at:
  6384 ;;		line 523 in file "motors.c"
  6385 ;; Parameters:    Size  Location     Type
  6386 ;;		None
  6387 ;; Auto vars:     Size  Location     Type
  6388 ;;		None
  6389 ;; Return value:  Size  Location     Type
  6390 ;;                  1    wreg      unsigned char 
  6391 ;; Registers used:
  6392 ;;		wreg, status,2, status,0, cstack
  6393 ;; Tracked objects:
  6394 ;;		On entry : 0/0
  6395 ;;		On exit  : 0/0
  6396 ;;		Unchanged: 0/0
  6397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6398 ;;      Params:         0       0       0       0       0       0       0
  6399 ;;      Locals:         0       0       0       0       0       0       0
  6400 ;;      Temps:          0       0       0       0       0       0       0
  6401 ;;      Totals:         0       0       0       0       0       0       0
  6402 ;;Total ram usage:        0 bytes
  6403 ;; Hardware stack levels used:    1
  6404 ;; Hardware stack levels required when called:    5
  6405 ;; This function calls:
  6406 ;;		_resetStep
  6407 ;;		_setDirection
  6408 ;;		_stepMade
  6409 ;; This function is called by:
  6410 ;;		_executeData
  6411 ;; This function uses a non-reentrant model
  6412 ;;
  6413                           
  6414                           	psect	text38
  6415  001F5A                     __ptext38:
  6416                           	callstack 0
  6417  001F5A                     _liftArm:
  6418                           	callstack 0
  6419  001F5A  FFFF               	dw	65535	; assembler added errata NOP
  6420  001F5C                     
  6421                           ;motors.c: 526:     setDirection(0, 2);
  6422  001F5C  0E02               	movlw	2
  6423  001F5E  6E12               	movwf	setDirection@motor^0,c
  6424  001F60  0E00               	movlw	0
  6425  001F62  ECBC  F010         	call	_setDirection
  6426  001F66                     
  6427                           ;motors.c: 528:     T2CONbits.TMR2ON = 1;
  6428  001F66  84CA               	bsf	202,2,c	;volatile
  6429  001F68                     
  6430                           ;motors.c: 530:     tm0Error = 0;
  6431  001F68  0E00               	movlw	0
  6432  001F6A  6E5C               	movwf	(_tm0Error+1)^0,c
  6433  001F6C  0E00               	movlw	0
  6434  001F6E  6E5B               	movwf	_tm0Error^0,c
  6435  001F70                     
  6436                           ;motors.c: 531:     tm0Limit = 200;
  6437  001F70  0EC8               	movlw	200
  6438  001F72  6E68               	movwf	_tm0Limit^0,c
  6439  001F74                     
  6440                           ;motors.c: 532:     T0CONbits.TMR0ON = 1;
  6441  001F74  8ED5               	bsf	213,7,c	;volatile
  6442                           
  6443                           ;motors.c: 536:     while(!PORTEbits.RE2){
  6444  001F76  EFEE  F00F         	goto	l200
  6445  001F7A                     l3867:
  6446  001F7A  FFFF               	dw	65535	; assembler added errata NOP
  6447                           
  6448                           ;motors.c: 539:         if(tm0Error){
  6449  001F7C  505B               	movf	_tm0Error^0,w,c
  6450  001F7E  105C               	iorwf	(_tm0Error+1)^0,w,c
  6451  001F80  B4D8               	btfsc	status,2,c
  6452  001F82  EFC5  F00F         	goto	u3191
  6453  001F86  EFC8  F00F         	goto	u3190
  6454  001F8A                     u3191:
  6455  001F8A  FFFF               	dw	65535	; assembler added errata NOP
  6456  001F8C  EFD0  F00F         	goto	l202
  6457  001F90                     u3190:
  6458  001F90  FFFF               	dw	65535	; assembler added errata NOP
  6459  001F92                     
  6460                           ;motors.c: 541:             LATCbits.LATC2 = 0;
  6461  001F92  948B               	bcf	139,2,c	;volatile
  6462  001F94                     
  6463                           ;motors.c: 542:             tm0Error = 6;
  6464  001F94  0E00               	movlw	0
  6465  001F96  6E5C               	movwf	(_tm0Error+1)^0,c
  6466  001F98  0E06               	movlw	6
  6467  001F9A  6E5B               	movwf	_tm0Error^0,c
  6468                           
  6469                           ;motors.c: 543:             break;
  6470  001F9C  EFF7  F00F         	goto	l203
  6471  001FA0                     l202:
  6472  001FA0  FFFF               	dw	65535	; assembler added errata NOP
  6473                           
  6474                           ;motors.c: 548:         LATCbits.LATC2 = 1;
  6475  001FA2  848B               	bsf	139,2,c	;volatile
  6476  001FA4                     l3873:
  6477  001FA4  FFFF               	dw	65535	; assembler added errata NOP
  6478  001FA6  ECFC  F011         	call	_stepMade	;wreg free
  6479  001FAA  5012               	movf	?_stepMade^0,w,c
  6480  001FAC  1013               	iorwf	(?_stepMade+1)^0,w,c
  6481  001FAE  B4D8               	btfsc	status,2,c
  6482  001FB0  EFDC  F00F         	goto	u3201
  6483  001FB4  EFDF  F00F         	goto	u3200
  6484  001FB8                     u3201:
  6485  001FB8  FFFF               	dw	65535	; assembler added errata NOP
  6486  001FBA  EFD2  F00F         	goto	l3873
  6487  001FBE                     u3200:
  6488  001FBE  FFFF               	dw	65535	; assembler added errata NOP
  6489  001FC0                     
  6490                           ;motors.c: 554:         LATCbits.LATC2 = 0;
  6491  001FC0  948B               	bcf	139,2,c	;volatile
  6492  001FC2                     l3875:
  6493  001FC2  FFFF               	dw	65535	; assembler added errata NOP
  6494  001FC4  ECFC  F011         	call	_stepMade	;wreg free
  6495  001FC8  5012               	movf	?_stepMade^0,w,c
  6496  001FCA  1013               	iorwf	(?_stepMade+1)^0,w,c
  6497  001FCC  B4D8               	btfsc	status,2,c
  6498  001FCE  EFEB  F00F         	goto	u3211
  6499  001FD2  EFEE  F00F         	goto	u3210
  6500  001FD6                     u3211:
  6501  001FD6  FFFF               	dw	65535	; assembler added errata NOP
  6502  001FD8  EFE1  F00F         	goto	l3875
  6503  001FDC                     u3210:
  6504  001FDC                     l200:
  6505  001FDC  FFFF               	dw	65535	; assembler added errata NOP
  6506                           
  6507                           ;motors.c: 536:     while(!PORTEbits.RE2){
  6508  001FDE  A484               	btfss	132,2,c	;volatile
  6509  001FE0  EFF4  F00F         	goto	u3221
  6510  001FE4  EFF7  F00F         	goto	u3220
  6511  001FE8                     u3221:
  6512  001FE8  FFFF               	dw	65535	; assembler added errata NOP
  6513  001FEA  EFBD  F00F         	goto	l3867
  6514  001FEE                     u3220:
  6515  001FEE                     l203:
  6516  001FEE  FFFF               	dw	65535	; assembler added errata NOP
  6517                           
  6518                           ;motors.c: 561:     T0CONbits.TMR0ON = 0;
  6519  001FF0  9ED5               	bcf	213,7,c	;volatile
  6520                           
  6521                           ;motors.c: 562:     T2CONbits.TMR2ON = 0;
  6522  001FF2  94CA               	bcf	202,2,c	;volatile
  6523  001FF4                     
  6524                           ;motors.c: 564:     TMR0 = 0;
  6525  001FF4  0E00               	movlw	0
  6526  001FF6  6ED7               	movwf	215,c	;volatile
  6527  001FF8  0E00               	movlw	0
  6528  001FFA  6ED6               	movwf	214,c	;volatile
  6529                           
  6530                           ;motors.c: 565:     TMR2 = 0;
  6531  001FFC  0E00               	movlw	0
  6532  001FFE  6ECC               	movwf	204,c	;volatile
  6533  002000                     
  6534                           ;motors.c: 568:     resetStep();
  6535  002000  EC58  F012         	call	_resetStep	;wreg free
  6536  002004                     
  6537                           ;motors.c: 570:     return(tm0Error);
  6538  002004  505B               	movf	_tm0Error^0,w,c
  6539  002006  0012               	return		;funcret
  6540  002008  FFFF               	dw	65535	; errata NOP
  6541  00200A                     __end_of_liftArm:
  6542                           	callstack 0
  6543                           
  6544 ;; *************** function _stepMade *****************
  6545 ;; Defined at:
  6546 ;;		line 47 in file "pwm.c"
  6547 ;; Parameters:    Size  Location     Type
  6548 ;;		None
  6549 ;; Auto vars:     Size  Location     Type
  6550 ;;  temp            1   19[COMRAM] unsigned char 
  6551 ;; Return value:  Size  Location     Type
  6552 ;;                  2   17[COMRAM] unsigned int 
  6553 ;; Registers used:
  6554 ;;		wreg, status,2
  6555 ;; Tracked objects:
  6556 ;;		On entry : 0/0
  6557 ;;		On exit  : 0/0
  6558 ;;		Unchanged: 0/0
  6559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6560 ;;      Params:         2       0       0       0       0       0       0
  6561 ;;      Locals:         1       0       0       0       0       0       0
  6562 ;;      Temps:          0       0       0       0       0       0       0
  6563 ;;      Totals:         3       0       0       0       0       0       0
  6564 ;;Total ram usage:        3 bytes
  6565 ;; Hardware stack levels used:    1
  6566 ;; Hardware stack levels required when called:    4
  6567 ;; This function calls:
  6568 ;;		Nothing
  6569 ;; This function is called by:
  6570 ;;		_resetPosition
  6571 ;;		_moveToPoint
  6572 ;;		_touchObject
  6573 ;;		_touchTherm
  6574 ;;		_liftArm
  6575 ;; This function uses a non-reentrant model
  6576 ;;
  6577                           
  6578                           	psect	text39
  6579  0023F8                     __ptext39:
  6580                           	callstack 0
  6581  0023F8                     _stepMade:
  6582                           	callstack 0
  6583  0023F8  FFFF               	dw	65535	; assembler added errata NOP
  6584  0023FA                     
  6585                           ;pwm.c: 48:     unsigned char temp = stepToggle;
  6586  0023FA  C066  F014         	movff	_stepToggle,stepMade@temp	;volatile
  6587  0023FE                     
  6588                           ;pwm.c: 50:     stepToggle = 0;
  6589  0023FE  0E00               	movlw	0
  6590  002400  6E66               	movwf	_stepToggle^0,c	;volatile
  6591  002402                     
  6592                           ;pwm.c: 52:     return temp;
  6593  002402  C014  F012         	movff	stepMade@temp,?_stepMade
  6594  002406  6A13               	clrf	(?_stepMade+1)^0,c
  6595  002408  0012               	return		;funcret
  6596  00240A  FFFF               	dw	65535	; errata NOP
  6597  00240C                     __end_of_stepMade:
  6598                           	callstack 0
  6599                           
  6600 ;; *************** function _setDirection *****************
  6601 ;; Defined at:
  6602 ;;		line 117 in file "motors.c"
  6603 ;; Parameters:    Size  Location     Type
  6604 ;;  direction       1    wreg     unsigned char 
  6605 ;;  motor           1   17[COMRAM] unsigned char 
  6606 ;; Auto vars:     Size  Location     Type
  6607 ;;  direction       1   20[COMRAM] unsigned char 
  6608 ;; Return value:  Size  Location     Type
  6609 ;;                  1    wreg      void 
  6610 ;; Registers used:
  6611 ;;		wreg, status,2, status,0
  6612 ;; Tracked objects:
  6613 ;;		On entry : 0/0
  6614 ;;		On exit  : 0/0
  6615 ;;		Unchanged: 0/0
  6616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6617 ;;      Params:         1       0       0       0       0       0       0
  6618 ;;      Locals:         1       0       0       0       0       0       0
  6619 ;;      Temps:          2       0       0       0       0       0       0
  6620 ;;      Totals:         4       0       0       0       0       0       0
  6621 ;;Total ram usage:        4 bytes
  6622 ;; Hardware stack levels used:    1
  6623 ;; Hardware stack levels required when called:    4
  6624 ;; This function calls:
  6625 ;;		Nothing
  6626 ;; This function is called by:
  6627 ;;		_resetPosition
  6628 ;;		_moveToPoint
  6629 ;;		_touchObject
  6630 ;;		_touchTherm
  6631 ;;		_liftArm
  6632 ;; This function uses a non-reentrant model
  6633 ;;
  6634                           
  6635                           	psect	text40
  6636  002178                     __ptext40:
  6637                           	callstack 0
  6638  002178                     _setDirection:
  6639                           	callstack 0
  6640  002178  FFFF               	dw	65535	; assembler added errata NOP
  6641                           
  6642                           ;incstack = 0
  6643                           ;setDirection@direction stored from wreg
  6644  00217A  6E15               	movwf	setDirection@direction^0,c
  6645  00217C                     
  6646                           ;motors.c: 118:     switch(motor){
  6647  00217C  EFD8  F010         	goto	l3373
  6648  002180                     l3365:
  6649  002180  FFFF               	dw	65535	; assembler added errata NOP
  6650                           
  6651                           ;motors.c: 120:             LATAbits.LATA1 = direction;
  6652  002182  B015               	btfsc	setDirection@direction^0,0,c
  6653  002184  D002               	bra	u2395
  6654  002186  9289               	bcf	137,1,c	;volatile
  6655  002188  D001               	bra	u2396
  6656  00218A                     u2395:
  6657  00218A  8289               	bsf	137,1,c	;volatile
  6658  00218C                     u2396:
  6659                           
  6660                           ;motors.c: 121:             break;
  6661  00218C  EFF3  F010         	goto	l101
  6662  002190                     l3367:
  6663  002190  FFFF               	dw	65535	; assembler added errata NOP
  6664                           
  6665                           ;motors.c: 123:             LATBbits.LATB3 = direction;
  6666  002192  B015               	btfsc	setDirection@direction^0,0,c
  6667  002194  D002               	bra	u2405
  6668  002196  968A               	bcf	138,3,c	;volatile
  6669  002198  D001               	bra	u2406
  6670  00219A                     u2405:
  6671  00219A  868A               	bsf	138,3,c	;volatile
  6672  00219C                     u2406:
  6673                           
  6674                           ;motors.c: 124:             break;
  6675  00219C  EFF3  F010         	goto	l101
  6676  0021A0                     l3369:
  6677  0021A0  FFFF               	dw	65535	; assembler added errata NOP
  6678                           
  6679                           ;motors.c: 126:             LATCbits.LATC1 = direction;
  6680  0021A2  B015               	btfsc	setDirection@direction^0,0,c
  6681  0021A4  D002               	bra	u2415
  6682  0021A6  928B               	bcf	139,1,c	;volatile
  6683  0021A8  D001               	bra	u2416
  6684  0021AA                     u2415:
  6685  0021AA  828B               	bsf	139,1,c	;volatile
  6686  0021AC                     u2416:
  6687                           
  6688                           ;motors.c: 127:             break;
  6689  0021AC  EFF3  F010         	goto	l101
  6690  0021B0                     l3373:
  6691  0021B0  FFFF               	dw	65535	; assembler added errata NOP
  6692  0021B2  5012               	movf	setDirection@motor^0,w,c
  6693  0021B4  6E13               	movwf	??_setDirection^0,c
  6694  0021B6  6A14               	clrf	(??_setDirection+1)^0,c
  6695                           
  6696                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6697                           ; Switch size 1, requested type "simple"
  6698                           ; Number of cases is 1, Range of values is 0 to 0
  6699                           ; switch strategies available:
  6700                           ; Name         Instructions Cycles
  6701                           ; simple_byte            4     3 (average)
  6702                           ;	Chosen strategy is simple_byte
  6703  0021B8  5014               	movf	(??_setDirection+1)^0,w,c
  6704  0021BA  0A00               	xorlw	0	; case 0
  6705  0021BC  B4D8               	btfsc	status,2,c
  6706  0021BE  EFE3  F010         	goto	l4473
  6707  0021C2  EFF3  F010         	goto	l101
  6708  0021C6                     l4473:
  6709  0021C6  FFFF               	dw	65535	; assembler added errata NOP
  6710                           
  6711                           ; Switch size 1, requested type "simple"
  6712                           ; Number of cases is 3, Range of values is 0 to 2
  6713                           ; switch strategies available:
  6714                           ; Name         Instructions Cycles
  6715                           ; simple_byte           10     6 (average)
  6716                           ;	Chosen strategy is simple_byte
  6717  0021C8  5013               	movf	??_setDirection^0,w,c
  6718  0021CA  0A00               	xorlw	0	; case 0
  6719  0021CC  B4D8               	btfsc	status,2,c
  6720  0021CE  EFC0  F010         	goto	l3365
  6721  0021D2  0A01               	xorlw	1	; case 1
  6722  0021D4  B4D8               	btfsc	status,2,c
  6723  0021D6  EFC8  F010         	goto	l3367
  6724  0021DA  0A03               	xorlw	3	; case 2
  6725  0021DC  B4D8               	btfsc	status,2,c
  6726  0021DE  EFD0  F010         	goto	l3369
  6727  0021E2  EFF3  F010         	goto	l101
  6728  0021E6                     l101:
  6729  0021E6  FFFF               	dw	65535	; assembler added errata NOP
  6730  0021E8  0012               	return		;funcret
  6731  0021EA  FFFF               	dw	65535	; errata NOP
  6732  0021EC                     __end_of_setDirection:
  6733                           	callstack 0
  6734                           
  6735 ;; *************** function _resetStep *****************
  6736 ;; Defined at:
  6737 ;;		line 66 in file "pwm.c"
  6738 ;; Parameters:    Size  Location     Type
  6739 ;;		None
  6740 ;; Auto vars:     Size  Location     Type
  6741 ;;		None
  6742 ;; Return value:  Size  Location     Type
  6743 ;;                  1    wreg      void 
  6744 ;; Registers used:
  6745 ;;		wreg, status,2
  6746 ;; Tracked objects:
  6747 ;;		On entry : 0/0
  6748 ;;		On exit  : 0/0
  6749 ;;		Unchanged: 0/0
  6750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6751 ;;      Params:         0       0       0       0       0       0       0
  6752 ;;      Locals:         0       0       0       0       0       0       0
  6753 ;;      Temps:          0       0       0       0       0       0       0
  6754 ;;      Totals:         0       0       0       0       0       0       0
  6755 ;;Total ram usage:        0 bytes
  6756 ;; Hardware stack levels used:    1
  6757 ;; Hardware stack levels required when called:    4
  6758 ;; This function calls:
  6759 ;;		Nothing
  6760 ;; This function is called by:
  6761 ;;		_resetPosition
  6762 ;;		_moveToPoint
  6763 ;;		_touchObject
  6764 ;;		_touchTherm
  6765 ;;		_liftArm
  6766 ;; This function uses a non-reentrant model
  6767 ;;
  6768                           
  6769                           	psect	text41
  6770  0024B0                     __ptext41:
  6771                           	callstack 0
  6772  0024B0                     _resetStep:
  6773                           	callstack 0
  6774  0024B0  FFFF               	dw	65535	; assembler added errata NOP
  6775  0024B2                     
  6776                           ;pwm.c: 67:     pwmStep = 0;
  6777  0024B2  0E00               	movlw	0
  6778  0024B4  6E67               	movwf	_pwmStep^0,c	;volatile
  6779  0024B6  0012               	return		;funcret
  6780  0024B8  FFFF               	dw	65535	; errata NOP
  6781  0024BA                     __end_of_resetStep:
  6782                           	callstack 0
  6783                           
  6784 ;; *************** function _getData *****************
  6785 ;; Defined at:
  6786 ;;		line 205 in file "usart.c"
  6787 ;; Parameters:    Size  Location     Type
  6788 ;;		None
  6789 ;; Auto vars:     Size  Location     Type
  6790 ;;		None
  6791 ;; Return value:  Size  Location     Type
  6792 ;;                  2   17[COMRAM] PTR struct .
  6793 ;; Registers used:
  6794 ;;		wreg, status,2, status,0
  6795 ;; Tracked objects:
  6796 ;;		On entry : 0/0
  6797 ;;		On exit  : 0/0
  6798 ;;		Unchanged: 0/0
  6799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6800 ;;      Params:         2       0       0       0       0       0       0
  6801 ;;      Locals:         0       0       0       0       0       0       0
  6802 ;;      Temps:          0       0       0       0       0       0       0
  6803 ;;      Totals:         2       0       0       0       0       0       0
  6804 ;;Total ram usage:        2 bytes
  6805 ;; Hardware stack levels used:    1
  6806 ;; Hardware stack levels required when called:    4
  6807 ;; This function calls:
  6808 ;;		Nothing
  6809 ;; This function is called by:
  6810 ;;		_executeData
  6811 ;; This function uses a non-reentrant model
  6812 ;;
  6813                           
  6814                           	psect	text42
  6815  00242C                     __ptext42:
  6816                           	callstack 0
  6817  00242C                     _getData:
  6818                           	callstack 0
  6819  00242C  FFFF               	dw	65535	; assembler added errata NOP
  6820  00242E                     
  6821                           ;usart.c: 206:     return(&dataSequence[0]);
  6822  00242E  0ED8               	movlw	low _dataSequence
  6823  002430  6E12               	movwf	?_getData^0,c
  6824  002432  0E00               	movlw	high _dataSequence
  6825  002434  6E13               	movwf	(?_getData+1)^0,c
  6826  002436  0012               	return		;funcret
  6827  002438  FFFF               	dw	65535	; errata NOP
  6828  00243A                     __end_of_getData:
  6829                           	callstack 0
  6830                           
  6831 ;; *************** function _clearTM0 *****************
  6832 ;; Defined at:
  6833 ;;		line 30 in file "motors.c"
  6834 ;; Parameters:    Size  Location     Type
  6835 ;;		None
  6836 ;; Auto vars:     Size  Location     Type
  6837 ;;		None
  6838 ;; Return value:  Size  Location     Type
  6839 ;;                  1    wreg      void 
  6840 ;; Registers used:
  6841 ;;		wreg, status,2
  6842 ;; Tracked objects:
  6843 ;;		On entry : 0/0
  6844 ;;		On exit  : 0/0
  6845 ;;		Unchanged: 0/0
  6846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6847 ;;      Params:         0       0       0       0       0       0       0
  6848 ;;      Locals:         0       0       0       0       0       0       0
  6849 ;;      Temps:          0       0       0       0       0       0       0
  6850 ;;      Totals:         0       0       0       0       0       0       0
  6851 ;;Total ram usage:        0 bytes
  6852 ;; Hardware stack levels used:    1
  6853 ;; Hardware stack levels required when called:    4
  6854 ;; This function calls:
  6855 ;;		Nothing
  6856 ;; This function is called by:
  6857 ;;		_main
  6858 ;; This function uses a non-reentrant model
  6859 ;;
  6860                           
  6861                           	psect	text43
  6862  00243A                     __ptext43:
  6863                           	callstack 0
  6864  00243A                     _clearTM0:
  6865                           	callstack 0
  6866  00243A  FFFF               	dw	65535	; assembler added errata NOP
  6867  00243C                     
  6868                           ;motors.c: 31:     tm0Error = 0;
  6869  00243C  0E00               	movlw	0
  6870  00243E  6E5C               	movwf	(_tm0Error+1)^0,c
  6871  002440  0E00               	movlw	0
  6872  002442  6E5B               	movwf	_tm0Error^0,c
  6873  002444  0012               	return		;funcret
  6874  002446  FFFF               	dw	65535	; errata NOP
  6875  002448                     __end_of_clearTM0:
  6876                           	callstack 0
  6877                           
  6878 ;; *************** function _isr *****************
  6879 ;; Defined at:
  6880 ;;		line 17 in file "interrupt.c"
  6881 ;; Parameters:    Size  Location     Type
  6882 ;;		None
  6883 ;; Auto vars:     Size  Location     Type
  6884 ;;  temp            1   16[COMRAM] unsigned char 
  6885 ;; Return value:  Size  Location     Type
  6886 ;;                  1    wreg      void 
  6887 ;; Registers used:
  6888 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6889 ;; Tracked objects:
  6890 ;;		On entry : 0/0
  6891 ;;		On exit  : 0/0
  6892 ;;		Unchanged: 0/0
  6893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6894 ;;      Params:         0       0       0       0       0       0       0
  6895 ;;      Locals:         1       0       0       0       0       0       0
  6896 ;;      Temps:          6       0       0       0       0       0       0
  6897 ;;      Totals:         7       0       0       0       0       0       0
  6898 ;;Total ram usage:        7 bytes
  6899 ;; Hardware stack levels used:    1
  6900 ;; Hardware stack levels required when called:    3
  6901 ;; This function calls:
  6902 ;;		_increaseStep
  6903 ;;		_retPeriod
  6904 ;;		_setThermRel
  6905 ;;		_setTouchRel
  6906 ;;		_toggleStep
  6907 ;;		_whatsTM0Limit
  6908 ;;		_writeTM0
  6909 ;;		i2_storeData
  6910 ;; This function is called by:
  6911 ;;		Interrupt level 2
  6912 ;; This function uses a non-reentrant model
  6913 ;;
  6914                           
  6915                           	psect	intcode
  6916  000008                     __pintcode:
  6917                           	callstack 0
  6918  000008                     _isr:
  6919                           	callstack 0
  6920  000008  FFFF               	dw	65535	; assembler added errata NOP
  6921                           
  6922                           ;incstack = 0
  6923  00000A  826E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6924  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  6925  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  6926  000014  CFF3 F00F          	movff	prodl,??_isr+4
  6927  000018  CFF4 F010          	movff	prodh,??_isr+5
  6928  00001C                     
  6929                           ;interrupt.c: 18:     static unsigned int single_cycle = 0;;interrupt.c: 19:     static 
      +                          unsigned char tm0Count = 0;;interrupt.c: 20:     static unsigned char completeStep = 0;;
      +                          interrupt.c: 23:     if(INTCONbits.T0IF){
  6930  00001C  A4F2               	btfss	242,2,c	;volatile
  6931  00001E  EF13  F000         	goto	i2u229_41
  6932  000022  EF16  F000         	goto	i2u229_40
  6933  000026                     i2u229_41:
  6934  000026  FFFF               	dw	65535	; assembler added errata NOP
  6935  000028  EF2C  F000         	goto	i2l3281
  6936  00002C                     i2u229_40:
  6937  00002C  FFFF               	dw	65535	; assembler added errata NOP
  6938  00002E                     
  6939                           ;interrupt.c: 24:         INTCONbits.T0IF = 0;
  6940  00002E  94F2               	bcf	242,2,c	;volatile
  6941  000030                     
  6942                           ;interrupt.c: 27:         tm0Count++;
  6943  000030  2A63               	incf	isr@tm0Count^0,f,c
  6944  000032                     
  6945                           ;interrupt.c: 29:         if(tm0Count >= whatsTM0Limit()){
  6946  000032  EC88  F012         	call	_whatsTM0Limit	;wreg free
  6947  000036  6E0B               	movwf	??_isr^0,c
  6948  000038  500B               	movf	??_isr^0,w,c
  6949  00003A  5C63               	subwf	isr@tm0Count^0,w,c
  6950  00003C  A0D8               	btfss	status,0,c
  6951  00003E  EF23  F000         	goto	i2u230_41
  6952  000042  EF26  F000         	goto	i2u230_40
  6953  000046                     i2u230_41:
  6954  000046  FFFF               	dw	65535	; assembler added errata NOP
  6955  000048  EF2C  F000         	goto	i2l3281
  6956  00004C                     i2u230_40:
  6957  00004C  FFFF               	dw	65535	; assembler added errata NOP
  6958  00004E                     
  6959                           ;interrupt.c: 30:             T0CONbits.TMR0ON = 0;
  6960  00004E  9ED5               	bcf	213,7,c	;volatile
  6961  000050                     
  6962                           ;interrupt.c: 31:             tm0Count = 0;
  6963  000050  0E00               	movlw	0
  6964  000052  6E63               	movwf	isr@tm0Count^0,c
  6965  000054                     
  6966                           ;interrupt.c: 32:             writeTM0();
  6967  000054  EC24  F012         	call	_writeTM0	;wreg free
  6968  000058                     i2l3281:
  6969  000058  FFFF               	dw	65535	; assembler added errata NOP
  6970                           
  6971                           ;interrupt.c: 37:     if(PIR1bits.TMR2IF){
  6972  00005A  A29E               	btfss	158,1,c	;volatile
  6973  00005C  EF32  F000         	goto	i2u231_41
  6974  000060  EF35  F000         	goto	i2u231_40
  6975  000064                     i2u231_41:
  6976  000064  FFFF               	dw	65535	; assembler added errata NOP
  6977  000066  EF63  F000         	goto	i2l3301
  6978  00006A                     i2u231_40:
  6979  00006A  FFFF               	dw	65535	; assembler added errata NOP
  6980  00006C                     
  6981                           ;interrupt.c: 38:         PIR1bits.TMR2IF = 0;
  6982  00006C  929E               	bcf	158,1,c	;volatile
  6983  00006E                     
  6984                           ;interrupt.c: 39:         single_cycle++;
  6985  00006E  4A51               	infsnz	isr@single_cycle^0,f,c
  6986  000070  2A52               	incf	(isr@single_cycle+1)^0,f,c
  6987  000072                     
  6988                           ;interrupt.c: 42:         if(single_cycle > retPeriod()){
  6989  000072  EC2B  F012         	call	_retPeriod	;wreg free
  6990  000076  5051               	movf	isr@single_cycle^0,w,c
  6991  000078  5C01               	subwf	?_retPeriod^0,w,c
  6992  00007A  5052               	movf	(isr@single_cycle+1)^0,w,c
  6993  00007C  5802               	subwfb	(?_retPeriod+1)^0,w,c
  6994  00007E  B0D8               	btfsc	status,0,c
  6995  000080  EF44  F000         	goto	i2u232_41
  6996  000084  EF47  F000         	goto	i2u232_40
  6997  000088                     i2u232_41:
  6998  000088  FFFF               	dw	65535	; assembler added errata NOP
  6999  00008A  EF63  F000         	goto	i2l3301
  7000  00008E                     i2u232_40:
  7001  00008E  FFFF               	dw	65535	; assembler added errata NOP
  7002  000090                     
  7003                           ;interrupt.c: 43:             completeStep++;
  7004  000090  2A62               	incf	isr@completeStep^0,f,c
  7005  000092                     
  7006                           ;interrupt.c: 46:             if(completeStep != 0 && !(completeStep % 2)){
  7007  000092  5062               	movf	isr@completeStep^0,w,c
  7008  000094  B4D8               	btfsc	status,2,c
  7009  000096  EF4F  F000         	goto	i2u233_41
  7010  00009A  EF52  F000         	goto	i2u233_40
  7011  00009E                     i2u233_41:
  7012  00009E  FFFF               	dw	65535	; assembler added errata NOP
  7013  0000A0  EF60  F000         	goto	i2l3299
  7014  0000A4                     i2u233_40:
  7015  0000A4  FFFF               	dw	65535	; assembler added errata NOP
  7016  0000A6  B062               	btfsc	isr@completeStep^0,0,c
  7017  0000A8  EF58  F000         	goto	i2u234_41
  7018  0000AC  EF5B  F000         	goto	i2u234_40
  7019  0000B0                     i2u234_41:
  7020  0000B0  FFFF               	dw	65535	; assembler added errata NOP
  7021  0000B2  EF60  F000         	goto	i2l3299
  7022  0000B6                     i2u234_40:
  7023  0000B6  FFFF               	dw	65535	; assembler added errata NOP
  7024  0000B8                     
  7025                           ;interrupt.c: 48:                 completeStep = 0;
  7026  0000B8  0E00               	movlw	0
  7027  0000BA  6E62               	movwf	isr@completeStep^0,c
  7028  0000BC                     
  7029                           ;interrupt.c: 51:                 increaseStep();
  7030  0000BC  EC8C  F012         	call	_increaseStep	;wreg free
  7031  0000C0                     i2l3299:
  7032  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  7033                           
  7034                           ;interrupt.c: 56:             toggleStep();
  7035  0000C2  EC5D  F012         	call	_toggleStep	;wreg free
  7036  0000C6                     i2l3301:
  7037  0000C6  FFFF               	dw	65535	; assembler added errata NOP
  7038                           
  7039                           ;interrupt.c: 61:     if(PIR1bits.ADIF){
  7040  0000C8  AC9E               	btfss	158,6,c	;volatile
  7041  0000CA  EF69  F000         	goto	i2u235_41
  7042  0000CE  EF6C  F000         	goto	i2u235_40
  7043  0000D2                     i2u235_41:
  7044  0000D2  FFFF               	dw	65535	; assembler added errata NOP
  7045  0000D4  EF99  F000         	goto	i2l3313
  7046  0000D8                     i2u235_40:
  7047  0000D8  FFFF               	dw	65535	; assembler added errata NOP
  7048  0000DA                     
  7049                           ;interrupt.c: 62:         PIR1bits.ADIF = 0;
  7050  0000DA  9C9E               	bcf	158,6,c	;volatile
  7051                           
  7052                           ;interrupt.c: 65:         ADC_res = ADRESL;
  7053  0000DC  CFC3 F053          	movff	4035,_ADC_res	;volatile
  7054  0000E0  6A54               	clrf	(_ADC_res+1)^0,c
  7055  0000E2                     
  7056                           ;interrupt.c: 66:         ADC_res |= (ADRESH << 8);
  7057  0000E2  50C4               	movf	196,w,c	;volatile
  7058  0000E4  6E0C               	movwf	(??_isr+1)^0,c
  7059  0000E6  6A0B               	clrf	??_isr^0,c
  7060  0000E8  500B               	movf	??_isr^0,w,c
  7061  0000EA  1253               	iorwf	_ADC_res^0,f,c
  7062  0000EC  500C               	movf	(??_isr+1)^0,w,c
  7063  0000EE  1254               	iorwf	(_ADC_res+1)^0,f,c
  7064                           
  7065                           ;interrupt.c: 69:         if(ADC_res > therm_pressure){
  7066  0000F0  0453               	decf	_ADC_res^0,w,c
  7067  0000F2  0E04               	movlw	4
  7068  0000F4  5854               	subwfb	(_ADC_res+1)^0,w,c
  7069  0000F6  A0D8               	btfss	status,0,c
  7070  0000F8  EF80  F000         	goto	i2u236_41
  7071  0000FC  EF83  F000         	goto	i2u236_40
  7072  000100                     i2u236_41:
  7073  000100  FFFF               	dw	65535	; assembler added errata NOP
  7074  000102  EF8A  F000         	goto	i2l3309
  7075  000106                     i2u236_40:
  7076  000106  FFFF               	dw	65535	; assembler added errata NOP
  7077  000108                     
  7078                           ;interrupt.c: 71:             setTouchRel();
  7079  000108  EC62  F012         	call	_setTouchRel	;wreg free
  7080                           
  7081                           ;interrupt.c: 72:             setThermRel();
  7082  00010C  EC67  F012         	call	_setThermRel	;wreg free
  7083                           
  7084                           ;interrupt.c: 73:         }else if(ADC_res > touch_pressure){
  7085  000110  EF99  F000         	goto	i2l3313
  7086  000114                     i2l3309:
  7087  000114  FFFF               	dw	65535	; assembler added errata NOP
  7088  000116  0453               	decf	_ADC_res^0,w,c
  7089  000118  0E02               	movlw	2
  7090  00011A  5854               	subwfb	(_ADC_res+1)^0,w,c
  7091  00011C  A0D8               	btfss	status,0,c
  7092  00011E  EF93  F000         	goto	i2u237_41
  7093  000122  EF96  F000         	goto	i2u237_40
  7094  000126                     i2u237_41:
  7095  000126  FFFF               	dw	65535	; assembler added errata NOP
  7096  000128  EF99  F000         	goto	i2l3313
  7097  00012C                     i2u237_40:
  7098  00012C  FFFF               	dw	65535	; assembler added errata NOP
  7099  00012E                     
  7100                           ;interrupt.c: 75:             setTouchRel();
  7101  00012E  EC62  F012         	call	_setTouchRel	;wreg free
  7102  000132                     i2l3313:
  7103  000132  FFFF               	dw	65535	; assembler added errata NOP
  7104                           
  7105                           ;interrupt.c: 80:     if(PIR1bits.RC1IF){
  7106  000134  AA9E               	btfss	158,5,c	;volatile
  7107  000136  EF9F  F000         	goto	i2u238_41
  7108  00013A  EFA2  F000         	goto	i2u238_40
  7109  00013E                     i2u238_41:
  7110  00013E  FFFF               	dw	65535	; assembler added errata NOP
  7111  000140  EFA9  F000         	goto	i2l463
  7112  000144                     i2u238_40:
  7113  000144  FFFF               	dw	65535	; assembler added errata NOP
  7114  000146                     
  7115                           ;interrupt.c: 81:         PIR1bits.RC1IF = 0;
  7116  000146  9A9E               	bcf	158,5,c	;volatile
  7117                           
  7118                           ;interrupt.c: 84:         unsigned char temp = RCREG1;
  7119  000148  CFAE F011          	movff	4014,isr@temp	;volatile
  7120  00014C                     
  7121                           ;interrupt.c: 86:         storeData(temp);
  7122  00014C  5011               	movf	isr@temp^0,w,c
  7123  00014E  EC24  F00B         	call	i2_storeData
  7124  000152                     i2l463:
  7125  000152  FFFF               	dw	65535	; assembler added errata NOP
  7126  000154  C010  FFF4         	movff	??_isr+5,prodh
  7127  000158  C00F  FFF3         	movff	??_isr+4,prodl
  7128  00015C  C00E  FFDA         	movff	??_isr+3,fsr2h
  7129  000160  C00D  FFD9         	movff	??_isr+2,fsr2l
  7130  000164  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7131  000166  0011               	retfie		f
  7132  000168  FFFF               	dw	65535	; errata NOP
  7133  00016A                     __end_of_isr:
  7134                           	callstack 0
  7135                           
  7136 ;; *************** function i2_storeData *****************
  7137 ;; Defined at:
  7138 ;;		line 131 in file "usart.c"
  7139 ;; Parameters:    Size  Location     Type
  7140 ;;  data            1    wreg     unsigned char 
  7141 ;; Auto vars:     Size  Location     Type
  7142 ;;  data            1    9[COMRAM] unsigned char 
  7143 ;; Return value:  Size  Location     Type
  7144 ;;                  1    wreg      void 
  7145 ;; Registers used:
  7146 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7147 ;; Tracked objects:
  7148 ;;		On entry : 0/0
  7149 ;;		On exit  : 0/0
  7150 ;;		Unchanged: 0/0
  7151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7152 ;;      Params:         0       0       0       0       0       0       0
  7153 ;;      Locals:         1       0       0       0       0       0       0
  7154 ;;      Temps:          2       0       0       0       0       0       0
  7155 ;;      Totals:         3       0       0       0       0       0       0
  7156 ;;Total ram usage:        3 bytes
  7157 ;; Hardware stack levels used:    1
  7158 ;; Hardware stack levels required when called:    2
  7159 ;; This function calls:
  7160 ;;		i2_printError
  7161 ;; This function is called by:
  7162 ;;		_isr
  7163 ;; This function uses a non-reentrant model
  7164 ;;
  7165                           
  7166                           	psect	text45
  7167  001648                     __ptext45:
  7168                           	callstack 0
  7169  001648                     i2_storeData:
  7170                           	callstack 0
  7171  001648  FFFF               	dw	65535	; assembler added errata NOP
  7172                           
  7173                           ;incstack = 0
  7174                           ;i2storeData@data stored from wreg
  7175  00164A  6E0A               	movwf	i2storeData@data^0,c
  7176  00164C                     
  7177                           ;usart.c: 133:     static unsigned char counter = 0;;usart.c: 134:     static unsigned c
      +                          har mexLength = 5;;usart.c: 135:     static unsigned char command;;usart.c: 136:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 140:     receivedMex[counter] = data;
  7178  00164C  0E45               	movlw	low storeData@receivedMex
  7179  00164E  245E               	addwf	storeData@counter^0,w,c
  7180  001650  6ED9               	movwf	fsr2l,c
  7181  001652  6ADA               	clrf	fsr2h,c
  7182  001654  0E00               	movlw	high storeData@receivedMex
  7183  001656  22DA               	addwfc	fsr2h,f,c
  7184  001658  C00A  FFDF         	movff	i2storeData@data,indf2
  7185  00165C                     
  7186                           ;usart.c: 142:     counter++;
  7187  00165C  2A5E               	incf	storeData@counter^0,f,c
  7188                           
  7189                           ;usart.c: 145:     switch(receivedMex[0]){
  7190  00165E  EF40  F00B         	goto	i2l3171
  7191  001662                     i2l3163:
  7192  001662  FFFF               	dw	65535	; assembler added errata NOP
  7193                           
  7194                           ;usart.c: 147:             mexLength = 5;
  7195  001664  0E05               	movlw	5
  7196  001666  6E6D               	movwf	storeData@mexLength^0,c
  7197                           
  7198                           ;usart.c: 148:             break;
  7199  001668  EF5B  F00B         	goto	i2l3173
  7200  00166C                     i2l3165:
  7201  00166C  FFFF               	dw	65535	; assembler added errata NOP
  7202                           
  7203                           ;usart.c: 150:             mexLength = 9;
  7204  00166E  0E09               	movlw	9
  7205  001670  6E6D               	movwf	storeData@mexLength^0,c
  7206                           
  7207                           ;usart.c: 151:             break;
  7208  001672  EF5B  F00B         	goto	i2l3173
  7209  001676                     i2l3167:
  7210  001676  FFFF               	dw	65535	; assembler added errata NOP
  7211                           
  7212                           ;usart.c: 153:             mexLength = 1;
  7213  001678  0E01               	movlw	1
  7214  00167A  6E6D               	movwf	storeData@mexLength^0,c
  7215                           
  7216                           ;usart.c: 154:             break;
  7217  00167C  EF5B  F00B         	goto	i2l3173
  7218  001680                     i2l3171:
  7219  001680  FFFF               	dw	65535	; assembler added errata NOP
  7220  001682  5045               	movf	storeData@receivedMex^0,w,c
  7221  001684  6E08               	movwf	??i2_storeData^0,c
  7222  001686  6A09               	clrf	(??i2_storeData+1)^0,c
  7223                           
  7224                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7225                           ; Switch size 1, requested type "simple"
  7226                           ; Number of cases is 1, Range of values is 0 to 0
  7227                           ; switch strategies available:
  7228                           ; Name         Instructions Cycles
  7229                           ; simple_byte            4     3 (average)
  7230                           ;	Chosen strategy is simple_byte
  7231  001688  5009               	movf	(??i2_storeData+1)^0,w,c
  7232  00168A  0A00               	xorlw	0	; case 0
  7233  00168C  B4D8               	btfsc	status,2,c
  7234  00168E  EF4B  F00B         	goto	i2l4475
  7235  001692  EF5B  F00B         	goto	i2l3173
  7236  001696                     i2l4475:
  7237  001696  FFFF               	dw	65535	; assembler added errata NOP
  7238                           
  7239                           ; Switch size 1, requested type "simple"
  7240                           ; Number of cases is 3, Range of values is 0 to 2
  7241                           ; switch strategies available:
  7242                           ; Name         Instructions Cycles
  7243                           ; simple_byte           10     6 (average)
  7244                           ;	Chosen strategy is simple_byte
  7245  001698  5008               	movf	??i2_storeData^0,w,c
  7246  00169A  0A00               	xorlw	0	; case 0
  7247  00169C  B4D8               	btfsc	status,2,c
  7248  00169E  EF31  F00B         	goto	i2l3163
  7249  0016A2  0A01               	xorlw	1	; case 1
  7250  0016A4  B4D8               	btfsc	status,2,c
  7251  0016A6  EF36  F00B         	goto	i2l3165
  7252  0016AA  0A03               	xorlw	3	; case 2
  7253  0016AC  B4D8               	btfsc	status,2,c
  7254  0016AE  EF3B  F00B         	goto	i2l3167
  7255  0016B2  EF5B  F00B         	goto	i2l3173
  7256  0016B6                     i2l3173:
  7257  0016B6  FFFF               	dw	65535	; assembler added errata NOP
  7258                           
  7259                           ;usart.c: 161:     if(counter >= mexLength){
  7260  0016B8  506D               	movf	storeData@mexLength^0,w,c
  7261  0016BA  5C5E               	subwf	storeData@counter^0,w,c
  7262  0016BC  A0D8               	btfss	status,0,c
  7263  0016BE  EF63  F00B         	goto	i2u225_41
  7264  0016C2  EF66  F00B         	goto	i2u225_40
  7265  0016C6                     i2u225_41:
  7266  0016C6  FFFF               	dw	65535	; assembler added errata NOP
  7267  0016C8  EFD2  F00B         	goto	i2l562
  7268  0016CC                     i2u225_40:
  7269  0016CC  FFFF               	dw	65535	; assembler added errata NOP
  7270  0016CE                     
  7271                           ;usart.c: 162:         counter = 0;
  7272  0016CE  0E00               	movlw	0
  7273  0016D0  6E5E               	movwf	storeData@counter^0,c
  7274                           
  7275                           ;usart.c: 166:         switch(receivedMex[0]){
  7276  0016D2  EFB7  F00B         	goto	i2l3189
  7277  0016D6                     i2l3177:
  7278  0016D6  FFFF               	dw	65535	; assembler added errata NOP
  7279                           
  7280                           ;usart.c: 168:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  7281  0016D8  5061               	movf	_dataCounter^0,w,c
  7282  0016DA  0D04               	mullw	4
  7283  0016DC  0ED8               	movlw	low _dataSequence
  7284  0016DE  24F3               	addwf	243,w,c
  7285  0016E0  6ED9               	movwf	fsr2l,c
  7286  0016E2  0E00               	movlw	high _dataSequence
  7287  0016E4  20F4               	addwfc	prodh,w,c
  7288  0016E6  6EDA               	movwf	fsr2h,c
  7289  0016E8  C046  FFDF         	movff	storeData@receivedMex+1,indf2
  7290                           
  7291                           ;usart.c: 169:                 dataSequence[dataCounter].posX = receivedMex[2];
  7292  0016EC  5061               	movf	_dataCounter^0,w,c
  7293  0016EE  0D04               	mullw	4
  7294  0016F0  0ED9               	movlw	low (_dataSequence+1)
  7295  0016F2  24F3               	addwf	243,w,c
  7296  0016F4  6ED9               	movwf	fsr2l,c
  7297  0016F6  0E00               	movlw	high (_dataSequence+1)
  7298  0016F8  20F4               	addwfc	prodh,w,c
  7299  0016FA  6EDA               	movwf	fsr2h,c
  7300  0016FC  C047  FFDF         	movff	storeData@receivedMex+2,indf2
  7301                           
  7302                           ;usart.c: 170:                 dataSequence[dataCounter].posY = receivedMex[3];
  7303  001700  5061               	movf	_dataCounter^0,w,c
  7304  001702  0D04               	mullw	4
  7305  001704  0EDA               	movlw	low (_dataSequence+2)
  7306  001706  24F3               	addwf	243,w,c
  7307  001708  6ED9               	movwf	fsr2l,c
  7308  00170A  0E00               	movlw	high (_dataSequence+2)
  7309  00170C  20F4               	addwfc	prodh,w,c
  7310  00170E  6EDA               	movwf	fsr2h,c
  7311  001710  C048  FFDF         	movff	storeData@receivedMex+3,indf2
  7312                           
  7313                           ;usart.c: 171:                 dataSequence[dataCounter].rotation = receivedMex[4];
  7314  001714  5061               	movf	_dataCounter^0,w,c
  7315  001716  0D04               	mullw	4
  7316  001718  0EDB               	movlw	low (_dataSequence+3)
  7317  00171A  24F3               	addwf	243,w,c
  7318  00171C  6ED9               	movwf	fsr2l,c
  7319  00171E  0E00               	movlw	high (_dataSequence+3)
  7320  001720  20F4               	addwfc	prodh,w,c
  7321  001722  6EDA               	movwf	fsr2h,c
  7322  001724  C049  FFDF         	movff	storeData@receivedMex+4,indf2
  7323  001728                     
  7324                           ;usart.c: 173:                 dataCounter++;
  7325  001728  2A61               	incf	_dataCounter^0,f,c
  7326                           
  7327                           ;usart.c: 174:                 break;
  7328  00172A  EFD2  F00B         	goto	i2l562
  7329  00172E                     i2l559:
  7330  00172E  FFFF               	dw	65535	; assembler added errata NOP
  7331                           
  7332                           ;usart.c: 177:                 newSequenceData.L = receivedMex[1];
  7333  001730  C046  F0EC         	movff	storeData@receivedMex+1,_newSequenceData
  7334                           
  7335                           ;usart.c: 178:                 newSequenceData.W = receivedMex[2];
  7336  001734  C047  F0ED         	movff	storeData@receivedMex+2,_newSequenceData+1
  7337                           
  7338                           ;usart.c: 179:                 newSequenceData.init_posX = receivedMex[3];
  7339  001738  C048  F0EE         	movff	storeData@receivedMex+3,_newSequenceData+2
  7340                           
  7341                           ;usart.c: 180:                 newSequenceData.init_posY = receivedMex[4];
  7342  00173C  C049  F0EF         	movff	storeData@receivedMex+4,_newSequenceData+3
  7343                           
  7344                           ;usart.c: 181:                 newSequenceData.init_rot = receivedMex[5];
  7345  001740  C04A  F0F0         	movff	storeData@receivedMex+5,_newSequenceData+4
  7346                           
  7347                           ;usart.c: 182:                 newSequenceData.end_posX = receivedMex[6];
  7348  001744  C04B  F0F1         	movff	storeData@receivedMex+6,_newSequenceData+5
  7349                           
  7350                           ;usart.c: 183:                 newSequenceData.end_posY = receivedMex[7];
  7351  001748  C04C  F0F2         	movff	storeData@receivedMex+7,_newSequenceData+6
  7352                           
  7353                           ;usart.c: 184:                 newSequenceData.end_rot = receivedMex[8];
  7354  00174C  C04D  F0F3         	movff	storeData@receivedMex+8,_newSequenceData+7
  7355  001750                     
  7356                           ;usart.c: 186:                 _newSequence = 1;
  7357  001750  0E01               	movlw	1
  7358  001752  6E5F               	movwf	__newSequence^0,c
  7359                           
  7360                           ;usart.c: 187:                 break;
  7361  001754  EFD2  F00B         	goto	i2l562
  7362  001758                     i2l3183:
  7363  001758  FFFF               	dw	65535	; assembler added errata NOP
  7364                           
  7365                           ;usart.c: 190:                 _fatalError = 1;
  7366  00175A  0E01               	movlw	1
  7367  00175C  6E60               	movwf	__fatalError^0,c
  7368                           
  7369                           ;usart.c: 191:                 break;
  7370  00175E  EFD2  F00B         	goto	i2l562
  7371  001762                     i2l3185:
  7372  001762  FFFF               	dw	65535	; assembler added errata NOP
  7373                           
  7374                           ;usart.c: 194:                 printError(8);
  7375  001764  0E08               	movlw	8
  7376  001766  ECFE  F00C         	call	i2_printError
  7377                           
  7378                           ;usart.c: 195:                 break;
  7379  00176A  EFD2  F00B         	goto	i2l562
  7380  00176E                     i2l3189:
  7381  00176E  FFFF               	dw	65535	; assembler added errata NOP
  7382  001770  5045               	movf	storeData@receivedMex^0,w,c
  7383  001772  6E08               	movwf	??i2_storeData^0,c
  7384  001774  6A09               	clrf	(??i2_storeData+1)^0,c
  7385                           
  7386                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7387                           ; Switch size 1, requested type "simple"
  7388                           ; Number of cases is 1, Range of values is 0 to 0
  7389                           ; switch strategies available:
  7390                           ; Name         Instructions Cycles
  7391                           ; simple_byte            4     3 (average)
  7392                           ;	Chosen strategy is simple_byte
  7393  001776  5009               	movf	(??i2_storeData+1)^0,w,c
  7394  001778  0A00               	xorlw	0	; case 0
  7395  00177A  B4D8               	btfsc	status,2,c
  7396  00177C  EFC2  F00B         	goto	i2l4477
  7397  001780  EFB1  F00B         	goto	i2l3185
  7398  001784                     i2l4477:
  7399  001784  FFFF               	dw	65535	; assembler added errata NOP
  7400                           
  7401                           ; Switch size 1, requested type "simple"
  7402                           ; Number of cases is 3, Range of values is 0 to 2
  7403                           ; switch strategies available:
  7404                           ; Name         Instructions Cycles
  7405                           ; simple_byte           10     6 (average)
  7406                           ;	Chosen strategy is simple_byte
  7407  001786  5008               	movf	??i2_storeData^0,w,c
  7408  001788  0A00               	xorlw	0	; case 0
  7409  00178A  B4D8               	btfsc	status,2,c
  7410  00178C  EF6B  F00B         	goto	i2l3177
  7411  001790  0A01               	xorlw	1	; case 1
  7412  001792  B4D8               	btfsc	status,2,c
  7413  001794  EF97  F00B         	goto	i2l559
  7414  001798  0A03               	xorlw	3	; case 2
  7415  00179A  B4D8               	btfsc	status,2,c
  7416  00179C  EFAC  F00B         	goto	i2l3183
  7417  0017A0  EFB1  F00B         	goto	i2l3185
  7418  0017A4                     i2l562:
  7419  0017A4  FFFF               	dw	65535	; assembler added errata NOP
  7420  0017A6  0012               	return		;funcret
  7421  0017A8  FFFF               	dw	65535	; errata NOP
  7422  0017AA                     __end_ofi2_storeData:
  7423                           	callstack 0
  7424                           
  7425 ;; *************** function i2_printError *****************
  7426 ;; Defined at:
  7427 ;;		line 53 in file "usart.c"
  7428 ;; Parameters:    Size  Location     Type
  7429 ;;  errCode         1    wreg     unsigned char 
  7430 ;; Auto vars:     Size  Location     Type
  7431 ;;  errCode         1    6[COMRAM] unsigned char 
  7432 ;; Return value:  Size  Location     Type
  7433 ;;                  1    wreg      void 
  7434 ;; Registers used:
  7435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7436 ;; Tracked objects:
  7437 ;;		On entry : 0/0
  7438 ;;		On exit  : 0/0
  7439 ;;		Unchanged: 0/0
  7440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7441 ;;      Params:         0       0       0       0       0       0       0
  7442 ;;      Locals:         1       0       0       0       0       0       0
  7443 ;;      Temps:          2       0       0       0       0       0       0
  7444 ;;      Totals:         3       0       0       0       0       0       0
  7445 ;;Total ram usage:        3 bytes
  7446 ;; Hardware stack levels used:    1
  7447 ;; Hardware stack levels required when called:    1
  7448 ;; This function calls:
  7449 ;;		i2_uartTx
  7450 ;; This function is called by:
  7451 ;;		i2_storeData
  7452 ;; This function uses a non-reentrant model
  7453 ;;
  7454                           
  7455                           	psect	text46
  7456  0019FC                     __ptext46:
  7457                           	callstack 0
  7458  0019FC                     i2_printError:
  7459                           	callstack 0
  7460  0019FC  FFFF               	dw	65535	; assembler added errata NOP
  7461                           
  7462                           ;incstack = 0
  7463                           ;i2printError@errCode stored from wreg
  7464  0019FE  6E07               	movwf	i2printError@errCode^0,c
  7465  001A00                     
  7466                           ;usart.c: 55:     switch(errCode){
  7467  001A00  EF5A  F00D         	goto	i2l2911
  7468  001A04                     i2l2893:
  7469  001A04  FFFF               	dw	65535	; assembler added errata NOP
  7470                           
  7471                           ;usart.c: 57:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  7472  001A06  0EA4               	movlw	low _errString_Feed
  7473  001A08  6E01               	movwf	i2uartTx@ptr^0,c
  7474  001A0A  0E00               	movlw	high _errString_Feed
  7475  001A0C  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7476  001A0E  0E1D               	movlw	29
  7477  001A10  6E03               	movwf	i2uartTx@length^0,c
  7478  001A12  EC79  F011         	call	i2_uartTx	;wreg free
  7479                           
  7480                           ;usart.c: 58:             break;
  7481  001A16  EF89  F00D         	goto	i2l518
  7482  001A1A                     i2l2895:
  7483  001A1A  FFFF               	dw	65535	; assembler added errata NOP
  7484                           
  7485                           ;usart.c: 60:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  7486  001A1C  0E5C               	movlw	low _errString_ZEND
  7487  001A1E  6E01               	movwf	i2uartTx@ptr^0,c
  7488  001A20  0E01               	movlw	high _errString_ZEND
  7489  001A22  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7490  001A24  0E28               	movlw	40
  7491  001A26  6E03               	movwf	i2uartTx@length^0,c
  7492  001A28  EC79  F011         	call	i2_uartTx	;wreg free
  7493                           
  7494                           ;usart.c: 61:             break;
  7495  001A2C  EF89  F00D         	goto	i2l518
  7496  001A30                     i2l2897:
  7497  001A30  FFFF               	dw	65535	; assembler added errata NOP
  7498                           
  7499                           ;usart.c: 63:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  7500  001A32  0E84               	movlw	low _errString_Reset
  7501  001A34  6E01               	movwf	i2uartTx@ptr^0,c
  7502  001A36  0E01               	movlw	high _errString_Reset
  7503  001A38  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7504  001A3A  0E27               	movlw	39
  7505  001A3C  6E03               	movwf	i2uartTx@length^0,c
  7506  001A3E  EC79  F011         	call	i2_uartTx	;wreg free
  7507                           
  7508                           ;usart.c: 64:             break;
  7509  001A42  EF89  F00D         	goto	i2l518
  7510  001A46                     i2l2899:
  7511  001A46  FFFF               	dw	65535	; assembler added errata NOP
  7512                           
  7513                           ;usart.c: 66:             uartTx(&errString_Point[0], sizeof(errString_Point));
  7514  001A48  0E34               	movlw	low _errString_Point
  7515  001A4A  6E01               	movwf	i2uartTx@ptr^0,c
  7516  001A4C  0E01               	movlw	high _errString_Point
  7517  001A4E  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7518  001A50  0E28               	movlw	40
  7519  001A52  6E03               	movwf	i2uartTx@length^0,c
  7520  001A54  EC79  F011         	call	i2_uartTx	;wreg free
  7521                           
  7522                           ;usart.c: 67:             break;
  7523  001A58  EF89  F00D         	goto	i2l518
  7524  001A5C                     i2l2901:
  7525  001A5C  FFFF               	dw	65535	; assembler added errata NOP
  7526                           
  7527                           ;usart.c: 69:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  7528  001A5E  0E84               	movlw	low _errString_Bound
  7529  001A60  6E01               	movwf	i2uartTx@ptr^0,c
  7530  001A62  0E00               	movlw	high _errString_Bound
  7531  001A64  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7532  001A66  0E20               	movlw	32
  7533  001A68  6E03               	movwf	i2uartTx@length^0,c
  7534  001A6A  EC79  F011         	call	i2_uartTx	;wreg free
  7535                           
  7536                           ;usart.c: 70:             break;
  7537  001A6E  EF89  F00D         	goto	i2l518
  7538  001A72                     i2l2903:
  7539  001A72  FFFF               	dw	65535	; assembler added errata NOP
  7540                           
  7541                           ;usart.c: 72:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  7542  001A74  0E00               	movlw	low _errString_PointZ
  7543  001A76  6E01               	movwf	i2uartTx@ptr^0,c
  7544  001A78  0E01               	movlw	high _errString_PointZ
  7545  001A7A  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7546  001A7C  0E34               	movlw	52
  7547  001A7E  6E03               	movwf	i2uartTx@length^0,c
  7548  001A80  EC79  F011         	call	i2_uartTx	;wreg free
  7549                           
  7550                           ;usart.c: 73:             break;
  7551  001A84  EF89  F00D         	goto	i2l518
  7552  001A88                     i2l2905:
  7553  001A88  FFFF               	dw	65535	; assembler added errata NOP
  7554                           
  7555                           ;usart.c: 75:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  7556  001A8A  0EAB               	movlw	low _errString_Fatal
  7557  001A8C  6E01               	movwf	i2uartTx@ptr^0,c
  7558  001A8E  0E01               	movlw	high _errString_Fatal
  7559  001A90  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7560  001A92  0E26               	movlw	38
  7561  001A94  6E03               	movwf	i2uartTx@length^0,c
  7562  001A96  EC79  F011         	call	i2_uartTx	;wreg free
  7563                           
  7564                           ;usart.c: 76:             break;
  7565  001A9A  EF89  F00D         	goto	i2l518
  7566  001A9E                     i2l2907:
  7567  001A9E  FFFF               	dw	65535	; assembler added errata NOP
  7568                           
  7569                           ;usart.c: 78:             uartTx(&errString_Command[0], sizeof(errString_Command));
  7570  001AA0  0EC1               	movlw	low _errString_Command
  7571  001AA2  6E01               	movwf	i2uartTx@ptr^0,c
  7572  001AA4  0E00               	movlw	high _errString_Command
  7573  001AA6  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7574  001AA8  0E17               	movlw	23
  7575  001AAA  6E03               	movwf	i2uartTx@length^0,c
  7576  001AAC  EC79  F011         	call	i2_uartTx	;wreg free
  7577                           
  7578                           ;usart.c: 79:             break;
  7579  001AB0  EF89  F00D         	goto	i2l518
  7580  001AB4                     i2l2911:
  7581  001AB4  FFFF               	dw	65535	; assembler added errata NOP
  7582  001AB6  5007               	movf	i2printError@errCode^0,w,c
  7583  001AB8  6E05               	movwf	??i2_printError^0,c
  7584  001ABA  6A06               	clrf	(??i2_printError+1)^0,c
  7585                           
  7586                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7587                           ; Switch size 1, requested type "simple"
  7588                           ; Number of cases is 1, Range of values is 0 to 0
  7589                           ; switch strategies available:
  7590                           ; Name         Instructions Cycles
  7591                           ; simple_byte            4     3 (average)
  7592                           ;	Chosen strategy is simple_byte
  7593  001ABC  5006               	movf	(??i2_printError+1)^0,w,c
  7594  001ABE  0A00               	xorlw	0	; case 0
  7595  001AC0  B4D8               	btfsc	status,2,c
  7596  001AC2  EF65  F00D         	goto	i2l4479
  7597  001AC6  EF89  F00D         	goto	i2l518
  7598  001ACA                     i2l4479:
  7599  001ACA  FFFF               	dw	65535	; assembler added errata NOP
  7600                           
  7601                           ; Switch size 1, requested type "simple"
  7602                           ; Number of cases is 8, Range of values is 1 to 8
  7603                           ; switch strategies available:
  7604                           ; Name         Instructions Cycles
  7605                           ; simple_byte           25    13 (average)
  7606                           ;	Chosen strategy is simple_byte
  7607  001ACC  5005               	movf	??i2_printError^0,w,c
  7608  001ACE  0A01               	xorlw	1	; case 1
  7609  001AD0  B4D8               	btfsc	status,2,c
  7610  001AD2  EF02  F00D         	goto	i2l2893
  7611  001AD6  0A03               	xorlw	3	; case 2
  7612  001AD8  B4D8               	btfsc	status,2,c
  7613  001ADA  EF0D  F00D         	goto	i2l2895
  7614  001ADE  0A01               	xorlw	1	; case 3
  7615  001AE0  B4D8               	btfsc	status,2,c
  7616  001AE2  EF18  F00D         	goto	i2l2897
  7617  001AE6  0A07               	xorlw	7	; case 4
  7618  001AE8  B4D8               	btfsc	status,2,c
  7619  001AEA  EF23  F00D         	goto	i2l2899
  7620  001AEE  0A01               	xorlw	1	; case 5
  7621  001AF0  B4D8               	btfsc	status,2,c
  7622  001AF2  EF2E  F00D         	goto	i2l2901
  7623  001AF6  0A03               	xorlw	3	; case 6
  7624  001AF8  B4D8               	btfsc	status,2,c
  7625  001AFA  EF39  F00D         	goto	i2l2903
  7626  001AFE  0A01               	xorlw	1	; case 7
  7627  001B00  B4D8               	btfsc	status,2,c
  7628  001B02  EF44  F00D         	goto	i2l2905
  7629  001B06  0A0F               	xorlw	15	; case 8
  7630  001B08  B4D8               	btfsc	status,2,c
  7631  001B0A  EF4F  F00D         	goto	i2l2907
  7632  001B0E  EF89  F00D         	goto	i2l518
  7633  001B12                     i2l518:
  7634  001B12  FFFF               	dw	65535	; assembler added errata NOP
  7635  001B14  0012               	return		;funcret
  7636  001B16  FFFF               	dw	65535	; errata NOP
  7637  001B18                     __end_ofi2_printError:
  7638                           	callstack 0
  7639                           
  7640 ;; *************** function i2_uartTx *****************
  7641 ;; Defined at:
  7642 ;;		line 221 in file "usart.c"
  7643 ;; Parameters:    Size  Location     Type
  7644 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  7645 ;;		 -> errString_Command(23), errString_Fatal(38), errString_PointZ(52), errString_Bound(32), 
  7646 ;;		 -> errString_Point(40), errString_Reset(39), errString_ZEND(40), errString_Feed(29), 
  7647 ;;  length          1    2[COMRAM] unsigned char 
  7648 ;; Auto vars:     Size  Location     Type
  7649 ;;  i               1    3[COMRAM] unsigned char 
  7650 ;; Return value:  Size  Location     Type
  7651 ;;                  1    wreg      void 
  7652 ;; Registers used:
  7653 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7654 ;; Tracked objects:
  7655 ;;		On entry : 0/0
  7656 ;;		On exit  : 0/0
  7657 ;;		Unchanged: 0/0
  7658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7659 ;;      Params:         3       0       0       0       0       0       0
  7660 ;;      Locals:         1       0       0       0       0       0       0
  7661 ;;      Temps:          0       0       0       0       0       0       0
  7662 ;;      Totals:         4       0       0       0       0       0       0
  7663 ;;Total ram usage:        4 bytes
  7664 ;; Hardware stack levels used:    1
  7665 ;; This function calls:
  7666 ;;		Nothing
  7667 ;; This function is called by:
  7668 ;;		i2_printError
  7669 ;; This function uses a non-reentrant model
  7670 ;;
  7671                           
  7672                           	psect	text47
  7673  0022F2                     __ptext47:
  7674                           	callstack 0
  7675  0022F2                     i2_uartTx:
  7676                           	callstack 0
  7677  0022F2  FFFF               	dw	65535	; assembler added errata NOP
  7678  0022F4                     
  7679                           ;usart.c: 221: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 222: {;usa
      +                          rt.c: 224:     for(char i = 1; i < length; i++){
  7680  0022F4  0E01               	movlw	1
  7681  0022F6  6E04               	movwf	i2uartTx@i^0,c
  7682  0022F8  EF92  F011         	goto	i2l2597
  7683  0022FC                     i2l2593:
  7684  0022FC  FFFF               	dw	65535	; assembler added errata NOP
  7685                           
  7686                           ;usart.c: 226:         TXREG = *ptr;
  7687  0022FE  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  7688  002302  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  7689  002306  50DF               	movf	indf2,w,c
  7690  002308  6EAD               	movwf	173,c	;volatile
  7691  00230A                     i2l573:
  7692  00230A  FFFF               	dw	65535	; assembler added errata NOP
  7693  00230C  A2AC               	btfss	172,1,c	;volatile
  7694  00230E  EF8B  F011         	goto	i2u165_41
  7695  002312  EF8E  F011         	goto	i2u165_40
  7696  002316                     i2u165_41:
  7697  002316  FFFF               	dw	65535	; assembler added errata NOP
  7698  002318  EF85  F011         	goto	i2l573
  7699  00231C                     i2u165_40:
  7700  00231C  FFFF               	dw	65535	; assembler added errata NOP
  7701  00231E                     
  7702                           ;usart.c: 230:         ptr++;
  7703  00231E  4A01               	infsnz	i2uartTx@ptr^0,f,c
  7704  002320  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  7705                           
  7706                           ;usart.c: 231:     }
  7707  002322  2A04               	incf	i2uartTx@i^0,f,c
  7708  002324                     i2l2597:
  7709  002324  FFFF               	dw	65535	; assembler added errata NOP
  7710  002326  5003               	movf	i2uartTx@length^0,w,c
  7711  002328  5C04               	subwf	i2uartTx@i^0,w,c
  7712  00232A  A0D8               	btfss	status,0,c
  7713  00232C  EF9A  F011         	goto	i2u166_41
  7714  002330  EF9D  F011         	goto	i2u166_40
  7715  002334                     i2u166_41:
  7716  002334  FFFF               	dw	65535	; assembler added errata NOP
  7717  002336  EF7E  F011         	goto	i2l2593
  7718  00233A                     i2u166_40:
  7719  00233A  FFFF               	dw	65535	; assembler added errata NOP
  7720  00233C  0012               	return		;funcret
  7721  00233E  FFFF               	dw	65535	; errata NOP
  7722  002340                     __end_ofi2_uartTx:
  7723                           	callstack 0
  7724                           
  7725 ;; *************** function _writeTM0 *****************
  7726 ;; Defined at:
  7727 ;;		line 23 in file "motors.c"
  7728 ;; Parameters:    Size  Location     Type
  7729 ;;		None
  7730 ;; Auto vars:     Size  Location     Type
  7731 ;;		None
  7732 ;; Return value:  Size  Location     Type
  7733 ;;                  1    wreg      void 
  7734 ;; Registers used:
  7735 ;;		wreg, status,2
  7736 ;; Tracked objects:
  7737 ;;		On entry : 0/0
  7738 ;;		On exit  : 0/0
  7739 ;;		Unchanged: 0/0
  7740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7741 ;;      Params:         0       0       0       0       0       0       0
  7742 ;;      Locals:         0       0       0       0       0       0       0
  7743 ;;      Temps:          0       0       0       0       0       0       0
  7744 ;;      Totals:         0       0       0       0       0       0       0
  7745 ;;Total ram usage:        0 bytes
  7746 ;; Hardware stack levels used:    1
  7747 ;; This function calls:
  7748 ;;		Nothing
  7749 ;; This function is called by:
  7750 ;;		_isr
  7751 ;; This function uses a non-reentrant model
  7752 ;;
  7753                           
  7754                           	psect	text48
  7755  002448                     __ptext48:
  7756                           	callstack 0
  7757  002448                     _writeTM0:
  7758                           	callstack 0
  7759  002448  FFFF               	dw	65535	; assembler added errata NOP
  7760  00244A                     
  7761                           ;motors.c: 24:     tm0Error = 1;
  7762  00244A  0E00               	movlw	0
  7763  00244C  6E5C               	movwf	(_tm0Error+1)^0,c
  7764  00244E  0E01               	movlw	1
  7765  002450  6E5B               	movwf	_tm0Error^0,c
  7766  002452  0012               	return		;funcret
  7767  002454  FFFF               	dw	65535	; errata NOP
  7768  002456                     __end_of_writeTM0:
  7769                           	callstack 0
  7770                           
  7771 ;; *************** function _whatsTM0Limit *****************
  7772 ;; Defined at:
  7773 ;;		line 37 in file "motors.c"
  7774 ;; Parameters:    Size  Location     Type
  7775 ;;		None
  7776 ;; Auto vars:     Size  Location     Type
  7777 ;;		None
  7778 ;; Return value:  Size  Location     Type
  7779 ;;                  1    wreg      unsigned char 
  7780 ;; Registers used:
  7781 ;;		wreg, status,2
  7782 ;; Tracked objects:
  7783 ;;		On entry : 0/0
  7784 ;;		On exit  : 0/0
  7785 ;;		Unchanged: 0/0
  7786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7787 ;;      Params:         0       0       0       0       0       0       0
  7788 ;;      Locals:         0       0       0       0       0       0       0
  7789 ;;      Temps:          0       0       0       0       0       0       0
  7790 ;;      Totals:         0       0       0       0       0       0       0
  7791 ;;Total ram usage:        0 bytes
  7792 ;; Hardware stack levels used:    1
  7793 ;; This function calls:
  7794 ;;		Nothing
  7795 ;; This function is called by:
  7796 ;;		_isr
  7797 ;; This function uses a non-reentrant model
  7798 ;;
  7799                           
  7800                           	psect	text49
  7801  002510                     __ptext49:
  7802                           	callstack 0
  7803  002510                     _whatsTM0Limit:
  7804                           	callstack 0
  7805  002510  FFFF               	dw	65535	; assembler added errata NOP
  7806  002512                     
  7807                           ;motors.c: 38:     return(tm0Limit);
  7808  002512  5068               	movf	_tm0Limit^0,w,c
  7809  002514  0012               	return		;funcret
  7810  002516  FFFF               	dw	65535	; errata NOP
  7811  002518                     __end_of_whatsTM0Limit:
  7812                           	callstack 0
  7813                           
  7814 ;; *************** function _toggleStep *****************
  7815 ;; Defined at:
  7816 ;;		line 81 in file "pwm.c"
  7817 ;; Parameters:    Size  Location     Type
  7818 ;;		None
  7819 ;; Auto vars:     Size  Location     Type
  7820 ;;		None
  7821 ;; Return value:  Size  Location     Type
  7822 ;;                  1    wreg      void 
  7823 ;; Registers used:
  7824 ;;		wreg, status,2
  7825 ;; Tracked objects:
  7826 ;;		On entry : 0/0
  7827 ;;		On exit  : 0/0
  7828 ;;		Unchanged: 0/0
  7829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7830 ;;      Params:         0       0       0       0       0       0       0
  7831 ;;      Locals:         0       0       0       0       0       0       0
  7832 ;;      Temps:          0       0       0       0       0       0       0
  7833 ;;      Totals:         0       0       0       0       0       0       0
  7834 ;;Total ram usage:        0 bytes
  7835 ;; Hardware stack levels used:    1
  7836 ;; This function calls:
  7837 ;;		Nothing
  7838 ;; This function is called by:
  7839 ;;		_isr
  7840 ;; This function uses a non-reentrant model
  7841 ;;
  7842                           
  7843                           	psect	text50
  7844  0024BA                     __ptext50:
  7845                           	callstack 0
  7846  0024BA                     _toggleStep:
  7847                           	callstack 0
  7848  0024BA  FFFF               	dw	65535	; assembler added errata NOP
  7849  0024BC                     
  7850                           ;pwm.c: 82:     stepToggle = 1;
  7851  0024BC  0E01               	movlw	1
  7852  0024BE  6E66               	movwf	_stepToggle^0,c	;volatile
  7853  0024C0  0012               	return		;funcret
  7854  0024C2  FFFF               	dw	65535	; errata NOP
  7855  0024C4                     __end_of_toggleStep:
  7856                           	callstack 0
  7857                           
  7858 ;; *************** function _setTouchRel *****************
  7859 ;; Defined at:
  7860 ;;		line 86 in file "adc.c"
  7861 ;; Parameters:    Size  Location     Type
  7862 ;;		None
  7863 ;; Auto vars:     Size  Location     Type
  7864 ;;		None
  7865 ;; Return value:  Size  Location     Type
  7866 ;;                  1    wreg      void 
  7867 ;; Registers used:
  7868 ;;		wreg, status,2
  7869 ;; Tracked objects:
  7870 ;;		On entry : 0/0
  7871 ;;		On exit  : 0/0
  7872 ;;		Unchanged: 0/0
  7873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7874 ;;      Params:         0       0       0       0       0       0       0
  7875 ;;      Locals:         0       0       0       0       0       0       0
  7876 ;;      Temps:          0       0       0       0       0       0       0
  7877 ;;      Totals:         0       0       0       0       0       0       0
  7878 ;;Total ram usage:        0 bytes
  7879 ;; Hardware stack levels used:    1
  7880 ;; This function calls:
  7881 ;;		Nothing
  7882 ;; This function is called by:
  7883 ;;		_isr
  7884 ;; This function uses a non-reentrant model
  7885 ;;
  7886                           
  7887                           	psect	text51
  7888  0024C4                     __ptext51:
  7889                           	callstack 0
  7890  0024C4                     _setTouchRel:
  7891                           	callstack 0
  7892  0024C4  FFFF               	dw	65535	; assembler added errata NOP
  7893  0024C6                     
  7894                           ;adc.c: 87:     touch_rel = 1;
  7895  0024C6  0E01               	movlw	1
  7896  0024C8  6E65               	movwf	_touch_rel^0,c	;volatile
  7897  0024CA  0012               	return		;funcret
  7898  0024CC  FFFF               	dw	65535	; errata NOP
  7899  0024CE                     __end_of_setTouchRel:
  7900                           	callstack 0
  7901                           
  7902 ;; *************** function _setThermRel *****************
  7903 ;; Defined at:
  7904 ;;		line 79 in file "adc.c"
  7905 ;; Parameters:    Size  Location     Type
  7906 ;;		None
  7907 ;; Auto vars:     Size  Location     Type
  7908 ;;		None
  7909 ;; Return value:  Size  Location     Type
  7910 ;;                  1    wreg      void 
  7911 ;; Registers used:
  7912 ;;		wreg, status,2
  7913 ;; Tracked objects:
  7914 ;;		On entry : 0/0
  7915 ;;		On exit  : 0/0
  7916 ;;		Unchanged: 0/0
  7917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7918 ;;      Params:         0       0       0       0       0       0       0
  7919 ;;      Locals:         0       0       0       0       0       0       0
  7920 ;;      Temps:          0       0       0       0       0       0       0
  7921 ;;      Totals:         0       0       0       0       0       0       0
  7922 ;;Total ram usage:        0 bytes
  7923 ;; Hardware stack levels used:    1
  7924 ;; This function calls:
  7925 ;;		Nothing
  7926 ;; This function is called by:
  7927 ;;		_isr
  7928 ;; This function uses a non-reentrant model
  7929 ;;
  7930                           
  7931                           	psect	text52
  7932  0024CE                     __ptext52:
  7933                           	callstack 0
  7934  0024CE                     _setThermRel:
  7935                           	callstack 0
  7936  0024CE  FFFF               	dw	65535	; assembler added errata NOP
  7937  0024D0                     
  7938                           ;adc.c: 80:     therm_rel = 1;
  7939  0024D0  0E01               	movlw	1
  7940  0024D2  6E64               	movwf	_therm_rel^0,c	;volatile
  7941  0024D4  0012               	return		;funcret
  7942  0024D6  FFFF               	dw	65535	; errata NOP
  7943  0024D8                     __end_of_setThermRel:
  7944                           	callstack 0
  7945                           
  7946 ;; *************** function _retPeriod *****************
  7947 ;; Defined at:
  7948 ;;		line 89 in file "pwm.c"
  7949 ;; Parameters:    Size  Location     Type
  7950 ;;		None
  7951 ;; Auto vars:     Size  Location     Type
  7952 ;;		None
  7953 ;; Return value:  Size  Location     Type
  7954 ;;                  2    0[COMRAM] unsigned int 
  7955 ;; Registers used:
  7956 ;;		None
  7957 ;; Tracked objects:
  7958 ;;		On entry : 0/0
  7959 ;;		On exit  : 0/0
  7960 ;;		Unchanged: 0/0
  7961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7962 ;;      Params:         2       0       0       0       0       0       0
  7963 ;;      Locals:         0       0       0       0       0       0       0
  7964 ;;      Temps:          0       0       0       0       0       0       0
  7965 ;;      Totals:         2       0       0       0       0       0       0
  7966 ;;Total ram usage:        2 bytes
  7967 ;; Hardware stack levels used:    1
  7968 ;; This function calls:
  7969 ;;		Nothing
  7970 ;; This function is called by:
  7971 ;;		_isr
  7972 ;; This function uses a non-reentrant model
  7973 ;;
  7974                           
  7975                           	psect	text53
  7976  002456                     __ptext53:
  7977                           	callstack 0
  7978  002456                     _retPeriod:
  7979                           	callstack 0
  7980  002456  FFFF               	dw	65535	; assembler added errata NOP
  7981  002458                     
  7982                           ;pwm.c: 90:     return pwmPeriod;
  7983  002458  C055  F001         	movff	_pwmPeriod,?_retPeriod
  7984  00245C  C056  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  7985  002460  0012               	return		;funcret
  7986  002462  FFFF               	dw	65535	; errata NOP
  7987  002464                     __end_of_retPeriod:
  7988                           	callstack 0
  7989                           
  7990 ;; *************** function _increaseStep *****************
  7991 ;; Defined at:
  7992 ;;		line 73 in file "pwm.c"
  7993 ;; Parameters:    Size  Location     Type
  7994 ;;		None
  7995 ;; Auto vars:     Size  Location     Type
  7996 ;;		None
  7997 ;; Return value:  Size  Location     Type
  7998 ;;                  1    wreg      void 
  7999 ;; Registers used:
  8000 ;;		status,2, status,0
  8001 ;; Tracked objects:
  8002 ;;		On entry : 0/0
  8003 ;;		On exit  : 0/0
  8004 ;;		Unchanged: 0/0
  8005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8006 ;;      Params:         0       0       0       0       0       0       0
  8007 ;;      Locals:         0       0       0       0       0       0       0
  8008 ;;      Temps:          0       0       0       0       0       0       0
  8009 ;;      Totals:         0       0       0       0       0       0       0
  8010 ;;Total ram usage:        0 bytes
  8011 ;; Hardware stack levels used:    1
  8012 ;; This function calls:
  8013 ;;		Nothing
  8014 ;; This function is called by:
  8015 ;;		_isr
  8016 ;; This function uses a non-reentrant model
  8017 ;;
  8018                           
  8019                           	psect	text54
  8020  002518                     __ptext54:
  8021                           	callstack 0
  8022  002518                     _increaseStep:
  8023                           	callstack 0
  8024  002518  FFFF               	dw	65535	; assembler added errata NOP
  8025  00251A                     
  8026                           ;pwm.c: 74:     pwmStep++;
  8027  00251A  2A67               	incf	_pwmStep^0,f,c	;volatile
  8028  00251C  0012               	return		;funcret
  8029  00251E  FFFF               	dw	65535	; errata NOP
  8030  002520                     __end_of_increaseStep:
  8031                           	callstack 0
  8032                           
  8033                           	psect	rparam
  8034  0000                     
  8035                           	psect	temp
  8036  00006E                     btemp:
  8037                           	callstack 0
  8038  00006E                     	ds	1
  8039  0000                     int$flags	set	btemp
  8040  0000                     wtemp8	set	btemp+1
  8041  0000                     ttemp5	set	btemp+1
  8042  0000                     ttemp6	set	btemp+4
  8043  0000                     ttemp7	set	btemp+8
  8044                           
  8045                           	psect	idloc
  8046                           
  8047                           ;Config register IDLOC0 @ 0x200000
  8048                           ;	unspecified, using default values
  8049  200000                     	org	2097152
  8050  200000  FF                 	db	255
  8051                           
  8052                           ;Config register IDLOC1 @ 0x200001
  8053                           ;	unspecified, using default values
  8054  200001                     	org	2097153
  8055  200001  FF                 	db	255
  8056                           
  8057                           ;Config register IDLOC2 @ 0x200002
  8058                           ;	unspecified, using default values
  8059  200002                     	org	2097154
  8060  200002  FF                 	db	255
  8061                           
  8062                           ;Config register IDLOC3 @ 0x200003
  8063                           ;	unspecified, using default values
  8064  200003                     	org	2097155
  8065  200003  FF                 	db	255
  8066                           
  8067                           ;Config register IDLOC4 @ 0x200004
  8068                           ;	unspecified, using default values
  8069  200004                     	org	2097156
  8070  200004  FF                 	db	255
  8071                           
  8072                           ;Config register IDLOC5 @ 0x200005
  8073                           ;	unspecified, using default values
  8074  200005                     	org	2097157
  8075  200005  FF                 	db	255
  8076                           
  8077                           ;Config register IDLOC6 @ 0x200006
  8078                           ;	unspecified, using default values
  8079  200006                     	org	2097158
  8080  200006  FF                 	db	255
  8081                           
  8082                           ;Config register IDLOC7 @ 0x200007
  8083                           ;	unspecified, using default values
  8084  200007                     	org	2097159
  8085  200007  FF                 	db	255
  8086                           
  8087                           	psect	config
  8088                           
  8089                           ; Padding undefined space
  8090  300000                     	org	3145728
  8091  300000  FF                 	db	255
  8092                           
  8093                           ;Config register CONFIG1H @ 0x300001
  8094                           ;	Oscillator Selection bits
  8095                           ;	OSC = XT, XT oscillator
  8096                           ;	Oscillator System Clock Switch Enable bit
  8097                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  8098  300001                     	org	3145729
  8099  300001  21                 	db	33
  8100                           
  8101                           ;Config register CONFIG2L @ 0x300002
  8102                           ;	Power-up Timer Enable bit
  8103                           ;	PWRT = OFF, PWRT disabled
  8104                           ;	Brown-out Reset Enable bit
  8105                           ;	BOR = OFF, Brown-out Reset disabled
  8106                           ;	Brown-out Reset Voltage bits
  8107                           ;	BORV = 20, VBOR set to 2.0V
  8108  300002                     	org	3145730
  8109  300002  0D                 	db	13
  8110                           
  8111                           ;Config register CONFIG2H @ 0x300003
  8112                           ;	Watchdog Timer Enable bit
  8113                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8114                           ;	Watchdog Timer Postscale Select bits
  8115                           ;	WDTPS = 128, 1:128
  8116  300003                     	org	3145731
  8117  300003  0E                 	db	14
  8118                           
  8119                           ; Padding undefined space
  8120  300004                     	org	3145732
  8121  300004  FF                 	db	255
  8122                           
  8123                           ;Config register CONFIG3H @ 0x300005
  8124                           ;	CCP2 Mux bit
  8125                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  8126  300005                     	org	3145733
  8127  300005  00                 	db	0
  8128                           
  8129                           ;Config register CONFIG4L @ 0x300006
  8130                           ;	Stack Full/Underflow Reset Enable bit
  8131                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  8132                           ;	Low Voltage ICSP Enable bit
  8133                           ;	LVP = OFF, Low Voltage ICSP disabled
  8134                           ;	Background Debugger Enable bit
  8135                           ;	DEBUG = 0x1, unprogrammed default
  8136  300006                     	org	3145734
  8137  300006  80                 	db	128
  8138                           
  8139                           ; Padding undefined space
  8140  300007                     	org	3145735
  8141  300007  FF                 	db	255
  8142                           
  8143                           ;Config register CONFIG5L @ 0x300008
  8144                           ;	Code Protection bit
  8145                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  8146                           ;	Code Protection bit
  8147                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  8148                           ;	Code Protection bit
  8149                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  8150                           ;	Code Protection bit
  8151                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  8152  300008                     	org	3145736
  8153  300008  0F                 	db	15
  8154                           
  8155                           ;Config register CONFIG5H @ 0x300009
  8156                           ;	Boot Block Code Protection bit
  8157                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  8158                           ;	Data EEPROM Code Protection bit
  8159                           ;	CPD = OFF, Data EEPROM not code protected
  8160  300009                     	org	3145737
  8161  300009  C0                 	db	192
  8162                           
  8163                           ;Config register CONFIG6L @ 0x30000A
  8164                           ;	Write Protection bit
  8165                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  8166                           ;	Write Protection bit
  8167                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  8168                           ;	Write Protection bit
  8169                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  8170                           ;	Write Protection bit
  8171                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  8172  30000A                     	org	3145738
  8173  30000A  0F                 	db	15
  8174                           
  8175                           ;Config register CONFIG6H @ 0x30000B
  8176                           ;	Configuration Register Write Protection bit
  8177                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  8178                           ;	Boot Block Write Protection bit
  8179                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  8180                           ;	Data EEPROM Write Protection bit
  8181                           ;	WRTD = OFF, Data EEPROM not write protected
  8182  30000B                     	org	3145739
  8183  30000B  E0                 	db	224
  8184                           
  8185                           ;Config register CONFIG7L @ 0x30000C
  8186                           ;	Table Read Protection bit
  8187                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  8188                           ;	Table Read Protection bit
  8189                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  8190                           ;	Table Read Protection bit
  8191                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  8192                           ;	Table Read Protection bit
  8193                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  8194  30000C                     	org	3145740
  8195  30000C  0F                 	db	15
  8196                           
  8197                           ;Config register CONFIG7H @ 0x30000D
  8198                           ;	Boot Block Table Read Protection bit
  8199                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  8200  30000D                     	org	3145741
  8201  30000D  40                 	db	64
  8202                           tosu	equ	0xFFF
  8203                           tosh	equ	0xFFE
  8204                           tosl	equ	0xFFD
  8205                           stkptr	equ	0xFFC
  8206                           pclatu	equ	0xFFB
  8207                           pclath	equ	0xFFA
  8208                           pcl	equ	0xFF9
  8209                           tblptru	equ	0xFF8
  8210                           tblptrh	equ	0xFF7
  8211                           tblptrl	equ	0xFF6
  8212                           tablat	equ	0xFF5
  8213                           prodh	equ	0xFF4
  8214                           prodl	equ	0xFF3
  8215                           indf0	equ	0xFEF
  8216                           postinc0	equ	0xFEE
  8217                           postdec0	equ	0xFED
  8218                           preinc0	equ	0xFEC
  8219                           plusw0	equ	0xFEB
  8220                           fsr0h	equ	0xFEA
  8221                           fsr0l	equ	0xFE9
  8222                           wreg	equ	0xFE8
  8223                           indf1	equ	0xFE7
  8224                           postinc1	equ	0xFE6
  8225                           postdec1	equ	0xFE5
  8226                           preinc1	equ	0xFE4
  8227                           plusw1	equ	0xFE3
  8228                           fsr1h	equ	0xFE2
  8229                           fsr1l	equ	0xFE1
  8230                           bsr	equ	0xFE0
  8231                           indf2	equ	0xFDF
  8232                           postinc2	equ	0xFDE
  8233                           postdec2	equ	0xFDD
  8234                           preinc2	equ	0xFDC
  8235                           plusw2	equ	0xFDB
  8236                           fsr2h	equ	0xFDA
  8237                           fsr2l	equ	0xFD9
  8238                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    14
    Data        302
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     68     109
    BANK0           128     11     127
    BANK1           256      5     214
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 52
		 -> errString_Command(BANK0[23]), errString_Fatal(BANK1[38]), errString_PointZ(BANK1[52]), errString_Bound(BANK0[32]), 
		 -> errString_Point(BANK1[40]), errString_Reset(BANK1[39]), errString_ZEND(BANK1[40]), errString_Feed(BANK0[29]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 


Critical Paths under _main in COMRAM

    _main->_executeData
    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_enableMotor
    _resetPosition->_setDecay
    _resetPosition->_setDirection
    _resetPosition->_setStep
    _touchTherm->_setDirection
    _touchObject->_setDirection
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _moveToPoint->_setDirection
    _liftArm->_setDirection

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _main->_executeData
    _executeData->_rotateObj

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   17254
                                              0 BANK1      5     5      0
                           _clearTM0
                        _enableMotor
                        _executeData
                         _fatalError
                     _getNewSequence
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                   _resetNewSequence
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    1604
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0    2807
                                             21 COMRAM     3     3      0
                        _enableMotor
                          _resetStep
                           _setDecay
                       _setDirection
                            _setStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _setStep                                              4     3      1     487
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _setDecay                                             4     3      1     394
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _enableMotor                                          4     3      1     664
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _resetNewSequence                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0   10095
                                             66 COMRAM     2     2      0
                                              8 BANK0      3     3      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0    1058
                          _resetStep
                         _resetTherm
                        _returnTherm
                       _setDirection
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0    1058
                          _resetStep
                         _resetTouch
                        _returnTouch
                       _setDirection
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            8     8      0    3129
                                              0 BANK0      8     8      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         14     6      8    3508
                                             21 COMRAM    14     6      8
                          _resetStep
                       _setDirection
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0    1058
                          _resetStep
                       _setDirection
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _setDirection                                         4     3      1    1024
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0     552
                                             10 COMRAM     7     7      0
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _enableMotor
   _executeData
     _getData
     _liftArm
       _resetStep
       _setDirection
       _stepMade
     _moveToPoint
       _resetStep
       _setDirection
       _stepCounter
       _stepMade
     _pickObject
     _releaseObj
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _touchObject
       _resetStep
       _resetTouch
       _returnTouch
       _setDirection
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTherm
       _returnTherm
       _setDirection
       _startADC
       _stepMade
       _stopADC
   _fatalError
   _getNewSequence
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetNewSequence
   _resetPosition
     _enableMotor
     _resetStep
     _setDecay
     _setDirection
     _setStep
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      5      D6       7       83.6%
BITBANK0            80      0       0       4        0.0%
BANK0               80      B      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     44      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C2      15        0.0%
DATA                 0      0     1C2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Mon Feb 01 12:38:27 2021

                                        ___fldiv@aexp 0038  
                                        ___fldiv@bexp 0037  
                               __end_of_interruptInit 237A  
                                        ___fldiv@sign 0030  
                                                  l74 239C  
                                                  l83 1DCC  
                                                  l68 2444  
                                                  l92 2172  
                                                 l101 21E6  
                                                 l110 20FE  
                                                 l200 1FDC  
                                                 l120 127C  
                                                 l121 12AC  
                                                 l210 2006  
                                                 l202 1FA0  
                                                 l203 1FEE  
                                                 l131 1300  
                                                 l115 1248  
                                                 l220 1F56  
                                                 l124 12B0  
                                                 l116 135C  
                                                 l141 0CFE  
                                                 l125 12E0  
                                                 l117 1278  
                                                 l206 1FC0  
                                                 l310 13DE  
                                                 l151 0B98  
                                                 l223 250C  
                                                 l135 1372  
                                                 l312 14DC  
                                                 l321 2356  
                                                 l162 0C80  
                                                 l226 2504  
                                                 l402 2498  
                                                 l322 236C  
                                                 l155 0BEA  
                                                 l323 2376  
                                                 l149 0CE6  
                                                 l309 13DC  
                                                 l166 0CA0  
                                                 l158 0C36  
                                                 l182 1CF4  
                                                 l174 1C54  
                                                 l183 1CF8  
                                                 l335 0F88  
                                                 l351 23F4  
                                                 l360 24B6  
                                                 l192 1B82  
                                                 l504 23E0  
                                                 l521 24DC  
                                                 l354 2408  
                                                 l178 1C74  
                                                 l530 24EC  
                                                 l196 1C02  
                                                 l188 1B62  
                                                 l524 24E4  
                                                 l348 241A  
                                                 l357 2484  
                                                 l197 1C06  
                                                 l533 248E  
                                                 l390 24FC  
                                                 l518 19F6  
                                                 l527 24F4  
                                                 l384 23C2  
                                                 l393 2478  
                                                 l538 2248  
                                                 l562 1642  
                                                 l387 24A2  
                                                 l396 246C  
                                                 l565 2436  
                                                 l573 22BC  
                                                 l399 24AC  
                                                 l559 15CC  
                                                 l568 2428  
                                                 l577 22EE  
                                                 l877 18DA  
                                                 _isr 0008  
                                         _touchObject 1C0A  
                                                 prod 000FF3  
                                                 wreg 000FE8  
                                        ___fltol@exp1 0042  
                                         main@errCode 01D3  
                                                l1162 0A3C  
                                                l1242 1098  
                                                l1235 0FEC  
                                                l1164 0854  
                                                l1173 08AA  
                                                l1238 117E  
                                                l1175 093A  
                                                l1167 080E  
                                                l1176 0922  
                                                l1249 1104  
                                                l4001 2342  
                                                l4011 23B0  
                                                l4003 2354  
                                                l4101 0DAE  
                                                l4013 23B2  
                                                l4005 236A  
                                                l4021 240E  
                                                l4111 0E30  
                                                l4103 0DBE  
                                                l4015 23B4  
                                                l4007 23A2  
                                                l4023 2416  
                                                l4031 23C8  
                                                l3401 2494  
                                                l4113 0E52  
                                                l4105 0DD2  
                                                l4121 0E6A  
                                                l4017 23BE  
                                                l4009 23AA  
                                                l4025 23E6  
                                                l4033 23DC  
                                                l4201 142A  
                                                l3411 0612  
                                                l4131 0ED2  
                                                l4115 0E56  
                                                l4107 0E0C  
                                                l4123 0EB0  
                                                l4035 24F2  
                                                l4043 2420  
                                                l4019 23C0  
                                                l3403 22A6  
                                                l4051 1500  
                                                l4027 23E8  
                                                l4211 1460  
                                                l4203 142C  
                                                l3501 0896  
                                                l3421 065C  
                                                l3413 061E  
                                                l4141 0F78  
                                                l4133 0F52  
                                                l4125 0EC6  
                                                l4117 0E5E  
                                                l4109 0E1C  
                                                l3405 22AE  
                                                l4053 150A  
                                                l4061 1554  
                                                l4029 23EC  
                                                l4221 149E  
                                                l4213 148A  
                                                l4205 1432  
                                                l3511 08E6  
                                                l3503 08A8  
                                                l3431 0692  
                                                l3423 066C  
                                                l3415 0630  
                                                l4143 0F7C  
                                                l4135 0F64  
                                                l4127 0ECA  
                                                l4039 24EA  
                                                l3407 22D0  
                                                l4071 15F6  
                                                l4063 156C  
                                                l4055 1514  
                                                l4047 14EA  
                                                l4231 14D2  
                                                l4223 14A4  
                                                l4215 148C  
                                                l4207 1438  
                                                l3521 096E  
                                                l3513 0918  
                                                l3505 08BC  
                                                l3441 06D6  
                                                l3433 0698  
                                                l3425 0670  
                                                l3417 0632  
                                                l3601 101A  
                                                l4137 0F6C  
                                                l4129 0ECE  
                                                l4145 0F84  
                                                l4153 24DA  
                                                l4161 21F2  
                                                l3409 22D6  
                                                l4073 1600  
                                                l4065 1574  
                                                l4049 14FA  
                                                l4225 14A8  
                                                l4217 1490  
                                                l4209 144C  
                                                l3363 217C  
                                                l3531 09F2  
                                                l3523 0998  
                                                l3507 08D0  
                                                l3451 0720  
                                                l3443 06E6  
                                                l3435 06AA  
                                                l3419 0648  
                                                l3427 0678  
                                                l3611 107E  
                                                l4139 0F74  
                                                l4091 0D12  
                                                l4163 2232  
                                                l4155 21EE  
                                                l4067 15C6  
                                                l4059 151E  
                                                l4219 1498  
                                                l4227 14B0  
                                                l4171 1376  
                                                l3365 2180  
                                                l3373 21B0  
                                                l3381 23FE  
                                                l3701 0AB4  
                                                l3541 0A30  
                                                l3533 0A0E  
                                                l3517 0950  
                                                l3525 099C  
                                                l3509 08D4  
                                                l3453 0730  
                                                l3461 0752  
                                                l3445 06EA  
                                                l3437 06AC  
                                                l3429 068A  
                                                l3621 10F2  
                                                l3613 1082  
                                                l3605 102E  
                                                l4093 0D16  
                                                l4165 2234  
                                                l4069 15EE  
                                                l4077 160C  
                                                l4229 14CA  
                                                l4181 1388  
                                                l4173 1376  
                                                l3367 2190  
                                                l3383 2402  
                                                l3711 0AFA  
                                                l3703 0AC0  
                                                l3535 0A14  
                                                l3527 09BC  
                                                l3519 095C  
                                                l3471 0798  
                                                l3463 0768  
                                                l3455 0738  
                                                l3439 06C2  
                                                l3447 06F2  
                                                l3551 17C6  
                                                l3631 1158  
                                                l3623 1118  
                                                l3615 108E  
                                                l3607 1038  
                                                l3391 249E  
                                                l4095 0D50  
                                                l4167 24E2  
                                                l4087 248A  
                                                l4191 13D6  
                                                l4183 1398  
                                                l4175 137C  
                                                l3369 21A0  
                                                l3721 0B16  
                                                l3713 0B06  
                                                l3705 0AC4  
                                                l3537 0A26  
                                                l3529 09D2  
                                                l3481 07E6  
                                                l3473 07A8  
                                                l3465 0768  
                                                l3457 073E  
                                                l3449 0704  
                                                l3561 181E  
                                                l3633 116A  
                                                l3625 111A  
                                                l3617 10D0  
                                                l3609 1046  
                                                l3393 2472  
                                                l3801 1CC2  
                                                l4097 0D60  
                                                l4089 0D06  
                                                l3641 1D04  
                                                l4193 13E2  
                                                l4185 139C  
                                                l4177 1380  
                                                l3387 24B2  
                                                l3379 23FA  
                                                l3731 0B44  
                                                l3723 0B1E  
                                                l3715 0B0A  
                                                l3707 0AE8  
                                                l3539 0A2C  
                                                l3491 0840  
                                                l3483 07FA  
                                                l3475 07B8  
                                                l3571 1850  
                                                l3563 1822  
                                                l3555 17DC  
                                                l3635 116C  
                                                l3627 1120  
                                                l3619 10DE  
                                                l3395 24FA  
                                                l3811 1CEC  
                                                l3803 1CC6  
                                                l4099 0D74  
                                                l3643 1D32  
                                                l4195 13FC  
                                                l4187 139E  
                                                l4179 1384  
                                                l3389 247E  
                                                l3741 0BB6  
                                                l3733 0B50  
                                                l3725 0B22  
                                                l3717 0B10  
                                                l3709 0AF2  
                                                l3493 0850  
                                                l3485 080C  
                                                l3477 07C8  
                                                l3469 077C  
                                                l3581 1880  
                                                l3573 185C  
                                                l3565 1834  
                                                l3557 180C  
                                                l3549 17AC  
                                                l3629 1144  
                                                l3397 24A8  
                                                l3805 1CC8  
                                                l3821 1B2E  
                                                l3661 212C  
                                                l3645 1D66  
                                                l3901 18E4  
                                                l4461 1622  
                                                l4197 1408  
                                                l4189 13B8  
                                                l3751 0C3E  
                                                l3735 0B66  
                                                l3727 0B28  
                                                l3719 0B14  
                                                l3495 086A  
                                                l3487 081A  
                                                l3479 07D0  
                                                l3583 188E  
                                                l3575 1866  
                                                l3559 180E  
                                                l3807 1CD6  
                                                l3399 2466  
                                                l3831 1B56  
                                                l3823 1B32  
                                                l3815 1B1A  
                                                l4471 0E88  
                                                l3655 2108  
                                                l3671 2094  
                                                l3639 1D00  
                                                l4463 19AE  
                                                l3911 1940  
                                                l3903 18E8  
                                                l4199 141A  
                                                l4473 21C6  
                                                l3753 0C54  
                                                l3745 0BEE  
                                                l3737 0B8E  
                                                l3729 0B40  
                                                l3761 0CBE  
                                                l3497 0884  
                                                l3489 083E  
                                                l3585 18A2  
                                                l3593 0F90  
                                                l3809 1CDA  
                                                l3833 1B66  
                                                l3841 1BCA  
                                                l3825 1B34  
                                                l3817 1B24  
                                                l3657 210C  
                                                l3665 213C  
                                                l3673 2098  
                                                l3681 20C8  
                                                l4465 1DAC  
                                                l3649 1D96  
                                                l3913 1956  
                                                l3905 18FE  
                                                l3921 1998  
                                                l3931 243C  
                                                l3763 0CD4  
                                                l3747 0C04  
                                                l3739 0BA0  
                                                l3691 0A76  
                                                l3499 088A  
                                                l3587 18B8  
                                                l3595 0FA4  
                                                l3851 1BE8  
                                                l3843 1BD0  
                                                l3835 1B84  
                                                l3827 1B3C  
                                                l3819 1B26  
                                                l3659 211C  
                                                l4467 20DE  
                                                l3675 20A8  
                                                l3915 196C  
                                                l3907 1914  
                                                l4459 1534  
                                                l3861 1F68  
                                                l3765 0CEC  
                                                l3757 0C84  
                                                l3749 0C2C  
                                                l3589 18C8  
                                                l3597 0FB6  
                                                l3781 1C24  
                                                l3773 1C0C  
                                                l3853 1BFA  
                                                l3845 1BD4  
                                                l3829 1B54  
                                                l3837 1B9E  
                                                l3941 2390  
                                                l3933 237C  
                                                l4469 2152  
                                                l3677 20B8  
                                                l3917 1982  
                                                l3909 192A  
                                                l3927 242E  
                                                l3871 1F94  
                                                l3863 1F70  
                                                l3767 0CF8  
                                                l3759 0CA4  
                                                l3695 0A7E  
                                                l3687 0A44  
                                                l3599 0FFE  
                                                l3791 1C58  
                                                l3783 1C26  
                                                l3775 1C16  
                                                l3847 1BD6  
                                                l3839 1BBA  
                                                l3943 2394  
                                                l3935 2384  
                                                l3951 1186  
                                                l3881 2004  
                                                l3873 1FA4  
                                                l3865 1F74  
                                                l3857 1F5C  
                                                l3769 0CFC  
                                                l3697 0AA2  
                                                l3689 0A5E  
                                                l3793 1C76  
                                                l3785 1C2E  
                                                l3777 1C18  
                                                l3849 1BE4  
                                                l3945 2396  
                                                l3937 2388  
                                                l3961 120C  
                                                l3953 11FE  
                                                l3875 1FC2  
                                                l3867 1F7A  
                                                l3859 1F66  
                                                l3699 0AAC  
                                                l3891 1F10  
                                                l3787 1C46  
                                                l3795 1C90  
                                                l3779 1C20  
                                                l3947 2398  
                                                l3939 238C  
                                                l3971 123C  
                                                l3963 1214  
                                                l3955 1202  
                                                l3877 1FF4  
                                                l3869 1F92  
                                                l3893 1F36  
                                                l3885 1EAA  
                                                l3797 1CAC  
                                                l3789 1C48  
                                                l3949 239A  
                                                l3981 12C4  
                                                l3973 125C  
                                                l3965 1218  
                                                l3957 1206  
                                                l3879 2000  
                                                l3895 1F3A  
                                                l3887 1EFC  
                                                l3799 1CBC  
                                                l3991 1336  
                                                l3983 12D6  
                                                l3975 126E  
                                                l3967 121E  
                                                l3959 120A  
                                                l3897 250A  
                                                l3889 1F0A  
                                                l3993 134A  
                                                l3985 12E4  
                                                l3977 1290  
                                                l3969 1236  
                                                l3899 2502  
                                                l3995 1362  
                                                l3987 1306  
                                                l3979 12A2  
                                                ?_isr 0001  
                                                l3997 136E  
                                                l3989 1320  
                                                u3000 0C2A  
                                                u3001 0C24  
                                                u3010 0C52  
                                                u3011 0C4C  
                                                u3020 0C7A  
                                                u3100 1CAA  
                                                u3021 0C74  
                                                u3101 1CA4  
                                                u3030 0C9E  
                                                u3110 1CBC  
                                                u3031 0C98  
                                                u3111 1CB6  
                                                u3200 1FBE  
                                                u3040 0CBE  
                                                u3120 1CEA  
                                                _LATD 000F8C  
                                                u3201 1FB8  
                                                u3041 0CB8  
                                                u3121 1CE4  
                                                u3210 1FDC  
                                                u3050 0CD2  
                                                u3130 1B52  
                                                u3211 1FD6  
                                                u3051 0CCC  
                                                u3131 1B4C  
                                                u3220 1FEE  
                                                u3060 0CE6  
                                                u2500 071E  
                                                u3140 1B80  
                                                u3300 12D6  
                                                u2420 22CE  
                                                u2405 219A  
                                                u3221 1FE8  
                                                u3061 0CE0  
                                                u2501 0718  
                                                u3141 1B7A  
                                                u3301 12D0  
                                                u2421 22C8  
                                                u2406 219C  
                                                u2510 0766  
                                                u3230 1F54  
                                                u3070 1C44  
                                                u3150 1B9E  
                                                u3310 12FE  
                                                u2430 22EC  
                                                u2415 21AA  
                                                u2511 0760  
                                                u3231 1F4E  
                                                u3071 1C3E  
                                                u3151 1B98  
                                                u3311 12F8  
                                                u2431 22E6  
                                                u2416 21AC  
                                                u2600 0916  
                                                u2520 07E4  
                                                u2440 062E  
                                                u3080 1C72  
                                                u3160 1BB8  
                                                u3400 0F62  
                                                u3320 1320  
                                                u3240 1234  
                                                u2601 0910  
                                                u2521 07DE  
                                                u2441 0628  
                                                u3081 1C6C  
                                                u3161 1BB2  
                                                u3401 0F5C  
                                                u3321 131A  
                                                u3241 122E  
                                                u2610 0934  
                                                u2530 080A  
                                                u2450 0646  
                                                u3090 1C90  
                                                u3170 1BCA  
                                                u3330 1334  
                                                u3250 125A  
                                                u3410 2246  
                                                u2611 092E  
                                                u2531 0804  
                                                u2451 0640  
                                                u3091 1C8A  
                                                u3171 1BC4  
                                                u3331 132E  
                                                u3251 1254  
                                                u3411 2240  
                                                u2620 094E  
                                                u2540 083C  
                                                u2460 065A  
                                                u2700 184A  
                                                u3180 1BF8  
                                                u3340 1348  
                                                u3260 126E  
                                                u3420 13B6  
                                                u2621 0948  
                                                u2541 0836  
                                                u2461 0654  
                                                u2701 1844  
                                                u3181 1BF2  
                                                u3341 1342  
                                                u3261 1268  
                                                u3421 13B0  
                                                u3190 1F90  
                                                u2630 096C  
                                                u2550 0868  
                                                u2470 06A8  
                                                u2710 187A  
                                                u3350 135C  
                                                u3270 128E  
                                                u3430 13FA  
                                                u3191 1F8A  
                                                u2631 0966  
                                                u2551 0862  
                                                u2471 06A2  
                                                u2711 1874  
                                                u3351 1356  
                                                u3271 1288  
                                                u3431 13F4  
                                                u2640 09BA  
                                                u2560 0882  
                                                u2480 06C0  
                                                u2720 18A2  
                                                u2800 1104  
                                                u3360 2352  
                                                u3280 12A2  
                                                u3440 14C8  
                                                u2641 09B4  
                                                u2561 087C  
                                                u2481 06BA  
                                                u2721 189C  
                                                u2801 10FE  
                                                u3361 234C  
                                                u3281 129C  
                                                u3441 14C2  
                                                u2650 09F0  
                                                u2570 08A6  
                                                u2490 06D4  
                                                u2730 18B6  
                                                u2810 1116  
                                                u3370 2368  
                                                u3290 12C2  
                                                u2395 218A  
                                                u2651 09EA  
                                                u2571 08A0  
                                                u2491 06CE  
                                                u2731 18B0  
                                                u2811 1110  
                                                u3371 2362  
                                                u3291 12BC  
                                                u2396 218C  
                                                u2900 0A5C  
                                                u2660 0A24  
                                                u2580 08CE  
                                                u2820 1156  
                                                u2740 0FA2  
                                                u3380 156A  
                                                u2901 0A56  
                                                u2661 0A1E  
                                                u2581 08C8  
                                                u2821 1150  
                                                u2741 0F9C  
                                                u3381 1564  
                                                u2910 0A76  
                                                u2590 08E4  
                                                u2670 17C4  
                                                u2830 1168  
                                                u2750 0FB4  
                                                u3390 0EC4  
                                                u2911 0A70  
                                                u2591 08DE  
                                                u2671 17BE  
                                                u2831 1162  
                                                u2751 0FAE  
                                                u3391 0EBE  
                                                u2920 0AA0  
                                                u2680 1800  
                                                u2760 1018  
                                                u2921 0A9A  
                                                u2761 1012  
                                                u2930 0AE6  
                                                u2690 1832  
                                                u2770 1078  
                                                u2931 0AE0  
                                                u2691 182C  
                                                u2771 1072  
                                                u2940 0B3E  
                                                u2780 10CA  
                                                u2941 0B38  
                                                u2685 17F4  
                                                u2781 10C4  
                                                u2845 2116  
                                                u2950 0B64  
                                                u2790 10F0  
                                                u2846 2118  
                                                u2951 0B5E  
                                                u2791 10EA  
                                                u2855 2126  
                                                u2960 0B8C  
                                                u2856 2128  
                                                u2961 0B86  
                                                u2865 2136  
                                                u2970 0BB4  
                                                u2866 2138  
                                         main@newData 01D4  
                                                u2971 0BAE  
                                                u2875 20A2  
                                                u2980 0BE4  
                                                u2876 20A4  
                                                u2981 0BDE  
                                                u2885 20B2  
                                                u2990 0C02  
                                                u2886 20B4  
                                                u2991 0BFC  
                                                u2895 20C2  
                                                u2896 20C4  
                                                i2l71 2514  
                                                i2l65 2452  
                                                _TMR0 000FD6  
                                                _TMR2 000FCC  
                                 __end_ofi2_storeData 17AA  
                                                _main 1376  
                                                _maxX 006B  
                                                _maxY 0069  
                                __end_ofi2_printError 1B18  
                                                fsr2h 000FDA  
                                                indf2 000FDF  
                                                fsr1l 000FE1  
                                                fsr2l 000FD9  
                                                btemp 006E  
                                                prodh 000FF4  
                                                prodl 000FF3  
                                                start 016A  
                                     ___fldiv@new_exp 0031  
                                        ___param_bank 000000  
                                     ??_whatsTM0Limit 0001  
                                               ??_isr 000B  
                                        ?_executeData 0001  
                                     executeData@data 00FD  
                                       ___fltol@sign1 0041  
                                               ?_main 0001  
                                     __end_of___fldiv 0A42  
                                     __end_of___fltol 18E0  
                                               i2l405 24D4  
                                               i2l408 24CA  
                                               i2l363 251C  
                                               i2l366 24C0  
                                               i2l518 1B12  
                                               i2l463 0152  
                                               i2l369 2460  
                                               i2l562 17A4  
                                               i2l573 230A  
                                               i2l559 172E  
                                               i2l577 233C  
                                rotateObj@rotSequence 0080  
                                               _SPBRG 000FAF  
                                               _TRISA 000F92  
                                               _TRISB 000F93  
                                               _TRISC 000F94  
                                               _TRISD 000F95  
                                               _TXREG 000FAD  
                                     __end_of_getData 243A  
                                     i2storeData@data 000A  
                                     __end_of_initADC 23C6  
                                        ?_newSequence 0001  
                                     __end_of_liftArm 200A  
                                     __end_of_readSeq 24E8  
                                        stepMade@temp 0014  
                                     __end_of_setStep 1DD2  
                                               tablat 000FF5  
                                      i2uartTx@length 0003  
                                     __end_of_stopADC 2500  
                                               ttemp5 006F  
                                               ttemp6 0072  
                                               ttemp7 0076  
                                               status 000FD8  
                                               wtemp8 006F  
                                    __end_ofi2_uartTx 2340  
                                       ?_increaseStep 0001  
                                     __initialization 200A  
                              __size_of_initPinMotors 0026  
                                        __end_of_main 14E6  
                            resetPosition@keepMovingX 0016  
                            resetPosition@keepMovingY 0017  
                            resetPosition@keepMovingZ 0018  
                                              ??_main 01D1  
                                       __activetblptr 000002  
                                         i2_storeData 1648  
                                __size_of_enableMotor 0074  
                                         isr@tm0Count 0063  
                                        ?_setThermRel 0001  
                                              _ADRESH 000FC4  
                                              _ADRESL 000FC3  
                                        ?_moveToPoint 0016  
                                              i2l2101 251A  
                                              i2l2103 24BC  
                                              i2l2107 24D0  
                                              i2l2109 24C6  
                                              i2l3301 00C6  
                                              i2l3311 012E  
                                              i2l3303 00DA  
                                              i2l3161 165C  
                                              i2l3305 00E2  
                                              i2l3313 0132  
                                              i2l3163 1662  
                                              i2l3171 1680  
                                              i2l3315 0146  
                                              i2l3307 0108  
                                              i2l3157 2458  
                                              i2l3181 1750  
                                              i2l3165 166C  
                                              i2l3173 16B6  
                                              i2l3317 014C  
                                              i2l3309 0114  
                                              i2l3183 1758  
                                              i2l3175 16CE  
                                              i2l3167 1676  
                                              i2l3159 164C  
                                              i2l3271 0030  
                                              i2l3185 1762  
                                              i2l3177 16D6  
                                              i2l3273 0032  
                                              i2l3281 0058  
                                              i2l3179 1728  
                                              i2l3291 0092  
                                              i2l3283 006C  
                                              i2l3275 004E  
                                              i2l3267 001C  
                                              i2l2901 1A5C  
                                              i2l3189 176E  
                                              i2l3293 00A6  
                                              i2l3285 006E  
                                              i2l3277 0050  
                                              i2l3269 002E  
                                              i2l1855 244A  
                                              i2l2591 22F4  
                                              i2l2903 1A72  
                                              i2l2911 1AB4  
                                              i2l3295 00B8  
                                              i2l3287 0072  
                                              i2l3279 0054  
                                              i2l2593 22FC  
                                              i2l2905 1A88  
                                              i2l3297 00BC  
                                              i2l3289 0090  
                                              i2l1859 2512  
                                              i2l2595 231E  
                                              i2l2907 1A9E  
                                              i2l3299 00C0  
                                              i2l2597 2324  
                                              i2l2891 1A00  
                                              i2l4475 1696  
                                              i2l2893 1A04  
                                              i2l4477 1784  
                                              i2l4479 1ACA  
                                              i2l2895 1A1A  
                                              i2l2897 1A30  
                                              i2l2899 1A46  
                                              _RCREG1 000FAE  
                                        ?_setTouchRel 0001  
                                       setDecay@decay 0015  
                                    __end_of___xxtofl 1184  
                                       setDecay@motor 0012  
                                    __end_of_clearTM0 2448  
                                    _errString_PointZ 0100  
                                      ??_increaseStep 0001  
                                           ??___fldiv 0028  
                                           ??___fltol 003D  
                                    __end_of_tim0Init 241E  
                                    __end_of_tim2Init 23F8  
                                              clear_0 2070  
                                              clear_1 207C  
                                           ??_getData 0014  
                                              _uartTx 22A4  
                                    __end_of_setDecay 2104  
                                           ??_initADC 0012  
                                           ??_liftArm 0016  
                                           ??_readSeq 0012  
                                        __pdataCOMRAM 0069  
                               __end_of_resetPosition 1376  
                                        __mediumconst 0000  
                                           ??_setStep 0013  
                                              tblptrh 000FF7  
                                              tblptrl 000FF6  
                                              tblptru 000FF8  
                                        ?_returnTherm 0012  
                                    __end_of_startADC 24A6  
                                    __end_of_stepMade 240C  
                                       _initPinMotors 237A  
                                        ?_returnTouch 0012  
                                           ??_stopADC 0012  
                               __size_ofi2_printError 011C  
                                    __end_of_writeTM0 2456  
                           __size_of_resetNewSequence 000A  
                                        ___xxtofl@arg 001C  
                                        ___xxtofl@exp 001B  
                                        ___xxtofl@val 0012  
                                          __accesstop 0080  
                             __end_of__initialization 2082  
                                        _dataSequence 00D8  
                                       ___rparam_used 000001  
                                          ___fltol@f1 0039  
                                        ?_stepCounter 0012  
                                         i2uartTx@ptr 0001  
                                      __pcstackCOMRAM 0001  
                                        __newSequence 005F  
                                        __pidataBANK0 224C  
                                        __pidataBANK1 1DD2  
                                     isr@single_cycle 0051  
                                __size_of_executeData 0288  
                                       ?_setDirection 0012  
                                        i2_printError 19FC  
                                        ?_touchObject 0001  
                                      _errString_ZEND 015C  
                                      _errString_Feed 00A4  
                                      ?_initPinMotors 0001  
                                           ?i2_uartTx 0001  
                                          __pbssBANK0 00D8  
                                __size_of_newSequence 0008  
                                          _feeder1Pos 060D  
                                          _feeder2Pos 060B  
                                          _feeder3Pos 0609  
                             __size_of_getNewSequence 000E  
                                          _fatalError 24F0  
                                  __size_of_reduceSeq 0008  
                                  __size_of_retPeriod 000E  
                                      _touch_pressure 0607  
                                  __size_of_shiftData 0060  
                                  __size_of_resetStep 000A  
                                             _ADC_res 0053  
                                             ?_uartTx 0012  
                                      ??_setDirection 0013  
                                           ?___xxtofl 0012  
                                __end_of_increaseStep 2520  
                                           ?_clearTM0 0001  
                                          ??i2_uartTx 0004  
                                  __size_of_rotateObj 00B6  
                                   _errString_Command 00C1  
                                  __size_of_usartInit 001E  
                              __size_of_interruptInit 003A  
                                __size_of_setThermRel 000A  
                                  __size_of_storeData 0162  
                                           ?_tim0Init 0001  
                                           ?_tim2Init 0012  
                                __size_of_moveToPoint 02C2  
                                storeData@receivedMex 0045  
                                     _newSequenceData 00EC  
                                           ?_setDecay 0012  
                                __size_of_setTouchRel 000A  
                                         setStep@step 0015  
                                             __Hparam 0000  
                                             __Lparam 0000  
                              __end_of_touch_pressure 0609  
                                             ___fldiv 0610  
                                           ?_startADC 0001  
                                           ?_stepMade 0012  
                                             ___fltol 17AA  
                                        __psmallconst 0600  
                                             __pcinit 200A  
                               __end_of_whatsTM0Limit 2518  
                                             _getData 242C  
                                             __ramtop 0600  
                                           ?_writeTM0 0001  
                                          _pickObject 2508  
                                             __ptext0 1376  
                                             __ptext1 23C6  
                                             __ptext2 23E4  
                                             __ptext3 240C  
                                             __ptext4 14E6  
                                             __ptext5 18E0  
                                             __ptext6 22A4  
                                             __ptext7 21EC  
                                             __ptext8 1184  
                                             __ptext9 1CFC  
                                     __size_of_uartTx 004E  
                                           _T0CONbits 000FD5  
                                             _initADC 23A0  
                                     ??_initPinMotors 0012  
                                             _liftArm 1F5A  
                                           _T2CONbits 000FCA  
                                             _readSeq 24E0  
                                        __size_of_isr 0162  
                                          ??___xxtofl 0016  
                                        ?i2_storeData 0001  
                                          ??_clearTM0 0012  
                                             _setStep 1CFC  
                                             _pwmStep 0067  
                                             _stopADC 24F8  
                                   __end_of_reduceSeq 24E0  
                                   __end_of_retPeriod 2464  
                                          _releaseObj 2500  
                                __size_of_returnTherm 000C  
                                end_of_initialization 2082  
                                __size_of_returnTouch 000C  
                                    _resetNewSequence 2488  
                                    rotateObj@totStep 00F8  
                                   __end_of_shiftData 224C  
                                             isr@temp 0011  
                                   __end_of_resetStep 24BA  
                                          ??_tim0Init 0012  
                                       __Lmediumconst 0000  
                                          ??_tim2Init 0014  
                                    storeData@command 005D  
                                    storeData@counter 005E  
                                          ??_setDecay 0013  
                                    enableMotor@motor 0012  
                                          _resetTherm 2492  
                                          _resetTouch 24A6  
                                             uartTx@i 0015  
                                         ?_fatalError 0001  
                                           _RCSTAbits 000FAB  
                                             postdec1 000FE5  
                                   __end_of_rotateObj 1F5A  
                                             postinc0 000FEE  
                                             postinc1 000FE6  
                                             postinc2 000FDE  
                                          ??_startADC 0012  
                                          ??_stepMade 0014  
                                __size_of_stepCounter 000C  
                                       _interruptInit 2340  
                                   __end_of_usartInit 23E4  
                                   __end_of_storeData 1648  
                          __end_ofrotateObj@stepAngle 0605  
                                          ??_writeTM0 0001  
                                           _PORTDbits 000F83  
                                          _printError 18E0  
                                           _PORTEbits 000F84  
                                       ??_enableMotor 0013  
                                 i2printError@errCode 0007  
                                          _toggleStep 24BA  
                                       ___xxtofl@sign 001A  
                                           _TRISCbits 000F94  
                                           _TRISDbits 000F95  
                                           _TRISEbits 000F96  
                                         ___fldiv@grs 0033  
                                         ___fldiv@rem 002C  
                                __size_of_touchObject 00F2  
                                          _stepToggle 0066  
                                          _touchTherm 1B18  
                                __end_of_setDirection 21EC  
                                           _TXSTAbits 000FAC  
                                      _getNewSequence 241E  
                                      ?_interruptInit 0001  
                                       __pidataCOMRAM 2520  
                               __size_of_increaseStep 0008  
                                         ?_pickObject 0001  
                                         __fatalError 0060  
                                      __end_of_uartTx 22F2  
                                       moveToPoint@x1 0016  
                                       moveToPoint@x2 001A  
                                       moveToPoint@y1 0018  
                                       moveToPoint@y2 001C  
                                 start_initialization 200A  
                                           i2uartTx@i 0004  
                                         __end_of_isr 016A  
                                 __size_of_fatalError 0008  
                                 __end_of_enableMotor 2178  
                                         ?_releaseObj 0001  
                                   __size_ofi2_uartTx 004E  
                              __end_of_getNewSequence 242C  
                                     _errString_Fatal 01AB  
                                     _errString_Bound 0084  
                                         ?_resetTherm 0001  
                                     _errString_Reset 0184  
                                         ?_resetTouch 0001  
                                     _errString_Point 0134  
                                        _increaseStep 2518  
                              __size_of_resetPosition 01F2  
                                       ??_executeData 0043  
                                         __pdataBANK0 0080  
                                         __pdataBANK1 0100  
                                         _dataCounter 0061  
                                            ??_uartTx 0015  
                              moveToPoint@keepMovingX 0020  
                              moveToPoint@keepMovingY 0021  
                                         ?_printError 0001  
                                           ___fldiv@a 0024  
                                           ___fldiv@b 0020  
                                      _therm_pressure 0605  
                                         ?_toggleStep 0001  
                                         __pbssCOMRAM 0045  
                                       __pcstackBANK0 00F4  
                                       __pcstackBANK1 01D1  
                                       ??_newSequence 0012  
                                   __size_of___xxtofl 01F8  
                                __size_ofi2_storeData 0162  
                                   __size_of_clearTM0 000E  
                                     ?_getNewSequence 0012  
                                         ?_touchTherm 0001  
                                 __size_of_pickObject 0008  
                                  executeData@errCode 00FC  
                                   __size_of_tim0Init 0012  
                                   __size_of_tim2Init 0014  
                                     ??_interruptInit 0012  
                                   __size_of_setDecay 0074  
                                           __pintcode 0008  
                                            ?___fldiv 0020  
                                            ?___fltol 0039  
                            __end_of_resetNewSequence 2492  
                                 __size_of_releaseObj 0008  
                                       storeData@data 001B  
                                            ?_getData 0012  
                                   __size_of_startADC 000A  
                                   __size_of_stepMade 0014  
                              __end_of_therm_pressure 0607  
                                            ?_initADC 0001  
                                         __smallconst 0600  
                                            ?_liftArm 0001  
                                         _enableMotor 2104  
                                            ?_readSeq 0001  
                                   __size_of_writeTM0 000E  
                                 __end_of_executeData 0F8C  
                                          shiftData@i 0014  
                                            ?_setStep 0012  
                                 __size_of_resetTherm 000A  
                                           _newFeeder 0057  
                                       _resetPosition 1184  
                                 __size_of_resetTouch 000A  
                                       ??_setThermRel 0001  
                                            ?_stopADC 0001  
                               __size_of_setDirection 0074  
                                       ??_moveToPoint 001E  
                                       ??_setTouchRel 0001  
                                 __end_of_newSequence 24F0  
                                           _reduceSeq 24D8  
                                            _LATAbits 000F89  
                                            _LATBbits 000F8A  
                                           _retPeriod 2456  
                                            _LATCbits 000F8B  
                                            _LATDbits 000F8C  
                                 __size_of_printError 011C  
                                            _IPR1bits 000F9F  
                                            _PIE1bits 000F9D  
                                           _shiftData 21EC  
                                            i2u230_40 004C  
                                            i2u230_41 0046  
                                            i2u231_40 006A  
                                            i2u231_41 0064  
                                            i2u232_40 008E  
                                            i2u232_41 0088  
                                            i2u225_40 16CC  
                                            i2u233_40 00A4  
                                            i2u225_41 16C6  
                                            i2u233_41 009E  
                                            i2u234_40 00B6  
                                            i2u234_41 00B0  
                                            i2u235_40 00D8  
                                            i2u235_41 00D2  
                                            i2u236_40 0106  
                                            i2u236_41 0100  
                                           _resetStep 24B0  
                                            i2u165_40 231C  
                                            i2u237_40 012C  
                                            i2u229_40 002C  
                                            i2u165_41 2316  
                                            i2u237_41 0126  
                                            i2u229_41 0026  
                                            i2u166_40 233A  
                                            i2u238_40 0144  
                                            i2u166_41 2334  
                                            i2u238_41 013E  
                                            _PIR1bits 000F9E  
                                 __size_of_toggleStep 000A  
                                        ??_fatalError 0012  
                                           _posVector 004E  
                                            _RCONbits 000FD0  
                                           _therm_rel 0064  
                                           _pwmPeriod 0055  
                                   setDirection@motor 0012  
                                           _rotateObj 1EA4  
                                          _ADCON0bits 000FC2  
                                          _ADCON1bits 000FC1  
                                 __size_of_touchTherm 00F2  
                                        _setDirection 2178  
                                           _usartInit 23C6  
                                           _touch_rel 0065  
                                  __end_of_feeder1Pos 060F  
                                  __end_of_feeder2Pos 060D  
                                  __end_of_feeder3Pos 060B  
                                           _storeData 14E6  
                                      ?_resetPosition 0001  
                               __end_of_initPinMotors 23A0  
                                       ??_returnTherm 0014  
                                       ??_returnTouch 0014  
                                            i2_uartTx 22F2  
                                           copy_data0 201E  
                                           copy_data1 203E  
                                           copy_data2 205E  
                                  __end_of_fatalError 24F8  
                                  rotateObj@stepAngle 0601  
                                          ?_reduceSeq 0001  
                                          ?_retPeriod 0001  
                                        setStep@motor 0012  
                                          rotateObj@i 00FA  
                              __size_of_whatsTM0Limit 0008  
                                 __end_of_setThermRel 24D8  
                                 __end_of_moveToPoint 0D04  
                                   printError@errCode 0018  
                                          ?_shiftData 0001  
                                       ??_stepCounter 0014  
                                            __Hrparam 0000  
                                          ?_resetStep 0001  
                                 __end_of_setTouchRel 24CE  
                                            __Lrparam 0000  
                                    __size_of___fldiv 0432  
                                    __size_of___fltol 0136  
                                         _executeData 0D04  
                                        ??_pickObject 0012  
                                          ?_rotateObj 0001  
                            moveToPoint@MOT1Direction 0022  
                                       ?i2_printError 0001  
                                    __size_of_getData 000E  
                            moveToPoint@MOT2Direction 0023  
                                       ??_touchObject 0016  
                                          ?_usartInit 0001  
                                    __size_of_initADC 0026  
                                            ___xxtofl 0F8C  
                                    __size_of_liftArm 00B0  
                                          ?_storeData 0001  
                                            _clearTM0 243A  
                                    __size_of_readSeq 0008  
                                  storeData@mexLength 006D  
                                            _tm0Error 005B  
                                            _tm0Limit 0068  
                                    __size_of_setStep 00D6  
                                         _newSequence 24E8  
                                            __ptext10 2090  
                                            __ptext11 2104  
                                            __ptext20 24F0  
                                            __ptext12 2488  
                                            __ptext21 0D04  
                                            __ptext13 24D8  
                                            __ptext30 1EA4  
                                            __ptext22 1B18  
                                            __ptext14 24E0  
                                            __ptext31 0F8C  
                                            __ptext23 2464  
                                            __ptext15 24E8  
                                            __ptext40 2178  
                                            __ptext32 17AA  
                                            __ptext24 2492  
                                            __ptext16 2340  
                                            __ptext41 24B0  
                                            __ptext33 0610  
                                            __ptext25 1C0A  
                                            __ptext17 237A  
                                            __ptext50 24BA  
                                            __ptext42 242C  
                                            __ptext34 2500  
                                            __ptext26 24F8  
                                            __ptext18 23A0  
                                            __ptext51 24C4  
                                            __ptext43 243A  
                                            __ptext35 2508  
                                            __ptext27 249C  
                                            __ptext19 241E  
                                            __ptext52 24CE  
                                            __ptext36 0A42  
                                            __ptext28 2470  
                                            __ptext53 2456  
                                            __ptext45 1648  
                                            __ptext37 247C  
                                            __ptext29 24A6  
                                            __ptext54 2518  
                                            __ptext46 19FC  
                                            __ptext38 1F5A  
                                            __ptext47 22F2  
                                            __ptext39 23F8  
                                            __ptext48 2448  
                                            __ptext49 2510  
                                        ??_releaseObj 0012  
                                    __size_of_stopADC 0008  
                                 __end_of_returnTherm 2470  
                                 __end_of_returnTouch 247C  
                                            _tim0Init 240C  
                                            _tim2Init 23E4  
                                       __size_of_main 0170  
                                            _setDecay 2090  
                                  __end_of_pickObject 2510  
                                        ??_resetTherm 0012  
                                        ??_resetTouch 0012  
                                           uartTx@ptr 0012  
                                            _rotAngle 0059  
                                     isr@completeStep 0062  
                                            int$flags 006E  
                                            _startADC 249C  
                                            _stepMade 23F8  
                                 __end_of_stepCounter 2488  
                                   rotateObj@rotAngle 00F7  
                                      ??i2_printError 0005  
                                  __end_of_releaseObj 2508  
                                            _writeTM0 2448  
                                        ??_printError 0016  
                                       _whatsTM0Limit 2510  
                                     ??_resetPosition 0016  
                                  tim2Init@_pwmPeriod 0012  
                                          _INTCONbits 000FF2  
                                        ??_toggleStep 0001  
                                    ??_getNewSequence 0014  
                                  __end_of_resetTherm 249C  
                                  __end_of_resetTouch 24B0  
                                         _setThermRel 24CE  
                                        uartTx@length 0014  
                                         _moveToPoint 0A42  
                                 __end_of_touchObject 1CFC  
                                            intlevel2 2526  
                                   enableMotor@enable 0015  
                                        ??_touchTherm 0016  
                                         _setTouchRel 24C4  
                                         ??_reduceSeq 0012  
                                         ??_retPeriod 0003  
                                          _RCSTA1bits 000FAB  
                                  __end_of_printError 19FC  
                               setDirection@direction 0015  
                                         ??_shiftData 0012  
                                         ??_resetStep 0012  
                                  __end_of_toggleStep 24C4  
                                   ?_resetNewSequence 0001  
                                      ?_whatsTM0Limit 0001  
                                         ??_rotateObj 00F4  
                                  ??_resetNewSequence 0012  
                                  __end_of_touchTherm 1C0A  
                                        ?_enableMotor 0012  
                                         ??_usartInit 0012  
                                       ??i2_storeData 0008  
                                         ??_storeData 0019  
                                         _returnTherm 2464  
                                         _returnTouch 2470  
                                         _stepCounter 247C  
